{"sha": "3669677425f249c163201c4760d05abb3cf4e6bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2OTY3NzQyNWYyNDljMTYzMjAxYzQ3NjBkMDVhYmIzY2Y0ZTZiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-28T13:49:49Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-31T17:40:38Z"}, "message": "aarch64: Add Armv8.6 SVE matrix multiply support\n\nThis mostly follows existing practice.  Perhaps the only noteworthy\nthing is that svmmla is split across three extensions (i8mm, f32mm\nand f64mm), any of which can be enabled independently.  The easiest\nway of coping with this seemed to be to add a fourth svmmla entry\nfor base SVE, but with no type suffixes.  This means that the\noverloaded function is always available for C, but never successfully\nresolves without the appropriate target feature.\n\n2020-01-31  Dennis Zhang  <dennis.zhang@arm.com>\n\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n\t    Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/invoke.texi (f32mm): Document new AArch64 -march= extension.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_SVE_MATMUL_INT8, __ARM_FEATURE_SVE_MATMUL_FP32 and\n\t__ARM_FEATURE_SVE_MATMUL_FP64 as appropriate.  Don't define\n\t__ARM_FEATURE_MATMUL_FP64.\n\t* config/aarch64/aarch64-option-extensions.def (fp, simd, fp16)\n\t(sve): Add AARCH64_FL_F32MM to the list of extensions that should\n\tbe disabled at the same time.\n\t(f32mm): New extension.\n\t* config/aarch64/aarch64.h (AARCH64_FL_F32MM): New macro.\n\t(AARCH64_FL_F64MM): Bump to the next bit up.\n\t(AARCH64_ISA_F32MM, TARGET_SVE_I8MM, TARGET_F32MM, TARGET_SVE_F32MM)\n\t(TARGET_SVE_F64MM): New macros.\n\t* config/aarch64/iterators.md (SVE_MATMULF): New mode iterator.\n\t(UNSPEC_FMMLA, UNSPEC_SMATMUL, UNSPEC_UMATMUL, UNSPEC_USMATMUL)\n\t(UNSPEC_TRN1Q, UNSPEC_TRN2Q, UNSPEC_UZP1Q, UNSPEC_UZP2Q, UNSPEC_ZIP1Q)\n\t(UNSPEC_ZIP2Q): New unspeccs.\n\t(DOTPROD_US_ONLY, PERMUTEQ, MATMUL, FMMLA): New int iterators.\n\t(optab, sur, perm_insn): Handle the new unspecs.\n\t(sve_fp_op): Handle UNSPEC_FMMLA.  Resort.\n\t* config/aarch64/aarch64-sve.md (@aarch64_sve_ld1ro<mode>): Use\n\tTARGET_SVE_F64MM instead of separate tests.\n\t(@aarch64_<DOTPROD_US_ONLY:sur>dot_prod<vsi2qi>): New pattern.\n\t(@aarch64_<DOTPROD_US_ONLY:sur>dot_prod_lane<vsi2qi>): Likewise.\n\t(@aarch64_sve_add_<MATMUL:optab><vsi2qi>): Likewise.\n\t(@aarch64_sve_<FMMLA:sve_fp_op><mode>): Likewise.\n\t(@aarch64_sve_<PERMUTEQ:optab><mode>): Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_s_float): New macro.\n\t(TYPES_s_float_hsd_integer, TYPES_s_float_sd_integer): Use it.\n\t(TYPES_s_signed): New macro.\n\t(TYPES_s_integer): Use it.\n\t(TYPES_d_float): New macro.\n\t(TYPES_d_data): Use it.\n\t* config/aarch64/aarch64-sve-builtins-shapes.h (mmla): Declare.\n\t(ternary_intq_uintq_lane, ternary_intq_uintq_opt_n, ternary_uintq_intq)\n\t(ternary_uintq_intq_lane, ternary_uintq_intq_opt_n): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc (mmla_def): New class.\n\t(svmmla): New shape.\n\t(ternary_resize2_opt_n_base): Add TYPE_CLASS2 and TYPE_CLASS3\n\ttemplate parameters.\n\t(ternary_resize2_lane_base): Likewise.\n\t(ternary_resize2_base): New class.\n\t(ternary_qq_lane_base): Likewise.\n\t(ternary_intq_uintq_lane_def): Likewise.\n\t(ternary_intq_uintq_lane): New shape.\n\t(ternary_intq_uintq_opt_n_def): New class\n\t(ternary_intq_uintq_opt_n): New shape.\n\t(ternary_qq_lane_def): Inherit from ternary_qq_lane_base.\n\t(ternary_uintq_intq_def): New class.\n\t(ternary_uintq_intq): New shape.\n\t(ternary_uintq_intq_lane_def): New class.\n\t(ternary_uintq_intq_lane): New shape.\n\t(ternary_uintq_intq_opt_n_def): New class.\n\t(ternary_uintq_intq_opt_n): New shape.\n\t* config/aarch64/aarch64-sve-builtins-base.h (svmmla, svsudot)\n\t(svsudot_lane, svtrn1q, svtrn2q, svusdot, svusdot_lane, svusmmla)\n\t(svuzp1q, svuzp2q, svzip1q, svzip2q): Declare.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (svdot_lane_impl):\n\tGeneralize to...\n\t(svdotprod_lane_impl): ...this new class.\n\t(svmmla_impl, svusdot_impl): New classes.\n\t(svdot_lane): Update to use svdotprod_lane_impl.\n\t(svmmla, svsudot, svsudot_lane, svtrn1q, svtrn2q, svusdot)\n\t(svusdot_lane, svusmmla, svuzp1q, svuzp2q, svzip1q, svzip2q): New\n\tfunctions.\n\t* config/aarch64/aarch64-sve-builtins-base.def (svmmla): New base\n\tfunction, with no types defined.\n\t(svmmla, svusmmla, svsudot, svsudot_lane, svusdot, svusdot_lane): New\n\tAARCH64_FL_I8MM functions.\n\t(svmmla): New AARCH64_FL_F32MM function.\n\t(svld1ro): Depend only on AARCH64_FL_F64MM, not on AARCH64_FL_V8_6.\n\t(svmmla, svtrn1q, svtrn2q, svuz1q, svuz2q, svzip1q, svzip2q): New\n\tAARCH64_FL_F64MM function.\n\t(REQUIRED_EXTENSIONS):\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_aarch64_asm_i8mm_ok)\n\t(check_effective_target_aarch64_asm_f32mm_ok): New target selectors.\n\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Test handling of\n\t__ARM_FEATURE_SVE_MATMUL_INT8, __ARM_FEATURE_SVE_MATMUL_FP32 and\n\t__ARM_FEATURE_SVE_MATMUL_FP64.\n\t* gcc.target/aarch64/sve/acle/asm/test_sve_acle.h (TEST_TRIPLE_Z):\n\t(TEST_TRIPLE_Z_REV2, TEST_TRIPLE_Z_REV, TEST_TRIPLE_LANE_REG)\n\t(TEST_TRIPLE_ZX): New macros.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c: Remove +sve and\n\trely on +f64mm to enable it.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/mmla_f32.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/mmla_f64.c: Likewise,\n\t* gcc.target/aarch64/sve/acle/asm/mmla_s32.c: Likewise,\n\t* gcc.target/aarch64/sve/acle/asm/mmla_u32.c: Likewise,\n\t* gcc.target/aarch64/sve/acle/asm/sudot_lane_s32.c: Likewise,\n\t* gcc.target/aarch64/sve/acle/asm/sudot_s32.c: Likewise,\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/usdot_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/usdot_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/usmmla_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_f16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_s8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_u64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_u8.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_1.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_2.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_3.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_4.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_5.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_6.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/mmla_7.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_lane_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_opt_n_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_lane_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_opt_n_1.c:\n\tLikewise.", "tree": {"sha": "a2b09c6d1244066a351b1b3a77270e2b66402566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b09c6d1244066a351b1b3a77270e2b66402566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3669677425f249c163201c4760d05abb3cf4e6bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3669677425f249c163201c4760d05abb3cf4e6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3669677425f249c163201c4760d05abb3cf4e6bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3669677425f249c163201c4760d05abb3cf4e6bc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2171a9207f51bc486ed9c502cb4da706f594615e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2171a9207f51bc486ed9c502cb4da706f594615e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2171a9207f51bc486ed9c502cb4da706f594615e"}], "stats": {"total": 3869, "additions": 3798, "deletions": 71}, "files": [{"sha": "c45b1b6605f1dab23446878328c6e2438f65fcd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,3 +1,82 @@\n+2020-01-31  Dennis Zhang  <dennis.zhang@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/invoke.texi (f32mm): Document new AArch64 -march= extension.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_SVE_MATMUL_INT8, __ARM_FEATURE_SVE_MATMUL_FP32 and\n+\t__ARM_FEATURE_SVE_MATMUL_FP64 as appropriate.  Don't define\n+\t__ARM_FEATURE_MATMUL_FP64.\n+\t* config/aarch64/aarch64-option-extensions.def (fp, simd, fp16)\n+\t(sve): Add AARCH64_FL_F32MM to the list of extensions that should\n+\tbe disabled at the same time.\n+\t(f32mm): New extension.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_F32MM): New macro.\n+\t(AARCH64_FL_F64MM): Bump to the next bit up.\n+\t(AARCH64_ISA_F32MM, TARGET_SVE_I8MM, TARGET_F32MM, TARGET_SVE_F32MM)\n+\t(TARGET_SVE_F64MM): New macros.\n+\t* config/aarch64/iterators.md (SVE_MATMULF): New mode iterator.\n+\t(UNSPEC_FMMLA, UNSPEC_SMATMUL, UNSPEC_UMATMUL, UNSPEC_USMATMUL)\n+\t(UNSPEC_TRN1Q, UNSPEC_TRN2Q, UNSPEC_UZP1Q, UNSPEC_UZP2Q, UNSPEC_ZIP1Q)\n+\t(UNSPEC_ZIP2Q): New unspeccs.\n+\t(DOTPROD_US_ONLY, PERMUTEQ, MATMUL, FMMLA): New int iterators.\n+\t(optab, sur, perm_insn): Handle the new unspecs.\n+\t(sve_fp_op): Handle UNSPEC_FMMLA.  Resort.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_sve_ld1ro<mode>): Use\n+\tTARGET_SVE_F64MM instead of separate tests.\n+\t(@aarch64_<DOTPROD_US_ONLY:sur>dot_prod<vsi2qi>): New pattern.\n+\t(@aarch64_<DOTPROD_US_ONLY:sur>dot_prod_lane<vsi2qi>): Likewise.\n+\t(@aarch64_sve_add_<MATMUL:optab><vsi2qi>): Likewise.\n+\t(@aarch64_sve_<FMMLA:sve_fp_op><mode>): Likewise.\n+\t(@aarch64_sve_<PERMUTEQ:optab><mode>): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_s_float): New macro.\n+\t(TYPES_s_float_hsd_integer, TYPES_s_float_sd_integer): Use it.\n+\t(TYPES_s_signed): New macro.\n+\t(TYPES_s_integer): Use it.\n+\t(TYPES_d_float): New macro.\n+\t(TYPES_d_data): Use it.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.h (mmla): Declare.\n+\t(ternary_intq_uintq_lane, ternary_intq_uintq_opt_n, ternary_uintq_intq)\n+\t(ternary_uintq_intq_lane, ternary_uintq_intq_opt_n): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc (mmla_def): New class.\n+\t(svmmla): New shape.\n+\t(ternary_resize2_opt_n_base): Add TYPE_CLASS2 and TYPE_CLASS3\n+\ttemplate parameters.\n+\t(ternary_resize2_lane_base): Likewise.\n+\t(ternary_resize2_base): New class.\n+\t(ternary_qq_lane_base): Likewise.\n+\t(ternary_intq_uintq_lane_def): Likewise.\n+\t(ternary_intq_uintq_lane): New shape.\n+\t(ternary_intq_uintq_opt_n_def): New class\n+\t(ternary_intq_uintq_opt_n): New shape.\n+\t(ternary_qq_lane_def): Inherit from ternary_qq_lane_base.\n+\t(ternary_uintq_intq_def): New class.\n+\t(ternary_uintq_intq): New shape.\n+\t(ternary_uintq_intq_lane_def): New class.\n+\t(ternary_uintq_intq_lane): New shape.\n+\t(ternary_uintq_intq_opt_n_def): New class.\n+\t(ternary_uintq_intq_opt_n): New shape.\n+\t* config/aarch64/aarch64-sve-builtins-base.h (svmmla, svsudot)\n+\t(svsudot_lane, svtrn1q, svtrn2q, svusdot, svusdot_lane, svusmmla)\n+\t(svuzp1q, svuzp2q, svzip1q, svzip2q): Declare.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svdot_lane_impl):\n+\tGeneralize to...\n+\t(svdotprod_lane_impl): ...this new class.\n+\t(svmmla_impl, svusdot_impl): New classes.\n+\t(svdot_lane): Update to use svdotprod_lane_impl.\n+\t(svmmla, svsudot, svsudot_lane, svtrn1q, svtrn2q, svusdot)\n+\t(svusdot_lane, svusmmla, svuzp1q, svuzp2q, svzip1q, svzip2q): New\n+\tfunctions.\n+\t* config/aarch64/aarch64-sve-builtins-base.def (svmmla): New base\n+\tfunction, with no types defined.\n+\t(svmmla, svusmmla, svsudot, svsudot_lane, svusdot, svusdot_lane): New\n+\tAARCH64_FL_I8MM functions.\n+\t(svmmla): New AARCH64_FL_F32MM function.\n+\t(svld1ro): Depend only on AARCH64_FL_F64MM, not on AARCH64_FL_V8_6.\n+\t(svmmla, svtrn1q, svtrn2q, svuz1q, svuz2q, svzip1q, svzip2q): New\n+\tAARCH64_FL_F64MM function.\n+\t(REQUIRED_EXTENSIONS):\n+\n 2020-01-31  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (addv64di3_exec): Allow one '0' in each"}, {"sha": "e7b4ed7baed15770cac9c2d54deb68b284980f7e", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -149,6 +149,12 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \tbits = 0;\n       builtin_define_with_int_value (\"__ARM_FEATURE_SVE_BITS\", bits);\n     }\n+  aarch64_def_or_undef (TARGET_SVE_I8MM,\n+\t\t\t\"__ARM_FEATURE_SVE_MATMUL_INT8\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE_F32MM,\n+\t\t\t\"__ARM_FEATURE_SVE_MATMUL_FP32\", pfile);\n+  aarch64_def_or_undef (TARGET_SVE_F64MM,\n+\t\t\t\"__ARM_FEATURE_SVE_MATMUL_FP64\", pfile);\n   aarch64_def_or_undef (TARGET_SVE2, \"__ARM_FEATURE_SVE2\", pfile);\n   aarch64_def_or_undef (TARGET_SVE2_AES, \"__ARM_FEATURE_SVE2_AES\", pfile);\n   aarch64_def_or_undef (TARGET_SVE2_BITPERM,\n@@ -171,7 +177,6 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_MEMTAG, \"__ARM_FEATURE_MEMORY_TAGGING\", pfile);\n \n   aarch64_def_or_undef (TARGET_I8MM, \"__ARM_FEATURE_MATMUL_INT8\", pfile);\n-  aarch64_def_or_undef (TARGET_F64MM, \"__ARM_FEATURE_MATMUL_FP64\", pfile);\n   aarch64_def_or_undef (TARGET_BF16_SIMD,\n \t\t\t\"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC\", pfile);\n   aarch64_def_or_undef (TARGET_BF16_FP,"}, {"sha": "8257df9c7fdf800dd3c8dde13035ac1bb4c94142", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -53,27 +53,28 @@\n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n    \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n-   \"sve2-bitperm\", \"i8mm\", \"f64mm\", and \"bf16\".  */\n+   \"sve2-bitperm\", \"i8mm\", \"f32mm\", \"f64mm\", and \"bf16\".  */\n AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | \\\n \t\t      AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | \\\n \t\t      AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n \t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n \t\t      AARCH64_FL_SVE2_BITPERM | AARCH64_FL_I8MM | \\\n-\t\t      AARCH64_FL_F64MM | AARCH64_FL_BF16, false, \"fp\")\n+\t\t      AARCH64_FL_F32MM | AARCH64_FL_F64MM | AARCH64_FL_BF16,\n+\t\t       false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n    \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\",\n-   \"sve2-bitperm\", \"i8mm\", and \"f64mm\".  */\n+   \"sve2-bitperm\", \"i8mm\", \"f32mm\" and \"f64mm\".  */\n AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, \\\n \t\t      AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | \\\n \t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | \\\n \t\t      AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | \\\n \t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n \t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM | \\\n-\t\t      AARCH64_FL_I8MM | AARCH64_FL_F64MM, false, \\\n-\t\t      \"asimd\")\n+\t\t      AARCH64_FL_I8MM | AARCH64_FL_F32MM | AARCH64_FL_F64MM, \\\n+\t\t      false, \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n    Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\",\n@@ -93,12 +94,13 @@ AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, false, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n    Disabling \"fp16\" disables \"fp16\", \"fp16fml\", \"sve\", \"sve2\",\n-   \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", \"sve2-bitperm\", and \"f64mm\".  */\n+   \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", \"sve2-bitperm\", \"f32mm\" and\n+    \"f64mm\".  */\n AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, \\\n-\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_F64MM | \\\n-\t\t      AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n-\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n-\t\t      AARCH64_FL_SVE2_BITPERM, false, \\\n+\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_F32MM | \\\n+\t\t      AARCH64_FL_F64MM | AARCH64_FL_SVE2 | \\\n+\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n+\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \\\n \t\t      \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n@@ -141,13 +143,13 @@ AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, \\\n \t\t      AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfhm\")\n \n /* Enabling \"sve\" also enables \"fp16\", \"fp\" and \"simd\".\n-   Disabling \"sve\" disables \"sve\", \"f64mm\", \"sve2\", \"sve2-aes\", \"sve2-sha3\",\n-   \"sve2-sm4\" and \"sve2-bitperm\".  */\n+   Disabling \"sve\" disables \"sve\", \"f32mm\", \"f64mm\", \"sve2\", \"sve2-aes\",\n+   \"sve2-sha3\", \"sve2-sm4\" and \"sve2-bitperm\".  */\n AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | \\\n-\t\t      AARCH64_FL_F16, AARCH64_FL_F64MM | AARCH64_FL_SVE2 | \\\n-\t\t      AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | \\\n-\t\t      AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, \\\n-\t\t      false, \"sve\")\n+\t\t      AARCH64_FL_F16, AARCH64_FL_F32MM | AARCH64_FL_F64MM | \\\n+\t\t      AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | \\\n+\t\t      AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | \\\n+\t\t      AARCH64_FL_SVE2_BITPERM, false, \"sve\")\n \n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, false, \"\")\n@@ -207,6 +209,12 @@ AARCH64_OPT_EXTENSION(\"tme\", AARCH64_FL_TME, 0, 0, false, \"\")\n AARCH64_OPT_EXTENSION(\"i8mm\", AARCH64_FL_I8MM, \\\n \t\t      AARCH64_FL_SIMD | AARCH64_FL_FP, 0, false, \"i8mm\")\n \n+/* Enabling \"f32mm\" also enables \"sve\", \"fp16\", \"fp\", and \"simd\".\n+   Disabling \"f32mm\" only disables \"f32mm\".  */\n+AARCH64_OPT_EXTENSION(\"f32mm\", AARCH64_FL_F32MM, \\\n+\t\t      AARCH64_FL_SVE | AARCH64_FL_F16 | AARCH64_FL_FP | \\\n+\t\t      AARCH64_FL_SIMD, 0, false, \"f32mm\")\n+\n /* Enabling \"f64mm\" also enables \"sve\", \"fp16\", \"fp\", and \"simd\".\n    Disabling \"f64mm\" only disables \"f64mm\".  */\n AARCH64_OPT_EXTENSION(\"f64mm\", AARCH64_FL_F64MM, \\"}, {"sha": "9ae143c287f9ab1e1c8861d2631ea3d5bfbf8f97", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -718,16 +718,23 @@ class svdot_impl : public function_base\n   }\n };\n \n-class svdot_lane_impl : public function_base\n+class svdotprod_lane_impl : public unspec_based_function_base\n {\n public:\n+  CONSTEXPR svdotprod_lane_impl (int unspec_for_sint,\n+\t\t\t\t int unspec_for_uint,\n+\t\t\t\t int unspec_for_float)\n+    : unspec_based_function_base (unspec_for_sint,\n+\t\t\t\t  unspec_for_uint,\n+\t\t\t\t  unspec_for_float) {}\n+\n   rtx\n   expand (function_expander &e) const OVERRIDE\n   {\n     /* Use the same ordering as the dot_prod_optab, with the\n        accumulator last.  */\n     e.rotate_inputs_left (0, 4);\n-    int unspec = (e.type_suffix (0).unsigned_p ? UNSPEC_UDOT : UNSPEC_SDOT);\n+    int unspec = unspec_for (e);\n     machine_mode mode = e.vector_mode (0);\n     return e.use_exact_insn (code_for_aarch64_dot_prod_lane (unspec, mode));\n   }\n@@ -1512,6 +1519,26 @@ class svmls_lane_impl : public function_base\n   }\n };\n \n+class svmmla_impl : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    insn_code icode;\n+    if (e.type_suffix (0).integer_p)\n+      {\n+\tif (e.type_suffix (0).unsigned_p)\n+\t  icode = code_for_aarch64_sve_add (UNSPEC_UMATMUL, e.vector_mode (0));\n+\telse\n+\t  icode = code_for_aarch64_sve_add (UNSPEC_SMATMUL, e.vector_mode (0));\n+      }\n+    else\n+      icode = code_for_aarch64_sve (UNSPEC_FMMLA, e.vector_mode (0));\n+    return e.use_exact_insn (icode);\n+  }\n+};\n+\n class svmsb_impl : public function_base\n {\n public:\n@@ -2330,6 +2357,34 @@ class svunpk_impl : public quiet<function_base>\n   bool m_high_p;\n };\n \n+/* Also implements svsudot.  */\n+class svusdot_impl : public function_base\n+{\n+public:\n+  CONSTEXPR svusdot_impl (bool su) : m_su (su) {}\n+\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    /* The implementation of the ACLE function svsudot (for the non-lane\n+       version) is through the USDOT instruction but with the second and third\n+       inputs swapped.  */\n+    if (m_su)\n+      e.rotate_inputs_left (1, 2);\n+    /* The ACLE function has the same order requirements as for svdot.\n+       While there's no requirement for the RTL pattern to have the same sort\n+       of order as that for <sur>dot_prod, it's easier to read.\n+       Hence we do the same rotation on arguments as svdot_impl does.  */\n+    e.rotate_inputs_left (0, 3);\n+    machine_mode mode = e.vector_mode (0);\n+    insn_code icode = code_for_aarch64_dot_prod (UNSPEC_USDOT, mode);\n+    return e.use_exact_insn (icode);\n+  }\n+\n+private:\n+  bool m_su;\n+};\n+\n /* Implements svuzp1 and svuzp2.  */\n class svuzp_impl : public binary_permute\n {\n@@ -2540,7 +2595,7 @@ FUNCTION (svcvt, svcvt_impl,)\n FUNCTION (svdiv, rtx_code_function, (DIV, UDIV, UNSPEC_COND_FDIV))\n FUNCTION (svdivr, rtx_code_function_rotated, (DIV, UDIV, UNSPEC_COND_FDIV))\n FUNCTION (svdot, svdot_impl,)\n-FUNCTION (svdot_lane, svdot_lane_impl,)\n+FUNCTION (svdot_lane, svdotprod_lane_impl, (UNSPEC_SDOT, UNSPEC_UDOT, -1))\n FUNCTION (svdup, svdup_impl,)\n FUNCTION (svdup_lane, svdup_lane_impl,)\n FUNCTION (svdupq, svdupq_impl,)\n@@ -2618,6 +2673,7 @@ FUNCTION (svmla, svmla_impl,)\n FUNCTION (svmla_lane, svmla_lane_impl,)\n FUNCTION (svmls, svmls_impl,)\n FUNCTION (svmls_lane, svmls_lane_impl,)\n+FUNCTION (svmmla, svmmla_impl,)\n FUNCTION (svmov, svmov_impl,)\n FUNCTION (svmsb, svmsb_impl,)\n FUNCTION (svmul, rtx_code_function, (MULT, MULT, UNSPEC_COND_FMUL))\n@@ -2713,10 +2769,16 @@ FUNCTION (svst4, svst234_impl, (4))\n FUNCTION (svstnt1, svstnt1_impl,)\n FUNCTION (svsub, svsub_impl,)\n FUNCTION (svsubr, rtx_code_function_rotated, (MINUS, MINUS, UNSPEC_COND_FSUB))\n+FUNCTION (svsudot, svusdot_impl, (true))\n+FUNCTION (svsudot_lane, svdotprod_lane_impl, (UNSPEC_SUDOT, -1, -1))\n FUNCTION (svtbl, svtbl_impl,)\n FUNCTION (svtmad, CODE_FOR_MODE0 (aarch64_sve_tmad),)\n FUNCTION (svtrn1, svtrn_impl, (0))\n+FUNCTION (svtrn1q, unspec_based_function, (UNSPEC_TRN1Q, UNSPEC_TRN1Q,\n+\t\t\t\t\t   UNSPEC_TRN1Q))\n FUNCTION (svtrn2, svtrn_impl, (1))\n+FUNCTION (svtrn2q, unspec_based_function, (UNSPEC_TRN2Q, UNSPEC_TRN2Q,\n+\t\t\t\t\t   UNSPEC_TRN2Q))\n FUNCTION (svtsmul, unspec_based_function, (-1, -1, UNSPEC_FTSMUL))\n FUNCTION (svtssel, unspec_based_function, (-1, -1, UNSPEC_FTSSEL))\n FUNCTION (svundef, svundef_impl, (1))\n@@ -2725,12 +2787,23 @@ FUNCTION (svundef3, svundef_impl, (3))\n FUNCTION (svundef4, svundef_impl, (4))\n FUNCTION (svunpkhi, svunpk_impl, (true))\n FUNCTION (svunpklo, svunpk_impl, (false))\n+FUNCTION (svusdot, svusdot_impl, (false))\n+FUNCTION (svusdot_lane, svdotprod_lane_impl, (UNSPEC_USDOT, -1, -1))\n+FUNCTION (svusmmla, unspec_based_add_function, (UNSPEC_USMATMUL, -1, -1))\n FUNCTION (svuzp1, svuzp_impl, (0))\n+FUNCTION (svuzp1q, unspec_based_function, (UNSPEC_UZP1Q, UNSPEC_UZP1Q,\n+\t\t\t\t\t   UNSPEC_UZP1Q))\n FUNCTION (svuzp2, svuzp_impl, (1))\n+FUNCTION (svuzp2q, unspec_based_function, (UNSPEC_UZP2Q, UNSPEC_UZP2Q,\n+\t\t\t\t\t   UNSPEC_UZP2Q))\n FUNCTION (svwhilele, svwhilelx_impl, (UNSPEC_WHILELE, UNSPEC_WHILELS, true))\n FUNCTION (svwhilelt, svwhilelx_impl, (UNSPEC_WHILELT, UNSPEC_WHILELO, false))\n FUNCTION (svwrffr, svwrffr_impl,)\n FUNCTION (svzip1, svzip_impl, (0))\n+FUNCTION (svzip1q, unspec_based_function, (UNSPEC_ZIP1Q, UNSPEC_ZIP1Q,\n+\t\t\t\t\t   UNSPEC_ZIP1Q))\n FUNCTION (svzip2, svzip_impl, (1))\n+FUNCTION (svzip2q, unspec_based_function, (UNSPEC_ZIP2Q, UNSPEC_ZIP2Q,\n+\t\t\t\t\t   UNSPEC_ZIP2Q))\n \n } /* end namespace aarch64_sve */"}, {"sha": "c0efe0526545a16a7a3bdedeaa977bcb2d7f45f3", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.def", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -173,6 +173,7 @@ DEF_SVE_FUNCTION (svmla, ternary_opt_n, all_data, mxz)\n DEF_SVE_FUNCTION (svmla_lane, ternary_lane, all_float, none)\n DEF_SVE_FUNCTION (svmls, ternary_opt_n, all_data, mxz)\n DEF_SVE_FUNCTION (svmls_lane, ternary_lane, all_float, none)\n+DEF_SVE_FUNCTION (svmmla, mmla, none, none)\n DEF_SVE_FUNCTION (svmov, unary, b, z)\n DEF_SVE_FUNCTION (svmsb, ternary_opt_n, all_data, mxz)\n DEF_SVE_FUNCTION (svmul, binary_opt_n, all_data, mxz)\n@@ -317,6 +318,26 @@ DEF_SVE_FUNCTION (svzip2, binary, all_data, none)\n DEF_SVE_FUNCTION (svzip2, binary_pred, all_pred, none)\n #undef REQUIRED_EXTENSIONS\n \n-#define REQUIRED_EXTENSIONS AARCH64_FL_V8_6 | AARCH64_FL_F64MM\n+#define REQUIRED_EXTENSIONS AARCH64_FL_I8MM\n+DEF_SVE_FUNCTION (svmmla, mmla, s_integer, none)\n+DEF_SVE_FUNCTION (svusmmla, ternary_uintq_intq, s_signed, none)\n+DEF_SVE_FUNCTION (svsudot, ternary_intq_uintq_opt_n, s_signed, none)\n+DEF_SVE_FUNCTION (svsudot_lane, ternary_intq_uintq_lane, s_signed, none)\n+DEF_SVE_FUNCTION (svusdot, ternary_uintq_intq_opt_n, s_signed, none)\n+DEF_SVE_FUNCTION (svusdot_lane, ternary_uintq_intq_lane, s_signed, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS AARCH64_FL_F32MM\n+DEF_SVE_FUNCTION (svmmla, mmla, s_float, none)\n+#undef REQUIRED_EXTENSIONS\n+\n+#define REQUIRED_EXTENSIONS AARCH64_FL_F64MM\n DEF_SVE_FUNCTION (svld1ro, load_replicate, all_data, implicit)\n+DEF_SVE_FUNCTION (svmmla, mmla, d_float, none)\n+DEF_SVE_FUNCTION (svtrn1q, binary, all_data, none)\n+DEF_SVE_FUNCTION (svtrn2q, binary, all_data, none)\n+DEF_SVE_FUNCTION (svuzp1q, binary, all_data, none)\n+DEF_SVE_FUNCTION (svuzp2q, binary, all_data, none)\n+DEF_SVE_FUNCTION (svzip1q, binary, all_data, none)\n+DEF_SVE_FUNCTION (svzip2q, binary, all_data, none)\n #undef REQUIRED_EXTENSIONS"}, {"sha": "5c19b7d899d7e0f8204c893cc8a2b8dd6a7a4859", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.h?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -165,6 +165,7 @@ namespace aarch64_sve\n     extern const function_base *const svmla_lane;\n     extern const function_base *const svmls;\n     extern const function_base *const svmls_lane;\n+    extern const function_base *const svmmla;\n     extern const function_base *const svmov;\n     extern const function_base *const svmsb;\n     extern const function_base *const svmul;\n@@ -259,10 +260,14 @@ namespace aarch64_sve\n     extern const function_base *const svstnt1;\n     extern const function_base *const svsub;\n     extern const function_base *const svsubr;\n+    extern const function_base *const svsudot;\n+    extern const function_base *const svsudot_lane;\n     extern const function_base *const svtbl;\n     extern const function_base *const svtmad;\n     extern const function_base *const svtrn1;\n+    extern const function_base *const svtrn1q;\n     extern const function_base *const svtrn2;\n+    extern const function_base *const svtrn2q;\n     extern const function_base *const svtsmul;\n     extern const function_base *const svtssel;\n     extern const function_base *const svundef;\n@@ -271,13 +276,20 @@ namespace aarch64_sve\n     extern const function_base *const svundef4;\n     extern const function_base *const svunpkhi;\n     extern const function_base *const svunpklo;\n+    extern const function_base *const svusdot;\n+    extern const function_base *const svusdot_lane;\n+    extern const function_base *const svusmmla;\n     extern const function_base *const svuzp1;\n+    extern const function_base *const svuzp1q;\n     extern const function_base *const svuzp2;\n+    extern const function_base *const svuzp2q;\n     extern const function_base *const svwhilele;\n     extern const function_base *const svwhilelt;\n     extern const function_base *const svwrffr;\n     extern const function_base *const svzip1;\n+    extern const function_base *const svzip1q;\n     extern const function_base *const svzip2;\n+    extern const function_base *const svzip2q;\n   }\n }\n "}, {"sha": "1ea3caa258c70d8f37eac678474a216128ee7edc", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 197, "deletions": 22, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -700,6 +700,58 @@ struct load_ext_gather_base : public overloaded_base<1>\n   }\n };\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:quarter>_t,\n+\t\t       sv<t0:quarter>_t)  (for integer t0)\n+   sv<t0>_t svmmla[_t0](sv<t0>_t, sv<t0>_t, sv<t0>_t)  (for floating-point t0)\n+\n+   The functions act like the equivalent of \"ternary_qq\" for integer elements\n+   and normal vector-only ternary functions for floating-point elements.  */\n+struct mmla_def : public overloaded_base<0>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    /* svmmla is distributed over several extensions.  Allow the common\n+       denominator to define the overloaded svmmla function without\n+       defining any specific versions.  */\n+    if (group.types[0][0] != NUM_TYPE_SUFFIXES)\n+      {\n+\tif (type_suffixes[group.types[0][0]].float_p)\n+\t  build_all (b, \"v0,v0,v0,v0\", group, MODE_none);\n+\telse\n+\t  build_all (b, \"v0,v0,vq0,vq0\", group, MODE_none);\n+      }\n+  }\n+\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES)\n+      return error_mark_node;\n+\n+    /* Make sure that the function exists now, since not all forms\n+       follow a set pattern after this point.  */\n+    tree res = r.resolve_to (r.mode_suffix_id, type);\n+    if (res == error_mark_node)\n+      return res;\n+\n+    bool float_p = type_suffixes[type].float_p;\n+    unsigned int modifier = float_p ? r.SAME_SIZE : r.QUARTER_SIZE;\n+    if (!r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\tmodifier)\n+\t|| !r.require_derived_vector_type (i + 2, i, type, r.SAME_TYPE_CLASS,\n+\t\t\t\t\t   modifier))\n+      return error_mark_node;\n+\n+    return res;\n+  }\n+};\n+SHAPE (mmla)\n+\n /* Base class for prefetch_gather_index and prefetch_gather_offset,\n    which differ only in the units of the displacement.  */\n struct prefetch_gather_base : public overloaded_base<0>\n@@ -791,11 +843,18 @@ struct ternary_shift_imm_base : public overloaded_base<0>\n \n /* Base class for ternary operations in which the first argument has the\n    same element type as the result, and in which the second and third\n-   arguments have an element type that is derived the first.  MODIFIER\n-   is the number of element bits in the second and third arguments,\n-   or a function_resolver modifier that says how this precision is\n-   derived from the first argument's elements.  */\n-template<unsigned int MODIFIER>\n+   arguments have an element type that is derived the first.\n+\n+   MODIFIER is the number of element bits in the second and third\n+   arguments, or a function_resolver modifier that says how this\n+   precision is derived from the first argument's elements.\n+\n+   TYPE_CLASS2 and TYPE_CLASS3 are the type classes of the second and\n+   third arguments, or function_resolver::SAME_TYPE_CLASS if the type\n+   class is the same as the first argument.  */\n+template<unsigned int MODIFIER,\n+\t type_class_index TYPE_CLASS2 = function_resolver::SAME_TYPE_CLASS,\n+\t type_class_index TYPE_CLASS3 = function_resolver::SAME_TYPE_CLASS>\n struct ternary_resize2_opt_n_base : public overloaded_base<0>\n {\n   tree\n@@ -805,18 +864,43 @@ struct ternary_resize2_opt_n_base : public overloaded_base<0>\n     type_suffix_index type;\n     if (!r.check_gp_argument (3, i, nargs)\n \t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n-\t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t|| !r.require_derived_vector_type (i + 1, i, type, TYPE_CLASS2,\n+\t\t\t\t\t   MODIFIER))\n+      return error_mark_node;\n+\n+    return r.finish_opt_n_resolution (i + 2, i, type, TYPE_CLASS3, MODIFIER);\n+  }\n+};\n+\n+/* Like ternary_resize2_opt_n_base, but for functions that don't take\n+   a final scalar argument.  */\n+template<unsigned int MODIFIER,\n+\t type_class_index TYPE_CLASS2 = function_resolver::SAME_TYPE_CLASS,\n+\t type_class_index TYPE_CLASS3 = function_resolver::SAME_TYPE_CLASS>\n+struct ternary_resize2_base : public overloaded_base<0>\n+{\n+  tree\n+  resolve (function_resolver &r) const OVERRIDE\n+  {\n+    unsigned int i, nargs;\n+    type_suffix_index type;\n+    if (!r.check_gp_argument (3, i, nargs)\n+\t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n+\t|| !r.require_derived_vector_type (i + 1, i, type, TYPE_CLASS2,\n+\t\t\t\t\t   MODIFIER)\n+\t|| !r.require_derived_vector_type (i + 2, i, type, TYPE_CLASS3,\n \t\t\t\t\t   MODIFIER))\n       return error_mark_node;\n \n-    return r.finish_opt_n_resolution (i + 2, i, type, r.SAME_TYPE_CLASS,\n-\t\t\t\t      MODIFIER);\n+    return r.resolve_to (r.mode_suffix_id, type);\n   }\n };\n \n /* Like ternary_resize2_opt_n_base, but for functions that take a final\n    lane argument.  */\n-template<unsigned int MODIFIER>\n+template<unsigned int MODIFIER,\n+\t type_class_index TYPE_CLASS2 = function_resolver::SAME_TYPE_CLASS,\n+\t type_class_index TYPE_CLASS3 = function_resolver::SAME_TYPE_CLASS>\n struct ternary_resize2_lane_base : public overloaded_base<0>\n {\n   tree\n@@ -826,9 +910,9 @@ struct ternary_resize2_lane_base : public overloaded_base<0>\n     type_suffix_index type;\n     if (!r.check_gp_argument (4, i, nargs)\n \t|| (type = r.infer_vector_type (i)) == NUM_TYPE_SUFFIXES\n-\t|| !r.require_derived_vector_type (i + 1, i, type, r.SAME_TYPE_CLASS,\n+\t|| !r.require_derived_vector_type (i + 1, i, type, TYPE_CLASS2,\n \t\t\t\t\t   MODIFIER)\n-\t|| !r.require_derived_vector_type (i + 2, i, type, r.SAME_TYPE_CLASS,\n+\t|| !r.require_derived_vector_type (i + 2, i, type, TYPE_CLASS3,\n \t\t\t\t\t   MODIFIER)\n \t|| !r.require_integer_immediate (i + 3))\n       return error_mark_node;\n@@ -837,6 +921,21 @@ struct ternary_resize2_lane_base : public overloaded_base<0>\n   }\n };\n \n+/* A specialization of ternary_resize2_lane_base for quarter-sized\n+   elements.  */\n+template<type_class_index TYPE_CLASS2 = function_resolver::SAME_TYPE_CLASS,\n+\t type_class_index TYPE_CLASS3 = function_resolver::SAME_TYPE_CLASS>\n+struct ternary_qq_lane_base\n+  : public ternary_resize2_lane_base<function_resolver::QUARTER_SIZE,\n+\t\t\t\t     TYPE_CLASS2, TYPE_CLASS3>\n+{\n+  bool\n+  check (function_checker &c) const OVERRIDE\n+  {\n+    return c.require_immediate_lane_index (3, 4);\n+  }\n+};\n+\n /* Base class for narrowing bottom unary functions.  The result is half\n    the size of input and has class CLASS.  */\n template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n@@ -2596,6 +2695,40 @@ struct tbl_tuple_def : public overloaded_base<0>\n };\n SHAPE (tbl_tuple)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:int:quarter>_t, sv<t0:uint:quarter>_t,\n+\t\t       uint64_t)\n+\n+   where the final argument is an integer constant expression in the range\n+   [0, 16 / sizeof (<t0>_t) - 1].  */\n+struct ternary_intq_uintq_lane_def\n+  : public ternary_qq_lane_base<TYPE_signed, TYPE_unsigned>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vqs0,vqu0,su64\", group, MODE_none);\n+  }\n+};\n+SHAPE (ternary_intq_uintq_lane)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:int:quarter>_t, sv<t0:uint:quarter>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0:int:quarter>_t,\n+\t\t\t <t0:uint:quarter>_t).  */\n+struct ternary_intq_uintq_opt_n_def\n+  : public ternary_resize2_opt_n_base<function_resolver::QUARTER_SIZE,\n+\t\t\t\t      TYPE_signed, TYPE_unsigned>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vqs0,vqu0\", group, MODE_none);\n+    build_all (b, \"v0,v0,vqs0,squ0\", group, MODE_n);\n+  }\n+};\n+SHAPE (ternary_intq_uintq_opt_n)\n+\n /* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, sv<t0>_t, uint64_t)\n \n    where the final argument is an integer constant expression in the\n@@ -2716,25 +2849,18 @@ struct ternary_opt_n_def : public overloaded_base<0>\n };\n SHAPE (ternary_opt_n)\n \n-/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0.quarter>_t, sv<t0.quarter>_t, uint64_t)\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:quarter>_t, sv<t0:quarter>_t, uint64_t)\n \n    where the final argument is an integer constant expression in the range\n    [0, 16 / sizeof (<t0>_t) - 1].  */\n-struct ternary_qq_lane_def\n-  : public ternary_resize2_lane_base<function_resolver::QUARTER_SIZE>\n+struct ternary_qq_lane_def : public ternary_qq_lane_base<>\n {\n   void\n   build (function_builder &b, const function_group_info &group) const OVERRIDE\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vq0,vq0,su64\", group, MODE_none);\n   }\n-\n-  bool\n-  check (function_checker &c) const OVERRIDE\n-  {\n-    return c.require_immediate_lane_index (3, 4);\n-  }\n };\n SHAPE (ternary_qq_lane)\n \n@@ -2779,8 +2905,8 @@ struct ternary_qq_lane_rotate_def : public overloaded_base<0>\n };\n SHAPE (ternary_qq_lane_rotate)\n \n-/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0.quarter>_t, sv<t0.quarter>_t)\n-   sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0.quarter>_t, <t0.quarter>_t)\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:quarter>_t, sv<t0:quarter>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0:quarter>_t, <t0:quarter>_t)\n \n    i.e. a version of the standard ternary shape ternary_opt_n in which\n    the element type of the last two arguments is the quarter-sized\n@@ -2920,6 +3046,55 @@ struct ternary_uint_def : public overloaded_base<0>\n };\n SHAPE (ternary_uint)\n \n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, svu<t0:uint:quarter>_t,\n+\t\t       sv<t0:int:quarter>_t).  */\n+struct ternary_uintq_intq_def\n+  : public ternary_resize2_base<function_resolver::QUARTER_SIZE,\n+\t\t\t\tTYPE_unsigned, TYPE_signed>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vqu0,vqs0\", group, MODE_none);\n+  }\n+};\n+SHAPE (ternary_uintq_intq)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:uint:quarter>_t, sv<t0:int:quarter>_t,\n+\t\t       uint64_t)\n+\n+   where the final argument is an integer constant expression in the range\n+   [0, 16 / sizeof (<t0>_t) - 1].  */\n+struct ternary_uintq_intq_lane_def\n+  : public ternary_qq_lane_base<TYPE_unsigned, TYPE_signed>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vqu0,vqs0,su64\", group, MODE_none);\n+  }\n+};\n+SHAPE (ternary_uintq_intq_lane)\n+\n+/* sv<t0>_t svfoo[_t0](sv<t0>_t, sv<t0:uint:quarter>_t, sv<t0:int:quarter>_t)\n+   sv<t0>_t svfoo[_n_t0](sv<t0>_t, sv<t0:uint:quarter>_t,\n+\t\t\t <t0:int:quarter>_t).  */\n+struct ternary_uintq_intq_opt_n_def\n+  : public ternary_resize2_opt_n_base<function_resolver::QUARTER_SIZE,\n+\t\t\t\t      TYPE_unsigned, TYPE_signed>\n+{\n+  void\n+  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  {\n+    b.add_overloaded_functions (group, MODE_none);\n+    build_all (b, \"v0,v0,vqu0,vqs0\", group, MODE_none);\n+    build_all (b, \"v0,v0,vqu0,sqs0\", group, MODE_n);\n+  }\n+};\n+SHAPE (ternary_uintq_intq_opt_n)\n+\n /* svbool_t svfoo[_<t0>](sv<t0>_t, sv<t0>_t, uint64_t)\n \n    where the final argument is an integer constant expression in the"}, {"sha": "1ce09978efa25e45b2e5f19131313e9fa41ebf7b", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.h?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -124,6 +124,7 @@ namespace aarch64_sve\n     extern const function_shape *const load_gather_sv_restricted;\n     extern const function_shape *const load_gather_vs;\n     extern const function_shape *const load_replicate;\n+    extern const function_shape *const mmla;\n     extern const function_shape *const pattern_pred;\n     extern const function_shape *const prefetch;\n     extern const function_shape *const prefetch_gather_index;\n@@ -147,6 +148,8 @@ namespace aarch64_sve\n     extern const function_shape *const store_scatter_offset;\n     extern const function_shape *const store_scatter_offset_restricted;\n     extern const function_shape *const tbl_tuple;\n+    extern const function_shape *const ternary_intq_uintq_lane;\n+    extern const function_shape *const ternary_intq_uintq_opt_n;\n     extern const function_shape *const ternary_lane;\n     extern const function_shape *const ternary_lane_rotate;\n     extern const function_shape *const ternary_long_lane;\n@@ -160,6 +163,9 @@ namespace aarch64_sve\n     extern const function_shape *const ternary_shift_left_imm;\n     extern const function_shape *const ternary_shift_right_imm;\n     extern const function_shape *const ternary_uint;\n+    extern const function_shape *const ternary_uintq_intq;\n+    extern const function_shape *const ternary_uintq_intq_lane;\n+    extern const function_shape *const ternary_uintq_intq_opt_n;\n     extern const function_shape *const tmad;\n     extern const function_shape *const unary;\n     extern const function_shape *const unary_convert;"}, {"sha": "537c28e0766f35d2fd902f728ff8cd58fba5f33b", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -253,25 +253,33 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define TYPES_hsd_integer(S, D) \\\n   TYPES_hsd_signed (S, D), S (u16), S (u32), S (u64)\n \n+/* _f32.  */\n+#define TYPES_s_float(S, D) \\\n+  S (f32)\n+\n /*      _f32\n    _s16 _s32 _s64\n    _u16 _u32 _u64.  */\n #define TYPES_s_float_hsd_integer(S, D) \\\n-  S (f32), TYPES_hsd_integer (S, D)\n+  TYPES_s_float (S, D), TYPES_hsd_integer (S, D)\n \n /* _f32\n    _s32 _s64\n    _u32 _u64.  */\n #define TYPES_s_float_sd_integer(S, D) \\\n-  S (f32), TYPES_sd_integer (S, D)\n+  TYPES_s_float (S, D), TYPES_sd_integer (S, D)\n+\n+/* _s32.  */\n+#define TYPES_s_signed(S, D) \\\n+  S (s32)\n \n /* _u32.  */\n #define TYPES_s_unsigned(S, D) \\\n   S (u32)\n \n /* _s32 _u32.  */\n #define TYPES_s_integer(S, D) \\\n-  S (s32), TYPES_s_unsigned (S, D)\n+  TYPES_s_signed (S, D), TYPES_s_unsigned (S, D)\n \n /* _s32 _s64.  */\n #define TYPES_sd_signed(S, D) \\\n@@ -298,6 +306,10 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define TYPES_all_float_and_sd_integer(S, D) \\\n   TYPES_all_float (S, D), TYPES_sd_integer (S, D)\n \n+/* _f64.  */\n+#define TYPES_d_float(S, D) \\\n+  S (f64)\n+\n /* _u64.  */\n #define TYPES_d_unsigned(S, D) \\\n   S (u64)\n@@ -311,7 +323,7 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n    _s64\n    _u64.  */\n #define TYPES_d_data(S, D) \\\n-  S (f64), TYPES_d_integer (S, D)\n+  TYPES_d_float (S, D), TYPES_d_integer (S, D)\n \n /* All the type combinations allowed by svcvt.  */\n #define TYPES_cvt(S, D) \\\n@@ -432,15 +444,18 @@ DEF_SVE_TYPES_ARRAY (hs_float);\n DEF_SVE_TYPES_ARRAY (hd_unsigned);\n DEF_SVE_TYPES_ARRAY (hsd_signed);\n DEF_SVE_TYPES_ARRAY (hsd_integer);\n+DEF_SVE_TYPES_ARRAY (s_float);\n DEF_SVE_TYPES_ARRAY (s_float_hsd_integer);\n DEF_SVE_TYPES_ARRAY (s_float_sd_integer);\n+DEF_SVE_TYPES_ARRAY (s_signed);\n DEF_SVE_TYPES_ARRAY (s_unsigned);\n DEF_SVE_TYPES_ARRAY (s_integer);\n DEF_SVE_TYPES_ARRAY (sd_signed);\n DEF_SVE_TYPES_ARRAY (sd_unsigned);\n DEF_SVE_TYPES_ARRAY (sd_integer);\n DEF_SVE_TYPES_ARRAY (sd_data);\n DEF_SVE_TYPES_ARRAY (all_float_and_sd_integer);\n+DEF_SVE_TYPES_ARRAY (d_float);\n DEF_SVE_TYPES_ARRAY (d_unsigned);\n DEF_SVE_TYPES_ARRAY (d_integer);\n DEF_SVE_TYPES_ARRAY (d_data);"}, {"sha": "abaac11d0c852de23338e22277f84535ddd4a0ba", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -111,9 +111,11 @@\n ;; ---- [INT] MLS and MSB\n ;; ---- [INT] Dot product\n ;; ---- [INT] Sum of absolute differences\n+;; ---- [INT] Matrix multiply-accumulate\n ;; ---- [FP] General ternary arithmetic corresponding to unspecs\n ;; ---- [FP] Complex multiply-add\n ;; ---- [FP] Trigonometric multiply-add\n+;; ---- [FP] Matrix multiply-accumulate\n ;;\n ;; == Comparisons and selects\n ;; ---- [INT,FP] Select based on predicates\n@@ -2380,6 +2382,10 @@\n ;; - LD1RD\n ;; - LD1RH\n ;; - LD1RW\n+;; - LD1ROB (F64MM)\n+;; - LD1ROD (F64MM)\n+;; - LD1ROH (F64MM)\n+;; - LD1ROW (F64MM)\n ;; - LD1RQB\n ;; - LD1RQD\n ;; - LD1RQH\n@@ -2502,7 +2508,7 @@\n \t   (match_operand:OI 1 \"aarch64_sve_ld1ro_operand_<Vesize>\"\n \t\t\t       \"UO<Vesize>\")]\n \t  UNSPEC_LD1RO))]\n-  \"TARGET_SVE && TARGET_F64MM\"\n+  \"TARGET_SVE_F64MM\"\n   {\n     operands[1] = gen_rtx_MEM (<VEL>mode, XEXP (operands[1], 0));\n     return \"ld1ro<Vesize>\\t%0.<Vetype>, %2/z, %1\";\n@@ -6083,7 +6089,9 @@\n ;; -------------------------------------------------------------------------\n ;; Includes:\n ;; - SDOT\n+;; - SUDOT   (I8MM)\n ;; - UDOT\n+;; - USDOT   (I8MM)\n ;; -------------------------------------------------------------------------\n \n ;; Four-element integer dot-product with accumulation.\n@@ -6121,6 +6129,39 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+(define_insn \"@aarch64_<sur>dot_prod<vsi2qi>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w, ?&w\")\n+        (plus:VNx4SI_ONLY\n+\t  (unspec:VNx4SI_ONLY\n+\t    [(match_operand:<VSI2QI> 1 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VSI2QI> 2 \"register_operand\" \"w, w\")]\n+\t    DOTPROD_US_ONLY)\n+\t  (match_operand:VNx4SI_ONLY 3 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE_I8MM\"\n+  \"@\n+   <sur>dot\\\\t%0.s, %1.b, %2.b\n+   movprfx\\t%0, %3\\;<sur>dot\\\\t%0.s, %1.b, %2.b\"\n+   [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+(define_insn \"@aarch64_<sur>dot_prod_lane<vsi2qi>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:VNx4SI_ONLY\n+\t  (unspec:VNx4SI_ONLY\n+\t    [(match_operand:<VSI2QI> 1 \"register_operand\" \"w, w\")\n+\t     (unspec:<VSI2QI>\n+\t       [(match_operand:<VSI2QI> 2 \"register_operand\" \"y, y\")\n+\t\t(match_operand:SI 3 \"const_int_operand\")]\n+\t       UNSPEC_SVE_LANE_SELECT)]\n+\t    DOTPROD_I8MM)\n+\t  (match_operand:VNx4SI_ONLY 4 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE_I8MM\"\n+  \"@\n+   <sur>dot\\\\t%0.s, %1.b, %2.b[%3]\n+   movprfx\\t%0, %4\\;<sur>dot\\\\t%0.s, %1.b, %2.b[%3]\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Sum of absolute differences\n ;; -------------------------------------------------------------------------\n@@ -6151,6 +6192,30 @@\n   }\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Matrix multiply-accumulate\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - SMMLA (I8MM)\n+;; - UMMLA (I8MM)\n+;; - USMMLA (I8MM)\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"@aarch64_sve_add_<optab><vsi2qi>\"\n+  [(set (match_operand:VNx4SI_ONLY 0 \"register_operand\" \"=w, ?&w\")\n+\t(plus:VNx4SI_ONLY\n+\t  (unspec:VNx4SI_ONLY\n+\t    [(match_operand:<VSI2QI> 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:<VSI2QI> 3 \"register_operand\" \"w, w\")]\n+\t    MATMUL)\n+\t  (match_operand:VNx4SI_ONLY 1 \"register_operand\" \"0, w\")))]\n+  \"TARGET_SVE_I8MM\"\n+  \"@\n+   <sur>mmla\\\\t%0.s, %2.b, %3.b\n+   movprfx\\t%0, %1\\;<sur>mmla\\\\t%0.s, %2.b, %3.b\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] General ternary arithmetic corresponding to unspecs\n ;; -------------------------------------------------------------------------\n@@ -6482,6 +6547,28 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [FP] Matrix multiply-accumulate\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - FMMLA (F32MM,F64MM)\n+;; -------------------------------------------------------------------------\n+\n+;; The mode iterator enforces the target requirements.\n+(define_insn \"@aarch64_sve_<sve_fp_op><mode>\"\n+  [(set (match_operand:SVE_MATMULF 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_MATMULF\n+\t  [(match_operand:SVE_MATMULF 2 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_MATMULF 3 \"register_operand\" \"w, w\")\n+\t   (match_operand:SVE_MATMULF 1 \"register_operand\" \"0, w\")]\n+\t  FMMLA))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <sve_fp_op>\\\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %1\\;<sve_fp_op>\\\\t%0.<Vetype>, %2.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; =========================================================================\n ;; == Comparisons and selects\n ;; =========================================================================\n@@ -7486,6 +7573,18 @@\n   \"<perm_insn>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n+;; Apply PERMUTE to 128-bit sequences.  The behavior of these patterns\n+;; doesn't depend on the mode.\n+(define_insn \"@aarch64_sve_<optab><mode>\"\n+  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_FULL\n+\t  [(match_operand:SVE_FULL 1 \"register_operand\" \"w\")\n+\t   (match_operand:SVE_FULL 2 \"register_operand\" \"w\")]\n+\t  PERMUTEQ))]\n+  \"TARGET_SVE_F64MM\"\n+  \"<perm_insn>\\t%0.q, %1.q, %2.q\"\n+)\n+\n ;; Concatenate two vectors and extract a subvector.  Note that the\n ;; immediate (third) operand is the lane index not the byte index.\n (define_insn \"@aarch64_sve_ext<mode>\""}, {"sha": "043e26a089826ba4cb56422f5a558156e62778f2", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -211,8 +211,11 @@ extern unsigned aarch64_architecture_version;\n /* Brain half-precision floating-point (BFloat16) Extension.  */\n #define AARCH64_FL_BF16\t      (1ULL << 36)\n \n-/* 8-bit Integer Matrix Multiply (F64MM) extensions.  */\n-#define AARCH64_FL_F64MM      (1ULL << 37)\n+/* 32-bit Floating-point Matrix Multiply (F32MM) extensions.  */\n+#define AARCH64_FL_F32MM      (1ULL << 37)\n+\n+/* 64-bit Floating-point Matrix Multiply (F64MM) extensions.  */\n+#define AARCH64_FL_F64MM      (1ULL << 38)\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -270,6 +273,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_MEMTAG\t   (aarch64_isa_flags & AARCH64_FL_MEMTAG)\n #define AARCH64_ISA_V8_6\t   (aarch64_isa_flags & AARCH64_FL_V8_6)\n #define AARCH64_ISA_I8MM\t   (aarch64_isa_flags & AARCH64_FL_I8MM)\n+#define AARCH64_ISA_F32MM\t   (aarch64_isa_flags & AARCH64_FL_F32MM)\n #define AARCH64_ISA_F64MM\t   (aarch64_isa_flags & AARCH64_FL_F64MM)\n #define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n \n@@ -345,9 +349,15 @@ extern unsigned aarch64_architecture_version;\n \n /* I8MM instructions are enabled through +i8mm.  */\n #define TARGET_I8MM (AARCH64_ISA_I8MM)\n+#define TARGET_SVE_I8MM (TARGET_SVE && AARCH64_ISA_I8MM)\n+\n+/* F32MM instructions are enabled through +f32mm.  */\n+#define TARGET_F32MM (AARCH64_ISA_F32MM)\n+#define TARGET_SVE_F32MM (TARGET_SVE && AARCH64_ISA_F32MM)\n \n /* F64MM instructions are enabled through +f64mm.  */\n #define TARGET_F64MM (AARCH64_ISA_F64MM)\n+#define TARGET_SVE_F64MM (TARGET_SVE && AARCH64_ISA_F64MM)\n \n /* BF16 instructions are enabled through +bf16.  */\n #define TARGET_BF16_FP (AARCH64_ISA_BF16)"}, {"sha": "bac11b3c6a4a4f4d443c8a9e06e28a61c6543203", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -376,6 +376,10 @@\n ;; elements.\n (define_mode_iterator SVE_FULL_SDF [VNx4SF VNx2DF])\n \n+;; Same, but with the appropriate conditions for FMMLA support.\n+(define_mode_iterator SVE_MATMULF [(VNx4SF \"TARGET_SVE_F32MM\")\n+\t\t\t\t   (VNx2DF \"TARGET_SVE_F64MM\")])\n+\n ;; Fully-packed SVE vector modes that have 32-bit elements.\n (define_mode_iterator SVE_FULL_S [VNx4SI VNx4SF])\n \n@@ -613,9 +617,19 @@\n     UNSPEC_FMLA\t\t; Used in aarch64-sve.md.\n     UNSPEC_FMLS\t\t; Used in aarch64-sve.md.\n     UNSPEC_FEXPA\t; Used in aarch64-sve.md.\n+    UNSPEC_FMMLA\t; Used in aarch64-sve.md.\n     UNSPEC_FTMAD\t; Used in aarch64-sve.md.\n     UNSPEC_FTSMUL\t; Used in aarch64-sve.md.\n     UNSPEC_FTSSEL\t; Used in aarch64-sve.md.\n+    UNSPEC_SMATMUL\t; Used in aarch64-sve.md.\n+    UNSPEC_UMATMUL\t; Used in aarch64-sve.md.\n+    UNSPEC_USMATMUL\t; Used in aarch64-sve.md.\n+    UNSPEC_TRN1Q\t; Used in aarch64-sve.md.\n+    UNSPEC_TRN2Q\t; Used in aarch64-sve.md.\n+    UNSPEC_UZP1Q\t; Used in aarch64-sve.md.\n+    UNSPEC_UZP2Q\t; Used in aarch64-sve.md.\n+    UNSPEC_ZIP1Q\t; Used in aarch64-sve.md.\n+    UNSPEC_ZIP2Q\t; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPEQ_WIDE ; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPGE_WIDE ; Used in aarch64-sve.md.\n     UNSPEC_COND_CMPGT_WIDE ; Used in aarch64-sve.md.\n@@ -2066,6 +2080,7 @@\n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n (define_int_iterator DOTPROD_I8MM [UNSPEC_USDOT UNSPEC_SUDOT])\n+(define_int_iterator DOTPROD_US_ONLY [UNSPEC_USDOT])\n \n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n \t\t\t       UNSPEC_SUBHN UNSPEC_RSUBHN])\n@@ -2120,6 +2135,10 @@\n \t\t\t      UNSPEC_TRN1 UNSPEC_TRN2\n \t\t\t      UNSPEC_UZP1 UNSPEC_UZP2])\n \n+(define_int_iterator PERMUTEQ [UNSPEC_ZIP1Q UNSPEC_ZIP2Q\n+\t\t\t       UNSPEC_TRN1Q UNSPEC_TRN2Q\n+\t\t\t       UNSPEC_UZP1Q UNSPEC_UZP2Q])\n+\n (define_int_iterator OPTAB_PERMUTE [UNSPEC_ZIP1 UNSPEC_ZIP2\n \t\t\t\t    UNSPEC_UZP1 UNSPEC_UZP2])\n \n@@ -2553,6 +2572,11 @@\n \n (define_int_iterator SVE_PITER [UNSPEC_PFIRST UNSPEC_PNEXT])\n \n+(define_int_iterator MATMUL [UNSPEC_SMATMUL UNSPEC_UMATMUL\n+\t\t\t     UNSPEC_USMATMUL])\n+\n+(define_int_iterator FMMLA [UNSPEC_FMMLA])\n+\n ;; Iterators for atomic operations.\n \n (define_int_iterator ATOMIC_LDOP\n@@ -2624,14 +2648,23 @@\n \t\t\t(UNSPEC_PMULLB_PAIR \"pmullb_pair\")\n \t\t\t(UNSPEC_PMULLT \"pmullt\")\n \t\t\t(UNSPEC_PMULLT_PAIR \"pmullt_pair\")\n+\t\t\t(UNSPEC_SMATMUL \"smatmul\")\n \t\t\t(UNSPEC_SQCADD90 \"sqcadd90\")\n \t\t\t(UNSPEC_SQCADD270 \"sqcadd270\")\n \t\t\t(UNSPEC_SQRDCMLAH \"sqrdcmlah\")\n \t\t\t(UNSPEC_SQRDCMLAH90 \"sqrdcmlah90\")\n \t\t\t(UNSPEC_SQRDCMLAH180 \"sqrdcmlah180\")\n \t\t\t(UNSPEC_SQRDCMLAH270 \"sqrdcmlah270\")\n+\t\t\t(UNSPEC_TRN1Q \"trn1q\")\n+\t\t\t(UNSPEC_TRN2Q \"trn2q\")\n+\t\t\t(UNSPEC_UMATMUL \"umatmul\")\n+\t\t\t(UNSPEC_USMATMUL \"usmatmul\")\n+\t\t\t(UNSPEC_UZP1Q \"uzp1q\")\n+\t\t\t(UNSPEC_UZP2Q \"uzp2q\")\n \t\t\t(UNSPEC_WHILERW \"vec_check_raw_alias\")\n \t\t\t(UNSPEC_WHILEWR \"vec_check_war_alias\")\n+\t\t\t(UNSPEC_ZIP1Q \"zip1q\")\n+\t\t\t(UNSPEC_ZIP2Q \"zip2q\")\n \t\t\t(UNSPEC_COND_FABS \"abs\")\n \t\t\t(UNSPEC_COND_FADD \"add\")\n \t\t\t(UNSPEC_COND_FCADD90 \"cadd90\")\n@@ -2761,6 +2794,8 @@\n \t\t      (UNSPEC_UQRSHL  \"u\") (UNSPEC_SQRSHL  \"s\")\n \t\t      (UNSPEC_SDOT \"s\") (UNSPEC_UDOT \"u\")\n \t\t      (UNSPEC_USDOT \"us\") (UNSPEC_SUDOT \"su\")\n+\t\t      (UNSPEC_SMATMUL \"s\") (UNSPEC_UMATMUL \"u\")\n+\t\t      (UNSPEC_USMATMUL \"us\")\n ])\n \n (define_int_attr r [(UNSPEC_SQDMULH \"\") (UNSPEC_SQRDMULH \"r\")\n@@ -2879,8 +2914,11 @@\n \t\t\t\t   (UNSPEC_AUTIB1716 \"14\")])\n \n (define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip1\") (UNSPEC_ZIP2 \"zip2\")\n+\t\t\t    (UNSPEC_ZIP1Q \"zip1\") (UNSPEC_ZIP2Q \"zip2\")\n \t\t\t    (UNSPEC_TRN1 \"trn1\") (UNSPEC_TRN2 \"trn2\")\n-\t\t\t    (UNSPEC_UZP1 \"uzp1\") (UNSPEC_UZP2 \"uzp2\")])\n+\t\t\t    (UNSPEC_TRN1Q \"trn1\") (UNSPEC_TRN2Q \"trn2\")\n+\t\t\t    (UNSPEC_UZP1 \"uzp1\") (UNSPEC_UZP2 \"uzp2\")\n+\t\t\t    (UNSPEC_UZP1Q \"uzp1\") (UNSPEC_UZP2Q \"uzp2\")])\n \n ; op code for REV instructions (size within which elements are reversed).\n (define_int_attr rev_op [(UNSPEC_REV64 \"64\") (UNSPEC_REV32 \"32\")\n@@ -3163,6 +3201,7 @@\n \t\t\t    (UNSPEC_RSQRTS \"frsqrts\")\n \t\t\t    (UNSPEC_FADDP \"faddp\")\n \t\t\t    (UNSPEC_FADDV \"faddv\")\n+\t\t\t    (UNSPEC_FEXPA \"fexpa\")\n \t\t\t    (UNSPEC_FMAXNMP \"fmaxnmp\")\n \t\t\t    (UNSPEC_FMAXNMV \"fmaxnmv\")\n \t\t\t    (UNSPEC_FMAXP \"fmaxp\")\n@@ -3177,7 +3216,7 @@\n \t\t\t    (UNSPEC_FMLS \"fmls\")\n \t\t\t    (UNSPEC_FMLSLB \"fmlslb\")\n \t\t\t    (UNSPEC_FMLSLT \"fmlslt\")\n-\t\t\t    (UNSPEC_FEXPA \"fexpa\")\n+\t\t\t    (UNSPEC_FMMLA \"fmmla\")\n \t\t\t    (UNSPEC_FTSMUL \"ftsmul\")\n \t\t\t    (UNSPEC_FTSSEL \"ftssel\")\n \t\t\t    (UNSPEC_COND_FABS \"fabs\")"}, {"sha": "b8ba8a34e294ca4ab12b957e02eb8ff04bcb8893", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -16996,6 +16996,10 @@ Enable 8-bit Integer Matrix Multiply instructions.  This also enables\n Advanced SIMD and floating-point instructions.  This option is enabled by\n default for @option{-march=armv8.6-a}.  Use of this option with architectures\n prior to Armv8.2-A is not supported.\n+@item f32mm\n+Enable 32-bit Floating point Matrix Multiply instructions.  This also enables\n+SVE instructions.  Use of this option with architectures prior to Armv8.2-A is\n+not supported.\n @item f64mm\n Enable 64-bit Floating point Matrix Multiply instructions.  This also enables\n SVE instructions.  Use of this option with architectures prior to Armv8.2-A is"}, {"sha": "d72468cf77bbe8346d0372423108745d553807f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,3 +1,120 @@\n+2020-01-31  Dennis Zhang  <dennis.zhang@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_aarch64_asm_i8mm_ok)\n+\t(check_effective_target_aarch64_asm_f32mm_ok): New target selectors.\n+\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Test handling of\n+\t__ARM_FEATURE_SVE_MATMUL_INT8, __ARM_FEATURE_SVE_MATMUL_FP32 and\n+\t__ARM_FEATURE_SVE_MATMUL_FP64.\n+\t* gcc.target/aarch64/sve/acle/asm/test_sve_acle.h (TEST_TRIPLE_Z):\n+\t(TEST_TRIPLE_Z_REV2, TEST_TRIPLE_Z_REV, TEST_TRIPLE_LANE_REG)\n+\t(TEST_TRIPLE_ZX): New macros.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c: Remove +sve and\n+\trely on +f64mm to enable it.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/mmla_f32.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/mmla_f64.c: Likewise,\n+\t* gcc.target/aarch64/sve/acle/asm/mmla_s32.c: Likewise,\n+\t* gcc.target/aarch64/sve/acle/asm/mmla_u32.c: Likewise,\n+\t* gcc.target/aarch64/sve/acle/asm/sudot_lane_s32.c: Likewise,\n+\t* gcc.target/aarch64/sve/acle/asm/sudot_s32.c: Likewise,\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/usdot_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/usdot_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/usmmla_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_f16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_s8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_u64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_u8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/mmla_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_lane_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_opt_n_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_lane_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_opt_n_1.c:\n+\tLikewise.\n+\n 2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/pcs/args_1.c: Require lp64 for"}, {"sha": "fa226759893088d384a707c6ec73b36a3aa93641", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_2.c", "status": "modified", "additions": 102, "deletions": 7, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -21,32 +21,115 @@\n #ifdef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n #endif\n-\n-#ifdef __ARM_FEATURE_MATMUL_FP64\n-#error \"__ARM_FEATURE_MATMUL_FP64 is defined but should not be!\"\n+#ifdef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n #endif\n \n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.6-a\")\n #ifndef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n #endif\n-#ifdef __ARM_FEATURE_MATMUL_FP64\n-#error \"__ARM_FEATURE_MATMUL_FP64 is defined but should not be!\"\n+#ifdef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n #endif\n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.6-a+sve\")\n+#ifndef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n+#pragma GCC pop_pragma\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.2-a+i8mm\")\n #ifndef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n #endif\n+#ifdef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+i8mm+sve\")\n+#ifndef __ARM_FEATURE_MATMUL_INT8\n+#error \"__ARM_FEATURE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+f32mm\")\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n+#pragma GCC pop_pragma\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.2-a+f64mm\")\n-#ifndef __ARM_FEATURE_MATMUL_FP64\n-#error \"__ARM_FEATURE_MATMUL_FP64 is not defined but should be!\"\n+#ifndef __ARM_FEATURE_SVE\n+#error \"__ARM_FEATURE_SVE is not defined but should be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_INT8\n+#error \"__ARM_FEATURE_SVE_MATMUL_INT8 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifndef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is not defined but should be!\"\n #endif\n #pragma GCC pop_options\n \n@@ -55,13 +138,25 @@\n #ifdef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n #endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n #pragma GCC pop_options\n \n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.6-a+nofp\")\n #ifdef __ARM_FEATURE_MATMUL_INT8\n #error \"__ARM_FEATURE_MATMUL_INT8 is defined but should not be!\"\n #endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP32\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP32 is defined but should not be!\"\n+#endif\n+#ifdef __ARM_FEATURE_SVE_MATMUL_FP64\n+#error \"__ARM_FEATURE_SVE_MATMUL_FP64 is defined but should not be!\"\n+#endif\n #pragma GCC pop_options\n \n #ifdef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC"}, {"sha": "86081edbd65d8cad124cd7f662e6afd52cd2871e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "c8df00f8a0208239f98a6d291d34f9ee1583386f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "2fb9d5b74863a58db74131a6c485f09db8c50b9f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "3cd211b164681e9dcfd31f8c0ef3b37eb1267878", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "44b16ed5f721fb0e7778a91cbf61cab793a17fd5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "3aa9a15eeee2b5d442f83e97e12eaa4748c4b1d2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "49aff5146f2b9d3df20e5f91e78ed7e613744151", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "00bf9e129f5f6103959c010f242e4a854e0b550b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "9e9b3290a12098b242ec3205365d0990ad3c066e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "64ec628714b7dd7a04356253fdcb71245a11c6ce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "22701320bf73c3bb35fbd3075d30a9e2347b24b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n-/* { dg-additional-options \"-march=armv8.6-a+sve+f64mm\" } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n /* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n \n #include \"test_sve_acle.h\""}, {"sha": "f66dbf397c43cb4a1e7351659ac65083a80d372f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mmla_f32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_f32mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f32mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** mmla_f32_tied1:\n+**\tfmmla\tz0\\.s, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_f32_tied1, svfloat32_t, svfloat32_t,\n+\t     z0 = svmmla_f32 (z0, z4, z5),\n+\t     z0 = svmmla (z0, z4, z5))\n+\n+/*\n+** mmla_f32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tfmmla\tz0\\.s, \\1\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_f32_tied2, svfloat32_t, svfloat32_t,\n+\t\t z0_res = svmmla_f32 (z4, z0, z1),\n+\t\t z0_res = svmmla (z4, z0, z1))\n+\n+/*\n+** mmla_f32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tfmmla\tz0\\.s, z1\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_f32_tied3, svfloat32_t, svfloat32_t,\n+\t\t z0_res = svmmla_f32 (z4, z1, z0),\n+\t\t z0_res = svmmla (z4, z1, z0))\n+\n+/*\n+** mmla_f32_untied:\n+**\tmovprfx\tz0, z1\n+**\tfmmla\tz0\\.s, z4\\.s, z5\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_f32_untied, svfloat32_t, svfloat32_t,\n+\t     z0 = svmmla_f32 (z1, z4, z5),\n+\t     z0 = svmmla (z1, z4, z5))"}, {"sha": "49dc0607cfff73eab6665a3bc135f5310fe2eaae", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mmla_f64.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** mmla_f64_tied1:\n+**\tfmmla\tz0\\.d, z4\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_f64_tied1, svfloat64_t, svfloat64_t,\n+\t     z0 = svmmla_f64 (z0, z4, z5),\n+\t     z0 = svmmla (z0, z4, z5))\n+\n+/*\n+** mmla_f64_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tfmmla\tz0\\.d, \\1, z1\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_f64_tied2, svfloat64_t, svfloat64_t,\n+\t\t z0_res = svmmla_f64 (z4, z0, z1),\n+\t\t z0_res = svmmla (z4, z0, z1))\n+\n+/*\n+** mmla_f64_tied3:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tfmmla\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_f64_tied3, svfloat64_t, svfloat64_t,\n+\t\t z0_res = svmmla_f64 (z4, z1, z0),\n+\t\t z0_res = svmmla (z4, z1, z0))\n+\n+/*\n+** mmla_f64_untied:\n+**\tmovprfx\tz0, z1\n+**\tfmmla\tz0\\.d, z4\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_f64_untied, svfloat64_t, svfloat64_t,\n+\t     z0 = svmmla_f64 (z1, z4, z5),\n+\t     z0 = svmmla (z1, z4, z5))"}, {"sha": "e7ce009acfcf53b6fc49d363cb6eb4b745e77b4e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mmla_s32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** mmla_s32_tied1:\n+**\tsmmla\tz0\\.s, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_s32_tied1, svint32_t, svint8_t,\n+\t     z0 = svmmla_s32 (z0, z4, z5),\n+\t     z0 = svmmla (z0, z4, z5))\n+\n+/*\n+** mmla_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsmmla\tz0\\.s, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_s32_tied2, svint32_t, svint8_t,\n+\t\t z0_res = svmmla_s32 (z4, z0, z1),\n+\t\t z0_res = svmmla (z4, z0, z1))\n+\n+/*\n+** mmla_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsmmla\tz0\\.s, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_s32_tied3, svint32_t, svint8_t,\n+\t\t z0_res = svmmla_s32 (z4, z1, z0),\n+\t\t z0_res = svmmla (z4, z1, z0))\n+\n+/*\n+** mmla_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tsmmla\tz0\\.s, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_s32_untied, svint32_t, svint8_t,\n+\t     z0 = svmmla_s32 (z1, z4, z5),\n+\t     z0 = svmmla (z1, z4, z5))"}, {"sha": "81f5166fbf9e88e12782fb781f273af1e71c26d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/mmla_u32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fmmla_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** mmla_u32_tied1:\n+**\tummla\tz0\\.s, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_u32_tied1, svuint32_t, svuint8_t,\n+\t     z0 = svmmla_u32 (z0, z4, z5),\n+\t     z0 = svmmla (z0, z4, z5))\n+\n+/*\n+** mmla_u32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tummla\tz0\\.s, \\1\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_u32_tied2, svuint32_t, svuint8_t,\n+\t\t z0_res = svmmla_u32 (z4, z0, z1),\n+\t\t z0_res = svmmla (z4, z0, z1))\n+\n+/*\n+** mmla_u32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tummla\tz0\\.s, z1\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (mmla_u32_tied3, svuint32_t, svuint8_t,\n+\t\t z0_res = svmmla_u32 (z4, z1, z0),\n+\t\t z0_res = svmmla (z4, z1, z0))\n+\n+/*\n+** mmla_u32_untied:\n+**\tmovprfx\tz0, z1\n+**\tummla\tz0\\.s, z4\\.b, z5\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (mmla_u32_untied, svuint32_t, svuint8_t,\n+\t     z0 = svmmla_u32 (z1, z4, z5),\n+\t     z0 = svmmla (z1, z4, z5))"}, {"sha": "c6d74a4af36578fe3b2455b9b1dcbdbea25e1ca1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sudot_lane_s32.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_lane_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** sudot_lane_0_s32_tied1:\n+**\tsudot\tz0\\.s, z2\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_lane_0_s32_tied1, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_lane_s32 (z0, z2, z4, 0),\n+\t       z0 = svsudot_lane (z0, z2, z4, 0))\n+\n+/*\n+** sudot_lane_0_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z2\n+**\tsudot\tz0\\.s, \\1\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV2 (sudot_lane_0_s32_tied2, svint32_t, svint8_t, svuint8_t,\n+\t\t    z0_res = svsudot_lane_s32 (z2, z0, z4, 0),\n+\t\t    z0_res = svsudot_lane (z2, z0, z4, 0))\n+\n+/*\n+** sudot_lane_0_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tsudot\tz0\\.s, z2\\.b, \\1\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV (sudot_lane_0_s32_tied3, svint32_t, svint8_t, svuint8_t,\n+\t\t   z0_res = svsudot_lane_s32 (z4, z2, z0, 0),\n+\t\t   z0_res = svsudot_lane (z4, z2, z0, 0))\n+\n+/*\n+** sudot_lane_0_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tsudot\tz0\\.s, z2\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_lane_0_s32_untied, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_lane_s32 (z1, z2, z4, 0),\n+\t       z0 = svsudot_lane (z1, z2, z4, 0))\n+\n+/*\n+** sudot_lane_1_s32:\n+**\tsudot\tz0\\.s, z2\\.b, z5\\.b\\[1\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_lane_1_s32, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_lane_s32 (z0, z2, z5, 1),\n+\t       z0 = svsudot_lane (z0, z2, z5, 1))\n+\n+/*\n+** sudot_lane_2_s32:\n+**\tsudot\tz0\\.s, z2\\.b, z5\\.b\\[2\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_lane_2_s32, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_lane_s32 (z0, z2, z5, 2),\n+\t       z0 = svsudot_lane (z0, z2, z5, 2))\n+\n+/*\n+** sudot_lane_3_s32:\n+**\tsudot\tz0\\.s, z2\\.b, z5\\.b\\[3\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_lane_3_s32, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_lane_s32 (z0, z2, z5, 3),\n+\t       z0 = svsudot_lane (z0, z2, z5, 3))\n+\n+/*\n+** sudot_lane_z8_s32:\n+**\tstr\td8, \\[sp, -16\\]!\n+**\tmov\t(z[0-7])\\.d, z8\\.d\n+**\tsudot\tz0\\.s, z1\\.b, \\1\\.b\\[1\\]\n+**\tldr\td8, \\[sp\\], 16\n+**\tret\n+*/\n+TEST_TRIPLE_LANE_REG (sudot_lane_z8_s32, svint32_t, svint8_t, svuint8_t,\n+\t\t      z8,\n+\t\t      z0 = svsudot_lane_s32 (z0, z1, z8, 1),\n+\t\t      z0 = svsudot_lane (z0, z1, z8, 1))\n+\n+/*\n+** sudot_lane_z16_s32:\n+**\tmov\t(z[0-7])\\.d, z16\\.d\n+**\tsudot\tz0\\.s, z1\\.b, \\1\\.b\\[1\\]\n+**\tret\n+*/\n+TEST_TRIPLE_LANE_REG (sudot_lane_z16_s32, svint32_t, svint8_t, svuint8_t,\n+\t\t      z16,\n+\t\t      z0 = svsudot_lane_s32 (z0, z1, z16, 1),\n+\t\t      z0 = svsudot_lane (z0, z1, z16, 1))"}, {"sha": "4b452619eee40fd18d36d779d5366f1ee0456f64", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sudot_s32.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsudot_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** sudot_s32_tied1:\n+**\tusdot\tz0\\.s, z2\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_s32_tied1, svint32_t, svint8_t, svuint8_t,\n+\t       z0 = svsudot_s32 (z0, z2, z4),\n+\t       z0 = svsudot (z0, z2, z4))\n+\n+/*\n+** sudot_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tusdot\tz0\\.s, z2\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV (sudot_s32_tied2, svint32_t, svint8_t, svuint8_t,\n+\t\t   z0_res = svsudot_s32 (z4, z2, z0),\n+\t\t   z0_res = svsudot (z4, z2, z0))\n+\n+/*\n+** sudot_w0_s32_tied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tusdot\tz0\\.s, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_TRIPLE_ZX (sudot_w0_s32_tied, svint32_t, svint8_t, uint8_t,\n+\t       z0 = svsudot_n_s32 (z0, z2, x0),\n+\t       z0 = svsudot (z0, z2, x0))\n+\n+/*\n+** sudot_9_s32_tied:\n+**\tmov\t(z[0-9]+\\.b), #9\n+**\tusdot\tz0\\.s, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_TRIPLE_Z (sudot_9_s32_tied, svint32_t, svint8_t, uint8_t,\n+\t       z0 = svsudot_n_s32 (z0, z2, 9),\n+\t       z0 = svsudot (z0, z2, 9))"}, {"sha": "fbf392b3ed49be37158790d3db6689bdb3ac72ef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/test_sve_acle.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftest_sve_acle.h?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -68,6 +68,35 @@\n     return z0_res;\t\t\t\t\t\t\\\n   }\n \n+#define TEST_TRIPLE_Z(NAME, TYPE1, TYPE2, TYPE3, CODE1, CODE2)\t\\\n+  PROTO (NAME, TYPE1, (TYPE1 z0, TYPE1 z1, TYPE2 z2, TYPE2 z3,\t\\\n+\t\t       TYPE3 z4, TYPE3 z5,\t\t\t\\\n+\t\t       svbool_t p0, svbool_t p1))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0;\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TRIPLE_Z_REV2(NAME, TYPE1, TYPE2, TYPE3, CODE1, CODE2)\\\n+  PROTO (NAME, TYPE1, (TYPE2 z0, TYPE2 z1, TYPE1 z2, TYPE1 z3,\t\\\n+\t\t       TYPE3 z4, TYPE3 z5,\t\t\t\\\n+\t\t       svbool_t p0, svbool_t p1))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 z0_res;\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TRIPLE_Z_REV(NAME, TYPE1, TYPE2, TYPE3, CODE1, CODE2)\\\n+  PROTO (NAME, TYPE1, (TYPE3 z0, TYPE3 z1, TYPE2 z2, TYPE2 z3,\t\\\n+\t\t       TYPE1 z4, TYPE1 z5,\t\t\t\\\n+\t\t       svbool_t p0, svbool_t p1))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 z0_res;\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0_res;\t\t\t\t\t\t\\\n+  }\n+\n #define TEST_DUAL_LANE_REG(NAME, ZTYPE1, ZTYPE2, REG, CODE1, CODE2) \\\n   PROTO (NAME, void, (void))\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n@@ -79,6 +108,17 @@\n     __asm volatile (\"\" :: \"w\" (z0));\t\t\t\t\\\n   }\n \n+#define TEST_TRIPLE_LANE_REG(NAME, ZTYPE1, ZTYPE2, ZTYPE3, REG, CODE1, CODE2) \\\n+  PROTO (NAME, void, (void))\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register ZTYPE1 z0 __asm (\"z0\");\t\t\t\t\\\n+    register ZTYPE2 z1 __asm (\"z1\");\t\t\t\t\\\n+    register ZTYPE3 REG __asm (#REG);\t\t\t\t\\\n+    __asm volatile (\"\" : \"=w\" (z0), \"=w\" (z1), \"=w\" (REG));\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    __asm volatile (\"\" :: \"w\" (z0));\t\t\t\t\\\n+  }\n+\n #define TEST_TYPE_CHANGE_Z(NAME, TYPE1, TYPE2, CODE1, CODE2)\t\\\n   PROTO (NAME, TYPE1, (TYPE2 z0, TYPE2 z1, TYPE2 z2, TYPE2 z3,\t\\\n \t\t       svbool_t p0, svbool_t p1))\t\t\\\n@@ -132,6 +172,15 @@\n     return z0;\t\t\t\t\t\t\t\\\n   }\n \n+#define TEST_TRIPLE_ZX(NAME, TYPE1, TYPE2, TYPE3, CODE1, CODE2)\t\\\n+  PROTO (NAME, TYPE1, (TYPE1 z0, TYPE1 z1, TYPE2 z2, TYPE2 z3,\t\\\n+\t\t       TYPE3 x0, TYPE3 x1,\t\t\t\\\n+\t\t       svbool_t p0, svbool_t p1))\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INVOKE (CODE1, CODE2);\t\t\t\t\t\\\n+    return z0;\t\t\t\t\t\t\t\\\n+  }\n+\n #define TEST_TYPE_CHANGE_ZX(NAME, ZTYPE1, ZTYPE2, STYPE, CODE1, CODE2) \\\n   PROTO (NAME, ZTYPE1, (ZTYPE2 z0, ZTYPE2 z1, ZTYPE2 z2,\t\\\n \t\t\tZTYPE2 z3, svbool_t p0, svbool_t p1,\t\\"}, {"sha": "6420d0f0aca91d580300fd9644fae5a5300553c8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_f16_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f16_tied1, svfloat16_t,\n+\t\tz0 = svtrn1q_f16 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_f16_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f16_tied2, svfloat16_t,\n+\t\tz0 = svtrn1q_f16 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_f16_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f16_untied, svfloat16_t,\n+\t\tz0 = svtrn1q_f16 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "6fb2eecf5d845cd3fcb89641ce2fd0f241c5ec7a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_f32_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f32_tied1, svfloat32_t,\n+\t\tz0 = svtrn1q_f32 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_f32_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f32_tied2, svfloat32_t,\n+\t\tz0 = svtrn1q_f32 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_f32_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f32_untied, svfloat32_t,\n+\t\tz0 = svtrn1q_f32 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "e786a8d049b63b00b72b574021658a2288be9fea", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_f64_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f64_tied1, svfloat64_t,\n+\t\tz0 = svtrn1q_f64 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_f64_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f64_tied2, svfloat64_t,\n+\t\tz0 = svtrn1q_f64 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_f64_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_f64_untied, svfloat64_t,\n+\t\tz0 = svtrn1q_f64 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "548360719a6a80e69547c5653e5b63082aa25bba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_s16_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s16_tied1, svint16_t,\n+\t\tz0 = svtrn1q_s16 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_s16_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s16_tied2, svint16_t,\n+\t\tz0 = svtrn1q_s16 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_s16_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s16_untied, svint16_t,\n+\t\tz0 = svtrn1q_s16 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "ccb8319f7ab07fc31e9e04d2e06b60e7af0b3a6e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_s32_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s32_tied1, svint32_t,\n+\t\tz0 = svtrn1q_s32 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_s32_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s32_tied2, svint32_t,\n+\t\tz0 = svtrn1q_s32 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_s32_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s32_untied, svint32_t,\n+\t\tz0 = svtrn1q_s32 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "fe8125a8a1668879cf48ba25ce234e85f1fbbae8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_s64_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s64_tied1, svint64_t,\n+\t\tz0 = svtrn1q_s64 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_s64_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s64_tied2, svint64_t,\n+\t\tz0 = svtrn1q_s64 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_s64_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s64_untied, svint64_t,\n+\t\tz0 = svtrn1q_s64 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "48040c1ad36f43bce8ff10e5260b1ff9337821b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_s8_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s8_tied1, svint8_t,\n+\t\tz0 = svtrn1q_s8 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_s8_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s8_tied2, svint8_t,\n+\t\tz0 = svtrn1q_s8 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_s8_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_s8_untied, svint8_t,\n+\t\tz0 = svtrn1q_s8 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "3657f919eedb337ca963a8371863d11ad4d71c80", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_u16_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u16_tied1, svuint16_t,\n+\t\tz0 = svtrn1q_u16 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_u16_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u16_tied2, svuint16_t,\n+\t\tz0 = svtrn1q_u16 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_u16_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u16_untied, svuint16_t,\n+\t\tz0 = svtrn1q_u16 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "cc5ea2878cac6cc081eecc4c770b7e922b549341", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_u32_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u32_tied1, svuint32_t,\n+\t\tz0 = svtrn1q_u32 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_u32_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u32_tied2, svuint32_t,\n+\t\tz0 = svtrn1q_u32 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_u32_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u32_untied, svuint32_t,\n+\t\tz0 = svtrn1q_u32 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "4435b53d03e32a51d97caa010d05302bdd6868d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_u64_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u64_tied1, svuint64_t,\n+\t\tz0 = svtrn1q_u64 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_u64_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u64_tied2, svuint64_t,\n+\t\tz0 = svtrn1q_u64 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_u64_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u64_untied, svuint64_t,\n+\t\tz0 = svtrn1q_u64 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "4ebfedbea5f3372b390f222aa5a0de2a6b28f1bb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_u8_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u8_tied1, svuint8_t,\n+\t\tz0 = svtrn1q_u8 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_u8_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u8_tied2, svuint8_t,\n+\t\tz0 = svtrn1q_u8 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_u8_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_u8_untied, svuint8_t,\n+\t\tz0 = svtrn1q_u8 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "db219092978602e04e1dac29bccbef9d585538e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_f16_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f16_tied1, svfloat16_t,\n+\t\tz0 = svtrn2q_f16 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_f16_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f16_tied2, svfloat16_t,\n+\t\tz0 = svtrn2q_f16 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_f16_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f16_untied, svfloat16_t,\n+\t\tz0 = svtrn2q_f16 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "1367a1e068097d24aa797c836f62ebb0e1364ec9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_f32_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f32_tied1, svfloat32_t,\n+\t\tz0 = svtrn2q_f32 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_f32_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f32_tied2, svfloat32_t,\n+\t\tz0 = svtrn2q_f32 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_f32_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f32_untied, svfloat32_t,\n+\t\tz0 = svtrn2q_f32 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "54325e705eabfb6566dd9cecaf19b4c883d3d5f2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_f64_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f64_tied1, svfloat64_t,\n+\t\tz0 = svtrn2q_f64 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_f64_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f64_tied2, svfloat64_t,\n+\t\tz0 = svtrn2q_f64 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_f64_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_f64_untied, svfloat64_t,\n+\t\tz0 = svtrn2q_f64 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "a0b6412783d20dcd90ed453dcd9b77f02a01cbf3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_s16_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s16_tied1, svint16_t,\n+\t\tz0 = svtrn2q_s16 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_s16_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s16_tied2, svint16_t,\n+\t\tz0 = svtrn2q_s16 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_s16_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s16_untied, svint16_t,\n+\t\tz0 = svtrn2q_s16 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "7c128c6effc1e8df3c3699682945fded31493afc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_s32_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s32_tied1, svint32_t,\n+\t\tz0 = svtrn2q_s32 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_s32_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s32_tied2, svint32_t,\n+\t\tz0 = svtrn2q_s32 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_s32_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s32_untied, svint32_t,\n+\t\tz0 = svtrn2q_s32 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "f22222525b9a48d804d3c181709b5deafe0ae54d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_s64_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s64_tied1, svint64_t,\n+\t\tz0 = svtrn2q_s64 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_s64_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s64_tied2, svint64_t,\n+\t\tz0 = svtrn2q_s64 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_s64_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s64_untied, svint64_t,\n+\t\tz0 = svtrn2q_s64 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "bd5243f35ce9e27041713b10e14c1f1ac1094191", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_s8_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s8_tied1, svint8_t,\n+\t\tz0 = svtrn2q_s8 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_s8_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s8_tied2, svint8_t,\n+\t\tz0 = svtrn2q_s8 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_s8_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_s8_untied, svint8_t,\n+\t\tz0 = svtrn2q_s8 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "8da8563b201d053b9f96310074c1e729584a4b5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_u16_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u16_tied1, svuint16_t,\n+\t\tz0 = svtrn2q_u16 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_u16_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u16_tied2, svuint16_t,\n+\t\tz0 = svtrn2q_u16 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_u16_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u16_untied, svuint16_t,\n+\t\tz0 = svtrn2q_u16 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "6c0af02da8f5eee610e5f1a035937ade1627b8f7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_u32_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u32_tied1, svuint32_t,\n+\t\tz0 = svtrn2q_u32 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_u32_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u32_tied2, svuint32_t,\n+\t\tz0 = svtrn2q_u32 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_u32_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u32_untied, svuint32_t,\n+\t\tz0 = svtrn2q_u32 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "857595cbbf2caf1762050c6dc910140bcd53668c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_u64_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u64_tied1, svuint64_t,\n+\t\tz0 = svtrn2q_u64 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_u64_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u64_tied2, svuint64_t,\n+\t\tz0 = svtrn2q_u64 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_u64_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u64_untied, svuint64_t,\n+\t\tz0 = svtrn2q_u64 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "1fb85b249f768a07409bd9a1c81530256e3a523f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_u8_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u8_tied1, svuint8_t,\n+\t\tz0 = svtrn2q_u8 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_u8_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u8_tied2, svuint8_t,\n+\t\tz0 = svtrn2q_u8 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_u8_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_u8_untied, svuint8_t,\n+\t\tz0 = svtrn2q_u8 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "8fd2556878fd3cb5a7ef99e9898985c4d7968e71", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/usdot_lane_s32.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_lane_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** usdot_lane_0_s32_tied1:\n+**\tusdot\tz0\\.s, z2\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_lane_0_s32_tied1, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_lane_s32 (z0, z2, z4, 0),\n+\t       z0 = svusdot_lane (z0, z2, z4, 0))\n+\n+/*\n+** usdot_lane_0_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z2\n+**\tusdot\tz0\\.s, \\1\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV2 (usdot_lane_0_s32_tied2, svint32_t, svuint8_t, svint8_t,\n+\t\t    z0_res = svusdot_lane_s32 (z2, z0, z4, 0),\n+\t\t    z0_res = svusdot_lane (z2, z0, z4, 0))\n+\n+/*\n+** usdot_lane_0_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tusdot\tz0\\.s, z2\\.b, \\1\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV (usdot_lane_0_s32_tied3, svint32_t, svuint8_t, svint8_t,\n+\t\t   z0_res = svusdot_lane_s32 (z4, z2, z0, 0),\n+\t\t   z0_res = svusdot_lane (z4, z2, z0, 0))\n+\n+/*\n+** usdot_lane_0_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tusdot\tz0\\.s, z2\\.b, z4\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_lane_0_s32_untied, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_lane_s32 (z1, z2, z4, 0),\n+\t       z0 = svusdot_lane (z1, z2, z4, 0))\n+\n+/*\n+** usdot_lane_1_s32:\n+**\tusdot\tz0\\.s, z2\\.b, z5\\.b\\[1\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_lane_1_s32, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_lane_s32 (z0, z2, z5, 1),\n+\t       z0 = svusdot_lane (z0, z2, z5, 1))\n+\n+/*\n+** usdot_lane_2_s32:\n+**\tusdot\tz0\\.s, z2\\.b, z5\\.b\\[2\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_lane_2_s32, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_lane_s32 (z0, z2, z5, 2),\n+\t       z0 = svusdot_lane (z0, z2, z5, 2))\n+\n+/*\n+** usdot_lane_3_s32:\n+**\tusdot\tz0\\.s, z2\\.b, z5\\.b\\[3\\]\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_lane_3_s32, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_lane_s32 (z0, z2, z5, 3),\n+\t       z0 = svusdot_lane (z0, z2, z5, 3))\n+\n+/*\n+** usdot_lane_z8_s32:\n+**\tstr\td8, \\[sp, -16\\]!\n+**\tmov\t(z[0-7])\\.d, z8\\.d\n+**\tusdot\tz0\\.s, z1\\.b, \\1\\.b\\[1\\]\n+**\tldr\td8, \\[sp\\], 16\n+**\tret\n+*/\n+TEST_TRIPLE_LANE_REG (usdot_lane_z8_s32, svint32_t, svuint8_t, svint8_t,\n+\t\t      z8,\n+\t\t      z0 = svusdot_lane_s32 (z0, z1, z8, 1),\n+\t\t      z0 = svusdot_lane (z0, z1, z8, 1))\n+\n+/*\n+** usdot_lane_z16_s32:\n+**\tmov\t(z[0-7])\\.d, z16\\.d\n+**\tusdot\tz0\\.s, z1\\.b, \\1\\.b\\[1\\]\n+**\tret\n+*/\n+TEST_TRIPLE_LANE_REG (usdot_lane_z16_s32, svint32_t, svuint8_t, svint8_t,\n+\t\t      z16,\n+\t\t      z0 = svusdot_lane_s32 (z0, z1, z16, 1),\n+\t\t      z0 = svusdot_lane (z0, z1, z16, 1))"}, {"sha": "ccac5cae579d462ba52ea9d06ed9fa809548f9e9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/usdot_s32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusdot_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** usdot_s32_tied1:\n+**\tusdot\tz0\\.s, z2\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_s32_tied1, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusdot_s32 (z0, z2, z4),\n+\t       z0 = svusdot (z0, z2, z4))\n+\n+/*\n+** usdot_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tusdot\tz0\\.s, z2\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV (usdot_s32_tied2, svint32_t, svuint8_t, svint8_t,\n+\t\t   z0_res = svusdot_s32 (z4, z2, z0),\n+\t\t   z0_res = svusdot (z4, z2, z0))\n+\n+/*\n+** usdot_w0_s32_tied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tusdot\tz0\\.s, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_TRIPLE_ZX (usdot_w0_s32_tied, svint32_t, svuint8_t, int8_t,\n+\t\tz0 = svusdot_n_s32 (z0, z2, x0),\n+\t\tz0 = svusdot (z0, z2, x0))\n+\n+/*\n+** usdot_9_s32_tied:\n+**\tmov\t(z[0-9]+\\.b), #9\n+**\tusdot\tz0\\.s, z2\\.b, \\1\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usdot_9_s32_tied, svint32_t, svuint8_t, int8_t,\n+\t       z0 = svusdot_n_s32 (z0, z2, 9),\n+\t       z0 = svusdot (z0, z2, 9))\n+"}, {"sha": "9440f3fd919c286da920d87b3f5248f15027406c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/usmmla_s32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusmmla_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusmmla_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fusmmla_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-require-effective-target aarch64_asm_i8mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** usmmla_s32_tied1:\n+**\tusmmla\tz0\\.s, z2\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usmmla_s32_tied1, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusmmla_s32 (z0, z2, z4),\n+\t       z0 = svusmmla (z0, z2, z4))\n+\n+/*\n+** usmmla_s32_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z2\n+**\tusmmla\tz0\\.s, \\1\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV2 (usmmla_s32_tied2, svint32_t, svuint8_t, svint8_t,\n+\t\t    z0_res = svusmmla_s32 (z2, z0, z4),\n+\t\t    z0_res = svusmmla (z2, z0, z4))\n+\n+/*\n+** usmmla_s32_tied3:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tusmmla\tz0\\.s, z2\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z_REV (usmmla_s32_tied3, svint32_t, svuint8_t, svint8_t,\n+\t\t   z0_res = svusmmla_s32 (z4, z2, z0),\n+\t\t   z0_res = svusmmla (z4, z2, z0))\n+\n+/*\n+** usmmla_s32_untied:\n+**\tmovprfx\tz0, z1\n+**\tusmmla\tz0\\.s, z2\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_TRIPLE_Z (usmmla_s32_untied, svint32_t, svuint8_t, svint8_t,\n+\t       z0 = svusmmla_s32 (z1, z2, z4),\n+\t       z0 = svusmmla (z1, z2, z4))"}, {"sha": "c11e5bdc46b93efaf299ec77b9c9ce560c4bd746", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_f16_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f16_tied1, svfloat16_t,\n+\t\tz0 = svuzp1q_f16 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_f16_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f16_tied2, svfloat16_t,\n+\t\tz0 = svuzp1q_f16 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_f16_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f16_untied, svfloat16_t,\n+\t\tz0 = svuzp1q_f16 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "d0ac94543d00f67cdbe547df7bae92371b296bfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_f32_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f32_tied1, svfloat32_t,\n+\t\tz0 = svuzp1q_f32 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_f32_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f32_tied2, svfloat32_t,\n+\t\tz0 = svuzp1q_f32 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_f32_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f32_untied, svfloat32_t,\n+\t\tz0 = svuzp1q_f32 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "ac2e5c5cf141f9db27ff0f881273f1bdab1b996d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_f64_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f64_tied1, svfloat64_t,\n+\t\tz0 = svuzp1q_f64 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_f64_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f64_tied2, svfloat64_t,\n+\t\tz0 = svuzp1q_f64 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_f64_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_f64_untied, svfloat64_t,\n+\t\tz0 = svuzp1q_f64 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "aa200b24ea5c8cad5a14f6c5d0cc7dc13d2ca62b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_s16_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s16_tied1, svint16_t,\n+\t\tz0 = svuzp1q_s16 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_s16_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s16_tied2, svint16_t,\n+\t\tz0 = svuzp1q_s16 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_s16_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s16_untied, svint16_t,\n+\t\tz0 = svuzp1q_s16 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "eb849df74bbc3e020869f04b1caafda4cb5bf73a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_s32_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s32_tied1, svint32_t,\n+\t\tz0 = svuzp1q_s32 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_s32_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s32_tied2, svint32_t,\n+\t\tz0 = svuzp1q_s32 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_s32_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s32_untied, svint32_t,\n+\t\tz0 = svuzp1q_s32 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "e1049761caf5599c6e190768a9be7ca5e5a27c30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_s64_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s64_tied1, svint64_t,\n+\t\tz0 = svuzp1q_s64 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_s64_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s64_tied2, svint64_t,\n+\t\tz0 = svuzp1q_s64 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_s64_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s64_untied, svint64_t,\n+\t\tz0 = svuzp1q_s64 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "8aa5921992a9b17b91df2f48fe96f8d40bac047d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_s8_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s8_tied1, svint8_t,\n+\t\tz0 = svuzp1q_s8 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_s8_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s8_tied2, svint8_t,\n+\t\tz0 = svuzp1q_s8 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_s8_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_s8_untied, svint8_t,\n+\t\tz0 = svuzp1q_s8 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "00ffaab06d69f96bc6b03d9db1edf5fd21e13569", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_u16_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u16_tied1, svuint16_t,\n+\t\tz0 = svuzp1q_u16 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_u16_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u16_tied2, svuint16_t,\n+\t\tz0 = svuzp1q_u16 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_u16_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u16_untied, svuint16_t,\n+\t\tz0 = svuzp1q_u16 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "cd2e4db26b3558c83b000051e4bb49bbb7797d4e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_u32_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u32_tied1, svuint32_t,\n+\t\tz0 = svuzp1q_u32 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_u32_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u32_tied2, svuint32_t,\n+\t\tz0 = svuzp1q_u32 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_u32_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u32_untied, svuint32_t,\n+\t\tz0 = svuzp1q_u32 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "7d8823329a20e29946d7a9059d84013efa6701b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_u64_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u64_tied1, svuint64_t,\n+\t\tz0 = svuzp1q_u64 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_u64_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u64_tied2, svuint64_t,\n+\t\tz0 = svuzp1q_u64 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_u64_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u64_untied, svuint64_t,\n+\t\tz0 = svuzp1q_u64 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "701a1d5751ce2e05eca1582cf9c8754a545d4362", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_u8_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u8_tied1, svuint8_t,\n+\t\tz0 = svuzp1q_u8 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_u8_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u8_tied2, svuint8_t,\n+\t\tz0 = svuzp1q_u8 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_u8_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_u8_untied, svuint8_t,\n+\t\tz0 = svuzp1q_u8 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "e19d118fb83426de69154f003e6d2f6b5c20306d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_f16_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f16_tied1, svfloat16_t,\n+\t\tz0 = svuzp2q_f16 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_f16_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f16_tied2, svfloat16_t,\n+\t\tz0 = svuzp2q_f16 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_f16_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f16_untied, svfloat16_t,\n+\t\tz0 = svuzp2q_f16 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "af7112b150dc30631979b61de561c4ad82743e04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_f32_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f32_tied1, svfloat32_t,\n+\t\tz0 = svuzp2q_f32 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_f32_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f32_tied2, svfloat32_t,\n+\t\tz0 = svuzp2q_f32 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_f32_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f32_untied, svfloat32_t,\n+\t\tz0 = svuzp2q_f32 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "4109b843cc7cd1bee369121e0e8aab6c9c12fbe4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_f64_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f64_tied1, svfloat64_t,\n+\t\tz0 = svuzp2q_f64 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_f64_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f64_tied2, svfloat64_t,\n+\t\tz0 = svuzp2q_f64 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_f64_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_f64_untied, svfloat64_t,\n+\t\tz0 = svuzp2q_f64 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "0c6ab25cf9946bdcf1094c4680f2be1012b52bc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_s16_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s16_tied1, svint16_t,\n+\t\tz0 = svuzp2q_s16 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_s16_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s16_tied2, svint16_t,\n+\t\tz0 = svuzp2q_s16 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_s16_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s16_untied, svint16_t,\n+\t\tz0 = svuzp2q_s16 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "9b914e704a6082d3f0f46cb8e4ed2331301692a3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_s32_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s32_tied1, svint32_t,\n+\t\tz0 = svuzp2q_s32 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_s32_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s32_tied2, svint32_t,\n+\t\tz0 = svuzp2q_s32 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_s32_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s32_untied, svint32_t,\n+\t\tz0 = svuzp2q_s32 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "697e37d788347f8c50f7143ac100f8f4a089a058", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_s64_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s64_tied1, svint64_t,\n+\t\tz0 = svuzp2q_s64 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_s64_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s64_tied2, svint64_t,\n+\t\tz0 = svuzp2q_s64 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_s64_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s64_untied, svint64_t,\n+\t\tz0 = svuzp2q_s64 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "576262c5d358a700e233d824079e6ef443c268f9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_s8_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s8_tied1, svint8_t,\n+\t\tz0 = svuzp2q_s8 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_s8_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s8_tied2, svint8_t,\n+\t\tz0 = svuzp2q_s8 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_s8_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_s8_untied, svint8_t,\n+\t\tz0 = svuzp2q_s8 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "f2debc28fb4a9e041b164bac79f362342b9c41f4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_u16_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u16_tied1, svuint16_t,\n+\t\tz0 = svuzp2q_u16 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_u16_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u16_tied2, svuint16_t,\n+\t\tz0 = svuzp2q_u16 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_u16_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u16_untied, svuint16_t,\n+\t\tz0 = svuzp2q_u16 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "ad6a4bcc09976a6bac67cdf965f332a3bccd5af6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_u32_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u32_tied1, svuint32_t,\n+\t\tz0 = svuzp2q_u32 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_u32_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u32_tied2, svuint32_t,\n+\t\tz0 = svuzp2q_u32 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_u32_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u32_untied, svuint32_t,\n+\t\tz0 = svuzp2q_u32 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "a846aa29590015a76e57bf414cfe21484f492f86", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_u64_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u64_tied1, svuint64_t,\n+\t\tz0 = svuzp2q_u64 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_u64_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u64_tied2, svuint64_t,\n+\t\tz0 = svuzp2q_u64 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_u64_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u64_untied, svuint64_t,\n+\t\tz0 = svuzp2q_u64 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "163c22659bb2378053395d61cf068c2342134764", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_u8_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u8_tied1, svuint8_t,\n+\t\tz0 = svuzp2q_u8 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_u8_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u8_tied2, svuint8_t,\n+\t\tz0 = svuzp2q_u8 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_u8_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_u8_untied, svuint8_t,\n+\t\tz0 = svuzp2q_u8 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "1170cc5e721077dbf7e7bb8ece939a4484107320", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_f16_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f16_tied1, svfloat16_t,\n+\t\tz0 = svzip1q_f16 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_f16_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f16_tied2, svfloat16_t,\n+\t\tz0 = svzip1q_f16 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_f16_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f16_untied, svfloat16_t,\n+\t\tz0 = svzip1q_f16 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "09666da1b370e10baaec4327ead506d9700eef84", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_f32_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f32_tied1, svfloat32_t,\n+\t\tz0 = svzip1q_f32 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_f32_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f32_tied2, svfloat32_t,\n+\t\tz0 = svzip1q_f32 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_f32_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f32_untied, svfloat32_t,\n+\t\tz0 = svzip1q_f32 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "d77fb1c903e6353bd184c766024a4ddd9dd54dc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_f64_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f64_tied1, svfloat64_t,\n+\t\tz0 = svzip1q_f64 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_f64_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f64_tied2, svfloat64_t,\n+\t\tz0 = svzip1q_f64 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_f64_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_f64_untied, svfloat64_t,\n+\t\tz0 = svzip1q_f64 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "92a6b5514cb7fa9c08ae5457b04b46d9f5384730", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_s16_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s16_tied1, svint16_t,\n+\t\tz0 = svzip1q_s16 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_s16_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s16_tied2, svint16_t,\n+\t\tz0 = svzip1q_s16 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_s16_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s16_untied, svint16_t,\n+\t\tz0 = svzip1q_s16 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "a918d2d4c5a65bb83b5361486295645ddaff9eba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_s32_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s32_tied1, svint32_t,\n+\t\tz0 = svzip1q_s32 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_s32_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s32_tied2, svint32_t,\n+\t\tz0 = svzip1q_s32 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_s32_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s32_untied, svint32_t,\n+\t\tz0 = svzip1q_s32 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "be3524fd525af5e207d2a29268d132858c561d7d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_s64_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s64_tied1, svint64_t,\n+\t\tz0 = svzip1q_s64 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_s64_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s64_tied2, svint64_t,\n+\t\tz0 = svzip1q_s64 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_s64_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s64_untied, svint64_t,\n+\t\tz0 = svzip1q_s64 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "24ea2399cb0cd529f406c01dfb2b48633e9a54f0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_s8_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s8_tied1, svint8_t,\n+\t\tz0 = svzip1q_s8 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_s8_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s8_tied2, svint8_t,\n+\t\tz0 = svzip1q_s8 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_s8_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_s8_untied, svint8_t,\n+\t\tz0 = svzip1q_s8 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "65caf9706ac9ef07963c10ce846fab76ff0ff1c8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_u16_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u16_tied1, svuint16_t,\n+\t\tz0 = svzip1q_u16 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_u16_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u16_tied2, svuint16_t,\n+\t\tz0 = svzip1q_u16 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_u16_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u16_untied, svuint16_t,\n+\t\tz0 = svzip1q_u16 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "abd76b74f1794d12a374f9c612f7a823f8e795e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_u32_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u32_tied1, svuint32_t,\n+\t\tz0 = svzip1q_u32 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_u32_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u32_tied2, svuint32_t,\n+\t\tz0 = svzip1q_u32 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_u32_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u32_untied, svuint32_t,\n+\t\tz0 = svzip1q_u32 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "0e91929b7e639ff65802a0baf09a0d6f01424ba1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_u64_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u64_tied1, svuint64_t,\n+\t\tz0 = svzip1q_u64 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_u64_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u64_tied2, svuint64_t,\n+\t\tz0 = svzip1q_u64 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_u64_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u64_untied, svuint64_t,\n+\t\tz0 = svzip1q_u64 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "07d484b0bfc9bcff320875b8168a171063badad9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_u8_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u8_tied1, svuint8_t,\n+\t\tz0 = svzip1q_u8 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_u8_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u8_tied2, svuint8_t,\n+\t\tz0 = svzip1q_u8 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_u8_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_u8_untied, svuint8_t,\n+\t\tz0 = svzip1q_u8 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "984240e1999aa78f7da38dd2bc6a1cdf6b41f713", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_f16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_f16_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f16_tied1, svfloat16_t,\n+\t\tz0 = svzip2q_f16 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_f16_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f16_tied2, svfloat16_t,\n+\t\tz0 = svzip2q_f16 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_f16_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f16_untied, svfloat16_t,\n+\t\tz0 = svzip2q_f16 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "0f8ccd80486723a6c597edb9618ab609084353ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_f32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_f32_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f32_tied1, svfloat32_t,\n+\t\tz0 = svzip2q_f32 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_f32_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f32_tied2, svfloat32_t,\n+\t\tz0 = svzip2q_f32 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_f32_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f32_untied, svfloat32_t,\n+\t\tz0 = svzip2q_f32 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "b5411cff7312ae937498503d5e7941dae002d1e3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_f64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_f64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_f64_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f64_tied1, svfloat64_t,\n+\t\tz0 = svzip2q_f64 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_f64_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f64_tied2, svfloat64_t,\n+\t\tz0 = svzip2q_f64 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_f64_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_f64_untied, svfloat64_t,\n+\t\tz0 = svzip2q_f64 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "66751fc7fb9b17ac8019abf9df2ff7ef0cccca36", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_s16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_s16_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s16_tied1, svint16_t,\n+\t\tz0 = svzip2q_s16 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_s16_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s16_tied2, svint16_t,\n+\t\tz0 = svzip2q_s16 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_s16_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s16_untied, svint16_t,\n+\t\tz0 = svzip2q_s16 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "830de33112ca1ef1fa9112f8b01d4329dfbdaa04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_s32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_s32_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s32_tied1, svint32_t,\n+\t\tz0 = svzip2q_s32 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_s32_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s32_tied2, svint32_t,\n+\t\tz0 = svzip2q_s32 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_s32_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s32_untied, svint32_t,\n+\t\tz0 = svzip2q_s32 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "917be4f4054ea1551dc06cad2c0c73f7fbfd51ee", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_s64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_s64_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s64_tied1, svint64_t,\n+\t\tz0 = svzip2q_s64 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_s64_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s64_tied2, svint64_t,\n+\t\tz0 = svzip2q_s64 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_s64_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s64_untied, svint64_t,\n+\t\tz0 = svzip2q_s64 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "dff6e2d7b0d2e8a41664552cbbb0e287758fa3af", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_s8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_s8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_s8_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s8_tied1, svint8_t,\n+\t\tz0 = svzip2q_s8 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_s8_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s8_tied2, svint8_t,\n+\t\tz0 = svzip2q_s8 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_s8_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_s8_untied, svint8_t,\n+\t\tz0 = svzip2q_s8 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "9e194425cfec2ff0ec0b935cf9b8f8a0726ce221", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_u16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u16.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_u16_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u16_tied1, svuint16_t,\n+\t\tz0 = svzip2q_u16 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_u16_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u16_tied2, svuint16_t,\n+\t\tz0 = svzip2q_u16 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_u16_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u16_untied, svuint16_t,\n+\t\tz0 = svzip2q_u16 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "89de27f6bd24158fc5545437f11f2109c573bfd0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_u32.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u32.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_u32_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u32_tied1, svuint32_t,\n+\t\tz0 = svzip2q_u32 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_u32_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u32_tied2, svuint32_t,\n+\t\tz0 = svzip2q_u32 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_u32_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u32_untied, svuint32_t,\n+\t\tz0 = svzip2q_u32 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "f2c9852acc356962c6922dfcf5b1b6b4d0c1759b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_u64.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u64.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_u64_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u64_tied1, svuint64_t,\n+\t\tz0 = svzip2q_u64 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_u64_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u64_tied2, svuint64_t,\n+\t\tz0 = svzip2q_u64 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_u64_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u64_untied, svuint64_t,\n+\t\tz0 = svzip2q_u64 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "a129055866d91bfd47de6baf9311bbc369ab6c97", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_u8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_u8.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_u8_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u8_tied1, svuint8_t,\n+\t\tz0 = svzip2q_u8 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_u8_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u8_tied2, svuint8_t,\n+\t\tz0 = svzip2q_u8 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_u8_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_u8_untied, svuint8_t,\n+\t\tz0 = svzip2q_u8 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "5b0b00e96b5225fde94b326a9028d5c83656fbc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve+i8mm+f32mm+f64mm\" } */\n+\n+#include <arm_sve.h>\n+\n+svuint32_t\n+f1 (svint32_t s32, svuint8_t u8, svint8_t s8, svuint32_t u32)\n+{\n+  svmmla_s32 (s32); /* { dg-error {too few arguments to function 'svmmla_s32'} } */\n+  svmmla_s32 (s32, s8, s8, u32); /* { dg-error {too many arguments to function 'svmmla_s32'} } */\n+  svmmla_s32 (s32, u32, s8); /* { dg-error {incompatible type for argument 2 of 'svmmla_s32'} } */\n+  svmmla_s32 (s32, u8, s8); /* { dg-error {incompatible type for argument 2 of 'svmmla_s32'} } */\n+  svmmla_s32 (s32, s8, u8); /* { dg-error {incompatible type for argument 3 of 'svmmla_s32'} } */\n+  svmmla_s32 (s32, s8, s32); /* { dg-error {incompatible type for argument 3 of 'svmmla_s32'} } */\n+  svmmla_s32 (s32, s8, 0); /* { dg-error {incompatible type for argument 3 of 'svmmla_s32'} } */\n+  svmmla_s32 (s32, s8, s8);\n+  return svmmla_s32 (s32, s8, s8); /* { dg-error {incompatible types when returning type 'svint32_t' but 'svuint32_t' was expected} } */\n+}\n+\n+void\n+f2 (svbool_t pg, svint8_t s8, svuint8_t u8, svuint32_t u32, svint32_t s32,\n+    svfloat16_t f16, svfloat32_t f32, svfloat64_t f64)\n+{\n+  svmmla (s32, s8); /* { dg-error {too few arguments to function 'svmmla'} } */\n+  svmmla (s32, s8, s8, s8); /* { dg-error {too many arguments to function 'svmmla'} } */\n+  svmmla (0, s8, s8); /* { dg-error {passing 'int' to argument 1 of 'svmmla', which expects an SVE vector type} } */\n+  svmmla (pg, s8, s8); /* { dg-error {'svmmla' has no form that takes 'svbool_t' arguments} } */\n+  svmmla (u8, s8, s8); /* { dg-error {'svmmla' has no form that takes 'svuint8_t' arguments} } */\n+\n+  svmmla (s32, 0, s8); /* { dg-error {passing 'int' to argument 2 of 'svmmla', which expects an SVE vector type} } */\n+  svmmla (s32, u8, s8); /* { dg-error {arguments 1 and 2 of 'svmmla' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svmmla (s32, s8, u8); /* { dg-error {arguments 1 and 3 of 'svmmla' must have the same signedness, but the values passed here have type 'svint32_t' and 'svuint8_t' respectively} } */\n+  svmmla (s32, s8, 0); /* { dg-error {passing 'int' to argument 3 of 'svmmla', which expects an SVE vector type} } */\n+  svmmla (s32, s8, s8);\n+  svmmla (s32, s32, s32); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 2 of 'svmmla', after passing 'svint32_t' to argument 1} } */\n+  svmmla (s32, u32, u32); /* { dg-error {passing 'svuint32_t' instead of the expected 'svint8_t' to argument 2 of 'svmmla', after passing 'svint32_t' to argument 1} } */\n+\n+  svmmla (u32, 0, u8); /* { dg-error {passing 'int' to argument 2 of 'svmmla', which expects an SVE vector type} } */\n+  svmmla (u32, s8, u8); /* { dg-error {arguments 1 and 2 of 'svmmla' must have the same signedness, but the values passed here have type 'svuint32_t' and 'svint8_t' respectively} } */\n+  svmmla (u32, u8, s8); /* { dg-error {arguments 1 and 3 of 'svmmla' must have the same signedness, but the values passed here have type 'svuint32_t' and 'svint8_t' respectively} } */\n+  svmmla (u32, u8, 0); /* { dg-error {passing 'int' to argument 3 of 'svmmla', which expects an SVE vector type} } */\n+  svmmla (u32, u8, u8);\n+  svmmla (u32, s32, s32); /* { dg-error {passing 'svint32_t' instead of the expected 'svuint8_t' to argument 2 of 'svmmla', after passing 'svuint32_t' to argument 1} } */\n+  svmmla (u32, u32, u32); /* { dg-error {passing 'svuint32_t' instead of the expected 'svuint8_t' to argument 2 of 'svmmla', after passing 'svuint32_t' to argument 1} } */\n+\n+  svmmla (f16, s8, s8); /* { dg-error {'svmmla' has no form that takes 'svfloat16_t' arguments} } */\n+  svmmla (f32, s8, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svmmla', but previous arguments had type 'svfloat32_t'} } */\n+  svmmla (f32, s32, s32); /* { dg-error {passing 'svint32_t' to argument 2 of 'svmmla', but previous arguments had type 'svfloat32_t'} } */\n+  svmmla (f32, f16, f16); /* { dg-error {passing 'svfloat16_t' to argument 2 of 'svmmla', but previous arguments had type 'svfloat32_t'} } */\n+  svmmla (f64, f16, f16); /* { dg-error {passing 'svfloat16_t' to argument 2 of 'svmmla', but previous arguments had type 'svfloat64_t'} } */\n+  svmmla (f32, f32, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svmmla', but previous arguments had type 'svfloat32_t'} } */\n+  svmmla (f64, f32, f16); /* { dg-error {passing 'svfloat32_t' to argument 2 of 'svmmla', but previous arguments had type 'svfloat64_t'} } */\n+  svmmla (f64, f64, f16); /* { dg-error {passing 'svfloat16_t' to argument 3 of 'svmmla', but previous arguments had type 'svfloat64_t'} } */\n+\n+  svmmla (f16, f16, f16); /* { dg-error {'svmmla' has no form that takes 'svfloat16_t' arguments} } */\n+  svmmla (f32, f32, f32);\n+  svmmla (f64, f64, f64);\n+}"}, {"sha": "b54725736022b958322e307c9c23c8eb7c279d6c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_2.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svint32_t s32, svint8_t s8)\n+{\n+  svmmla_s32 (s32, s8, s8); /* { dg-error {ACLE function 'svmmla_s32' requires ISA extension 'i8mm'} } */\n+}"}, {"sha": "d1c8297ccfacb75f923c4782f24cf2ed958ac27b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_3.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svint32_t s32, svint8_t s8)\n+{\n+  svmmla (s32, s8, s8); /* { dg-error {ACLE function 'svmmla_s32' requires ISA extension 'i8mm'} } */\n+}"}, {"sha": "e6c3f5f94f2e4d4a14ae8551ed130d247249f678", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_4.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svfloat32_t f32)\n+{\n+  svmmla_f32 (f32, f32, f32); /* { dg-error {ACLE function 'svmmla_f32' requires ISA extension 'f32mm'} } */\n+}"}, {"sha": "8f6f42366e0f0bc61f26febe6e74fe85291b1a5a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_5.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svfloat32_t f32)\n+{\n+  svmmla (f32, f32, f32); /* { dg-error {ACLE function 'svmmla_f32' requires ISA extension 'f32mm'} } */\n+}"}, {"sha": "7ebeb498151bceb0f7849db13de5941d83675c0b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_6.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svfloat64_t f64)\n+{\n+  svmmla_f64 (f64, f64, f64); /* { dg-error {ACLE function 'svmmla_f64' requires ISA extension 'f64mm'} } */\n+}"}, {"sha": "e64ec1ea6cd583b1b971651440ef52b44293b0d4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/mmla_7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fmmla_7.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svfloat64_t f64)\n+{\n+  svmmla (f64, f64, f64); /* { dg-error {ACLE function 'svmmla_f64' requires ISA extension 'f64mm'} } */\n+}"}, {"sha": "600be05a88de852994358ac4fcfc21108e61eb0b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_lane_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_lane_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+i8mm\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int i)\n+{\n+  svsudot_lane (s32, s8, u8); /* { dg-error {too few arguments to function 'svsudot_lane'} } */\n+  svsudot_lane (s32, s8, u8, 0, 0); /* { dg-error {too many arguments to function 'svsudot_lane'} } */\n+  svsudot_lane (0, s8, u8, 0); /* { dg-error {passing 'int' to argument 1 of 'svsudot_lane', which expects an SVE vector type} } */\n+  svsudot_lane (pg, s8, u8, 0); /* { dg-error {'svsudot_lane' has no form that takes 'svbool_t' arguments} } */\n+  svsudot_lane (u8, s8, u8, 0); /* { dg-error {'svsudot_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svsudot_lane (f32, s8, u8, 0); /* { dg-error {'svsudot_lane' has no form that takes 'svfloat32_t' arguments} } */\n+  svsudot_lane (u32, s8, u8, 0); /* { dg-error {'svsudot_lane' has no form that takes 'svuint32_t' arguments} } */\n+  svsudot_lane (s32, s8, u8, 0);\n+  svsudot_lane (s32, 0, u8, 0); /* { dg-error {passing 'int' to argument 2 of 'svsudot_lane', which expects an SVE vector type} } */\n+  svsudot_lane (s32, s8, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svsudot_lane', which expects an SVE vector type} } */\n+\n+  svsudot_lane (s32, s8, u8, 0);\n+  svsudot_lane (s32, u8, u8, 0); /* { dg-error {passing 'svuint8_t' to argument 2 of 'svsudot_lane', which expects a vector of signed integers} } */\n+  svsudot_lane (s32, s8, s8, 0); /* { dg-error {passing 'svint8_t' to argument 3 of 'svsudot_lane', which expects a vector of unsigned integers} } */\n+  svsudot_lane (s32, s32, s32, 0); /* { dg-error {passing 'svint32_t' instead of the expected 'svint8_t' to argument 2 of 'svsudot_lane', after passing 'svint32_t' to argument 1} } */\n+\n+  svsudot_lane (s32, s8, u8, i); /* { dg-error {argument 4 of 'svsudot_lane' must be an integer constant expression} } */\n+  svsudot_lane (s32, s8, u8, 0);\n+  svsudot_lane (s32, s8, u8, 3);\n+  svsudot_lane (s32, s8, u8, 4);  /* { dg-error {passing 4 to argument 4 of 'svsudot_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svsudot_lane (s32, s8, u8, -1);  /* { dg-error {passing -1 to argument 4 of 'svsudot_lane', which expects a value in the range \\[0, 3\\]} } */\n+}"}, {"sha": "f95ac582ffeba71581d39386248b8a8de3884155", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_intq_uintq_opt_n_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_intq_uintq_opt_n_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+i8mm\" } */\n+\n+#include <arm_sve.h>\n+\n+svuint32_t\n+f1 (svint32_t s32, svuint8_t u8, svint8_t s8, svuint32_t u32)\n+{\n+  svsudot_s32 (s32); /* { dg-error {too few arguments to function 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s8, u8, u32); /* { dg-error {too many arguments to function 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s32, u8); /* { dg-error {incompatible type for argument 2 of 'svsudot_s32'} } */\n+  svsudot_s32 (s32, u8, u8); /* { dg-error {incompatible type for argument 2 of 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s8, u32); /* { dg-error {incompatible type for argument 3 of 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s8, s8); /* { dg-error {incompatible type for argument 3 of 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s8, 0); /* { dg-error {incompatible type for argument 3 of 'svsudot_s32'} } */\n+  svsudot_s32 (s32, s8, u8);\n+  return svsudot_s32 (s32, s8, u8); /* { dg-error {incompatible types when returning type 'svint32_t' but 'svuint32_t' was expected} } */\n+}\n+\n+void\n+f2 (svbool_t pg, svint8_t s8, svuint8_t u8, svuint32_t u32,\n+    svint32_t s32, svfloat32_t f32)\n+{\n+  svsudot (s32, s8); /* { dg-error {too few arguments to function 'svsudot'} } */\n+  svsudot (s32, s8, u8, u8); /* { dg-error {too many arguments to function 'svsudot'} } */\n+  svsudot (0, s8, u8); /* { dg-error {passing 'int' to argument 1 of 'svsudot', which expects an SVE vector type} } */\n+  svsudot (pg, s8, u8); /* { dg-error {'svsudot' has no form that takes 'svbool_t' arguments} } */\n+  svsudot (u8, s8, u8); /* { dg-error {'svsudot' has no form that takes 'svuint8_t' arguments} } */\n+  svsudot (f32, s8, u8); /* { dg-error {'svsudot' has no form that takes 'svfloat32_t' arguments} } */\n+  svsudot (s32, s8, u8);\n+  svsudot (s32, 0, u8); /* { dg-error {passing 'int' to argument 2 of 'svsudot', which expects an SVE vector type} } */\n+  svsudot (s32, u8, u8); /* { dg-error {passing 'svuint8_t' to argument 2 of 'svsudot', which expects a vector of signed integers} } */\n+  svsudot (s32, s8, s8); /* { dg-error {passing 'svint8_t' to argument 3 of 'svsudot', which expects a vector of unsigned integers} } */\n+  svsudot (s32, s8, 0);\n+  svsudot (s32, s8, u8);\n+  svsudot (s32, u32, u32); /* { dg-error {passing 'svuint32_t' to argument 2 of 'svsudot', which expects a vector of signed integers} } */\n+}"}, {"sha": "f52fb39bf4dbc37397ba43a46063389b91330224", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+i8mm\" } */\n+\n+#include <arm_sve.h>\n+\n+svuint32_t\n+f1 (svint32_t s32, svuint8_t u8, svint8_t s8, svuint32_t u32)\n+{\n+  svusmmla_s32 (s32); /* { dg-error {too few arguments to function 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u8, s8, u32); /* { dg-error {too many arguments to function 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u32, s8); /* { dg-error {incompatible type for argument 2 of 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, s8, s8); /* { dg-error {incompatible type for argument 2 of 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u8, u8); /* { dg-error {incompatible type for argument 3 of 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u8, s32); /* { dg-error {incompatible type for argument 3 of 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u8, 0); /* { dg-error {incompatible type for argument 3 of 'svusmmla_s32'} } */\n+  svusmmla_s32 (s32, u8, s8);\n+  return svusmmla_s32 (s32, u8, s8); /* { dg-error {incompatible types when returning type 'svint32_t' but 'svuint32_t' was expected} } */\n+}\n+\n+void\n+f2 (svbool_t pg, svint8_t s8, svuint8_t u8, svuint32_t u32,\n+    svint32_t s32, svfloat32_t f32)\n+{\n+  svusmmla (s32, u8); /* { dg-error {too few arguments to function 'svusmmla'} } */\n+  svusmmla (s32, u8, s8, u8); /* { dg-error {too many arguments to function 'svusmmla'} } */\n+  svusmmla (0, u8, s8); /* { dg-error {passing 'int' to argument 1 of 'svusmmla', which expects an SVE vector type} } */\n+  svusmmla (pg, u8, s8); /* { dg-error {'svusmmla' has no form that takes 'svbool_t' arguments} } */\n+  svusmmla (u8, u8, s8); /* { dg-error {'svusmmla' has no form that takes 'svuint8_t' arguments} } */\n+  svusmmla (f32, u8, s8); /* { dg-error {'svusmmla' has no form that takes 'svfloat32_t' arguments} } */\n+  svusmmla (s32, u8, s8);\n+  svusmmla (s32, 0, s8); /* { dg-error {passing 'int' to argument 2 of 'svusmmla', which expects an SVE vector type} } */\n+  svusmmla (s32, u8, u8); /* { dg-error {passing 'svuint8_t' to argument 3 of 'svusmmla', which expects a vector of signed integers} } */\n+  svusmmla (s32, s8, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svusmmla', which expects a vector of unsigned integers} } */\n+  svusmmla (s32, u8, 0); /* { dg-error {passing 'int' to argument 3 of 'svusmmla', which expects an SVE vector type} } */\n+  svusmmla (s32, u8, s8);\n+  svusmmla (s32, u32, u32); /* { dg-error {passing 'svuint32_t' instead of the expected 'svuint8_t' to argument 2 of 'svusmmla', after passing 'svint32_t' to argument 1} } */\n+}"}, {"sha": "b40cfe9e8e0777c813181c83d986360ae4f66d2d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_lane_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_lane_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+i8mm\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f1 (svbool_t pg, svint8_t s8, svuint8_t u8, svint16_t s16, svuint16_t u16,\n+    svint32_t s32, svuint32_t u32, svint64_t s64, svuint64_t u64,\n+    svfloat32_t f32, int i)\n+{\n+  svusdot_lane (s32, u8, s8); /* { dg-error {too few arguments to function 'svusdot_lane'} } */\n+  svusdot_lane (s32, u8, s8, 0, 0); /* { dg-error {too many arguments to function 'svusdot_lane'} } */\n+  svusdot_lane (0, u8, s8, 0); /* { dg-error {passing 'int' to argument 1 of 'svusdot_lane', which expects an SVE vector type} } */\n+  svusdot_lane (pg, u8, s8, 0); /* { dg-error {'svusdot_lane' has no form that takes 'svbool_t' arguments} } */\n+  svusdot_lane (u8, u8, s8, 0); /* { dg-error {'svusdot_lane' has no form that takes 'svuint8_t' arguments} } */\n+  svusdot_lane (f32, u8, s8, 0); /* { dg-error {'svusdot_lane' has no form that takes 'svfloat32_t' arguments} } */\n+  svusdot_lane (u32, u8, s8, 0); /* { dg-error {'svusdot_lane' has no form that takes 'svuint32_t' arguments} } */\n+  svusdot_lane (s32, u8, s8, 0);\n+  svusdot_lane (s32, 0, s8, 0); /* { dg-error {passing 'int' to argument 2 of 'svusdot_lane', which expects an SVE vector type} } */\n+  svusdot_lane (s32, u8, 0, 0); /* { dg-error {passing 'int' to argument 3 of 'svusdot_lane', which expects an SVE vector type} } */\n+\n+  svusdot_lane (s32, u8, s8, 0);\n+  svusdot_lane (s32, s8, s8, 0); /* { dg-error {passing 'svint8_t' to argument 2 of 'svusdot_lane', which expects a vector of unsigned integers} } */\n+  svusdot_lane (s32, u8, u8, 0); /* { dg-error {passing 'svuint8_t' to argument 3 of 'svusdot_lane', which expects a vector of signed integers} } */\n+  svusdot_lane (s32, s32, s32, 0); /* { dg-error {passing 'svint32_t' to argument 2 of 'svusdot_lane', which expects a vector of unsigned integers} } */\n+\n+  svusdot_lane (s32, u8, s8, i); /* { dg-error {argument 4 of 'svusdot_lane' must be an integer constant expression} } */\n+  svusdot_lane (s32, u8, s8, 0);\n+  svusdot_lane (s32, u8, s8, 3);\n+  svusdot_lane (s32, u8, s8, 4);  /* { dg-error {passing 4 to argument 4 of 'svusdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+  svusdot_lane (s32, u8, s8, -1);  /* { dg-error {passing -1 to argument 4 of 'svusdot_lane', which expects a value in the range \\[0, 3\\]} } */\n+}"}, {"sha": "896b80390a202e013278ab34543b7c50f9993ff0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/ternary_uintq_intq_opt_n_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_opt_n_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_opt_n_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fternary_uintq_intq_opt_n_1.c?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.6-a+sve+i8mm\" } */\n+\n+#include <arm_sve.h>\n+\n+svuint32_t\n+f1 (svint32_t s32, svuint8_t u8, svint8_t s8, svuint32_t u32)\n+{\n+  svusdot_s32 (s32); /* { dg-error {too few arguments to function 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u8, s8, u32); /* { dg-error {too many arguments to function 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u32, s8); /* { dg-error {incompatible type for argument 2 of 'svusdot_s32'} } */\n+  svusdot_s32 (s32, s8, s8); /* { dg-error {incompatible type for argument 2 of 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u8, u8); /* { dg-error {incompatible type for argument 3 of 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u8, s32); /* { dg-error {incompatible type for argument 3 of 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u8, 0); /* { dg-error {incompatible type for argument 3 of 'svusdot_s32'} } */\n+  svusdot_s32 (s32, u8, s8);\n+  return svusdot_s32 (s32, u8, s8); /* { dg-error {incompatible types when returning type 'svint32_t' but 'svuint32_t' was expected} } */\n+}\n+\n+void\n+f2 (svbool_t pg, svint8_t s8, svuint8_t u8, svuint32_t u32,\n+    svint32_t s32, svfloat32_t f32)\n+{\n+  svusdot (s32, u8); /* { dg-error {too few arguments to function 'svusdot'} } */\n+  svusdot (s32, u8, s8, u8); /* { dg-error {too many arguments to function 'svusdot'} } */\n+  svusdot (0, u8, s8); /* { dg-error {passing 'int' to argument 1 of 'svusdot', which expects an SVE vector type} } */\n+  svusdot (pg, u8, s8); /* { dg-error {'svusdot' has no form that takes 'svbool_t' arguments} } */\n+  svusdot (u8, u8, s8); /* { dg-error {'svusdot' has no form that takes 'svuint8_t' arguments} } */\n+  svusdot (f32, u8, s8); /* { dg-error {'svusdot' has no form that takes 'svfloat32_t' arguments} } */\n+  svusdot (s32, u8, s8);\n+  svusdot (s32, 0, s8); /* { dg-error {passing 'int' to argument 2 of 'svusdot', which expects an SVE vector type} } */\n+  svusdot (s32, u8, u8); /* { dg-error {passing 'svuint8_t' to argument 3 of 'svusdot', which expects a vector of signed integers} } */\n+  svusdot (s32, s8, s8); /* { dg-error {passing 'svint8_t' to argument 2 of 'svusdot', which expects a vector of unsigned integers} } */\n+  svusdot (s32, u8, 0);\n+  svusdot (s32, u8, s8);\n+  svusdot (s32, u32, u32); /* { dg-error {passing 'svuint32_t' instead of the expected 'svuint8_t' to argument 2 of 'svusdot', after passing 'svint32_t' to argument 1} } */\n+}"}, {"sha": "6c06faf580a0d5950a90ec8bbbef30e3f7ae37b7", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669677425f249c163201c4760d05abb3cf4e6bc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3669677425f249c163201c4760d05abb3cf4e6bc", "patch": "@@ -8996,7 +8996,7 @@ proc check_effective_target_aarch64_tiny { } {\n # various architecture extensions via the .arch_extension pseudo-op.\n \n foreach { aarch64_ext } { \"fp\" \"simd\" \"crypto\" \"crc\" \"lse\" \"dotprod\" \"sve\"\n-\t\t\t  \"f64mm\" } {\n+\t\t\t  \"i8mm\" \"f32mm\" \"f64mm\" } {\n     eval [string map [list FUNC $aarch64_ext] {\n \tproc check_effective_target_aarch64_asm_FUNC_ok { } {\n \t  if { [istarget aarch64*-*-*] } {"}]}