{"sha": "2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjYjU2M2Y2Y2NjYzFhMWQyMjJlMTE0MWM4YjE1ZjA2Nzk4YWM5Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-09T07:00:44Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-09T07:00:44Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r945", "tree": {"sha": "b9c8d53638aefdbe9a3932947ee2682b0f21aede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c8d53638aefdbe9a3932947ee2682b0f21aede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcb563f6cccc1a1d222e1141c8b15f06798ac97/comments", "author": null, "committer": null, "parents": [{"sha": "a8031c4edce5929649e0c2558f5a7977cc4b89fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8031c4edce5929649e0c2558f5a7977cc4b89fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8031c4edce5929649e0c2558f5a7977cc4b89fa"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "39df4d5a5da4a358b56b0a8208b272bc7bb1ad82", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dcb563f6cccc1a1d222e1141c8b15f06798ac97/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dcb563f6cccc1a1d222e1141c8b15f06798ac97/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "patch": "@@ -94,6 +94,11 @@ extern int execv (), execvp ();\n \n #define MIN_FATAL_STATUS 1\n \n+/* Flag saying to print the full filename of libgcc.a\n+   as found through our usual search mechanism.  */\n+\n+static int print_libgcc_file_name;\n+\n /* Flag indicating whether we should print the command and arguments */\n \n static int verbose_flag;\n@@ -1826,6 +1831,10 @@ process_command (argc, argv)\n \t  printf (\"%s\\n\", version_string);\n \t  exit (0);\n \t}\n+      else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n+\t{\n+\t  print_libgcc_file_name = 1;\n+\t}\n       else if (! strcmp (argv[i], \"-Xlinker\"))\n \t{\n \t  /* Pass the argument of this option to the linker when we link.  */\n@@ -1939,6 +1948,8 @@ process_command (argc, argv)\n     {\n       if (!strcmp (argv[i], \"-Xlinker\"))\n \ti++;\n+      else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n+\ti++;\n       else if (argv[i][0] == '-' && argv[i][1] != 0 && argv[i][1] != 'l')\n \t{\n \t  register char *p = &argv[i][1];\n@@ -3038,6 +3049,12 @@ main (argc, argv)\n     if (! switches[i].valid)\n       error (\"unrecognized option `-%s'\", switches[i].part1);\n \n+  if (print_libgcc_file_name)\n+    {\n+      printf (\"%s\\n\", find_file (\"libgcc.a\"));\n+      exit (0);\n+    }\n+\n   /* Obey some of the options.  */\n \n   if (verbose_flag)"}, {"sha": "7d7d73abf1613d8df061ff1e469f4f61a259c596", "filename": "gcc/rtl.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dcb563f6cccc1a1d222e1141c8b15f06798ac97/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dcb563f6cccc1a1d222e1141c8b15f06798ac97/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=2dcb563f6cccc1a1d222e1141c8b15f06798ac97", "patch": "@@ -642,36 +642,28 @@ read_rtx (infile)\n \t    }\n \t  if (c != '\"')\n \t    dump_and_abort ('\"', c, infile);\n-\t  j = 0;\n-\t  stringbufsize = 10;\n-\t  stringbuf = (char *) xmalloc (stringbufsize + 1);\n \n \t  while (1)\n \t    {\n-\t      if (j >= stringbufsize - 4)\n+\t      c = getc (infile); /* Read the string  */\n+\t      if (c == '\\\\')\n \t\t{\n-\t\t  stringbufsize *= 2;\n-\t\t  stringbuf = (char *) xrealloc (stringbuf, stringbufsize + 1);\n-\t\t}\n-\t      stringbuf[j] = getc (infile); /* Read the string  */\n-\t      if (stringbuf[j] == '\\\\')\n-\t\t{\n-\t\t  stringbuf[j] = getc (infile);\t/* Read the string  */\n+\t\t  c = getc (infile);\t/* Read the string  */\n \t\t  /* \\; makes stuff for a C string constant containing\n \t\t     newline and tab.  */\n-\t\t  if (stringbuf[j] == ';')\n-\t\t    {\n-\t\t      strcpy (&stringbuf[j], \"\\\\n\\\\t\");\n-\t\t      j += 3;\n-\t\t    }\n+\t\t  if (c == ';')\n+\t\t    obstack_grow (rtl_obstack, \"\\\\n\\\\t\", 4);\n+\t\t  else\n+\t\t    obstack_1grow (rtl_obstack, c);\n \t\t}\n-\t      else if (stringbuf[j] == '\"')\n+\t      else if (c == '\"')\n \t\tbreak;\n-\t      j++;\n+\n+\t      obstack_1grow (rtl_obstack, c);\n \t    }\n \n-\t  stringbuf[j] = 0;\t/* NUL terminate the string  */\n-\t  stringbuf = (char *) xrealloc (stringbuf, j + 1);\n+\t  obstack_1grow (rtl_obstack, 0);\n+\t  stringbuf = (char *) obstack_finish (rtl_obstack);\n \n \t  if (saw_paren)\n \t    {"}]}