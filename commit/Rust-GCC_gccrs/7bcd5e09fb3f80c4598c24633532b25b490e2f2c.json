{"sha": "7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjZDVlMDlmYjNmODBjNDU5OGMyNDYzMzUzMmIyNWI0OTBlMmYyYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T17:40:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-02T12:14:39Z"}, "message": "aarch64: Relax builtin flags for integer builtins\n\nThis patch relaxes the flags for most integer builtins to NONE as they don't read/write memory\nand don't care about the FPCR/FPSR or exceptions so we should be more aggressive with them.\n\nThis leads to fallout in a testcase where the result of an intrinsic was unused and it is now\nDCE'd. The testcase is adjusted.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (clrsb, clz, ctz, popcount,\n\tvec_smult_lane_, vec_smlal_lane_, vec_smult_laneq_, vec_smlal_laneq_,\n\tvec_umult_lane_, vec_umlal_lane_, vec_umult_laneq_, vec_umlal_laneq_,\n\tashl, sshl, ushl, srshl, urshl, sdot_lane, udot_lane, sdot_laneq,\n\tudot_laneq, usdot_lane, usdot_laneq, sudot_lane, sudot_laneq, ashr,\n\tashr_simd, lshr, lshr_simd, srshr_n, urshr_n, ssra_n, usra_n, srsra_n,\n\tursra_n, sshll_n, ushll_n, sshll2_n, ushll2_n, ssri_n, usri_n, ssli_n,\n\tssli_n, usli_n, bswap, rbit, simd_bsl, eor3q, rax1q, xarq, bcaxq): Use\n\tNONE builtin flags.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/arg-type-diagnostics-1.c: Return result from foo.", "tree": {"sha": "b313ce04200dff8a917fb4e611f504571ee488d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b313ce04200dff8a917fb4e611f504571ee488d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcd5e09fb3f80c4598c24633532b25b490e2f2c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "886f9f519c0c6297c95887839e318fa79cba2052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886f9f519c0c6297c95887839e318fa79cba2052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886f9f519c0c6297c95887839e318fa79cba2052"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "224cff33e35e7864769bfe73e3bab2a4424c4b27", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcd5e09fb3f80c4598c24633532b25b490e2f2c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcd5e09fb3f80c4598c24633532b25b490e2f2c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "patch": "@@ -50,10 +50,10 @@\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n   BUILTIN_VD_BHSI (BINOP, addp, 0, NONE)\n   VAR1 (UNOP, addp, 0, NONE, di)\n-  BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, ALL)\n-  BUILTIN_VDQ_BHSI (UNOP, clz, 2, ALL)\n-  BUILTIN_VS (UNOP, ctz, 2, ALL)\n-  BUILTIN_VB (UNOP, popcount, 2, ALL)\n+  BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, NONE)\n+  BUILTIN_VDQ_BHSI (UNOP, clz, 2, NONE)\n+  BUILTIN_VS (UNOP, ctz, 2, NONE)\n+  BUILTIN_VB (UNOP, popcount, 2, NONE)\n \n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n   BUILTIN_VSDQ_I (BINOP, sqshl, 0, NONE)\n@@ -284,14 +284,14 @@\n   BUILTIN_VD_HSI (BINOP, smull_n, 0, NONE)\n   BUILTIN_VD_HSI (BINOPU, umull_n, 0, NONE)\n \n-  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, ALL)\n-  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, ALL)\n-  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0, ALL)\n-  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_laneq_, 0, ALL)\n-  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_lane_, 0, ALL)\n-  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_lane_, 0, ALL)\n-  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_laneq_, 0, ALL)\n-  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_laneq_, 0, ALL)\n+  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_laneq_, 0, NONE)\n+  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_lane_, 0, NONE)\n+  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_laneq_, 0, NONE)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_laneq_, 0, NONE)\n \n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlsl_lane_, 0, NONE)\n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlsl_laneq_, 0, NONE)\n@@ -315,25 +315,25 @@\n   BUILTIN_VSDQ_HSI (TERNOP_LANE, sqrdmulh_lane, 0, NONE)\n   BUILTIN_VSDQ_HSI (TERNOP_LANE, sqrdmulh_laneq, 0, NONE)\n \n-  BUILTIN_VSDQ_I_DI (BINOP, ashl, 3, ALL)\n+  BUILTIN_VSDQ_I_DI (BINOP, ashl, 3, NONE)\n   /* Implemented by aarch64_<sur>shl<mode>.  */\n-  BUILTIN_VSDQ_I_DI (BINOP, sshl, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (BINOP_UUS, ushl, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (BINOP, srshl, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, ALL)\n+  BUILTIN_VSDQ_I_DI (BINOP, sshl, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (BINOP_UUS, ushl, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (BINOP, srshl, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, NONE)\n \n   /* Implemented by aarch64_<sur><dotprod>{_lane}{q}<dot_mode>.  */\n   BUILTIN_VB (TERNOP, sdot, 0, NONE)\n   BUILTIN_VB (TERNOPU, udot, 0, NONE)\n   BUILTIN_VB (TERNOP_SSUS, usdot, 0, NONE)\n-  BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, ALL)\n-  BUILTIN_VB (QUADOPU_LANE, udot_lane, 0, ALL)\n-  BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0, ALL)\n-  BUILTIN_VB (QUADOPU_LANE, udot_laneq, 0, ALL)\n-  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_lane, 0, ALL)\n-  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_laneq, 0, ALL)\n-  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_lane, 0, ALL)\n-  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_laneq, 0, ALL)\n+  BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, NONE)\n+  BUILTIN_VB (QUADOPU_LANE, udot_lane, 0, NONE)\n+  BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0, NONE)\n+  BUILTIN_VB (QUADOPU_LANE, udot_laneq, 0, NONE)\n+  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_lane, 0, NONE)\n+  BUILTIN_VB (QUADOPSSUS_LANE_QUADTUP, usdot_laneq, 0, NONE)\n+  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_lane, 0, NONE)\n+  BUILTIN_VB (QUADOPSSSU_LANE_QUADTUP, sudot_laneq, 0, NONE)\n \n   /* Implemented by aarch64_fcadd<rot><mode>.   */\n   BUILTIN_VHSDF (BINOP, fcadd90, 0, FP)\n@@ -354,24 +354,24 @@\n   BUILTIN_VQ_HSF (QUADOP_LANE_PAIR, fcmlaq_lane180, 0, ALL)\n   BUILTIN_VQ_HSF (QUADOP_LANE_PAIR, fcmlaq_lane270, 0, ALL)\n \n-  BUILTIN_VDQ_I (SHIFTIMM, ashr, 3, ALL)\n-  VAR1 (SHIFTIMM, ashr_simd, 0, ALL, di)\n-  BUILTIN_VDQ_I (SHIFTIMM, lshr, 3, ALL)\n-  VAR1 (USHIFTIMM, lshr_simd, 0, ALL, di)\n+  BUILTIN_VDQ_I (SHIFTIMM, ashr, 3, NONE)\n+  VAR1 (SHIFTIMM, ashr_simd, 0, NONE, di)\n+  BUILTIN_VDQ_I (SHIFTIMM, lshr, 3, NONE)\n+  VAR1 (USHIFTIMM, lshr_simd, 0, NONE, di)\n   /* Implemented by aarch64_<sur>shr_n<mode>.  */\n-  BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (USHIFTIMM, urshr_n, 0, ALL)\n+  BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (USHIFTIMM, urshr_n, 0, NONE)\n   /* Implemented by aarch64_<sur>sra_n<mode>.  */\n-  BUILTIN_VSDQ_I_DI (SHIFTACC, ssra_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (USHIFTACC, usra_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (SHIFTACC, srsra_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (USHIFTACC, ursra_n, 0, ALL)\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, ssra_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (USHIFTACC, usra_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (SHIFTACC, srsra_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (USHIFTACC, ursra_n, 0, NONE)\n   /* Implemented by aarch64_<sur>shll_n<mode>.  */\n-  BUILTIN_VD_BHSI (SHIFTIMM, sshll_n, 0, ALL)\n-  BUILTIN_VD_BHSI (USHIFTIMM, ushll_n, 0, ALL)\n+  BUILTIN_VD_BHSI (SHIFTIMM, sshll_n, 0, NONE)\n+  BUILTIN_VD_BHSI (USHIFTIMM, ushll_n, 0, NONE)\n   /* Implemented by aarch64_<sur>shll2_n<mode>.  */\n-  BUILTIN_VQW (SHIFTIMM, sshll2_n, 0, ALL)\n-  BUILTIN_VQW (SHIFTIMM, ushll2_n, 0, ALL)\n+  BUILTIN_VQW (SHIFTIMM, sshll2_n, 0, NONE)\n+  BUILTIN_VQW (SHIFTIMM, ushll2_n, 0, NONE)\n   /* Implemented by aarch64_<sur>q<r>shr<u>n_n<mode>.  */\n   BUILTIN_VSQN_HSDI (SHIFTIMM, sqshrun_n, 0, NONE)\n   BUILTIN_VSQN_HSDI (SHIFTIMM, sqrshrun_n, 0, NONE)\n@@ -387,11 +387,11 @@\n   BUILTIN_VQN (SHIFT2IMM, sqrshrn2_n, 0, NONE)\n   BUILTIN_VQN (USHIFT2IMM, uqrshrn2_n, 0, NONE)\n   /* Implemented by aarch64_<sur>s<lr>i_n<mode>.  */\n-  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (USHIFTACC, usri_n, 0, ALL)\n-  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssli_n, 0, ALL)\n-  VAR2 (SHIFTINSERTP, ssli_n, 0, ALL, di, v2di)\n-  BUILTIN_VSDQ_I_DI (USHIFTACC, usli_n, 0, ALL)\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssri_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (USHIFTACC, usri_n, 0, NONE)\n+  BUILTIN_VSDQ_I_DI (SHIFTINSERT, ssli_n, 0, NONE)\n+  VAR2 (SHIFTINSERTP, ssli_n, 0, NONE, di, v2di)\n+  BUILTIN_VSDQ_I_DI (USHIFTACC, usli_n, 0, NONE)\n   /* Implemented by aarch64_<sur>qshl<u>_n<mode>.  */\n   BUILTIN_VSDQ_I (SHIFTIMM_USS, sqshlu_n, 0, NONE)\n   BUILTIN_VSDQ_I (SHIFTIMM, sqshl_n, 0, NONE)\n@@ -550,9 +550,9 @@\n   VAR1 (UNOP, floatunsv4si, 2, FP, v4sf)\n   VAR1 (UNOP, floatunsv2di, 2, FP, v2df)\n \n-  VAR5 (UNOPU, bswap, 2, ALL, v4hi, v8hi, v2si, v4si, v2di)\n+  VAR5 (UNOPU, bswap, 2, NONE, v4hi, v8hi, v2si, v4si, v2di)\n \n-  BUILTIN_VB (UNOP, rbit, 0, ALL)\n+  BUILTIN_VB (UNOP, rbit, 0, NONE)\n \n   /* Implemented by\n      aarch64_<PERMUTE:perm_insn><mode>.  */\n@@ -616,9 +616,9 @@\n   VAR1 (TERNOP, fnma, 4, FP, hf)\n \n   /* Implemented by aarch64_simd_bsl<mode>.  */\n-  BUILTIN_VDQQH (BSL_P, simd_bsl, 0, ALL)\n-  VAR2 (BSL_P, simd_bsl,0, ALL, di, v2di)\n-  BUILTIN_VSDQ_I_DI (BSL_U, simd_bsl, 0, ALL)\n+  BUILTIN_VDQQH (BSL_P, simd_bsl, 0, NONE)\n+  VAR2 (BSL_P, simd_bsl,0, NONE, di, v2di)\n+  BUILTIN_VSDQ_I_DI (BSL_U, simd_bsl, 0, NONE)\n   BUILTIN_VALLDIF (BSL_S, simd_bsl, 0, ALL)\n \n   /* Implemented by aarch64_crypto_aes<op><mode>.  */\n@@ -763,15 +763,15 @@\n   /* Implemented by aarch64_crypto_sha512su1qv2di.  */\n   VAR1 (TERNOPU, crypto_sha512su1q, 0, NONE, v2di)\n   /* Implemented by eor3q<mode>4.  */\n-  BUILTIN_VQ_I (TERNOPU, eor3q, 4, ALL)\n-  BUILTIN_VQ_I (TERNOP, eor3q, 4, ALL)\n+  BUILTIN_VQ_I (TERNOPU, eor3q, 4, NONE)\n+  BUILTIN_VQ_I (TERNOP, eor3q, 4, NONE)\n   /* Implemented by aarch64_rax1qv2di.  */\n-  VAR1 (BINOPU, rax1q, 0, ALL, v2di)\n+  VAR1 (BINOPU, rax1q, 0, NONE, v2di)\n   /* Implemented by aarch64_xarqv2di.  */\n-  VAR1 (TERNOPUI, xarq, 0, ALL, v2di)\n+  VAR1 (TERNOPUI, xarq, 0, NONE, v2di)\n   /* Implemented by bcaxq<mode>4.  */\n-  BUILTIN_VQ_I (TERNOPU, bcaxq, 4, ALL)\n-  BUILTIN_VQ_I (TERNOP, bcaxq, 4, ALL)\n+  BUILTIN_VQ_I (TERNOPU, bcaxq, 4, NONE)\n+  BUILTIN_VQ_I (TERNOP, bcaxq, 4, NONE)\n \n   /* Implemented by aarch64_fml<f16mac1>l<f16quad>_low<mode>.  */\n   VAR1 (TERNOP, fmlal_low, 0, FP, v2sf)"}, {"sha": "ad869a3bc018445a0549020cd6bed3ccfceb9e32", "filename": "gcc/testsuite/gcc.target/aarch64/arg-type-diagnostics-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcd5e09fb3f80c4598c24633532b25b490e2f2c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcd5e09fb3f80c4598c24633532b25b490e2f2c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c?ref=7bcd5e09fb3f80c4598c24633532b25b490e2f2c", "patch": "@@ -3,7 +3,8 @@\n \n #include \"arm_neon.h\"\n \n-void foo (int a)\n+int32x2_t\n+foo (int a)\n {\n   int32x2_t arg1;\n   int32x2_t arg2;\n@@ -15,4 +16,5 @@ void foo (int a)\n      we have to tell dg-error to ignore the line number.  */\n   result = vrsra_n_s32 (arg1, arg2, a);\n   /* { dg-error \"must be a constant immediate\" \"\" { target *-*-* } 0 } */\n+  return result;\n }"}]}