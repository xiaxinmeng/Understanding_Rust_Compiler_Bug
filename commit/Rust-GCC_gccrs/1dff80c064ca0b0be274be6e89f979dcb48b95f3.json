{"sha": "1dff80c064ca0b0be274be6e89f979dcb48b95f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmZjgwYzA2NGNhMGIwYmUyNzRiZTZlODlmOTc5ZGNiNDhiOTVmMw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-01-13T22:51:14Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-13T22:51:14Z"}, "message": "tree-ssa-dse.c (fix_phi_uses): Use SSA operand iterators.\n\n\t* tree-ssa-dse.c (fix_phi_uses): Use SSA operand iterators.\n\t(fix_stmt_v_may_defs): Likewise.\n\nFrom-SVN: r93614", "tree": {"sha": "c2a76dcb552f32a65114368c2ceb5d858cfd13d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2a76dcb552f32a65114368c2ceb5d858cfd13d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dff80c064ca0b0be274be6e89f979dcb48b95f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dff80c064ca0b0be274be6e89f979dcb48b95f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dff80c064ca0b0be274be6e89f979dcb48b95f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dff80c064ca0b0be274be6e89f979dcb48b95f3/comments", "author": null, "committer": null, "parents": [{"sha": "ae59b55c0f1e5115d102d62c3c89040462d364b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae59b55c0f1e5115d102d62c3c89040462d364b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae59b55c0f1e5115d102d62c3c89040462d364b3"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "a9451b2c6c0fe22577836a2d2db3f1f570091946", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dff80c064ca0b0be274be6e89f979dcb48b95f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dff80c064ca0b0be274be6e89f979dcb48b95f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dff80c064ca0b0be274be6e89f979dcb48b95f3", "patch": "@@ -1,3 +1,8 @@\n+2005-01-13  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree-ssa-dse.c (fix_phi_uses): Use SSA operand iterators.\n+\t(fix_stmt_v_may_defs): Likewise.\n+\n 2005-01-13  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_fp_absneg_operator): Use elt_mode"}, {"sha": "5b4482767d8792e6a29b9ee0dba948d4855e4c0c", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dff80c064ca0b0be274be6e89f979dcb48b95f3/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dff80c064ca0b0be274be6e89f979dcb48b95f3/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=1dff80c064ca0b0be274be6e89f979dcb48b95f3", "patch": "@@ -130,24 +130,23 @@ need_imm_uses_for (tree var)\n static void\n fix_phi_uses (tree phi, tree stmt)\n {\n-  stmt_ann_t ann = stmt_ann (stmt);\n-  v_may_def_optype v_may_defs;\n-  unsigned int i;\n-  int j;\n+  use_operand_p use_p;\n+  def_operand_p def_p;\n+  ssa_op_iter iter;\n+  int i;\n \n   get_stmt_operands (stmt);\n-  v_may_defs = V_MAY_DEF_OPS (ann);\n \n-  /* Walk each V_MAY_DEF in STMT.  */\n-  for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs); i++)\n+  FOR_EACH_SSA_MAYDEF_OPERAND (def_p, use_p, stmt, iter)\n     {\n-      tree v_may_def = V_MAY_DEF_RESULT (v_may_defs, i);\n+      tree v_may_def = DEF_FROM_PTR (def_p);\n+      tree v_may_use = USE_FROM_PTR (use_p);\n \n       /* Find any uses in the PHI which match V_MAY_DEF and replace\n \t them with the appropriate V_MAY_DEF_OP.  */\n-      for (j = 0; j < PHI_NUM_ARGS (phi); j++)\n-\tif (v_may_def == PHI_ARG_DEF (phi, j))\n-\t  SET_PHI_ARG_DEF (phi, j, V_MAY_DEF_OP (v_may_defs, i));\n+      for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n+\tif (v_may_def == PHI_ARG_DEF (phi, i))\n+\t  SET_PHI_ARG_DEF (phi, i, v_may_use);\n     }\n }\n \n@@ -157,36 +156,36 @@ fix_phi_uses (tree phi, tree stmt)\n static void\n fix_stmt_v_may_defs (tree stmt1, tree stmt2)\n {\n-  stmt_ann_t ann1 = stmt_ann (stmt1);\n-  stmt_ann_t ann2 = stmt_ann (stmt2);\n-  v_may_def_optype v_may_defs1;\n-  v_may_def_optype v_may_defs2;\n-  unsigned int i, j;\n+  bool found = false;\n+  ssa_op_iter iter1;\n+  ssa_op_iter iter2;\n+  use_operand_p use1_p, use2_p;\n+  def_operand_p def1_p, def2_p;\n \n   get_stmt_operands (stmt1);\n   get_stmt_operands (stmt2);\n-  v_may_defs1 = V_MAY_DEF_OPS (ann1);\n-  v_may_defs2 = V_MAY_DEF_OPS (ann2);\n \n   /* Walk each V_MAY_DEF_OP in stmt1.  */\n-  for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs1); i++)\n+  FOR_EACH_SSA_MAYDEF_OPERAND (def1_p, use1_p, stmt1, iter1)\n     {\n-      tree v_may_def1 = V_MAY_DEF_OP (v_may_defs1, i);\n+      tree use = USE_FROM_PTR (use1_p);\n \n       /* Find the appropriate V_MAY_DEF_RESULT in STMT2.  */\n-      for (j = 0; j < NUM_V_MAY_DEFS (v_may_defs2); j++)\n+      FOR_EACH_SSA_MAYDEF_OPERAND (def2_p, use2_p, stmt2, iter2)\n \t{\n-\t  if (v_may_def1 == V_MAY_DEF_RESULT (v_may_defs2, j))\n+\t  tree def = DEF_FROM_PTR (def2_p);\n+\t  if (use == def)\n \t    {\n \t      /* Update.  */\n-\t      SET_V_MAY_DEF_OP (v_may_defs1, i, V_MAY_DEF_OP (v_may_defs2, j));\n-\t      break;\n-\t    }\n+\t      SET_USE (use1_p, USE_FROM_PTR (use2_p));\n+\t      found = true;\n+              break;\n+            }\n \t}\n \n-      /* If we did not find a corresponding V_MAY_DEF_RESULT, then something\n-\t has gone terribly wrong.  */\n-      gcc_assert (j != NUM_V_MAY_DEFS (v_may_defs2));\n+      /* If we did not find a corresponding V_MAY_DEF_RESULT,\n+\t then something has gone terribly wrong.  */\n+      gcc_assert (found);\n     }\n }\n \n@@ -270,7 +269,6 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n       tree use;\n       tree skipped_phi;\n \n-\n       /* If there are no uses then there is nothing left to do.  */\n       if (num_uses == 0)\n \t{"}]}