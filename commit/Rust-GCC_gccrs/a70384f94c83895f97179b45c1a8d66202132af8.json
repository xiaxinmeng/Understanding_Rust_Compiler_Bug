{"sha": "a70384f94c83895f97179b45c1a8d66202132af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMzg0Zjk0YzgzODk1Zjk3MTc5YjQ1YzFhOGQ2NjIwMjEzMmFmOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T00:39:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T00:39:21Z"}, "message": "libstdc++: Fix filesystem::path pretty printer test failure\n\nOn some systems libstdc++-prettyprinters/cxx17.cc FAILs with this error:\n\nskipping: Python Exception <type 'exceptions.AttributeError'> 'gdb.Type' object has no attribute 'name': ^M\ngot: $27 = filesystem::path \"/dir/.\"^M\nFAIL: libstdc++-prettyprinters/cxx17.cc print path2\n\nThe gdb.Type.name attribute isn't present in GDB 7.6, so we get an\nexception from StdPathPrinter._iterator.__next__ trying to use it.\nThe StdPathPrinter._iterator is already passed the type's name in its\nconstructor, so we can just store that and use it instead of\ngdb.Type.name.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdExpPathPrinter): Store the\n\tname of the type and pass it to the iterator.\n\t(StdPathPrinter): Likewise.\n\t* testsuite/libstdc++-prettyprinters/filesystem-ts.cc: New test.", "tree": {"sha": "a54809f7f4a1cbb59e9c7cf39acd4a134e076570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54809f7f4a1cbb59e9c7cf39acd4a134e076570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a70384f94c83895f97179b45c1a8d66202132af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70384f94c83895f97179b45c1a8d66202132af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70384f94c83895f97179b45c1a8d66202132af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70384f94c83895f97179b45c1a8d66202132af8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54967b02c192f893e0f23481c865dd8abcb74018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54967b02c192f893e0f23481c865dd8abcb74018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54967b02c192f893e0f23481c865dd8abcb74018"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "4176f7390049d88bbd7cdcabd37b543eb7989f94", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70384f94c83895f97179b45c1a8d66202132af8/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70384f94c83895f97179b45c1a8d66202132af8/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=a70384f94c83895f97179b45c1a8d66202132af8", "patch": "@@ -1294,6 +1294,7 @@ class StdExpPathPrinter:\n \n     def __init__ (self, typename, val):\n         self.val = val\n+        self.typename = typename\n         start = self.val['_M_cmpts']['_M_impl']['_M_start']\n         finish = self.val['_M_cmpts']['_M_impl']['_M_finish']\n         self.num_cmpts = int (finish - start)\n@@ -1312,10 +1313,11 @@ def to_string (self):\n             t = self._path_type()\n             if t:\n                 path = '%s [%s]' % (path, t)\n-        return \"filesystem::path %s\" % path\n+        return \"experimental::filesystem::path %s\" % path\n \n     class _iterator(Iterator):\n-        def __init__(self, cmpts):\n+        def __init__(self, cmpts, pathtype):\n+            self.pathtype = pathtype\n             self.item = cmpts['_M_impl']['_M_start']\n             self.finish = cmpts['_M_impl']['_M_finish']\n             self.count = 0\n@@ -1331,13 +1333,13 @@ def __next__(self):\n             self.count = self.count + 1\n             self.item = self.item + 1\n             path = item['_M_pathname']\n-            t = StdExpPathPrinter(item.type.name, item)._path_type()\n+            t = StdExpPathPrinter(self.pathtype, item)._path_type()\n             if not t:\n                 t = count\n             return ('[%s]' % t, path)\n \n     def children(self):\n-        return self._iterator(self.val['_M_cmpts'])\n+        return self._iterator(self.val['_M_cmpts'], self.typename)\n \n class StdPathPrinter:\n     \"Print a std::filesystem::path\"\n@@ -1370,6 +1372,7 @@ def to_string (self):\n \n     class _iterator(Iterator):\n         def __init__(self, impl, pathtype):\n+            self.pathtype = pathtype\n             if impl:\n                 # We can't access _Impl::_M_size because _Impl is incomplete\n                 # so cast to int* to access the _M_size member at offset zero,\n@@ -1402,7 +1405,7 @@ def __next__(self):\n             self.count = self.count + 1\n             self.item = self.item + 1\n             path = item['_M_pathname']\n-            t = StdPathPrinter(item.type.name, item)._path_type()\n+            t = StdPathPrinter(self.pathtype, item)._path_type()\n             if not t:\n                 t = count\n             return ('[%s]' % t, path)"}, {"sha": "692d79fa5a6dfd0f6de4f088581fb1f8a6685770", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/filesystem-ts.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a70384f94c83895f97179b45c1a8d66202132af8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ffilesystem-ts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a70384f94c83895f97179b45c1a8d66202132af8/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ffilesystem-ts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ffilesystem-ts.cc?ref=a70384f94c83895f97179b45c1a8d66202132af8", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-g -O0 -lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/filesystem>\n+#include <iostream>\n+\n+int\n+main()\n+{\n+  std::experimental::filesystem::path path0;\n+// { dg-final { note-test path0 {experimental::filesystem::path \"\"} } }\n+  std::experimental::filesystem::path path1(\"filename\");\n+// { dg-final { note-test path1 {experimental::filesystem::path \"filename\"} } }\n+  std::experimental::filesystem::path path2(\"/dir/.\");\n+// { dg-final { note-test path2 {experimental::filesystem::path \"/dir/.\" = {[root-directory] = \"/\", [1] = \"dir\", [2] = \".\"}} } }\n+\n+  std::cout << \"\\n\";\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}