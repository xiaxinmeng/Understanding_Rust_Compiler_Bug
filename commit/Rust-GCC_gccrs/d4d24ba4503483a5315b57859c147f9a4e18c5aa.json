{"sha": "d4d24ba4503483a5315b57859c147f9a4e18c5aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkMjRiYTQ1MDM0ODNhNTMxNWI1Nzg1OWMxNDdmOWE0ZTE4YzVhYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-04T11:51:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-04T11:51:00Z"}, "message": "optc-gen.awk: Define global_options_set.\n\n\t* optc-gen.awk: Define global_options_set.  Don't define\n\ttarget_flags_explicit.\n\t* opth-gen.awk: Declare global_options_set.  Define\n\ttarget_flags_explicit as macro.\n\t* opts-common.c (handle_option): Take opts_set and generated_p\n\tparameters.\n\t(handle_generated_option, read_cmdline_option, set_option): Take\n\topts_set parameter.\n\t(set_option): Use opts_set instead of hardcoding target_flags and\n\ttarget_flags_explicit.\n\t* opts.c (sel_sched_switch_set, profile_arc_flag_set,\n\tflag_profile_values_set, flag_unroll_loops_set, flag_tracer_set,\n\tflag_value_profile_transformations_set, flag_peel_loops_set,\n\tflag_branch_probabilities_set, flag_inline_functions_set,\n\tflag_ipa_cp_set, flag_ipa_cp_clone_set,\n\tflag_predictive_commoning_set, flag_unswitch_loops_set,\n\tflag_gcse_after_reload_set): Remove.\n\t(common_handle_option, lang_handle_option, target_handle_option):\n\tTake opts_set parameter.  Assert that it is &global_options_set.\n\t(common_handle_option): Don't set _set variables.  Check opts_set\n\tinstead of such variables.\n\t(enable_warning_as_error): Pass &global_options_set to\n\thandle_generated_option.\n\t* opts.h (cl_option_handler_func.handler, set_option,\n\thandle_option, handle_generated_option, read_cmdline_option): Add\n\topts_set parameters.\n\t(handle_option): Add generated_p parameter.\n\t* config/i386/i386.c (ix86_function_specific_save,\n\tix86_function_specific_restore): Updat for renaming of\n\ttarget_flags_explicit field.\n\t* config/i386/i386.opt (target_flags_explicit): Rename to\n\tix86_target_flags_explicit.\n\t* config/ia64/ia64.c (ia64_override_options_after_change): Check\n\tglobal_options_set.x_flag_selective_scheduling and\n\tglobal_options_set.x_flag_selective_scheduling2, not\n\tsel_sched_switch_set.\n\t* flags.h (sel_sched_switch_set,\n\tflag_speculative_prefetching_set): Remove.\n\t* gcc.c (driver_handle_option): Take opts_set parameter.  Assert\n\tthat it is &global_options_set.\n\t(process_command): Pass &global_options_set to\n\tread_cmdline_option.\n\t* lto-opts.c (lto_reissue_options): Pass &global_options_set to\n\tset_option.\n\t* toplev.c (target_flags_explicit): Remove.\n\nc-family:\n\t* c-opts.c (c_common_handle_option): Pass &global_options_set to\n\thandle_generated_option.\n\nFrom-SVN: r164932", "tree": {"sha": "7379b08acfec7fa146c7082af3852ccc85f50fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7379b08acfec7fa146c7082af3852ccc85f50fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4d24ba4503483a5315b57859c147f9a4e18c5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d24ba4503483a5315b57859c147f9a4e18c5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d24ba4503483a5315b57859c147f9a4e18c5aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d24ba4503483a5315b57859c147f9a4e18c5aa/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a2da10512e3f3480ebc6259e8b50fc2a9bce81a"}], "stats": {"total": 285, "additions": 148, "deletions": 137}, "files": [{"sha": "072a118bbe18e69e8ae043d1b0f8fcddee1c367c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -1,3 +1,51 @@\n+2010-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* optc-gen.awk: Define global_options_set.  Don't define\n+\ttarget_flags_explicit.\n+\t* opth-gen.awk: Declare global_options_set.  Define\n+\ttarget_flags_explicit as macro.\n+\t* opts-common.c (handle_option): Take opts_set and generated_p\n+\tparameters.\n+\t(handle_generated_option, read_cmdline_option, set_option): Take\n+\topts_set parameter.\n+\t(set_option): Use opts_set instead of hardcoding target_flags and\n+\ttarget_flags_explicit.\n+\t* opts.c (sel_sched_switch_set, profile_arc_flag_set,\n+\tflag_profile_values_set, flag_unroll_loops_set, flag_tracer_set,\n+\tflag_value_profile_transformations_set, flag_peel_loops_set,\n+\tflag_branch_probabilities_set, flag_inline_functions_set,\n+\tflag_ipa_cp_set, flag_ipa_cp_clone_set,\n+\tflag_predictive_commoning_set, flag_unswitch_loops_set,\n+\tflag_gcse_after_reload_set): Remove.\n+\t(common_handle_option, lang_handle_option, target_handle_option):\n+\tTake opts_set parameter.  Assert that it is &global_options_set.\n+\t(common_handle_option): Don't set _set variables.  Check opts_set\n+\tinstead of such variables.\n+\t(enable_warning_as_error): Pass &global_options_set to\n+\thandle_generated_option.\n+\t* opts.h (cl_option_handler_func.handler, set_option,\n+\thandle_option, handle_generated_option, read_cmdline_option): Add\n+\topts_set parameters.\n+\t(handle_option): Add generated_p parameter.\n+\t* config/i386/i386.c (ix86_function_specific_save,\n+\tix86_function_specific_restore): Updat for renaming of\n+\ttarget_flags_explicit field.\n+\t* config/i386/i386.opt (target_flags_explicit): Rename to\n+\tix86_target_flags_explicit.\n+\t* config/ia64/ia64.c (ia64_override_options_after_change): Check\n+\tglobal_options_set.x_flag_selective_scheduling and\n+\tglobal_options_set.x_flag_selective_scheduling2, not\n+\tsel_sched_switch_set.\n+\t* flags.h (sel_sched_switch_set,\n+\tflag_speculative_prefetching_set): Remove.\n+\t* gcc.c (driver_handle_option): Take opts_set parameter.  Assert\n+\tthat it is &global_options_set.\n+\t(process_command): Pass &global_options_set to\n+\tread_cmdline_option.\n+\t* lto-opts.c (lto_reissue_options): Pass &global_options_set to\n+\tset_option.\n+\t* toplev.c (target_flags_explicit): Remove.\n+\n 2010-10-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/45871"}, {"sha": "fa2e375ce1b7d98c247748de4b88088ea3e24978", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -1,3 +1,8 @@\n+2010-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (c_common_handle_option): Pass &global_options_set to\n+\thandle_generated_option.\n+\n 2010-10-03  Ian Lance Taylor  <iant@google.com>\n \n \t* c.opt (-fplan9-extensions): New option."}, {"sha": "87d975f4b49cf0db97045934afae5f00feb134d2", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -436,7 +436,8 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wall:\n       warn_unused = value;\n       set_Wformat (value);\n-      handle_generated_option (&global_options, OPT_Wimplicit, NULL, value,\n+      handle_generated_option (&global_options, &global_options_set,\n+\t\t\t       OPT_Wimplicit, NULL, value,\n \t\t\t       c_family_lang_mask, kind, handlers);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n@@ -530,11 +531,11 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wimplicit:\n       gcc_assert (value == 0 || value == 1);\n       if (warn_implicit_int == -1)\n-\thandle_generated_option (&global_options, OPT_Wimplicit_int,\n-\t\t\t\t NULL, value,\n+\thandle_generated_option (&global_options, &global_options_set,\n+\t\t\t\t OPT_Wimplicit_int, NULL, value,\n \t\t\t\t c_family_lang_mask, kind, handlers);\n       if (warn_implicit_function_declaration == -1)\n-\thandle_generated_option (&global_options,\n+\thandle_generated_option (&global_options, &global_options_set,\n \t\t\t\t OPT_Wimplicit_function_declaration, NULL,\n \t\t\t\t value, c_family_lang_mask, kind, handlers);\n       break;"}, {"sha": "7fe654a3586920087bd985827f7bcdb27d1254b1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -3802,7 +3802,7 @@ ix86_function_specific_save (struct cl_target_option *ptr)\n   ptr->tune_defaulted = ix86_tune_defaulted;\n   ptr->arch_specified = ix86_arch_specified;\n   ptr->ix86_isa_flags_explicit = ix86_isa_flags_explicit;\n-  ptr->target_flags_explicit = target_flags_explicit;\n+  ptr->ix86_target_flags_explicit = target_flags_explicit;\n \n   /* The fields are char but the variables are not; make sure the\n      values fit in the fields.  */\n@@ -3831,7 +3831,7 @@ ix86_function_specific_restore (struct cl_target_option *ptr)\n   ix86_tune_defaulted = ptr->tune_defaulted;\n   ix86_arch_specified = ptr->arch_specified;\n   ix86_isa_flags_explicit = ptr->ix86_isa_flags_explicit;\n-  target_flags_explicit = ptr->target_flags_explicit;\n+  target_flags_explicit = ptr->ix86_target_flags_explicit;\n \n   /* Recreate the arch feature tests if the arch changed */\n   if (old_arch != ix86_arch)"}, {"sha": "9c1fe1fd729835de10ab6b231758437c481fdeb8", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -50,7 +50,7 @@ int ix86_isa_flags_explicit\n \n ;; which flags were passed by the user\n TargetSave\n-int target_flags_explicit\n+int ix86_target_flags_explicit\n \n ;; whether -mtune was not specified\n TargetSave"}, {"sha": "32fee12e3af0a5e5ce69a239f05ea28552be6c80", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -5650,7 +5650,8 @@ ia64_override_options_after_change (void)\n   flag_schedule_insns_after_reload = 0;\n \n   if (optimize >= 3\n-      && ! sel_sched_switch_set)\n+      && !global_options_set.x_flag_selective_scheduling\n+      && !global_options_set.x_flag_selective_scheduling2)\n     {\n       flag_selective_scheduling2 = 1;\n       flag_sel_sched_pipelining = 1;"}, {"sha": "e69de534427d61ede4b07f4cd3c7db99c4957463", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -276,9 +276,6 @@ extern int flag_evaluation_order;\n extern unsigned HOST_WIDE_INT g_switch_value;\n extern bool g_switch_set;\n \n-/* Same for selective scheduling.  */\n-extern bool sel_sched_switch_set;\n-\n /* Whether to run the warn_unused_result attribute pass.  */\n extern bool flag_warn_unused_result;\n \n@@ -293,10 +290,6 @@ enum graph_dump_types\n };\n extern enum graph_dump_types graph_dump_format;\n \n-/* True if flag_speculative_prefetching was set by user.  Used to suppress\n-   warning message in case flag was set by -fprofile-{generate,use}.  */\n-extern bool flag_speculative_prefetching_set;\n-\n /* Type of stack check.  */\n enum stack_check_type\n {"}, {"sha": "82ddc1620d28c281ffc0c985bcb075e7f05fdfd4", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -3151,6 +3151,7 @@ static int last_language_n_infiles;\n \n static bool\n driver_handle_option (struct gcc_options *opts,\n+\t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n@@ -3163,6 +3164,7 @@ driver_handle_option (struct gcc_options *opts,\n   bool do_save = true;\n \n   gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n   gcc_assert (kind == DK_UNSPECIFIED);\n \n   switch (opt_index)\n@@ -3803,8 +3805,8 @@ process_command (unsigned int decoded_options_count,\n \t  continue;\n \t}\n \n-      read_cmdline_option (&global_options, decoded_options + j,\n-\t\t\t   CL_DRIVER, &handlers);\n+      read_cmdline_option (&global_options, &global_options_set,\n+\t\t\t   decoded_options + j, CL_DRIVER, &handlers);\n     }\n \n   /* If -save-temps=obj and -o name, create the prefix to use for %b."}, {"sha": "f3c5d67382392484e7fa281e7906c081b5ddc085", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -402,7 +402,8 @@ lto_reissue_options (void)\n       void *flag_var = option_flag_var (o->code, &global_options);\n \n       if (flag_var)\n-\tset_option (&global_options, o->code, o->value, o->arg,\n+\tset_option (&global_options, &global_options_set,\n+\t\t    o->code, o->value, o->arg,\n \t\t    0 /*DK_UNSPECIFIED*/);\n \n       if (o->type == CL_TARGET)"}, {"sha": "643ad159a99a7177c7e64f44c99d9b093f480071", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -76,9 +76,7 @@ for (i = 1; i <= n_headers; i++)\n print \"#include \" quote \"opts.h\" quote\n print \"#include \" quote \"intl.h\" quote\n print \"\"\n-print \"#ifdef GCC_DRIVER\"\n-print \"int target_flags_explicit;\"\n-print \"#else\"\n+print \"#ifndef GCC_DRIVER\"\n print \"#include \" quote \"flags.h\" quote\n print \"#include \" quote \"target.h\" quote\n print \"#endif /* GCC_DRIVER */\"\n@@ -140,6 +138,8 @@ for (i = 0; i < n_opts; i++) {\n }\n print \"};\"\n print \"\"\n+print \"struct gcc_options global_options_set;\"\n+print \"\"\n \n print \"const char * const lang_names[] =\\n{\"\n for (i = 0; i < n_langs; i++) {"}, {"sha": "99b5cff29f9ea8922ea5de17b59bb446a8e91b3e", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -70,8 +70,6 @@ print \"\"\n print \"#ifndef OPTIONS_H\"\n print \"#define OPTIONS_H\"\n print \"\"\n-print \"extern int target_flags_explicit;\"\n-print \"\"\n \n have_save = 0;\n \n@@ -127,6 +125,8 @@ for (i = 0; i < n_opts; i++) {\n print \"#ifndef GENERATOR_FILE\"\n print \"};\"\n print \"extern struct gcc_options global_options;\"\n+print \"extern struct gcc_options global_options_set;\"\n+print \"#define target_flags_explicit global_options_set.x_target_flags\"\n print \"#endif\"\n print \"\"\n "}, {"sha": "5ac4fabaec1800966a45b91c4f83827048bb2617", "filename": "gcc/opts-common.c", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -799,15 +799,20 @@ prune_options (struct cl_decoded_option **decoded_options,\n }\n \n /* Handle option DECODED for the language indicated by LANG_MASK,\n-   using the handlers in HANDLERS and setting fields in OPTS.  KIND is\n-   the diagnostic_t if this is a diagnostics option, DK_UNSPECIFIED\n-   otherwise.  Returns false if the switch was invalid.  */\n+   using the handlers in HANDLERS and setting fields in OPTS and\n+   OPTS_SET.  KIND is the diagnostic_t if this is a diagnostics\n+   option, DK_UNSPECIFIED otherwise.  GENERATED_P is true for an\n+   option generated as part of processing another option or otherwise\n+   generated internally, false for one explicitly passed by the user.\n+   Returns false if the switch was invalid.  */\n \n bool\n handle_option (struct gcc_options *opts,\n+\t       struct gcc_options *opts_set,\n \t       const struct cl_decoded_option *decoded,\n \t       unsigned int lang_mask, int kind,\n-\t       const struct cl_option_handlers *handlers)\n+\t       const struct cl_option_handlers *handlers,\n+\t       bool generated_p)\n {\n   size_t opt_index = decoded->opt_index;\n   const char *arg = decoded->arg;\n@@ -817,12 +822,13 @@ handle_option (struct gcc_options *opts,\n   size_t i;\n \n   if (flag_var)\n-    set_option (opts, opt_index, value, arg, kind);\n+    set_option (opts, (generated_p ? NULL : opts_set),\n+\t\topt_index, value, arg, kind);\n \n   for (i = 0; i < handlers->num_handlers; i++)\n     if (option->flags & handlers->handlers[i].mask)\n       {\n-\tif (!handlers->handlers[i].handler (opts, decoded,\n+\tif (!handlers->handlers[i].handler (opts, opts_set, decoded,\n \t\t\t\t\t    lang_mask, kind, handlers))\n \t  return false;\n \telse\n@@ -839,15 +845,17 @@ handle_option (struct gcc_options *opts,\n    command line.  */\n \n bool\n-handle_generated_option (struct gcc_options *opts, size_t opt_index,\n-\t\t\t const char *arg, int value,\n+handle_generated_option (struct gcc_options *opts,\n+\t\t\t struct gcc_options *opts_set,\n+\t\t\t size_t opt_index, const char *arg, int value,\n \t\t\t unsigned int lang_mask, int kind,\n \t\t\t const struct cl_option_handlers *handlers)\n {\n   struct cl_decoded_option decoded;\n \n   generate_option (opt_index, arg, value, lang_mask, &decoded);\n-  return handle_option (opts, &decoded, lang_mask, kind, handlers);\n+  return handle_option (opts, opts_set, &decoded, lang_mask, kind, handlers,\n+\t\t\ttrue);\n }\n \n /* Fill in *DECODED with an option described by OPT_INDEX, ARG and\n@@ -906,10 +914,12 @@ generate_option_input_file (const char *file,\n }\n \n /* Handle the switch DECODED for the language indicated by LANG_MASK,\n-   using the handlers in *HANDLERS and setting fields in OPTS.  */\n+   using the handlers in *HANDLERS and setting fields in OPTS and\n+   OPTS_SET.  */\n \n void\n read_cmdline_option (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set,\n \t\t     struct cl_decoded_option *decoded,\n \t\t     unsigned int lang_mask,\n \t\t     const struct cl_option_handlers *handlers)\n@@ -963,33 +973,42 @@ read_cmdline_option (struct gcc_options *opts,\n \n   gcc_assert (!decoded->errors);\n \n-  if (!handle_option (opts, decoded, lang_mask, DK_UNSPECIFIED, handlers))\n+  if (!handle_option (opts, opts_set, decoded, lang_mask, DK_UNSPECIFIED,\n+\t\t      handlers, false))\n     error (\"unrecognized command line option %qs\", opt);\n }\n \n-/* Set any field in OPTS for option OPT_INDEX according to VALUE and ARG,\n-   diagnostic kind KIND.  */\n+/* Set any field in OPTS, and OPTS_SET if not NULL, for option\n+   OPT_INDEX according to VALUE and ARG, diagnostic kind KIND.  */\n \n void\n-set_option (struct gcc_options *opts, int opt_index, int value,\n-\t    const char *arg, int kind)\n+set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t    int opt_index, int value, const char *arg, int kind)\n {\n   const struct cl_option *option = &cl_options[opt_index];\n   void *flag_var = option_flag_var (opt_index, opts);\n+  void *set_flag_var = NULL;\n \n   if (!flag_var)\n     return;\n \n+  if (opts_set != NULL)\n+    set_flag_var = option_flag_var (opt_index, opts_set);\n+\n   switch (option->var_type)\n     {\n     case CLVC_BOOLEAN:\n \t*(int *) flag_var = value;\n+\tif (set_flag_var)\n+\t  *(int *) set_flag_var = 1;\n \tbreak;\n \n     case CLVC_EQUAL:\n \t*(int *) flag_var = (value\n \t\t\t     ? option->var_value\n \t\t\t     : !option->var_value);\n+\tif (set_flag_var)\n+\t  *(int *) set_flag_var = 1;\n \tbreak;\n \n     case CLVC_BIT_CLEAR:\n@@ -998,12 +1017,14 @@ set_option (struct gcc_options *opts, int opt_index, int value,\n \t  *(int *) flag_var |= option->var_value;\n \telse\n \t  *(int *) flag_var &= ~option->var_value;\n-\tif (flag_var == &target_flags)\n-\t  target_flags_explicit |= option->var_value;\n+\tif (set_flag_var)\n+\t  *(int *) set_flag_var |= option->var_value;\n \tbreak;\n \n     case CLVC_STRING:\n \t*(const char **) flag_var = arg;\n+\tif (set_flag_var)\n+\t  *(const char **) set_flag_var = \"\";\n \tbreak;\n     }\n "}, {"sha": "393c8b115a059f5b95ae8076a84bc4afb4d8e713", "filename": "gcc/opts.c", "status": "modified", "additions": 27, "deletions": 89, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -50,9 +50,6 @@ along with GCC; see the file COPYING3.  If not see\n unsigned HOST_WIDE_INT g_switch_value;\n bool g_switch_set;\n \n-/* Same for selective scheduling.  */\n-bool sel_sched_switch_set;\n-\n /* True if we should exit after parsing options.  */\n bool exit_after_options;\n \n@@ -345,15 +342,6 @@ struct visibility_flags visibility_options;\n /* What to print when a switch has no documentation.  */\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n \n-/* Used for bookkeeping on whether user set these flags so\n-   -fprofile-use/-fprofile-generate does not use them.  */\n-static bool profile_arc_flag_set, flag_profile_values_set;\n-static bool flag_unroll_loops_set, flag_tracer_set;\n-static bool flag_value_profile_transformations_set;\n-static bool flag_peel_loops_set, flag_branch_probabilities_set;\n-static bool flag_inline_functions_set, flag_ipa_cp_set, flag_ipa_cp_clone_set;\n-static bool flag_predictive_commoning_set, flag_unswitch_loops_set, flag_gcse_after_reload_set;\n-\n /* Functions excluded from profiling.  */\n \n typedef char *char_p; /* For DEF_VEC_P.  */\n@@ -377,6 +365,7 @@ const char **in_fnames;\n unsigned num_in_fnames;\n \n static bool common_handle_option (struct gcc_options *opts,\n+\t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n \t\t\t\t  const struct cl_option_handlers *handlers);\n@@ -517,11 +506,13 @@ post_handling_callback (const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED\n \n static bool\n lang_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t    const struct cl_option_handlers *handlers)\n {\n   gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   return lang_hooks.handle_option (decoded->opt_index, decoded->arg,\n \t\t\t\t   decoded->value, kind, handlers);\n@@ -532,11 +523,13 @@ lang_handle_option (struct gcc_options *opts,\n \n static bool\n target_handle_option (struct gcc_options *opts,\n+\t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   gcc_assert (kind == DK_UNSPECIFIED);\n   return targetm.handle_option (decoded->opt_index, decoded->arg,\n@@ -649,8 +642,8 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t  continue;\n \t}\n \n-      read_cmdline_option (&global_options, decoded_options + i,\n-\t\t\t   lang_mask, handlers);\n+      read_cmdline_option (&global_options, &global_options_set,\n+\t\t\t   decoded_options + i, lang_mask, handlers);\n     }\n }\n \n@@ -1433,6 +1426,7 @@ print_specific_help (unsigned int include_flags,\n \n static bool\n common_handle_option (struct gcc_options *opts,\n+\t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n \t\t      const struct cl_option_handlers *handlers)\n@@ -1444,6 +1438,7 @@ common_handle_option (struct gcc_options *opts,\n   enum opt_code code = (enum opt_code) scode;\n \n   gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set == &global_options_set);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n \n   switch (code)\n@@ -1704,10 +1699,6 @@ common_handle_option (struct gcc_options *opts,\n       align_loops = value;\n       break;\n \n-    case OPT_fbranch_probabilities:\n-      flag_branch_probabilities_set = true;\n-      break;\n-\n     case OPT_fcall_used_:\n       fix_register (arg, 0, 1);\n       break;\n@@ -1801,10 +1792,6 @@ common_handle_option (struct gcc_options *opts,\n \t}\n       break;\n \n-    case OPT_fpeel_loops:\n-      flag_peel_loops_set = true;\n-      break;\n-\n     case OPT_fplugin_:\n #ifdef ENABLE_PLUGIN\n       add_new_plugin (arg);\n@@ -1821,14 +1808,6 @@ common_handle_option (struct gcc_options *opts,\n #endif\n       break;\n \n-    case OPT_fprofile_arcs:\n-      profile_arc_flag_set = true;\n-      break;\n-\n-    case OPT_finline_functions:\n-      flag_inline_functions_set = true;\n-      break;\n-\n     case OPT_fprofile_dir_:\n       profile_data_prefix = xstrdup (arg);\n       break;\n@@ -1839,30 +1818,30 @@ common_handle_option (struct gcc_options *opts,\n       value = true;\n       /* No break here - do -fprofile-use processing. */\n     case OPT_fprofile_use:\n-      if (!flag_branch_probabilities_set)\n+      if (!opts_set->x_flag_branch_probabilities)\n         flag_branch_probabilities = value;\n-      if (!flag_profile_values_set)\n+      if (!opts_set->x_flag_profile_values)\n         flag_profile_values = value;\n-      if (!flag_unroll_loops_set)\n+      if (!opts_set->x_flag_unroll_loops)\n         flag_unroll_loops = value;\n-      if (!flag_peel_loops_set)\n+      if (!opts_set->x_flag_peel_loops)\n         flag_peel_loops = value;\n-      if (!flag_tracer_set)\n+      if (!opts_set->x_flag_tracer)\n         flag_tracer = value;\n-      if (!flag_value_profile_transformations_set)\n+      if (!opts_set->x_flag_value_profile_transformations)\n         flag_value_profile_transformations = value;\n-      if (!flag_inline_functions_set)\n+      if (!opts_set->x_flag_inline_functions)\n         flag_inline_functions = value;\n-      if (!flag_ipa_cp_set)\n+      if (!opts_set->x_flag_ipa_cp)\n         flag_ipa_cp = value;\n-      if (!flag_ipa_cp_clone_set\n+      if (!opts_set->x_flag_ipa_cp_clone\n \t  && value && flag_ipa_cp)\n \tflag_ipa_cp_clone = value;\n-      if (!flag_predictive_commoning_set)\n+      if (!opts_set->x_flag_predictive_commoning)\n \tflag_predictive_commoning = value;\n-      if (!flag_unswitch_loops_set)\n+      if (!opts_set->x_flag_unswitch_loops)\n \tflag_unswitch_loops = value;\n-      if (!flag_gcse_after_reload_set)\n+      if (!opts_set->x_flag_gcse_after_reload)\n \tflag_gcse_after_reload = value;\n       break;\n \n@@ -1871,20 +1850,16 @@ common_handle_option (struct gcc_options *opts,\n       value = true;\n       /* No break here - do -fprofile-generate processing. */\n     case OPT_fprofile_generate:\n-      if (!profile_arc_flag_set)\n+      if (!opts_set->x_profile_arc_flag)\n         profile_arc_flag = value;\n-      if (!flag_profile_values_set)\n+      if (!opts_set->x_flag_profile_values)\n         flag_profile_values = value;\n-      if (!flag_value_profile_transformations_set)\n+      if (!opts_set->x_flag_value_profile_transformations)\n         flag_value_profile_transformations = value;\n-      if (!flag_inline_functions_set)\n+      if (!opts_set->x_flag_inline_functions)\n         flag_inline_functions = value;\n       break;\n \n-    case OPT_fprofile_values:\n-      flag_profile_values_set = true;\n-      break;\n-\n     case OPT_fshow_column:\n       global_dc->show_column = value;\n       break;\n@@ -1904,10 +1879,6 @@ common_handle_option (struct gcc_options *opts,\n       }\n       break;\n \n-    case OPT_fvpt:\n-      flag_value_profile_transformations_set = true;\n-      break;\n-\n     case OPT_frandom_seed:\n       /* The real switch is -fno-random-seed.  */\n       if (value)\n@@ -1919,11 +1890,6 @@ common_handle_option (struct gcc_options *opts,\n       set_random_seed (arg);\n       break;\n \n-    case OPT_fselective_scheduling:\n-    case OPT_fselective_scheduling2:\n-      sel_sched_switch_set = true;\n-      break;\n-\n     case OPT_fsched_verbose_:\n #ifdef INSN_SCHEDULING\n       fix_sched_param (\"verbose\", arg);\n@@ -2023,34 +1989,6 @@ common_handle_option (struct gcc_options *opts,\n       flag_ira_verbose = value;\n       break;\n \n-    case OPT_ftracer:\n-      flag_tracer_set = true;\n-      break;\n-\n-    case OPT_fipa_cp:\n-      flag_ipa_cp_set = true;\n-      break;\n-\n-    case OPT_fipa_cp_clone:\n-      flag_ipa_cp_clone_set = true;\n-      break;\n-\n-    case OPT_fpredictive_commoning:\n-      flag_predictive_commoning_set = true;\n-      break;\n-\n-    case OPT_funswitch_loops:\n-      flag_unswitch_loops_set = true;\n-      break;\n-\n-    case OPT_fgcse_after_reload:\n-      flag_gcse_after_reload_set = true;\n-      break;\n-\n-    case OPT_funroll_loops:\n-      flag_unroll_loops_set = true;\n-      break;\n-\n     case OPT_g:\n       set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg);\n       break;\n@@ -2385,8 +2323,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \n \t  /* -Werror=foo implies -Wfoo.  */\n \t  if (option->var_type == CLVC_BOOLEAN)\n-\t    handle_generated_option (&global_options, option_index,\n-\t\t\t\t     NULL, value, lang_mask,\n+\t    handle_generated_option (&global_options, &global_options_set,\n+\t\t\t\t     option_index, NULL, value, lang_mask,\n \t\t\t\t     (int)kind, handlers);\n \n \t  if (warning_as_error_callback)"}, {"sha": "2dbccbc79fe4899145dc53d6e56bfb6e362dce10", "filename": "gcc/opts.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -157,6 +157,7 @@ struct cl_option_handler_func\n {\n   /* The function called to handle the option.  */\n   bool (*handler) (struct gcc_options *opts,\n+\t\t   struct gcc_options *opts_set,\n \t\t   const struct cl_decoded_option *decoded,\n \t\t   unsigned int lang_mask, int kind,\n \t\t   const struct cl_option_handlers *handlers);\n@@ -213,14 +214,18 @@ extern void decode_options (unsigned int argc, const char **argv,\n extern int option_enabled (int opt_idx, void *opts);\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);\n-extern void set_option (struct gcc_options *opts, int opt_index, int value,\n-\t\t\tconst char *arg, int);\n+extern void set_option (struct gcc_options *opts,\n+\t\t\tstruct gcc_options *opts_set,\n+\t\t\tint opt_index, int value, const char *arg, int);\n extern void *option_flag_var (int opt_index, struct gcc_options *opts);\n bool handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask, int kind,\n-\t\t    const struct cl_option_handlers *handlers);\n+\t\t    const struct cl_option_handlers *handlers,\n+\t\t    bool generated_p);\n bool handle_generated_option (struct gcc_options *opts,\n+\t\t\t      struct gcc_options *opts_set,\n \t\t\t      size_t opt_index, const char *arg, int value,\n \t\t\t      unsigned int lang_mask, int kind,\n \t\t\t      const struct cl_option_handlers *handlers);\n@@ -230,6 +235,7 @@ void generate_option (size_t opt_index, const char *arg, int value,\n void generate_option_input_file (const char *file,\n \t\t\t\t struct cl_decoded_option *decoded);\n extern void read_cmdline_option (struct gcc_options *opts,\n+\t\t\t\t struct gcc_options *opts_set,\n \t\t\t\t struct cl_decoded_option *decoded,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers);"}, {"sha": "80487f63f0081c79ff0ad182d66ea97420fc8117", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d24ba4503483a5315b57859c147f9a4e18c5aa/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d4d24ba4503483a5315b57859c147f9a4e18c5aa", "patch": "@@ -155,11 +155,6 @@ const char *aux_base_name;\n /* Prefix for profile data files */\n const char *profile_data_prefix;\n \n-/* A mask of target_flags that includes bit X if X was set or cleared\n-   on the command line.  */\n-\n-int target_flags_explicit;\n-\n /* Debug hooks - dependent upon command line options.  */\n \n const struct gcc_debug_hooks *debug_hooks;"}]}