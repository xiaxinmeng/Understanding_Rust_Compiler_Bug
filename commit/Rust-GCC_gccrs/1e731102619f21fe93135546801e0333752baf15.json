{"sha": "1e731102619f21fe93135546801e0333752baf15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3MzExMDI2MTlmMjFmZTkzMTM1NTQ2ODAxZTAzMzM3NTJiYWYxNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-04-12T06:33:48Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-04-12T06:33:48Z"}, "message": "target-def.h (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n\n\t* target-def.h (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n\t(TARGET_CXX_DETERMINE_CLASS_VISIBILITY): New macro.\n\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n\t(TARGET_CXX): Adjust accordingly.\n\t* target.h (struct gcc_target): Remove epxort_class_data.  Add\n\tdetermine_class_data_visibility and class_data_always_comdat.\n\t* doc/tm.texi (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Document.\n\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n\t* config/arm/arm.c (arm_cxx_export_class_data): Remove.\n\t(arm_cxx_determine_class_data_visibility): New.\n\t(arm_cxx_class_data_always_comdat): Likewise.\n\t(TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Define.\n\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n\t* config/arm/arm.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P): Define.\n\t* config/arm/symbian.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P):\n\tDefine.\n\n\t* decl2.c (determine_visibility): Don't use export_class_data.\n\t(import_export_decl): Honor TARGET_CXX_CLASS_DATA_ALWAYS_WEAK and\n\tTARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY.\n\n\t* testsuite/g++.dg/ext/visibility/arm2.C: New test.\n\t* testsuite/g++.dg/ext/visibility/arm3.C: Likewise.\n\t* testsuite/g++.dg/ext/visibility/symbian2.C: Likewise.\n\nFrom-SVN: r98010", "tree": {"sha": "094ff9b55bb63ac087619633c1c3d109473587ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094ff9b55bb63ac087619633c1c3d109473587ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e731102619f21fe93135546801e0333752baf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e731102619f21fe93135546801e0333752baf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e731102619f21fe93135546801e0333752baf15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e731102619f21fe93135546801e0333752baf15/comments", "author": null, "committer": null, "parents": [{"sha": "fc7c5aed6197e36ff67791b09b26993140a296b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7c5aed6197e36ff67791b09b26993140a296b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7c5aed6197e36ff67791b09b26993140a296b7"}], "stats": {"total": 261, "additions": 205, "deletions": 56}, "files": [{"sha": "38b643cc12d83045aee0f4f00c26c09e1eb1b59d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -1,3 +1,24 @@\n+2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_VISIBILITY): New macro.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t(TARGET_CXX): Adjust accordingly.\n+\t* target.h (struct gcc_target): Remove epxort_class_data.  Add\n+\tdetermine_class_data_visibility and class_data_always_comdat.\n+\t* doc/tm.texi (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Document.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t* config/arm/arm.c (arm_cxx_export_class_data): Remove.\n+\t(arm_cxx_determine_class_data_visibility): New.\n+\t(arm_cxx_class_data_always_comdat): Likewise.\n+\t(TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Define.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t* config/arm/arm.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P): Define.\n+\t* config/arm/symbian.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P):\n+\tDefine.\n+\n 2005-04-11  Devang Patel  <dpatel@apple.com>\n \n         * tree-data-ref.c (build_classic_dist_vector,"}, {"sha": "b713bff9a3076ce4e0807c1215f7c4a55df94042", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -172,7 +172,8 @@ static tree arm_get_cookie_size (tree);\n static bool arm_cookie_has_size (void);\n static bool arm_cxx_cdtor_returns_this (void);\n static bool arm_cxx_key_method_may_be_inline (void);\n-static bool arm_cxx_export_class_data (void);\n+static void arm_cxx_determine_class_data_visibility (tree);\n+static bool arm_cxx_class_data_always_comdat (void);\n static void arm_init_libfuncs (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n \f\n@@ -307,8 +308,12 @@ static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n #undef TARGET_CXX_KEY_METHOD_MAY_BE_INLINE\n #define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE arm_cxx_key_method_may_be_inline\n \n-#undef TARGET_CXX_EXPORT_CLASS_DATA\n-#define TARGET_CXX_EXPORT_CLASS_DATA arm_cxx_export_class_data\n+#undef TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY\n+#define TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY \\\n+  arm_cxx_determine_class_data_visibility\n+\n+#undef TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT\n+#define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT arm_cxx_class_data_always_comdat\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -14318,15 +14323,28 @@ arm_cxx_key_method_may_be_inline (void)\n   return !TARGET_AAPCS_BASED;\n }\n \n-/* The EABI says that the virtual table, etc., for a class must be\n-   exported if it has a key method.  The EABI does not specific the\n-   behavior if there is no key method, but there is no harm in\n-   exporting the class data in that case too.  */\n+static void\n+arm_cxx_determine_class_data_visibility (tree decl)\n+{\n+  if (!TARGET_AAPCS_BASED)\n+    return;\n \n+  /* In general, \\S 3.2.5.5 of the ARM EABI requires that class data\n+     is exported.  However, on systems without dynamic vague linkage,\n+     \\S 3.2.5.6 says that COMDAT class data has hidden linkage.  */\n+  if (!TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P && DECL_COMDAT (decl))\n+    DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+  else\n+    DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+}\n+  \n static bool\n-arm_cxx_export_class_data (void)\n+arm_cxx_class_data_always_comdat (void)\n {\n-  return TARGET_AAPCS_BASED;\n+  /* \\S 3.2.5.4 of the ARM C++ ABI says that class data only have\n+     vague linkage if the class has no key function.  */\n+  return !TARGET_AAPCS_BASED;\n }\n \n void"}, {"sha": "5955a52ad85b686239c14acb1ea83a25f1ebe2c3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -2108,6 +2108,12 @@ typedef struct\n #define ASM_OUTPUT_LABELREF(FILE, NAME)\t\t\\\n    arm_asm_output_labelref (FILE, NAME)\n \n+/* True if the operating system can merge entities with vague linkage\n+   (e.g., symbols in COMDAT group) during dynamic linking.  */\n+#ifndef TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P\n+#define TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P true\n+#endif\n+\n /* Set the short-call flag for any function compiled in the current\n    compilation unit.  We skip this for functions with the section\n    attribute when long-calls are in effect as this tells the compiler"}, {"sha": "5ea3fa7f1c6209636925d955ed595da1301a3905", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -87,3 +87,7 @@\n       builtin_define (\"__symbian__\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (false)\n+\n+\n+/* SymbianOS cannot merge entities with vague linkage at runtime.  */\n+#define TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P false"}, {"sha": "3019b86084c0f9eb25989b1f04be9b5e9f1a532f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -1,3 +1,9 @@\n+2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (determine_visibility): Don't use export_class_data.\n+\t(import_export_decl): Honor TARGET_CXX_CLASS_DATA_ALWAYS_WEAK and\n+\tTARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY. \n+\n 2005-04-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cp-tree.h (cxx_alignof): Remove."}, {"sha": "0aa81117a7fab9f0e7f986a57ab8f65e55ee99a8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -1644,20 +1644,7 @@ determine_visibility (tree decl)\n \t  DECL_VISIBILITY (decl) = CLASSTYPE_VISIBILITY (class_type);\n \t  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \t}\n-      /* If no explicit visibility information has been provided for\n-\t this class, some targets require that class data be\n-\t exported.  */\n-      else if (TREE_CODE (decl) == VAR_DECL\n-\t       && targetm.cxx.export_class_data ()\n-\t       && (DECL_TINFO_P (decl)\n-\t\t   || (DECL_VTABLE_OR_VTT_P (decl)\n-\t\t       /* Construction virtual tables are not emitted\n-\t\t\t  because they cannot be referred to from other\n-\t\t\t  object files; their name is not standardized by\n-\t\t\t  the ABI.  */\n-\t\t       && !DECL_CONSTRUCTION_VTABLE_P (decl))))\n-\tDECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n-      else\n+      else if (!DECL_VISIBILITY_SPECIFIED (decl))\n \t{\n \t  DECL_VISIBILITY (decl) = CLASSTYPE_VISIBILITY (class_type);\n \t  DECL_VISIBILITY_SPECIFIED (decl) = 0;\n@@ -1683,6 +1670,7 @@ import_export_decl (tree decl)\n   int emit_p;\n   bool comdat_p;\n   bool import_p;\n+  tree class_type = NULL_TREE;\n \n   if (DECL_INTERFACE_KNOWN (decl))\n     return;\n@@ -1773,17 +1761,17 @@ import_export_decl (tree decl)\n     ;\n   else if (TREE_CODE (decl) == VAR_DECL && DECL_VTABLE_OR_VTT_P (decl))\n     {\n-      tree type = DECL_CONTEXT (decl);\n-      import_export_class (type);\n-      if (TYPE_FOR_JAVA (type))\n+      class_type = DECL_CONTEXT (decl);\n+      import_export_class (class_type);\n+      if (TYPE_FOR_JAVA (class_type))\n \timport_p = true;\n-      else if (CLASSTYPE_INTERFACE_KNOWN (type)\n-\t       && CLASSTYPE_INTERFACE_ONLY (type))\n+      else if (CLASSTYPE_INTERFACE_KNOWN (class_type)\n+\t       && CLASSTYPE_INTERFACE_ONLY (class_type))\n \timport_p = true;\n       else if ((!flag_weak || TARGET_WEAK_NOT_IN_ARCHIVE_TOC)\n-\t       && !CLASSTYPE_USE_TEMPLATE (type)\n-\t       && CLASSTYPE_KEY_METHOD (type)\n-\t       && !DECL_DECLARED_INLINE_P (CLASSTYPE_KEY_METHOD (type)))\n+\t       && !CLASSTYPE_USE_TEMPLATE (class_type)\n+\t       && CLASSTYPE_KEY_METHOD (class_type)\n+\t       && !DECL_DECLARED_INLINE_P (CLASSTYPE_KEY_METHOD (class_type)))\n \t/* The ABI requires that all virtual tables be emitted with\n \t   COMDAT linkage.  However, on systems where COMDAT symbols\n \t   don't show up in the table of contents for a static\n@@ -1795,11 +1783,11 @@ import_export_decl (tree decl)\n \t   emitted in only one translation unit, we make the virtual\n \t   table an ordinary definition with external linkage.  */\n \tDECL_EXTERNAL (decl) = 0;\n-      else if (CLASSTYPE_INTERFACE_KNOWN (type))\n+      else if (CLASSTYPE_INTERFACE_KNOWN (class_type))\n \t{\n-\t  /* TYPE is being exported from this translation unit, so DECL\n-\t     should be defined here.  */ \n-\t  if (!flag_weak && CLASSTYPE_EXPLICIT_INSTANTIATION (type))\n+\t  /* CLASS_TYPE is being exported from this translation unit,\n+\t     so DECL should be defined here.  */ \n+\t  if (!flag_weak && CLASSTYPE_EXPLICIT_INSTANTIATION (class_type))\n \t    /* If a class is declared in a header with the \"extern\n \t       template\" extension, then it will not be instantiated,\n \t       even in translation units that would normally require\n@@ -1810,16 +1798,25 @@ import_export_decl (tree decl)\n \t    DECL_EXTERNAL (decl) = 0;\n \t  else\n \t    {\n-\t      /* The ABI requires COMDAT linkage.  Normally, we only\n-\t\t emit COMDAT things when they are needed; make sure\n-\t\t that we realize that this entity is indeed\n-\t\t needed.  */\n-\t      comdat_p = true;\n-\t      mark_needed (decl);\n+\t      /* The generic C++ ABI says that class data is always\n+\t\t COMDAT, even if there is a key function.  Some\n+\t\t variants (e.g., the ARM EABI) says that class data\n+\t\t only has COMDAT linkage if the the class data might\n+\t\t be emitted in more than one translation unit.  */\n+\t      if (!CLASSTYPE_KEY_METHOD (class_type)\n+\t\t  || targetm.cxx.class_data_always_comdat ())\n+\t\t{\n+\t\t  /* The ABI requires COMDAT linkage.  Normally, we\n+\t\t     only emit COMDAT things when they are needed;\n+\t\t     make sure that we realize that this entity is\n+\t\t     indeed needed.  */\n+\t\t  comdat_p = true;\n+\t\t  mark_needed (decl);\n+\t\t}\n \t    }\n \t}\n       else if (!flag_implicit_templates\n-\t       && CLASSTYPE_IMPLICIT_INSTANTIATION (type))\n+\t       && CLASSTYPE_IMPLICIT_INSTANTIATION (class_type))\n \timport_p = true;\n       else\n \tcomdat_p = true;\n@@ -1829,6 +1826,7 @@ import_export_decl (tree decl)\n       tree type = TREE_TYPE (DECL_NAME (decl));\n       if (CLASS_TYPE_P (type))\n \t{\n+\t  class_type = type;\n \t  import_export_class (type);\n \t  if (CLASSTYPE_INTERFACE_KNOWN (type)\n \t      && TYPE_POLYMORPHIC_P (type)\n@@ -1841,17 +1839,19 @@ import_export_decl (tree decl)\n \t    import_p = true;\n \t  else \n \t    {\n-\t      comdat_p = true;\n \t      if (CLASSTYPE_INTERFACE_KNOWN (type)\n \t\t  && !CLASSTYPE_INTERFACE_ONLY (type))\n \t\t{\n+\t\t  comdat_p = targetm.cxx.class_data_always_comdat ();\n \t\t  mark_needed (decl);\n \t\t  if (!flag_weak)\n \t\t    {\n \t\t      comdat_p = false;\n \t\t      DECL_EXTERNAL (decl) = 0;\n \t\t    }\n \t\t}\n+\t      else\n+\t\tcomdat_p = true;\n \t    }\n \t}\n       else\n@@ -1916,6 +1916,21 @@ import_export_decl (tree decl)\n       comdat_linkage (decl);\n     }\n \n+  /* Give the target a chance to override the visibility associated\n+     with DECL.  */\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && (DECL_TINFO_P (decl)\n+\t  || (DECL_VTABLE_OR_VTT_P (decl)\n+\t      /* Construction virtual tables are not exported because\n+\t\t they cannot be referred to from other object files;\n+\t\t their name is not standardized by the ABI.  */\n+\t      && !DECL_CONSTRUCTION_VTABLE_P (decl)))\n+      && TREE_PUBLIC (decl)\n+      && !DECL_REALLY_EXTERN (decl)\n+      && DECL_VISIBILITY_SPECIFIED (decl)\n+      && (!class_type || !CLASSTYPE_VISIBILITY_SPECIFIED (class_type)))\n+    targetm.cxx.determine_class_data_visibility (decl);\n+  \n   DECL_INTERFACE_KNOWN (decl) = 1;\n }\n "}, {"sha": "9b7856026ff8e8a9940c25f4319b2c46df0f1e8f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -8718,12 +8718,21 @@ some variants of the ABI, an inline function can never be the key\n method.  The default is to return @code{true}.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_CXX_EXPORT_CLASS_DATA (void)\n-If this hook returns false (the default), then virtual tables and RTTI\n-data structures will have the ELF visibility of their containing\n-class.  If this hook returns true, then these data structures will\n-have ELF ``default'' visibility, independently of the visibility of\n-the containing class.\n+@deftypefn {Target Hook} void TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY (tree @var{decl})\n+@var{decl} is a virtual table, virtual table table, typeinfo object,\n+or other similar implicit class data object that will be emitted with\n+external linkage in this translation unit.  No ELF visibility has been\n+explicitly specified.  If the target needs to specify a visibility\n+other than that of the containing class, use this hook to set\n+@code{DECL_VISIBILITY} and @code{DECL_VISIBILITY_SPECIFIED}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT (void)\n+This hook returns true (the default) if virtual tables and other\n+similar implicit class data objects are always COMDAT if they have\n+external linkage.  If this hook returns false, then class data for\n+classes whose virtual table will be emitted in only one translation\n+unit will not be COMDAT.\n @end deftypefn\n \n @node Misc"}, {"sha": "44e3791f0ab59bb1d2b75b52ef0a5892e625d3c2", "filename": "gcc/target-def.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -469,8 +469,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE hook_bool_void_true\n #endif\n \n-#ifndef TARGET_CXX_EXPORT_CLASS_DATA\n-#define TARGET_CXX_EXPORT_CLASS_DATA hook_bool_void_false\n+#ifndef TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY\n+#define TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY hook_void_tree\n+#endif\n+\n+#ifndef TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT\n+#define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT hook_bool_void_true\n #endif\n \n #define TARGET_CXX\t\t\t\t\\\n@@ -482,7 +486,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n     TARGET_CXX_IMPORT_EXPORT_CLASS,\t\t\\\n     TARGET_CXX_CDTOR_RETURNS_THIS,\t\t\\\n     TARGET_CXX_KEY_METHOD_MAY_BE_INLINE,\t\\\n-    TARGET_CXX_EXPORT_CLASS_DATA\t\t\\\n+    TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY,\t\\\n+    TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT,        \\\n   }\n \n /* The whole shebang.  */"}, {"sha": "2cb4db278a07804bce3db3828bc8f6d7490aef6b", "filename": "gcc/target.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -589,10 +589,20 @@ struct gcc_target\n        itself.  Returning true is the behavior required by the Itanium\n        C++ ABI.  */\n     bool (*key_method_may_be_inline) (void);\n-    /* Returns true if all class data (virtual tables, type info,\n-       etc.) should be exported from the current DLL, even when the\n-       associated class is not exported.  */\n-    bool (*export_class_data) (void);\n+    /* DECL is a virtual table, virtual table table, typeinfo object,\n+       or other similar implicit class data object that will be\n+       emitted with external linkage in this translation unit.  No ELF\n+       visibility has been explicitly specified.  If the target needs\n+       to specify a visibility other than that of the containing class,\n+       use this hook to set DECL_VISIBILITY and\n+       DECL_VISIBILITY_SPECIFIED.  */ \n+    void (*determine_class_data_visibility) (tree decl);\n+    /* Returns true (the default) if virtual tables and other\n+       similar implicit class data objects are always COMDAT if they\n+       have external linkage.  If this hook returns false, then\n+       class data for classes whose virtual table will be emitted in\n+       only one translation unit will not be COMDAT.  */\n+    bool (*class_data_always_comdat) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}, {"sha": "3e7c29d1c1f7ae9d707896deb56e0c13590e385d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -1,3 +1,24 @@\n+2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_VISIBILITY): New macro.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t(TARGET_CXX): Adjust accordingly.\n+\t* target.h (struct gcc_target): Remove epxort_class_data.  Add\n+\tdetermine_class_data_visibility and class_data_always_comdat.\n+\t* doc/tm.texi (TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Document.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t* config/arm/arm.c (arm_cxx_export_class_data): Remove.\n+\t(arm_cxx_determine_class_data_visibility): New.\n+\t(arm_cxx_class_data_always_comdat): Likewise.\n+\t(TARGET_CXX_EXPORT_CLASS_DATA): Remove.\n+\t(TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY): Define.\n+\t(TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT): Likewise.\n+\t* config/arm/arm.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P): Define.\n+\t* config/arm/symbian.h (TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P):\n+\tDefine.\n+\n 2005-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/wrapper.exp (${tool}_maybe_build_wrapper): Don't unset gluefile."}, {"sha": "7eed18d7f85b5aadbea084039a3c1c56041f3e79", "filename": "gcc/testsuite/g++.dg/ext/visibility/arm2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm2.C?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target arm*-*-*eabi* arm*-*-symbianelf* } }\n+// Class data should be exported.\n+// { dg-final { scan-not-hidden \"_ZTV1S\" } }\n+// { dg-final { scan-not-hidden \"_ZTI1S\" } }\n+// { dg-final { scan-not-hidden \"_ZTS1S\" } }\n+\n+struct S {\n+  virtual void f();\n+};\n+\n+void S::f() {}"}, {"sha": "f97813d7f213abec7b113ccfb9c93dd6e8b50038", "filename": "gcc/testsuite/g++.dg/ext/visibility/arm3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Farm3.C?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target arm*-*-*eabi* } }\n+// { dg-options \"-fvisibility=hidden\" }\n+// Class data should be exported.\n+// { dg-final { scan-not-hidden \"_ZTI1A\" } }\n+// { dg-final { scan-not-hidden \"_ZTS1A\" } }\n+// { dg-final { scan-not-hidden \"_ZTV1B\" } }\n+// { dg-final { scan-not-hidden \"_ZTI1B\" } }\n+// { dg-final { scan-not-hidden \"_ZTS1B\" } }\n+\n+struct A {};\n+struct B : virtual public A {};\n+B b;"}, {"sha": "767f0b54e1544020c13f2fbcb6385beebe998bb6", "filename": "gcc/testsuite/g++.dg/ext/visibility/symbian2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e731102619f21fe93135546801e0333752baf15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fsymbian2.C?ref=1e731102619f21fe93135546801e0333752baf15", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target arm*-*-symbianelf* } }\n+// Class data should not be exported.\n+// { dg-final { scan-hidden \"_ZTI1A\" } }\n+// { dg-final { scan-hidden \"_ZTS1A\" } }\n+// { dg-final { scan-hidden \"_ZTV1B\" } }\n+// { dg-final { scan-hidden \"_ZTI1B\" } }\n+// { dg-final { scan-hidden \"_ZTS1B\" } }\n+\n+struct A {};\n+struct B : virtual public A {};\n+B b;"}]}