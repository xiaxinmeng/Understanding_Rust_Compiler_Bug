{"sha": "d417dba9b5f60de529bef6d7b6b5be6ef402e025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxN2RiYTliNWY2MGRlNTI5YmVmNmQ3YjZiNWJlNmVmNDAyZTAyNQ==", "commit": {"author": {"name": "David Billinghurst", "email": "David.Billinghurst@riotinto.com", "date": "2004-07-21T00:00:24Z"}, "committer": {"name": "David Billinghurst", "email": "billingd@gcc.gnu.org", "date": "2004-07-21T00:00:24Z"}, "message": "Copy cases from g77.f-torture/execute and add dg-run directive.\n\n2004-07-21  David Billinghurst (David.Billinghurst@riotinto.com)\n\n\tCopy cases from g77.f-torture/execute and add dg-run\n\tdirective.  Other changes as noted.\n\t* gfortran.dg/g77/13037.f\n\t* gfortran.dg/g77/1832.f\n\t* gfortran.dg/g77/19981119-0.f\n\t* gfortran.dg/g77/19990313-0.f\n\t* gfortran.dg/g77/19990313-1.f\n\t* gfortran.dg/g77/19990313-2.f\n\t* gfortran.dg/g77/19990313-3.f\n\t* gfortran.dg/g77/19990419-1.f\n\t* gfortran.dg/g77/19990826-0.f\n\t* gfortran.dg/g77/19990826-2.f\n\t* gfortran.dg/g77/20000503-1.f\n\t* gfortran.dg/g77/20001111.f\n\t* gfortran.dg/g77/20010116.f\n\t* gfortran.dg/g77/20010426-1.f: Renamed from 20010426-1.f\n\t* gfortran.dg/g77/20010430.f\n\t* gfortran.dg/g77/6177.f\n\t* gfortran.dg/g77/947.f\n\t* gfortran.dg/g77/970816-3.f\n\t* gfortran.dg/g77/971102-1.f\n\t* gfortran.dg/g77/980520-1.f\n\t* gfortran.dg/g77/980628-0.f\n\t* gfortran.dg/g77/980628-1.f\n\t* gfortran.dg/g77/980628-10.f\n\t* gfortran.dg/g77/980628-2.f\n\t* gfortran.dg/g77/980628-3.f\n\t* gfortran.dg/g77/980628-7.f\n\t* gfortran.dg/g77/980628-8.f\n\t* gfortran.dg/g77/980628-9.f\n\t* gfortran.dg/g77/980701-0.f\n\t* gfortran.dg/g77/980701-1.f\n\t* gfortran.dg/g77/cabs.f\n\t* gfortran.dg/g77/claus.f\n\t* gfortran.dg/g77/complex_1.f\n\t* gfortran.dg/g77/cpp3.F: Renamed from cpp3.F\n\t* gfortran.dg/g77/dcomplex.f\n\t* gfortran.dg/g77/dnrm2.f: Add dg-warnings as required.\n\t* gfortran.dg/g77/f90-intrinsic-mathematical.f\n\t* gfortran.dg/g77/f90-intrinsic-numeric.f\n\t* gfortran.dg/g77/int8421.f\n\t* gfortran.dg/g77/labug1.f\n\t* gfortran.dg/g77/large_vec.f\n\t* gfortran.dg/g77/le.f\n\t* gfortran.dg/g77/short.f\n\t* gfortran.dg/g77/README: Update\n\nFrom-SVN: r84980", "tree": {"sha": "d4305e996d7652d6a61a17cdb230c538d3303c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4305e996d7652d6a61a17cdb230c538d3303c27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d417dba9b5f60de529bef6d7b6b5be6ef402e025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d417dba9b5f60de529bef6d7b6b5be6ef402e025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d417dba9b5f60de529bef6d7b6b5be6ef402e025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d417dba9b5f60de529bef6d7b6b5be6ef402e025/comments", "author": null, "committer": null, "parents": [{"sha": "7877332264d6523fb961edf3d891dd5012dd0d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7877332264d6523fb961edf3d891dd5012dd0d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7877332264d6523fb961edf3d891dd5012dd0d7d"}], "stats": {"total": 1827, "additions": 1827, "deletions": 0}, "files": [{"sha": "39601decd154c7c81f20cc46822078ed6981b868", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -1,3 +1,52 @@\n+2004-07-21  David Billinghurst (David.Billinghurst@riotinto.com)\n+\n+\tCopy cases from g77.f-torture/execute and add dg-run\n+\tdirective.  Other changes as noted.    \n+\t* gfortran.dg/g77/13037.f\n+\t* gfortran.dg/g77/1832.f\n+\t* gfortran.dg/g77/19981119-0.f\n+\t* gfortran.dg/g77/19990313-0.f\n+\t* gfortran.dg/g77/19990313-1.f\n+\t* gfortran.dg/g77/19990313-2.f\n+\t* gfortran.dg/g77/19990313-3.f\n+\t* gfortran.dg/g77/19990419-1.f\n+\t* gfortran.dg/g77/19990826-0.f\n+\t* gfortran.dg/g77/19990826-2.f\n+\t* gfortran.dg/g77/20000503-1.f\n+\t* gfortran.dg/g77/20001111.f\n+\t* gfortran.dg/g77/20010116.f\n+\t* gfortran.dg/g77/20010426-1.f: Renamed from 20010426-1.f\n+\t* gfortran.dg/g77/20010430.f\n+\t* gfortran.dg/g77/6177.f\n+\t* gfortran.dg/g77/947.f\n+\t* gfortran.dg/g77/970816-3.f\n+\t* gfortran.dg/g77/971102-1.f\n+\t* gfortran.dg/g77/980520-1.f\n+\t* gfortran.dg/g77/980628-0.f\n+\t* gfortran.dg/g77/980628-1.f\n+\t* gfortran.dg/g77/980628-10.f\n+\t* gfortran.dg/g77/980628-2.f\n+\t* gfortran.dg/g77/980628-3.f\n+\t* gfortran.dg/g77/980628-7.f\n+\t* gfortran.dg/g77/980628-8.f\n+\t* gfortran.dg/g77/980628-9.f\n+\t* gfortran.dg/g77/980701-0.f\n+\t* gfortran.dg/g77/980701-1.f\n+\t* gfortran.dg/g77/cabs.f\n+\t* gfortran.dg/g77/claus.f\n+\t* gfortran.dg/g77/complex_1.f\n+\t* gfortran.dg/g77/cpp3.F: Renamed from cpp3.F\n+\t* gfortran.dg/g77/dcomplex.f\n+\t* gfortran.dg/g77/dnrm2.f: Add dg-warnings as required.\n+\t* gfortran.dg/g77/f90-intrinsic-mathematical.f\n+\t* gfortran.dg/g77/f90-intrinsic-numeric.f\n+\t* gfortran.dg/g77/int8421.f\n+\t* gfortran.dg/g77/labug1.f\n+\t* gfortran.dg/g77/large_vec.f\n+\t* gfortran.dg/g77/le.f\n+\t* gfortran.dg/g77/short.f\n+\t* gfortran.dg/g77/README: Update\n+\n 2004-07-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16637"}, {"sha": "01c2bab19b33c2db64c85a67a12d33cc86c82cce", "filename": "gcc/testsuite/gfortran.dg/g77/13037.f", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F13037.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F13037.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F13037.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,59 @@\n+c { dg-do run }\n+c      PR optimization/13037\n+c      Contributed by Kirill Smelkov\n+c      bug symptom: zeta(kkzc) seems to reference to zeta(kkzc-1) instead\n+c      with gcc-3.2.2 it is OK, so it is a regression.\n+c\n+      subroutine bug1(expnt)\n+      implicit none\n+\n+      double precision zeta\n+      common /bug1_area/zeta(3)\n+\n+      double precision expnt(3)\n+\n+\n+      integer k, kkzc\n+\n+      kkzc=0\n+      do k=1,3\n+         kkzc = kkzc + 1\n+         zeta(kkzc) = expnt(k)\n+      enddo\n+\n+c     the following line activates the bug\n+      call bug1_activator(kkzc)\n+      end\n+\n+\n+c     dummy subroutine\n+      subroutine bug1_activator(inum)\n+      implicit none\n+      integer inum\n+      end\n+\n+\n+c     test driver\n+      program test_bug1\n+      implicit none\n+\n+      double precision zeta\n+      common /bug1_area/zeta(3)\n+\n+      double precision expnt(3)\n+\n+      zeta(1) = 0.0d0\n+      zeta(2) = 0.0d0\n+      zeta(3) = 0.0d0\n+\n+      expnt(1) = 1.0d0\n+      expnt(2) = 2.0d0\n+      expnt(3) = 3.0d0\n+\n+      call bug1(expnt)\n+      if ((zeta(1).ne.1) .or. (zeta(2).ne.2) .or. (zeta(3).ne.3)) then\n+        call abort\n+      endif\n+\n+      end\n+"}, {"sha": "9f611b54872783e749cc57309fa1e81ce2b36614", "filename": "gcc/testsuite/gfortran.dg/g77/1832.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F1832.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F1832.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F1832.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,9 @@\n+c { dg-do run }\n+      character*120 file\n+      character*5   string\n+      file = \"c:/dos/adir/bdir/cdir/text.doc\"\n+      write(string, *) \"a \", file\n+      if (string .ne. ' a') call abort\n+C-- The leading space is normal for list-directed output\n+C-- \"file\" is not printed because it would overflow \"string\".\n+      end"}, {"sha": "17c6e06405ca328e276af4f78cddfa9ce8d8a3b2", "filename": "gcc/testsuite/gfortran.dg/g77/19981119-0.f", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981119-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981119-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981119-0.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,41 @@\n+c { dg-do run }\n+* X-Delivered: at request of burley on mescaline.gnu.org\n+* Date: Sat, 31 Oct 1998 18:26:29 +0200 (EET)\n+* From: \"B. Yanchitsky\" <yan@im.imag.kiev.ua>\n+* To: fortran@gnu.org\n+* Subject: Bug report\n+* MIME-Version: 1.0\n+* Content-Type: TEXT/PLAIN; charset=US-ASCII\n+* \n+* There is a trouble with g77 on Alpha.\n+* My configuration: \n+* Digital Personal Workstation 433au,\n+* Digital Unix 4.0D,\n+* GNU Fortran 0.5.23 and GNU C 2.8.1.\n+* \n+* The following program treated successfully but crashed when running. \n+* \n+* C --- PROGRAM BEGIN -------\n+* \n+      subroutine sub(N,u)\n+      integer N\n+      double precision u(-N:N,-N:N)\n+\n+C vvvv    CRASH HERE   vvvvv   \n+      u(-N,N)=0d0\n+      return\n+      end\n+\n+\n+      program bug\n+      integer N\n+      double precision a(-10:10,-10:10)\n+      data a/441*1d0/\n+      N=10\n+      call sub(N,a)\n+      if (a(-N,N) .ne. 0d0) call abort\n+      end\n+* \n+* C --- PROGRAM END -------\n+* \n+* Good luck!"}, {"sha": "ae2a72bca3362898d327239f77a35750892b6b29", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-0.f", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-0.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,34 @@\n+c { dg-do run }\n+* To: craig@jcb-sc.com\n+* Subject: Re: G77 and KIND=2\n+* Content-Type: text/plain; charset=us-ascii\n+* From: Dave Love <d.love@dl.ac.uk>\n+* Date: 03 Mar 1999 18:20:11 +0000\n+* In-Reply-To: craig@jcb-sc.com's message of \"1 Mar 1999 21:04:38 -0000\"\n+* User-Agent: Gnus/5.07007 (Pterodactyl Gnus v0.70) Emacs/20.3\n+* X-UIDL: d442bafe961c2a6ec6904f492e05d7b0\n+* \n+* ISTM that there is a real problem printing integer*8 (on x86):\n+* \n+* $ cat x.f\n+*[modified for test suite]\n+        integer *8 foo, bar\n+        data r/4e10/\n+        foo = 4e10\n+        bar = r\n+        if (foo .ne. bar) call abort\n+        end\n+* $ g77 x.f && ./a.out\n+*  1345294336\n+*  123\n+* $ f2c x.f && g77 x.c && ./a.out\n+* x.f:\n+*    MAIN:\n+*  40000000000\n+*  123\n+* $\n+* \n+* Gdb shows the upper half of the buffer passed to do_lio is zeroed in\n+* the g77 case.\n+* \n+* I've forgotten how the code generation happens."}, {"sha": "b229bb40f20dff64bd61cae2f0d8ff7de01fe288", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-1.f", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,8 @@\n+c { dg-do run }\n+        integer *8 foo, bar\n+\tdouble precision r\n+        data r/4d10/\n+        foo = 4d10\n+        bar = r\n+        if (foo .ne. bar) call abort\n+        end"}, {"sha": "5dac2d0ed40bc90ceaa8c11606f219656d537bbe", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-2.f", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-2.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,8 @@\n+c { dg-do run }\n+       integer *8 foo, bar\n+\tcomplex c\n+        data c/(4e10,0)/\n+        foo = 4e10\n+        bar = c\n+        if (foo .ne. bar) call abort\n+        end"}, {"sha": "c7489f6870a06174bd50dfc37aab91185b7e7701", "filename": "gcc/testsuite/gfortran.dg/g77/19990313-3.f", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990313-3.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,8 @@\n+c { dg-do run }\n+        integer *8 foo, bar\n+\tdouble complex c\n+        data c/(4d10,0)/\n+        foo = 4d10\n+        bar = c\n+        if (foo .ne. bar) call abort\n+        end"}, {"sha": "e6a4a9bc0492fad07bbf432851ccabd10f89d4cc", "filename": "gcc/testsuite/gfortran.dg/g77/19990419-1.f", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990419-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990419-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990419-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,22 @@\n+c { dg-do run }\n+* Test DO WHILE, to make sure it fully reevaluates its expression.\n+* Belongs in execute/.\n+      common /x/ ival\n+      j = 0\n+      do while (i() .eq. 1)\n+         j = j + 1\n+         if (j .gt. 5) call abort\n+      end do\n+      if (j .ne. 4) call abort\n+      if (ival .ne. 5) call abort\n+      end\n+      function i()\n+      common /x/ ival\n+      ival = ival + 1\n+      i = 10\n+      if (ival .lt. 5) i = 1\n+      end\n+      block data\n+      common /x/ ival\n+      data ival/0/\n+      end"}, {"sha": "054f9abf5520fe52ec526d17dd865785c3392efa", "filename": "gcc/testsuite/gfortran.dg/g77/19990826-0.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-0.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,20 @@\n+c { dg-do run }\n+* From: niles@fan745.gsfc.nasa.gov\n+* To: fortran@gnu.org\n+* Cc: niles@fan745.gsfc.nasa.gov\n+* Subject: problem with DNINT() on Linux/Alpha.\n+* Date: Sun, 06 Jun 1999 16:39:35 -0400\n+* X-UIDL: 6aa9208d7bda8b6182a095dfd37016b7\n+\n+      IF (DNINT(0.0D0) .NE. 0.) CALL ABORT\n+      STOP\n+      END\n+\n+* Result on Linux/i386: \" 0.\"  (and every other computer!)\n+* Result on Linux/alpha: \" 3.6028797E+16\"\n+\n+* It seems to work fine if I change it to the generic NINT().  Probably\n+* a name pollution problem in the new C library, but it seems bad. no?\n+\n+* \tThanks,\n+* \tRick Niles."}, {"sha": "8f0f0c18eb4a41d5ac4320574cfbd4844d0692f0", "filename": "gcc/testsuite/gfortran.dg/g77/19990826-2.f", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19990826-2.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,34 @@\n+c { dg-do run }\n+* From: \"Billinghurst, David (RTD)\" <David.Billinghurst@riotinto.com.au>\n+* Subject: RE: single precision complex bug in g77 - was Testing g77 with LA\n+* \tPACK 3.0\n+* Date: Thu, 8 Jul 1999 00:55:11 +0100 \n+* X-UIDL: b00d9d8081a36fef561b827d255dd4a5\n+\n+* Here is a slightly simpler and neater test case\n+\n+      program labug3\n+      implicit none\n+\n+*  This program gives the wrong answer on mips-sgi-irix6.5\n+*  when compiled with g77 from egcs-19990629 (gcc 2.95 prerelease)\n+*  Get a = 0.0 when it should be 1.0 \n+*\n+*  Works with:  -femulate-complex\n+*               egcs-1.1.2 \n+*\n+*  Originally derived from LAPACK 3.0 test suite.\n+*\n+*  David Billinghurst, (David.Billinghurst@riotinto.com.au)\n+*  8 July 1999\n+* \n+      complex one, z\n+      real    a, f1\n+      f1(z) = real(z)\n+      one = (1.,0.)\n+      a = f1(one) \n+      if ( abs(a-1.0) .gt. 1.0e-5 ) then\n+         write(6,*) 'A should be 1.0 but it is',a\n+         call abort()\n+      end if\n+      end"}, {"sha": "2a48a353334d6a9ec9a26223c64bc9cf709be0fa", "filename": "gcc/testsuite/gfortran.dg/g77/20000503-1.f", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000503-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000503-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20000503-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,25 @@\n+c { dg-do run }\n+*\n+*  Originally derived from LAPACK 3.0 test suite failure.\n+*\n+*  David Billinghurst, (David.Billinghurst@riotinto.com.au)\n+*  23 February 2000\n+* \n+      INTEGER N, I, SLASQX\n+      N = 20\n+      I = SLASQX( N ) \n+      IF ( I .NE. 2*N ) THEN\n+         WRITE(6,*) 'I = ', I, ' but should be ', 2*N\n+         CALL ABORT()\n+      END IF\n+      END\n+\n+      INTEGER FUNCTION SLASQX( N )\n+      INTEGER  N, I0, I, K\n+      I0 = 1\n+      DO I = 4*I0, 2*( I0+N-1 ), 4\n+         K = I\n+      END DO\n+      SLASQX = K\n+      RETURN\n+      END"}, {"sha": "366956a66e3170b5bd6cb50ad80643ec295de0c3", "filename": "gcc/testsuite/gfortran.dg/g77/20001111.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20001111.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20001111.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20001111.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,13 @@\n+c { dg-do run }\n+      DOUBLE PRECISION VALUE(2), TOLD, BK\n+      DATA VALUE /0D0, 1D0/\n+      DATA TOLD /0D0/\n+      DO I=1, 2\n+         BK = VALUE(I)\n+         IF(BK .GT. TOLD) GOTO 10\n+      ENDDO\n+      WRITE(*,*)'Error: BK = ', BK\n+      CALL ABORT\n+ 10   CONTINUE\n+      WRITE(*,*)'No Error: BK = ', BK\n+      END"}, {"sha": "dd8ee931297b6580aecf714d741da9207fe3d8ab", "filename": "gcc/testsuite/gfortran.dg/g77/20010116.f", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010116.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010116.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010116.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,39 @@\n+c { dg-do run }\n+*\n+*  Derived from LAPACK 3.0 routine CHGEQZ\n+*  Fails on i686-pc-cygwin with gcc-2.97 snapshots at -O2 and higher\n+*  PR fortran/1645\n+*\n+*  David Billinghurst, (David.Billinghurst@riotinto.com)\n+*  14 January 2001\n+*  Rewritten by Toon Moene (toon@moene.indiv.nluug.nl)\n+*  15 January 2001\n+* \n+      COMPLEX A(5,5)\n+      DATA A/25*(0.0,0.0)/\n+      A(4,3) = (0.05,0.2)/3.0E-7\n+      A(4,4) = (-0.03,-0.4)\n+      A(5,4) = (-2.0E-07,2.0E-07)\n+      CALL CHGEQZ( 5, A )\n+      END\n+      SUBROUTINE CHGEQZ( N, A )\n+      COMPLEX   A(N,N), X\n+      ABS1( X ) = ABS( REAL( X ) ) + ABS( AIMAG( X ) )\n+      DO J = 4, 2, -1\n+         I = J\n+         TEMP  = ABS1( A(J,J) )\n+         TEMP2 = ABS1( A( J+1, J ) )\n+         TEMPR = MAX( TEMP, TEMP2 )\n+         IF( TEMPR .LT. 1.0 .AND. TEMPR .NE. 0.0 ) THEN\n+            TEMP  = TEMP / TEMPR\n+            TEMP2 = TEMP2 / TEMPR\n+         END IF\n+         IF ( ABS1(A(J,J-1))*TEMP2 .LE. TEMP ) GO TO 90\n+      END DO\n+c     Should not reach here, but need a statement\n+      PRINT*\n+  90  IF ( I .NE. 4 ) THEN\n+         PRINT*,'I =', I, ' but should be 4'\n+         CALL ABORT()\n+      END IF\n+      END"}, {"sha": "ce8cc4d10b3e1358fc366fbb7a4b4aded0bfd508", "filename": "gcc/testsuite/gfortran.dg/g77/20010426-1.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010426-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,3 @@\n+c { dg-do run }\n+      print*,cos(1.0)\n+      end"}, {"sha": "c6af4968d99a4de6d31331d343f398060983ab40", "filename": "gcc/testsuite/gfortran.dg/g77/20010430.f", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010430.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010430.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F20010430.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,21 @@\n+c { dg-do run }\n+      REAL DAT(2,5)\n+      DO I = 1, 5\n+         DAT(1,I) = I*1.6356-NINT(I*1.6356)\n+         DAT(2,I) = I\n+      ENDDO\n+      DO I = 1, 4\n+         DO J = I+1, 5\n+            IF (DAT(1,J) - DAT(1,I) .LT. 0.0) THEN\n+               DO K = 1, 2\n+                  TMP = DAT(K,I)\n+                  DAT(K,I) = DAT(K,J)\n+                  DAT(K,J) = TMP\n+               ENDDO\n+            ENDIF\n+         ENDDO\n+      ENDDO\n+      DO I = 1, 4\n+         IF (DAT(1,I) .GT. DAT(1,I+1)) CALL ABORT\n+      ENDDO\n+      END"}, {"sha": "d708652a6b144a79e436a39338dca918c04527b0", "filename": "gcc/testsuite/gfortran.dg/g77/6177.f", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F6177.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F6177.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F6177.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,15 @@\n+c { dg-do run }\n+      program pr6177\n+C\n+C Test case for PR optimization/6177.\n+C This bug (an ICE) originally showed up in file cblat2.f from LAPACK.\n+C\n+      complex x\n+      complex w(1)\n+      intrinsic conjg\n+      x = (2.0d0, 1.0d0)\n+      w(1) = x\n+      x = conjg(x)\n+      w(1) = conjg(w(1))\n+      if (abs(x-w(1)) .gt. 1.0e-5) call abort\n+      end"}, {"sha": "8d8d71a2ae090c077fbe633f8168bc2ca68eacf4", "filename": "gcc/testsuite/gfortran.dg/g77/947.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F947.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,13 @@\n+c { dg-do run }\n+      DIMENSION A(-5:5)\n+      INTEGER*1 IM5, IZ, IP5\n+      INTEGER*2 IM1, IP1\n+      PARAMETER (IM5=-5, IM1=-1, IZ=0, IP1=1, IP5=5)\n+      DATA A(IM5) /-5./, A(IM1) /-1./\n+      DATA A(IZ)  /0./\n+      DATA A(IP5) /+5./, A(IP1) /+1./\n+      IF (A(IM5) .NE. -5. .OR. A(IM1) .NE. -1. .OR.\n+     ,    A(IZ)  .NE.  0. .OR.\n+     ,    A(IP5) .NE. +5. .OR. A(IP1) .NE. +1. )\n+     ,  CALL ABORT\n+      END"}, {"sha": "690438646214ccac557ebaf5f9915e49fe77c08d", "filename": "gcc/testsuite/gfortran.dg/g77/970816-3.f", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970816-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970816-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F970816-3.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,21 @@\n+c { dg-do run }\n+* Date: Wed, 13 Aug 1997 15:34:23 +0200 (METDST)\n+* From: Claus Denk <denk@cica.es>\n+* To: g77-alpha@gnu.ai.mit.edu\n+* Subject: 970811 report - segfault bug on alpha still there\n+*[...]\n+* Now, the bug that I reported some weeks ago is still there, I'll post\n+* the test program again:\n+*\n+        PROGRAM TEST\n+C       a bug in g77-0.5.21 - alpha. Works with NSTART=0 and segfaults with\n+C       NSTART=1 on the second write.\n+        PARAMETER (NSTART=1,NADD=NSTART+1)\n+        REAL AB(NSTART:NSTART)\n+        AB(NSTART)=1.0\n+        I=1\n+        J=2\n+        IND=I-J+NADD\n+        write(*,*) AB(IND)\n+        write(*,*) AB(I-J+NADD)\n+        END"}, {"sha": "6181a17719174b32a5e22ec33eacacb40658b9e6", "filename": "gcc/testsuite/gfortran.dg/g77/971102-1.f", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F971102-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F971102-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F971102-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,12 @@\n+c { dg-do run }\n+       i=3\n+       j=0\n+       do i=i,5\n+         j = j+i\n+       end do\n+       do i=3,i\n+         j = j+i\n+       end do\n+       if (i.ne.7) call abort()\n+       print *, i,j\n+       end"}, {"sha": "edf7241b9974fbef869999b99dcc7ac6be473b36", "filename": "gcc/testsuite/gfortran.dg/g77/980520-1.f", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980520-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980520-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980520-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,7 @@\n+c { dg-do run }\n+c     Produced a link error through not eliminating the unused statement\n+c     function after 1998-05-15 change to gcc/toplev.c.  It's in\n+c     `execute' since it needs to link.\n+c     Fixed by 1998-05-23 change to f/com.c.\n+      values(i,j) = val((i-1)*n+j)\n+      end"}, {"sha": "9943e3c213555bc7544504012bd6a50c8c08b644", "filename": "gcc/testsuite/gfortran.dg/g77/980628-0.f", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-0.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,62 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (r1(2), d1)\n+      equivalence (r2(2), d2)\n+      equivalence (r3(2), d3)\n+\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end"}, {"sha": "7524a3f8aeba3699e4a632d1596af0ff266b23f7", "filename": "gcc/testsuite/gfortran.dg/g77/980628-1.f", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,63 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+      save\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (r1(2), d1)\n+      equivalence (r2(2), d2)\n+      equivalence (r3(2), d3)\n+\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end"}, {"sha": "4a0eb23040a5927ddb27621cf94d7f8f72528c05", "filename": "gcc/testsuite/gfortran.dg/g77/980628-10.f", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-10.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-10.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-10.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,58 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+      save\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+      equivalence (r1, c1(2))\n+      equivalence (r2, c2(2))\n+      equivalence (r3, c3(2))\n+\n+      c1(1) = '1'\n+      r1 = 1.\n+      c1(11) = '1'\n+      c4 = '4'\n+      c2(1) = '2'\n+      r2 = 2.\n+      c2(11) = '2'\n+      c5 = '5'\n+      c3(1) = '3'\n+      r3 = 3.\n+      c3(11) = '3'\n+      c6 = '6'\n+\n+      call x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+\n+      end\n+\n+      subroutine x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+\n+      if (c1(1) .ne. '1') call abort\n+      if (r1 .ne. 1.) call abort\n+      if (c1(11) .ne. '1') call abort\n+      if (c4 .ne. '4') call abort\n+      if (c2(1) .ne. '2') call abort\n+      if (r2 .ne. 2.) call abort\n+      if (c2(11) .ne. '2') call abort\n+      if (c5 .ne. '5') call abort\n+      if (c3(1) .ne. '3') call abort\n+      if (r3 .ne. 3.) call abort\n+      if (c3(11) .ne. '3') call abort\n+      if (c6 .ne. '6') call abort\n+\n+      end\n+"}, {"sha": "632487687a65d6c257adb77227ef26a0d26eff40", "filename": "gcc/testsuite/gfortran.dg/g77/980628-2.f", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-2.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,56 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+      equivalence (c1(2), r1)\n+      equivalence (c2(2), r2)\n+      equivalence (c3(2), r3)\n+\n+      c1(1) = '1'\n+      r1 = 1.\n+      c1(11) = '1'\n+      c4 = '4'\n+      c2(1) = '2'\n+      r2 = 2.\n+      c2(11) = '2'\n+      c5 = '5'\n+      c3(1) = '3'\n+      r3 = 3.\n+      c3(11) = '3'\n+      c6 = '6'\n+\n+      call x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+\n+      end\n+\n+      subroutine x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+\n+      if (c1(1) .ne. '1') call abort\n+      if (r1 .ne. 1.) call abort\n+      if (c1(11) .ne. '1') call abort\n+      if (c4 .ne. '4') call abort\n+      if (c2(1) .ne. '2') call abort\n+      if (r2 .ne. 2.) call abort\n+      if (c2(11) .ne. '2') call abort\n+      if (c5 .ne. '5') call abort\n+      if (c3(1) .ne. '3') call abort\n+      if (r3 .ne. 3.) call abort\n+      if (c3(11) .ne. '3') call abort\n+      if (c6 .ne. '6') call abort\n+\n+      end"}, {"sha": "ca10f182b9d0f08a33de54a4e4c3eabbfa413a63", "filename": "gcc/testsuite/gfortran.dg/g77/980628-3.f", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-3.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,57 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+      save\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+      equivalence (c1(2), r1)\n+      equivalence (c2(2), r2)\n+      equivalence (c3(2), r3)\n+\n+      c1(1) = '1'\n+      r1 = 1.\n+      c1(11) = '1'\n+      c4 = '4'\n+      c2(1) = '2'\n+      r2 = 2.\n+      c2(11) = '2'\n+      c5 = '5'\n+      c3(1) = '3'\n+      r3 = 3.\n+      c3(11) = '3'\n+      c6 = '6'\n+\n+      call x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+\n+      end\n+\n+      subroutine x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+\n+      if (c1(1) .ne. '1') call abort\n+      if (r1 .ne. 1.) call abort\n+      if (c1(11) .ne. '1') call abort\n+      if (c4 .ne. '4') call abort\n+      if (c2(1) .ne. '2') call abort\n+      if (r2 .ne. 2.) call abort\n+      if (c2(11) .ne. '2') call abort\n+      if (c5 .ne. '5') call abort\n+      if (c3(1) .ne. '3') call abort\n+      if (r3 .ne. 3.) call abort\n+      if (c3(11) .ne. '3') call abort\n+      if (c6 .ne. '6') call abort\n+\n+      end"}, {"sha": "22ef08a47fd4d667a034b0681d94aecee7e970cc", "filename": "gcc/testsuite/gfortran.dg/g77/980628-7.f", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-7.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-7.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-7.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,63 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (d1, r1(2))\n+      equivalence (d2, r2(2))\n+      equivalence (d3, r3(2))\n+\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end\n+"}, {"sha": "3b4a4a3fc8e450f2cdc7d12de26a12f87ef96b87", "filename": "gcc/testsuite/gfortran.dg/g77/980628-8.f", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-8.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-8.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-8.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,64 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+      save\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (d1, r1(2))\n+      equivalence (d2, r2(2))\n+      equivalence (d3, r3(2))\n+\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (r1, d1, i1, r2, d2, i2, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end\n+"}, {"sha": "ea2dd5478e2439dbab08acd8906eb7170673ac4b", "filename": "gcc/testsuite/gfortran.dg/g77/980628-9.f", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-9.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-9.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980628-9.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,57 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+      equivalence (r1, c1(2))\n+      equivalence (r2, c2(2))\n+      equivalence (r3, c3(2))\n+\n+      c1(1) = '1'\n+      r1 = 1.\n+      c1(11) = '1'\n+      c4 = '4'\n+      c2(1) = '2'\n+      r2 = 2.\n+      c2(11) = '2'\n+      c5 = '5'\n+      c3(1) = '3'\n+      r3 = 3.\n+      c3(11) = '3'\n+      c6 = '6'\n+\n+      call x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+\n+      end\n+\n+      subroutine x (c1, r1, c2, r2, c3, r3, c4, c5, c6)\n+      implicit none\n+\n+      character c1(11), c2(11), c3(11)\n+      real r1, r2, r3\n+      character c4, c5, c6\n+\n+      if (c1(1) .ne. '1') call abort\n+      if (r1 .ne. 1.) call abort\n+      if (c1(11) .ne. '1') call abort\n+      if (c4 .ne. '4') call abort\n+      if (c2(1) .ne. '2') call abort\n+      if (r2 .ne. 2.) call abort\n+      if (c2(11) .ne. '2') call abort\n+      if (c5 .ne. '5') call abort\n+      if (c3(1) .ne. '3') call abort\n+      if (r3 .ne. 3.) call abort\n+      if (c3(11) .ne. '3') call abort\n+      if (c6 .ne. '6') call abort\n+\n+      end\n+"}, {"sha": "2820d2e1d181d4b4925cc1d875d81d7feb35e1b0", "filename": "gcc/testsuite/gfortran.dg/g77/980701-0.f", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-0.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,73 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (r1, s1(2))\n+      equivalence (d1, r1(2))\n+      equivalence (r2, s2(2))\n+      equivalence (d2, r2(2))\n+      equivalence (r3, s3(2))\n+      equivalence (d3, r3(2))\n+\n+      s1(1) = 1.\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      s2(1) = 2.\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      s3(1) = 3.\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (s1(1) .ne. 1.) call abort\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (s2(1) .ne. 2.) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (s3(1) .ne. 3.) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end"}, {"sha": "0f07de3f4ba9bb475ad36378d87d1b08a571e300", "filename": "gcc/testsuite/gfortran.dg/g77/980701-1.f", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F980701-1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,73 @@\n+c { dg-do run }\n+* g77 0.5.23 and previous had bugs involving too little space\n+* allocated for EQUIVALENCE and COMMON areas needing initial\n+* padding to meet alignment requirements of the system.\n+\n+      call subr\n+      end\n+\n+      subroutine subr\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+      equivalence (d1, r1(2))\n+      equivalence (r1, s1(2))\n+      equivalence (d2, r2(2))\n+      equivalence (r2, s2(2))\n+      equivalence (d3, r3(2))\n+      equivalence (r3, s3(2))\n+\n+      s1(1) = 1.\n+      r1(1) = 1.\n+      d1 = 10.\n+      r1(4) = 1.\n+      r1(5) = 1.\n+      i1 = 1\n+      s2(1) = 2.\n+      r2(1) = 2.\n+      d2 = 20.\n+      r2(4) = 2.\n+      r2(5) = 2.\n+      i2 = 2\n+      s3(1) = 3.\n+      r3(1) = 3.\n+      d3 = 30.\n+      r3(4) = 3.\n+      r3(5) = 3.\n+      i3 = 3\n+\n+      call x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+\n+      end\n+\n+      subroutine x (s1, r1, d1, i1, s2, r2, d2, i2, s3, r3, d3, i3)\n+      implicit none\n+\n+      real r1(5), r2(5), r3(5)\n+      real s1(2), s2(2), s3(2)\n+      double precision d1, d2, d3\n+      integer i1, i2, i3\n+\n+      if (s1(1) .ne. 1.) call abort\n+      if (r1(1) .ne. 1.) call abort\n+      if (d1 .ne. 10.) call abort\n+      if (r1(4) .ne. 1.) call abort\n+      if (r1(5) .ne. 1.) call abort\n+      if (i1 .ne. 1) call abort\n+      if (s2(1) .ne. 2.) call abort\n+      if (r2(1) .ne. 2.) call abort\n+      if (d2 .ne. 20.) call abort\n+      if (r2(4) .ne. 2.) call abort\n+      if (r2(5) .ne. 2.) call abort\n+      if (i2 .ne. 2) call abort\n+      if (s3(1) .ne. 3.) call abort\n+      if (r3(1) .ne. 3.) call abort\n+      if (d3 .ne. 30.) call abort\n+      if (r3(4) .ne. 3.) call abort\n+      if (r3(5) .ne. 3.) call abort\n+      if (i3 .ne. 3) call abort\n+\n+      end"}, {"sha": "91e94daad0b35fbe97381799df5f02371b351fcb", "filename": "gcc/testsuite/gfortran.dg/g77/cabs.f", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcabs.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,15 @@\n+c { dg-do run }\n+      program cabs_1\n+      complex      z0\n+      real         r0\n+      complex*16   z1\n+      real*8       r1\n+\n+      z0 = cmplx(3.,4.)\n+      r0 = cabs(z0)\n+      if (r0 .ne. 5.) call abort\n+\n+      z1 = dcmplx(3.d0,4.d0)\n+      r1 = zabs(z1)\n+      if (r1 .ne. 5.d0) call abort\n+      end"}, {"sha": "63b9be254c9dd2fc8b491d2a18cb7ac76b5fea4e", "filename": "gcc/testsuite/gfortran.dg/g77/claus.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fclaus.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fclaus.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fclaus.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,14 @@\n+c { dg-do run }\n+        PROGRAM TEST\n+        REAL AB(3)\n+        do i=1,3\n+         AB(i)=i\n+        enddo\n+        k=1\n+        n=2\n+        ind=k-n+2\n+\tif (ind /= 1) call abort\n+\tif (ab(ind) /= 1) call abort\n+\tif (k-n+2 /= 1) call abort\n+\tif (ab(k-n+2) /= 1) call abort\n+        END"}, {"sha": "ddfbeff3f9ce3d9c51256435505efe8da635a906", "filename": "gcc/testsuite/gfortran.dg/g77/complex_1.f", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcomplex_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcomplex_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcomplex_1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,19 @@\n+c { dg-do run }\n+      program complex_1\n+      complex      z0, z1, z2\n+\n+      z0 = cmplx(0.,.5)\n+      z1 = 1./z0\n+      if (z1 .ne. cmplx(0.,-2)) call abort\n+\n+      z0 = 10.*z0\n+      if (z0 .ne. cmplx(0.,5.)) call abort\n+\n+      z2 = cmplx(1.,2.)\n+      z1 = z0/z2\n+      if (z1 .ne. cmplx(2.,1.)) call abort\n+\n+      z1 = z0*z2\n+      if (z1 .ne. cmplx(-10.,5.)) call abort\n+      end\n+"}, {"sha": "383877370922e696a5cf3f8a5f64154ab50ef073", "filename": "gcc/testsuite/gfortran.dg/g77/cpp3.F", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp3.F", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp3.F", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fcpp3.F?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,6 @@\n+c { dg-do run }\n+!  Some versions of cpp will delete \"//'World' as a C++ comment.\n+      character*40    title\n+      title = 'Hello '//'World'\n+      if (title .ne. 'Hello World') call abort\n+      end"}, {"sha": "8ac0052832a5a1223da9c4a5982f2ca645ebb49a", "filename": "gcc/testsuite/gfortran.dg/g77/dcomplex.f", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdcomplex.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,19 @@\n+c { dg-do run }\n+      program foo\n+      complex*16      z0, z1, z2\n+\n+      z0 = dcmplx(0.,.5)\n+      z1 = 1./z0\n+      if (z1 .ne. dcmplx(0.,-2)) call abort\n+\n+      z0 = 10.*z0\n+      if (z0 .ne. dcmplx(0.,5.)) call abort\n+\n+      z2 = cmplx(1.,2.)\n+      z1 = z0/z2\n+      if (z1 .ne. dcmplx(2.,1.)) call abort\n+\n+      z1 = z0*z2\n+      if (z1 .ne. dcmplx(-10.,5.)) call abort\n+      end\n+"}, {"sha": "7d9402765a7f961a6db818ffb16c600fa378acf5", "filename": "gcc/testsuite/gfortran.dg/g77/dnrm2.f", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fdnrm2.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,75 @@\n+c { dg-do run }\n+CCC g77 0.5.21 `Actual Bugs':\n+CCC   * A code-generation bug afflicts Intel x86 targets when `-O2' is\n+CCC     specified compiling, for example, an old version of the `DNRM2'\n+CCC     routine.  The x87 coprocessor stack is being somewhat mismanaged\n+CCC     in cases where assigned `GOTO' and `ASSIGN' are involved.\n+CCC\n+CCC     Version 0.5.21 of `g77' contains an initial effort to fix the\n+CCC     problem, but this effort is incomplete, and a more complete fix is\n+CCC     planned for the next release.\n+\n+C     Currently this test fails with (at least) `-O2 -funroll-loops' on\n+C     i586-unknown-linux-gnulibc1.\n+\n+C     (This is actually an obsolete version of dnrm2 -- consult the\n+c     current Netlib BLAS.)\n+\n+      integer i\n+      double precision a(1:100), dnrm2\n+      do i=1,100\n+         a(i)=0.D0\n+      enddo\n+      if (dnrm2(100,a,1) .ne. 0.0) call abort\n+      end\n+\n+      double precision function dnrm2 ( n, dx, incx)\n+      integer i, incx, ix, j, n, next\n+      double precision   dx(1), cutlo, cuthi, hitest, sum, xmax,zero,one\n+      data   zero, one /0.0d0, 1.0d0/\n+      data cutlo, cuthi / 8.232d-11,  1.304d19 /\n+      j = 0\n+      if(n .gt. 0 .and. incx.gt.0) go to 10\n+         dnrm2  = zero\n+         go to 300\n+   10 assign 30 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      sum = zero\n+      i = 1\n+      ix = 1\n+   20    go to next,(30, 50, 70, 110) ! { dg-warning \"Assigned GOTO\" \"\" }\n+   30 if( dabs(dx(i)) .gt. cutlo) go to 85\n+      assign 50 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      xmax = zero\n+   50 if( dx(i) .eq. zero) go to 200\n+      if( dabs(dx(i)) .gt. cutlo) go to 85\n+      assign 70 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      go to 105\n+  100 continue\n+      ix = j\n+      assign 110 to next ! { dg-warning \"ASSIGN\" \"\" }\n+      sum = (sum / dx(i)) / dx(i)\n+  105 xmax = dabs(dx(i))\n+      go to 115\n+   70 if( dabs(dx(i)) .gt. cutlo ) go to 75\n+  110 if( dabs(dx(i)) .le. xmax ) go to 115\n+         sum = one + sum * (xmax / dx(i))**2\n+         xmax = dabs(dx(i))\n+         go to 200\n+  115 sum = sum + (dx(i)/xmax)**2\n+      go to 200\n+   75 sum = (sum * xmax) * xmax\n+   85 hitest = cuthi/float( n )\n+      do 95 j = ix,n\n+      if(dabs(dx(i)) .ge. hitest) go to 100\n+         sum = sum + dx(i)**2\n+         i = i + incx\n+   95 continue\n+      dnrm2 = dsqrt( sum )\n+      go to 300\n+  200 continue\n+      ix = ix + 1\n+      i = i + incx\n+      if( ix .le. n ) go to 20\n+      dnrm2 = xmax * dsqrt(sum)\n+  300 continue\n+      end"}, {"sha": "12ef892a0743cad044618498bc00f94edfae376f", "filename": "gcc/testsuite/gfortran.dg/g77/f90-intrinsic-mathematical.f", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-mathematical.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,138 @@\n+c { dg-do run }\n+c  f90-intrinsic-mathematical.f\n+c\n+c Test Fortran 90 intrinsic mathematical functions - Section 13.10.3 and\n+c 13.13 \n+c     David Billinghurst <David.Billinghurst@riotinto.com>\n+c\n+c Notes:\n+c  * g77 does not fully comply with F90.  Noncompliances noted in comments.\n+c  * Section 13.12: Specific names for intrinsic functions tested in\n+c intrinsic77.f\n+\n+      logical fail\n+      common /flags/ fail\n+      fail = .false.\n+\n+c     ACOS - Section 13.13.3\n+      call c_r(ACOS(0.54030231),1.0,'ACOS(real)')\n+      call c_d(ACOS(0.54030231d0),1.d0,'ACOS(double)')\n+\n+c     ASIN - Section 13.13.12\n+      call c_r(ASIN(0.84147098),1.0,'ASIN(real)')\n+      call c_d(ASIN(0.84147098d0),1.d0,'ASIN(double)')\n+\n+c     ATAN - Section 13.13.14\n+      call c_r(ATAN(1.5574077),1.0,'ATAN(real)')\n+      call c_d(ATAN(1.5574077d0),1.d0,'ATAN(double)')\n+      \n+c     ATAN2 - Section 13.13.15\n+      call c_r(ATAN2(1.5574077,1.),1.0,'ATAN2(real)')\n+      call c_d(ATAN2(1.5574077d0,1.d0),1.d0,'ATAN2(double)')\n+\n+c     COS - Section 13.13.22\n+      call c_r(COS(1.0),0.54030231,'COS(real)')\n+      call c_d(COS(1.d0),0.54030231d0,'COS(double)')\n+      call c_c(COS((1.,0.)),(0.54030231,0.),'COS(complex)')\n+      call c_z(COS((1.d0,0.d0)),(0.54030231d0,0.d0),\n+     $     'COS(double complex)')\n+\n+c     COSH - Section 13.13.23\n+      call c_r(COSH(1.0),1.5430806,'COSH(real)')\n+      call c_d(COSH(1.d0),1.5430806d0,'COSH(double)')\n+\n+c     EXP - Section 13.13.34\n+      call c_r(EXP(1.0),2.7182818,'EXP(real)')\n+      call c_d(EXP(1.d0),2.7182818d0,'EXP(double)')\n+      call c_c(EXP((1.,0.)),(2.7182818,0.),'EXP(complex)')\n+      call c_z(EXP((1.d0,0.d0)),(2.7182818d0,0.d0),\n+     $     'EXP(double complex)')\n+\n+c     LOG - Section 13.13.59\n+      call c_r(LOG(10.0),2.3025851,'LOG(real)')\n+      call c_d(LOG(10.d0),2.3025851d0,'LOG(double)')\n+      call c_c(LOG((10.,0.)),(2.3025851,0.),'LOG(complex)')\n+      call c_z(LOG((10.d0,0.)),(2.3025851d0,0.d0),\n+     $     'LOG(double complex)')\n+\n+c     LOG10 - Section 13.13.60\n+      call c_r(LOG10(10.0),1.0,'LOG10(real)')\n+      call c_d(LOG10(10.d0),1.d0,'LOG10(double)')\n+\n+c     SIN - Section 13.13.97\n+      call c_r(SIN(1.0),0.84147098,'SIN(real)')\n+      call c_d(SIN(1.d0),0.84147098d0,'SIN(double)')\n+      call c_c(SIN((1.,0.)),(0.84147098,0.),'SIN(complex)')\n+      call c_z(SIN((1.d0,0.d0)),(0.84147098d0,0.d0),\n+     $     'SIN(double complex)')\n+\n+c     SINH - Section 13.13.98\n+      call c_r(SINH(1.0),1.175201,'SINH(real)')\n+      call c_d(SINH(1.d0),1.175201d0,'SINH(double)')\n+\n+c     SQRT - Section 13.13.102\n+      call c_r(SQRT(4.0),2.0,'SQRT(real)')\n+      call c_d(SQRT(4.d0),2.d0,'SQRT(double)')\n+      call c_c(SQRT((4.,0.)),(2.,0.),'SQRT(complex)')\n+      call c_z(SQRT((4.d0,0.)),(2.d0,0.),\n+     $     'SQRT(double complex)')\n+ \n+c     TAN - Section 13.13.105\n+      call c_r(TAN(1.0),1.5574077,'TAN(real)')\n+      call c_d(TAN(1.d0),1.5574077d0,'TAN(double)')\n+     \n+c     TANH - Section 13.13.106\n+      call c_r(TANH(1.0),0.76159416,'TANH(real)')\n+      call c_d(TANH(1.d0),0.76159416d0,'TANH(double)')\n+\n+      if ( fail ) call abort()\n+      end\n+\n+      subroutine failure(label)\n+c     Report failure and set flag\n+      character*(*) label\n+      logical fail\n+      common /flags/ fail\n+      write(6,'(a,a,a)') 'Test ',label,' FAILED'\n+      fail = .true.\n+      end\n+\n+      subroutine c_r(a,b,label)\n+c     Check if REAL a equals b, and fail otherwise\n+      real a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_d(a,b,label)\n+c     Check if DOUBLE PRECISION a equals b, and fail otherwise\n+      double precision a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0d-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_c(a,b,label)\n+c     Check if COMPLEX a equals b, and fail otherwise\n+      complex a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_z(a,b,label)\n+c     Check if COMPLEX a equals b, and fail otherwise\n+      double complex a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0d-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end"}, {"sha": "01ff8a77d8344751a4f6922bb26586c579fadae3", "filename": "gcc/testsuite/gfortran.dg/g77/f90-intrinsic-numeric.f", "status": "added", "additions": 283, "deletions": 0, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Ff90-intrinsic-numeric.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,283 @@\n+c { dg-do run }\n+c  f90-intrinsic-numeric.f\n+c\n+c Test Fortran 90 intrinsic numeric functions - Section 13.10.2 and 13.13 \n+c     David Billinghurst <David.Billinghurst@riotinto.com>\n+c\n+c Notes:\n+c  * g77 does not fully comply with F90.  Noncompliances noted in comments.\n+c  * Section 13.12: Specific names for intrinsic functions tested in\n+c intrinsic77.f\n+\n+      logical fail\n+      integer*2 j, j2, ja\n+      integer*1 k, k2, ka\n+\n+      common /flags/ fail\n+      fail = .false.\n+\n+c     ABS - Section 13.13.1\n+      j = -9\n+      ja = 9\n+      k = j\n+      ka = ja\n+      call c_i(ABS(-7),7,'ABS(integer)')\n+      call c_i2(ABS(j),ja,'ABS(integer*2)')\n+      call c_i1(ABS(k),ka,'ABS(integer*1)')\n+      call c_r(ABS(-7.),7.,'ABS(real)')\n+      call c_d(ABS(-7.d0),7.d0,'ABS(double)')\n+      call c_r(ABS((3.,-4.)),5.0,'ABS(complex)')\n+      call c_d(ABS((3.d0,-4.d0)),5.0d0,'ABS(double complex)')\n+\n+c     AIMAG - Section 13.13.6\n+      call c_r(AIMAG((2.,-7.)),-7.,'AIMAG(complex)')\n+c     g77: AIMAG(double complex) does not comply with F90\n+c     call c_d(AIMAG((2.d0,-7.d0)),-7.d0,'AIMAG(double complex)')\n+\n+c     AINT - Section 13.13.7\n+      call c_r(AINT(2.783),2.0,'AINT(real) 1')\n+      call c_r(AINT(-2.783),-2.0,'AINT(real) 2')\n+      call c_d(AINT(2.783d0),2.0d0,'AINT(double precision) 1')\n+      call c_d(AINT(-2.783d0),-2.0d0,'AINT(double precision) 2')\n+c     Note:  g77 does not support optional argument KIND\n+\n+c     ANINT - Section 13.13.10\n+      call c_r(ANINT(2.783),3.0,'ANINT(real) 1')\n+      call c_r(ANINT(-2.783),-3.0,'ANINT(real) 2')\n+      call c_d(ANINT(2.783d0),3.0d0,'ANINT(double precision) 1')\n+      call c_d(ANINT(-2.783d0),-3.0d0,'ANINT(double precision) 2')  \n+c     Note:  g77 does not support optional argument KIND\n+\n+c     CEILING - Section 13.13.18\n+c     Not implemented\n+\n+c     CMPLX - Section 13.13.20\n+      j = 1\n+      ja = 2\n+      k = 1\n+      ka = 2\n+      call c_c(CMPLX(1),(1.,0.),'CMPLX(integer)')\n+      call c_c(CMPLX(1,2),(1.,2.),'CMPLX(integer, integer)')\n+      call c_c(CMPLX(j),(1.,0.),'CMPLX(integer*2)')\n+      call c_c(CMPLX(j,ja),(1.,2.),'CMPLX(integer*2, integer*2)')\n+      call c_c(CMPLX(k),(1.,0.),'CMPLX(integer*1)')\n+      call c_c(CMPLX(k,ka),(1.,2.),'CMPLX(integer*1, integer*1)')\n+      call c_c(CMPLX(1.),(1.,0.),'CMPLX(real)')\n+      call c_c(CMPLX(1.d0),(1.,0.),'CMPLX(double)')\n+      call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(double,double)')\n+      call c_c(CMPLX(1.,2.),(1.,2.),'CMPLX(complex)')\n+      call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(double complex)')\n+c     NOTE: g77 does not support optional argument KIND\n+   \n+c     CONJG - Section 13.13.21\n+      call c_c(CONJG((2.,-7.)),(2.,7.),'CONJG(complex)')\n+      call c_z(CONJG((2.d0,-7.d0)),(2.d0,7.d0),'CONJG(double complex)')\n+\n+c     DBLE - Section 13.13.27\n+      j = 5\n+      k = 5\n+      call c_d(DBLE(5),5.0d0,'DBLE(integer)')\n+      call c_d(DBLE(j),5.0d0,'DBLE(integer*2)')\n+      call c_d(DBLE(k),5.0d0,'DBLE(integer*1)')\n+      call c_d(DBLE(5.),5.0d0,'DBLE(real)')\n+      call c_d(DBLE(5.0d0),5.0d0,'DBLE(double)')\n+      call c_d(DBLE((5.0,0.5)),5.0d0,'DBLE(complex)')\n+      call c_d(DBLE((5.0d0,0.5d0)),5.0d0,'DBLE(double complex)')\n+\n+c     DIM - Section 13.13.29\n+      j = -8\n+      j2 = -3\n+      ja = 0\n+      k = -8\n+      k2 = -3\n+      ka = 0\n+      call c_i(DIM(-8,-3),0,'DIM(integer)')\n+      call c_i2(DIM(j,j2),ja,'DIM(integer*2)')\n+      call c_i1(DIM(k,k2),ka,'DIM(integer*1)')\n+      call c_r(DIM(-8.,-3.),0.,'DIM(real,real)')\n+      call c_d(DIM(-8.d0,-3.d0),0.d0,'DIM(double,double)')\n+ \n+c     DPROD - Section 13.13.31\n+      call c_d(DPROD(-8.,-3.),24.d0,'DPROD(real,real)')\n+     \n+c     FLOOR - Section 13.13.36\n+c     Not implemented\n+\n+c     INT - Section 13.13.47\n+      j = 5\n+      k = 5\n+      call c_i(INT(5),5,'INT(integer)')\n+      call c_i(INT(j),5,'INT(integer*2)')\n+      call c_i(INT(k),5,'INT(integer*1)')\n+      call c_i(INT(5.01),5,'INT(real)')\n+      call c_i(INT(5.01d0),5,'INT(double)')\n+c     Note: Does not accept optional second argument KIND\n+\n+c     MAX - Section 13.13.63\n+      j = 1\n+      j2 = 2\n+      ja = 2\n+      k = 1\n+      k2 = 2\n+      ka = 2\n+      call c_i(MAX(1,2,3),3,'MAX(integer,integer,integer)')\n+      call c_i2(MAX(j,j2),ja,'MAX(integer*2,integer*2)')\n+      call c_i1(MAX(k,k2),ka,'MAX(integer*1,integer*1)')\n+      call c_r(MAX(1.,2.,3.),3.,'MAX(real,real,real)')\n+      call c_d(MAX(1.d0,2.d0,3.d0),3.d0,'MAX(double,double,double)')\n+\n+c     MIN - Section 13.13.68\n+      j = 1\n+      j2 = 2\n+      ja = 1\n+      k = 1\n+      k2 = 2\n+      ka = 1\n+      call c_i(MIN(1,2,3),1,'MIN(integer,integer,integer)')\n+      call c_i2(MIN(j,j2),ja,'MIN(integer*2,integer*2)')\n+      call c_i1(MIN(k,k2),ka,'MIN(integer*1,integer*1)')\n+      call c_r(MIN(1.,2.,3.),1.,'MIN(real,real,real)')\n+      call c_d(MIN(1.d0,2.d0,3.d0),1.d0,'MIN(double,double,double)')\n+\n+c     MOD - Section 13.13.72\n+      call c_i(MOD(8,5),3,'MOD(integer,integer) 1')\n+      call c_i(MOD(-8,5),-3,'MOD(integer,integer) 2')\n+      call c_i(MOD(8,-5),3,'MOD(integer,integer) 3')\n+      call c_i(MOD(-8,-5),-3,'MOD(integer,integer) 4')\n+      j = 8\n+      j2 = 5\n+      ja = 3\n+      call c_i2(MOD(j,j2),ja,'MOD(integer*2,integer*2) 1')\n+      call c_i2(MOD(-j,j2),-ja,'MOD(integer*2,integer*2) 2')\n+      call c_i2(MOD(j,-j2),ja,'MOD(integer*2,integer*2) 3')\n+      call c_i2(MOD(-j,-j2),-ja,'MOD(integer*2,integer*2) 4')\n+      k = 8\n+      k2 = 5\n+      ka = 3\n+      call c_i1(MOD(k,k2),ka,'MOD(integer*1,integer*1) 1')\n+      call c_i1(MOD(-k,k2),-ka,'MOD(integer*1,integer*1) 2')\n+      call c_i1(MOD(k,-k2),ka,'MOD(integer*1,integer*1) 3')\n+      call c_i1(MOD(-k,-k2),-ka,'MOD(integer*1,integer*1) 4')\n+      call c_r(MOD(8.,5.),3.,'MOD(real,real) 1')\n+      call c_r(MOD(-8.,5.),-3.,'MOD(real,real) 2')\n+      call c_r(MOD(8.,-5.),3.,'MOD(real,real) 3')\n+      call c_r(MOD(-8.,-5.),-3.,'MOD(real,real) 4')\n+      call c_d(MOD(8.d0,5.d0),3.d0,'MOD(double,double) 1')\n+      call c_d(MOD(-8.d0,5.d0),-3.d0,'MOD(double,double) 2')\n+      call c_d(MOD(8.d0,-5.d0),3.d0,'MOD(double,double) 3')\n+      call c_d(MOD(-8.d0,-5.d0),-3.d0,'MOD(double,double) 4')\n+\n+c     MODULO - Section 13.13.73\n+c     Not implemented\n+\n+c     NINT - Section 13.13.76\n+      call c_i(NINT(2.783),3,'NINT(real)')\n+      call c_i(NINT(2.783d0),3,'NINT(double)')\n+c     Optional second argument KIND not implemented\n+\n+c     REAL - Section 13.13.86\n+      j = -2\n+      k = -2\n+      call c_r(REAL(-2),-2.0,'REAL(integer)')\n+      call c_r(REAL(j),-2.0,'REAL(integer*2)')\n+      call c_r(REAL(k),-2.0,'REAL(integer*1)')\n+      call c_r(REAL(-2.0),-2.0,'REAL(real)')\n+      call c_r(REAL(-2.0d0),-2.0,'REAL(double)')\n+      call c_r(REAL((-2.,9.)),-2.0,'REAL(complex)')\n+c     REAL(double complex) not implemented\n+c     call c_r(REAL((-2.d0,9.d0)),-2.0,'REAL(double complex)')\n+\n+c     SIGN - Section 13.13.96\n+      j = -3\n+      j2 = 2\n+      ja = 3\n+      k = -3\n+      k2 = 2\n+      ka = 3\n+      call c_i(SIGN(-3,2),3,'SIGN(integer)')\n+      call c_i2(SIGN(j,j2),ja,'SIGN(integer*2)')\n+      call c_i1(SIGN(k,k2),ka,'SIGN(integer*1)')\n+      call c_r(SIGN(-3.0,2.),3.,'SIGN(real,real)')\n+      call c_d(SIGN(-3.d0,2.d0),3.d0,'SIGN(double,double)')\n+ \n+      if ( fail ) call abort()\n+      end\n+\n+      subroutine failure(label)\n+c     Report failure and set flag\n+      character*(*) label\n+      logical fail\n+      common /flags/ fail\n+      write(6,'(a,a,a)') 'Test ',label,' FAILED'\n+      fail = .true.\n+      end\n+\n+      subroutine c_i(i,j,label)\n+c     Check if INTEGER i equals j, and fail otherwise\n+      integer i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i2(i,j,label)\n+c     Check if INTEGER*2 i equals j, and fail otherwise\n+      integer*2 i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_i1(i,j,label)\n+c     Check if INTEGER*1 i equals j, and fail otherwise\n+      integer*1 i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_r(a,b,label)\n+c     Check if REAL a equals b, and fail otherwise\n+      real a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_d(a,b,label)\n+c     Check if DOUBLE PRECISION a equals b, and fail otherwise\n+      double precision a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0d-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_c(a,b,label)\n+c     Check if COMPLEX a equals b, and fail otherwise\n+      complex a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_z(a,b,label)\n+c     Check if COMPLEX a equals b, and fail otherwise\n+      double complex a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0d-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end"}, {"sha": "3e4625f8874709d71b9ddd79cef8165344f03942", "filename": "gcc/testsuite/gfortran.dg/g77/int8421.f", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fint8421.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,21 @@\n+c { dg-do run }\n+      integer*1 i1, i11\n+      integer*2 i2, i22\n+      integer   i, ii\n+      integer*4 i4, i44\n+      integer*8 i8, i88\n+      real      r, rr\n+      real*4    r4, r44\n+      double precision d, dd\n+      real*8    r8, r88\n+      parameter (i1 = 1, i2 = 2, i4 = 4, i = 5, i8 = i + i4*i2 + i2*i1)\n+      parameter (r = 3.0, r4 = 4.0, r8 = 8.d0, d = i8*r + r4*i2 + r8*i1)\n+      if (i8 .ne. 15   ) call abort\n+      if (d  .ne. 61.d0) call abort\n+      i11 = 1; i22 = 2; i44 = 4; ii = 5\n+      i88 = i + i4*i2 + i2*i1\n+      if (i88 .ne. i8) call abort\n+      rr = 3.0; r44 = 4.0; r88 = 8.0d0\n+      dd = i88*rr + r44*i22 + r88*i11\n+      if (dd .ne. d) call abort\n+      end"}, {"sha": "d004f760ecb0d19b55431f8743e9996ba886c27c", "filename": "gcc/testsuite/gfortran.dg/g77/labug1.f", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flabug1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flabug1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flabug1.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,58 @@\n+c { dg-do run }\n+      PROGRAM LABUG1\n+\n+*  This program core dumps on mips-sgi-irix6.2 when compiled\n+*  with egcs-19981101, egcs-19981109 and egcs-19981122 snapshots\n+*  with -O2\n+*\n+*  Originally derived from LAPACK test suite.\n+*  Almost any change allows it to run.\n+*\n+*  David Billinghurst, (David.Billinghurst@riotinto.com.au)\n+*  25 November 1998\n+* \n+*     .. Parameters ..\n+      INTEGER   LDA, LDE\n+      PARAMETER ( LDA = 2500, LDE = 50  )\n+      COMPLEX   CZERO \n+      PARAMETER ( CZERO = ( 0.0E+0, 0.0E+0 ) )\n+\n+      INTEGER   I, J, M, N\n+      REAL      V\n+      COMPLEX   A(LDA),B(LDA),C(LDA),E(LDE,LDE),F(LDE,LDE)  \n+      COMPLEX   Z\n+\n+      N=2\n+      M=1\n+*\n+      do i = 1, m\n+         do j = 1, n\n+            e(i,j) = czero\n+            f(i,j) = czero\n+        end do\n+      end do\n+*\n+      DO J = 1, N\n+         DO I = 1, M\n+            V =  ABS( E(I,J) - F(I,J) )\n+         END DO\n+      END DO\n+ \n+      CALL SUB2(M,Z)\n+\n+      END\n+\n+      subroutine SUB2(I,A)\n+      integer i\n+      complex a\n+      end\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "f5ff87d0db9f986741f0902a5835668118145c2e", "filename": "gcc/testsuite/gfortran.dg/g77/large_vec.f", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flarge_vec.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flarge_vec.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Flarge_vec.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,4 @@\n+c { dg-do run }\n+      parameter (nmax=165000)\n+      double precision x(nmax)\n+      end"}, {"sha": "c62ac46cd0f4093082665bbbff8586a280ea83f2", "filename": "gcc/testsuite/gfortran.dg/g77/le.f", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fle.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fle.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fle.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,30 @@\n+c { dg-do run }\n+      program fool\n+\n+      real     foo\n+      integer  n\n+      logical  t\n+\n+      foo = 2.5\n+      n = 5\n+\n+      t = (n > foo)\n+      if (t .neqv. .true.) call abort\n+      t = (n >= foo)\n+      if (t .neqv. .true.) call abort\n+      t = (n < foo)\n+      if (t .neqv. .false.) call abort\n+      t = (n <= 5)\n+      if (t .neqv. .true.) call abort\n+      t = (n >= 5 )\n+      if (t .neqv. .true.) call abort\n+      t = (n == 5)\n+      if (t .neqv. .true.) call abort\n+      t = (n /= 5)\n+      if (t .neqv. .false.) call abort\n+      t = (n /= foo)\n+      if (t .neqv. .true.) call abort\n+      t = (n == foo)\n+      if (t .neqv. .false.) call abort\n+\n+      end"}, {"sha": "3f0e12217ad48157c8a14b7b67bd30dc2073a734", "filename": "gcc/testsuite/gfortran.dg/g77/short.f", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fshort.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417dba9b5f60de529bef6d7b6b5be6ef402e025/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fshort.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2Fshort.f?ref=d417dba9b5f60de529bef6d7b6b5be6ef402e025", "patch": "@@ -0,0 +1,58 @@\n+c { dg-do run }\n+      program short\n+\n+      parameter   (   N=2  )\n+      common /chb/    pi,sig(0:N)\n+      common /parm/   h(2,2)\n+\n+c  initialize some variables\n+      h(2,2) = 1117\n+      h(2,1) = 1178\n+      h(1,2) = 1568\n+      h(1,1) = 1621\n+      sig(0) = -1.\n+      sig(1) = 0.\n+      sig(2) = 1.\n+\n+      call printout\n+      stop\n+      end\n+\n+c ******************************************************************\n+\n+      subroutine printout\n+      parameter   (   N=2  )\n+      common /chb/    pi,sig(0:N)\n+      common /parm/   h(2,2)\n+      dimension       yzin1(0:N), yzin2(0:N)\n+\n+c  function subprograms\n+      z(i,j,k) = 0.5*h(i,j)*(sig(k)-1.)\n+\n+c  a four-way average of rhobar\n+      do 260  k=0,N\n+        yzin1(k) = 0.25 * \n+     &       ( z(2,2,k) + z(1,2,k) +\n+     &         z(2,1,k) + z(1,1,k) )\n+  260       continue\n+\n+c  another four-way average of rhobar\n+      do 270  k=0,N\n+\trtmp1 = z(2,2,k)\n+\trtmp2 = z(1,2,k)\n+\trtmp3 = z(2,1,k)\n+\trtmp4 = z(1,1,k)\n+        yzin2(k) = 0.25 * \n+     &       ( rtmp1 + rtmp2 + rtmp3 + rtmp4 )\n+  270       continue\n+\n+      do k=0,N\n+\tif (yzin1(k) .ne. yzin2(k)) call abort\n+      enddo\n+      if (yzin1(0) .ne. -1371.) call abort\n+      if (yzin1(1) .ne. -685.5) call abort\n+      if (yzin1(2) .ne. 0.) call abort\n+\n+      return\n+      end\n+"}]}