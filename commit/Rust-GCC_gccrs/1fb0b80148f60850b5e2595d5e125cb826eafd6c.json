{"sha": "1fb0b80148f60850b5e2595d5e125cb826eafd6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiMGI4MDE0OGY2MDg1MGI1ZTI1OTVkNWUxMjVjYjgyNmVhZmQ2Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-10-13T18:01:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-13T18:01:51Z"}, "message": "re PR c++/50618 (Virtual inheritance segfault)\n\n\tPR c++/50618\n\t* init.c (expand_aggr_init_1): Don't zero-initialize virtual\n\tbases of a base subobject.\n\nFrom-SVN: r179934", "tree": {"sha": "d27698a7e57e68696f93b4980066a65a55938d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d27698a7e57e68696f93b4980066a65a55938d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fb0b80148f60850b5e2595d5e125cb826eafd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb0b80148f60850b5e2595d5e125cb826eafd6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb0b80148f60850b5e2595d5e125cb826eafd6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb0b80148f60850b5e2595d5e125cb826eafd6c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40746f4023a9b064cf703cc722d50a8996b2837b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40746f4023a9b064cf703cc722d50a8996b2837b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40746f4023a9b064cf703cc722d50a8996b2837b"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "e70f5c8490fa9665818c73195584bd7ad090b39e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1fb0b80148f60850b5e2595d5e125cb826eafd6c", "patch": "@@ -1,3 +1,9 @@\n+2011-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50618\n+\t* init.c (expand_aggr_init_1): Don't zero-initialize virtual\n+\tbases of a base subobject.\n+\n 2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50594"}, {"sha": "a21e566314914a23f23b3d9ad2c0c83ff0fd54c1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1fb0b80148f60850b5e2595d5e125cb826eafd6c", "patch": "@@ -1588,27 +1588,25 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n      that's value-initialization.  */\n   if (init == void_type_node)\n     {\n-      /* If there's a user-provided constructor, we just call that.  */\n-      if (type_has_user_provided_constructor (type))\n-\t/* Fall through.  */;\n-      /* If there isn't, but we still need to call the constructor,\n-\t zero out the object first.  */\n-      else if (type_build_ctor_call (type))\n-\t{\n-\t  init = build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n+      /* If no user-provided ctor, we need to zero out the object.  */\n+      if (!type_has_user_provided_constructor (type))\n+\t{\n+\t  tree field_size = NULL_TREE;\n+\t  if (exp != true_exp && CLASSTYPE_AS_BASE (type) != type)\n+\t    /* Don't clobber already initialized virtual bases.  */\n+\t    field_size = TYPE_SIZE (CLASSTYPE_AS_BASE (type));\n+\t  init = build_zero_init_1 (type, NULL_TREE, /*static_storage_p=*/false,\n+\t\t\t\t    field_size);\n \t  init = build2 (INIT_EXPR, type, exp, init);\n \t  finish_expr_stmt (init);\n-\t  /* And then call the constructor.  */\n \t}\n+\n       /* If we don't need to mess with the constructor at all,\n-\t then just zero out the object and we're done.  */\n-      else\n-\t{\n-\t  init = build2 (INIT_EXPR, type, exp,\n-\t\t\t build_value_init_noctor (type, complain));\n-\t  finish_expr_stmt (init);\n-\t  return;\n-\t}\n+\t then we're done.  */\n+      if (! type_build_ctor_call (type))\n+\treturn;\n+\n+      /* Otherwise fall through and call the constructor.  */\n       init = NULL_TREE;\n     }\n "}, {"sha": "283b699a36d1841fb5eaf3c5506ae05e1d6bc4e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fb0b80148f60850b5e2595d5e125cb826eafd6c", "patch": "@@ -1,3 +1,8 @@\n+2011-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50618\n+\t* g++.dg/init/vbase1.C: New.\n+\n 2011-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/sse4_1-phminposuw-2.c: New test."}, {"sha": "bbfd58f5c348daf7db991e23cd66c80d54280728", "filename": "gcc/testsuite/g++.dg/init/vbase1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fb0b80148f60850b5e2595d5e125cb826eafd6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C?ref=1fb0b80148f60850b5e2595d5e125cb826eafd6c", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/50618\n+// { dg-do run }\n+\n+struct Base\n+{\n+    const int text;\n+    Base():text(1) {}\n+    Base(int aText)\n+    : text(aText) {}\n+};\n+struct SubA : public virtual Base\n+{\n+protected:\n+  int x;\n+public:\n+  SubA(int aX)\n+  : x(aX) {}\n+};\n+class SubB : public virtual Base\n+{};\n+struct Diamond : public SubA, public SubB\n+{\n+    Diamond(int text)\n+    : Base(text), SubA(5), SubB() {}\n+\n+    void printText()\n+    {\n+        if(text != 2)\n+          __builtin_abort();\n+        if(x!=5)\n+          __builtin_abort();\n+    }\n+};\n+\n+int main(int, char**)\n+{\n+    Diamond x(2);\n+    x.printText();\n+}"}]}