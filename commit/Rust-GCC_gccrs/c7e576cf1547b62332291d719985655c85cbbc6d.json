{"sha": "c7e576cf1547b62332291d719985655c85cbbc6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlNTc2Y2YxNTQ3YjYyMzMyMjkxZDcxOTk4NTY1NWM4NWNiYmM2ZA==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2007-02-20T15:02:38Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2007-02-20T15:02:38Z"}, "message": "MBeanServer.java: Updated.\n\n2007-02-20  Gary Benson  <gbenson@redhat.com>\n\n\t* javax/management/MBeanServer.java: Updated.\n\t* javax/management/MBeanServerConnection.java: Likewise.\n\t* javax/management/ObjectName.java: Likewise.\n\t* javax/management/StandardMBean.java: Likewise.\n\nFrom-SVN: r122165", "tree": {"sha": "11facc4a5bb6a13eb2c81ebb451b52a543b0b46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11facc4a5bb6a13eb2c81ebb451b52a543b0b46c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e576cf1547b62332291d719985655c85cbbc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e576cf1547b62332291d719985655c85cbbc6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e576cf1547b62332291d719985655c85cbbc6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e576cf1547b62332291d719985655c85cbbc6d/comments", "author": null, "committer": null, "parents": [{"sha": "cc0c8dbc9363a9355c3ab81588b583f1a49a58b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0c8dbc9363a9355c3ab81588b583f1a49a58b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0c8dbc9363a9355c3ab81588b583f1a49a58b0"}], "stats": {"total": 172, "additions": 96, "deletions": 76}, "files": [{"sha": "9273fe261c31aa6cc64427dd4c07185581e496db", "filename": "libjava/classpath/ChangeLog.gcj", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog.gcj?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -1,3 +1,10 @@\n+2007-02-20  Gary Benson  <gbenson@redhat.com>\n+\n+\t* javax/management/MBeanServer.java: Updated.\n+\t* javax/management/MBeanServerConnection.java: Likewise.\n+\t* javax/management/ObjectName.java: Likewise.\n+\t* javax/management/StandardMBean.java: Likewise.\n+\n 2007-02-15  David Daney  <ddaney@avtrex.com>\n \n \t* tools/Makefile.am (TOOLS_ZIP): Add classes from vm-tools-packages."}, {"sha": "0be5d71ad5df553a0f48d22f6ec9ef6307048027", "filename": "libjava/classpath/javax/management/MBeanServer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServer.java?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -890,7 +890,7 @@ boolean isInstanceOf(ObjectName name, String className)\n    *                           arise from the execution of the query, in which\n    *                           case that particular bean will again be excluded.\n    */\n-  Set queryMBeans(ObjectName name, QueryExp query);\n+  Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query);\n   \n   /**\n    * <p>\n@@ -929,7 +929,7 @@ boolean isInstanceOf(ObjectName name, String className)\n    *                           Note that these permissions are implied if the\n    *                           <code>queryMBeans</code> permissions are available.\n    */\n-  Set queryNames(ObjectName name, QueryExp query);\n+  Set<ObjectName> queryNames(ObjectName name, QueryExp query);\n \n   /**\n    * Registers the supplied instance with the server, using the specified"}, {"sha": "cba6dacc63c774d6881459d4130078aa5e78e5f4", "filename": "libjava/classpath/javax/management/MBeanServerConnection.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServerConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServerConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FMBeanServerConnection.java?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -533,7 +533,7 @@ boolean isRegistered(ObjectName name)\n    * @throws IOException if an I/O error occurred in communicating with\n    *                     the bean server.\n    */\n-  Set queryMBeans(ObjectName name, QueryExp query)\n+  Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query)\n     throws IOException;\n   \n   /**\n@@ -560,7 +560,7 @@ Set queryMBeans(ObjectName name, QueryExp query)\n    * @throws IOException if an I/O error occurred in communicating with\n    *                     the bean server.\n    */\n-  Set queryNames(ObjectName name, QueryExp query)\n+  Set<ObjectName> queryNames(ObjectName name, QueryExp query)\n     throws IOException;\n \n   /**"}, {"sha": "8259eab02bedd3795917f31e1adb5ddd49e4911a", "filename": "libjava/classpath/javax/management/ObjectName.java", "status": "modified", "additions": 72, "deletions": 63, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -105,7 +105,7 @@\n   /**\n    * The properties, as key-value pairs.\n    */\n-  private TreeMap properties;\n+  private TreeMap<String,String> properties = new TreeMap<String,String>();\n \n   /**\n    * The properties as a string (stored for ordering).\n@@ -164,7 +164,6 @@ public ObjectName(String name)\n \t  throw new MalformedObjectNameException(\"A name that is not a \" +\n \t\t\t\t\t\t \"pattern must contain at \" +\n \t\t\t\t\t\t \"least one key-value pair.\");\n-\tproperties = new TreeMap();\n \tfor (int a = 0; a < pairs.length; ++a)\n \t  {\n \t    int sep = pairs[a].indexOf('=');\n@@ -197,7 +196,6 @@ public ObjectName(String domain, String key, String value)\n     throws MalformedObjectNameException\n   {\n     this.domain = domain;\n-    properties = new TreeMap();\n     properties.put(key, value);\n     checkComponents();\n   }\n@@ -216,7 +214,7 @@ public ObjectName(String domain, String key, String value)\n    * @throws NullPointerException if one of the parameters is\n    *                              <code>null</code>.\n    */\n-  public ObjectName(String domain, Hashtable properties)\n+  public ObjectName(String domain, Hashtable<String,String> properties)\n     throws MalformedObjectNameException\n   {\n     this.domain = domain;\n@@ -305,70 +303,80 @@ public boolean apply(ObjectName name)\n   {\n     if (name.isPattern())\n       return false;\n-    if (isPattern())\n+\n+    if (!isPattern())\n+      return equals(name);\n+\n+    if (isDomainPattern())\n       {\n-\tboolean domainMatch, propMatch;\n-\tif (isDomainPattern())\n+\tif (!domainMatches(domain, 0, name.getDomain(), 0))\n+\t  return false;\n+      }\n+    else\n+      {\n+\tif (!domain.equals(name.getDomain()))\n+\t  return false;\n+      }\n+\n+    if (isPropertyPattern())\n+      {\n+\tHashtable oProps = name.getKeyPropertyList();\n+\tIterator i = properties.entrySet().iterator();\n+\twhile (i.hasNext())\n \t  {\n-\t    String oDomain = name.getDomain();\n-\t    int oLength = oDomain.length();\n-\t    for (int a = 0; a < domain.length(); ++a)\n-\t      {\n-\t\tchar n = domain.charAt(a);\n-\t\tif (oLength == a && n != '*')\n-\t\t  return false;\n-\t\tif (n == '?')\n-\t\t  continue;\n-\t\tif (n == '*')\n-\t\t  if ((a + 1) < domain.length())\n-\t\t    {\n-\t\t      if (oLength == a)\n-\t\t\treturn false;\n-\t\t      char next;\n-\t\t      do\n-\t\t\t{\n-\t\t\t  next = domain.charAt(a + 1);\n-\t\t\t} while (next == '*');\n-\t\t      if (next == '?')\n-\t\t\tcontinue;\n-\t\t      int pos = a;\n-\t\t      while (oDomain.charAt(pos) != next)\n-\t\t\t{\n-\t\t\t  ++pos;\n-\t\t\t  if (pos == oLength)\n-\t\t\t    return false;\n-\t\t\t}\n-\t\t    }\n-\t\tif (n != oDomain.charAt(a))\n-\t\t  return false;\n-\t      }\n-\t    domainMatch = true;\n+\t    Map.Entry entry = (Map.Entry) i.next();\n+\t    String key = (String) entry.getKey();\n+\t    if (!(oProps.containsKey(key)))\n+\t      return false;\n+\t    String val = (String) entry.getValue();\n+\t    if (!(val.equals(oProps.get(key))))\n+\t      return false;\n \t  }\n-\telse\n-\t  domainMatch = domain.equals(name.getDomain());\n-\tif (isPropertyPattern())\n+      }\n+    else\n+      {\n+\tif (!getCanonicalKeyPropertyListString().equals\n+\t    (name.getCanonicalKeyPropertyListString()))\n+\t  return false;\n+      }\n+    return true;\n+  }\n+\n+  /**\n+   * Returns true if the domain matches the pattern.\n+   *\n+   * @param pattern the pattern to match against.\n+   * @param patternindex the index into the pattern to start matching.\n+   * @param domain the domain to match.\n+   * @param domainindex the index into the domain to start matching.\n+   * @return true if the domain matches the pattern.\n+   */\n+  private static boolean domainMatches(String pattern, int patternindex,\n+\t\t\t\t       String domain, int domainindex)\n+  {\n+    while (patternindex < pattern.length())\n+      {\n+\tchar c = pattern.charAt(patternindex++);\n+\t\n+\tif (c == '*')\n \t  {\n-\t    Hashtable oProps = name.getKeyPropertyList();\n-\t    Iterator i = properties.entrySet().iterator();\n-\t    while (i.hasNext())\n+\t    for (int i = domain.length(); i >= domainindex; i--)\n \t      {\n-\t\tMap.Entry entry = (Map.Entry) i.next();\n-\t\tString key = (String) entry.getKey();\n-\t\tif (!(oProps.containsKey(key)))\n-\t\t  return false;\n-\t\tString val = (String) entry.getValue();\n-\t\tif (!(val.equals(oProps.get(key))))\n-\t\t  return false;\n+\t\tif (domainMatches(pattern, patternindex, domain, i))\n+\t\t  return true;\n \t      }\n-\t    propMatch = true;\n+\t    return false;\n \t  }\n-\telse\n-\t  propMatch =\n-\t    getCanonicalKeyPropertyListString().equals\n-\t    (name.getCanonicalKeyPropertyListString());\n-\treturn domainMatch && propMatch;\n+\n+\tif (domainindex >= domain.length())\n+\t  return false;\n+\t\n+\tif (c != '?' && c != domain.charAt(domainindex))\n+\t  return false;\n+\n+\tdomainindex++;\n       }\n-    return equals(name);\n+    return true;\n   }\n \n   /**\n@@ -542,7 +550,8 @@ public static ObjectName getInstance(String domain, String key, String value)\n    *                                      specifications.\n    * @throws NullPointerException if <code>name</code> is <code>null</code>.\n    */\n-  public static ObjectName getInstance(String domain, Hashtable properties)\n+  public static ObjectName getInstance(String domain,\n+\t\t\t\t       Hashtable<String,String> properties)\n     throws MalformedObjectNameException\n   {\n     return new ObjectName(domain, properties);\n@@ -571,9 +580,9 @@ public String getKeyProperty(String key)\n    * @return a {@link java.util.Hashtable}, containing each of the object\n    *         name's properties.\n    */\n-  public Hashtable getKeyPropertyList()\n+  public Hashtable<String,String> getKeyPropertyList()\n   {\n-    return new Hashtable(properties);\n+    return new Hashtable<String,String>(properties);\n   }\n \n   /**"}, {"sha": "b31436c6ec1772091af2850b52766d72a5daf104", "filename": "libjava/classpath/javax/management/StandardMBean.java", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FStandardMBean.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FStandardMBean.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FStandardMBean.java?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -69,7 +69,7 @@\n   /**\n    * The interface for this bean.\n    */\n-  private Class iface;\n+  private Class<?> iface;\n \n   /**\n    * The implementation of the interface.\n@@ -94,7 +94,7 @@\n    *                                    in the interface that doesn't comply\n    *                                    with the naming conventions.\n    */\n-  protected StandardMBean(Class iface)\n+  protected StandardMBean(Class<?> iface)\n     throws NotCompliantMBeanException\n   {\n     if (iface == null)\n@@ -133,7 +133,7 @@ protected StandardMBean(Class iface)\n    *                                    in the interface that doesn't comply\n    *                                    with the naming conventions.\n    */\n-  public StandardMBean(Object impl, Class iface)\n+  public <T> StandardMBean(T impl, Class<T> iface)\n     throws NotCompliantMBeanException\n   {\n     if (impl == null)\n@@ -143,8 +143,8 @@ public StandardMBean(Object impl, Class iface)\n \tString className = impl.getClass().getName();\n \ttry\n \t  {\n-\t    iface = Class.forName(className + \"MBean\", true,\n-\t\t\t\t  impl.getClass().getClassLoader());\n+\t    this.iface = Class.forName(className + \"MBean\", true,\n+\t\t\t\t       impl.getClass().getClassLoader());\n \t  }\n \tcatch (ClassNotFoundException e)\n \t  {\n@@ -154,11 +154,12 @@ public StandardMBean(Object impl, Class iface)\n \t\t\t\t\t      \" was not found.\").initCause(e));\n \t  }\n       }\n-    if (!(iface.isInstance(impl)))\n+    else\n+      this.iface = iface;\n+    if (!(this.iface.isInstance(impl)))\n       throw new NotCompliantMBeanException(\"The instance, \" + impl + \n \t\t\t\t\t   \", is not an instance of \" + iface);\n     this.impl = impl;\n-    this.iface = iface;\n   }\n \n   /**\n@@ -493,7 +494,7 @@ public Object getImplementation()\n    *\n    * @return the implementation class.\n    */\n-  public Class getImplementationClass()\n+  public Class<?> getImplementationClass()\n   {\n     return impl.getClass();\n   }\n@@ -681,7 +682,7 @@ else if (name.startsWith(\"set\") &&\n    *\n    * @return the management interface.\n    */\n-  public final Class getMBeanInterface()\n+  public final Class<?> getMBeanInterface()\n   {\n     return iface;\n   }"}, {"sha": "68c2041fa131a636b5be6b7bdbf4c6d1f99de0a3", "filename": "libjava/classpath/lib/javax/management/MBeanServer.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServer.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServer.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServer.class?ref=c7e576cf1547b62332291d719985655c85cbbc6d"}, {"sha": "7f60a3e8f9bc562d836d4b807eb2584f5dd1992d", "filename": "libjava/classpath/lib/javax/management/MBeanServerConnection.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServerConnection.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServerConnection.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FMBeanServerConnection.class?ref=c7e576cf1547b62332291d719985655c85cbbc6d"}, {"sha": "28a3f54fbbff38c2a4ee95d15268b13aeca1d411", "filename": "libjava/classpath/lib/javax/management/ObjectName.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class?ref=c7e576cf1547b62332291d719985655c85cbbc6d"}, {"sha": "be542358394f1698d0efb2787d6a5eb8c703dc9c", "filename": "libjava/classpath/lib/javax/management/StandardMBean.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FStandardMBean.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FStandardMBean.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FStandardMBean.class?ref=c7e576cf1547b62332291d719985655c85cbbc6d"}, {"sha": "21473cace9ea38c9ba6536aba8928631842a7b12", "filename": "libjava/javax/management/ObjectName.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fjavax%2Fmanagement%2FObjectName.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e576cf1547b62332291d719985655c85cbbc6d/libjava%2Fjavax%2Fmanagement%2FObjectName.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fmanagement%2FObjectName.h?ref=c7e576cf1547b62332291d719985655c85cbbc6d", "patch": "@@ -30,6 +30,9 @@ class javax::management::ObjectName : public ::java::lang::Object\n   void checkComponents();\n public:\n   virtual jboolean apply(::javax::management::ObjectName *);\n+private:\n+  static jboolean domainMatches(::java::lang::String *, jint, ::java::lang::String *, jint);\n+public:\n   virtual jboolean equals(::java::lang::Object *);\n   virtual ::java::lang::String * getCanonicalKeyPropertyListString();\n   virtual ::java::lang::String * getCanonicalName();"}]}