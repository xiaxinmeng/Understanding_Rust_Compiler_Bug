{"sha": "ec63a946ccb7ab16efd0830e5580351f2adff3db", "node_id": "C_kwDOANBUbNoAKGVjNjNhOTQ2Y2NiN2FiMTZlZmQwODMwZTU1ODAzNTFmMmFkZmYzZGI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-16T00:17:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-16T00:17:23Z"}, "message": "Daily bump.", "tree": {"sha": "1fbfc5a1b2327ec0fdd8ee78950b12e5ff8f08d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fbfc5a1b2327ec0fdd8ee78950b12e5ff8f08d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec63a946ccb7ab16efd0830e5580351f2adff3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec63a946ccb7ab16efd0830e5580351f2adff3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec63a946ccb7ab16efd0830e5580351f2adff3db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec63a946ccb7ab16efd0830e5580351f2adff3db/comments", "author": null, "committer": null, "parents": [{"sha": "8db5b71e212debcc4f6a17f80191ca187c307fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db5b71e212debcc4f6a17f80191ca187c307fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db5b71e212debcc4f6a17f80191ca187c307fcb"}], "stats": {"total": 302, "additions": 301, "deletions": 1}, "files": [{"sha": "9d4d2e065a14feab14daec90423dff9d778246ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1,3 +1,94 @@\n+2022-08-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106621\n+\t* value-range.cc (irange::set): Check for POLY_INT_CST early.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-features.cc\n+\t(timode_scalar_chain::compute_convert_gain): Provide costs for\n+\tshifts and rotates.\n+\t(timode_scalar_chain::convert_insn): Handle ASHIFTRT, ROTATERT\n+\tand ROTATE just like existing ASHIFT and LSHIFTRT cases.\n+\t(timode_scalar_to_vector_candidate_p): Handle all shifts and\n+\trotates by integer constants between 0 and 127.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-features.cc\n+\t(timode_scalar_chain::compute_convert_gain): Provide gains for\n+\tcomparisons against 0/-1, including \"*testti\" patterns.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/64992\n+\tPR tree-optimization/98956\n+\t* match.pd (ne (lshift @0 @1) 0): Simplify (X << C) != 0 to X\n+\twhen X is zero_one_valued_p and the shift constant C is valid.\n+\t(eq (lshift @0 @1) 0): Likewise, simplify (X << C) == 0 to !X\n+\twhen X is zero_one_valued_p and the shift constant C is valid.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71343\n+\t* match.pd (op (lshift @0 @1) (lshift @2 @1)): Optimize the\n+\texpression (X<<C) + (Y<<C) to (X+Y)<<C for multiple operators.\n+\t(op (rshift @0 @1) (rshift @2 @1)): Likewise, simplify (X>>C)^(Y>>C)\n+\tto (X^Y)>>C for binary logical operators, AND, IOR and XOR.\n+\n+2022-08-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-range-path.cc (range_on_path_entry): Just\n+\tcall range_on_entry.\n+\n+2022-08-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/106590\n+\t* ifcvt.cc (check_for_cc_cmp_clobbers): New function.\n+\t(noce_convert_multiple_sets_1): If SEQ sets or clobbers any regs\n+\tmentioned in cc_cmp or rev_cc_cmp, don't consider seq2 for any\n+\tfurther conditional moves.\n+\n+2022-08-15  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/i386-builtin-types.def (BFLOAT16): New primitive type.\n+\t* config/i386/i386-builtins.cc : Support __bf16 type for i386 backend.\n+\t(ix86_register_bf16_builtin_type): New function.\n+\t(ix86_bf16_type_node): New.\n+\t(ix86_bf16_ptr_type_node): Ditto.\n+\t(ix86_init_builtin_types): Add ix86_register_bf16_builtin_type function call.\n+\t* config/i386/i386-modes.def (FLOAT_MODE): Add BFmode.\n+\t(ADJUST_FLOAT_FORMAT): Ditto.\n+\t* config/i386/i386.cc (classify_argument): Handle BFmode.\n+\t(construct_container): Ditto.\n+\t(function_value_32): Return __bf16 by %xmm0.\n+\t(function_value_64): Return __bf16 by SSE register.\n+\t(ix86_output_ssemov): Handle BFmode.\n+\t(ix86_legitimate_constant_p): Disable BFmode constant double.\n+\t(ix86_secondary_reload): Require gpr as intermediate register\n+\tto store __bf16 from sse register when sse4 is not available.\n+\t(ix86_scalar_mode_supported_p): Enable __bf16 under sse2.\n+\t(ix86_mangle_type): Add manlging for __bf16 type.\n+\t(ix86_invalid_conversion): New function for target hook.\n+\t(ix86_invalid_unary_op): Ditto.\n+\t(ix86_invalid_binary_op): Ditto.\n+\t(TARGET_INVALID_CONVERSION): New define for target hook.\n+\t(TARGET_INVALID_UNARY_OP): Ditto.\n+\t(TARGET_INVALID_BINARY_OP): Ditto.\n+\t* config/i386/i386.h (host_detect_local_cpu): Add BFmode.\n+\t* config/i386/i386.md (\"mode\"): Add BFmode.\n+\t(MODE_SIZE): Ditto.\n+\t(X87MODEFH): Ditto.\n+\t(HFBF): Add new define_mode_iterator.\n+\t(*pushhf_rex64): Change for BFmode.\n+\t(*push<mode>_rex64): Ditto.\n+\t(*pushhf): Ditto.\n+\t(*push<mode>): Ditto.\n+\t(MODESH): Ditto.\n+\t(hfbfconstf): Add new define_mode_attr.\n+\t(*mov<mode>_internal): Add BFmode.\n+\n 2022-08-13  Roger Sayle  <roger@nextmovesoftware.com>\n \t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "9e916febf47c6db1b85a006c71aa97484a6c7da3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1 +1 @@\n-20220815\n+20220816"}, {"sha": "d19095675175724f9500a9694f49d29019699c4b", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1,3 +1,22 @@\n+2022-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* region-model.cc (buffer_overread::emit): Fix copy&paste error in\n+\tdirection of the access in the note.\n+\n+2022-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106573\n+\t* region-model.cc (region_model::on_call_pre): Use check_call_args\n+\twhen ensuring that we call get_arg_svalue on all args.  Remove\n+\tredundant call from handling for stdio builtins.\n+\n+2022-08-15  Immad Mir  <mirimmad@outlook.com>\n+\n+\tPR analyzer/106551\n+\t* sm-fd.cc (check_for_dup): exit early if first\n+\targument is invalid for all dup functions.\n+\n 2022-08-12  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/106000"}, {"sha": "f1c96b49c8a30db4a40ddadaf8b3704ff8e9568a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1,3 +1,10 @@\n+2022-08-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106276\n+\t* typeck.cc (can_do_rvo_p): New.\n+\t(maybe_warn_pessimizing_move): Warn when moving a temporary object\n+\tin a return statement prevents copy elision.\n+\n 2022-08-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/102633"}, {"sha": "0d4c0372fddc2c2558de83374eb65e619ca67649", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1,3 +1,37 @@\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (d_defer_declaration): Declare.\n+\t* decl.cc (function_needs_inline_definition_p): Defer checking\n+\tDECL_UNINLINABLE and DECL_DECLARED_INLINE_P.\n+\t(maybe_build_decl_tree): Call d_defer_declaration instead of\n+\tbuild_decl_tree.\n+\t* modules.cc (deferred_inline_declarations): New variable.\n+\t(build_module_tree): Set deferred_inline_declarations and a handle\n+\tdeclarations pushed to it.\n+\t(d_defer_declaration): New function.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106623\n+\t* d-codegen.cc (underlying_complex_expr): New function.\n+\t(d_build_call): Handle passing native complex objects as the\n+\tlibrary-defined equivalent.\n+\t* d-tree.h (underlying_complex_expr): Declare.\n+\t* expr.cc (ExprVisitor::visit (DotVarExp *)): Call\n+\tunderlying_complex_expr instead of build_vconvert.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-compiler.cc (Compiler::onParseModule): Call create_tinfo_types\n+\twhen module name is object.\n+\t* typeinfo.cc (create_tinfo_types): Add guard for multiple\n+\tinvocations.\n+\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_delegate_cst): Give anonymous delegate field\n+\tnames same as per ABI spec.\n+\n 2022-08-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/106563"}, {"sha": "7379a890b2c34caab13d3e438fe0e6e68cdedf0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec63a946ccb7ab16efd0830e5580351f2adff3db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec63a946ccb7ab16efd0830e5580351f2adff3db", "patch": "@@ -1,3 +1,152 @@\n+2022-08-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106623\n+\t* gdc.dg/torture/pr106623.d: New test.\n+\n+2022-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: New test.\n+\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: New test.\n+\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: New test.\n+\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: New test.\n+\n+2022-08-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106621\n+\t* gcc.dg/pr106621.c\n+\n+2022-08-15  Immad Mir  <mirimmad@outlook.com>\n+\n+\tPR analyzer/106551\n+\t* gcc.dg/analyzer/fd-dup-1.c: New testcase.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse4_1-stv-9.c: New test case.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/64992\n+\t* gcc.dg/pr64992.c: New test case.\n+\n+2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71343\n+\t* gcc.dg/pr71343-1.c: New test case.\n+\n+2022-08-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/loc-prune-4.C: Adjust regexp\n+\n+2022-08-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106276\n+\t* g++.dg/cpp0x/Wpessimizing-move7.C: New test.\n+\n+2022-08-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* g++.dg/abi/anon1.C: Disable pie on ia32.\n+\t* g++.dg/abi/anon4.C: Likewise.\n+\t* g++.dg/cpp0x/initlist-const1.C: Likewise.\n+\t* g++.dg/no-stack-protector-attr-3.C: Likewise.\n+\t* g++.dg/stackprotectexplicit2.C: Likewise.\n+\t* g++.dg/pr71694.C: Likewise.\n+\t* gcc.dg/pr102892-1.c: Likewise.\n+\t* gcc.dg/sibcall-11.c: Likewise.\n+\t* gcc.dg/torture/builtin-self.c: Likewise.\n+\t* gcc.target/i386/avx2-dest-false-dep-for-glc.c: Likewise.\n+\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-3.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-7.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-broadcast-1.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-pr101846.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-3.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/pr100865-2.c: Likewise.\n+\t* gcc.target/i386/pr100865-3.c: Likewise.\n+\t* gcc.target/i386/pr100865-4a.c: Likewise.\n+\t* gcc.target/i386/pr100865-4b.c: Likewise.\n+\t* gcc.target/i386/pr100865-5a.c: Likewise.\n+\t* gcc.target/i386/pr100865-5b.c: Likewise.\n+\t* gcc.target/i386/pr100865-6a.c: Likewise.\n+\t* gcc.target/i386/pr100865-6b.c: Likewise.\n+\t* gcc.target/i386/pr100865-6c.c: Likewise.\n+\t* gcc.target/i386/pr100865-7b.c: Likewise.\n+\t* gcc.target/i386/pr101796-1.c: Likewise.\n+\t* gcc.target/i386/pr101846-2.c: Likewise.\n+\t* gcc.target/i386/pr101989-broadcast-1.c: Likewise.\n+\t* gcc.target/i386/pr102021.c: Likewise.\n+\t* gcc.target/i386/pr90773-17.c: Likewise.\n+\t* gcc.target/i386/pr54855-3.c: Likewise.\n+\t* gcc.target/i386/pr54855-7.c: Likewise.\n+\t* gcc.target/i386/pr15184-1.c: Likewise.\n+\t* gcc.target/i386/pr15184-2.c: Likewise.\n+\t* gcc.target/i386/pr27971.c: Likewise.\n+\t* gcc.target/i386/pr70263-2.c: Likewise.\n+\t* gcc.target/i386/pr78035.c: Likewise.\n+\t* gcc.target/i386/pr81736-5.c: Likewise.\n+\t* gcc.target/i386/pr81736-7.c: Likewise.\n+\t* gcc.target/i386/pr85620-6.c: Likewise.\n+\t* gcc.target/i386/pr85667-6.c: Likewise.\n+\t* gcc.target/i386/pr93492-5.c: Likewise.\n+\t* gcc.target/i386/pr96539.c: Likewise.\n+\tPR target/81708 (%gs:my_guard)\n+\t* gcc.target/i386/stack-prot-sym.c: Likewise.\n+\t* g++.dg/init/static-cdtor1.C: Add alternate patterns for PIC.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2si-1a.c: Extend patterns\n+\tfor PIC/PIE register allocation.\n+\t* gcc.target/i386/pr100704-3.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vcvtsh2usi-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2si-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vcvttsh2usi-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vmovsh-1a.c: Likewise.\n+\t* gcc.target/i386/interrupt-11.c: Likewise, allowing for\n+\tpreservation of the PIC register.\n+\t* gcc.target/i386/interrupt-12.c: Likewise.\n+\t* gcc.target/i386/interrupt-13.c: Likewise.\n+\t* gcc.target/i386/interrupt-15.c: Likewise.\n+\t* gcc.target/i386/interrupt-16.c: Likewise.\n+\t* gcc.target/i386/interrupt-17.c: Likewise.\n+\t* gcc.target/i386/interrupt-8.c: Likewise.\n+\t* gcc.target/i386/cet-sjlj-6a.c: Combine patterns from\n+\tprevious change.\n+\t* gcc.target/i386/cet-sjlj-6b.c: Likewise.\n+\t* gcc.target/i386/pad-10.c: Accept insns in get_pc_thunk.\n+\t* gcc.target/i386/pr70321.c: Likewise.\n+\t* gcc.target/i386/pr81563.c: Likewise.\n+\t* gcc.target/i386/pr84278.c: Likewise.\n+\t* gcc.target/i386/pr90773-2.c: Likewise, plus extra loads from\n+\tthe GOT.\n+\t* gcc.target/i386/pr90773-3.c: Likewise.\n+\t* gcc.target/i386/pr94913-2.c: Accept additional PIC insns.\n+\t* gcc.target/i386/stack-check-17.c: Likewise.\n+\t* gcc.target/i386/stack-check-12.c: Do not require dummy stack\n+\tprobing obviated with PIC.\n+\t* gcc.target/i386/pr95126-m32-1.c: Expect missed optimization\n+\twith PIC.\n+\t* gcc.target/i386/pr95126-m32-2.c: Likewise.\n+\t* gcc.target/i386/pr95852-2.c: Accept different optimization\n+\twith PIC.\n+\t* gcc.target/i386/pr95852-4.c: Likewise.\n+\n+2022-08-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/106590\n+\t* gcc.dg/torture/pr106590.c: New test.\n+\n+2022-08-15  konglin1  <lingling.kong@intel.com>\n+\n+\t* g++.target/i386/bfloat_cpp_typecheck.C: New test.\n+\t* gcc.target/i386/bfloat16-1.c: Ditto.\n+\t* gcc.target/i386/sse2-bfloat16-1.c: Ditto.\n+\t* gcc.target/i386/sse2-bfloat16-2.c: Ditto.\n+\t* gcc.target/i386/sse2-bfloat16-scalar-typecheck.c: Ditto.\n+\n 2022-08-13  Tim Lange  <mail@tim-lange.me>\n \n \t* gcc.dg/analyzer/torture/pr93451.c:"}]}