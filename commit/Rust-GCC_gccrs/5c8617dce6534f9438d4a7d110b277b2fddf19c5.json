{"sha": "5c8617dce6534f9438d4a7d110b277b2fddf19c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4NjE3ZGNlNjUzNGY5NDM4ZDRhN2QxMTBiMjc3YjJmZGRmMTljNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-28T15:16:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-28T15:16:26Z"}, "message": "re PR target/78904 (zero-extracts are not effective)\n\n\tPR target/78904\n\t* config/i386/constraints.md (Bn): New special memory constraint.\n\t* config/i386/predicates.md (norex_memory_operand): New predicate.\n\t* config/i386/i386.md (*extzvqi_mem_rex64): New insn pattern and\n\tcorresponding peephole2 pattern.\n\ntestsuite/ChangeLog:\n\n\tPR target/78904\n\t* gcc.target/i386/pr78904-4.c: New test.\n\t* gcc.target/i386/pr78904-5.c: Ditto.\n\nFrom-SVN: r243955", "tree": {"sha": "8dc69a56a38e95c09a4c283eaac811ff475b6736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc69a56a38e95c09a4c283eaac811ff475b6736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8617dce6534f9438d4a7d110b277b2fddf19c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8617dce6534f9438d4a7d110b277b2fddf19c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8617dce6534f9438d4a7d110b277b2fddf19c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8617dce6534f9438d4a7d110b277b2fddf19c5/comments", "author": null, "committer": null, "parents": [{"sha": "c05169aab6c52fb250ad4d113d2f3d965a9c6416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05169aab6c52fb250ad4d113d2f3d965a9c6416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05169aab6c52fb250ad4d113d2f3d965a9c6416"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "580d91877ae6769bb6d37b725858f47d7eb1de16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -1,3 +1,11 @@\n+2016-12-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* config/i386/constraints.md (Bn): New special memory constraint.\n+\t* config/i386/predicates.md (norex_memory_operand): New predicate.\n+\t* config/i386/i386.md (*extzvqi_mem_rex64): New insn pattern and\n+\tcorresponding peephole2 pattern.\n+\n 2016-12-27  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/cppdiropts.texi, doc/cppwarnopts.texi:  New files, split from...\n@@ -6,7 +14,7 @@\n \t* doc/invoke.texi (Option Summary): Add missing preprocesor-related\n \toptions.  Adjust sorting and formatting.\n \t(Warning Options): Include cppwarnopts.texi.\n-\t(Preprocessor Options): Add pointers and list the specific \n+\t(Preprocessor Options): Add pointers and list the specific\n \tpreprocessor options from cppopts.texi first instead of last.\n \t(Directory Options): Move/merge documentation of -I, -iquote, and\n \t-I- to cppdiropts.texi.  Include that file here."}, {"sha": "19edd25c69931d1bd7141ae6011ad6ebc576862e", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -169,6 +169,7 @@\n ;;  g  GOT memory operand.\n ;;  m  Vector memory operand\n ;;  c  Constant memory operand\n+;;  n  Memory operand without REX prefix\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32\n ;;  z  Constant call address operand.\n@@ -191,6 +192,10 @@\n   (and (match_operand 0 \"memory_operand\")\n        (match_test \"constant_address_p (XEXP (op, 0))\")))\n \n+(define_special_memory_constraint \"Bn\"\n+  \"@internal Memory operand without REX prefix.\"\n+  (match_operand 0 \"norex_memory_operand\"))\n+\n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (ior (and (not (match_test \"TARGET_X32\"))"}, {"sha": "cf9dc03ba8b2640503e7ee28a272c53e96b202d6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -2835,9 +2835,20 @@\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*extzvqi_mem_rex64\"\n+  [(set (match_operand:QI 0 \"norex_memory_operand\" \"=Bn\")\n+\t(subreg:QI\n+\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 8)) 0))]\n+  \"TARGET_64BIT && reload_completed\"\n+  \"mov{b}\\t{%h1, %0|%0, %h1}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*extzvqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n-        (subreg:QI\n+\t(subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n \t\t\t   (const_int 8)\n \t\t\t   (const_int 8)) 0))]\n@@ -2863,6 +2874,21 @@\n \t(const_string \"SI\")\n \t(const_string \"QI\")))])\n \n+(define_peephole2\n+  [(set (match_operand:QI 0 \"register_operand\")\n+\t(subreg:QI\n+\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\")\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 8)) 0))\n+   (set (match_operand:QI 2 \"norex_memory_operand\") (match_dup 0))]\n+  \"TARGET_64BIT\n+   && peep2_reg_dead_p (2, operands[0])\"\n+  [(set (match_dup 2)\n+\t(subreg:QI\n+\t  (zero_extract:SI (match_dup 1)\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 8)) 0))])\n+\n (define_expand \"insv<mode>\"\n   [(set (zero_extract:SWI248 (match_operand:SWI248 0 \"register_operand\")\n \t\t\t     (match_operand:SI 1 \"const_int_operand\")"}, {"sha": "a1ea34f4f284d318cbbe4b08fbf2ab67e9195bce", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -1037,6 +1037,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const0_operand\")))\n \n+(define_predicate \"norex_memory_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (not (match_test \"x86_extended_reg_mentioned_p (op)\"))))\n+\n ;; Return true for RTX codes that force SImode address.\n (define_predicate \"SImode_address_operand\"\n   (match_code \"subreg,zero_extend,and\"))"}, {"sha": "09b2b5bda7bbad18f50a1f3a4449643a6b0d3240", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -1,3 +1,9 @@\n+2016-12-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78904\n+\t* gcc.target/i386/pr78904-4.c: New test.\n+\t* gcc.target/i386/pr78904-5.c: Ditto.\n+\n 2016-12-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p9-vinsert4b-2.c: Update test to test for 13"}, {"sha": "d110c2eec8631f3cf9eefe09135f303c96bc9e76", "filename": "gcc/testsuite/gcc.target/i386/pr78904-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-4.c?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/78904 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]movb\\[\\t \\]*%.h,\" } } */"}, {"sha": "5286e67e9152378564061829b914b23e3dadca95", "filename": "gcc/testsuite/gcc.target/i386/pr78904-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8617dce6534f9438d4a7d110b277b2fddf19c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78904-5.c?ref=5c8617dce6534f9438d4a7d110b277b2fddf19c5", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/78904 */\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct S1\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+extern unsigned char t[256];\n+\n+void foo (struct S1 a, size_t i)\n+{\n+  t[i] = a.val;\n+}\n+\n+void bar (struct S1 a, size_t i)\n+{\n+  register size_t _i __asm (\"r10\") = i;\n+\n+  asm volatile (\"\" : \"+r\" (_i));\n+  t[_i] = a.val;\n+}"}]}