{"sha": "335043a81bd0ff6a213a1e3f9dac7310b1564e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1MDQzYTgxYmQwZmY2YTIxM2ExZTNmOWRhYzczMTBiMTU2NGUwMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-10-06T18:00:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-06T18:00:04Z"}, "message": "* lib/g77.exp, lib/f-torture.exp: New files.\n\nFrom-SVN: r15839", "tree": {"sha": "971163631d76c0488cb5d98ea61760dff98cbcb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/971163631d76c0488cb5d98ea61760dff98cbcb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/335043a81bd0ff6a213a1e3f9dac7310b1564e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335043a81bd0ff6a213a1e3f9dac7310b1564e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335043a81bd0ff6a213a1e3f9dac7310b1564e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335043a81bd0ff6a213a1e3f9dac7310b1564e00/comments", "author": null, "committer": null, "parents": [{"sha": "27bb83393c0b0df8aab5c4f86599871692303d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bb83393c0b0df8aab5c4f86599871692303d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bb83393c0b0df8aab5c4f86599871692303d75"}], "stats": {"total": 589, "additions": 589, "deletions": 0}, "files": [{"sha": "e2003c03429dd3a7498c5e570808037f2fbf2233", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=335043a81bd0ff6a213a1e3f9dac7310b1564e00", "patch": "@@ -1,3 +1,7 @@\n+Mon Oct  6 12:03:10 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* lib/g77.exp, lib/f-torture.exp: New files.\n+\n Mon Sep 15 00:36:53 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* lib/g++.exp (g++_init): Look for xgcc in $basedir too."}, {"sha": "3493b03840ad14ec2fc5ae391f31bd7c533d0a26", "filename": "gcc/testsuite/lib/f-torture.exp", "status": "added", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ff-torture.exp?ref=335043a81bd0ff6a213a1e3f9dac7310b1564e00", "patch": "@@ -0,0 +1,320 @@\n+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-dejagnu.prep.ai.mit.edu\n+\n+# This file was written by Rob Savoye. (rob@cygnus.com)\n+\n+# The default option list can be overridden by\n+# TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n+\n+if ![info exists TORTURE_OPTIONS] {\n+    # FIXME: We should test -g at least once.\n+    set TORTURE_OPTIONS [list \\\n+\t{ -O0 } { -O1 } { -O2 } \\\n+\t{ -O2 -fomit-frame-pointer -finline-functions } \\\n+\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-loops } \\\n+\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-all-loops }]\n+}\n+\n+\n+# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n+# one for testcases without loops.\n+\n+set torture_with_loops $TORTURE_OPTIONS\n+set torture_without_loops \"\"\n+foreach option $TORTURE_OPTIONS {\n+    if ![string match \"*loop*\" $option] {\n+\tlappend torture_without_loops $option\n+    }\n+}\n+\n+#\n+# f-torture-compile -- runs the Tege C-torture test\n+#\n+# SRC is the full pathname of the testcase.\n+# OPTION is the specific compiler flag we're testing (eg: -O2).\n+#\n+proc f-torture-compile { src option } {\n+    global output\n+    global srcdir tmpdir\n+    global host_triplet\n+\n+    set output \"$tmpdir/[file tail [file rootname $src]].o\"\n+\n+    regsub \"^$srcdir/?\" $src \"\" testcase\n+    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] {\n+\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n+    }\n+\n+    verbose \"Testing $testcase, $option\" 1\n+\n+    # Run the compiler and analyze the results.\n+    set options \"\"\n+    lappend options \"additional_flags=-w $option\"\n+\n+    set comp_output [g77_target_compile \"$src\" \"$output\" object $options];\n+    \n+    # Set a few common compiler messages.\n+    set fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+ \n+    if [string match \"$fatal_signal 6\" $comp_output] then {\n+\tg77_fail $testcase \"Got Signal 6, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    if [string match \"$fatal_signal 11\" $comp_output] then {\n+\tg77_fail $testcase \"Got Signal 11, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    # We shouldn't get these because of -w, but just in case.\n+    if [string match \"*cc:*warning:*\" $comp_output] then {\n+\twarning \"$testcase: (with warnings) $option\"\n+\tsend_log \"$comp_output\\n\"\n+\tunresolved \"$testcase, $option\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    set comp_output [prune_warnings $comp_output]\n+\n+    set unsupported_message [g77_check_unsupported_p $comp_output]\n+    if { $unsupported_message != \"\" } {\n+\tunsupported \"$testcase: $unsupported_message\"\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    # remove any leftover LF/CR to make sure any output is legit\n+    regsub -all -- \"\\[\\r\\n\\]*\" $comp_output \"\" comp_output\n+    # If any message remains, we fail.\n+    if ![string match \"\" $comp_output] then {\n+\tg77_fail $testcase $option\n+\tremote_file build delete $output\n+\treturn\n+    }\n+\n+    g77_pass $testcase $option\n+    remote_file build delete $output\n+}\n+\n+#\n+# f-torture-execute -- utility to compile and execute a testcase\n+#\n+# SRC is the full pathname of the testcase.\n+#\n+# If the testcase has an associated .cexp file, we source that to run the\n+# test instead.  We use .cexp instead of .exp so that the testcase is still\n+# controlled by the main .exp driver (this is useful when one wants to only\n+# run the compile.exp tests for example - one need only pass compile.exp to\n+# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+#\n+proc f-torture-execute { src } {\n+    global tmpdir tool srcdir output \n+\n+    # Check for alternate driver.\n+    if [file exists [file rootname $src].cexp] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+\tset done_p 0\n+\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tif { $done_p } {\n+\t    return\n+\t}\n+    }\n+   \n+    # Look for a loop within the source code - if we don't find one,\n+    # don't pass -funroll[-all]-loops.\n+    global torture_with_loops torture_without_loops\n+    if [expr [search_for $src \"do*(\"]+[search_for $src \"while*(\"]] then {\n+\tset option_list $torture_with_loops\n+    } else {\n+\tset option_list $torture_without_loops\n+    }\n+\n+    set executable $tmpdir/[file tail [file rootname $src].x]\n+\n+    regsub \"^$srcdir/?\" $src \"\" testcase\n+    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] {\n+\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n+    }\n+\n+    foreach option $option_list {\n+\t# torture_{compile,execute}_xfail are set by the .cexp script\n+\t# (if present)\n+\tif [info exists torture_compile_xfail] {\n+\t    setup_xfail $torture_compile_xfail\n+\t}\n+\tremote_file build delete $executable\n+\tverbose \"Testing $testcase, $option\" 1\n+\n+\tset options \"\"\n+\tlappend options \"additional_flags=-w $option\"\n+\tset comp_output [g77_target_compile \"$src\" \"$executable\" executable $options];\n+\n+\t# Set a few common compiler messages.\n+\tset fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n+\t\n+\tif [string match \"$fatal_signal 6\" $comp_output] then {\n+\t    g77_fail $testcase \"Got Signal 6, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\tif [string match \"$fatal_signal 11\" $comp_output] then {\n+\t    g77_fail $testcase \"Got Signal 11, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\t# We shouldn't get these because of -w, but just in case.\n+\tif [string match \"*cc:*warning:*\" $comp_output] then {\n+\t    warning \"$testcase: (with warnings) $option\"\n+\t    send_log \"$comp_output\\n\"\n+\t    unresolved \"$testcase, $option\"\n+\t    remote_file build delete $executable\n+\t    continue\n+\t}\n+\t\n+\tset comp_output [prune_warnings $comp_output]\n+\t\n+\tset unsupported_message [g77_check_unsupported_p $comp_output]\n+\n+\tif { $unsupported_message != \"\" } {\n+\t    unsupported \"$testcase: $unsupported_message\"\n+\t    continue\n+\t} elseif ![file exists $executable] {\n+\t    if ![is3way] {\n+\t\tfail \"$testcase compilation, $option\"\n+\t\tuntested \"$testcase execution, $option\"\n+\t\tcontinue\n+\t    } else {\n+\t\t# FIXME: since we can't test for the existance of a remote\n+\t\t# file without short of doing an remote file list, we assume\n+\t\t# that since we got no output, it must have compiled.\n+\t\tpass \"$testcase compilation, $option\"\t\t\n+\t    }\n+\t} else {\n+\t    pass \"$testcase compilation, $option\"\n+\t}\n+\n+\t# See if this source file uses \"long long\" types, if it does, and\n+\t# no_long_long is set, skip execution of the test.\n+\tif [target_info exists no_long_long] then {\n+\t    if [expr [search_for $src \"long long\"]] then {\n+\t\tuntested \"$testcase execution, $option\"\n+\t\tcontinue\n+\t    }\n+\t}\n+\n+\tif [info exists torture_execute_xfail] {\n+\t    setup_xfail $torture_execute_xfail\n+\t}\n+\t\n+\tset result [g77_load \"$executable\" \"\" \"\"]\n+\tset status [lindex $result 0];\n+\tset output [lindex $result 1];\n+        if { $status == \"pass\" } {\n+\t    remote_file build delete $executable\n+        }\n+\t$status \"$testcase execution, $option\"\n+    }\n+}\n+\n+#\n+# search_for -- looks for a string match in a file\n+#\n+proc search_for { file pattern } {\n+    set fd [open $file r]\n+    while { [gets $fd cur_line]>=0 } {\n+\tset lower [string tolower $cur_line]\n+\tif [string match \"*$pattern*\" $lower] then {\n+\t    close $fd\n+\t    return 1\n+\t}\n+    }\n+    close $fd\n+    return 0\n+}\n+\n+#\n+# f-torture -- the f-torture testcase source file processor\n+#\n+# This runs compilation only tests (no execute tests).\n+# SRC is the full pathname of the testcase, or just a file name in which case\n+# we prepend $srcdir/$subdir.\n+#\n+# If the testcase has an associated .cexp file, we source that to run the\n+# test instead.  We use .cexp instead of .exp so that the testcase is still\n+# controlled by the main .exp driver (this is useful when one wants to only\n+# run the compile.exp tests for example - one need only pass compile.exp to\n+# dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n+#\n+proc f-torture { args } {\n+    global srcdir subdir\n+\n+    set src [lindex $args 0];\n+    if { [llength $args] > 1 } {\n+\tset options [lindex $args 1];\n+    } else {\n+\tset options \"\"\n+    }\n+\n+    # Prepend $srdir/$subdir if missing.\n+    if ![string match \"*/*\" $src] {\n+\tset src \"$srcdir/$subdir/$src\"\n+    }\n+\n+    # Check for alternate driver.\n+    if [file exists [file rootname $src].cexp] {\n+\tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n+\tset done_p 0\n+\tcatch \"set done_p \\[source [file rootname $src].cexp\\]\"\n+\tif { $done_p } {\n+\t    return\n+\t}\n+    }\n+   \n+    # Look for a loop within the source code - if we don't find one,\n+    # don't pass -funroll[-all]-loops.\n+    global torture_with_loops torture_without_loops\n+    if [expr [search_for $src \"do*(\"]+[search_for $src \"while*(\"]] then {\n+\tset option_list $torture_with_loops\n+    } else {\n+\tset option_list $torture_without_loops\n+    }\n+\n+    # loop through all the options\n+    foreach option $option_list {\n+\t# torture_compile_xfail is set by the .cexp script (if present)\n+\tif [info exists torture_compile_xfail] {\n+\t    setup_xfail $torture_compile_xfail\n+\t}\n+\n+\tf-torture-compile $src \"$option $options\"\n+    }\n+}"}, {"sha": "ddb3cf216aee2dfc55ea19dda4e0f52d1931e5b6", "filename": "gcc/testsuite/lib/g77.exp", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2Flib%2Fg77.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335043a81bd0ff6a213a1e3f9dac7310b1564e00/gcc%2Ftestsuite%2Flib%2Fg77.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg77.exp?ref=335043a81bd0ff6a213a1e3f9dac7310b1564e00", "patch": "@@ -0,0 +1,265 @@\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-g77@prep.ai.mit.edu\n+\n+# This file was written by Rob Savoye (rob@cygnus.com)\n+# Currently maintained by Doug Evans (dje@cygnus.com)\n+\n+# This file is loaded by the tool init file (eg: unix.exp).  It provides\n+# default definitions for g77_start, etc. and other supporting cast members.\n+\n+# These globals are used by g77_start if no compiler arguments are provided.\n+# They are also used by the various testsuites to define the environment:\n+# where to find stdio.h, libc.a, etc.\n+\n+#\n+# G77_UNDER_TEST is the compiler under test.\n+#\n+\n+#\n+# default_g77_version -- extract and print the version number of the compiler\n+#\n+\n+proc default_g77_version { } {\n+    global G77_UNDER_TEST\n+\n+    g77_init;\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $G77_UNDER_TEST 0]\n+\n+    if ![is_remote host] {\n+\tset compiler_name [which $compiler];\n+    } else {\n+\tset compiler_name $compiler;\n+    }\n+\n+    # verify that the compiler exists\n+    if { $compiler_name != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0];\n+\tset output [lindex $tmp 1];\n+\tregexp \"version.*$\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    clone_output \"$compiler_name $version\\n\"\n+\t} else {\n+\t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+#\n+# Call g77_version. We do it this way so we can override it if needed.\n+#\n+proc g77_version { } {\n+    default_g77_version;\n+}\n+\n+#\n+# g77_init -- called at the start of each .exp script.\n+#\n+# There currently isn't much to do, but always using it allows us to\n+# make some enhancements without having to go back and rewrite the scripts.\n+#\n+\n+set g77_initialized 0\n+\n+proc g77_init { args } {\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global g77_initialized\n+    global G77_UNDER_TEST\n+    global TOOL_EXECUTABLE\n+\n+    if { $g77_initialized == 1 } { return; }\n+\n+    if ![info exists G77_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set G77_UNDER_TEST $TOOL_EXECUTABLE;\n+\t} else {\n+\t    set G77_UNDER_TEST [find_g77]\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] then {\n+\tset tmpdir /tmp\n+    }\n+    if { [target_info needs_status_wrapper]!=\"\" && ![info exists gluefile] } {\n+\tset gluefile ${tmpdir}/testglue.o;\n+\tset result [build_wrapper $gluefile];\n+\tif { $result != \"\" } {\n+\t    set gluefile [lindex $result 0];\n+\t    set wrap_flags [lindex $result 1];\n+\t} else {\n+\t    unset gluefile\n+\t}\n+    }\n+}\n+\n+proc g77_target_compile { source dest type options } {\n+    global tmpdir;\n+    global gluefile wrap_flags;\n+    global G77_UNDER_TEST\n+    global TOOL_OPTIONS\n+\n+    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=$wrap_flags\"\n+    }\n+\n+    if [target_info exists g77,stack_size] {\n+\tlappend options \"additional_flags=-DSTACK_SIZE=[target_info g77,stack_size]\"\n+    }\n+    if [target_info exists g77,no_trampolines] {\n+\tlappend options \"additional_flags=-DNO_TRAMPOLINES\"\n+    }\n+    if [target_info exists g77,no_label_values] {\n+\tlappend options \"additional_flags=-DNO_LABEL_VALUES\"\n+    }\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend options \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+    if [target_info exists g77,no_varargs] {\n+\tlappend options \"additional_flags=-DNO_VARARGS\"\n+    }\n+    lappend options \"compiler=$G77_UNDER_TEST\"\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+#\n+# g77_pass -- utility to record a testcase passed\n+#\n+\n+proc g77_pass { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tpass \"$testcase\"\n+    } else {\n+\tpass \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# g77_fail -- utility to record a testcase failed\n+#\n+\n+proc g77_fail { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tfail \"$testcase\"\n+    } else {\n+\tfail \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# g77_finish -- called at the end of every .exp script that calls g77_init\n+#\n+# The purpose of this proc is to hide all quirks of the testing environment\n+# from the testsuites.  It also exists to undo anything that g77_init did\n+# (that needs undoing).\n+#\n+\n+proc g77_finish { } {\n+    # The testing harness apparently requires this.\n+    global errorInfo;\n+\n+    if [info exists errorInfo] then {\n+\tunset errorInfo\n+    }\n+\n+    # Might as well reset these (keeps our caller from wondering whether\n+    # s/he has to or not).\n+    global prms_id bug_id\n+    set prms_id 0\n+    set bug_id 0\n+}\n+\n+proc g77_exit { } {\n+    global gluefile;\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile;\n+\tunset gluefile;\n+    }\n+}\n+    \n+# If this is an older version of dejagnu (without runtest_file_p),\n+# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n+# This can be deleted after next dejagnu release.\n+\n+if { [info procs runtest_file_p] == \"\" } then {\n+    proc runtest_file_p { runtests testcase } {\n+\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n+\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n+\t\treturn 1\n+\t    } else {\n+\t\treturn 0\n+\t    }\n+\t}\n+\treturn 1\n+    }\n+}\n+\n+# Provide a definition of this if missing (delete after next dejagnu release).\n+\n+if { [info procs prune_warnings] == \"\" } then {\n+    proc prune_warnings { text } {\n+\treturn $text\n+    }\n+}\n+\n+# Utility used by mike-gcc.exp and c-torture.exp.\n+# Check the compiler(/assembler/linker) output for text indicating that\n+# the testcase should be marked as \"unsupported\".\n+#\n+# When dealing with a large number of tests, it's difficult to weed out the\n+# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n+# of memory).  There are various ways to deal with this.  Here's one.\n+# Fortunately, all of the cases where this is likely to happen will be using\n+# gld so we can tell what the error text will look like.\n+\n+proc ${tool}_check_unsupported_p { output } {\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n+\treturn \"memory full\"\n+    }\n+    return \"\"\n+}\n+\n+# Prune messages from g77 that aren't useful.\n+\n+proc prune_g77_output { text } {\n+    #send_user \"Before:$text\\n\"\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n+\n+    # It would be nice to avoid passing anything to g77 that would cause it to\n+    # issue these messages (since ignoring them seems like a hack on our part),\n+    # but that's too difficult in the general case.  For example, sometimes\n+    # you need to use -B to point g77 at crt0.o, but there are some targets\n+    # that don't have crt0.o.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n+\n+    #send_user \"After:$text\\n\"\n+\n+    return $text\n+}\n+"}]}