{"sha": "e2b9853b291bb738919adb4e31990135a6e677e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiOTg1M2IyOTFiYjczODkxOWFkYjRlMzE5OTAxMzVhNmU2NzdlMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-20T05:51:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-20T05:51:13Z"}, "message": "* line-map.c, line-map.h: Convert to ISO prototypes.\n\nFrom-SVN: r68242", "tree": {"sha": "7c1fbdd9405566a9eed73f76ae9f9f06352f11dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c1fbdd9405566a9eed73f76ae9f9f06352f11dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2b9853b291bb738919adb4e31990135a6e677e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b9853b291bb738919adb4e31990135a6e677e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b9853b291bb738919adb4e31990135a6e677e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b9853b291bb738919adb4e31990135a6e677e1/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f139561cce27d9b662b0a3b22d3dd6aa56ae1854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f139561cce27d9b662b0a3b22d3dd6aa56ae1854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f139561cce27d9b662b0a3b22d3dd6aa56ae1854"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "1fdd6c2c09c44efdbd7907a11758a545a9e8a5fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2b9853b291bb738919adb4e31990135a6e677e1", "patch": "@@ -1,3 +1,7 @@\n+2003-06-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* line-map.c, line-map.h: Convert to ISO prototypes.\n+\n 2003-06-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* gcse.c (store_killed_in_insn): Fix."}, {"sha": "05d34ea744e0af272384bf4a35a17295d186ffab", "filename": "gcc/line-map.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=e2b9853b291bb738919adb4e31990135a6e677e1", "patch": "@@ -27,14 +27,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"line-map.h\"\n #include \"intl.h\"\n \n-static void trace_include\n-  PARAMS ((const struct line_maps *, const struct line_map *));\n+static void trace_include (const struct line_maps *, const struct line_map *);\n \n /* Initialize a line map set.  */\n \n void\n-init_line_maps (set)\n-     struct line_maps *set;\n+init_line_maps (struct line_maps *set)\n {\n   set->maps = 0;\n   set->allocated = 0;\n@@ -47,8 +45,7 @@ init_line_maps (set)\n /* Free a line map set.  */\n \n void\n-free_line_maps (set)\n-     struct line_maps *set;\n+free_line_maps (struct line_maps *set)\n {\n   if (set->maps)\n     {\n@@ -73,13 +70,9 @@ free_line_maps (set)\n    function.  */\n \n const struct line_map *\n-add_line_map (set, reason, sysp, from_line, to_file, to_line)\n-     struct line_maps *set;\n-     enum lc_reason reason;\n-     unsigned int sysp;\n-     unsigned int from_line;\n-     const char *to_file;\n-     unsigned int to_line;\n+add_line_map (struct line_maps *set, enum lc_reason reason,\n+\t      unsigned int sysp, unsigned int from_line,\n+\t      const char *to_file, unsigned int to_line)\n {\n   struct line_map *map;\n \n@@ -161,9 +154,7 @@ add_line_map (set, reason, sysp, from_line, to_file, to_line)\n    the list is sorted and we can use a binary search.  */\n \n const struct line_map *\n-lookup_line (set, line)\n-     struct line_maps *set;\n-     unsigned int line;\n+lookup_line (struct line_maps *set, unsigned int line)\n {\n   unsigned int md, mn = 0, mx = set->used;\n \n@@ -187,9 +178,7 @@ lookup_line (set, line)\n    the most recently listed stack is the same as the current one.  */\n \n void\n-print_containing_files (set, map)\n-     struct line_maps *set;\n-     const struct line_map *map;\n+print_containing_files (struct line_maps *set, const struct line_map *map)\n {\n   if (MAIN_FILE_P (map) || set->last_listed == map->included_from)\n     return;\n@@ -225,9 +214,7 @@ print_containing_files (set, map)\n /* Print an include trace, for e.g. the -H option of the preprocessor.  */\n \n static void\n-trace_include (set, map)\n-     const struct line_maps *set;\n-     const struct line_map *map;\n+trace_include (const struct line_maps *set, const struct line_map *map)\n {\n   unsigned int i = set->depth;\n "}, {"sha": "8309f080242bf969470058955dfa375dcc418d17", "filename": "gcc/line-map.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b9853b291bb738919adb4e31990135a6e677e1/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=e2b9853b291bb738919adb4e31990135a6e677e1", "patch": "@@ -68,12 +68,10 @@ struct line_maps\n };\n \n /* Initialize a line map set.  */\n-extern void init_line_maps\n-  PARAMS ((struct line_maps *));\n+extern void init_line_maps (struct line_maps *);\n \n /* Free a line map set.  */\n-extern void free_line_maps\n-  PARAMS ((struct line_maps *));\n+extern void free_line_maps (struct line_maps *);\n \n /* Add a mapping of logical source line to physical source file and\n    line number.  The text pointed to by TO_FILE must have a lifetime\n@@ -85,19 +83,18 @@ extern void free_line_maps\n    function.  A call to this function can relocate the previous set of\n    maps, so any stored line_map pointers should not be used.  */\n extern const struct line_map *add_line_map\n-  PARAMS ((struct line_maps *, enum lc_reason, unsigned int sysp,\n-\t   unsigned int from_line, const char *to_file, unsigned int to_line));\n+  (struct line_maps *, enum lc_reason, unsigned int sysp,\n+   unsigned int from_line, const char *to_file, unsigned int to_line);\n \n /* Given a logical line, returns the map from which the corresponding\n    (source file, line) pair can be deduced.  */\n-extern const struct line_map *lookup_line\n-  PARAMS ((struct line_maps *, unsigned int));\n+extern const struct line_map *lookup_line (struct line_maps *, unsigned int);\n \n /* Print the file names and line numbers of the #include commands\n    which led to the map MAP, if any, to stderr.  Nothing is output if\n    the most recently listed stack is the same as the current one.  */\n-extern void print_containing_files\n-  PARAMS ((struct line_maps *, const struct line_map *));\n+extern void print_containing_files (struct line_maps *,\n+\t\t\t\t    const struct line_map *);\n \n /* Converts a map and logical line to source line.  */\n #define SOURCE_LINE(MAP, LINE) ((LINE) + (MAP)->to_line - (MAP)->from_line)"}]}