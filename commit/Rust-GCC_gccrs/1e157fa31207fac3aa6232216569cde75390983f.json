{"sha": "1e157fa31207fac3aa6232216569cde75390983f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxNTdmYTMxMjA3ZmFjM2FhNjIzMjIxNjU2OWNkZTc1MzkwOTgzZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-04-07T19:30:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-04-07T19:30:22Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r270191", "tree": {"sha": "f6d1fed9ef2704ef8c9404ef3af922bbaea19535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d1fed9ef2704ef8c9404ef3af922bbaea19535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e157fa31207fac3aa6232216569cde75390983f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e157fa31207fac3aa6232216569cde75390983f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e157fa31207fac3aa6232216569cde75390983f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e157fa31207fac3aa6232216569cde75390983f/comments", "author": null, "committer": null, "parents": [{"sha": "45acde2fe01cea0e2e11dda9d336133c5b526f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45acde2fe01cea0e2e11dda9d336133c5b526f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45acde2fe01cea0e2e11dda9d336133c5b526f6d"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "2b478cfb530af4aac473f939e305d753b3d26f64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 45, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e157fa31207fac3aa6232216569cde75390983f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e157fa31207fac3aa6232216569cde75390983f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e157fa31207fac3aa6232216569cde75390983f", "patch": "@@ -25,9 +25,11 @@\n \t* collect2.c (main): Likewise.\n \t(scan_prog_file): Likewise.\n \t(scan_libraries): Likewise.\n-\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parsing_subset_version): Likewise.\n \t(riscv_subset_list::parse_std_ext): Likewise.\n-\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n+\tLikewise.\n \t* config/arm/arm.c (arm_option_override): Likewise.\n \t* config/cris/cris.c (cris_print_operand): Likewise.\n \t* config/darwin-c.c (darwin_pragma_options): Likewise.\n@@ -99,9 +101,9 @@\n \tPR tree-optimization/89730\n \t* ipa-inline.c (can_inline_edge_p): Delete the checking for\n \t-flive-patching=inline-only-static.\n-\t(can_inline_edge_by_limits_p): Add the checking for \n+\t(can_inline_edge_by_limits_p): Add the checking for\n \t-flive-patching=inline-only-static and grant always_inline\n-\teven when -flive-patching=inline-only-static is specified. \n+\teven when -flive-patching=inline-only-static is specified.\n \n 2019-04-03  Jeff Law  <law@redhat.com>\n \n@@ -278,8 +280,7 @@\n \n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n-\t* config/s390/s390.md (\"xde\"): Extend mode attribute to vector\n-\ttypes.\n+\t* config/s390/s390.md (\"xde\"): Extend mode attribute to vector types.\n \t* config/s390/vector.md (VX_VEC_CONV_BFP, VX_VEC_CONV_INT): New\n \tmode iterators.\n \t(\"floatv2div2df2\", \"floatunsv2div2df2\", \"fix_truncv2dfv2di2\")\n@@ -1388,7 +1389,8 @@\n \t* builtins.c (expand_builtin_thread_pointer): Wrap an option name\n \tin a string format message and fix GNU coding style.\n \t(expand_builtin_set_thread_pointer): Likewise.\n-\t* common/config/aarch64/aarch64-common.c (aarch64_rewrite_selected_cpu): Likewise.\n+\t* common/config/aarch64/aarch64-common.c\n+\t(aarch64_rewrite_selected_cpu): Likewise.\n \t* common/config/alpha/alpha-common.c (alpha_handle_option): Likewise.\n \t* common/config/arc/arc-common.c (arc_handle_option): Likewise.\n \t* common/config/arm/arm-common.c (arm_parse_fpu_option): Likewise.\n@@ -1398,8 +1400,10 @@\n \t* common/config/m68k/m68k-common.c (m68k_handle_option): Likewise.\n \t* common/config/msp430/msp430-common.c (msp430_handle_option): Likewise.\n \t* common/config/nds32/nds32-common.c (nds32_handle_option): Likewise.\n-\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_handle_option): Likewise.\n-\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n+\t* common/config/powerpcspe/powerpcspe-common.c (rs6000_handle_option):\n+\tLikewise.\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parsing_subset_version): Likewise.\n \t(riscv_subset_list::parse_std_ext): Likewise.\n \t(riscv_subset_list::parse_sv_or_non_std_ext): Likewise.\n \t(riscv_subset_list::parse): Likewise.\n@@ -2607,7 +2611,7 @@\n \n 2019-02-19  Richard Biener  <rguenther@suse.de>\n \n-        PR middle-end/88074\n+\tPR middle-end/88074\n \t* toplev.c (do_compile): Initialize mpfr's exponent range\n \tbased on available float modes.\n \n@@ -4324,18 +4328,18 @@\n \n 2019-01-18  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-        * config/aarch64/aarch64-opts.h (enum stack_protector_guard): New\n-        * config/aarch64/aarch64.c (aarch64_override_options_internal): Handle\n-        and put in error checks for stack protector guard options.\n-        (aarch64_stack_protect_guard): New.\n-        (TARGET_STACK_PROTECT_GUARD): Define.\n-        * config/aarch64/aarch64.md (UNSPEC_SSP_SYSREG): New.\n-        (reg_stack_protect_address<mode>): New.\n-        (stack_protect_set): Adjust for SSP_GLOBAL.\n-        (stack_protect_test): Likewise.\n-        * config/aarch64/aarch64.opt (-mstack-protector-guard-reg): New.\n-        (-mstack-protector-guard): Likewise.\n-        (-mstack-protector-guard-offset): Likewise.\n+\t* config/aarch64/aarch64-opts.h (enum stack_protector_guard): New\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Handle\n+\tand put in error checks for stack protector guard options.\n+\t(aarch64_stack_protect_guard): New.\n+\t(TARGET_STACK_PROTECT_GUARD): Define.\n+\t* config/aarch64/aarch64.md (UNSPEC_SSP_SYSREG): New.\n+\t(reg_stack_protect_address<mode>): New.\n+\t(stack_protect_set): Adjust for SSP_GLOBAL.\n+\t(stack_protect_test): Likewise.\n+\t* config/aarch64/aarch64.opt (-mstack-protector-guard-reg): New.\n+\t(-mstack-protector-guard): Likewise.\n+\t(-mstack-protector-guard-offset): Likewise.\n \n 2019-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -4692,7 +4696,7 @@\n \n 2019-01-15  Nikhil Benesch  <nikhil.benesch@gmail.com>\n \n-        * godump.c (go_output_typedef): When outputting a typedef, refer\n+\t* godump.c (go_output_typedef): When outputting a typedef, refer\n \tto the underlying type by its name and not its structure.\n \n 2019-01-15  David Malcolm  <dmalcolm@redhat.com>\n@@ -4901,7 +4905,7 @@\n \tto false.\n \t* lra.c (initialize_lra_reg_info_element): Set call_insn to NULL.\n \t* regcprop.c (copyprop_hardreg_forward_1): Add argument to\n-        targetm.hard_regno_call_part_clobbered call.\n+\ttargetm.hard_regno_call_part_clobbered call.\n \t* reginfo.c (choose_hard_reg_mode): Ditto.\n \t* regrename.c (check_new_reg_p): Ditto.\n \t* reload.c (find_equiv_reg): Ditto.\n@@ -5077,9 +5081,10 @@\n \t(vcmlaq_rot270_lane_f32): New.\n \t(vcmlaq_rot270_laneq_f32): New.\n \t* config/arm/arm_neon_builtins.def (vcadd90, vcadd270, vcmla0, vcmla90,\n-\tvcmla180, vcmla270, vcmla_lane0, vcmla_lane90, vcmla_lane180, vcmla_lane270,\n-\tvcmla_laneq0, vcmla_laneq90, vcmla_laneq180, vcmla_laneq270,\n-\tvcmlaq_lane0, vcmlaq_lane90, vcmlaq_lane180, vcmlaq_lane270): New.\n+\tvcmla180, vcmla270, vcmla_lane0, vcmla_lane90, vcmla_lane180,\n+\tvcmla_lane270, vcmla_laneq0, vcmla_laneq90, vcmla_laneq180,\n+\tvcmla_laneq270, vcmlaq_lane0, vcmlaq_lane90, vcmlaq_lane180,\n+\tvcmlaq_lane270): New.\n \t* config/arm/neon.md (neon_vcmla_lane<rot><mode>,\n \tneon_vcmla_laneq<rot><mode>, neon_vcmlaq_lane<rot><mode>): New.\n \t* config/arm/arm.c (arm_arch8_3, arm_arch8_4): New.\n@@ -5088,36 +5093,44 @@\n \t* config/arm/iterators.md (VDF, VQ_HSF): New.\n \t(VCADD, VCMLA): New.\n \t(VF_constraint, rot, rotsplit1, rotsplit2): Add V4HF and V8HF.\n-\t* config/arm/neon.md (neon_vcadd<rot><mode>, neon_vcmla<rot><mode>): New.\n+\t* config/arm/neon.md (neon_vcadd<rot><mode>, neon_vcmla<rot><mode>):\n+\tNew.\n \t* config/arm/unspecs.md (UNSPEC_VCADD90, UNSPEC_VCADD270,\n \tUNSPEC_VCMLA, UNSPEC_VCMLA90, UNSPEC_VCMLA180, UNSPEC_VCMLA270): New.\n \n 2019-01-10  Tamar Christina  <tamar.christina@arm.com>\n \n-\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers): Add qualifier_lane_pair_index.\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_type_qualifiers):\n+\tAdd qualifier_lane_pair_index.\n \t(emit-rtl.h): Include.\n \t(TYPES_QUADOP_LANE_PAIR): New.\n \t(aarch64_simd_expand_args): Use it.\n \t(aarch64_simd_expand_builtin): Likewise.\n-\t(AARCH64_SIMD_FCMLA_LANEQ_BUILTINS, aarch64_fcmla_laneq_builtin_datum): New.\n+\t(AARCH64_SIMD_FCMLA_LANEQ_BUILTINS, aarch64_fcmla_laneq_builtin_datum):\n+\tNew.\n \t(FCMLA_LANEQ_BUILTIN, AARCH64_SIMD_FCMLA_LANEQ_BUILTIN_BASE,\n \tAARCH64_SIMD_FCMLA_LANEQ_BUILTINS, aarch64_fcmla_lane_builtin_data,\n \taarch64_init_fcmla_laneq_builtins, aarch64_expand_fcmla_builtin): New.\n \t(aarch64_init_builtins): Add aarch64_init_fcmla_laneq_builtins.\n \t(aarch64_expand_buildin): Add AARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V2SF,\n-\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V2SF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V2SF,\n- \tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ2700_V2SF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V4HF,\n-\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V4HF, AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V4HF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V2SF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V2SF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ2700_V2SF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V4HF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V4HF,\n+\tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V4HF,\n \tAARCH64_SIMD_BUILTIN_FCMLA_LANEQ270_V4HF.\n \t* config/aarch64/iterators.md (FCMLA_maybe_lane): New.\n-\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Add __ARM_FEATURE_COMPLEX.\n-\t* config/aarch64/aarch64-simd-builtins.def (fcadd90, fcadd270, fcmla0, fcmla90,\n-\tfcmla180, fcmla270, fcmla_lane0, fcmla_lane90, fcmla_lane180, fcmla_lane270,\n-\tfcmla_laneq0, fcmla_laneq90, fcmla_laneq180, fcmla_laneq270,\n-\tfcmlaq_lane0, fcmlaq_lane90, fcmlaq_lane180, fcmlaq_lane270): New.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n+\tAdd __ARM_FEATURE_COMPLEX.\n+\t* config/aarch64/aarch64-simd-builtins.def (fcadd90, fcadd270, fcmla0,\n+\tfcmla90, fcmla180, fcmla270, fcmla_lane0, fcmla_lane90, fcmla_lane180,\n+\tfcmla_lane270, fcmla_laneq0, fcmla_laneq90, fcmla_laneq180,\n+\tfcmla_laneq270, fcmlaq_lane0, fcmlaq_lane90, fcmlaq_lane180,\n+\tfcmlaq_lane270): New.\n \t* config/aarch64/aarch64-simd.md (aarch64_fcmla_lane<rot><mode>,\n-\taarch64_fcmla_laneq<rot>v4hf, aarch64_fcmlaq_lane<rot><mode>,aarch64_fcadd<rot><mode>,\n-\taarch64_fcmla<rot><mode>): New.\n+\taarch64_fcmla_laneq<rot>v4hf, aarch64_fcmlaq_lane<rot><mode>,\n+\taarch64_fcadd<rot><mode>, aarch64_fcmla<rot><mode>): New.\n \t* config/aarch64/arm_neon.h:\n \t(vcadd_rot90_f16): New.\n \t(vcaddq_rot90_f16): New.\n@@ -5401,7 +5414,7 @@\n \t(*branch<P:mode>): ...this.\n \n 2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n-            James Clarke  <jrtc27@jrtc27.com>\n+\t    James Clarke  <jrtc27@jrtc27.com>\n \n \tPR target/84010\n \t* config/sparc/sparc.c (sparc_legitimize_tls_address): Only use Pmode\n@@ -5872,8 +5885,8 @@\n \tRevert:\n \t2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n-        * ipa-inline.c (edge_badness): Use inlined_time instead of\n-        inline_summaries->get.\n+\t* ipa-inline.c (edge_badness): Use inlined_time instead of\n+\tinline_summaries->get.\n \n 2019-01-05  Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -6040,7 +6053,7 @@\n \t(ipa_merge_profiles): ... here; do not ICE on thunks and aliases.\n \n 2019-01-02  Martin Sebor  <msebor@redhat.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gimple-fold.c (strlen_range_kind): Remove SRK_LENRANGE_2.\n \t(get_range_strlen_tree): Update appropriately.\n@@ -6111,7 +6124,7 @@\n \tset after UIDs before splitting them.\n \n 2019-01-01  Martin Sebor  <msebor@redhat.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gimple-fold.c (get_range_strlen_tree): Record if the computed\n \tlength is optimistic.  If it is, then arrange to compute the"}, {"sha": "6ed9f3345c5c3169eeb040038c8c50dbc47e8d6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e157fa31207fac3aa6232216569cde75390983f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e157fa31207fac3aa6232216569cde75390983f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e157fa31207fac3aa6232216569cde75390983f", "patch": "@@ -432,7 +432,7 @@\n 2019-03-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR testsuite/89834\n-        * gcc.dg/vect/pr81740-2.c: Require vect_hw_misalign.\n+\t* gcc.dg/vect/pr81740-2.c: Require vect_hw_misalign.\n \n 2019-03-27  Peter Bergner  <bergner@linux.ibm.com>\n \n@@ -2212,7 +2212,7 @@\n \n 2019-02-19  Richard Biener  <rguenther@suse.de>\n \n-        PR middle-end/88074\n+\tPR middle-end/88074\n \t* gcc.dg/pr88074.c: New testcase.\n \n 2019-02-19  Jakub Jelinek  <jakub@redhat.com>\n@@ -2800,8 +2800,8 @@\n \n 2019-02-05  Nikhil Benesch  <nikhil.benesch@gmail.com>\n \n-        PR go/89019\n-        * lib/go-torture.exp: Test compiling with -flto.\n+\tPR go/89019\n+\t* lib/go-torture.exp: Test compiling with -flto.\n \n 2019-02-06  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -3892,7 +3892,7 @@\n \n 2019-01-15  Nikhil Benesch  <nikhil.benesch@gmail.com>\n \n-        * gcc.misc-tests/godump-1.c: Add test case for typedef before\n+\t* gcc.misc-tests/godump-1.c: Add test case for typedef before\n \tstruct.\n \n 2019-01-15  David Malcolm  <dmalcolm@redhat.com>\n@@ -4668,7 +4668,7 @@\n \t* g++.dg/cpp1z/class-deduction61.C: New test.\n \n 2019-01-02  Martin Sebor  <msebor@redhat.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/strlenopt-36.c: Update.\n \t* gcc.dg/strlenopt-45.c: Update.\n@@ -4736,7 +4736,7 @@\n \ttargets and expect _ZThn8 for ilp32 targets.\n \n 2019-01-01  Martin Sebor  <msebor@redhat.com>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/strlenopt-40.c: Update.\n \t* gcc.dg/strlenopt-51.c: Likewise."}]}