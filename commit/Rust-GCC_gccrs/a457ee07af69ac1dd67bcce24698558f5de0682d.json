{"sha": "a457ee07af69ac1dd67bcce24698558f5de0682d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1N2VlMDdhZjY5YWMxZGQ2N2JjY2UyNDY5ODU1OGY1ZGUwNjgyZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T17:47:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T17:47:43Z"}, "message": "alloc-pool.c: Fix comment typos.\n\n\t* alloc-pool.c: Fix comment typos.\n\t* builtin-types.def: Likewise.\n\t* builtins.def: Likewise.\n\t* c-pretty-print.c: Likewise.\n\t* df.h: Likewise.\n\t* reload1.c: Likewise.\n\nFrom-SVN: r77043", "tree": {"sha": "6f89aecc97071cb813ada55cf1379a6d0f107d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f89aecc97071cb813ada55cf1379a6d0f107d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a457ee07af69ac1dd67bcce24698558f5de0682d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a457ee07af69ac1dd67bcce24698558f5de0682d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a457ee07af69ac1dd67bcce24698558f5de0682d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a457ee07af69ac1dd67bcce24698558f5de0682d/comments", "author": null, "committer": null, "parents": [{"sha": "af3fb3d6dc3907a45f05d913e9b2fafe42bcc053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3fb3d6dc3907a45f05d913e9b2fafe42bcc053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3fb3d6dc3907a45f05d913e9b2fafe42bcc053"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "de72c4e9a1be9c68bcc503f2765d4c218a87e3c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -1,3 +1,12 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alloc-pool.c: Fix comment typos.\n+\t* builtin-types.def: Likewise.\n+\t* builtins.def: Likewise.\n+\t* c-pretty-print.c: Likewise.\n+\t* df.h: Likewise.\n+\t* reload1.c: Likewise.\n+\n 2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/invoke.texi: Follow spelling conventions."}, {"sha": "11ba826760c1e62d956c07fb6ee55b47ea64bcd3", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -75,7 +75,7 @@ static ALLOC_POOL_ID_TYPE last_id;\n \n #ifdef GATHER_STATISTICS\n \n-/* Store infromation about each particular alloc_pool.  */\n+/* Store information about each particular alloc_pool.  */\n struct alloc_pool_descriptor\n {\n   const char *name;"}, {"sha": "df74661738fdce9ada9ef33dd46478ed651bb500", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -17,7 +17,7 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* This header provides a declaritive way of describing the types that\n+/* This header provides a declarative way of describing the types that\n    are used when declaring builtin functions.\n \n    Before including this header, you must define the following macros:"}, {"sha": "27cb2b6459a2d8e615d4b33975bff076383aef5a", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -1,6 +1,7 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -115,7 +116,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Define an attribute list for math functions that are normally\n    \"pure\" but if flag_unsafe_math_optimizations is set they are\n    instead \"const\".  This distinction accounts for the fact that some\n-   math functions check the rounding mode which is akin to examing\n+   math functions check the rounding mode which is akin to examining\n    global memory.  In \"unsafe\" mode we can be less careful.  */\n #undef ATTR_MATHFN_FPROUNDING\n #define ATTR_MATHFN_FPROUNDING (flag_unsafe_math_optimizations ? \\"}, {"sha": "acb70cd327d180f4fa6f2b3e38c60d0a9231bd0f", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -540,7 +540,7 @@ pp_c_declaration_specifiers (c_pretty_printer *pp, tree t)\n       direct-declarator [ static type-qualifier-list(opt) assignment-expression(opt)]\n       direct-declarator [ type-qualifier-list static assignment-expression ]\n       direct-declarator [ type-qualifier-list * ]\n-      direct-declaratpr ( parameter-type-list )\n+      direct-declarator ( parameter-type-list )\n       direct-declarator ( identifier-list(opt) )  */\n \n void"}, {"sha": "79af3aad15274352e00023e2501f92af8262d65f", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -55,7 +55,7 @@ enum df_ref_flags\n     /* This flag is set on register references inside a subreg on\n        machines which have CANNOT_CHANGE_MODE_CLASS.\n        Note, that this flag can also be set on df_refs representing\n-       the REG itself (i.e., one might not see the subreg anyore).\n+       the REG itself (i.e., one might not see the subreg anymore).\n        Also note, that this flag is set also for hardreg refs, i.e.,\n        you must check yourself if it's a pseudo.  */\n     DF_REF_MODE_CHANGE = 2,"}, {"sha": "1ea21ee389094817d027c237a604039006c546ca", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a457ee07af69ac1dd67bcce24698558f5de0682d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a457ee07af69ac1dd67bcce24698558f5de0682d", "patch": "@@ -2307,7 +2307,7 @@ eliminate_regs (rtx x, enum machine_mode mem_mode, rtx insn)\n        and require special code to handle code a reloaded PLUS operand.\n \n        Also consider backends where the flags register is clobbered by a\n-       MINUS, but we can emit a PLUS that does not clobber flags (ia32,\n+       MINUS, but we can emit a PLUS that does not clobber flags (IA-32,\n        lea instruction comes to mind).  If we try to reload a MINUS, we\n        may kill the flags register that was holding a useful value.\n "}]}