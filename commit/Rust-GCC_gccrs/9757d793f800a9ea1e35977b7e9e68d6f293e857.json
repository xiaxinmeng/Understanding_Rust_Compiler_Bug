{"sha": "9757d793f800a9ea1e35977b7e9e68d6f293e857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1N2Q3OTNmODAwYTllYTFlMzU5NzdiN2U5ZTY4ZDZmMjkzZTg1Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-02T18:24:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-02T18:34:31Z"}, "message": "c++: refactor duplicate decls\n\nA couple of paths in duplicate decls dealing with templates and\nbuiltins were overly complicated.  Fixing thusly.\n\n\tgcc/cp/\n\t* decl.c (duplicate_decls): Refactor some template & builtin\n\thandling.", "tree": {"sha": "f397ce912bf959d30e5f7f9d2dd78479fdbe6e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f397ce912bf959d30e5f7f9d2dd78479fdbe6e54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9757d793f800a9ea1e35977b7e9e68d6f293e857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9757d793f800a9ea1e35977b7e9e68d6f293e857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9757d793f800a9ea1e35977b7e9e68d6f293e857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9757d793f800a9ea1e35977b7e9e68d6f293e857/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f915e19e62a81b46c613b4d665e1d38ceee16991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f915e19e62a81b46c613b4d665e1d38ceee16991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f915e19e62a81b46c613b4d665e1d38ceee16991"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "3846e8236719a31e26a4598e4179a6923117d8f2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9757d793f800a9ea1e35977b7e9e68d6f293e857/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9757d793f800a9ea1e35977b7e9e68d6f293e857/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9757d793f800a9ea1e35977b7e9e68d6f293e857", "patch": "@@ -2471,22 +2471,27 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t  DECL_NOT_REALLY_EXTERN (newdecl) |= DECL_NOT_REALLY_EXTERN (olddecl);\n \t  DECL_COMDAT (newdecl) |= DECL_COMDAT (olddecl);\n \t}\n-      DECL_TEMPLATE_INSTANTIATED (newdecl)\n-\t|= DECL_TEMPLATE_INSTANTIATED (olddecl);\n-      DECL_ODR_USED (newdecl) |= DECL_ODR_USED (olddecl);\n \n-      /* If the OLDDECL is an instantiation and/or specialization,\n-\t then the NEWDECL must be too.  But, it may not yet be marked\n-\t as such if the caller has created NEWDECL, but has not yet\n-\t figured out that it is a redeclaration.  */\n-      if (!DECL_USE_TEMPLATE (newdecl))\n-\tDECL_USE_TEMPLATE (newdecl) = DECL_USE_TEMPLATE (olddecl);\n+      if (TREE_CODE (newdecl) != TYPE_DECL)\n+\t{\n+\t  DECL_TEMPLATE_INSTANTIATED (newdecl)\n+\t    |= DECL_TEMPLATE_INSTANTIATED (olddecl);\n+\t  DECL_ODR_USED (newdecl) |= DECL_ODR_USED (olddecl);\n+\n+\t  /* If the OLDDECL is an instantiation and/or specialization,\n+\t     then the NEWDECL must be too.  But, it may not yet be marked\n+\t     as such if the caller has created NEWDECL, but has not yet\n+\t     figured out that it is a redeclaration.  */\n+\t  if (!DECL_USE_TEMPLATE (newdecl))\n+\t    DECL_USE_TEMPLATE (newdecl) = DECL_USE_TEMPLATE (olddecl);\n+\n+\t  DECL_INITIALIZED_IN_CLASS_P (newdecl)\n+\t    |= DECL_INITIALIZED_IN_CLASS_P (olddecl);\n+\t}\n \n       /* Don't really know how much of the language-specific\n \t values we should copy from old to new.  */\n       DECL_IN_AGGR_P (newdecl) = DECL_IN_AGGR_P (olddecl);\n-      DECL_INITIALIZED_IN_CLASS_P (newdecl)\n-\t|= DECL_INITIALIZED_IN_CLASS_P (olddecl);\n \n       if (LANG_DECL_HAS_MIN (newdecl))\n \t{\n@@ -2646,19 +2651,20 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t  if (DECL_BUILT_IN_CLASS (newdecl) == BUILT_IN_NORMAL)\n \t    {\n \t      enum built_in_function fncode = DECL_FUNCTION_CODE (newdecl);\n-\t      switch (fncode)\n+\t      if (builtin_decl_explicit_p (fncode))\n \t\t{\n-\t\t  /* If a compatible prototype of these builtin functions\n-\t\t     is seen, assume the runtime implements it with the\n-\t\t     expected semantics.  */\n-\t\tcase BUILT_IN_STPCPY:\n-\t\t  if (builtin_decl_explicit_p (fncode))\n-\t\t    set_builtin_decl_implicit_p (fncode, true);\n-\t\t  break;\n-\t\tdefault:\n-\t\t  if (builtin_decl_explicit_p (fncode))\n-\t\t    set_builtin_decl_declared_p (fncode, true);\n-\t\t  break;\n+\t\t  /* A compatible prototype of these builtin functions\n+\t\t     is seen, assume the runtime implements it with\n+\t\t     the expected semantics.  */\n+\t\t  switch (fncode)\n+\t\t    {\n+\t\t    case BUILT_IN_STPCPY:\n+\t\t      set_builtin_decl_implicit_p (fncode, true);\n+\t\t      break;\n+\t\t    default:\n+\t\t      set_builtin_decl_declared_p (fncode, true);\n+\t\t      break;\n+\t\t    }\n \t\t}\n \n \t      copy_attributes_to_builtin (newdecl);"}]}