{"sha": "607c855eb7fbf6b876250fe3e580125e7bf438d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3Yzg1NWViN2ZiZjZiODc2MjUwZmUzZTU4MDEyNWU3YmY0MzhkNg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-01-19T09:51:57Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-01-19T09:51:57Z"}, "message": "re PR c++/16829 (default parameter can be not one of the last in function)\n\n\tPR c++/16829\n\t* decl.c (start_preparsed_function): Check default arguments\n\tunconditionally.\n\t* name-lookup.c (pushdecl_maybe_friend): Check default arguments\n\tof all functions and function templates.\n\t* parser.c (cp_parser_late_parsing_default_args): Check default\n\targuments.\n\t* decl2.c (check_default_args): Set missing default arguments to\n\terror_mark_node.\n\n\t* g++.dg/other/default2.C: New test.\n\t* g++.dg/other/default3.C: New test.\n\nFrom-SVN: r109950", "tree": {"sha": "b6b738bfc0105ccb758373d329ad2bae1de1c072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b738bfc0105ccb758373d329ad2bae1de1c072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/607c855eb7fbf6b876250fe3e580125e7bf438d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607c855eb7fbf6b876250fe3e580125e7bf438d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607c855eb7fbf6b876250fe3e580125e7bf438d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607c855eb7fbf6b876250fe3e580125e7bf438d6/comments", "author": null, "committer": null, "parents": [{"sha": "1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2"}], "stats": {"total": 153, "additions": 145, "deletions": 8}, "files": [{"sha": "981976f2821bb7495ac07b7a8fa2d635dc55a2f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -1,3 +1,15 @@\n+2006-01-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/16829\n+\t* decl.c (start_preparsed_function): Check default arguments\n+\tunconditionally.\n+\t* name-lookup.c (pushdecl_maybe_friend): Check default arguments\n+\tof all functions and function templates.\n+\t* parser.c (cp_parser_late_parsing_default_args): Check default\n+\targuments.\n+\t* decl2.c (check_default_args): Set missing default arguments to\n+\terror_mark_node.\n+\n 2006-01-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/25836"}, {"sha": "ae0b7e85c4410c670515c0ba4bfde3bed1ddd389", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -10217,6 +10217,8 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n      you declare a function, these types can be incomplete, but they\n      must be complete when you define the function.  */\n   check_function_type (decl1, current_function_parms);\n+  /* Make sure no default arg is missing.  */\n+  check_default_args (decl1);\n \n   /* Build the return declaration for the function.  */\n   restype = TREE_TYPE (fntype);\n@@ -10283,8 +10285,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \t  /* We need to set the DECL_CONTEXT.  */\n \t  if (!DECL_CONTEXT (decl1) && DECL_TEMPLATE_INFO (decl1))\n \t    DECL_CONTEXT (decl1) = DECL_CONTEXT (DECL_TI_TEMPLATE (decl1));\n-\t  /* And make sure we have enough default args.  */\n-\t  check_default_args (decl1);\n \t}\n       fntype = TREE_TYPE (decl1);\n     }"}, {"sha": "637ac8c9de70ea81f003197184f0d863ee2f37e3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -3228,7 +3228,7 @@ check_default_args (tree x)\n       else if (saw_def)\n \t{\n \t  error (\"default argument missing for parameter %P of %q+#D\", i, x);\n-\t  break;\n+\t  TREE_PURPOSE (arg) = error_mark_node;\n \t}\n     }\n }"}, {"sha": "4a2482f588064994ec615708d576c0492df410d5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -602,6 +602,9 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n     {\n       int different_binding_level = 0;\n \n+      if (TREE_CODE (x) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (x))\n+       check_default_args (x);\n+\n       if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n \tname = TREE_OPERAND (name, 0);\n \n@@ -710,8 +713,6 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t\t{\n \t\t  if (TREE_CODE (t) == TYPE_DECL)\n \t\t    SET_IDENTIFIER_TYPE_VALUE (name, TREE_TYPE (t));\n-\t\t  else if (TREE_CODE (t) == FUNCTION_DECL)\n-\t\t    check_default_args (t);\n \n \t\t  POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n \t\t}\n@@ -994,9 +995,6 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t    }\n \t}\n \n-      if (TREE_CODE (x) == FUNCTION_DECL)\n-\tcheck_default_args (x);\n-\n       if (TREE_CODE (x) == VAR_DECL)\n \tmaybe_register_incomplete_var (x);\n     }"}, {"sha": "d2b41e5c39d6f3141d11b72da729d8caff666a37", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -15833,6 +15833,9 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       cp_parser_pop_lexer (parser);\n     }\n \n+  /* Make sure no default arg is missing.  */\n+  check_default_args (fn);\n+\n   /* Restore the state of local_variables_forbidden_p.  */\n   parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;\n "}, {"sha": "5a5e470411d4fec160c9358da33989fc246034ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -1,3 +1,9 @@\n+2006-01-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/16829\n+\t* g++.dg/other/default2.C: New test.\n+\t* g++.dg/other/default3.C: New test.\n+\n 2006-01-19  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR c/25805"}, {"sha": "be0e5c32413d1ea62553183a124fa27fae38f6cc", "filename": "gcc/testsuite/g++.dg/other/default2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault2.C?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/16829\n+// { dg-do \"compile\" }\n+\n+template<typename T> void foo(T, int = 0, int) {}  // { dg-error \"default\" }\n+\n+void bar()\n+{\n+  foo(0);\n+}"}, {"sha": "324ba7146fe10ad599e5d61223919eb89c8aceae", "filename": "gcc/testsuite/g++.dg/other/default3.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607c855eb7fbf6b876250fe3e580125e7bf438d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdefault3.C?ref=607c855eb7fbf6b876250fe3e580125e7bf438d6", "patch": "@@ -0,0 +1,109 @@\n+// PR c++/16829\n+// { dg-do \"compile\" }\n+\n+void f1(int = 0, int);                       // { dg-error \"default\" }\n+\n+void f2(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+void f3(int, int);\n+void f3(int = 0, int);                       // { dg-error \"default\" }\n+\n+void f4(int, int);\n+void f4(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+void f5();\n+void f5(int = 0, int);                       // { dg-error \"default\" }\n+\n+void f6();\n+void f6(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+template<typename> void g1(int = 0, int);    // { dg-error \"default\" }\n+\n+template<typename> void g2(int = 0, int) {}  // { dg-error \"default\" }\n+\n+template<typename> void g3(int, int);\n+template<typename> void g3(int = 0, int);    // { dg-error \"default\" }\n+\n+template<typename> void g4(int, int);\n+template<typename> void g4(int = 0, int) {}  // { dg-error \"default\" }\n+\n+template<typename> void g5();\n+template<typename> void g5(int = 0, int);    // { dg-error \"default\" }\n+\n+template<typename> void g6();\n+template<typename> void g6(int = 0, int) {}  // { dg-error \"default\" }\n+\n+template<typename T> void g7(T, T)   {}\n+template<typename T> void g7(T* = 0, T*) {}  // { dg-error \"default\" }\n+\n+\n+struct A\n+{\n+  void F1(int = 0, int);                       // { dg-error \"default\" }\n+\n+  void F2(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+  void F3(int, int);\n+\n+  void F4();\n+  void F4(int = 0, int);                       // { dg-error \"default\" }\n+\n+  void F5();\n+  void F5(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+  template<typename> void G1(int = 0, int);    // { dg-error \"default\" }\n+\n+  template<typename> void G2(int = 0, int) {}  // { dg-error \"default\" }\n+\n+  template<typename> void G3(int, int);\n+\n+  template<typename> void G4();\n+  template<typename> void G4(int = 0, int);    // { dg-error \"default\" }\n+\n+  template<typename> void G5();\n+  template<typename> void G5(int = 0, int) {}  // { dg-error \"default\" }\n+\n+  template<typename T> void G6(T, T)   {}\n+  template<typename T> void G6(T* = 0, T*) {}  // { dg-error \"default\" }\n+};\n+\n+void A::F3(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+template<typename> void A::G3(int = 0, int) {}  // { dg-error \"default\" }\n+\n+\n+template<typename> struct B\n+{\n+  void F1(int = 0, int);                       // { dg-error \"default\" }\n+\n+  void F2(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+  void F3(int, int);\n+\n+  void F4();\n+  void F4(int = 0, int);                       // { dg-error \"default\" }\n+\n+  void F5();\n+  void F5(int = 0, int) {}                     // { dg-error \"default\" }\n+\n+  template<typename> void G1(int = 0, int);    // { dg-error \"default\" }\n+\n+  template<typename> void G2(int = 0, int) {}  // { dg-error \"default\" }\n+\n+  template<typename> void G3(int, int);\n+\n+  template<typename> void G4();\n+  template<typename> void G4(int = 0, int);    // { dg-error \"default\" }\n+\n+  template<typename> void G5();\n+  template<typename> void G5(int = 0, int) {}  // { dg-error \"default\" }\n+\n+  template<typename T> void G6(T, T)   {}\n+  template<typename T> void G6(T* = 0, T*) {}  // { dg-error \"default\" }\n+};\n+\n+template<typename T>\n+void B<T>::F3(int = 0, int) {}  // { dg-error \"default\" }\n+\n+template<typename T> template<typename>\n+void B<T>::G3(int = 0, int) {}  // { dg-error \"default\" }"}]}