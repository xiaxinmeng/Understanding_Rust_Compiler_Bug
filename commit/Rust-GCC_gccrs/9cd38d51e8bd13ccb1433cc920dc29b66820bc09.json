{"sha": "9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkMzhkNTFlOGJkMTNjY2IxNDMzY2M5MjBkYzI5YjY2ODIwYmMwOQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-01T03:02:07Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-01T03:02:07Z"}, "message": "re PR fortran/39229 (No warning of truncated lines if a continuation line follows)\n\n2009-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/39229\n\t* scanner.c (next_char): Fix typo in comment.\n\t(gfc_get_char_literal): Warn if truncate flag is set for both fixed and\n\tfree form source, adjusting error locus as needed.\n\t* parse.c (next_fixed): Clear the truncate flag.\n\t(next_statement): Remove truncate warning.\n\nFrom-SVN: r151258", "tree": {"sha": "9936a9bbed77c9807150e93a8b4afbed01f5b47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9936a9bbed77c9807150e93a8b4afbed01f5b47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/comments", "author": null, "committer": null, "parents": [{"sha": "453503d6e6df0d85757837080f0ea2c72369e974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453503d6e6df0d85757837080f0ea2c72369e974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453503d6e6df0d85757837080f0ea2c72369e974"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "f690ab1b6d9f1ed26f360e6faee690c4e81ddbfc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "patch": "@@ -1,3 +1,12 @@\n+2009-08-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/39229\n+\t* scanner.c (next_char): Fix typo in comment.\n+\t(gfc_get_char_literal): Warn if truncate flag is set for both fixed and\n+\tfree form source, adjusting error locus as needed.\n+\t* parse.c (next_fixed): Clear the truncate flag.\n+\t(next_statement): Remove truncate warning.\n+\n 2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -96,10 +105,10 @@\n \t(gfc_find_typebound_intrinsic_op): Ditto.\n \t(gfc_find_typebound_proc), (gfc_find_typebound_user_op): New locus arg.\n \n-2009-08-22      Bud Davis <bdavis9659@sbcglobal.net>\n+2009-08-22  Bud Davis <bdavis9659@sbcglobal.net>\n \n \tPR fortran/28093\n-\t* io.c: reverted previous patch\n+\t* io.c: reverted previous patch.\n \n 2009-08-25  Janne Blomqvist  <jb@gcc.gnu.org>\n \n@@ -175,7 +184,7 @@\n \tallocation-object are conformable.\n \t(gfc_match_allocate): Use new functions.  Match SOURCE= tag.\n \n-2009-08-22\tBud Davis <bdavis9659@sbcglobal.net>\n+2009-08-22  Bud Davis <bdavis9659@sbcglobal.net>\n \n \tPR fortran/28093\n \t* io.c : added variable to store original len of fmt"}, {"sha": "e7439892f158800a60f79d00a74591054c531f32", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "patch": "@@ -849,6 +849,8 @@ next_fixed (void)\n blank_line:\n   if (digit_flag)\n     gfc_warning (\"Ignoring statement label in empty statement at %C\");\n+    \n+  gfc_current_locus.lb->truncated = 0;\n   gfc_advance_line ();\n   return ST_NONE;\n }\n@@ -862,6 +864,7 @@ next_statement (void)\n {\n   gfc_statement st;\n   locus old_locus;\n+\n   gfc_new_block = NULL;\n \n   gfc_current_ns->old_cl_list = gfc_current_ns->cl_list;\n@@ -871,14 +874,7 @@ next_statement (void)\n       gfc_buffer_error (1);\n \n       if (gfc_at_eol ())\n-\t{\n-\t  if ((gfc_option.warn_line_truncation || gfc_current_form == FORM_FREE)\n-\t      && gfc_current_locus.lb\n-\t      && gfc_current_locus.lb->truncated)\n-\t    gfc_warning_now (\"Line truncated at %C\");\n-\n-\t  gfc_advance_line ();\n-\t}\n+\tgfc_advance_line ();\n \n       gfc_skip_comments ();\n "}, {"sha": "711042ddcb25952cef2107fa5586b988074771a6", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cd38d51e8bd13ccb1433cc920dc29b66820bc09/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=9cd38d51e8bd13ccb1433cc920dc29b66820bc09", "patch": "@@ -614,7 +614,7 @@ next_char (void)\n \n /* Skip a comment.  When we come here the parse pointer is positioned\n    immediately after the comment character.  If we ever implement\n-   compiler directives withing comments, here is where we parse the\n+   compiler directives within comments, here is where we parse the\n    directive.  */\n \n static void\n@@ -1080,6 +1080,17 @@ gfc_next_char_literal (int in_string)\n \t    }\n \t}\n \n+      /* Check to see if the continuation line was truncated.  */\n+      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n+\t  && gfc_current_locus.lb->truncated)\n+\t{\n+\t  int maxlen = gfc_option.free_line_length;\n+\t  gfc_current_locus.lb->truncated = 0;\n+\t  gfc_current_locus.nextc += maxlen;\n+\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n+\t  gfc_current_locus.nextc -= maxlen;\n+\t}\n+\n       /* Now find where it continues. First eat any comment lines.  */\n       openmp_cond_flag = skip_free_comments ();\n \n@@ -1158,6 +1169,14 @@ gfc_next_char_literal (int in_string)\n       if (c != '\\n')\n \tgoto done;\n \n+      /* Check to see if the continuation line was truncated.  */\n+      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n+\t  && gfc_current_locus.lb->truncated)\n+\t{\n+\t  gfc_current_locus.lb->truncated = 0;\n+\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n+\t}\n+\n       prev_openmp_flag = openmp_flag;\n       continue_flag = 1;\n       old_loc = gfc_current_locus;"}]}