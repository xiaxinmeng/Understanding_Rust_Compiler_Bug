{"sha": "c613d54045e8d5d0b65a5163af59669d32cd3cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxM2Q1NDA0NWU4ZDVkMGI2NWE1MTYzYWY1OTY2OWQzMmNkM2NmMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-19T22:47:47Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-19T22:47:47Z"}, "message": "re PR fortran/34817 (mixed-kind \"any\" and \"all\" intrinsics with expressions)\n\n2008-01-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/34817\n\tPR fortran/34838\n\t* iresolve.c (gfc_resolve_all):  Remove conversion of mask\n\targument to kind=1 by removing call to resolve_mask_arg().\n\t(gfc_resolve_any):  Likewise.\n\n2008-01-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/34817\n\tPR fortran/34838\n\t* gfortran.dg/any_all_1.f90:  New test.\n\t* gfortran.dg/any_all_2.f90:  New test.\n\nFrom-SVN: r131660", "tree": {"sha": "52d13c2f030fbf9ecaaf099b8f197b27f9038eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d13c2f030fbf9ecaaf099b8f197b27f9038eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c613d54045e8d5d0b65a5163af59669d32cd3cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c613d54045e8d5d0b65a5163af59669d32cd3cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c613d54045e8d5d0b65a5163af59669d32cd3cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c613d54045e8d5d0b65a5163af59669d32cd3cf1/comments", "author": null, "committer": null, "parents": [{"sha": "e2bd3e81f541e16f83c5e73f23b0d93ceaf07952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bd3e81f541e16f83c5e73f23b0d93ceaf07952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2bd3e81f541e16f83c5e73f23b0d93ceaf07952"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "11d9c2378a15b58f49e3abcc3c7347efa6eac223", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c613d54045e8d5d0b65a5163af59669d32cd3cf1", "patch": "@@ -1,3 +1,11 @@\n+2008-01-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/34817\n+\tPR fortran/34838\n+\t* iresolve.c (gfc_resolve_all):  Remove conversion of mask\n+\targument to kind=1 by removing call to resolve_mask_arg().\n+\t(gfc_resolve_any):  Likewise.\n+\n 2008-01-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34760"}, {"sha": "79b46e2501c19a459fa9ddfcc12800c2a8d10b21", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=c613d54045e8d5d0b65a5163af59669d32cd3cf1", "patch": "@@ -256,8 +256,6 @@ gfc_resolve_all (gfc_expr *f, gfc_expr *mask, gfc_expr *dim)\n       f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n-  resolve_mask_arg (mask);\n-\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"all_%c%d\"), gfc_type_letter (mask->ts.type),\n \t\t      mask->ts.kind);\n@@ -306,8 +304,6 @@ gfc_resolve_any (gfc_expr *f, gfc_expr *mask, gfc_expr *dim)\n       f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n-  resolve_mask_arg (mask);\n-\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"any_%c%d\"), gfc_type_letter (mask->ts.type),\n \t\t      mask->ts.kind);"}, {"sha": "5ea52a26f40535e2811d1a0233c961ed7c2f59f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c613d54045e8d5d0b65a5163af59669d32cd3cf1", "patch": "@@ -1,3 +1,10 @@\n+2008-01-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/34817\n+\tPR fortran/34838\n+\t* gfortran.dg/any_all_1.f90:  New test.\n+\t* gfortran.dg/any_all_2.f90:  New test.\n+\n 2008-01-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* g++.dg/eh/ia64-2.C: Place \"dg-do run\" statement before"}, {"sha": "f1a14474034b0e79ec9a8f7c06c647902e4ed56f", "filename": "gcc/testsuite/gfortran.dg/any_all_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90?ref=c613d54045e8d5d0b65a5163af59669d32cd3cf1", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! PR 34817 - the wrong library function was called,\n+! leading to garbage in the return value\n+program main\n+  real, dimension(2,2) :: a\n+  logical(kind=4), dimension(2) :: b\n+  integer, dimension(2) :: i\n+  equivalence (b,i)\n+  data a /1.0, 2.0, -0.1, -0.2 /\n+\n+  i = 16843009 ! Initialize i to put junk into b\n+  b = any(a>0.5,dim=1)\n+  if (b(2) .or. .not. b(1)) call abort\n+\n+  i = 16843009  ! Initialize i to put junk into b\n+  b = all(a>0.5,dim=1)\n+  if (b(2) .or. .not. b(1)) call abort\n+end program main"}, {"sha": "57df0cf6cbfb9f97a35b699e747c46eb48117427", "filename": "gcc/testsuite/gfortran.dg/any_all_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613d54045e8d5d0b65a5163af59669d32cd3cf1/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_2.f90?ref=c613d54045e8d5d0b65a5163af59669d32cd3cf1", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR 34838 - this failed with \"Can't convert LOGICAL(1) to LOGICAL(1)\n+! Test case contributed by Manfred Schwab.\n+program main\n+  Logical(kind=1) :: bmp(1),bmpv(1)\n+\n+  bmp(1)=.false.\n+  bmpv(1)=.true.\n+\n+  if ( ANY(bmp(1:1) .NEQV. bmpv(1:1)) ) then\n+     print*,\"hello\"\n+  end if\n+\n+  if ( ALL(bmp(1:1) .NEQV. bmpv(1:1)) ) then\n+     print*,\"hello\"\n+  end if\n+\n+end program main"}]}