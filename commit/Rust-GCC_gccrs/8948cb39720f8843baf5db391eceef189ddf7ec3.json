{"sha": "8948cb39720f8843baf5db391eceef189ddf7ec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0OGNiMzk3MjBmODg0M2JhZjVkYjM5MWVjZWVmMTg5ZGRmN2VjMw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-05-24T07:28:39Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-05-24T07:28:39Z"}, "message": "Makefile.am: Override gctest_OBJECTS so tests/test.c can be built.\n\n\t* Makefile.am: Override gctest_OBJECTS so tests/test.c can be built.\n\t(libgcjgc_la_SOURCES): Remove typo.\n\t* tests/test.c: Fix struct names and includes for GC_GCJ_SUPPORT case.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r42524", "tree": {"sha": "0f0b0bad7cad1bfd447ba149e43f7e3de42933cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f0b0bad7cad1bfd447ba149e43f7e3de42933cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8948cb39720f8843baf5db391eceef189ddf7ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8948cb39720f8843baf5db391eceef189ddf7ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8948cb39720f8843baf5db391eceef189ddf7ec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8948cb39720f8843baf5db391eceef189ddf7ec3/comments", "author": null, "committer": null, "parents": [{"sha": "678dbe56c08ce1f0508b4a75de8bbc0e547678df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678dbe56c08ce1f0508b4a75de8bbc0e547678df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678dbe56c08ce1f0508b4a75de8bbc0e547678df"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "30f70a9f6fc3690f2fe93dbefcf97d235a74e77d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=8948cb39720f8843baf5db391eceef189ddf7ec3", "patch": "@@ -1,3 +1,10 @@\n+2001-05-24  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* Makefile.am: Override gctest_OBJECTS so tests/test.c can be built.\n+\t(libgcjgc_la_SOURCES): Remove typo.\n+\t* tests/test.c: Fix struct names and includes for GC_GCJ_SUPPORT case.\n+\t* Makefile.in: Rebuilt.\n+\n 2001-05-21  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tImported version version 6.0alpha7."}, {"sha": "4e8deeeb2ae782d3d59826d202000d0298e67dfd", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=8948cb39720f8843baf5db391eceef189ddf7ec3", "patch": "@@ -29,7 +29,7 @@ libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c dbg_mlc.c \\\n dyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c irix_threads.c \\\n linux_threads.c malloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c \\\n obj_map.c os_dep.c pcr_interface.c ptr_chck.c real_malloc.c reclaim.c \\\n-solaris_pthreads.c solaris_threads.c specific.c stubborn.c typd_mlc.c`\n+solaris_pthreads.c solaris_threads.c specific.c stubborn.c typd_mlc.c\n \n # Include THREADLIBS here to ensure that the correct versions of\n # linuxthread semaphore functions get linked:\n@@ -46,7 +46,11 @@ AM_CXXFLAGS = @BOEHM_GC_CFLAGS@\n AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n-gctest_SOURCES = test.c\n+# The following hack produces a warning from automake, but we need it in order \n+# to build a file from a subdirectory. FIXME.\n+test.o:\ttests/test.c\n+\t$(COMPILE) -c $<\n+gctest_OBJECTS = test.o\n gctest_LDADD = ./libgcjgc.la $(THREADLIBS) $(EXTRA_TEST_LIBS)\n gctest_LDFLAGS = -shared-libgcc\n TESTS_ENVIRONMENT = LD_LIBRARY_PATH=../../$(MULTIBUILDTOP)gcc"}, {"sha": "87111d34828798a31ab81b945d69b74668d7e34c", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=8948cb39720f8843baf5db391eceef189ddf7ec3", "patch": "@@ -112,7 +112,7 @@ libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c dbg_mlc.c \\\n dyn_load.c finalize.c gc_dlopen.c gcj_mlc.c headers.c irix_threads.c \\\n linux_threads.c malloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c \\\n obj_map.c os_dep.c pcr_interface.c ptr_chck.c real_malloc.c reclaim.c \\\n-solaris_pthreads.c solaris_threads.c specific.c stubborn.c typd_mlc.c`\n+solaris_pthreads.c solaris_threads.c specific.c stubborn.c typd_mlc.c\n \n \n # Include THREADLIBS here to ensure that the correct versions of\n@@ -132,7 +132,8 @@ AM_CXXFLAGS = @BOEHM_GC_CFLAGS@\n AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n-gctest_SOURCES = test.c\n+\n+gctest_OBJECTS = test.o\n gctest_LDADD = ./libgcjgc.la $(THREADLIBS) $(EXTRA_TEST_LIBS)\n gctest_LDFLAGS = -shared-libgcc\n TESTS_ENVIRONMENT = LD_LIBRARY_PATH=../../$(MULTIBUILDTOP)gcc\n@@ -206,23 +207,22 @@ dbg_mlc.lo dyn_load.lo finalize.lo gc_dlopen.lo gcj_mlc.lo headers.lo \\\n irix_threads.lo linux_threads.lo malloc.lo mallocx.lo mark.lo \\\n mark_rts.lo misc.lo new_hblk.lo obj_map.lo os_dep.lo pcr_interface.lo \\\n ptr_chck.lo real_malloc.lo reclaim.lo solaris_pthreads.lo \\\n-solaris_threads.lo specific.lo stubborn.lo\n+solaris_threads.lo specific.lo stubborn.lo typd_mlc.lo\n check_PROGRAMS =  gctest$(EXEEXT)\n-gctest_OBJECTS =  test.$(OBJEXT)\n gctest_DEPENDENCIES =  ./libgcjgc.la\n CFLAGS = @CFLAGS@\n COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n CCLD = $(CC)\n-DIST_COMMON =  README ChangeLog Makefile.am Makefile.in acinclude.m4 \\\n-aclocal.m4 configure configure.in\n+DIST_COMMON =  ChangeLog Makefile.am Makefile.in acinclude.m4 aclocal.m4 \\\n+configure configure.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n TAR = gtar\n GZIP_ENV = --best\n-SOURCES = $(libgcjgc_la_SOURCES) $(EXTRA_libgcjgc_la_SOURCES) $(gctest_SOURCES)\n-OBJECTS = $(libgcjgc_la_OBJECTS) $(gctest_OBJECTS)\n+SOURCES = $(libgcjgc_la_SOURCES) $(EXTRA_libgcjgc_la_SOURCES)\n+OBJECTS = $(libgcjgc_la_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n@@ -511,6 +511,9 @@ install-am install uninstall-am uninstall all-redirect all-am all \\\n installdirs mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n+\n+test.o:\ttests/test.c\n+\t$(COMPILE) -c $<\n $(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \\\n include/private/gc_hdrs.h include/gc.h include/gc_gcj.h include/gc_mark.h\n "}, {"sha": "c7b537cba6cf58194da73cc3887cc885a5d2b349", "filename": "boehm-gc/tests/test.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2Ftests%2Ftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8948cb39720f8843baf5db391eceef189ddf7ec3/boehm-gc%2Ftests%2Ftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ftests%2Ftest.c?ref=8948cb39720f8843baf5db391eceef189ddf7ec3", "patch": "@@ -238,9 +238,9 @@ sexpr y;\n \n #ifdef GC_GCJ_SUPPORT\n \n-#include \"gc_mark.h\"\n-#include \"dbg_mlc.h\"\n-#include \"include/gc_gcj.h\"\n+#include \"private/dbg_mlc.h\"\n+#include \"private/gc_pmark.h\"\n+#include \"gc_gcj.h\"\n \n /* The following struct emulates the vtable in gcj.\t*/\n /* This assumes the default value of MARK_DESCR_OFFSET. */\n@@ -253,12 +253,12 @@ struct fake_vtable gcj_class_struct1 = { 0, sizeof(struct SEXPR)\n \t\t\t\t\t    + sizeof(struct fake_vtable *) };\n \t\t\t/* length based descriptor.\t*/\n struct fake_vtable gcj_class_struct2 =\n-\t\t\t\t{ 0, (3l << (CPP_WORDSZ - 3)) | DS_BITMAP};\n+\t\t\t\t{ 0, (3l << (CPP_WORDSZ - 3)) | GC_DS_BITMAP};\n \t\t\t/* Bitmap based descriptor.\t*/\n \n struct GC_ms_entry * fake_gcj_mark_proc(word * addr,\n-\t\t\t\t        struct ms_entry *mark_stack_ptr,\n-\t\t\t\t        struct ms_entry *mark_stack_limit,\n+\t\t\t\t        struct GC_ms_entry *mark_stack_ptr,\n+\t\t\t\t        struct GC_ms_entry *mark_stack_limit,\n \t\t\t\t        word env   )\n {\n     sexpr x;\n@@ -273,7 +273,7 @@ struct GC_ms_entry * fake_gcj_mark_proc(word * addr,\n \tPUSH_CONTENTS((ptr_t)(x -> sexpr_cdr), mark_stack_ptr,\n \t\t\t      mark_stack_limit, &(x -> sexpr_cdr), exit1);\n     }\n-    if ((ptr_t)(x -> sexpr_car) > GC_least_plausible_heap_addr) {\n+    if ((ptr_t)(x -> sexpr_car) > (ptr_t) GC_least_plausible_heap_addr) {\n \tPUSH_CONTENTS((ptr_t)(x -> sexpr_car), mark_stack_ptr,\n \t\t\t      mark_stack_limit, &(x -> sexpr_car), exit2);\n     }"}]}