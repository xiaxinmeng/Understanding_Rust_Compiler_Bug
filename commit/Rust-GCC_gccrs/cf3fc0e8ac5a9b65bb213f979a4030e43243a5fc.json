{"sha": "cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzZmMwZThhYzVhOWI2NWJiMjEzZjk3OWE0MDMwZTQzMjQzYTVmYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-01-03T23:41:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-01-03T23:41:32Z"}, "message": "PR tree-optimization/83655 - ICE on an invalid call to memcpy declared with no prototype\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/83655\n\t* gcc.dg/Wrestrict-5.c: New test.\n\t* c-c++-common/builtins.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/83655\n\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call): Avoid\n\tchecking calls with invalid arguments.\n\nFrom-SVN: r256218", "tree": {"sha": "1798e91130802e29c9e570a63e5f6dc7d6080c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1798e91130802e29c9e570a63e5f6dc7d6080c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2438cb6a1dd5f983314b21988b915699c01a2e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2438cb6a1dd5f983314b21988b915699c01a2e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2438cb6a1dd5f983314b21988b915699c01a2e28"}], "stats": {"total": 261, "additions": 260, "deletions": 1}, "files": [{"sha": "a11d6e361e81654bc494611d9b206694f1011925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "patch": "@@ -1,3 +1,9 @@\n+2018-01-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83655\n+\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call): Avoid\n+\tchecking calls with invalid arguments.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-stmts.c (vect_get_store_rhs): New function."}, {"sha": "066be1a04387ad10c6e8236ef73ad90de736ea20", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "patch": "@@ -1693,7 +1693,18 @@ wrestrict_dom_walker::check_call (gcall *call)\n \n   /* DST and SRC can be null for a call with an insufficient number\n      of arguments to a built-in function declared without a protype.  */\n-  if (!dst || !src || check_bounds_or_overlap (call, dst, src, dstwr, NULL_TREE))\n+  if (!dst || !src)\n+    return;\n+\n+  /* DST, SRC, or DSTWR can also have the wrong type in a call to\n+     a function declared without a prototype.  Avoid checking such\n+     invalid calls.  */\n+  if (TREE_CODE (TREE_TYPE (dst)) != POINTER_TYPE\n+      || TREE_CODE (TREE_TYPE (src)) != POINTER_TYPE\n+      || (dstwr && !INTEGRAL_TYPE_P (TREE_TYPE (dstwr))))\n+    return;\n+\n+  if (check_bounds_or_overlap (call, dst, src, dstwr, NULL_TREE))\n     return;\n \n   /* Avoid diagnosing the call again.  */"}, {"sha": "53900981ded97bc86ba3072139efd918f416d1f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "patch": "@@ -1,3 +1,9 @@\n+2018-01-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/83655\n+\t* gcc.dg/Wrestrict-5.c: New test.\n+\t* c-c++-common/builtins.c: New test.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "673fcad22aae7de2ce93ae3a9c975f5e9fed8369", "filename": "gcc/testsuite/c-c++-common/builtins.c", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltins.c?ref=cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "patch": "@@ -0,0 +1,193 @@\n+/* Test to verify that calls to common built-in functions declared\n+   with no prototype do not cause an ICE.\n+  { dg-do compile }\n+  { dg-options \"-O2 -Wall -Wextra\" }\n+  { dg-prune-output \"warning\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if __cplusplus\n+extern \"C\" {\n+\n+#define NO_PROTO ...\n+#else\n+#define NO_PROTO /* empty */\n+#endif\n+\n+  /* Character classification built-ins from <ctype.h>.  */\n+  int isalpha (NO_PROTO);\n+  int isalnum (NO_PROTO);\n+  int isalpha (NO_PROTO);\n+  int iscntrl (NO_PROTO);\n+  int isdigit (NO_PROTO);\n+  int isgraph (NO_PROTO);\n+  int islower (NO_PROTO);\n+  int isprint (NO_PROTO);\n+  int ispunct (NO_PROTO);\n+  int isspace (NO_PROTO);\n+  int isupper (NO_PROTO);\n+  int isxdigit (NO_PROTO);\n+  int tolower (NO_PROTO);\n+  int toupper (NO_PROTO);\n+\n+  /* Memory allocation built-ins from <stdlib.h>.  */\n+  void* alloca (NO_PROTO);\n+  void* aligned_alloc (NO_PROTO);\n+  void* calloc (NO_PROTO);\n+  void* malloc (NO_PROTO);\n+  void* realloc (NO_PROTO);\n+\n+  /* Raw memory built-ins from <string.h>.  */\n+  void* memcpy (NO_PROTO);\n+  void* memchr (NO_PROTO);\n+  void* memmove (NO_PROTO);\n+  void* mempcpy (NO_PROTO);\n+  void* memset (NO_PROTO);\n+\n+  /* String built-ins from <string.h>.  */\n+  char* stpcpy (NO_PROTO);\n+  char* stpncpy (NO_PROTO);\n+\n+  char* strcat (NO_PROTO);\n+  char* strcpy (NO_PROTO);\n+\n+  char* strdup (NO_PROTO);\n+  char* strndup (NO_PROTO);\n+\n+  char* strncat (NO_PROTO);\n+  char* strncpy (NO_PROTO);\n+\n+  size_t strlen (NO_PROTO);\n+  size_t strnlen (NO_PROTO);\n+\n+  char* strchr (NO_PROTO);\n+  int strcmp (NO_PROTO);\n+  int strncmp (NO_PROTO);\n+\n+  /* Input/output functions from <stdio.h>.  */\n+  int puts (NO_PROTO);\n+  int fputs (NO_PROTO);\n+\n+  int scanf (NO_PROTO);\n+  int fscanf (NO_PROTO);\n+  int sscanf (NO_PROTO);\n+  int vfscanf (NO_PROTO);\n+  int vsscanf (NO_PROTO);\n+\n+  int printf (NO_PROTO);\n+  int fprintf (NO_PROTO);\n+  int sprintf (NO_PROTO);\n+\n+  int snprintf (NO_PROTO);\n+\n+  int vprintf (NO_PROTO);\n+  int vfprintf (NO_PROTO);\n+  int vsprintf (NO_PROTO);\n+\n+  int vsnprintf (NO_PROTO);\n+\n+#if __cplusplus\n+}\n+#endif\n+\n+\n+#define CONCAT(a, b) a ## b\n+#define UNIQ_NAME(func, id) CONCAT (test_ ## func ## _, id)\n+\n+#define TEST_FUNC(func, arglist)\t\t\\\n+  __typeof__ (func arglist)\t\t\t\\\n+  UNIQ_NAME (func, __COUNTER__) (void) {\t\\\n+    return func arglist;\t\t\t\\\n+  }\n+\n+#define T1(func)\t\t\t\t\\\n+  TEST_FUNC (func, ());\t\t\t\t\\\n+  TEST_FUNC (func, (1));\t\t\t\\\n+  TEST_FUNC (func, (\"\"));\t\t\t\\\n+  TEST_FUNC (func, ((void*)1));\t\t\t\\\n+  TEST_FUNC (func, (iarr));\t\t\t\\\n+  TEST_FUNC (func, (function))\n+\n+#define T2(func)\t\t\t\t\\\n+  TEST_FUNC (func, (1, 1));\t\t\t\\\n+  TEST_FUNC (func, (1, \"\"));\t\t\t\\\n+  TEST_FUNC (func, (1, (void*)1));\t\t\\\n+  TEST_FUNC (func, (1, iarr));\t\t\t\\\n+  TEST_FUNC (func, (1, function))\n+\n+#define T3(func)\t\t\t\t\\\n+  TEST_FUNC (func, (1, 1, 1));\t\t\t\\\n+  TEST_FUNC (func, (1, 1, \"\"));\t\t\t\\\n+  TEST_FUNC (func, (1, 1, (void*)1));\t\t\\\n+  TEST_FUNC (func, (1, 1, iarr));\t\t\\\n+  TEST_FUNC (func, (1, 1, function))\n+\n+extern int iarr[];\n+extern void function (void);\n+\n+T1 (isalpha);\n+T1 (isalnum);\n+T1 (isalpha);\n+T1 (iscntrl);\n+T1 (isdigit);\n+T1 (isgraph);\n+T1 (islower);\n+T1 (isprint);\n+T1 (ispunct);\n+T1 (isspace);\n+T1 (isupper);\n+T1 (isxdigit);\n+T1 (tolower);\n+T1 (toupper);\n+\n+T1 (alloca);\n+T2 (aligned_alloc);\n+T2 (malloc);\n+T2 (calloc);\n+T2 (realloc);\n+\n+T3 (memcpy);\n+T3 (memmove);\n+T3 (mempcpy);\n+T3 (memset);\n+T3 (memchr);\n+\n+T2 (stpcpy);\n+T3 (stpncpy);\n+\n+T2 (strcat);\n+T2 (strcpy);\n+\n+T1 (strdup);\n+T2 (strndup);\n+\n+T3 (strncat);\n+T3 (strncpy);\n+\n+T2 (strchr);\n+T2 (strcmp);\n+T3 (strncmp);\n+\n+T1 (strlen);\n+T2 (strnlen);\n+\n+T1 (puts);\n+T2 (fputs);\n+\n+T1 (scanf);\n+T2 (fscanf);\n+T2 (sscanf);\n+T2 (vfscanf);\n+T2 (vsscanf);\n+\n+T2 (printf);\n+T3 (fprintf);\n+T3 (sprintf);\n+\n+T3 (snprintf);\n+\n+T2 (vprintf);\n+T2 (vfprintf);\n+T2 (vsprintf);\n+\n+T3 (vsnprintf);"}, {"sha": "4912ee5506bd667fcafd89529bdffaceac379ed3", "filename": "gcc/testsuite/gcc.dg/Wrestrict-5.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-5.c?ref=cf3fc0e8ac5a9b65bb213f979a4030e43243a5fc", "patch": "@@ -0,0 +1,43 @@\n+/* Test to verify that valid calls to common restrict-qualified built-in\n+   functions declared with no prototype are checked for overlap, and that\n+   invalid calls are ignored.\n+  { dg-do compile }\n+  { dg-options \"-O2 -Wrestrict\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if __cplusplus\n+extern \"C\" {\n+\n+#define NO_PROTO ...\n+#else\n+#define NO_PROTO /* empty */\n+#endif\n+\n+void* memcpy ();\n+char* strncpy ();\n+\n+#if __cplusplus\n+}   /* extern \"C\" */\n+#endif\n+\n+void test_memcpy_warn (char *d)\n+{\n+  memcpy (d, d + 2, 3);       /* { dg-warning \"accessing 3 bytes at offsets 0 and 2 overlaps 1 byte at offset 2\" } */\n+}\n+\n+void test_memcpy_nowarn (char *d)\n+{\n+  memcpy (d, d + 2, \"\");\n+}\n+\n+\n+void test_strncpy_warn (char *d)\n+{\n+  strncpy (d + 1, d + 3, 5);  /* { dg-warning \"accessing 5 bytes at offsets 1 and 3 overlaps 2 bytes at offset 3\" } */\n+}\n+\n+void test_strncpy_nowarn (char *d)\n+{\n+  strncpy (d + 1, d + 3, \"\");\n+}"}]}