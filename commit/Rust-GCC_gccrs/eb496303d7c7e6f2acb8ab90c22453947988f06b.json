{"sha": "eb496303d7c7e6f2acb8ab90c22453947988f06b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI0OTYzMDNkN2M3ZTZmMmFjYjhhYjkwYzIyNDUzOTQ3OTg4ZjA2Yg==", "commit": {"author": {"name": "Petr Salinger", "email": "Petr.Salinger@seznam.cz", "date": "2006-09-18T18:45:08Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-09-18T18:45:08Z"}, "message": "configure.ac: add support for GNU/kFreeBSD, accepted by upstream for gc 6.8.\n\n2006-06-07  Petr Salinger  <Petr.Salinger@seznam.cz>\n\n\t* configure.ac: add support for GNU/kFreeBSD, accepted by upstream\n\tfor gc 6.8.\n\t* dyn_load.c: Likewise.\n\t* include/gc.h: Likewise.\n\t* private/gcconfig.h: Likewise.\n\t* configure: Regenerate.\n\t* include/gc_config.h.in: Regenerate.\n\nFrom-SVN: r117033", "tree": {"sha": "666cdb5c8b90249ec72621c86394c11ef6b41897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/666cdb5c8b90249ec72621c86394c11ef6b41897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb496303d7c7e6f2acb8ab90c22453947988f06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb496303d7c7e6f2acb8ab90c22453947988f06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb496303d7c7e6f2acb8ab90c22453947988f06b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb496303d7c7e6f2acb8ab90c22453947988f06b/comments", "author": null, "committer": null, "parents": [{"sha": "94ba45dfe265e2fde473c6bb02484e5608af61ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ba45dfe265e2fde473c6bb02484e5608af61ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ba45dfe265e2fde473c6bb02484e5608af61ea"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "08b08e85ef783cda31034d63d768f4e4f3bc6201", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -1,3 +1,13 @@\n+2006-06-07  Petr Salinger  <Petr.Salinger@seznam.cz>\n+\n+\t* configure.ac: add support for GNU/kFreeBSD, accepted by upstream\n+\tfor gc 6.8.\n+\t* dyn_load.c: Likewise.\n+\t* include/gc.h: Likewise.\n+\t* private/gcconfig.h: Likewise.\n+\t* configure: Regenerate.\n+\t* include/gc_config.h.in: Regenerate.\n+\n 2006-09-14  Tom Tromey  <tromey@redhat.com>\n \n \tPR boehm-gc/29068."}, {"sha": "00b14305f95bdc442ec267672760b5acc62bce3c", "filename": "boehm-gc/configure", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -5444,6 +5444,32 @@ _ACEOF\n \t{ echo \"$as_me:$LINENO: WARNING: \\\"Only HP-UX 11 POSIX threads are supported.\\\"\" >&5\n echo \"$as_me: WARNING: \\\"Only HP-UX 11 POSIX threads are supported.\\\"\" >&2;}\n \t;;\n+      *-*-kfreebsd*-gnu)\n+       cat >>confdefs.h <<\\_ACEOF\n+#define GC_FREEBSD_THREADS 1\n+_ACEOF\n+\n+       INCLUDES=\"$INCLUDES -pthread\"\n+       THREADDLLIBS=-pthread\n+       cat >>confdefs.h <<\\_ACEOF\n+#define _REENTRANT 1\n+_ACEOF\n+\n+         if test \"${enable_parallel_mark}\" = yes; then\n+         cat >>confdefs.h <<\\_ACEOF\n+#define PARALLEL_MARK 1\n+_ACEOF\n+\n+       fi\n+       cat >>confdefs.h <<\\_ACEOF\n+#define THREAD_LOCAL_ALLOC 1\n+_ACEOF\n+\n+       cat >>confdefs.h <<\\_ACEOF\n+#define USE_COMPILER_TLS 1\n+_ACEOF\n+\n+               ;;\n      *-*-freebsd*)\n \t{ echo \"$as_me:$LINENO: WARNING: \\\"FreeBSD does not yet fully support threads with Boehm GC.\\\"\" >&5\n echo \"$as_me: WARNING: \\\"FreeBSD does not yet fully support threads with Boehm GC.\\\"\" >&2;}"}, {"sha": "45937dcf9b928be7aea8a5957bfdb09f9122c321", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -155,6 +155,17 @@ case \"$THREADS\" in\n      *-*-hpux10*)\n \tAC_MSG_WARN(\"Only HP-UX 11 POSIX threads are supported.\")\n \t;;\n+      *-*-kfreebsd*-gnu)\n+       AC_DEFINE(GC_FREEBSD_THREADS)\n+       INCLUDES=\"$INCLUDES -pthread\"\n+       THREADDLLIBS=-pthread\n+       AC_DEFINE(_REENTRANT)\n+         if test \"${enable_parallel_mark}\" = yes; then\n+         AC_DEFINE(PARALLEL_MARK)\n+       fi\n+       AC_DEFINE(THREAD_LOCAL_ALLOC)\n+       AC_DEFINE(USE_COMPILER_TLS, 1,[use tls for boehm])\n+               ;;\n      *-*-freebsd*)\n \tAC_MSG_WARN(\"FreeBSD does not yet fully support threads with Boehm GC.\")\n \tAC_DEFINE(GC_FREEBSD_THREADS,1,[support FreeBSD threads])"}, {"sha": "d82bad8efaed8ac0bff9b60a75063fb23b1b06fa", "filename": "boehm-gc/dyn_load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fdyn_load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Fdyn_load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdyn_load.c?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -26,7 +26,7 @@\n  * None of this is safe with dlclose and incremental collection.\n  * But then not much of anything is safe in the presence of dlclose.\n  */\n-#if defined(__linux__) && !defined(_GNU_SOURCE)\n+#if (defined(__linux__) || defined(__GLIBC__)) && !defined(_GNU_SOURCE)\n     /* Can't test LINUX, since this must be define before other includes */\n #   define _GNU_SOURCE\n #endif\n@@ -392,7 +392,7 @@ GC_bool GC_register_main_static_data()\n /* For glibc 2.2.4+.  Unfortunately, it doesn't work for older\t*/\n /* versions.  Thanks to Jakub Jelinek for most of the code.\t*/\n \n-# if defined(LINUX) /* Are others OK here, too? */ \\\n+# if (defined(LINUX) || defined (__GLIBC__)) /* Are others OK here, too? */ \\\n      && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \\\n          || (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG))) \n "}, {"sha": "52ee8056ec41e6911901257be67959f5720e4ebb", "filename": "boehm-gc/include/gc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fgc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fgc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc.h?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -499,7 +499,7 @@ GC_API GC_PTR GC_malloc_atomic_ignore_off_page GC_PROTO((size_t lb));\n #   define GC_RETURN_ADDR (GC_word)__return_address\n #endif\n \n-#ifdef __linux__\n+#if defined(__linux__) || defined(__GLIBC__)\n # include <features.h>\n # if (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1 || __GLIBC__ > 2) \\\n      && !defined(__ia64__)"}, {"sha": "41028c14eb164f08ac8675784f3ef6e546698936", "filename": "boehm-gc/include/gc_config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fgc_config.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fgc_config.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_config.h.in?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -166,6 +166,9 @@\n /* define GC_local_malloc() & GC_local_malloc_atomic() */\n #undef THREAD_LOCAL_ALLOC\n \n+/* use tls for boehm */\n+#undef USE_COMPILER_TLS\n+\n /* use MMAP instead of sbrk to get new memory */\n #undef USE_MMAP\n "}, {"sha": "d7d96b11b602d4f0e009fef94fc8214baa1a0afe", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb496303d7c7e6f2acb8ab90c22453947988f06b/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=eb496303d7c7e6f2acb8ab90c22453947988f06b", "patch": "@@ -55,7 +55,7 @@\n # endif\n \n /* And one for FreeBSD: */\n-# if defined(__FreeBSD__) && !defined(FREEBSD)\n+# if ( defined(__FreeBSD__) || defined(__FreeBSD_kernel__) ) && !defined(FREEBSD)\n #    define FREEBSD\n # endif\n \n@@ -1241,8 +1241,15 @@\n #\tifndef GC_FREEBSD_THREADS\n #\t    define MPROTECT_VDB\n #\tendif\n-#\tdefine SIG_SUSPEND SIGUSR1\n-#\tdefine SIG_THR_RESTART SIGUSR2\n+#\tifdef __GLIBC__\n+#\t    define SIG_SUSPEND\t\t(32+6)\n+#\t    define SIG_THR_RESTART\t(32+5)\n+\t    extern int _end[];\n+#\t    define DATAEND (_end)\n+#\telse\n+#\t    define SIG_SUSPEND SIGUSR1\n+#\t    define SIG_THR_RESTART SIGUSR2\n+#\tendif\n #\tdefine FREEBSD_STACKBOTTOM\n #\tifdef __ELF__\n #\t    define DYNAMIC_LOADING\n@@ -1952,6 +1959,28 @@\n #\t    define PREFETCH_FOR_WRITE(x) __builtin_prefetch((x), 1)\n #\tendif\n #   endif\n+#   ifdef FREEBSD\n+#\tdefine OS_TYPE \"FREEBSD\"\n+#\tifndef GC_FREEBSD_THREADS\n+#\t    define MPROTECT_VDB\n+#\tendif\n+#\tifdef __GLIBC__\n+#\t    define SIG_SUSPEND\t\t(32+6)\n+#\t    define SIG_THR_RESTART\t(32+5)\n+\t    extern int _end[];\n+#\t    define DATAEND (_end)\n+#\telse\n+#\t    define SIG_SUSPEND SIGUSR1\n+#\t    define SIG_THR_RESTART SIGUSR2\n+#\tendif\n+#\tdefine FREEBSD_STACKBOTTOM\n+#\tifdef __ELF__\n+#\t    define DYNAMIC_LOADING\n+#\tendif\n+\textern char etext[];\n+\textern char * GC_FreeBSDGetDataStart();\n+#\tdefine DATASTART GC_FreeBSDGetDataStart(0x1000, &etext)\n+#   endif\n #   ifdef NETBSD\n #\tdefine OS_TYPE \"NETBSD\"\n #\tifdef __ELF__\n@@ -2023,7 +2052,7 @@\n #   define SUNOS5SIGS\n # endif\n \n-# if defined(FREEBSD) && (__FreeBSD__ >= 4)\n+# if defined(FREEBSD) && ((__FreeBSD__ >= 4) || (__FreeBSD_kernel__ >= 4))\n #   define SUNOS5SIGS\n # endif\n \n@@ -2086,7 +2115,7 @@\n #   define CACHE_LINE_SIZE 32\t/* Wild guess\t*/\n # endif\n \n-# ifdef LINUX\n+# if defined(LINUX) || defined(__GLIBC__)\n #   define REGISTER_LIBRARIES_EARLY\n     /* We sometimes use dl_iterate_phdr, which may acquire an internal\t*/\n     /* lock.  This isn't safe after the world has stopped.  So we must\t*/\n@@ -2167,7 +2196,7 @@\n #if defined(SPARC)\n # define CAN_SAVE_CALL_ARGS\n #endif\n-#if (defined(I386) || defined(X86_64)) && defined(LINUX)\n+#if (defined(I386) || defined(X86_64)) && (defined(LINUX) || defined(__GLIBC__))\n \t    /* SAVE_CALL_CHAIN is supported if the code is compiled to save\t*/\n \t    /* frame pointers by default, i.e. no -fomit-frame-pointer flag.\t*/\n # define CAN_SAVE_CALL_ARGS"}]}