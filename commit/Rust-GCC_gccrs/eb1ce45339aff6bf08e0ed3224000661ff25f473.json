{"sha": "eb1ce45339aff6bf08e0ed3224000661ff25f473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxY2U0NTMzOWFmZjZiZjA4ZTBlZDMyMjQwMDA2NjFmZjI1ZjQ3Mw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2013-11-20T11:57:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-20T11:57:27Z"}, "message": "cuintp.c (UI_From_gnu): Use tree_to_shwi.\n\ngcc/ada/\n2013-11-19  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\t    Mike Stump  <mikestump@comcast.net>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* gcc-interface/cuintp.c (UI_From_gnu): Use tree_to_shwi.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use tree_to_uhwi.\n\t* gcc-interface/utils.c (make_packable_type): Likewise.\n\ngcc/c-family/\n2013-11-19  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\t    Mike Stump  <mikestump@comcast.net>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* c-ada-spec.c (is_simple_enum): Use tree_to_shwi and tree_to_uhwi\n\tinstead of TREE_INT_CST_LOW, in cases where there is a protecting\n\ttree_fits_shwi_p or tree_fits_uhwi_p.\n\t(dump_generic_ada_node): Likewise.\n\t* c-format.c (check_format_arg): Likewise.\n\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n\ngcc/\n2013-11-19  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\t    Mike Stump  <mikestump@comcast.net>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* alias.c (ao_ref_from_mem): Use tree_to_shwi and tree_to_uhwi\n\tinstead of TREE_INT_CST_LOW, in cases where there is a protecting\n\ttree_fits_shwi_p or tree_fits_uhwi_p.\n\t* builtins.c (fold_builtin_powi): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_special_round_type_align):\n\tLikewise.\n\t* dbxout.c (dbxout_symbol): Likewise.\n\t* expr.c (expand_expr_real_1): Likewise.\n\t* fold-const.c (fold_single_bit_test, fold_plusminus_mult_expr)\n\t(fold_binary_loc): Likewise.\n\t* gimple-fold.c (fold_const_aggregate_ref_1): Likewise.\n\t* gimple-ssa-strength-reduction.c (stmt_cost): Likewise.\n\t* omp-low.c (lower_omp_for_lastprivate): Likewise.\n\t* simplify-rtx.c (delegitimize_mem_from_attrs): Likewise.\n\t* stor-layout.c (compute_record_mode): Likewise.\n\t* tree-cfg.c (verify_expr): Likewise.\n\t* tree-dfa.c (get_ref_base_and_extent): Likewise.\n\t* tree-pretty-print.c (dump_array_domain): Likewise.\n\t* tree-sra.c (build_user_friendly_ref_for_offset): Likewise.\n\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Likewise.\n\t* tree-ssa-loop-ivopts.c (get_loop_invariant_expr_id): Likewise.\n\t* tree-ssa-math-opts.c (execute_cse_sincos): Likewise.\n\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Likewise.\n\t* tree-ssa-reassoc.c (acceptable_pow_call): Likewise.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Likewise.\n\t(ao_ref_init_from_vn_reference, vn_reference_fold_indirect): Likewise.\n\t(vn_reference_lookup_3, simplify_binary_expression): Likewise.\n\t* tree-ssa-structalias.c (bitpos_of_field): Likewise.\n\t(get_constraint_for_1, push_fields_onto_fieldstack): Likewise.\n\t(create_variable_info_for_1): Likewise.\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Likewise.\n\t(vect_verify_datarefs_alignment): Likewise.\n\t(vect_analyze_data_ref_accesses): Likewise.\n\t(vect_prune_runtime_alias_test_list): Likewise.\n\t* tree-vectorizer.h (NITERS_KNOWN_P): Likewise.\n\nCo-Authored-By: Mike Stump <mikestump@comcast.net>\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r205103", "tree": {"sha": "14d3bc11d88c3991621e75c7a1d491f7f137a459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d3bc11d88c3991621e75c7a1d491f7f137a459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1ce45339aff6bf08e0ed3224000661ff25f473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1ce45339aff6bf08e0ed3224000661ff25f473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1ce45339aff6bf08e0ed3224000661ff25f473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1ce45339aff6bf08e0ed3224000661ff25f473/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4aaa33517f8a8dd9db112f6e1ba5e34798027a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aaa33517f8a8dd9db112f6e1ba5e34798027a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aaa33517f8a8dd9db112f6e1ba5e34798027a30"}], "stats": {"total": 231, "additions": 144, "deletions": 87}, "files": [{"sha": "d962593581ce58af9ce311a46bfb1b2f343ae157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1,3 +1,43 @@\n+2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* alias.c (ao_ref_from_mem): Use tree_to_shwi and tree_to_uhwi\n+\tinstead of TREE_INT_CST_LOW, in cases where there is a protecting\n+\ttree_fits_shwi_p or tree_fits_uhwi_p.\n+\t* builtins.c (fold_builtin_powi): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_special_round_type_align):\n+\tLikewise.\n+\t* dbxout.c (dbxout_symbol): Likewise.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* fold-const.c (fold_single_bit_test, fold_plusminus_mult_expr)\n+\t(fold_binary_loc): Likewise.\n+\t* gimple-fold.c (fold_const_aggregate_ref_1): Likewise.\n+\t* gimple-ssa-strength-reduction.c (stmt_cost): Likewise.\n+\t* omp-low.c (lower_omp_for_lastprivate): Likewise.\n+\t* simplify-rtx.c (delegitimize_mem_from_attrs): Likewise.\n+\t* stor-layout.c (compute_record_mode): Likewise.\n+\t* tree-cfg.c (verify_expr): Likewise.\n+\t* tree-dfa.c (get_ref_base_and_extent): Likewise.\n+\t* tree-pretty-print.c (dump_array_domain): Likewise.\n+\t* tree-sra.c (build_user_friendly_ref_for_offset): Likewise.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Likewise.\n+\t* tree-ssa-loop-ivopts.c (get_loop_invariant_expr_id): Likewise.\n+\t* tree-ssa-math-opts.c (execute_cse_sincos): Likewise.\n+\t* tree-ssa-phiopt.c (hoist_adjacent_loads): Likewise.\n+\t* tree-ssa-reassoc.c (acceptable_pow_call): Likewise.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Likewise.\n+\t(ao_ref_init_from_vn_reference, vn_reference_fold_indirect): Likewise.\n+\t(vn_reference_lookup_3, simplify_binary_expression): Likewise.\n+\t* tree-ssa-structalias.c (bitpos_of_field): Likewise.\n+\t(get_constraint_for_1, push_fields_onto_fieldstack): Likewise.\n+\t(create_variable_info_for_1): Likewise.\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Likewise.\n+\t(vect_verify_datarefs_alignment): Likewise.\n+\t(vect_analyze_data_ref_accesses): Likewise.\n+\t(vect_prune_runtime_alias_test_list): Likewise.\n+\t* tree-vectorizer.h (NITERS_KNOWN_P): Likewise.\n+\n 2013-11-20  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_size): Avoid signed"}, {"sha": "906bd7e4f5119c87414c41d2d543de92cac148d2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1,3 +1,11 @@\n+2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/cuintp.c (UI_From_gnu): Use tree_to_shwi.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use tree_to_uhwi.\n+\t* gcc-interface/utils.c (make_packable_type): Likewise.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc-interface/cuintp.c (UI_From_gnu): Use tree_to_shwi rather than"}, {"sha": "bbe62c17e9316a7ed3ee5e4de786d215c89c6ef1", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -155,7 +155,7 @@ UI_From_gnu (tree Input)\n      in a signed 32-bit integer.  */\n   if (tree_fits_shwi_p (Input))\n     {\n-      HOST_WIDE_INT hw_input = TREE_INT_CST_LOW (Input);\n+      HOST_WIDE_INT hw_input = tree_to_shwi (Input);\n       if (hw_input == (int) hw_input)\n \treturn UI_From_Int (hw_input);\n     }\n@@ -166,7 +166,7 @@ UI_From_gnu (tree Input)\n      signed 32-bit integer.  Then a sign test tells whether it fits\n      in a signed 64-bit integer.  */\n   if (tree_fits_shwi_p (Input))\n-    return UI_From_Int (TREE_INT_CST_LOW (Input));\n+    return UI_From_Int (tree_to_shwi (Input));\n   else if (TREE_INT_CST_HIGH (Input) < 0 && TYPE_UNSIGNED (gnu_type))\n     return No_Uint;\n #endif"}, {"sha": "ee76a9d160f38737015ecdc1f74056f70c0ad704", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -4925,7 +4925,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      /* Consider an alignment as suspicious if the alignment/size\n \t\t ratio is greater or equal to the byte/bit ratio.  */\n \t      if (tree_fits_uhwi_p (size)\n-\t\t  && align >= TREE_INT_CST_LOW (size) * BITS_PER_UNIT)\n+\t\t  && align >= tree_to_uhwi (size) * BITS_PER_UNIT)\n \t\tpost_error_ne (\"?suspiciously large alignment specified for&\",\n \t\t\t       Expression (Alignment_Clause (gnat_entity)),\n \t\t\t       gnat_entity);"}, {"sha": "36e5b2debf45d38365d51c56c03395a5c6c07aac", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -815,7 +815,7 @@ make_packable_type (tree type, bool in_record)\n \n       /* Round the RM size up to a unit boundary to get the minimal size\n \t for a BLKmode record.  Give up if it's already the size.  */\n-      new_size = TREE_INT_CST_LOW (TYPE_ADA_SIZE (type));\n+      new_size = tree_to_uhwi (TYPE_ADA_SIZE (type));\n       new_size = (new_size + BITS_PER_UNIT - 1) & -BITS_PER_UNIT;\n       if (new_size == size)\n \treturn type;"}, {"sha": "daa667c49d9a6daf4b657f08c28286c3ff1cd8ee", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -341,8 +341,8 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n       && (ref->offset < 0\n \t  || (DECL_P (ref->base)\n \t      && (!tree_fits_uhwi_p (DECL_SIZE (ref->base))\n-\t\t  || (TREE_INT_CST_LOW (DECL_SIZE ((ref->base)))\n-\t\t      < (unsigned HOST_WIDE_INT)(ref->offset + ref->size))))))\n+\t\t  || (tree_to_uhwi (DECL_SIZE (ref->base))\n+\t\t      < (unsigned HOST_WIDE_INT) (ref->offset + ref->size))))))\n     return false;\n \n   return true;"}, {"sha": "9074ee737cd5fc00bdc9180884b58679014796b6", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -8583,7 +8583,7 @@ fold_builtin_powi (location_t loc, tree fndecl ATTRIBUTE_UNUSED,\n \n   if (tree_fits_shwi_p (arg1))\n     {\n-      HOST_WIDE_INT c = TREE_INT_CST_LOW (arg1);\n+      HOST_WIDE_INT c = tree_to_shwi (arg1);\n \n       /* Evaluate powi at compile-time.  */\n       if (TREE_CODE (arg0) == REAL_CST"}, {"sha": "4c5c153943e6ca6f5ebc847479cb2d2da14b4184", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1,3 +1,14 @@\n+2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-ada-spec.c (is_simple_enum): Use tree_to_shwi and tree_to_uhwi\n+\tinstead of TREE_INT_CST_LOW, in cases where there is a protecting\n+\ttree_fits_shwi_p or tree_fits_uhwi_p.\n+\t(dump_generic_ada_node): Likewise.\n+\t* c-format.c (check_format_arg): Likewise.\n+\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n+\n 2013-11-20  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* c-common.c (check_function_arguments_recurse): Use tree_to_uhwi."}, {"sha": "1724c748af5af31d153ab238529bdd9324c1cc16", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1803,7 +1803,7 @@ dump_ada_template (pretty_printer *buffer, tree t, int spc)\n static bool\n is_simple_enum (tree node)\n {\n-  unsigned HOST_WIDE_INT count = 0;\n+  HOST_WIDE_INT count = 0;\n   tree value;\n \n   for (value = TYPE_VALUES (node); value; value = TREE_CHAIN (value))\n@@ -1815,7 +1815,7 @@ is_simple_enum (tree node)\n \n       if (!tree_fits_shwi_p (int_val))\n \treturn false;\n-      else if (TREE_INT_CST_LOW (int_val) != count)\n+      else if (tree_to_shwi (int_val) != count)\n \treturn false;\n \n       count++;\n@@ -2206,9 +2206,9 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n       if (TREE_TYPE (node) == sizetype)\n \tnode = fold_convert (ssizetype, node);\n       if (tree_fits_shwi_p (node))\n-\tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n+\tpp_wide_integer (buffer, tree_to_shwi (node));\n       else if (tree_fits_uhwi_p (node))\n-\tpp_unsigned_wide_integer (buffer, TREE_INT_CST_LOW (node));\n+\tpp_unsigned_wide_integer (buffer, tree_to_uhwi (node));\n       else\n \t{\n \t  tree val = node;"}, {"sha": "0552c84464fcf8234f530b41fe4651e8e13d1322", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1540,7 +1540,7 @@ check_format_arg (void *ctx, tree format_tree,\n \n       if (tree_fits_shwi_p (array_size))\n \t{\n-\t  HOST_WIDE_INT array_size_value = TREE_INT_CST_LOW (array_size);\n+\t  HOST_WIDE_INT array_size_value = tree_to_shwi (array_size);\n \t  if (array_size_value > 0\n \t      && array_size_value == (int) array_size_value\n \t      && format_length > array_size_value)"}, {"sha": "d1b588033dd079578d89828700339c7ae8659eda", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -918,9 +918,9 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n     : TREE_TYPE (i);\n \n   if (tree_fits_shwi_p (i))\n-    pp_wide_integer (pp, TREE_INT_CST_LOW (i));\n+    pp_wide_integer (pp, tree_to_shwi (i));\n   else if (tree_fits_uhwi_p (i))\n-    pp_unsigned_wide_integer (pp, TREE_INT_CST_LOW (i));\n+    pp_unsigned_wide_integer (pp, tree_to_uhwi (i));\n   else\n     {\n       unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (i);"}, {"sha": "c264cdaee78838ed0e95414ab9ae6032929bf00c", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -2763,10 +2763,10 @@ epiphany_special_round_type_align (tree type, unsigned computed,\n       offset = bit_position (field);\n       size = DECL_SIZE (field);\n       if (!tree_fits_uhwi_p (offset) || !tree_fits_uhwi_p (size)\n-\t  || TREE_INT_CST_LOW (offset) >= try_align\n-\t  || TREE_INT_CST_LOW (size) >= try_align)\n+\t  || tree_to_uhwi (offset) >= try_align\n+\t  || tree_to_uhwi (size) >= try_align)\n \treturn try_align;\n-      total = TREE_INT_CST_LOW (offset) + TREE_INT_CST_LOW (size);\n+      total = tree_to_uhwi (offset) + tree_to_uhwi (size);\n       if (total > max)\n \tmax = total;\n     }"}, {"sha": "ad1533e601d88aef6dad3380ff672f01661e54ce", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -2926,7 +2926,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t  if (TREE_CODE (TREE_TYPE (decl)) == INTEGER_TYPE\n \t      || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n \t    {\n-\t      HOST_WIDE_INT ival = TREE_INT_CST_LOW (DECL_INITIAL (decl));\n+\t      HOST_WIDE_INT ival = tree_to_shwi (DECL_INITIAL (decl));\n \n \t      dbxout_begin_complex_stabs ();\n \t      dbxout_symbol_name (decl, NULL, 'c');"}, {"sha": "968438b2fbac32438114556331bcbc03fa54c4e1", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -9662,7 +9662,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    if (offset == 0\n \t\t&& tree_fits_uhwi_p (TYPE_SIZE (type))\n \t\t&& (GET_MODE_BITSIZE (DECL_MODE (base))\n-\t\t    == TREE_INT_CST_LOW (TYPE_SIZE (type))))\n+\t\t    == tree_to_uhwi (TYPE_SIZE (type))))\n \t      return expand_expr (build1 (VIEW_CONVERT_EXPR, type, base),\n \t\t\t\t  target, tmode, modifier);\n \t    if (TYPE_MODE (type) == BLKmode)"}, {"sha": "f41ea383424364893cde96f23c085efe83922a15", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -6648,10 +6648,10 @@ fold_single_bit_test (location_t loc, enum tree_code code,\n \t  && TREE_CODE (TREE_OPERAND (inner, 1)) == INTEGER_CST\n \t  && tree_fits_uhwi_p (TREE_OPERAND (inner, 1))\n \t  && bitnum < TYPE_PRECISION (type)\n-\t  && (TREE_INT_CST_LOW (TREE_OPERAND (inner, 1))\n+\t  && (tree_to_uhwi (TREE_OPERAND (inner, 1))\n \t      < (unsigned) (TYPE_PRECISION (type) - bitnum)))\n \t{\n-\t  bitnum += TREE_INT_CST_LOW (TREE_OPERAND (inner, 1));\n+\t  bitnum += tree_to_uhwi (TREE_OPERAND (inner, 1));\n \t  inner = TREE_OPERAND (inner, 0);\n \t}\n \n@@ -7264,8 +7264,8 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n       HOST_WIDE_INT int01, int11, tmp;\n       bool swap = false;\n       tree maybe_same;\n-      int01 = TREE_INT_CST_LOW (arg01);\n-      int11 = TREE_INT_CST_LOW (arg11);\n+      int01 = tree_to_shwi (arg01);\n+      int11 = tree_to_shwi (arg11);\n \n       /* Move min of absolute values to int11.  */\n       if (absu_hwi (int01) < absu_hwi (int11))\n@@ -12019,7 +12019,7 @@ fold_binary_loc (location_t loc,\n       if (POINTER_TYPE_P (TREE_TYPE (arg0)) && tree_fits_uhwi_p (arg1))\n \t{\n \t  unsigned HOST_WIDE_INT modulus, residue;\n-\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (arg1);\n+\t  unsigned HOST_WIDE_INT low = tree_to_uhwi (arg1);\n \n \t  modulus = get_pointer_modulus_and_residue (arg0, &residue,\n \t\t\t\t\t\t     integer_onep (arg1));\n@@ -12650,12 +12650,12 @@ fold_binary_loc (location_t loc,\n \n       /* Turn (a OP c1) OP c2 into a OP (c1+c2).  */\n       if (TREE_CODE (op0) == code && tree_fits_uhwi_p (arg1)\n-\t  && TREE_INT_CST_LOW (arg1) < prec\n+\t  && tree_to_uhwi (arg1) < prec\n \t  && tree_fits_uhwi_p (TREE_OPERAND (arg0, 1))\n-\t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < prec)\n+\t  && tree_to_uhwi (TREE_OPERAND (arg0, 1)) < prec)\n \t{\n-\t  unsigned int low = (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n-\t\t\t      + TREE_INT_CST_LOW (arg1));\n+\t  unsigned int low = (tree_to_uhwi (TREE_OPERAND (arg0, 1))\n+\t\t\t      + tree_to_uhwi (arg1));\n \n \t  /* Deal with a OP (c1 + c2) being undefined but (a OP c1) OP c2\n \t     being well defined.  */"}, {"sha": "891d47c3676d80c07f94e8e04e7152c7cc7e6f62", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -3067,7 +3067,7 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n \t\t  doffset.fits_shwi ()))\n \t    {\n \t      offset = doffset.to_shwi ();\n-\t      offset *= TREE_INT_CST_LOW (unit_size);\n+\t      offset *= tree_to_uhwi (unit_size);\n \t      offset *= BITS_PER_UNIT;\n \n \t      base = TREE_OPERAND (t, 0);\n@@ -3083,7 +3083,7 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n \t      if (!ctor)\n \t\treturn NULL_TREE;\n \t      return fold_ctor_reference (TREE_TYPE (t), ctor, offset,\n-\t\t\t\t\t  TREE_INT_CST_LOW (unit_size)\n+\t\t\t\t\t  tree_to_uhwi (unit_size)\n \t\t\t\t\t  * BITS_PER_UNIT,\n \t\t\t\t\t  base);\n \t    }"}, {"sha": "3ac9e4d334788d5dc311a5da7ff37da80584d672", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -613,7 +613,7 @@ stmt_cost (gimple gs, bool speed)\n       rhs2 = gimple_assign_rhs2 (gs);\n \n       if (tree_fits_shwi_p (rhs2))\n-\treturn mult_by_coeff_cost (TREE_INT_CST_LOW (rhs2), lhs_mode, speed);\n+\treturn mult_by_coeff_cost (tree_to_shwi (rhs2), lhs_mode, speed);\n \n       gcc_assert (TREE_CODE (rhs1) != INTEGER_CST);\n       return mul_cost (speed, lhs_mode);"}, {"sha": "5d7e504b2fa7ed7f4e0b2970527397c810ed6924", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -8836,7 +8836,7 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n      type optimizations deduce the value and remove a copy.  */\n   if (tree_fits_shwi_p (fd->loop.step))\n     {\n-      HOST_WIDE_INT step = TREE_INT_CST_LOW (fd->loop.step);\n+      HOST_WIDE_INT step = tree_to_shwi (fd->loop.step);\n       if (step == 1 || step == -1)\n \tcond_code = EQ_EXPR;\n     }"}, {"sha": "791f90dca2b4af38aa12a112a8ef5af8b8cff629", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -305,7 +305,7 @@ delegitimize_mem_from_attrs (rtx x)\n \t      {\n \t\toffset += bitpos / BITS_PER_UNIT;\n \t\tif (toffset)\n-\t\t  offset += TREE_INT_CST_LOW (toffset);\n+\t\t  offset += tree_to_shwi (toffset);\n \t      }\n \t    break;\n \t  }"}, {"sha": "6138b63d2d9fa96cf2d1bc00ed6f458f40864732", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1625,7 +1625,7 @@ compute_record_mode (tree type)\n      does not apply to unions.  */\n   if (TREE_CODE (type) == RECORD_TYPE && mode != VOIDmode\n       && tree_fits_uhwi_p (TYPE_SIZE (type))\n-      && GET_MODE_BITSIZE (mode) == TREE_INT_CST_LOW (TYPE_SIZE (type)))\n+      && GET_MODE_BITSIZE (mode) == tree_to_uhwi (TYPE_SIZE (type)))\n     SET_TYPE_MODE (type, mode);\n   else\n     SET_TYPE_MODE (type, mode_for_size_tree (TYPE_SIZE (type), MODE_INT, 1));"}, {"sha": "f64fc52065650cae09feadf7ce3bb942657a9c8d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -2715,7 +2715,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t    }\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t      && (TYPE_PRECISION (TREE_TYPE (t))\n-\t\t  != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n+\t\t  != tree_to_uhwi (TREE_OPERAND (t, 1))))\n \t    {\n \t      error (\"integral result type precision does not match \"\n \t\t     \"field size of BIT_FIELD_REF\");\n@@ -2724,7 +2724,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  else if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t\t   && TYPE_MODE (TREE_TYPE (t)) != BLKmode\n \t\t   && (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (t)))\n-\t\t       != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n+\t\t       != tree_to_uhwi (TREE_OPERAND (t, 1))))\n \t    {\n \t      error (\"mode precision of non-integral result does not \"\n \t\t     \"match field size of BIT_FIELD_REF\");"}, {"sha": "0ecf7a3e1554c0d463a401a24602bb34999e9e2f", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -413,7 +413,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       if (! tree_fits_uhwi_p (size_tree))\n \tbitsize = -1;\n       else\n-\tbitsize = TREE_INT_CST_LOW (size_tree);\n+\tbitsize = tree_to_uhwi (size_tree);\n     }\n \n   /* Initially, maxsize is the same as the accessed element size.\n@@ -461,8 +461,8 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t\tif (tree_fits_shwi_p (fsize)\n \t\t\t    && tree_fits_shwi_p (ssize)\n \t\t\t    && doffset.fits_shwi ())\n-\t\t\t  maxsize += ((TREE_INT_CST_LOW (ssize)\n-\t\t\t\t       - TREE_INT_CST_LOW (fsize))\n+\t\t\t  maxsize += ((tree_to_shwi (ssize)\n+\t\t\t\t       - tree_to_shwi (fsize))\n \t\t\t\t      * BITS_PER_UNIT\n \t\t\t\t\t- doffset.to_shwi ());\n \t\t\telse\n@@ -480,8 +480,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t    && csize\n \t\t    && tree_fits_uhwi_p (csize)\n \t\t    && bit_offset.fits_shwi ())\n-\t\t  maxsize = TREE_INT_CST_LOW (csize)\n-\t\t\t    - bit_offset.to_shwi ();\n+\t\t  maxsize = tree_to_uhwi (csize) - bit_offset.to_shwi ();\n \t\telse\n \t\t  maxsize = -1;\n \t      }\n@@ -524,8 +523,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t    && asize\n \t\t    && tree_fits_uhwi_p (asize)\n \t\t    && bit_offset.fits_shwi ())\n-\t\t  maxsize = TREE_INT_CST_LOW (asize)\n-\t\t\t    - bit_offset.to_shwi ();\n+\t\t  maxsize = tree_to_uhwi (asize) - bit_offset.to_shwi ();\n \t\telse\n \t\t  maxsize = -1;\n \n@@ -574,7 +572,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t      && (!bit_offset.fits_shwi ()\n \t\t  || !tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp)))\n \t\t  || (bit_offset.to_shwi () + maxsize\n-\t\t      == (HOST_WIDE_INT) TREE_INT_CST_LOW\n+\t\t      == (HOST_WIDE_INT) tree_to_uhwi\n \t\t            (TYPE_SIZE (TREE_TYPE (exp))))))\n \t    maxsize = -1;\n \n@@ -611,7 +609,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       && (!bit_offset.fits_shwi ()\n \t  || !tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp)))\n \t  || (bit_offset.to_shwi () + maxsize\n-\t      == (HOST_WIDE_INT) TREE_INT_CST_LOW\n+\t      == (HOST_WIDE_INT) tree_to_uhwi\n \t           (TYPE_SIZE (TREE_TYPE (exp))))))\n     maxsize = -1;\n \n@@ -635,15 +633,15 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n          base decl.  */\n       if (maxsize == -1\n \t  && tree_fits_uhwi_p (DECL_SIZE (exp)))\n-\tmaxsize = TREE_INT_CST_LOW (DECL_SIZE (exp)) - hbit_offset;\n+\tmaxsize = tree_to_uhwi (DECL_SIZE (exp)) - hbit_offset;\n     }\n   else if (CONSTANT_CLASS_P (exp))\n     {\n       /* If maxsize is unknown adjust it according to the size of the\n          base type constant.  */\n       if (maxsize == -1\n \t  && tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp))))\n-\tmaxsize = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))) - hbit_offset;\n+\tmaxsize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (exp))) - hbit_offset;\n     }\n \n   /* ???  Due to negative offsets in ARRAY_REF we can end up with"}, {"sha": "a18b42dc9e5289c8eb207e3bdb2cb7d6b6e8fa05", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -275,7 +275,7 @@ dump_array_domain (pretty_printer *buffer, tree domain, int spc, int flags)\n       if (min && max\n \t  && integer_zerop (min)\n \t  && tree_fits_shwi_p (max))\n-\tpp_wide_integer (buffer, TREE_INT_CST_LOW (max) + 1);\n+\tpp_wide_integer (buffer, tree_to_shwi (max) + 1);\n       else\n \t{\n \t  if (min)"}, {"sha": "0102f3fe986e0fd6ed4d512e074d9fb198f4097e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1656,12 +1656,12 @@ build_user_friendly_ref_for_offset (tree *res, tree type, HOST_WIDE_INT offset,\n \t      tr_pos = bit_position (fld);\n \t      if (!tr_pos || !tree_fits_uhwi_p (tr_pos))\n \t\tcontinue;\n-\t      pos = TREE_INT_CST_LOW (tr_pos);\n+\t      pos = tree_to_uhwi (tr_pos);\n \t      gcc_assert (TREE_CODE (type) == RECORD_TYPE || pos == 0);\n \t      tr_size = DECL_SIZE (fld);\n \t      if (!tr_size || !tree_fits_uhwi_p (tr_size))\n \t\tcontinue;\n-\t      size = TREE_INT_CST_LOW (tr_size);\n+\t      size = tree_to_uhwi (tr_size);\n \t      if (size == 0)\n \t\t{\n \t\t  if (pos != offset)"}, {"sha": "5eb5ffd33a1342666bc72a633342d05776df87c7", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1886,7 +1886,7 @@ fold_builtin_alloca_with_align (gimple stmt)\n       || !tree_fits_uhwi_p (arg))\n     return NULL_TREE;\n \n-  size = TREE_INT_CST_LOW (arg);\n+  size = tree_to_uhwi (arg);\n \n   /* Heuristic: don't fold large allocas.  */\n   threshold = (unsigned HOST_WIDE_INT)PARAM_VALUE (PARAM_LARGE_STACK_FRAME);"}, {"sha": "476f3a1f286fd9943c4b2d17362fce48cfe9e980", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -4014,15 +4014,15 @@ get_loop_invariant_expr_id (struct ivopts_data *data, tree ubase,\n               tree ind = TREE_OPERAND (usym, 1);\n               if (TREE_CODE (ind) == INTEGER_CST\n                   && tree_fits_shwi_p (ind)\n-                  && TREE_INT_CST_LOW (ind) == 0)\n+                  && tree_to_shwi (ind) == 0)\n                 usym = TREE_OPERAND (usym, 0);\n             }\n           if (TREE_CODE (csym) == ARRAY_REF)\n             {\n               tree ind = TREE_OPERAND (csym, 1);\n               if (TREE_CODE (ind) == INTEGER_CST\n                   && tree_fits_shwi_p (ind)\n-                  && TREE_INT_CST_LOW (ind) == 0)\n+                  && tree_to_shwi (ind) == 0)\n                 csym = TREE_OPERAND (csym, 0);\n             }\n           if (operand_equal_p (usym, csym, 0))"}, {"sha": "21750312673bc2740faa212c83df19519d37bda1", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1508,7 +1508,7 @@ execute_cse_sincos (void)\n \t\t      if (!tree_fits_shwi_p (arg1))\n \t\t\tbreak;\n \n-\t\t      n = TREE_INT_CST_LOW (arg1);\n+\t\t      n = tree_to_shwi (arg1);\n \t\t      result = gimple_expand_builtin_powi (&gsi, loc, arg0, n);\n \t\t    }\n "}, {"sha": "188143269f51bbef749831bb4aeafee6a5555b64", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -1983,9 +1983,9 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n \t  || !tree_fits_uhwi_p (tree_size2))\n \tcontinue;\n \n-      offset1 = TREE_INT_CST_LOW (tree_offset1);\n-      offset2 = TREE_INT_CST_LOW (tree_offset2);\n-      size2 = TREE_INT_CST_LOW (tree_size2);\n+      offset1 = tree_to_uhwi (tree_offset1);\n+      offset2 = tree_to_uhwi (tree_offset2);\n+      size2 = tree_to_uhwi (tree_size2);\n       align1 = DECL_ALIGN (field1) % param_align_bits;\n \n       if (offset1 % BITS_PER_UNIT != 0)"}, {"sha": "a67720139e96cd88ee4dcce38c06d302ef839c25", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -3641,7 +3641,7 @@ acceptable_pow_call (gimple stmt, tree *base, HOST_WIDE_INT *exponent)\n       if (!tree_fits_shwi_p (arg1))\n \treturn false;\n \n-      *exponent = TREE_INT_CST_LOW (arg1);\n+      *exponent = tree_to_shwi (arg1);\n       break;\n \n     default:"}, {"sha": "1b9514e2108896d71be9231f84c4470d99b5fcc5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -786,7 +786,7 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t  /* The base address gets its own vn_reference_op_s structure.  */\n \t  temp.op0 = TREE_OPERAND (ref, 1);\n \t  if (tree_fits_shwi_p (TREE_OPERAND (ref, 1)))\n-\t    temp.off = TREE_INT_CST_LOW (TREE_OPERAND (ref, 1));\n+\t    temp.off = tree_to_shwi (TREE_OPERAND (ref, 1));\n \t  break;\n \tcase BIT_FIELD_REF:\n \t  /* Record bits and position.  */\n@@ -950,7 +950,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n       if (!tree_fits_uhwi_p (size_tree))\n \tsize = -1;\n       else\n-\tsize = TREE_INT_CST_LOW (size_tree);\n+\tsize = tree_to_uhwi (size_tree);\n     }\n \n   /* Initially, maxsize is the same as the accessed element size.\n@@ -1021,7 +1021,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t      max_size = -1;\n \t    else\n \t      {\n-\t\toffset += (TREE_INT_CST_LOW (DECL_FIELD_OFFSET (field))\n+\t\toffset += (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n \t\t\t   * BITS_PER_UNIT);\n \t\toffset += TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field));\n \t      }\n@@ -1037,9 +1037,9 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t    max_size = -1;\n \t  else\n \t    {\n-\t      HOST_WIDE_INT hindex = TREE_INT_CST_LOW (op->op0);\n-\t      hindex -= TREE_INT_CST_LOW (op->op1);\n-\t      hindex *= TREE_INT_CST_LOW (op->op2);\n+\t      HOST_WIDE_INT hindex = tree_to_shwi (op->op0);\n+\t      hindex -= tree_to_shwi (op->op1);\n+\t      hindex *= tree_to_shwi (op->op2);\n \t      hindex *= BITS_PER_UNIT;\n \t      offset += hindex;\n \t    }\n@@ -1168,7 +1168,7 @@ vn_reference_fold_indirect (vec<vn_reference_op_s> *ops,\n       mem_op->op0 = double_int_to_tree (TREE_TYPE (mem_op->op0), off);\n       op->op0 = build_fold_addr_expr (addr_base);\n       if (tree_fits_shwi_p (mem_op->op0))\n-\tmem_op->off = TREE_INT_CST_LOW (mem_op->op0);\n+\tmem_op->off = tree_to_shwi (mem_op->op0);\n       else\n \tmem_op->off = -1;\n     }\n@@ -1233,7 +1233,7 @@ vn_reference_maybe_forwprop_address (vec<vn_reference_op_s> *ops,\n \n   mem_op->op0 = double_int_to_tree (TREE_TYPE (mem_op->op0), off);\n   if (tree_fits_shwi_p (mem_op->op0))\n-    mem_op->off = TREE_INT_CST_LOW (mem_op->op0);\n+    mem_op->off = tree_to_shwi (mem_op->op0);\n   else\n     mem_op->off = -1;\n   if (TREE_CODE (op->op0) == SSA_NAME)\n@@ -1604,9 +1604,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       tree base2;\n       HOST_WIDE_INT offset2, size2, maxsize2;\n       base2 = get_ref_base_and_extent (ref2, &offset2, &size2, &maxsize2);\n-      size2 = TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 2)) * 8;\n+      size2 = tree_to_uhwi (gimple_call_arg (def_stmt, 2)) * 8;\n       if ((unsigned HOST_WIDE_INT)size2 / 8\n-\t  == TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 2))\n+\t  == tree_to_uhwi (gimple_call_arg (def_stmt, 2))\n \t  && maxsize2 != -1\n \t  && operand_equal_p (base, base2, 0)\n \t  && offset2 <= offset\n@@ -1876,7 +1876,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t      && tree_fits_uhwi_p (TREE_OPERAND (tem, 1)))\n \t    {\n \t      lhs = TREE_OPERAND (tem, 0);\n-\t      lhs_offset += TREE_INT_CST_LOW (TREE_OPERAND (tem, 1));\n+\t      lhs_offset += tree_to_uhwi (TREE_OPERAND (tem, 1));\n \t    }\n \t  else if (DECL_P (tem))\n \t    lhs = build_fold_addr_expr (tem);\n@@ -1902,7 +1902,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t      && tree_fits_uhwi_p (TREE_OPERAND (tem, 1)))\n \t    {\n \t      rhs = TREE_OPERAND (tem, 0);\n-\t      rhs_offset += TREE_INT_CST_LOW (TREE_OPERAND (tem, 1));\n+\t      rhs_offset += tree_to_uhwi (TREE_OPERAND (tem, 1));\n \t    }\n \t  else if (DECL_P (tem))\n \t    rhs = build_fold_addr_expr (tem);\n@@ -1913,7 +1913,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  && TREE_CODE (rhs) != ADDR_EXPR)\n \treturn (void *)-1;\n \n-      copy_size = TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 2));\n+      copy_size = tree_to_uhwi (gimple_call_arg (def_stmt, 2));\n \n       /* The bases of the destination and the references have to agree.  */\n       if ((TREE_CODE (base) != MEM_REF\n@@ -1929,7 +1929,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       /* And the access has to be contained within the memcpy destination.  */\n       at = offset / BITS_PER_UNIT;\n       if (TREE_CODE (base) == MEM_REF)\n-\tat += TREE_INT_CST_LOW (TREE_OPERAND (base, 1));\n+\tat += tree_to_uhwi (TREE_OPERAND (base, 1));\n       if (lhs_offset > at\n \t  || lhs_offset + copy_size < at + maxsize / BITS_PER_UNIT)\n \treturn (void *)-1;\n@@ -3237,7 +3237,7 @@ simplify_binary_expression (gimple stmt)\n       && is_gimple_min_invariant (op0))\n     return build_invariant_address (TREE_TYPE (op0),\n \t\t\t\t    TREE_OPERAND (op0, 0),\n-\t\t\t\t    TREE_INT_CST_LOW (op1));\n+\t\t\t\t    tree_to_uhwi (op1));\n \n   /* Avoid folding if nothing changed.  */\n   if (op0 == gimple_assign_rhs1 (stmt)"}, {"sha": "6174dcf8ecf7231d6a382c62fd2d23a7fe20ae26", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -3002,8 +3002,8 @@ bitpos_of_field (const tree fdecl)\n       || !tree_fits_shwi_p (DECL_FIELD_BIT_OFFSET (fdecl)))\n     return -1;\n \n-  return (TREE_INT_CST_LOW (DECL_FIELD_OFFSET (fdecl)) * BITS_PER_UNIT\n-\t  + TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (fdecl)));\n+  return (tree_to_shwi (DECL_FIELD_OFFSET (fdecl)) * BITS_PER_UNIT\n+\t  + tree_to_shwi (DECL_FIELD_BIT_OFFSET (fdecl)));\n }\n \n \n@@ -3434,7 +3434,7 @@ get_constraint_for_1 (tree t, vec<ce_s> *results, bool address_p,\n \t\t{\n \t\t  unsigned HOST_WIDE_INT size;\n \t\t  if (tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (t))))\n-\t\t    size = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (t)));\n+\t\t    size = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (t)));\n \t\t  else\n \t\t    size = -1;\n \t\t  for (; curr; curr = vi_next (curr))\n@@ -5364,15 +5364,15 @@ push_fields_onto_fieldstack (tree type, vec<fieldoff_s> *fieldstack,\n \t\t&& !pair->has_unknown_size\n \t\t&& pair->offset + (HOST_WIDE_INT)pair->size == offset + foff)\n \t      {\n-\t\tpair->size += TREE_INT_CST_LOW (DECL_SIZE (field));\n+\t\tpair->size += tree_to_uhwi (DECL_SIZE (field));\n \t      }\n \t    else\n \t      {\n \t\tfieldoff_s e;\n \t\te.offset = offset + foff;\n \t\te.has_unknown_size = has_unknown_size;\n \t\tif (!has_unknown_size)\n-\t\t  e.size = TREE_INT_CST_LOW (DECL_SIZE (field));\n+\t\t  e.size = tree_to_uhwi (DECL_SIZE (field));\n \t\telse\n \t\t  e.size = -1;\n \t\te.must_have_pointers = must_have_pointers_p;\n@@ -5689,15 +5689,15 @@ create_variable_info_for_1 (tree decl, const char *name)\n       vi = new_var_info (decl, name);\n       vi->offset = 0;\n       vi->may_have_pointers = true;\n-      vi->fullsize = TREE_INT_CST_LOW (declsize);\n+      vi->fullsize = tree_to_uhwi (declsize);\n       vi->size = vi->fullsize;\n       vi->is_full_var = true;\n       fieldstack.release ();\n       return vi;\n     }\n \n   vi = new_var_info (decl, name);\n-  vi->fullsize = TREE_INT_CST_LOW (declsize);\n+  vi->fullsize = tree_to_uhwi (declsize);\n   for (i = 0, newvi = vi;\n        fieldstack.iterate (i, &fo);\n        ++i, newvi = vi_next (newvi))"}, {"sha": "42b0d22ec7207c293b109ef8ba2fdc2a4f8292f3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -783,7 +783,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n       return false;\n     }\n \n-  SET_DR_MISALIGNMENT (dr, TREE_INT_CST_LOW (misalign));\n+  SET_DR_MISALIGNMENT (dr, tree_to_uhwi (misalign));\n \n   if (dump_enabled_p ())\n     {\n@@ -965,7 +965,7 @@ not_size_aligned (tree exp)\n   if (!tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp))))\n     return true;\n \n-  return (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp)))\n+  return (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (exp)))\n \t  > get_object_alignment (exp));\n }\n \n@@ -2571,13 +2571,13 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n \n \t  /* If init_b == init_a + the size of the type * k, we have an\n \t     interleaving, and DRA is accessed before DRB.  */\n-\t  HOST_WIDE_INT type_size_a = TREE_INT_CST_LOW (sza);\n+\t  HOST_WIDE_INT type_size_a = tree_to_uhwi (sza);\n \t  if ((init_b - init_a) % type_size_a != 0)\n \t    break;\n \n \t  /* The step (if not zero) is greater than the difference between\n \t     data-refs' inits.  This splits groups into suitable sizes.  */\n-\t  HOST_WIDE_INT step = TREE_INT_CST_LOW (DR_STEP (dra));\n+\t  HOST_WIDE_INT step = tree_to_shwi (DR_STEP (dra));\n \t  if (step != 0 && step <= (init_b - init_a))\n \t    break;\n \n@@ -2883,8 +2883,8 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t      || !tree_fits_shwi_p (dr_a2->offset))\n \t    continue;\n \n-\t  HOST_WIDE_INT diff = TREE_INT_CST_LOW (dr_a2->offset) -\n-\t\t\t       TREE_INT_CST_LOW (dr_a1->offset);\n+\t  HOST_WIDE_INT diff = (tree_to_shwi (dr_a2->offset)\n+\t\t\t\t- tree_to_shwi (dr_a1->offset));\n \n \n \t  /* Now we check if the following condition is satisfied:"}, {"sha": "1634d7fa7f5e552bfe1dec2baaf95b335e98b0b8", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1ce45339aff6bf08e0ed3224000661ff25f473/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=eb1ce45339aff6bf08e0ed3224000661ff25f473", "patch": "@@ -389,7 +389,7 @@ typedef struct _loop_vec_info {\n \n #define NITERS_KNOWN_P(n)                     \\\n (tree_fits_shwi_p ((n))                        \\\n-&& TREE_INT_CST_LOW ((n)) > 0)\n+&& tree_to_shwi ((n)) > 0)\n \n #define LOOP_VINFO_NITERS_KNOWN_P(L)          \\\n NITERS_KNOWN_P ((L)->num_iters)"}]}