{"sha": "83f83ddfe0fe41c9b553850d4ababd5089df8332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmODNkZGZlMGZlNDFjOWI1NTM4NTBkNGFiYWJkNTA4OWRmODMzMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-11T20:19:08Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-23T19:07:10Z"}, "message": "c, c++: Implement -Wsizeof-array-div [PR91741]\n\nThis patch implements a new warning, -Wsizeof-array-div.  It warns about\ncode like\n\n  int arr[10];\n  sizeof (arr) / sizeof (short);\n\nwhere we have a division of two sizeof expressions, where the first\nargument is an array, and the second sizeof does not equal the size\nof the array element.  See e.g. <https://www.viva64.com/en/examples/v706/>.\n\nClang makes it possible to suppress the warning by parenthesizing the\nsecond sizeof like this:\n\n  sizeof (arr) / (sizeof (short));\n\nso I followed suit.  In the C++ FE this was rather easy, because\nfinish_parenthesized_expr already set TREE_NO_WARNING.  In the C FE\nI've added a new tree code, PAREN_SIZEOF_EXPR, to discern between the\nnon-() and () versions.\n\nThis warning is enabled by -Wall.  An example of the output:\n\nx.c:5:23: warning: expression does not compute the number of elements in this array; element type is \u2018int\u2019, not \u2018short int\u2019 [-Wsizeof-array-div]\n    5 |   return sizeof (arr) / sizeof (short);\n      |          ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\nx.c:5:25: note: add parentheses around \u2018sizeof (short int)\u2019 to silence this warning\n    5 |   return sizeof (arr) / sizeof (short);\n      |                         ^~~~~~~~~~~~~~\n      |                         (             )\nx.c:4:7: note: array \u2018arr\u2019 declared here\n    4 |   int arr[10];\n      |       ^~~\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/91741\n\t* c-common.c (verify_tree): Handle PAREN_SIZEOF_EXPR.\n\t(c_common_init_ts): Likewise.\n\t* c-common.def (PAREN_SIZEOF_EXPR): New tree code.\n\t* c-common.h (maybe_warn_sizeof_array_div): Declare.\n\t* c-warn.c (sizeof_pointer_memaccess_warning): Unwrap NOP_EXPRs.\n\t(maybe_warn_sizeof_array_div): New function.\n\t* c.opt (Wsizeof-array-div): New option.\n\ngcc/c/ChangeLog:\n\n\tPR c++/91741\n\t* c-parser.c (c_parser_binary_expression): Implement -Wsizeof-array-div.\n\t(c_parser_postfix_expression): Set PAREN_SIZEOF_EXPR.\n\t(c_parser_expr_list): Handle PAREN_SIZEOF_EXPR like SIZEOF_EXPR.\n\t* c-tree.h (char_type_p): Declare.\n\t* c-typeck.c (char_type_p): No longer static.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91741\n\t* typeck.c (cp_build_binary_op): Implement -Wsizeof-array-div.\n\ngcc/ChangeLog:\n\n\tPR c++/91741\n\t* doc/invoke.texi: Document -Wsizeof-array-div.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/91741\n\t* c-c++-common/Wsizeof-pointer-div.c: Add dg-warning.\n\t* c-c++-common/Wsizeof-array-div1.c: New test.\n\t* g++.dg/warn/Wsizeof-array-div1.C: New test.\n\t* g++.dg/warn/Wsizeof-array-div2.C: New test.", "tree": {"sha": "5c5f458450f7b65c5c50e64a0b9603d01de6b681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c5f458450f7b65c5c50e64a0b9603d01de6b681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f83ddfe0fe41c9b553850d4ababd5089df8332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f83ddfe0fe41c9b553850d4ababd5089df8332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f83ddfe0fe41c9b553850d4ababd5089df8332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f83ddfe0fe41c9b553850d4ababd5089df8332/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757ba6653c2699761c2243e0194749a6695112d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757ba6653c2699761c2243e0194749a6695112d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757ba6653c2699761c2243e0194749a6695112d8"}], "stats": {"total": 248, "additions": 226, "deletions": 22}, "files": [{"sha": "2c85634e177eda0aed5f227269697391bb06fd78", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -1854,6 +1854,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n     {\n     case CONSTRUCTOR:\n     case SIZEOF_EXPR:\n+    case PAREN_SIZEOF_EXPR:\n       return;\n \n     case COMPOUND_EXPR:\n@@ -8142,6 +8143,7 @@ void\n c_common_init_ts (void)\n {\n   MARK_TS_EXP (SIZEOF_EXPR);\n+  MARK_TS_EXP (PAREN_SIZEOF_EXPR);\n   MARK_TS_EXP (C_MAYBE_CONST_EXPR);\n   MARK_TS_EXP (EXCESS_PRECISION_EXPR);\n   MARK_TS_EXP (BREAK_STMT);"}, {"sha": "3d3e4979b4132081bd83c35bf459d7c79380c0c3", "filename": "gcc/c-family/c-common.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.def?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -55,6 +55,9 @@ DEFTREECODE (USERDEF_LITERAL, \"userdef_literal\", tcc_exceptional, 3)\n    or for the purpose of -Wsizeof-pointer-memaccess warning.  */\n DEFTREECODE (SIZEOF_EXPR, \"sizeof_expr\", tcc_expression, 1)\n \n+/* Like above, but enclosed in parentheses.  Used to suppress warnings.  */\n+DEFTREECODE (PAREN_SIZEOF_EXPR, \"paren_sizeof_expr\", tcc_expression, 1)\n+\n /* Used to represent a `for' statement. The operands are\n    FOR_INIT_STMT, FOR_COND, FOR_EXPR, FOR_BODY, and FOR_SCOPE,\n    respectively.  */"}, {"sha": "bb38e6c76a428950f33ccf18e538741791425760", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -1373,6 +1373,7 @@ extern void warn_for_omitted_condop (location_t, tree);\n extern bool warn_for_restrict (unsigned, tree *, unsigned);\n extern void warn_for_address_or_pointer_of_packed_member (tree, tree);\n extern void warn_parm_array_mismatch (location_t, tree, tree);\n+extern void maybe_warn_sizeof_array_div (location_t, tree, tree, tree, tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "68b093e0d467ac477aecedd771475eea58b94135", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -3665,3 +3665,50 @@ warn_parm_array_mismatch (location_t origloc, tree fndecl, tree newparms)\n \tinform (origloc, \"previously declared as %s\", curparmstr.c_str ());\n     }\n }\n+\n+/* Warn about divisions of two sizeof operators when the first one is applied\n+   to an array and the divisor does not equal the size of the array element.\n+   For instance:\n+\n+     sizeof (ARR) / sizeof (OP)\n+\n+   ARR is the array argument of the first sizeof, ARR_TYPE is its ARRAY_TYPE.\n+   OP1 is the whole second SIZEOF_EXPR, or its argument; TYPE1 is the type\n+   of the second argument.  */\n+\n+void\n+maybe_warn_sizeof_array_div (location_t loc, tree arr, tree arr_type,\n+\t\t\t     tree op1, tree type1)\n+{\n+  tree elt_type = TREE_TYPE (arr_type);\n+\n+  if (!warn_sizeof_array_div\n+      /* Don't warn on multidimensional arrays.  */\n+      || TREE_CODE (elt_type) == ARRAY_TYPE)\n+    return;\n+\n+  if (!tree_int_cst_equal (TYPE_SIZE (elt_type), TYPE_SIZE (type1)))\n+    {\n+      auto_diagnostic_group d;\n+      if (warning_at (loc, OPT_Wsizeof_array_div,\n+\t\t      \"expression does not compute the number of \"\n+\t\t      \"elements in this array; element type is \"\n+\t\t      \"%qT, not %qT\", elt_type, type1))\n+\t{\n+\t  if (EXPR_HAS_LOCATION (op1))\n+\t    {\n+\t      location_t op1_loc = EXPR_LOCATION (op1);\n+\t      gcc_rich_location richloc (op1_loc);\n+\t      richloc.add_fixit_insert_before (op1_loc, \"(\");\n+\t      richloc.add_fixit_insert_after (op1_loc, \")\");\n+\t      inform (&richloc, \"add parentheses around %qE to \"\n+\t\t      \"silence this warning\", op1);\n+\t    }\n+\t  else\n+\t    inform (loc, \"add parentheses around the second %<sizeof%> \"\n+\t\t    \"to silence this warning\");\n+\t  if (DECL_P (arr))\n+\t    inform (DECL_SOURCE_LOCATION (arr), \"array %qD declared here\", arr);\n+\t}\n+    }\n+}"}, {"sha": "1009defbf168c96049d15291b076751589ddf81a", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -816,6 +816,11 @@ Wsizeof-pointer-div\n C ObjC C++ ObjC++ Var(warn_sizeof_pointer_div) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.\n \n+Wsizeof-array-div\n+C ObjC C++ ObjC++ Var(warn_sizeof_array_div) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about divisions of two sizeof operators when the first one is applied\n+to an array and the divisor does not equal the size of the array element.\n+\n Wsizeof-pointer-memaccess\n C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious length parameters to certain string functions if the argument uses sizeof."}, {"sha": "b6a7ef4c92bdd33b7afb7271ba77a40519b45fb0", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -7876,7 +7876,7 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n     enum tree_code op;\n     /* The source location of this operation.  */\n     location_t loc;\n-    /* The sizeof argument if expr.original_code == SIZEOF_EXPR.  */\n+    /* The sizeof argument if expr.original_code == {PAREN_,}SIZEOF_EXPR.  */\n     tree sizeof_arg;\n   } stack[NUM_PRECS];\n   int sp;\n@@ -7894,9 +7894,11 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n \tc_inhibit_evaluation_warnings -= (stack[sp - 1].expr.value\t      \\\n \t\t\t\t\t  == truthvalue_true_node);\t      \\\n \tbreak;\t\t\t\t\t\t\t\t      \\\n-      case TRUNC_DIV_EXPR: \t\t\t\t\t\t      \\\n-\tif (stack[sp - 1].expr.original_code == SIZEOF_EXPR\t\t      \\\n-\t    && stack[sp].expr.original_code == SIZEOF_EXPR)\t\t      \\\n+      case TRUNC_DIV_EXPR:\t\t\t\t\t\t      \\\n+\tif ((stack[sp - 1].expr.original_code == SIZEOF_EXPR\t\t      \\\n+\t     || stack[sp - 1].expr.original_code == PAREN_SIZEOF_EXPR)\t      \\\n+\t    && (stack[sp].expr.original_code == SIZEOF_EXPR\t\t      \\\n+\t\t|| stack[sp].expr.original_code == PAREN_SIZEOF_EXPR))\t      \\\n \t  {\t\t\t\t\t\t\t\t      \\\n \t    tree type0 = stack[sp - 1].sizeof_arg;\t\t\t      \\\n \t    tree type1 = stack[sp].sizeof_arg;\t\t\t\t      \\\n@@ -7910,18 +7912,23 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n \t\t&& !(TREE_CODE (first_arg) == PARM_DECL\t\t\t      \\\n \t\t     && C_ARRAY_PARAMETER (first_arg)\t\t\t      \\\n \t\t     && warn_sizeof_array_argument))\t\t\t      \\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tauto_diagnostic_group d;\t\t\t\t\t\\\n-\t\tif (warning_at (stack[sp].loc, OPT_Wsizeof_pointer_div, \\\n-\t\t\t\t  \"division %<sizeof (%T) / sizeof (%T)%> \" \\\n-\t\t\t\t  \"does not compute the number of array \" \\\n-\t\t\t\t  \"elements\",\t\t\t\t\\\n-\t\t\t\t  type0, type1))\t\t\t\\\n-\t\t  if (DECL_P (first_arg))\t\t\t\t\\\n-\t\t    inform (DECL_SOURCE_LOCATION (first_arg),\t\t\\\n-\t\t\t      \"first %<sizeof%> operand was declared here\"); \\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\t      \\\n+\t\tauto_diagnostic_group d;\t\t\t\t      \\\n+\t\tif (warning_at (stack[sp].loc, OPT_Wsizeof_pointer_div,\t      \\\n+\t\t\t\t  \"division %<sizeof (%T) / sizeof (%T)%> \"   \\\n+\t\t\t\t  \"does not compute the number of array \"     \\\n+\t\t\t\t  \"elements\",\t\t\t\t      \\\n+\t\t\t\t  type0, type1))\t\t\t      \\\n+\t\t  if (DECL_P (first_arg))\t\t\t\t      \\\n+\t\t    inform (DECL_SOURCE_LOCATION (first_arg),\t\t      \\\n+\t\t\t      \"first %<sizeof%> operand was declared here\");  \\\n+\t      }\t\t\t\t\t\t\t\t      \\\n+\t    else if (TREE_CODE (type0) == ARRAY_TYPE\t\t\t      \\\n+\t\t     && !char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type0)))  \\\n+\t\t     && stack[sp].expr.original_code != PAREN_SIZEOF_EXPR)    \\\n+\t      maybe_warn_sizeof_array_div (stack[sp].loc, first_arg, type0,   \\\n+\t\t\t\t\t   stack[sp].sizeof_arg, type1);      \\\n+\t  }\t\t\t\t\t\t\t\t      \\\n \tbreak;\t\t\t\t\t\t\t\t      \\\n       default:\t\t\t\t\t\t\t\t      \\\n \tbreak;\t\t\t\t\t\t\t\t      \\\n@@ -9177,6 +9184,9 @@ c_parser_postfix_expression (c_parser *parser)\n \t  if (expr.original_code != C_MAYBE_CONST_EXPR\n \t      && expr.original_code != SIZEOF_EXPR)\n \t    expr.original_code = ERROR_MARK;\n+\t  /* Remember that we saw ( ) around the sizeof.  */\n+\t  if (expr.original_code == SIZEOF_EXPR)\n+\t    expr.original_code = PAREN_SIZEOF_EXPR;\n \t  /* Don't change EXPR.ORIGINAL_TYPE.  */\n \t  location_t loc_close_paren = c_parser_peek_token (parser)->location;\n \t  set_c_expr_source_range (&expr, loc_open_paren, loc_close_paren);\n@@ -10792,7 +10802,8 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   if (locations)\n     locations->safe_push (expr.get_location ());\n   if (sizeof_arg != NULL\n-      && expr.original_code == SIZEOF_EXPR)\n+      && (expr.original_code == SIZEOF_EXPR\n+\t  || expr.original_code == PAREN_SIZEOF_EXPR))\n     {\n       sizeof_arg[0] = c_last_sizeof_arg;\n       sizeof_arg_loc[0] = c_last_sizeof_loc;\n@@ -10815,7 +10826,8 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n \tlocations->safe_push (expr.get_location ());\n       if (++idx < 3\n \t  && sizeof_arg != NULL\n-\t  && expr.original_code == SIZEOF_EXPR)\n+\t  && (expr.original_code == SIZEOF_EXPR\n+\t      || expr.original_code == PAREN_SIZEOF_EXPR))\n \t{\n \t  sizeof_arg[idx] = c_last_sizeof_arg;\n \t  sizeof_arg_loc[idx] = c_last_sizeof_loc;"}, {"sha": "1f783db7dbca056f059fc08c759959a6b9cf7c59", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -675,6 +675,7 @@ extern location_t c_last_sizeof_loc;\n \n extern struct c_switch *c_switch_stack;\n \n+extern bool char_type_p (tree);\n extern tree c_objc_common_truthvalue_conversion (location_t, tree);\n extern tree require_complete_type (location_t, tree);\n extern bool same_translation_unit_p (const_tree, const_tree);"}, {"sha": "459090e227df22135f032fbdbce8285c6209cb0d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -3719,7 +3719,7 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n \n /* Returns true if TYPE is a character type, *not* including wchar_t.  */\n \n-static bool\n+bool\n char_type_p (tree type)\n {\n   return (type == char_type_node"}, {"sha": "48d34f1132a0e320adb306472b9f3a4254141815", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -4706,14 +4706,13 @@ cp_build_binary_op (const op_location_t &location,\n \t{\n \t  tree type0 = TREE_OPERAND (op0, 0);\n \t  tree type1 = TREE_OPERAND (op1, 0);\n-\t  tree first_arg = type0;\n+\t  tree first_arg = tree_strip_any_location_wrapper (type0);\n \t  if (!TYPE_P (type0))\n \t    type0 = TREE_TYPE (type0);\n \t  if (!TYPE_P (type1))\n \t    type1 = TREE_TYPE (type1);\n \t  if (INDIRECT_TYPE_P (type0) && same_type_p (TREE_TYPE (type0), type1))\n \t    {\n-\t      STRIP_ANY_LOCATION_WRAPPER (first_arg);\n \t      if (!(TREE_CODE (first_arg) == PARM_DECL\n \t\t    && DECL_ARRAY_PARAMETER_P (first_arg)\n \t\t    && warn_sizeof_array_argument)\n@@ -4729,6 +4728,13 @@ cp_build_binary_op (const op_location_t &location,\n \t\t\t      \"first %<sizeof%> operand was declared here\");\n \t\t}\n \t    }\n+\t  else if (TREE_CODE (type0) == ARRAY_TYPE\n+\t\t   && !char_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (type0)))\n+\t\t   /* Set by finish_parenthesized_expr.  */\n+\t\t   && !TREE_NO_WARNING (op1)\n+\t\t   && (complain & tf_warning))\n+\t    maybe_warn_sizeof_array_div (location, first_arg, type0,\n+\t\t\t\t\t op1, non_reference (type1));\n \t}\n \n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE"}, {"sha": "edea7ee25ba6aa6ee8fee9ed1e74acd63d47a81a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -363,6 +363,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-shift-overflow  -Wshift-overflow=@var{n} @gol\n -Wsign-compare  -Wsign-conversion @gol\n -Wno-sizeof-array-argument @gol\n+-Wsizeof-array-div @gol\n -Wsizeof-pointer-div  -Wsizeof-pointer-memaccess @gol\n -Wstack-protector  -Wstack-usage=@var{byte-size}  -Wstrict-aliasing @gol\n -Wstrict-aliasing=n  -Wstrict-overflow  -Wstrict-overflow=@var{n} @gol\n@@ -5301,6 +5302,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wreturn-type  @gol\n -Wsequence-point  @gol\n -Wsign-compare @r{(only in C++)}  @gol\n+-Wsizeof-array-div @gol\n -Wsizeof-pointer-div @gol\n -Wsizeof-pointer-memaccess @gol\n -Wstrict-aliasing  @gol\n@@ -8055,6 +8057,23 @@ real to lower precision real values.  This option is also enabled by\n @opindex Wscalar-storage-order\n Do not warn on suspicious constructs involving reverse scalar storage order.\n \n+@item -Wsizeof-array-div\n+@opindex Wsizeof-array-div\n+@opindex Wno-sizeof-array-div\n+Warn about divisions of two sizeof operators when the first one is applied\n+to an array and the divisor does not equal the size of the array element.\n+In such a case, the computation will not yield the number of elements in the\n+array, which is likely what the user intended.  This warning warns e.g. about\n+@smallexample\n+int fn ()\n+@{\n+  int arr[10];\n+  return sizeof (arr) / sizeof (short);\n+@}\n+@end smallexample\n+\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wsizeof-pointer-div\n @opindex Wsizeof-pointer-div\n @opindex Wno-sizeof-pointer-div"}, {"sha": "84d9a730cba9b0fd2e1ef030cd91aaae7a0836cd", "filename": "gcc/testsuite/c-c++-common/Wsizeof-array-div1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-array-div1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-array-div1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-array-div1.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -0,0 +1,56 @@\n+/* PR c++/91741 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+typedef int T;\n+\n+int\n+fn (int ap[])\n+{\n+  int arr[10];\n+  int *arr2[10];\n+  int *p = &arr[0];\n+  int r = 0;\n+\n+  r += sizeof (arr) / sizeof (*arr);\n+  r += sizeof (arr) / sizeof (p); /* { dg-warning \"expression does not compute\" } */\n+  r += sizeof (arr) / sizeof p; /* { dg-warning \"expression does not compute\" } */\n+  r += sizeof (arr) / (sizeof p);\n+  r += sizeof (arr) / (sizeof (p));\n+  r += sizeof (arr2) / sizeof p;\n+  r += sizeof (arr2) / sizeof (int); /* { dg-warning \"expression does not compute\" } */\n+  r += sizeof (arr2) / sizeof (int *);\n+  r += sizeof (arr2) / sizeof (short *);\n+  r += sizeof (arr) / sizeof (int);\n+  r += sizeof (arr) / sizeof (unsigned int);\n+  r += sizeof (arr) / sizeof (T);\n+  r += sizeof (arr) / sizeof (short); /* { dg-warning \"expression does not compute\" } */\n+  r += sizeof (arr) / (sizeof (short));\n+\n+  r += sizeof (ap) / sizeof (char); /* { dg-warning \".sizeof. on array function parameter\" } */\n+\n+  const char arr3[] = \"foo\";\n+  r += sizeof (arr3) / sizeof(char);\n+  r += sizeof (arr3) / sizeof(int);\n+  r += sizeof (arr3) / sizeof (*arr3);\n+\n+  int arr4[5][5];\n+  r += sizeof (arr4) / sizeof (arr4[0]);\n+  r += sizeof (arr4) / sizeof (*arr4);\n+  r += sizeof (arr4) / sizeof (**arr4);\n+  r += sizeof (arr4) / sizeof (int *);\n+  r += sizeof (arr4) / sizeof (int);\n+  r += sizeof (arr4) / sizeof (short int);\n+\n+  T arr5[10];\n+  r += sizeof (arr5) / sizeof (T);\n+  r += sizeof (arr5) / sizeof (int);\n+  r += sizeof (arr5) / sizeof (short); /* { dg-warning \"expression does not compute\" } */\n+\n+  double arr6[10];\n+  r += sizeof (arr6) / sizeof (double);\n+  r += sizeof (arr6) / sizeof (float); /* { dg-warning \"expression does not compute\" } */\n+  r += sizeof (arr6) / sizeof (*arr6);\n+\n+  return r;\n+}"}, {"sha": "e9bad1fa420a5e153901bd5db436223727ffe113", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-div.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-div.c?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -29,7 +29,7 @@ f2 (void)\n   i += sizeof(array) / sizeof(array[0]);\n   i += (sizeof(array)) / (sizeof(array[0]));\n   i += sizeof(array) / sizeof(int);\n-  i += sizeof(array) / sizeof(char);\n+  i += sizeof(array) / sizeof(char);\t\t/* { dg-warning \"expression does not compute\" } */\n   i += sizeof(*array) / sizeof(char);\n   i += sizeof(array[0]) / sizeof(char);\n   return i;"}, {"sha": "da220cd57ba8bbbe6bffa60cf6ab34fe1e53f9a7", "filename": "gcc/testsuite/g++.dg/warn/Wsizeof-array-div1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div1.C?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/91741\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wall\" }\n+\n+int\n+fn1 ()\n+{\n+  int arr[10];\n+  return sizeof (arr) / sizeof (decltype(arr[0]));\n+}\n+\n+template<typename T, int N>\n+int fn2 (T (&arr)[N])\n+{\n+  return sizeof (arr) / sizeof (T);\n+}\n+\n+template<typename T, int N>\n+int fn3 (T (&arr)[N])\n+{\n+  return sizeof (arr) / sizeof (bool); // { dg-warning \"expression does not compute\" }\n+}\n+\n+template<typename U, int N, typename T>\n+int fn4 (T (&arr)[N])\n+{\n+  return sizeof (arr) / sizeof (U); // { dg-warning \"expression does not compute\" }\n+}\n+\n+void\n+fn ()\n+{\n+  int arr[10];\n+  fn2 (arr);\n+  fn3 (arr);\n+  fn4<short> (arr);\n+}"}, {"sha": "7962c23522c5259686c2d0c343a86386ee189496", "filename": "gcc/testsuite/g++.dg/warn/Wsizeof-array-div2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f83ddfe0fe41c9b553850d4ababd5089df8332/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsizeof-array-div2.C?ref=83f83ddfe0fe41c9b553850d4ababd5089df8332", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91741\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+// From <https://www.viva64.com/en/examples/v706/>.\n+\n+const int kBaudrates[] = { 50, 75, 110 };\n+\n+void\n+foo ()\n+{\n+  for(int i = sizeof(kBaudrates) / sizeof(char*); // { dg-warning \"expression does not compute\" }\n+      --i >= 0;)\n+    {\n+    }\n+}"}]}