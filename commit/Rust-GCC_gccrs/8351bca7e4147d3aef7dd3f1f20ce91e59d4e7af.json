{"sha": "8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM1MWJjYTdlNDE0N2QzYWVmN2RkM2YxZjIwY2U5MWU1OWQ0ZTdhZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-04-09T13:34:33Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-04-09T13:34:33Z"}, "message": "re PR bootstrap/43684 (multiple 'set but not used' errors.)\n\ngcc/\n2010-04-09  Iain Sandoe  <iains@gcc.gnu.org>\n\n\tPR bootstrap/43684\n\t* varasm.c (default_assemble_visibility): Wrap vars that are \n\tset, but unused, by targets without GAS.\n\t* config/rs6000/rs6000.c: (paired_emit_vector_compare): \n\tRemove set, but unused, vars.\n\t(rs6000_legitimize_tls_address): Likewise.\n\t(altivec_expand_dst_builtin): Likewise.\n\t* config/darwin.c (machopic_classify_symbol): Likewise.\n\t(machopic_indirection_name): Likewise.\n\ngcc/fortran/\n2010-04-09  Iain Sandoe  <iains@gcc.gnu.org>\n\n\tPR bootstrap/43684\n\t* gfortranspec.c (lang_specific_driver): Do not expose vars \n\tonly used by HAVE_LD_STATIC_DYNAMIC targets unless compiling\n\tfor such.\n\nFrom-SVN: r158164", "tree": {"sha": "d6784490d07537190dfd92ff5e81eaa2360d99a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6784490d07537190dfd92ff5e81eaa2360d99a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014753cc4d898e889ab04dcdb41bb6cc99645e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014753cc4d898e889ab04dcdb41bb6cc99645e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014753cc4d898e889ab04dcdb41bb6cc99645e69"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "28b7fb92697740b093276ab691a18ad7ae061558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -1,3 +1,15 @@\n+2010-04-09  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tPR bootstrap/43684\n+\t* varasm.c (default_assemble_visibility): Wrap vars that are \n+\tset, but unused, by targets without GAS.\n+\t* config/rs6000/rs6000.c: (paired_emit_vector_compare): \n+\tRemove set, but unused, vars.\n+\t(rs6000_legitimize_tls_address): Likewise.\n+\t(altivec_expand_dst_builtin): Likewise.\n+\t* config/darwin.c (machopic_classify_symbol): Likewise.\n+\t(machopic_indirection_name): Likewise.\n+\t\n 2010-04-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (DWI): New mode iterator."}, {"sha": "9d8f3bc7375691411dede9ba290d9693b262388d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -188,10 +188,8 @@ machopic_symbol_defined_p (rtx sym_ref)\n enum machopic_addr_class\n machopic_classify_symbol (rtx sym_ref)\n {\n-  int flags;\n   bool function_p;\n \n-  flags = SYMBOL_REF_FLAGS (sym_ref);\n   function_p = SYMBOL_REF_FUNCTION_P (sym_ref);\n   if (machopic_symbol_defined_p (sym_ref))\n     return (function_p\n@@ -363,7 +361,6 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n   size_t namelen = strlen (name);\n   machopic_indirection *p;\n   void ** slot;\n-  bool saw_star = false;\n   bool needs_quotes;\n   const char *suffix;\n   const char *prefix = user_label_prefix;\n@@ -386,7 +383,6 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n \n   if (name[0] == '*')\n     {\n-      saw_star = true;\n       prefix = \"\";\n       ++name;\n       --namelen;"}, {"sha": "1360bf4aef9cdb2b3863b1fc087385975908945c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -4183,7 +4183,7 @@ paired_emit_vector_compare (enum rtx_code rcode,\n                             rtx cc_op0, rtx cc_op1)\n {\n   rtx tmp = gen_reg_rtx (V2SFmode);\n-  rtx tmp1, max, min, equal_zero;\n+  rtx tmp1, max, min;\n \n   gcc_assert (TARGET_PAIRED_FLOAT);\n   gcc_assert (GET_MODE (op0) == GET_MODE (op1));\n@@ -4210,8 +4210,8 @@ paired_emit_vector_compare (enum rtx_code rcode,\n       tmp1 = gen_reg_rtx (V2SFmode);\n       max = gen_reg_rtx (V2SFmode);\n       min = gen_reg_rtx (V2SFmode);\n-      equal_zero = gen_reg_rtx (V2SFmode);\n-\n+      gen_reg_rtx (V2SFmode);\n+      \n       emit_insn (gen_subv2sf3 (tmp, cc_op0, cc_op1));\n       emit_insn (gen_selv2sf4\n                  (max, tmp, cc_op0, cc_op1, CONST0_RTX (SFmode)));\n@@ -5412,14 +5412,14 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t      else\n \t\t{\n \t\t  rtx tmp3, mem;\n-\t\t  rtx first, last;\n+\t\t  rtx last;\n \n \t\t  tmp1 = gen_reg_rtx (Pmode);\n \t\t  tmp2 = gen_reg_rtx (Pmode);\n \t\t  tmp3 = gen_reg_rtx (Pmode);\n \t\t  mem = gen_const_mem (Pmode, tmp1);\n \n-\t\t  first = emit_insn (gen_load_toc_v4_PIC_1b (gsym));\n+\t\t  emit_insn (gen_load_toc_v4_PIC_1b (gsym));\n \t\t  emit_move_insn (tmp1,\n \t\t\t\t  gen_rtx_REG (Pmode, LR_REGNO));\n \t\t  emit_move_insn (tmp2, mem);\n@@ -10148,7 +10148,7 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, arg2;\n-  enum machine_mode mode0, mode1, mode2;\n+  enum machine_mode mode0, mode1;\n   rtx pat, op0, op1, op2;\n   const struct builtin_description *d;\n   size_t i;\n@@ -10168,7 +10168,6 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \top2 = expand_normal (arg2);\n \tmode0 = insn_data[d->icode].operand[0].mode;\n \tmode1 = insn_data[d->icode].operand[1].mode;\n-\tmode2 = insn_data[d->icode].operand[2].mode;\n \n \t/* Invalid arguments, bail out before generating bad rtl.  */\n \tif (arg0 == error_mark_node"}, {"sha": "ebce91351c7be5e790140cac33c8410b66fbfebf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -1,3 +1,10 @@\n+2010-04-09  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tPR bootstrap/43684\n+\t* gfortranspec.c (lang_specific_driver): Do not expose vars \n+\tonly used by HAVE_LD_STATIC_DYNAMIC targets unless compiling\n+\tfor such.\n+\n 2010-04-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "b7eccc335fdcb19c267d25ea91edfd7e04ce2898", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -275,11 +275,13 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n-  /* Whether we should link a static libgfortran.  */\n-  int static_lib = 0;\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+  /* Whether we should link a static libgfortran. */\n+  int static_lib = 0; \n \n   /* Whether we need to link statically.  */\n   int static_linking = 0;\n+#endif\n \n   /* The number of input and output files in the incoming arg list.  */\n   int n_infiles = 0;\n@@ -340,11 +342,17 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t  break;\n \n \tcase OPTION_static_libgfortran:\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n \t  static_lib = 1;\n+#endif\n \t  break;\n \n \tcase OPTION_static:\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n \t  static_linking = 1;\n+#endif\n+\t  /* Fall through, count OPTION_static as an item included in\n+\t     the rewritten command line. */\n \n \tcase OPTION_l:\n \t  ++n_infiles;"}, {"sha": "229a37051898ef3507267f592ae28fb45ce4a394", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8351bca7e4147d3aef7dd3f1f20ce91e59d4e7af", "patch": "@@ -5803,8 +5803,10 @@ assemble_alias (tree decl, tree target)\n    the visibility type VIS, which must not be VISIBILITY_DEFAULT.  */\n \n void\n-default_assemble_visibility (tree decl, int vis)\n+default_assemble_visibility (tree decl ATTRIBUTE_UNUSED, \n+\t\t\t     int vis ATTRIBUTE_UNUSED)\n {\n+#ifdef HAVE_GAS_HIDDEN\n   static const char * const visibility_types[] = {\n     NULL, \"protected\", \"hidden\", \"internal\"\n   };\n@@ -5814,7 +5816,6 @@ default_assemble_visibility (tree decl, int vis)\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   type = visibility_types[vis];\n \n-#ifdef HAVE_GAS_HIDDEN\n   fprintf (asm_out_file, \"\\t.%s\\t\", type);\n   assemble_name (asm_out_file, name);\n   fprintf (asm_out_file, \"\\n\");"}]}