{"sha": "6461be142d87b3c7f15287df760d89595c752876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MWJlMTQyZDg3YjNjN2YxNTI4N2RmNzYwZDg5NTk1Yzc1Mjg3Ng==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-24T19:01:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-24T19:01:29Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r582", "tree": {"sha": "16dd7ea934cf6ec56a3e2f68a593f00e08cddccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16dd7ea934cf6ec56a3e2f68a593f00e08cddccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6461be142d87b3c7f15287df760d89595c752876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461be142d87b3c7f15287df760d89595c752876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6461be142d87b3c7f15287df760d89595c752876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6461be142d87b3c7f15287df760d89595c752876/comments", "author": null, "committer": null, "parents": [{"sha": "95f2ba07f8004717648cff209e6624316b07785a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2ba07f8004717648cff209e6624316b07785a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f2ba07f8004717648cff209e6624316b07785a"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "819245d0219a8b87a1e459e3b193e7cacd99a0eb", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6461be142d87b3c7f15287df760d89595c752876/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6461be142d87b3c7f15287df760d89595c752876/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6461be142d87b3c7f15287df760d89595c752876", "patch": "@@ -2210,9 +2210,17 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \n \t     Note that we cannot pass X as the object in the recursive call\n \t     since the insn being processed may not allow all valid\n-\t     addresses.  */\n+\t     addresses.  However, if we were not passed on object, we can\n+\t     only modify X without copying it if X will have a valid\n+\t     address.\n \n-\t  if (instantiate_virtual_regs_1 (&XEXP (x, 0), object, 0))\n+\t     ??? Also note that this can still lose if OBJECT is an insn that\n+\t     has less restrictions on an address that some other insn.\n+\t     In that case, we will modify the shared address.  This case\n+\t     doesn't seem very likely, though.  */\n+\n+\t  if (instantiate_virtual_regs_1 (&XEXP (x, 0),\n+\t\t\t\t\t  object ? object : x, 0))\n \t    return 1;\n \n \t  /* Otherwise make a copy and process that copy.  We copy the entire"}]}