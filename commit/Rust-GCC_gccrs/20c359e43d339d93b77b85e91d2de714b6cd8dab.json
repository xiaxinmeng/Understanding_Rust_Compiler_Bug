{"sha": "20c359e43d339d93b77b85e91d2de714b6cd8dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjMzU5ZTQzZDMzOWQ5M2I3N2I4NWU5MWQyZGU3MTRiNmNkOGRhYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-03T02:36:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-03T02:36:54Z"}, "message": "h8300.md (movqi_internal): Remove useless alternative(s).\n\n        * h8300.md (movqi_internal): Remove useless alternative(s).  Fix\n        lengths and simplify by reordering remaining alternatives.\n        (movestrictqi, movhi_internal, movstricthi): Likewise.\n        (movsi_h8300h, movsf_h8300h): Likewise.\n\nFrom-SVN: r11655", "tree": {"sha": "cc3d72f771706a105ce107ba343bb63154bb5ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc3d72f771706a105ce107ba343bb63154bb5ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20c359e43d339d93b77b85e91d2de714b6cd8dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c359e43d339d93b77b85e91d2de714b6cd8dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c359e43d339d93b77b85e91d2de714b6cd8dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c359e43d339d93b77b85e91d2de714b6cd8dab/comments", "author": null, "committer": null, "parents": [{"sha": "c91a56d26688ad6ab041f1ba223a975692c9d8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91a56d26688ad6ab041f1ba223a975692c9d8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91a56d26688ad6ab041f1ba223a975692c9d8c3"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "6dd9f7d729636eeaed0a04f6c4a83b3d5a80dcd9", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20c359e43d339d93b77b85e91d2de714b6cd8dab/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20c359e43d339d93b77b85e91d2de714b6cd8dab/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=20c359e43d339d93b77b85e91d2de714b6cd8dab", "patch": "@@ -32,6 +32,9 @@\n ;; ??? If we can remove the operand type on all the insns, do it.\n ;; ??? Otherwise, try to have the operand type on all the insns.\n \n+;; Some move patterns have conditions which check that one operand\n+;; is a register.  Shouldn't all of them have such a condition?\n+\n (define_attr \"type\" \"branch,return,call,arith,move,float,multi\"\n   (const_string \"arith\"))\n \n@@ -92,27 +95,23 @@\n    (set (attr \"length\") (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4)))\n    (set_attr \"cc\" \"set\")])\n \n-;; ??? Use of the `c' constraint doesn't seem right.\n (define_insn \"movqi_internal\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n-\t(match_operand:QI 1 \"general_operand_src\" \"I,r>,io,r,r,c\"))]\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,o\")\n+\t(match_operand:QI 1 \"general_operand_src\" \"I,r>,r,io,r\"))]\n   \"register_operand (operands[0],QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%X1,%X0\n    mov.b\t%X1,%X0\n    mov.b\t%X1,%X0\n-   mov.b\t%X1,%X0\n-   xor\t\t%X0,%X0\\;bst\t#0,%X0\"\n+   mov.b\t%X1,%X0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n+     [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4))\n-      (const_int 4)])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,clobber\")])\n+      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+   (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n@@ -129,22 +128,18 @@\n }\")\n \n (define_insn \"movstrictqi\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"=r,r,r,o,<\"))\n-\t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,r,io,r,r\"))]\n+  [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"=r,r,r\"))\n+\t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,r,io\"))]\n   \"\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%X1,%X0\n-   mov.b\t%X1,%X0\n-   mov.b\t%X1,%X0\n    mov.b\t%X1,%X0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n+      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+   (set_attr \"cc\" \"set_zn_c0,set,set\")])\n    \n ;; movhi\n \n@@ -164,8 +159,8 @@\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"movhi_internal\"\n-  [(set (match_operand:HI 0 \"general_operand_dst\" \"=ra,ra,ra,o,<\")\n-\t(match_operand:HI 1 \"general_operand_src\" \"I,ra>,ion,ra,ra\"))]\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=ra,ra,<,ra,o\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,ra>,ra,ion,ra\"))]\n   \"\"\n   \"@\n    sub.w\t%T0,%T0\n@@ -175,10 +170,9 @@\n    mov.w\t%T1,%T0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2)\n+     [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4))])\n+      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n    (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n \n (define_expand \"movhi\"\n@@ -196,22 +190,18 @@\n }\")\n \n (define_insn \"movstricthi\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"=r,r,r,o,<\"))\n-\t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,r,io,r,r\"))]\n+  [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"=r,r,r\"))\n+\t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,r,io\"))]\n   \"\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n-   mov.w\t%T1,%T0\n-   mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr_alternative \"length\"\n      [(const_int 2) (const_int 2)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 2) (const_int 4))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n+      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+   (set_attr \"cc\" \"set_zn_c0,set,set\")])\n \n ;; movsi\n \n@@ -391,7 +381,7 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"2,2,8,8,4,4\")\n+   (set_attr \"length\" \"2,2,10,10,4,4\")\n    (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \n (define_insn \"movsf_h8300h\"\n@@ -408,7 +398,7 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"2,2,8,8,4,4\")\n+   (set_attr \"length\" \"2,2,10,10,4,4\")\n    (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \f\n ;; ----------------------------------------------------------------------"}]}