{"sha": "b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyNDRjNjVmNTE4Y2ZiNGI2YTUzODVkZGZlNDViYzNjZTJjZjljMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-07-27T21:10:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-27T21:10:29Z"}, "message": "cp-tree.h (function_depth): Declare.\n\n\t* cp-tree.h (function_depth): Declare.\n\t(verify_stmt_tree): Likewise.\n\t(find_tree): Likewise.\n\t* decl.c (function_depth): Give it external linkage.\n\t* optimize.c (optimize_function): Increment and decrement it.\n\t* tree.c (verify_stmt_tree_r): New function.\n\t(verify_stmt_tree): Likewise.\n\t(find_tree_r): Likewise.\n\t(find_tree): Likewise.\n\nFrom-SVN: r35301", "tree": {"sha": "ba33209a933d13df9bd870697d71b7d7281a5b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba33209a933d13df9bd870697d71b7d7281a5b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/comments", "author": null, "committer": null, "parents": [{"sha": "98be7846ad96810018215b97a636fa7777a8478f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98be7846ad96810018215b97a636fa7777a8478f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98be7846ad96810018215b97a636fa7777a8478f"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "e032ce24ad07fcdc8a79fbdfb3576ad3acc8248b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "patch": "@@ -1,3 +1,15 @@\n+2000-07-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (function_depth): Declare.\n+\t(verify_stmt_tree): Likewise.\n+\t(find_tree): Likewise.\n+\t* decl.c (function_depth): Give it external linkage.\n+\t* optimize.c (optimize_function): Increment and decrement it.\n+\t* tree.c (verify_stmt_tree_r): New function.\n+\t(verify_stmt_tree): Likewise.\n+\t(find_tree_r): Likewise.\n+\t(find_tree): Likewise.\n+\n 2000-07-27  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (common_type): If we're just returning one of our"}, {"sha": "6e592ca02812c9ef4c98c9af40377966f3dbccba", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "patch": "@@ -3290,6 +3290,11 @@ extern tree integer_two_node, integer_three_node;\n \n extern tree anonymous_namespace_name;\n \n+/* The number of function bodies which we are currently processing.\n+   (Zero if we are at namespace scope, one inside the body of a\n+   function, two inside the body of a function in a local class, etc.)  */\n+extern int function_depth;\n+\n /* in pt.c  */\n \n /* These values are used for the `STRICT' parameter to type_unfication and\n@@ -4539,6 +4544,8 @@ extern tree build_shared_int_cst                PARAMS ((int));\n extern special_function_kind special_function_p PARAMS ((tree));\n extern int count_trees                          PARAMS ((tree));\n extern int char_type_p                          PARAMS ((tree));\n+extern void verify_stmt_tree                    PARAMS ((tree));\n+extern tree find_tree                           PARAMS ((tree, tree));\n   \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));"}, {"sha": "3beeb8d998208feaf31fb2300611f30b9f525662", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "patch": "@@ -374,6 +374,10 @@ tree signed_size_zero_node;\n    unit.  */\n tree anonymous_namespace_name;\n \n+/* The number of function bodies which we are currently processing.\n+   (Zero if we are at namespace scope, one inside the body of a\n+   function, two inside the body of a function in a local class, etc.)  */\n+int function_depth;\n \f\n /* For each binding contour we allocate a binding_level structure\n    which records the names defined in that contour.\n@@ -13370,8 +13374,6 @@ build_enumerator (name, value, enumtype)\n }\n \n \f\n-static int function_depth;\n-\n /* We're defining DECL.  Make sure that it's type is OK.  */\n \n static void"}, {"sha": "c9898b8ace0fd971b88d6d15818aa682a7ecadd2", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "patch": "@@ -801,6 +801,17 @@ void\n optimize_function (fn)\n      tree fn;\n {\n+  /* While in this function, we may choose to go off and compile\n+     another function.  For example, we might instantiate a function\n+     in the hopes of inlining it.  Normally, that wouldn't trigger any\n+     actual RTL code-generation -- but it will if the template is\n+     actually needed.  (For example, if it's address is taken, or if\n+     some other function already refers to the template.)  If\n+     code-generation occurs, then garbage collection will occur, so we\n+     must protect ourselves, just as we do while building up the body\n+     of the function.  */\n+  ++function_depth;\n+\n   /* Expand calls to inline functions.  */\n   if (flag_inline_trees)\n     {\n@@ -839,6 +850,9 @@ optimize_function (fn)\n       VARRAY_FREE (id.fns);\n       VARRAY_FREE (id.target_exprs);\n     }\n+\n+  /* Undo the call to ggc_push_context above.  */\n+  --function_depth;\n }\n \n /* Called from calls_setjmp_p via walk_tree.  */"}, {"sha": "bed0d49fca3f5a4e97e2c7469ddebc3889193a3b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n+#include \"hashtab.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n@@ -48,6 +49,8 @@ static tree cp_unsave_r PARAMS ((tree *, int *, void *));\n static void cp_unsave PARAMS ((tree *));\n static tree build_target_expr PARAMS ((tree, tree));\n static tree count_trees_r PARAMS ((tree *, int *, void *));\n+static tree verify_stmt_tree_r PARAMS ((tree *, int *, void *));\n+static tree find_tree_r PARAMS ((tree *, int *, void *));\n \n /* If REF is an lvalue, returns the kind of lvalue that REF is.\n    Otherwise, returns clk_none.  If TREAT_CLASS_RVALUES_AS_LVALUES is\n@@ -1440,6 +1443,70 @@ count_trees (t)\n   return n_trees;\n }  \n \n+/* Called from verify_stmt_tree via walk_tree.  */\n+\n+static tree\n+verify_stmt_tree_r (tp, walk_subtrees, data)\n+     tree *tp;\n+     int *walk_subtrees ATTRIBUTE_UNUSED;\n+     void *data;\n+{\n+  tree t = *tp;\n+  htab_t *statements = (htab_t *) data;\n+  void **slot;\n+\n+  if (!statement_code_p (TREE_CODE (t)))\n+    return NULL_TREE;\n+\n+  /* If this statement is already present in the hash table, then\n+     there is a circularity in the statement tree.  */\n+  if (htab_find (*statements, t))\n+    my_friendly_abort (20000727);\n+  \n+  slot = htab_find_slot (*statements, t, INSERT);\n+  *slot = t;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Debugging function to check that the statement T has not been\n+   corrupted.  For now, this function simply checks that T contains no\n+   circularities.  */\n+\n+void\n+verify_stmt_tree (t)\n+     tree t;\n+{\n+  htab_t statements;\n+  statements = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n+  walk_tree (&t, verify_stmt_tree_r, &statements);\n+  htab_delete (statements);\n+}\n+\n+/* Called from find_tree via walk_tree.  */\n+\n+static tree\n+find_tree_r (tp, walk_subtrees, data)\n+     tree *tp;\n+     int *walk_subtrees ATTRIBUTE_UNUSED;\n+     void *data;\n+{\n+  if (*tp == (tree) data)\n+    return (tree) data;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Returns X if X appears in the tree structure rooted at T.  */\n+\n+tree\n+find_tree (t, x)\n+     tree t;\n+     tree x;\n+{\n+  return walk_tree (&t, find_tree_r, x);\n+}\n+\n /* Passed to walk_tree.  Checks for the use of types with no linkage.  */\n \n static tree"}]}