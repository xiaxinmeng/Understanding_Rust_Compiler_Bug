{"sha": "5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxZmQzNDY5ZmViMjcxYWZlYTVmMzM2YTdiOWRjZmMxZGYxOWQ0NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-05T07:34:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-05T07:34:08Z"}, "message": "move.h (forward): Update to N3092.\n\n2010-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (forward): Update to N3092.\n\t(identity): Remove (US 92 is NAD).\n\t* include/debug/set.h: Fix move constructor to simply use move.\n\t* include/debug/unordered_map: Likewise.\n\t* include/debug/multiset.h: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/debug/unordered_set: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/map.h: Likewise.\n\t* include/debug/string: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/debug/multimap.h: Likewise.\n\t* include/profile/set.h: Likewise.\n\t* include/profile/unordered_map: Likewise.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/unordered_set: Likewise.\n\t* include/profile/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* include/ext/vstring.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/forward_list.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/unordered_map.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/unordered_set.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* testsuite/20_util/identity/value.cc: Remove\n\t* testsuite/20_util/identity/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/identity/requirements/explicit_instantiation.cc:\n\tLikewise.\n\nFrom-SVN: r162898", "tree": {"sha": "c0b0acea6f04002280b95a730e10942cf7775c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b0acea6f04002280b95a730e10942cf7775c30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/comments", "author": null, "committer": null, "parents": [{"sha": "36b86f4a54675e0d707a33e1bc605eb4d7e6139d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b86f4a54675e0d707a33e1bc605eb4d7e6139d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b86f4a54675e0d707a33e1bc605eb4d7e6139d"}], "stats": {"total": 288, "additions": 98, "deletions": 190}, "files": [{"sha": "6da10e1c917a721eef6dd599f5df6e9106cdf93c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -1,3 +1,43 @@\n+2010-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (forward): Update to N3092.\n+\t(identity): Remove (US 92 is NAD).\n+\t* include/debug/set.h: Fix move constructor to simply use move.\n+\t* include/debug/unordered_map: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/deque: Likewise.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/string: Likewise.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/set.h: Likewise.\n+\t* include/profile/unordered_map: Likewise.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/unordered_set: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* include/ext/vstring.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/forward_list.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/unordered_map.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/unordered_set.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* testsuite/20_util/identity/value.cc: Remove\n+\t* testsuite/20_util/identity/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/identity/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\n 2010-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* acinclude.m4 ([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS]): Fix"}, {"sha": "4fe029d3b2d91d511bd9a5b254e649e5008a9293", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -452,7 +452,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  al    An allocator object.\n        */\n       forward_list(forward_list&& __list, const _Alloc& __al)\n-      : _Base(std::forward<_Base>(__list), __al)\n+      : _Base(std::move(__list), __al)\n       { }\n \n       /**\n@@ -523,7 +523,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  %forward_list.\n        */\n       forward_list(forward_list&& __list)\n-      : _Base(std::forward<_Base>(__list)) { }\n+      : _Base(std::move(__list)) { }\n \n       /**\n        *  @brief  Builds a %forward_list from an initializer_list"}, {"sha": "d5243d229be0a787b6469bdf144ae23f09ed9ec7", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -50,37 +50,17 @@ _GLIBCXX_END_NAMESPACE\n #include <type_traits> // Brings in std::declval too.\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n-\n-  /// identity\n-  template<typename _Tp>\n-    struct identity\n-    {\n-      typedef _Tp type;\n-    };\n-\n-  /// forward (as per N2835)\n-  /// Forward lvalues as rvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n-    forward(typename std::identity<_Tp>::type& __t)\n-    { return static_cast<_Tp&&>(__t); }\n-\n-  /// Forward rvalues as rvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<!is_lvalue_reference<_Tp>::value, _Tp&&>::type\n-    forward(typename std::identity<_Tp>::type&& __t)\n-    { return static_cast<_Tp&&>(__t); }\n-\n-  // Forward lvalues as lvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n-    forward(typename std::identity<_Tp>::type __t)\n-    { return __t; }\n-\n-  // Prevent forwarding rvalues as const lvalues.\n-  template<typename _Tp>\n-    inline typename enable_if<is_lvalue_reference<_Tp>::value, _Tp>::type\n-    forward(typename std::remove_reference<_Tp>::type&& __t) = delete;\n+  \n+  /// forward\n+  template<typename _Tp, typename _Up>\n+    inline typename\n+    enable_if<((std::is_convertible<\n+\t\ttypename std::remove_reference<_Up>::type*,\n+\t\ttypename std::remove_reference<_Tp>::type*>::value)\n+\t       && (!std::is_lvalue_reference<_Tp>::value\n+\t\t   || std::is_lvalue_reference<_Up>::value)), _Tp&&>::type\n+    forward(_Up&& __u)\n+    { return static_cast<_Tp&&>(__u); }\n \n   /**\n    *  @brief Move a value.\n@@ -109,10 +89,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n-#define _GLIBCXX_MOVE(_Tp) std::move(_Tp)\n+#define _GLIBCXX_MOVE(__val) std::move(__val)\n #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)\n #else\n-#define _GLIBCXX_MOVE(_Tp) (_Tp)\n+#define _GLIBCXX_MOVE(__val) (__val)\n #define _GLIBCXX_FORWARD(_Tp, __val) (__val)\n #endif\n "}, {"sha": "c489b447ca15e46a25857f852c5efd92a60a73b7", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -528,7 +528,7 @@ template<typename _Alloc>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     vector(vector&& __x)\n-    : _Base(std::forward<_Base>(__x)) { }\n+    : _Base(std::move(__x)) { }\n \n     vector(initializer_list<bool> __l,\n \t   const allocator_type& __a = allocator_type())"}, {"sha": "397b6333b5bdf39610bbffe3bef8cf5393d0fd41", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -839,8 +839,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The newly-created %deque contains the exact contents of @a x.\n        *  The contents of @a x are a valid, but unspecified %deque.\n        */\n-      deque(deque&&  __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      deque(deque&& __x)\n+      : _Base(std::move(__x)) { }\n \n       /**\n        *  @brief  Builds a %deque from an initializer list."}, {"sha": "2bbb26fb494dd30ad35e76bf0c4a0faeaadaecb1", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -569,7 +569,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %list.\n        */\n       list(list&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       /**\n        *  @brief  Builds a %list from an initializer_list"}, {"sha": "5d6a98b75b259dad6fe178c6eb4ce435f0894877", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %map.\n        */\n       map(map&& __x)\n-      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+      : _M_t(std::move(__x._M_t)) { }\n \n       /**\n        *  @brief  Builds a %map from an initializer_list."}, {"sha": "82a80f27eb4533fd025ecade1dafcef2c20569a7", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -177,7 +177,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %multimap.\n        */\n       multimap(multimap&& __x)\n-      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+      : _M_t(std::move(__x._M_t)) { }\n \n       /**\n        *  @brief  Builds a %multimap from an initializer_list."}, {"sha": "cfe849bf79ac520d87c3cd9b2954b7c7dd2feaa0", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %multiset.\n        */\n       multiset(multiset&& __x)\n-      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+      : _M_t(std::move(__x._M_t)) { }\n \n       /**\n        *  @brief  Builds a %multiset from an initializer_list."}, {"sha": "ce5bc6c15f22739e370b31b51246e75f26ff340b", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -197,7 +197,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %set.\n        */\n       set(set&& __x)\n-      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n+      : _M_t(std::move(__x._M_t)) { }\n \n       /**\n        *  @brief  Builds a %set from an initializer_list."}, {"sha": "147e3f7715befbc2bb99522f4334fd6c157c675f", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -290,7 +290,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %vector.\n        */\n       vector(vector&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       /**\n        *  @brief  Builds a %vector from an initializer list."}, {"sha": "f3a16e0dd01d23880d4200f17be1385c0ed4fbdb", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __unordered_map(const __unordered_map& __x) = default;\n \n       __unordered_map(__unordered_map&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n     };\n   \n   template<class _Key, class _Tp,\n@@ -142,7 +142,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __unordered_multimap(const __unordered_multimap& __x) = default;\n \n       __unordered_multimap(__unordered_multimap&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n     };\n \n   template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc,\n@@ -253,7 +253,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       unordered_map(const unordered_map& __x) = default;\n \n       unordered_map(unordered_map&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_map(initializer_list<value_type> __l,\n \t\t    size_type __n = 10,\n@@ -340,7 +340,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       unordered_multimap(const unordered_multimap& __x) = default;\n \n       unordered_multimap(unordered_multimap&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n \t\t\t size_type __n = 10,"}, {"sha": "f056be57ec0890af475505113842587ce1fa8c83", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -85,7 +85,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __unordered_set(const __unordered_set& __x) = default;\n \n       __unordered_set(__unordered_set&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n     };\n \n   template<class _Value,\n@@ -140,7 +140,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       __unordered_multiset(const __unordered_multiset& __x) = default;\n \n       __unordered_multiset(__unordered_multiset&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n     };\n \n   template<class _Value, class _Hash, class _Pred, class _Alloc,\n@@ -246,7 +246,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       unordered_set(const unordered_set& __x) = default;\n \n       unordered_set(unordered_set&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_set(initializer_list<value_type> __l,\n \t\t    size_type __n = 10,\n@@ -330,7 +330,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       unordered_multiset(const unordered_multiset& __x) = default;\n \n       unordered_multiset(unordered_multiset&& __x)\n-      : _Base(std::forward<_Base>(__x)) { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n \t\t\t size_type __n = 10,"}, {"sha": "2b54b7d3e16e5e3d56a99ee20ed3a1af4c8eec3a", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -100,7 +100,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       deque(deque&& __x)\n-      : _Base(std::forward<deque>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       deque(initializer_list<value_type> __l,"}, {"sha": "b6be96f00d391a7a0c32bcff4e66f235ff5412b3", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -101,7 +101,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       list(list&& __x)\n-      : _Base(std::forward<list>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       list(initializer_list<value_type> __l,"}, {"sha": "1254e42257b58f5b0e74414a1f1901a3cdc74b5b", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -92,7 +92,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n-      : _Base(std::forward<map>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       map(initializer_list<value_type> __l,"}, {"sha": "bf06f78f536b59c02f14509e3f8c895a42c8905e", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -93,7 +93,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multimap(multimap&& __x)\n-      : _Base(std::forward<multimap>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       multimap(initializer_list<value_type> __l,"}, {"sha": "59cc828ce8e01c9c788f81972b9e5e98ef99d930", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -90,7 +90,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multiset(multiset&& __x)\n-      : _Base(std::forward<multiset>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       multiset(initializer_list<value_type> __l,"}, {"sha": "24cfcea6411275afa2ff7fb99355e18ca820e597", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -90,7 +90,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       set(set&& __x)\n-      : _Base(std::forward<set>(__x)), _Safe_base()\n+      : _Base(std::move(__x)), _Safe_base()\n       { this->_M_swap(__x); }\n \n       set(initializer_list<value_type> __l,"}, {"sha": "e5152ebd3cdf2a6390266a6a2ff99a5ecf96079c", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -113,7 +113,7 @@ namespace __gnu_debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     basic_string(basic_string&& __str)\n-    : _Base(std::forward<_Base>(__str))\n+    : _Base(std::move(__str))\n     { }\n \n     basic_string(std::initializer_list<_CharT> __l,\n@@ -153,7 +153,7 @@ namespace __gnu_debug\n     basic_string&\n     operator=(basic_string&& __str)\n     {\n-      *static_cast<_Base*>(this) = std::forward<_Base>(__str);\n+      *static_cast<_Base*>(this) = std::move(__str);\n       this->_M_invalidate_all();\n       return *this;\n     }\n@@ -376,7 +376,7 @@ namespace __gnu_debug\n     basic_string&\n     assign(basic_string&& __x)\n     {\n-      _Base::assign(std::forward<_Base>(__x));\n+      _Base::assign(std::move(__x));\n       this->_M_invalidate_all();\n       return *this;\n     }"}, {"sha": "805e42ee75ec3f1fe0154cb391ce1326f657d5d5", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -93,7 +93,7 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n       unordered_map(unordered_map&& __x)\n-      : _Base(std::forward<unordered_map>(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_map(initializer_list<value_type> __l,\n \t\t    size_type __n = 10,\n@@ -352,7 +352,7 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n       unordered_multimap(unordered_multimap&& __x) \n-      : _Base(std::forward<unordered_multimap>(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n \t\t\t size_type __n = 10,"}, {"sha": "80ca806f5aa5e0217db7ee2aaca3a1c44a6a3244", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -93,7 +93,7 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n       unordered_set(unordered_set&& __x) \n-      : _Base(std::forward<unordered_set>(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_set(initializer_list<value_type> __l,\n \t\t    size_type __n = 10,\n@@ -348,7 +348,7 @@ namespace __debug\n       : _Base(__x), _Safe_base() { }\n \n       unordered_multiset(unordered_multiset&& __x) \n-      : _Base(std::forward<unordered_multiset>(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)), _Safe_base() { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n \t\t\t size_type __n = 10,"}, {"sha": "3d039655c166229614470e26a4b1c55319a4af36", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -108,7 +108,7 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       vector(vector&& __x)\n-      : _Base(std::forward<vector>(__x)), _Safe_base(),\n+      : _Base(std::move(__x)), _Safe_base(),\n \t_M_guaranteed_capacity(this->size())\n       {\n \tthis->_M_swap(__x);"}, {"sha": "fab546dfdf518e4033e88aa8b08710c608f6460f", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        *  string.\n        */\n       __versa_string(__versa_string&& __str)\n-      : __vstring_base(std::forward<__vstring_base>(__str)) { }\n+      : __vstring_base(std::move(__str)) { }\n \n       /**\n        *  @brief  Construct string from an initializer list."}, {"sha": "b404d972f8fca05af5b54f981dc1822b763ff6dc", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -93,7 +93,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       deque(deque&& __x)\n-      : _Base(std::forward<deque>(__x))\n+      : _Base(std::move(__x))\n       { }\n \n       deque(initializer_list<value_type> __l,"}, {"sha": "564fc8c16f129b76252730f598b7b2fe36a40070", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -124,7 +124,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       list(list&& __x)\n-      : _Base(std::forward<list>(__x))\n+      : _Base(std::move(__x))\n       { \n         __profcxx_list_construct(this); \n         __profcxx_list_construct2(this); "}, {"sha": "3f668af176c5ece40e6511fbce4cf366e983d428", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -94,7 +94,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n-      : _Base(std::forward<map>(__x))\n+      : _Base(std::move(__x))\n       { }\n \n       map(initializer_list<value_type> __l,"}, {"sha": "2897614050cbc231f8e94d9b4de2832d10b31ce0", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -84,7 +84,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multimap(multimap&& __x)\n-      : _Base(std::forward<multimap>(__x))\n+      : _Base(std::move(__x))\n       { }\n \n       multimap(initializer_list<value_type> __l,"}, {"sha": "3c113ef88d5bfa4d34592309d4ea9009392ba9af", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -82,7 +82,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multiset(multiset&& __x)\n-      : _Base(std::forward<multiset>(__x))\n+      : _Base(std::move(__x))\n       { }\n \n       multiset(initializer_list<value_type> __l,"}, {"sha": "42acf72699a9c15f80c82bca8d72ddc94f7733d1", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -82,7 +82,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       set(set&& __x)\n-      : _Base(std::forward<set>(__x))\n+      : _Base(std::move(__x))\n       { }\n \n       set(initializer_list<value_type> __l,"}, {"sha": "203ae97ef8d001beeae294b9a2e8eaf26922a133", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -104,7 +104,7 @@ namespace __profile\n       }\n \n       unordered_map(unordered_map&& __x)\n-      : _Base(std::forward<_Base>(__x)) \n+      : _Base(std::move(__x)) \n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n         __profcxx_hashtable_construct2(this);\n@@ -339,7 +339,7 @@ namespace __profile\n       }\n \n       unordered_multimap(unordered_multimap&& __x)\n-      : _Base(std::forward<_Base>(__x))\n+      : _Base(std::move(__x))\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n       }"}, {"sha": "1a8836a7772fb944e4fe5866e62ceb7b4da5febf", "filename": "libstdc++-v3/include/profile/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_set?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -103,7 +103,7 @@ namespace __profile\n       }\n \n       unordered_set(unordered_set&& __x)\n-      : _Base(std::forward<_Base>(__x)) \n+      : _Base(std::move(__x)) \n       { \n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n         __profcxx_hashtable_construct2(this);\n@@ -328,7 +328,7 @@ namespace __profile\n       }\n \n       unordered_multiset(unordered_multiset&& __x)\n-      : _Base(std::forward<_Base>(__x))\n+      : _Base(std::move(__x))\n       {\n         __profcxx_hashtable_construct(this, _Base::bucket_count());\n       }"}, {"sha": "1bd4346ec6770a31b1f25c222095814cffb0b0ac", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fd3469feb271afea5f336a7b9dcfc1df19d44/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "patch": "@@ -137,7 +137,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       vector(vector&& __x)\n-      : _Base(std::forward<vector>(__x))\n+      : _Base(std::move(__x))\n       {\n         __profcxx_vector_construct(this, this->capacity());\n         __profcxx_vector_construct2(this);"}, {"sha": "691f81b93871d105531253829fde5b54934ffb16", "filename": "libstdc++-v3/testsuite/20_util/identity/requirements/explicit_instantiation.cc", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Fexplicit_instantiation.cc?ref=36b86f4a54675e0d707a33e1bc605eb4d7e6139d", "patch": "@@ -1,32 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// { dg-do compile }\n-\n-// 2007-07-10  Paolo Carlini  <pcarlini@suse.de>\n-\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-// NB: This file is for testing utility with NO OTHER INCLUDES.\n-\n-#include <utility>\n-\n-namespace std\n-{\n-  typedef short test_type;\n-  template struct decay<test_type>;\n-}"}, {"sha": "c170818d9e2c816937febe0ab7dd94a3c9822091", "filename": "libstdc++-v3/testsuite/20_util/identity/requirements/typedefs.cc", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Frequirements%2Ftypedefs.cc?ref=36b86f4a54675e0d707a33e1bc605eb4d7e6139d", "patch": "@@ -1,33 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// 2007-07-10  Paolo Carlini  <pcarlini@suse.de>\n-//\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// \n-// NB: This file is for testing utility with NO OTHER INCLUDES.\n-\n-#include <utility>\n-\n-// { dg-do compile }\n-\n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::identity<int>                  test_type;\n-  typedef test_type::type                     type;\n-}"}, {"sha": "80b444bf4359d6b74af0ba0c40eb69ad786d4534", "filename": "libstdc++-v3/testsuite/20_util/identity/value.cc", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b86f4a54675e0d707a33e1bc605eb4d7e6139d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fidentity%2Fvalue.cc?ref=36b86f4a54675e0d707a33e1bc605eb4d7e6139d", "patch": "@@ -1,47 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// 2007-07-10  Paolo Carlini  <pcarlini@suse.de>\n-//\n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <utility>\n-#include <testsuite_hooks.h>\n-#include <testsuite_tr1.h>\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using std::identity;\n-  using std::is_same;\n-  using namespace __gnu_test;\n-\n-  VERIFY( (is_same<identity<int>::type, int>::value) );\n-  VERIFY( (is_same<identity<int&>::type, int&>::value) );\n-  VERIFY( (is_same<identity<int&&>::type, int&&>::value) );\n-  VERIFY( (is_same<identity<int*>::type, int*>::value) );\n-  VERIFY( (is_same<identity<ClassType&&>::type, ClassType&&>::value) );\n-  VERIFY( (is_same<identity<ClassType>::type, ClassType>::value) );\n-  VERIFY( (is_same<identity<int(int)>::type, int(int)>::value) );\n-  VERIFY( (is_same<identity<void>::type, void>::value) );\n-  VERIFY( (is_same<identity<const void>::type, const void>::value) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}