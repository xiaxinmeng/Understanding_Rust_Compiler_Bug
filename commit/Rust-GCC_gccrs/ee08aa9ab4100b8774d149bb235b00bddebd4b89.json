{"sha": "ee08aa9ab4100b8774d149bb235b00bddebd4b89", "node_id": "C_kwDOANBUbNoAKGVlMDhhYTlhYjQxMDBiODc3NGQxNDliYjIzNWIwMGJkZGViZDRiODk", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-04T16:50:06Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-15T15:50:23Z"}, "message": "diagnostics: Remove null-termination requirement for json::string\n\njson::string currently handles null-terminated data and so can't work with\ndata that may contain embedded null bytes or that is not null-terminated.\nSupporting such data will make json::string more robust in some contexts, such\nas SARIF output, which uses it to output user source code that may contain\nembedded null bytes.\n\ngcc/ChangeLog:\n\n\t* json.h (class string): Add M_LEN member to store the length of\n\tthe data.  Add constructor taking an explicit length.\n\t* json.cc (string::string):  Implement the new constructor.\n\t(string::print): Support printing strings that are not\n\tnull-terminated.  Escape embdedded null bytes on output.\n\t(test_writing_strings): Test the new null-byte-related features of\n\tjson::string.", "tree": {"sha": "52d812ab9bc0dbb23dbe0a29562418a876267b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d812ab9bc0dbb23dbe0a29562418a876267b0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee08aa9ab4100b8774d149bb235b00bddebd4b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee08aa9ab4100b8774d149bb235b00bddebd4b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee08aa9ab4100b8774d149bb235b00bddebd4b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee08aa9ab4100b8774d149bb235b00bddebd4b89/comments", "author": null, "committer": null, "parents": [{"sha": "15d315553faafeac849522792b465e522c9d665b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d315553faafeac849522792b465e522c9d665b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d315553faafeac849522792b465e522c9d665b"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "3a79cac02ac575ccdeb6c2af715daca9f6c07225", "filename": "gcc/json.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08aa9ab4100b8774d149bb235b00bddebd4b89/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08aa9ab4100b8774d149bb235b00bddebd4b89/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=ee08aa9ab4100b8774d149bb235b00bddebd4b89", "patch": "@@ -190,6 +190,15 @@ string::string (const char *utf8)\n {\n   gcc_assert (utf8);\n   m_utf8 = xstrdup (utf8);\n+  m_len = strlen (utf8);\n+}\n+\n+string::string (const char *utf8, size_t len)\n+{\n+  gcc_assert (utf8);\n+  m_utf8 = XNEWVEC (char, len);\n+  m_len = len;\n+  memcpy (m_utf8, utf8, len);\n }\n \n /* Implementation of json::value::print for json::string.  */\n@@ -198,9 +207,9 @@ void\n string::print (pretty_printer *pp) const\n {\n   pp_character (pp, '\"');\n-  for (const char *ptr = m_utf8; *ptr; ptr++)\n+  for (size_t i = 0; i != m_len; ++i)\n     {\n-      char ch = *ptr;\n+      char ch = m_utf8[i];\n       switch (ch)\n \t{\n \tcase '\"':\n@@ -224,7 +233,9 @@ string::print (pretty_printer *pp) const\n \tcase '\\t':\n \t  pp_string (pp, \"\\\\t\");\n \t  break;\n-\n+\tcase '\\0':\n+\t  pp_string (pp, \"\\\\0\");\n+\t  break;\n \tdefault:\n \t  pp_character (pp, ch);\n \t}\n@@ -341,6 +352,12 @@ test_writing_strings ()\n \n   string contains_quotes (\"before \\\"quoted\\\" after\");\n   assert_print_eq (contains_quotes, \"\\\"before \\\\\\\"quoted\\\\\\\" after\\\"\");\n+\n+  const char data[] = {'a', 'b', 'c', 'd', '\\0', 'e', 'f'};\n+  string not_terminated (data, 3);\n+  assert_print_eq (not_terminated, \"\\\"abc\\\"\");\n+  string embedded_null (data, sizeof data);\n+  assert_print_eq (embedded_null, \"\\\"abcd\\\\0ef\\\"\");\n }\n \n /* Verify that JSON literals are written correctly.  */"}, {"sha": "f7afd843dc5405d767c8ebe38b8dd0306014d8db", "filename": "gcc/json.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee08aa9ab4100b8774d149bb235b00bddebd4b89/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee08aa9ab4100b8774d149bb235b00bddebd4b89/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=ee08aa9ab4100b8774d149bb235b00bddebd4b89", "patch": "@@ -156,16 +156,19 @@ class integer_number : public value\n class string : public value\n {\n  public:\n-  string (const char *utf8);\n+  explicit string (const char *utf8);\n+  string (const char *utf8, size_t len);\n   ~string () { free (m_utf8); }\n \n   enum kind get_kind () const final override { return JSON_STRING; }\n   void print (pretty_printer *pp) const final override;\n \n   const char *get_string () const { return m_utf8; }\n+  size_t get_length () const { return m_len; }\n \n  private:\n   char *m_utf8;\n+  size_t m_len;\n };\n \n /* Subclass of value for the three JSON literals \"true\", \"false\","}]}