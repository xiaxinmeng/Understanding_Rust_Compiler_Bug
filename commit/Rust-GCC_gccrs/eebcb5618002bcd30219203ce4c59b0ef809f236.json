{"sha": "eebcb5618002bcd30219203ce4c59b0ef809f236", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViY2I1NjE4MDAyYmNkMzAyMTkyMDNjZTRjNTliMGVmODA5ZjIzNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-07T22:04:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:34Z"}, "message": "[Ada] More efficient System.Random_Numbers.Random_Discrete for 32-bit types\n\n2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-rannum.adb (Random_Discrete): In the 32-bit case,\n\tuse the same linear implementation as in the 64-bit case when\n\tthe type has a contiguous representation.", "tree": {"sha": "f15378fd2ea1903a6a23c123a5a651f635fa91bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f15378fd2ea1903a6a23c123a5a651f635fa91bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebcb5618002bcd30219203ce4c59b0ef809f236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebcb5618002bcd30219203ce4c59b0ef809f236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebcb5618002bcd30219203ce4c59b0ef809f236", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebcb5618002bcd30219203ce4c59b0ef809f236/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f8fc3840e9ac62a053fc8ebe0d25955a9ecf290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8fc3840e9ac62a053fc8ebe0d25955a9ecf290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8fc3840e9ac62a053fc8ebe0d25955a9ecf290"}], "stats": {"total": 89, "additions": 67, "deletions": 22}, "files": [{"sha": "8824a724f781d89c249a3141bcfa311945ca64a1", "filename": "gcc/ada/libgnat/s-rannum.adb", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebcb5618002bcd30219203ce4c59b0ef809f236/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebcb5618002bcd30219203ce4c59b0ef809f236/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.adb?ref=eebcb5618002bcd30219203ce4c59b0ef809f236", "patch": "@@ -404,10 +404,9 @@ is\n \n       elsif Result_Subtype'Base'Size > 32 then\n          declare\n-            --  In the 64-bit case, we have to be careful, since not all 64-bit\n-            --  unsigned values are representable in GNAT's root_integer type.\n-            --  Ignore different-size warnings here since GNAT's handling\n-            --  is correct.\n+            --  In the 64-bit case, we have to be careful since not all 64-bit\n+            --  unsigned values are representable in GNAT's universal integer.\n+            --  Ignore unequal-size warnings since GNAT's handling is correct.\n \n             pragma Warnings (\"Z\");\n             function Conv_To_Unsigned is\n@@ -423,7 +422,8 @@ is\n \n          begin\n             if N = 0 then\n-               return Conv_To_Result (Conv_To_Unsigned (Min) + Random (Gen));\n+               X := Random (Gen);\n+               return Conv_To_Result (Conv_To_Unsigned (Min) + X);\n \n             else\n                Slop := Unsigned_64'Last rem N + 1;\n@@ -437,28 +437,73 @@ is\n             end if;\n          end;\n \n-      elsif Result_Subtype'Pos (Max) - Result_Subtype'Pos (Min) =\n-                                                         2 ** 32 - 1\n-      then\n-         return Result_Subtype'Val\n-           (Result_Subtype'Pos (Min) + Unsigned_32'Pos (Random (Gen)));\n       else\n          declare\n-            N    : constant Unsigned_32 :=\n-                     Unsigned_32 (Result_Subtype'Pos (Max) -\n-                                    Result_Subtype'Pos (Min) + 1);\n-            Slop : constant Unsigned_32 := Unsigned_32'Last rem N + 1;\n-            X    : Unsigned_32;\n+            --  In the 32-bit case, unlike the above case, we need to handle\n+            --  both integer and enumeration types. If the values of the result\n+            --  subtype are contiguous, then we can still use the above trick.\n+            --  Otherwise we need to rely on 'Pos and 'Val in the computation,\n+            --  which is more costly since it will thus be done in universal\n+            --  integer. And ignore unequal-size warnings in this case too.\n+\n+            pragma Warnings (\"Z\");\n+            function Conv_To_Unsigned is\n+               new Unchecked_Conversion (Result_Subtype'Base, Unsigned_32);\n+            function Conv_To_Result is\n+               new Unchecked_Conversion (Unsigned_32, Result_Subtype'Base);\n+            pragma Warnings (\"z\");\n+\n+            Contiguous : constant Boolean :=\n+                              Result_Subtype'Pos (Result_Subtype'Last) -\n+                                Result_Subtype'Pos (Result_Subtype'First)\n+                                =\n+                              Result_Subtype'Enum_Rep (Result_Subtype'Last) -\n+                                Result_Subtype'Enum_Rep (Result_Subtype'First);\n+\n+            N, X, Slop : Unsigned_32;\n \n          begin\n-            loop\n-               X := Random (Gen);\n-               exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n-            end loop;\n+            if Contiguous then\n+               N := Conv_To_Unsigned (Max) - Conv_To_Unsigned (Min) + 1;\n+\n+               if N = 0 then\n+                  X := Random (Gen);\n+                  return Conv_To_Result (Conv_To_Unsigned (Min) + X);\n+\n+               else\n+                  Slop := Unsigned_32'Last rem N + 1;\n \n-            return\n-              Result_Subtype'Val\n-                (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X rem N));\n+                  loop\n+                     X := Random (Gen);\n+                     exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n+                  end loop;\n+\n+                  return Conv_To_Result (Conv_To_Unsigned (Min) + X rem N);\n+               end if;\n+\n+            else\n+               N := Unsigned_32 (Result_Subtype'Pos (Max) -\n+                                   Result_Subtype'Pos (Min) + 1);\n+\n+               if N = 0 then\n+                  X := Random (Gen);\n+                  return\n+                    Result_Subtype'Val\n+                      (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X));\n+\n+               else\n+                  Slop := Unsigned_32'Last rem N + 1;\n+\n+                  loop\n+                     X := Random (Gen);\n+                     exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n+                  end loop;\n+\n+                  return\n+                    Result_Subtype'Val\n+                      (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X rem N));\n+               end if;\n+            end if;\n          end;\n       end if;\n    end Random_Discrete;"}]}