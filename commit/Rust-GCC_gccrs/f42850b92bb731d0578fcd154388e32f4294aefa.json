{"sha": "f42850b92bb731d0578fcd154388e32f4294aefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyODUwYjkyYmI3MzFkMDU3OGZjZDE1NDM4OGUzMmY0Mjk0YWVmYQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-01-05T22:38:12Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-01-05T22:38:12Z"}, "message": "c4x.md (udivqi3, divqi3): Delete.\n\n\t* config/c4x/c4x.md(udivqi3, divqi3): Delete.\n\t(umodqi3, modqi3, udivhi3, divhi3, umodhi3, modhi3, ffsqi2): Likewise.\n\t(*smulqi3_highpart_noclobber, *umulqi3_highpart_noclobber): New.\n\t(*lshrqi3_const_noclobber, *lshrqi3_nonconst_noclobber): Likewise.\n\t(*ashrqi3_const_noclobber, *ashrqi3_nonconst_noclobber): Likewise.\n\n\t* c4x.h (INIT_TARGET_OPTABS): Define to init libcalls.\n\nFrom-SVN: r31247", "tree": {"sha": "90751ba463a1ecbcc904791df5809411c7dd904e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90751ba463a1ecbcc904791df5809411c7dd904e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f42850b92bb731d0578fcd154388e32f4294aefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42850b92bb731d0578fcd154388e32f4294aefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42850b92bb731d0578fcd154388e32f4294aefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42850b92bb731d0578fcd154388e32f4294aefa/comments", "author": null, "committer": null, "parents": [{"sha": "1258cadadc6c10301eae605ff1fa275fbeec3812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1258cadadc6c10301eae605ff1fa275fbeec3812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1258cadadc6c10301eae605ff1fa275fbeec3812"}], "stats": {"total": 271, "additions": 139, "deletions": 132}, "files": [{"sha": "5d6ea645d870b332135f14587ffed66b2a16b8bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f42850b92bb731d0578fcd154388e32f4294aefa", "patch": "@@ -1,3 +1,13 @@\n+2000-01-06  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md(udivqi3, divqi3): Delete.\n+\t(umodqi3, modqi3, udivhi3, divhi3, umodhi3, modhi3, ffsqi2): Likewise.\n+\t(*smulqi3_highpart_noclobber, *umulqi3_highpart_noclobber): New.\n+\t(*lshrqi3_const_noclobber, *lshrqi3_nonconst_noclobber): Likewise.\n+\t(*ashrqi3_const_noclobber, *ashrqi3_nonconst_noclobber): Likewise.\n+\n+\t* c4x.h (INIT_TARGET_OPTABS): Define to init libcalls.\n+\n 2000-01-05 11:25 -0800  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* c-decl.c (finish_enum): Simplify code to determine minimum and"}, {"sha": "b8d11fde5a4044abf52274d4c12a8e7e06e47549", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f42850b92bb731d0578fcd154388e32f4294aefa", "patch": "@@ -232,7 +232,7 @@\n \n extern int target_flags;\n \n-#define TARGET_INLINE\t\t1 /* Inline MPYI.  */\n+#define TARGET_INLINE\t\t(! optimize_size) /* Inline MPYI.  */\n #define TARGET_PARALLEL\t        1 /* Enable parallel insns in MD.  */\n #define TARGET_SMALL_REG_CLASS\t0\n \n@@ -1445,6 +1445,39 @@ CUMULATIVE_ARGS;\n \n #define FFS_LIBCALL\t    \"__ffs\"\n \n+\n+#define INIT_TARGET_OPTABS \\\n+  do { \\\n+    smul_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (MULQI3_LIBCALL);\t\t\\\n+    sdiv_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (DIVQI3_LIBCALL);\t\t\\\n+    udiv_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (UDIVQI3_LIBCALL);\t\t\\\n+    smod_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (MODQI3_LIBCALL);\t\t\\\n+    umod_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (UMODQI3_LIBCALL);\t\t\\\n+    flodiv_optab->handlers[(int) QFmode].libfunc\t\\\n+      = init_one_libfunc (DIVQF3_LIBCALL);\t\t\\\n+    smul_optab->handlers[(int) HFmode].libfunc\t\t\\\n+      = init_one_libfunc (MULHF3_LIBCALL);\t\t\\\n+    flodiv_optab->handlers[(int) HFmode].libfunc\t\\\n+      = init_one_libfunc (DIVHF3_LIBCALL);\t\t\\\n+    smul_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = init_one_libfunc (MULHI3_LIBCALL);\t\t\\\n+    sdiv_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = init_one_libfunc (DIVHI3_LIBCALL);\t\t\\\n+    udiv_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = init_one_libfunc (UDIVHI3_LIBCALL);\t\t\\\n+    smod_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = init_one_libfunc (MODHI3_LIBCALL);\t\t\\\n+    umod_optab->handlers[(int) HImode].libfunc\t\t\\\n+      = init_one_libfunc (UMODHI3_LIBCALL);\t\t\\\n+    ffs_optab->handlers[(int) QImode].libfunc\t\t\\\n+      = init_one_libfunc (FFS_LIBCALL);\t\t\t\\\n+  } while (0)\n+\n #define TARGET_MEM_FUNCTIONS\n \n /* Add any extra modes needed to represent the condition code."}, {"sha": "7d32cc6994f26e737fb12972692fcd315408d5fe", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 95, "deletions": 131, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f42850b92bb731d0578fcd154388e32f4294aefa/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=f42850b92bb731d0578fcd154388e32f4294aefa", "patch": "@@ -1892,14 +1892,14 @@\n   \"*\n    if (IS_STD_REG (operands[0]))\n      {\n-       if (which_alternative == 0)\n+       if (which_alternative == 0 || which_alternative == 3)\n \t return \\\"addi\\\\t%2,%0\\\";\n        else\n \t return \\\"addi3\\\\t%2,%1,%0\\\";\n      }\n    else\n      {\n-       if (which_alternative == 0)\n+       if (which_alternative == 0 || which_alternative == 3)\n \t return \\\"push\\\\tst\\\\n\\\\taddi\\\\t%2,%0\\\\n\\\\tpop\\\\tst\\\";\n        else\n \t return \\\"push\\\\tst\\\\n\\\\taddi3\\\\t%2,%1,%0\\\\n\\\\tpop\\\\tst\\\";\n@@ -2333,6 +2333,22 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n    (set_attr \"data\" \"int16,int16,int16,int16,int16,int16\")])\n \n+(define_insn \"*smulqi3_highpart_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (truncate:QI \n+         (lshiftrt:HI\n+          (mult:HI\n+           (sign_extend:HI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\"))\n+           (sign_extend:HI (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))\n+      (const_int 32))))]\n+  \"! TARGET_C3X && valid_operands (MULT, operands, QImode)\"\n+  \"@\n+   mpyshi\\\\t%2,%0\n+   mpyshi3\\\\t%2,%1,%0\n+   mpyshi3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")\n+   (set_attr \"data\" \"int16,int16,int16\")])\n+\n ;\n ; MPYUHI (C4x only)\n ;\n@@ -2374,6 +2390,22 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")\n    (set_attr \"data\" \"uint16,uint16,uint16,uint16,uint16,uint16\")])\n \n+(define_insn \"*umulqi3_highpart_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (truncate:QI\n+         (lshiftrt:HI\n+          (mult:HI \n+           (zero_extend:HI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\"))\n+           (zero_extend:HI (match_operand:QI 2 \"lsrc_operand\" \"rLm,JR,rS<>\")))\n+          (const_int 32))))]\n+  \"! TARGET_C3X && valid_operands (MULT, operands, QImode)\"\n+  \"@\n+   mpyuhi\\\\t%2,%0\n+   mpyuhi3\\\\t%2,%1,%0\n+   mpyuhi3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")\n+   (set_attr \"data\" \"uint16,uint16,uint16\")])\n+\n ;\n ; AND\n ;\n@@ -2925,7 +2957,17 @@\n    lsh\\\\t%n2,%0\n    lsh3\\\\t%n2,%1,%0\n    lsh3\\\\t%n2,%1,%0\"\n-  [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n+  [(set_attr \"type\" \"binarycc,binary,binarycc,binary\")])\n+\n+(define_insn \"*lshrqi3_const_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,?c\")\n+        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,r\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"n,J\")))]\n+  \"valid_operands (LSHIFTRT, operands, QImode)\"\n+  \"@\n+   lsh\\\\t%n2,%0\n+   lsh3\\\\t%n2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary\")])\n \n ; When the shift count is greater than the size of the word\n ; the result can be implementation specific\n@@ -2960,6 +3002,18 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n+(define_insn \"*lshrqi3_nonconst_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\")\n+                     (neg:QI (match_operand:QI 2 \"src_operand\" \"rm,R,rS<>\"))))]\n+  \"valid_operands (LSHIFTRT, operands, QImode)\"\n+  \"@\n+   lsh\\\\t%2,%0\n+   lsh3\\\\t%2,%1,%0\n+   lsh3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")])\n+; Default to int16 data attr.\n+\n ;\n ; ASH (right)\n ;\n@@ -2988,7 +3042,17 @@\n    ash\\\\t%n2,%0\n    ash3\\\\t%n2,%1,%0\n    ash3\\\\t%n2,%1,%0\"\n-  [(set_attr \"type\" \"binarycc,binarycc,binarycc,binarycc\")])\n+  [(set_attr \"type\" \"binarycc,binary,binarycc,binary\")])\n+\n+(define_insn \"*ashrqi3_const_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,?c\")\n+        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,r\")\n+                     (match_operand:QI 2 \"const_int_operand\" \"n,J\")))]\n+  \"valid_operands (ASHIFTRT, operands, QImode)\"\n+  \"@\n+   ash\\\\t%n2,%0\n+   ash3\\\\t%n2,%1,%0\"\n+  [(set_attr \"type\" \"binarycc,binarycc\")])\n \n ; When the shift count is greater than the size of the word\n ; the result can be implementation specific\n@@ -3023,6 +3087,18 @@\n   [(set_attr \"type\" \"binarycc,binarycc,binarycc,binary,binary,binary\")])\n ; Default to int16 data attr.\n \n+(define_insn \"*ashrqi3_nonconst_noclobber\"\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,?c\")\n+        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"0,rR,rS<>\")\n+                     (neg:QI (match_operand:QI 2 \"src_operand\" \"rm,R,rS<>\"))))]\n+  \"valid_operands (ASHIFTRT, operands, QImode)\"\n+  \"@\n+   ash\\\\t%2,%0\n+   ash3\\\\t%2,%1,%0\n+   ash3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")])\n+; Default to int16 data attr.\n+\n ;\n ; CMPI\n ;\n@@ -3068,49 +3144,6 @@\n    cmpi3\\\\t%1,%0\"\n   [(set_attr \"type\" \"compare,compare,compare\")])\n \n-(define_expand \"udivqi3\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-                   (udiv:QI (match_operand:QI 1 \"src_operand\" \"\")\n-                            (match_operand:QI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (UDIVQI3_LIBCALL, UDIV, QImode, operands);\n-   DONE;\")\n-\n-(define_expand \"divqi3\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-                   (div:QI (match_operand:QI 1 \"src_operand\" \"\")\n-                            (match_operand:QI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (DIVQI3_LIBCALL, DIV, QImode, operands);\n-   DONE;\")\n-\n-(define_expand \"umodqi3\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-                   (umod:QI (match_operand:QI 1 \"src_operand\" \"\")\n-                            (match_operand:QI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (UMODQI3_LIBCALL, UMOD, QImode, operands);\n-   DONE;\")\n-\n-(define_expand \"modqi3\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-                   (mod:QI (match_operand:QI 1 \"src_operand\" \"\")\n-                           (match_operand:QI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (MODQI3_LIBCALL, MOD, QImode, operands);\n-   DONE;\")\n-\n-(define_expand \"ffsqi2\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n-                   (ffs:QI (match_operand:QI 1 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall (FFS_LIBCALL, FFS, QImode, QImode, 2, operands);\n-   DONE;\")\n \n ;\n ; BIT-FIELD INSTRUCTIONS\n@@ -3832,15 +3865,9 @@\n   [(parallel [(set (match_operand:QF 0 \"reg_operand\" \"\")\n                    (sqrt:QF (match_operand:QF 1 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n-  \"\"\n-  \"if (TARGET_C3X || ! TARGET_INLINE)\n-     FAIL;\n-   else\n-     {\n-       emit_insn (gen_sqrtqf2_inline (operands[0], operands[1]));\n-       DONE;\n-     }\n-  \")\n+  \"! TARGET_C3X && TARGET_INLINE\"\n+  \"emit_insn (gen_sqrtqf2_inline (operands[0], operands[1]));\n+   DONE;\")\n \n ;\n ; THREE OPERAND FLOAT INSTRUCTIONS\n@@ -4074,18 +4101,9 @@\n                    (div:QF (match_operand:QF 1 \"src_operand\" \"\")\n                             (match_operand:QF 2 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n-  \"\"\n-  \"if (TARGET_C3X || ! TARGET_INLINE)\n-     {\n-       c4x_emit_libcall3 (DIVQF3_LIBCALL, DIV, QFmode, operands);\n-       DONE;\n-     }\n-   else\n-     {\n-       emit_insn (gen_divqf3_inline (operands[0], operands[1], operands[2]));\n-       DONE;\n-     }\n-  \")\n+  \"! TARGET_C3X && TARGET_INLINE\"\n+  \"emit_insn (gen_divqf3_inline (operands[0], operands[1], operands[2]));\n+   DONE;\")\n \n ;\n ; CONDITIONAL MOVES\n@@ -5890,15 +5908,10 @@\n   [(parallel [(set (match_operand:HF 0 \"reg_operand\" \"\")\n                    (sqrt:HF (match_operand:HF 1 \"reg_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n-  \"\"\n-  \"if (TARGET_C3X || ! TARGET_INLINE)\n-     FAIL;\n-   else\n-     {\n-       emit_insn (gen_sqrthf2_inline (operands[0], operands[1]));\n-       DONE;\n-     }\n-  \")\n+  \"! TARGET_C3X && TARGET_INLINE\"\n+  \"emit_insn (gen_sqrthf2_inline (operands[0], operands[1]));\n+   DONE;\")\n+\n \n (define_expand \"fix_trunchfhi2\"\n   [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n@@ -5960,13 +5973,8 @@\n                    (mult:HF (match_operand:HF 1 \"reg_operand\" \"h\")\n                             (match_operand:HF 2 \"reg_operand\" \"h\")))\n               (clobber (reg:CC_NOOV 21))])]\n-  \"\"\n-  \"if (TARGET_C3X)\n-     {\n-       c4x_emit_libcall3 (MULHF3_LIBCALL, MULT, HFmode, operands);\n-       DONE;\n-     }\n-  \")\n+  \"! TARGET_C3X\"\n+  \"\")\n \n (define_insn \"*mulhf3_c40\"\n   [(set (match_operand:HF 0 \"reg_operand\" \"=h,?h\")\n@@ -6040,18 +6048,9 @@\n                    (div:HF (match_operand:HF 1 \"reg_operand\" \"\")\n                            (match_operand:HF 2 \"reg_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n-  \"\"\n-  \"if (TARGET_C3X || ! TARGET_INLINE)\n-     {\n-       c4x_emit_libcall3 (DIVHF3_LIBCALL, DIV, HFmode, operands);\n-       DONE;\n-     }\n-   else\n-     {\n-       emit_insn (gen_divhf3_inline (operands[0], operands[1], operands[2]));\n-       DONE;\n-     }\n-  \")\n+  \"! TARGET_C3X && TARGET_INLINE\"\n+  \"emit_insn (gen_divhf3_inline (operands[0], operands[1], operands[2]));\n+   DONE;\")\n \n \n ;\n@@ -6863,41 +6862,6 @@\n   \"c4x_emit_libcall3 (MULHI3_LIBCALL, MULT, HImode, operands);\n    DONE;\")\n \n-(define_expand \"udivhi3\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (udiv:HI (match_operand:HI 1 \"src_operand\" \"\")\n-                            (match_operand:HI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (UDIVHI3_LIBCALL, UDIV, HImode, operands);\n-   DONE;\")\n-\n-(define_expand \"divhi3\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (div:HI (match_operand:HI 1 \"src_operand\" \"\")\n-                            (match_operand:HI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (DIVHI3_LIBCALL, DIV, HImode, operands);\n-   DONE;\")\n-\n-(define_expand \"umodhi3\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (umod:HI (match_operand:HI 1 \"src_operand\" \"\")\n-                            (match_operand:HI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (UMODHI3_LIBCALL, UMOD, HImode, operands);\n-   DONE;\")\n-\n-(define_expand \"modhi3\"\n-  [(parallel [(set (match_operand:HI 0 \"reg_operand\" \"\")\n-                   (mod:HI (match_operand:HI 1 \"src_operand\" \"\")\n-                            (match_operand:HI 2 \"src_operand\" \"\")))\n-              (clobber (reg:CC 21))])]\n-  \"\"\n-  \"c4x_emit_libcall3 (MODHI3_LIBCALL, MOD, HImode, operands);\n-   DONE;\")\n \n ;\n ; PEEPHOLES"}]}