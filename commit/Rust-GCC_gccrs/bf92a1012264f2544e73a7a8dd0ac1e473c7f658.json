{"sha": "bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "node_id": "C_kwDOANBUbNoAKGJmOTJhMTAxMjI2NGYyNTQ0ZTczYTdhOGRkMGFjMWU0NzNjN2Y2NTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-23T13:37:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-23T13:37:07Z"}, "message": "Merge #969\n\n969: Add builtin macros framework r=CohenArthur a=CohenArthur\n\nThis PR adds bases to define new builtin macro functions.\r\n\r\nSince we operate at the `insert_macro_def` level, this requires builtin macros to be defined, as is the case in the rust standard library:\r\n\r\n```rust\r\n    macro_rules! assert {\r\n        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\r\n        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\r\n    }\r\n```\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "f7a3fd3afb0c2e2b2678d80dcd742da23c1b8f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7a3fd3afb0c2e2b2678d80dcd742da23c1b8f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFjiDCRBK7hj4Ov3rIwAAzrkIACboJWq/tV/Ih7/6KPrwfTos\nFRW6EpOESi8tSbSc7WFlTYAsg2tKjRsYegPsdK6F4EOiVD9FkFO6I8iSzOJoM8kT\nCmsR9uDZGOjb2WPVwHLnGZMUEw6bBKx2WqSK/YPWrHzczMJd7UeVHW7aWLdzI+ck\n78BOidk8usDm2rnAFzfiKF5ZpUIgpbtA96s8Kyv3vpX1vrvrQUaIYZwi4dqMXgej\nMvZPybi0wMdNhzzMEAqzdtFudFngIOId3Z+jKgUj1KuLT6x2EpwsJ25QsDBoepIG\nd114sNfWi5LO/mkc0BomQId74SpI2g6oqrkoD2YbNT14teIvYlv+REElVrGYIQ8=\n=OylU\n-----END PGP SIGNATURE-----\n", "payload": "tree f7a3fd3afb0c2e2b2678d80dcd742da23c1b8f9a\nparent 10de9cf4f3765526a1a82a4a7d14908b58c6538c\nparent 48b3fe622e9a582b076c6f4b19b5e8b69891ac31\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645623427 +0000\ncommitter GitHub <noreply@github.com> 1645623427 +0000\n\nMerge #969\n\n969: Add builtin macros framework r=CohenArthur a=CohenArthur\n\nThis PR adds bases to define new builtin macro functions.\r\n\r\nSince we operate at the `insert_macro_def` level, this requires builtin macros to be defined, as is the case in the rust standard library:\r\n\r\n```rust\r\n    macro_rules! assert {\r\n        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\r\n        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\r\n    }\r\n```\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10de9cf4f3765526a1a82a4a7d14908b58c6538c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10de9cf4f3765526a1a82a4a7d14908b58c6538c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10de9cf4f3765526a1a82a4a7d14908b58c6538c"}, {"sha": "48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3fe622e9a582b076c6f4b19b5e8b69891ac31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b3fe622e9a582b076c6f4b19b5e8b69891ac31"}], "stats": {"total": 141, "additions": 135, "deletions": 6}, "files": [{"sha": "9de93fed1e3447042ef962cf1b6346f139219e22", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -75,6 +75,7 @@ GRS_OBJS = \\\n     rust/rust-compile-resolve-path.o \\\n     rust/rust-macro-expand.o \\\n     rust/rust-macro-invoc-lexer.o \\\n+    rust/rust-macro-builtins.o \\\n     rust/rust-hir-full-test.o \\\n     rust/rust-hir-map.o \\\n     rust/rust-attributes.o \\"}, {"sha": "9f8f19c61c59bef34c1f101d155f057bb230b067", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -361,9 +361,26 @@ class MacroRulesDefinition : public MacroItem\n   DelimType delim_type;\n   // MacroRules rules;\n   std::vector<MacroRule> rules; // inlined form\n-\n   Location locus;\n \n+  std::function<ASTFragment (Location, MacroInvocData &)>\n+    associated_transcriber;\n+  // Since we can't compare std::functions, we need to use an extra boolean\n+  bool is_builtin_rule;\n+\n+  /**\n+   * Default function to use as an associated transcriber. This function should\n+   * never be called, hence the gcc_unreachable().\n+   * If this function is used, then the macro is not builtin and the compiler\n+   * should make use of the actual rules. If the macro is builtin, then another\n+   * associated transcriber should be used\n+   */\n+  static ASTFragment dummy_builtin (Location, MacroInvocData &)\n+  {\n+    gcc_unreachable ();\n+    return ASTFragment::create_empty ();\n+  }\n+\n   /* NOTE: in rustc, macro definitions are considered (and parsed as) a type\n    * of macro, whereas here they are considered part of the language itself.\n    * I am not aware of the implications of this decision. The rustc spec does\n@@ -377,7 +394,17 @@ class MacroRulesDefinition : public MacroItem\n \t\t\tstd::vector<MacroRule> rules,\n \t\t\tstd::vector<Attribute> outer_attrs, Location locus)\n     : outer_attrs (std::move (outer_attrs)), rule_name (std::move (rule_name)),\n-      delim_type (delim_type), rules (std::move (rules)), locus (locus)\n+      delim_type (delim_type), rules (std::move (rules)), locus (locus),\n+      associated_transcriber (dummy_builtin), is_builtin_rule (false)\n+  {}\n+\n+  MacroRulesDefinition (Identifier builtin_name, DelimType delim_type,\n+\t\t\tstd::function<ASTFragment (Location, MacroInvocData &)>\n+\t\t\t  associated_transcriber)\n+    : outer_attrs (std::vector<Attribute> ()), rule_name (builtin_name),\n+      delim_type (delim_type), rules (std::vector<MacroRule> ()),\n+      locus (Location ()), associated_transcriber (associated_transcriber),\n+      is_builtin_rule (true)\n   {}\n \n   void accept_vis (ASTVisitor &vis) override;\n@@ -400,6 +427,20 @@ class MacroRulesDefinition : public MacroItem\n   std::vector<MacroRule> &get_rules () { return rules; }\n   const std::vector<MacroRule> &get_rules () const { return rules; }\n \n+  bool is_builtin () const { return is_builtin_rule; }\n+  const std::function<ASTFragment (Location, MacroInvocData &)> &\n+  get_builtin_transcriber () const\n+  {\n+    rust_assert (is_builtin ());\n+    return associated_transcriber;\n+  }\n+  void set_builtin_transcriber (\n+    std::function<ASTFragment (Location, MacroInvocData &)> transcriber)\n+  {\n+    associated_transcriber = transcriber;\n+    is_builtin_rule = true;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "b7bbd32c3224b3046568e3d1e1754a799e0ed935", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-macro-builtins.h\"\n+#include \"rust-diagnostics.h\"\n+\n+namespace Rust {\n+AST::ASTFragment\n+MacroBuiltin::assert (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  rust_debug (\"assert!() called\");\n+\n+  return AST::ASTFragment::create_empty ();\n+}\n+} // namespace Rust"}, {"sha": "f279d390ffe071d7c8a5c004918c997b81937c6d", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_MACRO_BUILTINS_H\n+#define RUST_MACRO_BUILTINS_H\n+\n+#include \"rust-ast.h\"\n+#include \"rust-location.h\"\n+\n+namespace Rust {\n+class MacroBuiltin\n+{\n+public:\n+  static AST::ASTFragment assert (Location invoc_locus,\n+\t\t\t\t  AST::MacroInvocData &invoc);\n+};\n+} // namespace Rust\n+\n+#endif // RUST_MACRO_BUILTINS_H"}, {"sha": "7552e82a1c5429c3d384a6c84121e1486b764e2e", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -3194,8 +3194,14 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment\n-    = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n+  auto fragment = AST::ASTFragment::create_empty ();\n+\n+  if (rules_def->is_builtin ())\n+    fragment\n+      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  else\n+    fragment\n+      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n \n   // lets attach this fragment to the invocation\n   invoc.set_fragment (std::move (fragment));\n@@ -3229,8 +3235,14 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocationSemi &invoc)\n   bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n   rust_assert (ok);\n \n-  auto fragment\n-    = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n+  auto fragment = AST::ASTFragment::create_empty ();\n+\n+  if (rules_def->is_builtin ())\n+    fragment\n+      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  else\n+    fragment\n+      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n \n   // lets attach this fragment to the invocation\n   invoc.set_fragment (std::move (fragment));"}, {"sha": "1c0e8fcb9ca814481a0fec860c77a1e10ce7376b", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf92a1012264f2544e73a7a8dd0ac1e473c7f658/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "patch": "@@ -19,6 +19,7 @@\n #include \"rust-hir-map.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-macro-builtins.h\"\n \n namespace Rust {\n namespace Analysis {\n@@ -741,6 +742,16 @@ Mappings::iterate_trait_items (\n void\n Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n {\n+  static std::map<std::string, std::function<AST::ASTFragment (\n+\t\t\t\t Location, AST::MacroInvocData &)>>\n+    builtin_macros = {\n+      {\"assert\", MacroBuiltin::assert},\n+    };\n+\n+  auto builtin = builtin_macros.find (macro->get_rule_name ());\n+  if (builtin != builtin_macros.end ())\n+    macro->set_builtin_transcriber (builtin->second);\n+\n   auto it = macroMappings.find (macro->get_node_id ());\n   rust_assert (it == macroMappings.end ());\n "}]}