{"sha": "27954bdbc3051fbf6adfdc8675fa33f36da7c292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5NTRiZGJjMzA1MWZiZjZhZGZkYzg2NzVmYTMzZjM2ZGE3YzI5Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-31T17:13:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-31T17:13:31Z"}, "message": "tree-ssa-alias.c: Follow spelling conventions.\n\n\t* tree-ssa-alias.c: Follow spelling conventions.\n\t* doc/tree-ssa.texi: Fix a typo.\n\nFrom-SVN: r97334", "tree": {"sha": "6544ab3575c2f1550b952adb35ce9a54e148107e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6544ab3575c2f1550b952adb35ce9a54e148107e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27954bdbc3051fbf6adfdc8675fa33f36da7c292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27954bdbc3051fbf6adfdc8675fa33f36da7c292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27954bdbc3051fbf6adfdc8675fa33f36da7c292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27954bdbc3051fbf6adfdc8675fa33f36da7c292/comments", "author": null, "committer": null, "parents": [{"sha": "1239de63cb90a4f257c803391d600ae1be99b51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1239de63cb90a4f257c803391d600ae1be99b51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1239de63cb90a4f257c803391d600ae1be99b51b"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "7cf6097b988e66500a2b92590ad40dc991252eb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27954bdbc3051fbf6adfdc8675fa33f36da7c292", "patch": "@@ -1,3 +1,8 @@\n+2005-03-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-alias.c: Follow spelling conventions.\n+\t* doc/tree-ssa.texi: Fix a typo.\n+\n 2005-03-31  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* postreload-gcse.c: Include target.h."}, {"sha": "27e0d34f55071f138f0a6a54a139238926576a85", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=27954bdbc3051fbf6adfdc8675fa33f36da7c292", "patch": "@@ -685,7 +685,7 @@ void f()\n \n The optimizers need to associate attributes with statements and\n variables during the optimization process.  For instance, we need to\n-know what basic block does a statement belong to or whether a variable\n+know what basic block a statement belongs to or whether a variable\n has aliases.  All these attributes are stored in data structures\n called annotations which are then linked to the field @code{ann} in\n @code{struct tree_common}."}, {"sha": "0327e3441b297ba4d981f916c906a553fd2e76ec", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27954bdbc3051fbf6adfdc8675fa33f36da7c292/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=27954bdbc3051fbf6adfdc8675fa33f36da7c292", "patch": "@@ -2709,7 +2709,7 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_t) **fieldstack,\n     {\n       size_t before = VEC_length (fieldoff_t, *fieldstack);\n       /* Empty structures may have actual size, like in C++. So see if we\n-\t actually end up pushing a field, and if not, if the size is non-zero,\n+\t actually end up pushing a field, and if not, if the size is nonzero,\n \t push the field onto the stack */\n       push_fields_onto_fieldstack (TREE_TYPE (field), fieldstack, offset);\n       if (before == VEC_length (fieldoff_t, *fieldstack)\n@@ -2739,7 +2739,7 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_t) **fieldstack,\n \t  push_fields_onto_fieldstack (TREE_TYPE (field), fieldstack, \n \t\t\t\t       offset + bitpos_of_field (field));\n       /* Empty structures may have actual size, like in C++. So see if we\n-\t actually end up pushing a field, and if not, if the size is non-zero,\n+\t actually end up pushing a field, and if not, if the size is nonzero,\n \t push the field onto the stack */\n \t  if (before == VEC_length (fieldoff_t, *fieldstack)\n \t      && DECL_SIZE (field)"}]}