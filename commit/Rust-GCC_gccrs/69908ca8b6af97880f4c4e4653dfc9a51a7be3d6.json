{"sha": "69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5MDhjYThiNmFmOTc4ODBmNGM0ZTQ2NTNkZmM5YTUxYTdiZTNkNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-26T22:42:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-26T22:42:35Z"}, "message": "compiler: reject integer division by zero constant.\n\nFrom-SVN: r200436", "tree": {"sha": "80c3c4288b5dd0d2a516d77d36fc58e905b7d0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c3c4288b5dd0d2a516d77d36fc58e905b7d0de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/comments", "author": null, "committer": null, "parents": [{"sha": "9e2166298aa8a296540b5f72b135f9cf989d8671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2166298aa8a296540b5f72b135f9cf989d8671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2166298aa8a296540b5f72b135f9cf989d8671"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "2b60d90a5dc6071633e3321a27aa42a7c5bbb5fe", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "patch": "@@ -5848,6 +5848,20 @@ Binary_expression::do_check_types(Gogo*)\n \t  this->set_is_error();\n \t  return;\n \t}\n+      if (this->op_ == OPERATOR_DIV || this->op_ == OPERATOR_MOD)\n+\t{\n+\t  // Division by a zero integer constant is an error.\n+\t  Numeric_constant rconst;\n+\t  unsigned long rval;\n+\t  if (left_type->integer_type() != NULL\n+\t      && this->right_->numeric_constant_value(&rconst)\n+\t      && rconst.to_unsigned_long(&rval) == Numeric_constant::NC_UL_VALID\n+\t      && rval == 0)\n+\t    {\n+\t      this->report_error(_(\"integer division by zero\"));\n+\t      return;\n+\t    }\n+\t}\n     }\n   else\n     {"}, {"sha": "d99d8e83f0d544dc195cb2bb53ba8434b1c04e36", "filename": "gcc/testsuite/go.test/test/64bit.go", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2F64bit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2F64bit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2F64bit.go?ref=69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "patch": "@@ -594,6 +594,19 @@ const binaryConstR = \"func test%vBinaryR%v(a, add, sub, mul, div, mod, and, or,\n \t\"}\\n\" +\n \t\"\\n\"\n \n+const binaryConstR0 = \"func test%vBinaryR%v(a, add, sub, mul, div, mod, and, or, xor, andnot %v, dodiv bool) {\\n\" +\n+\t\"\tconst b %v = %v;\\n\" +\n+\t\"\tconst typ = `%s`;\\n\" +\n+\t\"\tif n, op, want := a + b, `+`, add; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a - b, `-`, sub; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a * b, `*`, mul; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a & b, `&`, and; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a | b, `|`, or; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a ^ b, `^`, xor; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"\tif n, op, want := a &^ b, `&^`, andnot; n != want { ok=false; println(typ, `var`, a, op, `const`, b, `=`, n, `should be`, want); }\\n\" +\n+\t\"}\\n\" +\n+\t\"\\n\"\n+\n const shiftConstL = \"func test%vShiftL%v(b uint64, left, right %v) {\\n\" +\n \t\"\tconst a %v = %v;\\n\" +\n \t\"\tconst typ = `%s`;\\n\" +\n@@ -621,12 +634,20 @@ const shiftConstR = \"func test%vShiftR%v(a, left, right %v) {\\n\" +\n func constTests() {\n \tfor i, a := range int64Values {\n \t\tfmt.Fprintf(bout, binaryConstL, \"Int64\", i, \"int64\", \"int64\", a, \"int64\")\n-\t\tfmt.Fprintf(bout, binaryConstR, \"Int64\", i, \"int64\", \"int64\", a, \"int64\")\n+\t\tif a.hi == 0 && a.lo == 0 {\n+\t\t\tfmt.Fprintf(bout, binaryConstR0, \"Int64\", i, \"int64\", \"int64\", a, \"int64\")\n+\t\t} else {\n+\t\t\tfmt.Fprintf(bout, binaryConstR, \"Int64\", i, \"int64\", \"int64\", a, \"int64\")\n+\t\t}\n \t\tfmt.Fprintf(bout, shiftConstL, \"Int64\", i, \"int64\", \"int64\", a, \"int64\")\n \t}\n \tfor i, a := range uint64Values {\n \t\tfmt.Fprintf(bout, binaryConstL, \"Uint64\", i, \"uint64\", \"uint64\", a, \"uint64\")\n-\t\tfmt.Fprintf(bout, binaryConstR, \"Uint64\", i, \"uint64\", \"uint64\", a, \"uint64\")\n+\t\tif a.hi == 0 && a.lo == 0 {\n+\t\t\tfmt.Fprintf(bout, binaryConstR0, \"Uint64\", i, \"uint64\", \"uint64\", a, \"uint64\")\n+\t\t} else {\n+\t\t\tfmt.Fprintf(bout, binaryConstR, \"Uint64\", i, \"uint64\", \"uint64\", a, \"uint64\")\n+\t\t}\n \t\tfmt.Fprintf(bout, shiftConstL, \"Uint64\", i, \"uint64\", \"uint64\", a, \"uint64\")\n \t}\n \tfor i, a := range shiftValues {"}, {"sha": "430ddcbb5237511a829aa5ceefb7b5cca95e5373", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug410.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug410.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69908ca8b6af97880f4c4e4653dfc9a51a7be3d6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug410.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug410.go?ref=69908ca8b6af97880f4c4e4653dfc9a51a7be3d6", "patch": "@@ -18,7 +18,7 @@ func zzz () {\n     for s := range arr {\n         x := make([]byte, 10)\n         for i := 0; i < 100 ; i++ {\n-            x[i] ^= k[i-arr[s].num%0]\n+            x[i] ^= k[i-arr[s].num%3]\n         }\n     }\n }"}]}