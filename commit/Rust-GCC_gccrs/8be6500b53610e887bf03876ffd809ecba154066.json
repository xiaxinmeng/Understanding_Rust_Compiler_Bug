{"sha": "8be6500b53610e887bf03876ffd809ecba154066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlNjUwMGI1MzYxMGU4ODdiZjAzODc2ZmZkODA5ZWNiYTE1NDA2Ng==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-11-23T21:16:26Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-11-23T21:16:26Z"}, "message": "re PR target/53976 ([SH] Unnecessary clrt/sett after bt/bf)\n\ngcc/\n\tPR target/53976\n\t* config/sh/sh_optimize_sett_clrt.cc\n\t(sh_optimize_sett_clrt::find_last_ccreg_values): Return bool instead\n\tof void.  Abort at complex edges.\n\t(sh_optimize_sett_clrt::execute): Do nothing if find_last_ccreg_values\n\treturned false.\n\nFrom-SVN: r217987", "tree": {"sha": "52230d94b119daed9fc9fda7214e2891cd123d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52230d94b119daed9fc9fda7214e2891cd123d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be6500b53610e887bf03876ffd809ecba154066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be6500b53610e887bf03876ffd809ecba154066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be6500b53610e887bf03876ffd809ecba154066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be6500b53610e887bf03876ffd809ecba154066/comments", "author": null, "committer": null, "parents": [{"sha": "bc1b9ef1515041e06190f8833719334be27f82b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1b9ef1515041e06190f8833719334be27f82b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1b9ef1515041e06190f8833719334be27f82b3"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "7e1f741cc0002d6547dd1e532928256aa63eaec2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be6500b53610e887bf03876ffd809ecba154066/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be6500b53610e887bf03876ffd809ecba154066/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8be6500b53610e887bf03876ffd809ecba154066", "patch": "@@ -1,3 +1,12 @@\n+2014-11-23  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53976\n+\t* config/sh/sh_optimize_sett_clrt.cc\n+\t(sh_optimize_sett_clrt::find_last_ccreg_values): Return bool instead\n+\tof void.  Abort at complex edges.\n+\t(sh_optimize_sett_clrt::execute): Do nothing if find_last_ccreg_values\n+\treturned false.\n+\n 2014-11-22  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR other/63694"}, {"sha": "f19c2ebf383a2e677efec3f223a7f78478c8935b", "filename": "gcc/config/sh/sh_optimize_sett_clrt.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be6500b53610e887bf03876ffd809ecba154066/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be6500b53610e887bf03876ffd809ecba154066/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc?ref=8be6500b53610e887bf03876ffd809ecba154066", "patch": "@@ -126,7 +126,7 @@ class sh_optimize_sett_clrt : public rtl_opt_pass\n   // Given a start insn and its basic block, recursively determine all\n   // possible ccreg values in all basic block paths that can lead to the\n   // start insn.\n-  void find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n+  bool find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n \t\t\t       std::vector<ccreg_value>& values_out,\n \t\t\t       std::vector<basic_block>& prev_visited_bb) const;\n \n@@ -239,16 +239,16 @@ sh_optimize_sett_clrt::execute (function* fun)\n \n \t    ccreg_values.clear ();\n \t    visited_bbs.clear ();\n-\t    find_last_ccreg_values (PREV_INSN (i), bb, ccreg_values,\n-\t\t\t\t    visited_bbs);\n+\t    bool ok = find_last_ccreg_values (PREV_INSN (i), bb, ccreg_values,\n+\t\t\t\t\t      visited_bbs);\n \n \t    log_msg (\"number of ccreg values collected: %u\\n\",\n \t\t     (unsigned int)ccreg_values.size ());\n \n \t    // If all the collected values are equal and are equal to the\n \t    // constant value of the setcc insn, the setcc insn can be\n \t    // removed.\n-\t    if (all_ccreg_values_equal (ccreg_values)\n+\t    if (ok && all_ccreg_values_equal (ccreg_values)\n \t\t&& rtx_equal_p (ccreg_values.front ().value, setcc_val))\n \t      {\n \t\tlog_msg (\"all values are \");\n@@ -322,7 +322,7 @@ ::sh_cbranch_ccreg_value (rtx_insn *cbranch_insn, basic_block cbranch_insn_bb,\n     gcc_unreachable ();\n }\n \n-void\n+bool\n sh_optimize_sett_clrt\n ::find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n \t\t\t  std::vector<ccreg_value>& values_out,\n@@ -361,7 +361,7 @@ ::find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n \t  log_msg (\"\\n\");\n \n \t  values_out.push_back (v);\n-\t  return;\n+\t  return true;\n \t}\n \n       if (any_condjump_p (i) && onlyjump_p (i) && !prev_visited_bb.empty ())\n@@ -385,7 +385,7 @@ ::find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n \t  log_msg (\"\\n\");\n \n \t  values_out.push_back (v);\n-\t  return;\n+\t  return true;\n \t}\n     }\n \n@@ -406,10 +406,14 @@ ::find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n       for (edge_iterator ei = ei_start (bb->preds); !ei_end_p (ei);\n \t   ei_next (&ei))\n \t{\n+\t  if (ei_edge (ei)->flags & EDGE_COMPLEX)\n+\t    log_return (false, \"aborting due to complex edge\\n\");\n+\n \t  basic_block pred_bb = ei_edge (ei)->src;\n \t  pred_bb_count += 1;\n-\t  find_last_ccreg_values (BB_END (pred_bb), pred_bb, values_out,\n-\t\t\t\t  prev_visited_bb);\n+\t  if (!find_last_ccreg_values (BB_END (pred_bb), pred_bb, values_out,\n+\t\t\t\t       prev_visited_bb))\n+\t    return false;\n \t}\n \n       prev_visited_bb.pop_back ();\n@@ -432,6 +436,8 @@ ::find_last_ccreg_values (rtx_insn *start_insn, basic_block bb,\n \n     values_out.push_back (v);\n   }\n+\n+  return true;\n }\n \n bool"}]}