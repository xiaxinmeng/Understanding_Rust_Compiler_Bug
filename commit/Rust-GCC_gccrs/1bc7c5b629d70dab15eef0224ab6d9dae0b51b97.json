{"sha": "1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjN2M1YjYyOWQ3MGRhYjE1ZWVmMDIyNGFiNmQ5ZGFlMGI1MWI5Nw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-19T21:47:26Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-19T21:47:26Z"}, "message": "target.h (asm_out.file_start, [...]): New hooks.\n\n\t* target.h (asm_out.file_start, file_start_app_off,\n\tfile_start_file_directive): New hooks.\n\t* target-def.h (TARGET_ASM_FILE_START_FILE_DIRECTIVE,\n\tTARGET_ASM_FILE_START_APP_OFF, TARGET_ASM_FILE_START):\n\tNew hook-definition macros.\n\t* doc/tm.texi: Document new hooks; remove docs of ASM_FILE_START.\n\t* varasm.c (default_file_start): New.\n\t* output.h: Prototype it.\n\t* toplev.c (init_asm_output): Use targetm.asm_out.file_start.\n\t* system.h: Poison ASM_FILE_START.\n\n\t* config/alpha/alpha.c (alpha_write_verstamp): Delete.\n\t(alpha_file_start): New, define if !TARGET_ABI_UNICOSMK.\n\t(unicosmk_asm_file_start): Rename unicosmk_file_start,\n\tmake static, take no arguments.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_END,\n\tTARGET_ASM_FILE_START_FILE_DIRECTIVE): Set as appropriate.\n\t* config/alpha/unicosmk.h: Don't define ASM_FILE_START nor\n\tTARGET_ASM_FILE_END.  Remove reference to ASM_FILE_START in\n\tcomment.\n\t* config/arc/arc.c (arc_asm_file_start): Rename\n\tarc_file_start, take no arguments, make static.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/arm/arm.c (aof_file_start): New static function.\n\t(TARGET_ASM_FILE_START): Set it, when appropriate.\n\t* config/arm/coff.h, config/arm/elf.h:\n\tSet TARGET_ASM_FILE_START_APP_OFF to true.\n\t* config/avr/avr.c (asm_file_start): Rename avr_file_start,\n\ttake no arguments, make static.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE):\n\tSet them.\n\t* config/c4x/c4x.c (c4x_file_start): New static function.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE):\n\tSet them.\n\t* config/cris/cris.c (cris_file_start): New static function.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/dsp16xx/dsp16xx.c (coff_dsp16xx_file_start): Rename\n\tdsp16xx_file_start, make static.\n\t(luxworks_dsp16xx_file_start): Delete.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/h8300/h8300.c (asm_file_start): Rename\n\th8300_file_start, make static, take no arguments.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/i370/i370.c (i370_file_start): New static function.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/i386/i386.c (x86_file_start): New static function.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/i386/i386.h (X86_FILE_START_VERSION_DIRECTIVE,\n\tX86_FILE_START_FLTUSED): New macros, default to false.\n\t* config/i386/i386-interix.h: Override X86_FILE_START_FLTUSED to 1.\n\t* config/i386/sysv4.h, config/i386/sco5.h: Override\n\tX86_FILE_START_VERSION_DIRECTIVE to true.\n\t* config/ia64/ia64.c (ia64_file_start): New static function.\n\t(TARGET_ASM_FILE_START): Set it.\n\t(emit_safe_across_calls): Take no arguments.\n\t* config/ia64/ia64.md: Update to match.\n\t* config/m32r/m32r.c (m32r_asm_file_start): Rename\n\tm32r_file_start, make static, take no arguments.\n\t(TARGET_ASM_FILE_START): Set it.\n\t* config/m68hc11/m68hc11.c (m68hc11_asm_file_start): Rename\n\tm68hc11_file_start, make static, take no arguments.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t(print_options): Delete.\n\t* config/m68k/m68k.c (m68k_hp320_file_start): New static function.\n\t(TARGET_ASM_FILE_START_APP_OFF): Set.\n\t* config/m68k/hp320.h: Set TARGET_ASM_FILE_START to\n\tm68k_hp320_file_start.\n\t* config/mips/mips.c (iris6_asm_file_start, mips_asm_file_start):\n\tMake static, take no arguments.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t* config/mmix/mmix.c (mmix_asm_file_start): Rename\n\tmmix_file_start, make static, take no arguments.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t* config/mn10300/mn10300.c (asm_file_start): Rename\n\tmn10300_file_start, make static, take no arguments.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t* config/ns32k/ns32k.c (TARGET_ASM_FILE_START_APP_OFF): Set.\n\t* config/pa/pa.c (pa_file_start_level, pa_file_start_space,\n\tpa_file_start_file, pa_file_start_mcount, pa_elf_file_start,\n\tpa_som_file_start, pa_linux_file_start, pa_hpux64_gas_file_start,\n\tpa_hpux64_hpas_file_start): New static functions.\n\t* config/pa/elf.h: Set TARGET_ASM_FILE_START to pa_elf_file_start.\n\t* config/pa/pa-linux.h: Set TARGET_ASM_FILE_START to\n\tpa_linux_file_start.\n\t* config/pa/pa64-hpux.h: Set TARGET_ASM_FILE_START to\n\tpa_hpux64_gas_file_start or pa_hpux64_hpas_file_start, as\n\tappropriate.\n\t* config/pa/som.h: Set TARGET_ASM_FILE_START to pa_som_file_start.\n\t* config/rs6000/rs6000.c: Include xcoffout.h when TARGET_XCOFF.\n\t(rs6000_file_start): Make static, take no arguments.  Reset\n\tdefault_cpu under certain conditions.\n\t(rs6000_xcoff_file_start): New function.\n\t* config/rs6000/rs6000.h (TARGET_ASM_FILE_START): Set.\n\t* config/rs6000/xcoff.h (TARGET_ASM_FILE_START,\n\tTARGET_ASM_FILE_START_FILE_DIRECTIVE): Override.\n\t* config/sh/sh.c (output_file_start): Rename\n\tsh_file_start, make static, take no arguments.  Merge in old\n\tcode from sh/elf.h's ASM_FILE_START, conditioned on TARGET_ELF.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t* config/sh/sh.c (TARGET_ELF): Define to 0.\n\t* config/sh/elf.h (TARGET_ELF): Redefine to 1.\n\t* config/v850/v850.c (asm_file_start): Delete.\n\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n\t* config/vax/vax.c (vax_file_start): New static function.\n\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_APP_OFF): Set.\n\n\t* config/darwin.h: Override ASM_FILE_START_FILE_DIRECTIVE to false.\n\t* config/elfos.h, config/svr3.h, config/arm/elf.h, config/arm/pe.h\n\t* config/i386/att.h, config/i386/gas.h, config/i386/linux.h\n\t* config/i386/sysv4.h, config/i386/sco5.h, config/i960/i960-coff.h\n\t* config/m68k/coff.h, config/m68k/hp320.h, config/mcore/mcore-pe.h\n\t* config/vax/vaxv.h: Set ASM_FILE_START_FILE_DIRECTIVE to true.\n\n\t* config/darwin.h, config/elfos.h, config/alpha/elf.h\n\t* config/alpha/openbsd.h, config/alpha/osf.h, config/alpha/vms.h\n\t* config/arc/arc.h, config/arm/aof.h, config/arm/aout.h\n\t* config/arm/coff.h, config/arm/elf.h, config/arm/pe.h\n\t* config/avr/avr.h, config/c4x/c4x.h, config/cris/cris.h\n\t* config/dsp16xx/dsp16xx.h, config/h8300/elf.h, config/h8300/h8300.h\n\t* config/i370/i370.h, config/i386/att.h, config/i386/gas.h\n\t* config/i386/i386-interix.h, config/i386/linux.h, config/i386/sysv4.h\n\t* config/i386/sco5.h, config/i960/i960-coff.h, config/i960/i960.h\n\t* config/ia64/ia64.h, config/ia64/sysv4.h, config/m32r/m32r.h\n\t* config/m68hc11/m68hc11.h, config/m68k/coff.h, config/m68k/m68k.h\n\t* config/mcore/mcore-pe.h, config/mips/iris6.h, config/mips/mips.h\n\t* config/mmix/mmix.h, config/mn10300/mn10300.h, config/ns32k/ns32k.h\n\t* config/pa/elf.h, config/pa/pa-linux.h, config/pa/pa64-hpux.h\n\t* config/pa/som.h, config/pdp11/pdp11.h, config/rs6000/linux64.h\n\t* config/rs6000/lynx.h, config/rs6000/xcoff.h, config/sh/elf.h\n\t* config/sh/sh.h, config/sparc/sparc.h, config/v850/v850.h\n\t* config/vax/vax.h, config/vax/vaxv.h: Don't (re)define ASM_FILE_START.\n\n\t* config/alpha/alpha-protos.h, config/arc/arc-protos.h\n\t* config/avr/avr-protos.h, config/dsp16xx/dsp16xx-protos.h\n\t* config/h8300/h8300-protos.h, config/ia64/ia64-protos.h\n\t* config/m32r/m32r-protos.h, config/m68hc11/m68hc11-protos.h\n\t* config/mips/mips-protos.h, config/mmix/mmix-protos.h\n\t* config/mn10300/mn10300-protos.h, config/rs6000/rs6000-protos.h\n\t* config/sh/sh-protos.h, config/v850/v850-protos.h: Update.\n\n\t* xcoffout.h, config/rs6000/aix.h, config/rs6000/xcoff.h:\n\tRemove reference to ASM_FILE_START in comment.\n\t* config/arm/aof.h, config/arm/aout.h, config/arm/freebsd.h\n\t* config/arm/linux-gas.h, config/arm/netbsd-elf.h\n\t* config/arm/netbsd.h: Delete definition of ARM_OS_NAME.\n\nFrom-SVN: r68229", "tree": {"sha": "dfd0d874fe0ca79570b8c8107638e443f836c8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd0d874fe0ca79570b8c8107638e443f836c8f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/comments", "author": null, "committer": null, "parents": [{"sha": "b556e18c83e9cf595fa9452a956a4641d1337e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b556e18c83e9cf595fa9452a956a4641d1337e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b556e18c83e9cf595fa9452a956a4641d1337e52"}], "stats": {"total": 1820, "additions": 840, "deletions": 980}, "files": [{"sha": "f33760127f13fcce246786fcb48fe578ed73b44d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 184, "deletions": 36, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1,3 +1,151 @@\n+2003-06-19  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* target.h (asm_out.file_start, file_start_app_off,\n+\tfile_start_file_directive): New hooks.\n+\t* target-def.h (TARGET_ASM_FILE_START_FILE_DIRECTIVE,\n+\tTARGET_ASM_FILE_START_APP_OFF, TARGET_ASM_FILE_START):\n+\tNew hook-definition macros.\n+\t* doc/tm.texi: Document new hooks; remove docs of ASM_FILE_START.\n+\t* varasm.c (default_file_start): New.\n+\t* output.h: Prototype it.\n+\t* toplev.c (init_asm_output): Use targetm.asm_out.file_start.\n+\t* system.h: Poison ASM_FILE_START.\n+\n+\t* config/alpha/alpha.c (alpha_write_verstamp): Delete.\n+\t(alpha_file_start): New, define if !TARGET_ABI_UNICOSMK.\n+\t(unicosmk_asm_file_start): Rename unicosmk_file_start,\n+\tmake static, take no arguments.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_END,\n+\tTARGET_ASM_FILE_START_FILE_DIRECTIVE): Set as appropriate.\n+\t* config/alpha/unicosmk.h: Don't define ASM_FILE_START nor\n+\tTARGET_ASM_FILE_END.  Remove reference to ASM_FILE_START in\n+\tcomment.\n+\t* config/arc/arc.c (arc_asm_file_start): Rename\n+\tarc_file_start, take no arguments, make static.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/arm/arm.c (aof_file_start): New static function.\n+\t(TARGET_ASM_FILE_START): Set it, when appropriate.\n+\t* config/arm/coff.h, config/arm/elf.h:\n+\tSet TARGET_ASM_FILE_START_APP_OFF to true.\n+\t* config/avr/avr.c (asm_file_start): Rename avr_file_start,\n+\ttake no arguments, make static.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE):\n+\tSet them.\n+\t* config/c4x/c4x.c (c4x_file_start): New static function.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE):\n+\tSet them.\n+\t* config/cris/cris.c (cris_file_start): New static function.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/dsp16xx/dsp16xx.c (coff_dsp16xx_file_start): Rename\n+\tdsp16xx_file_start, make static.\n+\t(luxworks_dsp16xx_file_start): Delete.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/h8300/h8300.c (asm_file_start): Rename\n+\th8300_file_start, make static, take no arguments.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/i370/i370.c (i370_file_start): New static function.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/i386/i386.c (x86_file_start): New static function.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/i386/i386.h (X86_FILE_START_VERSION_DIRECTIVE,\n+\tX86_FILE_START_FLTUSED): New macros, default to false.\n+\t* config/i386/i386-interix.h: Override X86_FILE_START_FLTUSED to 1.\n+\t* config/i386/sysv4.h, config/i386/sco5.h: Override\n+\tX86_FILE_START_VERSION_DIRECTIVE to true.\n+\t* config/ia64/ia64.c (ia64_file_start): New static function.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t(emit_safe_across_calls): Take no arguments.\n+\t* config/ia64/ia64.md: Update to match.\n+\t* config/m32r/m32r.c (m32r_asm_file_start): Rename\n+\tm32r_file_start, make static, take no arguments.\n+\t(TARGET_ASM_FILE_START): Set it.\n+\t* config/m68hc11/m68hc11.c (m68hc11_asm_file_start): Rename\n+\tm68hc11_file_start, make static, take no arguments.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t(print_options): Delete.\n+\t* config/m68k/m68k.c (m68k_hp320_file_start): New static function.\n+\t(TARGET_ASM_FILE_START_APP_OFF): Set.\n+\t* config/m68k/hp320.h: Set TARGET_ASM_FILE_START to\n+\tm68k_hp320_file_start.\n+\t* config/mips/mips.c (iris6_asm_file_start, mips_asm_file_start):\n+\tMake static, take no arguments.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t* config/mmix/mmix.c (mmix_asm_file_start): Rename\n+\tmmix_file_start, make static, take no arguments.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t* config/mn10300/mn10300.c (asm_file_start): Rename\n+\tmn10300_file_start, make static, take no arguments.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t* config/ns32k/ns32k.c (TARGET_ASM_FILE_START_APP_OFF): Set.\n+\t* config/pa/pa.c (pa_file_start_level, pa_file_start_space,\n+\tpa_file_start_file, pa_file_start_mcount, pa_elf_file_start,\n+\tpa_som_file_start, pa_linux_file_start, pa_hpux64_gas_file_start,\n+\tpa_hpux64_hpas_file_start): New static functions.\n+\t* config/pa/elf.h: Set TARGET_ASM_FILE_START to pa_elf_file_start.\n+\t* config/pa/pa-linux.h: Set TARGET_ASM_FILE_START to\n+\tpa_linux_file_start.\n+\t* config/pa/pa64-hpux.h: Set TARGET_ASM_FILE_START to\n+\tpa_hpux64_gas_file_start or pa_hpux64_hpas_file_start, as\n+\tappropriate.\n+\t* config/pa/som.h: Set TARGET_ASM_FILE_START to pa_som_file_start.\n+\t* config/rs6000/rs6000.c: Include xcoffout.h when TARGET_XCOFF.\n+\t(rs6000_file_start): Make static, take no arguments.  Reset\n+\tdefault_cpu under certain conditions.\n+\t(rs6000_xcoff_file_start): New function.\n+\t* config/rs6000/rs6000.h (TARGET_ASM_FILE_START): Set.\n+\t* config/rs6000/xcoff.h (TARGET_ASM_FILE_START,\n+\tTARGET_ASM_FILE_START_FILE_DIRECTIVE): Override.\n+\t* config/sh/sh.c (output_file_start): Rename\n+\tsh_file_start, make static, take no arguments.  Merge in old\n+\tcode from sh/elf.h's ASM_FILE_START, conditioned on TARGET_ELF.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t* config/sh/sh.c (TARGET_ELF): Define to 0.\n+\t* config/sh/elf.h (TARGET_ELF): Redefine to 1.\n+\t* config/v850/v850.c (asm_file_start): Delete.\n+\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Set.\n+\t* config/vax/vax.c (vax_file_start): New static function.\n+\t(TARGET_ASM_FILE_START, TARGET_ASM_FILE_START_APP_OFF): Set.\n+\n+\t* config/darwin.h: Override ASM_FILE_START_FILE_DIRECTIVE to false.\n+\t* config/elfos.h, config/svr3.h, config/arm/elf.h, config/arm/pe.h\n+\t* config/i386/att.h, config/i386/gas.h, config/i386/linux.h\n+\t* config/i386/sysv4.h, config/i386/sco5.h, config/i960/i960-coff.h\n+\t* config/m68k/coff.h, config/m68k/hp320.h, config/mcore/mcore-pe.h\n+\t* config/vax/vaxv.h: Set ASM_FILE_START_FILE_DIRECTIVE to true.\n+\n+\t* config/darwin.h, config/elfos.h, config/alpha/elf.h\n+\t* config/alpha/openbsd.h, config/alpha/osf.h, config/alpha/vms.h\n+\t* config/arc/arc.h, config/arm/aof.h, config/arm/aout.h\n+\t* config/arm/coff.h, config/arm/elf.h, config/arm/pe.h\n+\t* config/avr/avr.h, config/c4x/c4x.h, config/cris/cris.h\n+\t* config/dsp16xx/dsp16xx.h, config/h8300/elf.h, config/h8300/h8300.h\n+\t* config/i370/i370.h, config/i386/att.h, config/i386/gas.h\n+\t* config/i386/i386-interix.h, config/i386/linux.h, config/i386/sysv4.h\n+\t* config/i386/sco5.h, config/i960/i960-coff.h, config/i960/i960.h\n+\t* config/ia64/ia64.h, config/ia64/sysv4.h, config/m32r/m32r.h\n+\t* config/m68hc11/m68hc11.h, config/m68k/coff.h, config/m68k/m68k.h\n+\t* config/mcore/mcore-pe.h, config/mips/iris6.h, config/mips/mips.h\n+\t* config/mmix/mmix.h, config/mn10300/mn10300.h, config/ns32k/ns32k.h\n+\t* config/pa/elf.h, config/pa/pa-linux.h, config/pa/pa64-hpux.h\n+\t* config/pa/som.h, config/pdp11/pdp11.h, config/rs6000/linux64.h\n+\t* config/rs6000/lynx.h, config/rs6000/xcoff.h, config/sh/elf.h\n+\t* config/sh/sh.h, config/sparc/sparc.h, config/v850/v850.h\n+\t* config/vax/vax.h, config/vax/vaxv.h: Don't (re)define ASM_FILE_START.\n+\n+\t* config/alpha/alpha-protos.h, config/arc/arc-protos.h\n+\t* config/avr/avr-protos.h, config/dsp16xx/dsp16xx-protos.h\n+\t* config/h8300/h8300-protos.h, config/ia64/ia64-protos.h\n+\t* config/m32r/m32r-protos.h, config/m68hc11/m68hc11-protos.h\n+\t* config/mips/mips-protos.h, config/mmix/mmix-protos.h\n+\t* config/mn10300/mn10300-protos.h, config/rs6000/rs6000-protos.h\n+\t* config/sh/sh-protos.h, config/v850/v850-protos.h: Update.\n+\n+\t* xcoffout.h, config/rs6000/aix.h, config/rs6000/xcoff.h:\n+\tRemove reference to ASM_FILE_START in comment.\n+\t* config/arm/aof.h, config/arm/aout.h, config/arm/freebsd.h\n+\t* config/arm/linux-gas.h, config/arm/netbsd-elf.h\n+\t* config/arm/netbsd.h: Delete definition of ARM_OS_NAME.\n+\n 2003-06-19  Graeme Peterson <gp@qnx.com>\n \n \t* gcc.c (target_sysroot_suffix, target_sysroot_hdrs_suffix,\n@@ -36,8 +184,8 @@\n \n 2003-06-19  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * expr.c (const_vector_from_tree): Initialize remaining elements\n-        to 0.\n+\t* expr.c (const_vector_from_tree): Initialize remaining elements\n+\tto 0.\n \n 2003-06-19  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -96,8 +244,8 @@\n \n 2003-06-18  Richard Henderson  <rth@redhat.com>\n \n-        * config/ia64/unwind-ia64.c (_Unwind_GetCFA): New.\n-        (_Unwind_FindEnclosingFunction): Implement.\n+\t* config/ia64/unwind-ia64.c (_Unwind_GetCFA): New.\n+\t(_Unwind_FindEnclosingFunction): Implement.\n \n 2003-06-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -107,7 +255,7 @@\n \tINSN_SCHEDULING is defined.\n \n 2003-06-18  Stephen Clarke <stephen.clarke@superh.com>\n-            J\"orn Rennecke <joern.rennecke@superh.com>\n+\t    J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* bt-load.c: New file.\n \t* Makefile.in (OBJS): Include bt-load.o\n@@ -164,17 +312,17 @@\n 2003-06-18  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc: Add an extra_header for ARM targets.\n-        Support configuring with --with-cpu=iwmmxt.\n+\tSupport configuring with --with-cpu=iwmmxt.\n \t* doc/invoke.texi: Document new value for -mcpu= ARM switch.\n-        * config/arm/aof.h (REGISTER_NAMES): Add iwmmxt register\n+\t* config/arm/aof.h (REGISTER_NAMES): Add iwmmxt register\n \tnames.  Fix formatting.\n-        * config/arm/aout.h (REGISTER_NAMES): Add iwmmxt register\n+\t* config/arm/aout.h (REGISTER_NAMES): Add iwmmxt register\n \tnames.\n-        * config/arm/arm-protos.h (arm_emit_vector_const): New\n+\t* config/arm/arm-protos.h (arm_emit_vector_const): New\n \tprototype.\n \t(arm_output_load_gr): New prototype.\n \t* config/arm/arm.c (extra_reg_names1): Delete.\n-        (TARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN, FL_IWMMXT,\n+\t(TARGET_INIT_BUILTINS, TARGET_EXPAND_BUILTIN, FL_IWMMXT,\n \t* arch_is_iwmmxt): Define.\n \t(all_cores, all_architecture): Add entry for iwmmxt.\n \t(arm_override_options): Add support for iwmmxt.\n@@ -193,47 +341,47 @@\n \t(add_minipool_backward_ref, add_minipool_offsets,\n \tdump_minipool, push_minipool_fix): Likewise.\n \t(struct builtin_description): New struct.\n-        (builtin_description): New array of iwmmxt builtin functions.\n-        (arm_init_iwmmxt_builtins): New function.\n-        (arm_init_builtins): New function.\n-        (safe_vector_operand): New function.\n-        (arm_expand_binop_builtin): New function.\n-        (arm_expand_unop_builtin): New function.\n-        (arm_expand_builtin): New function.\n-        (arm_emit_vector_const): New function.\n-        (arm_output_load_gr): New function.\n-        * config/arm/arm.h (TARGET_CPU_iwmmxt, TARGET_IWMMXT,\n+\t(builtin_description): New array of iwmmxt builtin functions.\n+\t(arm_init_iwmmxt_builtins): New function.\n+\t(arm_init_builtins): New function.\n+\t(safe_vector_operand): New function.\n+\t(arm_expand_binop_builtin): New function.\n+\t(arm_expand_unop_builtin): New function.\n+\t(arm_expand_builtin): New function.\n+\t(arm_emit_vector_const): New function.\n+\t(arm_output_load_gr): New function.\n+\t* config/arm/arm.h (TARGET_CPU_iwmmxt, TARGET_IWMMXT,\n \tTARGET_REALLY_IWMMXT, arm_arch_iwmmxt, IWMMXT_ALIGNMENT,\n \tTYPE_NEEDS_IWMMXT_ALIGNMENT, ADJUST_FIELD_ALIGN,\n \tDATA_ALIGNMENT, LOCAL_ALIGNMENT, VECTOR_MODE_SUPPORTED_P): Define.\n-        (BIGGEST_ALIGNMENT): Set to 64 if ATPCS support is enabled.\n-        (CPP_CPU_ARCH_SPEC): Add entries for iwmmxt.\n-        (FIXED_REGISTERS, CALL_USED_REGISTERS, REG_ALLOC_ORDER,\n+\t(BIGGEST_ALIGNMENT): Set to 64 if ATPCS support is enabled.\n+\t(CPP_CPU_ARCH_SPEC): Add entries for iwmmxt.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS, REG_ALLOC_ORDER,\n \treg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS,\n \tREG_CLASS_FOR_LETTER): Add iwmmxt registers.\n-        (SUBTARGET_CONDITIONAL_REGISTER_USAGE): Disable iwmmxt\n+\t(SUBTARGET_CONDITIONAL_REGISTER_USAGE): Disable iwmmxt\n \tregisters unless the iwmmxt target is selected.\n-        (FIRST_IWMMXT_GR_REGNUM, LAST_IWMMXT_GR_REGNUM,\n+\t(FIRST_IWMMXT_GR_REGNUM, LAST_IWMMXT_GR_REGNUM,\n \tFIRST_IWMMXT_REGNUM, LAST_IWMMXT_REGNUM, IS_IWMMXT_REGNUM,\n \tIS_IWMMXT_GR_REGNUM): Define.\n-        (FIRST_PSEUDO_REGISTER): Bump to 63.\n-        (struct machine_function): Add sibcall_blocked field.\n-        (Struct CUMULATIVE_ARGS): Add iwmmxt_nregs, named_count and\n+\t(FIRST_PSEUDO_REGISTER): Bump to 63.\n+\t(struct machine_function): Add sibcall_blocked field.\n+\t(Struct CUMULATIVE_ARGS): Add iwmmxt_nregs, named_count and\n \tnargs fields.\n-        (enum arm_builtins): New enum list.\n-        * config/arm/arm.md (UNSPEC_WSHUFH, UNSPEC_WACC,\n+\t(enum arm_builtins): New enum list.\n+\t* config/arm/arm.md (UNSPEC_WSHUFH, UNSPEC_WACC,\n \tUNSPEC_TMOVMSK, UNSPEC_WSAD, UNSPEC_WSADZ, UNSPEC_WMACS,\n \tUNSPEC_WMACU, UNSPEC_WMACSZ, UNSPEC_WMACUZ, UNSPEC_CLRDI,\n \tUNSPEC_WMADDS, UNSPEC_WMADDU): New unspecs.\n \t(VUNSPEC_TMRC, VUNSPEC_TMCR, VUNSPEC_ALIGN8, VUNSPEC_WCMP_EQ,\n \tVUNSPEC_WCMP_GTU, VUNSPEC_WCMP_GT): New vunspecs.\n-        (movv2si, movv4hi, movv8qi): New expands for vector moves.\n-        Include iwmmxt.md.\n+\t(movv2si, movv4hi, movv8qi): New expands for vector moves.\n+\tInclude iwmmxt.md.\n \t* config/arm/t-xscale-elf (MULTILIB_OPITONS): Add iwmmxt\n \tmultilib.\n-        (MULTILIB_DIRNAMES, MULTILIB_REDUNDANT_DIRS): Likewise.\n-        * config/arm/mmintrin.h: New ARM specific header file.\n-        * config/arm/iwmmx.md: New iWMMXt specific machine patterns.\n+\t(MULTILIB_DIRNAMES, MULTILIB_REDUNDANT_DIRS): Likewise.\n+\t* config/arm/mmintrin.h: New ARM specific header file.\n+\t* config/arm/iwmmx.md: New iWMMXt specific machine patterns.\n \n 2003-06-18  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -337,7 +485,7 @@\n \t* config/ns32k/NOTES: Likewise.\n \n 2003-06-17  Ranjit Mathew  <rmathew@hotmail.com>\n-            Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+\t    Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/sourcebuild.texi (libgcj Tests): Simplify instructions on how\n \tto run Java runtime tests separately."}, {"sha": "3a342eb3f8464ff9f720755e7768450ab9420261", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -30,7 +30,6 @@ extern HOST_WIDE_INT alpha_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t       unsigned int);\n extern int alpha_pv_save_size (void);\n extern int alpha_using_fp (void);\n-extern void alpha_write_verstamp (FILE *);\n extern void alpha_expand_prologue (void);\n extern void alpha_expand_epilogue (void);\n extern void alpha_output_filename (FILE *, const char *);\n@@ -169,7 +168,6 @@ extern void unicosmk_add_extern (const char *);\n extern void unicosmk_output_align (FILE *, int);\n extern char * unicosmk_text_section (void);\n extern char * unicosmk_data_section (void);\n-extern void unicosmk_asm_file_start (FILE *);\n extern void unicosmk_output_common (FILE *, const char *, int, int);\n extern int unicosmk_initial_elimination_offset (int, int);\n #endif"}, {"sha": "31f03fc98786b468855b7d386fee66c257b3a5cc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 61, "deletions": 33, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -6780,20 +6780,6 @@ alpha_does_function_need_gp (void)\n   return 0;\n }\n \n-/* Write a version stamp.  Don't write anything if we are running as a\n-   cross-compiler.  Otherwise, use the versions in /usr/include/stamp.h.  */\n-\n-#ifdef HAVE_STAMP_H\n-#include <stamp.h>\n-#endif\n-\n-void\n-alpha_write_verstamp (FILE *file ATTRIBUTE_UNUSED)\n-{\n-#ifdef MS_STAMP\n-  fprintf (file, \"\\t.verstamp %d %d\\n\", MS_STAMP, LS_STAMP);\n-#endif\n-}\n \f\n /* Helper function to set RTX_FRAME_RELATED_P on instructions, including\n    sequences.  */\n@@ -8687,6 +8673,36 @@ alpha_reorg (void)\n     }\n }\n \f\n+#if !TARGET_ABI_UNICOSMK\n+\n+#ifdef HAVE_STAMP_H\n+#include <stamp.h>\n+#endif\n+\n+static void\n+alpha_file_start (void)\n+{\n+  default_file_start ();\n+#ifdef MS_STAMP\n+  fprintf (file, \"\\t.verstamp %d %d\\n\", MS_STAMP, LS_STAMP);\n+#endif\n+\n+  fputs (\"\\t.set noreorder\\n\", asm_out_file);\n+  fputs (\"\\t.set volatile\\n\", asm_out_file);\n+  if (!TARGET_ABI_OPEN_VMS)\n+    fputs (\"\\t.set noat\\n\", asm_out_file);\n+  if (TARGET_EXPLICIT_RELOCS)\n+    fputs (\"\\t.set nomacro\\n\", asm_out_file);\n+  if (TARGET_SUPPORT_ARCH | TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\n+    fprintf (asm_out_file,\n+\t     \"\\t.arch %s\\n\",\n+\t     TARGET_CPU_EV6 ? \"ev6\"\t   \n+\t     : (TARGET_CPU_EV5\n+\t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\")\n+\t\t: \"ev4\"));\n+}\n+#endif\n+\n #ifdef OBJECT_FORMAT_ELF\n \n /* Switch to the section to which we should output X.  The only thing\n@@ -9728,14 +9744,14 @@ unicosmk_output_dex (FILE *file)\n \n /* Output text that to appear at the beginning of an assembler file.  */\n \n-void \n-unicosmk_asm_file_start (FILE *file)\n+static void \n+unicosmk_file_start (void)\n {\n   int i;\n \n-  fputs (\"\\t.ident\\t\", file);\n-  unicosmk_output_module_name (file);\n-  fputs (\"\\n\\n\", file);\n+  fputs (\"\\t.ident\\t\", asm_out_file);\n+  unicosmk_output_module_name (asm_out_file);\n+  fputs (\"\\n\\n\", asm_out_file);\n \n   /* The Unicos/Mk assembler uses different register names. Instead of trying\n      to support them, we simply use micro definitions.  */\n@@ -9746,37 +9762,37 @@ unicosmk_asm_file_start (FILE *file)\n      register.  */\n \n   for (i = 0; i < 32; ++i)\n-    fprintf (file, \"$%d <- r%d\\n\", i, i);\n+    fprintf (asm_out_file, \"$%d <- r%d\\n\", i, i);\n \n   for (i = 0; i < 32; ++i)\n-    fprintf (file, \"$f%d <- f%d\\n\", i, i);\n+    fprintf (asm_out_file, \"$f%d <- f%d\\n\", i, i);\n \n-  putc ('\\n', file);\n+  putc ('\\n', asm_out_file);\n \n   /* The .align directive fill unused space with zeroes which does not work\n      in code sections. We define the macro 'gcc@code@align' which uses nops\n      instead. Note that it assumes that code sections always have the\n      biggest possible alignment since . refers to the current offset from\n      the beginning of the section.  */\n \n-  fputs (\"\\t.macro gcc@code@align n\\n\", file);\n-  fputs (\"gcc@n@bytes = 1 << n\\n\", file);\n-  fputs (\"gcc@here = . % gcc@n@bytes\\n\", file);\n-  fputs (\"\\t.if ne, gcc@here, 0\\n\", file);\n-  fputs (\"\\t.repeat (gcc@n@bytes - gcc@here) / 4\\n\", file);\n-  fputs (\"\\tbis r31,r31,r31\\n\", file);\n-  fputs (\"\\t.endr\\n\", file);\n-  fputs (\"\\t.endif\\n\", file);\n-  fputs (\"\\t.endm gcc@code@align\\n\\n\", file);\n+  fputs (\"\\t.macro gcc@code@align n\\n\", asm_out_file);\n+  fputs (\"gcc@n@bytes = 1 << n\\n\", asm_out_file);\n+  fputs (\"gcc@here = . % gcc@n@bytes\\n\", asm_out_file);\n+  fputs (\"\\t.if ne, gcc@here, 0\\n\", asm_out_file);\n+  fputs (\"\\t.repeat (gcc@n@bytes - gcc@here) / 4\\n\", asm_out_file);\n+  fputs (\"\\tbis r31,r31,r31\\n\", asm_out_file);\n+  fputs (\"\\t.endr\\n\", asm_out_file);\n+  fputs (\"\\t.endif\\n\", asm_out_file);\n+  fputs (\"\\t.endm gcc@code@align\\n\\n\", asm_out_file);\n \n   /* Output extern declarations which should always be visible.  */\n-  unicosmk_output_default_externs (file);\n+  unicosmk_output_default_externs (asm_out_file);\n \n   /* Open a dummy section. We always need to be inside a section for the\n      section-switching code to work correctly.\n      ??? This should be a module id or something like that. I still have to\n      figure out what the rules for those are.  */\n-  fputs (\"\\n\\t.psect\\t$SG00000,data\\n\", file);\n+  fputs (\"\\n\\t.psect\\t$SG00000,data\\n\", asm_out_file);\n }\n \n /* Output text to appear at the end of an assembler file. This includes all\n@@ -9877,6 +9893,18 @@ unicosmk_need_dex (rtx x ATTRIBUTE_UNUSED)\n #undef TARGET_ASM_FUNCTION_END_PROLOGUE\n #define TARGET_ASM_FUNCTION_END_PROLOGUE alpha_output_function_end_prologue\n \n+#if TARGET_ABI_UNICOSMK\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START unicosmk_file_start\n+#undef TARGET_ASM_FILE_END\n+#define TARGET_ASM_FILE_END unicosmk_file_end\n+#else\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START alpha_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+#endif\n+\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST alpha_adjust_cost\n #undef TARGET_SCHED_ISSUE_RATE"}, {"sha": "8fdfc3e9d16c46ad15abb61c3081f82827c9b0af", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -49,27 +49,6 @@ Boston, MA 02111-1307, USA.    */\n #undef  ASM_SPEC\n #define ASM_SPEC  \"%{G*} %{relax:-relax} %{!gstabs*:-no-mdebug}%{gstabs*:-mdebug}\"\n \n-/* Output at beginning of assembler file.  */\n-#undef  ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      alpha_write_verstamp (FILE);\t\t\t\t\\\n-      output_file_directive (FILE, main_input_filename);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n-  if (TARGET_EXPLICIT_RELOCS)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.set nomacro\\n\");\t\t\t\t\\\n-  if (TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-               (TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n-                : TARGET_MAX ? \"pca56\" : \"ev56\"));\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n #undef  IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n "}, {"sha": "f574e8da1f7c7d60631f4f9c84fe7cc7909b3afb", "filename": "gcc/config/alpha/openbsd.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fopenbsd.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -88,29 +88,6 @@ Boston, MA 02111-1307, USA.  */\n #define DWARF2_UNWIND_INFO 0\n #endif\n \n-/* Assembler format: file framework.  */\n-\n-/* Taken from alpha/osf.h. This used to be common to all alpha\n-   configurations, but elf has departed from it.\n-   Check alpha/alpha.h, alpha/osf.h for it when egcs is upgraded.  */\n-#ifndef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  alpha_write_verstamp (FILE);\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set volatile\\n\");                          \\\n-  fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n-  if (TARGET_SUPPORT_ARCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-             TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n-\t     : (TARGET_CPU_EV5\t\t\t\t\t\\\n-\t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\") \\\n-\t\t: \"ev4\"));\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);\t\\\n-}\n-#endif\n-\n /* Assembler format: label output.  */\n \n #define ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,VALUE)\t\\"}, {"sha": "3d7936ef0155f4dd98126ffc523fd38e91eeb0f2", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -84,22 +84,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define MD_STARTFILE_PREFIX \"/usr/lib/cmplrs/cc/\"\n \n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  alpha_write_verstamp (FILE);\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set volatile\\n\");                          \\\n-  fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n-  if (TARGET_SUPPORT_ARCH)\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-             TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n-\t     : (TARGET_CPU_EV5\t\t\t\t\t\\\n-\t\t? (TARGET_MAX ? \"pca56\" : TARGET_BWX ? \"ev56\" : \"ev5\") \\\n-\t\t: \"ev4\"));\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);\t\\\n-}\n-\n /* Tru64 UNIX V5.1 requires a special as flag.  Empty by default.  */\n \n #define ASM_OLDAS_SPEC \"\""}, {"sha": "8b186f6258d8362c519767fc8f4454bed56ca186", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -333,16 +333,7 @@ ssib_section ()\t\t\t\\\n   in_section = in_ssib;\t\t\\\n }\n \n-/* This outputs text to go at the start of an assembler file.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\tunicosmk_asm_file_start (FILE)\n-\n-/* This outputs text to go at the end of an assembler file.  */\n-\n-#define TARGET_ASM_FILE_END\tunicosmk_file_end\n-\n-/* We take care of that in ASM_FILE_START.  */\n+/* We take care of this in unicosmk_file_start.  */\n \n #undef ASM_OUTPUT_SOURCE_FILENAME\n "}, {"sha": "f02e1992e43770a67d7ac670279f2c91be4cd394", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -242,21 +242,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #undef STACK_CHECK_BUILTIN\n #define STACK_CHECK_BUILTIN 0\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  alpha_write_verstamp (FILE);\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set volatile\\n\");\t\t\t\t\\\n-  if (TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n-               (TARGET_CPU_EV6 ? \"ev6\"\t\t\t\t\\\n-                : TARGET_MAX ? \"pca56\" : \"ev56\"));\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);\t\\\n-}\n-\n #define LINK_SECTION_ASM_OP \"\\t.link\"\n #define READONLY_DATA_SECTION_ASM_OP \"\\t.rdata\"\n #define LITERALS_SECTION_ASM_OP \"\\t.literals\""}, {"sha": "f5579892e7b7e627e3801d51ca5b3f03f0cda4e8", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -66,7 +66,6 @@ extern void arc_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \n \n extern void arc_init PARAMS ((void));\n-extern void arc_asm_file_start PARAMS ((FILE *));\n extern unsigned int arc_compute_frame_size PARAMS ((int));\n extern void arc_save_restore PARAMS ((FILE *, const char *, unsigned int,\n \t\t\t\t      unsigned int, const char *));"}, {"sha": "67e1b739f22be899924330d7513d77b71270e707", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -94,6 +94,7 @@ static tree arc_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, boo\n static bool arc_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void arc_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void arc_file_start PARAMS ((void));\n static void arc_internal_label PARAMS ((FILE *, const char *, unsigned long));\n static bool arc_rtx_costs PARAMS ((rtx, int, int, int *));\n static int arc_address_cost PARAMS ((rtx));\n@@ -110,6 +111,8 @@ static int arc_address_cost PARAMS ((rtx));\n #define TARGET_ASM_FUNCTION_PROLOGUE arc_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE arc_output_function_epilogue\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START arc_file_start\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arc_attribute_table\n #undef TARGET_ASM_INTERNAL_LABEL\n@@ -1657,11 +1660,11 @@ arc_initialize_trampoline (tramp, fnaddr, cxt)\n /* Set the cpu type and print out other fancy things,\n    at the top of the file.  */\n \n-void\n-arc_asm_file_start (file)\n-     FILE *file;\n+static void\n+arc_file_start ()\n {\n-  fprintf (file, \"\\t.cpu %s\\n\", arc_cpu_string);\n+  default_file_start ();\n+  fprintf (asm_out_file, \"\\t.cpu %s\\n\", arc_cpu_string);\n }\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE."}, {"sha": "16d6d7108cf3d775b2de1987f7a56f67b3a3de8a", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1110,10 +1110,6 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) arc_asm_file_start (FILE)\n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will\n    end at the end of the line.  */"}, {"sha": "2650a0eedd200d6aaf8b18e16ab2e0c819d28368", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -130,45 +130,6 @@\n    whole table generation until the end of the function.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-#ifndef ARM_OS_NAME\n-#define ARM_OS_NAME \"(generic)\"\n-#endif\n-\n-/* For the AOF linker, we need to reference __main to force the standard\n-   library to get linked in. */\n-\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  fprintf ((STREAM), \"%s Generated by gcc %s for ARM/%s\\n\", \t\\\n-\t   ASM_COMMENT_START, version_string, ARM_OS_NAME);\t\\\n-  fprintf ((STREAM), \"__r0\\tRN\\t0\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__a1\\tRN\\t0\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__a2\\tRN\\t1\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__a3\\tRN\\t2\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__a4\\tRN\\t3\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v1\\tRN\\t4\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v2\\tRN\\t5\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v3\\tRN\\t6\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v4\\tRN\\t7\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v5\\tRN\\t8\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__v6\\tRN\\t9\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__sl\\tRN\\t10\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__fp\\tRN\\t11\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__ip\\tRN\\t12\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__sp\\tRN\\t13\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__lr\\tRN\\t14\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__pc\\tRN\\t15\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f0\\tFN\\t0\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f1\\tFN\\t1\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f2\\tFN\\t2\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f3\\tFN\\t3\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f4\\tFN\\t4\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f5\\tFN\\t5\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f6\\tFN\\t6\\n\");\t\t\t\t\\\n-  fprintf ((STREAM), \"__f7\\tFN\\t7\\n\");\t\t\t\t\\\n-  text_section ();\t\t\t\t\t\t\\\n-}\n-\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -285,7 +246,7 @@ do {\t\t\t\t\t\\\n   \"wr0\",   \"wr1\",   \"wr2\",   \"wr3\",\t\t\\\n   \"wr4\",   \"wr5\",   \"wr6\",   \"wr7\",\t\t\\\n   \"wr8\",   \"wr9\",   \"wr10\",  \"wr11\",\t\t\\\n-  \"wr12\",  \"wr13\",  \"wr14\",  \"wr15\"\n+  \"wr12\",  \"wr13\",  \"wr14\",  \"wr15\"\t\t\\\n }\n \n #define ADDITIONAL_REGISTER_NAMES\t\t\\"}, {"sha": "1f060fafc7b18b469f164bef4c4fbe47f2175b24", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -20,24 +20,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-#ifndef ARM_OS_NAME\n-#define ARM_OS_NAME \"(generic)\"\n-#endif\n-\n-/* The text to go at the start of the assembler file.  */\n-#ifndef ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t    \\\n-{\t\t\t\t\t    \\\n-  asm_fprintf (STREAM,\"%Rrfp\\t.req\\t%Rr9\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rsl\\t.req\\t%Rr10\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rfp\\t.req\\t%Rr11\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rip\\t.req\\t%Rr12\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rsp\\t.req\\t%Rr13\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rlr\\t.req\\t%Rr14\\n\"); \\\n-  asm_fprintf (STREAM,\"%Rpc\\t.req\\t%Rr15\\n\"); \\\n-}\n-#endif\n-\n #ifndef ASM_APP_ON\n #define ASM_APP_ON  \t\t\"\"\n #endif"}, {"sha": "c0ee99ed8c3d6a0dcc247be24caa2f9d07809316", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -147,6 +147,7 @@ static void arm_encode_section_info (tree, rtx, int);\n static void aof_globalize_label (FILE *, const char *);\n static void aof_dump_imports (FILE *);\n static void aof_dump_pic_table (FILE *);\n+static void aof_file_start (void);\n static void aof_file_end (void);\n #endif\n \n@@ -169,6 +170,8 @@ static void aof_file_end (void);\n #define TARGET_ASM_ALIGNED_SI_OP \"\\tDCD\\t\"\n #undef TARGET_ASM_GLOBALIZE_LABEL\n #define TARGET_ASM_GLOBALIZE_LABEL aof_globalize_label\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START aof_file_start\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END aof_file_end\n #else\n@@ -12838,6 +12841,37 @@ aof_globalize_label (FILE *stream, const char *name)\n     arm_main_function = 1;\n }\n \n+static void\n+aof_file_start ()\n+{\n+  fputs (\"__r0\\tRN\\t0\\n\", asm_out_file);\n+  fputs (\"__a1\\tRN\\t0\\n\", asm_out_file);\n+  fputs (\"__a2\\tRN\\t1\\n\", asm_out_file);\n+  fputs (\"__a3\\tRN\\t2\\n\", asm_out_file);\n+  fputs (\"__a4\\tRN\\t3\\n\", asm_out_file);\n+  fputs (\"__v1\\tRN\\t4\\n\", asm_out_file);\n+  fputs (\"__v2\\tRN\\t5\\n\", asm_out_file);\n+  fputs (\"__v3\\tRN\\t6\\n\", asm_out_file);\n+  fputs (\"__v4\\tRN\\t7\\n\", asm_out_file);\n+  fputs (\"__v5\\tRN\\t8\\n\", asm_out_file);\n+  fputs (\"__v6\\tRN\\t9\\n\", asm_out_file);\n+  fputs (\"__sl\\tRN\\t10\\n\", asm_out_file);\n+  fputs (\"__fp\\tRN\\t11\\n\", asm_out_file);\n+  fputs (\"__ip\\tRN\\t12\\n\", asm_out_file);\n+  fputs (\"__sp\\tRN\\t13\\n\", asm_out_file);\n+  fputs (\"__lr\\tRN\\t14\\n\", asm_out_file);\n+  fputs (\"__pc\\tRN\\t15\\n\", asm_out_file);\n+  fputs (\"__f0\\tFN\\t0\\n\", asm_out_file);\n+  fputs (\"__f1\\tFN\\t1\\n\", asm_out_file);\n+  fputs (\"__f2\\tFN\\t2\\n\", asm_out_file);\n+  fputs (\"__f3\\tFN\\t3\\n\", asm_out_file);\n+  fputs (\"__f4\\tFN\\t4\\n\", asm_out_file);\n+  fputs (\"__f5\\tFN\\t5\\n\", asm_out_file);\n+  fputs (\"__f6\\tFN\\t6\\n\", asm_out_file);\n+  fputs (\"__f7\\tFN\\t7\\n\", asm_out_file);\n+  text_section ();\n+}\n+\n static void\n aof_file_end (void)\n {"}, {"sha": "c4f0932e9ce548695ab7aeb47a75ad3821100d7d", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -45,21 +45,7 @@\n \n #include \"dbxcoff.h\"\n \f\n-/* A C statement to output assembler commands which will identify the\n-   object file as having been compiled with GCC (or another GNU\n-   compiler).  */\n-\n-/* This outputs a lot of .req's to define alias for various registers.\n-   Let's try to avoid this.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"%s Generated by gcc %s for ARM/coff\\n\",\t\\\n-\t       ASM_COMMENT_START, version_string);\t\t\\\n-      fprintf (STREAM, ASM_APP_OFF);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_ASM_FILE_START_APP_OFF true\n \n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section"}, {"sha": "581f7267900eeb03bcace13a2b93371176e71326", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -114,20 +114,8 @@\n   { \"marm\", \"mlittle-endian\", \"msoft-float\", \"mapcs-32\", \"mno-thumb-interwork\", \"fno-leading-underscore\" }\n #endif\n \f\n-\n-/* This outputs a lot of .req's to define alias for various registers.\n-   Let's try to avoid this.  */\n-#ifndef ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"%s Generated by gcc %s for ARM/elf\\n\",\t\\\n-\t       ASM_COMMENT_START, version_string);\t\t\\\n-      output_file_directive (STREAM, main_input_filename);\t\\\n-      fprintf (STREAM, ASM_APP_OFF);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-#endif\n+#define TARGET_ASM_FILE_START_APP_OFF true\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \f\n #undef  TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section"}, {"sha": "fd79f1f3c688efd7d04796e4b94df28b50c79639", "filename": "gcc/config/arm/freebsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffreebsd.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -47,8 +47,5 @@\n #undef  SUBTARGET_CPU_DEFAULT\n #define SUBTARGET_CPU_DEFAULT\tTARGET_CPU_strongarm\n \n-#undef  ARM_OS_NAME\n-#define ARM_OS_NAME \"FreeBSD\"\n-\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (FreeBSD/StrongARM ELF)\");"}, {"sha": "69112841893ed28f256d6ae2d795afbb1aa6a671", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -23,10 +23,6 @@\n /* This is how we tell the assembler that a symbol is weak.\n    GAS always supports weak symbols.  */\n \n-/* This is used in ASM_FILE_START.  */\n-#undef  ARM_OS_NAME\n-#define ARM_OS_NAME \"Linux\"\n-\n /* Unsigned chars produces much better code than signed.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}, {"sha": "a8b43f645d35469bbfeb669f39da48a933690132", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -23,10 +23,6 @@\n #undef TARGET_VERSION\n #define TARGET_VERSION fputs (\" (NetBSD/arm ELF)\", stderr);\n \n-/* This is used in ASM_FILE_START.  */\n-#undef ARM_OS_NAME\n-#define ARM_OS_NAME \"NetBSD\"\n-\n /* arm.h defaults to ARM6 CPU.  */\n \n /* This defaults us to little-endian.  */"}, {"sha": "c1db2df5e262f87ac0c093efe4ccd64b6ac909fe", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -23,10 +23,6 @@\n #undef  TARGET_VERSION\n #define TARGET_VERSION fputs (\" (ARM/NetBSD)\", stderr);\n \n-/* This is used in ASM_FILE_START.  */\n-#undef ARM_OS_NAME\n-#define ARM_OS_NAME \"NetBSD\"\n-\n /* Unsigned chars produces much better code than signed.  */\n #define DEFAULT_SIGNED_CHAR  0\n "}, {"sha": "bd0b6606247ec8fef311a425646937a978672056", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -104,17 +104,7 @@\n #undef  TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n \f\n-/* This outputs a lot of .req's to define alias for various registers.\n-   Let's try to avoid this.  */\n-#undef  ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (STREAM, \"%@ Generated by gcc %s for ARM/pe\\n\",\\\n-\t   version_string);\t\t\t\t\t\\\n-      output_file_directive ((STREAM), main_input_filename);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n /* Output a reference to a label.  */\n #undef  ASM_OUTPUT_LABELREF"}, {"sha": "fafd36c83fefd779e638cd424ab4b42f3b99eed3", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -22,7 +22,6 @@\n \n \n extern int    function_arg_regno_p              PARAMS ((int r));\n-extern void   asm_file_start                    PARAMS ((FILE *file));\n extern void   avr_init_once                     PARAMS ((void));\n extern void   avr_override_options              PARAMS ((void));\n extern void   avr_optimization_options\t\tPARAMS ((int level, int size));"}, {"sha": "d6fcd4770f527f3cc9e2682f0f07d923ec3c741d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -63,6 +63,7 @@ static tree   avr_handle_progmem_attribute PARAMS ((tree *, tree, tree, int, boo\n static tree   avr_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n const struct attribute_spec avr_attribute_table[];\n static bool   avr_assemble_integer PARAMS ((rtx, unsigned int, int));\n+static void   avr_file_start PARAMS ((void));\n static void   avr_file_end PARAMS ((void));\n static void   avr_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n@@ -219,6 +220,10 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER avr_assemble_integer\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START avr_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END avr_file_end\n \n@@ -4888,30 +4893,30 @@ avr_section_type_flags (decl, name, reloc)\n   return flags;\n }\n \n-/* Outputs to the stdio stream FILE some\n-   appropriate text to go at the start of an assembler file.  */\n+/* Outputs some appropriate text to go at the start of an assembler\n+   file.  */\n \n-void\n-asm_file_start (file)\n-     FILE *file;\n+static void\n+avr_file_start ()\n {\n   if (avr_asm_only_p)\n     error (\"MCU `%s' supported for assembler only\", avr_mcu_name);\n \n-  output_file_directive (file, main_input_filename);\n-  fprintf (file, \"\\t.arch %s\\n\", avr_mcu_name);\n+  default_file_start ();\n+\n+  fprintf (asm_out_file, \"\\t.arch %s\\n\", avr_mcu_name);\n   fputs (\"__SREG__ = 0x3f\\n\"\n \t \"__SP_H__ = 0x3e\\n\"\n-\t \"__SP_L__ = 0x3d\\n\", file);\n+\t \"__SP_L__ = 0x3d\\n\", asm_out_file);\n   \n   fputs (\"__tmp_reg__ = 0\\n\" \n-         \"__zero_reg__ = 1\\n\", file);\n+         \"__zero_reg__ = 1\\n\", asm_out_file);\n \n   /* FIXME: output these only if there is anything in the .data / .bss\n      sections - some code size could be saved by not linking in the\n      initialization code from libgcc if one or both sections are empty.  */\n-  fputs (\"\\t.global __do_copy_data\\n\", file);\n-  fputs (\"\\t.global __do_clear_bss\\n\", file);\n+  fputs (\"\\t.global __do_copy_data\\n\", asm_out_file);\n+  fputs (\"\\t.global __do_clear_bss\\n\", asm_out_file);\n \n   commands_in_file = 0;\n   commands_in_prologues = 0;"}, {"sha": "8255e199de82658e9de792d68835ec06a0b65e06", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1687,18 +1687,6 @@ progmem_section ()\t\t\t\t\t\t\t      \\\n    This macro is irrelevant if there is no separate readonly data\n    section.  */\n \n-#define ASM_FILE_START(STREAM) asm_file_start (STREAM)\n-/* A C expression which outputs to the stdio stream STREAM some\n-   appropriate text to go at the start of an assembler file.\n-\n-   Normally this macro is defined to output a line containing\n-   `#NO_APP', which is a comment that has no effect on most\n-   assemblers but tells the GNU assembler that it can save time by not\n-   checking for certain assembler constructs.\n-\n-   On systems that use SDB, it is necessary to output certain\n-   commands; see `attasm.h'.  */\n-\n #define ASM_COMMENT_START \" ; \"\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will"}, {"sha": "5d097cc0cda272ac7c680a0a291f5d840970d184", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -185,6 +185,7 @@ static int c4x_valid_operands PARAMS ((enum rtx_code, rtx *,\n \t\t\t\t       enum machine_mode, int));\n static int c4x_arn_reg_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n static int c4x_arn_mem_operand PARAMS ((rtx, enum machine_mode, unsigned int));\n+static void c4x_file_start PARAMS ((void));\n static void c4x_file_end PARAMS ((void));\n static void c4x_check_attribute PARAMS ((const char *, tree, tree, tree *));\n static int c4x_r11_set_p PARAMS ((rtx));\n@@ -207,6 +208,10 @@ static int c4x_address_cost PARAMS ((rtx));\n #define TARGET_ASM_ALIGNED_HI_OP NULL\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START c4x_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END c4x_file_end\n \n@@ -4563,6 +4568,26 @@ c4x_external_ref (name)\n   extern_head = p;\n }\n \n+/* We need to have a data section we can identify so that we can set\n+   the DP register back to a data pointer in the small memory model.\n+   This is only required for ISRs if we are paranoid that someone\n+   may have quietly changed this register on the sly.  */\n+static void\n+c4x_file_start ()\n+{\n+  int dspversion = 0;\n+  if (TARGET_C30) dspversion = 30;\n+  if (TARGET_C31) dspversion = 31;\n+  if (TARGET_C32) dspversion = 32;\n+  if (TARGET_C33) dspversion = 33;\n+  if (TARGET_C40) dspversion = 40;\n+  if (TARGET_C44) dspversion = 44;\n+\n+  default_file_start ();\n+  fprintf (asm_out_file, \"\\t.version\\t%d\\n\", dspversion);\n+  fputs (\"\\n\\t.data\\ndata_sec:\\n\", asm_out_file);\n+}\n+\n \n static void\n c4x_file_end ()"}, {"sha": "fb3622bb31317518b371d27883e1ccad6e7f4b9f", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1548,35 +1548,6 @@ fini_section ()\t\t\t\t\t\t\t\\\n \n \n /* Overall Framework of an Assembler File.  */\n-/* We need to have a data section we can identify so that we can set\n-   the DP register back to a data pointer in the small memory model.\n-   This is only required for ISRs if we are paranoid that someone\n-   may have quietly changed this register on the sly.  */\n-\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-    int dspversion = 0;\t\t\t\t\t\t\\\n-    if (TARGET_C30) dspversion = 30;\t\t\t\t\\\n-    if (TARGET_C31) dspversion = 31;\t\t\t\t\\\n-    if (TARGET_C32) dspversion = 32;\t\t\t\t\\\n-    if (TARGET_C33) dspversion = 33;                            \\\n-    if (TARGET_C40) dspversion = 40;\t\t\t\t\\\n-    if (TARGET_C44) dspversion = 44;\t\t\t\t\\\n-    fprintf (FILE, \"\\t.version\\t%d\\n\", dspversion);\t\t\\\n-    fprintf (FILE, \"\\t.file\\t\");\t\t\t\t\\\n-    if (TARGET_TI)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        const char *p;\t\t\t\t\t\t\\\n-        const char *after_dir = main_input_filename;\t\t\\\n-\tfor (p = main_input_filename; *p; p++)\t\t\t\\\n-\t  if (*p == '/')\t\t\t\t\t\\\n-\t    after_dir = p + 1;\t\t\t\t\t\\\n-\toutput_quoted_string (FILE, after_dir);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      output_quoted_string (FILE, main_input_filename);\t\t\\\n-    fputs (\"\\n\\t.data\\ndata_sec:\\n\", FILE);\t\t\t\\\n-}\n \n #define ASM_COMMENT_START \";\"\n "}, {"sha": "71366725c6e1794484bd2b050d316d059aac01a0", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -105,6 +105,8 @@ static void cris_operand_lossage PARAMS ((const char *, rtx));\n static void cris_asm_output_mi_thunk\n   PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n \n+static void cris_file_start PARAMS ((void));\n+\n static bool cris_rtx_costs PARAMS ((rtx, int, int, int *));\n static int cris_address_cost PARAMS ((rtx));\n \n@@ -162,6 +164,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START cris_file_start\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS cris_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -2761,6 +2766,24 @@ cris_asm_output_mi_thunk (stream, thunkdecl, delta, vcall_offset, funcdecl)\n     }\n }\n \n+/* Boilerplate emitted at start of file.  \n+\n+   NO_APP *only at file start* means faster assembly.  It also means\n+   comments are not allowed.  In some cases comments will be output\n+   for debugging purposes.  Make sure they are allowed then.\n+\n+   We want a .file directive only if TARGET_ELF.  */\n+static void\n+cris_file_start ()\n+{\n+  /* These expressions can vary at run time, so we cannot put\n+     them into TARGET_INITIALIZER.  */\n+  targetm.file_start_app_off = !(TARGET_PDEBUG || flag_print_asm_name);\n+  targetm.file_start_file_directive = TARGET_ELF;\n+\n+  default_file_start ();\n+}\n+\n /* The EXPAND_BUILTIN_VA_ARG worker.  This is modified from the\n    \"standard\" implementation of va_arg: read the value from the current\n    address and increment by the size of one or two registers.  The"}, {"sha": "6517cc5d1db1a0b3d28db424afc44ce8db838e3c", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1392,24 +1392,6 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n \n /* Node: File Framework */\n \n-/* NO_APP *only at file start* means faster assembly.\n-   It also means comments are not allowed.\n-   In some cases comments will be output for debugging purposes.\n-   Make sure they are allowed then.  */\n-/* Override previous definitions (elfos.h).  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (TARGET_PDEBUG || flag_print_asm_name)\t\t\t\\\n-\tfprintf ((STREAM), \"#APP\\n\");\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfprintf ((STREAM), \"#NO_APP\\n\");\t\t\t\\\n-      if (TARGET_ELF)\t\t\t\t\t\t\\\n-\toutput_file_directive ((STREAM), main_input_filename);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* We don't want an .ident for gcc.  To avoid that but still support\n    #ident, we override ASM_OUTPUT_IDENT and, since the gcc .ident is its\n    only use besides ASM_OUTPUT_IDENT, undef IDENT_ASM_OP from elfos.h.  */"}, {"sha": "7d26c26718b4a4b299aa1acdf1bb6ea44a42a51a", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -326,9 +326,8 @@ do { text_section ();\t\t\t\t\t\t\t\\\n \n /* Don't output a .file directive.  That is only used by the assembler for\n    error reporting.  */\n-\n-#undef\tASM_FILE_START\n-#define ASM_FILE_START(FILE)\n+#undef\tASM_FILE_START_FILE_DIRECTIVE\n+#define ASM_FILE_START_FILE_DIRECTIVE false\n \n #undef  TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END darwin_file_end"}, {"sha": "7e2683fbb74b9af050850f26af49724551dbd8b5", "filename": "gcc/config/dsp16xx/dsp16xx-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -77,9 +77,6 @@ extern int initial_frame_pointer_offset PARAMS ((void));\n extern void asm_output_common PARAMS ((FILE *, const char *, int, int));\n extern void asm_output_local PARAMS ((FILE *, const char *, int, int));\n extern void asm_output_float PARAMS ((FILE *, double));\n-extern void dsp16xx_file_start PARAMS ((void));\n-extern void coff_dsp16xx_file_start PARAMS ((FILE *));\n-extern void luxworks_dsp16xx_file_start PARAMS ((FILE *));\n extern bool dsp16xx_compare_gen;\n extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n extern enum reg_class dsp16xx_reg_class_from_letter PARAMS ((int));"}, {"sha": "d858706149fd2d48b66aaefff3d6535494994d37", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -151,6 +151,7 @@ static const char *const lshift_right_asm_first[] =\n static int reg_save_size PARAMS ((void));\n static void dsp16xx_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void dsp16xx_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void dsp16xx_file_start PARAMS ((void));\n static bool dsp16xx_rtx_costs PARAMS ((rtx, int, int, int *));\n static int dsp16xx_address_cost PARAMS ((rtx));\n \f\n@@ -168,6 +169,9 @@ static int dsp16xx_address_cost PARAMS ((rtx));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE dsp16xx_output_function_epilogue\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START dsp16xx_file_start\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS dsp16xx_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -2373,49 +2377,10 @@ dsp16xx_function_arg_advance (cum, mode, type, named)\n     }\n }\n \n-void\n-coff_dsp16xx_file_start (file)\n-     FILE *file;\n-{\n-  fprintf (file, \"#include <%s.h>\\n\", save_chip_name);\n-}\n-\n-void\n-luxworks_dsp16xx_file_start (file)\n-     FILE *file;\n+static void\n+dsp16xx_file_start ()\n {\n-  char *temp_filename;\n-  int len, err_code;\n-\n-\n-  fprintf (file, \"\\t.debug \");\n-  err_code = (TARGET_DEBUG) ? fprintf (file, \"yes, \") : fprintf (file, \"no, \");\n-  err_code = (TARGET_SAVE_TEMPS) ? fprintf (file, \"asm, \") : fprintf (file, \"temp, \");\n-  len = strlen (main_input_filename);\n-  temp_filename = (char *) xmalloc (len + 2);\n-  strcpy (temp_filename, main_input_filename);\n-#ifdef __CYGWIN32__\n-    p = temp_filename;\n-    while (*p != '\\0') {\n-    if (*p == '\\\\')\n-        *p = '/';\n-         p++;\n-         }\n-#endif\n-    fprintf (file, \"\\\"%s\\\"\\n\", temp_filename);\n-\n-  fprintf (file, \"#include <%s.h>\\n\", save_chip_name);\n-\n-   /*\n-    * Add dummy sections, so that they always exist in the \n-    * object code. These have been created so that the number and\n-    * type of sections remain consistent with and without -g option. Note\n-    * that the .data, .text, .const and .bss are always created when -g\n-    * is provided as an option.  */\n-   fprintf (file, \"\\t.rsect \\\".text\\\" , nodelete\\n\");\n-   fprintf (file, \"\\t.rsect \\\".data\\\" , nodelete\\n\");\n-   fprintf (file, \"\\t.rsect \\\".const\\\" , nodelete\\n\");\n-   fprintf (file, \"\\t.rsect \\\".bss\\\" , nodelete\\n\");\n+  fprintf (asm_out_file, \"#include <%s.h>\\n\", save_chip_name);\n }\n \n rtx"}, {"sha": "83df03371ead08e1645fb9ae3f666c08e1c831b8", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1487,9 +1487,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n \f\n /* THE OVERALL FRAMEWORK OF AN ASSEMBLER FILE */\n \n-/* Output at beginning of assembler file.  */\n-#define ASM_FILE_START(FILE) coff_dsp16xx_file_start (FILE) \n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  */\n #define ASM_COMMENT_START \"\""}, {"sha": "ed9efc657cc21346783600862764f87030294422", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -96,16 +96,9 @@ Boston, MA 02111-1307, USA.  */\n #undef  SET_ASM_OP\n #define SET_ASM_OP\t\"\\t.set\\t\"\n \n-/* This is how to begin an assembly language file.  Most svr4 assemblers want\n-   at least a .file directive to come first, and some want to see a .version\n-   directive come right after that.  Here we just establish a default\n-   which generates only the .file directive.  If you need a .version\n-   directive for any specific target, you should override this definition\n-   in the target-specific file which includes this one.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                            \\\n-  output_file_directive ((FILE), main_input_filename)\n+/* Most svr4 assemblers want a .file directive at the beginning of\n+   their input file.  */\n+#define ASM_FILE_START_FILE_DIRECTIVE true\n \n /* This is how to allocate empty space in some section.  The .zero\n    pseudo-op is used for this on most svr4 assemblers.  */"}, {"sha": "7f67a3a78b14eeaab3f5905cfdc1dd982f2017ce", "filename": "gcc/config/h8300/elf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Felf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -31,12 +31,6 @@\n \t\t\t%{pg:gcrti.o%s}%{!pg:crti.o%s} \\\n \t\t\tcrtbegin.o%s\"\n \n-/* Output at beginning/end of assembler file.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                            \\\n-  (output_file_directive ((FILE), main_input_filename), \\\n-   asm_file_start (FILE))\n-\n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"_\"\n "}, {"sha": "b86b8ab1dc897b65fd896fba1a5f55936d4eea01", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -94,7 +94,6 @@ extern int h8300_can_use_return_insn_p (void);\n extern void h8300_expand_prologue (void);\n extern void h8300_expand_epilogue (void);\n extern int h8300_current_function_interrupt_function_p (void);\n-extern void asm_file_start (FILE *);\n extern int h8300_initial_elimination_offset (int, int);\n \n struct cpp_reader;"}, {"sha": "826cd6ca9bb92e2100a61260925e6f232a89e0f3", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -655,29 +655,15 @@ h8300_current_function_interrupt_function_p (void)\n \n /* Output assembly code for the start of the file.  */\n \n-void\n-asm_file_start (FILE *file)\n+static void\n+h8300_file_start (void)\n {\n-  fprintf (file, \";\\tGCC For the Hitachi H8/300\\n\");\n-  fprintf (file, \";\\tBy Hitachi America Ltd and Cygnus Support\\n\");\n+  default_file_start ();\n \n-  if (optimize_size)\n-    fprintf (file, \"; -Os\\n\");\n-  else if (optimize)\n-    fprintf (file, \"; -O%d\\n\", optimize);\n   if (TARGET_H8300H)\n-    if (TARGET_NORMAL_MODE)\n-      fprintf (file, \"\\n\\t.h8300hn\\n\");\n-    else\n-      fprintf (file, \"\\n\\t.h8300h\\n\");\n+    fputs (TARGET_NORMAL_MODE ? \"\\t.h8300hn\\n\" : \"\\t.h8300h\\n\", asm_out_file);\n   else if (TARGET_H8300S)\n-    if (TARGET_NORMAL_MODE)\n-      fprintf (file, \"\\n\\t.h8300sn\\n\");\n-    else\n-      fprintf (file, \"\\n\\t.h8300s\\n\");\n-  else\n-    fprintf (file, \"\\n\\n\");\n-  output_file_directive (file, main_input_filename);\n+    fputs (TARGET_NORMAL_MODE ? \"\\t.h8300sn\\n\" : \"\\t.h8300s\\n\", asm_out_file);\n }\n \n /* Output assembly language code for the end of file.  */\n@@ -4360,6 +4346,11 @@ byte_accesses_mergeable_p (rtx addr1, rtx addr2)\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START h8300_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END h8300_file_end\n "}, {"sha": "0bbeb2c1081ca9fd53859bf77fe12a79ef993ab5", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1030,10 +1030,6 @@ struct cum_arg\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning/end of assembler file.  */\n-\n-#define ASM_FILE_START(FILE) asm_file_start (FILE)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "501e353bf869f89f523071768c8e2cb20e12b44d", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -107,6 +107,7 @@ static void i370_globalize_label PARAMS ((FILE *, const char *));\n #endif\n static void i370_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void i370_file_start PARAMS ((void));\n static void i370_file_end PARAMS ((void));\n \n #ifdef LONGEXTERNAL\n@@ -320,6 +321,8 @@ static const unsigned char ebcasc[256] =\n #define TARGET_ASM_FUNCTION_PROLOGUE i370_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i370_output_function_epilogue\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START i370_file_start\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END i370_file_end\n #undef TARGET_ASM_INTERNAL_LABEL\n@@ -1602,6 +1605,12 @@ i370_output_function_epilogue (file, l)\n     fprintf (file, \"\\tDC\\tA(PG%d)\\n\", i);\n }\n \n+static void\n+i370_file_start ()\n+{\n+  fputs (\"\\tRMODE\\tANY\\n\\tCSECT\\n\", asm_out_file);\n+}\n+\n static void\n i370_file_end ()\n {"}, {"sha": "93e6ea63017159f500d2b6359207b9ff70dded7c", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1029,10 +1029,6 @@ enum reg_class\n   \"0\",  \"2\",  \"4\",  \"6\"\t\t\t\t\t\t\t\\\n }\n \n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-{ fputs (\"\\tRMODE\\tANY\\n\", FILE);\t\t\t\t\t\\\n-  fputs (\"\\tCSECT\\n\", FILE); }\n-\n #define ASM_COMMENT_START \"*\"\n #define ASM_APP_OFF \"\"\n #define ASM_APP_ON \"\""}, {"sha": "b51f66b65b2494ff15b20b5d02ff03102437609b", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -45,14 +45,7 @@ do\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n-\t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n /* This is how to output an assembler line\n    that says to advance the location counter"}, {"sha": "7104ac3d31ba9ec60630a1f3d0922bf72c6b1087", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -121,12 +121,4 @@ Boston, MA 02111-1307, USA.  */\n /* Print opcodes the way that GAS expects them.  */\n #define GAS_MNEMONICS 1\n \n-/* Output at beginning of assembler file.  */\n-/* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-        output_file_directive (FILE, main_input_filename);\t\t\\\n-\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n-\t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true"}, {"sha": "c58d07ba7873932bf3011e188ec4e56a556aec9d", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -92,16 +92,8 @@ Boston, MA 02111-1307, USA.  */\n /* The global __fltused is necessary to cause the printf/scanf routines\n    for outputting/inputting floating point numbers to be loaded.  Since this\n    is kind of hard to detect, we just do it all the time.  */\n-\n-#ifdef ASM_FILE_START\n-#undef ASM_FILE_START\n-#endif\n-#define ASM_FILE_START(FILE) \\\n-  do {  fprintf (FILE, \"\\t.file\\t\");                            \\\n-        output_quoted_string (FILE, dump_base_name);            \\\n-        fprintf (FILE, \"\\n\");                                   \\\n-        fprintf (FILE, \".global\\t__fltused\\n\");                 \\\n-  } while (0)\n+#undef X86_FILE_START_FLTUSED\n+#define X86_FILE_START_FLTUSED 1\n \n /* A table of bytes codes used by the ASM_OUTPUT_ASCII and\n    ASM_OUTPUT_LIMITED_STRING macros.  Each byte in the table"}, {"sha": "8409def0e46808341ee3e2b23f8bff05b0c8fd63", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -829,6 +829,7 @@ static void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, tree));\n static bool x86_can_output_mi_thunk PARAMS ((tree, HOST_WIDE_INT,\n \t\t\t\t\t     HOST_WIDE_INT, tree));\n+static void x86_file_start PARAMS ((void));\n static void ix86_reorg PARAMS ((void));\n bool ix86_expand_carry_flag_compare PARAMS ((enum rtx_code, rtx, rtx, rtx*));\n \n@@ -1006,6 +1007,9 @@ static void init_ext_80387_constants PARAMS ((void));\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK x86_can_output_mi_thunk\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START x86_file_start\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ix86_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -15532,6 +15536,18 @@ x86_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n     }\n }\n \n+static void\n+x86_file_start ()\n+{\n+  default_file_start ();\n+  if (X86_FILE_START_VERSION_DIRECTIVE)\n+    fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", asm_out_file);\n+  if (X86_FILE_START_FLTUSED)\n+    fputs (\"\\t.global\\t__fltused\\n\", asm_out_file);\n+  if (ix86_asm_dialect == ASM_INTEL)\n+    fputs (\"\\t.intel_syntax\\n\", asm_out_file);\n+}\n+\n int\n x86_field_alignment (field, computed)\n      tree field;"}, {"sha": "cfc96b54f0a07ff3b1670ead69adf681a24a6efd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -3229,6 +3229,10 @@ struct machine_function GTY(())\n #define ix86_save_varrargs_registers (cfun->machine->save_varrargs_registers)\n #define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n \n+/* Control behavior of x86_file_start.  */\n+#define X86_FILE_START_VERSION_DIRECTIVE false\n+#define X86_FILE_START_FLTUSED false\n+\n /*\n Local variables:\n version-control: t"}, {"sha": "98a25a95eaf226ea62f8b3f8024d90b309ec1096", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -25,13 +25,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tif (ix86_asm_dialect == ASM_INTEL)\t\t\t\t\\\n-\t  fputs (\"\\t.intel_syntax\\n\", FILE);\t\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n #define TARGET_VERSION fprintf (stderr, \" (i386 Linux/ELF)\");\n "}, {"sha": "b53bc21305cf809cf9e13e6e964ea666efa24fb1", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -44,12 +44,9 @@ Boston, MA 02111-1307, USA.  */\n #define CTORS_SECTION_ASM_OP\t\t\"\\t.section\\t.ctors, \\\"aw\\\"\"\n #define DTORS_SECTION_ASM_OP\t\t\"\\t.section\\t.dtors, \\\"aw\\\"\"\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  output_file_directive((FILE),main_input_filename);\t\t\t\\\n-  fprintf ((FILE), \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\t\\\n-} while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+#undef X86_FILE_START_VERSION_DIRECTIVE\n+#define X86_FILE_START_VERSION_DIRECTIVE true\n \n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named"}, {"sha": "d3e2d8b835da1aa6157fb56af7ce3315456b747a", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -34,12 +34,9 @@ Boston, MA 02111-1307, USA.  */\n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-\toutput_file_directive (FILE, main_input_filename);\t\t\\\n-\tfprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+#undef X86_FILE_START_VERSION_DIRECTIVE\n+#define X86_FILE_START_VERSION_DIRECTIVE true\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]"}, {"sha": "1a8ab46e5446dffa8b1ba6b0f34e456883cc802e", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -32,9 +32,8 @@ Boston, MA 02111-1307, USA.  */\n    use the standard definition of LIB_SPEC.  */\n #undef LIB_SPEC\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-  output_file_directive ((FILE), main_input_filename)\n+/* Emit a .file directive.  */\n+#define ASM_FILE_START_FILE_DIRECTIVE true\n \n /* Support the ctors and dtors sections for g++.  */\n "}, {"sha": "89bd554d7c285c0560c7f95b40e4f8fe0a0d4b1c", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1161,10 +1161,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(file)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "030c5ed667b54bd7bdd3b8c60d5c7af5170f024e", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -134,7 +134,7 @@ extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,\n \t\t\t\t\t   enum reg_class));\n extern int ia64_epilogue_uses PARAMS((int));\n extern int ia64_eh_uses PARAMS((int));\n-extern void emit_safe_across_calls PARAMS((FILE *));\n+extern void emit_safe_across_calls PARAMS((void));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n extern int ia64_dbx_register_number PARAMS((int));"}, {"sha": "eea13a7d9fe5f99fccd474b7d1d25d0bdfee47a8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -241,6 +241,7 @@ static void bundling PARAMS ((FILE *, int, rtx, rtx));\n \n static void ia64_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree));\n+static void ia64_file_start PARAMS ((void));\n \n static void ia64_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n@@ -356,6 +357,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START ia64_file_start\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -1608,9 +1612,15 @@ ia64_split_call (retval, addr, retaddr, scratch_r, scratch_b,\n \f\n /* Begin the assembly file.  */\n \n+static void\n+ia64_file_start ()\n+{\n+  default_file_start ();\n+  emit_safe_across_calls ();\n+}\n+\n void\n-emit_safe_across_calls (f)\n-     FILE *f;\n+emit_safe_across_calls ()\n {\n   unsigned int rs, re;\n   int out_state;\n@@ -1627,19 +1637,19 @@ emit_safe_across_calls (f)\n \tcontinue;\n       if (out_state == 0)\n \t{\n-\t  fputs (\"\\t.pred.safe_across_calls \", f);\n+\t  fputs (\"\\t.pred.safe_across_calls \", asm_out_file);\n \t  out_state = 1;\n \t}\n       else\n-\tfputc (',', f);\n+\tfputc (',', asm_out_file);\n       if (re == rs + 1)\n-\tfprintf (f, \"p%u\", rs);\n+\tfprintf (asm_out_file, \"p%u\", rs);\n       else\n-\tfprintf (f, \"p%u-p%u\", rs, re - 1);\n+\tfprintf (asm_out_file, \"p%u-p%u\", rs, re - 1);\n       rs = re + 1;\n     }\n   if (out_state)\n-    fputc ('\\n', f);\n+    fputc ('\\n', asm_out_file);\n }\n \n /* Helper function for ia64_compute_frame_size: find an appropriate general"}, {"sha": "4215c5b81cc1bffe899a3113ccec412d1b9d166b", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1456,11 +1456,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define EH_USES(REGNO) ia64_eh_uses (REGNO)\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(FILE) \\\n-  emit_safe_across_calls (FILE)\n-\n /* Output part N of a function descriptor for DECL.  For ia64, both\n    words are emitted with a single relocation, so ignore N > 0.  */\n #define ASM_OUTPUT_FDESC(FILE, DECL, PART)\t\t\t\t\\"}, {"sha": "d0c65de1a210971d62eb05624347f23200ff96f9", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -5432,7 +5432,7 @@\n   [(unspec_volatile [(const_int 0)] UNSPECV_PSAC_NORMAL)]\n   \"\"\n {\n-  emit_safe_across_calls (asm_out_file);\n+  emit_safe_across_calls ();\n   return \"\";\n }\n   [(set_attr \"itanium_class\" \"ignore\")"}, {"sha": "5db1089586009c676ecdcbc73c1635578a0d6ef3", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -117,26 +117,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n } while (0)\n \n-/* A C expression which outputs to the stdio stream STREAM some appropriate\n-   text to go at the start of an assembler file.  */\n-\n-/* ??? Looks like almost every port, except for a few original ones, get this\n-   wrong.  Must emit #NO_APP as first line of file to turn of special assembler\n-   preprocessing of files.  */\n-\n-/* ??? Even worse, it doesn't work, because gas does not accept the tab chars\n-   that dwarf2out.c emits when #NO_APP.  */\n-\n-/* ??? Unrelated, but dwarf2out.c emits unnecessary newlines after strings,\n-   may as well fix at the same time.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  output_file_directive (STREAM, main_input_filename);\t\t\t\\\n-  emit_safe_across_calls (STREAM);\t\t\t\t\t\\\n-} while (0)\n-\n /* Override default elf definition.  */\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION  ia64_select_rtx_section"}, {"sha": "db84b7af683c4fcfba24d2bdfce7f6bd157697a8", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -30,7 +30,6 @@ extern unsigned m32r_compute_frame_size\t\tPARAMS ((int));\n extern int    m32r_first_insn_address\t\tPARAMS ((void));\n extern void   m32r_expand_prologue\t\tPARAMS ((void));\n extern void   m32r_finalize_pic\t\t\tPARAMS ((void));\n-extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));"}, {"sha": "3622d0657ea8bb02dcbf26299720cedde148039c", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -77,6 +77,8 @@ static tree  m32r_handle_model_attribute PARAMS ((tree *, tree, tree, int, bool\n static void  m32r_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void  m32r_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n \n+static void  m32r_file_start PARAMS ((void));\n+\n static int    m32r_adjust_cost \t   PARAMS ((rtx, rtx, rtx, int));\n static int    m32r_adjust_priority PARAMS ((rtx, int));\n static void   m32r_sched_init\t   PARAMS ((FILE *, int, int));\n@@ -103,6 +105,9 @@ static bool m32r_rtx_costs PARAMS ((rtx, int, int, int *));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m32r_output_function_epilogue\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START m32r_file_start\n+\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST m32r_adjust_cost\n #undef TARGET_SCHED_ADJUST_PRIORITY\n@@ -2215,15 +2220,13 @@ m32r_initialize_trampoline (tramp, fnaddr, cxt)\n {\n }\n \f\n-/* Set the cpu type and print out other fancy things,\n-   at the top of the file.  */\n-\n-void\n-m32r_asm_file_start (file)\n-     FILE * file;\n+static void\n+m32r_file_start ()\n {\n+  default_file_start ();\n+\n   if (flag_verbose_asm)\n-    fprintf (file,\n+    fprintf (asm_out_file,\n \t     \"%s M32R/D special options: -G \" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n \t     ASM_COMMENT_START, g_switch_value);\n }"}, {"sha": "815de108844544af1ec39c3f0d6b42d46c2fbf2b", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -30,7 +30,6 @@ Boston, MA 02111-1307, USA.  */\n #undef PTRDIFF_TYPE\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n-#undef ASM_FILE_START\n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #undef TARGET_VERSION\n #undef CPP_SPEC\n@@ -1517,9 +1516,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-#define ASM_FILE_START(FILE) m32r_asm_file_start (FILE)\n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will\n    end at the end of the line.  */"}, {"sha": "ff670a9088bd67123c9d34f6db44757bc6e65e8a", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -33,8 +33,6 @@ extern int m68hc11_initial_elimination_offset PARAMS((int, int));\n extern void expand_prologue PARAMS((void));\n extern void expand_epilogue PARAMS((void));\n \n-extern void m68hc11_asm_file_start PARAMS((FILE*, const char*));\n-\n #ifdef TREE_CODE\n extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,"}, {"sha": "b40c4e75cd43ba8431d83215d7e3395d9744a500", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 10, "deletions": 55, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -58,7 +58,6 @@ Boston, MA 02111-1307, USA.\n #include \"target.h\"\n #include \"target-def.h\"\n \n-static void print_options PARAMS ((FILE *));\n static void emit_move_after_reload PARAMS ((rtx, rtx, rtx));\n static rtx simplify_logical PARAMS ((enum machine_mode, int, rtx, rtx *));\n static void m68hc11_emit_logical PARAMS ((enum machine_mode, int, rtx *));\n@@ -82,6 +81,7 @@ static void asm_print_register PARAMS ((FILE *, int));\n static void m68hc11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68hc11_asm_out_constructor PARAMS ((rtx, int));\n static void m68hc11_asm_out_destructor PARAMS ((rtx, int));\n+static void m68hc11_file_start PARAMS ((void));\n static void m68hc11_encode_section_info PARAMS((tree, rtx, int));\n static int autoinc_mode PARAMS((rtx));\n static int m68hc11_make_autoinc_notes PARAMS((rtx *, void *));\n@@ -230,6 +230,11 @@ static int nb_soft_regs;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68hc11_output_function_epilogue\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START m68hc11_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  m68hc11_encode_section_info\n \n@@ -5660,62 +5665,12 @@ m68hc11_rtx_costs (x, code, outer_code, total)\n }\n \f\n \n-/* print_options - called at the start of the code generation for a\n-   module.  */\n-\n-#include <time.h>\n-#include <sys/types.h>\n-\n static void\n-print_options (out)\n-     FILE *out;\n-{\n-  const char *a_time;\n-  long c_time;\n-  int i;\n-  extern int save_argc;\n-  extern char **save_argv;\n-\n-  fprintf (out, \";;; Command:\\t\");\n-  for (i = 0; i < save_argc; i++)\n-    {\n-      fprintf (out, \"%s\", save_argv[i]);\n-      if (i + 1 < save_argc)\n-\tfprintf (out, \" \");\n-    }\n-  fprintf (out, \"\\n\");\n-  c_time = time (0);\n-  a_time = ctime (&c_time);\n-  fprintf (out, \";;; Compiled:\\t%s\", a_time);\n-#ifdef __GNUC__\n-#ifndef __VERSION__\n-#define __VERSION__ \"[unknown]\"\n-#endif\n-  fprintf (out, \";;; (META)compiled by GNU C version %s.\\n\", __VERSION__);\n-#else\n-  fprintf (out, \";;; (META)compiled by CC.\\n\");\n-#endif\n-}\n-\n-void\n-m68hc11_asm_file_start (out, main_file)\n-     FILE *out;\n-     const char *main_file;\n+m68hc11_file_start ()\n {\n-  fprintf (out, \";;;-----------------------------------------\\n\");\n-  fprintf (out, \";;; Start %s gcc assembly output\\n\",\n-           TARGET_M6811\n-           ? \"MC68HC11\"\n-           : TARGET_M68S12 ? \"MC68HCS12\" : \"MC68HC12\");\n-  fprintf (out, \";;; gcc compiler %s\\n\", version_string);\n-  print_options (out);\n-  fprintf (out, \";;;-----------------------------------------\\n\");\n-  output_file_directive (out, main_file);\n-\n-  if (TARGET_SHORT)\n-    fprintf (out, \"\\t.mode mshort\\n\");\n-  else\n-    fprintf (out, \"\\t.mode mlong\\n\");\n+  default_file_start ();\n+  \n+  fprintf (asm_out_file, \"\\t.mode %s\\n\", TARGET_SHORT ? \"mshort\" : \"mlong\");\n }\n \n "}, {"sha": "1492c775b32d82069ad4455e4e1fc82d66cd2cbf", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1511,17 +1511,6 @@ do {                                                                    \\\n #define TARGET_ASM_CONSTRUCTOR  m68hc11_asm_out_constructor\n #define TARGET_ASM_DESTRUCTOR   m68hc11_asm_out_destructor\n \n-/* This is how to begin an assembly language file.  Most svr4 assemblers want\n-   at least a .file directive to come first, and some want to see a .version\n-   directive come right after that.  Here we just establish a default\n-   which generates only the .file directive.  If you need a .version\n-   directive for any specific target, you should override this definition\n-   in the target-specific file which includes this one.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)                            \\\n-    m68hc11_asm_file_start ((FILE), main_input_filename)\n-\n /* Comment character */\n #define ASM_COMMENT_START\t\";\"\n "}, {"sha": "824805df45621498165f02b06e39424fca4bd053", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -76,9 +76,7 @@ Boston, MA 02111-1307, USA.  */\n  \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\",\t\\\n  \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\" }\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-  output_file_directive ((FILE), main_input_filename)\n+#define ASM_FILE_START_FILE_DIRECTIVE true\n \n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as uninitialized global"}, {"sha": "a755aca672c0be9421078764a85804c70a06ccfe", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -112,7 +112,6 @@ Boston, MA 02111-1307, USA.  */\n \n #endif /* default is -msoft-float */\n \n-\n /* -m68000 requires special flags to the assembler.  */\n #define ASM_SPEC \\\n  \"%{m68000:-mc68000}%{mc68000:-mc68000}%{!mc68000:%{!m68000:-mc68020}}\"\n@@ -168,7 +167,6 @@ Boston, MA 02111-1307, USA.  */\n #undef REGISTER_NAMES\n #undef ASM_OUTPUT_REG_PUSH\n #undef ASM_OUTPUT_REG_POP\n-#undef ASM_FILE_START\n #undef ASM_APP_ON\n #undef ASM_APP_OFF\n #undef TEXT_SECTION_ASM_OP\n@@ -211,16 +209,7 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"\\tmov.l (%%sp)+,%s\\n\", reg_names[REGNO])\n \n /* For HPUX versions before 6.5, define this macro as empty.  */\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-  if (TARGET_68020)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_68881)\t\t\t\t\t\t\t\\\n-\t fprintf (FILE, \"\\tversion 3\\n\"); /* 68020 fp regs saved */\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t fprintf (FILE, \"\\tversion 2\\n\"); /* 68020 no fp regs saved */\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tversion 1\\n\");\t/* 68010 */\n+#define TARGET_ASM_FILE_START m68k_hp320_file_start\n \n #define ASM_APP_ON \"\"\n "}, {"sha": "d4df6cf335128336b31664efcf8e0d588d4a6ef5", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -59,6 +59,7 @@ static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n #ifdef HPUX_ASM\n static void m68k_hp320_internal_label PARAMS ((FILE *, const char *, unsigned long));\n+static void m68k_hp320_file_start PARAMS ((void));\n #endif\n static void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree));\n@@ -131,6 +132,9 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n+#undef TARGET_ASM_FILE_START_APP_OFF\n+#define TARGET_ASM_FILE_START_APP_OFF true\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS m68k_rtx_costs\n \n@@ -3663,6 +3667,16 @@ m68k_hp320_internal_label (stream, prefix, labelno)\n   else\n     fprintf (stream, \"%s%ld:\\n\", prefix, labelno);\n }\n+\n+static void\n+m68k_hp320_file_start ()\n+{\n+  /* version 1: 68010.\n+             2: 68020 without FPU.\n+\t     3: 68020 with FPU.  */\n+  fprintf (asm_out_file, \"\\tversion %d\\n\",\n+\t   TARGET_68020 ? (TARGET_68881 ? 3 : 2) : 1);\n+}\n #endif\n \n static void"}, {"sha": "12c30b8ba26e99c743047486ac44e25ad7bafb95", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1292,11 +1292,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(FILE)\t\\\n-  fprintf (FILE, \"#NO_APP\\n\");\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "35055e5762f60223ab6784192a3a9a4f7d4a4871", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -105,15 +105,7 @@ drectve_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0);\n \n-#undef  ASM_FILE_START\n-#define ASM_FILE_START(STREAM)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"%s Generated by gcc %s for MCore/pe\\n\",\t\\\n-\t   ASM_COMMENT_START, version_string);\t\t\t\\\n-      output_file_directive ((STREAM), main_input_filename);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n #undef  ASM_OUTPUT_SOURCE_LINE\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\t  \\"}, {"sha": "6a3e792290c530f1ce4d399756a752dccd483476", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -356,8 +356,6 @@ current_section_flags ()\t\t\t\t\t\t\\\n /* SGI assembler needs all sorts of extra help to do alignment properly.  */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN iris6_asm_output_align\n-#undef ASM_FILE_START\n-#define ASM_FILE_START  iris6_asm_file_start\n \n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)"}, {"sha": "217647bbfbdfb7bfd756c8d675870a008c32c3fe", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -28,8 +28,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern HOST_WIDE_INT\tcompute_frame_size PARAMS ((HOST_WIDE_INT));\n extern int\t\tmips_initial_elimination_offset PARAMS ((int, int));\n-extern void\t\tmips_asm_file_start PARAMS ((FILE *));\n-extern void\t\tiris6_asm_file_start PARAMS ((FILE *));\n extern void\t\tiris6_asm_output_align PARAMS ((FILE *, unsigned));\n extern const char *\tcurrent_section_name PARAMS ((void));\n extern unsigned int\tcurrent_section_flags PARAMS ((void));"}, {"sha": "ef43a1af2814d8299e00027e152df30b6c95b687", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -276,6 +276,7 @@ static void iris6_asm_named_section\t\tPARAMS ((const char *,\n static int iris_section_align_entry_eq\t\tPARAMS ((const void *, const void *));\n static hashval_t iris_section_align_entry_hash\tPARAMS ((const void *));\n static int iris6_section_align_1\t\tPARAMS ((void **, void *));\n+static void iris6_file_start\t\t\tPARAMS ((void));\n static void iris6_file_end\t\t\tPARAMS ((void));\n #endif\n static int mips_adjust_cost\t\t\tPARAMS ((rtx, rtx, rtx, int));\n@@ -292,6 +293,7 @@ static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n static bool mips_rtx_costs\t\t\tPARAMS ((rtx, int, int, int *));\n static int mips_address_cost                    PARAMS ((rtx));\n static void mips_encode_section_info            PARAMS ((tree, rtx, int));\n+static void mips_file_start\t\t\tPARAMS ((void));\n static void mips_file_end\t\t\tPARAMS ((void));\n \n /* Structure to be filled in by compute_frame_size with register\n@@ -875,12 +877,17 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mips_reorg\n \n+#undef TARGET_ASM_FILE_START\n #undef TARGET_ASM_FILE_END\n #ifdef TARGET_IRIX6\n+#define TARGET_ASM_FILE_START iris6_file_start\n #define TARGET_ASM_FILE_END iris6_file_end\n #else\n+#define TARGET_ASM_FILE_START mips_file_start\n #define TARGET_ASM_FILE_END mips_file_end\n #endif\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -6101,19 +6108,18 @@ mips_output_ascii (stream, string_param, len)\n    relevant .comm/.lcomm/.extern/.sdata declaration when the code is\n    processed, it generates a two instruction sequence.  */\n \n-void\n-mips_asm_file_start (stream)\n-     FILE *stream;\n+static void\n+mips_file_start ()\n {\n-  ASM_OUTPUT_SOURCE_FILENAME (stream, main_input_filename);\n+  default_file_start ();\n \n   /* Versions of the MIPS assembler before 2.20 generate errors if a branch\n      inside of a .set noreorder section jumps to a label outside of the .set\n      noreorder section.  Revision 2.20 just set nobopt silently rather than\n      fixing the bug.  */\n \n   if (TARGET_MIPS_AS && optimize && flag_delayed_branch)\n-    fprintf (stream, \"\\t.set\\tnobopt\\n\");\n+    fprintf (asm_out_file, \"\\t.set\\tnobopt\\n\");\n \n   if (TARGET_GAS)\n     {\n@@ -6141,28 +6147,26 @@ mips_asm_file_start (stream)\n \t because in this way we can avoid creating an allocated section.  We\n \t do not want this section to take up any space in the running\n \t executable.  */\n-      fprintf (stream, \"\\t.section .mdebug.%s\\n\", abi_string);\n+      fprintf (asm_out_file, \"\\t.section .mdebug.%s\\n\", abi_string);\n \n       /* Restore the default section.  */\n-      fprintf (stream, \"\\t.previous\\n\");\n+      fprintf (asm_out_file, \"\\t.previous\\n\");\n #endif\n     }\n \n-\n-\n   /* Generate the pseudo ops that System V.4 wants.  */\n #ifndef ABICALLS_ASM_OP\n #define ABICALLS_ASM_OP \"\\t.abicalls\"\n #endif\n   if (TARGET_ABICALLS)\n     /* ??? but do not want this (or want pic0) if -non-shared? */\n-    fprintf (stream, \"%s\\n\", ABICALLS_ASM_OP);\n+    fprintf (asm_out_file, \"%s\\n\", ABICALLS_ASM_OP);\n \n   if (TARGET_MIPS16)\n-    fprintf (stream, \"\\t.set\\tmips16\\n\");\n+    fprintf (asm_out_file, \"\\t.set\\tmips16\\n\");\n \n   if (flag_verbose_asm)\n-    fprintf (stream, \"\\n%s -G value = %d, Arch = %s, ISA = %d\\n\",\n+    fprintf (asm_out_file, \"\\n%s -G value = %d, Arch = %s, ISA = %d\\n\",\n \t     ASM_COMMENT_START,\n \t     mips_section_threshold, mips_arch_info->name, mips_isa);\n }\n@@ -10336,15 +10340,13 @@ iris6_asm_output_align (file, log)\n    switching games so that we can emit a .section directive at the\n    beginning of the file with the proper alignment attached.  */\n \n-void\n-iris6_asm_file_start (stream)\n-     FILE *stream;\n+static void\n+iris6_file_start ()\n {\n-  mips_asm_file_start (stream);\n+  mips_file_start ();\n \n   iris_orig_asm_out_file = asm_out_file;\n-  stream = tmpfile ();\n-  asm_out_file = stream;\n+  asm_out_file = tmpfile ();\n \n   iris_section_align_htab = htab_create (31, iris_section_align_entry_hash,\n \t\t\t\t\t iris_section_align_entry_eq, NULL);"}, {"sha": "bd1d8b6fa287874556e40558a5ee0188327b3977", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -3276,17 +3276,6 @@ typedef struct mips_args {\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.\n-   If we are optimizing to use the global pointer, create a temporary\n-   file to hold all of the text stuff, and write it out to the end.\n-   This is needed because the MIPS assembler is evidently one pass,\n-   and if it hasn't seen the relevant .comm/.lcomm/.extern/.sdata\n-   declaration when the code is processed, it generates a two\n-   instruction sequence.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM) mips_asm_file_start (STREAM)\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "7e04d6aa998ec7e17fc20d32aae3f7adc1f0a7aa", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -33,7 +33,6 @@ extern int mmix_register_move_cost\n   PARAMS ((enum machine_mode, enum reg_class, enum reg_class));\n extern const char *mmix_text_section_asm_op PARAMS ((void));\n extern const char *mmix_data_section_asm_op PARAMS ((void));\n-extern void mmix_asm_file_start PARAMS ((FILE *));\n extern void mmix_asm_output_source_filename PARAMS ((FILE *, const char *));\n extern void mmix_output_quoted_string PARAMS ((FILE *, const char *, int));\n extern void mmix_asm_output_source_line  PARAMS ((FILE *, int));"}, {"sha": "290b5d83e070b145392d11b6bd18581070abbbd2", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -135,6 +135,7 @@ static void mmix_target_asm_function_epilogue\n static void mmix_reorg PARAMS ((void));\n static void mmix_asm_output_mi_thunk\n   PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+static void mmix_file_start PARAMS ((void));\n static void mmix_file_end PARAMS ((void));\n static bool mmix_rtx_costs\n   PARAMS ((rtx, int, int, int *));\n@@ -174,6 +175,10 @@ static bool mmix_rtx_costs\n #define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START mmix_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END mmix_file_end\n \n@@ -1297,17 +1302,15 @@ mmix_strip_name_encoding (name)\n   return name;\n }\n \n-/* ASM_FILE_START.  */\n+/* TARGET_ASM_FILE_START.\n+   We just emit a little comment for the time being.  */\n \n-void\n-mmix_asm_file_start (stream)\n-     FILE * stream;\n+static void\n+mmix_file_start ()\n {\n-  /* We just emit a little comment for the time being.  FIXME: Perhaps add\n-     -mstandalone and some segment and prefix setup here.  */\n-  ASM_OUTPUT_SOURCE_FILENAME (stream, main_input_filename);\n+  default_file_start ();\n \n-  fprintf (stream, \"! mmixal:= 8H LOC Data_Section\\n\");\n+  fputs (\"! mmixal:= 8H LOC Data_Section\\n\", asm_out_file);\n \n   /* Make sure each file starts with the text section. */\n   text_section ();"}, {"sha": "95c6444772498a39c49a6c4a81b42aa041e9211d", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -919,9 +919,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n /* Node: File Framework */\n \n-#define ASM_FILE_START(STREAM) \\\n- mmix_asm_file_start (STREAM)\n-\n /* While any other punctuation character but \";\" would do, we prefer \"%\"\n    or \"!\"; \"!\" is an unary operator and so will not be mistakenly included\n    in correctly formed expressions.  The hash character adds mass; catches"}, {"sha": "209a7e6c8916415e65977de08d1c841fa546461a", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -53,7 +53,6 @@ extern struct rtx_def *mn10300_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n \n extern struct rtx_def *mn10300_builtin_saveregs PARAMS ((void));\n-extern void asm_file_start PARAMS ((FILE *));\n extern void expand_prologue PARAMS ((void));\n extern void expand_epilogue PARAMS ((void));\n extern int initial_offset PARAMS ((int, int));"}, {"sha": "da2185dc029990cdeac74c0b093837f522785e19", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -58,6 +58,7 @@ Boston, MA 02111-1307, USA.  */\n static int mn10300_address_cost_1 PARAMS ((rtx, int *));\n static int mn10300_address_cost PARAMS ((rtx));\n static bool mn10300_rtx_costs PARAMS ((rtx, int, int, int *));\n+static void mn10300_file_start PARAMS ((void));\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -69,21 +70,20 @@ static bool mn10300_rtx_costs PARAMS ((rtx, int, int, int *));\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST mn10300_address_cost\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START mn10300_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-void\n-asm_file_start (file)\n-     FILE *file;\n+static void\n+mn10300_file_start ()\n {\n-  fprintf (file, \"#\\tGCC For the Matsushita MN10300\\n\");\n-  if (optimize)\n-    fprintf (file, \"# -O%d\\n\", optimize);\n-  else\n-    fprintf (file, \"\\n\\n\");\n+  default_file_start ();\n \n   if (TARGET_AM33)\n-    fprintf (file, \"\\t.am33\\n\");\n-  output_file_directive (file, main_input_filename);\n+    fprintf (asm_out_file, \"\\t.am33\\n\");\n }\n \f\n "}, {"sha": "cae8f2a3f819e4cb749b6f0d1212821c0cf6ec09", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -839,10 +839,6 @@ struct cum_arg {int nbytes; };\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n #define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n \n-/* Output at beginning/end of assembler file.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) asm_file_start(FILE)\n-\n #define ASM_COMMENT_START \"#\"\n \n /* Output to assembler file text saying following lines"}, {"sha": "10ee5cf359599dc0500983f389fcae64796f1728", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -96,6 +96,9 @@ static int ns32k_address_cost PARAMS ((rtx));\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST ns32k_address_cost\n \n+#undef TARGET_ASM_FILE_START_APP_OFF\n+#define TARGET_ASM_FILE_START_APP_OFF true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Generate the assembly code for function entry.  FILE is a stdio"}, {"sha": "0236a420da9959d25c7d38659a82712bbe89f018", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1256,10 +1256,6 @@ __transfer_from_trampoline ()\t\t\\\n \n /* Define the output Assembly Language */\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(FILE) fprintf (FILE, \"#NO_APP\\n\");\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "5b35178ea91ff6675b5f1a5f5c076f7dacef3870", "filename": "gcc/config/pa/elf.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Felf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -32,20 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-do {  \\\n-     if (TARGET_PA_20) \\\n-       fputs(\"\\t.LEVEL 2.0\\n\", FILE); \\\n-     else if (TARGET_PA_11) \\\n-       fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n-     else \\\n-       fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\\n-     if (profile_flag)\\\n-       fprintf (FILE, \"\\t.IMPORT _mcount, ENTRY\\n\");\\\n-     if (write_symbols != NO_DEBUG) \\\n-       output_file_directive ((FILE), main_input_filename); \\\n-   } while (0)\n+#define TARGET_ASM_FILE_START pa_elf_file_start\n \n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\"}, {"sha": "ed7c82bf8466d50e0ebca70baaa57026ff155149", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -106,29 +106,7 @@ Boston, MA 02111-1307, USA.  */\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n \n-/* Output at beginning of assembler file.  We override the definition\n-   from <linux.h> so that we can get the proper .LEVEL directive.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (write_symbols != NO_DEBUG)\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  output_file_directive (FILE, main_input_filename);\t\\\n-\t  fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", FILE);\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      if (TARGET_64BIT)\t\t\t\t\t\t\\\n-\tfputs(\"\\t.LEVEL 2.0w\\n\", FILE);\t\t\t\t\\\n-      else if (TARGET_PA_20)\t\t\t\t\t\\\n-\tfputs(\"\\t.LEVEL 2.0\\n\", FILE);\t\t\t\t\\\n-      else if (TARGET_PA_11)\t\t\t\t\t\\\n-\tfputs(\"\\t.LEVEL 1.1\\n\", FILE);\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfputs(\"\\t.LEVEL 1.0\\n\", FILE);\t\t\t\t\\\n-      if (profile_flag)\t\t\t\t\t\t\\\n-\tfputs (\"\\t.IMPORT _mcount, CODE\\n\", FILE);\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-   while (0)\n+#define TARGET_ASM_FILE_START pa_linux_file_start\n \n /* We want local labels to start with period if made with asm_fprintf.  */\n #undef LOCAL_LABEL_PREFIX"}, {"sha": "b17d1dc923fefce36cb1125c3bc6bc4d1bb4fd8b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -135,6 +135,15 @@ static void copy_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static int length_fp_args PARAMS ((rtx)) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel PARAMS ((const char *))\n      ATTRIBUTE_UNUSED;\n+static inline void pa_file_start_level PARAMS ((void)) ATTRIBUTE_UNUSED;\n+static inline void pa_file_start_space PARAMS ((int)) ATTRIBUTE_UNUSED;\n+static inline void pa_file_start_file PARAMS ((int)) ATTRIBUTE_UNUSED;\n+static inline void pa_file_start_mcount PARAMS ((const char*)) ATTRIBUTE_UNUSED;\n+static void pa_elf_file_start PARAMS ((void)) ATTRIBUTE_UNUSED;\n+static void pa_som_file_start PARAMS ((void)) ATTRIBUTE_UNUSED;\n+static void pa_linux_file_start PARAMS ((void)) ATTRIBUTE_UNUSED;\n+static void pa_hpux64_gas_file_start PARAMS ((void)) ATTRIBUTE_UNUSED;\n+static void pa_hpux64_hpas_file_start PARAMS ((void)) ATTRIBUTE_UNUSED;\n static void output_deferred_plabels PARAMS ((void));\n \n /* Save the operands last given to a compare for use when we\n@@ -4902,6 +4911,106 @@ output_global_address (file, x, round_constant)\n     output_addr_const (file, x);\n }\n \n+/* Output boilerplate text to appear at the beginning of the file.\n+   There are several possible versions.  */\n+#define aputs(x) fputs(x, asm_out_file)\n+static inline void\n+pa_file_start_level ()\n+{\n+  if (TARGET_64BIT)\n+    aputs (\"\\t.LEVEL 2.0w\\n\");\n+  else if (TARGET_PA_20)\n+    aputs (\"\\t.LEVEL 2.0\\n\");\n+  else if (TARGET_PA_11)\n+    aputs (\"\\t.LEVEL 1.1\\n\");\n+  else\n+    aputs (\"\\t.LEVEL 1.0\\n\");\n+}\n+\n+static inline void\n+pa_file_start_space (sortspace)\n+     int sortspace;\n+{\n+  aputs (\"\\t.SPACE $PRIVATE$\");\n+  if (sortspace)\n+    aputs (\",SORT=16\");\n+  aputs (\"\\n\\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\"\n+         \"\\n\\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\"\n+         \"\\n\\t.SPACE $TEXT$\");\n+  if (sortspace)\n+    aputs (\",SORT=8\");\n+  aputs (\"\\n\\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\"\n+         \"\\n\\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\");\n+}\n+\n+static inline void\n+pa_file_start_file (want_version)\n+     int want_version;\n+{\n+  if (write_symbols != NO_DEBUG)\n+    {\n+      output_file_directive (asm_out_file, main_input_filename);\n+      if (want_version)\n+\taputs (\"\\t.version\\t\\\"01.01\\\"\\n\");\n+    }\n+}\n+\n+static inline void\n+pa_file_start_mcount (aswhat)\n+     const char *aswhat;\n+{\n+  if (profile_flag)\n+    fprintf (asm_out_file, \"\\t.IMPORT _mcount,%s\\n\", aswhat);\n+}\n+  \n+static void\n+pa_elf_file_start ()\n+{\n+  pa_file_start_level ();\n+  pa_file_start_mcount (\"ENTRY\");\n+  pa_file_start_file (0);\n+}\n+\n+static void\n+pa_som_file_start ()\n+{\n+  pa_file_start_level ();\n+  pa_file_start_space (0);\n+  aputs (\"\\t.IMPORT $global$,DATA\\n\"\n+         \"\\t.IMPORT $$dyncall,MILLICODE\\n\");\n+  pa_file_start_mcount (\"CODE\");\n+  pa_file_start_file (0);\n+}\n+\n+static void\n+pa_linux_file_start ()\n+{\n+  pa_file_start_file (1);\n+  pa_file_start_level ();\n+  pa_file_start_mcount (\"CODE\");\n+}\n+\n+static void\n+pa_hpux64_gas_file_start ()\n+{\n+  pa_file_start_level ();\n+#ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n+  if (profile_flag)\n+    ASM_OUTPUT_TYPE_DIRECTIVE (asm_out_file, \"_mcount\", \"function\");\n+#endif\n+  pa_file_start_file (1);\n+}\n+\n+static void\n+pa_hpux64_hpas_file_start ()\n+{\n+  pa_file_start_level ();\n+  pa_file_start_space (1);\n+  pa_file_start_mcount (\"CODE\");\n+  pa_file_start_file (0);\n+}\n+#undef aputs\n+\n static struct deferred_plabel *\n get_plabel (fname)\n      const char *fname;"}, {"sha": "d16d741e2d10adeed5da9545a023c87f19dc697e", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -100,25 +100,8 @@ Boston, MA 02111-1307, USA.  */\n /* We are using GAS.  */\n #define TARGET_GAS 1\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT)\t\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 2.0w\\n\", FILE);\t\t\t\t\\\n-  else if (TARGET_PA_20)\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 2.0\\n\", FILE);\t\t\t\t\\\n-  else if (TARGET_PA_11)\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 1.1\\n\", FILE);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 1.0\\n\", FILE);\t\t\t\t\\\n-  if (profile_flag)\t\t\t\t\t\t\\\n-    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, \"_mcount\", \"function\");\t\\\n-  if (write_symbols != NO_DEBUG)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      output_file_directive ((FILE), main_input_filename);\t\\\n-      fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", FILE);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START pa_hpux64_gas_file_start\n \n /* This is how we output a null terminated string.  */\n #undef STRING_ASM_OP\n@@ -221,28 +204,8 @@ do {\t\t\t\t\t\t\t\t\\\n /* This target uses the ELF object file format.  */\n #define OBJECT_FORMAT_ELF\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT)\t\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 2.0w\\n\", FILE);\t\t\t\t\\\n-  else if (TARGET_PA_20)\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 2.0\\n\", FILE);\t\t\t\t\\\n-  else if (TARGET_PA_11)\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 1.1\\n\", FILE);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fputs(\"\\t.LEVEL 1.0\\n\", FILE);\t\t\t\t\\\n-  fputs(\"\\t.SPACE $PRIVATE$,SORT=16\\n\\\n-\\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\\n\\\n-\\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\\n\\\n-\\t.SPACE $TEXT$,SORT=8\\n\\\n-\\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\\n\\\n-\\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\", FILE);\t\\\n-  if (profile_flag)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\t\t\\\n-  if (write_symbols != NO_DEBUG)\t\t\t\t\\\n-    output_file_directive ((FILE), main_input_filename);\t\\\n-} while (0)\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START pa_hpux64_hpas_file_start\n \n #undef TEXT_SECTION_ASM_OP\n #define TEXT_SECTION_ASM_OP\t\t\"\\t.SUBSPA $CODE$\\n\""}, {"sha": "db31c6006fb967a9c7b62d7b8d02eb3eba421c11", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -213,29 +213,7 @@ do {\t\t\t\t\t\t\t\t\\\n \t     fputs (\"\\n\", FILE);\t\t\t\t\t\\\n \t   }} while (0)\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(FILE) \\\n-do {  \\\n-     if (TARGET_PA_20) \\\n-       fputs(\"\\t.LEVEL 2.0\\n\", FILE); \\\n-     else if (TARGET_PA_11) \\\n-       fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n-     else \\\n-       fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\\n-     fputs (\"\\t.SPACE $PRIVATE$\\n\\\n-\\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\\n\\\n-\\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\\n\\\n-\\t.SPACE $TEXT$\\n\\\n-\\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\\n\\\n-\\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\\\n-\\t.IMPORT $global$,DATA\\n\\\n-\\t.IMPORT $$dyncall,MILLICODE\\n\", FILE);\\\n-     if (profile_flag)\\\n-       fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\\\n-     if (write_symbols != NO_DEBUG) \\\n-       output_file_directive ((FILE), main_input_filename); \\\n-   } while (0)\n+#define TARGET_ASM_FILE_START pa_som_file_start\n \n /* Output before code.  */\n "}, {"sha": "317eda93330bd1f0b8108cc5a546754d0d3963fc", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -990,20 +990,6 @@ extern struct rtx_def *cc0_reg_rtx;\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-\n-#if 0\n-#define ASM_FILE_START(FILE) \\\n-(\t\t\t\t\t\t\t\t\\\n-fprintf (FILE, \"\\t.data\\n\"),\t\t\t\t\t\\\n-fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n-/* do we need reg def's R0 = %0 etc ??? */\t\t\t\\\n-)\n-#else\n-#define ASM_FILE_START(FILE)\n-#endif\n-\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "d40221513aa39a53ebde123badad8bea934c91ee", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -87,8 +87,8 @@\n    Don't do this until the fixed IBM assembler is more generally available.\n    When this becomes permanently defined, the ASM_OUTPUT_EXTERNAL,\n    ASM_OUTPUT_EXTERNAL_LIBCALL, and RS6000_OUTPUT_BASENAME macros will no\n-   longer be needed.  Also, the extern declaration of mcount in ASM_FILE_START\n-   will no longer be needed.  */\n+   longer be needed.  Also, the extern declaration of mcount in \n+   rs6000_xcoff_file_start will no longer be needed.  */\n \n /* #define ASM_SPEC \"-u %(asm_cpu)\" */\n "}, {"sha": "c1c1edb4d30686339b4db0f80cdd83f9458c2117", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -103,17 +103,6 @@\n   rs6000_override_options (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n \t\t\t   ? (char *) 0 : TARGET_CPU_DEFAULT)\n \n-#undef\tASM_FILE_START\n-#define\tASM_FILE_START(FILE)\t\t\t\t\t\t    \\\n-  do\t\t\t\t\t\t\t\t\t    \\\n-    {                                                                       \\\n-      output_file_directive ((FILE), main_input_filename);\t\t    \\\n-      rs6000_file_start (FILE, (((TARGET_DEFAULT ^ target_flags)\t    \\\n-\t\t\t\t & MASK_64BIT)\t\t\t\t    \\\n-\t\t\t\t? (char *) 0 : TARGET_CPU_DEFAULT));\t    \\\n-    }\t\t\t\t\t\t\t\t\t    \\\n-  while (0)\n-\n #endif\n \n #undef\tASM_DEFAULT_SPEC"}, {"sha": "464b243207a82c07d8765edc39797bf9a77bc913", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -24,7 +24,6 @@\n #undef PTRDIFF_TYPE\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n-#undef ASM_FILE_START\n #undef EXTRA_SECTIONS\n #undef READONLY_DATA_SECTION\n #undef READONLY_DATA_SECTION_ASM_OP"}, {"sha": "051da0206a7ebf977c5d5ad7e2a47e0ca388355d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -167,7 +167,6 @@ extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));\n \n extern void optimization_options PARAMS ((int, int));\n extern void rs6000_override_options PARAMS ((const char *));\n-extern void rs6000_file_start PARAMS ((FILE *, const char *));\n extern int direct_return PARAMS ((void));\n extern union tree_node *rs6000_build_va_list PARAMS ((void));\n extern int first_reg_to_save PARAMS ((void));"}, {"sha": "2e1ceef9129428be8d1bc140e7aadfb1fd737404", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -51,6 +51,9 @@\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cfglayout.h\"\n+#if TARGET_XCOFF\n+#include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n+#endif\n \n #ifndef TARGET_NO_PROTOTYPE\n #define TARGET_NO_PROTOTYPE 0\n@@ -235,6 +238,7 @@ static void rs6000_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t    HOST_WIDE_INT, tree));\n static rtx rs6000_emit_set_long_const PARAMS ((rtx,\n   HOST_WIDE_INT, HOST_WIDE_INT));\n+static void rs6000_file_start PARAMS ((void));\n #if TARGET_ELF\n static unsigned int rs6000_elf_section_type_flags PARAMS ((tree, const char *,\n \t\t\t\t\t\t\t   int));\n@@ -259,6 +263,7 @@ static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n static unsigned int rs6000_xcoff_section_type_flags PARAMS ((tree, const char *, int));\n+static void rs6000_xcoff_file_start PARAMS ((void));\n static void rs6000_xcoff_file_end PARAMS ((void));\n #endif\n #if TARGET_MACHO\n@@ -941,15 +946,22 @@ optimization_options (level, size)\n \f\n /* Do anything needed at the start of the asm file.  */\n \n-void\n-rs6000_file_start (file, default_cpu)\n-     FILE *file;\n-     const char *default_cpu;\n+static void\n+rs6000_file_start ()\n {\n   size_t i;\n   char buffer[80];\n   const char *start = buffer;\n   struct rs6000_cpu_select *ptr;\n+  const char *default_cpu = TARGET_CPU_DEFAULT;\n+  FILE *file = asm_out_file;\n+\n+  default_file_start ();\n+\n+#ifdef TARGET_BI_ARCH\n+  if ((TARGET_DEFAULT ^ target_flags) & MASK_64BIT)\n+    default_cpu = 0;\n+#endif\n \n   if (flag_verbose_asm)\n     {\n@@ -14179,6 +14191,40 @@ rs6000_xcoff_section_type_flags (decl, name, reloc)\n   return flags | (exact_log2 (align) & SECTION_ENTSIZE);\n }\n \n+/* Output at beginning of assembler file.\n+\n+   Initialize the section names for the RS/6000 at this point.\n+\n+   Specify filename, including full path, to assembler.\n+\n+   We want to go into the TOC section so at least one .toc will be emitted.\n+   Also, in order to output proper .bs/.es pairs, we need at least one static\n+   [RW] section emitted.\n+\n+   Finally, declare mcount when profiling to make the assembler happy.  */\n+\n+static void\n+rs6000_xcoff_file_start ()\n+{\n+  rs6000_gen_section_name (&xcoff_bss_section_name,\n+\t\t\t   main_input_filename, \".bss_\");\n+  rs6000_gen_section_name (&xcoff_private_data_section_name,\n+\t\t\t   main_input_filename, \".rw_\");\n+  rs6000_gen_section_name (&xcoff_read_only_section_name,\n+\t\t\t   main_input_filename, \".ro_\");\n+\n+  fputs (\"\\t.file\\t\", asm_out_file);\n+  output_quoted_string (asm_out_file, main_input_filename);\n+  fputc ('\\n', asm_out_file);\n+  toc_section ();\n+  if (write_symbols != NO_DEBUG)\n+    private_data_section ();\n+  text_section ();\n+  if (profile_flag)\n+    fprintf (asm_out_file, \"\\t.extern %s\\n\", RS6000_MCOUNT);\n+  rs6000_file_start ();\n+}\n+\n /* Output at end of assembler file.\n    On the RS/6000, referencing data should automatically pull in text.  */\n "}, {"sha": "991e88895470211896cdd863a90ae96b67192f3a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -2429,6 +2429,8 @@ extern int toc_initialized;\n     }\t\t\t\t\t\t\t\t\t\\\n    while (0)\n \n+#define TARGET_ASM_FILE_START rs6000_file_start\n+\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "822a4380f2e64fc814c1578e4866dff9b4999565", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -710,16 +710,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    || (CHAR) == 'L' || (CHAR) == 'A' || (CHAR) == 'V'\t\t\t\\\n    || (CHAR) == 'B' || (CHAR) == 'b' || (CHAR) == 'G')\n \n-/* Output .file.  */\n-/* Override elfos.h definition.  */\n-#undef\tASM_FILE_START\n-#define\tASM_FILE_START(FILE)\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  output_file_directive ((FILE), main_input_filename);\t\t\t\\\n-  rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\t\\\n-} while (0)\n-\n-\n extern int fixuplabelno;\n \n /* Handle constructors specially for -mrelocatable.  */"}, {"sha": "26d79ec17a16fab87e189e80130f5b5e5f3c66dd", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -108,9 +108,10 @@ toc_section ()\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (TARGET_MINIMAL_TOC)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      /* toc_section is always called at least once from ASM_FILE_START, \\\n-\t so this is guaranteed to always be defined once and only once   \\\n-\t in each file.  */\t\t\t\t\t\t \\\n+      /* toc_section is always called at least once\t\\\n+         from rs6000_xcoff_file_start, so this is\t\\\n+\t guaranteed to always be defined once and\t\\\n+\t only once in each file.  */\t\t\t\\\n       if (! toc_initialized)\t\t\t\t\\\n \t{\t\t\t\t\t\t\\\n \t  fputs (\"\\t.toc\\nLCTOC..1:\\n\", asm_out_file);\t\\\n@@ -200,40 +201,11 @@ toc_section ()\t\t\t\t\t\t\\\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n \n-/* Output at beginning of assembler file.\n-\n-   Initialize the section names for the RS/6000 at this point.\n-\n-   Specify filename, including full path, to assembler.\n-\n-   We want to go into the TOC section so at least one .toc will be emitted.\n-   Also, in order to output proper .bs/.es pairs, we need at least one static\n-   [RW] section emitted.\n-\n-   Finally, declare mcount when profiling to make the assembler happy.  */\n-\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  rs6000_gen_section_name (&xcoff_bss_section_name,\t\t\\\n-\t\t\t   main_input_filename, \".bss_\");\t\\\n-  rs6000_gen_section_name (&xcoff_private_data_section_name,\t\\\n-\t\t\t   main_input_filename, \".rw_\");\t\\\n-  rs6000_gen_section_name (&xcoff_read_only_section_name,\t\\\n-\t\t\t   main_input_filename, \".ro_\");\t\\\n-\t\t\t\t\t\t\t\t\\\n-  fputs (\"\\t.file\\t\", FILE);                                    \\\n-  output_quoted_string (FILE, main_input_filename);             \\\n-  fputc ('\\n', FILE);                                           \\\n-  toc_section ();\t\t\t\t\t\t\\\n-  if (write_symbols != NO_DEBUG)\t\t\t\t\\\n-    private_data_section ();\t\t\t\t\t\\\n-  text_section ();\t\t\t\t\t\t\\\n-  if (profile_flag)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.extern %s\\n\", RS6000_MCOUNT);\t\t\\\n-  rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\\\n-}\n-\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START rs6000_xcoff_file_start\n #define TARGET_ASM_FILE_END rs6000_xcoff_file_end\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE false\n \n /* This macro produces the initial definition of a function name.\n    On the RS/6000, we need to place an extra '.' in the function name and"}, {"sha": "57930829b51857b2c7c276adf24e5d4d142b65e0", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -19,6 +19,10 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* Let sh.c know this is ELF.  */\n+#undef TARGET_ELF\n+#define TARGET_ELF 1\n+\n /* Generate DWARF2 debugging information and make it the default */\n #define DWARF2_DEBUGGING_INFO 1\n \n@@ -43,21 +47,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) do {\t\t\t\t\\\n-  output_file_directive ((FILE), main_input_filename);\t\t\\\n-/* We also need to show the text section with the proper\t\\\n-   attributes as in TEXT_SECTION_ASM_OP, before dwarf2out\t\\\n-   emits it without attributes in TEXT_SECTION, else GAS\t\\\n-   will complain.  We can teach GAS specifically about the\t\\\n-   default attributes for our choice of text section, but\t\\\n-   then we would have to change GAS again if/when we change\t\\\n-   the text section name.  */\t\t\t\t\t\\\n-   fprintf ((FILE), \"%s\\n\", TEXT_SECTION_ASM_OP);\t\t\\\n-  if (TARGET_LITTLE_ENDIAN)\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t.little\\n\");\t\t\t\t\\\n-} while (0)\n-\n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_SH5 ? \"long unsigned int\" : \"unsigned int\")\n "}, {"sha": "10ef2e4a591874652b8943152ee17cf0a3b811bc", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -111,7 +111,6 @@ extern tree sh_build_va_list PARAMS ((void));\n extern const char *output_jump_label_table PARAMS ((void));\n extern int sh_handle_pragma PARAMS ((int (*)(void), void (*)(int), const char *));\n extern struct rtx_def *get_fpscr_rtx PARAMS ((void));\n-extern void output_file_start PARAMS ((FILE *));\n extern int sh_media_register_for_return PARAMS ((void));\n extern void sh_expand_prologue PARAMS ((void));\n extern void sh_expand_epilogue PARAMS ((void));"}, {"sha": "1fca14fbc60eba8f6f57c48dfe7ddb1bb6ee9ef6", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -220,6 +220,7 @@ static void sh_media_init_builtins PARAMS ((void));\n static rtx sh_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static void sh_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\tHOST_WIDE_INT, tree));\n+static void sh_file_start PARAMS ((void));\n static int flow_dependent_p PARAMS ((rtx, rtx));\n static void flow_dependent_p_1 PARAMS ((rtx, rtx, void *));\n static int shiftcosts PARAMS ((rtx));\n@@ -259,6 +260,11 @@ static int shmedia_target_regs_stack_adjust (HARD_REG_SET *);\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START sh_file_start\n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES sh_insert_attributes\n \n@@ -1302,26 +1308,38 @@ output_ieee_ccmpeq (insn, operands)\n   return output_branchy_insn (NE, \"bt\\t%l9\\\\;fcmp/eq\\t%1,%0\", insn, operands);\n }\n \f\n-/* Output to FILE the start of the assembler file.  */\n-\n-void\n-output_file_start (file)\n-     FILE *file;\n-{\n-  output_file_directive (file, main_input_filename);\n+/* Output the start of the assembler file.  */\n \n-  /* Switch to the data section so that the coffsem symbol\n-     isn't in the text section.  */\n-  data_section ();\n+static void\n+sh_file_start ()\n+{\n+  default_file_start ();\n+\n+  if (TARGET_ELF)\n+    /* We need to show the text section with the proper\n+       attributes as in TEXT_SECTION_ASM_OP, before dwarf2out\n+       emits it without attributes in TEXT_SECTION, else GAS\n+       will complain.  We can teach GAS specifically about the\n+       default attributes for our choice of text section, but\n+       then we would have to change GAS again if/when we change\n+       the text section name.  */\n+    fprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\n+  else\n+    /* Switch to the data section so that the coffsem symbol\n+       isn't in the text section.  */\n+    data_section ();\n \n   if (TARGET_LITTLE_ENDIAN)\n-    fprintf (file, \"\\t.little\\n\");\n+    fputs (\"\\t.little\\n\", asm_out_file);\n \n-  if (TARGET_SHCOMPACT)\n-    fprintf (file, \"\\t.mode\\tSHcompact\\n\");\n-  else if (TARGET_SHMEDIA)\n-    fprintf (file, \"\\t.mode\\tSHmedia\\n\\t.abi\\t%i\\n\",\n-\t     TARGET_SHMEDIA64 ? 64 : 32);\n+  if (!TARGET_ELF)\n+    {\n+      if (TARGET_SHCOMPACT)\n+\tfputs (\"\\t.mode\\tSHcompact\\n\", asm_out_file);\n+      else if (TARGET_SHMEDIA)\n+\tfprintf (asm_out_file, \"\\t.mode\\tSHmedia\\n\\t.abi\\t%i\\n\",\n+\t\t TARGET_SHMEDIA64 ? 64 : 32);\n+    }\n }\n \f\n /* Check if PAT includes UNSPEC_CALLER unspec pattern.  */"}, {"sha": "c74bb3ada28930da87ce5c1b4c98e759737e6647", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -152,6 +152,9 @@ extern int target_flags;\n #define IEEE_BIT (1<<30)\n #define SAVE_ALL_TR_BIT (1<<2)\n \n+/* Nonzero if this is an ELF target - compile time only */\n+#define TARGET_ELF 0\n+\n /* Nonzero if we should dump out instruction size info.  */\n #define TARGET_DUMPISIZE  (target_flags & ISIZE_BIT)\n \n@@ -2972,10 +2975,6 @@ while (0)\n    the end of the line.  */\n #define ASM_COMMENT_START \"!\"\n \n-/* The text to go at the start of the assembler file.  */\n-#define ASM_FILE_START(STREAM) \\\n-  output_file_start (STREAM)\n-\n #define ASM_APP_ON  \t\t\"\"\n #define ASM_APP_OFF  \t\t\"\"\n #define FILE_ASM_OP \t\t\"\\t.file\\n\""}, {"sha": "872f224c8c50ddc0d8e66b97b13aceda602bc382", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -2668,10 +2668,6 @@ do {                                                                    \\\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-\n-#define ASM_FILE_START(file)\n-\n /* A C string constant describing how to begin a comment in the target\n    assembler language.  The compiler assumes that the comment will end at\n    the end of the line.  */"}, {"sha": "21595eac2732c3ac2d9a0303923a8168d1ff7b3d", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -29,13 +29,8 @@ Boston, MA 02111-1307, USA. */\n \n /* Assembler, linker, library, and startfile spec's.  */\n \n-/* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-  do { output_file_directive ((FILE), main_input_filename);\t\\\n-     } while (0)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */"}, {"sha": "f96abbd5c3e3168f82462710c897326a0aac34ac", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -35,7 +35,6 @@ extern void   zdata_section                 PARAMS ((void));\n extern void   rozdata_section               PARAMS ((void));\n extern void   zbss_section                  PARAMS ((void));\n extern int    v850_handle_pragma            PARAMS ((int (*)(void), void (*)(int), char *));\n-extern void   asm_file_start                PARAMS ((FILE *));\n extern void   override_options              PARAMS ((void));\n extern int    compute_register_save_size    PARAMS ((long *));\n extern int    compute_frame_size            PARAMS ((int, long *));"}, {"sha": "4db79a99d3b1a29c85851d8dfad5ddf6e06ddd5e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -105,6 +105,9 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO v850_encode_section_info\n \n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS v850_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -158,15 +161,6 @@ override_options ()\n     }\n }\n \n-\f\n-/* Output assembly code for the start of the file.  */\n-\n-void\n-asm_file_start (file)\n-     FILE *file;\n-{\n-  output_file_directive (file, main_input_filename);\n-}\n \f\n \n /* Return an RTX to represent where a value with mode MODE will be returned"}, {"sha": "52e631334e55a3c2a4f3f2b9677c86f52fa9f49b", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -1144,10 +1144,6 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n #define ZCOMMON_ASM_OP \t       \"\\t.zcomm\\t\"\n #define TCOMMON_ASM_OP \t       \"\\t.tcomm\\t\"\n \n-/* Output at beginning/end of assembler file.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) asm_file_start(FILE)\n-\n #define ASM_COMMENT_START \"#\"\n \n /* Output to assembler file text saying following lines"}, {"sha": "fea970e0eda621618b3355f61b53ad4b0eeb7c48", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n \n static int follows_p PARAMS ((rtx, rtx));\n static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void vax_file_start PARAMS ((void));\n static void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, tree));\n static int vax_address_cost_1 PARAMS ((rtx));\n@@ -57,6 +58,11 @@ static bool vax_rtx_costs PARAMS ((rtx, int, int, int *));\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE vax_output_function_prologue\n \n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START vax_file_start\n+#undef TARGET_ASM_FILE_START_APP_OFF\n+#define TARGET_ASM_FILE_START_APP_OFF true\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK vax_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n@@ -126,6 +132,18 @@ vax_output_function_prologue (file, size)\n     asm_fprintf (file, \"\\tsubl2 $%wd,%Rsp\\n\", size);\n }\n \n+/* When debugging with stabs, we want to output an extra dummy label\n+   so that gas can distinguish between D_float and G_float prior to\n+   processing the .stabs directive identifying type double.  */\n+static void\n+vax_file_start ()\n+{\n+  default_file_start ();\n+\n+  if (write_symbols == DBX_DEBUG)\n+    fprintf (asm_out_file, \"___vax_%c_doubles:\\n\", ASM_DOUBLE_CHAR);\n+}\n+\n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */\n \n void"}, {"sha": "bb1450dbb01c9768a965b76eb8c3555e5a1136e8", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -938,19 +938,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output at beginning of assembler file.  */\n-/* When debugging, we want to output an extra dummy label so that gas\n-   can distinguish between D_float and G_float prior to processing the\n-   .stabs directive identifying type double.  */\n-\n-#define ASM_FILE_START(FILE) \\\n-  do {\t\t\t\t\t\t\t\t\\\n-    fputs (ASM_APP_OFF, FILE);\t\t\t\t\t\\\n-    if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n-      fprintf (FILE, \"___vax_%c_doubles:\\n\", ASM_DOUBLE_CHAR);\t\\\n-  } while (0)\n-\n-\n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n "}, {"sha": "c85cf4a8a2f6304761f5d85bbfa33b3fb0a75e59", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -40,9 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LIB_SPEC\n \n /* The .file command should always begin the output.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-output_file_directive ((FILE), main_input_filename)\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\"}, {"sha": "670b5a237c23cd0a8d8a08015335752f53dc8f1a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -6190,19 +6190,38 @@ instructions do.\n @cindex output of assembler code\n \n @c prevent bad page break with this line\n-This describes the overall framework of an assembler file.\n+This describes the overall framework of an assembly file.\n+\n+@deftypefn {Target Hook} void TARGET_ASM_FILE_START ()\n+@findex default_file_start\n+Output to @code{asm_out_file} any text which the assembler expects to\n+find at the beginning of a file.  The default behavior is controlled\n+by two flags, documented below.  Unless your target's assembler is\n+quite unusual, if you override the default, you should call\n+@code{default_file_start} at some point in your target hook.  This\n+lets other target files rely on these variables.\n+@end deftypefn\n \n-@table @code\n-@findex ASM_FILE_START\n-@item ASM_FILE_START (@var{stream})\n-A C expression which outputs to the stdio stream @var{stream}\n-some appropriate text to go at the start of an assembler file.\n-\n-Normally this macro is defined to output a line containing\n-@samp{#NO_APP}, which is a comment that has no effect on most\n-assemblers but tells the GNU assembler that it can save time by not\n-checking for certain assembler constructs.\n-@end table\n+@deftypevr {Target Hook} bool TARGET_ASM_FILE_START_APP_OFF\n+If this flag is true, the text of the macro @code{ASM_APP_OFF} will be\n+printed as the very first line in the assembly file, unless\n+@option{-fverbose-asm} is in effect.  (If that macro has been defined\n+to the empty string, this variable has no effect.)  With the normal\n+definition of @code{ASM_APP_OFF}, the effect is to notify the GNU\n+assembler that it need not bother stripping comments or extra\n+whitespace from its input.  This allows it to work a bit faster.\n+\n+The default is false.  You should not set it to true unless you have\n+verified that your port does not generate any extra whitespace or\n+comments that will cause GAS to issue errors in NO_APP mode.\n+@end deftypevr\n+\n+@deftypevr {Target Hook} bool TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+If this flag is true, @code{output_file_directive} will be called\n+for the primary source file, immediately after printing\n+@code{ASM_APP_OFF} (if that is enabled).  Most ELF assemblers expect\n+this to be done.  The default is false.\n+@end deftypevr\n \n @deftypefn {Target Hook} void TARGET_ASM_FILE_END ()\n Output to @code{asm_out_file} any text which the assembler expects"}, {"sha": "aaaeaa2fe080e2d936730392c55350a6092aaad2", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -519,6 +519,7 @@ extern bool default_binds_local_p PARAMS ((tree));\n extern bool default_binds_local_p_1 PARAMS ((tree, int));\n extern void default_globalize_label PARAMS ((FILE *, const char *));\n extern void default_internal_label PARAMS ((FILE *, const char *, unsigned long));\n+extern void default_file_start PARAMS ((void));\n extern void file_end_indicate_exec_stack PARAMS ((void));\n extern bool default_valid_pointer_mode PARAMS ((enum machine_mode));\n "}, {"sha": "cafaea68b43db736716d7760d46ff1d6196c3bf3", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -598,7 +598,7 @@ typedef char _Bool;\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n \tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\t\\\n \tASM_OUTPUT_MI_THUNK CONST_COSTS RTX_COSTS DEFAULT_RTX_COSTS\t\\\n-\tADDRESS_COST MACHINE_DEPENDENT_REORG ASM_FILE_END\n+\tADDRESS_COST MACHINE_DEPENDENT_REORG ASM_FILE_START ASM_FILE_END\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "d6950e4b3480bbb7df46fadb0ec1faf1d3d7f5e6", "filename": "gcc/target-def.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -150,10 +150,22 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_EH_FRAME_SECTION default_eh_frame_section\n #endif\n \n+#ifndef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START default_file_start\n+#endif\n+\n #ifndef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END hook_void_void\n #endif\n \n+#ifndef TARGET_ASM_FILE_START_APP_OFF\n+#define TARGET_ASM_FILE_START_APP_OFF false\n+#endif\n+\n+#ifndef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE false\n+#endif\n+\n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n@@ -189,6 +201,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_DESTRUCTOR,                  \\\n                         TARGET_ASM_OUTPUT_MI_THUNK,             \\\n                         TARGET_ASM_CAN_OUTPUT_MI_THUNK,         \\\n+                        TARGET_ASM_FILE_START,                  \\\n                         TARGET_ASM_FILE_END}\n \n /* Scheduler hooks.  All of these default to null pointers, which\n@@ -329,7 +342,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\\n   TARGET_HAVE_SRODATA_SECTION,\t\t\t\\\n-  TARGET_TERMINATE_DW2_EH_FRAME_INFO\t\t\\\n+  TARGET_TERMINATE_DW2_EH_FRAME_INFO,\t\t\\\n+  TARGET_ASM_FILE_START_APP_OFF,\t\t\\\n+  TARGET_ASM_FILE_START_FILE_DIRECTIVE,\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "4ba369d7d3e0487671337c8a65beaf5e73f2eea7", "filename": "gcc/target.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -143,7 +143,12 @@ struct gcc_target\n \t\t\t\t          HOST_WIDE_INT vcall_offset,\n \t\t\t\t          tree function_decl));\n \n-    /* Output any boilerplate text needed at the end of a translation unit.  */\n+    /* Output any boilerplate text needed at the beginning of a\n+       translation unit.  */\n+    void (*file_start) PARAMS ((void));\n+\n+    /* Output any boilerplate text needed at the end of a\n+       translation unit.  */\n     void (*file_end) PARAMS ((void));\n   } asm_out;\n \n@@ -368,6 +373,14 @@ struct gcc_target\n \n   /* True if EH frame info sections should be zero-terminated.  */\n   bool terminate_dw2_eh_frame_info;\n+\n+  /* True if #NO_APP should be emitted at the beginning of\n+     assembly output.  */\n+  bool file_start_app_off;\n+\n+  /* True if output_file_directive should be called for main_input_filename\n+     at the beginning of assembly output.  */\n+  bool file_start_file_directive;\n };\n \n extern struct gcc_target targetm;"}, {"sha": "602ce6ff09874d247cc4f0381433ff77ade5dda9", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -4819,9 +4819,7 @@ init_asm_output (const char *name)\n \n   if (!flag_syntax_only)\n     {\n-#ifdef ASM_FILE_START\n-      ASM_FILE_START (asm_out_file);\n-#endif\n+      targetm.asm_out.file_start ();\n \n #ifdef ASM_COMMENT_START\n       if (flag_verbose_asm)"}, {"sha": "a76d23ae1cb5f69dd6b6bbf22b7ae4c2a3b02921", "filename": "gcc/varasm.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -5363,6 +5363,18 @@ default_internal_label (stream, prefix, labelno)\n   ASM_OUTPUT_LABEL (stream, buf);\n }\n \n+/* This is the default behavior at the beginning of a file.  It's\n+   controlled by two other target-hook toggles.  */\n+void\n+default_file_start ()\n+{\n+  if (targetm.file_start_app_off && !flag_verbose_asm)\n+    fputs (ASM_APP_OFF, asm_out_file);\n+\n+  if (targetm.file_start_file_directive)\n+    output_file_directive (asm_out_file, main_input_filename);\n+}\n+\n /* This is a generic routine suitable for use as TARGET_ASM_FILE_END\n    which emits a special section directive used to indicate whether or\n    not this object file needs an executable stack.  This is primarily"}, {"sha": "8e41770d43ea0c69a52bcff7899d94d58c6eaabd", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc7c5b629d70dab15eef0224ab6d9dae0b51b97/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=1bc7c5b629d70dab15eef0224ab6d9dae0b51b97", "patch": "@@ -138,8 +138,8 @@ extern const char *xcoff_lastfile;\n \n /* Write out main source file name using \".file\" rather than \".stabs\".\n    We don't actually do this here, because the assembler gets confused if there\n-   is more than one .file directive.  ASM_FILE_START in config/rs6000/rs6000.h\n-   is already emitting a .file directory, so we don't output one here also.\n+   is more than one .file directive.  rs6000_xcoff_file_start is already\n+   emitting a .file directory, so we don't output one here also.\n    Initialize xcoff_lastfile.  */\n #define DBX_OUTPUT_MAIN_SOURCE_FILENAME(FILE,FILENAME) \\\n   xcoff_lastfile = (FILENAME)"}]}