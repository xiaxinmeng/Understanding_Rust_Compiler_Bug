{"sha": "8a45b051bf874c645b2b0316ea3b542be4b594db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0NWIwNTFiZjg3NGM2NDViMmIwMzE2ZWEzYjU0MmJlNGI1OTRkYg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-08-01T23:39:35Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-08-01T23:39:35Z"}, "message": "PR tree-optimization/86650 - -Warray-bounds missing inlining context\n\ngcc/c/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* c-objc-common.c (c_tree_printer): Move usage of EXPR_LOCATION (t)\n\tand TREE_BLOCK (t) from within percent_K_format\tto this callsite.\n\ngcc/c-family/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* c-family/c-format.c (gcc_tdiag_char_table): Update comment for \"%G\".\n\t(gcc_cdiag_char_table, gcc_cxxdiag_char_table): Same.\n \t(init_dynamic_diag_info): Update from \"gcall *\" to \"gimple *\".\n \t* c-format.h (T89_G): Update to be \"gimple *\" rather than\n \t\"gcall *\".\n\t(local_gcall_ptr_node): Rename...\n \t(local_gimple_ptr_node): ...to this.\n\ngcc/cp/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* error.c (cp_printer): Move usage of EXPR_LOCATION (t) and\n\tTREE_BLOCK (t) from within percent_K_format to this callsite.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* gimple-pretty-print.c (percent_G_format): Accept a \"gimple *\"\n\trather than a \"gcall *\".  Directly pass the data of interest\n \tto percent_K_format, rather than building a temporary CALL_EXPR\n \tto hold it.\n\t* gimple-fold.c (gimple_fold_builtin_strncpy): Adjust.\n\t(gimple_fold_builtin_strncat): Adjust.\n\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap): Replace\n\tgcall* argument with gimple*.\n\t* gimple-ssa-warn-restrict.c (check_call): Same.\n\t(wrestrict_dom_walker::before_dom_children): Same.\n\t(builtin_access::builtin_access): Same.\n\t(check_bounds_or_overlap): Same\n\t(maybe_diag_overlap): Same.\n\t(maybe_diag_offset_bounds): Same.\n\t* tree-diagnostic.c (default_tree_printer): Move usage of\n\tEXPR_LOCATION (t) and TREE_BLOCK (t) from within percent_K_format\n\tto this callsite.\n\t* tree-pretty-print.c (percent_K_format): Add argument.\n\t* tree-pretty-print.h: Add argument.\n\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Adjust.\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Adjust.\n\t(maybe_diag_stxncpy_trunc): Same.\n\t(handle_builtin_stxncpy): Same.\n\t(handle_builtin_strcat): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* gcc.dg/format/gcc_diag-10.c: Adjust.\n\nFrom-SVN: r263239", "tree": {"sha": "26db1a736bc6394312b1820c7cdecd89d3a75fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26db1a736bc6394312b1820c7cdecd89d3a75fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a45b051bf874c645b2b0316ea3b542be4b594db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a45b051bf874c645b2b0316ea3b542be4b594db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a45b051bf874c645b2b0316ea3b542be4b594db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a45b051bf874c645b2b0316ea3b542be4b594db/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca9a1314ec5f2b58921e24abdcebae1482c0e2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9a1314ec5f2b58921e24abdcebae1482c0e2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9a1314ec5f2b58921e24abdcebae1482c0e2c6"}], "stats": {"total": 199, "additions": 119, "deletions": 80}, "files": [{"sha": "9b767bac0fe2af723e738b712849490d04df93b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1,3 +1,31 @@\n+2018-08-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* gimple-pretty-print.c (percent_G_format): Accept a \"gimple *\"\n+\trather than a \"gcall *\".  Directly pass the data of interest\n+ \tto percent_K_format, rather than building a temporary CALL_EXPR\n+ \tto hold it.\n+\t* gimple-fold.c (gimple_fold_builtin_strncpy): Adjust.\n+\t(gimple_fold_builtin_strncat): Adjust.\n+\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap): Replace\n+\tgcall* argument with gimple*.\n+\t* gimple-ssa-warn-restrict.c (check_call): Same.\n+\t(wrestrict_dom_walker::before_dom_children): Same.\n+\t(builtin_access::builtin_access): Same.\n+\t(check_bounds_or_overlap): Same\n+\t(maybe_diag_overlap): Same.\n+\t(maybe_diag_offset_bounds): Same.\n+\t* tree-diagnostic.c (default_tree_printer): Move usage of\n+\tEXPR_LOCATION (t) and TREE_BLOCK (t) from within percent_K_format\n+\tto this callsite.\n+\t* tree-pretty-print.c (percent_K_format): Add argument.\n+\t* tree-pretty-print.h: Add argument.\n+\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Adjust.\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Adjust.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(handle_builtin_stxncpy): Same.\n+\t(handle_builtin_strcat): Same.\n+\n 2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* match.pd: Optimise pointer range checks."}, {"sha": "d5e5fff3b47580449054163a04ccc074e55ec081", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1,3 +1,14 @@\n+2018-08-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* c-family/c-format.c (gcc_tdiag_char_table): Update comment for \"%G\".\n+\t(gcc_cdiag_char_table, gcc_cxxdiag_char_table): Same.\n+ \t(init_dynamic_diag_info): Update from \"gcall *\" to \"gimple *\".\n+ \t* c-format.h (T89_G): Update to be \"gimple *\" rather than\n+ \t\"gcall *\".\n+\t(local_gcall_ptr_node): Rename...\n+ \t(local_gimple_ptr_node): ...to this.\n+\n 2018-07-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-format.c (PP_FORMAT_CHAR_TABLE): New macro, based on existing"}, {"sha": "dc0e7567c9416877d9d6025b6c41fe7aa58faf26", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -56,7 +56,7 @@ struct function_format_info\n \n /* Initialized in init_dynamic_diag_info.  */\n static GTY(()) tree local_tree_type_node;\n-static GTY(()) tree local_gcall_ptr_node;\n+static GTY(()) tree local_gimple_ptr_node;\n static GTY(()) tree locus;\n \n static bool decode_format_attr (tree, function_format_info *, int);\n@@ -719,7 +719,7 @@ static const format_char_info gcc_tdiag_char_table[] =\n   { \"E\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n   { \"K\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n-  /* G requires a \"gcall*\" argument at runtime.  */\n+  /* G requires a \"gimple*\" argument at runtime.  */\n   { \"G\", 1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n@@ -737,7 +737,7 @@ static const format_char_info gcc_cdiag_char_table[] =\n   { \"E\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n   { \"K\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n-  /* G requires a \"gcall*\" argument at runtime.  */\n+  /* G requires a \"gimple*\" argument at runtime.  */\n   { \"G\",   1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n   { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n@@ -757,7 +757,7 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   { \"E\", 1,STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n   { \"K\", 1, STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n \n-  /* G requires a \"gcall*\" argument at runtime.  */\n+  /* G requires a \"gimple*\" argument at runtime.  */\n   { \"G\", 1, STD_C89,{ T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n \n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n@@ -3838,27 +3838,27 @@ init_dynamic_diag_info (void)\n \tlocal_tree_type_node = void_type_node;\n     }\n \n-  /* Similar to the above but for gcall*.  */\n-  if (!local_gcall_ptr_node\n-      || local_gcall_ptr_node == void_type_node)\n+  /* Similar to the above but for gimple*.  */\n+  if (!local_gimple_ptr_node\n+      || local_gimple_ptr_node == void_type_node)\n     {\n-      if ((local_gcall_ptr_node = maybe_get_identifier (\"gcall\")))\n+      if ((local_gimple_ptr_node = maybe_get_identifier (\"gimple\")))\n \t{\n-\t  local_gcall_ptr_node\n-\t    = identifier_global_value (local_gcall_ptr_node);\n-\t  if (local_gcall_ptr_node)\n+\t  local_gimple_ptr_node\n+\t    = identifier_global_value (local_gimple_ptr_node);\n+\t  if (local_gimple_ptr_node)\n \t    {\n-\t      if (TREE_CODE (local_gcall_ptr_node) != TYPE_DECL)\n+\t      if (TREE_CODE (local_gimple_ptr_node) != TYPE_DECL)\n \t\t{\n-\t\t  error (\"%<gcall%> is not defined as a type\");\n-\t\t  local_gcall_ptr_node = 0;\n+\t\t  error (\"%<gimple%> is not defined as a type\");\n+\t\t  local_gimple_ptr_node = 0;\n \t\t}\n \t      else\n-\t\tlocal_gcall_ptr_node = TREE_TYPE (local_gcall_ptr_node);\n+\t\tlocal_gimple_ptr_node = TREE_TYPE (local_gimple_ptr_node);\n \t    }\n \t}\n       else\n-\tlocal_gcall_ptr_node = void_type_node;\n+\tlocal_gimple_ptr_node = void_type_node;\n     }\n \n   static tree hwi;"}, {"sha": "d984d10e2fa013511d7221b0937e561f746675b7", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -298,7 +298,7 @@ struct format_kind_info\n #define T_UC\t&unsigned_char_type_node\n #define T99_UC\t{ STD_C99, NULL, T_UC }\n #define T_V\t&void_type_node\n-#define T89_G   { STD_C89, NULL, &local_gcall_ptr_node }\n+#define T89_G   { STD_C89, NULL, &local_gimple_ptr_node }\n #define T89_T   { STD_C89, NULL, &local_tree_type_node }\n #define T89_V\t{ STD_C89, NULL, T_V }\n #define T_W\t&wchar_type_node"}, {"sha": "6e682cdb140e27631303380f9be66257b27fcb95", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1,3 +1,9 @@\n+2018-08-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* c-objc-common.c (c_tree_printer): Move usage of EXPR_LOCATION (t)\n+\tand TREE_BLOCK (t) from within percent_K_format\tto this callsite.\n+\n 2018-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/85704"}, {"sha": "ddbd60ce624804a547e962df030b0cf82e4b3d5e", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -67,7 +67,7 @@ c_objc_common_init (void)\n    %D: a general decl,\n    %E: an identifier or expression,\n    %F: a function declaration,\n-   %G: a Gimple call statement,\n+   %G: a Gimple statement,\n    %K: a CALL_EXPR,\n    %T: a type.\n    %V: a list of type qualifiers from a tree.\n@@ -99,7 +99,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   if (*spec == 'K')\n     {\n       t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, t);\n+      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n       return true;\n     }\n "}, {"sha": "98b5ebfe881c9cc03f5e915c2aeed6b0aea7083a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1,3 +1,9 @@\n+2018-08-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* error.c (cp_printer): Move usage of EXPR_LOCATION (t) and\n+\tTREE_BLOCK (t) from within percent_K_format to this callsite.\n+\n 2018-08-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/86661"}, {"sha": "a12fbc5bd967b70bc0954a9a7ff403c4c9dc15c3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -4091,7 +4091,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n       return true;\n     case 'K':\n       t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, t);\n+      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n       return true;\n     case 'L': result = language_to_string (next_lang);\t\tbreak;\n     case 'O': result = op_to_string (false, next_tcode);\tbreak;"}, {"sha": "506a296732c52e26d045b4ba2743231a331dccca", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1657,7 +1657,6 @@ gimple_fold_builtin_strncpy (gimple_stmt_iterator *gsi,\n       if (!nonstring)\n \t{\n \t  tree fndecl = gimple_call_fndecl (stmt);\n-\t  gcall *call = as_a <gcall *> (stmt);\n \n \t  /* Warn about the lack of nul termination: the result is not\n \t     a (nul-terminated) string.  */\n@@ -1666,11 +1665,11 @@ gimple_fold_builtin_strncpy (gimple_stmt_iterator *gsi,\n \t    warning_at (loc, OPT_Wstringop_truncation,\n \t\t\t\"%G%qD destination unchanged after copying no bytes \"\n \t\t\t\"from a string of length %E\",\n-\t\t\tcall, fndecl, slen);\n+\t\t\tstmt, fndecl, slen);\n \t  else\n \t    warning_at (loc, OPT_Wstringop_truncation,\n \t\t\t\"%G%qD destination unchanged after copying no bytes\",\n-\t\t\tcall, fndecl);\n+\t\t\tstmt, fndecl);\n \t}\n \n       replace_call_with_value (gsi, dest);\n@@ -1991,7 +1990,7 @@ gimple_fold_builtin_strcat_chk (gimple_stmt_iterator *gsi)\n static bool\n gimple_fold_builtin_strncat (gimple_stmt_iterator *gsi)\n {\n-  gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n+  gimple *stmt = gsi_stmt (*gsi);\n   tree dst = gimple_call_arg (stmt, 0);\n   tree src = gimple_call_arg (stmt, 1);\n   tree len = gimple_call_arg (stmt, 2);"}, {"sha": "d3c5ec6f79beb7e20bde80217e85284bcc33eda9", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -2887,20 +2887,13 @@ gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n \n \n /* Handle the %G format for TEXT.  Same as %K in handle_K_format in\n-   tree-pretty-print.c but with a Gimple call statement as an argument.  */\n+   tree-pretty-print.c but with a Gimple statement as an argument.  */\n \n void\n percent_G_format (text_info *text)\n {\n-  gcall *stmt = va_arg (*text->args_ptr, gcall*);\n+  gimple *stmt = va_arg (*text->args_ptr, gimple*);\n \n-  /* Build a call expression from the Gimple call statement and\n-     pass it to the K formatter that knows how to format it.  */\n-  tree exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n-  CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n-  TREE_TYPE (exp) = gimple_call_return_type (stmt);\n-  CALL_EXPR_STATIC_CHAIN (exp) = gimple_call_chain (stmt);\n-  SET_EXPR_LOCATION (exp, gimple_location (stmt));\n-\n-  percent_K_format (text, exp);\n+  tree block = gimple_block (stmt);\n+  percent_K_format (text, gimple_location (stmt), block);\n }"}, {"sha": "01503d6091247a888ce692588051496f83a422f0", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -88,7 +88,7 @@ class wrestrict_dom_walker : public dom_walker\n   bool handle_gimple_call (gimple_stmt_iterator *);\n \n  private:\n-  void check_call (gcall *);\n+  void check_call (gimple *);\n };\n \n edge\n@@ -102,8 +102,7 @@ wrestrict_dom_walker::before_dom_children (basic_block bb)\n       if (!is_gimple_call (stmt))\n \tcontinue;\n \n-      if (gcall *call = as_a <gcall *> (stmt))\n-\tcheck_call (call);\n+      check_call (stmt);\n     }\n \n   return NULL;\n@@ -192,7 +191,7 @@ class builtin_access\n     return detect_overlap != &builtin_access::generic_overlap;\n   }\n \n-  builtin_access (gcall *, builtin_memref &, builtin_memref &);\n+  builtin_access (gimple *, builtin_memref &, builtin_memref &);\n \n   /* Entry point to determine overlap.  */\n   bool overlap ();\n@@ -563,7 +562,7 @@ builtin_memref::offset_out_of_bounds (int strict, offset_int ooboff[2]) const\n /* Create an association between the memory references DST and SRC\n    for access by a call EXPR to a memory or string built-in funtion.  */\n \n-builtin_access::builtin_access (gcall *call, builtin_memref &dst,\n+builtin_access::builtin_access (gimple *call, builtin_memref &dst,\n \t\t\t\tbuiltin_memref &src)\n : dstref (&dst), srcref (&src), sizrange (), ovloff (), ovlsiz (),\n   dstoff (), srcoff (), dstsiz (), srcsiz ()\n@@ -1324,7 +1323,7 @@ builtin_access::overlap ()\n    Return true when one has been detected, false otherwise.  */\n \n static bool\n-maybe_diag_overlap (location_t loc, gcall *call, builtin_access &acs)\n+maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n {\n   if (!acs.overlap ())\n     return false;\n@@ -1577,7 +1576,7 @@ maybe_diag_overlap (location_t loc, gcall *call, builtin_access &acs)\n    has been issued.  */\n \n static bool\n-maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n+maybe_diag_offset_bounds (location_t loc, gimple *call, tree func, int strict,\n \t\t\t  tree expr, const builtin_memref &ref)\n {\n   if (!warn_array_bounds)\n@@ -1722,7 +1721,7 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n    if/when appropriate.  */\n \n void\n-wrestrict_dom_walker::check_call (gcall *call)\n+wrestrict_dom_walker::check_call (gimple *call)\n {\n   /* Avoid checking the call if it has already been diagnosed for\n      some reason.  */\n@@ -1822,7 +1821,7 @@ wrestrict_dom_walker::check_call (gcall *call)\n    detected and diagnosed, true otherwise.  */\n \n bool\n-check_bounds_or_overlap (gcall *call, tree dst, tree src, tree dstsize,\n+check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n \t\t\t tree srcsize, bool bounds_only /* = false */)\n {\n   location_t loc = gimple_nonartificial_location (call);"}, {"sha": "c624589ef0ae7e077d975d11f6d343c5d64aa30f", "filename": "gcc/gimple-ssa-warn-restrict.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-ssa-warn-restrict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Fgimple-ssa-warn-restrict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.h?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -20,7 +20,7 @@\n \n #ifndef GIMPLE_SSA_WARN_RESTRICT_H\n \n-extern bool check_bounds_or_overlap (gcall *, tree, tree, tree, tree,\n+extern bool check_bounds_or_overlap (gimple *, tree, tree, tree, tree,\n \t\t\t\t     bool = false);\n \n #endif /* GIMPLE_SSA_WARN_RESTRICT_H */"}, {"sha": "ac797b302b5dbd8238890bd0aa8d33644693229b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1,3 +1,8 @@\n+2018-08-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* gcc.dg/format/gcc_diag-10.c: Adjust.\n+\n 2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/var_stride_2.c: Update expected form"}, {"sha": "29655090a4aa1804caae59497ce5c94851e64e10", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-10.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -15,9 +15,9 @@ typedef struct location_s\n union tree_node;\n typedef union tree_node *tree;\n \n-/* Define gcall as a dummy type.  The typedef must be provided for\n+/* Define gimple as a dummy type.  The typedef must be provided for\n    the C test to find the symbol.  */\n-typedef struct gcall gcall;\n+typedef struct gimple gimple;\n \n #define FORMAT(kind) __attribute__ ((format (__gcc_## kind ##__, 1, 2)))\n \n@@ -26,7 +26,7 @@ void cdiag (const char*, ...) FORMAT (cdiag);\n void tdiag (const char*, ...) FORMAT (tdiag);\n void cxxdiag (const char*, ...) FORMAT (cxxdiag);\n \n-void test_diag (tree t, gcall *gc)\n+void test_diag (tree t, gimple *gc)\n {\n   diag (\"%<\");   /* { dg-warning \"unterminated quoting directive\" } */\n   diag (\"%>\");   /* { dg-warning \"unmatched quoting directive \" } */\n@@ -47,7 +47,7 @@ void test_diag (tree t, gcall *gc)\n   diag (\"%<%r%R%>\", \"\");\n }\n \n-void test_cdiag (tree t, gcall *gc)\n+void test_cdiag (tree t, gimple *gc)\n {\n   cdiag (\"%<\");   /* { dg-warning \"unterminated quoting directive\" } */\n   cdiag (\"%>\");   /* { dg-warning \"unmatched quoting directive \" } */\n@@ -87,7 +87,7 @@ void test_cdiag (tree t, gcall *gc)\n   cdiag (\"%<%qT%>\", t);  /* { dg-warning \".q. flag used within a quoted sequence\" } */\n }\n \n-void test_tdiag (tree t, gcall *gc)\n+void test_tdiag (tree t, gimple *gc)\n {\n   tdiag (\"%<\");       /* { dg-warning \"unterminated quoting directive\" } */\n   tdiag (\"%>\");       /* { dg-warning \"unmatched quoting directive \" } */\n@@ -124,7 +124,7 @@ void test_tdiag (tree t, gcall *gc)\n   tdiag (\"%<%qT%>\", t);  /* { dg-warning \".q. flag used within a quoted sequence\" } */\n }\n \n-void test_cxxdiag (tree t, gcall *gc)\n+void test_cxxdiag (tree t, gimple *gc)\n {\n   cxxdiag (\"%A\", t);     /* { dg-warning \".A. conversion used unquoted\" } */\n   cxxdiag (\"%D\", t);     /* { dg-warning \".D. conversion used unquoted\" } */"}, {"sha": "6b03b31c2297fa8c15f2b0d41d40b563e5a6b3f5", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -282,7 +282,7 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \n     case 'K':\n       t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, t);\n+      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n       return true;\n \n     default:"}, {"sha": "627d8d7e2d744692941c93ba808138d4d5553950", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -3980,15 +3980,14 @@ newline_and_indent (pretty_printer *pp, int spc)\n \n /* Handle the %K format for TEXT.  Separate from default_tree_printer\n    so it can also be used in front ends.\n-   Argument is a statement from which EXPR_LOCATION and TREE_BLOCK will\n-   be recorded.  */\n+   The location LOC and BLOCK are expected to be extracted by the caller\n+   from the %K argument arg via EXPR_LOCATION(arg) and TREE_BLOCK(arg).  */\n \n void\n-percent_K_format (text_info *text, tree t)\n+percent_K_format (text_info *text, location_t loc, tree block)\n {\n-  text->set_location (0, EXPR_LOCATION (t), true);\n+  text->set_location (0, loc, true);\n   gcc_assert (pp_ti_abstract_origin (text) != NULL);\n-  tree block = TREE_BLOCK (t);\n   *pp_ti_abstract_origin (text) = NULL;\n \n   if (in_lto_p)"}, {"sha": "adfc77b29cd27888e06d7e3c40c64714479a1af7", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -45,7 +45,7 @@ extern int op_code_prio (enum tree_code);\n extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n extern void print_call_name (pretty_printer *, tree, dump_flags_t);\n-extern void percent_K_format (text_info *, tree);\n+extern void percent_K_format (text_info *, location_t, tree);\n extern void pp_tree_identifier (pretty_printer *, tree);\n extern void dump_function_header (FILE *, tree, dump_flags_t);\n extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);"}, {"sha": "63c95318aced64ee1d0466f9236af41e7f7b07ef", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -3456,7 +3456,7 @@ pass_post_ipa_warn::execute (function *fun)\n \t\t      location_t loc = gimple_location (stmt);\n \t\t      if (warning_at (loc, OPT_Wnonnull,\n \t\t\t\t      \"%Gargument %u null where non-null \"\n-\t\t\t\t      \"expected\", as_a <gcall *>(stmt), i + 1))\n+\t\t\t\t      \"expected\", stmt, i + 1))\n \t\t\t{\n \t\t\t  tree fndecl = gimple_call_fndecl (stmt);\n \t\t\t  if (fndecl && DECL_IS_BUILTIN (fndecl))"}, {"sha": "1d813b4686791f6b9c4a0385495a868cbed78413", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a45b051bf874c645b2b0316ea3b542be4b594db/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=8a45b051bf874c645b2b0316ea3b542be4b594db", "patch": "@@ -1627,8 +1627,7 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \t  tree type = TREE_TYPE (oldlen);\n \t  oldlen = fold_build2 (PLUS_EXPR, type, oldlen,\n \t\t\t\tbuild_int_cst (type, 1));\n-\t  check_bounds_or_overlap (as_a <gcall *>(stmt), olddsi->ptr, src,\n-\t\t\t\t   oldlen, NULL_TREE);\n+\t  check_bounds_or_overlap (stmt, olddsi->ptr, src, oldlen, NULL_TREE);\n \t}\n \n       return;\n@@ -1715,8 +1714,7 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n   if (const strinfo *chksi = olddsi ? olddsi : dsi)\n     if (si\n-\t&& !check_bounds_or_overlap (as_a <gcall *>(stmt), chksi->ptr, si->ptr,\n-\t\t\t\t     NULL_TREE, len))\n+\t&& !check_bounds_or_overlap (stmt, chksi->ptr, si->ptr, NULL_TREE, len))\n       {\n \tgimple_set_no_warning (stmt, true);\n \tset_no_warning = true;\n@@ -2031,8 +2029,6 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t  lenrange[0] = wi::shwi (0, prec);\n \t}\n \n-      gcall *call = as_a <gcall *> (stmt);\n-\n       /* Set to true for strncat whose bound is derived from the length\n \t of the destination (the expected usage pattern).  */\n       bool cat_dstlen_bounded = false;\n@@ -2048,7 +2044,7 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t\t\t  \"%G%qD output truncated before terminating nul \"\n \t\t\t  \"copying %E bytes from a string of the same \"\n \t\t\t  \"length\",\n-\t\t\t  call, func, cnt);\n+\t\t\t  stmt, func, cnt);\n       else if (!cat_dstlen_bounded)\n \t{\n \t  if (wi::geu_p (lenrange[0], cntrange[1]))\n@@ -2062,12 +2058,12 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t\t\t\t  \"from a string of length %wu\",\n \t\t\t\t  \"%G%qD output truncated copying %E bytes \"\n \t\t\t\t  \"from a string of length %wu\",\n-\t\t\t\t  call, func, cnt, lenrange[0].to_uhwi ());\n+\t\t\t\t  stmt, func, cnt, lenrange[0].to_uhwi ());\n \n \t      return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t\t \"%G%qD output truncated copying between %wu \"\n \t\t\t\t \"and %wu bytes from a string of length %wu\",\n-\t\t\t\t call, func, cntrange[0].to_uhwi (),\n+\t\t\t\t stmt, func, cntrange[0].to_uhwi (),\n \t\t\t\t cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n \t    }\n \t  else if (wi::geu_p (lenrange[1], cntrange[1]))\n@@ -2081,12 +2077,12 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t\t\t\t  \"byte from a string of length %wu\",\n \t\t\t\t  \"%G%qD output may be truncated copying %E \"\n \t\t\t\t  \"bytes from a string of length %wu\",\n-\t\t\t\t  call, func, cnt, lenrange[1].to_uhwi ());\n+\t\t\t\t  stmt, func, cnt, lenrange[1].to_uhwi ());\n \n \t      return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t\t \"%G%qD output may be truncated copying between \"\n \t\t\t\t \"%wu and %wu bytes from a string of length %wu\",\n-\t\t\t\t call, func, cntrange[0].to_uhwi (),\n+\t\t\t\t stmt, func, cntrange[0].to_uhwi (),\n \t\t\t\t cntrange[1].to_uhwi (), lenrange[1].to_uhwi ());\n \t    }\n \t}\n@@ -2102,7 +2098,7 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t  return warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t     \"%G%qD output may be truncated copying between \"\n \t\t\t     \"%wu and %wu bytes from a string of length %wu\",\n-\t\t\t     call, func, cntrange[0].to_uhwi (),\n+\t\t\t     stmt, func, cntrange[0].to_uhwi (),\n \t\t\t     cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n \t}\n     }\n@@ -2122,7 +2118,7 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n       if (cntrange[0] == cntrange[1])\n \treturn warning_at (callloc, OPT_Wstringop_truncation,\n \t\t\t   \"%G%qD specified bound %E equals destination size\",\n-\t\t\t   as_a <gcall *> (stmt), func, cnt);\n+\t\t\t   stmt, func, cnt);\n     }\n \n   return false;\n@@ -2180,8 +2176,7 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n   else\n     srcsize = NULL_TREE;\n \n-  if (!check_bounds_or_overlap (as_a <gcall *>(stmt), dst, src,\n-\t\t\t\tdstsize, srcsize))\n+  if (!check_bounds_or_overlap (stmt, dst, src, dstsize, srcsize))\n     {\n       gimple_set_no_warning (stmt, true);\n       return;\n@@ -2222,13 +2217,13 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n       && warning_at (callloc, OPT_Wstringop_truncation,\n \t\t     \"%G%qD output truncated before terminating nul \"\n \t\t     \"copying as many bytes from a string as its length\",\n-\t\t     as_a <gcall *>(stmt), func))\n+\t\t     stmt, func))\n     warned = true;\n   else if (silen && is_strlen_related_p (src, silen->ptr))\n     warned = warning_at (callloc, OPT_Wstringop_overflow_,\n \t\t\t \"%G%qD specified bound depends on the length \"\n \t\t\t \"of the source argument\",\n-\t\t\t as_a <gcall *>(stmt), func);\n+\t\t\t stmt, func);\n   if (warned)\n     {\n       location_t strlenloc = pss->second;\n@@ -2479,8 +2474,7 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n \ttree sptr = si && si->ptr ? si->ptr : src;\n \n-\tif (!check_bounds_or_overlap (as_a <gcall *>(stmt), dst, sptr,\n-\t\t\t\t      NULL_TREE, slen))\n+\tif (!check_bounds_or_overlap (stmt, dst, sptr, NULL_TREE, slen))\n \t  {\n \t    gimple_set_no_warning (stmt, true);\n \t    set_no_warning = true;\n@@ -2590,8 +2584,7 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n       tree sptr = si && si->ptr ? si->ptr : src;\n \n-      if (!check_bounds_or_overlap (as_a <gcall *>(stmt), dst, sptr,\n-\t\t\t\t    dstlen, srcsize))\n+      if (!check_bounds_or_overlap (stmt, dst, sptr, dstlen, srcsize))\n \t{\n \t  gimple_set_no_warning (stmt, true);\n \t  set_no_warning = true;"}]}