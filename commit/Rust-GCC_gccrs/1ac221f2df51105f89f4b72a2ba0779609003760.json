{"sha": "1ac221f2df51105f89f4b72a2ba0779609003760", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjMjIxZjJkZjUxMTA1Zjg5ZjRiNzJhMmJhMDc3OTYwOTAwMzc2MA==", "commit": {"author": {"name": "Kean Johnston", "email": "jkj@sco.com", "date": "2005-11-28T18:01:50Z"}, "committer": {"name": "Kean Johnston", "email": "jkj@gcc.gnu.org", "date": "2005-11-28T18:01:50Z"}, "message": "re PR testsuite/19231 (Execute failure in gcc.c-torture/execute/builtins/strlen-3.c with -fpic/-fPIC)\n\n\t* g++.dg/opt/range-test-1.C: Prevent re-inclusion of system\n\theaders.\n\t* g++.old-deja/g++.law/profile1.C: No longer expect fail on OSR5.\n\t* gcc.c-torture/compile/20000804-1.c: Skip if using -fPIC on X86.\n\t* gcc.target/i386/asm-3.c: Ditto.\n\t* gcc.target/i386/clobbers.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-dce-2.c: Make t() static and prototype it.\n\t* gcc.target/i386/cmov1.c: Make magic* static so it matches the\n\ttest regexp.\n\t* gcc.target/i386/mul.c: Ditto.\n\t* gcc.target/i386/ssetype-1.c: Ditto.\n\t* gcc.dg/20040813-1.c: Skip on SVR5 systems.\n\t* gcc.c-torture/execute/builtins/strlen-3.c: Declare variables as\n\tstatic so the test works with -fPIC mode too. Based on comment in\n\tPR19231 by Pinski.\n\t* gcc.dg/nest.c: No longer fail on SCO systems as it has -pg again.\n\nFrom-SVN: r107608", "tree": {"sha": "1da118e57174cbf7eab0281cb327c35e30005b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1da118e57174cbf7eab0281cb327c35e30005b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ac221f2df51105f89f4b72a2ba0779609003760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac221f2df51105f89f4b72a2ba0779609003760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac221f2df51105f89f4b72a2ba0779609003760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac221f2df51105f89f4b72a2ba0779609003760/comments", "author": null, "committer": null, "parents": [{"sha": "3327e41f580f45f15046dad834057e21993ac7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3327e41f580f45f15046dad834057e21993ac7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3327e41f580f45f15046dad834057e21993ac7b9"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "3c3c8ce617267ca564c7cff0f87b1de084d13399", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -1,3 +1,22 @@\n+2005-11-28  Kean Johnston  <jkj@sco.com>\n+\n+\t* g++.dg/opt/range-test-1.C: Prevent re-inclusion of system\n+\theaders.\n+\t* g++.old-deja/g++.law/profile1.C: No longer expect fail on OSR5.\n+\t* gcc.c-torture/compile/20000804-1.c: Skip if using -fPIC on X86.\n+\t* gcc.target/i386/asm-3.c: Ditto.\n+\t* gcc.target/i386/clobbers.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-dce-2.c: Make t() static and prototype it.\n+\t* gcc.target/i386/cmov1.c: Make magic* static so it matches the\n+\ttest regexp.\n+\t* gcc.target/i386/mul.c: Ditto.\n+\t* gcc.target/i386/ssetype-1.c: Ditto.\n+\t* gcc.dg/20040813-1.c: Skip on SVR5 systems.\n+\t* gcc.c-torture/execute/builtins/strlen-3.c: Declare variables as\n+\tstatic so the test works with -fPIC mode too. Based on comment in\n+\tPR19231 by Pinski.\n+\t* gcc.dg/nest.c: No longer fail on SCO systems as it has -pg again.\n+\n 2005-11-28  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/alias-9.c: New testcase."}, {"sha": "cc5ba6694798a6e208ba7816e4a44299f7e45553", "filename": "gcc/testsuite/g++.dg/opt/range-test-1.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Frange-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Frange-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Frange-test-1.C?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -2,9 +2,13 @@\n // { dg-do run } */\n // { dg-options \"-O2\" } */\n \n+#ifndef __RANGE_TEST_HDR_INCL\n+#define __RANGE_TEST_HDR_INCL\n+/* Protect against fix-header weakness */\n #include <stdlib.h>\n #include <stdio.h>\n #include <limits.h>\n+#endif\n \n #if (INT_MAX == 2147483647) && (INT_MIN == -2147483648) \\\n     && (SCHAR_MIN == -128) && (SCHAR_MAX == 127) \\"}, {"sha": "acc20d0ad9261347a283bd3fbdceccb2060eafba", "filename": "gcc/testsuite/g++.old-deja/g++.law/profile1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fprofile1.C?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail i[3456]86-*-sco3.2v5* } }\n+// { dg-do run }\n // { dg-require-profiling \"-pg\" }\n // { dg-options \"-pg\" }\n // { dg-options \"-pg -static\" { target hppa*-*-hpux* } }"}, {"sha": "6942ae7c9ec716d175701bbaae72016ef9545a40", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -1,6 +1,7 @@\n /* This does not work on m68hc11 or h8300 due to the use of an asm\n    statement to force a 'long long' (64-bits) to go in a register.  */\n /* { dg-do assemble { xfail m6811-*-* m6812-*-* h8300-*-* } } */\n+/* { dg-skip-if \"\" { i?86-*-* } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n \n /* Copyright (C) 2000, 2003 Free Software Foundation */\n __complex__ long long f ()"}, {"sha": "221e306247ac96e7544b10ba6b20fe6e820ee380", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/strlen-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstrlen-3.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -7,9 +7,9 @@\n extern void abort (void);\n extern __SIZE_TYPE__ strlen (const char *);\n extern char *strcpy (char *, const char *);\n-const char bar[] = \"Hello, World!\";\n-const char baz[] = \"hello, world?\";\n-const char larger[20] = \"short string\";\n+static const char bar[] = \"Hello, World!\";\n+static const char baz[] = \"hello, world?\";\n+static const char larger[20] = \"short string\";\n extern volatile int inside_main;\n \n int l1 = 1;"}, {"sha": "a983886da2998de65bc6c1efe3a2382ed7705b54", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* *-*-netware* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-sysv5* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "b9476600ae20caeee51be5517ca5f4ade7a87b00", "filename": "gcc/testsuite/gcc.dg/nest.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnest.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -4,7 +4,6 @@\n /* { dg-options \"-O2 -pg\" } */\n /* { dg-options \"-O2 -pg -static\" { target hppa*-*-hpux* } } */\n /* { dg-error \"profiler\" \"No profiler support\" { target xstormy16-*-* } 0 } */\n-/* { dg-error \"-pg not supported\" \"Profiler support missing\" { target *-*-sco3.2v5* } 0 } */\n /* { dg-bogus \"\\[Uu\\]nresolved symbol ._mcount\" \"Profiling unsupported\" { xfail *-*-netware* } 0 } */\n \n extern void abort (void);"}, {"sha": "655f61c6f731d2d1d4f95fc1978b7ab70cac4b52", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -2,11 +2,11 @@\n /* { dg-options \"-O2 -fdump-tree-dce3\" } */\n \n /* We should notice constantness of this function. */\n-int t(int a) \n+static int __attribute__((noinline)) t(int a) \n {\n \treturn a+1;\n }\n-q()\n+void q(void)\n {\n   int i = t(1);\n   if (!i)"}, {"sha": "e85d1c1ebddd012fdaf45c54e0aac966306b8602", "filename": "gcc/testsuite/gcc.target/i386/asm-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-3.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -1,6 +1,7 @@\n /* PR inline-asm/6806 */\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { i?86-*-* } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n \n extern void abort (void);\n "}, {"sha": "91179a9d1cadaa27eb87842f5e527f7bd5672597", "filename": "gcc/testsuite/gcc.target/i386/clobbers.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclobbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclobbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclobbers.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -1,6 +1,7 @@\n /* Test asm clobbers on x86. */\n \n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-skip-if \"\" { i?86-*-* } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n \n extern void abort (void);\n "}, {"sha": "9252d868f9645c89094c52d89e695124277cdd25", "filename": "gcc/testsuite/gcc.target/i386/cmov1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov1.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -9,15 +9,15 @@\n \n /* Check code generation for several conditional moves doable by single arithmetics.  */\n \n-int magic_namea;\n-char magic_nameb;\n-short magic_namec;\n-int magic_named;\n-char magic_namee;\n-short magic_namef;\n+static int magic_namea;\n+static char magic_nameb;\n+static short magic_namec;\n+static int magic_named;\n+static char magic_namee;\n+static short magic_namef;\n \n unsigned int gen;\n-m()\n+void m(void)\n {\n   magic_namec=magic_namec>=0?0:-1;\n   magic_namea=magic_namea>=0?0:-1;"}, {"sha": "72069fe2cf813575f067aa5fed0a57b65429dab6", "filename": "gcc/testsuite/gcc.target/i386/mul.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmul.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -3,8 +3,8 @@\n /* { dg-final { scan-assembler \"and\\[^\\\\n\\]*magic\" } } */\n \n /* Should be done as \"andw $32767, magic\".  */\n-unsigned short magic;\n-t()\n+static unsigned short magic;\n+void t(void)\n {\n \tmagic%=(unsigned short)0x8000U;\n }"}, {"sha": "47a68918d8ce0192efd516ff30b8352e29d2783f", "filename": "gcc/testsuite/gcc.target/i386/ssetype-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac221f2df51105f89f4b72a2ba0779609003760/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssetype-1.c?ref=1ac221f2df51105f89f4b72a2ba0779609003760", "patch": "@@ -11,7 +11,7 @@\n \n #include <xmmintrin.h>\n \n-__m128d magic_a, magic_b;\n+static __m128d magic_a, magic_b;\n \n __m128d\n t1(void)"}]}