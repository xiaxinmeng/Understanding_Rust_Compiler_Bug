{"sha": "86631ea3dd78a0077a6f96061affe89d5e38220f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2MzFlYTNkZDc4YTAwNzdhNmY5NjA2MWFmZmU4OWQ1ZTM4MjIwZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-07-25T18:09:42Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-07-25T18:09:42Z"}, "message": "extend.texi (Labels as Values): Document need for noclone.\n\n2009-07-25  Martin Jambor  <mjambor@suse.cz>\n\n\t* doc/extend.texi (Labels as Values): Document need for noclone.\n\t(Function Attributes): Document noclone attribute.\n\t* c-common.c (c_common_attribute_table): New element for noclone.\n\t(handle_noclone_attribute): New function. Forward-declare.\n\t* tree-inline.c (tree_versionable_function_p): Check for noclone\n\tattribute.\n\n\t* testsuite/gcc.c-torture/execute/pr17377.c: Add noclone attribute to\n\tfunction y.\n\t* testsuite/gcc.dg/ipa/noclone-1.c: New test.\n\nFrom-SVN: r150086", "tree": {"sha": "3c96ae42a6ff9f1334a7b02a1bd9e7eff55129ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c96ae42a6ff9f1334a7b02a1bd9e7eff55129ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86631ea3dd78a0077a6f96061affe89d5e38220f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86631ea3dd78a0077a6f96061affe89d5e38220f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86631ea3dd78a0077a6f96061affe89d5e38220f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86631ea3dd78a0077a6f96061affe89d5e38220f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a9de349388c25eb2d8df725d5eace68c6c2c81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9de349388c25eb2d8df725d5eace68c6c2c81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9de349388c25eb2d8df725d5eace68c6c2c81d"}], "stats": {"total": 103, "additions": 87, "deletions": 16}, "files": [{"sha": "e223f448a75e258942543317632447bd4bea23ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -1,3 +1,12 @@\n+2009-07-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* c-common.c (c_common_attribute_table): New element for noclone.\n+\t(handle_noclone_attribute): New function. Forward-declare.\n+\t* tree-inline.c (tree_versionable_function_p): Check for noclone\n+\tattribute.\n+\t* doc/extend.texi (Labels as Values): Document need for noclone.\n+\t(Function Attributes): Document noclone attribute.\n+\n 2009-07-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/34999"}, {"sha": "0ebb9f1b1f59cc5d3fbc90073ea3a072f61bde31", "filename": "gcc/c-common.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -482,6 +482,7 @@ static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_always_inline_attribute (tree *, tree, tree, int,\n \t\t\t\t\t    bool *);\n static tree handle_gnu_inline_attribute (tree *, tree, tree, int, bool *);\n@@ -733,6 +734,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noreturn_attribute },\n   { \"noinline\",               0, 0, true,  false, false,\n \t\t\t      handle_noinline_attribute },\n+  { \"noclone\",                0, 0, true,  false, false,\n+\t\t\t      handle_noclone_attribute },\n   { \"always_inline\",          0, 0, true,  false, false,\n \t\t\t      handle_always_inline_attribute },\n   { \"gnu_inline\",             0, 0, true,  false, false,\n@@ -5913,6 +5916,23 @@ handle_noinline_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"noclone\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_noclone_attribute (tree *node, tree name,\n+\t\t\t  tree ARG_UNUSED (args),\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"always_inline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "37c50895eabac4391ff484e8cc17073e6fabd741", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -372,11 +372,12 @@ This is more friendly to code living in shared libraries, as it reduces\n the number of dynamic relocations that are needed, and by consequence,\n allows the data to be read-only.\n \n-The @code{&&foo} expressions for the same label might have different values\n-if the containing function is inlined or cloned.  If a program relies on\n-them being always the same, @code{__attribute__((__noinline__))} should\n-be used to prevent inlining.  If @code{&&foo} is used\n-in a static variable initializer, inlining is forbidden.\n+The @code{&&foo} expressions for the same label might have different\n+values if the containing function is inlined or cloned.  If a program\n+relies on them being always the same,\n+@code{__attribute__((__noinline__,__noclone__))} should be used to\n+prevent inlining and cloning.  If @code{&&foo} is used in a static\n+variable initializer, inlining and cloning is forbidden.\n \n @node Nested Functions\n @section Nested Functions\n@@ -1881,19 +1882,18 @@ attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n @code{aligned}, @code{alloc_size}, @code{noreturn},\n-@code{returns_twice}, @code{noinline}, @code{always_inline},\n-@code{flatten}, @code{pure}, @code{const}, @code{nothrow},\n-@code{sentinel}, @code{format}, @code{format_arg},\n+@code{returns_twice}, @code{noinline}, @code{noclone},\n+@code{always_inline}, @code{flatten}, @code{pure}, @code{const},\n+@code{nothrow}, @code{sentinel}, @code{format}, @code{format_arg},\n @code{no_instrument_function}, @code{section}, @code{constructor},\n @code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n @code{weak}, @code{malloc}, @code{alias}, @code{warn_unused_result},\n @code{nonnull}, @code{gnu_inline}, @code{externally_visible},\n-@code{hot}, @code{cold}, @code{artificial}, @code{error}\n-and @code{warning}.\n-Several other attributes are defined for functions on particular\n-target systems.  Other attributes, including @code{section} are\n-supported for variables declarations (@pxref{Variable Attributes}) and\n-for types (@pxref{Type Attributes}).\n+@code{hot}, @code{cold}, @code{artificial}, @code{error} and\n+@code{warning}.  Several other attributes are defined for functions on\n+particular target systems.  Other attributes, including @code{section}\n+are supported for variables declarations (@pxref{Variable Attributes})\n+and for types (@pxref{Type Attributes}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -2718,6 +2718,13 @@ asm (\"\");\n (@pxref{Extended Asm}) in the called function, to serve as a special\n side-effect.\n \n+@item noclone\n+@cindex @code{noclone} function attribute\n+This function attribute prevents a function from being considered for\n+cloning - a mechanism which produces specialized copies of functions\n+and which is (currently) performed by interprocedural constant\n+propagation.\n+\n @item nonnull (@var{arg-index}, @dots{})\n @cindex @code{nonnull} function attribute\n The @code{nonnull} attribute specifies that some function parameters should"}, {"sha": "9651ed2fe6024170c95a2d965218ae30c4f5e0aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -1,3 +1,8 @@\n+2009-07-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.c-torture/execute/pr17377.c: Add noclone attribute to function y.\n+\t* gcc.dg/ipa/noclone-1.c: New test.\n+\n 2009-07-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/target-supports.exp (check_effective_target_static): New"}, {"sha": "87d23c5cc1b020497a9f889a91a4b8ae57b57d2c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr17377.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -26,7 +26,7 @@ f (int i)\n \n int x;\n \n-void *y (int i) __attribute__ ((__noinline__));\n+void *y (int i) __attribute__ ((__noinline__,__noclone__));\n void *\n y (int i)\n {"}, {"sha": "118df3a0096413c972ddf817ba7cffdc45cb9689", "filename": "gcc/testsuite/gcc.dg/ipa/noclone-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fnoclone-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fnoclone-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fnoclone-1.c?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fipa-cp -fipa-cp-clone -fdump-ipa-cp -fno-early-inlining\"  } */\n+\n+int global_1, global_2;\n+\n+__attribute__((__noclone__)) int g (int b, int c)\n+ {\n+  global_1 = b;\n+  global_2 = c;\n+}\n+\n+__attribute__((__noclone__)) int f (int a)\n+{\n+  /* Second parameter of g gets different values.  */\n+  if (a > 0)\n+    g (a, 3);\n+  else\n+    g (a, 5);\n+}\n+\n+int main ()\n+{\n+  f (7);\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-ipa-dump-times \"versioned function\" 0 \"cp\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */"}, {"sha": "605f91ef1a9dd3e8457407a62b89512a1f99f4f9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86631ea3dd78a0077a6f96061affe89d5e38220f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=86631ea3dd78a0077a6f96061affe89d5e38220f", "patch": "@@ -4349,7 +4349,8 @@ copy_static_chain (tree static_chain, copy_body_data * id)\n bool\n tree_versionable_function_p (tree fndecl)\n {\n-  return copy_forbidden (DECL_STRUCT_FUNCTION (fndecl), fndecl) == NULL;\n+  return (!lookup_attribute (\"noclone\", DECL_ATTRIBUTES (fndecl))\n+\t  && copy_forbidden (DECL_STRUCT_FUNCTION (fndecl), fndecl) == NULL);\n }\n \n /* Delete all unreachable basic blocks and update callgraph."}]}