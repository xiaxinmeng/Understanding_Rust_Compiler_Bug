{"sha": "22099c59a2bcec314301e79cac0488274d3f5f36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwOTljNTlhMmJjZWMzMTQzMDFlNzljYWMwNDg4Mjc0ZDNmNWYzNg==", "commit": {"author": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-04-23T21:12:10Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-04-23T21:12:10Z"}, "message": "no-gc.h (_Jv_IsThreadSuspended): Declare.\n\n        * include/no-gc.h (_Jv_IsThreadSuspended): Declare.\n        * include/boehm-gc.h (_Jv_IsThreadSuspended): Likewise.\n        * boehm.cc (_Jv_IsThreadSuspended): New function.\n        * nogc.cc (_Jv_IsThreadSuspended): Likewise.\n        * jvmti.cc (_Jv_JVMTI_GetThreadState): New function.\n        (_Jv_JVMTI_Interface): Define GetThreadState.\n\nFrom-SVN: r124082", "tree": {"sha": "62db8a14a77c77177ecc18c2b244a93651c94706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62db8a14a77c77177ecc18c2b244a93651c94706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22099c59a2bcec314301e79cac0488274d3f5f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22099c59a2bcec314301e79cac0488274d3f5f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22099c59a2bcec314301e79cac0488274d3f5f36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22099c59a2bcec314301e79cac0488274d3f5f36/comments", "author": null, "committer": null, "parents": [{"sha": "494d64aff614f95d4aa0d34b7d7d7190cdd4ab91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494d64aff614f95d4aa0d34b7d7d7190cdd4ab91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/494d64aff614f95d4aa0d34b7d7d7190cdd4ab91"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "3aa0acba987199a847c20a59d1e1141d5576c421", "filename": "libjava/boehm.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=22099c59a2bcec314301e79cac0488274d3f5f36", "patch": "@@ -722,6 +722,17 @@ _Jv_ResumeThread (_Jv_Thread_t *thread)\n #endif\n }\n \n+int\n+_Jv_IsThreadSuspended (_Jv_Thread_t *thread)\n+{\n+#if defined(GC_PTHREADS) && !defined(GC_SOLARIS_THREADS) \\\n+     && !defined(GC_WIN32_THREADS) && !defined(GC_DARWIN_THREADS)\n+  return GC_is_thread_suspended (_Jv_GetPlatformThreadID (thread));\n+#else\n+  return 0;\n+#endif\n+}\n+\n void\n _Jv_GCAttachThread ()\n {"}, {"sha": "ed8ac6aa2e34b6d298bc2496de279aa7b97829b7", "filename": "libjava/include/boehm-gc.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Finclude%2Fboehm-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Finclude%2Fboehm-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fboehm-gc.h?ref=22099c59a2bcec314301e79cac0488274d3f5f36", "patch": "@@ -1,7 +1,7 @@\n // -*- c++ -*-\n // boehm-gc.h - Defines for Boehm collector.\n \n-/* Copyright (C) 1998, 1999, 2002, 2004, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2002, 2004, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -93,4 +93,6 @@ extern \"C\" void _Jv_SuspendThread (_Jv_Thread_t *);\n // Resume a suspended thread.\n extern \"C\" void _Jv_ResumeThread (_Jv_Thread_t *);\n \n+// Is the given thread suspended?\n+extern \"C\" int _Jv_IsThreadSuspended (_Jv_Thread_t *);\n #endif /* __JV_BOEHM_GC__ */"}, {"sha": "ce0ffb81017582b870f8179568ce4a5500d5488a", "filename": "libjava/include/no-gc.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Finclude%2Fno-gc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Finclude%2Fno-gc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fno-gc.h?ref=22099c59a2bcec314301e79cac0488274d3f5f36", "patch": "@@ -1,7 +1,7 @@\n // -*- c++ -*-\n // no-gc.h - Defines for no garbage collector.\n \n-/* Copyright (C) 1998, 1999, 2006  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -18,4 +18,6 @@ extern \"C\" void _Jv_SuspendThread (_Jv_Thread_t *);\n // Resume a suspended thread.\n extern \"C\" void _Jv_ResumeThread (_Jv_Thread_t *);\n \n+// Is the given thread suspended?\n+extern \"C\" int _Jv_IsThreadSuspended (_Jv_Thread_t *);\n #endif /* __JV_NO_GC__ */"}, {"sha": "d9bcc806074fd7196bbcd5af6b384ac9691f1055", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=22099c59a2bcec314301e79cac0488274d3f5f36", "patch": "@@ -30,6 +30,7 @@ details.  */\n #include <java/lang/OutOfMemoryError.h>\n #include <java/lang/Thread.h>\n #include <java/lang/ThreadGroup.h>\n+#include <java/lang/Thread$State.h>\n #include <java/lang/Throwable.h>\n #include <java/lang/VMClassLoader.h>\n #include <java/lang/reflect/Field.h>\n@@ -520,6 +521,66 @@ _Jv_JVMTI_GetFrameCount (MAYBE_UNUSED jvmtiEnv *env, jthread thread,\n   return JVMTI_ERROR_NONE;\n }\n \n+static jvmtiError JNICALL\n+_Jv_JVMTI_GetThreadState (MAYBE_UNUSED jvmtiEnv *env, jthread thread,\n+\t\t\t  jint *thread_state_ptr)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+\n+  THREAD_DEFAULT_TO_CURRENT (thread);\n+  THREAD_CHECK_VALID (thread);\n+  NULL_CHECK (thread_state_ptr);\n+\n+  jint state = 0;\n+  if (thread->isAlive ())\n+    {\n+      state |= JVMTI_THREAD_STATE_ALIVE;\n+\n+      _Jv_Thread_t *data = _Jv_ThreadGetData (thread);\n+      if (_Jv_IsThreadSuspended (data))\n+\tstate |= JVMTI_THREAD_STATE_SUSPENDED;\n+\n+      if (thread->isInterrupted ())\n+\tstate |= JVMTI_THREAD_STATE_INTERRUPTED;\n+\n+      _Jv_Frame *frame = reinterpret_cast<_Jv_Frame *> (thread->frame);\n+      if (frame != NULL && frame->frame_type == frame_native)\n+\tstate |= JVMTI_THREAD_STATE_IN_NATIVE;\n+\n+      using namespace java::lang;\n+      Thread$State *ts = thread->getState ();\n+      if (ts == Thread$State::RUNNABLE)\n+\tstate |= JVMTI_THREAD_STATE_RUNNABLE;\n+      else if (ts == Thread$State::BLOCKED)\n+\tstate |= JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER;\n+      else if (ts == Thread$State::TIMED_WAITING\n+\t       || ts == Thread$State::WAITING)\n+\t{\n+\t  state |= JVMTI_THREAD_STATE_WAITING;\n+\t  state |= ((ts == Thread$State::WAITING)\n+\t\t    ? JVMTI_THREAD_STATE_WAITING_INDEFINITELY\n+\t\t    : JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT);\n+\n+\t  /* FIXME: We don't have a way to tell\n+\t     the caller why the thread is suspended,\n+\t     i.e., JVMTI_THREAD_STATE_SLEEPING,\n+\t     JVMTI_THREAD_STATE_PARKED, and\n+\t     JVMTI_THREAD_STATE_IN_OBJECT_WAIT\n+\t     are never set. */\n+\t}\n+    }\n+  else\n+    {\n+      using namespace java::lang;\n+      Thread$State *ts = thread->getState ();\n+      if (ts == Thread$State::TERMINATED)\n+\tstate |= JVMTI_THREAD_STATE_TERMINATED;\n+    }\n+\n+  *thread_state_ptr = state;\n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_CreateRawMonitor (MAYBE_UNUSED jvmtiEnv *env, const char *name,\n \t\t\t    jrawMonitorID *result)\n@@ -2004,7 +2065,7 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   UNIMPLEMENTED,\t\t// GetThreadGroupInfo\n   UNIMPLEMENTED,\t\t// GetThreadGroupChildren\n   _Jv_JVMTI_GetFrameCount,\t\t// GetFrameCount\n-  UNIMPLEMENTED,\t\t// GetThreadState\n+  _Jv_JVMTI_GetThreadState,\t// GetThreadState\n   RESERVED,\t\t\t// reserved18\n   UNIMPLEMENTED,\t\t// GetFrameLocation\n   UNIMPLEMENTED,\t\t// NotifyPopFrame"}, {"sha": "079422d0911d1e0a47c21e9c564e76910f5ddadb", "filename": "libjava/nogc.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fnogc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22099c59a2bcec314301e79cac0488274d3f5f36/libjava%2Fnogc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fnogc.cc?ref=22099c59a2bcec314301e79cac0488274d3f5f36", "patch": "@@ -184,3 +184,9 @@ void\n _Jv_ResumeThread (_Jv_Thread_t *thread)\n {\n }\n+\n+int\n+_Jv_IsThreadSuspended (_Jv_Thread_t *thread)\n+{\n+  return 0;\n+}"}]}