{"sha": "35c5f8fb432c8e68af68ab48c8d3107e7839775e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjNWY4ZmI0MzJjOGU2OGFmNjhhYjQ4YzhkMzEwN2U3ODM5Nzc1ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-15T19:34:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-17T18:45:00Z"}, "message": "analyzer: handle &STRING_CST in constant pool initializers [PR96642]\n\nIn r11-2708-g2867118ddda9b56d991c16022f7d3d634ed08313 I added support to\nthe analyzer for initialization from var_decls in the global constant\npool.  However, that commit didn't support initialization from\nADDR_EXPR of a STRING_CST leading to an ICE seen in data-model-1.c and\npr94639.c on arm and powerpc64 at least, and as PR analyzer/96642 on\nx86_64 at least.\n\nThis patch adds support for such initializers, fixing the ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96642\n\t* store.cc (get_svalue_for_ctor_val): New.\n\t(binding_map::apply_ctor_to_region): Call it.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96642\n\t* gcc.dg/analyzer/pr96642.c: New test.", "tree": {"sha": "b1da377e692ddf911a2e70a51153f32383ead30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1da377e692ddf911a2e70a51153f32383ead30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35c5f8fb432c8e68af68ab48c8d3107e7839775e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c5f8fb432c8e68af68ab48c8d3107e7839775e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c5f8fb432c8e68af68ab48c8d3107e7839775e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c5f8fb432c8e68af68ab48c8d3107e7839775e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e026191547225ca02c1eda91f898271fced3bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e026191547225ca02c1eda91f898271fced3bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e026191547225ca02c1eda91f898271fced3bbf"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "5af86d09c2bb7ac0ab6ba1ab6b6bb3168fce4c86", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c5f8fb432c8e68af68ab48c8d3107e7839775e/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c5f8fb432c8e68af68ab48c8d3107e7839775e/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=35c5f8fb432c8e68af68ab48c8d3107e7839775e", "patch": "@@ -391,6 +391,22 @@ get_subregion_within_ctor (const region *parent_reg, tree index,\n     }\n }\n \n+/* Get the svalue for VAL, a non-CONSTRUCTOR value within a CONSTRUCTOR.  */\n+\n+static const svalue *\n+get_svalue_for_ctor_val (tree val, region_model_manager *mgr)\n+{\n+  if (TREE_CODE (val) == ADDR_EXPR)\n+    {\n+      gcc_assert (TREE_CODE (TREE_OPERAND (val, 0)) == STRING_CST);\n+      const string_region *str_reg\n+\t= mgr->get_region_for_string (TREE_OPERAND (val, 0));\n+      return mgr->get_ptr_svalue (TREE_TYPE (val), str_reg);\n+    }\n+  gcc_assert (CONSTANT_CLASS_P (val));\n+  return mgr->get_or_create_constant_svalue (val);\n+}\n+\n /* Bind values from CONSTRUCTOR to this map, relative to\n    PARENT_REG's relationship to its base region.  */\n \n@@ -415,12 +431,11 @@ binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n \tapply_ctor_to_region (child_reg, val, mgr);\n       else\n \t{\n-\t  gcc_assert (CONSTANT_CLASS_P (val));\n-\t  const svalue *cst_sval = mgr->get_or_create_constant_svalue (val);\n+\t  const svalue *sval = get_svalue_for_ctor_val (val, mgr);\n \t  const binding_key *k\n \t    = binding_key::make (mgr->get_store_manager (), child_reg,\n \t\t\t\t BK_direct);\n-\t  put (k, cst_sval);\n+\t  put (k, sval);\n \t}\n     }\n }"}, {"sha": "117aa0437ac486dd066df32e475d442f2ffc9968", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96642.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c5f8fb432c8e68af68ab48c8d3107e7839775e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96642.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c5f8fb432c8e68af68ab48c8d3107e7839775e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96642.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96642.c?ref=35c5f8fb432c8e68af68ab48c8d3107e7839775e", "patch": "@@ -0,0 +1,10 @@\n+void\n+ut (void)\n+{\n+  struct {\n+    char *cc;\n+  } sr[] = {\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, \"\", \"\", 0, \"\", 0, 0, \"\",\n+    0, 0, \"\", 0, 0, \"\", 0, 0, \"\", 0, 0, \"\", 0, 0, 0, 0, 0,\n+  };\n+}"}]}