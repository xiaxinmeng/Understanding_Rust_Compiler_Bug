{"sha": "ee37d2f54c14956c32feca7bef17a4b7b8802717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzN2QyZjU0YzE0OTU2YzMyZmVjYTdiZWYxN2E0YjdiODgwMjcxNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-25T08:36:15Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-25T08:36:15Z"}, "message": "re PR fortran/34729 (Localization of run-time error messages, written into the executable)\n\n\tPR fortran/34729\n\t* trans-const.c (gfc_build_string_const): Don't call gettext.\n\t(gfc_build_localized_string_const): New function.\n\t* trans-const.h (gfc_build_localized_string_const): New prototype.\n\t* trans.c (gfc_trans_runtime_check): Use\n\tgfc_build_localized_string_const instead of gfc_build_string_const.\n\t(gfc_call_malloc): Likewise.\n\t(gfc_allocate_with_status): Likewise.\n\t(gfc_allocate_array_with_status): Likewise.\n\t(gfc_deallocate_with_status): Likewise.\n\t(gfc_call_realloc): Likewise.\n\t* trans-io.c (gfc_trans_io_runtime_check): Likewise.\n\nFrom-SVN: r132612", "tree": {"sha": "762dc6796ed285b4d67938d43837434f3b44d4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/762dc6796ed285b4d67938d43837434f3b44d4b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee37d2f54c14956c32feca7bef17a4b7b8802717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee37d2f54c14956c32feca7bef17a4b7b8802717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee37d2f54c14956c32feca7bef17a4b7b8802717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee37d2f54c14956c32feca7bef17a4b7b8802717/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfaec1cefa9e393cceb88fa818c7c2530e75289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfaec1cefa9e393cceb88fa818c7c2530e75289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfaec1cefa9e393cceb88fa818c7c2530e75289"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "5ba83fb7b870ddd206c7adbbb88743a65e02e520", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ee37d2f54c14956c32feca7bef17a4b7b8802717", "patch": "@@ -1,3 +1,18 @@\n+2008-02-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/34729\n+\t* trans-const.c (gfc_build_string_const): Don't call gettext.\n+\t(gfc_build_localized_string_const): New function.\n+\t* trans-const.h (gfc_build_localized_string_const): New prototype.\n+\t* trans.c (gfc_trans_runtime_check): Use\n+\tgfc_build_localized_string_const instead of gfc_build_string_const.\n+\t(gfc_call_malloc): Likewise.\n+\t(gfc_allocate_with_status): Likewise.\n+\t(gfc_allocate_array_with_status): Likewise.\n+\t(gfc_deallocate_with_status): Likewise.\n+\t(gfc_call_realloc): Likewise.\n+\t* trans-io.c (gfc_trans_io_runtime_check): Likewise.\n+\n 2008-02-24  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* arith.c: Update copyright years."}, {"sha": "37251eff6dbb3efe66ab3ed935f93f59c1c4f5d4", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=ee37d2f54c14956c32feca7bef17a4b7b8802717", "patch": "@@ -82,14 +82,22 @@ gfc_build_string_const (int length, const char *s)\n }\n \n /* Build a Fortran character constant from a zero-terminated string.\n-   Since this is mainly used for error messages, the string will get\n-   translated.  */\n+   There a two version of this function, one that translates the string\n+   and one that doesn't.  */\n tree\n-gfc_build_cstring_const (const char *msgid)\n+gfc_build_cstring_const (const char *string)\n {\n-  return gfc_build_string_const (strlen (msgid) + 1, _(msgid));\n+  return gfc_build_string_const (strlen (string) + 1, string);\n }\n \n+tree\n+gfc_build_localized_cstring_const (const char *msgid)\n+{\n+  const char *localized = _(msgid);\n+  return gfc_build_string_const (strlen (localized) + 1, localized);\n+}\n+\n+\n /* Return a string constant with the given length.  Used for static\n    initializers.  The constant will be padded or truncated to match \n    length.  */"}, {"sha": "808a1a5d6af31cc00d5aa2568719dfe5a8e45748", "filename": "gcc/fortran/trans-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.h?ref=ee37d2f54c14956c32feca7bef17a4b7b8802717", "patch": "@@ -38,6 +38,7 @@ void gfc_conv_constant (gfc_se *, gfc_expr *);\n \n tree gfc_build_string_const (int, const char *);\n tree gfc_build_cstring_const (const char *);\n+tree gfc_build_localized_cstring_const (const char *);\n \n /* Translate a string constant for a static initializer.  */\n tree gfc_conv_string_init (tree, gfc_expr *);"}, {"sha": "d0af3429db488ea89ab0106221b3d80a908b65ad", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=ee37d2f54c14956c32feca7bef17a4b7b8802717", "patch": "@@ -240,7 +240,8 @@ gfc_trans_io_runtime_check (tree cond, tree var, int error_code,\n   arg2 = build_int_cst (integer_type_node, error_code),\n   \n   asprintf (&message, \"%s\", _(msgid));\n-  arg3 = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  arg3 = gfc_build_addr_expr (pchar_type_node,\n+\t\t\t      gfc_build_localized_cstring_const (message));\n   gfc_free(message);\n   \n   tmp = build_call_expr (gfor_fndecl_generate_error, 3, arg1, arg2, arg3);"}, {"sha": "11ef0bf540c4a0ba989f38f6249bc3fbe9f4ee34", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee37d2f54c14956c32feca7bef17a4b7b8802717/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=ee37d2f54c14956c32feca7bef17a4b7b8802717", "patch": "@@ -394,11 +394,13 @@ gfc_trans_runtime_check (tree cond, stmtblock_t * pblock, locus * where,\n     asprintf (&message, \"In file '%s', around line %d\",\n \t      gfc_source_file, input_line + 1);\n \n-  arg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  arg = gfc_build_addr_expr (pchar_type_node,\n+\t\t\t     gfc_build_localized_cstring_const (message));\n   gfc_free(message);\n   \n   asprintf (&message, \"%s\", _(msgid));\n-  arg2 = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  arg2 = gfc_build_addr_expr (pchar_type_node,\n+\t\t\t      gfc_build_localized_cstring_const (message));\n   gfc_free(message);\n \n   /* Build the argument array.  */\n@@ -461,7 +463,7 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n   /* size < 0 ?  */\n   negative = fold_build2 (LT_EXPR, boolean_type_node, size,\n \t\t\t  build_int_cst (size_type_node, 0));\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n       (\"Attempt to allocate a negative amount of memory.\"));\n   tmp = fold_build3 (COND_EXPR, void_type_node, negative,\n \t\t     build_call_expr (gfor_fndecl_runtime_error, 1, msg),\n@@ -475,7 +477,7 @@ gfc_call_malloc (stmtblock_t * block, tree type, tree size)\n \t\t       size));\n   null_result = fold_build2 (EQ_EXPR, boolean_type_node, res,\n \t\t\t     build_int_cst (pvoid_type_node, 0));\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n       (\"Memory allocation failed\"));\n   tmp = fold_build3 (COND_EXPR, void_type_node, null_result,\n \t\t     build_call_expr (gfor_fndecl_os_error, 1, msg),\n@@ -563,7 +565,7 @@ gfc_allocate_with_status (stmtblock_t * block, tree size, tree status)\n     }\n \n   /* Generate the block of code handling (size < 0).  */\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n \t\t\t(\"Attempt to allocate negative amount of memory. \"\n \t\t\t \"Possible integer overflow\"));\n   error = build_call_expr (gfor_fndecl_runtime_error, 1, msg);\n@@ -594,8 +596,8 @@ gfc_allocate_with_status (stmtblock_t * block, tree size, tree status)\n \t\t\t\t\t\t     size,\n \t\t\t\t\t\t     build_int_cst (size_type_node, 1))));\n \n-  msg = gfc_build_addr_expr (pchar_type_node,\n-\t\t\t     gfc_build_cstring_const (\"Out of memory\"));\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n+\t\t\t\t\t\t(\"Out of memory\"));\n   tmp = build_call_expr (gfor_fndecl_os_error, 1, msg);\n \n   if (status != NULL_TREE && !integer_zerop (status))\n@@ -674,7 +676,7 @@ gfc_allocate_array_with_status (stmtblock_t * block, tree mem, tree size,\n   alloc = gfc_finish_block (&alloc_block);\n \n   /* Otherwise, we issue a runtime error or set the status variable.  */\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n \t\t\t(\"Attempting to allocate already allocated array\"));\n   error = build_call_expr (gfor_fndecl_runtime_error, 1, msg);\n \n@@ -772,8 +774,9 @@ gfc_deallocate_with_status (tree pointer, tree status, bool can_fail)\n   gfc_start_block (&null);\n   if (!can_fail)\n     {\n-      msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n-\t\t\t(\"Attempt to DEALLOCATE unallocated memory.\"));\n+      msg = gfc_build_addr_expr (pchar_type_node,\n+\t\t\t\t gfc_build_localized_cstring_const\n+\t\t\t\t (\"Attempt to DEALLOCATE unallocated memory.\"));\n       error = build_call_expr (gfor_fndecl_runtime_error, 1, msg);\n     }\n   else\n@@ -855,7 +858,7 @@ gfc_call_realloc (stmtblock_t * block, tree mem, tree size)\n   /* size < 0 ?  */\n   negative = fold_build2 (LT_EXPR, boolean_type_node, size,\n \t\t\t  build_int_cst (size_type_node, 0));\n-  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n       (\"Attempt to allocate a negative amount of memory.\"));\n   tmp = fold_build3 (COND_EXPR, void_type_node, negative,\n \t\t     build_call_expr (gfor_fndecl_runtime_error, 1, msg),\n@@ -872,8 +875,8 @@ gfc_call_realloc (stmtblock_t * block, tree mem, tree size)\n \t\t\t build_int_cst (size_type_node, 0));\n   null_result = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, null_result,\n \t\t\t     nonzero);\n-  msg = gfc_build_addr_expr (pchar_type_node,\n-\t\t\t     gfc_build_cstring_const (\"Out of memory\"));\n+  msg = gfc_build_addr_expr (pchar_type_node, gfc_build_localized_cstring_const\n+\t\t\t\t\t\t(\"Out of memory\"));\n   tmp = fold_build3 (COND_EXPR, void_type_node, null_result,\n \t\t     build_call_expr (gfor_fndecl_os_error, 1, msg),\n \t\t     build_empty_stmt ());"}]}