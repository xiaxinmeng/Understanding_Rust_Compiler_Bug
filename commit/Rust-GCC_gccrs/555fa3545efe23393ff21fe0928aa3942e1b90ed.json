{"sha": "555fa3545efe23393ff21fe0928aa3942e1b90ed", "node_id": "C_kwDOANBUbNoAKDU1NWZhMzU0NWVmZTIzMzkzZmYyMWZlMDkyOGFhMzk0MmUxYjkwZWQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-07T14:42:09Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-07T14:42:09Z"}, "message": "Introduce smul_highpart and umul_highpart RTX for high-part multiplications\n\nThis patch introduces new RTX codes to allow the RTL passes and\nbackends to consistently represent high-part multiplications.\nCurrently, the RTL used by different backends for expanding\nsmul<mode>3_highpart and umul<mode>3_highpart varies greatly,\nwith many but not all choosing to express this something like:\n\n(define_insn \"smuldi3_highpart\"\n  [(set (match_operand:DI 0 \"nvptx_register_operand\" \"=R\")\n       (truncate:DI\n        (lshiftrt:TI\n         (mult:TI (sign_extend:TI\n                   (match_operand:DI 1 \"nvptx_register_operand\" \"R\"))\n                  (sign_extend:TI\n                   (match_operand:DI 2 \"nvptx_register_operand\" \"R\")))\n         (const_int 64))))]\n  \"\"\n  \"%.\\\\tmul.hi.s64\\\\t%0, %1, %2;\")\n\nOne complication with using this \"widening multiplication\" representation\nis that it requires an intermediate in a wider mode, making it difficult\nor impossible to encode a high-part multiplication of the widest supported\ninteger mode.  A second is that it can interfere with optimization; for\nexample simplify-rtx.c contains the comment:\n\n   case TRUNCATE:\n      /* Don't optimize (lshiftrt (mult ...)) as it would interfere\n         with the umulXi3_highpart patterns.  */\n\nHopefully these problems are solved (or reduced) by introducing a\nnew canonical form for high-part multiplications in RTL passes.\nThis also simplifies insn patterns when one operand is constant.\n\nWhilst implementing some constant folding simplifications and\ncompile-time evaluation of these new RTX codes, I noticed that\nthis functionality could also be added for the existing saturating\narithmetic RTX codes.  Then likewise when documenting these new RTX\ncodes, I also took the opportunity to silence the @xref warnings in\ninvoke.texi.\n\n2021-10-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* rtl.def (SMUL_HIGHPART, UMUL_HIGHPART): New RTX codes for\n\trepresenting signed and unsigned high-part multiplication resp.\n\t* simplify-rtx.c (simplify_binary_operation_1) [SMUL_HIGHPART,\n\tUMUL_HIGHPART]: Simplify high-part multiplications by zero.\n\t[SS_PLUS, US_PLUS, SS_MINUS, US_MINUS, SS_MULT, US_MULT,\n\tSS_DIV, US_DIV]: Similar simplifications for saturating\n\tarithmetic.\n\t(simplify_const_binary_operation) [SS_PLUS, US_PLUS, SS_MINUS,\n\tUS_MINUS, SS_MULT, US_MULT, SMUL_HIGHPART, UMUL_HIGHPART]:\n\tImplement compile-time evaluation for constant operands.\n\n\t* dwarf2out.c (mem_loc_descriptor): Skip SMUL_HIGHPART and\n\tUMUL_HIGHPART.\n\t* doc/rtl.texi (smul_highpart, umul_highpart): Document RTX codes.\n\t* doc/md.texi (smul@var{m}3_highpart, umul@var{m3}_highpart):\n\tMention the new smul_highpart and umul_highpart RTX codes.\n\t* doc/invoke.texi: Silence @xref \"compilation\" warnings.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-mmx-paddsb-2.c: New test case.\n\t* gcc.target/i386/sse2-mmx-paddusb-2.c: New test case.\n\t* gcc.target/i386/sse2-mmx-psubsb-2.c: New test case.\n\t* gcc.target/i386/sse2-mmx-psubusb-2.c: New test case.", "tree": {"sha": "8964ea5feb3382bf50c79d57766a3bb831a5e9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8964ea5feb3382bf50c79d57766a3bb831a5e9f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555fa3545efe23393ff21fe0928aa3942e1b90ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555fa3545efe23393ff21fe0928aa3942e1b90ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555fa3545efe23393ff21fe0928aa3942e1b90ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555fa3545efe23393ff21fe0928aa3942e1b90ed/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7d452c092be42a892d00c19561af10f42410b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7d452c092be42a892d00c19561af10f42410b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7d452c092be42a892d00c19561af10f42410b0"}], "stats": {"total": 225, "additions": 216, "deletions": 9}, "files": [{"sha": "050077389a59c55c2f32d052441a5d2dc11b35b0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -3126,7 +3126,7 @@ errors if these functions are not inlined everywhere they are called.\n @itemx -fno-modules-ts\n @opindex fmodules-ts\n @opindex fno-modules-ts\n-Enable support for C++20 modules (@xref{C++ Modules}).  The\n+Enable support for C++20 modules (@pxref{C++ Modules}).  The\n @option{-fno-modules-ts} is usually not needed, as that is the\n default.  Even though this is a C++20 feature, it is not currently\n implicitly enabled by selecting that standard version.\n@@ -33608,7 +33608,7 @@ version selected, although in pre-C++20 versions, it is of course an\n extension.\n \n No new source file suffixes are required or supported.  If you wish to\n-use a non-standard suffix (@xref{Overall Options}), you also need\n+use a non-standard suffix (@pxref{Overall Options}), you also need\n to provide a @option{-x c++} option too.@footnote{Some users like to\n distinguish module interface files with a new suffix, such as naming\n the source @code{module.cppm}, which involves\n@@ -33670,8 +33670,8 @@ to be resolved at the end of compilation.  Without this, imported\n macros are only resolved when expanded or (re)defined.  This option\n detects conflicting import definitions for all macros.\n \n-@xref{C++ Module Mapper} for details of the @option{-fmodule-mapper}\n-family of options.\n+For details of the @option{-fmodule-mapper} family of options,\n+@pxref{C++ Module Mapper}.\n \n @menu\n * C++ Module Mapper::       Module Mapper\n@@ -33888,8 +33888,8 @@ dialect used and imports of the module.@footnote{The precise contents\n of this output may change.} The timestamp is the same value as that\n provided by the @code{__DATE__} & @code{__TIME__} macros, and may be\n explicitly specified with the environment variable\n-@code{SOURCE_DATE_EPOCH}.  @xref{Environment Variables} for further\n-details.\n+@code{SOURCE_DATE_EPOCH}.  For further details\n+@pxref{Environment Variables}.\n \n A set of related CMIs may be copied, provided the relative pathnames\n are preserved."}, {"sha": "ed35b8f2e3645875f6e9640ec051025500c5cef4", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -5776,11 +5776,13 @@ multiplication.\n @item @samp{smul@var{m}3_highpart}\n Perform a signed multiplication of operands 1 and 2, which have mode\n @var{m}, and store the most significant half of the product in operand 0.\n-The least significant half of the product is discarded.\n+The least significant half of the product is discarded.  This may be\n+represented in RTL using a @code{smul_highpart} RTX expression.\n \n @cindex @code{umul@var{m}3_highpart} instruction pattern\n @item @samp{umul@var{m}3_highpart}\n-Similar, but the multiplication is unsigned.\n+Similar, but the multiplication is unsigned.  This may be represented\n+in RTL using an @code{umul_highpart} RTX expression.\n \n @cindex @code{madd@var{m}@var{n}4} instruction pattern\n @item @samp{madd@var{m}@var{n}4}"}, {"sha": "2058997f9e0d1c39a73371d55cdff36a3be2afe2", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -2524,7 +2524,19 @@ not be the same.\n For unsigned widening multiplication, use the same idiom, but with\n @code{zero_extend} instead of @code{sign_extend}.\n \n+@findex smul_highpart\n+@findex umul_highpart\n+@cindex high-part multiplication\n+@cindex multiplication high part\n+@item (smul_highpart:@var{m} @var{x} @var{y})\n+@itemx (umul_highpart:@var{m} @var{x} @var{y})\n+Represents the high-part multiplication of @var{x} and @var{y} carried\n+out in machine mode @var{m}.  @code{smul_highpart} returns the high part\n+of a signed multiplication, @code{umul_highpart} returns the high part\n+of an unsigned multiplication.\n+\n @findex fma\n+@cindex fused multiply-add\n @item (fma:@var{m} @var{x} @var{y} @var{z})\n Represents the @code{fma}, @code{fmaf}, and @code{fmal} builtin\n functions, which compute @samp{@var{x} * @var{y} + @var{z}}"}, {"sha": "20f2c5da023f12baab13d4495c8c7d4e5de10005", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -16809,6 +16809,8 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n     case CONST_FIXED:\n     case CLRSB:\n     case CLOBBER:\n+    case SMUL_HIGHPART:\n+    case UMUL_HIGHPART:\n       break;\n \n     case CONST_STRING:"}, {"sha": "5710a2e34551c6bbc30f6b909dc0194965a3b7d2", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -467,6 +467,11 @@ DEF_RTL_EXPR(SS_MULT, \"ss_mult\", \"ee\", RTX_COMM_ARITH)\n /* Multiplication with unsigned saturation */\n DEF_RTL_EXPR(US_MULT, \"us_mult\", \"ee\", RTX_COMM_ARITH)\n \n+/* Signed high-part multiplication.  */\n+DEF_RTL_EXPR(SMUL_HIGHPART, \"smul_highpart\", \"ee\", RTX_COMM_ARITH)\n+/* Unsigned high-part multiplication.  */\n+DEF_RTL_EXPR(UMUL_HIGHPART, \"umul_highpart\", \"ee\", RTX_COMM_ARITH)\n+\n /* Operand 0 divided by operand 1.  */\n DEF_RTL_EXPR(DIV, \"div\", \"ee\", RTX_BIN_ARITH)\n /* Division with signed saturation */"}, {"sha": "e4fae0b3e57fb0f8ff3f7237ac74b7548ffe60d8", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -4142,11 +4142,36 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n     case US_PLUS:\n     case SS_MINUS:\n     case US_MINUS:\n+      /* Simplify x +/- 0 to x, if possible.  */\n+      if (trueop1 == CONST0_RTX (mode))\n+\treturn op0;\n+      return 0;\n+\n     case SS_MULT:\n     case US_MULT:\n+      /* Simplify x * 0 to 0, if possible.  */\n+      if (trueop1 == CONST0_RTX (mode)\n+\t  && !side_effects_p (op0))\n+\treturn op1;\n+\n+      /* Simplify x * 1 to x, if possible.  */\n+      if (trueop1 == CONST1_RTX (mode))\n+\treturn op0;\n+      return 0;\n+\n+    case SMUL_HIGHPART:\n+    case UMUL_HIGHPART:\n+      /* Simplify x * 0 to 0, if possible.  */\n+      if (trueop1 == CONST0_RTX (mode)\n+\t  && !side_effects_p (op0))\n+\treturn op1;\n+      return 0;\n+\n     case SS_DIV:\n     case US_DIV:\n-      /* ??? There are simplifications that can be done.  */\n+      /* Simplify x / 1 to x, if possible.  */\n+      if (trueop1 == CONST1_RTX (mode))\n+\treturn op0;\n       return 0;\n \n     case VEC_SERIES:\n@@ -5012,6 +5037,51 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t      }\n \t    break;\n \t  }\n+\n+\tcase SS_PLUS:\n+\t  result = wi::add (pop0, pop1, SIGNED, &overflow);\n+ clamp_signed_saturation:\n+\t  if (overflow == wi::OVF_OVERFLOW)\n+\t    result = wi::max_value (GET_MODE_PRECISION (int_mode), SIGNED);\n+\t  else if (overflow == wi::OVF_UNDERFLOW)\n+\t    result = wi::min_value (GET_MODE_PRECISION (int_mode), SIGNED);\n+\t  else if (overflow != wi::OVF_NONE)\n+\t    return NULL_RTX;\n+\t  break;\n+\n+\tcase US_PLUS:\n+\t  result = wi::add (pop0, pop1, UNSIGNED, &overflow);\n+ clamp_unsigned_saturation: \n+\t  if (overflow != wi::OVF_NONE)\n+\t    result = wi::max_value (GET_MODE_PRECISION (int_mode), UNSIGNED);\n+\t  break;\n+\n+\tcase SS_MINUS:\n+\t  result = wi::sub (pop0, pop1, SIGNED, &overflow);\n+\t  goto clamp_signed_saturation;\n+\n+\tcase US_MINUS:\n+\t  result = wi::sub (pop0, pop1, UNSIGNED, &overflow);\n+\t  if (overflow != wi::OVF_NONE)\n+\t    result = wi::min_value (GET_MODE_PRECISION (int_mode), UNSIGNED);\n+\t  break;\n+\n+\tcase SS_MULT:\n+\t  result = wi::mul (pop0, pop1, SIGNED, &overflow);\n+\t  goto clamp_signed_saturation;\n+\n+\tcase US_MULT:\n+\t  result = wi::mul (pop0, pop1, UNSIGNED, &overflow);\n+\t  goto clamp_unsigned_saturation;\n+\n+\tcase SMUL_HIGHPART:\n+\t  result = wi::mul_high (pop0, pop1, SIGNED);\n+\t  break;\n+\n+\tcase UMUL_HIGHPART:\n+\t  result = wi::mul_high (pop0, pop1, UNSIGNED);\n+\t  break;\n+\n \tdefault:\n \t  return NULL_RTX;\n \t}"}, {"sha": "c677884ac5eb3a2d04986e8f2f3927161fbc0004", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddsb-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb-2.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+\n+char foo()\n+{\n+  v8qi tx = { 1, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 2, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_paddsb(tx, ty);\n+  return t[0];\n+}\n+\n+char bar()\n+{\n+  v8qi tx = { 100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_paddsb(tx, ty);\n+  return t[0];\n+}\n+\n+char baz()\n+{\n+  v8qi tx = { -100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { -100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_paddsb(tx, ty);\n+  return t[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$127,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$-128,\" 1 } } */\n+/* { dg-final { scan-assembler-not \"paddsb\\[ \\\\t\\]+%xmm\\[0-9\\]+\" } } */"}, {"sha": "b20891cf6939c84d725125799129cfcaeefdd6db", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddusb-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb-2.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+\n+char foo()\n+{\n+  v8qi tx = { 1, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 2, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_paddusb(tx, ty);\n+  return t[0];\n+}\n+\n+char bar()\n+{\n+  v8qi tx = { 200, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 200, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_paddusb(tx, ty);\n+  return t[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$-1,\" 1 } } */\n+/* { dg-final { scan-assembler-not \"paddusb\\[ \\\\t\\]+%xmm\\[0-9\\]+\" } } */\n+"}, {"sha": "4fc292079d1394d7b4b1cecde59b9799c43eb0c6", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubsb-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubsb-2.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+\n+char foo()\n+{\n+  v8qi tx = { 5, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 2, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_psubsb(tx, ty);\n+  return t[0];\n+}\n+\n+char bar()\n+{\n+  v8qi tx = { -100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_psubsb(tx, ty);\n+  return t[0];\n+}\n+\n+char baz()\n+{\n+  v8qi tx = { 100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { -100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_psubsb(tx, ty);\n+  return t[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$-128,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$127,\" 1 } } */\n+/* { dg-final { scan-assembler-not \"paddsb\\[ \\\\t\\]+%xmm\\[0-9\\]+\" } } */"}, {"sha": "5fc58ef40ff4a5ed19ff34322f00fbab4b6e8103", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubusb-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555fa3545efe23393ff21fe0928aa3942e1b90ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb-2.c?ref=555fa3545efe23393ff21fe0928aa3942e1b90ed", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+\n+char foo()\n+{\n+  v8qi tx = { 5, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 2, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_psubusb(tx, ty);\n+  return t[0];\n+}\n+\n+char bar()\n+{\n+  v8qi tx = { 100, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi ty = { 200, 0, 0, 0, 0, 0, 0, 0 };\n+  v8qi t = __builtin_ia32_psubusb(tx, ty);\n+  return t[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$3,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xorl\\[ \\\\t\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-not \"psubusb\\[ \\\\t\\]+%xmm\\[0-9\\]+\" } } */\n+"}]}