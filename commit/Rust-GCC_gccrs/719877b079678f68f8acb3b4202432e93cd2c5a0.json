{"sha": "719877b079678f68f8acb3b4202432e93cd2c5a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5ODc3YjA3OTY3OGY2OGY4YWNiM2I0MjAyNDMyZTkzY2QyYzVhMA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T14:55:45Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-03T13:33:50Z"}, "message": "aarch64: Use RTL builtins for [su]mlal_high intrinsics\n\nRewrite [su]mlal_high Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add RTL builtin\n\tgenerator macros.\n\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlal_hi<mode>):\n\tRename to...\n\t(aarch64_<su>mlal_hi<mode>_insn): This.\n\t(aarch64_<su>mlal_hi<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmlal_high_s8): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlal_high_s16): Likewise.\n\t(vmlal_high_s32): Likewise.\n\t(vmlal_high_u8): Likewise.\n\t(vmlal_high_u16): Likewise.\n\t(vmlal_high_u32): Likewise.", "tree": {"sha": "5b4ec735ba9b6a1183f1f383fdff5073073543b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b4ec735ba9b6a1183f1f383fdff5073073543b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/719877b079678f68f8acb3b4202432e93cd2c5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719877b079678f68f8acb3b4202432e93cd2c5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719877b079678f68f8acb3b4202432e93cd2c5a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719877b079678f68f8acb3b4202432e93cd2c5a0/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc82826ba61b25855e5a79f4479d009395a7299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc82826ba61b25855e5a79f4479d009395a7299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc82826ba61b25855e5a79f4479d009395a7299"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "8cf57372656c4b30e6ab63974e1f60aaa8236bf8", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=719877b079678f68f8acb3b4202432e93cd2c5a0", "patch": "@@ -240,6 +240,10 @@\n   BUILTIN_VQW (TERNOP, smlsl_hi, 0, NONE)\n   BUILTIN_VQW (TERNOPU, umlsl_hi, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlal_hi<mode>.  */\n+  BUILTIN_VQW (TERNOP, smlal_hi, 0, NONE)\n+  BUILTIN_VQW (TERNOPU, umlal_hi, 0, NONE)\n+\n   BUILTIN_VSQN_HSDI (UNOPUS, sqmovun, 0, NONE)\n \n   /* Implemented by aarch64_sqxtun2<mode>.  */"}, {"sha": "d10cc2a01167953c45a9c62c8bd853a547d03924", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=719877b079678f68f8acb3b4202432e93cd2c5a0", "patch": "@@ -1976,7 +1976,7 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n-(define_insn \"*aarch64_<su>mlal_hi<mode>\"\n+(define_insn \"aarch64_<su>mlal_hi<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (plus:<VWIDE>\n           (mult:<VWIDE>\n@@ -1992,6 +1992,20 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n+(define_expand \"aarch64_<su>mlal_hi<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE>(match_operand:VQW 2 \"register_operand\"))\n+   (match_operand:VQW 3 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>mlal_hi<mode>_insn (operands[0], operands[1],\n+\t\t\t\t\t\t operands[2], p, operands[3]));\n+  DONE;\n+}\n+)\n+\n (define_insn \"*aarch64_<su>mlsl_lo<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (minus:<VWIDE>"}, {"sha": "e994aa1c128c334711392f676cbb93edfc546219", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719877b079678f68f8acb3b4202432e93cd2c5a0/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=719877b079678f68f8acb3b4202432e93cd2c5a0", "patch": "@@ -7316,72 +7316,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_s8 (int16x8_t __a, int8x16_t __b, int8x16_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"smlal2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_hiv16qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlal2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_hiv8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlal2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlal_hiv4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_u8 (uint16x8_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"umlal2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_hiv16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_u16 (uint32x4_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlal2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_hiv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlal_high_u32 (uint64x2_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlal2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlal_hiv4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t"}]}