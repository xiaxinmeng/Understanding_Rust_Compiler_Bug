{"sha": "e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwOGIwNWI4YjYyNTU2OWIzZTc0YzkzZmVhM2M1MmY2YzM1YzFhYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-12-11T18:42:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-12-11T18:42:31Z"}, "message": "re PR target/54121 (ICE at extract_insn, at recog.c:2123 with -fprofile-generate)\n\n\tPR target/54121\n\t* config/sparc/sparc.md (tldo_stb_sp32): Fix pasto.\n\t(tldo_stb_sp64): Likewise.\n\t(tldo_sth_sp32): Likewise.\n\t(tldo_sth_sp64): Likewise.\n\t(tldo_stw_sp32): Likewise.\n\t(tldo_stw_sp64): Likewise.\n\t(tldo_stx_sp64): Likewise.\n\nFrom-SVN: r194410", "tree": {"sha": "fe1a0c97868bcea26ef29cf0e5a090f2d16a341c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1a0c97868bcea26ef29cf0e5a090f2d16a341c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/comments", "author": null, "committer": null, "parents": [{"sha": "df266ea5fe3a76bc03108764befb939cc69b2f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df266ea5fe3a76bc03108764befb939cc69b2f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df266ea5fe3a76bc03108764befb939cc69b2f90"}], "stats": {"total": 123, "additions": 116, "deletions": 7}, "files": [{"sha": "f457101ae2e850645aef1d7114fe614e27ed5ec5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "patch": "@@ -1,3 +1,14 @@\n+2012-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/54121\n+\t* config/sparc/sparc.md (tldo_stb_sp32): Fix pasto.\n+\t(tldo_stb_sp64): Likewise.\n+\t(tldo_sth_sp32): Likewise.\n+\t(tldo_sth_sp64): Likewise.\n+\t(tldo_stw_sp32): Likewise.\n+\t(tldo_stw_sp64): Likewise.\n+\t(tldo_stx_sp64): Likewise.\n+\n 2012-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/55193"}, {"sha": "7ec6302eeca62cb1955f4f3f4412553d79840855", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "patch": "@@ -7757,7 +7757,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t(match_operand:QI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"stb\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7767,7 +7767,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n-\t(match_operand:QI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"stb\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7777,7 +7777,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t(match_operand:HI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"sth\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7787,7 +7787,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n-\t(match_operand:HI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"sth\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7797,7 +7797,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t(match_operand:SI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"st\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7807,7 +7807,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n-\t(match_operand:SI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"stw\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n@@ -7817,7 +7817,7 @@\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n-\t(match_operand:DI 0 \"register_operand\" \"=r\"))]\n+\t(match_operand:DI 0 \"register_operand\" \"r\"))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"stx\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])"}, {"sha": "88e2eecffcdc03e59af5afa0867bc6e1cd46f807", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "patch": "@@ -1,3 +1,7 @@\n+2012-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr54121.c: New test.\n+\n 2012-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/55619"}, {"sha": "b9a208ea84e60e8ec8b8d5b17f1ac91ba1cecbd9", "filename": "gcc/testsuite/gcc.dg/pr54121.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e208b05b8b625569b3e74c93fea3c52f6c35c1aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54121.c?ref=e208b05b8b625569b3e74c93fea3c52f6c35c1aa", "patch": "@@ -0,0 +1,94 @@\n+/* PR target/54121 */\n+/* Reported by Jan Engelhardt <jengelh@inai.de> */\n+\n+/* { dg-do compile { target fpic } } */\n+/* { dg-options \"-std=gnu99 -O -fPIC -fprofile-generate\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef unsigned char uint8_t;\n+\n+extern void *memcpy (void *__restrict __dest,\n+       __const void *__restrict __src, size_t __n)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));\n+\n+typedef enum {\n+ LZMA_OK = 0,\n+ LZMA_STREAM_END = 1,\n+ LZMA_NO_CHECK = 2,\n+ LZMA_UNSUPPORTED_CHECK = 3,\n+ LZMA_GET_CHECK = 4,\n+ LZMA_MEM_ERROR = 5,\n+ LZMA_MEMLIMIT_ERROR = 6,\n+ LZMA_FORMAT_ERROR = 7,\n+ LZMA_OPTIONS_ERROR = 8,\n+ LZMA_DATA_ERROR = 9,\n+ LZMA_BUF_ERROR = 10,\n+ LZMA_PROG_ERROR = 11,\n+} lzma_ret;\n+\n+typedef enum {\n+ LZMA_RUN = 0,\n+ LZMA_SYNC_FLUSH = 1,\n+ LZMA_FULL_FLUSH = 2,\n+ LZMA_FINISH = 3\n+} lzma_action;\n+\n+typedef struct {\n+ void *( *alloc)(void *opaque, size_t nmemb, size_t size);\n+ void ( *free)(void *opaque, void *ptr);\n+ void *opaque;\n+} lzma_allocator;\n+\n+typedef struct lzma_coder_s lzma_coder;\n+\n+typedef struct lzma_next_coder_s lzma_next_coder;\n+\n+typedef struct lzma_filter_info_s lzma_filter_info;\n+\n+typedef lzma_ret (*lzma_init_function)(\n+  lzma_next_coder *next, lzma_allocator *allocator,\n+  const lzma_filter_info *filters);\n+\n+typedef lzma_ret (*lzma_code_function)(\n+  lzma_coder *coder, lzma_allocator *allocator,\n+  const uint8_t *restrict in, size_t *restrict in_pos,\n+  size_t in_size, uint8_t *restrict out,\n+  size_t *restrict out_pos, size_t out_size,\n+  lzma_action action);\n+\n+typedef void (*lzma_end_function)(\n+  lzma_coder *coder, lzma_allocator *allocator);\n+\n+typedef struct {\n+ uint8_t *buf;\n+ size_t pos;\n+ size_t size;\n+} lzma_dict;\n+\n+typedef struct {\n+ lzma_coder *coder;\n+ lzma_ret (*code)(lzma_coder *restrict coder,\n+   lzma_dict *restrict dict, const uint8_t *restrict in,\n+   size_t *restrict in_pos, size_t in_size);\n+} lzma_lz_decoder;\n+\n+struct lzma_coder_s {\n+ lzma_dict dict;\n+ lzma_lz_decoder lz;\n+};\n+\n+lzma_ret\n+decode_buffer(lzma_coder *coder,\n+  const uint8_t *restrict in, size_t *restrict in_pos,\n+  size_t in_size, uint8_t *restrict out, size_t *restrict out_pos)\n+{\n+ while (1) {\n+  const size_t dict_start = coder->dict.pos;\n+  const lzma_ret ret\n+    = coder->lz.code( coder->lz.coder, &coder->dict, in, in_pos, in_size);\n+  const size_t copy_size = coder->dict.pos - dict_start;\n+  memcpy(out + *out_pos, coder->dict.buf + dict_start, copy_size);\n+  if (ret != LZMA_OK || coder->dict.pos < coder->dict.size)\n+   return ret;\n+ }\n+}"}]}