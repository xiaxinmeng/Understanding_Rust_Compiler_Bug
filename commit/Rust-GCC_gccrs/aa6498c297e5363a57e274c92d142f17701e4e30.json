{"sha": "aa6498c297e5363a57e274c92d142f17701e4e30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2NDk4YzI5N2U1MzYzYTU3ZTI3NGM5MmQxNDJmMTc3MDFlNGUzMA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-05-14T21:36:53Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-05-14T21:36:53Z"}, "message": "reload1.c (delete_output_reload): Ignore single USE that was emitted for the pseudo use of this INSN.\n\n\t* reload1.c (delete_output_reload): Ignore single USE that\n\twas emitted for the pseudo use of this INSN.\n\tIf the no reference to REG between OUTPUT_RELOAD_INSN and INSN\n\tremains, we can always delete OUTPUT_RELOAD_INSN.\n\nFrom-SVN: r19762", "tree": {"sha": "f2ad3c92665db1dcbac1c35e41ab86ff894d0999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ad3c92665db1dcbac1c35e41ab86ff894d0999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa6498c297e5363a57e274c92d142f17701e4e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6498c297e5363a57e274c92d142f17701e4e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6498c297e5363a57e274c92d142f17701e4e30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6498c297e5363a57e274c92d142f17701e4e30/comments", "author": null, "committer": null, "parents": [{"sha": "0238952c7937dc3bac9901eb92af5da10f21f31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0238952c7937dc3bac9901eb92af5da10f21f31d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0238952c7937dc3bac9901eb92af5da10f21f31d"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "fce1cc54f2ffd1fc9a1eca006786237634107f69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6498c297e5363a57e274c92d142f17701e4e30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6498c297e5363a57e274c92d142f17701e4e30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa6498c297e5363a57e274c92d142f17701e4e30", "patch": "@@ -1,3 +1,10 @@\n+Fri May 15 05:35:37 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (delete_output_reload): Ignore single USE that\n+\twas emitted for the pseudo use of this INSN.\n+\tIf the no reference to REG between OUTPUT_RELOAD_INSN and INSN\n+\tremains, we can always delete OUTPUT_RELOAD_INSN.\n+\n Thu May 14 18:38:50 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* reload.c (find_reloads): Don't penalize SCRATCH output reload."}, {"sha": "1b4e8e4886f79c4d3d24a9d97f13581f5e93b149", "filename": "gcc/reload1.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6498c297e5363a57e274c92d142f17701e4e30/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6498c297e5363a57e274c92d142f17701e4e30/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=aa6498c297e5363a57e274c92d142f17701e4e30", "patch": "@@ -7401,20 +7401,40 @@ delete_output_reload (insn, j, output_reload_insn)\n \treturn;\n       if ((GET_CODE (i1) == INSN || GET_CODE (i1) == CALL_INSN)\n \t  && reg_mentioned_p (reg, PATTERN (i1)))\n-\treturn;\n+\t{\n+\t  /* If this is just a single USE with an REG_EQUAL note in front\n+\t     of INSN, this is no problem, because this mentions just the\n+\t     address that we are using here.\n+\t     But if there is more than one such USE, the insn might use\n+\t     the operand directly, or another reload might do that.\n+\t     This is analogous to the count_occurences check in the callers.  */\n+\t  int num_occurences = 0;\n+\n+\t  while (GET_CODE (i1) == INSN && GET_CODE (PATTERN (i1)) == USE\n+\t\t && find_reg_note (i1, REG_EQUAL, NULL_RTX))\n+\t    {\n+\t      num_occurences += rtx_equal_p (reg, XEXP (PATTERN (i1), 0)) != 0;\n+\t      i1 = NEXT_INSN (i1);\n+\t    }\n+\t  if (num_occurences == 1 && i1 == insn)\n+\t    break;\n+\t  return;\n+\t}\n     }\n \n-  /* If this insn will store in the pseudo again,\n-     the previous store can be removed.  */\n-  if (reload_out[j] == reload_in[j])\n-    delete_insn (output_reload_insn);\n-\n-  /* See if the pseudo reg has been completely replaced\n+  /* The caller has already checked that REG dies or is set in INSN.\n+     It has also checked that we are optimizing, and thus some inaccurancies\n+     in the debugging information are acceptable.\n+     So we could just delete output_reload_insn.\n+     But in some cases we can improve the debugging information without\n+     sacrificing optimization - maybe even improving the code:\n+     See if the pseudo reg has been completely replaced\n      with reload regs.  If so, delete the store insn\n      and forget we had a stack slot for the pseudo.  */\n-  else if (REG_N_DEATHS (REGNO (reg)) == 1\n-\t   && REG_BASIC_BLOCK (REGNO (reg)) >= 0\n-\t   && find_regno_note (insn, REG_DEAD, REGNO (reg)))\n+  if (reload_out[j] != reload_in[j]\n+      && REG_N_DEATHS (REGNO (reg)) == 1\n+      && REG_BASIC_BLOCK (REGNO (reg)) >= 0\n+      && find_regno_note (insn, REG_DEAD, REGNO (reg)))\n     {\n       rtx i2;\n \n@@ -7436,9 +7456,12 @@ delete_output_reload (insn, j, output_reload_insn)\n \t    break;\n \t  if ((GET_CODE (i2) == INSN || GET_CODE (i2) == CALL_INSN)\n \t      && reg_mentioned_p (reg, PATTERN (i2)))\n-\t    /* Some other ref remains;\n-\t       we can't do anything.  */\n-\t    return;\n+\t    {\n+\t      /* Some other ref remains; just delete the output reload we\n+\t\t know to be dead.  */\n+\t      delete_insn (output_reload_insn);\n+\t      return;\n+\t    }\n \t}\n \n       /* Delete the now-dead stores into this pseudo.  */\n@@ -7464,6 +7487,8 @@ delete_output_reload (insn, j, output_reload_insn)\n       reg_renumber[REGNO (reg)] = REGNO (reload_reg_rtx[j]);\n       alter_reg (REGNO (reg), -1);\n     }\n+  delete_insn (output_reload_insn);\n+\n }\n \f\n /* Output reload-insns to reload VALUE into RELOADREG."}]}