{"sha": "22ec53ec6654575458e90cb0df6cae65442c91dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlYzUzZWM2NjU0NTc1NDU4ZTkwY2IwZGY2Y2FlNjU0NDJjOTFkZA==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-02-03T17:49:36Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-02-03T17:49:36Z"}, "message": "algorithmfwd.h: Add parallelism default for many declarations.\n\n2009-02-03  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/algorithmfwd.h:\n        Add parallelism default for many declarations.\n        * include/parallel/numericfwd.h: Likewise.\n        * include/parallel/iterator.h: Use iterator_traits as usual.\n        * include/parallel/par_loop.h:\n        Include equally_split.h.\n        (for_each_template_random_access_ed):\n        Avoid calling the Result default constructor.\n        * include/parallel/numeric: Replace\n        for_each_template_random_access by\n        for_each_template_random_access_ed in numeric functions.\n\nFrom-SVN: r143902", "tree": {"sha": "7b9bbb4d6b31fd911b11a1bac14e81c3464cb56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9bbb4d6b31fd911b11a1bac14e81c3464cb56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ec53ec6654575458e90cb0df6cae65442c91dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ec53ec6654575458e90cb0df6cae65442c91dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ec53ec6654575458e90cb0df6cae65442c91dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ec53ec6654575458e90cb0df6cae65442c91dd/comments", "author": null, "committer": null, "parents": [{"sha": "70f1628747fd4ec69fce0e26067e1a42f7b2504a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f1628747fd4ec69fce0e26067e1a42f7b2504a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f1628747fd4ec69fce0e26067e1a42f7b2504a"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "ec7aa47c84cad93c7f7bbb599518f09267b40e30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -1,3 +1,17 @@\n+2009-02-03  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/algorithmfwd.h:\n+        Add parallelism default for many declarations.\n+        * include/parallel/numericfwd.h: Likewise.\n+        * include/parallel/iterator.h: Use iterator_traits as usual.\n+        * include/parallel/par_loop.h:\n+        Include equally_split.h.\n+        (for_each_template_random_access_ed):\n+        Avoid calling the Result default constructor.\n+        * include/parallel/numeric: Replace\n+        for_each_template_random_access by\n+        for_each_template_random_access_ed in numeric functions.\n+\n 2009-02-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/os/gnu-linux/os_defines.h: Remove superfluous"}, {"sha": "7aed7c71d4bfadc4e3bbdf7061b6f488238e3166", "filename": "libstdc++-v3/include/parallel/algorithmfwd.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgorithmfwd.h?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -99,7 +99,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Tp>\n     typename iterator_traits<_RAIter>::difference_type\n     count_switch(_RAIter, _RAIter, const _Tp&, random_access_iterator_tag,\n-\t\t __gnu_parallel::_Parallelism);\n+\t\t __gnu_parallel::_Parallelism parallelism\n+\t\t = __gnu_parallel::parallel_unbalanced);\n \n \n   template<typename _IIter, typename _Predicate>\n@@ -121,7 +122,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Predicate>\n     typename iterator_traits<_RAIter>::difference_type\n     count_if_switch(_RAIter, _RAIter, _Predicate, random_access_iterator_tag,\n-\t\t    __gnu_parallel::_Parallelism);\n+\t\t    __gnu_parallel::_Parallelism parallelism\n+\t\t    = __gnu_parallel::parallel_unbalanced);\n \n   // algobase.h\n   template<typename _IIter1, typename _IIter2>\n@@ -228,7 +230,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Function>\n     _Function\n     for_each_switch(_RAIter, _RAIter, _Function, random_access_iterator_tag, \n-\t\t    __gnu_parallel::_Parallelism);\n+\t\t    __gnu_parallel::_Parallelism  parallelism\n+\t\t    = __gnu_parallel::parallel_balanced);\n \n \n   template<typename _FIter, typename _Generator>\n@@ -250,7 +253,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Generator>\n     void\n     generate_switch(_RAIter, _RAIter, _Generator, random_access_iterator_tag, \n-\t\t    __gnu_parallel::_Parallelism);\n+\t\t    __gnu_parallel::_Parallelism parallelism\n+\t\t    = __gnu_parallel::parallel_balanced);\n \n   template<typename _OIter, typename _Size, typename _Generator>\n     _OIter\n@@ -272,7 +276,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Size, typename _Generator>\n     _RAIter\n     generate_n_switch(_RAIter, _Size, _Generator, random_access_iterator_tag, \n-\t\t      __gnu_parallel::_Parallelism);\n+\t\t      __gnu_parallel::_Parallelism parallelism\n+\t\t      = __gnu_parallel::parallel_balanced);\n \n   template<typename _IIter1, typename _IIter2>\n     bool\n@@ -429,7 +434,8 @@ namespace __parallel\n     _RAOIter\n     transform1_switch(_RAIIter, _RAIIter, _RAOIter, UnaryOperation, \n \t\t      random_access_iterator_tag, random_access_iterator_tag, \n-\t\t      __gnu_parallel::_Parallelism);\n+\t\t      __gnu_parallel::_Parallelism parallelism\n+\t\t      = __gnu_parallel::parallel_balanced);\n \n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n@@ -455,7 +461,8 @@ namespace __parallel\n     transform2_switch(_RAIter1, _RAIter1, _RAIter2, _RAIter3, _BiOperation, \n \t\t      random_access_iterator_tag, random_access_iterator_tag, \n \t\t      random_access_iterator_tag,\n-\t\t      __gnu_parallel::_Parallelism);\n+\t\t      __gnu_parallel::_Parallelism parallelism\n+\t\t      = __gnu_parallel::parallel_balanced);\n \n   template<typename _IIter1, typename _IIter2, typename _OIter,\n \t   typename _BiOperation, typename _Tag1,\n@@ -546,7 +553,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Compare>\n     _RAIter\n     max_element_switch(_RAIter, _RAIter, _Compare, random_access_iterator_tag, \n-\t\t       __gnu_parallel::_Parallelism);\n+\t\t       __gnu_parallel::_Parallelism parallelism\n+\t\t       = __gnu_parallel::parallel_balanced);\n \n \n   template<typename _IIter1, typename _IIter2, typename _OIter>\n@@ -615,7 +623,8 @@ namespace __parallel\n   template<typename _RAIter, typename _Compare>\n     _RAIter\n     min_element_switch(_RAIter, _RAIter, _Compare, random_access_iterator_tag, \n-\t\t       __gnu_parallel::_Parallelism);\n+\t\t       __gnu_parallel::_Parallelism parallelism\n+\t\t       = __gnu_parallel::parallel_balanced);\n \n   template<typename _RAIter>\n     void"}, {"sha": "95ef844350fbeafd7c7aee0e42f87f49c2da6c0f", "filename": "libstdc++-v3/include/parallel/iterator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fiterator.h?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -131,7 +131,8 @@ namespace __gnu_parallel\n     public:\n       typedef IteratorCategory iterator_category;\n       typedef void value_type;\n-      typedef typename Iterator1::difference_type difference_type;\n+      typedef typename std::iterator_traits<Iterator1>::difference_type\n+                                                            difference_type;\n       typedef type* pointer;\n       typedef type& reference;\n "}, {"sha": "8706e3f4c014fab24fea8e7c8ab930204a8cbf30", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -103,13 +103,13 @@ namespace __parallel\n \t  __gnu_parallel::accumulate_selector<_RandomAccessIterator>\n \t    my_selector;\n \t  __gnu_parallel::\n-\t    for_each_template_random_access(begin, end,\n+\t    for_each_template_random_access_ed(begin, end,\n \t\t\t\t\t    __gnu_parallel::nothing(),\n \t\t\t\t\t    my_selector,\n \t\t\t\t\t    __gnu_parallel::\n \t\t\t\t\t    accumulate_binop_reduct\n \t\t\t\t\t    <BinaryOperation>(binary_op),\n-\t\t\t\t\t    res, res, -1, parallelism_tag);\n+\t\t\t\t\t    res, res, -1);\n \t  return res;\n \t}\n       else\n@@ -211,9 +211,9 @@ namespace __parallel\n \t    inner_product_selector<RandomAccessIterator1,\n \t    RandomAccessIterator2, T> my_selector(first1, first2);\n \t  __gnu_parallel::\n-\t    for_each_template_random_access(first1, last1, binary_op2,\n+\t    for_each_template_random_access_ed(first1, last1, binary_op2,\n \t\t\t\t\t    my_selector, binary_op1,\n-\t\t\t\t\t    res, res, -1, parallelism_tag);\n+\t\t\t\t\t    res, res, -1);\n \t  return res;\n \t}\n       else\n@@ -432,10 +432,10 @@ namespace __parallel\n \t    end_pair(end, result + (end - begin));\n \t  __gnu_parallel::adjacent_difference_selector<ip> functionality;\n \t  __gnu_parallel::\n-\t    for_each_template_random_access(begin_pair, end_pair, bin_op,\n+\t    for_each_template_random_access_ed(begin_pair, end_pair, bin_op,\n \t\t\t\t\t    functionality,\n \t\t\t\t\t    __gnu_parallel::dummy_reduct(),\n-\t\t\t\t\t    dummy, dummy, -1, parallelism_tag);\n+\t\t\t\t\t    dummy, dummy, -1);\n \t  return functionality.finish_iterator;\n \t}\n       else"}, {"sha": "b9bbe967fe20834e24ebadc88d7097109a894140", "filename": "libstdc++-v3/include/parallel/numericfwd.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumericfwd.h?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -83,7 +83,8 @@ namespace __parallel\n     _Tp\n     accumulate_switch(_RAIter, _RAIter, _Tp, _BinaryOper,\n \t\t      random_access_iterator_tag,\n-\t\t      __gnu_parallel::_Parallelism);\n+\t\t      __gnu_parallel::_Parallelism parallelism\n+\t\t      = __gnu_parallel::parallel_unbalanced);\n \n   template<typename _IIter, typename _OIter>\n     _OIter\n@@ -124,7 +125,8 @@ namespace __parallel\n     adjacent_difference_switch(_IIter, _IIter, _OIter, _BinaryOper, \n \t\t\t       random_access_iterator_tag, \n \t\t\t       random_access_iterator_tag, \n-\t\t\t       __gnu_parallel::_Parallelism);\n+\t\t\t       __gnu_parallel::_Parallelism parallelism\n+\t\t\t       = __gnu_parallel::parallel_unbalanced);\n \n   template<typename _IIter1, typename _IIter2, typename _Tp>\n     _Tp\n@@ -164,7 +166,8 @@ namespace __parallel\n     inner_product_switch(_RAIter1, _RAIter1, _RAIter2, _Tp, BinaryFunction1, \n \t\t\t BinaryFunction2, random_access_iterator_tag, \n \t\t\t random_access_iterator_tag, \n-\t\t\t __gnu_parallel::_Parallelism);\n+\t\t\t __gnu_parallel::_Parallelism\n+\t\t\t = __gnu_parallel::parallel_unbalanced);\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n \t   typename _BinaryFunction1, typename _BinaryFunction2,"}, {"sha": "a028ecb6af6f25787d49266e7fe9587fc3e96261", "filename": "libstdc++-v3/include/parallel/par_loop.h", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec53ec6654575458e90cb0df6cae65442c91dd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h?ref=22ec53ec6654575458e90cb0df6cae65442c91dd", "patch": "@@ -42,6 +42,7 @@\n #include <omp.h>\n #include <parallel/settings.h>\n #include <parallel/base.h>\n+#include <parallel/equally_split.h>\n \n namespace __gnu_parallel\n {\n@@ -80,9 +81,9 @@ template<typename RandomAccessIterator,\n   {\n     typedef std::iterator_traits<RandomAccessIterator> traits_type;\n     typedef typename traits_type::difference_type difference_type;\n-\n     const difference_type length = end - begin;\n     Result *thread_results;\n+    bool* constructed;\n \n     thread_index_t num_threads =\n       __gnu_parallel::min<difference_type>(get_max_threads(), length);\n@@ -92,37 +93,46 @@ template<typename RandomAccessIterator,\n #       pragma omp single\n           {\n             num_threads = omp_get_num_threads();\n-            thread_results = new Result[num_threads];\n+            thread_results = static_cast<Result*>(\n+                                ::operator new(num_threads * sizeof(Result)));\n+            constructed = new bool[num_threads];\n           }\n \n         thread_index_t iam = omp_get_thread_num();\n \n         // Neutral element.\n-        Result reduct = Result();\n+        Result* reduct = static_cast<Result*>(::operator new(sizeof(Result)));\n \n         difference_type\n             start = equally_split_point(length, num_threads, iam),\n             stop = equally_split_point(length, num_threads, iam + 1);\n \n         if (start < stop)\n           {\n-            reduct = f(o, begin + start);\n+            new(reduct) Result(f(o, begin + start));\n             ++start;\n+            constructed[iam] = true;\n           }\n+        else\n+          constructed[iam] = false;\n \n         for (; start < stop; ++start)\n-          reduct = r(reduct, f(o, begin + start));\n+          *reduct = r(*reduct, f(o, begin + start));\n \n-        thread_results[iam] = reduct;\n+        thread_results[iam] = *reduct;\n       } //parallel\n \n     for (thread_index_t i = 0; i < num_threads; ++i)\n-      output = r(output, thread_results[i]);\n+        if (constructed[i])\n+            output = r(output, thread_results[i]);\n \n     // Points to last element processed (needed as return value for\n     // some algorithms like transform).\n     f.finish_iterator = begin + length;\n \n+    delete[] thread_results;\n+    delete[] constructed;\n+\n     return o;\n   }\n "}]}