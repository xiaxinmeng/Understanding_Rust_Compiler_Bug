{"sha": "d62586ee567bbbdab9fe8bb5829f032431d57098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyNTg2ZWU1NjdiYmJkYWI5ZmU4YmI1ODI5ZjAzMjQzMWQ1NzA5OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-20T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-20T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "24518a439e056de6426ad729d3b5d6da1e2fa9ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24518a439e056de6426ad729d3b5d6da1e2fa9ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62586ee567bbbdab9fe8bb5829f032431d57098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62586ee567bbbdab9fe8bb5829f032431d57098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62586ee567bbbdab9fe8bb5829f032431d57098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62586ee567bbbdab9fe8bb5829f032431d57098/comments", "author": null, "committer": null, "parents": [{"sha": "d3f293348768667c07770e433ff00af51fee73a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f293348768667c07770e433ff00af51fee73a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3f293348768667c07770e433ff00af51fee73a2"}], "stats": {"total": 402, "additions": 401, "deletions": 1}, "files": [{"sha": "f0016e9445c535309c41f19376a93baebe3a10b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,180 @@\n+2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91029\n+\t* range-op.cc (operator_trunc_mod::op1_range): Don't require signed\n+\ttypes, nor require that op2 >= 0.  Implement (a % b) >= x && x > 0\n+\timplies a >= x and (a % b) <= x && x < 0 implies a <= x.\n+\t(operator_trunc_mod::op2_range): New method.\n+\n+2020-11-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/93781\n+\t* range-op.cc (get_shift_range): Rename from\n+\tundefined_shift_range_check and now return valid shift ranges.\n+\t(operator_lshift::fold_range): Use result from get_shift_range.\n+\t(operator_rshift::fold_range): Ditto.\n+\n+2020-11-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fold-const.c (operand_compare::operand_equal_p): Fix thinko in\n+\tCOMPONENT_REF handling and guard types_same_for_odr by\n+\tvirtual_method_call_p.\n+\t(operand_compare::hash_operand): Likewise.\n+\n+2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97860\n+\t* tree.c (array_type_nelts): For complete arrays with zero min\n+\tand NULL max and zero size return -1.\n+\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* configure.ac: Add tests for fstatat, sighandler_t, O_CLOEXEC,\n+\tunix-domain and ipv6 sockets.\n+\t* config.in: Rebuilt.\n+\t* configure: Rebuilt.\n+\n+2020-11-19  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/alu-zext.md: Add lmbd patterns for zero_extend\n+\tvariants.\n+\t* config/pru/pru.c (enum pru_builtin): Add HALT and LMBD.\n+\t(pru_init_builtins): Ditto.\n+\t(pru_builtin_decl): Ditto.\n+\t(pru_expand_builtin): Ditto.\n+\t* config/pru/pru.h (CLZ_DEFINED_VALUE_AT_ZERO): Define PRU\n+\tvalue for CLZ with zero value parameter.\n+\t* config/pru/pru.md: Add halt, lmbd and clz patterns.\n+\t* doc/extend.texi: Document PRU builtins.\n+\n+2020-11-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/invoke.texi (-fvect-cost-model): Add a very-cheap model.\n+\t* common.opt (fvect-cost-model=): Add very-cheap as a possible option.\n+\t(fsimd-cost-model=): Likewise.\n+\t(vect_cost_model): Add very-cheap.\n+\t* flag-types.h (vect_cost_model): Add VECT_COST_MODEL_VERY_CHEAP.\n+\tPut the values in order of increasing aggressiveness.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Use\n+\trange checks when comparing against VECT_COST_MODEL_CHEAP.\n+\t(vect_prune_runtime_alias_test_list): Do not allow any alias\n+\tchecks for the very-cheap cost model.\n+\t* tree-vect-loop.c (vect_analyze_loop_costing): Do not allow\n+\tany peeling for the very-cheap cost model.  Also require one\n+\titeration of the vector loop to pay for itself.\n+\n+2020-11-19  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (neoversen1_tunings): Use new\n+\tcortexa76_extra_costs.\n+\t(neoversev1_tunings): Likewise.\n+\t(neoversen2_tunines): Likewise.\n+\t* config/arm/aarch-cost-tables.h (cortexa76_extra_costs):\n+\tadd new costs.\n+\n+2020-11-19  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_cpymem): Cleanup code and\n+\tcomments, tweak expansion decisions and improve tail expansion.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (operand_compare::hash_operand): Fix typo.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-reassoc.c (get_rank): Refactor to consistently\n+\tuse the cache and dump ranks assigned.\n+\n+2020-11-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fold-const.c (operand_compare::operand_equal_p): More OBJ_TYPE_REF\n+\tmatching to correct place; drop OEP_ADDRESS_OF for TOKEN, OBJECT and\n+\tclass.\n+\t(operand_compare::hash_operand): Hash ODR type for OBJ_TYPE_REF.\n+\n+2020-11-19  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md: Add vec_widen_lshift_hi/lo<mode>\n+\tpatterns.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Fix for widen_lshift\n+\tcase.\n+\n+2020-11-19  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* doc/generic.texi: Document new widen_plus/minus_lo/hi tree codes.\n+\t* doc/md.texi: Document new widenening add/subtract hi/lo optabs.\n+\t* expr.c (expand_expr_real_2): Add widen_add, widen_subtract cases.\n+\t* optabs-tree.c (optab_for_tree_code): Add case for widening optabs.\n+\t* optabs.def (OPTAB_D): Define vectorized widen add, subtracts.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Add case for widening adds,\n+\tsubtracts.\n+\t* tree-inline.c (estimate_operator_cost): Add case for widening adds,\n+\tsubtracts.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Add case for\n+\twidening adds, subtracts\n+\t* tree-vect-patterns.c (vect_recog_widen_add_pattern): New recog\n+\tpattern.\n+\t(vect_recog_widen_sub_pattern): New recog pattern.\n+\t(vect_recog_average_pattern): Update widened add code.\n+\t(vect_recog_average_pattern): Update widened add code.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Add case for widened add,\n+\tsubtract.\n+\t(supportable_widening_operation): Add case for widened add, subtract.\n+\t* tree.def\n+\t(WIDEN_PLUS_EXPR): New tree code.\n+\t(WIDEN_MINUS_EXPR): New tree code.\n+\t(VEC_WIDEN_ADD_HI_EXPR): New tree code.\n+\t(VEC_WIDEN_PLUS_LO_EXPR): New tree code.\n+\t(VEC_WIDEN_MINUS_HI_EXPR): New tree code.\n+\t(VEC_WIDEN_MINUS_LO_EXPR): New tree code.\n+\n+2020-11-19  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md: New patterns\n+\tvec_widen_saddl_lo/hi_<mode>.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97901\n+\t* tree-ssa-propagate.c (clean_up_loop_closed_phi): Compute\n+\tdominators and use replace_uses_by.\n+\n+2020-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.h (struct fixed_point_type_info) <scale_factor>: Turn\n+\tnumerator and denominator into a tree.\n+\t* dwarf2out.c (base_type_die): In the case of a fixed-point type\n+\twith arbitrary scale factor, call add_scalar_info on numerator and\n+\tdenominator to emit the appropriate attributes.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97897\n+\t* tree-complex.c (complex_propagate::visit_stmt): Make sure\n+\tabnormally used SSA names are VARYING.\n+\t(complex_propagate::visit_phi): Likewise.\n+\t* tree-ssa.c (verify_phi_args): Verify PHI arguments on abnormal\n+\tedges are SSA names.\n+\n+2020-11-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*<absneg:code><mode>2_i387_1):\n+\tDisable for TARGET_SSE_MATH modes.\n+\n+2020-11-19  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/constraints.md (R constraint): Add argument to call\n+\tto h8300_shift_needs_scratch_p.\n+\t(S and T constraints): Similary.\n+\t* config/h8300/h8300-protos.h: Update h8300_shift_needs_scratch_p\n+\tprototype.\n+\t* config/h8300/h8300.c (expand_a_shift): Emit a different pattern\n+\tif the shift does not require a scratch register.\n+\t(h8300_shift_needs_scratch_p): Refine to be more accurate.\n+\t* config/h8300/shiftrotate.md (shiftqi_noscratch): New pattern.\n+\t(shifthi_noscratch, shiftsi_noscratch): Similarly.\n+\n 2020-11-18  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR middle-end/85811"}, {"sha": "e732e26b1c70f2d9753ea1601fa30c51982e16c1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1 +1 @@\n-20201119\n+20201120"}, {"sha": "162ca0716ab2a1d1703b9797d55c756b5a2c1584", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,18 @@\n+2020-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/97805\n+\t* adaint.c: Include climits in C++ and limits.h otherwise.\n+\n+2020-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.adb (Is_Handled_Scale_Factor): Delete.\n+\t(Get_Encoded_Name): Do not call it.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <Fixed_Point_Type>:\n+\tTidy up and always use a meaningful description for arbitrary\n+\tscale factors.\n+\t* gcc-interface/misc.c (gnat_get_fixed_point_type_info): Remove\n+\tobsolete block and adjust the description of the scale factor.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-interface/Make-lang.in (ada.serial): New goal."}, {"sha": "36c863680e100dbb997b78167685c156a6243908", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,9 @@\n+2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97860\n+\t* c-decl.c (get_parm_array_spec): Bail out of nelts is\n+\terror_operand_p.\n+\n 2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (c.serial): New goal."}, {"sha": "b710170236d0f8398abf753a47e7a19b72c92c26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,48 @@\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct spec_entry): Moved from pt.c.\n+\t(walk_specializations, match_mergeable_specialization)\n+\t(get_mergeable_specialization_flags)\n+\t(add_mergeable_specialization): Declare.\n+\t* pt.c (struct spec_entry): Moved to cp-tree.h.\n+\t(walk_specializations, match_mergeable_specialization)\n+\t(get_mergeable_specialization_flags)\n+\t(add_mergeable_specialization): New.\n+\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct constexpr_fundef): Moved from constexpr.c.\n+\t(maybe_save_constexpr_fundef): Declare.\n+\t(register_constexpr_fundef): Take constexpr_fundef object, return\n+\tvoid.\n+\t* decl.c (mabe_save_function_definition): Delete, functionality\n+\tmoved to maybe_save_constexpr_fundef.\n+\t(emit_coro_helper, finish_function): Adjust.\n+\t* constexpr.c (struct constexpr_fundef): Moved to cp-tree.h.\n+\t(constexpr_fundef_hasher::equal): Constify.\n+\t(constexpr_fundef_hasher::hash): Constify.\n+\t(retrieve_constexpr_fundef): Make non-static.\n+\t(maybe_save_constexpr_fundef): Break out checking and duplication\n+\tfrom ...\n+\t(register_constexpr_fundef): ... here.  Just register the constexpr.\n+\n+2020-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97523\n+\t* init.c (build_new): When value-initializing an array new,\n+\tleave the INIT as an empty vector.\n+\n+2020-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97895\n+\t* pt.c (do_auto_deduction): Don't crash when the constructor has\n+\tzero elements.\n+\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97905\n+\t* decl.c (duplicate_decls): Relax new assert.\n+\n 2020-11-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* parser.c (cp_parser_objc_valid_prefix_attributes): Check"}, {"sha": "88fd83d68c197614015053a6c21b4f882c4d764f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,77 @@\n+2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91029\n+\t* gcc.dg/tree-ssa/pr91029-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr91029-2.c: New test.\n+\n+2020-11-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr93781-1.c: New.\n+\t* gcc.dg/tree-ssa/pr93781-2.c: New.\n+\t* gcc.dg/tree-ssa/pr93781-3.c: New.\n+\n+2020-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/97860\n+\t* gcc.dg/pr97860.c: New test.\n+\n+2020-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97523\n+\t* g++.dg/expr/anew5.C: New test.\n+\t* g++.dg/expr/anew6.C: New test.\n+\n+2020-11-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97895\n+\t* g++.dg/cpp0x/auto54.C: New test.\n+\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97905\n+\t* g++.dg/lookup/pr97905.C: New.\n+\n+2020-11-19  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/halt.c: New test.\n+\t* gcc.target/pru/lmbd.c: New test.\n+\n+2020-11-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-cost-model-1.c: New test.\n+\t* gcc.dg/vect/vect-cost-model-2.c: Likewise.\n+\t* gcc.dg/vect/vect-cost-model-3.c: Likewise.\n+\t* gcc.dg/vect/vect-cost-model-4.c: Likewise.\n+\t* gcc.dg/vect/vect-cost-model-5.c: Likewise.\n+\t* gcc.dg/vect/vect-cost-model-6.c: Likewise.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/pr97897.c: Add dg-options.\n+\n+2020-11-19  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* gcc.target/aarch64/vect-widen-lshift.c: New test.\n+\n+2020-11-19  Joel Hutton  <joel.hutton@arm.com>\n+\n+\t* gcc.target/aarch64/vect-widen-add.c: New test.\n+\t* gcc.target/aarch64/vect-widen-sub.c: New test.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97901\n+\t* gcc.dg/torture/pr97901.c: New testcase.\n+\n+2020-11-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97897\n+\t* gcc.dg/pr97897.c: New testcase.\n+\n+2020-11-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr97887.c: New test.\n+\n 2020-11-18  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR middle-end/85811"}, {"sha": "144308396fbd2ee6241148438c92f36de7f76074", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,36 @@\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (enum cpp_main_search): New.\n+\t(struct cpp_options): Add main_search field.\n+\t(cpp_main_loc): Declare.\n+\t(cpp_retrofit_as_include): Declare.\n+\t* internal.h (struct cpp_reader): Add main_loc field.\n+\t(_cpp_in_main_source_file): Not main if main is a header.\n+\t* init.c (cpp_read_main_file): Use main_search option to locate\n+\tmain file.  Set main_loc\n+\t* files.c (cpp_retrofit_as_include): New.\n+\n+2020-11-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* internal.h (cpp_in_system_header): Rename to ...\n+\t(_cpp_in_system_header): ... here.\n+\t(cpp_in_primary_file): Rename to ...\n+\t(_cpp_in_main_source_file): ... here.  Compare main_file equality\n+\tand check main_search value.\n+\t* lex.c (maybe_va_opt_error, _cpp_lex_direct): Adjust for rename.\n+\t* macro.c (_cpp_builtin_macro_text): Likewise.\n+\t(replace_args): Likewise.\n+\t* directives.c (do_include_next): Likewise.\n+\t(do_pragma_once, do_pragma_system_header): Likewise.\n+\t* files.c (struct _cpp_file): Delete main_file field.\n+\t(pch_open): Check pfile->main_file equality.\n+\t(make_cpp_file): Drop cpp_reader parm, don't set main_file.\n+\t(_cpp_find_file): Adjust.\n+\t(_cpp_stack_file): Check pfile->main_file equality.\n+\t(struct report_missing_guard_data): Add cpp_reader field.\n+\t(report_missing_guard): Check pfile->main_file equality.\n+\t(_cpp_report_missing_guards): Adjust.\n+\n 2020-11-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (struct cpp_options): Add module_directives"}, {"sha": "53b2d76cd0561ca14b7fb7a1ce6cc98a28487315", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62586ee567bbbdab9fe8bb5829f032431d57098/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62586ee567bbbdab9fe8bb5829f032431d57098/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d62586ee567bbbdab9fe8bb5829f032431d57098", "patch": "@@ -1,3 +1,53 @@\n+2020-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95989\n+\t* config/os/gnu-linux/os_defines.h (_GLIBCXX_NATIVE_THREAD_ID):\n+\tDefine new macro to get reliable thread ID.\n+\t* include/bits/std_thread.h: (this_thread::get_id): Use new\n+\tmacro if it's defined.\n+\t* testsuite/30_threads/jthread/95989.cc: New test.\n+\t* testsuite/30_threads/this_thread/95989.cc: New test.\n+\n+2020-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/async/async.cc: Include <thread>.\n+\t* testsuite/30_threads/future/members/93456.cc: Likewise.\n+\n+2020-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92546\n+\t* include/Makefile.am: Add new <bits/std_thread.h> header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/future: Include new header instead of <thread>.\n+\t* include/std/stop_token: Include new header instead of\n+\t<bits/gthr.h>.\n+\t(stop_token::_S_yield()): Use this_thread::yield().\n+\t(_Stop_state_t::_M_requester): Change type to std::thread::id.\n+\t(_Stop_state_t::_M_request_stop()): Use this_thread::get_id().\n+\t(_Stop_state_t::_M_remove_callback(_Stop_cb*)): Likewise.\n+\tUse __is_single_threaded() to decide whether to synchronize.\n+\t* include/std/thread (thread, operator==, this_thread::get_id)\n+\t(this_thread::yield): Move to new header.\n+\t(operator<=>, operator!=, operator<, operator<=, operator>)\n+\t(operator>=, hash<thread::id>, operator<<): Define even when\n+\tgthreads not available.\n+\t* src/c++11/thread.cc: Include <memory>.\n+\t* include/bits/std_thread.h: New file.\n+\t(thread, operator==, this_thread::get_id, this_thread::yield):\n+\tDefine even when gthreads not available.\n+\t[!_GLIBCXX_HAS_GTHREADS] (thread::join, thread::detach)\n+\t(thread::hardware_concurrency): Define inline.\n+\n+2020-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93421\n+\tPR libstdc++/93456\n+\t* src/c++11/futex.cc (syscall_time_t): New typedef for\n+\tthe type of the syscall_timespec::tv_sec member.\n+\t(relative_timespec, _M_futex_wait_until)\n+\t(_M_futex_wait_until_steady): Use syscall_time_t in overflow\n+\tchecks, not time_t.\n+\n 2020-11-18  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (join_view::_Iterator::_M_satisfy): Uglify"}]}