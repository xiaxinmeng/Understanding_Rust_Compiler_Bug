{"sha": "cafbaf85f5da81f8c37b54c303601a75bd278001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmYmFmODVmNWRhODFmOGMzN2I1NGMzMDM2MDFhNzViZDI3ODAwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-02T23:17:08Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-02T23:17:08Z"}, "message": "(save_tree_status): Add argument to indicate that the new function is not a nested function.\n\n(save_tree_status): Add argument to indicate that the new\n        function is not a nested function.\n        (restore_tree_status): Ditto.\n\nFrom-SVN: r8206", "tree": {"sha": "dfc589efcea31f2454b0db210051ae4c18432951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc589efcea31f2454b0db210051ae4c18432951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cafbaf85f5da81f8c37b54c303601a75bd278001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafbaf85f5da81f8c37b54c303601a75bd278001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafbaf85f5da81f8c37b54c303601a75bd278001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafbaf85f5da81f8c37b54c303601a75bd278001/comments", "author": null, "committer": null, "parents": [{"sha": "e4a4639ef018444349825504d79025ff56e68f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a4639ef018444349825504d79025ff56e68f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a4639ef018444349825504d79025ff56e68f32"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "1787d0c6b9dcbbb79f04d0e61acb765bd6d960e5", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cafbaf85f5da81f8c37b54c303601a75bd278001/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cafbaf85f5da81f8c37b54c303601a75bd278001/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cafbaf85f5da81f8c37b54c303601a75bd278001", "patch": "@@ -319,8 +319,9 @@ gcc_obstack_init (obstack)\n    This is used before starting a nested function.  */\n \n void\n-save_tree_status (p)\n+save_tree_status (p, toplevel)\n      struct function *p;\n+     int toplevel;\n {\n   p->all_types_permanent = all_types_permanent;\n   p->momentary_stack = momentary_stack;\n@@ -334,10 +335,15 @@ save_tree_status (p)\n   p->saveable_obstack = saveable_obstack;\n   p->rtl_obstack = rtl_obstack;\n \n-  /* Objects that need to be saved in this function can be in the nonsaved\n-     obstack of the enclosing function since they can't possibly be needed\n-     once it has returned.  */\n-  function_maybepermanent_obstack = function_obstack;\n+  if (! toplevel)\n+    {\n+      /* Objects that need to be saved in this function can be in the nonsaved\n+\t obstack of the enclosing function since they can't possibly be needed\n+\t once it has returned.  */\n+      function_maybepermanent_obstack = function_obstack;\n+      maybepermanent_firstobj\n+\t= (char *) obstack_finish (function_maybepermanent_obstack);\n+    }\n \n   function_obstack = (struct obstack *) xmalloc (sizeof (struct obstack));\n   gcc_obstack_init (function_obstack);\n@@ -348,30 +354,32 @@ save_tree_status (p)\n \n   momentary_firstobj = (char *) obstack_finish (&momentary_obstack);\n   momentary_function_firstobj = momentary_firstobj;\n-  maybepermanent_firstobj\n-    = (char *) obstack_finish (function_maybepermanent_obstack);\n }\n \n /* Restore all variables describing the current status from the structure *P.\n    This is used after a nested function.  */\n \n void\n-restore_tree_status (p)\n+restore_tree_status (p, toplevel)\n      struct function *p;\n+     int toplevel;\n {\n   all_types_permanent = p->all_types_permanent;\n   momentary_stack = p->momentary_stack;\n \n   obstack_free (&momentary_obstack, momentary_function_firstobj);\n \n-  /* Free saveable storage used by the function just compiled and not\n-     saved.\n-\n-     CAUTION: This is in function_obstack of the containing function.  So\n-     we must be sure that we never allocate from that obstack during\n-     the compilation of a nested function if we expect it to survive past the\n-     nested function's end.  */\n-  obstack_free (function_maybepermanent_obstack, maybepermanent_firstobj);\n+  if (! toplevel)\n+    {\n+      /* Free saveable storage used by the function just compiled and not\n+\t saved.\n+\n+\t CAUTION: This is in function_obstack of the containing function.\n+\t So we must be sure that we never allocate from that obstack during\n+\t the compilation of a nested function if we expect it to survive\n+\t past the nested function's end.  */\n+      obstack_free (function_maybepermanent_obstack, maybepermanent_firstobj);\n+    }\n \n   obstack_free (function_obstack, 0);\n   free (function_obstack);"}]}