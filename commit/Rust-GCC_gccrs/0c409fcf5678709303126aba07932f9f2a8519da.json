{"sha": "0c409fcf5678709303126aba07932f9f2a8519da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0MDlmY2Y1Njc4NzA5MzAzMTI2YWJhMDc5MzJmOWYyYTg1MTlkYQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T14:14:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T14:31:10Z"}, "message": "Fix bug with monomorphizing of trait items\n\nWhen we monomorphize functions we need to check if we have already\ngenerated this function already. All function items have a DefId which is\nunique for the crate and HIR item this means for generic implementations\nof an item we end up with mappings of:\n\n  DefId -> [ (concete-tyty-fntype, GCC::Function), ... ]\n\nSo for any function we can lookup for that DefId is there a suitable\nversion of this function already compiled. This was working untill we have\ngeneric trait items which also need to be handled in the same way.\n\nFixes #668", "tree": {"sha": "9fdbc8c17b58d73ba543b108892b913baffb7a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fdbc8c17b58d73ba543b108892b913baffb7a88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c409fcf5678709303126aba07932f9f2a8519da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c409fcf5678709303126aba07932f9f2a8519da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c409fcf5678709303126aba07932f9f2a8519da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c409fcf5678709303126aba07932f9f2a8519da/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0254d7efe135ca3de755504a1f042010ee45786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0254d7efe135ca3de755504a1f042010ee45786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0254d7efe135ca3de755504a1f042010ee45786"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "3a92c32430218525072e142497ba140c5145e005", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=0c409fcf5678709303126aba07932f9f2a8519da", "patch": "@@ -160,32 +160,41 @@ class Context\n     return true;\n   }\n \n-  void insert_function_decl (HirId id, ::Bfunction *fn,\n-\t\t\t     const TyTy::BaseType *ref)\n+  void insert_function_decl (const TyTy::FnType *ref, ::Bfunction *fn)\n   {\n+    auto id = ref->get_ty_ref ();\n+    auto dId = ref->get_id ();\n+\n     rust_assert (compiled_fn_map.find (id) == compiled_fn_map.end ());\n     compiled_fn_map[id] = fn;\n-    if (ref != nullptr)\n-      {\n-\tstd::pair<HirId, ::Bfunction *> elem (id, fn);\n-\tmono_fns[ref] = std::move (elem);\n-      }\n+\n+    auto it = mono_fns.find (dId);\n+    if (it == mono_fns.end ())\n+      mono_fns[dId] = {};\n+\n+    mono_fns[dId].push_back ({ref, fn});\n   }\n \n   bool lookup_function_decl (HirId id, ::Bfunction **fn,\n+\t\t\t     DefId dId = UNKNOWN_DEFID,\n \t\t\t     const TyTy::BaseType *ref = nullptr)\n   {\n     // for for any monomorphized fns\n     if (ref != nullptr)\n       {\n-\tfor (auto it = mono_fns.begin (); it != mono_fns.end (); it++)\n+\trust_assert (dId != UNKNOWN_DEFID);\n+\n+\tauto it = mono_fns.find (dId);\n+\tif (it == mono_fns.end ())\n+\t  return false;\n+\n+\tfor (auto &e : mono_fns[dId])\n \t  {\n-\t    std::pair<HirId, ::Bfunction *> &val = it->second;\n-\t    const TyTy::BaseType *r = it->first;\n+\t    const TyTy::BaseType *r = e.first;\n+\t    ::Bfunction *f = e.second;\n \t    if (ref->is_equal (*r))\n \t      {\n-\t\t*fn = val.second;\n-\n+\t\t*fn = f;\n \t\treturn true;\n \t      }\n \t  }\n@@ -316,18 +325,19 @@ class Context\n   std::map<HirId, ::Bfunction *> compiled_fn_map;\n   std::map<HirId, ::Bexpression *> compiled_consts;\n   std::map<HirId, ::Blabel *> compiled_labels;\n-  std::vector< ::std::vector<Bstatement *> > statements;\n-  std::vector< ::Bblock *> scope_stack;\n-  std::vector< ::Bvariable *> loop_value_stack;\n-  std::vector< ::Blabel *> loop_begin_labels;\n-  std::map<const TyTy::BaseType *, std::pair<HirId, ::Btype *> > mono;\n-  std::map<const TyTy::BaseType *, std::pair<HirId, ::Bfunction *> > mono_fns;\n+  std::vector<::std::vector<Bstatement *>> statements;\n+  std::vector<::Bblock *> scope_stack;\n+  std::vector<::Bvariable *> loop_value_stack;\n+  std::vector<::Blabel *> loop_begin_labels;\n+  std::map<const TyTy::BaseType *, std::pair<HirId, ::Btype *>> mono;\n+  std::map<DefId, std::vector<std::pair<const TyTy::BaseType *, ::Bfunction *>>>\n+    mono_fns;\n \n   // To GCC middle-end\n-  std::vector< ::Btype *> type_decls;\n-  std::vector< ::Bvariable *> var_decls;\n-  std::vector< ::Bexpression *> const_decls;\n-  std::vector< ::Bfunction *> func_decls;\n+  std::vector<::Btype *> type_decls;\n+  std::vector<::Bvariable *> var_decls;\n+  std::vector<::Bexpression *> const_decls;\n+  std::vector<::Bfunction *> func_decls;\n };\n \n class TyTyResolveCompile : public TyTy::TyVisitor"}, {"sha": "b8a8faf2a2eee28ab20a21e260cc04f90ad8d109", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=0c409fcf5678709303126aba07932f9f2a8519da", "patch": "@@ -100,14 +100,15 @@ class CompileExternItem : public HIRCompileBase\n     // items can be forward compiled which means we may not need to invoke this\n     // code. We might also have already compiled this generic function as well.\n     Bfunction *lookup = nullptr;\n-    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup, fntype))\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t   fntype->get_id (), fntype))\n       {\n \t// has this been added to the list then it must be finished\n \tif (ctx->function_completed (lookup))\n \t  {\n \t    Bfunction *dummy = nullptr;\n \t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n-\t      ctx->insert_function_decl (fntype->get_ty_ref (), lookup, fntype);\n+\t      ctx->insert_function_decl (fntype, lookup);\n \n \t    return;\n \t  }\n@@ -123,7 +124,7 @@ class CompileExternItem : public HIRCompileBase\n       {\n \tIntrinsics compile (ctx);\n \tBfunction *fndecl = compile.compile (fntype);\n-\tctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+\tctx->insert_function_decl (fntype, fndecl);\n \treturn;\n       }\n \n@@ -141,8 +142,7 @@ class CompileExternItem : public HIRCompileBase\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n-\n-    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+    ctx->insert_function_decl (fntype, fndecl);\n   }\n \n private:"}, {"sha": "1d3ad0282e676564f148e121854f841a411133a7", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=0c409fcf5678709303126aba07932f9f2a8519da", "patch": "@@ -113,16 +113,16 @@ class CompileInherentImplItem : public HIRCompileBase\n     // items can be forward compiled which means we may not need to invoke this\n     // code. We might also have already compiled this generic function as well.\n     Bfunction *lookup = nullptr;\n-    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup, fntype))\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t   fntype->get_id (), fntype))\n       {\n \t// has this been added to the list then it must be finished\n \tif (ctx->function_completed (lookup))\n \t  {\n \t    Bfunction *dummy = nullptr;\n \t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n \t      {\n-\t\tctx->insert_function_decl (fntype->get_ty_ref (), lookup,\n-\t\t\t\t\t   fntype);\n+\t\tctx->insert_function_decl (fntype, lookup);\n \t      }\n \t    reference\n \t      = ctx->get_backend ()->function_code_expression (lookup,\n@@ -160,7 +160,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n-    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+    ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params\n     TyTy::BaseType *tyret = fntype->get_return_type ();\n@@ -381,16 +381,16 @@ class CompileTraitItem : public HIRCompileBase\n     // items can be forward compiled which means we may not need to invoke this\n     // code. We might also have already compiled this generic function as well.\n     Bfunction *lookup = nullptr;\n-    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup))\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t   fntype->get_id (), fntype))\n       {\n \t// has this been added to the list then it must be finished\n \tif (ctx->function_completed (lookup))\n \t  {\n \t    Bfunction *dummy = nullptr;\n \t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n \t      {\n-\t\tctx->insert_function_decl (fntype->get_ty_ref (), lookup,\n-\t\t\t\t\t   fntype);\n+\t\tctx->insert_function_decl (fntype, lookup);\n \t      }\n \t    reference\n \t      = ctx->get_backend ()->function_code_expression (lookup,\n@@ -422,7 +422,7 @@ class CompileTraitItem : public HIRCompileBase\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n \t\t\t\t       asm_name, flags, func.get_locus ());\n-    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+    ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params\n     TyTy::BaseType *tyret = fntype->get_return_type ();"}, {"sha": "b263cf6c41c1cc6744f523efdee27054c5d0cd35", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c409fcf5678709303126aba07932f9f2a8519da/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=0c409fcf5678709303126aba07932f9f2a8519da", "patch": "@@ -150,16 +150,16 @@ class CompileItem : public HIRCompileBase\n     // items can be forward compiled which means we may not need to invoke this\n     // code. We might also have already compiled this generic function as well.\n     Bfunction *lookup = nullptr;\n-    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup, fntype))\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t   fntype->get_id (), fntype))\n       {\n \t// has this been added to the list then it must be finished\n \tif (ctx->function_completed (lookup))\n \t  {\n \t    Bfunction *dummy = nullptr;\n \t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n \t      {\n-\t\tctx->insert_function_decl (fntype->get_ty_ref (), lookup,\n-\t\t\t\t\t   fntype);\n+\t\tctx->insert_function_decl (fntype, lookup);\n \t      }\n \n \t    reference\n@@ -205,7 +205,7 @@ class CompileItem : public HIRCompileBase\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t       asm_name, flags, function.get_locus ());\n-    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+    ctx->insert_function_decl (fntype, fndecl);\n \n     // setup the params\n     TyTy::BaseType *tyret = fntype->get_return_type ();"}]}