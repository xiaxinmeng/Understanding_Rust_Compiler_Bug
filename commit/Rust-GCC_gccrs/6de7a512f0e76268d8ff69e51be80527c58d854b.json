{"sha": "6de7a512f0e76268d8ff69e51be80527c58d854b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlN2E1MTJmMGU3NjI2OGQ4ZmY2OWU1MWJlODA1MjdjNThkODU0Yg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-24T06:30:15Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-24T06:30:15Z"}, "message": "sh.c (sh_expand_prologue, [...]): Use memory_address_p instead of GO_IF_LEGITIMATE_ADDRESS.\n\n2009-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/sh/sh.c (sh_expand_prologue, sh_expand_epilogue):\n\tUse memory_address_p instead of GO_IF_LEGITIMATE_ADDRESS.\n\nFrom-SVN: r146668", "tree": {"sha": "46fea3a4179aa4614de45e545985a1505eaa237a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46fea3a4179aa4614de45e545985a1505eaa237a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de7a512f0e76268d8ff69e51be80527c58d854b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de7a512f0e76268d8ff69e51be80527c58d854b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de7a512f0e76268d8ff69e51be80527c58d854b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de7a512f0e76268d8ff69e51be80527c58d854b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb1a1907e4d59996c482682a291b4420204d4e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1a1907e4d59996c482682a291b4420204d4e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1a1907e4d59996c482682a291b4420204d4e48"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "042c56c673db9b5861eaf40bcb636e559f229fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7a512f0e76268d8ff69e51be80527c58d854b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7a512f0e76268d8ff69e51be80527c58d854b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6de7a512f0e76268d8ff69e51be80527c58d854b", "patch": "@@ -1,3 +1,8 @@\n+2009-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/sh/sh.c (sh_expand_prologue, sh_expand_epilogue):\n+\tUse memory_address_p instead of GO_IF_LEGITIMATE_ADDRESS.\n+\n 2009-04-23  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu-builtins.h: Delete file."}, {"sha": "c9493dd6c9c2483a3d4e15a6e2383d693292c74c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7a512f0e76268d8ff69e51be80527c58d854b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7a512f0e76268d8ff69e51be80527c58d854b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6de7a512f0e76268d8ff69e51be80527c58d854b", "patch": "@@ -6362,32 +6362,27 @@ sh_expand_prologue (void)\n \t\t\t\t\t\t stack_pointer_rtx,\n \t\t\t\t\t\t GEN_INT (offset)));\n \n-\t  GO_IF_LEGITIMATE_ADDRESS (mode, XEXP (mem_rtx, 0), try_pre_dec);\n-\n-\t  gcc_assert (r0);\n-\t  mem_rtx = NULL_RTX;\n-\n-\ttry_pre_dec:\n-\t  do\n-\t    if (HAVE_PRE_DECREMENT\n-\t\t&& (offset_in_r0 - offset == GET_MODE_SIZE (mode)\n-\t\t    || mem_rtx == NULL_RTX\n-\t\t    || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n-\t      {\n-\t\tpre_dec = gen_frame_mem (mode, gen_rtx_PRE_DEC (Pmode, r0));\n+\t  if (!memory_address_p (mode, XEXP (mem_rtx, 0)))\n+\t    {\n+\t      gcc_assert (r0);\n+\t      mem_rtx = NULL_RTX;\n+\t    }\n \n-\t\tGO_IF_LEGITIMATE_ADDRESS (mode, XEXP (pre_dec, 0),\n-\t\t\t\t\t  pre_dec_ok);\n+\t  if (HAVE_PRE_DECREMENT\n+\t      && (offset_in_r0 - offset == GET_MODE_SIZE (mode)\n+\t\t  || mem_rtx == NULL_RTX\n+\t\t  || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n+\t    {\n+\t      pre_dec = gen_frame_mem (mode, gen_rtx_PRE_DEC (Pmode, r0));\n \n+\t      if (!memory_address_p (mode, XEXP (pre_dec, 0)))\n \t\tpre_dec = NULL_RTX;\n-\n-\t\tbreak;\n-\n-\t      pre_dec_ok:\n-\t\tmem_rtx = NULL_RTX;\n-\t\toffset += GET_MODE_SIZE (mode);\n-\t      }\n-\t  while (0);\n+\t      else\n+\t\t{\n+\t\t  mem_rtx = NULL_RTX;\n+\t\t  offset += GET_MODE_SIZE (mode);\n+\t\t}\n+\t    }\n \n \t  if (mem_rtx != NULL_RTX)\n \t    goto addr_ok;\n@@ -6650,31 +6645,22 @@ sh_expand_epilogue (bool sibcall_p)\n \t\t\t\t\t\t stack_pointer_rtx,\n \t\t\t\t\t\t GEN_INT (offset)));\n \n-\t  GO_IF_LEGITIMATE_ADDRESS (mode, XEXP (mem_rtx, 0), try_post_inc);\n+\t  if (!memory_address_p (mode, XEXP (mem_rtx, 0)))\n+\t    mem_rtx = NULL_RTX;\n \n-\t  mem_rtx = NULL_RTX;\n-\n-\ttry_post_inc:\n-\t  do\n-\t    if (HAVE_POST_INCREMENT\n-\t\t&& (offset == offset_in_r0\n-\t\t    || (offset + GET_MODE_SIZE (mode) != d + d_rounding\n-\t\t\t&& mem_rtx == NULL_RTX)\n-\t\t    || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n-\t      {\n-\t\tpost_inc = gen_frame_mem (mode, gen_rtx_POST_INC (Pmode, r0));\n-\n-\t\tGO_IF_LEGITIMATE_ADDRESS (mode, XEXP (post_inc, 0),\n-\t\t\t\t\t  post_inc_ok);\n+\t  if (HAVE_POST_INCREMENT\n+\t      && (offset == offset_in_r0\n+\t\t  || (offset + GET_MODE_SIZE (mode) != d + d_rounding\n+\t\t      && mem_rtx == NULL_RTX)\n+\t\t  || reg == PR_REG || SPECIAL_REGISTER_P (reg)))\n+\t    {\n+\t      post_inc = gen_frame_mem (mode, gen_rtx_POST_INC (Pmode, r0));\n \n+\t      if (!memory_address_p (mode, XEXP (post_inc, 0)))\n \t\tpost_inc = NULL_RTX;\n-\n-\t\tbreak;\n-\n-\t      post_inc_ok:\n+\t      else\n \t\tmem_rtx = NULL_RTX;\n-\t      }\n-\t  while (0);\n+\t    }\n \n \t  if (mem_rtx != NULL_RTX)\n \t    goto addr_ok;"}]}