{"sha": "27922c1362c0c8b3edf757a216195eceae3f51e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5MjJjMTM2MmMwYzhiM2VkZjc1N2EyMTYxOTVlY2VhZTNmNTFlMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-03-11T13:56:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-03-11T13:56:20Z"}, "message": "machmode.h (smallest_mode_for_size): Prototype.\n\n        * machmode.h (smallest_mode_for_size): Prototype.\n        * stor-layout.c (smallest_mode_for_size): Remove static.\n\nFrom-SVN: r25703", "tree": {"sha": "cb32f2a58fc37a3a6bf27f9a57e9e404fe60b3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb32f2a58fc37a3a6bf27f9a57e9e404fe60b3f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27922c1362c0c8b3edf757a216195eceae3f51e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27922c1362c0c8b3edf757a216195eceae3f51e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27922c1362c0c8b3edf757a216195eceae3f51e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27922c1362c0c8b3edf757a216195eceae3f51e2/comments", "author": null, "committer": null, "parents": [{"sha": "8e9fb571ee594a45bc9fcfb309f8669b167ae042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9fb571ee594a45bc9fcfb309f8669b167ae042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9fb571ee594a45bc9fcfb309f8669b167ae042"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "85ae797c53e9f26353a43629152176da6e0e1ae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27922c1362c0c8b3edf757a216195eceae3f51e2", "patch": "@@ -1,3 +1,8 @@\n+Thu Mar 11 13:55:52 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* machmode.h (smallest_mode_for_size): Prototype.\n+\t* stor-layout.c (smallest_mode_for_size): Remove static.\n+\n Thu Mar 11 21:25:59 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* loop.c (strength_reduce): Don't do biv increment -> DEST_REG giv"}, {"sha": "595d8bd6187fb8ba3921cdd35c092590447c690a", "filename": "gcc/machmode.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=27922c1362c0c8b3edf757a216195eceae3f51e2", "patch": "@@ -199,6 +199,12 @@ extern unsigned char mode_wider_mode[];\n \n extern enum machine_mode mode_for_size PROTO((unsigned int, enum mode_class, int));\n \n+/* Similar, but find the smallest mode for a given width.  */\n+\n+extern enum machine_mode smallest_mode_for_size  PROTO((unsigned int,\n+                                                        enum mode_class));\n+\n+\n /* Return an integer mode of the exact same size as the input mode,\n    or BLKmode on failure.  */\n "}, {"sha": "798a7956707d68331d787ad11c05ef3578e1117c", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27922c1362c0c8b3edf757a216195eceae3f51e2/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=27922c1362c0c8b3edf757a216195eceae3f51e2", "patch": "@@ -53,8 +53,6 @@ int maximum_field_alignment;\n    May be overridden by front-ends.  */\n int set_alignment = 0;\n \n-static enum machine_mode smallest_mode_for_size  PROTO((unsigned int,\n-\t\t\t\t\t\t\tenum mode_class));\n static tree layout_record\tPROTO((tree));\n static void layout_union\tPROTO((tree));\n \f\n@@ -159,7 +157,7 @@ mode_for_size (size, class, limit)\n /* Similar, but never return BLKmode; return the narrowest mode that\n    contains at least the requested number of bits.  */\n \n-static enum machine_mode\n+enum machine_mode\n smallest_mode_for_size (size, class)\n      unsigned int size;\n      enum mode_class class;"}]}