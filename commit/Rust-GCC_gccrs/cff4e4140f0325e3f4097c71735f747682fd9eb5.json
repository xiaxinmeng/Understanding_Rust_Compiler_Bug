{"sha": "cff4e4140f0325e3f4097c71735f747682fd9eb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmNGU0MTQwZjAzMjVlM2Y0MDk3YzcxNzM1Zjc0NzY4MmZkOWViNQ==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2017-12-06T15:19:42Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2017-12-06T15:19:42Z"}, "message": "[ARM] testsuite: force hardfp in addr-modes-float.c\n\ngcc/testsuite/ChangeLog:\n\n<date>  Charles Baylis  <charles.baylis@linaro.org>\n\n\t* gcc.target/arm/addr-modes-float.c: Place dg-add-options after\n       \tdg-require-effective-target.\n       \t(ATTR): New define.\n       \t(POST_STORE): Pass ATTR as 2nd argument.\n       \t(POST_LOAD): Likewise.\n       \t(POST_STORE_VEC): Likewise.\n       \t* gcc.target/arm/addr-modes-int.c (ATTR): New define.\n       \t(PRE_STORE): Pass ATTR as 2nd argument.\n       \t(POST_STORE): Likewise.\n       \t(PRE_LOAD): Likewise.\n       \t(POST_LOAD): Likewise.\n       \t* gcc.target/arm/addr-modes.h:  (PRE_STORE): New parameter.\n       \t(POST_STORE): Likewise.\n       \t(POST_STORE_VEC): Likewise.\n       \t(PRE_LOAD): Likewise.\n       \t(POST_LOAD): Likewise.\n       \t(POST_LOAD_VEC): Likewise.\n\nFrom-SVN: r255443", "tree": {"sha": "2675c3846faaa1fda5c780de90d2ae72693e5def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2675c3846faaa1fda5c780de90d2ae72693e5def"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff4e4140f0325e3f4097c71735f747682fd9eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff4e4140f0325e3f4097c71735f747682fd9eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff4e4140f0325e3f4097c71735f747682fd9eb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff4e4140f0325e3f4097c71735f747682fd9eb5/comments", "author": null, "committer": null, "parents": [{"sha": "4c6f5562dce997c013340fb5d6891d777efb99be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6f5562dce997c013340fb5d6891d777efb99be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6f5562dce997c013340fb5d6891d777efb99be"}], "stats": {"total": 113, "additions": 69, "deletions": 44}, "files": [{"sha": "e62aad4ccc527b4c7b3a79f9943ad3ed89cf1ee0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cff4e4140f0325e3f4097c71735f747682fd9eb5", "patch": "@@ -1,3 +1,23 @@\n+2017-12-06  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\t* gcc.target/arm/addr-modes-float.c: Place dg-add-options after\n+\tdg-require-effective-target.\n+\t(ATTR): New define.\n+\t(POST_STORE): Pass ATTR as 2nd argument.\n+\t(POST_LOAD): Likewise.\n+\t(POST_STORE_VEC): Likewise.\n+\t* gcc.target/arm/addr-modes-int.c (ATTR): New define.\n+\t(PRE_STORE): Pass ATTR as 2nd argument.\n+\t(POST_STORE): Likewise.\n+\t(PRE_LOAD): Likewise.\n+\t(POST_LOAD): Likewise.\n+\t* gcc.target/arm/addr-modes.h: \t(PRE_STORE): New parameter.\n+\t(POST_STORE): Likewise.\n+\t(POST_STORE_VEC): Likewise.\n+\t(PRE_LOAD): Likewise.\n+\t(POST_LOAD): Likewise.\n+\t(POST_LOAD_VEC): Likewise.\n+\n 2017-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81945"}, {"sha": "5ffbcb1c1c26e2bbf1715bebbc29be5624d8d6b1", "filename": "gcc/testsuite/gcc.target/arm/addr-modes-float.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-float.c?ref=cff4e4140f0325e3f4097c71735f747682fd9eb5", "patch": "@@ -1,41 +1,43 @@\n /* { dg-options \"-O2\" } */\n-/* { dg-add-options arm_neon } */\n /* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-add-options arm_neon } */\n /* { dg-do compile } */\n \n #include <arm_neon.h>\n \n #include \"addr-modes.h\"\n \n-POST_STORE(float)\n+#define ATTR __attribute__((__pcs__(\"aapcs-vfp\")))\n+\n+POST_STORE(float, ATTR)\n /* { dg-final { scan-assembler \"vstmia.32\" } } */\n-POST_STORE(double)\n+POST_STORE(double, ATTR)\n /* { dg-final { scan-assembler \"vstmia.64\" } } */\n \n-POST_LOAD(float)\n+POST_LOAD(float, ATTR)\n /* { dg-final { scan-assembler \"vldmia.32\" } } */\n-POST_LOAD(double)\n+POST_LOAD(double, ATTR)\n /* { dg-final { scan-assembler \"vldmia.64\" } } */\n \n-POST_STORE_VEC (int8_t, int8x8_t, vst1_s8)\n+POST_STORE_VEC (int8_t, int8x8_t, vst1_s8, ATTR)\n /* { dg-final { scan-assembler \"vst1.8\\t\\{.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n-POST_STORE_VEC (int8_t, int8x16_t, vst1q_s8)\n+POST_STORE_VEC (int8_t, int8x16_t, vst1q_s8, ATTR)\n /* { dg-final { scan-assembler \"vst1.8\\t\\{.*\\[-,\\]d.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n \n-POST_STORE_VEC (int8_t, int8x8x2_t, vst2_s8)\n+POST_STORE_VEC (int8_t, int8x8x2_t, vst2_s8, ATTR)\n /* { dg-final { scan-assembler \"vst2.8\\t\\{.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n-POST_STORE_VEC (int8_t, int8x16x2_t, vst2q_s8)\n+POST_STORE_VEC (int8_t, int8x16x2_t, vst2q_s8, ATTR)\n /* { dg-final { scan-assembler \"vst2.8\\t\\{.*-d.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n \n-POST_STORE_VEC (int8_t, int8x8x3_t, vst3_s8)\n+POST_STORE_VEC (int8_t, int8x8x3_t, vst3_s8, ATTR)\n /* { dg-final { scan-assembler \"vst3.8\\t\\{.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n-POST_STORE_VEC (int8_t, int8x16x3_t, vst3q_s8)\n+POST_STORE_VEC (int8_t, int8x16x3_t, vst3q_s8, ATTR)\n /* { dg-final { scan-assembler \"vst3.8\\t\\{d\\[02468\\], d\\[02468\\], d\\[02468\\]\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n /* { dg-final { scan-assembler \"vst3.8\\t\\{d\\[13579\\], d\\[13579\\], d\\[13579\\]\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" { xfail *-*-* } } } */\n \n-POST_STORE_VEC (int8_t, int8x8x4_t, vst4_s8)\n+POST_STORE_VEC (int8_t, int8x8x4_t, vst4_s8, ATTR)\n /* { dg-final { scan-assembler \"vst4.8\\t\\{.*\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n-POST_STORE_VEC (int8_t, int8x16x4_t, vst4q_s8)\n+POST_STORE_VEC (int8_t, int8x16x4_t, vst4q_s8, ATTR)\n /* { dg-final { scan-assembler \"vst4.8\\t\\{d\\[02468\\], d\\[02468\\], d\\[02468\\], d\\[02468\\]\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" } } */\n /* { dg-final { scan-assembler \"vst4.8\\t\\{d\\[13579\\], d\\[13579\\], d\\[13579\\], d\\[13579\\]\\}, \\\\\\[r\\[0-9\\]+\\\\\\]!\" { xfail *-*-* } } } */\n "}, {"sha": "90b7425cd670693cfdb51c09d78d825522e400d8", "filename": "gcc/testsuite/gcc.target/arm/addr-modes-int.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes-int.c?ref=cff4e4140f0325e3f4097c71735f747682fd9eb5", "patch": "@@ -7,40 +7,43 @@\n \n typedef long long ll;\n \n-PRE_STORE(char)\n+/* no special function attribute required */\n+#define ATTR /* */\n+\n+PRE_STORE(char, ATTR)\n /* { dg-final { scan-assembler \"strb.*#1]!\" } } */\n-PRE_STORE(short)\n+PRE_STORE(short, ATTR)\n /* { dg-final { scan-assembler \"strh.*#2]!\" } } */\n-PRE_STORE(int)\n+PRE_STORE(int, ATTR)\n /* { dg-final { scan-assembler \"str.*#4]!\" } } */\n-PRE_STORE(ll)\n+PRE_STORE(ll, ATTR)\n /* { dg-final { scan-assembler \"strd.*#8]!\" } } */\n \n-POST_STORE(char)\n+POST_STORE(char, ATTR)\n /* { dg-final { scan-assembler \"strb.*], #1\" } } */\n-POST_STORE(short)\n+POST_STORE(short, ATTR)\n /* { dg-final { scan-assembler \"strh.*], #2\" } } */\n-POST_STORE(int)\n+POST_STORE(int, ATTR)\n /* { dg-final { scan-assembler \"str.*], #4\" } } */\n-POST_STORE(ll)\n+POST_STORE(ll, ATTR)\n /* { dg-final { scan-assembler \"strd.*], #8\" } } */\n \n-PRE_LOAD(char)\n+PRE_LOAD(char, ATTR)\n /* { dg-final { scan-assembler \"ldrb.*#1]!\" } } */\n-PRE_LOAD(short)\n+PRE_LOAD(short, ATTR)\n /* { dg-final { scan-assembler \"ldrsh.*#2]!\" } } */\n-PRE_LOAD(int)\n+PRE_LOAD(int, ATTR)\n /* { dg-final { scan-assembler \"ldr.*#4]!\" } } */\n-PRE_LOAD(ll)\n+PRE_LOAD(ll, ATTR)\n /* { dg-final { scan-assembler \"ldrd.*#8]!\" } } */\n \n-POST_LOAD(char)\n+POST_LOAD(char, ATTR)\n /* { dg-final { scan-assembler \"ldrb.*], #1\" } } */\n-POST_LOAD(short)\n+POST_LOAD(short, ATTR)\n /* { dg-final { scan-assembler \"ldrsh.*], #2\" } } */\n-POST_LOAD(int)\n+POST_LOAD(int, ATTR)\n /* { dg-final { scan-assembler \"ldr.*], #4\" } } */\n-POST_LOAD(ll)\n+POST_LOAD(ll, ATTR)\n /* { dg-final { scan-assembler \"ldrd.*], #8\" } } */\n \n /* { dg-final { scan-assembler-not \"\\tadd\" } } */"}, {"sha": "9844c6adf6c74204618995e2461260c0c91a2f25", "filename": "gcc/testsuite/gcc.target/arm/addr-modes.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff4e4140f0325e3f4097c71735f747682fd9eb5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faddr-modes.h?ref=cff4e4140f0325e3f4097c71735f747682fd9eb5", "patch": "@@ -1,52 +1,52 @@\n \n-#define PRE_STORE(T)\t\t\t\\\n-  T *\t\t\t\t\t\\\n+#define PRE_STORE(T, ATTR)\t\t\\\n+  ATTR T *\t\t\t\t\\\n   T ## _pre_store (T *p, T v)\t\t\\\n   {\t\t\t\t\t\\\n     *++p = v;\t\t\t\t\\\n     return p;\t\t\t\t\\\n   }\t\t\t\t\t\\\n \n-#define POST_STORE(T)\t\t\t\\\n-  T *\t\t\t\t\t\\\n+#define POST_STORE(T, ATTR)\t\t\\\n+  ATTR T *\t\t\t\t\\\n   T ## _post_store (T *p, T v)\t\t\\\n   {\t\t\t\t\t\\\n     *p++ = v;\t\t\t\t\\\n     return p;\t\t\t\t\\\n   }\n \n-#define POST_STORE_VEC(T, VT, OP)\t\\\n-  T *\t\t\t\t\t\\\n+#define POST_STORE_VEC(T, VT, OP, ATTR)\t\\\n+  ATTR T *\t\t\t\t\\\n   VT ## _post_store (T * p, VT v)\t\\\n   {\t\t\t\t\t\\\n     OP (p, v);\t\t\t\t\\\n     p += sizeof (VT) / sizeof (T);\t\\\n     return p;\t\t\t\t\\\n   }\n \n-#define PRE_LOAD(T)\t\t\t\\\n-  void\t\t\t\t\t\\\n+#define PRE_LOAD(T, ATTR)\t\t\\\n+  ATTR void\t\t\t\t\\\n   T ## _pre_load (T *p)\t\t\t\\\n   {\t\t\t\t\t\\\n-    extern void f ## T (T*,T);\t\t\\\n+    ATTR extern void f ## T (T*,T);\t\\\n     T x = *++p;\t\t\t\t\\\n     f ## T (p, x);\t\t\t\\\n   }\n \n-#define POST_LOAD(T)\t\t\t\\\n-  void\t\t\t\t\t\\\n+#define POST_LOAD(T, ATTR)\t\t\\\n+  ATTR void\t\t\t\t\\\n   T ## _post_load (T *p)\t\t\\\n   {\t\t\t\t\t\\\n-    extern void f ## T (T*,T);\t\t\\\n+    ATTR extern void f ## T (T*,T);\t\\\n     T x = *p++;\t\t\t\t\\\n     f ## T (p, x);\t\t\t\\\n   }\n \n-#define POST_LOAD_VEC(T, VT, OP)\t\\\n-  void\t\t\t\t\t\\\n+#define POST_LOAD_VEC(T, VT, OP, ATTR)\t\\\n+  ATTR void\t\t\t\t\\\n   VT ## _post_load (T * p)\t\t\\\n   {\t\t\t\t\t\\\n-    extern void f ## T (T*,T);\t\t\\\n+    ATTR extern void f ## T (T*,T);\t\\\n     VT x = OP (p, v);\t\t\t\\\n     p += sizeof (VT) / sizeof (T);\t\\\n     f ## T (p, x);\t\t\t\\"}]}