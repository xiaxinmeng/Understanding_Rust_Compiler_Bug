{"sha": "2c2174426d8a0742b053d2fece199f44fc07a435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyMTc0NDI2ZDhhMDc0MmIwNTNkMmZlY2UxOTlmNDRmYzA3YTQzNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-02T15:28:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-02T15:28:51Z"}, "message": "function.c (reorder_blocks, [...]): Use VEC instead of VARRAY.\n\n\t* function.c (reorder_blocks, reorder_blocks_1): Use VEC\n\tinstead of VARRAY.\n\nFrom-SVN: r99099", "tree": {"sha": "c24866983e39ee392871536ae5b764b9443cc14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c24866983e39ee392871536ae5b764b9443cc14c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c2174426d8a0742b053d2fece199f44fc07a435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2174426d8a0742b053d2fece199f44fc07a435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2174426d8a0742b053d2fece199f44fc07a435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2174426d8a0742b053d2fece199f44fc07a435/comments", "author": null, "committer": null, "parents": [{"sha": "3b9dd7692bfdde3ff813fe35f0e0b8221132b0f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9dd7692bfdde3ff813fe35f0e0b8221132b0f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9dd7692bfdde3ff813fe35f0e0b8221132b0f8"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "866b683b1170d266f3940779345cc1455c0d5b2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2174426d8a0742b053d2fece199f44fc07a435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2174426d8a0742b053d2fece199f44fc07a435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c2174426d8a0742b053d2fece199f44fc07a435", "patch": "@@ -1,3 +1,8 @@\n+2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* function.c (reorder_blocks, reorder_blocks_1): Use VEC\n+\tinstead of VARRAY.\n+\n 2005-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Bernd Schmidt  <bernd.schmidt@analog.com>\n "}, {"sha": "2b551e48a6c7b22d365eaf1492663461eafdc437", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2174426d8a0742b053d2fece199f44fc07a435/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2174426d8a0742b053d2fece199f44fc07a435/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2c2174426d8a0742b053d2fece199f44fc07a435", "patch": "@@ -191,7 +191,7 @@ static rtx assign_stack_local_1 (enum machine_mode, HOST_WIDE_INT, int,\n static struct temp_slot *find_temp_slot_from_address (rtx);\n static void pad_to_arg_alignment (struct args_size *, int, struct args_size *);\n static void pad_below (struct args_size *, enum machine_mode, tree);\n-static void reorder_blocks_1 (rtx, tree, varray_type *);\n+static void reorder_blocks_1 (rtx, tree, VEC(tree,heap) **);\n static void reorder_fix_fragments (tree);\n static int all_blocks (tree, tree *);\n static tree *get_block_vector (tree, int *);\n@@ -3468,12 +3468,12 @@ void\n reorder_blocks (void)\n {\n   tree block = DECL_INITIAL (current_function_decl);\n-  varray_type block_stack;\n+  VEC(tree,heap) *block_stack;\n \n   if (block == NULL_TREE)\n     return;\n \n-  VARRAY_TREE_INIT (block_stack, 10, \"block_stack\");\n+  block_stack = VEC_alloc (tree, heap, 10);\n \n   /* Reset the TREE_ASM_WRITTEN bit for all blocks.  */\n   clear_block_marks (block);\n@@ -3488,6 +3488,8 @@ reorder_blocks (void)\n \n   /* Remove deleted blocks from the block fragment chains.  */\n   reorder_fix_fragments (block);\n+\n+  VEC_free (tree, heap, block_stack);\n }\n \n /* Helper function for reorder_blocks.  Reset TREE_ASM_WRITTEN.  */\n@@ -3504,7 +3506,7 @@ clear_block_marks (tree block)\n }\n \n static void\n-reorder_blocks_1 (rtx insns, tree current_block, varray_type *p_block_stack)\n+reorder_blocks_1 (rtx insns, tree current_block, VEC(tree,heap) **p_block_stack)\n {\n   rtx insn;\n \n@@ -3547,12 +3549,11 @@ reorder_blocks_1 (rtx insns, tree current_block, varray_type *p_block_stack)\n \t\t  BLOCK_SUBBLOCKS (current_block) = block;\n \t\t  current_block = block;\n \t\t}\n-\t      VARRAY_PUSH_TREE (*p_block_stack, block);\n+\t      VEC_safe_push (tree, heap, *p_block_stack, block);\n \t    }\n \t  else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)\n \t    {\n-\t      NOTE_BLOCK (insn) = VARRAY_TOP_TREE (*p_block_stack);\n-\t      VARRAY_POP (*p_block_stack);\n+\t      NOTE_BLOCK (insn) = VEC_pop (tree, *p_block_stack);\n \t      BLOCK_SUBBLOCKS (current_block)\n \t\t= blocks_nreverse (BLOCK_SUBBLOCKS (current_block));\n \t      current_block = BLOCK_SUPERCONTEXT (current_block);"}]}