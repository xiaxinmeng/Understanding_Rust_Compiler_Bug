{"sha": "9ed4207fce7efe340cbdf1017fa0d1271a710487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkNDIwN2ZjZTdlZmUzNDBjYmRmMTAxN2ZhMGQxMjcxYTcxMDQ4Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-01-31T12:30:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-01-31T12:30:20Z"}, "message": "optabs.h (enum optab_index): Add new OTI_isinf.\n\n\t* optabs.h (enum optab_index): Add new OTI_isinf.\n\t(isinf_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize isinf_optab.\n\t* genopinit.c (optabs): Implement isinf_optab using isinf?f2\n\tpatterns.\n\t* builtins.c (mathfn_built_in): Handle BUILT_IN_ISINF{,F,L}.\n\t(expand_builtin_interclass_mathfn): Expand BUILT_IN_ISINF{,F,L}\n\tusing isinf_optab.\n\t(expand_builtin): Expand BUILT_IN_ISINF{,F,L} using\n\texpand_builtin_interclass_mathfn.\n\t* reg_stack.c (subst_stack_regs_pat): Handle UNSPEC_FXAM.\n\t* config/i386/i386.md (UNSPEC_FXAM): New constant.\n\t(fxam<mode>2_i387): New insn pattern.\n\t(isinf<mode>2) New expander to implement isinf, isinff and isinfl\n\tbuilt-in functions as x87 inline asm.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/builtins-63.c: New test.\n\nFrom-SVN: r121419", "tree": {"sha": "8644f765075eeb7076137f6a73a27bd54182e229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8644f765075eeb7076137f6a73a27bd54182e229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed4207fce7efe340cbdf1017fa0d1271a710487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed4207fce7efe340cbdf1017fa0d1271a710487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed4207fce7efe340cbdf1017fa0d1271a710487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed4207fce7efe340cbdf1017fa0d1271a710487/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "010dc0fdd0c5189383207fde6281d8f9c1e06908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010dc0fdd0c5189383207fde6281d8f9c1e06908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010dc0fdd0c5189383207fde6281d8f9c1e06908"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "ba55b7c30dbdc1049c1aa949f6c491e8026eb06f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -1,3 +1,21 @@\n+2007-01-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_isinf.\n+\t(isinf_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize isinf_optab.\n+\t* genopinit.c (optabs): Implement isinf_optab using isinf?f2\n+\tpatterns.\n+\t* builtins.c (mathfn_built_in): Handle BUILT_IN_ISINF{,F,L}.\n+\t(expand_builtin_interclass_mathfn): Expand BUILT_IN_ISINF{,F,L}\n+\tusing isinf_optab.\n+\t(expand_builtin): Expand BUILT_IN_ISINF{,F,L} using\n+\texpand_builtin_interclass_mathfn.\n+\t* reg_stack.c (subst_stack_regs_pat): Handle UNSPEC_FXAM.\n+\t* config/i386/i386.md (UNSPEC_FXAM): New constant.\n+\t(fxam<mode>2_i387): New insn pattern.\n+\t(isinf<mode>2) New expander to implement isinf, isinff and isinfl\n+\tbuilt-in functions as x87 inline asm.\n+\n 2007-01-31  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc/config/arm/unwind-arm.h (_sleb128_t, _uleb128_t): New."}, {"sha": "777206c83a002ebd23581b42b7bcc9270bb70d72", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -1676,6 +1676,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_HYPOT)\n       CASE_MATHFN (BUILT_IN_ILOGB)\n       CASE_MATHFN (BUILT_IN_INF)\n+      CASE_MATHFN (BUILT_IN_ISINF)\n       CASE_MATHFN (BUILT_IN_J0)\n       CASE_MATHFN (BUILT_IN_J1)\n       CASE_MATHFN (BUILT_IN_JN)\n@@ -2198,6 +2199,8 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n     {\n     CASE_FLT_FN (BUILT_IN_ILOGB):\n       errno_set = true; builtin_optab = ilogb_optab; break;\n+    CASE_FLT_FN (BUILT_IN_ISINF):\n+      builtin_optab = isinf_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5923,6 +5926,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_ILOGB):\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n+    CASE_FLT_FN (BUILT_IN_ISINF):\n       target = expand_builtin_interclass_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "cfe48c446dac458aa31a143fc3c99d38be67cfc8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -122,6 +122,7 @@\n    (UNSPEC_FIST\t\t\t66)\n    (UNSPEC_F2XM1\t\t67)\n    (UNSPEC_TAN\t\t\t68)\n+   (UNSPEC_FXAM\t\t\t69)\n \n    ; x87 Rounding\n    (UNSPEC_FRNDINT_FLOOR\t70)\n@@ -17597,6 +17598,43 @@\n   DONE;\n })\n \n+(define_insn \"fxam<mode>2_i387\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n+\t(unspec:HI\n+\t  [(match_operand:X87MODEF 1 \"register_operand\" \"f\")]\n+\t  UNSPEC_FXAM))]\n+  \"TARGET_USE_FANCY_MATH_387\"\n+  \"fxam\\n\\tfnstsw\\t%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"isinf<mode>2\"\n+  [(use (match_operand:SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:X87MODEF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+  && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+      || TARGET_MIX_SSE_I387)\"\n+{\n+  rtx mask = GEN_INT (0x45);\n+  rtx val = GEN_INT (0x05);\n+\n+  rtx cond;\n+\n+  rtx scratch = gen_reg_rtx (HImode);\n+  rtx res = gen_reg_rtx (QImode);\n+\n+  emit_insn (gen_fxam<mode>2_i387 (scratch, operands[1]));\n+  emit_insn (gen_andqi_ext_0 (scratch, scratch, mask));\n+  emit_insn (gen_cmpqi_ext_3 (scratch, val));\n+  cond = gen_rtx_fmt_ee (EQ, QImode,\n+\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, res, cond));\n+  emit_insn (gen_zero_extendqisi2 (operands[0], res));\n+  DONE;\n+})\n+\n \f\n ;; Block operation instructions\n "}, {"sha": "1e70c6d07a834c5d12961ff3adf2153a858c574b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -118,6 +118,7 @@ static const char * const optabs[] =\n     abs_optab->handlers[$A].insn_code = CODE_FOR_$(abs$F$a2$)\",\n   \"absv_optab->handlers[$A].insn_code = CODE_FOR_$(absv$I$a2$)\",\n   \"copysign_optab->handlers[$A].insn_code = CODE_FOR_$(copysign$F$a3$)\",\n+  \"isinf_optab->handlers[$A].insn_code = CODE_FOR_$(isinf$a2$)\",\n   \"sqrt_optab->handlers[$A].insn_code = CODE_FOR_$(sqrt$a2$)\",\n   \"floor_optab->handlers[$A].insn_code = CODE_FOR_$(floor$a2$)\",\n   \"lfloor_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lfloor$F$a$I$b2$)\","}, {"sha": "e66c115c0c022e04b18d13b3df54080ccdf4b99b", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -5378,6 +5378,8 @@ init_optabs (void)\n   atan_optab = init_optab (UNKNOWN);\n   copysign_optab = init_optab (UNKNOWN);\n \n+  isinf_optab = init_optab (UNKNOWN);\n+\n   strlen_optab = init_optab (UNKNOWN);\n   cbranch_optab = init_optab (UNKNOWN);\n   cmov_optab = init_optab (UNKNOWN);"}, {"sha": "d3cfd74213637ab259d64373ac408be1ca112eac", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -204,6 +204,9 @@ enum optab_index\n   /* Copy sign */\n   OTI_copysign,\n \n+  /* Test for infinite value */\n+  OTI_isinf,\n+\n   /* Compare insn; two operands.  */\n   OTI_cmp,\n   /* Used only for libcalls for unsigned comparisons.  */\n@@ -370,6 +373,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define atan_optab (optab_table[OTI_atan])\n #define copysign_optab (optab_table[OTI_copysign])\n \n+#define isinf_optab (optab_table[OTI_isinf])\n+\n #define cmp_optab (optab_table[OTI_cmp])\n #define ucmp_optab (optab_table[OTI_ucmp])\n #define tst_optab (optab_table[OTI_tst])"}, {"sha": "f21d833c00ba977869b0b3a6a7221e639455b641", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -1629,6 +1629,27 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\tbreak;\n \n+\t      case UNSPEC_FXAM:\n+\n+\t\t/* This insn only operate on the top of the stack.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\temit_swap_insn (insn, regstack, *src1);\n+\n+\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\n+\t\tif (src1_note)\n+\t\t  {\n+\t\t    remove_regno_note (insn, REG_DEAD,\n+\t\t\t\t       REGNO (XEXP (src1_note, 0)));\n+\t\t    emit_pop_insn (insn, regstack, XEXP (src1_note, 0),\n+\t\t\t\t   EMIT_AFTER);\n+\t\t  }\n+\n+\t\tbreak;\n+\n \t      case UNSPEC_SIN:\n \t      case UNSPEC_COS:\n \t      case UNSPEC_FRNDINT:"}, {"sha": "97bf5f17fcad1414902591670a1916ff221452b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -1,3 +1,7 @@\n+2007-01-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/builtins-63.c: New test.\n+\n 2007-01-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/27588"}, {"sha": "8fcbc68e6f1b6e9523bce4473debe3cfec94b236", "filename": "gcc/testsuite/gcc.dg/builtins-63.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4207fce7efe340cbdf1017fa0d1271a710487/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-63.c?ref=9ed4207fce7efe340cbdf1017fa0d1271a710487", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2007 Free Software Foundation.\n+\n+   Check that isinf, isinff and isinfl built-in functions compile.\n+\n+   Written by Uros Bizjak, 31st January 2007.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int isinf(double);\n+extern int isinff(float);\n+extern int isinfl(long double);\n+\n+int test1(double x)\n+{\n+  return isinf(x);\n+}\n+\n+int test1f(float x)\n+{\n+  return isinff(x);\n+}\n+\n+int test1l(long double x)\n+{\n+  return isinfl(x);\n+}\n+"}]}