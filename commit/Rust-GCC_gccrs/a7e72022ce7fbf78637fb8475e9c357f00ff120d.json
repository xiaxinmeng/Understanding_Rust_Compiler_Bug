{"sha": "a7e72022ce7fbf78637fb8475e9c357f00ff120d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlNzIwMjJjZTdmYmY3ODYzN2ZiODQ3NWU5YzM1N2YwMGZmMTIwZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-19T13:52:10Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-19T13:52:10Z"}, "message": "re PR c/30260 (Enumeration types and enumeration constants erroneously given unsigned types)\n\n2008-10-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/30260\n\t* c-decl.c (finish_enum): Convert non-integer enumerators to enum\n\ttype.\n\t(build_enumerator): Convert enumerators that fit in integer to\n\tinteger type.\ntestsuite/\n\t* gcc.dg/pr30260.c: New.\n\nFrom-SVN: r141224", "tree": {"sha": "a603fc519ad66ae66ae8c855cbe58febdfac8c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a603fc519ad66ae66ae8c855cbe58febdfac8c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e72022ce7fbf78637fb8475e9c357f00ff120d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e72022ce7fbf78637fb8475e9c357f00ff120d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e72022ce7fbf78637fb8475e9c357f00ff120d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e72022ce7fbf78637fb8475e9c357f00ff120d/comments", "author": null, "committer": null, "parents": [{"sha": "1344d3908deca2a7c40c18aba6bebebc963ceecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1344d3908deca2a7c40c18aba6bebebc963ceecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1344d3908deca2a7c40c18aba6bebebc963ceecc"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "7791e3b7a580753a712d34a057d44cf51adfb6df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7e72022ce7fbf78637fb8475e9c357f00ff120d", "patch": "@@ -1,3 +1,11 @@\n+2008-10-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/30260\n+\t* c-decl.c (finish_enum): Convert non-integer enumerators to enum\n+\ttype.\n+\t(build_enumerator): Convert enumerators that fit in integer to\n+\tinteger type.\n+\n 2008-10-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (unnamed peephole2): Do not force memory\n@@ -8765,7 +8773,7 @@\n \tPR ada/36554\n \t* dwarf2out.c (is_subrange_type): Deal with BOOLEAN_TYPE.\n \n-2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \tPR 36974\n \t* final.c (call_from_call_insn): Handle COND_EXEC.\n@@ -8977,7 +8985,7 @@\n \t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Add clause for\n \tvector modes.\n \n-2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* final.c (call_from_call_insn): New.\n \t(final_scan_insn): Call assemble_external on FUNCTION_DECLs.\n@@ -10095,7 +10103,7 @@\n \t(TARGET_OPTION_PRINT): Ditto.\n \t(TARGET_CAN_INLINE_P): Ditto.\n \n-2008-07-22  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-22  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-typeck.c (build_external_ref): Don't call assemble_external.\n \t* final.c (output_operand): Call assemble_external.\n@@ -10116,7 +10124,7 @@\n \thighest magnitude if this is still less or equal to the true\n \tquotient in magnitude.\n \n-2008-07-21  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-21  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* Makefile.in: Replace toplev.h with TOPLEV_H.\n \t* c-decl.c (merge_decls): Don't set DECL_IN_SYSTEM_HEADER.\n@@ -10419,7 +10427,7 @@\n \t(m32c_legitimate_address_p): Handle \"++rii\" addresses created by\n \tm32c_legitimize_reload_address.\n \n-2007-07-16  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2007-07-16  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (merge_decls): Keep DECL_SOURCE_LOCATION and\n \tDECL_IN_SYSTEM_HEADER in sync.\n@@ -10509,7 +10517,7 @@\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Improve comment.\n \n-2007-07-14  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2007-07-14  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (diagnose_mismatched_decls): Don't warn if TREE_NO_WARNING\n \tis set."}, {"sha": "ee8e45e1c0852d99e67378b3a9ad1fff20426549", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a7e72022ce7fbf78637fb8475e9c357f00ff120d", "patch": "@@ -5926,17 +5926,15 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \t  /* The ISO C Standard mandates enumerators to have type int,\n \t     even though the underlying type of an enum type is\n \t     unspecified.  However, GCC allows enumerators of any\n-\t     integer type as an extensions.  Here we convert any\n-\t     enumerators that fit in an int to type int, to avoid\n-\t     promotions to unsigned types when comparing integers with\n-\t     enumerators that fit in the int range.  When -pedantic is\n-\t     given, build_enumerator() would have already warned about\n-\t     those that don't fit.  */\n-\t  if (int_fits_type_p (ini, integer_type_node))\n-\t    tem = integer_type_node;\n-\t  else\n-\t    tem = enumtype;\n-\t  ini = convert (tem, ini);\n+\t     integer type as an extensions.  build_enumerator()\n+\t     converts any enumerators that fit in an int to type int,\n+\t     to avoid promotions to unsigned types when comparing\n+\t     integers with enumerators that fit in the int range.\n+\t     When -pedantic is given, build_enumerator() would have\n+\t     already warned about those that don't fit. Here we\n+\t     convert the rest to the enumerator type. */\n+\t  if (TREE_TYPE (ini) != integer_type_node)\n+\t    ini = convert (enumtype, ini);\n \n \t  DECL_INITIAL (enu) = ini;\n \t  TREE_PURPOSE (pair) = DECL_NAME (enu);\n@@ -6026,6 +6024,18 @@ build_enumerator (struct c_enum_contents *the_enum, tree name, tree value,\n     pedwarn (value_loc, OPT_pedantic, \n \t     \"ISO C restricts enumerator values to range of %<int%>\");\n \n+  /* The ISO C Standard mandates enumerators to have type int, even\n+     though the underlying type of an enum type is unspecified.\n+     However, GCC allows enumerators of any integer type as an\n+     extensions.  Here we convert any enumerators that fit in an int\n+     to type int, to avoid promotions to unsigned types when comparing\n+     integers with enumerators that fit in the int range.  When\n+     -pedantic is given, we would have already warned about those that\n+     don't fit. We have to do this here rather than in finish_enum\n+     because this value may be used to define more enumerators.  */\n+  if (int_fits_type_p (value, integer_type_node))\n+    value = convert (integer_type_node, value);\n+\n   /* Set basis for default for next value.  */\n   the_enum->enum_next_value\n     = build_binary_op"}, {"sha": "a08312d98f2b94435cad46ae47709743a7355206", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7e72022ce7fbf78637fb8475e9c357f00ff120d", "patch": "@@ -1,3 +1,8 @@\n+2008-10-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/30260\n+\t* gcc.dg/pr30260.c: New.\n+\n 2008-10-19  Paul Thomas  <pault@gcc.gnu.org>\n \n         PR fortran/37723"}, {"sha": "f7373176ed5150524706fddf1f12453d422fb36b", "filename": "gcc/testsuite/gcc.dg/pr30260.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30260.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e72022ce7fbf78637fb8475e9c357f00ff120d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30260.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30260.c?ref=a7e72022ce7fbf78637fb8475e9c357f00ff120d", "patch": "@@ -0,0 +1,32 @@\n+/* PR 30260  */\n+/* { dg-do link } */\n+/* { dg-options \"-pedantic -O\" } */\n+#include <limits.h>\n+\n+enum A {\n+  A1 = 0, \n+  A2 = A1 - 1\n+};\n+enum B {\n+  B1 = 0u, \n+  B2 = B1 - 1 /* { dg-bogus \"ISO C restricts enumerator values to range of 'int'\" } */\n+};\n+int main(void)\n+{\n+  enum A a = -1;\n+  enum B b = -1;\n+\n+  if (!(a < 0))\n+    link_error ();\n+  if (!(A2 < 0))\n+    link_error ();\n+  if (!(b < 0))\n+    link_error ();\n+  if (!(B2 < 0))\n+    link_error ();\n+\n+  return 0;\n+}\n+\n+enum E1 { e10 = INT_MAX, e11 }; /* { dg-error \"overflow in enumeration values\" } */\n+enum E2 { e20 = (unsigned) INT_MAX, e21 }; /* { dg-error \"overflow in enumeration values\" } */"}]}