{"sha": "a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJiNzM5N2I1MDEzNzg4MTVkMWI2YzViZWI3Y2JkYTIxZjJlNGFkNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-25T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-25T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "bb833290f8ccd0cb3af463c97e49941dd8f5d318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb833290f8ccd0cb3af463c97e49941dd8f5d318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/comments", "author": null, "committer": null, "parents": [{"sha": "942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942ab9e9d4ff1da711daad3e8c71c57fd4c14035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942ab9e9d4ff1da711daad3e8c71c57fd4c14035"}], "stats": {"total": 400, "additions": 399, "deletions": 1}, "files": [{"sha": "b8ececa6d6e3739a33d4fa9dcc9edb78f471197f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,142 @@\n+2020-09-24  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/arm/arm-cpus.in (neoverse-n2): New.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* doc/invoke.texi: Document support for Neoverse N2.\n+\n+2020-09-24  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Add Neoverse N2.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Document AArch64 support for Neoverse N2.\n+\n+2020-09-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* vec.h (auto_vec<T, 0>::auto_vec (auto_vec &&)): New move CTOR.\n+\t(auto_vec<T, 0>::operator=(auto_vec &&)): Delete.\n+\t* hash-table.h (hash_table::expand): Use std::move when expanding.\n+\t* cfgloop.h (get_loop_exit_edges): Return auto_vec<edge>.\n+\t* cfgloop.c (get_loop_exit_edges): Adjust.\n+\t* cfgloopmanip.c (fix_loop_placement): Likewise.\n+\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n+\t* ira-build.c (create_loop_tree_nodes): Likewise.\n+\t(create_loop_tree_node_allocnos): Likewise.\n+\t(loop_with_complex_edge_p): Likewise.\n+\t* ira-color.c (ira_loop_edge_freq): Likewise.\n+\t* loop-unroll.c (analyze_insns_in_loop): Likewise.\n+\t* predict.c (predict_loops): Likewise.\n+\t* tree-predcom.c (last_always_executed_block): Likewise.\n+\t* tree-ssa-loop-ch.c (ch_base::copy_headers): Likewise.\n+\t* tree-ssa-loop-im.c (store_motion_loop): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (loop_edge_to_cancel): Likewise.\n+\t(canonicalize_loop_induction_variables): Likewise.\n+\t* tree-ssa-loop-manip.c (get_loops_exits): Likewise.\n+\t* tree-ssa-loop-niter.c (find_loop_niter): Likewise.\n+\t(finite_loop_p): Likewise.\n+\t(find_loop_niter_by_eval): Likewise.\n+\t(estimate_numbers_of_iterations): Likewise.\n+\t* tree-ssa-loop-prefetch.c (emit_mfence_after_loop): Likewise.\n+\t(may_use_storent_in_loop_p): Likewise.\n+\n+2020-09-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi: Document -fipa-modref, ipa-modref-max-bases,\n+\tipa-modref-max-refs, ipa-modref-max-accesses, ipa-modref-max-tests.\n+\t* ipa-modref-tree.c (test_insert_search_collapse): Update.\n+\t(test_merge): Update.\n+\t(gt_ggc_mx): New function.\n+\t* ipa-modref-tree.h (struct modref_access_node): New structure.\n+\t(struct modref_ref_node): Add every_access and accesses array.\n+\t(modref_ref_node::modref_ref_node): Update ctor.\n+\t(modref_ref_node::search): New member function.\n+\t(modref_ref_node::collapse): New member function.\n+\t(modref_ref_node::insert_access): New member function.\n+\t(modref_base_node::insert_ref): Do not collapse base if ref is 0.\n+\t(modref_base_node::collapse): Copllapse also refs.\n+\t(modref_tree): Add accesses.\n+\t(modref_tree::modref_tree): Initialize max_accesses.\n+\t(modref_tree::insert): Add access parameter.\n+\t(modref_tree::cleanup): New member function.\n+\t(modref_tree::merge): Add parm_map; merge accesses.\n+\t(modref_tree::copy_from): New member function.\n+\t(modref_tree::create_ggc): Add max_accesses.\n+\t* ipa-modref.c (dump_access): New function.\n+\t(dump_records): Dump accesses.\n+\t(dump_lto_records): Dump accesses.\n+\t(get_access): New function.\n+\t(record_access): Record access.\n+\t(record_access_lto): Record access.\n+\t(analyze_call): Compute parm_map.\n+\t(analyze_function): Update construction of modref records.\n+\t(modref_summaries::duplicate): Likewise; use copy_from.\n+\t(write_modref_records): Stream accesses.\n+\t(read_modref_records): Sream accesses.\n+\t(pass_ipa_modref::execute): Update call of merge.\n+\t* params.opt (-param=modref-max-accesses): New.\n+\t* tree-ssa-alias.c (alias_stats): Add modref_baseptr_tests.\n+\t(dump_alias_stats): Update.\n+\t(base_may_alias_with_dereference_p): New function.\n+\t(modref_may_conflict): Check accesses.\n+\t(ref_maybe_used_by_call_p_1): Update call to modref_may_conflict.\n+\t(call_may_clobber_ref_p_1): Update call to modref_may_conflict.\n+\n+2020-09-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arm/arm.md (*stack_protect_combined_set_insn): For non-PIC,\n+\tload the address of the canary rather than the address of the\n+\tconstant pool entry that points to it.\n+\t(*stack_protect_combined_test_insn): Likewise.\n+\n+2020-09-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97085\n+\t* match.pd (mask ? { false,..} : { true, ..} -> ~mask): New.\n+\n+2020-09-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (modref_base::collapse): Release memory.\n+\t(modref_tree::create_ggc): New member function.\n+\t(modref_tree::colapse): Release memory.\n+\t(modref_tree::~modref_tree): New destructor.\n+\t* ipa-modref.c (modref_summaries::create_ggc): New function.\n+\t(analyze_function): Use create_ggc.\n+\t(modref_summaries::duplicate): Likewise.\n+\t(read_modref_records): Likewise.\n+\t(modref_read): Likewise.\n+\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Pass mode to\n+\treg_or_add_cint_operand and reg_or_sub_cint_operand.\n+\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/93012\n+\t* config/rs6000/rs6000.c (num_insns_constant_gpr): Count rldimi\n+\tconstants correctly.\n+\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n+\tConditionally define __PCREL__.\n+\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/97107\n+\t* config/rs6000/rs6000-internal.h (struct rs6000_stack): Improve\n+\tcalls_p comment.\n+\t* config/rs6000/rs6000-logue.c (rs6000_stack_info): Likewise.\n+\t(rs6000_expand_split_stack_prologue): Emit the prologue for\n+\tfunctions that make a sibling call.\n+\n+2020-09-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi (Analyzer Paths): Add note about\n+\t-fno-analyzer-feasibility.\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-fno-analyzer-feasibility.\n+\n 2020-09-24  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* doc/extend.texi: Add 'd' for doubleword variant of"}, {"sha": "cfe4a2ef954c913e54a7cc30f7bb6badadeb9333", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1 +1 @@\n-20200924\n+20200925"}, {"sha": "204791767792063f6c79db5cbe9185e20165c8ef", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,53 @@\n+2020-09-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (struct rejected_constraint): New decl.\n+\t* analyzer.opt (fanalyzer-feasibility): New option.\n+\t* diagnostic-manager.cc (path_builder::path_builder): Add\n+\t\"problem\" param and use it to initialize new field.\n+\t(path_builder::get_feasibility_problem): New accessor.\n+\t(path_builder::m_feasibility_problem): New field.\n+\t(dedupe_winners::add): Remove inversion of logic in \"if\" clause,\n+\tswapping if/else suites.  In the !feasible_p suite, inspect\n+\tflag_analyzer_feasibility and add code to handle when this\n+\tis off, accepting the infeasible path, but recording the\n+\tfeasibility_problem.\n+\t(diagnostic_manager::emit_saved_diagnostic): Pass the\n+\tfeasibility_problem to the path_builder.\n+\t(diagnostic_manager::add_events_for_eedge): If we have\n+\ta feasibility_problem at this edge, use it to add a custom event.\n+\t* engine.cc (exploded_path::feasible_p): Pass a\n+\trejected_constraint ** to model.maybe_update_for_edge and transfer\n+\townership of any created instance to any feasibility_problem.\n+\t(feasibility_problem::dump_to_pp): New.\n+\t* exploded-graph.h (feasibility_problem::feasibility_problem):\n+\tDrop \"model\" param; add rejected_constraint * param.\n+\t(feasibility_problem::~feasibility_problem): New.\n+\t(feasibility_problem::dump_to_pp): New decl.\n+\t(feasibility_problem::m_model): Drop field.\n+\t(feasibility_problem::m_rc): New field.\n+\t* program-point.cc (function_point::get_location): Handle\n+\tPK_BEFORE_SUPERNODE and PK_AFTER_SUPERNODE.\n+\t* program-state.cc (program_state::on_edge): Pass NULL to new\n+\tparam of region_model::maybe_update_for_edge.\n+\t* region-model.cc (region_model::add_constraint): New overload\n+\tadding a rejected_constraint ** param.\n+\t(region_model::maybe_update_for_edge): Add rejected_constraint **\n+\tparam and pass it to the various apply_constraints_for_ calls.\n+\t(region_model::apply_constraints_for_gcond): Add\n+\trejected_constraint ** param and pass it to add_constraint calls.\n+\t(region_model::apply_constraints_for_gswitch): Likewise.\n+\t(region_model::apply_constraints_for_exception): Likewise.\n+\t(rejected_constraint::dump_to_pp): New.\n+\t* region-model.h (region_model::maybe_update_for_edge):\n+\tAdd rejected_constraint ** param.\n+\t(region_model::add_constraint): New overload adding a\n+\trejected_constraint ** param.\n+\t(region_model::apply_constraints_for_gcond): Add\n+\trejected_constraint ** param.\n+\t(region_model::apply_constraints_for_gswitch): Likewise.\n+\t(region_model::apply_constraints_for_exception): Likewise.\n+\t(struct rejected_constraint): New.\n+\n 2020-09-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97178"}, {"sha": "e411f34c6f3bd273d6cb676aa0c74dfbc84bb91e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,43 @@\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (duplicate_decls): Default is_friend to false.\n+\t(xref_tag): Default tag_scope & tpl_header_p to ts_current & false.\n+\t(push_template_decl_real): Default is_friend to false.  Rename to\n+\t...\n+\t(push_template_decl): ... here.  Delete original decl.\n+\t* name-lookup.h (pushdecl_namespace_level): Default is_friend to\n+\tfalse.\n+\t(pushtag): Default tag_scope to ts_current.\n+\t* coroutines.cc (morph_fn_to_coro): Drop default args to xref_tag.\n+\t* decl.c (start_decl): Drop default args to duplicate_decls.\n+\t(start_enum): Drop default arg to pushtag & xref_tag.\n+\t(start_preparsed_function): Pass DECL_FRIEND_P to\n+\tpush_template_decl.\n+\t(grokmethod): Likewise.\n+\t* friend.c (do_friend): Rename push_template_decl_real calls.\n+\t* lambda.c (begin_lamnbda_type): Drop default args to xref_tag.\n+\t(vla_capture_type): Likewise.\n+\t* name-lookup.c (maybe_process_template_type_declaration): Rename\n+\tpush_template_decl_real call.\n+\t(pushdecl_top_level_and_finish): Drop default arg to\n+\tpushdecl_namespace_level.\n+\t* pt.c (push_template_decl_real): Assert no surprising friend\n+\tfunctions.  Rename to ...\n+\t(push_template_decl): ... here.  Delete original function.\n+\t(lookup_template_class_1): Drop default args from pushtag.\n+\t(instantiate_class_template_1): Likewise.\n+\t* ptree.c (debug_overload): Print hidden and using markers.\n+\t* rtti.c (init_rtti_processing): Drop refault args from xref_tag.\n+\t(build_dynamic_cast_1, tinfo_base_init): Likewise.\n+\t* semantics.c (begin_class_definition): Drop default args to\n+\tpushtag.\n+\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97186\n+\t* pt.c (maybe_instantiate_noexcept): Local externs are never\n+\tmember fns.\n+\n 2020-09-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.h (typedef cxx_binding): Delete tdef."}, {"sha": "19f2e6ae88ab5a4c23ae725b9abfd9cd257e73d8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,10 @@\n+2020-09-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96495\n+\t* trans-expr.c (gfc_conv_procedure_call): Take the deallocation\n+\tof allocatable result components of a scalar result outside the\n+\tscalarization loop. Find and use the stored result.\n+\n 2020-09-21  Harald Anlauf  <anlauf@gmx.de>\n \t    Paul Thomas   <pault@gcc.gnu.org>\n "}, {"sha": "993c36d58f6bf7a1aa86bea1f08aef678e07bbf2", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,9 @@\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* objcp-decl.c (objcp_start_struct): Drop default args to\n+\txref_tag.\n+\t(objcp_xref_tag): Likewise.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "0a190f8df7d57be6c2d86d205459ba7145ed80e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,88 @@\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/template/local-var1.C: New.\n+\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/template/local-fn4.C: Add target c++11\n+\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97186\n+\t* g++.dg/template/local10.C: Rename ...\n+\t* g++.dg/template/local-fn3.C: .. here.  Require lto.\n+\t* g++.dg/template/local-fn4.C: New.\n+\n+2020-09-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-1.c: New test.\n+\n+2020-09-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/tls/thr-cse-1.c: Scan final dump instead of assembly for\n+\tnvptx.\n+\n+2020-09-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/independent-cloneids-1.c: Use scan-rtl-dump instead of\n+\tscan-assembler.\n+\n+2020-09-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97085\n+\t* gcc.dg/pr97192.c: New testcase.\n+\n+2020-09-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/96495\n+\t* gfortran.dg/alloc_comp_result_2.f90 : New test.\n+\n+2020-09-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/pr87314-1.c: Add nvptx-specific scan-assembler directive.\n+\n+2020-09-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/arm/stack-protector-5.c: New test.\n+\t* gcc.target/arm/stack-protector-6.c: Likewise.\n+\n+2020-09-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/arm/stack-protector-3.c: New test.\n+\t* gcc.target/arm/stack-protector-4.c: Likewise.\n+\n+2020-09-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97085\n+\t* gcc.dg/vect/pr97085.c: New testcase.\n+\n+2020-09-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/pr94600-1.c: Require effective target non_strict_align for\n+\tscan-rtl-dump-times.\n+\t* gcc.dg/pr94600-3.c: Same.\n+\n+2020-09-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* c-c++-common/builtin-has-attribute-3.c: Compile with -DSKIP_ALIAS\n+\tfor effective target ! alias.\n+\n+2020-09-24  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/97075\n+\t* gcc.target/powerpc/p9-vec-length-full-6.c: Adjust.\n+\n+2020-09-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93355\n+\t* gcc.dg/analyzer/pr93355-localealias-feasibility.c: New test.\n+\t* gcc.dg/analyzer/pr93355-localealias-simplified.c: New test.\n+\t* gcc.dg/analyzer/pr93355-localealias.c: New test.\n+\n+2020-09-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/feasibility-2.c: New test.\n+\n 2020-09-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97175"}, {"sha": "41e3b76766ea0e1c985ba6f5c47a6ede4ea42a26", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,12 @@\n+2020-09-24  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarf2.def: Add DWARF5 Unit type header encoding macros\n+\tDW_UT_FIRST, DW_UT and DW_UT_END.\n+\t* dwarf2.h (enum dwarf_unit_type): Removed and define using\n+\tDW_UT_FIRST, DW_UT and DW_UT_END macros.\n+\t(DW_CIE_VERSION): Removed.\n+\t(get_DW_UT_name): New function declaration.\n+\n 2020-09-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/96668"}, {"sha": "9080b28755f193f56a0327104ccd5da0148289fb", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,14 @@\n+2020-09-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (supplement_binding): Drop default args to\n+\tduplicate_decls.\n+\t(safe_pushtag): Drop scope parm.  Drop default args to pushtag.\n+\t(safe_pushdecl_maybe_friend): Rename to ...\n+\t(safe_pushdecl): ... here. Drop is_friend parm.  Drop default args\n+\tto pushdecl.\n+\t(plugin_build_decl): Adjust safe_pushdecl & safe_pushtag calls.\n+\t(plugin_build_constant): Adjust safe_pushdecl call.\n+\n 2020-09-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_call_expr): Use DECL_LOCAL_DECL_P."}, {"sha": "4cf3149a5871c6a0eb960c62c8c0fadb49755f43", "filename": "libffi/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,15 @@\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64): Correct\n+\tlocation of .Lret.\n+\n+2020-09-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* src/powerpc/linux64.S (ffi_call_LINUX64): Don't emit global\n+\tentry when __PCREL__.  Call using @notoc.  Add nops.\n+\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64): Likewise.\n+\t(ffi_go_closure_linux64): Likewise.\n+\n 2020-04-25  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* Makefile.am (DISTCLEANFILES): New variable."}, {"sha": "7edf7c8fa8019ca33c0b865d68fbb479b1b18157", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,8 @@\n+2020-09-24  Mark Wielaard  <mark@klomp.org>\n+\n+\t* dwarfnames.c (get_DW_UT_name): Define using DW_UT_FIRST, DW_UT\n+\tand DW_UT_END.\n+\n 2020-09-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \t* floatformat.c (floatformat_bfloat16_big): New."}, {"sha": "b446a58dd898ffd6dc747bed908347fa85bac972", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "patch": "@@ -1,3 +1,37 @@\n+2020-09-24  Antony Polukhin  <antoshkka@gmail.com>\n+\n+\tPR libstdc++/71579\n+\t* include/std/type_traits (invoke_result, is_invocable)\n+\t(is_invocable_r, is_nothrow_invocable, is_nothrow_invocable_r):\n+\tAdd static_asserts to make sure that the arguments of the type\n+\ttraits are not misused with incomplete types.\n+\t* testsuite/20_util/invoke_result/incomplete_args_neg.cc: New test.\n+\t* testsuite/20_util/is_invocable/incomplete_args_neg.cc: New test.\n+\t* testsuite/20_util/is_invocable/incomplete_neg.cc: New test.\n+\t* testsuite/20_util/is_nothrow_invocable/incomplete_args_neg.cc:\n+\tNew test.\n+\t* testsuite/20_util/is_nothrow_invocable/incomplete_neg.cc: Check\n+\tfor error on incomplete type usage in trait.\n+\n+2020-09-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__boxable): Split out the\n+\tassociated constraints of __box into here.\n+\t(__detail::__box): Use the __boxable concept.  Define a leaner\n+\tpartial specialization for semiregular types.\n+\t(single_view::_M_value): Give it [[no_unique_address]].\n+\t(filter_view::_M_pred): Likewise.\n+\t(transform_view::_M_fun): Likewise.\n+\t(take_while_view::_M_pred): Likewise.\n+\t(drop_while_view::_M_pred):: Likewise.\n+\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc: New\n+\ttest.\n+\n+2020-09-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/configure.xml: Correct name of option.\n+\t* doc/html/*: Regenerate.\n+\n 2020-09-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/97167"}]}