{"sha": "ce894603bf0d99149a4f109380b0e6552a24081b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4OTQ2MDNiZjBkOTkxNDlhNGYxMDkzODBiMGU2NTUyYTI0MDgxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-30T11:33:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-30T11:33:54Z"}, "message": "re PR libstdc++/17215 ([3.4 only] __basic_file<char>::close ignores errors)\n\n2004-08-30  Paolo Carlini  <pcarlini@suse.de>\n\t    Kenneth C. Schalk  <ken@xorian.net>\n\n\tPR libstdc++/17215\n\t* config/io/basic_file_stdio.cc (__basic_file<char>::close()):\n\tCheck the return value of fclose/sync, loop on EINTR.\n\t(__basic_file<char>::sys_open): Likewise, for sync.\n\nCo-Authored-By: Kenneth C. Schalk <ken@xorian.net>\n\nFrom-SVN: r86756", "tree": {"sha": "317f2029db735292793cd5a5590314aec48030dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317f2029db735292793cd5a5590314aec48030dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce894603bf0d99149a4f109380b0e6552a24081b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce894603bf0d99149a4f109380b0e6552a24081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce894603bf0d99149a4f109380b0e6552a24081b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce894603bf0d99149a4f109380b0e6552a24081b/comments", "author": null, "committer": null, "parents": [{"sha": "28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "42385c2c422fa0f0e0f1655a0ceef3b67499628a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce894603bf0d99149a4f109380b0e6552a24081b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce894603bf0d99149a4f109380b0e6552a24081b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce894603bf0d99149a4f109380b0e6552a24081b", "patch": "@@ -1,3 +1,11 @@\n+2004-08-30  Paolo Carlini  <pcarlini@suse.de>\n+\t    Kenneth C. Schalk  <ken@xorian.net>\n+\n+\tPR libstdc++/17215\n+\t* config/io/basic_file_stdio.cc (__basic_file<char>::close()):\n+\tCheck the return value of fclose/sync, loop on EINTR.\n+\t(__basic_file<char>::sys_open): Likewise, for sync.\n+\n 2004-08-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (time_get<>::_M_extract_via_format,"}, {"sha": "680220bc4c582766c76e35bb1c20217a4b99b5b7", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce894603bf0d99149a4f109380b0e6552a24081b/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce894603bf0d99149a4f109380b0e6552a24081b/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=ce894603bf0d99149a4f109380b0e6552a24081b", "patch": "@@ -189,10 +189,17 @@ namespace std\n     __basic_file* __ret = NULL;\n     if (!this->is_open() && __file)\n       {\n- \t_M_cfile = __file;\n- \t_M_cfile_created = false;\n-\tthis->sync();\n-  \t__ret = this;\n+\tint __err;\n+\terrno = 0;\t\n+\tdo\n+\t  __err = this->sync();\n+\twhile (__err && errno == EINTR);\n+\tif (!__err)\n+\t  {\n+\t    _M_cfile = __file;\n+\t    _M_cfile_created = false;\n+\t    __ret = this;\n+\t  }\n       }\n     return __ret;\n   }\n@@ -252,12 +259,23 @@ namespace std\n     __basic_file* __ret = static_cast<__basic_file*>(NULL);\n     if (this->is_open())\n       {\n+\t// In general, no need to zero errno in advance if checking\n+\t// for error first. However, C89/C99 (at variance with IEEE\n+\t// 1003.1, f.i.) do not mandate that fclose/fflush must set\n+\t// errno upon error.\n+\tint __err;\n+\terrno = 0;\n \tif (_M_cfile_created)\n-\t  fclose(_M_cfile);\n+\t  do\n+\t    __err = fclose(_M_cfile);\n+\t  while (__err && errno == EINTR);\n \telse\n-\t  this->sync();\n+\t  do\n+\t    __err = this->sync();\n+\t  while (__err && errno == EINTR);\n+\tif (!__err)\n+\t  __ret = this;\n \t_M_cfile = 0;\n-\t__ret = this;\n       }\n     return __ret;\n   }"}]}