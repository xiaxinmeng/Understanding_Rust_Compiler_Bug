{"sha": "7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "node_id": "C_kwDOANBUbNoAKDdiY2E3MjE4YWM5MmI4Zjg0MmQ5M2RkNjcyMzg1YzJiYTBmOGZhZjk", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:34Z"}, "message": "aarch64: Use using directives to inherit constructors\n\nNow that the codebase is C++11, we can use using directives\nto inherit constructors from base classes.\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins-functions.h (quiet)\n\t(rtx_code_function, rtx_code_function_rotated, unspec_based_function)\n\t(unspec_based_function_rotated, unspec_based_function_exact_insn)\n\t(unspec_based_fused_function, unspec_based_fused_lane_function):\n\tReplace constructors with using directives.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (svcnt_bhwd_pat_impl)\n\t(svcreate_impl, svdotprod_lane_impl, svget_impl, svld1_extend_impl)\n\t(svld1_gather_extend_impl, svld234_impl, svldff1_gather_extend)\n\t(svset_impl, svst1_scatter_truncate_impl, svst1_truncate_impl)\n\t(svst234_impl, svundef_impl): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc\n\t(svldnt1_gather_extend_impl, svmovl_lb_impl): Likewise.\n\t(svstnt1_scatter_truncate_impl): Likewise.", "tree": {"sha": "d0375696db83c7ba4fea8df5f422518a7848f24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0375696db83c7ba4fea8df5f422518a7848f24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9482a5e4eac8d696129ec2854b331e1bb5dbab42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9482a5e4eac8d696129ec2854b331e1bb5dbab42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9482a5e4eac8d696129ec2854b331e1bb5dbab42"}], "stats": {"total": 111, "additions": 24, "deletions": 87}, "files": [{"sha": "141f44d4d948d4477500a720fbb29a959e666211", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "patch": "@@ -536,8 +536,7 @@ class svcnt_bhwd_impl : public function_base\n class svcnt_bhwd_pat_impl : public svcnt_bhwd_impl\n {\n public:\n-  constexpr svcnt_bhwd_pat_impl (machine_mode ref_mode)\n-    : svcnt_bhwd_impl (ref_mode) {}\n+  using svcnt_bhwd_impl::svcnt_bhwd_impl;\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -588,8 +587,7 @@ class svcntp_impl : public function_base\n class svcreate_impl : public quiet<multi_vector_function>\n {\n public:\n-  constexpr svcreate_impl (unsigned int vectors_per_tuple)\n-    : quiet<multi_vector_function> (vectors_per_tuple) {}\n+  using quiet<multi_vector_function>::quiet;\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -722,12 +720,7 @@ class svdot_impl : public function_base\n class svdotprod_lane_impl : public unspec_based_function_base\n {\n public:\n-  constexpr svdotprod_lane_impl (int unspec_for_sint,\n-\t\t\t\t int unspec_for_uint,\n-\t\t\t\t int unspec_for_float)\n-    : unspec_based_function_base (unspec_for_sint,\n-\t\t\t\t  unspec_for_uint,\n-\t\t\t\t  unspec_for_float) {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1003,8 +996,7 @@ class svext_bhw_impl : public function_base\n class svget_impl : public quiet<multi_vector_function>\n {\n public:\n-  constexpr svget_impl (unsigned int vectors_per_tuple)\n-    : quiet<multi_vector_function> (vectors_per_tuple) {}\n+  using quiet<multi_vector_function>::quiet;\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -1118,8 +1110,7 @@ class svld1_impl : public full_width_access\n class svld1_extend_impl : public extending_load\n {\n public:\n-  constexpr svld1_extend_impl (type_suffix_index memory_type)\n-    : extending_load (memory_type) {}\n+  using extending_load::extending_load;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1158,8 +1149,7 @@ class svld1_gather_impl : public full_width_access\n class svld1_gather_extend_impl : public extending_load\n {\n public:\n-  constexpr svld1_gather_extend_impl (type_suffix_index memory_type)\n-    : extending_load (memory_type) {}\n+  using extending_load::extending_load;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1289,8 +1279,7 @@ class svld1ro_impl : public load_replicate\n class svld234_impl : public full_width_access\n {\n public:\n-  constexpr svld234_impl (unsigned int vectors_per_tuple)\n-    : full_width_access (vectors_per_tuple) {}\n+  using full_width_access::full_width_access;\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1372,8 +1361,7 @@ class svldff1_gather_impl : public full_width_access\n class svldff1_gather_extend : public extending_load\n {\n public:\n-  constexpr svldff1_gather_extend (type_suffix_index memory_type)\n-    : extending_load (memory_type) {}\n+  using extending_load::extending_load;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -2070,8 +2058,7 @@ class svsel_impl : public quiet<function_base>\n class svset_impl : public quiet<multi_vector_function>\n {\n public:\n-  constexpr svset_impl (unsigned int vectors_per_tuple)\n-    : quiet<multi_vector_function> (vectors_per_tuple) {}\n+  using quiet<multi_vector_function>::quiet;\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -2199,8 +2186,7 @@ class svst1_scatter_impl : public full_width_access\n class svst1_scatter_truncate_impl : public truncating_store\n {\n public:\n-  constexpr svst1_scatter_truncate_impl (scalar_int_mode to_mode)\n-    : truncating_store (to_mode) {}\n+  using truncating_store::truncating_store;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -2219,8 +2205,7 @@ class svst1_scatter_truncate_impl : public truncating_store\n class svst1_truncate_impl : public truncating_store\n {\n public:\n-  constexpr svst1_truncate_impl (scalar_int_mode to_mode)\n-    : truncating_store (to_mode) {}\n+  using truncating_store::truncating_store;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -2235,8 +2220,7 @@ class svst1_truncate_impl : public truncating_store\n class svst234_impl : public full_width_access\n {\n public:\n-  constexpr svst234_impl (unsigned int vectors_per_tuple)\n-    : full_width_access (vectors_per_tuple) {}\n+  using full_width_access::full_width_access;\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -2351,8 +2335,7 @@ class svtrn_impl : public binary_permute\n class svundef_impl : public quiet<multi_vector_function>\n {\n public:\n-  constexpr svundef_impl (unsigned int vectors_per_tuple)\n-    : quiet<multi_vector_function> (vectors_per_tuple) {}\n+  using quiet<multi_vector_function>::quiet;\n \n   rtx\n   expand (function_expander &e) const override"}, {"sha": "ec943c53a3568c986166ac43a74442e8c968d44d", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "patch": "@@ -30,18 +30,7 @@ template<typename T>\n class quiet : public T\n {\n public:\n-  constexpr quiet () : T () {}\n-\n-  /* Unfortunately we can't use parameter packs yet.  */\n-  template<typename T1>\n-  constexpr quiet (const T1 &t1) : T (t1) {}\n-\n-  template<typename T1, typename T2>\n-  constexpr quiet (const T1 &t1, const T2 &t2) : T (t1, t2) {}\n-\n-  template<typename T1, typename T2, typename T3>\n-  constexpr quiet (const T1 &t1, const T2 &t2, const T3 &t3)\n-    : T (t1, t2, t3) {}\n+  using T::T;\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -200,9 +189,7 @@ class rtx_code_function_base : public function_base\n class rtx_code_function : public rtx_code_function_base\n {\n public:\n-  constexpr rtx_code_function (rtx_code code_for_sint, rtx_code code_for_uint,\n-\t\t\t       int unspec_for_fp = -1)\n-    : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n+  using rtx_code_function_base::rtx_code_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -219,10 +206,7 @@ class rtx_code_function : public rtx_code_function_base\n class rtx_code_function_rotated : public rtx_code_function_base\n {\n public:\n-  constexpr rtx_code_function_rotated (rtx_code code_for_sint,\n-\t\t\t\t       rtx_code code_for_uint,\n-\t\t\t\t       int unspec_for_fp = -1)\n-    : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n+  using rtx_code_function_base::rtx_code_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -272,11 +256,7 @@ class unspec_based_function_base : public function_base\n class unspec_based_function : public unspec_based_function_base\n {\n public:\n-  constexpr unspec_based_function (int unspec_for_sint, int unspec_for_uint,\n-\t\t\t\t   int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -293,12 +273,7 @@ class unspec_based_function : public unspec_based_function_base\n class unspec_based_function_rotated : public unspec_based_function_base\n {\n public:\n-  constexpr unspec_based_function_rotated (int unspec_for_sint,\n-\t\t\t\t\t   int unspec_for_uint,\n-\t\t\t\t\t   int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -321,12 +296,7 @@ template<insn_code (*CODE) (int, machine_mode)>\n class unspec_based_function_exact_insn : public unspec_based_function_base\n {\n public:\n-  constexpr unspec_based_function_exact_insn (int unspec_for_sint,\n-\t\t\t\t\t      int unspec_for_uint,\n-\t\t\t\t\t      int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -378,12 +348,7 @@ template<insn_code (*INT_CODE) (int, machine_mode)>\n class unspec_based_fused_function : public unspec_based_function_base\n {\n public:\n-  constexpr unspec_based_fused_function (int unspec_for_sint,\n-\t\t\t\t\t int unspec_for_uint,\n-\t\t\t\t\t int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -413,12 +378,7 @@ template<insn_code (*INT_CODE) (int, machine_mode)>\n class unspec_based_fused_lane_function : public unspec_based_function_base\n {\n public:\n-  constexpr unspec_based_fused_lane_function (int unspec_for_sint,\n-\t\t\t\t\t      int unspec_for_uint,\n-\t\t\t\t\t      int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override"}, {"sha": "ca8f20db57effa0198727bfe8b6cb5471b1d48a6", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bca7218ac92b8f842d93dd672385c2ba0f8faf9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=7bca7218ac92b8f842d93dd672385c2ba0f8faf9", "patch": "@@ -138,8 +138,7 @@ class svldnt1_gather_impl : public full_width_access\n class svldnt1_gather_extend_impl : public extending_load\n {\n public:\n-  constexpr svldnt1_gather_extend_impl (type_suffix_index memory_type)\n-    : extending_load (memory_type) {}\n+  using extending_load::extending_load;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -178,11 +177,7 @@ class svmatch_svnmatch_impl : public function_base\n class svmovl_lb_impl : public unspec_based_function_base\n {\n public:\n-  constexpr svmovl_lb_impl (int unspec_for_sint, int unspec_for_uint,\n-\t\t\t    int unspec_for_fp)\n-    : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n-\t\t\t\t  unspec_for_fp)\n-  {}\n+  using unspec_based_function_base::unspec_based_function_base;\n \n   rtx\n   expand (function_expander &e) const override\n@@ -393,8 +388,7 @@ class svstnt1_scatter_impl : public full_width_access\n class svstnt1_scatter_truncate_impl : public truncating_store\n {\n public:\n-  constexpr svstnt1_scatter_truncate_impl (scalar_int_mode to_mode)\n-    : truncating_store (to_mode) {}\n+  using truncating_store::truncating_store;\n \n   rtx\n   expand (function_expander &e) const override"}]}