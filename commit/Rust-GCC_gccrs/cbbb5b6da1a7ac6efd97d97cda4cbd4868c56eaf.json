{"sha": "cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiYjViNmRhMWE3YWM2ZWZkOTdkOTdjZGE0Y2JkNDg2OGM1NmVhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-03-09T18:31:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-03-09T18:31:08Z"}, "message": "md.texi: Update documentation of MIPS constraints.\n\n\t* doc/md.texi: Update documentation of MIPS constraints.\n\t* config/mips/constraints.md: New file.\n\t* config/mips/mips.md: Include it.\n\t* config/mips/mips.c (mips_char_to_class): Delete.\n\t(override_options): Don't initialize mips_char_to_class.\n\t* config/mips/mips.h (mips_char_to_class): Delete.\n\t(REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_LETTER_P): Delete.\n\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT_Y): Delete.\n\t(EXTRA_CONSTRAINT_STR): Delete.\n\t(CONSTRAINT_LEN): Delete.\n\t(EXTRA_MEMORY_CONSTRAINT): Delete.\n\nFrom-SVN: r111868", "tree": {"sha": "bec3c372633051768b1c7336dd050b3a97d94678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bec3c372633051768b1c7336dd050b3a97d94678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/comments", "author": null, "committer": null, "parents": [{"sha": "1799e5d5ca20304e32f7d1134ba5e8a2ab231880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1799e5d5ca20304e32f7d1134ba5e8a2ab231880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1799e5d5ca20304e32f7d1134ba5e8a2ab231880"}], "stats": {"total": 429, "additions": 237, "deletions": 192}, "files": [{"sha": "9b1fb91b5a961986647cdd5f5618fcf2c42e0944", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -1,3 +1,19 @@\n+2006-03-09  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/md.texi: Update documentation of MIPS constraints.\n+\t* config/mips/constraints.md: New file.\n+\t* config/mips/mips.md: Include it.\n+\t* config/mips/mips.c (mips_char_to_class): Delete.\n+\t(override_options): Don't initialize mips_char_to_class.\n+\t* config/mips/mips.h (mips_char_to_class): Delete.\n+\t(REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P): Delete.\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT_Y): Delete.\n+\t(EXTRA_CONSTRAINT_STR): Delete.\n+\t(CONSTRAINT_LEN): Delete.\n+\t(EXTRA_MEMORY_CONSTRAINT): Delete.\n+\n 2006-03-09  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-cfg.c (move_block_to_fn): Remove the statements from the"}, {"sha": "711aa1587f9191831326102fec4ec377570a3f29", "filename": "gcc/config/mips/constraints.md", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -0,0 +1,195 @@\n+;; Constraint definitions for MIPS.\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; Register constraints\n+\n+(define_register_constraint \"d\" \"BASE_REG_CLASS\"\n+  \"An address register.  This is equivalent to @code{r} unless\n+   generating MIPS16 code.\")\n+\n+(define_register_constraint \"t\" \"T_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"f\" \"TARGET_HARD_FLOAT ? FP_REGS : NO_REGS\"\n+  \"A floating-point register (if available).\")\n+\n+(define_register_constraint \"h\" \"HI_REG\"\n+  \"The @code{hi} register.\")\n+\n+(define_register_constraint \"l\" \"LO_REG\"\n+  \"The @code{lo} register.\")\n+\n+(define_register_constraint \"x\" \"MD_REGS\"\n+  \"The @code{hi} and @code{lo} registers.\")\n+\n+(define_register_constraint \"b\" \"ALL_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"TARGET_ABICALLS ? PIC_FN_ADDR_REG\n+\t\t\t\t : TARGET_MIPS16 ? M16_NA_REGS\n+\t\t\t\t : GR_REGS\"\n+  \"A register suitable for use in an indirect jump.  This will always be\n+   @code{$25} for @option{-mabicalls}.\")\n+\n+(define_register_constraint \"e\" \"LEA_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"j\" \"PIC_FN_ADDR_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"v\" \"V1_REG\"\n+  \"@internal\")\n+\n+(define_register_constraint \"y\" \"GR_REGS\"\n+  \"Equivalent to @code{r}; retained for backwards compatibility.\")\n+\n+(define_register_constraint \"z\" \"ST_REGS\"\n+  \"A floating-point condition code register.\")\n+\n+(define_register_constraint \"A\" \"DSP_ACC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"a\" \"ACC_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"B\" \"COP0_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"C\" \"COP2_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"D\" \"COP3_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints\n+\n+(define_constraint \"I\"\n+  \"A signed 16-bit constant (for arithmetic instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_OPERAND (ival)\")))\n+\n+(define_constraint \"J\"\n+  \"Integer zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"K\"\n+  \"An unsigned 16-bit constant (for logic instructions).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"SMALL_OPERAND_UNSIGNED (ival)\")))\n+ \n+(define_constraint \"L\"\n+  \"A signed 32-bit constant in which the lower 16 bits are zero.\n+   Such constants can be loaded using @code{lui}.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"LUI_OPERAND (ival)\")))\n+\n+(define_constraint \"M\"\n+  \"A constant that cannot be loaded using @code{lui}, @code{addiu}\n+   or @code{ori}.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"!SMALL_OPERAND (ival)\")\n+       (match_test \"!SMALL_OPERAND_UNSIGNED (ival)\")\n+       (match_test \"!LUI_OPERAND (ival)\")))\n+\n+(define_constraint \"N\"\n+  \"A constant in the range -65535 to -1 (inclusive).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -0xffff && ival < 0\")))\n+\n+(define_constraint \"O\"\n+  \"A signed 15-bit constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -0x4000 && ival < 0x4000\")))\n+\n+(define_constraint \"P\"\n+  \"A constant in the range 1 to 65535 (inclusive).\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival > 0 && ival < 0x10000\")))\n+\n+;; Floating-point constraints\n+\n+(define_constraint \"G\"\n+  \"Floating-point zero.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; General constraints\n+\n+(define_constraint \"Q\"\n+  \"@internal\"\n+  (match_operand 0 \"const_arith_operand\"))\n+\n+(define_memory_constraint \"R\"\n+  \"An address that can be used in a non-macro load or store.\"\n+  (and (match_code \"mem\")\n+       (match_test \"mips_fetch_insns (op) == 1\")))\n+\n+(define_constraint \"S\"\n+  \"@internal\n+   A constant call address.\"\n+  (and (match_operand 0 \"call_insn_operand\")\n+       (match_test \"CONSTANT_P (op)\")))\n+\n+(define_constraint \"T\"\n+  \"@internal\n+   A constant @code{move_operand} that cannot be safely loaded into @code{$25}\n+   using @code{la}.\"\n+  (and (match_operand 0 \"move_operand\")\n+       (match_test \"CONSTANT_P (op)\")\n+       (match_test \"mips_dangerous_for_la25_p (op)\")))\n+\n+(define_constraint \"U\"\n+  \"@internal\n+   A constant @code{move_operand} that can be safely loaded into @code{$25}\n+   using @code{la}.\"\n+  (and (match_operand 0 \"move_operand\")\n+       (match_test \"CONSTANT_P (op)\")\n+       (match_test \"!mips_dangerous_for_la25_p (op)\")))\n+\n+(define_memory_constraint \"W\"\n+  \"@internal\n+   A memory address based on a member of @code{BASE_REG_CLASS}.  This is\n+   true for all non-mips16 references (although it can sometimes be implicit\n+   if @samp{!TARGET_EXPLICIT_RELOCS}).  For MIPS16, it excludes stack and\n+   constant-pool references.\"\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"memory_operand\")\n+       (ior (match_test \"!TARGET_MIPS16\")\n+\t    (and (not (match_operand 0 \"stack_operand\"))\n+\t\t (not (match_test \"CONSTANT_P (XEXP (op, 0))\"))))))\n+\n+(define_constraint \"YG\"\n+  \"@internal\n+   A vector zero.\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+(define_constraint \"YA\"\n+  \"@internal\n+   An unsigned 6-bit constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UIMM6_OPERAND (ival)\")))\n+\n+(define_constraint \"YB\"\n+  \"@internal\n+   A signed 10-bit constant.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IMM10_OPERAND (ival)\")))"}, {"sha": "aed07e58dda3587e84ca90e8482176bc63ccea00", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -690,9 +690,6 @@ const enum reg_class mips_regno_to_class[] =\n   ALL_REGS,\tALL_REGS,\tALL_REGS,\tALL_REGS\n };\n \n-/* Map register constraint character to register class.  */\n-enum reg_class mips_char_to_class[256];\n-\n /* Table of machine dependent attributes.  */\n const struct attribute_spec mips_attribute_table[] =\n {\n@@ -4844,27 +4841,6 @@ override_options (void)\n   mips_print_operand_punct['+'] = 1;\n   mips_print_operand_punct['~'] = 1;\n \n-  mips_char_to_class['d'] = TARGET_MIPS16 ? M16_REGS : GR_REGS;\n-  mips_char_to_class['t'] = T_REG;\n-  mips_char_to_class['f'] = (TARGET_HARD_FLOAT ? FP_REGS : NO_REGS);\n-  mips_char_to_class['h'] = HI_REG;\n-  mips_char_to_class['l'] = LO_REG;\n-  mips_char_to_class['x'] = MD_REGS;\n-  mips_char_to_class['b'] = ALL_REGS;\n-  mips_char_to_class['c'] = (TARGET_ABICALLS ? PIC_FN_ADDR_REG :\n-\t\t\t     TARGET_MIPS16 ? M16_NA_REGS :\n-\t\t\t     GR_REGS);\n-  mips_char_to_class['e'] = LEA_REGS;\n-  mips_char_to_class['j'] = PIC_FN_ADDR_REG;\n-  mips_char_to_class['v'] = V1_REG;\n-  mips_char_to_class['y'] = GR_REGS;\n-  mips_char_to_class['z'] = ST_REGS;\n-  mips_char_to_class['B'] = COP0_REGS;\n-  mips_char_to_class['C'] = COP2_REGS;\n-  mips_char_to_class['D'] = COP3_REGS;\n-  mips_char_to_class['A'] = DSP_ACC_REGS;\n-  mips_char_to_class['a'] = ACC_REGS;\n-\n   /* Set up array to map GCC register number to debug register number.\n      Ignore the special purpose register numbers.  */\n "}, {"sha": "8a993e0f394aee8239dc400837018a9b9acd9e09", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 140, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -1636,35 +1636,6 @@ extern const enum reg_class mips_regno_to_class[];\n \n #define ORDER_REGS_FOR_LOCAL_ALLOC mips_order_regs_for_local_alloc ()\n \n-/* REGISTER AND CONSTANT CLASSES */\n-\n-/* Get reg_class from a letter such as appears in the machine\n-   description.\n-\n-   DEFINED REGISTER CLASSES:\n-\n-   'd'  General (aka integer) registers\n-        Normally this is GR_REGS, but in mips16 mode this is M16_REGS\n-   'y'  General registers (in both mips16 and non mips16 mode)\n-   'e'\tEffective address registers (general registers except $25)\n-   't'  mips16 temporary register ($24)\n-   'f'\tFloating point registers\n-   'h'\tHi register\n-   'l'\tLo register\n-   'v'\t$v1 only\n-   'x'\tMultiply/divide registers\n-   'z'\tFP Status register\n-   'B'  Cop0 register\n-   'C'  Cop2 register\n-   'D'  Cop3 register\n-   'A'  DSP accumulator registers\n-   'a'  MD registers and DSP accumulator registers\n-   'b'\tAll registers */\n-\n-extern enum reg_class mips_char_to_class[256];\n-\n-#define REG_CLASS_FROM_LETTER(C) mips_char_to_class[(unsigned char)(C)]\n-\n /* True if VALUE is an unsigned 6-bit number.  */\n \n #define UIMM6_OPERAND(VALUE) \\\n@@ -1704,117 +1675,6 @@ extern enum reg_class mips_char_to_class[256];\n #define SMALL_INT_UNSIGNED(X) SMALL_OPERAND_UNSIGNED (INTVAL (X))\n #define LUI_INT(X) LUI_OPERAND (INTVAL (X))\n \n-/* The letters I, J, K, L, M, N, O, and P in a register constraint\n-   string can be used to stand for particular ranges of immediate\n-   operands.  This macro defines what the ranges are.  C is the\n-   letter, and VALUE is a constant value.  Return 1 if VALUE is\n-   in the range specified by C.  */\n-\n-/* For MIPS:\n-\n-   `I'\tis used for the range of constants an arithmetic insn can\n-\tactually contain (16 bits signed integers).\n-\n-   `J'\tis used for the range which is just zero (i.e., $r0).\n-\n-   `K'\tis used for the range of constants a logical insn can actually\n-\tcontain (16 bit zero-extended integers).\n-\n-   `L'\tis used for the range of constants that be loaded with lui\n-\t(i.e., the bottom 16 bits are zero).\n-\n-   `M'\tis used for the range of constants that take two words to load\n-\t(i.e., not matched by `I', `K', and `L').\n-\n-   `N'\tis used for negative 16 bit constants other than -65536.\n-\n-   `O'\tis a 15 bit signed integer.\n-\n-   `P'\tis used for positive 16 bit constants.  */\n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n-  ((C) == 'I' ? SMALL_OPERAND (VALUE)\t\t\t\t\t\\\n-   : (C) == 'J' ? ((VALUE) == 0)\t\t\t\t\t\\\n-   : (C) == 'K' ? SMALL_OPERAND_UNSIGNED (VALUE)\t\t\t\\\n-   : (C) == 'L' ? LUI_OPERAND (VALUE)\t\t\t\t\t\\\n-   : (C) == 'M' ? (!SMALL_OPERAND (VALUE)\t\t\t\t\\\n-\t\t   && !SMALL_OPERAND_UNSIGNED (VALUE)\t\t\t\\\n-\t\t   && !LUI_OPERAND (VALUE))\t\t\t\t\\\n-   : (C) == 'N' ? ((unsigned HOST_WIDE_INT) ((VALUE) + 0xffff) < 0xffff) \\\n-   : (C) == 'O' ? ((unsigned HOST_WIDE_INT) ((VALUE) + 0x4000) < 0x8000) \\\n-   : (C) == 'P' ? ((VALUE) != 0 && (((VALUE) & ~0x0000ffff) == 0))\t\\\n-   : 0)\n-\n-/* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself.  */\n-\n-/* For MIPS\n-\n-  'G'\t: Floating point 0 */\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\\\n-  ((C) == 'G'\t\t\t\t\t\t\t\t\\\n-   && (VALUE) == CONST0_RTX (GET_MODE (VALUE)))\n-\n-/* Letters in the range `Q' through `U' may be defined in a\n-   machine-dependent fashion to stand for arbitrary operand types.\n-   The machine description macro `EXTRA_CONSTRAINT' is passed the\n-   operand as its first argument and the constraint letter as its\n-   second operand.\n-\n-   `Q' is for signed 16-bit constants.\n-   `R' is for single-instruction memory references.  Note that this\n-\t constraint has often been used in linux and glibc code.\n-   `S' is for legitimate constant call addresses.\n-   `T' is for constant move_operands that cannot be safely loaded into $25.\n-   `U' is for constant move_operands that can be safely loaded into $25.\n-   `W' is for memory references that are based on a member of BASE_REG_CLASS.\n-\t This is true for all non-mips16 references (although it can sometimes\n-\t be indirect if !TARGET_EXPLICIT_RELOCS).  For mips16, it excludes\n-\t stack and constant-pool references.\n-   `YG' is for 0 valued vector constants.\n-   `YA' is for unsigned 6-bit constants.\n-   `YB' is for signed 10-bit constants.  */\n-\n-#define EXTRA_CONSTRAINT_Y(OP,STR)\t\t\t\t\t\\\n-  (((STR)[1] == 'G')\t  ? (GET_CODE (OP) == CONST_VECTOR\t\t\\\n-\t\t\t     && (OP) == CONST0_RTX (GET_MODE (OP)))\t\\\n-   : ((STR)[1] == 'A')\t  ? (GET_CODE (OP) == CONST_INT\t\t\t\\\n-\t\t\t     && UIMM6_OPERAND (INTVAL (OP)))\t\t\\\n-   : ((STR)[1] == 'B')\t  ? (GET_CODE (OP) == CONST_INT\t\t\t\\\n-\t\t\t     && IMM10_OPERAND (INTVAL (OP)))\t\t\\\n-   : FALSE)\n-\n-\n-#define EXTRA_CONSTRAINT_STR(OP,CODE,STR)\t\t\t\t\\\n-  (((CODE) == 'Q')\t  ? const_arith_operand (OP, VOIDmode)\t\t\\\n-   : ((CODE) == 'R')\t  ? (MEM_P (OP)\t\t\t\t\t\\\n-\t\t\t     && mips_fetch_insns (OP) == 1)\t\t\\\n-   : ((CODE) == 'S')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n-\t\t\t     && call_insn_operand (OP, VOIDmode))\t\\\n-   : ((CODE) == 'T')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n-\t\t\t     && move_operand (OP, VOIDmode)\t\t\\\n-\t\t\t     && mips_dangerous_for_la25_p (OP))\t\t\\\n-   : ((CODE) == 'U')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n-\t\t\t     && move_operand (OP, VOIDmode)\t\t\\\n-\t\t\t     && !mips_dangerous_for_la25_p (OP))\t\\\n-   : ((CODE) == 'W')\t  ? (MEM_P (OP)\t\t\t\t\t\\\n-\t\t\t     && memory_operand (OP, VOIDmode)\t\t\\\n-\t\t\t     && (!TARGET_MIPS16\t\t\t\t\\\n-\t\t\t\t || (!stack_operand (OP, VOIDmode)\t\\\n-\t\t\t\t     && !CONSTANT_P (XEXP (OP, 0)))))\t\\\n-   : ((CODE) == 'Y')\t  ? EXTRA_CONSTRAINT_Y (OP, STR)\t\t\\\n-   : FALSE)\n-\n-/* Y is the only multi-letter constraint, and has length 2.  */\n-\n-#define CONSTRAINT_LEN(C,STR)\t\t\t\t\t\t\\\n-  (((C) == 'Y') ? 2\t\t\t\t\t\t\t\\\n-   : DEFAULT_CONSTRAINT_LEN (C, STR))\n-\n-/* Say which of the above are memory constraints.  */\n-#define EXTRA_MEMORY_CONSTRAINT(C, STR) ((C) == 'R' || (C) == 'W')\n-\n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\t\\\n   mips_preferred_reload_class (X, CLASS)\n "}, {"sha": "23677f093280a01ac452b95dbc2870a6704c9018", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -146,6 +146,7 @@\n )\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \f\n ;; ....................\n ;;"}, {"sha": "0fc22653ea6664daabfaf0b7d06ee0af2f9320b7", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=cbbb5b6da1a7ac6efd97d97cda4cbd4868c56eaf", "patch": "@@ -2368,68 +2368,65 @@ Memory addressed using the small base register ($sb).\n $r1h\n @end table\n \n-@item MIPS---@file{config/mips/mips.h}\n+@item MIPS---@file{config/mips/constraints.md}\n @table @code\n @item d\n-General-purpose integer register\n+An address register.  This is equivalent to @code{r} unless\n+generating MIPS16 code.\n \n @item f\n-Floating-point register (if available)\n+A floating-point register (if available).\n \n @item h\n-@samp{Hi} register\n+The @code{hi} register.\n \n @item l\n-@samp{Lo} register\n+The @code{lo} register.\n \n @item x\n-@samp{Hi} or @samp{Lo} register\n+The @code{hi} and @code{lo} registers.\n+\n+@item c\n+A register suitable for use in an indirect jump.  This will always be\n+@code{$25} for @option{-mabicalls}.\n \n @item y\n-General-purpose integer register\n+Equivalent to @code{r}; retained for backwards compatibility.\n \n @item z\n-Floating-point status register\n+A floating-point condition code register.\n \n @item I\n-Signed 16-bit constant (for arithmetic instructions)\n+A signed 16-bit constant (for arithmetic instructions).\n \n @item J\n-Zero\n+Integer zero.\n \n @item K\n-Zero-extended 16-bit constant (for logic instructions)\n+An unsigned 16-bit constant (for logic instructions).\n \n @item L\n-Constant with low 16 bits zero (can be loaded with @code{lui})\n+A signed 32-bit constant in which the lower 16 bits are zero.\n+Such constants can be loaded using @code{lui}.\n \n @item M\n-32-bit constant which requires two instructions to load (a constant\n-which is not @samp{I}, @samp{K}, or @samp{L})\n+A constant that cannot be loaded using @code{lui}, @code{addiu}\n+or @code{ori}.\n \n @item N\n-Negative 16-bit constant\n+A constant in the range -65535 to -1 (inclusive).\n \n @item O\n-Exact power of two\n+A signed 15-bit constant.\n \n @item P\n-Positive 16-bit constant\n+A constant in the range 1 to 65535 (inclusive).\n \n @item G\n-Floating point zero\n-\n-@item Q\n-Memory reference that can be loaded with more than one instruction\n-(@samp{m} is preferable for @code{asm} statements)\n+Floating-point zero.\n \n @item R\n-Memory reference that can be loaded with one instruction\n-(@samp{m} is preferable for @code{asm} statements)\n-\n-@item S\n-Memory reference in external OSF/rose PIC format\n-(@samp{m} is preferable for @code{asm} statements)\n+An address that can be used in a non-macro load or store.\n @end table\n \n @item Motorola 680x0---@file{config/m68k/m68k.h}"}]}