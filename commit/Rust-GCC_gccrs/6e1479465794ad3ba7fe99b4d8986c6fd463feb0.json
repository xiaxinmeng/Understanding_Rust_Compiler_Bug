{"sha": "6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxNDc5NDY1Nzk0YWQzYmE3ZmU5OWI0ZDg5ODZjNmZkNDYzZmViMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-02-01T20:44:41Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-02-01T20:44:41Z"}, "message": "2013-02-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable_policy.h\n\t(_Prime_rehash_policy::_M_next_bkt)\n\t(_Prime_rehash_policy::_M_need_rehash): Move definition...\n\t* src/c++11/hashtable_c++0x.cc: ... here.\n\t* src/shared/hashtable-aux.cc: Remove c++config.h include.\n\t* config/abi/gnu.ver (GLIBCXX_3.4.18): Export _Prime_rehash_policy\n\tsymbols.\n\nFrom-SVN: r195676", "tree": {"sha": "84518f8f30d1e3aa18963b72f5e5994b1c6e4483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84518f8f30d1e3aa18963b72f5e5994b1c6e4483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/comments", "author": null, "committer": null, "parents": [{"sha": "99113dff9d9f04184797e8f3565dfe0c900a2345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99113dff9d9f04184797e8f3565dfe0c900a2345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99113dff9d9f04184797e8f3565dfe0c900a2345"}], "stats": {"total": 163, "additions": 82, "deletions": 81}, "files": [{"sha": "89fba85597df42cb74029cb0798486ef959fb74b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "patch": "@@ -1,3 +1,13 @@\n+2013-02-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h\n+\t(_Prime_rehash_policy::_M_next_bkt)\n+\t(_Prime_rehash_policy::_M_need_rehash): Move definition...\n+\t* src/c++11/hashtable_c++0x.cc: ... here.\n+\t* src/shared/hashtable-aux.cc: Remove c++config.h include.\n+\t* config/abi/gnu.ver (GLIBCXX_3.4.18): Export _Prime_rehash_policy\n+\tsymbols.\n+\n 2013-01-29  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/54314"}, {"sha": "2a9d582853ddc29dafe8c80e85301f4fa6d48c25", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "patch": "@@ -1,7 +1,6 @@\n ## Linker script for GNU versioning (GNU ld 2.13.91+ only.)\n ##\n-## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-## 2011, 2012 Free Software Foundation, Inc.\n+## Copyright (C) 2002-2013 Free Software Foundation, Inc.\n ##\n ## This file is part of the GNU ISO C++ Library.  This library is free\n ## software; you can redistribute it and/or modify it under the\n@@ -1334,6 +1333,7 @@ GLIBCXX_3.4.18 {\n     extern \"C++\"\n     {\n       std::random_device::*;\n+      std::__detail::_Prime_rehash_policy::*;\n     };\n \n     # std::this_thread::__sleep_for"}, {"sha": "f4d8dc0fbe6c042ab405bcef00b3a368a60cd8fe", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "patch": "@@ -369,7 +369,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Return a bucket count appropriate for n elements\n     std::size_t\n-    _M_bkt_for_elements(std::size_t __n) const;\n+    _M_bkt_for_elements(std::size_t __n) const\n+    { return __builtin_ceil(__n / (long double)_M_max_load_factor); }\n \n     // __n_bkt is current bucket count, __n_elt is current element count,\n     // and __n_ins is number of elements to be inserted.  Do we need to\n@@ -397,77 +398,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     mutable std::size_t  _M_next_resize;\n   };\n \n-  extern const unsigned long __prime_list[];\n-\n-  // XXX This is a hack.  There's no good reason for any of\n-  // _Prime_rehash_policy's member functions to be inline.\n-\n-  // Return a prime no smaller than n.\n-  inline std::size_t\n-  _Prime_rehash_policy::\n-  _M_next_bkt(std::size_t __n) const\n-  {\n-    // Optimize lookups involving the first elements of __prime_list.\n-    // (useful to speed-up, eg, constructors)\n-    static const unsigned char __fast_bkt[12]\n-      = { 2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11 };\n-\n-    if (__n <= 11)\n-      {\n-\t_M_next_resize\n-\t  = __builtin_ceil(__fast_bkt[__n]\n-\t\t\t   * (long double)_M_max_load_factor);\n-\treturn __fast_bkt[__n];\n-      }\n-\n-    const unsigned long* __next_bkt\n-      = std::lower_bound(__prime_list + 5, __prime_list + _S_n_primes,\n-\t\t\t __n);\n-    _M_next_resize\n-      = __builtin_ceil(*__next_bkt * (long double)_M_max_load_factor);\n-    return *__next_bkt;\n-  }\n-\n-  // Return the smallest integer p such that alpha p >= n, where alpha\n-  // is the load factor.\n-  inline std::size_t\n-  _Prime_rehash_policy::\n-  _M_bkt_for_elements(std::size_t __n) const\n-  { return __builtin_ceil(__n / (long double)_M_max_load_factor); }\n-\n-  // Finds the smallest prime p such that alpha p > __n_elt + __n_ins.\n-  // If p > __n_bkt, return make_pair(true, p); otherwise return\n-  // make_pair(false, 0).  In principle this isn't very different from\n-  // _M_bkt_for_elements.\n-\n-  // The only tricky part is that we're caching the element count at\n-  // which we need to rehash, so we don't have to do a floating-point\n-  // multiply for every insertion.\n-\n-  inline std::pair<bool, std::size_t>\n-  _Prime_rehash_policy::\n-  _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,\n-\t\t std::size_t __n_ins) const\n-  {\n-    if (__n_elt + __n_ins >= _M_next_resize)\n-      {\n-\tlong double __min_bkts = (__n_elt + __n_ins)\n-\t\t\t\t / (long double)_M_max_load_factor;\n-\tif (__min_bkts >= __n_bkt)\n-\t  return std::make_pair(true,\n-\t    _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1,\n-\t\t\t\t\t      __n_bkt * _S_growth_factor)));\n-\telse\n-\t  {\n-\t    _M_next_resize\n-\t      = __builtin_floor(__n_bkt * (long double)_M_max_load_factor);\n-\t    return std::make_pair(false, 0);\n-\t  }\n-      }\n-    else\n-      return std::make_pair(false, 0);\n-  }\n-\n   // Base classes for std::_Hashtable.  We define these base classes\n   // because in some cases we want to do different things depending on\n   // the value of a policy class.  In some cases the policy class"}, {"sha": "7617c58576b3b380b517e9e6786c2f44b7b056a9", "filename": "libstdc++-v3/src/c++11/hashtable_c++0x.cc", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc?ref=6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "patch": "@@ -1,6 +1,6 @@\n // std::__detail definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,13 +22,76 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#include <bits/c++config.h>\n-\n #if __cplusplus < 201103L\n # error \"hashtable_c++0x.cc must be compiled with -std=gnu++0x\"\n #endif\n \n+#include <initializer_list>\n+#include <tuple>\n+#include <bits/hashtable_policy.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n #include \"../shared/hashtable-aux.cc\"\n-} // namespace // namespace std\n+\n+namespace __detail\n+{\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // Return a prime no smaller than n.\n+  std::size_t\n+  _Prime_rehash_policy::_M_next_bkt(std::size_t __n) const\n+  {\n+    // Optimize lookups involving the first elements of __prime_list.\n+    // (useful to speed-up, eg, constructors)\n+    static const unsigned char __fast_bkt[12]\n+      = { 2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11 };\n+\n+    if (__n <= 11)\n+      {\n+\t_M_next_resize =\n+\t  __builtin_ceil(__fast_bkt[__n] * (long double)_M_max_load_factor);\n+\treturn __fast_bkt[__n];\n+      }\n+\n+    const unsigned long* __next_bkt =\n+      std::lower_bound(__prime_list + 5, __prime_list + _S_n_primes, __n);\n+    _M_next_resize =\n+      __builtin_ceil(*__next_bkt * (long double)_M_max_load_factor);\n+    return *__next_bkt;\n+  }\n+\n+  // Finds the smallest prime p such that alpha p > __n_elt + __n_ins.\n+  // If p > __n_bkt, return make_pair(true, p); otherwise return\n+  // make_pair(false, 0).  In principle this isn't very different from\n+  // _M_bkt_for_elements.\n+\n+  // The only tricky part is that we're caching the element count at\n+  // which we need to rehash, so we don't have to do a floating-point\n+  // multiply for every insertion.\n+\n+  std::pair<bool, std::size_t>\n+  _Prime_rehash_policy::\n+  _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,\n+\t\t std::size_t __n_ins) const\n+  {\n+    if (__n_elt + __n_ins >= _M_next_resize)\n+      {\n+\tlong double __min_bkts = (__n_elt + __n_ins)\n+\t\t\t\t   / (long double)_M_max_load_factor;\n+\tif (__min_bkts >= __n_bkt)\n+\t  return std::make_pair(true,\n+\t    _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1,\n+\t\t\t\t\t      __n_bkt * _S_growth_factor)));\n+\n+\t_M_next_resize\n+\t  = __builtin_floor(__n_bkt * (long double)_M_max_load_factor);\n+\treturn std::make_pair(false, 0);\n+      }\n+    else\n+      return std::make_pair(false, 0);\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __detail\n+} // namespace std"}, {"sha": "876ffe1ad0531952e6d89da3560bcd3176231de0", "filename": "libstdc++-v3/src/shared/hashtable-aux.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1479465794ad3ba7fe99b4d8986c6fd463feb0/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fshared%2Fhashtable-aux.cc?ref=6e1479465794ad3ba7fe99b4d8986c6fd463feb0", "patch": "@@ -1,6 +1,6 @@\n // std::__detail and std::tr1::__detail definitions -*- C++ -*-\n \n-// Copyright (C) 2007, 2009, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007-2013 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,8 +22,6 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#include <bits/c++config.h>\n-\n namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}]}