{"sha": "227e0100360b83e7981ef9b2ce85435bbc16ee82", "node_id": "C_kwDOANBUbNoAKDIyN2UwMTAwMzYwYjgzZTc5ODFlZjliMmNlODU0MzViYmMxNmVlODI", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-10-29T22:08:47Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-11-04T16:53:02Z"}, "message": "Fortran manual: Revise introductory chapter.\n\nFix various bit-rot in the discussion of standards conformance, remove\nmaterial that is only of historical interest, copy-editing.  Also move\ndiscussion of preprocessing out of the introductory chapter.\n\n2021-11-01  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/fortran/\n\t* gfortran.texi (About GNU Fortran): Consolidate material\n\tformerly in other sections.  Copy-editing.\n\t(Preprocessing and conditional compilation): Delete, moving\n\tmost material to invoke.texi.\n\t(GNU Fortran and G77): Delete.\n\t(Project Status): Delete.\n\t(Standards): Update.\n\t(Fortran 95 status): Mention conditional compilation here.\n\t(Fortran 2003 status): Rewrite to mention the 1 missing feature\n\tinstead of all the ones implemented.\n\t(Fortran 2008 status): Similarly for the 2 missing features.\n\t(Fortran 2018 status): Rewrite to reflect completion of TS29113\n\tfeature support.\n\t* invoke.texi (Preprocessing Options): Move material formerly\n\tin introductory chapter here.", "tree": {"sha": "9c1a41769fe35b9851f581686a08323b12fe2dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c1a41769fe35b9851f581686a08323b12fe2dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/227e0100360b83e7981ef9b2ce85435bbc16ee82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227e0100360b83e7981ef9b2ce85435bbc16ee82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227e0100360b83e7981ef9b2ce85435bbc16ee82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227e0100360b83e7981ef9b2ce85435bbc16ee82/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1c757d835372d4454b3760b5fbf793bd372529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1c757d835372d4454b3760b5fbf793bd372529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1c757d835372d4454b3760b5fbf793bd372529"}], "stats": {"total": 671, "additions": 160, "deletions": 511}, "files": [{"sha": "ba5db57866adef0a2552ef926028b3fc55ac1d13", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 120, "deletions": 507, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227e0100360b83e7981ef9b2ce85435bbc16ee82/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227e0100360b83e7981ef9b2ce85435bbc16ee82/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=227e0100360b83e7981ef9b2ce85435bbc16ee82", "patch": "@@ -219,17 +219,9 @@ compiler.\n @end ifset\n @end iftex\n \n-The GNU Fortran compiler front end was\n-designed initially as a free replacement for,\n-or alternative to, the Unix @command{f95} command;\n-@command{gfortran} is the command you will use to invoke the compiler.\n-\n @menu\n * About GNU Fortran::    What you should know about the GNU Fortran compiler.\n * GNU Fortran and GCC::  You can compile Fortran, C, or other programs.\n-* Preprocessing and conditional compilation:: The Fortran preprocessor\n-* GNU Fortran and G77::  Why we chose to start from scratch.\n-* Project Status::       Status of GNU Fortran, roadmap, proposed extensions.\n * Standards::            Standards supported by GNU Fortran.\n @end menu\n \n@@ -241,46 +233,67 @@ or alternative to, the Unix @command{f95} command;\n @node About GNU Fortran\n @section About GNU Fortran\n \n-The GNU Fortran compiler supports the Fortran 77, 90 and 95 standards\n-completely, parts of the Fortran 2003, 2008 and 2018 standards, and\n-several vendor extensions.  The development goal is to provide the\n-following features:\n+The GNU Fortran compiler is the successor to @command{g77}, the\n+Fortran 77 front end included in GCC prior to version 4 (released in\n+2005).  While it is backward-compatible with most @command{g77}\n+extensions and command-line options, @command{gfortran} is a completely new\n+implemention designed to support more modern dialects of Fortran.\n+GNU Fortran implements the Fortran 77, 90 and 95 standards\n+completely, most of the Fortran 2003 and 2008 standards, and some\n+features from the 2018 standard.  It also implements several extensions\n+including OpenMP and OpenACC support for parallel programming.\n+\n+The GNU Fortran compiler passes the\n+@uref{http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html,\n+NIST Fortran 77 Test Suite}, and produces acceptable results on the\n+@uref{http://www.netlib.org/lapack/faq.html#1.21, LAPACK Test Suite}.\n+It also provides respectable performance on\n+the @uref{https://polyhedron.com/?page_id=175,\n+Polyhedron Fortran compiler benchmarks} and the\n+@uref{http://www.netlib.org/benchmark/livermore,\n+Livermore Fortran Kernels test}.  It has been used to compile a number of\n+large real-world programs, including\n+@uref{http://hirlam.org/, the HARMONIE and HIRLAM weather forecasting code} and\n+@uref{https://github.com/dylan-jayatilaka/tonto,\n+the Tonto quantum chemistry package}; see\n+@url{https://gcc.gnu.org/@/wiki/@/GfortranApps} for an extended list.\n+\n+GNU Fortran provides the following functionality:\n \n @itemize @bullet\n @item\n-Read a user's program, stored in a file and containing instructions\n-written in Fortran 77, Fortran 90, Fortran 95, Fortran 2003, Fortran\n-2008 or Fortran 2018.  This file contains @dfn{source code}.\n+Read a program, stored in a file and containing @dfn{source code}\n+instructions written in Fortran 77.\n \n @item\n-Translate the user's program into instructions a computer\n+Translate the program into instructions a computer\n can carry out more quickly than it takes to translate the\n-instructions in the first\n-place.  The result after compilation of a program is\n+original Fortran instructions.\n+The result after compilation of a program is\n @dfn{machine code},\n-code designed to be efficiently translated and processed\n+which is efficiently translated and processed\n by a machine such as your computer.\n Humans usually are not as good writing machine code\n as they are at writing Fortran (or C++, Ada, or Java),\n because it is easy to make tiny mistakes writing machine code.\n \n @item\n-Provide the user with information about the reasons why\n-the compiler is unable to create a binary from the source code.\n-Usually this will be the case if the source code is flawed.\n-The Fortran 90 standard requires that the compiler can point out\n-mistakes to the user.\n+Provide information about the reasons why\n+the compiler may be unable to create a binary from the source code,\n+for example if the source code is flawed.\n+The Fortran language standards require that the compiler can point out\n+mistakes in your code.\n An incorrect usage of the language causes an @dfn{error message}.\n \n-The compiler will also attempt to diagnose cases where the\n-user's program contains a correct usage of the language,\n+The compiler also attempts to diagnose cases where your\n+program contains a correct usage of the language,\n but instructs the computer to do something questionable.\n-This kind of diagnostics message is called a @dfn{warning message}.\n+This kind of diagnostic message is called a @dfn{warning message}.\n \n @item\n Provide optional information about the translation passes\n from the source code to machine code.\n-This can help a user of the compiler to find the cause of\n+This can help you to find the cause of\n certain bugs which may not be obvious in the source code,\n but may be more easily found at a lower level compiler output.\n It also helps developers to find bugs in the compiler itself.\n@@ -292,7 +305,7 @@ called a @dfn{debugger}, such as the GNU Debugger @command{gdb}).\n \n @item\n Locate and gather machine code already generated to\n-perform actions requested by statements in the user's program.\n+perform actions requested by statements in the program.\n This machine code is organized into @dfn{modules} and is located\n and @dfn{linked} to the user program.\n @end itemize\n@@ -316,8 +329,9 @@ which also might be installed as the\n system's @command{f95} command.\n @command{gfortran} is just another driver program,\n but specifically for the Fortran compiler only.\n-The difference with @command{gcc} is that @command{gfortran}\n-will automatically link the correct libraries to your program.\n+The primary difference between the @command{gcc} and @command{gfortran}\n+commands is that the latter automatically links the correct libraries\n+to your program.\n \n @item\n A collection of run-time libraries.\n@@ -338,7 +352,7 @@ linked to and interfaced with the GCC backend library.\n assembler code.  You would typically not use this\n program directly;\n instead, the @command{gcc} or @command{gfortran} driver\n-programs will call it for you.\n+programs call it for you.\n @end itemize\n \n \n@@ -364,10 +378,10 @@ which provides the command-line interface for the compiler.  It calls\n the relevant compiler front-end program (e.g., @command{f951} for\n Fortran) for each file in the source code, and then calls the assembler\n and linker as appropriate to produce the compiled output.  In a copy of\n-GCC which has been compiled with Fortran language support enabled,\n-@command{gcc} will recognize files with @file{.f}, @file{.for}, @file{.ftn},\n+GCC that has been compiled with Fortran language support enabled,\n+@command{gcc} recognizes files with @file{.f}, @file{.for}, @file{.ftn},\n @file{.f90}, @file{.f95}, @file{.f03} and @file{.f08} extensions as\n-Fortran source code, and compile it accordingly.  A @command{gfortran}\n+Fortran source code, and compiles it accordingly.  A @command{gfortran}\n driver program is also provided, which is identical to @command{gcc}\n except that it automatically links the Fortran runtime libraries into the\n compiled program.\n@@ -382,138 +396,12 @@ extension are also run through preprocessing.\n \n This manual specifically documents the Fortran front end, which handles\n the programming language's syntax and semantics.  The aspects of GCC\n-which relate to the optimization passes and the back-end code generation\n+that relate to the optimization passes and the back-end code generation\n are documented in the GCC manual; see\n @ref{Top,,Introduction,gcc,Using the GNU Compiler Collection (GCC)}.\n The two manuals together provide a complete reference for the GNU\n Fortran compiler.\n \n-\n-@c ---------------------------------------------------------------------\n-@c Preprocessing and conditional compilation\n-@c ---------------------------------------------------------------------\n-\n-@node Preprocessing and conditional compilation\n-@section Preprocessing and conditional compilation\n-@cindex CPP\n-@cindex FPP\n-@cindex Conditional compilation\n-@cindex Preprocessing\n-@cindex preprocessor, include file handling\n-\n-Many Fortran compilers including GNU Fortran allow passing the source code\n-through a C preprocessor (CPP; sometimes also called the Fortran preprocessor,\n-FPP) to allow for conditional compilation.  In the case of GNU Fortran,\n-this is the GNU C Preprocessor in the traditional mode.  On systems with\n-case-preserving file names, the preprocessor is automatically invoked if the\n-filename extension is @file{.F}, @file{.FOR}, @file{.FTN}, @file{.fpp},\n-@file{.FPP}, @file{.F90}, @file{.F95}, @file{.F03} or @file{.F08}.  To manually\n-invoke the preprocessor on any file, use @option{-cpp}, to disable\n-preprocessing on files where the preprocessor is run automatically, use\n-@option{-nocpp}.\n-\n-If a preprocessed file includes another file with the Fortran @code{INCLUDE}\n-statement, the included file is not preprocessed.  To preprocess included\n-files, use the equivalent preprocessor statement @code{#include}.\n-\n-If GNU Fortran invokes the preprocessor, @code{__GFORTRAN__}\n-is defined.  The macros @code{__GNUC__}, @code{__GNUC_MINOR__} and\n-@code{__GNUC_PATCHLEVEL__} can be used to determine the version of the\n-compiler.  See @ref{Top,,Overview,cpp,The C Preprocessor} for details.\n-\n-GNU Fortran supports a number of @code{INTEGER} and @code{REAL} kind types\n-in additional to the kind types required by the Fortran standard.\n-The availability of any given kind type is architecture dependent.  The\n-following pre-defined preprocessor macros can be used to conditionally\n-include code for these additional kind types: @code{__GFC_INT_1__},\n-@code{__GFC_INT_2__}, @code{__GFC_INT_8__}, @code{__GFC_INT_16__},\n-@code{__GFC_REAL_10__}, and @code{__GFC_REAL_16__}.\n-\n-While CPP is the de-facto standard for preprocessing Fortran code,\n-Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines\n-Conditional Compilation, which is not widely used and not directly\n-supported by the GNU Fortran compiler.  You can use the program coco\n-to preprocess such files (@uref{http://www.daniellnagle.com/coco.html}).\n-\n-\n-@c ---------------------------------------------------------------------\n-@c GNU Fortran and G77\n-@c ---------------------------------------------------------------------\n-\n-@node GNU Fortran and G77\n-@section GNU Fortran and G77\n-@cindex Fortran 77\n-@cindex @command{g77}\n-\n-The GNU Fortran compiler is the successor to @command{g77}, the Fortran\n-77 front end included in GCC prior to version 4.  It is an entirely new\n-program that has been designed to provide Fortran 95 support and\n-extensibility for future Fortran language standards, as well as providing\n-backwards compatibility for Fortran 77 and nearly all of the GNU language\n-extensions supported by @command{g77}.\n-\n-\n-@c ---------------------------------------------------------------------\n-@c Project Status\n-@c ---------------------------------------------------------------------\n-\n-@node Project Status\n-@section Project Status\n-\n-@quotation\n-As soon as @command{gfortran} can parse all of the statements correctly,\n-it will be in the ``larva'' state.\n-When we generate code, the ``puppa'' state.\n-When @command{gfortran} is done,\n-we'll see if it will be a beautiful butterfly,\n-or just a big bug....\n-\n---Andy Vaught, April 2000\n-@end quotation\n-\n-The start of the GNU Fortran 95 project was announced on\n-the GCC homepage in March 18, 2000\n-(even though Andy had already been working on it for a while,\n-of course).\n-\n-The GNU Fortran compiler is able to compile nearly all\n-standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs,\n-including a number of standard and non-standard extensions, and can be\n-used on real-world programs.  In particular, the supported extensions\n-include OpenMP, Cray-style pointers, some old vendor extensions, and several\n-Fortran 2003 and Fortran 2008 features, including TR 15581.  However, it is\n-still under development and has a few remaining rough edges.\n-There also is initial support for OpenACC.\n-\n-At present, the GNU Fortran compiler passes the\n-@uref{http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html,\n-NIST Fortran 77 Test Suite}, and produces acceptable results on the\n-@uref{http://www.netlib.org/lapack/faq.html#1.21, LAPACK Test Suite}.\n-It also provides respectable performance on\n-the @uref{http://www.polyhedron.com/fortran-compiler-comparisons/polyhedron-benchmark-suite,\n-Polyhedron Fortran\n-compiler benchmarks} and the\n-@uref{http://www.netlib.org/benchmark/livermore,\n-Livermore Fortran Kernels test}.  It has been used to compile a number of\n-large real-world programs, including\n-@uref{http://hirlam.org/, the HARMONIE and HIRLAM weather forecasting code} and\n-@uref{http://physical-chemistry.scb.uwa.edu.au/tonto/wiki/index.php/Main_Page,\n-the Tonto quantum chemistry package}; see\n-@url{https://gcc.gnu.org/@/wiki/@/GfortranApps} for an extended list.\n-\n-Among other things, the GNU Fortran compiler is intended as a replacement\n-for G77.  At this point, nearly all programs that could be compiled with\n-G77 can be compiled with GNU Fortran, although there are a few minor known\n-regressions.\n-\n-The primary work remaining to be done on GNU Fortran falls into three\n-categories: bug fixing (primarily regarding the treatment of invalid\n-code and providing useful error messages), improving the compiler\n-optimizations and the performance of compiled code, and extending the\n-compiler to support future standards---in particular, Fortran 2003,\n-Fortran 2008 and Fortran 2018.\n-\n-\n @c ---------------------------------------------------------------------\n @c Standards\n @c ---------------------------------------------------------------------\n@@ -529,18 +417,27 @@ Fortran 2008 and Fortran 2018.\n * Fortran 2018 status::\n @end menu\n \n-The GNU Fortran compiler implements\n-ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n-standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n-the ISO/IEC TR-15581 enhancements to allocatable arrays.\n-\n-GNU Fortran also have a partial support for ISO/IEC 1539-1:2004\n-(Fortran 2003), ISO/IEC 1539-1:2010 (Fortran 2008), the Technical\n-Specification @code{Further Interoperability of Fortran with C}\n-(ISO/IEC TS 29113:2012).  Full support of those standards and future\n-Fortran standards is planned.  The current status of the support is\n-can be found in the @ref{Fortran 2003 status}, @ref{Fortran 2008\n-status} and @ref{Fortran 2018 status} sections of the documentation.\n+Fortran is developed by the Working Group 5 of Sub-Committee 22 of the\n+Joint Technical Committee 1 of the International Organization for\n+Standardization and the International Electrotechnical Commission (IEC).\n+This group is known as @uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n+Official Fortran standard documents are available for purchase\n+from ISO; a collection of free documents (typically final drafts) are\n+also available on the @uref{https://gcc.gnu.org/wiki/GFortranStandards, wiki}.\n+\n+The GNU Fortran compiler implements ISO/IEC 1539:1997 (Fortran 95).\n+As such, it can also compile essentially all standard-compliant\n+Fortran 90 and Fortran 77 programs.  It also supports the ISO/IEC\n+TR-15581 enhancements to allocatable arrays.\n+\n+GNU Fortran also supports almost all of ISO/IEC 1539-1:2004\n+(Fortran 2003) and ISO/IEC 1539-1:2010 (Fortran 2008).\n+It has partial support for features introduced in ISO/IEC\n+1539:2018 (Fortran 2018), the most recent version of the Fortran\n+language standard, including full support for the Technical Specification\n+@code{Further Interoperability of Fortran with C} (ISO/IEC TS 29113:2012).\n+More details on support for these standards can be\n+found in the following sections of the documentation.\n \n Additionally, the GNU Fortran compilers supports the OpenMP specification\n (version 4.5 and partial support of the features of the 5.0 version,\n@@ -551,9 +448,9 @@ version 2.6, @uref{http://www.openacc.org/}).  See\n \n @node Fortran 95 status\n @subsection Fortran 95 status\n-@cindex Varying length character strings\n @cindex Varying length strings\n @cindex strings, varying length\n+@cindex conditional compilation\n \n The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000)\n varying length character strings.  While GNU Fortran currently does not\n@@ -567,377 +464,93 @@ the features of @code{ISO_VARYING_STRING} and should be considered as\n replacement. (Namely, allocatable or pointers of the type\n @code{character(len=:)}.)\n \n+Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines\n+Conditional Compilation, which is not widely used and not directly\n+supported by the GNU Fortran compiler.  You can use the program coco\n+to preprocess such files (@uref{http://www.daniellnagle.com/coco.html}).\n+\n @node Fortran 2003 status\n @subsection Fortran 2003 status\n \n-GNU Fortran supports several Fortran 2003 features; an incomplete\n-list can be found below.  See also the\n-@uref{https://gcc.gnu.org/wiki/Fortran2003, wiki page} about Fortran 2003.\n-\n-@itemize\n-@item Procedure pointers including procedure-pointer components with\n-@code{PASS} attribute.\n-\n-@item Procedures which are bound to a derived type (type-bound procedures)\n-including @code{PASS}, @code{PROCEDURE} and @code{GENERIC}, and\n-operators bound to a type.\n-\n-@item Abstract interfaces and type extension with the possibility to\n-override type-bound procedures or to have deferred binding.\n-\n-@item Polymorphic entities (``@code{CLASS}'') for derived types and unlimited\n-polymorphism (``@code{CLASS(*)}'') -- including @code{SAME_TYPE_AS},\n-@code{EXTENDS_TYPE_OF} and @code{SELECT TYPE} for scalars and arrays and\n-finalization.\n-\n-@item Generic interface names, which have the same name as derived types,\n-are now supported. This allows one to write constructor functions.  Note\n-that Fortran does not support static constructor functions.  For static\n-variables, only default initialization or structure-constructor\n-initialization are available.\n-\n-@item The @code{ASSOCIATE} construct.\n-\n-@item Interoperability with C including enumerations,\n-\n-@item In structure constructors the components with default values may be\n-omitted.\n-\n-@item Extensions to the @code{ALLOCATE} statement, allowing for a\n-type-specification with type parameter and for allocation and initialization\n-from a @code{SOURCE=} expression; @code{ALLOCATE} and @code{DEALLOCATE}\n-optionally return an error message string via @code{ERRMSG=}.\n+GNU Fortran implements the Fortran 2003 (ISO/IEC 1539-1:2004) standard\n+except for finalization support, which is incomplete.\n+See the\n+@uref{https://gcc.gnu.org/wiki/Fortran2003, wiki page} for a full list\n+of new features introduced by Fortran 2003 and their implementation status.\n \n-@item Reallocation on assignment: If an intrinsic assignment is\n-used, an allocatable variable on the left-hand side is automatically allocated\n-(if unallocated) or reallocated (if the shape is different). Currently, scalar\n-deferred character length left-hand sides are correctly handled but arrays\n-are not yet fully implemented.\n-\n-@item Deferred-length character variables and scalar deferred-length character\n-components of derived types are supported. (Note that array-valued components\n-are not yet implemented.)\n-\n-@item Transferring of allocations via @code{MOVE_ALLOC}.\n-\n-@item The @code{PRIVATE} and @code{PUBLIC} attributes may be given individually\n-to derived-type components.\n-\n-@item In pointer assignments, the lower bound may be specified and\n-the remapping of elements is supported.\n-\n-@item For pointers an @code{INTENT} may be specified which affect the\n-association status not the value of the pointer target.\n-\n-@item Intrinsics @code{command_argument_count}, @code{get_command},\n-@code{get_command_argument}, and @code{get_environment_variable}.\n-\n-@item Support for Unicode characters (ISO 10646) and UTF-8, including\n-the @code{SELECTED_CHAR_KIND} and @code{NEW_LINE} intrinsic functions.\n-\n-@item Support for binary, octal and hexadecimal (BOZ) constants in the\n-intrinsic functions @code{INT}, @code{REAL}, @code{CMPLX} and @code{DBLE}.\n-\n-@item Support for namelist variables with allocatable and pointer\n-attribute and nonconstant length type parameter.\n-\n-@item\n-@cindex array, constructors\n-@cindex @code{[...]}\n-Array constructors using square brackets.  That is, @code{[...]} rather\n-than @code{(/.../)}.  Type-specification for array constructors like\n-@code{(/ some-type :: ... /)}.\n-\n-@item Extensions to the specification and initialization expressions,\n-including the support for intrinsics with real and complex arguments.\n-\n-@item Support for the asynchronous input/output.\n-\n-@item\n-@cindex @code{FLUSH} statement\n-@cindex statement, @code{FLUSH}\n-@code{FLUSH} statement.\n+@node Fortran 2008 status\n+@subsection Fortran 2008 status\n \n-@item\n-@cindex @code{IOMSG=} specifier\n-@code{IOMSG=} specifier for I/O statements.\n+The GNU Fortran compiler supports almost all features of Fortran 2008;\n+the @uref{https://gcc.gnu.org/wiki/Fortran2008Status, wiki}\n+has some information about the current implementation status.\n+In particular, the following are not yet supported:\n \n+@itemize @bullet\n @item\n-@cindex @code{ENUM} statement\n-@cindex @code{ENUMERATOR} statement\n-@cindex statement, @code{ENUM}\n-@cindex statement, @code{ENUMERATOR}\n-@opindex @code{fshort-enums}\n-Support for the declaration of enumeration constants via the\n-@code{ENUM} and @code{ENUMERATOR} statements.  Interoperability with\n-@command{gcc} is guaranteed also for the case where the\n-@command{-fshort-enums} command line option is given.\n+@code{DO CONCURRENT} and @code{FORALL} do not recognize a\n+type-spec in the loop header.\n \n @item\n-@cindex TR 15581\n-TR 15581:\n-@itemize\n-@item\n-@cindex @code{ALLOCATABLE} dummy arguments\n-@code{ALLOCATABLE} dummy arguments.\n-@item\n-@cindex @code{ALLOCATABLE} function results\n-@code{ALLOCATABLE} function results\n-@item\n-@cindex @code{ALLOCATABLE} components of derived types\n-@code{ALLOCATABLE} components of derived types\n+The change to permit any constant expression in subscripts and\n+nested implied-do limits in a @code{DATA} statement has not been implemented.\n @end itemize\n \n-@item\n-@cindex @code{STREAM} I/O\n-@cindex @code{ACCESS='STREAM'} I/O\n-The @code{OPEN} statement supports the @code{ACCESS='STREAM'} specifier,\n-allowing I/O without any record structure.\n \n-@item\n-Namelist input/output for internal files.\n+@node Fortran 2018 status\n+@subsection Fortran 2018 status\n \n-@item Minor I/O features: Rounding during formatted output, using of\n-a decimal comma instead of a decimal point, setting whether a plus sign\n-should appear for positive numbers. On systems where @code{strtod} honours\n-the rounding mode, the rounding mode is also supported for input.\n+Fortran 2018 (ISO/IEC 1539:2018) is the most recent version\n+of the Fortran language standard.  GNU Fortran implements some of the\n+new features of this standard:\n \n+@itemize @bullet\n @item\n-@cindex @code{PROTECTED} statement\n-@cindex statement, @code{PROTECTED}\n-The @code{PROTECTED} statement and attribute.\n+All Fortran 2018 features derived from ISO/IEC TS 29113:2012,\n+``Further Interoperability of Fortran with C'', are supported by GNU Fortran.\n+This includes assumed-type and assumed-rank objects and\n+the @code{SELECT RANK} construct as well as the parts relating to\n+@code{BIND(C)} functions.\n+See also @ref{Further Interoperability of Fortran with C}.\n \n @item\n-@cindex @code{VALUE} statement\n-@cindex statement, @code{VALUE}\n-The @code{VALUE} statement and attribute.\n+GNU Fortran supports a subset of features derived from ISO/IEC TS 18508:2015,\n+``Additional Parallel Features in Fortran'':\n \n+@itemize @bullet\n @item\n-@cindex @code{VOLATILE} statement\n-@cindex statement, @code{VOLATILE}\n-The @code{VOLATILE} statement and attribute.\n+The new atomic ADD, CAS, FETCH and ADD/OR/XOR, OR and XOR intrinsics.\n \n @item\n-@cindex @code{IMPORT} statement\n-@cindex statement, @code{IMPORT}\n-The @code{IMPORT} statement, allowing to import\n-host-associated derived types.\n-\n-@item The intrinsic modules @code{ISO_FORTRAN_ENVIRONMENT} is supported,\n-which contains parameters of the I/O units, storage sizes. Additionally,\n-procedures for C interoperability are available in the @code{ISO_C_BINDING}\n-module.\n+The @code{CO_MIN} and @code{CO_MAX} and @code{SUM} reduction intrinsics,\n+and the @code{CO_BROADCAST} and @code{CO_REDUCE} intrinsic, except that those\n+do not support polymorphic types or types with allocatable, pointer or\n+polymorphic components.\n \n @item\n-@cindex @code{USE, INTRINSIC} statement\n-@cindex statement, @code{USE, INTRINSIC}\n-@cindex @code{ISO_FORTRAN_ENV} statement\n-@cindex statement, @code{ISO_FORTRAN_ENV}\n-@code{USE} statement with @code{INTRINSIC} and @code{NON_INTRINSIC}\n-attribute; supported intrinsic modules: @code{ISO_FORTRAN_ENV},\n-@code{ISO_C_BINDING}, @code{OMP_LIB} and @code{OMP_LIB_KINDS},\n-and @code{OPENACC}.\n+Events (@code{EVENT POST}, @code{EVENT WAIT}, @code{EVENT_QUERY}).\n \n @item\n-Renaming of operators in the @code{USE} statement.\n+Failed images (@code{FAIL IMAGE}, @code{IMAGE_STATUS},\n+@code{FAILED_IMAGES}, @code{STOPPED_IMAGES}).\n \n @end itemize\n \n-\n-@node Fortran 2008 status\n-@subsection Fortran 2008 status\n-\n-The latest version of the Fortran standard is ISO/IEC 1539-1:2010, informally\n-known as Fortran 2008.  The official version is available from International\n-Organization for Standardization (ISO) or its national member organizations.\n-The the final draft (FDIS) can be downloaded free of charge from\n-@url{http://www.nag.co.uk/@/sc22wg5/@/links.html}.  Fortran is developed by the\n-Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the\n-International Organization for Standardization and the International\n-Electrotechnical Commission (IEC).  This group is known as\n-@uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n-\n-The GNU Fortran compiler supports several of the new features of Fortran 2008;\n-the @uref{https://gcc.gnu.org/wiki/Fortran2008Status, wiki} has some information\n-about the current Fortran 2008 implementation status.  In particular, the\n-following is implemented.\n-\n-@itemize\n-@item The @option{-std=f2008} option and support for the file extensions\n-@file{.f08} and @file{.F08}.\n-\n-@item The @code{OPEN} statement now supports the @code{NEWUNIT=} option,\n-which returns a unique file unit, thus preventing inadvertent use of the\n-same unit in different parts of the program.\n-\n-@item The @code{g0} format descriptor and unlimited format items.\n-\n-@item The mathematical intrinsics @code{ASINH}, @code{ACOSH}, @code{ATANH},\n-@code{ERF}, @code{ERFC}, @code{GAMMA}, @code{LOG_GAMMA}, @code{BESSEL_J0},\n-@code{BESSEL_J1}, @code{BESSEL_JN}, @code{BESSEL_Y0}, @code{BESSEL_Y1},\n-@code{BESSEL_YN}, @code{HYPOT}, @code{NORM2}, and @code{ERFC_SCALED}.\n-\n-@item Using complex arguments with @code{TAN}, @code{SINH}, @code{COSH},\n-@code{TANH}, @code{ASIN}, @code{ACOS}, and @code{ATAN} is now possible;\n-@code{ATAN}(@var{Y},@var{X}) is now an alias for @code{ATAN2}(@var{Y},@var{X}).\n-\n-@item Support of the @code{PARITY} intrinsic functions.\n-\n-@item The following bit intrinsics: @code{LEADZ} and @code{TRAILZ} for\n-counting the number of leading and trailing zero bits, @code{POPCNT} and\n-@code{POPPAR} for counting the number of one bits and returning the parity;\n-@code{BGE}, @code{BGT}, @code{BLE}, and @code{BLT} for bitwise comparisons;\n-@code{DSHIFTL} and @code{DSHIFTR} for combined left and right shifts,\n-@code{MASKL} and @code{MASKR} for simple left and right justified masks,\n-@code{MERGE_BITS} for a bitwise merge using a mask, @code{SHIFTA},\n-@code{SHIFTL} and @code{SHIFTR} for shift operations, and the\n-transformational bit intrinsics @code{IALL}, @code{IANY} and @code{IPARITY}.\n-\n-@item Support of the @code{EXECUTE_COMMAND_LINE} intrinsic subroutine.\n-\n-@item Support for the @code{STORAGE_SIZE} intrinsic inquiry function.\n-\n-@item The @code{INT@{8,16,32@}} and @code{REAL@{32,64,128@}} kind type\n-parameters and the array-valued named constants @code{INTEGER_KINDS},\n-@code{LOGICAL_KINDS}, @code{REAL_KINDS} and @code{CHARACTER_KINDS} of\n-the intrinsic module @code{ISO_FORTRAN_ENV}.\n-\n-@item The module procedures @code{C_SIZEOF} of the intrinsic module\n-@code{ISO_C_BINDINGS} and @code{COMPILER_VERSION} and @code{COMPILER_OPTIONS}\n-of @code{ISO_FORTRAN_ENV}.\n-\n-@item Coarray support for serial programs with @option{-fcoarray=single} flag\n-and experimental support for multiple images with the @option{-fcoarray=lib}\n-flag.\n-\n-@item Submodules are supported. It should noted that @code{MODULEs} do not\n-produce the smod file needed by the descendent @code{SUBMODULEs} unless they\n-contain at least one @code{MODULE PROCEDURE} interface. The reason for this is\n-that @code{SUBMODULEs} are useless without @code{MODULE PROCEDUREs}. See\n-http://j3-fortran.org/doc/meeting/207/15-209.txt for a discussion and a draft\n-interpretation. Adopting this interpretation has the advantage that code that\n-does not use submodules does not generate smod files.\n-\n-@item The @code{DO CONCURRENT} construct is supported.\n-\n-@item The @code{BLOCK} construct is supported.\n-\n-@item The @code{STOP} and the new @code{ERROR STOP} statements now\n-support all constant expressions. Both show the signals which were signaling\n-at termination.\n-\n-@item Support for the @code{CONTIGUOUS} attribute.\n-\n-@item Support for @code{ALLOCATE} with @code{MOLD}.\n-\n-@item Support for the @code{IMPURE} attribute for procedures, which\n-allows for @code{ELEMENTAL} procedures without the restrictions of\n-@code{PURE}.\n-\n-@item Null pointers (including @code{NULL()}) and not-allocated variables\n-can be used as actual argument to optional non-pointer, non-allocatable\n-dummy arguments, denoting an absent argument.\n-\n-@item Non-pointer variables with @code{TARGET} attribute can be used as\n-actual argument to @code{POINTER} dummies with @code{INTENT(IN)}.\n-\n-@item Pointers including procedure pointers and those in a derived\n-type (pointer components) can now be initialized by a target instead\n-of only by @code{NULL}.\n-\n-@item The @code{EXIT} statement (with construct-name) can be now be\n-used to leave not only the @code{DO} but also the @code{ASSOCIATE},\n-@code{BLOCK}, @code{IF}, @code{SELECT CASE} and @code{SELECT TYPE}\n-constructs.\n-\n-@item Internal procedures can now be used as actual argument.\n-\n-@item Minor features: obsolesce diagnostics for @code{ENTRY} with\n-@option{-std=f2008}; a line may start with a semicolon; for internal\n-and module procedures @code{END} can be used instead of\n-@code{END SUBROUTINE} and @code{END FUNCTION}; @code{SELECTED_REAL_KIND}\n-now also takes a @code{RADIX} argument; intrinsic types are supported\n-for @code{TYPE}(@var{intrinsic-type-spec}); multiple type-bound procedures\n-can be declared in a single @code{PROCEDURE} statement; implied-shape\n-arrays are supported for named constants (@code{PARAMETER}).\n-@end itemize\n-\n-\n-\n-@node Fortran 2018 status\n-@subsection Status of Fortran 2018 support\n-\n-@itemize\n-@item ERROR STOP in a PURE procedure\n+@item\n An @code{ERROR STOP} statement is permitted in a @code{PURE}\n procedure.\n \n-@item IMPLICIT NONE with a spec-list\n-Support the @code{IMPLICIT NONE} statement with an\n+@item\n+GNU Fortran supports the @code{IMPLICIT NONE} statement with an\n @code{implicit-none-spec-list}.\n \n-@item Behavior of INQUIRE with the RECL= specifier\n-\n+@item\n The behavior of the @code{INQUIRE} statement with the @code{RECL=}\n specifier now conforms to Fortran 2018.\n \n @end itemize\n \n \n-@subsubsection TS 29113 Status (Further Interoperability with C)\n-\n-GNU Fortran supports some of the new features of the Technical\n-Specification (TS) 29113 on Further Interoperability of Fortran with C.\n-The @uref{https://gcc.gnu.org/wiki/TS29113Status, wiki} has some information\n-about the current TS 29113 implementation status.  In particular, the\n-following is implemented.\n-\n-See also @ref{Further Interoperability of Fortran with C}.\n-\n-@itemize\n-@item The @code{OPTIONAL} attribute is allowed for dummy arguments\n-of @code{BIND(C) procedures.}\n-\n-@item The @code{RANK} intrinsic is supported.\n-\n-@item GNU Fortran's implementation for variables with @code{ASYNCHRONOUS}\n-attribute is compatible with TS 29113.\n-\n-@item Assumed types (@code{TYPE(*)}).\n-\n-@item Assumed-rank (@code{DIMENSION(..)}).\n-\n-@item ISO_Fortran_binding (now in Fortran 2018 18.4) is implemented such that\n-conversion of the array descriptor for assumed type or assumed rank arrays is\n-done in the library. The include file ISO_Fortran_binding.h is can be found in\n-@code{~prefix/lib/gcc/$target/$version}.\n-@end itemize\n-\n-\n-\n-@subsubsection TS 18508 Status (Additional Parallel Features)\n-\n-GNU Fortran supports the following new features of the Technical\n-Specification 18508 on Additional Parallel Features in Fortran:\n-\n-@itemize\n-@item The new atomic ADD, CAS, FETCH and ADD/OR/XOR, OR and XOR intrinsics.\n-\n-@item The @code{CO_MIN} and @code{CO_MAX} and @code{SUM} reduction intrinsics.\n-And the @code{CO_BROADCAST} and @code{CO_REDUCE} intrinsic, except that those\n-do not support polymorphic types or types with allocatable, pointer or\n-polymorphic components.\n-\n-@item Events (@code{EVENT POST}, @code{EVENT WAIT}, @code{EVENT_QUERY})\n-\n-@item Failed images (@code{FAIL IMAGE}, @code{IMAGE_STATUS},\n-@code{FAILED_IMAGES}, @code{STOPPED_IMAGES})\n-\n-@end itemize\n-\n-\n-\n-\n @c =====================================================================\n @c PART I: INVOCATION REFERENCE\n @c ====================================================================="}, {"sha": "3533e86ce01904f8914d34f10bcb8bf3ac686337", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227e0100360b83e7981ef9b2ce85435bbc16ee82/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227e0100360b83e7981ef9b2ce85435bbc16ee82/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=227e0100360b83e7981ef9b2ce85435bbc16ee82", "patch": "@@ -570,10 +570,46 @@ Enhance test coverage by forcing most forall assignments to use temporary.\n @cindex preprocessor\n @cindex options, preprocessor\n @cindex CPP\n-\n-Preprocessor related options. See section \n-@ref{Preprocessing and conditional compilation} for more detailed\n-information on preprocessing in @command{gfortran}.\n+@cindex FPP\n+@cindex Conditional compilation\n+@cindex Preprocessing\n+@cindex preprocessor, include file handling\n+\n+Many Fortran compilers including GNU Fortran allow passing the source code\n+through a C preprocessor (CPP; sometimes also called the Fortran preprocessor,\n+FPP) to allow for conditional compilation.  In the case of GNU Fortran,\n+this is the GNU C Preprocessor in the traditional mode.  On systems with\n+case-preserving file names, the preprocessor is automatically invoked if the\n+filename extension is @file{.F}, @file{.FOR}, @file{.FTN}, @file{.fpp},\n+@file{.FPP}, @file{.F90}, @file{.F95}, @file{.F03} or @file{.F08}.  To manually\n+invoke the preprocessor on any file, use @option{-cpp}, to disable\n+preprocessing on files where the preprocessor is run automatically, use\n+@option{-nocpp}.\n+\n+If a preprocessed file includes another file with the Fortran @code{INCLUDE}\n+statement, the included file is not preprocessed.  To preprocess included\n+files, use the equivalent preprocessor statement @code{#include}.\n+\n+If GNU Fortran invokes the preprocessor, @code{__GFORTRAN__}\n+is defined.  The macros @code{__GNUC__}, @code{__GNUC_MINOR__} and\n+@code{__GNUC_PATCHLEVEL__} can be used to determine the version of the\n+compiler.  See @ref{Top,,Overview,cpp,The C Preprocessor} for details.\n+\n+GNU Fortran supports a number of @code{INTEGER} and @code{REAL} kind types\n+in additional to the kind types required by the Fortran standard.\n+The availability of any given kind type is architecture dependent.  The\n+following pre-defined preprocessor macros can be used to conditionally\n+include code for these additional kind types: @code{__GFC_INT_1__},\n+@code{__GFC_INT_2__}, @code{__GFC_INT_8__}, @code{__GFC_INT_16__},\n+@code{__GFC_REAL_10__}, and @code{__GFC_REAL_16__}.\n+\n+While CPP is the de-facto standard for preprocessing Fortran code,\n+Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines\n+Conditional Compilation, which is not widely used and not directly\n+supported by the GNU Fortran compiler.  You can use the program coco\n+to preprocess such files (@uref{http://www.daniellnagle.com/coco.html}).\n+\n+The following options control preprocessing of Fortran code:\n \n @table @gcctabopt\n @item -cpp"}]}