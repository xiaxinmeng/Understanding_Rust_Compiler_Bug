{"sha": "2747111309f15faea860f79897ba70bc5c1bef81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc0NzExMTMwOWYxNWZhZWE4NjBmNzk4OTdiYTcwYmM1YzFiZWY4MQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-01-22T10:33:38Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-01-22T10:33:38Z"}, "message": "cpp-if1.c: New test - torture test of preprocessor's number conversion in #if directives.\n\n* cpp-if1.c: New test - torture test of preprocessor's number conversion\n  in #if directives.\n* cpp-if2.c: New test - torture test of preprocessor's character constant\n  conversion in #if directives.\nBoth these tests are entirely my own invention.\n\nFrom-SVN: r24822", "tree": {"sha": "0d910ee17c614fafbb0a3e676b8e72be5aaa4395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d910ee17c614fafbb0a3e676b8e72be5aaa4395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2747111309f15faea860f79897ba70bc5c1bef81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2747111309f15faea860f79897ba70bc5c1bef81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2747111309f15faea860f79897ba70bc5c1bef81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2747111309f15faea860f79897ba70bc5c1bef81/comments", "author": null, "committer": null, "parents": [{"sha": "815cdc524f5f8ff48a35220e7ba5157aa02329d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815cdc524f5f8ff48a35220e7ba5157aa02329d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815cdc524f5f8ff48a35220e7ba5157aa02329d7"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "e33c1a0a1e9249a138a769e9dc77c40c73812db2", "filename": "gcc/testsuite/gcc.dg/cpp-if1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2747111309f15faea860f79897ba70bc5c1bef81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2747111309f15faea860f79897ba70bc5c1bef81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if1.c?ref=2747111309f15faea860f79897ba70bc5c1bef81", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do preprocess } */ \n+/* { dg-options \"-pedantic-errors\" } */\n+\n+#if 0xa == 10\n+#error yes /* { dg-error \"#error yes\" \"normal conversion\" } */\n+#endif\n+\n+#if 077 == 63\n+#error yes /* { dg-error \"#error yes\" \"normal conversion\" } */\n+#endif\n+\n+#if 12wrt /* { dg-error \"nvalid number\" \"invalid number\" } */\n+#endif\n+\n+#if 0abc /* { dg-error \"nvalid number\" \"invalid number\" } */\n+#endif\n+\n+#if 42abc /* { dg-error \"nvalid number\" \"invalid number\" } */\n+#endif\n+\n+#if 1.2 /* { dg-error \"floating point numbers\" \"floating point in #if\" } */\n+#endif\n+\n+#if 4uu /* { dg-error \"too many `u' suffixes\" \"too many suffixes\" } */\n+#endif\n+\n+#if 124123231lll /* { dg-error \"too many `l' suffixes\" \"too many suffixes\" } */\n+#endif\n+\n+#if 099 /* { dg-error \"digits beyond the radix\" \"decimal in octal constant\" } */\n+#endif\n+\n+#if 0xfffffffffffffffff /* { dg-error \"integer constant out of range\" \"range error\" } */\n+#endif"}, {"sha": "32880e2a2a17c6912e4ce50fcb752f8e9da46971", "filename": "gcc/testsuite/gcc.dg/cpp-if2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2747111309f15faea860f79897ba70bc5c1bef81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2747111309f15faea860f79897ba70bc5c1bef81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-if2.c?ref=2747111309f15faea860f79897ba70bc5c1bef81", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do preprocess } */\n+/* { dg-options -pedantic-errors } */\n+\n+#if 'a' == 'a' && '\\001' == 1 && '\\x12' == 0x12\n+#error yes /* { dg-error \"#error yes\" \"basic charconst recognition\" } */\n+#endif\n+\n+#if 'a' == L'a' && L'\\xfeed' == 0xfeed\n+#error yes /* { dg-error \"#error yes\" \"wide charconst recognition\" } */\n+#endif\n+\n+#if 'abcd' /* { dg-warning \"multi-character character constant\" \"multi-character charconst\" } */\n+#endif\n+\n+#if 'abcdefghi' /* { dg-error \"character constant (is )?too long\" \"charconst too long\" } */\n+#endif\n+\n+#if '' /* { dg-error \"empty character constant\" \"empty charconst\" } */\n+#endif"}]}