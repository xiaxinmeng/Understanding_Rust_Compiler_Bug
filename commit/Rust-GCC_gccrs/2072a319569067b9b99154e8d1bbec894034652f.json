{"sha": "2072a319569067b9b99154e8d1bbec894034652f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3MmEzMTk1NjkwNjdiOWI5OTE1NGU4ZDFiYmVjODk0MDM0NjUyZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-10T08:46:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-10T08:46:07Z"}, "message": "Mostly revert r254296\n\nr254296 added support for (const ...) wrappers around vectors,\nbut in the end the agreement was to use a variable-length\nencoding of CONST_VECTOR (and VECTOR_CST) instead.  This patch\ntherefore reverts the bits that are no longer needed.\n\nThe rtl.texi part isn't a full revert, since r254296 also updated the\ndocumentation to mention unspecs in address calculations, and to relax\nthe requirement that the mode had to be Pmode.\n\n2018-01-10  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* doc/rtl.texi: Remove documentation of (const ...) wrappers\n\tfor vectors, as a partial revert of r254296.\n\t* rtl.h (const_vec_p): Delete.\n\t(const_vec_duplicate_p): Don't test for vector CONSTs.\n\t(unwrap_const_vec_duplicate, const_vec_series_p): Likewise.\n\t* expmed.c (make_tree): Likewise.\n\n\tRevert:\n\t* common.md (E, F): Use CONSTANT_P instead of checking for\n\tCONST_VECTOR.\n\t* emit-rtl.c (gen_lowpart_common): Use const_vec_p instead of\n\tchecking for CONST_VECTOR.\n\nFrom-SVN: r256421", "tree": {"sha": "fb71cd4c9d25b4c0689180b831233d246d68e6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb71cd4c9d25b4c0689180b831233d246d68e6cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2072a319569067b9b99154e8d1bbec894034652f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2072a319569067b9b99154e8d1bbec894034652f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2072a319569067b9b99154e8d1bbec894034652f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2072a319569067b9b99154e8d1bbec894034652f/comments", "author": null, "committer": null, "parents": [{"sha": "d89f01a08e67eb856aa03268972dbee7f4e40bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89f01a08e67eb856aa03268972dbee7f4e40bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89f01a08e67eb856aa03268972dbee7f4e40bd2"}], "stats": {"total": 97, "additions": 31, "deletions": 66}, "files": [{"sha": "03c5f868d03996e0a6d1db43ae2f38a02c540b44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -1,3 +1,18 @@\n+2018-01-10  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* doc/rtl.texi: Remove documentation of (const ...) wrappers\n+\tfor vectors, as a partial revert of r254296.\n+\t* rtl.h (const_vec_p): Delete.\n+\t(const_vec_duplicate_p): Don't test for vector CONSTs.\n+\t(unwrap_const_vec_duplicate, const_vec_series_p): Likewise.\n+\t* expmed.c (make_tree): Likewise.\n+\n+\tRevert:\n+\t* common.md (E, F): Use CONSTANT_P instead of checking for\n+\tCONST_VECTOR.\n+\t* emit-rtl.c (gen_lowpart_common): Use const_vec_p instead of\n+\tchecking for CONST_VECTOR.\n+\n 2018-01-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/83575"}, {"sha": "9fe3810ef7fa971fe540634b256c4e64794988ce", "filename": "gcc/common.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fcommon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fcommon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.md?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -80,14 +80,14 @@\n (define_constraint \"E\"\n   \"Matches a floating-point constant.\"\n   (ior (match_test \"CONST_DOUBLE_AS_FLOAT_P (op)\")\n-       (match_test \"CONSTANT_P (op)\n+       (match_test \"GET_CODE (op) == CONST_VECTOR\n \t\t    && GET_MODE_CLASS (GET_MODE (op)) == MODE_VECTOR_FLOAT\")))\n \n ;; There is no longer a distinction between \"E\" and \"F\".\n (define_constraint \"F\"\n   \"Matches a floating-point constant.\"\n   (ior (match_test \"CONST_DOUBLE_AS_FLOAT_P (op)\")\n-       (match_test \"CONSTANT_P (op)\n+       (match_test \"GET_CODE (op) == CONST_VECTOR\n \t\t    && GET_MODE_CLASS (GET_MODE (op)) == MODE_VECTOR_FLOAT\")))\n \n (define_constraint \"X\""}, {"sha": "2523f63c6738434d3a2b9f97e16b7a12c4616f68", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -1875,18 +1875,12 @@ Usually that is the only mode for which a label is directly valid.\n \n @findex const\n @item (const:@var{m} @var{exp})\n-Wraps an rtx computation @var{exp} whose inputs and result do not\n-change during the execution of a thread.  There are two valid uses.\n-The first is to represent a global or thread-local address calculation.\n-In this case @var{exp} should contain @code{const_int},\n-@code{symbol_ref}, @code{label_ref} or @code{unspec} expressions,\n-combined with @code{plus} and @code{minus}.  Any such @code{unspec}s\n-are target-specific and typically represent some form of relocation\n-operator.  @var{m} should be a valid address mode.\n-\n-The second use of @code{const} is to wrap a vector operation.\n-In this case @var{exp} must be a @code{vec_duplicate} or\n-@code{vec_series} expression.\n+Represents a constant that is the result of an assembly-time\n+arithmetic computation.  The operand, @var{exp}, contains only\n+@code{const_int}, @code{symbol_ref}, @code{label_ref} or @code{unspec}\n+expressions, combined with @code{plus} and @code{minus}.  Any such\n+@code{unspec}s are target-specific and typically represent some form\n+of relocation operator.  @var{m} should be a valid address mode.\n \n @findex high\n @item (high:@var{m} @var{exp})"}, {"sha": "a722985b5d951e6bef4023140a4f1e9117c06505", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -1593,7 +1593,7 @@ gen_lowpart_common (machine_mode mode, rtx x)\n \treturn gen_rtx_fmt_e (GET_CODE (x), int_mode, XEXP (x, 0));\n     }\n   else if (GET_CODE (x) == SUBREG || REG_P (x)\n-\t   || GET_CODE (x) == CONCAT || const_vec_p (x)\n+\t   || GET_CODE (x) == CONCAT || GET_CODE (x) == CONST_VECTOR\n \t   || CONST_DOUBLE_AS_FLOAT_P (x) || CONST_SCALAR_INT_P (x)\n \t   || CONST_POLY_INT_P (x))\n     return lowpart_subreg (mode, x, innermode);"}, {"sha": "f34ed9376af8d38e3eabb48472cbebbec6c75fa0", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -5355,22 +5355,7 @@ make_tree (tree type, rtx x)\n       return fold_convert (type, make_tree (t, XEXP (x, 0)));\n \n     case CONST:\n-      {\n-\trtx op = XEXP (x, 0);\n-\tif (GET_CODE (op) == VEC_DUPLICATE)\n-\t  {\n-\t    tree elt_tree = make_tree (TREE_TYPE (type), XEXP (op, 0));\n-\t    return build_vector_from_val (type, elt_tree);\n-\t  }\n-\tif (GET_CODE (op) == VEC_SERIES)\n-\t  {\n-\t    tree itype = TREE_TYPE (type);\n-\t    tree base_tree = make_tree (itype, XEXP (op, 0));\n-\t    tree step_tree = make_tree (itype, XEXP (op, 1));\n-\t    return build_vec_series (type, base_tree, step_tree);\n-\t  }\n-\treturn make_tree (type, op);\n-      }\n+      return make_tree (type, XEXP (x, 0));\n \n     case SYMBOL_REF:\n       t = SYMBOL_REF_DECL (x);"}, {"sha": "fcad6a7e3f892de7121e6dce9b3b781c7c1f97d5", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2072a319569067b9b99154e8d1bbec894034652f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2072a319569067b9b99154e8d1bbec894034652f", "patch": "@@ -2935,24 +2935,14 @@ extern rtx shallow_copy_rtx (const_rtx CXX_MEM_STAT_INFO);\n extern int rtx_equal_p (const_rtx, const_rtx);\n extern bool rtvec_all_equal_p (const_rtvec);\n \n-/* Return true if X is some form of vector constant.  */\n-\n-inline bool\n-const_vec_p (const_rtx x)\n-{\n-  return VECTOR_MODE_P (GET_MODE (x)) && CONSTANT_P (x);\n-}\n-\n /* Return true if X is a vector constant with a duplicated element value.  */\n \n inline bool\n const_vec_duplicate_p (const_rtx x)\n {\n-  return ((GET_CODE (x) == CONST_VECTOR\n-\t   && CONST_VECTOR_NPATTERNS (x) == 1\n-\t   && CONST_VECTOR_DUPLICATE_P (x))\n-\t  || (GET_CODE (x) == CONST\n-\t      && GET_CODE (XEXP (x, 0)) == VEC_DUPLICATE));\n+  return (GET_CODE (x) == CONST_VECTOR\n+\t  && CONST_VECTOR_NPATTERNS (x) == 1\n+\t  && CONST_VECTOR_DUPLICATE_P (x));\n }\n \n /* Return true if X is a vector constant with a duplicated element value.\n@@ -2962,20 +2952,11 @@ template <typename T>\n inline bool\n const_vec_duplicate_p (T x, T *elt)\n {\n-  if (GET_CODE (x) == CONST_VECTOR\n-      && CONST_VECTOR_NPATTERNS (x) == 1\n-      && CONST_VECTOR_DUPLICATE_P (x))\n+  if (const_vec_duplicate_p (x))\n     {\n       *elt = CONST_VECTOR_ENCODED_ELT (x, 0);\n       return true;\n     }\n-  if (GET_CODE (x) == CONST\n-      && GET_CODE (XEXP (x, 0)) == VEC_DUPLICATE\n-      && !VECTOR_MODE_P (GET_MODE (XEXP (XEXP (x, 0), 0))))\n-    {\n-      *elt = XEXP (XEXP (x, 0), 0);\n-      return true;\n-    }\n   return false;\n }\n \n@@ -3002,12 +2983,8 @@ template <typename T>\n inline T\n unwrap_const_vec_duplicate (T x)\n {\n-  if (GET_CODE (x) == CONST_VECTOR\n-      && CONST_VECTOR_NPATTERNS (x) == 1\n-      && CONST_VECTOR_DUPLICATE_P (x))\n-    return CONST_VECTOR_ENCODED_ELT (x, 0);\n-  if (GET_CODE (x) == CONST && GET_CODE (XEXP (x, 0)) == VEC_DUPLICATE)\n-    return XEXP (XEXP (x, 0), 0);\n+  if (const_vec_duplicate_p (x))\n+    x = CONST_VECTOR_ELT (x, 0);\n   return x;\n }\n \n@@ -3030,12 +3007,6 @@ const_vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)\n       && CONST_VECTOR_NPATTERNS (x) == 1\n       && !CONST_VECTOR_DUPLICATE_P (x))\n     return const_vec_series_p_1 (x, base_out, step_out);\n-  if (GET_CODE (x) == CONST && GET_CODE (XEXP (x, 0)) == VEC_SERIES)\n-    {\n-      *base_out = XEXP (XEXP (x, 0), 0);\n-      *step_out = XEXP (XEXP (x, 0), 1);\n-      return true;\n-    }\n   return false;\n }\n "}]}