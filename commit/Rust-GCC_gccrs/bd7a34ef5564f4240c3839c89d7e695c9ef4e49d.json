{"sha": "bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3YTM0ZWY1NTY0ZjQyNDBjMzgzOWM4OWQ3ZTY5NWM5ZWY0ZTQ5ZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-01-18T22:09:24Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-09T08:08:56Z"}, "message": "AVX512FP16: Add vaddph/vsubph/vdivph/vmulph.\n\ngcc/ChangeLog:\n\n\t* config.gcc: Add avx512fp16vlintrin.h.\n\t* config/i386/avx512fp16intrin.h: (_mm512_add_ph): New intrinsic.\n\t(_mm512_mask_add_ph): Likewise.\n\t(_mm512_maskz_add_ph): Likewise.\n\t(_mm512_sub_ph): Likewise.\n\t(_mm512_mask_sub_ph): Likewise.\n\t(_mm512_maskz_sub_ph): Likewise.\n\t(_mm512_mul_ph): Likewise.\n\t(_mm512_mask_mul_ph): Likewise.\n\t(_mm512_maskz_mul_ph): Likewise.\n\t(_mm512_div_ph): Likewise.\n\t(_mm512_mask_div_ph): Likewise.\n\t(_mm512_maskz_div_ph): Likewise.\n\t(_mm512_add_round_ph): Likewise.\n\t(_mm512_mask_add_round_ph): Likewise.\n\t(_mm512_maskz_add_round_ph): Likewise.\n\t(_mm512_sub_round_ph): Likewise.\n\t(_mm512_mask_sub_round_ph): Likewise.\n\t(_mm512_maskz_sub_round_ph): Likewise.\n\t(_mm512_mul_round_ph): Likewise.\n\t(_mm512_mask_mul_round_ph): Likewise.\n\t(_mm512_maskz_mul_round_ph): Likewise.\n\t(_mm512_div_round_ph): Likewise.\n\t(_mm512_mask_div_round_ph): Likewise.\n\t(_mm512_maskz_div_round_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h: New header.\n\t* config/i386/i386-builtin-types.def (V16HF, V8HF, V32HF):\n\tAdd new builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t(ix86_expand_round_builtin): Likewise.\n\t* config/i386/immintrin.h: Include avx512fp16vlintrin.h\n\t* config/i386/sse.md (VFH): New mode_iterator.\n\t(VF2H): Likewise.\n\t(avx512fmaskmode): Add HF vector modes.\n\t(avx512fmaskhalfmode): Likewise.\n\t(<plusminus_insn><mode>3<mask_name><round_name>): Adjust to for\n\tHF vector modes.\n\t(*<plusminus_insn><mode>3<mask_name><round_name>): Likewise.\n\t(mul<mode>3<mask_name><round_name>): Likewise.\n\t(*mul<mode>3<mask_name><round_name>): Likewise.\n\t(div<mode>3): Likewise.\n\t(<sse>_div<mode>3<mask_name><round_name>): Likewise.\n\t* config/i386/subst.md (SUBST_V): Add HF vector modes.\n\t(SUBST_A): Likewise.\n\t(round_mode512bit_condition): Adjust for V32HFmode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add -mavx512vl and test for new intrinsics.\n\t* gcc.target/i386/avx-2.c: Add -mavx512vl.\n\t* gcc.target/i386/avx512fp16-11a.c: New test.\n\t* gcc.target/i386/avx512fp16-11b.c: Ditto.\n\t* gcc.target/i386/avx512vlfp16-11a.c: Ditto.\n\t* gcc.target/i386/avx512vlfp16-11b.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Add test for new builtins.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "ee8426e93c4cc988198cb885bb8f969b9e03d40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8426e93c4cc988198cb885bb8f969b9e03d40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f323c712ea76cc4506b03895e9b991e4e4b2baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f323c712ea76cc4506b03895e9b991e4e4b2baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f323c712ea76cc4506b03895e9b991e4e4b2baf"}], "stats": {"total": 898, "additions": 871, "deletions": 27}, "files": [{"sha": "ccf41f66e42374ff78c5472423a4e7d9822cbf54", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -416,7 +416,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n-\t\t       mwaitintrin.h avx512fp16intrin.h\"\n+\t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "3e9d676dc398419468e6dd8e6dc47a6721cb019c", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -217,6 +217,257 @@ _mm_store_sh (void *__P, __m128h __A)\n   *(_Float16 *) __P = ((__v8hf)__A)[0];\n }\n \n+/* Intrinsics v[add,sub,mul,div]ph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_add_ph (__m512h __A, __m512h __B)\n+{\n+  return (__m512h) ((__v32hf) __A + (__v32hf) __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_add_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vaddph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_add_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vaddph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_sub_ph (__m512h __A, __m512h __B)\n+{\n+  return (__m512h) ((__v32hf) __A - (__v32hf) __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_sub_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vsubph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_sub_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vsubph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mul_ph (__m512h __A, __m512h __B)\n+{\n+  return (__m512h) ((__v32hf) __A * (__v32hf) __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_mul_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vmulph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_mul_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vmulph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_div_ph (__m512h __A, __m512h __B)\n+{\n+  return (__m512h) ((__v32hf) __A / (__v32hf) __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_div_ph (__m512h __A, __mmask32 __B, __m512h __C, __m512h __D)\n+{\n+  return __builtin_ia32_vdivph_v32hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_div_ph (__mmask32 __A, __m512h __B, __m512h __C)\n+{\n+  return __builtin_ia32_vdivph_v32hf_mask (__B, __C,\n+\t\t\t\t\t   _mm512_setzero_ph (), __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_add_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vaddph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_add_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vaddph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_add_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vaddph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_sub_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vsubph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_sub_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vsubph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_sub_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vsubph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mul_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vmulph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_mul_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vmulph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_mul_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vmulph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_div_round_ph (__m512h __A, __m512h __B, const int __C)\n+{\n+  return __builtin_ia32_vdivph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1, __C);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_div_round_ph (__m512h __A, __mmask32 __B, __m512h __C,\n+\t\t\t  __m512h __D, const int __E)\n+{\n+  return __builtin_ia32_vdivph_v32hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_div_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t   const int __D)\n+{\n+  return __builtin_ia32_vdivph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A, __D);\n+}\n+#else\n+#define _mm512_add_round_ph(A, B, C)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vaddph_v32hf_mask_round((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_add_round_ph(A, B, C, D, E)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vaddph_v32hf_mask_round((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_add_round_ph(A, B, C, D)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vaddph_v32hf_mask_round((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm512_sub_round_ph(A, B, C)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vsubph_v32hf_mask_round((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_sub_round_ph(A, B, C, D, E)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vsubph_v32hf_mask_round((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_sub_round_ph(A, B, C, D)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vsubph_v32hf_mask_round((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm512_mul_round_ph(A, B, C)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vmulph_v32hf_mask_round((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_mul_round_ph(A, B, C, D, E)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vmulph_v32hf_mask_round((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_mul_round_ph(A, B, C, D)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vmulph_v32hf_mask_round((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm512_div_round_ph(A, B, C)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vdivph_v32hf_mask_round((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (__mmask32)-1, (C)))\n+\n+#define _mm512_mask_div_round_ph(A, B, C, D, E)\t\t\t\\\n+  ((__m512h)__builtin_ia32_vdivph_v32hf_mask_round((C), (D), (A), (B), (E)))\n+\n+#define _mm512_maskz_div_round_ph(A, B, C, D)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_vdivph_v32hf_mask_round((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\\\n+\t\t\t\t\t\t   (A), (D)))\n+#endif  /* __OPTIMIZE__  */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "75fa9eb29e72c7eb789ba6fadb0af4ab419ff336", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -0,0 +1,219 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512fp16vlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef __AVX512FP16VLINTRIN_H_INCLUDED\n+#define __AVX512FP16VLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VL__) || !defined(__AVX512FP16__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512fp16,avx512vl\")\n+#define __DISABLE_AVX512FP16VL__\n+#endif /* __AVX512FP16VL__ */\n+\n+/* Intrinsics v[add,sub,mul,div]ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_add_ph (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) ((__v8hf) __A + (__v8hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_add_ph (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) ((__v16hf) __A + (__v16hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vaddph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_add_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vaddph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vaddph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_add_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vaddph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sub_ph (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) ((__v8hf) __A - (__v8hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_sub_ph (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) ((__v16hf) __A - (__v16hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vsubph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_sub_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vsubph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vsubph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_sub_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vsubph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_ph (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) ((__v8hf) __A * (__v8hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mul_ph (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) ((__v16hf) __A * (__v16hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vmulph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_mul_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vmulph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vmulph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_mul_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vmulph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_div_ph (__m128h __A, __m128h __B)\n+{\n+  return (__m128h) ((__v8hf) __A / (__v8hf) __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_div_ph (__m256h __A, __m256h __B)\n+{\n+  return (__m256h) ((__v16hf) __A / (__v16hf) __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_ph (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vdivph_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_div_ph (__m256h __A, __mmask16 __B, __m256h __C, __m256h __D)\n+{\n+  return __builtin_ia32_vdivph_v16hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_ph (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vdivph_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_div_ph (__mmask16 __A, __m256h __B, __m256h __C)\n+{\n+  return __builtin_ia32_vdivph_v16hf_mask (__B, __C,\n+\t\t\t\t\t   _mm256_setzero_ph (), __A);\n+}\n+\n+#ifdef __DISABLE_AVX512FP16VL__\n+#undef __DISABLE_AVX512FP16VL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512FP16VL__ */\n+\n+#endif /* __AVX512FP16VLINTRIN_H_INCLUDED */"}, {"sha": "fdc46bd20b037d3314d5ed309682d61d25d8b107", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -98,6 +98,7 @@ DEF_VECTOR_TYPE (V16UQI, UQI, V16QI)\n # AVX vectors\n DEF_VECTOR_TYPE (V4DF, DOUBLE)\n DEF_VECTOR_TYPE (V8SF, FLOAT)\n+DEF_VECTOR_TYPE (V16HF, FLOAT16)\n DEF_VECTOR_TYPE (V4DI, DI)\n DEF_VECTOR_TYPE (V8SI, SI)\n DEF_VECTOR_TYPE (V16HI, HI)\n@@ -108,6 +109,7 @@ DEF_VECTOR_TYPE (V16UHI, UHI, V16HI)\n \n # AVX512F vectors\n DEF_VECTOR_TYPE (V32SF, FLOAT)\n+DEF_VECTOR_TYPE (V32HF, FLOAT16)\n DEF_VECTOR_TYPE (V16SF, FLOAT)\n DEF_VECTOR_TYPE (V8DF, DOUBLE)\n DEF_VECTOR_TYPE (V8DI, DI)\n@@ -1302,3 +1304,8 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n \n # FP16 builtins\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)\n+DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)"}, {"sha": "2f1520968e219ebc49e3b6942b57a841c91818d9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -2774,6 +2774,20 @@ BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf, \"__builti\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_mask, \"__builtin_ia32_dpbf16ps_v4sf_mask\", IX86_BUILTIN_DPHI16PS_V4SF_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_maskz, \"__builtin_ia32_dpbf16ps_v4sf_maskz\", IX86_BUILTIN_DPHI16PS_V4SF_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8HI_V8HI_UQI)\n \n+/* AVX512FP16.  */\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv8hf3_mask, \"__builtin_ia32_vaddph_v8hf_mask\", IX86_BUILTIN_VADDPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv16hf3_mask, \"__builtin_ia32_vaddph_v16hf_mask\", IX86_BUILTIN_VADDPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv32hf3_mask, \"__builtin_ia32_vaddph_v32hf_mask\", IX86_BUILTIN_VADDPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_subv8hf3_mask, \"__builtin_ia32_vsubph_v8hf_mask\", IX86_BUILTIN_VSUBPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_subv16hf3_mask, \"__builtin_ia32_vsubph_v16hf_mask\", IX86_BUILTIN_VSUBPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_subv32hf3_mask, \"__builtin_ia32_vsubph_v32hf_mask\", IX86_BUILTIN_VSUBPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv8hf3_mask, \"__builtin_ia32_vmulph_v8hf_mask\", IX86_BUILTIN_VMULPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv16hf3_mask, \"__builtin_ia32_vmulph_v16hf_mask\", IX86_BUILTIN_VMULPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv32hf3_mask, \"__builtin_ia32_vmulph_v32hf_mask\", IX86_BUILTIN_VMULPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv8hf3_mask, \"__builtin_ia32_vdivph_v8hf_mask\", IX86_BUILTIN_VDIVPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv16hf3_mask, \"__builtin_ia32_vdivph_v16hf_mask\", IX86_BUILTIN_VDIVPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv32hf3_mask, \"__builtin_ia32_vdivph_v32hf_mask\", IX86_BUILTIN_VDIVPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+\n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n \n@@ -2973,6 +2987,12 @@ BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_fixuns_truncv8dfv8di2_mask_round, \"\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangepv16sf_mask_round, \"__builtin_ia32_rangeps512_mask\", IX86_BUILTIN_RANGEPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_INT_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangepv8df_mask_round, \"__builtin_ia32_rangepd512_mask\", IX86_BUILTIN_RANGEPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_INT_V8DF_QI_INT)\n \n+/* AVX512FP16.  */\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv32hf3_mask_round, \"__builtin_ia32_vaddph_v32hf_mask_round\", IX86_BUILTIN_VADDPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_subv32hf3_mask_round, \"__builtin_ia32_vsubph_v32hf_mask_round\", IX86_BUILTIN_VSUBPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv32hf3_mask_round, \"__builtin_ia32_vmulph_v32hf_mask_round\", IX86_BUILTIN_VMULPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv32hf3_mask_round, \"__builtin_ia32_vdivph_v32hf_mask_round\", IX86_BUILTIN_VDIVPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+\n BDESC_END (ROUND_ARGS, MULTI_ARG)\n \n /* FMA4 and XOP.  */"}, {"sha": "ad9c672919a6ab8a0c496b574bdc0b4ba7494911", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -10038,6 +10038,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16HI_FTYPE_V8SI_V8SI_V16HI_UHI:\n     case V8HI_FTYPE_V4SI_V4SI_V8HI_UQI:\n     case V4DF_FTYPE_V4DF_V4DI_V4DF_UQI:\n+    case V32HF_FTYPE_V32HF_V32HF_V32HF_USI:\n     case V8SF_FTYPE_V8SF_V8SI_V8SF_UQI:\n     case V4SF_FTYPE_V4SF_V4SI_V4SF_UQI:\n     case V2DF_FTYPE_V2DF_V2DI_V2DF_UQI:\n@@ -10055,13 +10056,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8HI_FTYPE_V8HI_V8HI_V8HI_UQI:\n     case V8SI_FTYPE_V8SI_V8SI_V8SI_UQI:\n     case V4SI_FTYPE_V4SI_V4SI_V4SI_UQI:\n+    case V16HF_FTYPE_V16HF_V16HF_V16HF_UHI:\n     case V8SF_FTYPE_V8SF_V8SF_V8SF_UQI:\n     case V16QI_FTYPE_V16QI_V16QI_V16QI_UHI:\n     case V16HI_FTYPE_V16HI_V16HI_V16HI_UHI:\n     case V2DI_FTYPE_V2DI_V2DI_V2DI_UQI:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_UQI:\n     case V4DI_FTYPE_V4DI_V4DI_V4DI_UQI:\n     case V4DF_FTYPE_V4DF_V4DF_V4DF_UQI:\n+    case V8HF_FTYPE_V8HF_V8HF_V8HF_UQI:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_UQI:\n     case V8DF_FTYPE_V8DF_V8DF_V8DF_UQI:\n     case V8DF_FTYPE_V8DF_V8DI_V8DF_UQI:\n@@ -10738,6 +10741,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case INT_FTYPE_V4SF_INT:\n       nargs = 2;\n       break;\n+    case V32HF_FTYPE_V32HF_V32HF_INT:\n     case V4SF_FTYPE_V4SF_UINT_INT:\n     case V4SF_FTYPE_V4SF_UINT64_INT:\n     case V2DF_FTYPE_V2DF_UINT64_INT:\n@@ -10778,6 +10782,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT:\n+    case V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT:"}, {"sha": "1761c75dd657717cf0ef2671f80603777edf5144", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -96,6 +96,8 @@\n \n #ifdef __SSE2__\n #include <avx512fp16intrin.h>\n+\n+#include <avx512fp16vlintrin.h>\n #endif\n \n #include <shaintrin.h>"}, {"sha": "06339163bc53b32e9e5ea9b03ddda99eb04ffadc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -298,6 +298,13 @@\n   [(V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n+(define_mode_iterator VFH\n+  [(V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n+   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n+\n ;; 128- and 256-bit float vector modes\n (define_mode_iterator VF_128_256\n   [(V8SF \"TARGET_AVX\") V4SF\n@@ -321,6 +328,13 @@\n (define_mode_iterator VF2\n   [(V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n \n+;; All DFmode & HFmode vector float modes\n+(define_mode_iterator VF2H\n+  [(V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n+\n ;; 128- and 256-bit DF vector modes\n (define_mode_iterator VF2_128_256\n   [(V4DF \"TARGET_AVX\") V2DF])\n@@ -885,6 +899,7 @@\n    (V32HI \"HI\") (V16HI \"QI\") (V8HI  \"QI\") (V4HI \"QI\")\n    (V16SI \"QI\") (V8SI  \"QI\") (V4SI  \"QI\")\n    (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n+   (V32HF \"HI\") (V16HF \"QI\") (V8HF  \"QI\")\n    (V16SF \"QI\") (V8SF  \"QI\") (V4SF  \"QI\")\n    (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n \n@@ -2032,18 +2047,18 @@\n })\n \n (define_expand \"<insn><mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(plusminus:VF\n-\t  (match_operand:VF 1 \"<round_nimm_predicate>\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(plusminus:VFH\n+\t  (match_operand:VFH 1 \"<round_nimm_predicate>\")\n+\t  (match_operand:VFH 2 \"<round_nimm_predicate>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<insn><mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(plusminus:VF\n-\t  (match_operand:VF 1 \"<bcst_round_nimm_predicate>\" \"<comm>0,v\")\n-\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(plusminus:VFH\n+\t  (match_operand:VFH 1 \"<bcst_round_nimm_predicate>\" \"<comm>0,v\")\n+\t  (match_operand:VFH 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -2121,18 +2136,18 @@\n })\n \n (define_expand \"mul<mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(mult:VF\n-\t  (match_operand:VF 1 \"<round_nimm_predicate>\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(mult:VFH\n+\t  (match_operand:VFH 1 \"<round_nimm_predicate>\")\n+\t  (match_operand:VFH 2 \"<round_nimm_predicate>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n (define_insn \"*mul<mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(mult:VF\n-\t  (match_operand:VF 1 \"<bcst_round_nimm_predicate>\" \"%0,v\")\n-\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(mult:VFH\n+\t  (match_operand:VFH 1 \"<bcst_round_nimm_predicate>\" \"%0,v\")\n+\t  (match_operand:VFH 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -2195,9 +2210,9 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"div<mode>3\"\n-  [(set (match_operand:VF2 0 \"register_operand\")\n-\t(div:VF2 (match_operand:VF2 1 \"register_operand\")\n-\t\t (match_operand:VF2 2 \"vector_operand\")))]\n+  [(set (match_operand:VF2H 0 \"register_operand\")\n+\t(div:VF2H (match_operand:VF2H 1 \"register_operand\")\n+\t\t  (match_operand:VF2H 2 \"vector_operand\")))]\n   \"TARGET_SSE2\")\n \n (define_expand \"div<mode>3\"\n@@ -2236,10 +2251,10 @@\n })\n \n (define_insn \"<sse>_div<mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n-\t(div:VF\n-\t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n+  [(set (match_operand:VFH 0 \"register_operand\" \"=x,v\")\n+\t(div:VFH\n+\t  (match_operand:VFH 1 \"register_operand\" \"0,v\")\n+\t  (match_operand:VFH 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    div<ssemodesuffix>\\t{%2, %0|%0, %2}"}, {"sha": "94426a5972b4b015f6105aecacdb8ddd340326bd", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -24,6 +24,7 @@\n    V32HI V16HI V8HI\n    V16SI V8SI  V4SI\n    V8DI  V4DI  V2DI\n+   V32HF V16HF V8HF\n    V16SF V8SF  V4SF\n    V8DF  V4DF  V2DF])\n \n@@ -35,6 +36,7 @@\n    V32HI V16HI V8HI\n    V16SI V8SI  V4SI\n    V8DI  V4DI  V2DI\n+   V32HF V16HF V8HF\n    V16SF V8SF  V4SF\n    V8DF  V4DF  V2DF\n    QI HI SI DI SF DF])\n@@ -161,7 +163,9 @@\n (define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode\n \t\t\t\t\t\t\t      || <MODE>mode == V8DFmode\n \t\t\t\t\t\t\t      || <MODE>mode == V8DImode\n-\t\t\t\t\t\t\t      || <MODE>mode == V16SImode)\")\n+\t\t\t\t\t\t\t      || <MODE>mode == V16SImode\n+\t\t\t\t\t\t\t      || <MODE>mode == V32HFmode)\")\n+\n (define_subst_attr \"round_modev8sf_condition\" \"round\" \"1\" \"(<MODE>mode == V8SFmode)\")\n (define_subst_attr \"round_modev4sf_condition\" \"round\" \"1\" \"(<MODE>mode == V4SFmode)\")\n (define_subst_attr \"round_codefor\" \"round\" \"*\" \"\")"}, {"sha": "1eaee86114198beb65a38a1d6fe3e10b3f840aad", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw -mavx512fp16\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw -mavx512fp16 -mavx512vl\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>\n@@ -685,6 +685,12 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n+/* avx512fp16intrin.h */\n+#define __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+\n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) "}, {"sha": "642ae4d7bfbb493827e72249b8f17fa84497389e", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul -mavx512bw -mavx512fp16\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul -mavx512bw -mavx512fp16 -mavx512vl\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "28492fa3f7b0f2073e300ade0712df9e38afa893", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-11a.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11a.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <immintrin.h>\n+__m512h\n+__attribute__ ((noinline, noclone))\n+vadd512 (__m512h a, __m512h b)\n+{\n+  return a + b;\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+vsub512 (__m512h a, __m512h b)\n+{\n+  return a - b;\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+vmul512 (__m512h a, __m512h b)\n+{\n+  return a * b;\n+}\n+\n+__m512h\n+__attribute__ ((noinline, noclone))\n+vdiv512 (__m512h a, __m512h b)\n+{\n+  return a / b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddph\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubph\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulph\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivph\\[ \\\\t\\]+\\[^\\n\\r\\]*%zmm\\[01\\]\" 1 } } */"}, {"sha": "5f51a5bb0857d57645591328808e6919967070ad", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-11b.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-11b.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mfpmath=sse\" } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-11a.c\"\n+\n+/* Get random float16 between -50.x to 50.x.  */\n+_Float16\n+get_float16_noround()\n+{\n+  return ((int) (100.0 * rand ()/ (RAND_MAX + 1.0)) - 50)\n+    + 0.1f * (int) (10 * rand() / (RAND_MAX + 1.0));\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x[32];\n+  _Float16 y[32];\n+  _Float16 res_add[32];\n+  _Float16 res_sub[32];\n+  _Float16 res_mul[32];\n+  _Float16 res_div[32];\n+  for (int i = 0 ; i != 32; i++)\n+    {\n+      x[i] = get_float16_noround ();\n+      y[i] = get_float16_noround ();\n+      if (y[i] == 0)\n+\ty[i] = 1.0f;\n+      res_add[i] = x[i] + y[i];\n+      res_sub[i] = x[i] - y[i];\n+      res_mul[i] = x[i] * y[i];\n+      res_div[i] = x[i] / y[i];\n+\n+    }\n+\n+  union512h u512 = { x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+      x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15],\n+      x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23],\n+      x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31] };\n+  union512h u512_1 = {y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7],\n+      y[8], y[9], y[10], y[11], y[12], y[13], y[14], y[15],\n+      y[16], y[17], y[18], y[19], y[20], y[21], y[22], y[23],\n+      y[24], y[25], y[26], y[27], y[28], y[29], y[30], y[31] };\n+\n+  __m512h v512;\n+  union512h a512;\n+\n+  memset (&v512, -1, sizeof (v512));\n+  v512 = vadd512 (u512.x, u512_1.x);\n+  a512.x = v512;\n+  if (check_union512h (a512, res_add))\n+    abort ();\n+  memset (&v512, -1, sizeof (v512));\n+  v512 = vsub512 (u512.x, u512_1.x);\n+  a512.x = v512;\n+  if (check_union512h (a512, res_sub))\n+    abort ();\n+  memset (&v512, -1, sizeof (v512));\n+  v512 = vmul512 (u512.x, u512_1.x);\n+  a512.x = v512;\n+  if (check_union512h (a512, res_mul))\n+    abort ();\n+  memset (&v512, -1, sizeof (v512));\n+  v512 = vdiv512 (u512.x, u512_1.x);\n+  a512.x = v512;\n+  if (check_union512h (a512, res_div))\n+    abort ();\n+}"}, {"sha": "a8c6296f5041f64a234df65c96f7ec9852322d44", "filename": "gcc/testsuite/gcc.target/i386/avx512vlfp16-11a.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11a.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+#include <immintrin.h>\n+__m128h\n+__attribute__ ((noinline, noclone))\n+vadd128 (__m128h a, __m128h b)\n+{\n+  return a + b;\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+vadd256 (__m256h a, __m256h b)\n+{\n+  return a + b;\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+vsub128 (__m128h a, __m128h b)\n+{\n+  return a - b;\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+vsub256 (__m256h a, __m256h b)\n+{\n+  return a - b;\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+vmul128 (__m128h a, __m128h b)\n+{\n+  return a * b;\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+vmul256 (__m256h a, __m256h b)\n+{\n+  return a * b;\n+}\n+\n+__m128h\n+__attribute__ ((noinline, noclone))\n+vdiv128 (__m128h a, __m128h b)\n+{\n+  return a / b;\n+}\n+\n+__m256h\n+__attribute__ ((noinline, noclone))\n+vdiv256 (__m256h a, __m256h b)\n+{\n+  return a / b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddph\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddph\\[ \\\\t\\]+\\[^\\n\\r\\]*%ymm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubph\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubph\\[ \\\\t\\]+\\[^\\n\\r\\]*%ymm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulph\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulph\\[ \\\\t\\]+\\[^\\n\\r\\]*%ymm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivph\\[ \\\\t\\]+\\[^\\n\\r\\]*%xmm\\[01\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivph\\[ \\\\t\\]+\\[^\\n\\r\\]*%ymm\\[01\\]\" 1 } } */"}, {"sha": "b8d3e8a4e9681f6776aae7a79a862373fc492d71", "filename": "gcc/testsuite/gcc.target/i386/avx512vlfp16-11b.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlfp16-11b.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+\n+#include <string.h>\n+#include <stdlib.h>\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512vlfp16-11a.c\"\n+\n+/* Get random float16 between -50.x to 50.x.  */\n+_Float16\n+get_float16_noround()\n+{\n+  return ((int) (100.0 * rand ()/ (RAND_MAX + 1.0)) - 50)\n+    + 0.1f * (int) (10 * rand() / (RAND_MAX + 1.0));\n+}\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x[16];\n+  _Float16 y[16];\n+  _Float16 res_add[16];\n+  _Float16 res_sub[16];\n+  _Float16 res_mul[16];\n+  _Float16 res_div[16];\n+  for (int i = 0 ; i != 16; i++)\n+    {\n+      x[i] = get_float16_noround ();\n+      y[i] = get_float16_noround ();\n+      if (y[i] == 0)\n+\ty[i] = 1.0f;\n+      res_add[i] = x[i] + y[i];\n+      res_sub[i] = x[i] - y[i];\n+      res_mul[i] = x[i] * y[i];\n+      res_div[i] = x[i] / y[i];\n+\n+    }\n+\n+  union128h u128 = { x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7] };\n+  union128h u128_1 = { y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7] };\n+  union256h u256 = { x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+      x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15] };\n+  union256h u256_1 = { y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7],\n+      y[8], y[9], y[10], y[11], y[12], y[13], y[14], y[15]};\n+\n+  __m128h v128;\n+  __m256h v256;\n+  union128h a128;\n+  union256h a256;\n+\n+  memset (&v128, -1, sizeof (v128));\n+  v128 = vadd128 (u128.x, u128_1.x);\n+  a128.x = v128;\n+  if (check_union128h (a128, res_add))\n+    abort ();\n+  memset (&v128, -1, sizeof (v128));\n+  v128 = vsub128 (u128.x, u128_1.x);\n+  a128.x = v128;\n+  if (check_union128h (a128, res_sub))\n+    abort ();\n+  memset (&v128, -1, sizeof (v128));\n+  v128 = vmul128 (u128.x, u128_1.x);\n+  a128.x = v128;\n+  if (check_union128h (a128, res_mul))\n+    abort ();\n+  memset (&v128, -1, sizeof (v128));\n+  v128 = vdiv128 (u128.x, u128_1.x);\n+  a128.x = v128;\n+  if (check_union128h (a128, res_div))\n+    abort ();\n+\n+  memset (&v256, -1, sizeof (v256));\n+  v256 = vadd256 (u256.x, u256_1.x);\n+  a256.x = v256;\n+  if (check_union256h (a256, res_add))\n+    abort ();\n+  memset (&v256, -1, sizeof (v256));\n+  v256 = vsub256 (u256.x, u256_1.x);\n+  a256.x = v256;\n+  if (check_union256h (a256, res_sub))\n+    abort ();\n+  memset (&v256, -1, sizeof (v256));\n+  v256 = vmul256 (u256.x, u256_1.x);\n+  a256.x = v256;\n+  if (check_union256h (a256, res_mul))\n+    abort ();\n+  memset (&v256, -1, sizeof (v256));\n+  v256 = vdiv256 (u256.x, u256_1.x);\n+  a256.x = v256;\n+  if (check_union256h (a256, res_div))\n+    abort ();\n+}"}, {"sha": "50ed74cd6d657a8d2b7159a923032fc94c3419a5", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -702,6 +702,12 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n+/* avx512fp16intrin.h */\n+#define __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+\n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) "}, {"sha": "26a5e94c7ca54f6cef5eb464f96232e206ede10e", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -667,6 +667,20 @@ test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n \n+/* avx512fp16intrin.h */\n+test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_div_round_ph, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_div_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_div_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+\n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n "}, {"sha": "8d25effd7249d6a6b876c2ecf8132db3aee5bc96", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -772,6 +772,20 @@ test_2 (_mm_rcp28_round_ss, __m128, __m128, __m128, 8)\n test_2 (_mm_rsqrt28_round_sd, __m128d, __m128d, __m128d, 8)\n test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 8)\n \n+/* avx512fp16intrin.h */\n+test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm512_div_round_ph, __m512h, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm512_maskz_div_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm512_mask_div_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+\n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n "}, {"sha": "f7dd5d7495cef5f1201a5d9f74433ca8274c8e4b", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7a34ef5564f4240c3839c89d7e695c9ef4e49d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=bd7a34ef5564f4240c3839c89d7e695c9ef4e49d", "patch": "@@ -703,6 +703,12 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n+/* avx512fp16intrin.h */\n+#define __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+\n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) "}]}