{"sha": "92544bdfd59b9deb0ae56887f89f6719321bc20e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1NDRiZGZkNTliOWRlYjBhZTU2ODg3Zjg5ZjY3MTkzMjFiYzIwZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-04-21T18:28:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1994-04-21T18:28:09Z"}, "message": "Handle taking address of function when using -membedded-pic\n\nFrom-SVN: r7105", "tree": {"sha": "e5c25c39c55ce660a022d9bd7f000574ef5da2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5c25c39c55ce660a022d9bd7f000574ef5da2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92544bdfd59b9deb0ae56887f89f6719321bc20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92544bdfd59b9deb0ae56887f89f6719321bc20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92544bdfd59b9deb0ae56887f89f6719321bc20e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92544bdfd59b9deb0ae56887f89f6719321bc20e/comments", "author": null, "committer": null, "parents": [{"sha": "c27c5281ceb7ece21291237c93135a7432d51c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27c5281ceb7ece21291237c93135a7432d51c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27c5281ceb7ece21291237c93135a7432d51c99"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "66c31e15a24345bc3955571474f4e680b4d0cb9b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=92544bdfd59b9deb0ae56887f89f6719321bc20e", "patch": "@@ -218,6 +218,11 @@ struct mips_frame_info zero_frame_info;\n    for -mgpopt.  */\n static char *temp_filename;\n \n+/* Pseudo-reg holding the address of the current function when\n+   generating embedded PIC code.  Created by LEGITIMIZE_ADDRESS, used\n+   by mips_finalize_pic if it was created.  */\n+rtx embedded_pic_fnaddr_rtx;\n+\n /* List of all MIPS punctuation characters used by print_operand.  */\n char mips_print_operand_punct[256];\n \n@@ -853,6 +858,20 @@ mips_count_memory_refs (op, num)\n }\n \n \f\n+/* Return RTL for the offset from the current function to the\n+   argument.  */\n+\n+rtx\n+embedded_pic_offset (x)\n+     rtx x;\n+{\n+  if (embedded_pic_fnaddr_rtx == NULL)\n+    embedded_pic_fnaddr_rtx = gen_reg_rtx (Pmode);\n+  return gen_rtx (CONST, Pmode,\n+\t\t  gen_rtx (MINUS, Pmode, x,\n+\t\t\t   XEXP (DECL_RTL (current_function_decl), 0)));\n+}\n+\n /* Return the appropriate instructions to move one operand to another.  */\n \n char *\n@@ -4199,6 +4218,33 @@ epilogue_reg_mentioned_p (insn)\n   return 0;\n }\n \n+\f\n+/* When generating embedded PIC code we may need to get the address of\n+   the current function.  We will need it if we take the address of\n+   any symbol in the .text section.  */\n+\n+void\n+mips_finalize_pic ()\n+{\n+  rtx seq;\n+\n+  if (! TARGET_EMBEDDED_PIC)\n+    return;\n+  if (embedded_pic_fnaddr_rtx == NULL)\n+    return;\n+\n+  start_sequence ();\n+\n+  emit_insn (gen_get_fnaddr (embedded_pic_fnaddr_rtx,\n+\t\t\t     XEXP (DECL_RTL (current_function_decl), 0)));\n+\n+  seq = gen_sequence ();\n+  end_sequence ();\n+  emit_insn_after (seq, get_insns ());\n+\n+  embedded_pic_fnaddr_rtx = NULL;\n+}\n+\n \f\n /* Return the bytes needed to compute the frame pointer from the current\n    stack pointer.\n@@ -5221,7 +5267,17 @@ mips_select_section (decl, reloc)\n {\n   int size = int_size_in_bytes (TREE_TYPE (decl));\n \n-  if (TARGET_EMBEDDED_DATA)\n+  if (TARGET_EMBEDDED_PIC\n+      && TREE_CODE (decl) == STRING_CST\n+      && !flag_writable_strings)\n+    {\n+      /* For embedded position independent code, put constant strings\n+\t in the text section, because the data section is limited to\n+\t 64K in size.  */\n+\n+      text_section ();\n+    }\n+  else if (TARGET_EMBEDDED_DATA)\n     {\n       /* For embedded applications, always put an object in read-only data\n \t if possible, in order to reduce RAM usage.  */"}, {"sha": "4f4b8f8ce1c92f2d58430bc4f2cd8be26a001302", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=92544bdfd59b9deb0ae56887f89f6719321bc20e", "patch": "@@ -132,6 +132,7 @@ extern struct rtx_def *mips_load_reg;\t/* register to check for load delay */\n extern struct rtx_def *mips_load_reg2;\t/* 2nd reg to check for load delay */\n extern struct rtx_def *mips_load_reg3;\t/* 3rd reg to check for load delay */\n extern struct rtx_def *mips_load_reg4;\t/* 4th reg to check for load delay */\n+extern struct rtx_def *embedded_pic_fnaddr_rtx;\t/* function address */\n \n /* Functions within mips.c that we reference.  */\n \n@@ -183,6 +184,8 @@ extern int\t\tsimple_memory_operand ();\n extern int\t\tsmall_int ();\n extern void\t\ttrace();\n extern int\t\tuns_arith_operand ();\n+extern struct rtx_def *\tembedded_pic_offset ();\n+extern void\t\tmips_finalize_pic ();\n \n /* Recognition functions that return if a condition is true.  */\n extern int\t\taddress_operand ();\n@@ -1292,6 +1295,7 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n \n #define PIC_FUNCTION_ADDR_REGNUM (GP_REG_FIRST + 25)\n \n+#define FINALIZE_PIC mips_finalize_pic ()\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -2246,8 +2250,14 @@ typedef struct mips_args {\n \t     appropriate relocation.  */\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t  /* Also accept CONST_INT addresses here, so no else.  */\t\\\n+\t  /* Reject combining an embedded PIC text segment reference\t\\\n+\t     with a register.  That requires an additional\t\t\\\n+\t     instruction.  */\t\t\t\t\t\t\\\n \t  if (!TARGET_DEBUG_A_MODE\t\t\t\t\t\\\n-\t      && CONSTANT_ADDRESS_P (xplus1))\t\t\t\t\\\n+\t      && CONSTANT_ADDRESS_P (xplus1)\t\t\t\t\\\n+\t      && (!TARGET_EMBEDDED_PIC\t\t\t\t\t\\\n+\t\t  || code1 != CONST\t\t\t\t\t\\\n+\t\t  || GET_CODE (XEXP (xplus1, 0)) != MINUS))\t\t\\\n \t    goto ADDR;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -2430,7 +2440,20 @@ typedef struct mips_args {\n #define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_GP_OPT && TREE_CODE (DECL) == VAR_DECL)\t\t\t\\\n+    if (TARGET_EMBEDDED_PIC)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n+\t  SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n+        else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+\t  SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 0;\t\t\\\n+\telse if (TREE_CODE (DECL) == STRING_CST\t\t\t\t\\\n+\t\t && ! flag_writable_strings)\t\t\t\t\\\n+\t  SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 0;\t\t\\\n+        else\t\t\t\t\t\t\t\t\\\n+\t  SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 1;\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    else if (TARGET_GP_OPT && TREE_CODE (DECL) == VAR_DECL)\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tint size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "dfe0dad17885ffba855eeefc8410535df5b30753", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92544bdfd59b9deb0ae56887f89f6719321bc20e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=92544bdfd59b9deb0ae56887f89f6719321bc20e", "patch": "@@ -2759,6 +2759,23 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\"\n   \"\n {\n+  /* If we are generating embedded PIC code, and we are referring to a\n+     symbol in the .text section, we must use an offset from the start\n+     of the function.  */\n+  if (TARGET_EMBEDDED_PIC\n+      && (GET_CODE (operands[1]) == LABEL_REF\n+\t  || (GET_CODE (operands[1]) == SYMBOL_REF\n+\t      && ! SYMBOL_REF_FLAG (operands[1]))))\n+    {\n+      rtx temp;\n+\n+      temp = embedded_pic_offset (operands[1]);\n+      temp = gen_rtx (PLUS, Pmode, embedded_pic_fnaddr_rtx,\n+\t\t      force_reg (SImode, temp));\n+      emit_move_insn (operands[0], force_reg (SImode, temp));\n+      DONE;\n+    }\n+\n   /* If operands[1] is a constant address illegal for pic, then we need to\n      handle it just like LEGITIMIZE_ADDRESS does.  */\n   if (flag_pic && pic_address_needs_scratch (operands[1]))\n@@ -5542,6 +5559,20 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;     }\n ;; }\")\n \n+;; When generating embedded PIC code we need to get the address of the\n+;; current function.  This specialized instruction does just that.\n+\n+(define_insn \"get_fnaddr\"\n+  [(set (match_operand 0 \"register_operand\" \"d\")\n+\t(unspec [(match_operand 1 \"\" \"\")] 1))\n+   (clobber (reg:SI 31))]\n+  \"TARGET_EMBEDDED_PIC\n+   && GET_CODE (operands[1]) == SYMBOL_REF\"\n+  \"%($LF%= = . + 8\\;bal\\\\t$LF%=\\;la\\\\t%0,%1-$LF%=%)\\;addu\\\\t%0,%0,$31\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"4\")])\n+\n \f\n ;;\n ;;  ...................."}]}