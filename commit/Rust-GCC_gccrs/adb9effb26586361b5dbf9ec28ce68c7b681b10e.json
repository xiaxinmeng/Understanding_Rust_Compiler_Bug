{"sha": "adb9effb26586361b5dbf9ec28ce68c7b681b10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiOWVmZmIyNjU4NjM2MWI1ZGJmOWVjMjhjZTY4YzdiNjgxYjEwZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-10-26T18:39:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-26T18:39:57Z"}, "message": "Take out find_base_value change -- not needed, only the find_base_term\nchange was needed.\n\nFrom-SVN: r16185", "tree": {"sha": "2d0c7c51e1df19e150887c87735c985cfd5b1d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d0c7c51e1df19e150887c87735c985cfd5b1d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb9effb26586361b5dbf9ec28ce68c7b681b10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb9effb26586361b5dbf9ec28ce68c7b681b10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb9effb26586361b5dbf9ec28ce68c7b681b10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb9effb26586361b5dbf9ec28ce68c7b681b10e/comments", "author": null, "committer": null, "parents": [{"sha": "e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85988b5d5d75a13e0a6908abd8e287f1b6264c6"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "0cd65dc9898a0ac74fa3df8517cebb7534b9e392", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb9effb26586361b5dbf9ec28ce68c7b681b10e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb9effb26586361b5dbf9ec28ce68c7b681b10e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb9effb26586361b5dbf9ec28ce68c7b681b10e", "patch": "@@ -17,9 +17,8 @@ Sun Oct 26 09:21:40 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (LIBGCC2_CFLAGS): Add -fexceptions.\n \n-\t* alias.c (find_base_value): Handle PRE_INC, PRE_DEC, POST_INC,\n+\t* alias.c (find_base_term): Handle PRE_INC, PRE_DEC, POST_INC,\n \tand POS_DEC.\n-\t(find_base_term): Likewise.\n \n \t* alias.c (true_dependence): Fix typo.\n "}, {"sha": "07f98e61e91c9754c3dced22e443462f927cbdc2", "filename": "gcc/alias.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb9effb26586361b5dbf9ec28ce68c7b681b10e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb9effb26586361b5dbf9ec28ce68c7b681b10e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=adb9effb26586361b5dbf9ec28ce68c7b681b10e", "patch": "@@ -93,20 +93,15 @@ find_base_value (src)\n     case LABEL_REF:\n       return src;\n \n-    case PRE_INC:\n-    case PRE_DEC:\n-    case POST_INC:\n-    case POST_DEC:\n-      src = XEXP (src, 0);\n-      /* fall through */\n-\n     case REG:\n       /* At the start of a function argument registers have known base\n \t values which may be lost later.  Returning an ADDRESS\n \t expression here allows optimization based on argument values\n \t even when the argument registers are used for other purposes.  */\n       if (REGNO (src) < FIRST_PSEUDO_REGISTER && copying_arguments)\n \treturn reg_base_value[REGNO (src)];\n+      if (REG_N_SETS (REGNO (src)) == 1 && reg_base_value[REGNO (src)])\n+\treturn reg_base_value[REGNO (src)];\n       return src;\n \n     case MEM:\n@@ -129,7 +124,21 @@ find_base_value (src)\n     case PLUS:\n     case MINUS:\n       {\n-\trtx src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);\n+\trtx temp, src_0 = XEXP (src, 0), src_1 = XEXP (src, 1);\n+\n+\tif (GET_CODE (src_0) == REG)\n+\t  {\n+\t    temp = find_base_value (src_0);\n+\t    if (temp)\n+\t      src_0 = temp;\n+\t  }\n+\n+\tif (GET_CODE (src_1) == REG)\n+\t  {\n+\t    temp = find_base_value (src_1);\n+\t    if (temp)\n+\t      src_1 = temp;\n+\t  }\n \n \t/* Guess which operand is the base address.\n \n@@ -144,6 +153,12 @@ find_base_value (src)\n \t    || GET_CODE (src_0) == CONST)\n \t  return find_base_value (src_0);\n \n+\tif (GET_CODE (src_0) == CONST_INT\n+\t    || GET_CODE (src_1) == SYMBOL_REF\n+\t    || GET_CODE (src_1) == LABEL_REF\n+\t    || GET_CODE (src_1) == CONST)\n+\t  return find_base_value (src_1);\n+\n \tif (GET_CODE (src_0) == REG && REGNO_POINTER_FLAG (REGNO (src_0)))\n \t  return find_base_value (src_0);\n "}]}