{"sha": "d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5Yjg4YTFmZWVjZjVhMDg4YzUxYWY0OWVhM2Y4ZmRmZmVhZmMyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-01-17T22:34:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-01-17T22:34:35Z"}, "message": "re PR c++/47067 ([c++0x] ICE in cxx_eval_bare_aggregate, at cp/semantics.c:6352)\n\n\tPR c++/47067\n\t* semantics.c (base_field_constructor_elt): New fn.\n\t(cxx_eval_bare_aggregate): Use it.\n\t(build_data_member_initialization): Leave COMPONENT_REF for\n\tvfield inits.\n\nFrom-SVN: r168937", "tree": {"sha": "95de9147219551bb8da172c14e14a195742621de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95de9147219551bb8da172c14e14a195742621de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86070dcc8ad910ef16423c775c10fe6883239d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86070dcc8ad910ef16423c775c10fe6883239d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86070dcc8ad910ef16423c775c10fe6883239d01"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "249104773f6365dafd2dda0184610606b89ffe6a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "patch": "@@ -1,3 +1,11 @@\n+2011-01-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/47067\n+\t* semantics.c (base_field_constructor_elt): New fn.\n+\t(cxx_eval_bare_aggregate): Use it.\n+\t(build_data_member_initialization): Leave COMPONENT_REF for\n+\tvfield inits.\n+\n 2011-01-14  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>\n \n \t* parser.c (cp_parser_range_for): Remove the \"unused variable\" warning"}, {"sha": "285b764e2c7144764eba69055c7ce1353bc73b3e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "patch": "@@ -5538,7 +5538,11 @@ build_data_member_initialization (tree t, VEC(constructor_elt,gc) **vec)\n     }\n   if (TREE_CODE (member) == ADDR_EXPR)\n     member = TREE_OPERAND (member, 0);\n-  if (TREE_CODE (member) == COMPONENT_REF)\n+  if (TREE_CODE (member) == COMPONENT_REF\n+      /* If we're initializing a member of a subaggregate, it's a vtable\n+\t pointer.  Leave it as COMPONENT_REF so we remember the path to get\n+\t to the vfield.  */\n+      && TREE_CODE (TREE_OPERAND (member, 0)) != COMPONENT_REF)\n     member = TREE_OPERAND (member, 1);\n   CONSTRUCTOR_APPEND_ELT (*vec, member, init);\n   return true;\n@@ -6350,6 +6354,36 @@ cxx_eval_logical_expression (const constexpr_call *call, tree t,\n   return r;\n }\n \n+/* REF is a COMPONENT_REF designating a particular field.  V is a vector of\n+   CONSTRUCTOR elements to initialize (part of) an object containing that\n+   field.  Return a pointer to the constructor_elt corresponding to the\n+   initialization of the field.  */\n+\n+static constructor_elt *\n+base_field_constructor_elt (VEC(constructor_elt,gc) *v, tree ref)\n+{\n+  tree aggr = TREE_OPERAND (ref, 0);\n+  tree field = TREE_OPERAND (ref, 1);\n+  HOST_WIDE_INT i;\n+  constructor_elt *ce;\n+\n+  gcc_assert (TREE_CODE (ref) == COMPONENT_REF);\n+\n+  if (TREE_CODE (aggr) == COMPONENT_REF)\n+    {\n+      constructor_elt *base_ce\n+\t= base_field_constructor_elt (v, aggr);\n+      v = CONSTRUCTOR_ELTS (base_ce->value);\n+    }\n+\n+  for (i = 0; VEC_iterate (constructor_elt, v, i, ce); ++i)\n+    if (ce->index == field)\n+      return ce;\n+\n+  gcc_unreachable ();\n+  return NULL;\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    The expression tree T denotes a C-style array or a C-style\n    aggregate.  Reduce it to a constant expression.  */\n@@ -6365,7 +6399,6 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n   constructor_elt *ce;\n   HOST_WIDE_INT i;\n   bool changed = false;\n-  tree type = TREE_TYPE (t);\n   gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (t));\n   for (i = 0; VEC_iterate (constructor_elt, v, i, ce); ++i)\n     {\n@@ -6377,23 +6410,13 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n \tgoto fail;\n       if (elt != ce->value)\n \tchanged = true;\n-      if (TREE_CODE (type) != ARRAY_TYPE\n-\t  && !(same_type_ignoring_top_level_qualifiers_p\n-\t       (DECL_CONTEXT (ce->index), type)))\n+      if (TREE_CODE (ce->index) == COMPONENT_REF)\n \t{\n-\t  /* Push our vtable pointer down into the base where it belongs.  */\n-\t  tree vptr_base = DECL_CONTEXT (ce->index);\n-\t  tree base_ctor;\n-\t  gcc_assert (ce->index == TYPE_VFIELD (type));\n-\t  for (base_ctor = VEC_index (constructor_elt, n, 0)->value; ;\n-\t       base_ctor = CONSTRUCTOR_ELT (base_ctor, 0)->value)\n-\t    if (TREE_TYPE (base_ctor) == vptr_base)\n-\t      {\n-\t\tconstructor_elt *p = CONSTRUCTOR_ELT (base_ctor, 0);\n-\t\tgcc_assert (p->index == ce->index);\n-\t\tp->value = elt;\n-\t\tbreak;\n-\t      }\n+\t  /* This is an initialization of a vfield inside a base\n+\t     subaggregate that we already initialized; push this\n+\t     initialization into the previous initialization.  */\n+\t  constructor_elt *inner = base_field_constructor_elt (n, ce->index);\n+\t  inner->value = elt;\n \t}\n       else\n \tCONSTRUCTOR_APPEND_ELT (n, ce->index, elt);"}, {"sha": "e12ba4c532dcdec69ef80feca1c09e99c355dae8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "patch": "@@ -1,3 +1,7 @@\n+2011-01-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-virtual.C: New.\n+\n 2011-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/47331"}, {"sha": "448ecb1dc702afc4d6e959a17d48cf24080012ac", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79b88a1feecf5a088c51af49ea3f8fdffeafc21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual.C?ref=d79b88a1feecf5a088c51af49ea3f8fdffeafc21", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/47067\n+// { dg-options -std=c++0x }\n+\n+struct X {\n+    virtual void x();\n+    virtual ~X();\n+};\n+\n+struct Y {\n+    virtual void y();\n+    virtual ~Y();\n+};\n+\n+struct Z: X, Y {} z;"}]}