{"sha": "d91056851c5c60f226e3192fb955d018b53eb66f", "node_id": "C_kwDOANBUbNoAKGQ5MTA1Njg1MWM1YzYwZjIyNmUzMTkyZmI5NTVkMDE4YjUzZWI2NmY", "commit": {"author": {"name": "Patrick McGehearty", "email": "patrick.mcgehearty@oracle.com", "date": "2021-10-03T22:07:06Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-10-03T22:07:06Z"}, "message": "Fix for powerpc64 long double complex divide failure\n\n- - - -\n\nNew in version 6: Due to an oversight (i.e. coding error), version 5\nchanged the use of __LIBGCC_TF_EPSILON__ to __LIBGCC_DF_EPSILON__ but\nnot the other LIBGCC_TF values. For correct execution of the long\ndouble test case it is necessary to also switch to using\n__LIBGCC_DF_MIN__. For consistency we also switch to using\n__LIBGCC_DF_MAX__. LDBL_MIN is 2**53 times as larger than DBL_MIN.\nThe larger value causes the code to switch the order of computation\nwhen it is not optimal, resulting in failure for one of the values\nin the cdivchk_ld.c test. Using DBL_MIN does not cause that failure..\n\nThere may be opportunity for further refinement of IBM128 format\nLong Double complex divide, but that's beyond the scope of this\npatch.\n\n- - - -\n\nThis revision adds a test in libgcc/libgcc2.c for when\n\"__LIBGCC_TF_MANT_DIG__ == 106\" to use __LIBGCC_DF_EPSILON__ instead\nof __LIBGCC_TF_EPSILON__. That is specific to IBM 128-bit format long\ndoubles where EPSILON is very, very small and 1/EPSILON oveflows to\ninfinity. This change avoids the overflow without affecting any other\nplatform. Discussion in the patch is adjusted to reflect this\nlimitation.\n\nIt does not make any changes to .../rs6000/_divkc3.c, leaving it to\nuse __LIBGCC_KF__*. That means the upstream gcc will not build in\nolder IBM environments that do not recognize the KF floating point\nmode properly. Environments that do not need IBM longdouble support\ndo build cleanly.\n\n- - - -\nThis patch addresses the failure of powerpc64 long double complex divide\nin native ibm long double format after the patch \"Practical improvement\nto libgcc complex divide\".\n\nThe new code uses the following macros which are intended to be mapped\nto appropriate values according to the underlying hardware representation.\nSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101104\n\nRBIG     a value near the maximum representation\nRMIN     a value near the minimum representation\n         (but not in the subnormal range)\nRMIN2    a value moderately less than 1\nRMINSCAL the inverse of RMIN2\nRMAX2    RBIG * RMIN2  - a value to limit scaling to not overflow\n\nWhen \"long double\" values were not using the IEEE 128-bit format but\nthe traditional IBM 128-bit, the previous code used the LDBL values\nwhich caused overflow for RMINSCAL. The new code uses the DBL values.\n\nRBIG  LDBL_MAX = 0x1.fffffffffffff800p+1022\n      DBL_MAX  = 0x1.fffffffffffff000p+1022\n\nRMIN  LDBL_MIN = 0x1.0000000000000000p-969\nRMIN  DBL_MIN  = 0x1.0000000000000000p-1022\n\nRMIN2 LDBL_EPSILON = 0x0.0000000000001000p-1022 = 0x1.0p-1074\nRMIN2 DBL_EPSILON  = 0x1.0000000000000000p-52\n\n\u001b[ORMINSCAL 1/LDBL_EPSILON = inf (1.0p+1074 does not fit in IBM 128-bit).\n         1/DBL_EPSILON  = 0x1.0000000000000000p+52\n\nRMAX2 = RBIG * RMIN2 = 0x1.fffffffffffff800p-52\n        RBIG * RMIN2 = 0x1.fffffffffffff000p+970\n\nThe MAX and MIN values have only modest changes since the maximum and\nminimum values are about the same as for double precision.  The\nEPSILON field is considerably different. Due to how very small values\ncan be represented in the lower 64 bits of the IBM 128-bit floating\npoint, EPSILON is extremely small, so far beyond the desired value\nthat inversion of the value overflows and even without the overflow,\nthe RMAX2 is so small as to eliminate most usage of the test.\n\nThe change has been tested on gcc135.fsffrance.org and gains the\nexpected improvements in accuracy for long double complex divide.\n\nlibgcc/\n\tPR target/101104\n\t* libgcc2.c (RMIN2, RMINSCAL, RMAX2):\n\tUse more correct values for native IBM 128-bit.", "tree": {"sha": "85fed2a9aa6ccb6611b56a96e31c915cc2fc5bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85fed2a9aa6ccb6611b56a96e31c915cc2fc5bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91056851c5c60f226e3192fb955d018b53eb66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91056851c5c60f226e3192fb955d018b53eb66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91056851c5c60f226e3192fb955d018b53eb66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91056851c5c60f226e3192fb955d018b53eb66f/comments", "author": {"login": "patrickmcgehearty", "id": 68669378, "node_id": "MDQ6VXNlcjY4NjY5Mzc4", "avatar_url": "https://avatars.githubusercontent.com/u/68669378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrickmcgehearty", "html_url": "https://github.com/patrickmcgehearty", "followers_url": "https://api.github.com/users/patrickmcgehearty/followers", "following_url": "https://api.github.com/users/patrickmcgehearty/following{/other_user}", "gists_url": "https://api.github.com/users/patrickmcgehearty/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrickmcgehearty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrickmcgehearty/subscriptions", "organizations_url": "https://api.github.com/users/patrickmcgehearty/orgs", "repos_url": "https://api.github.com/users/patrickmcgehearty/repos", "events_url": "https://api.github.com/users/patrickmcgehearty/events{/privacy}", "received_events_url": "https://api.github.com/users/patrickmcgehearty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "e66e6f097b13b40136c9cd47b001d0d37f8c91d3", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91056851c5c60f226e3192fb955d018b53eb66f/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91056851c5c60f226e3192fb955d018b53eb66f/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=d91056851c5c60f226e3192fb955d018b53eb66f", "patch": "@@ -1904,10 +1904,17 @@ NAME (TYPE x, int m)\n # define MODE\ttc\n # define CEXT\t__LIBGCC_TF_FUNC_EXT__\n # define NOTRUNC (!__LIBGCC_TF_EXCESS_PRECISION__)\n-# define RBIG\t(__LIBGCC_TF_MAX__ / 2)\n-# define RMIN\t(__LIBGCC_TF_MIN__)\n-# define RMIN2\t(__LIBGCC_TF_EPSILON__)\n-# define RMINSCAL (1 / __LIBGCC_TF_EPSILON__)\n+# if __LIBGCC_TF_MANT_DIG__ == 106\n+#  define RBIG\t(__LIBGCC_DF_MAX__ / 2)\n+#  define RMIN\t(__LIBGCC_DF_MIN__)\n+#  define RMIN2  (__LIBGCC_DF_EPSILON__)\n+#  define RMINSCAL (1 / __LIBGCC_DF_EPSILON__)\n+# else\n+#  define RBIG\t(__LIBGCC_TF_MAX__ / 2)\n+#  define RMIN\t(__LIBGCC_TF_MIN__)\n+#  define RMIN2\t(__LIBGCC_TF_EPSILON__)\n+#  define RMINSCAL (1 / __LIBGCC_TF_EPSILON__)\n+# endif\n # define RMAX2\t(RBIG * RMIN2)\n #else\n # error"}]}