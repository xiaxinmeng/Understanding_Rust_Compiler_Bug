{"sha": "b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5MWNiMDBhOGNlYTE4YzhmZDVkZjE1NzBjMmI4YWQwNzFjMDBhMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-17T18:16:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-17T18:16:15Z"}, "message": "c-common.c (FMT_FLAG_DOLLAR_MULTIPLE): Define.\n\n\t* c-common.c (FMT_FLAG_DOLLAR_MULTIPLE): Define.\n\t(format_types): Use it for printf.\n\t(maybe_read_dollar_number): Add parameter for the kind of format\n\tinvolved.  Warn for multiple use for arguments if this is\n\tinappropriate for the kind of format involved.\n\t(check_format_info_main): Update calls to maybe_read_dollar_number.\n\ntestsuite:\n\t* gcc.dg/format-xopen-1.c: Update comments; adjust for checking\n\tfor multiple use of arguments with scanf formats; add tests for\n\tmultiple use of arguments.\n\nFrom-SVN: r36905", "tree": {"sha": "e8f510f35a6c8d73058c0718e5068f2b988418fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f510f35a6c8d73058c0718e5068f2b988418fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948eab23d05176dc35b82b44340b043a903353a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948eab23d05176dc35b82b44340b043a903353a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948eab23d05176dc35b82b44340b043a903353a0"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "ddd043fb3a74b86e4eef9930b4b4a3c233156b46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "patch": "@@ -1,3 +1,12 @@\n+2000-10-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (FMT_FLAG_DOLLAR_MULTIPLE): Define.\n+\t(format_types): Use it for printf.\n+\t(maybe_read_dollar_number): Add parameter for the kind of format\n+\tinvolved.  Warn for multiple use for arguments if this is\n+\tinappropriate for the kind of format involved.\n+\t(check_format_info_main): Update calls to maybe_read_dollar_number.\n+\n 2000-10-17  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* inclhack.def (hpux_maxint): Also apply fix to values.h."}, {"sha": "2fb63fde5a04d76ca5010afa5b27e986273f1776", "filename": "gcc/c-common.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "patch": "@@ -1272,7 +1272,10 @@ enum\n   FMT_FLAG_SCANF_A_KLUDGE = 2,\n   /* A % during parsing a specifier is allowed to be a modified % rather\n      that indicating the format is broken and we are out-of-sync.  */\n-  FMT_FLAG_FANCY_PERCENT_OK = 4\n+  FMT_FLAG_FANCY_PERCENT_OK = 4,\n+  /* With $ operand numbers, it is OK to reference the same argument more\n+     than once.  */\n+  FMT_FLAG_DOLLAR_MULTIPLE = 8\n   /* Not included here: details of whether width or precision may occur\n      (controlled by width_char and precision_char); details of whether\n      '*' can be used for these (width_type and precision_type); details\n@@ -1692,7 +1695,7 @@ static const format_kind_info format_types[] =\n {\n   { \"printf\",   printf_length_specs, print_char_table, \" +#0-'I\", NULL, \n     printf_flag_specs, printf_flag_pairs,\n-    FMT_FLAG_ARG_CONVERT, 'w', 'p', 0, 'L',\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE, 'w', 'p', 0, 'L',\n     &integer_type_node, &integer_type_node\n   },\n   { \"scanf\",    scanf_length_specs,  scan_char_table,  \"*'I\", NULL, \n@@ -1769,7 +1772,8 @@ static void status_warning PARAMS ((int *, const char *, ...))\n \n static void init_dollar_format_checking\t\tPARAMS ((int, tree));\n static int maybe_read_dollar_number\t\tPARAMS ((int *, const char **, int,\n-\t\t\t\t\t\t\t tree, tree *));\n+\t\t\t\t\t\t\t tree, tree *,\n+\t\t\t\t\t\t\t const format_kind_info *));\n static void finish_dollar_format_checking\tPARAMS ((int *, format_check_results *));\n \n static const format_flag_spec *get_flag_spec\tPARAMS ((const format_flag_spec *,\n@@ -2059,12 +2063,14 @@ init_dollar_format_checking (first_arg_num, params)\n    a $ format is found, *FORMAT is updated to point just after it.  */\n \n static int\n-maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr)\n+maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr,\n+\t\t\t  fki)\n      int *status;\n      const char **format;\n      int dollar_needed;\n      tree params;\n      tree *param_ptr;\n+     const format_kind_info *fki;\n {\n   int argnum;\n   int overflow_flag;\n@@ -2125,7 +2131,16 @@ maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr)\n \t      nalloc - dollar_arguments_alloc);\n       dollar_arguments_alloc = nalloc;\n     }\n-  dollar_arguments_used[argnum - 1] = 1;\n+  if (!(fki->flags & FMT_FLAG_DOLLAR_MULTIPLE)\n+      && dollar_arguments_used[argnum - 1] == 1)\n+    {\n+      dollar_arguments_used[argnum - 1] = 2;\n+      status_warning (status,\n+\t\t      \"format argument %d used more than once in %s format\",\n+\t\t      argnum, fki->name);\n+    }\n+  else\n+    dollar_arguments_used[argnum - 1] = 1;\n   if (dollar_first_arg_num)\n     {\n       int i;\n@@ -2531,7 +2546,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  int opnum;\n \t  opnum = maybe_read_dollar_number (status, &format_chars, 0,\n \t\t\t\t\t    first_fillin_param,\n-\t\t\t\t\t    &main_arg_params);\n+\t\t\t\t\t    &main_arg_params, fki);\n \t  if (opnum == -1)\n \t    return;\n \t  else if (opnum > 0)\n@@ -2583,7 +2598,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t  opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n-\t\t\t\t\t\t    &params);\n+\t\t\t\t\t\t    &params, fki);\n \t\t  if (opnum == -1)\n \t\t    return;\n \t\t  else if (opnum > 0)\n@@ -2662,7 +2677,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t  opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n-\t\t\t\t\t\t    &params);\n+\t\t\t\t\t\t    &params, fki);\n \t\t  if (opnum == -1)\n \t\t    return;\n \t\t  else if (opnum > 0)"}, {"sha": "0859351eb8baf22d88b943d4f3b662ca622e3233", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "patch": "@@ -1,3 +1,9 @@\n+2000-10-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-xopen-1.c: Update comments; adjust for checking\n+\tfor multiple use of arguments with scanf formats; add tests for\n+\tmultiple use of arguments.\n+\n 2000-10-17  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* gcc.dg/sequence-pt-1.c: Several new tests; remove xfail from some old tests."}, {"sha": "99d571bb0061504046485d215df89406a710a31f", "filename": "gcc/testsuite/gcc.dg/format-xopen-1.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b691cb00a8cea18c8fd5df1570c2b8ad071c00a0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c?ref=b691cb00a8cea18c8fd5df1570c2b8ad071c00a0", "patch": "@@ -1,6 +1,6 @@\n /* Test for X/Open format extensions, as found in the\n    Single Unix Specification and in Austin Group draft 4, subject to some\n-   Aardvark problem reports submitted.\n+   Aardvark problem reports approved as changes.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n@@ -81,9 +81,6 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   */\n   scanf (\"%aS\", fp);\n   /* The printf flag character ' is an X/Open extension.  */\n-  /* Allowing %'F here presumes acceptance of the corresponding Aardvark\n-     report.\n-  */\n   printf (\"%'d%'i%'u%'f%'F%'g%'G\", i, i, u, d, d, d, d);\n   printf (\"%'o\", u); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n   printf (\"%'x\", u); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n@@ -97,9 +94,9 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"%'p\", p); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n   printf (\"%'n\", n); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n   /* The use of operand number $ formats is an X/Open extension.  */\n-  /* Banning gaps in the arguments used with scanf, and not objecting to\n-     multiple use of an argument with scanf, presumes acceptance of the\n-     corresponding Aardvark reports.\n+  /* Banning gaps in the arguments used with scanf was covered in Aardvark\n+     report XSHd4 ERN 164, which was rejected, but implementation without\n+     such a ban still isn't possible within ISO C.\n   */\n   scanf (\"%1$d\", ip);\n   printf (\"%1$d\", i);\n@@ -119,5 +116,7 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   printf (\"%3$d%1$d\", i, i, i); /* { dg-warning \"before used\" \"unused $ operand\" } */\n   printf (\"%2$d%1$d\", i, i, i); /* { dg-warning \"unused\" \"unused $ operand\" } */\n   vprintf (\"%3$d%1$d\", va); /* { dg-warning \"before used\" \"unused $ operand\" } */\n-  scanf (\"%1$*d%1$d\", ip); /* { dg-warning \"operand\" \"operand number with suppression\" } */\n+  scanf (\"%2$*d%1$d\", ip, ip); /* { dg-warning \"operand\" \"operand number with suppression\" } */\n+  printf (\"%1$d%1$d\", i);\n+  scanf (\"%1$d%1$d\", ip); /* { dg-warning \"more than once\" \"multiple use of scanf argument\" } */\n }"}]}