{"sha": "cc8765963d50329c6795b728b44514020b23b5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4NzY1OTYzZDUwMzI5YzY3OTViNzI4YjQ0NTE0MDIwYjIzYjVkNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-04T17:59:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-04T17:59:44Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1428", "tree": {"sha": "bfbd5172444b3212a53c044f3f7fed85b2b6d19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfbd5172444b3212a53c044f3f7fed85b2b6d19d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc8765963d50329c6795b728b44514020b23b5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8765963d50329c6795b728b44514020b23b5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8765963d50329c6795b728b44514020b23b5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8765963d50329c6795b728b44514020b23b5d6/comments", "author": null, "committer": null, "parents": [{"sha": "0093e75b01730b9688f299e3abb6bf2703c96142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0093e75b01730b9688f299e3abb6bf2703c96142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0093e75b01730b9688f299e3abb6bf2703c96142"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "5e6a18300c7db3351b03acf500680fad8d874d94", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8765963d50329c6795b728b44514020b23b5d6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8765963d50329c6795b728b44514020b23b5d6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=cc8765963d50329c6795b728b44514020b23b5d6", "patch": "@@ -302,17 +302,20 @@ struct undobuf\n \n static struct undobuf undobuf;\n \n-/* Substitute NEWVAL, an rtx expression, into INTO, a place in a some\n+/* Substitute NEWVAL, an rtx expression, into INTO, a place in some\n    insn.  The substitution can be undone by undo_all.  If INTO is already\n-   set to NEWVAL, do not record this change.  */\n+   set to NEWVAL, do not record this change.  Because computing NEWVAL might\n+   also call SUBST, we have to compute it before we put anything into\n+   the undo table.  */\n \n #define SUBST(INTO, NEWVAL)  \\\n- do { if (undobuf.num_undo < MAX_UNDO)\t\t\t\t\t\\\n+ do { rtx _new = (NEWVAL);\t\t\t\t\t\t\\\n+      if (undobuf.num_undo < MAX_UNDO)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  undobuf.undo[undobuf.num_undo].where = &INTO;\t\t\t\\\n \t  undobuf.undo[undobuf.num_undo].old_contents = INTO;\t\t\\\n \t  undobuf.undo[undobuf.num_undo].is_int = 0;\t\t\t\\\n-\t  INTO = NEWVAL;\t\t\t\t\t\t\\\n+\t  INTO = _new;\t\t\t\t\t\t\t\\\n \t  if (undobuf.undo[undobuf.num_undo].old_contents != INTO)\t\\\n \t    undobuf.num_undo++; \t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\"}]}