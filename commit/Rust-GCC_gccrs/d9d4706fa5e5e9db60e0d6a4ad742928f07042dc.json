{"sha": "d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkNDcwNmZhNWU1ZTlkYjYwZTBkNmE0YWQ3NDI5MjhmMDcwNDJkYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-22T22:04:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-22T22:04:21Z"}, "message": "cfg.c (unchecked_make_edge): Call execute_on_growing_pred after making an edge.\n\n\t* cfg.c (unchecked_make_edge): Call execute_on_growing_pred\n\tafter making an edge.\n\t(remove_edge): Call execute_on_shrinking_pred before removing\n\tan edge.\n\t(redirect_edge_succ): Call execute_on_growing_pred and\n\texecute_on_shrinking_pred.\n\t* cfghooks.c (execute_on_growing_pred): New.\n\t(execute_on_shrinking_pred): Likewise.\n\t* cfghooks.h (cfg_hooks): Add execute_on_growing_pred and\n\texecute_on_shrinking_pred.\n\tAdd prototypes for execute_on_growing_pred and\n\texecute_on_shrinking_pred.\n\t* cfgrtl.c (rtl_cfg_hooks): Add NULL hooks to\n\texecute_on_growing_pred and execute_on_shrinking_pred.\n\t(cfg_layout_rtl_cfg_hook): Likewise.\n\t* tree-cfg.c (tree_cfg_hooks): Likewise.\n\nFrom-SVN: r91035", "tree": {"sha": "712b6c41059aafe8583821534fb80e3194ae272d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/712b6c41059aafe8583821534fb80e3194ae272d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/comments", "author": null, "committer": null, "parents": [{"sha": "b31997c0dca31350faba5f7859acbd6109f9039e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31997c0dca31350faba5f7859acbd6109f9039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31997c0dca31350faba5f7859acbd6109f9039e"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "c023f37e5158b44cfd0bddc6f971243e9307ec7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -7,6 +7,23 @@\n \t* tree-ssa.c (ssa_remove_edge): Call remove_phi_args instead\n \tof remove_phi_arg.\n \n+\t* cfg.c (unchecked_make_edge): Call execute_on_growing_pred\n+\tafter making an edge.\n+\t(remove_edge): Call execute_on_shrinking_pred before removing\n+\tan edge.\n+\t(redirect_edge_succ): Call execute_on_growing_pred and\n+\texecute_on_shrinking_pred.\n+\t* cfghooks.c (execute_on_growing_pred): New.\n+\t(execute_on_shrinking_pred): Likewise.\n+\t* cfghooks.h (cfg_hooks): Add execute_on_growing_pred and\n+\texecute_on_shrinking_pred.\n+\tAdd prototypes for execute_on_growing_pred and\n+\texecute_on_shrinking_pred.\n+\t* cfgrtl.c (rtl_cfg_hooks): Add NULL hooks to\n+\texecute_on_growing_pred and execute_on_shrinking_pred.\n+\t(cfg_layout_rtl_cfg_hook): Likewise.\n+\t* tree-cfg.c (tree_cfg_hooks): Likewise.\n+\n 2004-11-23  Ben Elliston  <bje@au.ibm.com>\n \n \t* doc/cfg.texi (Maintaining the CFG): Use @ftable instead of"}, {"sha": "563f5e2a6aa1cb5714ecb361d171c6373c78f607", "filename": "gcc/cfg.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -277,6 +277,8 @@ unchecked_make_edge (basic_block src, basic_block dst, int flags)\n   e->flags = flags;\n   e->dest_idx = EDGE_COUNT (dst->preds) - 1;\n \n+  execute_on_growing_pred (e);\n+\n   return e;\n }\n \n@@ -358,6 +360,8 @@ remove_edge (edge e)\n   bool found = false;\n   edge_iterator ei;\n \n+  execute_on_shrinking_pred (e);\n+\n   src = e->src;\n   dest = e->dest;\n   dest_idx = e->dest_idx;\n@@ -394,6 +398,8 @@ redirect_edge_succ (edge e, basic_block new_succ)\n   basic_block dest = e->dest;\n   unsigned int dest_idx = e->dest_idx;\n \n+  execute_on_shrinking_pred (e);\n+\n   VEC_unordered_remove (edge, dest->preds, dest_idx);\n \n   /* If we removed an edge in the middle of the edge vector, we need\n@@ -405,6 +411,7 @@ redirect_edge_succ (edge e, basic_block new_succ)\n   VEC_safe_push (edge, new_succ->preds, e);\n   e->dest = new_succ;\n   e->dest_idx = EDGE_COUNT (new_succ->preds) - 1;\n+  execute_on_growing_pred (e);\n }\n \n /* Like previous but avoid possible duplicate edge.  */"}, {"sha": "0f0c230fb805b764c70d469be1560e7218cd4dff", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -804,3 +804,23 @@ flow_call_edges_add (sbitmap blocks)\n \n   return (cfg_hooks->flow_call_edges_add) (blocks);\n }\n+\n+/* This function is called immediately after edge E is added to the\n+   edge vector E->dest->preds.  */\n+\n+void\n+execute_on_growing_pred (edge e)\n+{\n+  if (cfg_hooks->execute_on_growing_pred)\n+    cfg_hooks->execute_on_growing_pred (e);\n+}\n+\n+/* This function is called immediately before edge E is removed from\n+   the edge vector E->dest->preds.  */\n+\n+void\n+execute_on_shrinking_pred (edge e)\n+{\n+  if (cfg_hooks->execute_on_shrinking_pred)\n+    cfg_hooks->execute_on_shrinking_pred (e);\n+}"}, {"sha": "92a458ed4aa73e6f572c925d61e25efb5d2fcc80", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -100,6 +100,14 @@ struct cfg_hooks\n      The goal is to expose cases in which entering a basic block does not imply\n      that all subsequent instructions must be executed.  */\n   int (*flow_call_edges_add) (sbitmap);\n+\n+  /* This function is called immediately after edge E is added to the\n+     edge vector E->dest->preds.  */\n+  void (*execute_on_growing_pred) (edge);\n+\n+  /* This function is called immediately before edge E is removed from\n+     the edge vector E->dest->preds.  */\n+  void (*execute_on_shrinking_pred) (edge);\n };\n \n extern void verify_flow_info (void);\n@@ -126,6 +134,8 @@ extern basic_block duplicate_block (basic_block, edge);\n extern bool block_ends_with_call_p (basic_block bb);\n extern bool block_ends_with_condjump_p (basic_block bb);\n extern int flow_call_edges_add (sbitmap);\n+extern void execute_on_growing_pred (edge);\n+extern void execute_on_shrinking_pred (edge);\n \n /* Hooks containers.  */\n extern struct cfg_hooks tree_cfg_hooks;"}, {"sha": "0bb181aee9c43a91ed0c450bd5d9452a73489641", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -3071,7 +3071,9 @@ struct cfg_hooks rtl_cfg_hooks = {\n   rtl_tidy_fallthru_edge,\n   rtl_block_ends_with_call_p,\n   rtl_block_ends_with_condjump_p,\n-  rtl_flow_call_edges_add\n+  rtl_flow_call_edges_add,\n+  NULL, /* execute_on_growing_pred */\n+  NULL /* execute_on_shrinking_pred */\n };\n \n /* Implementation of CFG manipulation for cfg layout RTL, where\n@@ -3107,6 +3109,8 @@ struct cfg_hooks cfg_layout_rtl_cfg_hooks = {\n   NULL,\n   rtl_block_ends_with_call_p,\n   rtl_block_ends_with_condjump_p,\n-  rtl_flow_call_edges_add\n+  rtl_flow_call_edges_add,\n+  NULL, /* execute_on_growing_pred */\n+  NULL /* execute_on_shrinking_pred */\n };\n "}, {"sha": "f00084aed30808c71ae93d8f1c4af9a8b35e661b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d4706fa5e5e9db60e0d6a4ad742928f07042dc/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d9d4706fa5e5e9db60e0d6a4ad742928f07042dc", "patch": "@@ -5360,7 +5360,9 @@ struct cfg_hooks tree_cfg_hooks = {\n   NULL,\t\t\t\t/* tidy_fallthru_edge  */\n   tree_block_ends_with_call_p,\t/* block_ends_with_call_p */\n   tree_block_ends_with_condjump_p, /* block_ends_with_condjump_p */\n-  tree_flow_call_edges_add      /* flow_call_edges_add */\n+  tree_flow_call_edges_add,     /* flow_call_edges_add */\n+  NULL,\t/* execute_on_growing_pred */\n+  NULL, /* execute_on_shrinking_pred */\n };\n \n "}]}