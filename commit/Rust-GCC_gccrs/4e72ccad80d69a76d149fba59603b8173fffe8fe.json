{"sha": "4e72ccad80d69a76d149fba59603b8173fffe8fe", "node_id": "C_kwDOANBUbNoAKDRlNzJjY2FkODBkNjlhNzZkMTQ5ZmJhNTk2MDNiODE3M2ZmZmU4ZmU", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2020-06-29T13:15:10Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-06-02T19:23:27Z"}, "message": "RISC-V: bitmanip: improve constant-loading for (1ULL << 31) in DImode\n\nThe SINGLE_BIT_MASK_OPERAND() is overly restrictive, triggering for\nbits above 31 only (to side-step any issues with the negative SImode\nvalue 0x80000000/(-1ull << 31)/(1 << 31)).  This moves the special\nhandling of this SImode value (i.e. the check for (-1ull << 31) to\nriscv.cc and relaxes the SINGLE_BIT_MASK_OPERAND() test.\n\nWith this, the code-generation for loading (1ULL << 31) from:\n\tli\ta0,1\n\tslli\ta0,a0,31\nto:\n\tbseti\ta0,zero,31\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_build_integer_1): Rewrite value as\n\t(-1 << 31) for the single-bit case, when operating on (1 << 31)\n\tin SImode.\n\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): Allow for\n\tany single-bit value, moving the special case for (1 << 31) to\n\triscv_build_integer_1 (in riscv.c).\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@vrull.eu>", "tree": {"sha": "b193e4ea2c8998dcad4abac4439fd2d6f0200731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b193e4ea2c8998dcad4abac4439fd2d6f0200731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e72ccad80d69a76d149fba59603b8173fffe8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e72ccad80d69a76d149fba59603b8173fffe8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e72ccad80d69a76d149fba59603b8173fffe8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e72ccad80d69a76d149fba59603b8173fffe8fe/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19b4342c19e5a7fd84888aa06ebc106438d0c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19b4342c19e5a7fd84888aa06ebc106438d0c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19b4342c19e5a7fd84888aa06ebc106438d0c46"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "2e83ca0739422abaa29d11ddd26f0bdce04e9826", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e72ccad80d69a76d149fba59603b8173fffe8fe/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e72ccad80d69a76d149fba59603b8173fffe8fe/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=4e72ccad80d69a76d149fba59603b8173fffe8fe", "patch": "@@ -420,6 +420,15 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],\n       /* Simply BSETI.  */\n       codes[0].code = UNKNOWN;\n       codes[0].value = value;\n+\n+      /* RISC-V sign-extends all 32bit values that live in a 32bit\n+\t register.  To avoid paradoxes, we thus need to use the\n+\t sign-extended (negative) representation (-1 << 31) for the\n+\t value, if we want to build (1 << 31) in SImode.  This will\n+\t then expand to an LUI instruction.  */\n+      if (mode == SImode && value == (HOST_WIDE_INT_1U << 31))\n+\tcodes[0].value = (HOST_WIDE_INT_M1U << 31);\n+\n       return 1;\n     }\n "}, {"sha": "6f7f4d3fbdcfa6c8ca03604fbe5817aad6278e2e", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e72ccad80d69a76d149fba59603b8173fffe8fe/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e72ccad80d69a76d149fba59603b8173fffe8fe/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=4e72ccad80d69a76d149fba59603b8173fffe8fe", "patch": "@@ -528,13 +528,10 @@ enum reg_class\n   (((VALUE) | ((1UL<<31) - IMM_REACH)) == ((1UL<<31) - IMM_REACH)\t\\\n    || ((VALUE) | ((1UL<<31) - IMM_REACH)) + IMM_REACH == 0)\n \n-/* If this is a single bit mask, then we can load it with bseti.  But this\n-   is not useful for any of the low 31 bits because we can use addi or lui\n-   to load them.  It is wrong for loading SImode 0x80000000 on rv64 because it\n-   needs to be sign-extended.  So we restrict this to the upper 32-bits\n-   only.  */\n-#define SINGLE_BIT_MASK_OPERAND(VALUE) \\\n-  (pow2p_hwi (VALUE) && (ctz_hwi (VALUE) >= 32))\n+/* If this is a single bit mask, then we can load it with bseti.  Special\n+   handling of SImode 0x80000000 on RV64 is done in riscv_build_integer_1. */\n+#define SINGLE_BIT_MASK_OPERAND(VALUE)\t\t\t\t\t\\\n+  (pow2p_hwi (VALUE))\n \n /* Stack layout; function entry, exit and calling.  */\n "}]}