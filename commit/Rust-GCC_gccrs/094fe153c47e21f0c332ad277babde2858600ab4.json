{"sha": "094fe153c47e21f0c332ad277babde2858600ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0ZmUxNTNjNDdlMjFmMGMzMzJhZDI3N2JhYmRlMjg1ODYwMGFiNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-22T21:34:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-22T21:34:27Z"}, "message": "decl.c (tag_name): New fn.\n\n\t* decl.c (tag_name): New fn.\n\t(xref_tag): Complain about using typedef-name after class-key.\nFixes Sec7/1_3/C07351.cm.\n\t* init.c (expand_vec_init): Also keep going if from_array.\nFixes g++.other/copy1.C.\n\t* tree.c (is_overloaded_fn): Also handle the output of\n\tbuild_offset_ref.\nFixes Sec5/3_3/S05162.C.\n\t* decl.c (grokdeclarator): Use constructor_name when comparing\n\tfield name against enclosing class.\n\t* class.c (finish_struct_anon): Likewise.\nFixes Sec9/2/C09268.cm.\n\nFrom-SVN: r23758", "tree": {"sha": "afde2aba1f0d1acfbc460eaa557cb7a2935d2841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afde2aba1f0d1acfbc460eaa557cb7a2935d2841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/094fe153c47e21f0c332ad277babde2858600ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094fe153c47e21f0c332ad277babde2858600ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094fe153c47e21f0c332ad277babde2858600ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094fe153c47e21f0c332ad277babde2858600ab4/comments", "author": null, "committer": null, "parents": [{"sha": "8190f0737fd9a7b86b505c342c7cd894397ede35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8190f0737fd9a7b86b505c342c7cd894397ede35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8190f0737fd9a7b86b505c342c7cd894397ede35"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "91d64dd098bce11f3f416cb94927a7ca0888bcd8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=094fe153c47e21f0c332ad277babde2858600ab4", "patch": "@@ -1,3 +1,17 @@\n+1998-11-22  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (tag_name): New fn.\n+\t(xref_tag): Complain about using typedef-name after class-key.\n+\n+\t* init.c (expand_vec_init): Also keep going if from_array.\n+\n+\t* tree.c (is_overloaded_fn): Also handle the output of\n+\tbuild_offset_ref.\n+\n+\t* decl.c (grokdeclarator): Use constructor_name when comparing\n+\tfield name against enclosing class.\n+\t* class.c (finish_struct_anon): Likewise.\n+\n 1998-11-22  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl.c (poplevel): Remove code to handle KEEP == 2."}, {"sha": "9ade20159fbbd2c8015281472fa42419976d1504", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=094fe153c47e21f0c332ad277babde2858600ab4", "patch": "@@ -3143,7 +3143,7 @@ finish_struct_anon (t)\n \t      if (DECL_ARTIFICIAL (*uelt))\n \t\tcontinue;\n \n-\t      if (DECL_NAME (*uelt) == TYPE_IDENTIFIER (t))\n+\t      if (DECL_NAME (*uelt) == constructor_name (t))\n \t\tcp_pedwarn_at (\"ANSI C++ forbids member `%D' with same name as enclosing class\",\n \t\t\t       *uelt);\n "}, {"sha": "b28b82c067d297087fff8943c4a1f008d79bdcb7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=094fe153c47e21f0c332ad277babde2858600ab4", "patch": "@@ -10299,7 +10299,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n       if (decl_context == FIELD)\n \t{\n-\t  if (declarator == current_class_name)\n+\t  if (declarator == constructor_name (current_class_type))\n \t    cp_pedwarn (\"ANSI C++ forbids nested type `%D' with same name as enclosing class\",\n \t\t\tdeclarator);\n \t  decl = build_lang_decl (TYPE_DECL, declarator, type);\n@@ -10781,7 +10781,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      }\n \n \t    /* 9.2p13 [class.mem] */\n-\t    if (declarator == current_class_name)\n+\t    if (declarator == constructor_name (current_class_type))\n \t      cp_pedwarn (\"ANSI C++ forbids data member `%D' with same name as enclosing class\",\n \t\t\t  declarator);\n \n@@ -11703,6 +11703,27 @@ grok_op_properties (decl, virtualp, friendp)\n     }\n }\n \f\n+static char *\n+tag_name (code)\n+     enum tag_types code;\n+{\n+  switch (code)\n+    {\n+    case record_type:\n+      return \"struct\";\n+    case class_type:\n+      return \"class\";\n+    case union_type:\n+      return \"union \";\n+    case enum_type:\n+      return \"enum\";\n+    case signature_type:\n+      return \"signature\";\n+    default:\n+      my_friendly_abort (981122);\n+    }\n+}\n+\n /* Get the struct, enum or union (CODE says which) with tag NAME.\n    Define the tag as a forward-reference if it is not defined.\n \n@@ -11817,7 +11838,12 @@ xref_tag (code_type_node, name, globalize)\n       else \n \t{\n \t  if (t)\n-\t    ref = t;\n+\t    {\n+\t      if (t != TYPE_MAIN_VARIANT (t))\n+\t\tcp_pedwarn (\"using typedef-name `%D' after `%s'\",\n+\t\t\t    TYPE_NAME (t), tag_name (tag_code));\n+\t      ref = t;\n+\t    }\n \t  else\n \t    ref = lookup_tag (code, name, b, 0);\n \t  "}, {"sha": "fd528141d07269a4839982a5fe680f368ba6c032", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=094fe153c47e21f0c332ad277babde2858600ab4", "patch": "@@ -2798,6 +2798,8 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n       tree elts;\n       tree baseref = build1 (INDIRECT_REF, type, base);\n \n+      from_array = 0;\n+\n       for (elts = CONSTRUCTOR_ELTS (init); elts; elts = TREE_CHAIN (elts))\n \t{\n \t  tree elt = TREE_VALUE (elts);\n@@ -2853,10 +2855,14 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \n   /* Now, default-initialize any remaining elements.  We don't need to\n      do that if a) the type does not need constructing, or b) we've\n-     already initialized all the elements.  */\n-  if (TYPE_NEEDS_CONSTRUCTING (type)\n-      && !(TREE_CODE (maxindex) == INTEGER_CST\n-\t   && num_initialized_elts == TREE_INT_CST_LOW (maxindex) + 1))\n+     already initialized all the elements.\n+\n+     We do need to keep going if we're copying an array.  */\n+\n+  if (from_array\n+      || (TYPE_NEEDS_CONSTRUCTING (type)\n+\t  && !(TREE_CODE (maxindex) == INTEGER_CST\n+\t       && num_initialized_elts == TREE_INT_CST_LOW (maxindex) + 1)))\n     {\n       /* If the ITERATOR is equal to -1, then we don't have to loop;\n \t we've already initialized all the elements.  */"}, {"sha": "21401898da9cdc2771420ec7de0e9a42526c4787", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe153c47e21f0c332ad277babde2858600ab4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=094fe153c47e21f0c332ad277babde2858600ab4", "patch": "@@ -1294,9 +1294,15 @@ is_overloaded_fn (x)\n      tree x;\n {\n   /* XXX A baselink is also considered an overloaded function.\n-     As is a placeholder from push_class_decls.  */\n+     As is a placeholder from push_class_decls.\n+     As is an expression like X::f.  */\n   if (TREE_CODE (x) == TREE_LIST)\n     {\n+      if (TREE_PURPOSE (x) == error_mark_node)\n+\t{\n+\t  x = TREE_VALUE (x);\n+\t  my_friendly_assert (TREE_CODE (x) == TREE_LIST, 981121);\n+\t}\n       my_friendly_assert (TREE_CODE (TREE_PURPOSE (x)) == TREE_VEC\n \t\t\t  || TREE_CODE (TREE_PURPOSE (x)) == IDENTIFIER_NODE,\n \t\t\t  388);"}]}