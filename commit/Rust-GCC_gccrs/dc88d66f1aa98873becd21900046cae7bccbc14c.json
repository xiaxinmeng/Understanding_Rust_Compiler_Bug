{"sha": "dc88d66f1aa98873becd21900046cae7bccbc14c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM4OGQ2NmYxYWE5ODg3M2JlY2QyMTkwMDA0NmNhZTdiY2NiYzE0Yw==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2004-06-09T19:04:56Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2004-06-09T19:04:56Z"}, "message": "ctype support.\n\n2004-06-09  Frank Ch. Eigler  <fche@redhat.com>\n\n\tctype support.\n\t* configure.in: Look for ctype header and glibc implementation.\n\t* mf-hooks2.c (__ctype_{b,toupper,tolower}_loc): Sample ctype\n\tarray hooks for glibc 2.3.\n\t* mf-runtime.h.in: Wrap them.\n\t* mf-runtime.c (__mf_init): Leave marker regarding other ctype\n\timplementations.\n\t* testsuite/libmudflap.c/pass47-frag.c: New test.\n\t* configure, config.h.in: Regenerated.\n\nFrom-SVN: r82848", "tree": {"sha": "45d762f48cc30af98123706913cfa76316d87f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d762f48cc30af98123706913cfa76316d87f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc88d66f1aa98873becd21900046cae7bccbc14c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc88d66f1aa98873becd21900046cae7bccbc14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc88d66f1aa98873becd21900046cae7bccbc14c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc88d66f1aa98873becd21900046cae7bccbc14c/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e5b7cfaabe3016b8fdbdb58306797198348aec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5b7cfaabe3016b8fdbdb58306797198348aec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5b7cfaabe3016b8fdbdb58306797198348aec8"}], "stats": {"total": 216, "additions": 213, "deletions": 3}, "files": [{"sha": "2bcf83d7656e02c29b1c6abe11b4d968921468c2", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -1,3 +1,15 @@\n+2004-06-09  Frank Ch. Eigler  <fche@redhat.com>\n+\n+\tctype support.\n+\t* configure.in: Look for ctype header and glibc implementation.\n+\t* mf-hooks2.c (__ctype_{b,toupper,tolower}_loc): Sample ctype\n+\tarray hooks for glibc 2.3.\n+\t* mf-runtime.h.in: Wrap them.\n+\t* mf-runtime.c (__mf_init): Leave marker regarding other ctype\n+\timplementations.\n+\t* testsuite/libmudflap.c/pass47-frag.c: New test.\n+\t* configure, config.h.in: Regenerated.\n+\n 2004-06-04  Frank Ch. Eigler  <fche@redhat.com>\n \n \tPortability improvements, e.g., libmudflap/15293."}, {"sha": "bdcd239e59c2ca926fd6340967995ca670c3e8ea", "filename": "libmudflap/config.h.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfig.h.in?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -6,6 +6,9 @@\n /* Define to 1 if you have the `backtrace_symbols' function. */\n #undef HAVE_BACKTRACE_SYMBOLS\n \n+/* Define to 1 if you have the <ctype.h> header file. */\n+#undef HAVE_CTYPE_H\n+\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n@@ -108,6 +111,15 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n+/* Define to 1 if you have the `__ctype_b_loc' function. */\n+#undef HAVE___CTYPE_B_LOC\n+\n+/* Define to 1 if you have the `__ctype_tolower_loc' function. */\n+#undef HAVE___CTYPE_TOLOWER_LOC\n+\n+/* Define to 1 if you have the `__ctype_toupper_loc' function. */\n+#undef HAVE___CTYPE_TOUPPER_LOC\n+\n /* Name of package */\n #undef PACKAGE\n "}, {"sha": "0f49ab9eee2d9093d425dd726588ce609044a7d4", "filename": "libmudflap/configure", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -3428,8 +3428,9 @@ done\n \n \n \n+\n for ac_header in stdint.h execinfo.h signal.h dlfcn.h \\\n-  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h\n+  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -3835,6 +3836,93 @@ fi\n done\n \n \n+\n+\n+\n+for ac_func in __ctype_b_loc __ctype_tolower_loc __ctype_toupper_loc\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+#line $LINENO \"configure\"\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+         { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n cat >conftest.$ac_ext <<_ACEOF\n #line $LINENO \"configure\"\n /* confdefs.h.  */\n@@ -4672,7 +4760,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4675 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4763 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?"}, {"sha": "6e03ed5bbbb86b94b441b2e58755b1e3aa2ae7d0", "filename": "libmudflap/configure.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure.in?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -63,7 +63,7 @@ AC_TRY_COMPILE([\n enable_shared=no])\n \n AC_CHECK_HEADERS(stdint.h execinfo.h signal.h dlfcn.h \\\n-  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h)\n+  netdb.h sys/ipc.h sys/sem.h sys/shm.h sys/wait.h sys/socket.h ctype.h)\n AC_CHECK_FUNCS(backtrace backtrace_symbols gettimeofday signal)\n \n dnl Check for 64-bit stdio calls related to Large File Support\n@@ -72,6 +72,9 @@ AC_CHECK_FUNCS(fopen64 fseeko64 ftello64 stat64)\n dnl Check for nonstandard functions\n AC_CHECK_FUNCS(strnlen memrchr strncpy memmem sethostname)\n \n+dnl Check for glibc ctype functions\n+AC_CHECK_FUNCS(__ctype_b_loc __ctype_tolower_loc __ctype_toupper_loc)\n+\n AC_TRY_COMPILE([#include <sys/types.h>\n #include <sys/ipc.h>\n #include <sys/sem.h>],[union semun foo;], [mf_have_semun=1], [mf_have_semun=0])"}, {"sha": "ff08d42ef7610414bc1b899a1b8ae46e0c1b0c58", "filename": "libmudflap/mf-hooks2.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-hooks2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-hooks2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-hooks2.c?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -63,6 +63,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <errno.h>\n #include <limits.h>\n #include <time.h>\n+#include <ctype.h>\n #include <dirent.h>\n #ifdef HAVE_SYS_SOCKET_H\n #include <sys/socket.h>\n@@ -1643,3 +1644,78 @@ WRAPPER2(int, shmdt, const void *shmaddr)\n \n \n #endif /* HAVE_SYS_IPC/SEM/SHM_H */\n+\n+\n+\n+/* ctype stuff.  This is host-specific by necessity, as the arrays\n+   that is used by most is*()/to*() macros are implementation-defined.  */\n+\n+/* GLIBC 2.3 */\n+#ifdef HAVE___CTYPE_B_LOC\n+WRAPPER2(unsigned short **, __ctype_b_loc, void)\n+{\n+  static unsigned short * last_buf = (void *) 0;\n+  static unsigned short ** last_ptr = (void *) 0;\n+  unsigned short ** ptr = (unsigned short **) __ctype_b_loc ();\n+  unsigned short * buf = * ptr;\n+  if (ptr != last_ptr)\n+    {\n+      /* XXX: unregister last_ptr? */\n+      last_ptr = ptr;\n+      __mf_register (last_ptr, sizeof(last_ptr), __MF_TYPE_STATIC, \"ctype_b_loc **\");\n+    }\n+  if (buf != last_buf)\n+    {\n+      last_buf = buf;\n+      __mf_register ((void *) (last_buf - 128), 384 * sizeof(unsigned short), __MF_TYPE_STATIC,\n+                     \"ctype_b_loc []\");\n+    }\n+  return ptr;\n+}\n+#endif\n+\n+#ifdef HAVE___CTYPE_TOUPPER_LOC\n+WRAPPER2(int **, __ctype_toupper_loc, void)\n+{\n+  static int * last_buf = (void *) 0;\n+  static int ** last_ptr = (void *) 0;\n+  int ** ptr = (int **) __ctype_toupper_loc ();\n+  int * buf = * ptr;\n+  if (ptr != last_ptr)\n+    {\n+      /* XXX: unregister last_ptr? */\n+      last_ptr = ptr;\n+      __mf_register (last_ptr, sizeof(last_ptr), __MF_TYPE_STATIC, \"ctype_toupper_loc **\");\n+    }\n+  if (buf != last_buf)\n+    {\n+      last_buf = buf;\n+      __mf_register ((void *) (last_buf - 128), 384 * sizeof(int), __MF_TYPE_STATIC,\n+                     \"ctype_toupper_loc []\");\n+    }\n+  return ptr;\n+}\n+#endif\n+\n+#ifdef HAVE___CTYPE_TOLOWER_LOC\n+WRAPPER2(int **, __ctype_tolower_loc, void)\n+{\n+  static int * last_buf = (void *) 0;\n+  static int ** last_ptr = (void *) 0;\n+  int ** ptr = (int **) __ctype_tolower_loc ();\n+  int * buf = * ptr;\n+  if (ptr != last_ptr)\n+    {\n+      /* XXX: unregister last_ptr? */\n+      last_ptr = ptr;\n+      __mf_register (last_ptr, sizeof(last_ptr), __MF_TYPE_STATIC, \"ctype_tolower_loc **\");\n+    }\n+  if (buf != last_buf)\n+    {\n+      last_buf = buf;\n+      __mf_register ((void *) (last_buf - 128), 384 * sizeof(int), __MF_TYPE_STATIC,\n+                     \"ctype_tolower_loc []\");\n+    }\n+  return ptr;\n+}\n+#endif"}, {"sha": "19e9fe28cc281542bb500d5a746712cf6cf5c33b", "filename": "libmudflap/mf-runtime.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-runtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-runtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.c?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -63,6 +63,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <sys/types.h>\n #include <signal.h>\n #include <errno.h>\n+#include <ctype.h>\n \n #include \"mf-runtime.h\"\n #include \"mf-impl.h\"\n@@ -685,6 +686,11 @@ __wrap_main (int argc, char* argv[])\n       __mf_register (stdin,  sizeof (*stdin),  __MF_TYPE_STATIC, \"stdin\");\n       __mf_register (stdout, sizeof (*stdout), __MF_TYPE_STATIC, \"stdout\");\n       __mf_register (stderr, sizeof (*stderr), __MF_TYPE_STATIC, \"stderr\");\n+\n+      /* Make some effort to register ctype.h static arrays.  */\n+      /* XXX: e.g., on Solaris, may need to register __ctype, _ctype, __ctype_mask, __toupper, etc. */\n+      /* On modern Linux GLIBC, these are thread-specific and changeable, and are dealt\n+         with in mf-hooks2.c.  */\n     }\n \n #ifdef PIC"}, {"sha": "7b0467b5e5653b3318cdc3510eb157c3e5a5ed5e", "filename": "libmudflap/mf-runtime.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-runtime.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Fmf-runtime.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.h.in?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -177,6 +177,9 @@ extern int __mf_set_options (const char *opts);\n #pragma redefine_extname shmctl __mfwrap_shmctl\n #pragma redefine_extname shmat __mfwrap_shmat\n #pragma redefine_extname shmdt __mfwrap_shmdt\n+#pragma redefine_extname __ctype_b_loc __mfwrap___ctype_b_loc\n+#pragma redefine_extname __ctype_toupper_loc __mfwrap___ctype_toupper_loc\n+#pragma redefine_extname __ctype_tolower_loc __mfwrap___ctype_tolower_loc\n \n /* Disable glibc macros.  */\n #define __NO_STRING_INLINES"}, {"sha": "9e4ac50ef3fed3783c906e6371dbb069da67be19", "filename": "libmudflap/testsuite/libmudflap.c/pass47-frag.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc88d66f1aa98873becd21900046cae7bccbc14c/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass47-frag.c?ref=dc88d66f1aa98873becd21900046cae7bccbc14c", "patch": "@@ -0,0 +1,10 @@\n+#include <stdlib.h>\n+#include <ctype.h>\n+\n+int main ()\n+{\n+  char* buf = \"hello\"; \n+  return ! ((toupper (buf[0]) == 'H' && toupper ('z') == 'Z' &&\n+             tolower (buf[4]) == 'o' && tolower ('X') == 'x' &&\n+             isdigit (buf[3])) == 0 && isalnum ('4'));\n+}"}]}