{"sha": "5fca7b666313db331730a5c90e3c64b0e1402af9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjYTdiNjY2MzEzZGIzMzE3MzBhNWM5MGUzYzY0YjBlMTQwMmFmOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-03-25T23:37:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-25T23:37:13Z"}, "message": "re PR target/70120 ([aarch64] -g causes Assembler messages: Error: unaligned opcodes detected in executable segment)\n\n2016-03-25  Richard Henderson  <rth@redhat.com>\n\n\tPR target/70120\n\t* config/aarch64/aarch64.c (aarch64_asm_output_pool_epilogue): New.\n\t* config/aarch64/aarch64-protos.h: Declare it.\n\t* config/aarch64/aarch64.h (ASM_OUTPUT_POOL_EPILOGUE): New.\n\n\tPR target/70120\n\t* gcc.target/aarch64/pr70120-1.c: New.\n\t* gcc.target/aarch64/pr70120-2.c: New.\n\t* gcc.target/aarch64/pr70120-3.c: New.\n\nFrom-SVN: r234486", "tree": {"sha": "14ef8e8afe597205dcd22402e659b00e620572b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ef8e8afe597205dcd22402e659b00e620572b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fca7b666313db331730a5c90e3c64b0e1402af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fca7b666313db331730a5c90e3c64b0e1402af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fca7b666313db331730a5c90e3c64b0e1402af9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fca7b666313db331730a5c90e3c64b0e1402af9/comments", "author": null, "committer": null, "parents": [{"sha": "d7796e23a4a973afdc45897de4932c1e1bd3e898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7796e23a4a973afdc45897de4932c1e1bd3e898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7796e23a4a973afdc45897de4932c1e1bd3e898"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "af2bda6c19cf9199ac4de4aefbbd8d93b08b6d54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -1,3 +1,10 @@\n+2016-03-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/70120\n+\t* config/aarch64/aarch64.c (aarch64_asm_output_pool_epilogue): New.\n+\t* config/aarch64/aarch64-protos.h: Declare it.\n+\t* config/aarch64/aarch64.h (ASM_OUTPUT_POOL_EPILOGUE): New.\n+\n 2016-03-25  Alan Modra  <amodra@gmail.com>\n \n \tPR target/70052"}, {"sha": "58c9d0d01d8eb273eb6bbb167177107dcd1b4b9d", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -429,4 +429,8 @@ bool extract_base_offset_in_addr (rtx mem, rtx *base, rtx *offset);\n bool aarch64_operands_ok_for_ldpstp (rtx *, bool, enum machine_mode);\n bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, enum machine_mode);\n extern bool aarch64_nopcrelative_literal_loads;\n+\n+extern void aarch64_asm_output_pool_epilogue (FILE *, const char *,\n+\t\t\t\t\t      tree, HOST_WIDE_INT);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "b7086dd46679f3acdf494afbd21bdf1eb1bb1c34", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -5555,6 +5555,18 @@ aarch64_select_rtx_section (machine_mode mode,\n   return default_elf_select_rtx_section (mode, x, align);\n }\n \n+/* Implement ASM_OUTPUT_POOL_EPILOGUE.  */\n+void\n+aarch64_asm_output_pool_epilogue (FILE *f, const char *, tree,\n+\t\t\t\t  HOST_WIDE_INT offset)\n+{\n+  /* When using per-function literal pools, we must ensure that any code\n+     section is aligned to the minimal instruction length, lest we get\n+     errors from the assembler re \"unaligned instructions\".  */\n+  if ((offset & 3) && aarch64_can_use_per_function_literal_pools_p ())\n+    ASM_OUTPUT_ALIGN (f, 2);\n+}\n+\n /* Costs.  */\n \n /* Helper function for rtx cost calculation.  Strip a shift expression"}, {"sha": "7750d1c060d9946021ca799a4293ba9e5b6c046a", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -928,4 +928,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"asm_cpu_spec\",\t\tASM_CPU_SPEC }\n \n+#define ASM_OUTPUT_POOL_EPILOGUE  aarch64_asm_output_pool_epilogue\n+\n #endif /* GCC_AARCH64_H */"}, {"sha": "a5f548f68dbe4e7fc277f4790c475849df8d4546", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -1,3 +1,10 @@\n+2016-03-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/70120\n+\t* gcc.target/aarch64/pr70120-1.c: New.\n+\t* gcc.target/aarch64/pr70120-2.c: New.\n+\t* gcc.target/aarch64/pr70120-3.c: New.\n+\n 2016-03-25  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/62212"}, {"sha": "31a5e949b117f227191a388f2757a257ec09331a", "filename": "gcc/testsuite/gcc.target/aarch64/pr70120-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-1.c?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fschedule-insns -mno-pc-relative-literal-loads -g\" } */\n+\n+typedef short v32u16 __attribute__ ((vector_size (32)));\n+typedef int v32u32 __attribute__ ((vector_size (32)));\n+typedef long v32u64 __attribute__ ((vector_size (32)));\n+typedef __int128 u128;\n+typedef __int128 v32u128 __attribute__ ((vector_size (32)));\n+\n+int\n+foo(int u16_0, int u32_0, int u64_0, u128 u128_0, int u16_1, int u32_1, int u64_1, u128 u128_1, v32u16 v32u16_0, v32u32 v32u32_0, v32u64 v32u64_0, v32u128 v32u128_0, v32u16 v32u16_1, v32u32 v32u32_1, v32u64 v32u64_1, v32u128 v32u128_1)\n+{\n+  v32u32_1 ^= (v32u32) ~ v32u64_0;\n+  v32u32_1 %= (v32u32) - v32u16_1 | 1;\n+  v32u16_1 -= (v32u16) v32u16_1;\n+  v32u64_0 *= (v32u64){~ u128_0, v32u16_1[5], v32u16_0[15], v32u32_1[4]};\n+  v32u16_0 /= (v32u16){0x574c, ~u128_1, v32u128_1[0], u64_1, v32u64_0[1], v32u64_1[2], 0, 0x8ce6, u128_1, 0x5e69} |1;\n+  return v32u16_0[0] + v32u16_0[6] + v32u16_0[8] + v32u16_0[9] + v32u32_0[0] + v32u32_0[1] + v32u32_0[2] + v32u32_0[3] + v32u32_0[4] + v32u32_0[6] + v32u64_0[0] + v32u64_0[2] + v32u64_0[3] + v32u128_0[0] + v32u128_0[1] + v32u32_1[0] + v32u32_1[2] + v32u64_1[2] + v32u64_1[3] + v32u128_1[1];\n+}"}, {"sha": "0110224754be9f211c925331327a6029f050f96b", "filename": "gcc/testsuite/gcc.target/aarch64/pr70120-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-2.c?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -freorder-functions -g3 -mcmodel=large\" } */\n+\n+typedef short v32u16 __attribute__ ((vector_size (32)));\n+typedef int v32u32 __attribute__ ((vector_size (32)));\n+typedef long v32u64 __attribute__ ((vector_size (32)));\n+typedef __int128 u128;\n+typedef __int128 v32u128 __attribute__ ((vector_size (32)));\n+\n+int\n+foo (int u16_0, int u32_0, int u64_0, u128 u128_0, int u16_1, int u32_1, v32u16 v32u16_0, v32u32 v32u32_0, v32u64 v32u64_0, v32u128 v32u128_0, v32u16 v32u16_1, v32u32 v32u32_1, v32u64 v32u64_1, v32u128 v32u128_1)\n+{\n+  u128_0 <<= 0x6c;\n+  v32u16_1 %= (v32u16) { 1, 64, 0xf294, 0, u32_1, v32u32_1[6], ~u128_0, 0x2912, v32u32_0[2]} | 1;\n+  v32u16_0 ^= (v32u16){-v32u16_1[11], -u32_1, 64, ~u128_0, 0, 1, 64, ~u64_0, 0};\n+  return u16_0 + u32_0 + u16_1 + v32u16_0[0] + v32u32_0[1] + v32u32_0[2] + v32u32_0[4] + v32u32_0[6] + v32u64_0[0] + v32u64_0[1] + v32u64_0[2] + v32u64_0[3] + v32u128_0[0] + v32u128_0[1] + v32u16_1[0] + v32u32_1[7] + v32u64_1[0] + v32u64_1[1] + v32u64_1[2] + v32u64_1[3] + v32u128_1[0] + v32u128_1[1];\n+}"}, {"sha": "2b70df72a98dc724a93c5611538c2bc77c5118fb", "filename": "gcc/testsuite/gcc.target/aarch64/pr70120-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fca7b666313db331730a5c90e3c64b0e1402af9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr70120-3.c?ref=5fca7b666313db331730a5c90e3c64b0e1402af9", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffunction-sections -mno-pc-relative-literal-loads -g3\" } */\n+\n+typedef unsigned short u16;\n+typedef unsigned short v32u16 __attribute__((vector_size(32)));\n+typedef unsigned int u32;\n+typedef unsigned int v32u32 __attribute__((vector_size(32)));\n+typedef unsigned long long u64;\n+typedef unsigned long long v32u64 __attribute__((vector_size(32)));\n+typedef unsigned __int128 u128;\n+typedef unsigned __int128 v32u128 __attribute__((vector_size(32)));\n+u128 __attribute__((noinline, noclone))\n+foo(u16 u16_0, u32 u32_0, u64 u64_0, u128 u128_0, u16 u16_1, u32 u32_1, u64 u64_1, u128 u128_1, v32u16 v32u16_0, v32u32 v32u32_0, v32u64 v32u64_0, v32u128 v32u128_0, v32u16 v32u16_1, v32u32 v32u32_1, v32u64 v32u64_1, v32u128 v32u128_1)\n+{\n+ v32u128_1 %= (v32u128)v32u32_1 | 1;\n+ u16_1 /= ((u32)~(u128)(((u128)0xa1 << 0))) | 1;\n+ v32u32_0 += (v32u32){(u16)v32u16_1[9], (u16)v32u16_1[14], (u32)-v32u32_0[7], ((u64)(u32)(((u128)0x43bc59e9 << 0))), ((u32)(u32)(((u128)0x14a47ba8f240a6 << 0))), (u128)v32u128_1[1], (u16)u16_1, (u64)-u64_1};\n+ return u16_0 + u32_0 + u64_0 + u128_0 + u16_1 + u32_1 + u64_1 + u128_1 + v32u16_0[0] + v32u16_0[1] + v32u16_0[2] + v32u16_0[3] + v32u16_0[4] + v32u16_0[5] + v32u16_0[6] + v32u16_0[7] + v32u16_0[8] + v32u16_0[9] + v32u16_0[10] + v32u16_0[11] + v32u16_0[12] + v32u16_0[13] + v32u16_0[14] + v32u16_0[15] + v32u32_0[0] + v32u32_0[1] + v32u32_0[2] + v32u32_0[3] + v32u32_0[4] + v32u32_0[5] + v32u32_0[6] + v32u32_0[7] + v32u64_0[0] + v32u64_0[1] + v32u64_0[2] + v32u64_0[3] + v32u128_0[0] + v32u128_0[1] + v32u16_1[0] + v32u16_1[1] + v32u16_1[2] + v32u16_1[3] + v32u16_1[4] + v32u16_1[5] + v32u16_1[6] + v32u16_1[7] + v32u16_1[8] + v32u16_1[9] + v32u16_1[10] + v32u16_1[11] + v32u16_1[12] + v32u16_1[13] + v32u16_1[14] + v32u16_1[15] + v32u32_1[0] + v32u32_1[1] + v32u32_1[2] + v32u32_1[3] + v32u32_1[4] + v32u32_1[5] + v32u32_1[6] + v32u32_1[7] + v32u64_1[0] + v32u64_1[1] + v32u64_1[2] + v32u64_1[3] + v32u128_1[0] + v32u128_1[1];\n+}\n+int main()\n+{\n+}"}]}