{"sha": "f241bf89479214a544e12446b52eb9d89869aebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0MWJmODk0NzkyMTRhNTQ0ZTEyNDQ2YjUyZWI5ZDg5ODY5YWViZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2004-06-23T05:54:21Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-06-23T05:54:21Z"}, "message": "rs6000.md (*insvsi_internal5/6): New patterns.\n\n2004-06-22  Eric Christopher  <echristo@redhat.com>\n\n\t* config/rs6000/rs6000.md (*insvsi_internal5/6): New patterns.\n\nFrom-SVN: r83538", "tree": {"sha": "66cda118bdff6ebf53aa27683128e087c5db9e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66cda118bdff6ebf53aa27683128e087c5db9e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f241bf89479214a544e12446b52eb9d89869aebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f241bf89479214a544e12446b52eb9d89869aebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f241bf89479214a544e12446b52eb9d89869aebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f241bf89479214a544e12446b52eb9d89869aebe/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "649b2789d1a5e18be4bc10e1c35d81b405cf2b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649b2789d1a5e18be4bc10e1c35d81b405cf2b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649b2789d1a5e18be4bc10e1c35d81b405cf2b05"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "b4e46c69b5bce360d413e9dbd3e7e1db640798aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f241bf89479214a544e12446b52eb9d89869aebe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f241bf89479214a544e12446b52eb9d89869aebe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f241bf89479214a544e12446b52eb9d89869aebe", "patch": "@@ -1,3 +1,7 @@\n+2004-06-22  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/rs6000/rs6000.md (*insvsi_internal5/6): New patterns.\n+\n 2004-06-22  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* cfghooks.c (make_forwarder_block): Decrement count on fallthru edge"}, {"sha": "af8551b8abf4c90516caf706b2fe6ea407a7f9db", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f241bf89479214a544e12446b52eb9d89869aebe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f241bf89479214a544e12446b52eb9d89869aebe/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f241bf89479214a544e12446b52eb9d89869aebe", "patch": "@@ -3036,6 +3036,45 @@\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n+;; combine patterns for rlwimi\n+(define_insn \"*insvsi_internal5\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (ior:SI (and:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n+                        (match_operand:SI 1 \"mask_operand\" \"i\"))\n+                (and:SI (lshiftrt:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+                                     (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+                        (match_operand:SI 5 \"mask_operand\" \"i\"))))]\n+  \"TARGET_POWERPC && INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n+  \"*\n+{\n+ int me = extract_ME(operands[5]);\n+ int mb = extract_MB(operands[5]);\n+ operands[4] = GEN_INT(32 - INTVAL(operands[2]));\n+ operands[2] = GEN_INT(mb);\n+ operands[1] = GEN_INT(me);\n+ return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+}\"\n+  [(set_attr \"type\" \"insert_word\")])\n+\n+(define_insn \"*insvsi_internal6\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (ior:SI (and:SI (lshiftrt:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n+                                     (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+                        (match_operand:SI 5 \"mask_operand\" \"i\"))\n+                (and:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n+                        (match_operand:SI 1 \"mask_operand\" \"i\"))))]\n+  \"TARGET_POWERPC && INTVAL(operands[1]) == ~INTVAL(operands[5])\"\n+  \"*\n+{\n+ int me = extract_ME(operands[5]);\n+ int mb = extract_MB(operands[5]);\n+ operands[4] = GEN_INT(32 - INTVAL(operands[2]));\n+ operands[2] = GEN_INT(mb);\n+ operands[1] = GEN_INT(me);\n+ return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+}\"\n+  [(set_attr \"type\" \"insert_word\")])\n+\n (define_insn \"insvdi\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"gpc_reg_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n@@ -8051,13 +8090,11 @@\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      if (GET_CODE (operands[1]) == MEM\n-\t  && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[1], 0),\n-\t\t\treload_completed || reload_in_progress)\n-\t      || GET_CODE (XEXP (operands[1], 0)) == REG\n-\t      || GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n+      if (offsettable_memref_p (operands[1])\n+\t  || (GET_CODE (operands[1]) == MEM\n+\t      && (GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n \t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC))\n+\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)))\n \t{\n \t  /* If the low-address word is used in the address, we must load\n \t     it last.  Otherwise, load it first.  Note that we cannot have\n@@ -8093,13 +8130,11 @@\n \t    }\n \t}\n     case 2:\n-      if (GET_CODE (operands[0]) == MEM\n-          && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[0], 0),\n-\t\t    reload_completed || reload_in_progress)\n-\t      || GET_CODE (XEXP (operands[0], 0)) == REG\n-    \t      || GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n+      if (offsettable_memref_p (operands[0])\n+\t  || (GET_CODE (operands[0]) == MEM\n+\t      && (GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n \t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n-\t      || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC))\n+\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)))\n \treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n       else\n \t{"}]}