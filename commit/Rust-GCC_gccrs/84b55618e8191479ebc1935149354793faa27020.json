{"sha": "84b55618e8191479ebc1935149354793faa27020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiNTU2MThlODE5MTQ3OWViYzE5MzUxNDkzNTQ3OTNmYWEyNzAyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T22:19:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T22:19:16Z"}, "message": "(struct arg_data): New field unsignedp.\n\n(expand_call): Handle PROMOTE_FUNCTION_ARGS and PROMOTE_FUNCTION_RETURN.\n\nFrom-SVN: r2264", "tree": {"sha": "869450d23d988a31f914c17af182e159e1cd286b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869450d23d988a31f914c17af182e159e1cd286b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b55618e8191479ebc1935149354793faa27020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b55618e8191479ebc1935149354793faa27020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b55618e8191479ebc1935149354793faa27020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b55618e8191479ebc1935149354793faa27020/comments", "author": null, "committer": null, "parents": [{"sha": "a53e14c093434c3829a60dd450db4741205b10eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53e14c093434c3829a60dd450db4741205b10eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53e14c093434c3829a60dd450db4741205b10eb"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "5e4d7462e339ba81c4d06ffee061aa6d9a94d16b", "filename": "gcc/calls.c", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b55618e8191479ebc1935149354793faa27020/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b55618e8191479ebc1935149354793faa27020/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=84b55618e8191479ebc1935149354793faa27020", "patch": "@@ -50,6 +50,9 @@ struct arg_data\n      EXPR_LIST if the arg is to be copied into multiple different\n      registers.  */\n   rtx reg;\n+  /* If REG was promoted from the actual mode of the argument expression,\n+     indicates whether the promotion is sign- or zero-extended.  */\n+  int unsignedp;\n   /* Number of registers to use.  0 means put the whole arg in registers.\n      Also 0 if not passed in registers.  */\n   int partial;\n@@ -854,6 +857,7 @@ expand_call (exp, target, ignore)\n   for (p = actparms, argpos = 0; p; p = TREE_CHAIN (p), i += inc, argpos++)\n     {\n       tree type = TREE_TYPE (TREE_VALUE (p));\n+      enum machine_mode mode;\n \n       args[i].tree_value = TREE_VALUE (p);\n \n@@ -914,16 +918,31 @@ expand_call (exp, target, ignore)\n \t}\n #endif\n \n-      args[i].reg = FUNCTION_ARG (args_so_far, TYPE_MODE (type), type,\n+      mode = TYPE_MODE (type);\n+\n+#ifdef PROMOTE_FUNCTION_ARGS\n+      /* Compute the mode in which the arg is actually to be extended to.  */\n+      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n+\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n+\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n+\t  || TREE_CODE (type) == OFFSET_TYPE)\n+\t{\n+\t  int unsignedp = TREE_UNSIGNED (type);\n+\t  PROMOTE_MODE (mode, unsignedp, type);\n+\t  args[i].unsignedp = unsignedp;\n+\t}\n+#endif\n+\n+      args[i].reg = FUNCTION_ARG (args_so_far, mode, type,\n \t\t\t\t  argpos < n_named_args);\n #ifdef FUNCTION_ARG_PARTIAL_NREGS\n       if (args[i].reg)\n \targs[i].partial\n-\t  = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, TYPE_MODE (type), type,\n+\t  = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, mode, type,\n \t\t\t\t\targpos < n_named_args);\n #endif\n \n-      args[i].pass_on_stack = MUST_PASS_IN_STACK (TYPE_MODE (type), type);\n+      args[i].pass_on_stack = MUST_PASS_IN_STACK (mode, type);\n \n       /* If FUNCTION_ARG returned an (expr_list (nil) FOO), it means that\n \t we are to pass this arg in the register(s) designated by FOO, but\n@@ -1385,6 +1404,8 @@ expand_call (exp, target, ignore)\n   for (i = 0; i < num_actuals; i++)\n     if (args[i].reg != 0 && ! args[i].pass_on_stack)\n       {\n+\tenum machine_mode mode;\n+\n \treg_parm_seen = 1;\n \n \tif (args[i].value == 0)\n@@ -1398,6 +1419,15 @@ expand_call (exp, target, ignore)\n \t       but PCC has one, so this will avoid some problems.  */\n \t    emit_queue ();\n \t  }\n+\n+\t/* If we are to promote the function arg to a wider mode,\n+\t   do it now.  */\n+\tmode = (GET_CODE (args[i].reg) == EXPR_LIST \n+\t\t? GET_MODE (XEXP (args[i].reg, 0)) : GET_MODE (args[i].reg));\n+\n+\tif (GET_MODE (args[i].value) != mode)\n+\t  args[i].value = convert_to_mode (mode, args[i].value,\n+\t\t\t\t\t   args[i].unsignedp);\n       }\n \n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n@@ -1666,7 +1696,8 @@ expand_call (exp, target, ignore)\n \t\t\t expr_size (exp),\n \t\t\t TYPE_ALIGN (TREE_TYPE (exp)) / BITS_PER_UNIT);\n     }\n-  else if (target && GET_MODE (target) == TYPE_MODE (TREE_TYPE (exp)))\n+  else if (target && GET_MODE (target) == TYPE_MODE (TREE_TYPE (exp))\n+\t   && GET_MODE (target) == GET_MODE (valreg))\n     /* TARGET and VALREG cannot be equal at this point because the latter\n        would not have REG_FUNCTION_VALUE_P true, while the former would if\n        it were referring to the same register.\n@@ -1677,6 +1708,30 @@ expand_call (exp, target, ignore)\n   else\n     target = copy_to_reg (valreg);\n \n+#ifdef PROMOTE_FUNCTION_RETURN\n+  /* If we promoted this return value, make the proper SUBREG.  */\n+  if (GET_MODE (target) != TYPE_MODE (TREE_TYPE (exp)))\n+    {\n+      enum machine_mode mode = GET_MODE (target);\n+      int unsignedp = TREE_UNSIGNED (TREE_TYPE (exp));\n+\n+      if (TREE_CODE (TREE_TYPE (exp)) == INTEGER_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == ENUMERAL_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == BOOLEAN_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == CHAR_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == REAL_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == POINTER_TYPE\n+\t  || TREE_CODE (TREE_TYPE (exp)) == OFFSET_TYPE)\n+\t{\n+\t  PROMOTE_MODE (mode, unsignedp, TREE_TYPE (exp));\n+\t}\n+\n+      target = gen_rtx (SUBREG, TYPE_MODE (TREE_TYPE (exp)), target, 0);\n+      SUBREG_PROMOTED_VAR_P (target) = 1;\n+      SUBREG_PROMOTED_UNSIGNED_P (target) = unsignedp;\n+    }\n+#endif\n+\n   /* Perform all cleanups needed for the arguments of this call\n      (i.e. destructors in C++).  */\n   expand_cleanups_to (old_cleanups);"}]}