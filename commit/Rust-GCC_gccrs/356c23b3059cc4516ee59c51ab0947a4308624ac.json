{"sha": "356c23b3059cc4516ee59c51ab0947a4308624ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2YzIzYjMwNTljYzQ1MTZlZTU5YzUxYWIwOTQ3YTQzMDg2MjRhYw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2009-07-09T18:15:22Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2009-07-09T18:15:22Z"}, "message": "haifa-sched.c (insn_finishes_cycle_p): New static function.\n\n\t* haifa-sched.c (insn_finishes_cycle_p): New static function.\n        (max_issue): Use it.\n        * sched-int.h (struct sched_info: insn_finishes_block_p): New\n        scheduler hook.\n        * sched-rgn.c (rgn_insn_finishes_block_p): Implement it.\n        (region_sched_info): Update.\n        * sched-ebb.c (ebb_sched_info): Update.\n        * modulo-sched.c (sms_sched_info): Update.\n\t* sel-sched-ir.c (sched_sel_haifa_sched_info): Update.\n\nFrom-SVN: r149427", "tree": {"sha": "3cb914bdfcf5212d19e7a8855b5c111e763388ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cb914bdfcf5212d19e7a8855b5c111e763388ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356c23b3059cc4516ee59c51ab0947a4308624ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356c23b3059cc4516ee59c51ab0947a4308624ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356c23b3059cc4516ee59c51ab0947a4308624ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356c23b3059cc4516ee59c51ab0947a4308624ac/comments", "author": null, "committer": null, "parents": [{"sha": "5223c588529b44e0538b2b99e48c2cce6f96818b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5223c588529b44e0538b2b99e48c2cce6f96818b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5223c588529b44e0538b2b99e48c2cce6f96818b"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "01dff9e73c6a78709c2230d721dcd2b72518c59a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -1,3 +1,15 @@\n+2009-07-09  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+        \n+\t* haifa-sched.c (insn_finishes_cycle_p): New static function.\n+        (max_issue): Use it.\n+        * sched-int.h (struct sched_info: insn_finishes_block_p): New\n+        scheduler hook.\n+        * sched-rgn.c (rgn_insn_finishes_block_p): Implement it.\n+        (region_sched_info): Update.\n+        * sched-ebb.c (ebb_sched_info): Update.\n+        * modulo-sched.c (sms_sched_info): Update.\n+\t* sel-sched-ir.c (sched_sel_haifa_sched_info): Update.\n+\n 2009-07-09  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* varasm.c (build_constant_desc): Don't share RTL in pool entries."}, {"sha": "66be7e5d94b6ffb6a30beacf438ca17bc4b2e919", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -1990,6 +1990,23 @@ move_insn (rtx insn, rtx last, rtx nt)\n   SCHED_GROUP_P (insn) = 0;  \n }\n \n+/* Return true if scheduling INSN will finish current clock cycle.  */\n+static bool\n+insn_finishes_cycle_p (rtx insn)\n+{\n+  if (SCHED_GROUP_P (insn))\n+    /* After issuing INSN, rest of the sched_group will be forced to issue\n+       in order.  Don't make any plans for the rest of cycle.  */\n+    return true;\n+\n+  /* Finishing the block will, apparently, finish the cycle.  */\n+  if (current_sched_info->insn_finishes_block_p\n+      && current_sched_info->insn_finishes_block_p (insn))\n+    return true;\n+\n+  return false;\n+}\n+\n /* The following structure describe an entry of the stack of choices.  */\n struct choice_entry\n {\n@@ -2168,7 +2185,10 @@ max_issue (struct ready_list *ready, int privileged_n, state_t state,\n \t  delay = state_transition (state, insn);\n \t  if (delay < 0)\n \t    {\n-\t      if (state_dead_lock_p (state))\n+\t      if (state_dead_lock_p (state)\n+\t\t  || insn_finishes_cycle_p (insn))\n+ \t\t/* We won't issue any more instructions in the next\n+ \t\t   choice_state.  */\n \t\ttop->rest = 0;\n \t      else\n \t\ttop->rest--;"}, {"sha": "dbe77d9c54cbae6c126cc10139b31f2fb7a50a79", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -270,6 +270,7 @@ static struct haifa_sched_info sms_sched_info =\n   NULL,\n   sms_print_insn,\n   NULL,\n+  NULL, /* insn_finishes_block_p */\n   NULL, NULL,\n   NULL, NULL,\n   0, 0,"}, {"sha": "b3e6c7a726550a109aa192b8c5fb3b0436005041", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -286,6 +286,7 @@ static struct haifa_sched_info ebb_sched_info =\n   rank,\n   ebb_print_insn,\n   ebb_contributes_to_priority,\n+  NULL, /* insn_finishes_block_p */\n \n   NULL, NULL,\n   NULL, NULL,"}, {"sha": "aa5007ba8633a3a20f0d8f7e4dd36729e796c71a", "filename": "gcc/sched-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -570,6 +570,10 @@ struct haifa_sched_info\n      calculations.  */\n   int (*contributes_to_priority) (rtx, rtx);\n \n+  /* Return true if scheduling insn (passed as the parameter) will trigger\n+     finish of scheduling current block.  */\n+  bool (*insn_finishes_block_p) (rtx);\n+\n   /* The boundaries of the set of insns to be scheduled.  */\n   rtx prev_head, next_tail;\n "}, {"sha": "a913faa217a8569923c6b27422bfbce387aa0fbb", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -2338,6 +2338,19 @@ static const struct sched_deps_info_def rgn_const_sel_sched_deps_info =\n     0, 0, 0\n   };\n \n+/* Return true if scheduling INSN will trigger finish of scheduling\n+   current block.  */\n+static bool\n+rgn_insn_finishes_block_p (rtx insn)\n+{\n+  if (INSN_BB (insn) == target_bb\n+      && sched_target_n_insns + 1 == target_n_insns)\n+    /* INSN is the last not-scheduled instruction in the current block.  */\n+    return true;\n+\n+  return false;\n+}\n+\n /* Used in schedule_insns to initialize current_sched_info for scheduling\n    regions (or single basic blocks).  */\n \n@@ -2350,6 +2363,7 @@ static const struct haifa_sched_info rgn_const_sched_info =\n   rgn_rank,\n   rgn_print_insn,\n   contributes_to_priority,\n+  rgn_insn_finishes_block_p,\n \n   NULL, NULL,\n   NULL, NULL,"}, {"sha": "2932800f569fe90bf55b0607520c48857e8b71f0", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c23b3059cc4516ee59c51ab0947a4308624ac/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=356c23b3059cc4516ee59c51ab0947a4308624ac", "patch": "@@ -5427,6 +5427,7 @@ static struct haifa_sched_info sched_sel_haifa_sched_info =\n   NULL, /* rgn_rank */\n   sel_print_insn, /* rgn_print_insn */\n   contributes_to_priority,\n+  NULL, /* insn_finishes_block_p */\n \n   NULL, NULL,\n   NULL, NULL,"}]}