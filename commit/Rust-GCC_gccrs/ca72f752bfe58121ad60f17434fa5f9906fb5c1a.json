{"sha": "ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3MmY3NTJiZmU1ODEyMWFkNjBmMTc0MzRmYTVmOTkwNmZiNWMxYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-10-17T13:25:38Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-10-17T13:25:38Z"}, "message": "(copy_loop_body, case JUMP_INSN): Don't abort if invert_exp fails.\n\n(copy_loop_body, case JUMP_INSN): Don't abort if invert_exp\nfails.  Instead, redirect the jump around an unconditional branch.\n\nFrom-SVN: r8282", "tree": {"sha": "82a7b21fa9e5dbc15e1a06dcb24ccc2014a519ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a7b21fa9e5dbc15e1a06dcb24ccc2014a519ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca72f752bfe58121ad60f17434fa5f9906fb5c1a/comments", "author": null, "committer": null, "parents": [{"sha": "6782074d401945dd4aab38addde10a447cb44767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6782074d401945dd4aab38addde10a447cb44767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6782074d401945dd4aab38addde10a447cb44767"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "7d4e2d9c29714b29c93bdc552dc7714755ae721e", "filename": "gcc/unroll.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca72f752bfe58121ad60f17434fa5f9906fb5c1a/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca72f752bfe58121ad60f17434fa5f9906fb5c1a/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "patch": "@@ -1746,12 +1746,32 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t\t case to be a branch past the end of the loop, and the\n \t\t original jump label case to fall_through.  */\n \n-\t      if (! invert_exp (pattern, copy)\n-\t\t  || ! redirect_exp (&pattern,\n-\t\t\t\t     map->label_map[CODE_LABEL_NUMBER\n-\t\t\t\t\t\t    (JUMP_LABEL (insn))],\n-\t\t\t\t     exit_label, copy))\n-\t\tabort ();\n+\t      if (invert_exp (pattern, copy))\n+\t\t{\n+\t\t  if (! redirect_exp (&pattern,\n+\t\t\t\t      map->label_map[CODE_LABEL_NUMBER\n+\t\t\t\t\t\t     (JUMP_LABEL (insn))],\n+\t\t\t\t      exit_label, copy))\n+\t\t    abort ();\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  rtx jmp;\n+\t\t  rtx lab = gen_label_rtx ();\n+\t\t  /* Can't do it by reversing the jump (probably becasue we\n+\t\t     couln't reverse the conditions), so emit a new\n+\t\t     jump_insn after COPY, and redirect the jump around\n+\t\t     that.  */\n+\t\t  jmp = emit_jump_insn_after (gen_jump (exit_label), copy);\n+\t\t  jmp = emit_barrier_after (jmp);\n+\t\t  emit_label_after (lab, jmp);\n+\t\t  LABEL_NUSES (lab) = 0;\n+\t\t  if (! redirect_exp (&pattern,\n+\t\t\t\t      map->label_map[CODE_LABEL_NUMBER\n+\t\t\t\t\t\t     (JUMP_LABEL (insn))],\n+\t\t\t\t      lab, copy))\n+\t\t    abort ();\n+\t\t}\n \t    }\n \t  \n #ifdef HAVE_cc0"}]}