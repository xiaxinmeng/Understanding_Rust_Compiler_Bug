{"sha": "a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "node_id": "C_kwDOANBUbNoAKGEyY2ZmOWU5YWYxNWIxNzlmZjdhMmM3ZTE0N2U4OGVjOGNlNTI5MzY", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-09-14T08:49:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:43Z"}, "message": "[Ada] CUDA: use binder to generate kernel-registration code\n\nCompiling CUDA code requires compiling code for the host (= CPU) and for\nthe device (= GPU). Device code is embedded into the host code and must\nbe registered with the CUDA runtime by the host.\n\nThe original approach we took for registering CUDA kernels was to\ngenerate the registration-code on a unit basis, i.e. each unit took care\nof registering its own kernels. Unfortunately, this makes linking\nkernels and device functions that belong to different units much harder.\n\nWe thus rework this approach in order to have GNAT generate kernel names\nin ALI files. The binder reads the ALI files and generates kernel\nregistration code for each of the kernels found in ALI files.\n\ngcc/ada/\n\n\t* ali.adb: Introduce new 'K' line in ALI files, used to\n\trepresent CUDA kernel entries.\n\t* ali.ads: Create new CUDA_Kernels table, which contains entries\n\tof type CUDA_Kernel_Record. Each CUDA_Kernel_Record corresponds\n\tto a K line in an ali file.\n\t* bindgen.adb: Introduce new Gen_CUDA_Init procedure in the\n\tbinder, which generates CUDA kernel registration code.\n\t* gnat_cuda.adb: Move Get_CUDA_Kernels spec to package spec to\n\tmake it available to bindgen.adb.\n\t* gnat_cuda.ads: Likewise.\n\t* lib-writ.adb: Introduce new Output_CUDA_Symbols procedure,\n\twhich generates one 'K' line in the ALI file per visible CUDA\n\tkernel.\n\t* opt.ads: Introduce Enable_CUDA_Expansion option, triggered by\n\tusing the -gnatd_c flag.\n\t* switch-b.adb: Likewise.\n\t* switch-c.adb: Likewise.", "tree": {"sha": "875ff769e9ec405dc2eaca642428b1b63b5009d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875ff769e9ec405dc2eaca642428b1b63b5009d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3584606f5cb9bfc717a19e96731bc35ea11a40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3584606f5cb9bfc717a19e96731bc35ea11a40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3584606f5cb9bfc717a19e96731bc35ea11a40e"}], "stats": {"total": 265, "additions": 259, "deletions": 6}, "files": [{"sha": "a5fba5dffd1bf73113fde3a4e0168f5a8126f427", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -252,6 +252,7 @@ package body ALI is\n       'E' | --  external\n       'G' | --  invocation graph\n       'I' | --  interrupt\n+      'K' | --  CUDA kernels\n       'L' | --  linker option\n       'M' | --  main program\n       'N' | --  notes\n@@ -269,7 +270,7 @@ package body ALI is\n \n       --  Still available:\n \n-      'B' | 'F' | 'H' | 'J' | 'K' | 'O' | 'Q' => False);\n+      'B' | 'F' | 'H' | 'J' | 'O' | 'Q' => False);\n \n    ------------------------------\n    -- Add_Invocation_Construct --\n@@ -1743,12 +1744,14 @@ package body ALI is\n       ALIs.Table (Id) := (\n         Afile                        => F,\n         Compile_Errors               => False,\n+        First_CUDA_Kernel            => CUDA_Kernels.Last + 1,\n         First_Interrupt_State        => Interrupt_States.Last + 1,\n         First_Sdep                   => No_Sdep_Id,\n         First_Specific_Dispatching   => Specific_Dispatching.Last + 1,\n         First_Unit                   => No_Unit_Id,\n         GNATprove_Mode               => False,\n         Invocation_Graph_Encoding    => No_Encoding,\n+        Last_CUDA_Kernel             => CUDA_Kernels.Last,\n         Last_Interrupt_State         => Interrupt_States.Last,\n         Last_Sdep                    => No_Sdep_Id,\n         Last_Specific_Dispatching    => Specific_Dispatching.Last,\n@@ -1915,6 +1918,24 @@ package body ALI is\n          C := Getc;\n       end loop A_Loop;\n \n+      --  Acquire 'K' lines if present\n+\n+      Check_Unknown_Line;\n+\n+      while C = 'K' loop\n+         if Ignore ('K') then\n+            Skip_Line;\n+\n+         else\n+            Skip_Space;\n+            CUDA_Kernels.Append ((Kernel_Name => Get_Name));\n+            ALIs.Table (Id).Last_CUDA_Kernel := CUDA_Kernels.Last;\n+            Skip_Eol;\n+         end if;\n+\n+         C := Getc;\n+      end loop;\n+\n       --  Acquire P line\n \n       Check_Unknown_Line;"}, {"sha": "a5af75e84cf2d97f71cd67fc3d6e059323cf81fb", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -46,6 +46,9 @@ package ALI is\n    type ALI_Id is range 0 .. 99_999_999;\n    --  Id values used for ALIs table entries\n \n+   type CUDA_Kernel_Id is range 0 .. 99_999_999;\n+   --  Id values used for CUDA_Kernel table entries\n+\n    type Unit_Id is range 0 .. 99_999_999;\n    --  Id values used for Unit table entries\n \n@@ -254,6 +257,12 @@ package ALI is\n       Restrictions : Restrictions_Info;\n       --  Restrictions information reconstructed from R lines\n \n+      First_CUDA_Kernel : CUDA_Kernel_Id;\n+      Last_CUDA_Kernel  : CUDA_Kernel_Id'Base;\n+      --  These point to the first and last entries in the CUDA_Kernels table\n+      --  for this unit. If there are no entries, First_CUDA_Kernel =\n+      --  Last_CUDA_Kernel + 1.\n+\n       First_Interrupt_State : Interrupt_State_Id;\n       Last_Interrupt_State  : Interrupt_State_Id'Base;\n       --  These point to the first and last entries in the interrupt state\n@@ -290,6 +299,27 @@ package ALI is\n      Table_Increment      => 200,\n      Table_Name           => \"ALIs\");\n \n+   ---------------------------\n+   -- CUDA Kernels Table --\n+   ---------------------------\n+\n+   --  An entry is made in this table for each K (CUDA Kernel) line\n+   --  encountered in the input ALI file. The First/Last_CUDA_Kernel_Id\n+   --  fields of the ALI file entry show the range of entries defined\n+   --  within a particular ALI file.\n+\n+   type CUDA_Kernel_Record is record\n+      Kernel_Name : Name_Id;\n+   end record;\n+\n+   package CUDA_Kernels is new Table.Table (\n+     Table_Component_Type => CUDA_Kernel_Record,\n+     Table_Index_Type     => CUDA_Kernel_Id'Base,\n+     Table_Low_Bound      => CUDA_Kernel_Id'First,\n+     Table_Initial        => 100,\n+     Table_Increment      => 200,\n+     Table_Name           => \"Cuda_Kernels\");\n+\n    ----------------\n    -- Unit Table --\n    ----------------"}, {"sha": "35587087178c827aa5e7031942ed5dbaf2fd2c36", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -317,6 +317,9 @@ package body Bindgen is\n    procedure Gen_CodePeer_Wrapper;\n    --  For CodePeer, generate wrapper which calls user-defined main subprogram\n \n+   procedure Gen_CUDA_Init;\n+   --  When CUDA registration code is needed.\n+\n    procedure Gen_Elab_Calls (Elab_Order : Unit_Id_Array);\n    --  Generate sequence of elaboration calls\n \n@@ -1239,6 +1242,137 @@ package body Bindgen is\n       Bind_Env_String_Built := True;\n    end Gen_Bind_Env_String;\n \n+   -------------------\n+   -- Gen_CUDA_Init --\n+   -------------------\n+\n+   procedure Gen_CUDA_Init is\n+      Unit_Name : constant String :=\n+        Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n+      Unit : constant String :=\n+        Unit_Name (Unit_Name'First .. Unit_Name'Last - 2);\n+   begin\n+      if not Enable_CUDA_Expansion then\n+         return;\n+      end if;\n+\n+      WBI (\"\");\n+      WBI (\"   \");\n+\n+      WBI (\"   function CUDA_Register_Function\");\n+      WBI (\"      (Fat_Binary_Handle : System.Address;\");\n+      WBI (\"       Func : System.Address;\");\n+      WBI (\"       Kernel_Name : Interfaces.C.Strings.chars_ptr;\");\n+      WBI (\"       Kernel_Name_2 : Interfaces.C.Strings.chars_ptr;\");\n+      WBI (\"       Minus_One : Integer;\");\n+      WBI (\"       Nullptr1 : System.Address;\");\n+      WBI (\"       Nullptr2 : System.Address;\");\n+      WBI (\"       Nullptr3 : System.Address;\");\n+      WBI (\"       Nullptr4 : System.Address;\");\n+      WBI (\"       Nullptr5 : System.Address) return Boolean;\");\n+      WBI (\"   pragma Import\");\n+      WBI (\"     (Convention => C,\");\n+      WBI (\"      Entity => CUDA_Register_Function,\");\n+      WBI (\"      External_Name => \"\"__cudaRegisterFunction\"\");\");\n+      WBI (\"\");\n+      WBI (\"   function CUDA_Register_Fat_Binary\");\n+      WBI (\"     (Fat_Binary : System.Address)\");\n+      WBI (\"      return System.Address;\");\n+      WBI (\"    pragma Import\");\n+      WBI (\"      (Convention => C,\");\n+      WBI (\"       Entity => CUDA_Register_Fat_Binary,\");\n+      WBI (\"       External_Name => \"\"__cudaRegisterFatBinary\"\");\");\n+      WBI (\"\");\n+      WBI (\"   function CUDA_Register_Fat_Binary_End\");\n+      WBI (\"     (Fat_Binary : System.Address) return Boolean;\");\n+      WBI (\"   pragma Import\");\n+      WBI (\"     (Convention => C,\");\n+      WBI (\"      Entity => CUDA_Register_Fat_Binary_End,\");\n+      WBI (\"      External_Name => \"\"__cudaRegisterFatBinaryEnd\"\");\");\n+      WBI (\"\");\n+      WBI (\"   type Fatbin_Wrapper is record\");\n+      WBI (\"      Magic   : Interfaces.C.int;\");\n+      WBI (\"      Version : Interfaces.C.int;\");\n+      WBI (\"      Data    : System.Address;\");\n+      WBI (\"      Filename_Or_Fatbins : System.Address;\");\n+      WBI (\"   end record;\");\n+      WBI (\"\");\n+      WBI (\"   Fat_Binary : System.Address;\");\n+      WBI (\"   pragma Import\");\n+      WBI (\"      (Convention    => C,\");\n+      WBI (\"       Entity        => Fat_Binary,\");\n+      WBI (\"       External_Name => \"\"_binary_\" & Unit & \"_fatbin_start\"\");\");\n+      WBI (\"\");\n+      WBI (\"   Wrapper : Fatbin_Wrapper :=\");\n+      WBI (\"     (16#466243b1#,\");\n+      WBI (\"      1,\");\n+      WBI (\"      Fat_Binary'Address,\");\n+      WBI (\"      System.Null_Address);\");\n+      WBI (\"\");\n+      WBI (\"   Fat_Binary_Handle : System.Address :=\");\n+      WBI (\"     CUDA_Register_Fat_Binary (Wrapper'Address);\");\n+      WBI (\"\");\n+\n+      for K in CUDA_Kernels.First .. CUDA_Kernels.Last loop\n+         declare\n+            K_String : constant String := CUDA_Kernel_Id'Image (K);\n+            N : constant String :=\n+              K_String (K_String'First + 1 .. K_String'Last);\n+            Kernel_Symbol : constant String := \"Kernel_\" & N;\n+            --  K_Symbol is a unique identifier used to derive all symbol names\n+            --  related to kernel K.\n+\n+            Kernel_Addr : constant String := Kernel_Symbol & \"_Addr\";\n+            --  Kernel_Addr is the name of the symbol representing the address\n+            --  of the host-side procedure of the kernel. The address is\n+            --  pragma-imported and then used while registering the kernel with\n+            --  the CUDA runtime.\n+            Kernel_String : constant String := Kernel_Symbol & \"_String\";\n+            --  Kernel_String is the name of the C-string containing the name\n+            --  of the kernel. It is used for registering the kernel with the\n+            --  CUDA runtime.\n+            Kernel_Name : constant String :=\n+               Get_Name_String (CUDA_Kernels.Table (K).Kernel_Name);\n+            --  Kernel_Name is the name of the kernel, after package expansion.\n+\n+         begin\n+            --  Import host-side kernel address.\n+            WBI (\"   \" & Kernel_Addr & \" : constant System.Address;\");\n+            WBI (\"   pragma Import\");\n+            WBI (\"      (Convention    => C,\");\n+            WBI (\"       Entity        => \" & Kernel_Addr & \",\");\n+            WBI (\"       External_Name => \"\"\" & Kernel_Name & \"\"\");\");\n+            WBI (\"\");\n+\n+            --  Generate C-string containing name of kernel.\n+            WBI\n+              (\"   \" & Kernel_String & \" : Interfaces.C.Strings.Chars_Ptr :=\");\n+            WBI (\"    Interfaces.C.Strings.New_Char_Array (\"\"\"\n+                  & Kernel_Name\n+                  & \"\"\");\");\n+            WBI (\"\");\n+\n+            --  Generate call to CUDA runtime to register function.\n+            WBI (\"   CUDA_Register\" & N & \" : Boolean :=\");\n+            WBI (\"     CUDA_Register_Function (\");\n+            WBI (\"       Fat_Binary_Handle, \");\n+            WBI (\"       \" & Kernel_Addr & \",\");\n+            WBI (\"       \" & Kernel_String & \",\");\n+            WBI (\"       \" & Kernel_String & \",\");\n+            WBI (\"       -1,\");\n+            WBI (\"       System.Null_Address,\");\n+            WBI (\"       System.Null_Address,\");\n+            WBI (\"       System.Null_Address,\");\n+            WBI (\"       System.Null_Address,\");\n+            WBI (\"       System.Null_Address);\");\n+            WBI (\"\");\n+         end;\n+      end loop;\n+\n+      WBI (\"   CUDA_End : Boolean := \");\n+      WBI (\"      CUDA_Register_Fat_Binary_End(Fat_Binary_Handle);\");\n+   end Gen_CUDA_Init;\n+\n    --------------------------\n    -- Gen_CodePeer_Wrapper --\n    --------------------------\n@@ -2353,6 +2487,11 @@ package body Bindgen is\n          WBI (\"with System.Secondary_Stack;\");\n       end if;\n \n+      if Enable_CUDA_Expansion then\n+         WBI (\"with Interfaces.C;\");\n+         WBI (\"with Interfaces.C.Strings;\");\n+      end if;\n+\n       Resolve_Binder_Options (Elab_Order);\n \n       --  Generate standard with's\n@@ -2502,6 +2641,8 @@ package body Bindgen is\n            Get_Main_Name & \"\"\");\");\n       end if;\n \n+      Gen_CUDA_Init;\n+\n       --  Generate version numbers for units, only if needed. Be very safe on\n       --  the condition.\n "}, {"sha": "4bb8c5aa3a7b0f4b80b1019da14d7c3caaab6412", "filename": "gcc/ada/gnat_cuda.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fgnat_cuda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fgnat_cuda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -118,11 +118,6 @@ package body GNAT_CUDA is\n    --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n    --  does not contain such entities.\n \n-   function Get_CUDA_Kernels (Pack_Id : Entity_Id) return Elist_Id;\n-   --  Returns an Elist of all procedures marked with pragma CUDA_Global that\n-   --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n-   --  does not contain such procedures.\n-\n    procedure Remove_CUDA_Device_Entities (Pack_Id : Entity_Id);\n    --  Removes all entities marked with the CUDA_Device pragma from package\n    --  Pack_Id. Must only be called when compiling for the host."}, {"sha": "e756162fa01f133566f70cc43f020050933fc892", "filename": "gcc/ada/gnat_cuda.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fgnat_cuda.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fgnat_cuda.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.ads?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -92,4 +92,9 @@ package GNAT_CUDA is\n    --  - Empty content of CUDA_Global procedures.\n    --  - Remove declarations of CUDA_Device entities.\n \n+   function Get_CUDA_Kernels (Pack_Id : Entity_Id) return Elist_Id;\n+   --  Returns an Elist of all procedures marked with pragma CUDA_Global that\n+   --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n+   --  does not contain such procedures.\n+\n end GNAT_CUDA;"}, {"sha": "556df9a7b73dcf561803f0acb37e4c2214cf139b", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -30,13 +30,15 @@ with Debug;          use Debug;\n with Einfo;          use Einfo;\n with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n+with Elists;         use Elists;\n with Errout;         use Errout;\n with Fname;          use Fname;\n with Fname.UF;       use Fname.UF;\n with Lib.Util;       use Lib.Util;\n with Lib.Xref;       use Lib.Xref;\n with Nlists;         use Nlists;\n with Gnatvsn;        use Gnatvsn;\n+with GNAT_CUDA;      use GNAT_CUDA;\n with Opt;            use Opt;\n with Osint;          use Osint;\n with Osint.C;        use Osint.C;\n@@ -268,6 +270,10 @@ package body Lib.Writ is\n       --  Collect with lines for entries in the context clause of the given\n       --  compilation unit, Cunit.\n \n+      procedure Output_CUDA_Symbols (Unit_Num : Unit_Number_Type);\n+      --  Output CUDA symbols, so that the rest of the toolchain may know what\n+      --  symbols need registering with the CUDA runtime.\n+\n       procedure Write_Unit_Information (Unit_Num : Unit_Number_Type);\n       --  Write out the library information for one unit for which code is\n       --  generated (includes unit line and with lines).\n@@ -386,6 +392,41 @@ package body Lib.Writ is\n          end loop;\n       end Collect_Withs;\n \n+      -------------------------\n+      -- Output_CUDA_Symbols --\n+      -------------------------\n+\n+      procedure Output_CUDA_Symbols (Unit_Num : Unit_Number_Type) is\n+         Unit_Id     : constant Node_Id := Unit (Cunit (Unit_Num));\n+         Spec_Id     : Node_Id;\n+         Kernels     : Elist_Id;\n+         Kernel_Elm  : Elmt_Id;\n+         Kernel      : Entity_Id;\n+      begin\n+         if not Enable_CUDA_Expansion then\n+            return;\n+         end if;\n+         Spec_Id := (if Nkind (Unit_Id) = N_Package_Body\n+           then Corresponding_Spec (Unit_Id)\n+           else Defining_Unit_Name (Specification (Unit_Id)));\n+         Kernels := Get_CUDA_Kernels (Spec_Id);\n+         if No (Kernels) then\n+            return;\n+         end if;\n+\n+         Kernel_Elm := First_Elmt (Kernels);\n+         while Present (Kernel_Elm) loop\n+            Kernel := Node (Kernel_Elm);\n+\n+            Write_Info_Initiate ('K');\n+            Write_Info_Char (' ');\n+            Write_Info_Name (Chars (Kernel));\n+            Write_Info_Terminate;\n+            Next_Elmt (Kernel_Elm);\n+         end loop;\n+\n+      end Output_CUDA_Symbols;\n+\n       ----------------------------\n       -- Write_Unit_Information --\n       ----------------------------\n@@ -1166,6 +1207,14 @@ package body Lib.Writ is\n          Write_Info_Terminate;\n       end loop;\n \n+      --  Output CUDA Kernel lines\n+\n+      for Unit in Units.First .. Last_Unit loop\n+         if Present (Cunit (Unit)) then\n+            Output_CUDA_Symbols (Unit);\n+         end if;\n+      end loop;\n+\n       --  Output parameters ('P') line\n \n       Write_Info_Initiate ('P');"}, {"sha": "e747397b9fc4aea82f646e526942c929e7872341", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -527,6 +527,12 @@ package Opt is\n \n    --  WARNING: There is a matching C declaration of this variable in fe.h\n \n+   Enable_CUDA_Expansion : Boolean := False;\n+   --  GNAT, GNATBIND\n+   --  Set to True to enable CUDA host expansion:\n+   --    - Removal of CUDA_Global and CUDA_Device symbols\n+   --    - Generation of kernel registration code in packages\n+\n    Error_Msg_Line_Length : Nat := 0;\n    --  GNAT\n    --  Records the error message line length limit. If this is set to zero,"}, {"sha": "10feb23483345d4ce505fa138a459fcf84afaf09", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -158,6 +158,9 @@ package body Switch.B is\n \n                elsif Underscore then\n                   Set_Underscored_Debug_Flag (C);\n+                  if Debug_Flag_Underscore_C then\n+                     Enable_CUDA_Expansion := True;\n+                  end if;\n                   Underscore := False;\n \n                --    letter"}, {"sha": "522cdf658edf15578b6a9478d0df6264db2833ab", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cff9e9af15b179ff7a2c7e147e88ec8ce52936/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=a2cff9e9af15b179ff7a2c7e147e88ec8ce52936", "patch": "@@ -390,6 +390,9 @@ package body Switch.C is\n                      elsif Underscore then\n                         Set_Underscored_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd_\" & C);\n+                        if Debug_Flag_Underscore_C then\n+                           Enable_CUDA_Expansion := True;\n+                        end if;\n \n                      --  Normal flag\n "}]}