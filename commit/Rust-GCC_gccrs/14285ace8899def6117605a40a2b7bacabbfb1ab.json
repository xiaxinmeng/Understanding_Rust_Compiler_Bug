{"sha": "14285ace8899def6117605a40a2b7bacabbfb1ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQyODVhY2U4ODk5ZGVmNjExNzYwNWE0MGEyYjdiYWNhYmJmYjFhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-15T16:50:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-15T16:50:44Z"}, "message": "varasm.c (merge_weak): Error for any weakening after definition.\n\n        * varasm.c (merge_weak): Error for any weakening after definition.\n        Adjust weakening after use warning to catch more cases.\n        (assemble_alias): Set TREE_USED and TREE_ASM_WRITTEN consistently.\n        * config/alpha/alpha.c (alpha_encode_section_info): Do not abort.\n\n        * gcc.dg/weak-5.c (vfoo1c): No warning here.\n        (vfoo1f): Warning here.\n        (vfoo1l): Don't redefine the alias.\n\nFrom-SVN: r53491", "tree": {"sha": "179f7a6574d28237262fa17ca5626ccf632f8315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179f7a6574d28237262fa17ca5626ccf632f8315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14285ace8899def6117605a40a2b7bacabbfb1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14285ace8899def6117605a40a2b7bacabbfb1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14285ace8899def6117605a40a2b7bacabbfb1ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14285ace8899def6117605a40a2b7bacabbfb1ab/comments", "author": null, "committer": null, "parents": [{"sha": "d2aa36f5d96ab2a31788516e05b4c1f3cc0503d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2aa36f5d96ab2a31788516e05b4c1f3cc0503d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2aa36f5d96ab2a31788516e05b4c1f3cc0503d6"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "9b74f2cc298d4af79061e9034b74d72f75036191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14285ace8899def6117605a40a2b7bacabbfb1ab", "patch": "@@ -1,3 +1,10 @@\n+2002-05-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (merge_weak): Error for any weakening after definition.\n+\tAdjust weakening after use warning to catch more cases.\n+\t(assemble_alias): Set TREE_USED and TREE_ASM_WRITTEN consistently.\n+\t* config/alpha/alpha.c (alpha_encode_section_info): Do not abort.\n+\n Wed May 15 10:38:27 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* invoke.texi (-malign-double): Re-add lost warning.\n@@ -11,7 +18,7 @@ Wed May 15 10:38:27 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* flags.h (flag_reorder_functions): Declare.\n \t* function.c (prepare_function_start): Initialize frequnecy.\n-\t* params.def (HOT_BB_COUNT_FRACTION, HOT_BB_FREQUENCY_FRACTION): New paramters.\n+\t* params.def (HOT_BB_COUNT_FRACTION, HOT_BB_FREQUENCY_FRACTION): New.\n \t* Makefile.in (predict.o): Add dependency on target.h and params.h\n \t* defaults.h (HOT_TEXT_SECTION_NAME,\n \tUNLIKELY_EXECUTED_TEXT_SECTION_NAME): New macros."}, {"sha": "281e526cfe6afae50eaaac00fe30f1ab420be192", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=14285ace8899def6117605a40a2b7bacabbfb1ab", "patch": "@@ -1678,7 +1678,11 @@ alpha_encode_section_info (decl, first)\n       XSTR (XEXP (DECL_RTL (decl), 0), 0) = string;\n     }\n   else if (symbol_str[0] == '@')\n-    abort ();\n+    {\n+      /* We're hosed.  This can happen when the user adds a weak\n+\t attribute after rtl generation.  They should have gotten\n+\t a warning about unspecified behaviour from varasm.c.  */\n+    }\n }\n \n /* legitimate_address_p recognizes an RTL expression that is a valid"}, {"sha": "5676c95265e30dffe3afff7905d5b5bd5eff71c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14285ace8899def6117605a40a2b7bacabbfb1ab", "patch": "@@ -1,3 +1,9 @@\n+2002-05-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/weak-5.c (vfoo1c): No warning here.\n+\t(vfoo1f): Warning here.\n+\t(vfoo1l): Don't redefine the alias.\n+\n 2002-05-14  Jason Merrill  <jason@redhat.com>, Alexandre Oliva  <aoliva@redhat.com>\n \n \t* g++.dg/init/pm1.C: New test."}, {"sha": "e531b27beebcc658a05b794cc7f94b795e52e45a", "filename": "gcc/testsuite/gcc.dg/weak-5.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c?ref=14285ace8899def6117605a40a2b7bacabbfb1ab", "patch": "@@ -44,7 +44,7 @@ void * foo1c (void)\n {\n   return (void *)&vfoo1c;\n }\n-extern int vfoo1c __attribute__((weak)); /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+extern int vfoo1c __attribute__((weak));\n \n \n extern int vfoo1d __attribute__((weak));\n@@ -68,7 +68,7 @@ void * foo1f (void)\n {\n   return (void *)&vfoo1f;\n }\n-extern int vfoo1f __attribute__((weak));\n+extern int vfoo1f __attribute__((weak)); /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n \n \n extern int vfoo1g;\n@@ -111,6 +111,4 @@ int vfoo1k = 1;\n \n \n int vfoox1l = 1;\n-extern int vfoo1l __attribute__((alias (\"vfoox1l\")));\n extern int vfoo1l __attribute__((weak, alias (\"vfoox1l\")));\n-"}, {"sha": "05a8ada095b35d8ae30366a07a5a10358fa86999", "filename": "gcc/varasm.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14285ace8899def6117605a40a2b7bacabbfb1ab/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=14285ace8899def6117605a40a2b7bacabbfb1ab", "patch": "@@ -4830,14 +4830,6 @@ merge_weak (newdecl, olddecl)\n   if (DECL_WEAK (newdecl) == DECL_WEAK (olddecl))\n     return;\n \n-  if (SUPPORTS_WEAK\n-      && DECL_WEAK (newdecl) \n-      && DECL_EXTERNAL (newdecl) && DECL_EXTERNAL (olddecl)\n-      && (TREE_CODE (olddecl) != VAR_DECL || ! TREE_STATIC (olddecl))\n-      && TREE_USED (olddecl)\n-      && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (olddecl)))\n-    warning_with_decl (newdecl, \"weak declaration of `%s' after first use results in unspecified behavior\");\n-\n   if (DECL_WEAK (newdecl))\n     {\n       tree wd;\n@@ -4848,10 +4840,26 @@ merge_weak (newdecl, olddecl)\n \t go back and make it weak.  This error cannot caught in\n \t declare_weak because the NEWDECL and OLDDECL was not yet\n \t been merged; therefore, TREE_ASM_WRITTEN was not set.  */\n-      if (TREE_CODE (olddecl) == FUNCTION_DECL && TREE_ASM_WRITTEN (olddecl))\n+      if (TREE_ASM_WRITTEN (olddecl))\n \terror_with_decl (newdecl, \n \t\t\t \"weak declaration of `%s' must precede definition\");\n-      \n+\n+      /* If we've already generated rtl referencing OLDDECL, we may\n+\t have done so in a way that will not function properly with\n+\t a weak symbol.  */\n+      else if (TREE_USED (olddecl)\n+\t       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (olddecl))\n+\t       /* ??? Not impossible that some platform may generate code\n+\t\t  that doesn't function *at all* with incorrect declaration\n+\t\t  before use.  However, all known at present will assume\n+\t\t  exteral and common symbols are not \"local\".  */\n+\t       /* ??? Probably these exceptions to the rule will just\n+\t\t  confuse users about the true nature of the problem and\n+\t\t  we should warn for *any* use before weakening.  */\n+\t       && ! (DECL_EXTERNAL (olddecl)\n+\t\t     || DECL_COMMON (olddecl)))\n+\twarning_with_decl (newdecl, \"weak declaration of `%s' after first use results in unspecified behavior\");\n+\n       if (SUPPORTS_WEAK)\n \t{\n \t  /* We put the NEWDECL on the weak_decls list at some point.\n@@ -4992,7 +5000,6 @@ assemble_alias (decl, target)\n #else\n   ASM_OUTPUT_DEF (asm_out_file, name, IDENTIFIER_POINTER (target));\n #endif\n-  TREE_ASM_WRITTEN (decl) = 1;\n #else /* !ASM_OUTPUT_DEF */\n #if defined (ASM_OUTPUT_WEAK_ALIAS) || defined (ASM_WEAKEN_DECL)\n   if (! DECL_WEAK (decl))\n@@ -5003,11 +5010,14 @@ assemble_alias (decl, target)\n #else\n   ASM_OUTPUT_WEAK_ALIAS (asm_out_file, name, IDENTIFIER_POINTER (target));\n #endif\n-  TREE_ASM_WRITTEN (decl) = 1;\n #else\n   warning (\"alias definitions not supported in this configuration; ignored\");\n #endif\n #endif\n+\n+  TREE_USED (decl) = 1;\n+  TREE_ASM_WRITTEN (decl) = 1;\n+  TREE_ASM_WRITTEN (DECL_ASSEMBLER_NAME (decl)) = 1;\n }\n \n /* Emit an assembler directive to set symbol for DECL visibility to"}]}