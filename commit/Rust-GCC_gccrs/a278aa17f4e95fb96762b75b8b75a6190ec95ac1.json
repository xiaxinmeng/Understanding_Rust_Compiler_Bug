{"sha": "a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3OGFhMTdmNGU5NWZiOTY3NjJiNzViOGI3NWE2MTkwZWM5NWFjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-13T17:27:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-13T17:27:13Z"}, "message": "tree-vect.h (check_vect): Handle AVX2, remove XOP handling.\n\n\t* gcc.dg/vect/tree-vect.h (check_vect): Handle AVX2,\n\tremove XOP handling.\n\nFrom-SVN: r236216", "tree": {"sha": "4061a59d29f5e444b0ecfcca5630493ecedf4e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4061a59d29f5e444b0ecfcca5630493ecedf4e62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b6435ca5c2933e729e4634f29e39215f2751f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6435ca5c2933e729e4634f29e39215f2751f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6435ca5c2933e729e4634f29e39215f2751f49"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "3858cd462852b7d51ccf0de7b125b826cb7ca44e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/vect/tree-vect.h (check_vect): Handle AVX2,\n+\tremove XOP handling.\n+\n 2016-05-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/atomic-noinline-aux.c: Include stddef.h. Fix"}, {"sha": "21bd1148b4b18f6c5cd2775da69e1cf2b737ea96", "filename": "gcc/testsuite/gcc.dg/vect/tree-vect.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ftree-vect.h?ref=a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "patch": "@@ -32,25 +32,26 @@ check_vect (void)\n   asm volatile (\".long 0x10000484\");\n #elif defined(__i386__) || defined(__x86_64__)\n   {\n-    unsigned int a, b, c, d, want_level, want_c, want_d;\n+    unsigned int a, b, c, d,\n+      want_level, want_b = 0, want_c = 0, want_d = 0;\n \n     /* Determine what instruction set we've been compiled for, and detect\n        that we're running with it.  This allows us to at least do a compile\n        check for, e.g. SSE4.1 when the machine only supports SSE2.  */\n-# ifdef __XOP__\n-    want_level = 0x80000001, want_c = bit_XOP, want_d = 0;\n+#if defined(__AVX2__)\n+    want_level = 7, want_b = bit_AVX2;\n # elif defined(__AVX__)\n-    want_level = 1, want_c = bit_AVX, want_d = 0;\n+    want_level = 1, want_c = bit_AVX;\n # elif defined(__SSE4_1__)\n-    want_level = 1, want_c = bit_SSE4_1, want_d = 0;\n+    want_level = 1, want_c = bit_SSE4_1;\n # elif defined(__SSSE3__)\n-    want_level = 1, want_c = bit_SSSE3, want_d = 0;\n+    want_level = 1, want_c = bit_SSSE3;\n # else\n-    want_level = 1, want_c = 0, want_d = bit_SSE2;\n+    want_level = 1, want_d = bit_SSE2;\n # endif\n \n     if (!__get_cpuid (want_level, &a, &b, &c, &d)\n-\t|| ((c & want_c) | (d & want_d)) == 0)\n+\t|| ((b & want_b) | (c & want_c) | (d & want_d)) == 0)\n       exit (0);\n   }\n #elif defined(__sparc__)"}, {"sha": "71b1c2f02dd712c8b46ca15f88e4754a18ebf609", "filename": "gcc/testsuite/gcc.target/i386/pr61599-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-1.c?ref=a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "patch": "@@ -1,7 +1,7 @@\n /* PR target/61599 */\n-/* { dg-options \"-mcmodel=medium -fdata-sections\" { target lp64 } } */\n-/* { dg-additional-sources pr61599-2.c } */\n /* { dg-do run { target lp64 } } */\n+/* { dg-additional-sources pr61599-2.c } */\n+/* { dg-options \"-mcmodel=medium -fdata-sections\" } */\n \n char a[1*1024*1024*1024];\n char b[1*1024*1024*1024];"}, {"sha": "f0d46020dea153901958f04c946ccb9dcac91591", "filename": "gcc/testsuite/gcc.target/i386/pr61599-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278aa17f4e95fb96762b75b8b75a6190ec95ac1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61599-2.c?ref=a278aa17f4e95fb96762b75b8b75a6190ec95ac1", "patch": "@@ -1,7 +1,8 @@\n /* PR target/61599 */\n-/* With -mcmodel=medium, all the arrays will be treated as large data.  */\n-/* { dg-options \"-mcmodel=medium -fdata-sections\" { target lp64 } } */\n /* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-mcmodel=medium -fdata-sections\" { target lp64 } } */\n+\n+/* With -mcmodel=medium, all the arrays will be treated as large data.  */\n \n extern char a[];\n extern char b[];"}]}