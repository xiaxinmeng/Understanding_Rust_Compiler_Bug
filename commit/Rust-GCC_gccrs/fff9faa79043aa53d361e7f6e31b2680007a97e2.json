{"sha": "fff9faa79043aa53d361e7f6e31b2680007a97e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmOWZhYTc5MDQzYWE1M2QzNjFlN2Y2ZTMxYjI2ODAwMDdhOTdlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-18T15:11:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-18T15:11:46Z"}, "message": "testsuite: Fix up strlenopt-73.c on powerpc [PR99626]\n\nAs mentioned in the testcase as well as in the PR, this testcase relies on\nMOVE_MAX being sufficiently large that the memcpy call is folded early into\nload + store.  Some popular targets define MOVE_MAX to 8 or even 16 (e.g.\nx86_64 or some options on s390x), but many other targets define it to just 4\n(e.g. powerpc 32-bit), or even 2.\n\nThe testcase has already one test routine guarded on one particular target\nwith MOVE_MAX 16 (but does it incorrectly, __i386__ is only defined on\n32-bit x86 and __SIZEOF_INT128__ is only defined on 64-bit targets), this\npatch fixes that, and guards another test that relies on memcpy (, , 8)\nbeing folded that way (which therefore needs MOVE_MAX >= 8) on a couple of\ncommon targets that are known to have such MOVE_MAX.\n\n2021-03-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR testsuite/99626\n\t* gcc.dg/strlenopt-73.c: Ifdef out test_copy_cond_unequal_length_i64\n\ton targets other than x86, aarch64, s390 and 64-bit powerpc.  Use\n\ttest_copy_cond_unequal_length_i128 for __x86_64__ with int128 support\n\trather than __i386__.", "tree": {"sha": "24688ba7bf2041a984c27035362fba70fa3f0970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24688ba7bf2041a984c27035362fba70fa3f0970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff9faa79043aa53d361e7f6e31b2680007a97e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff9faa79043aa53d361e7f6e31b2680007a97e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff9faa79043aa53d361e7f6e31b2680007a97e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff9faa79043aa53d361e7f6e31b2680007a97e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d186c677e4fed6c58c46a6ea4dad9ee0fc9f31f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d186c677e4fed6c58c46a6ea4dad9ee0fc9f31f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d186c677e4fed6c58c46a6ea4dad9ee0fc9f31f1"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "170b66a21b0acc8bf89cc8d7f7c28438fb679772", "filename": "gcc/testsuite/gcc.dg/strlenopt-73.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff9faa79043aa53d361e7f6e31b2680007a97e2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff9faa79043aa53d361e7f6e31b2680007a97e2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-73.c?ref=fff9faa79043aa53d361e7f6e31b2680007a97e2", "patch": "@@ -69,6 +69,13 @@ void test_copy_cond_equal_length (void)\n   T ( 0 ==, 33,  1, (i0 ? a32 : b32) + 32);\n }\n \n+#if defined(__i386__) || defined(__x86_64__) || defined(__aarch64__) \\\n+    || defined(__s390__) || defined(__powerpc64__)\n+\n+/* The following tests assume GCC transforms the memcpy calls into\n+   long long assignments which it does only on targets that define\n+   the MOVE_MAX macro to 8 or higher.  Enable on a set of targets\n+   known to do that.  */\n \n const char a4[16] = \"0123\";\n const char b4[16] = \"3210\";\n@@ -84,12 +91,14 @@ void test_copy_cond_unequal_length_i64 (void)\n   T (0 <, 16, 8, i0 ? a4 + 2 : b4 + 3);\n }\n \n+#endif\n+\n \n-#if __i386__ && __SIZEOF_INT128__ == 16\n+#if defined(__x86_64__) && __SIZEOF_INT128__ == 16\n \n /* The following tests assume GCC transforms the memcpy calls into\n    int128_t assignments which it does only on targets that define\n-   the MOVE_MAX macro to 16.  That's only s390 and i386 with\n+   the MOVE_MAX macro to 16.  That's only s390 and x86_64 with\n    int128_t support.  */\n \n const char a8[32] = \"01234567\";"}]}