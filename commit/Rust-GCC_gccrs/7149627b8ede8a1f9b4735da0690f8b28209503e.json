{"sha": "7149627b8ede8a1f9b4735da0690f8b28209503e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0OTYyN2I4ZWRlOGExZjliNDczNWRhMDY5MGY4YjI4MjA5NTAzZQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2002-08-16T10:32:30Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-08-16T10:32:30Z"}, "message": "Make-lang.in (java-tree-inline.o): New.\n\n2002-07-30  Andrew Haley  <aph@cambridge.redhat.com>\n\n        * Make-lang.in (java-tree-inline.o): New.\n        (JAVA_OBJS): Add java-tree-inline.o.\n        * parse.y (source_end_java_method): Call java_optimize_inline.\n        (java_expand_method_bodies): Save method's tree in\n        DECL_SAVED_TREE.\n        (add_stmt_to_compound): Keep track of the number of statments.\n        * lang.c (java_init): Enable flag_inline_trees.\n        (java_post_options): If flag_inline_functions is on, enable\n        flag_inline_trees instread.\n        (decl_constant_value): New.\n        (java_tree_inlining_walk_subtrees): New.\n        * java-tree.h (DECL_NUM_STMTS): New macro.\n        (java_optimize_inline): Declare.\n        * expr.c (java_expand_expr): Allow a BLOCK to return a value.\n        Handle a LABEL_EXPR.\n        * decl.c (build_result_decl): If we already have a DECL_RESULT\n        don't make another.\n        (dump_function): New.\n        (java_optimize_inline): New.\n        (dump_function): New.\n\nFrom-SVN: r56377", "tree": {"sha": "664000a6e258478f587c0810b5dcd1a729ff2308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664000a6e258478f587c0810b5dcd1a729ff2308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7149627b8ede8a1f9b4735da0690f8b28209503e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7149627b8ede8a1f9b4735da0690f8b28209503e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7149627b8ede8a1f9b4735da0690f8b28209503e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7149627b8ede8a1f9b4735da0690f8b28209503e/comments", "author": null, "committer": null, "parents": [{"sha": "d436bff8d6709d083432a14b8c7ff2fb753d6b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d436bff8d6709d083432a14b8c7ff2fb753d6b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d436bff8d6709d083432a14b8c7ff2fb753d6b2a"}], "stats": {"total": 211, "additions": 198, "deletions": 13}, "files": [{"sha": "9f35084a236d9eca3450809f4576eb0a9c5a7417", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -1,3 +1,26 @@\n+2002-07-30  Andrew Haley  <aph@cambridge.redhat.com>\n+\n+\t* Make-lang.in (java-tree-inline.o): New.\n+\t(JAVA_OBJS): Add java-tree-inline.o.\n+\t* parse.y (source_end_java_method): Call java_optimize_inline.\n+\t(java_expand_method_bodies): Save method's tree in\n+\tDECL_SAVED_TREE.\n+\t(add_stmt_to_compound): Keep track of the number of statments.\n+\t* lang.c (java_init): Enable flag_inline_trees.\n+\t(java_post_options): If flag_inline_functions is on, enable\n+\tflag_inline_trees instread.\n+\t(decl_constant_value): New.\n+\t(java_tree_inlining_walk_subtrees): New.\n+\t* java-tree.h (DECL_NUM_STMTS): New macro.\n+\t(java_optimize_inline): Declare.\n+\t* expr.c (java_expand_expr): Allow a BLOCK to return a value.\n+\tHandle a LABEL_EXPR.\n+\t* decl.c (build_result_decl): If we already have a DECL_RESULT\n+\tdon't make another.\n+\t(dump_function): New.\n+\t(java_optimize_inline): New.\n+\t(dump_function): New.\n+\n 2002-08-13  Jesse Rosenstock  <jmr@fulcrummicro.com>\n \n \tFor PR java/7483:"}, {"sha": "50f811bb470cf0e25825fae148dd968c8aa029b1", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -109,7 +109,7 @@ JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/zextract.o java/jcf-io.o java/jcf-parse.o java/mangle.o \\\n   java/mangle_name.o java/builtins.o \\\n   java/jcf-write.o java/buffer.o java/check-init.o java/jcf-depend.o \\\n-  java/jcf-path.o java/xref.o java/boehm.o mkdeps.o\n+  java/jcf-path.o java/xref.o java/boehm.o java/java-tree-inline.o mkdeps.o\n \n GCJH_OBJS = java/gjavah.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n   java/zextract.o version.o mkdeps.o errors.o\n@@ -289,6 +289,13 @@ java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) $(EXPR_H) java/javaop.h java/java-opcodes.h except.h \\\n   java/java-except.h java/java-except.h java/parse.h toplev.h \\\n   $(SYSTEM_H) $(GGC_H) gt-java-expr.h\n+java/java-tree-inline.o: tree-inline.c $(CONFIG_H) $(SYSTEM_H) \\\n+   $(TREE_H) $(RTL_H) expr.h flags.h params.h input.h insn-config.h \\\n+   $(INTEGRATE_H) $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n+   langhooks.h $(C_COMMON_H) $(srcdir)/tree-inline.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t-DINLINER_FOR_JAVA=1 \\\n+\t$(srcdir)/tree-inline.c -o $@\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) java/jcf.h\n java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) flags.h \\\n   input.h java/java-except.h $(SYSTEM_H) toplev.h java/parse.h $(GGC_H) \\"}, {"sha": "9f055d3cf57bfdd3a56657931e36f35aeb814d2b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -41,9 +41,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"except.h\"\n #include \"java-except.h\"\n #include \"ggc.h\"\n+#include \"timevar.h\"\n+#include \"tree-inline.h\"\n \n #if defined (DEBUG_JAVA_BINDING_LEVELS)\n-extern void indent PROTO((void));\n+extern void indent PARAMS ((void));\n #endif\n \n static tree push_jvm_slot PARAMS ((int, tree));\n@@ -53,6 +55,7 @@ static struct binding_level *make_binding_level PARAMS ((void));\n static tree create_primitive_vtable PARAMS ((const char *));\n static tree check_local_named_variable PARAMS ((tree, tree, int, int *));\n static tree check_local_unnamed_variable PARAMS ((tree, tree, tree));\n+static void dump_function PARAMS ((enum tree_dump_index, tree));\n \n /* Set to non-zero value in order to emit class initilization code\n    before static field references.  */\n@@ -1662,11 +1665,18 @@ build_result_decl (fndecl)\n   tree fndecl;\n {\n   tree restype = TREE_TYPE (TREE_TYPE (fndecl));\n-  /* To be compatible with C_PROMOTING_INTEGER_TYPE_P in cc1/cc1plus. */\n-  if (INTEGRAL_TYPE_P (restype)\n-      && TYPE_PRECISION (restype) < TYPE_PRECISION (integer_type_node))\n-    restype = integer_type_node;\n-  return (DECL_RESULT (fndecl) = build_decl (RESULT_DECL, NULL_TREE, restype));\n+  tree result = DECL_RESULT (fndecl);\n+  if (! result)\n+    {\n+      /* To be compatible with C_PROMOTING_INTEGER_TYPE_P in cc1/cc1plus. */\n+      if (INTEGRAL_TYPE_P (restype)\n+\t  && TYPE_PRECISION (restype) < TYPE_PRECISION (integer_type_node))\n+\trestype = integer_type_node;\n+      result = build_decl (RESULT_DECL, NULL_TREE, restype);\n+      DECL_CONTEXT (result) = fndecl;\n+      DECL_RESULT (fndecl) = result;\n+    }\n+  return result;\n }\n \n void\n@@ -1825,4 +1835,34 @@ end_java_method ()\n   current_function_decl = NULL_TREE;\n }\n \n+/* Dump FUNCTION_DECL FN as tree dump PHASE. */\n+\n+static void\n+dump_function (phase, fn)\n+     enum tree_dump_index phase;\n+     tree fn;\n+{\n+  FILE *stream;\n+  int flags;\n+\n+  stream = dump_begin (phase, &flags);\n+  if (stream)\n+    {\n+      dump_node (fn, TDF_SLIM | flags, stream);\n+      dump_end (phase, stream);\n+    }\n+}\n+ \n+void java_optimize_inline (fndecl)\n+     tree fndecl;\n+{\n+  if (flag_inline_trees)\n+    {\n+      timevar_push (TV_INTEGRATION);\n+      optimize_inline_calls (fndecl);\n+      timevar_pop (TV_INTEGRATION);\n+      dump_function (TDI_inlined, fndecl);\n+    }\n+}\n+\n #include \"gt-java-decl.h\""}, {"sha": "d6a443dca9a82f3f62f33af1208cdc82b1aa99b7", "filename": "gcc/java/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -2534,6 +2534,7 @@ java_expand_expr (exp, target, tmode, modifier)\n       if (BLOCK_EXPR_BODY (exp))\n \t{\n \t  tree local;\n+\t  rtx last;\n \t  tree body = BLOCK_EXPR_BODY (exp);\n \t  /* Set to 1 or more when we found a static class\n              initialization flag. */\n@@ -2567,11 +2568,11 @@ java_expand_expr (exp, target, tmode, modifier)\n \t      emit_queue ();\n \t      body = TREE_OPERAND (body, 1);\n \t    }\n-\t  expand_expr (body, const0_rtx, VOIDmode, 0);\n+  \t  last = expand_expr (body, NULL_RTX, VOIDmode, 0);\n \t  emit_queue ();\n \t  expand_end_bindings (getdecls (), 1, 0);\n \t  poplevel (1, 1, 0);\n-\t  return const0_rtx;\n+\t  return last;\n \t}\n       return const0_rtx;\n \n@@ -2628,6 +2629,11 @@ java_expand_expr (exp, target, tmode, modifier)\n       return expand_expr (build_exception_object_ref (TREE_TYPE (exp)),\n \t\t\t  target, tmode, modifier);\n \n+    case LABEL_EXPR:\n+      /* Used only by expanded inline functions.  */\n+      expand_label (TREE_OPERAND (exp, 0));\n+      return const0_rtx;\n+\n     default:\n       internal_error (\"can't expand %s\", tree_code_name [TREE_CODE (exp)]);\n     }"}, {"sha": "a08ec5830fca904b2335a11886c4df0fd0960dc0", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -902,6 +902,12 @@ union lang_tree_node\n /* The original WFL of a final variable. */\n #define DECL_FIELD_FINAL_WFL(NODE) \\\n   (DECL_LANG_SPECIFIC(NODE)->u.v.wfl)\n+/* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this is\n+     the approximate number of statements in this function.  There is\n+     no need for this number to be exact; it is only used in various\n+     heuristics regarding optimization.  */\n+#define DECL_NUM_STMTS(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->decl.u1.i)\n /* True if NODE is a local variable final. */\n #define LOCAL_FINAL_P(NODE) (DECL_LANG_SPECIFIC (NODE) && DECL_FINAL (NODE))\n /* True if NODE is a final field. */\n@@ -1274,6 +1280,9 @@ extern void append_gpp_mangled_name PARAMS ((const char *, int));\n extern void add_predefined_file PARAMS ((tree));\n extern int predefined_filename_p PARAMS ((tree));\n \n+extern void java_optimize_inline PARAMS ((tree));\n+extern tree decl_constant_value PARAMS ((tree));\n+\n #if defined(RTX_CODE) && defined (HAVE_MACHINE_MODES)\n struct rtx_def * java_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n \t\t\t\t\t   int)); "}, {"sha": "0a76402f555a8d7a523c91f62c1a85e10062a5a7", "filename": "gcc/java/lang.c", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -40,6 +40,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"xref.h\"\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n+#include \"tree-inline.h\"\n \n struct string_option\n {\n@@ -61,6 +62,11 @@ static void java_print_error_function PARAMS ((diagnostic_context *,\n static int process_option_with_no PARAMS ((const char *,\n \t\t\t\t\t   const struct string_option *,\n \t\t\t\t\t   int));\n+static tree java_tree_inlining_walk_subtrees  PARAMS ((tree *,\n+\t\t\t\t\t\t       int *,\n+\t\t\t\t\t\t       walk_tree_fn,\n+\t\t\t\t\t\t       void *,\n+\t\t\t\t\t\t       void *));\n static int java_unsafe_for_reeval PARAMS ((tree));\n \n #ifndef TARGET_OBJECT_SUFFIX\n@@ -265,6 +271,9 @@ struct language_function GTY(())\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE java_signed_or_unsigned_type\n \n+#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n+#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES java_tree_inlining_walk_subtrees\n+\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -496,6 +505,9 @@ java_init (filename)\n   flag_minimal_debug = 0;\n #endif\n \n+  if (flag_inline_functions)\n+    flag_inline_trees = 1;\n+\n   /* Open input file.  */\n \n   if (filename == 0 || !strcmp (filename, \"-\"))\n@@ -786,17 +798,93 @@ java_init_options ()\n static bool\n java_post_options ()\n {\n-  /* Turn off RTL inliner unless -finline-functions was really specified.  */\n-  if (flag_really_inline == 0)\n+ /* Use tree inlining if possible.  Function instrumentation is only\n+     done in the RTL level, so we disable tree inlining.  */\n+  if (! flag_instrument_function_entry_exit)\n     {\n-      flag_no_inline = 1;\n-      flag_inline_functions = 0;\n+      if (!flag_no_inline)\n+\tflag_no_inline = 1;\n+      if (flag_inline_functions)\n+\t{\n+\t  flag_inline_trees = 2;\n+\t  flag_inline_functions = 0;\n+\t}\n     }\n \n   /* Initialize the compiler back end.  */\n   return false;\n }\n \n+/* Return either DECL or its known constant value (if it has one).  */\n+\n+tree\n+decl_constant_value (decl)\n+     tree decl;\n+{\n+  if (/* Don't change a variable array bound or initial value to a constant\n+\t in a place where a variable is invalid.  */\n+      current_function_decl != 0\n+      && ! TREE_THIS_VOLATILE (decl)\n+      && TREE_READONLY (decl)\n+      && DECL_INITIAL (decl) != 0\n+      && TREE_CODE (DECL_INITIAL (decl)) != ERROR_MARK\n+      /* This is invalid if initial value is not constant.\n+\t If it has either a function call, a memory reference,\n+\t or a variable, then re-evaluating it could give different results.  */\n+      && TREE_CONSTANT (DECL_INITIAL (decl))\n+      /* Check for cases where this is sub-optimal, even though valid.  */\n+      && TREE_CODE (DECL_INITIAL (decl)) != CONSTRUCTOR)\n+    return DECL_INITIAL (decl);\n+  return decl;\n+}\n+\n+/* Walk the language specific tree nodes during inlining.  */\n+\n+static tree\n+java_tree_inlining_walk_subtrees (tp,subtrees,func,data,htab)\n+     tree *tp ATTRIBUTE_UNUSED;\n+     int *subtrees ATTRIBUTE_UNUSED;\n+     walk_tree_fn func ATTRIBUTE_UNUSED;\n+     void *data ATTRIBUTE_UNUSED;\n+     void *htab ATTRIBUTE_UNUSED;\n+{\n+  enum tree_code code;\n+  tree result;\n+\n+#define WALK_SUBTREE(NODE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      result = walk_tree (&(NODE), func, data, htab);\t\\\n+      if (result)\t\t\t\t\t\\\n+\treturn result;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+  tree t = *tp;\n+  if (!t)\n+    return NULL_TREE;\n+\n+  code = TREE_CODE (t);\n+  switch (code)\n+    {\n+    case BLOCK:\n+      if (BLOCK_EXPR_BODY (t))\n+\t{\n+\t  tree *prev = &BLOCK_EXPR_BODY (*tp);\n+\t  while (*prev)\n+\t    {\n+\t      WALK_SUBTREE (*prev);\n+\t      prev = &TREE_CHAIN (*prev);\n+\t    }\t    \n+\t}\n+      return NULL_TREE;\n+      break;\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Called from unsafe_for_reeval.  */\n static int\n java_unsafe_for_reeval (t)"}, {"sha": "3dabe3593d0ff0cdf26aab515e0c7c1d62644308", "filename": "gcc/java/parse.y", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7149627b8ede8a1f9b4735da0690f8b28209503e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7149627b8ede8a1f9b4735da0690f8b28209503e", "patch": "@@ -67,6 +67,7 @@ definitions and other extensions.  */\n #include \"except.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n+#include \"tree-inline.h\"\n \n #ifndef DIR_SEPARATOR\n #define DIR_SEPARATOR '/'\n@@ -7478,6 +7479,8 @@ source_end_java_method ()\n      patched.  Dump it to a file if the user requested it.  */\n   dump_java_tree (TDI_original, fndecl);\n \n+  java_optimize_inline (fndecl); \n+\n   /* Generate function's code */\n   if (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl))\n       && ! flag_emit_class_files\n@@ -7539,6 +7542,10 @@ static tree\n add_stmt_to_compound (existing, type, stmt)\n      tree existing, type, stmt;\n {\n+  /* Keep track of this for inlining.  */\n+  if (current_function_decl)\n+    ++DECL_NUM_STMTS (current_function_decl);\n+\n   if (existing)\n     return build (COMPOUND_EXPR, type, existing, stmt);\n   else\n@@ -8128,6 +8135,11 @@ java_expand_method_bodies (class)\n \n       current_function_decl = decl;\n \n+      /* Save the function for inlining.  */\n+      if (flag_inline_trees)\n+\tDECL_SAVED_TREE (decl) = \n+\t  BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (decl));\n+      \n       /* It's time to assign the variable flagging static class\n \t initialization based on which classes invoked static methods\n \t are definitely initializing. This should be flagged. */"}]}