{"sha": "1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlYjQwZGQ2ZDBlOGQ1YTYyZDI1Njc5ZmE2YjA1MzNkNzJmZDRkZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-02T08:28:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-02T08:28:21Z"}, "message": "gigi.h (record_builtin_type): Add ARTIFICIAL_P param.\n\n\t* gcc-interface/gigi.h (record_builtin_type): Add ARTIFICIAL_P param.\n\t* gcc-interface/utils.c (gnat_pushdecl): If this is a non-artificial\n\tdeclaration of an array type, then set DECL_ORIGINAL_TYPE to a distinct\n\tcopy.\n\t(record_builtin_type): Add ARTIFICIAL_P parameter.  Set DECL_ARTIFICIAL\n\tflag of the type accordingly.\n\t* gcc-interface/trans.c (gigi): Adjust calls to record_builtin_type.\n\nFrom-SVN: r171880", "tree": {"sha": "d56f7d3a44278a2ed83858803463e8d2b84bb2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56f7d3a44278a2ed83858803463e8d2b84bb2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/comments", "author": null, "committer": null, "parents": [{"sha": "80ec8b4cf19ac985c95e2a222d84e48324cb8994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ec8b4cf19ac985c95e2a222d84e48324cb8994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ec8b4cf19ac985c95e2a222d84e48324cb8994"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "4e109b48f1759148d7b068ba8c477845c104aed6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "patch": "@@ -1,3 +1,13 @@\n+2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (record_builtin_type): Add ARTIFICIAL_P param.\n+\t* gcc-interface/utils.c (gnat_pushdecl): If this is a non-artificial\n+\tdeclaration of an array type, then set DECL_ORIGINAL_TYPE to a distinct\n+\tcopy.\n+\t(record_builtin_type): Add ARTIFICIAL_P parameter.  Set DECL_ARTIFICIAL\n+\tflag of the type accordingly.\n+\t* gcc-interface/trans.c (gigi): Adjust calls to record_builtin_type.\n+\n 2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Access_Type>: Defer"}, {"sha": "fbf8a0b59e66d48118ba9906a341966247053f0f", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "patch": "@@ -504,8 +504,10 @@ extern void init_dummy_type (void);\n /* Make a dummy type corresponding to GNAT_TYPE.  */\n extern tree make_dummy_type (Entity_Id gnat_type);\n \n-/* Record TYPE as a builtin type for Ada.  NAME is the name of the type.  */\n-extern void record_builtin_type (const char *name, tree type);\n+/* Record TYPE as a builtin type for Ada.  NAME is the name of the type.\n+   ARTIFICIAL_P is true if it's a type that was generated by the compiler.  */\n+extern void record_builtin_type (const char *name, tree type,\n+\t\t\t\t bool artificial_p);\n \n /* Given a record type RECORD_TYPE and a list of FIELD_DECL nodes FIELD_LIST,\n    finish constructing the record or union type.  If REP_LEVEL is zero, this"}, {"sha": "cca9523e760c6069a073763c2e7b6bfcf4a94d88", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "patch": "@@ -308,10 +308,10 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \n   /* Record the builtin types.  Define `integer' and `character' first so that\n      dbx will output them first.  */\n-  record_builtin_type (\"integer\", integer_type_node);\n-  record_builtin_type (\"character\", unsigned_char_type_node);\n-  record_builtin_type (\"boolean\", boolean_type_node);\n-  record_builtin_type (\"void\", void_type_node);\n+  record_builtin_type (\"integer\", integer_type_node, false);\n+  record_builtin_type (\"character\", unsigned_char_type_node, false);\n+  record_builtin_type (\"boolean\", boolean_type_node, false);\n+  record_builtin_type (\"void\", void_type_node, false);\n \n   /* Save the type we made for integer as the type for Standard.Integer.  */\n   save_gnu_tree (Base_Type (standard_integer),\n@@ -397,7 +397,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   jmpbuf_type\n     = build_array_type (gnat_type_for_mode (Pmode, 0),\n \t\t\tbuild_index_type (size_int (5)));\n-  record_builtin_type (\"JMPBUF_T\", jmpbuf_type);\n+  record_builtin_type (\"JMPBUF_T\", jmpbuf_type, true);\n   jmpbuf_ptr_type = build_pointer_type (jmpbuf_type);\n \n   /* Functions to get and set the jumpbuf pointer for the current thread.  */\n@@ -552,7 +552,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t}\n \n       finish_record_type (fdesc_type_node, nreverse (field_list), 0, false);\n-      record_builtin_type (\"descriptor\", fdesc_type_node);\n+      record_builtin_type (\"descriptor\", fdesc_type_node, true);\n       null_fdesc_node = gnat_build_constructor (fdesc_type_node, null_vec);\n     }\n \n@@ -566,7 +566,8 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       longest_float_type_node = make_node (REAL_TYPE);\n       TYPE_PRECISION (longest_float_type_node) = LONG_DOUBLE_TYPE_SIZE;\n       layout_type (longest_float_type_node);\n-      record_builtin_type (\"longest float type\", longest_float_type_node);\n+      record_builtin_type (\"longest float type\", longest_float_type_node,\n+\t\t\t   false);\n     }\n   else\n     longest_float_type_node = TREE_TYPE (long_long_float_type);"}, {"sha": "78d5506259dfc784f04811f5724663a8ae210c7f", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "patch": "@@ -508,7 +508,18 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n       tree t = TREE_TYPE (decl);\n \n       if (!(TYPE_NAME (t) && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL))\n-\t;\n+\t{\n+\t  /* Array types aren't tagged types in the C sense so we force the\n+\t     type to be associated with its typedef in the DWARF back-end,\n+\t     in order to make sure that the latter is always preserved.  */\n+\t  if (!DECL_ARTIFICIAL (decl) && TREE_CODE (t) == ARRAY_TYPE)\n+\t    {\n+\t      tree tt = build_distinct_type_copy (t);\n+\t      TYPE_NAME (tt) = DECL_NAME (decl);\n+\t      TYPE_STUB_DECL (tt) = TYPE_STUB_DECL (t);\n+\t      DECL_ORIGINAL_TYPE (decl) = tt;\n+\t    }\n+\t}\n       else if (TYPE_IS_FAT_POINTER_P (t))\n \t{\n \t  tree tt = build_variant_type_copy (t);\n@@ -535,14 +546,15 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n     }\n }\n \f\n-/* Record TYPE as a builtin type for Ada.  NAME is the name of the type.  */\n+/* Record TYPE as a builtin type for Ada.  NAME is the name of the type.\n+   ARTIFICIAL_P is true if it's a type that was generated by the compiler.  */\n \n void\n-record_builtin_type (const char *name, tree type)\n+record_builtin_type (const char *name, tree type, bool artificial_p)\n {\n   tree type_decl = build_decl (input_location,\n \t\t\t       TYPE_DECL, get_identifier (name), type);\n-\n+  DECL_ARTIFICIAL (type_decl) = artificial_p;\n   gnat_pushdecl (type_decl, Empty);\n \n   if (debug_hooks->type_decl)"}]}