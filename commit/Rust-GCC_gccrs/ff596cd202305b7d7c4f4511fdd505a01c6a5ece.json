{"sha": "ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1OTZjZDIwMjMwNWI3ZDdjNGY0NTExZmRkNTA1YTAxYzZhNWVjZQ==", "commit": {"author": {"name": "Ralph Loader", "email": "suckfish@ihug.co.nz", "date": "2008-11-10T09:08:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-10T09:08:15Z"}, "message": "re PR middle-end/37807 (Exponential compile time with MMX builtins.)\n\n\tPR middle-end/37807\n\tPR middle-end/37809\n\t* combine.c (force_to_mode): Do not process vector types.\n\n\t* rtlanal.c (nonzero_bits1): Do not process vector types.\n\t(num_sign_bit_copies1): Likewise.\n\ntestsuite/ChangeLog\n\n\tPR middle-end/37807\n\tPR middle-end/37809\n\t* gcc/testsuite/gcc.target/i386/mmx-8.c: New test.\n\nFrom-SVN: r141732", "tree": {"sha": "f53c161297245fe4c06c693cc1f4ccf690cedb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f53c161297245fe4c06c693cc1f4ccf690cedb88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/comments", "author": null, "committer": null, "parents": [{"sha": "75223c17538213f86175b988a1b876fdd735d86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75223c17538213f86175b988a1b876fdd735d86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75223c17538213f86175b988a1b876fdd735d86c"}], "stats": {"total": 171, "additions": 164, "deletions": 7}, "files": [{"sha": "62f857f4aa6fa512f54973b9be37652ea96f9a01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "patch": "@@ -1,3 +1,12 @@\n+2008-11-10  Ralph Loader  <suckfish@ihug.co.nz>\n+\n+\tPR middle-end/37807\n+\tPR middle-end/37809\n+\t* combine.c (force_to_mode): Do not process vector types.\n+\n+\t* rtlanal.c (nonzero_bits1): Do not process vector types.\n+\t(num_sign_bit_copies1): Likewise.\n+\n 2008-11-09  Thomas Schwinge  <tschwinge@gnu.org>\n \n \t* config/i386/gnu.h: Add copyright and licensing header."}, {"sha": "b8a43356b461e2a9d9a678075b07a4da61acf1cb", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "patch": "@@ -7323,6 +7323,10 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n       && (GET_MODE_MASK (GET_MODE (x)) & ~mask) == 0)\n     return gen_lowpart (mode, x);\n \n+  /* The arithmetic simplifications here do the wrong thing on vector modes.  */\n+  if (VECTOR_MODE_P (mode) || VECTOR_MODE_P (GET_MODE (x)))\n+      return gen_lowpart (mode, x);\n+\n   switch (code)\n     {\n     case CLOBBER:"}, {"sha": "5d9df2cc0892d14504af44be86c1f52d7e362951", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "patch": "@@ -3681,8 +3681,9 @@ nonzero_bits1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n   enum rtx_code code;\n   unsigned int mode_width = GET_MODE_BITSIZE (mode);\n \n-  /* For floating-point values, assume all bits are needed.  */\n-  if (FLOAT_MODE_P (GET_MODE (x)) || FLOAT_MODE_P (mode))\n+  /* For floating-point and vector values, assume all bits are needed.  */\n+  if (FLOAT_MODE_P (GET_MODE (x)) || FLOAT_MODE_P (mode)\n+      || VECTOR_MODE_P (GET_MODE (x)) || VECTOR_MODE_P (mode))\n     return nonzero;\n \n   /* If X is wider than MODE, use its mode instead.  */\n@@ -4195,7 +4196,8 @@ num_sign_bit_copies1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n   if (mode == VOIDmode)\n     mode = GET_MODE (x);\n \n-  if (mode == VOIDmode || FLOAT_MODE_P (mode) || FLOAT_MODE_P (GET_MODE (x)))\n+  if (mode == VOIDmode || FLOAT_MODE_P (mode) || FLOAT_MODE_P (GET_MODE (x))\n+      || VECTOR_MODE_P (GET_MODE (x)) || VECTOR_MODE_P (mode))\n     return 1;\n \n   /* For a smaller object, just ignore the high bits.  */"}, {"sha": "28665feb76bbda2b3ad095abd74012b454ea0f56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "patch": "@@ -1,7 +1,13 @@\n+2008-11-02  Ralph Loader  <suckfish@ihug.co.nz>\n+\n+\tPR middle-end/37807\n+\tPR middle-end/37809\n+\t* gcc/testsuite/gcc.target/i386/mmx-8.c: New test.\n+\n 2008-11-09  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/37836\n-        * gfortran.dg/minmaxval_1.f90: New test.\n+\tPR fortran/37836\n+\t* gfortran.dg/minmaxval_1.f90: New test.\n \n 2008-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -17,8 +23,7 @@\n \n 2008-11-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-\t* g++.dg/ipa/iinline-1.C: Remove -c flag, add -fpie for PIC\n-\ttargets.\n+\t* g++.dg/ipa/iinline-1.C: Remove -c flag, add -fpie for PIC targets.\n \n \t* gcc.dg/tree-ssa/inline-2.c (foo): Add 'inline' keyword.\n "}, {"sha": "c90083babb57ce448df220896667c600be5951c6", "filename": "gcc/testsuite/gcc.target/i386/mmx-8.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff596cd202305b7d7c4f4511fdd505a01c6a5ece/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-8.c?ref=ff596cd202305b7d7c4f4511fdd505a01c6a5ece", "patch": "@@ -0,0 +1,137 @@\n+/* PR middle-end/37809 */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mmmx\" } */\n+\n+#include <mmintrin.h>\n+\n+#include \"mmx-check.h\"\n+\n+// Various tests of cases where it is incorrect to optimise vectors as if they\n+// were integers of the same width.\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+Sshift()\n+{\n+    volatile __m64 y = (__m64) 0xffffffffll;\n+    __m64 x = y & (__m64) 0xffffffffll;\n+    x = _m_psradi (x, 1);\n+    x &= (__m64) 0x80000000ll;\n+    if (0 == (long long) x)\n+        abort();\n+}\n+\n+#define SHIFTU(F,B,S,T)                         \\\n+    void F()                                    \\\n+    {                                           \\\n+        volatile __m64 y = (__m64) 0ll;         \\\n+        __m64 x = y | (__m64) (1llu << B);      \\\n+        if (S > 0)                              \\\n+            x = _m_pslldi (x, S);               \\\n+        else                                    \\\n+            x = _m_psrldi (x, -S);              \\\n+        if (T > 0)                              \\\n+            x = _m_pslldi (x, T);               \\\n+        else                                    \\\n+            x = _m_psrldi (x, -T);              \\\n+        x &= (__m64) (1llu << (B + S + T));     \\\n+        if ((long long) x)                      \\\n+            abort();                            \\\n+    }\n+\n+SHIFTU (shiftU1, 31, 1, -1)\n+SHIFTU (shiftU2, 32, -1, 1)\n+SHIFTU (shiftU3, 31, 1, 0)\n+SHIFTU (shiftU4, 32, -1, 0)\n+\n+void __attribute__ ((noinline))\n+add_1()\n+{\n+    volatile long long ONE = 1;\n+    long long one = ONE;\n+\n+    __m64 a = (__m64) one;\n+    __m64 b = (__m64) -one;\n+    __m64 c = a + b;\n+    if (0 == (long long) c)\n+        abort();\n+}\n+\n+void __attribute__ ((noinline))\n+add_2()\n+{\n+    volatile long long ONE = 1;\n+    long long one = ONE;\n+\n+    __m64 a = (__m64) one;\n+    __m64 b = (__m64) -one;\n+    __m64 c = _m_paddd (a, b);\n+    if (0 == (long long) c)\n+        abort();\n+}\n+\n+void __attribute__ ((noinline))\n+mult_1()\n+{\n+    volatile __m64 y = (__m64) 0ll;\n+    __m64 x = y | (__m64) (1ll << 32);\n+    x = x * (__m64) 1ll;\n+    x &= (__m64) (1ll << 32);\n+    if (0 != (long long) x)\n+        abort();\n+}\n+\n+void __attribute__ ((noinline))\n+mult_2()\n+{\n+    volatile int foo = 1;\n+    unsigned long long one = foo & 1;\n+\n+    __m64 x = (__m64) (one << 16);\n+    x *= x;\n+    x &= (__m64) (1ll << 32);\n+    if (0 != (long long) x)\n+        abort();\n+}\n+\n+void __attribute__ ((noinline))\n+mult_3()\n+{\n+    volatile __m64 y = (__m64) (1ll << 32);\n+    __m64 a = y;\n+    __m64 b = y * (__m64) 1ll;\n+    if (((long long) a) == (long long) b)\n+        abort();\n+}\n+\n+void __attribute__ ((noinline))\n+div_1()\n+{\n+    volatile __m64 y = (__m64) 0ll;\n+    __m64 x = y | (__m64) (1ull << 32);\n+    x |= (__m64) 1ull;\n+    x = x / x;\n+    if (1ll == (long long) x)\n+        abort();\n+}\n+\n+\n+void mmx_test (void)\n+{\n+    Sshift();\n+    shiftU1();\n+    shiftU2();\n+    shiftU3();\n+    shiftU4();\n+\n+    add_1();\n+    add_2();\n+\n+    mult_1();\n+    mult_2();\n+    mult_3();\n+\n+    div_1();\n+}"}]}