{"sha": "9d04c986b6faed878dbcc86d2f9392a721a3936e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQwNGM5ODZiNmZhZWQ4NzhkYmNjODZkMmY5MzkyYTcyMWEzOTM2ZQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-02-25T17:46:16Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-02-25T17:46:16Z"}, "message": "AArch64: Update Armv8.4-a's FP16 FML intrinsics\n\nThis patch updates the Armv8.4-a FP16 FML intrinsics's suffixes from u32 to f16\nto be more consistent with the naming convention for intrinsics.\n\nThe specifications for these intrinsics have not been published yet so we do\nnot need to maintain the old names.\n\nThe patch was created with the following script:\n\ngrep -lIE \"(vfml[as].+)_u32\" -r gcc/ | grep -iEv \".+Changelog.*\" \\\n  | xargs sed -i -E -e \"s/(vfml[as].+)_u32/\\1_f16/g\"\n\ngcc/ChangeLog:\n\n\t* config/aarch64/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n\tvfmlalq_low_u32, vfmlslq_low_u32, vfmlal_high_u32, vfmlsl_high_u32,\n\tvfmlalq_high_u32, vfmlslq_high_u32, vfmlal_lane_low_u32,\n\tvfmlsl_lane_low_u32, vfmlal_laneq_low_u32, vfmlsl_laneq_low_u32,\n\tvfmlalq_lane_low_u32, vfmlslq_lane_low_u32, vfmlalq_laneq_low_u32,\n\tvfmlslq_laneq_low_u32, vfmlal_lane_high_u32, vfmlsl_lane_high_u32,\n\tvfmlal_laneq_high_u32, vfmlsl_laneq_high_u32, vfmlalq_lane_high_u32,\n\tvfmlslq_lane_high_u32, vfmlalq_laneq_high_u32, vfmlslq_laneq_high_u32):\n\tRename ...\n\t(vfmlal_low_f16, vfmlsl_low_f16, vfmlalq_low_f16, vfmlslq_low_f16,\n\tvfmlal_high_f16, vfmlsl_high_f16, vfmlalq_high_f16, vfmlslq_high_f16,\n\tvfmlal_lane_low_f16, vfmlsl_lane_low_f16, vfmlal_laneq_low_f16,\n\tvfmlsl_laneq_low_f16, vfmlalq_lane_low_f16, vfmlslq_lane_low_f16,\n\tvfmlalq_laneq_low_f16, vfmlslq_laneq_low_f16, vfmlal_lane_high_f16,\n\tvfmlsl_lane_high_f16, vfmlal_laneq_high_f16, vfmlsl_laneq_high_f16,\n\tvfmlalq_lane_high_f16, vfmlslq_lane_high_f16, vfmlalq_laneq_high_f16,\n\tvfmlslq_laneq_high_f16): ... To this.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/fp16_fmul_high.h (test_vfmlal_high_u32,\n\ttest_vfmlalq_high_u32, test_vfmlsl_high_u32, test_vfmlslq_high_u32):\n\tRename ...\n\t(test_vfmlal_high_f16, test_vfmlalq_high_f16, test_vfmlsl_high_f16,\n\ttest_vfmlslq_high_f16): ... To this.\n\t* gcc.target/aarch64/fp16_fmul_lane_high.h (test_vfmlal_lane_high_u32,\n\ttets_vfmlsl_lane_high_u32, test_vfmlal_laneq_high_u32,\n\ttest_vfmlsl_laneq_high_u32, test_vfmlalq_lane_high_u32,\n\ttest_vfmlslq_lane_high_u32, test_vfmlalq_laneq_high_u32,\n\ttest_vfmlslq_laneq_high_u32): Rename ...\n\t(test_vfmlal_lane_high_f16, tets_vfmlsl_lane_high_f16,\n\ttest_vfmlal_laneq_high_f16, test_vfmlsl_laneq_high_f16,\n\ttest_vfmlalq_lane_high_f16, test_vfmlslq_lane_high_f16,\n\ttest_vfmlalq_laneq_high_f16, test_vfmlslq_laneq_high_f16): ... To this.\n\t* gcc.target/aarch64/fp16_fmul_lane_low.h (test_vfmlal_lane_low_u32,\n\ttest_vfmlsl_lane_low_u32, test_vfmlal_laneq_low_u32,\n\ttest_vfmlsl_laneq_low_u32, test_vfmlalq_lane_low_u32,\n\ttest_vfmlslq_lane_low_u32, test_vfmlalq_laneq_low_u32,\n\ttest_vfmlslq_laneq_low_u32): Rename ...\n\t(test_vfmlal_lane_low_f16, test_vfmlsl_lane_low_f16,\n\ttest_vfmlal_laneq_low_f16, test_vfmlsl_laneq_low_f16,\n\ttest_vfmlalq_lane_low_f16, test_vfmlslq_lane_low_f16,\n\ttest_vfmlalq_laneq_low_f16, test_vfmlslq_laneq_low_f16): ... To this.\n\t* gcc.target/aarch64/fp16_fmul_low.h (test_vfmlal_low_u32,\n\ttest_vfmlalq_low_u32, test_vfmlsl_low_u32, test_vfmlslq_low_u32):\n\tRename ...\n\t(test_vfmlal_low_f16, test_vfmlalq_low_f16, test_vfmlsl_low_f16,\n\ttest_vfmlslq_low_f16): ... To This.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_fp16fml_neon_ok_nocache): Update test.\n\nFrom-SVN: r269191", "tree": {"sha": "2be5baab8af141f31eb643a074096bea4c242f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be5baab8af141f31eb643a074096bea4c242f0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d04c986b6faed878dbcc86d2f9392a721a3936e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d04c986b6faed878dbcc86d2f9392a721a3936e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d04c986b6faed878dbcc86d2f9392a721a3936e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d04c986b6faed878dbcc86d2f9392a721a3936e/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6388eda068f22b1e221e0955266f5911520b06e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6388eda068f22b1e221e0955266f5911520b06e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6388eda068f22b1e221e0955266f5911520b06e7"}], "stats": {"total": 200, "additions": 127, "deletions": 73}, "files": [{"sha": "894ffd411fc398083e58a4cc558273d4aa7da708", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,3 +1,24 @@\n+2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n+\tvfmlalq_low_u32, vfmlslq_low_u32, vfmlal_high_u32, vfmlsl_high_u32,\n+\tvfmlalq_high_u32, vfmlslq_high_u32, vfmlal_lane_low_u32,\n+\tvfmlsl_lane_low_u32, vfmlal_laneq_low_u32, vfmlsl_laneq_low_u32,\n+\tvfmlalq_lane_low_u32, vfmlslq_lane_low_u32, vfmlalq_laneq_low_u32,\n+\tvfmlslq_laneq_low_u32, vfmlal_lane_high_u32, vfmlsl_lane_high_u32,\n+\tvfmlal_laneq_high_u32, vfmlsl_laneq_high_u32, vfmlalq_lane_high_u32,\n+\tvfmlslq_lane_high_u32, vfmlalq_laneq_high_u32, vfmlslq_laneq_high_u32):\n+\tRename ...\n+\t(vfmlal_low_f16, vfmlsl_low_f16, vfmlalq_low_f16, vfmlslq_low_f16,\n+\tvfmlal_high_f16, vfmlsl_high_f16, vfmlalq_high_f16, vfmlslq_high_f16,\n+\tvfmlal_lane_low_f16, vfmlsl_lane_low_f16, vfmlal_laneq_low_f16,\n+\tvfmlsl_laneq_low_f16, vfmlalq_lane_low_f16, vfmlslq_lane_low_f16,\n+\tvfmlalq_laneq_low_f16, vfmlslq_laneq_low_f16, vfmlal_lane_high_f16,\n+\tvfmlsl_lane_high_f16, vfmlal_laneq_high_f16, vfmlsl_laneq_high_f16,\n+\tvfmlalq_lane_high_f16, vfmlslq_lane_high_f16, vfmlalq_laneq_high_f16,\n+\tvfmlslq_laneq_high_f16): ... To this.\n+\n+\n 2019-02-25  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR rtl-optimization/86096"}, {"sha": "314ef30187d1ba1882eaf5c610770d380344e920", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -33777,183 +33777,183 @@ vcmlaq_rot270_laneq_f32 (float32x4_t __r, float32x4_t __a, float32x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlal_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_aarch64_fmlal_lowv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlsl_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_aarch64_fmlsl_lowv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlalq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_aarch64_fmlalq_lowv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlslq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_aarch64_fmlslq_lowv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlal_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_aarch64_fmlal_highv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlsl_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_aarch64_fmlsl_highv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlalq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_aarch64_fmlalq_highv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlslq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_aarch64_fmlslq_highv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlal_lane_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __lane)\n {\n   return __builtin_aarch64_fmlal_lane_lowv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlsl_lane_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __lane)\n {\n   return __builtin_aarch64_fmlsl_lane_lowv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlal_laneq_low_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlal_laneq_lowv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlsl_laneq_low_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlsl_laneq_lowv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlalq_lane_low_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlalq_lane_lowv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlslq_lane_low_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlslq_lane_lowv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlalq_laneq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t       const int __lane)\n {\n   return __builtin_aarch64_fmlalq_laneq_lowv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlslq_laneq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlslq_laneq_lowv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlal_lane_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __lane)\n {\n   return __builtin_aarch64_fmlal_lane_highv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlsl_lane_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __lane)\n {\n   return __builtin_aarch64_fmlsl_lane_highv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlal_laneq_high_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlal_laneq_highv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlsl_laneq_high_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlsl_laneq_highv2sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlalq_lane_high_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlalq_lane_highv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlslq_lane_high_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlslq_lane_highv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlalq_laneq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t       const int __lane)\n {\n   return __builtin_aarch64_fmlalq_laneq_highv4sf (__r, __a, __b, __lane);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlslq_laneq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t      const int __lane)\n {\n   return __builtin_aarch64_fmlslq_laneq_highv4sf (__r, __a, __b, __lane);"}, {"sha": "4dfd8e4b593dce0d74e50c49ca0e81bf26c8b157", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,3 +1,36 @@\n+2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/fp16_fmul_high.h (test_vfmlal_high_u32,\n+\ttest_vfmlalq_high_u32, test_vfmlsl_high_u32, test_vfmlslq_high_u32):\n+\tRename ...\n+\t(test_vfmlal_high_f16, test_vfmlalq_high_f16, test_vfmlsl_high_f16,\n+\ttest_vfmlslq_high_f16): ... To this.\n+\t* gcc.target/aarch64/fp16_fmul_lane_high.h (test_vfmlal_lane_high_u32,\n+\ttets_vfmlsl_lane_high_u32, test_vfmlal_laneq_high_u32,\n+\ttest_vfmlsl_laneq_high_u32, test_vfmlalq_lane_high_u32,\n+\ttest_vfmlslq_lane_high_u32, test_vfmlalq_laneq_high_u32,\n+\ttest_vfmlslq_laneq_high_u32): Rename ...\n+\t(test_vfmlal_lane_high_f16, tets_vfmlsl_lane_high_f16,\n+\ttest_vfmlal_laneq_high_f16, test_vfmlsl_laneq_high_f16,\n+\ttest_vfmlalq_lane_high_f16, test_vfmlslq_lane_high_f16,\n+\ttest_vfmlalq_laneq_high_f16, test_vfmlslq_laneq_high_f16): ... To this.\n+\t* gcc.target/aarch64/fp16_fmul_lane_low.h (test_vfmlal_lane_low_u32,\n+\ttest_vfmlsl_lane_low_u32, test_vfmlal_laneq_low_u32,\n+\ttest_vfmlsl_laneq_low_u32, test_vfmlalq_lane_low_u32,\n+\ttest_vfmlslq_lane_low_u32, test_vfmlalq_laneq_low_u32,\n+\ttest_vfmlslq_laneq_low_u32): Rename ...\n+\t(test_vfmlal_lane_low_f16, test_vfmlsl_lane_low_f16,\n+\ttest_vfmlal_laneq_low_f16, test_vfmlsl_laneq_low_f16,\n+\ttest_vfmlalq_lane_low_f16, test_vfmlslq_lane_low_f16,\n+\ttest_vfmlalq_laneq_low_f16, test_vfmlslq_laneq_low_f16): ... To this.\n+\t* gcc.target/aarch64/fp16_fmul_low.h (test_vfmlal_low_u32,\n+\ttest_vfmlalq_low_u32, test_vfmlsl_low_u32, test_vfmlslq_low_u32):\n+\tRename ...\n+\t(test_vfmlal_low_f16, test_vfmlalq_low_f16, test_vfmlsl_low_f16,\n+\ttest_vfmlslq_low_f16): ... To This.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_fp16fml_neon_ok_nocache): Update test.\n+\n 2019-02-25  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/89282"}, {"sha": "def85038a7208725ecb1db0888a1cc651aaa4934", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_high.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,25 +1,25 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_high_u32 (r, a, b);\n+  return vfmlal_high_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlalq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_high_u32 (r, a, b);\n+  return vfmlalq_high_f16 (r, a, b);\n }\n \n float32x2_t\n-test_vfmlsl_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_high_u32 (r, a, b);\n+  return vfmlsl_high_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlslq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_high_u32 (r, a, b);\n+  return vfmlslq_high_f16 (r, a, b);\n }"}, {"sha": "a0b95f8b81e4799a6075b0f0fca6834f73de0dc8", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_high.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,49 +1,49 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_lane_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_lane_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_lane_high_u32 (r, a, b, 0);\n+  return vfmlal_lane_high_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-tets_vfmlsl_lane_high_u32  (float32x2_t r, float16x4_t a, float16x4_t b)\n+tets_vfmlsl_lane_high_f16  (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_lane_high_u32 (r, a, b, 0);\n+  return vfmlsl_lane_high_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlal_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlal_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlal_laneq_high_u32 (r, a, b, 6);\n+  return vfmlal_laneq_high_f16 (r, a, b, 6);\n }\n \n float32x2_t\n-test_vfmlsl_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlsl_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlsl_laneq_high_u32 (r, a, b, 6);\n+  return vfmlsl_laneq_high_f16 (r, a, b, 6);\n }\n \n float32x4_t\n-test_vfmlalq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlalq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlalq_lane_high_u32 (r, a, b, 1);\n+  return vfmlalq_lane_high_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlslq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlslq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlslq_lane_high_u32 (r, a, b, 1);\n+  return vfmlslq_lane_high_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlalq_laneq_high_u32  (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_laneq_high_f16  (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_laneq_high_u32 (r, a, b, 7);\n+  return vfmlalq_laneq_high_f16 (r, a, b, 7);\n }\n \n float32x4_t\n-test_vfmlslq_laneq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_laneq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_laneq_high_u32 (r, a, b, 7);\n+  return vfmlslq_laneq_high_f16 (r, a, b, 7);\n }"}, {"sha": "bf49829c4bec941970eaf4e32cabf65719be9eaa", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_low.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,49 +1,49 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_lane_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_lane_low_u32 (r, a, b, 0);\n+  return vfmlal_lane_low_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlsl_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_lane_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_lane_low_u32 (r, a, b, 0);\n+  return vfmlsl_lane_low_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlal_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlal_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlal_laneq_low_u32 (r, a, b, 6);\n+  return vfmlal_laneq_low_f16 (r, a, b, 6);\n }\n \n float32x2_t\n-test_vfmlsl_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlsl_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlsl_laneq_low_u32 (r, a, b, 6);\n+  return vfmlsl_laneq_low_f16 (r, a, b, 6);\n }\n \n float32x4_t\n-test_vfmlalq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlalq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlalq_lane_low_u32 (r, a, b, 1);\n+  return vfmlalq_lane_low_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlslq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlslq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlslq_lane_low_u32 (r, a, b, 1);\n+  return vfmlslq_lane_low_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlalq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_laneq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_laneq_low_u32 (r, a, b, 7);\n+  return vfmlalq_laneq_low_f16 (r, a, b, 7);\n }\n \n float32x4_t\n-test_vfmlslq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_laneq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_laneq_low_u32 (r, a, b, 7);\n+  return vfmlslq_laneq_low_f16 (r, a, b, 7);\n }"}, {"sha": "b039b548b5809f92a6ef0f91f6ab475b2b03866c", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_low.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -1,25 +1,25 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_low_u32 (r, a, b);\n+  return vfmlal_low_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlalq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_low_u32 (r, a, b);\n+  return vfmlalq_low_f16 (r, a, b);\n }\n \n float32x2_t\n-test_vfmlsl_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_low_u32 (r, a, b);\n+  return vfmlsl_low_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlslq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_low_u32 (r, a, b);\n+  return vfmlslq_low_f16 (r, a, b);\n }"}, {"sha": "242cc3f314989df9455dcb172386919e218cb08d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d04c986b6faed878dbcc86d2f9392a721a3936e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9d04c986b6faed878dbcc86d2f9392a721a3936e", "patch": "@@ -4567,7 +4567,7 @@ proc check_effective_target_arm_fp16fml_neon_ok_nocache { } {\n \t\tfloat32x2_t\n \t\tfoo (float32x2_t r, float16x4_t a, float16x4_t b)\n \t\t{\n-\t\t  return vfmlal_high_u32 (r, a, b);\n+\t\t  return vfmlal_high_f16 (r, a, b);\n \t\t}\n         } \"$flags -march=armv8.2-a+fp16fml\"] } {\n             set et_arm_fp16fml_neon_flags \"$flags -march=armv8.2-a+fp16fml\""}]}