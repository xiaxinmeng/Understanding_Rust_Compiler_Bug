{"sha": "359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5YmU3NmViYmM3NWZkMDRiNzQ3NmQ3NjRlY2YyYTM0YWM0OGI4Yg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-29T21:38:00Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-29T21:38:00Z"}, "message": "parser.c (cp_parser_nonclass_name): New.\n\n2008-02-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\ncp/\n\t* parser.c (cp_parser_nonclass_name): New.\n\t(cp_parser_pseudo_destructor_name): Use it instead of\n\tcp_parser_type_name.\n\t(cp_parser_type_name): Move code to cp_parser_nonclass_name.\n\nFrom-SVN: r132778", "tree": {"sha": "e78fdb48988c1af4895ffa1cd3bff9ef0f77cd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e78fdb48988c1af4895ffa1cd3bff9ef0f77cd0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359be76ebbc75fd04b7476d764ecf2a34ac48b8b/comments", "author": null, "committer": null, "parents": [{"sha": "966e8f4d3fa971039cad79e25de0f0cb385a9368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966e8f4d3fa971039cad79e25de0f0cb385a9368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966e8f4d3fa971039cad79e25de0f0cb385a9368"}], "stats": {"total": 97, "additions": 62, "deletions": 35}, "files": [{"sha": "6fa120414b347ad6616ab546a981a4883e93aa47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359be76ebbc75fd04b7476d764ecf2a34ac48b8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359be76ebbc75fd04b7476d764ecf2a34ac48b8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "patch": "@@ -1,3 +1,10 @@\n+2008-02-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* parser.c (cp_parser_nonclass_name): New.\n+\t(cp_parser_pseudo_destructor_name): Use it instead of\n+\tcp_parser_type_name.\n+\t(cp_parser_type_name): Move code to cp_parser_nonclass_name.\n+\n 2008-02-29  Tom Tromey  <tromey@redhat.com>\n \n \t* parser.c (struct cp_token) <input_file_stack_index>: Remove."}, {"sha": "5f7ddcf35d89d5d0c012748f713b55caa3cf2132", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 55, "deletions": 35, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359be76ebbc75fd04b7476d764ecf2a34ac48b8b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359be76ebbc75fd04b7476d764ecf2a34ac48b8b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=359be76ebbc75fd04b7476d764ecf2a34ac48b8b", "patch": "@@ -1672,6 +1672,8 @@ static tree cp_parser_simple_type_specifier\n   (cp_parser *, cp_decl_specifier_seq *, cp_parser_flags);\n static tree cp_parser_type_name\n   (cp_parser *);\n+static tree cp_parser_nonclass_name \n+  (cp_parser* parser);\n static tree cp_parser_elaborated_type_specifier\n   (cp_parser *, bool, bool);\n static tree cp_parser_enum_specifier\n@@ -5171,8 +5173,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n \t}\n \n       /* Look for the type-name.  */\n-      *scope = TREE_TYPE (cp_parser_type_name (parser));\n-\n+      *scope = TREE_TYPE (cp_parser_nonclass_name (parser));\n       if (*scope == error_mark_node)\n \treturn;\n \n@@ -5186,7 +5187,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n   cp_parser_require (parser, CPP_COMPL, \"`~'\");\n   /* Look for the type-name again.  We are not responsible for\n      checking that it matches the first type-name.  */\n-  *type = cp_parser_type_name (parser);\n+  *type = cp_parser_nonclass_name (parser);\n }\n \n /* Parse a unary-expression.\n@@ -10947,7 +10948,6 @@ static tree\n cp_parser_type_name (cp_parser* parser)\n {\n   tree type_decl;\n-  tree identifier;\n \n   /* We can't know yet whether it is a class-name or not.  */\n   cp_parser_parse_tentatively (parser);\n@@ -10963,44 +10963,64 @@ cp_parser_type_name (cp_parser* parser)\n   if (!cp_parser_parse_definitely (parser))\n     {\n       /* It must be a typedef-name or an enum-name.  */\n-      identifier = cp_parser_identifier (parser);\n-      if (identifier == error_mark_node)\n-\treturn error_mark_node;\n+      return cp_parser_nonclass_name (parser);\n+    }\n \n-      /* Look up the type-name.  */\n-      type_decl = cp_parser_lookup_name_simple (parser, identifier);\n+  return type_decl;\n+}\n \n-      if (TREE_CODE (type_decl) != TYPE_DECL\n-\t  && (objc_is_id (identifier) || objc_is_class_name (identifier)))\n-\t{\n-\t  /* See if this is an Objective-C type.  */\n-\t  tree protos = cp_parser_objc_protocol_refs_opt (parser);\n-\t  tree type = objc_get_protocol_qualified_type (identifier, protos);\n-\t  if (type)\n-\t    type_decl = TYPE_NAME (type);\n-\t}\n+/* Parse a non-class type-name, that is, either an enum-name or a typedef-name.\n \n-      /* Issue an error if we did not find a type-name.  */\n-      if (TREE_CODE (type_decl) != TYPE_DECL)\n-\t{\n-\t  if (!cp_parser_simulate_error (parser))\n-\t    cp_parser_name_lookup_error (parser, identifier, type_decl,\n-\t\t\t\t\t \"is not a type\");\n-\t  type_decl = error_mark_node;\n-\t}\n-      /* Remember that the name was used in the definition of the\n-\t current class so that we can check later to see if the\n-\t meaning would have been different after the class was\n-\t entirely defined.  */\n-      else if (type_decl != error_mark_node\n-\t       && !parser->scope)\n-\tmaybe_note_name_used_in_class (identifier, type_decl);\n-    }\n+   enum-name:\n+     identifier\n+\n+   typedef-name:\n+     identifier\n+\n+   Returns a TYPE_DECL for the type.  */\n \n+static tree\n+cp_parser_nonclass_name (cp_parser* parser)\n+{\n+  tree type_decl;\n+  tree identifier;\n+\n+  identifier = cp_parser_identifier (parser);\n+  if (identifier == error_mark_node)\n+    return error_mark_node;\n+\n+  /* Look up the type-name.  */\n+  type_decl = cp_parser_lookup_name_simple (parser, identifier);\n+\n+  if (TREE_CODE (type_decl) != TYPE_DECL\n+      && (objc_is_id (identifier) || objc_is_class_name (identifier)))\n+    {\n+      /* See if this is an Objective-C type.  */\n+      tree protos = cp_parser_objc_protocol_refs_opt (parser);\n+      tree type = objc_get_protocol_qualified_type (identifier, protos);\n+      if (type)\n+\ttype_decl = TYPE_NAME (type);\n+    }\n+  \n+  /* Issue an error if we did not find a type-name.  */\n+  if (TREE_CODE (type_decl) != TYPE_DECL)\n+    {\n+      if (!cp_parser_simulate_error (parser))\n+\tcp_parser_name_lookup_error (parser, identifier, type_decl,\n+\t\t\t\t     \"is not a type\");\n+      return error_mark_node;\n+    }\n+  /* Remember that the name was used in the definition of the\n+     current class so that we can check later to see if the\n+     meaning would have been different after the class was\n+     entirely defined.  */\n+  else if (type_decl != error_mark_node\n+\t   && !parser->scope)\n+    maybe_note_name_used_in_class (identifier, type_decl);\n+  \n   return type_decl;\n }\n \n-\n /* Parse an elaborated-type-specifier.  Note that the grammar given\n    here incorporates the resolution to DR68.\n "}]}