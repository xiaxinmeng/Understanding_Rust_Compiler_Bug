{"sha": "8b670f93ab11361ae88a22fea4f96c770afb6311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2NzBmOTNhYjExMzYxYWU4OGEyMmZlYTRmOTZjNzcwYWZiNjMxMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2017-01-31T10:30:47Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2017-01-31T10:30:47Z"}, "message": "re PR tree-optimization/71691 (wrong code at -O3 in both 32-bit and 64-bit modes on x86_64-linux-gnu (Floating point exception))\n\n\tPR tree-optimization/71691\n\t* bitmap.h (class auto_bitmap): New.\n\t* tree-ssa-loop-unswitch.c (tree_may_unswitch_on): Call\n\tis_maybe_undefined instead of ssa_undefined_value_p.\n\nFrom-SVN: r245057", "tree": {"sha": "36ec292abbd9b98c6a30917ff5375daaefcbd37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ec292abbd9b98c6a30917ff5375daaefcbd37e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b670f93ab11361ae88a22fea4f96c770afb6311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b670f93ab11361ae88a22fea4f96c770afb6311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b670f93ab11361ae88a22fea4f96c770afb6311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b670f93ab11361ae88a22fea4f96c770afb6311/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4727e06bb7c047a10aa502c829b7e4b519d8082b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4727e06bb7c047a10aa502c829b7e4b519d8082b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4727e06bb7c047a10aa502c829b7e4b519d8082b"}], "stats": {"total": 172, "additions": 167, "deletions": 5}, "files": [{"sha": "1ba1eb67ebde3df7586a5de081bae5fd7fd7ced3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -1,3 +1,10 @@\n+2017-01-31  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/71691\n+\t* bitmap.h (class auto_bitmap): New.\n+\t* tree-ssa-loop-unswitch.c (tree_may_unswitch_on): Call\n+\tis_maybe_undefined instead of ssa_undefined_value_p.\n+\n 2017-01-31  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Rename"}, {"sha": "f158b44735787252c9c57c5307a808bacae21574", "filename": "gcc/bitmap.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -802,4 +802,25 @@ bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)\n        bmp_iter_and_compl (&(ITER), &(BITNUM));\t\t\t\t\\\n        bmp_iter_next (&(ITER), &(BITNUM)))\n \n+/* A class that ties the lifetime of a bitmap to its scope.  */\n+class auto_bitmap\n+{\n+ public:\n+  auto_bitmap () { bits = BITMAP_ALLOC (NULL); }\n+  ~auto_bitmap () { BITMAP_FREE (bits); }\n+  // Allow calling bitmap functions on our bitmap.\n+  operator bitmap () { return bits; }\n+\n+ private:\n+  // Prevent making a copy that references our bitmap.\n+  auto_bitmap (const auto_bitmap &);\n+  auto_bitmap &operator = (const auto_bitmap &);\n+#if __cplusplus >= 201103L\n+  auto_bitmap (auto_bitmap &&);\n+  auto_bitmap &operator = (auto_bitmap &&);\n+#endif\n+\n+  bitmap bits;\n+};\n+\n #endif /* GCC_BITMAP_H */"}, {"sha": "fef5e87b9afd6d2eee0fb132158b14cf887ab4ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -1,3 +1,8 @@\n+2017-01-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/71691\n+\t* gcc.dg/loop-unswitch-5.c: Test that we actually unswitch a loop.\n+\n 2017-01-31  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/s390.exp: Rename __S390_ARCH_LEVEL__ to"}, {"sha": "f6fc41d6bcccb6d4c12969eb861f7e255ab8ab1a", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -1,6 +1,6 @@\n /* For PR rtl-optimization/27735  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n \n void set_color(void);\n void xml_colorize_line(unsigned int *p, int state)\n@@ -32,3 +32,5 @@ parse_tag: ;\n     }\n }\n \n+/* Test that we actually unswitched something.  */\n+/* { dg-final { scan-tree-dump \";; Unswitching loop\" \"unswitch\" } } */"}, {"sha": "b41e85379ae6e29ce45edf48039dfa1517814f1c", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -0,0 +1,51 @@\n+/* PR middle-end/71691 */\n+/* { dg-do run } */\n+/* { dg-options \"-fno-tree-vrp -O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+\n+/* Note: The -fno-tree-vrp above is only there to avoid VRP papering\n+   over the problem.  */\n+\n+char b;\n+short f;\n+unsigned e;\n+int g = 20;\n+\n+void\n+foo ()\n+{\n+  int l, h;\n+  for (l = 0; l <= 7; l++)\n+    {\n+      int j = 38;\n+      if (g)\n+\th = 0;\n+      for (; h <= 7; h++)\n+\t{\n+\t  int i, k = b % (j % 4);\n+\t  g = f;\n+\t  for (;;)\n+\t    {\n+\t      j = 6 || b;\n+\t      if (e)\n+\t\t{\n+\t\t  for (; j; --j)\n+\t\t    if (k)\n+\t\t      __builtin_printf (\"%d\", 9);\n+\t\t  if (i)\n+\t\t    __builtin_printf (\"%d\", j);\n+\t\t}\n+\t      if (l)\n+\t\tcontinue;\n+\t      break;\n+\t    }\n+\t  i = f || b;\n+\t}\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "4ef3a6bf80ada3659e7a0af6851cc0fb621d71b8", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 80, "deletions": 4, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b670f93ab11361ae88a22fea4f96c770afb6311/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=8b670f93ab11361ae88a22fea4f96c770afb6311", "patch": "@@ -109,6 +109,82 @@ tree_ssa_unswitch_loops (void)\n   return 0;\n }\n \n+/* Return TRUE if an SSA_NAME maybe undefined and is therefore\n+   unsuitable for unswitching.  STMT is the statement we are\n+   considering for unswitching and LOOP is the loop it appears in.  */\n+\n+static bool\n+is_maybe_undefined (const tree name, gimple *stmt, struct loop *loop)\n+{\n+  /* The loop header is the only block we can trivially determine that\n+     will always be executed.  If the comparison is in the loop\n+     header, we know it's OK to unswitch on it.  */\n+  if (gimple_bb (stmt) == loop->header)\n+    return false;\n+\n+  auto_bitmap visited_ssa;\n+  auto_vec<tree> worklist;\n+  worklist.safe_push (name);\n+  bitmap_set_bit (visited_ssa, SSA_NAME_VERSION (name));\n+  while (!worklist.is_empty ())\n+    {\n+      tree t = worklist.pop ();\n+\n+      /* If it's obviously undefined, avoid further computations.  */\n+      if (ssa_undefined_value_p (t, true))\n+\treturn true;\n+\n+      /* A PARM_DECL will not have an SSA_NAME_DEF_STMT.  Parameters\n+\t get their initial value from function entry.  */\n+      if (SSA_NAME_VAR (t) && TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL)\n+\tcontinue;\n+\n+      gimple *def = SSA_NAME_DEF_STMT (t);\n+\n+      /* Check that all the PHI args are fully defined.  */\n+      if (gphi *phi = dyn_cast <gphi *> (def))\n+\t{\n+\t  for (unsigned i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t    {\n+\t      tree t = gimple_phi_arg_def (phi, i);\n+\t      /* If an SSA has already been seen, it may be a loop,\n+\t\t but we can continue and ignore this use.  Otherwise,\n+\t\t add the SSA_NAME to the queue and visit it later.  */\n+\t      if (TREE_CODE (t) == SSA_NAME\n+\t\t  && bitmap_set_bit (visited_ssa, SSA_NAME_VERSION (t)))\n+\t\tworklist.safe_push (t);\n+\t    }\n+\t  continue;\n+\t}\n+\n+      /* Uses in stmts always executed when the region header executes\n+\t are fine.  */\n+      if (dominated_by_p (CDI_DOMINATORS, loop->header, gimple_bb (def)))\n+\tcontinue;\n+\n+      /* Handle calls and memory loads conservatively.  */\n+      if (!is_gimple_assign (def)\n+\t  || (gimple_assign_single_p (def)\n+\t      && gimple_vuse (def)))\n+\treturn true;\n+\n+      /* Check that any SSA names used to define NAME are also fully\n+\t defined.  */\n+      use_operand_p use_p;\n+      ssa_op_iter iter;\n+      FOR_EACH_SSA_USE_OPERAND (use_p, def, iter, SSA_OP_USE)\n+\t{\n+\t  tree t = USE_FROM_PTR (use_p);\n+\t  /* If an SSA has already been seen, it may be a loop,\n+\t     but we can continue and ignore this use.  Otherwise,\n+\t     add the SSA_NAME to the queue and visit it later.  */\n+\t  if (bitmap_set_bit (visited_ssa, SSA_NAME_VERSION (t)))\n+\t    worklist.safe_push (t);\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Checks whether we can unswitch LOOP on condition at end of BB -- one of its\n    basic blocks (for what it means see comments below).  */\n \n@@ -136,15 +212,15 @@ tree_may_unswitch_on (basic_block bb, struct loop *loop)\n   /* Condition must be invariant.  */\n   FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE)\n     {\n-      /* Unswitching on undefined values would introduce undefined\n-\t behavior that the original program might never exercise.  */\n-      if (ssa_undefined_value_p (use, true))\n-\treturn NULL_TREE;\n       def = SSA_NAME_DEF_STMT (use);\n       def_bb = gimple_bb (def);\n       if (def_bb\n \t  && flow_bb_inside_loop_p (loop, def_bb))\n \treturn NULL_TREE;\n+      /* Unswitching on undefined values would introduce undefined\n+\t behavior that the original program might never exercise.  */\n+      if (is_maybe_undefined (use, stmt, loop))\n+\treturn NULL_TREE;\n     }\n \n   cond = build2 (gimple_cond_code (stmt), boolean_type_node,"}]}