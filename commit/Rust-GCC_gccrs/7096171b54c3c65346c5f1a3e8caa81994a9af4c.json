{"sha": "7096171b54c3c65346c5f1a3e8caa81994a9af4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5NjE3MWI1NGMzYzY1MzQ2YzVmMWEzZThjYWE4MTk5NGE5YWY0Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@cat.daikokuya.demon.co.uk", "date": "2001-06-23T11:34:41Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-06-23T11:34:41Z"}, "message": "cppmacro.c (make_string_token): Avoid warning.\n\n\t* cppmacro.c (make_string_token): Avoid warning.\n\t(cpp_macro_definition): Prepend the macro name.  Update\n\tcomments.\n\t* cppmain.c (cb_define, dump_macro): Update for changes\n\tto cpp_macro_definition.\n\nFrom-SVN: r43528", "tree": {"sha": "75b264967bade84449656edb690611175b697fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75b264967bade84449656edb690611175b697fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7096171b54c3c65346c5f1a3e8caa81994a9af4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7096171b54c3c65346c5f1a3e8caa81994a9af4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7096171b54c3c65346c5f1a3e8caa81994a9af4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7096171b54c3c65346c5f1a3e8caa81994a9af4c/comments", "author": null, "committer": null, "parents": [{"sha": "bc04d12c309d59314c19ecb7e103fc50852c793c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc04d12c309d59314c19ecb7e103fc50852c793c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc04d12c309d59314c19ecb7e103fc50852c793c"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "442c35d7f032e538ac68d9a2cc62578bdc275a78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7096171b54c3c65346c5f1a3e8caa81994a9af4c", "patch": "@@ -1,3 +1,11 @@\n+2001-06-23  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* cppmacro.c (make_string_token): Avoid warning.\n+\t(cpp_macro_definition): Prepend the macro name.  Update\n+\tcomments.\n+\t* cppmain.c (cb_define, dump_macro): Update for changes\n+\tto cpp_macro_definition.\n+\n Sat Jun 23 10:20:03 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* flow.c (attempt_auto_inc, try_pre_increment_1): Fix typo."}, {"sha": "e630850106ab94fea5724e4a8d625a49f6363056", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=7096171b54c3c65346c5f1a3e8caa81994a9af4c", "patch": "@@ -110,7 +110,7 @@ make_string_token (pool, token, text, len)\n   token->type = CPP_STRING;\n   token->val.str.text = buf;\n   token->val.str.len = quote_string (buf, text, len) - buf;\n-  token->val.str.text[token->val.str.len] = '\\0';\n+  buf[token->val.str.len] = '\\0';\n   token->flags = 0;\n }\n \n@@ -1549,9 +1549,10 @@ check_trad_stringification (pfile, macro, string)\n     }\n }\n \n-/* Returns the expansion of a macro, in a format suitable to be read\n-   back in again, and therefore also for DWARF 2 debugging info.\n-   Caller is expected to generate the \"#define NAME\" bit.  The\n+/* Returns the name, arguments and expansion of a macro, in a format\n+   suitable to be read back in again, and therefore also for DWARF 2\n+   debugging info.  e.g. \"PASTE(X, Y) X ## Y\", or \"MACNAME EXPANSION\".\n+   Caller is expected to generate the \"#define\" bit if needed.  The\n    returned text is temporary, and automatically freed later.  */\n \n const unsigned char *\n@@ -1565,15 +1566,16 @@ cpp_macro_definition (pfile, node)\n \n   if (node->type != NT_MACRO || (node->flags & NODE_BUILTIN))\n     {\n-      cpp_ice (pfile, \"invalid hash type %d in dump_definition\", node->type);\n+      cpp_ice (pfile, \"invalid hash type %d in cpp_macro_definition\", node->type);\n       return 0;\n     }\n \n   /* Calculate length.  */\n-  len = 1;\t\t\t/* ' ' */\n+  len = NODE_LEN (node) + 1;\t\t\t/* ' ' */\n   if (macro->fun_like)\n     {\n-      len += 3;\t\t/* \"()\" plus possible final \".\" of ellipsis.  */\n+      len += 3;\t\t/* \"()\" plus possible final \".\" of named\n+\t\t\t   varargs (we have + 2 below).  */\n       for (i = 0; i < macro->paramc; i++)\n \tlen += NODE_LEN (macro->params[i]) + 2; /* \", \" */\n     }\n@@ -1597,7 +1599,11 @@ cpp_macro_definition (pfile, node)\n       pfile->macro_buffer = (U_CHAR *) xrealloc (pfile->macro_buffer, len);\n       pfile->macro_buffer_len = len;\n     }\n+\n+  /* Fill in the buffer.  Start with the macro name.  */\n   buffer = pfile->macro_buffer;\n+  memcpy (buffer, NODE_NAME (node), NODE_LEN (node));\n+  buffer += NODE_LEN (node);\n \n   /* Parameter names.  */\n   if (macro->fun_like)"}, {"sha": "b946a8e66eecf28f372a87112ea9f06cf10d2d90", "filename": "gcc/cppmain.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7096171b54c3c65346c5f1a3e8caa81994a9af4c/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=7096171b54c3c65346c5f1a3e8caa81994a9af4c", "patch": "@@ -364,11 +364,13 @@ cb_define (pfile, node)\n      cpp_hashnode *node;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n-  fprintf (print.outf, \"#define %s\", NODE_NAME (node));\n+  fputs (\"#define \", print.outf);\n \n   /* -dD command line option.  */\n   if (options->dump_macros == dump_definitions)\n     fputs ((const char *) cpp_macro_definition (pfile, node), print.outf);\n+  else\n+    fputs ((const char *) NODE_NAME (node), print.outf);\n \n   putc ('\\n', print.outf);\n   print.lineno++;\n@@ -446,7 +448,7 @@ dump_macro (pfile, node, v)\n {\n   if (node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n     {\n-      fprintf (print.outf, \"#define %s\", NODE_NAME (node));\n+      fputs (\"#define \", print.outf);\n       fputs ((const char *) cpp_macro_definition (pfile, node), print.outf);\n       putc ('\\n', print.outf);\n       print.lineno++;"}]}