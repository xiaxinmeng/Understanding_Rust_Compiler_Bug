{"sha": "e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlNzlhMTg4YTRhYTE5YTc4M2MzZGY4OWFhOWNiZDY0NDQ3NzdjMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-09-26T15:31:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-09-26T15:31:50Z"}, "message": "re PR tree-optimization/33563 (DSE removes non-dead store)\n\n2007-09-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33563\n\t* tree-ssa-dse.c (get_use_of_stmt_lhs): Rename to ...\n\t(get_kill_of_stmt_lhs): ... this.  Re-structure.  Handle\n\taggregate stores.\n\t(dse_optimize_stmt): Call get_kill_of_stmt_lhs instead of\n\tget_use_of_stmt_lhs.\n\n\t* gcc.dg/torture/pr33563.c: New testcase.\n\nFrom-SVN: r128815", "tree": {"sha": "cb57fd79265dda77cbf965d7bad38e0f3baff85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb57fd79265dda77cbf965d7bad38e0f3baff85e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68b72a44655ec21cbe3edbf0443d4949ffa6b174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b72a44655ec21cbe3edbf0443d4949ffa6b174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b72a44655ec21cbe3edbf0443d4949ffa6b174"}], "stats": {"total": 127, "additions": 81, "deletions": 46}, "files": [{"sha": "a85f8fcadc85d5263b2aa98d357a07fdd785672a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "patch": "@@ -1,3 +1,12 @@\n+2007-09-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33563\n+\t* tree-ssa-dse.c (get_use_of_stmt_lhs): Rename to ...\n+\t(get_kill_of_stmt_lhs): ... this.  Re-structure.  Handle\n+\taggregate stores.\n+\t(dse_optimize_stmt): Call get_kill_of_stmt_lhs instead of\n+\tget_use_of_stmt_lhs.\n+\n 2007-09-26  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/25309"}, {"sha": "22bdef285dfd467eff323b0dab9d77f3f369cb65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "patch": "@@ -1,3 +1,8 @@\n+2007-09-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33563\n+\t* gcc.dg/torture/pr33563.c: New testcase.\n+\n 2007-09-26  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/25309"}, {"sha": "47907db7ea6841b8a0a55b1da6e056b875b60d31", "filename": "gcc/testsuite/gcc.dg/torture/pr33563.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr33563.c?ref=e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"--param max-aliased-vops=0\" } */\n+\n+struct T\n+{\n+  int a, b;\n+} t, q;\n+\n+int main (void)\n+{\n+  struct T *p;\n+\n+  t.a = 1;\n+  t.b = 2;\n+  q = t;\n+  t.a = 3;\n+\n+  if (q.a != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "f5399f17a22c7793d66b0ae43d322eec6747e65f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e79a188a4aa19a783c3df89aa9cbd6444777c3/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=e2e79a188a4aa19a783c3df89aa9cbd6444777c3", "patch": "@@ -210,62 +210,62 @@ memory_address_same (tree store1, tree store2)\n \t  == NULL);\n }\n \n-/* Return the use stmt for the lhs of STMT following the virtual\n-   def-use chains.  Returns the MODIFY_EXPR stmt which lhs is equal to\n-   the lhs of STMT or NULL_TREE if no such stmt can be found.  */\n-static tree \n-get_use_of_stmt_lhs (tree stmt,\n-\t\t     use_operand_p * first_use_p,\n-\t\t     use_operand_p * use_p, tree * use_stmt)\n+/* Return true if there is a stmt that kills the lhs of STMT and is in the\n+   virtual def-use chain of STMT without a use inbetween the kill and STMT.\n+   Returns false if no such stmt is found.\n+   *FIRST_USE_P is set to the first use of the single virtual def of\n+   STMT.  *USE_P is set to the vop killed by *USE_STMT.  */\n+\n+static bool\n+get_kill_of_stmt_lhs (tree stmt,\n+\t\t      use_operand_p * first_use_p,\n+ \t\t      use_operand_p * use_p, tree * use_stmt)\n {\n-  tree usevar, lhs;\n-  def_operand_p def_p;\n+  tree lhs;\n \n-  if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n-    return NULL_TREE;\n+  gcc_assert (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT);\n \n   lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n \n-  /* The stmt must have a single VDEF.  */\n-  def_p = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_VDEF);\n-  if (def_p == NULL_DEF_OPERAND_P)\n-    return NULL_TREE;\n-\n-  if (!has_single_use (DEF_FROM_PTR (def_p)))\n-    return NULL_TREE;\n-  /* Get the immediate use of the def.  */\n-  single_imm_use (DEF_FROM_PTR (def_p), use_p, use_stmt);\n-  gcc_assert (*use_p != NULL_USE_OPERAND_P);\n-  first_use_p = use_p;\n-\n-  /* If the use is not simple, give up.  */\n-  if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT\n-      || get_call_expr_in (*use_stmt))\n-    return NULL_TREE;\n-\n+  /* We now walk the chain of single uses of the single VDEFs.\n+     We succeeded finding a kill if the lhs of the use stmt is\n+     equal to the original lhs.  We can keep walking to the next\n+     use if there are no possible uses of the original lhs in\n+     the stmt.  */\n   do\n     {\n-      /* Look at the use stmt and see if it's LHS matches\n-         stmt's lhs SSA_NAME.  */\n-      def_p = SINGLE_SSA_DEF_OPERAND (*use_stmt, SSA_OP_VDEF);\n+      tree use_lhs, use_rhs;\n+      def_operand_p def_p;\n+\n+      /* The stmt must have a single VDEF.  */\n+      def_p = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_VDEF);\n       if (def_p == NULL_DEF_OPERAND_P)\n-\treturn NULL_TREE;\n+\treturn false;\n \n-      usevar = GIMPLE_STMT_OPERAND (*use_stmt, 0);\n-      if (operand_equal_p (usevar, lhs, 0))\n-\treturn *use_stmt;\n+      /* Get the single immediate use of the def.  */\n+      if (!single_imm_use (DEF_FROM_PTR (def_p), first_use_p, &stmt))\n+\treturn false;\n+      first_use_p = use_p;\n \n-      if (!has_single_use (DEF_FROM_PTR (def_p)))\n-\treturn NULL_TREE;\n-      single_imm_use (DEF_FROM_PTR (def_p), use_p, use_stmt);\n-      gcc_assert (*use_p != NULL_USE_OPERAND_P);\n-      if (TREE_CODE (*use_stmt) != GIMPLE_MODIFY_STMT\n-\t  || get_call_expr_in (*use_stmt))\n-\treturn NULL_TREE;\n+      /* If there are possible hidden uses, give up.  */\n+      if (TREE_CODE (stmt) != GIMPLE_MODIFY_STMT)\n+\treturn false;\n+      use_rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n+      if (TREE_CODE (use_rhs) == CALL_EXPR\n+\t  || (!is_gimple_min_invariant (use_rhs)\n+\t      && TREE_CODE (use_rhs) != SSA_NAME))\n+\treturn false;\n+\n+      /* If the use stmts lhs matches the original lhs we have\n+\t found the kill, otherwise continue walking.  */\n+      use_lhs = GIMPLE_STMT_OPERAND (stmt, 0);\n+      if (operand_equal_p (use_lhs, lhs, 0))\n+\t{\n+\t  *use_stmt = stmt;\n+\t  return true;\n+\t}\n     }\n   while (1);\n-\n-  return NULL_TREE;\n }\n \n /* A helper of dse_optimize_stmt.\n@@ -448,8 +448,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n              the stores are not to the same memory location then walk the\n              virtual def-use chain to get the stmt which stores to that same\n              memory location.  */\n-          if (get_use_of_stmt_lhs (stmt, &first_use_p, &use_p, &use_stmt) ==\n-              NULL_TREE)\n+          if (!get_kill_of_stmt_lhs (stmt, &first_use_p, &use_p, &use_stmt))\n             {\n               record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n               return;"}]}