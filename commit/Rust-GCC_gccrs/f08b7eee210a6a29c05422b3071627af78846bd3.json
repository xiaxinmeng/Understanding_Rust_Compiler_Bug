{"sha": "f08b7eee210a6a29c05422b3071627af78846bd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4YjdlZWUyMTBhNmEyOWMwNTQyMmIzMDcxNjI3YWY3ODg0NmJkMw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-09-20T02:40:51Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-09-20T02:40:51Z"}, "message": "cp-demangle.c (demangling_new): Cast 0 to enum.\n\n\t* cp-demangle.c (demangling_new): Cast 0 to enum.\n\t(demangle_char): Cast return of strdup to char *.\n\t(is_gnu_v3_mangled_ctor): Cast 0 to enum.\n\t(is_gnu_v3_mangled_dtor): Likewise.\n\t* cplus-dem.c (grow_vect): Cast return of xrealloc to void *.\n\t(work_stuff_copy_to_from): Cast return of xmalloc to char **.\n\t* fibheap.c (fibnode_new): Cast return of xcalloc to fibnode_t.\n\t* md5.c (md5_process_bytes): Cast results back to const void *.\n\t(md5_process_block): Add cast to const md5_uint32 *.\n\t* regex.c (re_compile_fastmap): Cast enum to UCHAR_T.\n\t* safe-ctype.c (L, XL, U, XU, D, P, _, C, Z, M, V, T, S): Add cast to\n\tunsigned short.\n\t* splay-tree.c (splay_tree_xmalloc_allocate): Cast return of xmalloc\n\tto void *.\n\t* vasprintf.c (int_vasprintf): Cast return of malloc to char *.\n\nFrom-SVN: r57330", "tree": {"sha": "2cc3e32f246091f5d7f5c53195c08cfff1730da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cc3e32f246091f5d7f5c53195c08cfff1730da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08b7eee210a6a29c05422b3071627af78846bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08b7eee210a6a29c05422b3071627af78846bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08b7eee210a6a29c05422b3071627af78846bd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08b7eee210a6a29c05422b3071627af78846bd3/comments", "author": null, "committer": null, "parents": [{"sha": "e9ad2ad310ecb5447dfbfb62ef611ca98dbc4bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ad2ad310ecb5447dfbfb62ef611ca98dbc4bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ad2ad310ecb5447dfbfb62ef611ca98dbc4bad"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "efed5c66dbb57cc633d7fbf828be10e248534c1f", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -1,3 +1,21 @@\n+2002-09-19  John David Anglin  <dave@hiuly1.hia.nrc.ca>\n+\n+\t* cp-demangle.c (demangling_new): Cast 0 to enum.\n+\t(demangle_char): Cast return of strdup to char *.\n+\t(is_gnu_v3_mangled_ctor): Cast 0 to enum.\n+\t(is_gnu_v3_mangled_dtor): Likewise.\n+\t* cplus-dem.c (grow_vect): Cast return of xrealloc to void *.\n+\t(work_stuff_copy_to_from): Cast return of xmalloc to char **.\n+\t* fibheap.c (fibnode_new): Cast return of xcalloc to fibnode_t.\n+\t* md5.c (md5_process_bytes): Cast results back to const void *.\n+\t(md5_process_block): Add cast to const md5_uint32 *.\n+\t* regex.c (re_compile_fastmap): Cast enum to UCHAR_T.\n+\t* safe-ctype.c (L, XL, U, XU, D, P, _, C, Z, M, V, T, S): Add cast to\n+\tunsigned short.\n+\t* splay-tree.c (splay_tree_xmalloc_allocate): Cast return of xmalloc\n+\tto void *.\n+\t* vasprintf.c (int_vasprintf): Cast return of malloc to char *.\n+\n 2002-09-19  Nick Clifton  <nickc@redhat.com>\n \n \t* README: Update email addresses for bugs and patches."}, {"sha": "9adf5fd05031df5579405cfb4d8ec9bae7a1906e", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -835,8 +835,8 @@ demangling_new (name, style)\n       return NULL;\n     }\n   dm->style = style;\n-  dm->is_constructor = 0;\n-  dm->is_destructor = 0;\n+  dm->is_constructor = (enum gnu_v3_ctor_kinds) 0;\n+  dm->is_destructor = (enum gnu_v3_dtor_kinds) 0;\n \n   return dm;\n }\n@@ -974,7 +974,7 @@ demangle_char (dm, c)\n   else\n     {\n       if (error_message == NULL)\n-\terror_message = strdup (\"Expected ?\");\n+\terror_message = (char *) strdup (\"Expected ?\");\n       error_message[9] = c;\n       return error_message;\n     }\n@@ -3974,7 +3974,7 @@ is_gnu_v3_mangled_ctor (name)\n       return result;\n     }\n   else\n-    return 0;\n+    return (enum gnu_v3_ctor_kinds) 0;\n }\n \n \n@@ -3996,7 +3996,7 @@ is_gnu_v3_mangled_dtor (name)\n       return result;\n     }\n   else\n-    return 0;\n+    return (enum gnu_v3_dtor_kinds) 0;\n }\n #endif /* IN_GLIBCPP_V3 */\n "}, {"sha": "4c4778375b0579b51b80971d43cc494ec743c94d", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -946,7 +946,7 @@ grow_vect (old_vect, size, min_size, element_size)\n       *size *= 2;\n       if (*size < min_size)\n \t*size = min_size;\n-      *old_vect = xrealloc (*old_vect, *size * element_size);\n+      *old_vect = (void *) xrealloc (*old_vect, *size * element_size);\n     }\n }\n \n@@ -1206,7 +1206,7 @@ work_stuff_copy_to_from (to, from)\n \n   if (from->ntmpl_args)\n     to->tmpl_argvec\n-      = xmalloc (from->ntmpl_args * sizeof (to->tmpl_argvec[0]));\n+      = (char **) xmalloc (from->ntmpl_args * sizeof (to->tmpl_argvec[0]));\n \n   for (i = 0; i < from->ntmpl_args; i++)\n     {"}, {"sha": "36062d451a23ab1b6e60b8ccf10f5e7e38a131d6", "filename": "libiberty/fibheap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Ffibheap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Ffibheap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffibheap.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -66,7 +66,7 @@ fibnode_new ()\n {\n   fibnode_t node;\n \n-  node = xcalloc (1, sizeof *node);\n+  node = (fibnode_t) xcalloc (1, sizeof *node);\n   node->left = node;\n   node->right = node;\n "}, {"sha": "2e829fb3ee125de210516be5a0eb11e8b5b4ece4", "filename": "libiberty/md5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fmd5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fmd5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmd5.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -229,15 +229,15 @@ md5_process_bytes (buffer, len, ctx)\n \t  ctx->buflen = (left_over + add) & 63;\n \t}\n \n-      buffer = (const char *) buffer + add;\n+      buffer = (const void *) ((const char *) buffer + add);\n       len -= add;\n     }\n \n   /* Process available complete blocks.  */\n   if (len > 64)\n     {\n       md5_process_block (buffer, len & ~63, ctx);\n-      buffer = (const char *) buffer + (len & ~63);\n+      buffer = (const void *) ((const char *) buffer + (len & ~63));\n       len &= 63;\n     }\n \n@@ -269,7 +269,7 @@ md5_process_block (buffer, len, ctx)\n      struct md5_ctx *ctx;\n {\n   md5_uint32 correct_words[16];\n-  const md5_uint32 *words = buffer;\n+  const md5_uint32 *words = (const md5_uint32 *) buffer;\n   size_t nwords = len / sizeof (md5_uint32);\n   const md5_uint32 *endp = words + nwords;\n   md5_uint32 A = ctx->A;"}, {"sha": "f9d9a4e26dce9b3c73f916b8695564c84398b548", "filename": "libiberty/regex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fregex.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -4648,7 +4648,7 @@ PREFIX(re_compile_fastmap) (bufp)\n \n   while (1)\n     {\n-      if (p == pend || *p == succeed)\n+      if (p == pend || *p == (UCHAR_T) succeed)\n \t{\n \t  /* We have reached the (effective) end of pattern.  */\n \t  if (!FAIL_STACK_EMPTY ())"}, {"sha": "3bac84bf68ac79c156fa6a1ea12ffed330e5a3ec", "filename": "libiberty/safe-ctype.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fsafe-ctype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fsafe-ctype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsafe-ctype.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -48,20 +48,20 @@ Boston, MA 02111-1307, USA.  */\n #define xd _sch_isxdigit\n \n /* Masks.  */\n-#define L  lo|is   |pr\t/* lower case letter */\n-#define XL lo|is|xd|pr\t/* lowercase hex digit */\n-#define U  up|is   |pr\t/* upper case letter */\n-#define XU up|is|xd|pr\t/* uppercase hex digit */\n-#define D  di   |xd|pr\t/* decimal digit */\n-#define P  pn      |pr\t/* punctuation */\n-#define _  pn|is   |pr\t/* underscore */\n-\n-#define C           cn\t/* control character */\n-#define Z  nv      |cn\t/* NUL */\n-#define M  nv|sp   |cn\t/* cursor movement: \\f \\v */\n-#define V  vs|sp   |cn\t/* vertical space: \\r \\n */\n-#define T  nv|sp|bl|cn\t/* tab */\n-#define S  nv|sp|bl|pr\t/* space */\n+#define L  (const unsigned short) (lo|is   |pr)\t/* lower case letter */\n+#define XL (const unsigned short) (lo|is|xd|pr)\t/* lowercase hex digit */\n+#define U  (const unsigned short) (up|is   |pr)\t/* upper case letter */\n+#define XU (const unsigned short) (up|is|xd|pr)\t/* uppercase hex digit */\n+#define D  (const unsigned short) (di   |xd|pr)\t/* decimal digit */\n+#define P  (const unsigned short) (pn      |pr)\t/* punctuation */\n+#define _  (const unsigned short) (pn|is   |pr)\t/* underscore */\n+\n+#define C  (const unsigned short) (         cn)\t/* control character */\n+#define Z  (const unsigned short) (nv      |cn)\t/* NUL */\n+#define M  (const unsigned short) (nv|sp   |cn)\t/* cursor movement: \\f \\v */\n+#define V  (const unsigned short) (vs|sp   |cn)\t/* vertical space: \\r \\n */\n+#define T  (const unsigned short) (nv|sp|bl|cn)\t/* tab */\n+#define S  (const unsigned short) (nv|sp|bl|pr)\t/* space */\n \n /* Are we ASCII? */\n #if '\\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \\"}, {"sha": "6f90fde05fba2892cafe3a4d1d1f2f800c3fb730", "filename": "libiberty/splay-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fsplay-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fsplay-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsplay-tree.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -234,7 +234,7 @@ splay_tree_xmalloc_allocate (size, data)\n      int size;\n      void *data ATTRIBUTE_UNUSED;\n {\n-  return xmalloc (size);\n+  return (void *) xmalloc (size);\n }\n \n static void"}, {"sha": "aa20e5bff00214eaaa1c636f83116920f4a9b1b4", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08b7eee210a6a29c05422b3071627af78846bd3/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=f08b7eee210a6a29c05422b3071627af78846bd3", "patch": "@@ -138,7 +138,7 @@ int_vasprintf (result, format, args)\n #ifdef TEST\n   global_total_width = total_width;\n #endif\n-  *result = malloc (total_width);\n+  *result = (char *) malloc (total_width);\n   if (*result != NULL)\n     return vsprintf (*result, format, *args);\n   else"}]}