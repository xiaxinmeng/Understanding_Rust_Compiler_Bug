{"sha": "e054a1852bf903139a80f34c726453d34338e008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1NGExODUyYmY5MDMxMzlhODBmMzRjNzI2NDUzZDM0MzM4ZTAwOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-03T13:36:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-03T13:36:36Z"}, "message": "Rename DR_ALIGNED_TO to DR_OFFSET_ALIGNMENT\n\nThis patch renames DR_ALIGNED_TO to DR_OFFSET_ALIGNMENT, to avoid\nconfusion with the upcoming DR_BASE_ALIGNMENT.  Nothing needed the\nvalue as a tree, and the value is clipped to BIGGEST_ALIGNMENT\n(maybe it should be MAX_OFILE_ALIGNMENT?) so we might as well use\nan unsigned int instead.\n\n2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-data-ref.h (innermost_loop_behavior): Replace aligned_to\n\twith offset_alignment.\n\t(DR_ALIGNED_TO): Delete.\n\t(DR_OFFSET_ALIGNMENT): New macro.\n\t* tree-vectorizer.h (STMT_VINFO_DR_ALIGNED_TO): Delete.\n\t(STMT_VINFO_DR_OFFSET_ALIGNMENT): New macro.\n\t* tree-data-ref.c (dr_analyze_innermost): Update after above changes.\n\t(create_data_ref): Likewise.\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Likewise.\n\t(vect_analyze_data_refs): Likewise.\n\t* tree-if-conv.c (if_convertible_loop_p_1): Use memset before\n\tcreating dummy innermost behavior.\n\nFrom-SVN: r249914", "tree": {"sha": "9ee2b51ffa6bf4ef1f5d9c559af7e2a3b09a94f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee2b51ffa6bf4ef1f5d9c559af7e2a3b09a94f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e054a1852bf903139a80f34c726453d34338e008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e054a1852bf903139a80f34c726453d34338e008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e054a1852bf903139a80f34c726453d34338e008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e054a1852bf903139a80f34c726453d34338e008/comments", "author": null, "committer": null, "parents": [{"sha": "abbe3756cd2374d23be9b9937b33401d231eb9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbe3756cd2374d23be9b9937b33401d231eb9b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbe3756cd2374d23be9b9937b33401d231eb9b0"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "b063bb49ebe5fcffae1f609bb1000d9eb6fd3891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -1,3 +1,18 @@\n+2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-data-ref.h (innermost_loop_behavior): Replace aligned_to\n+\twith offset_alignment.\n+\t(DR_ALIGNED_TO): Delete.\n+\t(DR_OFFSET_ALIGNMENT): New macro.\n+\t* tree-vectorizer.h (STMT_VINFO_DR_ALIGNED_TO): Delete.\n+\t(STMT_VINFO_DR_OFFSET_ALIGNMENT): New macro.\n+\t* tree-data-ref.c (dr_analyze_innermost): Update after above changes.\n+\t(create_data_ref): Likewise.\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Likewise.\n+\t(vect_analyze_data_refs): Likewise.\n+\t* tree-if-conv.c (if_convertible_loop_p_1): Use memset before\n+\tcreating dummy innermost behavior.\n+\n 2017-07-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-data-ref.h (dr_analyze_innermost): Replace the dr argument"}, {"sha": "c5cf0acabae2040e8b27b4f011a463fdc65c6797", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -869,7 +869,7 @@ dr_analyze_innermost (innermost_loop_behavior *drb, tree ref,\n   drb->offset = fold_convert (ssizetype, offset_iv.base);\n   drb->init = init;\n   drb->step = step;\n-  drb->aligned_to = size_int (highest_pow2_factor (offset_iv.base));\n+  drb->offset_alignment = highest_pow2_factor (offset_iv.base);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"success.\\n\");\n@@ -1084,8 +1084,8 @@ create_data_ref (loop_p nest, loop_p loop, tree memref, gimple *stmt,\n       print_generic_expr (dump_file, DR_INIT (dr), TDF_SLIM);\n       fprintf (dump_file, \"\\n\\tstep: \");\n       print_generic_expr (dump_file, DR_STEP (dr), TDF_SLIM);\n-      fprintf (dump_file, \"\\n\\taligned to: \");\n-      print_generic_expr (dump_file, DR_ALIGNED_TO (dr), TDF_SLIM);\n+      fprintf (dump_file, \"\\n\\toffset alignment: %d\",\n+\t       DR_OFFSET_ALIGNMENT (dr));\n       fprintf (dump_file, \"\\n\\tbase_object: \");\n       print_generic_expr (dump_file, DR_BASE_OBJECT (dr), TDF_SLIM);\n       fprintf (dump_file, \"\\n\");"}, {"sha": "45ecf9bc1726c946fc8c9ba29864920fe4b3e341", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -52,9 +52,10 @@ struct innermost_loop_behavior\n   tree init;\n   tree step;\n \n-  /* Alignment information.  ALIGNED_TO is set to the largest power of two\n-     that divides OFFSET.  */\n-  tree aligned_to;\n+  /* The largest power of two that divides OFFSET, capped to a suitably\n+     high value if the offset is zero.  This is a byte rather than a bit\n+     quantity.  */\n+  unsigned int offset_alignment;\n };\n \n /* Describes the evolutions of indices of the memory reference.  The indices\n@@ -143,7 +144,7 @@ struct data_reference\n #define DR_INIT(DR)                (DR)->innermost.init\n #define DR_STEP(DR)                (DR)->innermost.step\n #define DR_PTR_INFO(DR)            (DR)->alias.ptr_info\n-#define DR_ALIGNED_TO(DR)          (DR)->innermost.aligned_to\n+#define DR_OFFSET_ALIGNMENT(DR)    (DR)->innermost.offset_alignment\n #define DR_INNERMOST(DR)           (DR)->innermost\n \n typedef struct data_reference *data_reference_p;"}, {"sha": "d78731f16783a659aaca57b89d361b603151fede", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -1441,11 +1441,8 @@ if_convertible_loop_p_1 (struct loop *loop, vec<data_reference_p> *refs)\n \t         || TREE_CODE (ref) == REALPART_EXPR)\n \t    ref = TREE_OPERAND (ref, 0);\n \n-          DR_BASE_ADDRESS (dr) = ref;\n-          DR_OFFSET (dr) = NULL;\n-          DR_INIT (dr) = NULL;\n-          DR_STEP (dr) = NULL;\n-          DR_ALIGNED_TO (dr) = NULL;\n+\t  memset (&DR_INNERMOST (dr), 0, sizeof (DR_INNERMOST (dr)));\n+\t  DR_BASE_ADDRESS (dr) = ref;\n         }\n       hash_memrefs_baserefs_and_store_DRs_read_written_info (dr);\n     }"}, {"sha": "091771cedbcee49a1a35c02c5d34085b73d86bed", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -772,7 +772,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \n   alignment = TYPE_ALIGN_UNIT (vectype);\n \n-  if ((compare_tree_int (drb->aligned_to, alignment) < 0)\n+  if (drb->offset_alignment < alignment\n       || !step_preserves_misalignment_p)\n     {\n       if (dump_enabled_p ())\n@@ -3412,8 +3412,8 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \t\t\t\t    {\n \t\t\t\t      DR_OFFSET (newdr) = ssize_int (0);\n \t\t\t\t      DR_STEP (newdr) = step;\n-\t\t\t\t      DR_ALIGNED_TO (newdr)\n-\t\t\t\t\t= size_int (BIGGEST_ALIGNMENT);\n+\t\t\t\t      DR_OFFSET_ALIGNMENT (newdr)\n+\t\t\t\t\t= BIGGEST_ALIGNMENT;\n \t\t\t\t      dr = newdr;\n \t\t\t\t      simd_lane_access = true;\n \t\t\t\t    }\n@@ -3644,8 +3644,8 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \t  STMT_VINFO_DR_INIT (stmt_info) = outer_init;\n \t  STMT_VINFO_DR_OFFSET (stmt_info) =\n \t\t\t\tfold_convert (ssizetype, offset_iv.base);\n-\t  STMT_VINFO_DR_ALIGNED_TO (stmt_info) =\n-\t\t\t\tsize_int (highest_pow2_factor (offset_iv.base));\n+\t  STMT_VINFO_DR_OFFSET_ALIGNMENT (stmt_info)\n+\t    = highest_pow2_factor (offset_iv.base);\n \n           if (dump_enabled_p ())\n \t    {\n@@ -3663,10 +3663,8 @@ vect_analyze_data_refs (vec_info *vinfo, int *min_vf)\n \t      dump_printf (MSG_NOTE, \"\\n\\touter step: \");\n \t      dump_generic_expr (MSG_NOTE, TDF_SLIM,\n                                  STMT_VINFO_DR_STEP (stmt_info));\n-\t      dump_printf (MSG_NOTE, \"\\n\\touter aligned to: \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM,\n-                                 STMT_VINFO_DR_ALIGNED_TO (stmt_info));\n-\t      dump_printf (MSG_NOTE, \"\\n\");\n+\t      dump_printf (MSG_NOTE, \"\\n\\touter offset alignment: %d\\n\",\n+\t\t\t   STMT_VINFO_DR_OFFSET_ALIGNMENT (stmt_info));\n \t    }\n \t}\n "}, {"sha": "15f5dc3a92558ad1cdc3336fdd78e82b8ddabff6", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e054a1852bf903139a80f34c726453d34338e008/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=e054a1852bf903139a80f34c726453d34338e008", "patch": "@@ -709,7 +709,8 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_DR_INIT(S)              (S)->dr_wrt_vec_loop.init\n #define STMT_VINFO_DR_OFFSET(S)            (S)->dr_wrt_vec_loop.offset\n #define STMT_VINFO_DR_STEP(S)              (S)->dr_wrt_vec_loop.step\n-#define STMT_VINFO_DR_ALIGNED_TO(S)        (S)->dr_wrt_vec_loop.aligned_to\n+#define STMT_VINFO_DR_OFFSET_ALIGNMENT(S) \\\n+  (S)->dr_wrt_vec_loop.offset_alignment\n \n #define STMT_VINFO_IN_PATTERN_P(S)         (S)->in_pattern_p\n #define STMT_VINFO_RELATED_STMT(S)         (S)->related_stmt"}]}