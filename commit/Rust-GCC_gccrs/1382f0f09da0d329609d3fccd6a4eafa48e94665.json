{"sha": "1382f0f09da0d329609d3fccd6a4eafa48e94665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4MmYwZjA5ZGEwZDMyOTYwOWQzZmNjZDZhNGVhZmE0OGU5NDY2NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-17T20:19:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-17T20:19:57Z"}, "message": "* fold-const.c (fold_relational_const): Use constant_boolean_node.\n\nFrom-SVN: r83307", "tree": {"sha": "bc170af4d8366927c41e6b65b1e754e6f985e975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc170af4d8366927c41e6b65b1e754e6f985e975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1382f0f09da0d329609d3fccd6a4eafa48e94665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1382f0f09da0d329609d3fccd6a4eafa48e94665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1382f0f09da0d329609d3fccd6a4eafa48e94665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1382f0f09da0d329609d3fccd6a4eafa48e94665/comments", "author": null, "committer": null, "parents": [{"sha": "801e227002b90184b6880619b00eec78007f4a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801e227002b90184b6880619b00eec78007f4a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801e227002b90184b6880619b00eec78007f4a30"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "946ef76dfbe1c433a3307b027e1022638107a1d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1382f0f09da0d329609d3fccd6a4eafa48e94665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1382f0f09da0d329609d3fccd6a4eafa48e94665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1382f0f09da0d329609d3fccd6a4eafa48e94665", "patch": "@@ -1,3 +1,7 @@\n+2004-06-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_relational_const): Use constant_boolean_node.\n+\n 2004-06-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/15433"}, {"sha": "3494d4af41c34fbcc5421b791df49ccc7212f5b0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1382f0f09da0d329609d3fccd6a4eafa48e94665/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1382f0f09da0d329609d3fccd6a4eafa48e94665/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1382f0f09da0d329609d3fccd6a4eafa48e94665", "patch": "@@ -9966,8 +9966,7 @@ fold_not_const (tree arg0, tree type)\n static tree\n fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n {\n-  tree tem;\n-  int invert;\n+  int result, invert;\n \n   /* From here on, the only cases we handle are when the result is\n      known to be a constant.\n@@ -9981,14 +9980,15 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n \n   if (code == LE_EXPR || code == GT_EXPR)\n     {\n-      tem = op0, op0 = op1, op1 = tem;\n+      tree tem = op0;\n+      op0 = op1;\n+      op1 = tem;\n       code = swap_tree_comparison (code);\n     }\n \n   /* Note that it is safe to invert for real values here because we\n      will check below in the one case that it matters.  */\n \n-  tem = NULL_TREE;\n   invert = 0;\n   if (code == NE_EXPR || code == GE_EXPR)\n     {\n@@ -10001,17 +10001,16 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n   if (TREE_CODE (op0) == INTEGER_CST && TREE_CODE (op1) == INTEGER_CST)\n     {\n       if (code == EQ_EXPR)\n-        tem = build_int_2 (tree_int_cst_equal (op0, op1), 0);\n+\tresult = tree_int_cst_equal (op0, op1);\n+      else if (TYPE_UNSIGNED (TREE_TYPE (op0)))\n+\tresult = INT_CST_LT_UNSIGNED (op0, op1);\n       else\n-        tem = build_int_2 ((TYPE_UNSIGNED (TREE_TYPE (op0))\n-\t\t\t    ? INT_CST_LT_UNSIGNED (op0, op1)\n-\t\t\t    : INT_CST_LT (op0, op1)),\n-\t\t\t   0);\n+\tresult = INT_CST_LT (op0, op1);\n     }\n \n   else if (code == EQ_EXPR && !TREE_SIDE_EFFECTS (op0)\n            && integer_zerop (op1) && tree_expr_nonzero_p (op0))\n-    tem = build_int_2 (0, 0);\n+    result = 0;\n \n   /* Two real constants can be compared explicitly.  */\n   else if (TREE_CODE (op0) == REAL_CST && TREE_CODE (op1) == REAL_CST)\n@@ -10025,28 +10024,21 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n \n       if (REAL_VALUE_ISNAN (TREE_REAL_CST (op0))\n           || REAL_VALUE_ISNAN (TREE_REAL_CST (op1)))\n-        tem = build_int_2 (invert && code == LT_EXPR, 0);\n+\tresult = invert && code == LT_EXPR;\n \n       else if (code == EQ_EXPR)\n-        tem = build_int_2 (REAL_VALUES_EQUAL (TREE_REAL_CST (op0),\n-\t\t\t\t\t      TREE_REAL_CST (op1)),\n-\t\t\t   0);\n+\tresult = REAL_VALUES_EQUAL (TREE_REAL_CST (op0),\n+\t\t\t\t    TREE_REAL_CST (op1));\n       else\n-        tem = build_int_2 (REAL_VALUES_LESS (TREE_REAL_CST (op0),\n-\t\t\t\t\t     TREE_REAL_CST (op1)),\n-\t\t\t   0);\n+\tresult = REAL_VALUES_LESS (TREE_REAL_CST (op0),\n+\t\t\t\t   TREE_REAL_CST (op1));\n     }\n-\n-  if (tem == NULL_TREE)\n+  else\n     return NULL_TREE;\n \n   if (invert)\n-    TREE_INT_CST_LOW (tem) ^= 1;\n-\n-  TREE_TYPE (tem) = type;\n-  if (TREE_CODE (type) == BOOLEAN_TYPE)\n-    return lang_hooks.truthvalue_conversion (tem);\n-  return tem;\n+    result ^= 1;\n+  return constant_boolean_node (result, type);\n }\n \n /* Build an expression for the address of T.  Folds away INDIRECT_REF to"}]}