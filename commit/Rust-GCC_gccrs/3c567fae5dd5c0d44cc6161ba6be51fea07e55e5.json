{"sha": "3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1NjdmYWU1ZGQ1YzBkNDRjYzYxNjFiYTZiZTUxZmVhMDdlNTVlNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-05-30T23:51:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-30T23:51:39Z"}, "message": "alias.c (find_base_term): Improve handling of addresses constructed from binary operations.\n\n        * alias.c (find_base_term): Improve handling of addresses\n        constructed from binary operations.\n\nFrom-SVN: r27263", "tree": {"sha": "5be7f88c52da36cd25e2163b4d94ea160ddd4246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be7f88c52da36cd25e2163b4d94ea160ddd4246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5/comments", "author": null, "committer": null, "parents": [{"sha": "71fb00565269ddc7398243b36f4615f601135e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71fb00565269ddc7398243b36f4615f601135e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71fb00565269ddc7398243b36f4615f601135e57"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "20ad9b64d37d0b79ba73bac62e127ee600da0860", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "patch": "@@ -1,3 +1,8 @@\n+Mon May 31 00:46:17 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* alias.c (find_base_term): Improve handling of addresses\n+\tconstructed from binary operations.\n+\n Sun May 30 14:29:17 1999  Eric Raskin (ehr@listworks.com)\n \n \t* dgux.h (STARTFILE_SPEC): Fix incorrectly matched curly-braces."}, {"sha": "9d8aac7832a481d6becc13c7509f788e2c98c0c4", "filename": "gcc/alias.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c567fae5dd5c0d44cc6161ba6be51fea07e55e5/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=3c567fae5dd5c0d44cc6161ba6be51fea07e55e5", "patch": "@@ -746,10 +746,55 @@ find_base_term (x)\n     case PLUS:\n     case MINUS:\n       {\n-\trtx tmp = find_base_term (XEXP (x, 0));\n-\tif (tmp)\n-\t  return tmp;\n-\treturn find_base_term (XEXP (x, 1));\n+\trtx tmp1 = XEXP (x, 0);\n+\trtx tmp2 = XEXP (x, 1);\n+\n+\t/* This is a litle bit tricky since we have to determine which of\n+\t   the two operands represents the real base address.  Otherwise this\n+\t   routine may return the index register instead of the base register.\n+\n+\t   That may cause us to believe no aliasing was possible, when in\n+\t   fact aliasing is possible.\n+\n+\t   We use a few simple tests to guess the base register.  Additional\n+\t   tests can certainly be added.  For example, if one of the operands\n+\t   is a shift or multiply, then it must be the index register and the\n+\t   other operand is the base register.  */\n+\t\n+\t/* If either operand is known to be a pointer, then use it\n+\t   to determine the base term.  */\n+\tif (REG_P (tmp1) && REGNO_POINTER_FLAG (REGNO (tmp1)))\n+\t  return find_base_term (tmp1);\n+\n+\tif (REG_P (tmp2) && REGNO_POINTER_FLAG (REGNO (tmp2)))\n+\t  return find_base_term (tmp2);\n+\n+\t/* Neither operand was known to be a pointer.  Go ahead and find the\n+\t   base term for both operands.  */\n+\ttmp1 = find_base_term (tmp1);\n+\ttmp2 = find_base_term (tmp2);\n+\n+\t/* If either base term is named object or a special address\n+\t   (like an argument or stack reference), then use it for the\n+\t   base term.  */\n+\tif (tmp1\n+\t    && (GET_CODE (tmp1) == SYMBOL_REF\n+\t\t|| GET_CODE (tmp1) == LABEL_REF\n+\t\t|| (GET_CODE (tmp1) == ADDRESS\n+\t\t    && GET_MODE (tmp1) != VOIDmode)))\n+\t  return tmp1;\n+\n+\tif (tmp2\n+\t    && (GET_CODE (tmp2) == SYMBOL_REF\n+\t\t|| GET_CODE (tmp2) == LABEL_REF\n+\t\t|| (GET_CODE (tmp2) == ADDRESS\n+\t\t    && GET_MODE (tmp2) != VOIDmode)))\n+\t  return tmp2;\n+\n+\t/* We could not determine which of the two operands was the\n+\t   base register and which was the index.  So we can determine\n+\t   nothing from the base alias check.  */\n+\treturn 0;\n       }\n \n     case AND:"}]}