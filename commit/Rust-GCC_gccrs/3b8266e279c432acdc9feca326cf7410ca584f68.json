{"sha": "3b8266e279c432acdc9feca326cf7410ca584f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4MjY2ZTI3OWM0MzJhY2RjOWZlY2EzMjZjZjc0MTBjYTU4NGY2OA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2006-01-20T01:55:52Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2006-01-20T01:55:52Z"}, "message": "df-scan.c (df_scan_free_bb_info): Added basic block parameter to be able to clean out basic block when not necessary.\n\n2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* df-scan.c (df_scan_free_bb_info): Added basic block parameter to\n\tbe able to clean out basic block when not necessary.\n\t(df_scan_free): Fixed to properly delete information if df is\n\tunused before calling df_finish.\n\t(df_scan_alloc, df_rescan_blocks, df_reg_chain_unlink,\n\tdf_insn_create_insn_record, df_bb_refs_record): Fixed formatting\n\tor comment typos.\n\t(df_bb_refs_delete): New function.\n\t(df_refs_delete): Moved per block code to df_bb_refs_delete.\n\t* df-core.c (df_set_blocks): Added code to properly clean out\n\tunused blocks if they are not part of the blocks to consider.\n\tAdded additional null check.\n\t(df_compact_blocks): Added basic block parameter to free_bb_fun to\n\tbe able to clean out basic block when not necessary\n\t* df.h (df_free_bb_function): Ditto.\n\t(df_bb_refs_delete): New function.\n\t* df-problems.c (df_ru_free_bb_info, df_rd_set_bb_info,\n\tdf_lr_set_bb_info, df_ur_free_bb_info, df_urec_free_bb_info):Added\n\tbasic block parameter to be able to clean out basic block when not\n\tnecessary.\n\t(df_ru_alloc, df_rd_alloc): Fixed dyslexic overflow test.\n\t(df_ru_free, df_rd_free, df_lr_free, df_ur_free, df_urec_free):\n\tFixed to properly delete information if df is unused before\n\tcalling df_finish.\n\nFrom-SVN: r110009", "tree": {"sha": "11d804c9083262e47c2e64640c3d442deb7b9dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11d804c9083262e47c2e64640c3d442deb7b9dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8266e279c432acdc9feca326cf7410ca584f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8266e279c432acdc9feca326cf7410ca584f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8266e279c432acdc9feca326cf7410ca584f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8266e279c432acdc9feca326cf7410ca584f68/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6d8ef6c5c0932ddeec7b0f72b1d6f10ebcf02a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d8ef6c5c0932ddeec7b0f72b1d6f10ebcf02a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d8ef6c5c0932ddeec7b0f72b1d6f10ebcf02a7"}], "stats": {"total": 367, "additions": 231, "deletions": 136}, "files": [{"sha": "12ad1e27d45679ff3f5453dd9714e9af04776373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b8266e279c432acdc9feca326cf7410ca584f68", "patch": "@@ -1,3 +1,30 @@\n+2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* df-scan.c (df_scan_free_bb_info): Added basic block parameter to\n+\tbe able to clean out basic block when not necessary.\n+\t(df_scan_free): Fixed to properly delete information if df is\n+\tunused before calling df_finish.\n+\t(df_scan_alloc, df_rescan_blocks, df_reg_chain_unlink,\n+\tdf_insn_create_insn_record, df_bb_refs_record): Fixed formatting\n+\tor comment typos.\n+\t(df_bb_refs_delete): New function.\n+\t(df_refs_delete): Moved per block code to df_bb_refs_delete.\n+\t* df-core.c (df_set_blocks): Added code to properly clean out\n+\tunused blocks if they are not part of the blocks to consider.\n+\tAdded additional null check.\n+\t(df_compact_blocks): Added basic block parameter to free_bb_fun to\n+\tbe able to clean out basic block when not necessary\n+\t* df.h (df_free_bb_function): Ditto.\n+\t(df_bb_refs_delete): New function.\n+\t* df-problems.c (df_ru_free_bb_info, df_rd_set_bb_info,\n+\tdf_lr_set_bb_info, df_ur_free_bb_info, df_urec_free_bb_info):Added\n+\tbasic block parameter to be able to clean out basic block when not\n+\tnecessary.\n+\t(df_ru_alloc, df_rd_alloc): Fixed dyslexic overflow test.\n+\t(df_ru_free, df_rd_free, df_lr_free, df_ur_free, df_urec_free):\n+\tFixed to properly delete information if df is unused before\n+\tcalling df_finish.\n+\n 2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/25799 "}, {"sha": "87d9324d80f3c9a83da4e6b742bf4de127d7404c", "filename": "gcc/df-core.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=3b8266e279c432acdc9feca326cf7410ca584f68", "patch": "@@ -354,7 +354,30 @@ df_set_blocks (struct df *df, bitmap blocks)\n {\n   if (blocks)\n     {\n-      if (!df->blocks_to_analyze)\n+      if (df->blocks_to_analyze)\n+\t{\n+\t  int p;\n+\t  bitmap diff = BITMAP_ALLOC (NULL);\n+\t  bitmap_and_compl (diff, df->blocks_to_analyze, blocks);\n+\t  for (p = 0; p < df->num_problems_defined; p++)\n+\t    {\n+\t      struct dataflow *dflow = df->problems_in_order[p];\n+\t      if (*dflow->problem->free_bb_fun)\n+\t\t{\n+\t\t  bitmap_iterator bi;\n+\t\t  unsigned int bb_index;\n+\t\t  \n+\t\t  EXECUTE_IF_SET_IN_BITMAP (diff, 0, bb_index, bi)\n+\t\t    {\n+\t\t      basic_block bb = BASIC_BLOCK (bb_index);\n+\t\t      (*dflow->problem->free_bb_fun) (dflow, bb, diff);\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  BITMAP_FREE (diff);\n+\t}\n+      else\n \tdf->blocks_to_analyze = BITMAP_ALLOC (NULL);\n       bitmap_copy (df->blocks_to_analyze, blocks);\n     }\n@@ -781,8 +804,10 @@ df_compact_blocks (struct df *df)\n \t     These are from orphaned blocks.  */\n \t  for (i = NUM_FIXED_BLOCKS; i < last_basic_block; i++)\n \t    {\n-\t      if (problem_temps[i])\n-\t\t(*dflow->problem->free_bb_fun) (dflow, problem_temps[i]);\n+\t      basic_block bb = BASIC_BLOCK (i); \n+\t      if (problem_temps[i] && bb)\n+\t\t(*dflow->problem->free_bb_fun) \n+\t\t  (dflow, bb, problem_temps[i]);\n \t    }\n \t}\n     }"}, {"sha": "ecc8eab6627f35365e42076dfd15259497feb4b2", "filename": "gcc/df-problems.c", "status": "modified", "additions": 121, "deletions": 96, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=3b8266e279c432acdc9feca326cf7410ca584f68", "patch": "@@ -324,7 +324,9 @@ df_ru_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_ru_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_ru_free_bb_info (struct dataflow *dflow, \n+\t\t    basic_block bb ATTRIBUTE_UNUSED, \n+\t\t    void *vbb_info)\n {\n   struct df_ru_bb_info *bb_info = (struct df_ru_bb_info *) vbb_info;\n   if (bb_info)\n@@ -687,35 +689,38 @@ df_ru_free (struct dataflow *dflow)\n   struct df_ru_problem_data *problem_data =\n     (struct df_ru_problem_data *) dflow->problem_data;\n \n-  for (i = 0; i < dflow->block_info_size; i++)\n+  if (problem_data)\n     {\n-      struct df_ru_bb_info *bb_info = df_ru_get_bb_info (dflow, i);\n-      if (bb_info)\n+      for (i = 0; i < dflow->block_info_size; i++)\n \t{\n-\t  BITMAP_FREE (bb_info->kill);\n-\t  BITMAP_FREE (bb_info->sparse_kill);\n-\t  BITMAP_FREE (bb_info->gen);\n-\t  BITMAP_FREE (bb_info->in);\n-\t  BITMAP_FREE (bb_info->out);\n+\t  struct df_ru_bb_info *bb_info = df_ru_get_bb_info (dflow, i);\n+\t  if (bb_info)\n+\t    {\n+\t      BITMAP_FREE (bb_info->kill);\n+\t      BITMAP_FREE (bb_info->sparse_kill);\n+\t      BITMAP_FREE (bb_info->gen);\n+\t      BITMAP_FREE (bb_info->in);\n+\t      BITMAP_FREE (bb_info->out);\n+\t    }\n \t}\n+      \n+      free_alloc_pool (dflow->block_pool);\n+      \n+      for (i = 0; i < problem_data->use_sites_size; i++)\n+\t{\n+\t  bitmap bm = problem_data->use_sites[i];\n+\t  if (bm)\n+\t    BITMAP_FREE (bm);\n+\t}\n+      \n+      free (problem_data->use_sites);\n+      BITMAP_FREE (problem_data->sparse_invalidated_by_call);\n+      BITMAP_FREE (problem_data->dense_invalidated_by_call);\n+      \n+      dflow->block_info_size = 0;\n+      free (dflow->block_info);\n+      free (dflow->problem_data);\n     }\n-\n-  free_alloc_pool (dflow->block_pool);\n-\n-  for (i = 0; i < problem_data->use_sites_size; i++)\n-    {\n-      bitmap bm = problem_data->use_sites[i];\n-      if (bm)\n-\tBITMAP_FREE (bm);\n-    }\n-\n-  free (problem_data->use_sites);\n-  BITMAP_FREE (problem_data->sparse_invalidated_by_call);\n-  BITMAP_FREE (problem_data->dense_invalidated_by_call);\n-\n-  dflow->block_info_size = 0;\n-  free (dflow->block_info);\n-  free (dflow->problem_data);\n   free (dflow);\n }\n \n@@ -837,7 +842,9 @@ df_rd_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_rd_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_rd_free_bb_info (struct dataflow *dflow, \n+\t\t    basic_block bb ATTRIBUTE_UNUSED, \n+\t\t    void *vbb_info)\n {\n   struct df_rd_bb_info *bb_info = (struct df_rd_bb_info *) vbb_info;\n   if (bb_info)\n@@ -1174,35 +1181,38 @@ df_rd_free (struct dataflow *dflow)\n   struct df_rd_problem_data *problem_data =\n     (struct df_rd_problem_data *) dflow->problem_data;\n \n-  for (i = 0; i < dflow->block_info_size; i++)\n+  if (problem_data)\n     {\n-      struct df_rd_bb_info *bb_info = df_rd_get_bb_info (dflow, i);\n-      if (bb_info)\n+      for (i = 0; i < dflow->block_info_size; i++)\n \t{\n-\t  BITMAP_FREE (bb_info->kill);\n-\t  BITMAP_FREE (bb_info->sparse_kill);\n-\t  BITMAP_FREE (bb_info->gen);\n-\t  BITMAP_FREE (bb_info->in);\n-\t  BITMAP_FREE (bb_info->out);\n+\t  struct df_rd_bb_info *bb_info = df_rd_get_bb_info (dflow, i);\n+\t  if (bb_info)\n+\t    {\n+\t      BITMAP_FREE (bb_info->kill);\n+\t      BITMAP_FREE (bb_info->sparse_kill);\n+\t      BITMAP_FREE (bb_info->gen);\n+\t      BITMAP_FREE (bb_info->in);\n+\t      BITMAP_FREE (bb_info->out);\n+\t    }\n \t}\n+      \n+      free_alloc_pool (dflow->block_pool);\n+      \n+      for (i = 0; i < problem_data->def_sites_size; i++)\n+\t{\n+\t  bitmap bm = problem_data->def_sites[i];\n+\t  if (bm)\n+\t    BITMAP_FREE (bm);\n+\t}\n+      \n+      free (problem_data->def_sites);\n+      BITMAP_FREE (problem_data->sparse_invalidated_by_call);\n+      BITMAP_FREE (problem_data->dense_invalidated_by_call);\n+      \n+      dflow->block_info_size = 0;\n+      free (dflow->block_info);\n+      free (dflow->problem_data);\n     }\n-\n-  free_alloc_pool (dflow->block_pool);\n-\n-  for (i = 0; i < problem_data->def_sites_size; i++)\n-    {\n-      bitmap bm = problem_data->def_sites[i];\n-      if (bm)\n-\tBITMAP_FREE (bm);\n-    }\n-\n-  free (problem_data->def_sites);\n-  BITMAP_FREE (problem_data->sparse_invalidated_by_call);\n-  BITMAP_FREE (problem_data->dense_invalidated_by_call);\n-\n-  dflow->block_info_size = 0;\n-  free (dflow->block_info);\n-  free (dflow->problem_data);\n   free (dflow);\n }\n \n@@ -1315,7 +1325,9 @@ df_lr_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_lr_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_lr_free_bb_info (struct dataflow *dflow, \n+\t\t    basic_block bb ATTRIBUTE_UNUSED, \n+\t\t    void *vbb_info)\n {\n   struct df_lr_bb_info *bb_info = (struct df_lr_bb_info *) vbb_info;\n   if (bb_info)\n@@ -1586,22 +1598,25 @@ df_lr_transfer_function (struct dataflow *dflow, int bb_index)\n static void\n df_lr_free (struct dataflow *dflow)\n {\n-  unsigned int i;\n-  for (i = 0; i < dflow->block_info_size; i++)\n+  if (dflow->block_info)\n     {\n-      struct df_lr_bb_info *bb_info = df_lr_get_bb_info (dflow, i);\n-      if (bb_info)\n+      unsigned int i;\n+      for (i = 0; i < dflow->block_info_size; i++)\n \t{\n-\t  BITMAP_FREE (bb_info->use);\n-\t  BITMAP_FREE (bb_info->def);\n-\t  BITMAP_FREE (bb_info->in);\n-\t  BITMAP_FREE (bb_info->out);\n+\t  struct df_lr_bb_info *bb_info = df_lr_get_bb_info (dflow, i);\n+\t  if (bb_info)\n+\t    {\n+\t      BITMAP_FREE (bb_info->use);\n+\t      BITMAP_FREE (bb_info->def);\n+\t      BITMAP_FREE (bb_info->in);\n+\t      BITMAP_FREE (bb_info->out);\n+\t    }\n \t}\n+      free_alloc_pool (dflow->block_pool);\n+      \n+      dflow->block_info_size = 0;\n+      free (dflow->block_info);\n     }\n-  free_alloc_pool (dflow->block_pool);\n-\n-  dflow->block_info_size = 0;\n-  free (dflow->block_info);\n   free (dflow);\n }\n \n@@ -1695,7 +1710,9 @@ df_ur_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_ur_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_ur_free_bb_info (struct dataflow *dflow, \n+\t\t    basic_block bb ATTRIBUTE_UNUSED, \n+\t\t    void *vbb_info)\n {\n   struct df_ur_bb_info *bb_info = (struct df_ur_bb_info *) vbb_info;\n   if (bb_info)\n@@ -1915,23 +1932,26 @@ df_ur_transfer_function (struct dataflow *dflow, int bb_index)\n static void\n df_ur_free (struct dataflow *dflow)\n {\n-  unsigned int i;\n-\n-  for (i = 0; i < dflow->block_info_size; i++)\n+  if (dflow->block_info)\n     {\n-      struct df_ur_bb_info *bb_info = df_ur_get_bb_info (dflow, i);\n-      if (bb_info)\n+      unsigned int i;\n+      \n+      for (i = 0; i < dflow->block_info_size; i++)\n \t{\n-\t  BITMAP_FREE (bb_info->gen);\n-\t  BITMAP_FREE (bb_info->kill);\n-\t  BITMAP_FREE (bb_info->in);\n-\t  BITMAP_FREE (bb_info->out);\n+\t  struct df_ur_bb_info *bb_info = df_ur_get_bb_info (dflow, i);\n+\t  if (bb_info)\n+\t    {\n+\t      BITMAP_FREE (bb_info->gen);\n+\t      BITMAP_FREE (bb_info->kill);\n+\t      BITMAP_FREE (bb_info->in);\n+\t      BITMAP_FREE (bb_info->out);\n+\t    }\n \t}\n+      \n+      free_alloc_pool (dflow->block_pool);\n+      dflow->block_info_size = 0;\n+      free (dflow->block_info);\n     }\n-\n-  free_alloc_pool (dflow->block_pool);\n-  dflow->block_info_size = 0;\n-  free (dflow->block_info);\n   free (dflow);\n }\n \n@@ -2039,7 +2059,9 @@ df_urec_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_urec_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_urec_free_bb_info (struct dataflow *dflow, \n+\t\t      basic_block bb ATTRIBUTE_UNUSED, \n+\t\t      void *vbb_info)\n {\n   struct df_urec_bb_info *bb_info = (struct df_urec_bb_info *) vbb_info;\n   if (bb_info)\n@@ -2529,26 +2551,29 @@ df_urec_transfer_function (struct dataflow *dflow, int bb_index)\n static void\n df_urec_free (struct dataflow *dflow)\n {\n-  unsigned int i;\n-\n-  for (i = 0; i < dflow->block_info_size; i++)\n+  if (dflow->block_info)\n     {\n-      struct df_urec_bb_info *bb_info = df_urec_get_bb_info (dflow, i);\n-      if (bb_info)\n+      unsigned int i;\n+      \n+      for (i = 0; i < dflow->block_info_size; i++)\n \t{\n-\t  BITMAP_FREE (bb_info->gen);\n-\t  BITMAP_FREE (bb_info->kill);\n-\t  BITMAP_FREE (bb_info->in);\n-\t  BITMAP_FREE (bb_info->out);\n-\t  BITMAP_FREE (bb_info->earlyclobber);\n+\t  struct df_urec_bb_info *bb_info = df_urec_get_bb_info (dflow, i);\n+\t  if (bb_info)\n+\t    {\n+\t      BITMAP_FREE (bb_info->gen);\n+\t      BITMAP_FREE (bb_info->kill);\n+\t      BITMAP_FREE (bb_info->in);\n+\t      BITMAP_FREE (bb_info->out);\n+\t      BITMAP_FREE (bb_info->earlyclobber);\n+\t    }\n \t}\n+      \n+      free_alloc_pool (dflow->block_pool);\n+      \n+      dflow->block_info_size = 0;\n+      free (dflow->block_info);\n+      free (dflow->problem_data);\n     }\n-\n-  free_alloc_pool (dflow->block_pool);\n-  \n-  dflow->block_info_size = 0;\n-  free (dflow->block_info);\n-  free (dflow->problem_data);\n   free (dflow);\n }\n "}, {"sha": "8f1995660a3c3d0e494dfdbf139c709f2e808571", "filename": "gcc/df-scan.c", "status": "modified", "additions": 53, "deletions": 36, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=3b8266e279c432acdc9feca326cf7410ca584f68", "patch": "@@ -181,11 +181,14 @@ df_scan_set_bb_info (struct dataflow *dflow, unsigned int index,\n /* Free basic block info.  */\n \n static void\n-df_scan_free_bb_info (struct dataflow *dflow, void *vbb_info)\n+df_scan_free_bb_info (struct dataflow *dflow, basic_block bb, void *vbb_info)\n {\n   struct df_scan_bb_info *bb_info = (struct df_scan_bb_info *) vbb_info;\n   if (bb_info)\n-    pool_free (dflow->block_pool, bb_info);\n+    {\n+      df_bb_refs_delete (dflow, bb->index);\n+      pool_free (dflow->block_pool, bb_info);\n+    }\n }\n \n \n@@ -222,7 +225,6 @@ df_scan_alloc (struct dataflow *dflow, bitmap blocks_to_rescan)\n   problem_data->insn_pool \n     = create_alloc_pool (\"df_scan_insn pool\", \n \t\t\t sizeof (struct df_insn_info), block_size);\n-\n   problem_data->reg_pool \n     = create_alloc_pool (\"df_scan_reg pool\", \n \t\t\t sizeof (struct df_reg_info), block_size);\n@@ -261,14 +263,18 @@ df_scan_free (struct dataflow *dflow)\n {\n   struct df *df = dflow->df;\n   \n-  df_scan_free_internal (dflow);\n+  if (dflow->problem_data)\n+    {\n+      df_scan_free_internal (dflow);\n+      free (dflow->problem_data);\n+    }\n+\n   if (df->blocks_to_scan)\n     BITMAP_FREE (df->blocks_to_scan);\n   \n   if (df->blocks_to_analyze)\n     BITMAP_FREE (df->blocks_to_analyze);\n \n-  free (dflow->problem_data);\n   free (dflow);\n }\n \n@@ -412,7 +418,7 @@ df_rescan_blocks (struct df *df, bitmap blocks)\n {\n   bitmap local_blocks_to_scan = BITMAP_ALLOC (NULL);\n \n-  struct dataflow *dflow = df->problems_by_index [DF_SCAN];\n+  struct dataflow *dflow = df->problems_by_index[DF_SCAN];\n   basic_block bb;\n \n   df->def_info.refs_organized = false;\n@@ -655,7 +661,7 @@ df_reg_chain_unlink (struct dataflow *dflow, struct df_ref *ref)\n void\n df_ref_remove (struct df *df, struct df_ref *ref)\n {\n-  struct dataflow *dflow = df->problems_by_index [DF_SCAN];\n+  struct dataflow *dflow = df->problems_by_index[DF_SCAN];\n   if (DF_REF_REG_DEF_P (ref))\n     {\n       if (DF_REF_FLAGS (ref) & DF_REF_ARTIFICIAL)\n@@ -713,7 +719,8 @@ df_insn_create_insn_record (struct dataflow *dflow, rtx insn)\n   return insn_rec;\n }\n \n-/* Delete all of the refs information from BLOCKS.  */\n+\n+/* Delete all of the refs information from INSN.  */\n \n void \n df_insn_refs_delete (struct dataflow *dflow, rtx insn)\n@@ -741,43 +748,53 @@ df_insn_refs_delete (struct dataflow *dflow, rtx insn)\n }\n \n \n+/* Delete all of the refs information from basic_block with BB_INDEX.  */\n+\n+void\n+df_bb_refs_delete (struct dataflow *dflow, int bb_index)\n+{\n+  struct df_ref *def;\n+  struct df_ref *use;\n+\n+  struct df_scan_bb_info *bb_info \n+    = df_scan_get_bb_info (dflow, bb_index);\n+  rtx insn;\n+  basic_block bb = BASIC_BLOCK (bb_index);\n+  FOR_BB_INSNS (bb, insn)\n+    {\n+      if (INSN_P (insn))\n+\t{\n+\t  /* Record defs within INSN.  */\n+\t  df_insn_refs_delete (dflow, insn);\n+\t}\n+    }\n+  \n+  /* Get rid of any artifical uses.  */\n+  if (bb_info)\n+    {\n+      def = bb_info->artificial_defs;\n+      while (def)\n+\tdef = df_reg_chain_unlink (dflow, def);\n+      bb_info->artificial_defs = NULL;\n+      use = bb_info->artificial_uses;\n+      while (use)\n+\tuse = df_reg_chain_unlink (dflow, use);\n+      bb_info->artificial_uses = NULL;\n+    }\n+}\n+\n+\n /* Delete all of the refs information from BLOCKS.  */\n \n void \n df_refs_delete (struct dataflow *dflow, bitmap blocks)\n {\n   bitmap_iterator bi;\n   unsigned int bb_index;\n-  struct df_ref *def;\n-  struct df_ref *use;\n \n   EXECUTE_IF_SET_IN_BITMAP (blocks, 0, bb_index, bi)\n     {\n-      struct df_scan_bb_info *bb_info \n-\t= df_scan_get_bb_info (dflow, bb_index);\n-      rtx insn;\n-      basic_block bb = BASIC_BLOCK (bb_index);\n-      FOR_BB_INSNS (bb, insn)\n-\t{\n-\t  if (INSN_P (insn))\n-\t    {\n-\t      /* Record defs within INSN.  */\n-\t      df_insn_refs_delete (dflow, insn);\n-\t    }\n-\t}\n-\n-      /* Get rid of any artifical uses.  */\n-      if (bb_info)\n-\t{\n-\t  def = bb_info->artificial_defs;\n-\t  while (def)\n-\t    def = df_reg_chain_unlink (dflow, def);\n-\t  bb_info->artificial_defs = NULL;\n-\t  use = bb_info->artificial_uses;\n-\t  while (use)\n-\t    use = df_reg_chain_unlink (dflow, use);\n-\t  bb_info->artificial_uses = NULL;\n-\t}\n+      df_bb_refs_delete (dflow, bb_index);\n     }\n }\n \n@@ -1568,7 +1585,7 @@ df_bb_refs_record (struct dataflow *dflow, basic_block bb)\n \t  \n \t  /* Any reference to any pseudo before reload is a potential\n \t     reference of the frame pointer.  */\n-\t  df_uses_record (dflow, &regno_reg_rtx [FRAME_POINTER_REGNUM],\n+\t  df_uses_record (dflow, &regno_reg_rtx[FRAME_POINTER_REGNUM],\n \t\t\t  DF_REF_REG_USE, bb, NULL, DF_REF_ARTIFICIAL);\n \t  \n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM"}, {"sha": "a353d36ce11eac02d2d475d41e22d97d6ac238d0", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8266e279c432acdc9feca326cf7410ca584f68/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=3b8266e279c432acdc9feca326cf7410ca584f68", "patch": "@@ -69,7 +69,7 @@ typedef void (*df_alloc_function) (struct dataflow *, bitmap);\n \n /* Free the basic block info.  Called from the block reordering code\n    to get rid of the blocks that have been squished down.   */\n-typedef void (*df_free_bb_function) (struct dataflow *, void *);\n+typedef void (*df_free_bb_function) (struct dataflow *, basic_block, void *);\n \n /* Local compute function.  */\n typedef void (*df_local_compute_function) (struct dataflow *, bitmap, bitmap);\n@@ -569,6 +569,7 @@ extern void df_reg_chain_create (struct df_reg_info *, struct df_ref *);\n extern struct df_ref *df_reg_chain_unlink (struct dataflow *, struct df_ref *);\n extern void df_ref_remove (struct df *, struct df_ref *);\n extern void df_insn_refs_delete (struct dataflow *, rtx);\n+extern void df_bb_refs_delete (struct dataflow *, int);\n extern void df_refs_delete (struct dataflow *, bitmap);\n extern void df_reorganize_refs (struct df_ref_info *);\n extern void df_set_state (int);"}]}