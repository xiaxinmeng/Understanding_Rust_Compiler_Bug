{"sha": "cf40ea15f61a4535859ca50195eb58a63e3de1ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0MGVhMTVmNjFhNDUzNTg1OWNhNTAxOTVlYjU4YTYzZTNkZTFiYQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-10T12:50:11Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-10T12:50:11Z"}, "message": "rtl.h (struct rtx_def): Document unchanging and in_struct flags more accurately.\n\n2002-05-09  David S. Miller  <davem@redhat.com>\n\n\t* rtl.h (struct rtx_def): Document unchanging and in_struct flags\n\tmore accurately.\n\t(INSN_ANNULLED_BRANCH_P): Only valid for JUMP_INSN and CALL_INSN, fix\n\tcomment.\n\t(INSN_FROM_TARGET_P): Valid also for CALL_INSN.\n\t* doc/rtl.texi: Document these macros more accurately.\n\t* recog.c (whole file): Only mess with INSN_ANNULLED_BRANCH_P for\n\tJUMP_INSNs and CALL_INSNs.\n\t* resource.c (whole file): Only mess with INSN_ANNULLED_BRANCH_P\n\tor INSN_FROM_TARGET_P if the code is appropriate.\n\nFrom-SVN: r53360", "tree": {"sha": "b339206e3fbe7651c9692cd72f387b4671880f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b339206e3fbe7651c9692cd72f387b4671880f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf40ea15f61a4535859ca50195eb58a63e3de1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf40ea15f61a4535859ca50195eb58a63e3de1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf40ea15f61a4535859ca50195eb58a63e3de1ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf40ea15f61a4535859ca50195eb58a63e3de1ba/comments", "author": null, "committer": null, "parents": [{"sha": "1a499b9250dfd05a03485d281e873b437d67bc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a499b9250dfd05a03485d281e873b437d67bc9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a499b9250dfd05a03485d281e873b437d67bc9e"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "9f4d052e60dbbe9525af685f8eb310d437fdd103", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf40ea15f61a4535859ca50195eb58a63e3de1ba", "patch": "@@ -1,3 +1,16 @@\n+2002-05-09  David S. Miller  <davem@redhat.com>\n+\n+\t* rtl.h (struct rtx_def): Document unchanging and in_struct flags\n+\tmore accurately.\n+\t(INSN_ANNULLED_BRANCH_P): Only valid for JUMP_INSN and CALL_INSN, fix\n+\tcomment.\n+\t(INSN_FROM_TARGET_P): Valid also for CALL_INSN.\n+\t* doc/rtl.texi: Document these macros more accurately.\n+\t* recog.c (whole file): Only mess with INSN_ANNULLED_BRANCH_P for\n+\tJUMP_INSNs and CALL_INSNs.\n+\t* resource.c (whole file): Only mess with INSN_ANNULLED_BRANCH_P\n+\tor INSN_FROM_TARGET_P if the code is appropriate.\n+\n 2002-05-10  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* config/avr/avr.c (print_operand): Check that addr is a SYMBOL_REF"}, {"sha": "23994fdf28623acaab6f352229a52ed024c28967", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=cf40ea15f61a4535859ca50195eb58a63e3de1ba", "patch": "@@ -395,15 +395,13 @@ indicates that the insn represents a call to a const or pure function.\n Stored in the @code{unchanging} field and printed as @samp{/u}.\n \n @findex INSN_ANNULLED_BRANCH_P\n-@cindex @code{insn} and @samp{/u}\n @cindex @code{jump_insn} and @samp{/u}\n-@cindex @code{unchanging}, in @code{insn} and @code{jump_insn}\n+@cindex @code{call_insn} and @samp{/u}\n+@cindex @code{unchanging}, in @code{jump_insn} and @code{call_insn}\n @item INSN_ANNULLED_BRANCH_P (@var{x})\n-In an @code{insn} or @code{jump_insn} in the delay slot of a branch insn,\n-indicates that an\n-annulling branch should be used.  See the discussion under\n-@code{sequence} below.  Stored in the @code{unchanging} field and printed\n-as @samp{/u}.\n+In a @code{jump_insn} or @code{call_insn} indicates that the branch is\n+an annulling one.  See the discussion under @code{sequence} below.\n+Stored in the @code{unchanging} field and printed as @samp{/u}.\n \n @findex INSN_DEAD_CODE_P\n @cindex @code{insn} and @samp{/s}\n@@ -430,10 +428,11 @@ nonzero if the insn has been deleted.  Stored in the\n @findex INSN_FROM_TARGET_P\n @cindex @code{insn} and @samp{/s}\n @cindex @code{jump_insn} and @samp{/s}\n-@cindex @code{in_struct}, in @code{insn} and @code{jump_insn}\n+@cindex @code{call_insn} and @samp{/s}\n+@cindex @code{in_struct}, in @code{insn} and @code{jump_insn} and @code{call_insn}\n @item INSN_FROM_TARGET_P (@var{x})\n-In an @code{insn} or @code{jump_insn} in a delay slot of a branch,\n-indicates that the insn\n+In an @code{insn} or @code{jump_insn} or @code{call_insn} in a delay\n+slot of a branch, indicates that the insn\n is from the target of the branch.  If the branch insn has\n @code{INSN_ANNULLED_BRANCH_P} set, this insn will only be executed if\n the branch is taken.  For annulled branches with"}, {"sha": "e6793ed8bbaa2bc9a1d87a78637549c4e9cf3d0b", "filename": "gcc/reorg.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=cf40ea15f61a4535859ca50195eb58a63e3de1ba", "patch": "@@ -617,7 +617,8 @@ delete_from_delay_slot (insn)\n      annul flag.  */\n   if (delay_list)\n     trial = emit_delay_sequence (trial, delay_list, XVECLEN (seq, 0) - 2);\n-  else\n+  else if (GET_CODE (trial) == JUMP_INSN\n+\t   || GET_CODE (trial) == CALL_INSN)\n     INSN_ANNULLED_BRANCH_P (trial) = 0;\n \n   INSN_FROM_TARGET_P (insn) = 0;\n@@ -3628,7 +3629,9 @@ dbr_schedule (first, file)\n     {\n       rtx target;\n \n-      INSN_ANNULLED_BRANCH_P (insn) = 0;\n+      if (GET_CODE (insn) == JUMP_INSN\n+\t  || GET_CODE (insn) == CALL_INSN)\n+\tINSN_ANNULLED_BRANCH_P (insn) = 0;\n       INSN_FROM_TARGET_P (insn) = 0;\n \n       /* Skip vector tables.  We can't get attributes for them.  */"}, {"sha": "c6b75705ee3cde14a9e55e1bc43e23fd33d8a816", "filename": "gcc/resource.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=cf40ea15f61a4535859ca50195eb58a63e3de1ba", "patch": "@@ -175,10 +175,21 @@ next_insn_no_annul (insn)\n     {\n       /* If INSN is an annulled branch, skip any insns from the target\n \t of the branch.  */\n-      if (INSN_ANNULLED_BRANCH_P (insn)\n+      if (GET_CODE (insn) == JUMP_INSN\n+\t  && INSN_ANNULLED_BRANCH_P (insn)\n \t  && NEXT_INSN (PREV_INSN (insn)) != insn)\n-\twhile (INSN_FROM_TARGET_P (NEXT_INSN (insn)))\n-\t  insn = NEXT_INSN (insn);\n+\t{\n+\t  rtx next = NEXT_INSN (insn);\n+\t  enum rtx_code code = GET_CODE (next);\n+\n+\t  while ((code == INSN || code == JUMP_INSN || code == CALL_INSN)\n+\t\t && INSN_FROM_TARGET_P (next))\n+\t    {\n+\t      insn = next;\n+\t      next = NEXT_INSN (insn);\n+\t      code = GET_CODE (next);\n+\t    }\n+\t}\n \n       insn = NEXT_INSN (insn);\n       if (insn && GET_CODE (insn) == INSN\n@@ -1007,16 +1018,18 @@ mark_target_live_regs (insns, target, res)\n \t{\n \t  rtx link;\n \t  rtx real_insn = insn;\n+\t  enum rtx_code code = GET_CODE (insn);\n \n \t  /* If this insn is from the target of a branch, it isn't going to\n \t     be used in the sequel.  If it is used in both cases, this\n \t     test will not be true.  */\n-\t  if (INSN_FROM_TARGET_P (insn))\n+\t  if ((code == INSN || code == JUMP_INSN || code == CALL_INSN)\n+\t      && INSN_FROM_TARGET_P (insn))\n \t    continue;\n \n \t  /* If this insn is a USE made by update_block, we care about the\n \t     underlying insn.  */\n-\t  if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == USE\n+\t  if (code == INSN && GET_CODE (PATTERN (insn)) == USE\n \t      && INSN_P (XEXP (PATTERN (insn), 0)))\n \t      real_insn = XEXP (PATTERN (insn), 0);\n "}, {"sha": "f83ac8200a18bcfa25bdedcf45e3d44aaf4b962f", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf40ea15f61a4535859ca50195eb58a63e3de1ba/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=cf40ea15f61a4535859ca50195eb58a63e3de1ba", "patch": "@@ -140,8 +140,7 @@ struct rtx_def\n      1 in a SYMBOL_REF if it addresses something in the per-function\n      constants pool.\n      1 in a CALL_INSN, NOTE, or EXPR_LIST for a const or pure call.\n-     1 in an INSN in the delay slot of a branch insn if an annulling branch\n-     should be used.  */\n+     1 in a JUMP_INSN or CALL_INSN of an annulling branch.  */\n   unsigned int unchanging : 1;\n   /* 1 in a MEM or ASM_OPERANDS expression if the memory reference is volatile.\n      1 in an INSN, CALL_INSN, JUMP_INSN, CODE_LABEL, BARRIER, or NOTE\n@@ -168,7 +167,6 @@ struct rtx_def\n      1 in an INSN, JUMP_INSN, or CALL_INSN if insn is in a delay slot and\n      from the target of a branch.  Valid from reorg until end of compilation;\n      cleared before used.\n-     1 in an INSN in a delay slot that is the target of a branch, during reorg.\n      1 in an INSN or related rtx if this insn is dead code.  Valid only during\n      dead-code elimination phase; cleared before use.  */\n   unsigned int in_struct : 1;\n@@ -539,11 +537,9 @@ do {\t\t\t\t\\\n #define SIBLING_CALL_P(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"SIBLING_CALL_P\", (RTX), CALL_INSN)->jump)\n \n-/* 1 if RTX is an insn in the delay slot of a branch insn for which an\n-   annulling branch should be used.  */\n+/* 1 if RTX is an insn that is an annulling branch.  */\n #define INSN_ANNULLED_BRANCH_P(RTX)\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK2(\"INSN_ANNULLED_BRANCH_P\", (RTX), INSN,\t\t\\\n-\t\t   JUMP_INSN)->unchanging)\n+  (RTL_FLAG_CHECK2(\"INSN_ANNULLED_BRANCH_P\", (RTX), JUMP_INSN, CALL_INSN)->unchanging)\n \n /* 1 if RTX is an insn that is dead code.  Valid only for dead-code\n    elimination phase.  */\n@@ -555,7 +551,7 @@ do {\t\t\t\t\\\n    executed if the branch is taken.  For annulled branches with this bit\n    clear, the insn should be executed only if the branch is not taken.  */\n #define INSN_FROM_TARGET_P(RTX)\t\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK2(\"INSN_FROM_TARGET_P\", (RTX), INSN, JUMP_INSN)->in_struct)\n+  (RTL_FLAG_CHECK3(\"INSN_FROM_TARGET_P\", (RTX), INSN, JUMP_INSN, CALL_INSN)->in_struct)\n \n #define ADDR_DIFF_VEC_FLAGS(RTX) X0ADVFLAGS(RTX, 4)\n "}]}