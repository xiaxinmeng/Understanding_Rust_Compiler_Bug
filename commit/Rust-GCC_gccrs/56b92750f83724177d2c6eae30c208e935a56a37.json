{"sha": "56b92750f83724177d2c6eae30c208e935a56a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiOTI3NTBmODM3MjQxNzdkMmM2ZWFlMzBjMjA4ZTkzNWE1NmEzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T20:28:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-30T20:28:17Z"}, "message": "combine: Punt on out of range rotate counts [PR93505]\n\nWhat happens on this testcase is with the out of bounds rotate we get:\nTrying 13 -> 16:\n   13: r129:SI=r132:DI#0<-<0x20\n      REG_DEAD r132:DI\n   16: r123:DI=r129:SI<0\n      REG_DEAD r129:SI\nSuccessfully matched this instruction:\n(set (reg/v:DI 123 [ <retval> ])\n    (const_int 0 [0]))\nduring combine.  So, perhaps we could also change simplify-rtx.c to punt\nif it is out of bounds rather than trying to optimize anything.\nOr, but probably GCC11 material, if we decide that ROTATE/ROTATERT doesn't\nhave out of bounds counts or introduce targetm.rotate_truncation_mask,\nwe should truncate the argument instead of punting.\nPunting is better for backports though.\n\n2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/93505\n\t* combine.c (simplify_comparison) <case ROTATE>: Punt on out of range\n\trotate counts.\n\n\t* gcc.c-torture/compile/pr93505.c: New test.", "tree": {"sha": "4442d994ad2a140f6904ede7a42d02c80a07ddcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4442d994ad2a140f6904ede7a42d02c80a07ddcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b92750f83724177d2c6eae30c208e935a56a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b92750f83724177d2c6eae30c208e935a56a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b92750f83724177d2c6eae30c208e935a56a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b92750f83724177d2c6eae30c208e935a56a37/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd468a042e19ef0fdbb1c53ca4060d4cb4972c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd468a042e19ef0fdbb1c53ca4060d4cb4972c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd468a042e19ef0fdbb1c53ca4060d4cb4972c5"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "f2cc0276600169c243225dd61e1667251cd2cb66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b92750f83724177d2c6eae30c208e935a56a37", "patch": "@@ -1,3 +1,9 @@\n+2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/93505\n+\t* combine.c (simplify_comparison) <case ROTATE>: Punt on out of range\n+\trotate counts.\n+\n 2020-01-30  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn.c (print_operand): Handle LTGT."}, {"sha": "d44b9c3bf950e52dce5089f7297a9fc7fb28dcfd", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=56b92750f83724177d2c6eae30c208e935a56a37", "patch": "@@ -12410,7 +12410,8 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t     bit.  This will be converted into a ZERO_EXTRACT.  */\n \t  if (const_op == 0 && sign_bit_comparison_p\n \t      && CONST_INT_P (XEXP (op0, 1))\n-\t      && mode_width <= HOST_BITS_PER_WIDE_INT)\n+\t      && mode_width <= HOST_BITS_PER_WIDE_INT\n+\t      && UINTVAL (XEXP (op0, 1)) < mode_width)\n \t    {\n \t      op0 = simplify_and_const_int (NULL_RTX, mode, XEXP (op0, 0),\n \t\t\t\t\t    (HOST_WIDE_INT_1U"}, {"sha": "ce53e2c8bf8eac103c9c429ede7b82d5c3502c3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56b92750f83724177d2c6eae30c208e935a56a37", "patch": "@@ -1,3 +1,8 @@\n+2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/93505\n+\t* gcc.c-torture/compile/pr93505.c: New test.\n+\n 2020-01-30  Jeff Law  <law@redhat.com\n \n \t* gcc.dg/tree-ssa/ssa-dse-26.c: Make existing dg-final scan"}, {"sha": "0627962eae5cdcc29a0d1f3664f7537c8ca5799d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr93505.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93505.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b92750f83724177d2c6eae30c208e935a56a37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93505.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr93505.c?ref=56b92750f83724177d2c6eae30c208e935a56a37", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/93505 */\n+\n+unsigned a;\n+\n+unsigned\n+foo (unsigned x)\n+{\n+  unsigned int y = 32 - __builtin_bswap64 (-a);\n+  /* This would be UB (x << 32) at runtime.  Ensure we don't\n+     invoke UB in the compiler because of that (visible with\n+     bootstrap-ubsan).  */\n+  x = x << y | x >> (-y & 31);\n+  x >>= 31;\n+  return x;\n+}"}]}