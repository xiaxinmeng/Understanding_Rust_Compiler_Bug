{"sha": "482baa63f3076b7d954f3b152514a0d69f11a74a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgyYmFhNjNmMzA3NmI3ZDk1NGYzYjE1MjUxNGEwZDY5ZjExYTc0YQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-06-18T18:02:03Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2012-06-18T18:02:03Z"}, "message": "Generate RTL for return in Thumb2 mode. Used by expand of return insn.\n\n2012-06-18  Ian Bolton  <ian.bolton@arm.com>\n            Sameera Deshpande  <sameera.deshpande@arm.com>\n            Greta Yorsh  <greta.yorsh@arm.com>\n\n        * config/arm/arm-protos.h (thumb2_expand_return): New declaration.\n        * config/arm/arm.c (thumb2_expand_return): New function.\n        * config/arm/arm.md (return): Update condition and code.\n\n\nCo-Authored-By: Greta Yorsh <greta.yorsh@arm.com>\nCo-Authored-By: Sameera Deshpande <sameera.deshpande@arm.com>\n\nFrom-SVN: r188744", "tree": {"sha": "7d4ce384c1e137bcd335966b253e29ecd86c1521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4ce384c1e137bcd335966b253e29ecd86c1521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/482baa63f3076b7d954f3b152514a0d69f11a74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482baa63f3076b7d954f3b152514a0d69f11a74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482baa63f3076b7d954f3b152514a0d69f11a74a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482baa63f3076b7d954f3b152514a0d69f11a74a/comments", "author": null, "committer": null, "parents": [{"sha": "f79b86a43ec258a7c603862e39b1e90cb8a18375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79b86a43ec258a7c603862e39b1e90cb8a18375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79b86a43ec258a7c603862e39b1e90cb8a18375"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "cc72e97e3f9a8adfc1e3068544915efef8d0d106", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=482baa63f3076b7d954f3b152514a0d69f11a74a", "patch": "@@ -1,3 +1,11 @@\n+2012-06-18  Ian Bolton  <ian.bolton@arm.com>\n+            Sameera Deshpande  <sameera.deshpande@arm.com>\n+            Greta Yorsh  <greta.yorsh@arm.com>\n+\n+        * config/arm/arm-protos.h (thumb2_expand_return): New declaration.\n+        * config/arm/arm.c (thumb2_expand_return): New function.\n+        * config/arm/arm.md (return): Update condition and code.\n+\n 2012-06-18  Ian Bolton  <ian.bolton@arm.com>\n             Sameera Deshpande  <sameera.deshpande@arm.com>\n             Greta Yorsh  <greta.yorsh@arm.com>"}, {"sha": "5a9940ed97404d699b6e017ede0d337606833697", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=482baa63f3076b7d954f3b152514a0d69f11a74a", "patch": "@@ -31,6 +31,7 @@ extern int arm_volatile_func (void);\n extern const char *arm_output_epilogue (rtx);\n extern void arm_expand_prologue (void);\n extern void arm_expand_epilogue (bool);\n+extern void thumb2_expand_return (void);\n extern const char *arm_strip_name_encoding (const char *);\n extern void arm_asm_output_labelref (FILE *, const char *);\n extern void thumb2_asm_output_opcode (FILE *);"}, {"sha": "3f5b5002f8b748ae8f87ae5f6441589e301ded4b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=482baa63f3076b7d954f3b152514a0d69f11a74a", "patch": "@@ -23265,6 +23265,52 @@ thumb1_expand_prologue (void)\n     cfun->machine->lr_save_eliminated = 0;\n }\n \n+/* Generate pattern *pop_multiple_with_stack_update_and_return if single\n+   POP instruction can be generated.  LR should be replaced by PC.  All\n+   the checks required are already done by  USE_RETURN_INSN ().  Hence,\n+   all we really need to check here is if single register is to be\n+   returned, or multiple register return.  */\n+void\n+thumb2_expand_return (void)\n+{\n+  int i, num_regs;\n+  unsigned long saved_regs_mask;\n+  arm_stack_offsets *offsets;\n+\n+  offsets = arm_get_frame_offsets ();\n+  saved_regs_mask = offsets->saved_regs_mask;\n+\n+  for (i = 0, num_regs = 0; i <= LAST_ARM_REGNUM; i++)\n+    if (saved_regs_mask & (1 << i))\n+      num_regs++;\n+\n+  if (saved_regs_mask)\n+    {\n+      if (num_regs == 1)\n+        {\n+          rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n+          rtx reg = gen_rtx_REG (SImode, PC_REGNUM);\n+          rtx addr = gen_rtx_MEM (SImode,\n+                                  gen_rtx_POST_INC (SImode,\n+                                                    stack_pointer_rtx));\n+          set_mem_alias_set (addr, get_frame_alias_set ());\n+          XVECEXP (par, 0, 0) = ret_rtx;\n+          XVECEXP (par, 0, 1) = gen_rtx_SET (SImode, reg, addr);\n+          RTX_FRAME_RELATED_P (XVECEXP (par, 0, 1)) = 1;\n+          emit_jump_insn (par);\n+        }\n+      else\n+        {\n+          saved_regs_mask &= ~ (1 << LR_REGNUM);\n+          saved_regs_mask |=   (1 << PC_REGNUM);\n+          arm_emit_multi_reg_pop (saved_regs_mask);\n+        }\n+    }\n+  else\n+    {\n+      emit_jump_insn (simple_return_rtx);\n+    }\n+}\n \n void\n thumb1_expand_epilogue (void)"}, {"sha": "eb99488b843fbe5454081a1a947bc7d65ac3cc37", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482baa63f3076b7d954f3b152514a0d69f11a74a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=482baa63f3076b7d954f3b152514a0d69f11a74a", "patch": "@@ -8505,8 +8505,20 @@\n \n (define_expand \"return\"\n   [(return)]\n-  \"TARGET_32BIT && USE_RETURN_INSN (FALSE)\"\n-  \"\")\n+  \"(TARGET_ARM || (TARGET_THUMB2\n+                   && ARM_FUNC_TYPE (arm_current_func_type ()) == ARM_FT_NORMAL\n+                   && !IS_STACKALIGN (arm_current_func_type ())))\n+    && USE_RETURN_INSN (FALSE)\"\n+  \"\n+  {\n+    if (TARGET_THUMB2)\n+      {\n+        thumb2_expand_return ();\n+        DONE;\n+      }\n+  }\n+  \"\n+)\n \n ;; Often the return insn will be the same as loading from memory, so set attr\n (define_insn \"*arm_return\""}]}