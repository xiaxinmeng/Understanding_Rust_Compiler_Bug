{"sha": "49d5c016dae45d256509c0ea80c983e431dce5cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkNWMwMTZkYWU0NWQyNTY1MDljMGVhODBjOTgzZTQzMWRjZTVjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-02T09:57:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-02T09:57:49Z"}, "message": "re PR libstdc++/24645 (Commonize arithmetic inserters/extractors bodies)\n\n2006-01-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24645\n\t* include/std/std_istream.h (basic_istream<>::_M_extract): New.\n\t(operator>>(bool&), operator>>(short&), operator>>(unsigned short&),\n\toperator>>(int&), operator>>(unsigned int&), operator>>(long&),\n\toperator>>(unsigned long&), operator>>(long long&), operator>>\n\t(unsigned long long&), operator>>(float&), operator>>(double&),\n\toperator>>(long double&), operator>>(void*&)): Use it.\n\t* include/bits/istream.tcc (basic_istream<>::_M_extract): Define.\n\t* include/std/std_ostream.h (basic_ostream<>::_M_insert): New.\n\t(operator<<(long), operator<<(unsigned long), operator<<(bool),\n\toperator<<(short), operator<<(unsigned short), operator<<(int),\n\toperator<<(unsigned int), operator<<(long long), operator<<\n\t(unsigned long long), operator<<(double), operator<<(float),\n\toperator<<(long double), operator<<(const void*): Use it.\n\t* include/bits/ostream.tcc (basic_ostream<>::_M_insert): Define.\n\t* src/istream-inst.cc: Add _M_insert instantiations.\n\t* src/ostream-inst.cc: Add _M_extract instantiations.\n\t* config/abi/pre/gnu.ver: Export the new symbols @GLIBCXX_3.4.7;\n\tdetail existing @GLIBCXX_3.4 exports of basic_ostream, num_put,\n\tmoney_put, etc., symbols to avoid exporting _M_insert symbols\n\t@GLIBCXX_3.4.\n\nFrom-SVN: r109236", "tree": {"sha": "f19f281bfa2b6d65105d46eb53236d70bfa0d498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19f281bfa2b6d65105d46eb53236d70bfa0d498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d5c016dae45d256509c0ea80c983e431dce5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d5c016dae45d256509c0ea80c983e431dce5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d5c016dae45d256509c0ea80c983e431dce5cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d5c016dae45d256509c0ea80c983e431dce5cd/comments", "author": null, "committer": null, "parents": [{"sha": "5f0926cd781936cc3cb73f34fcd35418f6e43880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0926cd781936cc3cb73f34fcd35418f6e43880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0926cd781936cc3cb73f34fcd35418f6e43880"}], "stats": {"total": 1027, "additions": 327, "deletions": 700}, "files": [{"sha": "a673370c60a1861cee42433f09b51ee6c49d3c70", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -1,3 +1,27 @@\n+2006-01-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24645\n+\t* include/std/std_istream.h (basic_istream<>::_M_extract): New.\n+\t(operator>>(bool&), operator>>(short&), operator>>(unsigned short&),\n+\toperator>>(int&), operator>>(unsigned int&), operator>>(long&),\n+\toperator>>(unsigned long&), operator>>(long long&), operator>>\n+\t(unsigned long long&), operator>>(float&), operator>>(double&),\n+\toperator>>(long double&), operator>>(void*&)): Use it.\n+\t* include/bits/istream.tcc (basic_istream<>::_M_extract): Define.\n+\t* include/std/std_ostream.h (basic_ostream<>::_M_insert): New.\n+\t(operator<<(long), operator<<(unsigned long), operator<<(bool),\n+\toperator<<(short), operator<<(unsigned short), operator<<(int),\n+\toperator<<(unsigned int), operator<<(long long), operator<<\n+\t(unsigned long long), operator<<(double), operator<<(float),\n+\toperator<<(long double), operator<<(const void*): Use it.\n+\t* include/bits/ostream.tcc (basic_ostream<>::_M_insert): Define.\n+\t* src/istream-inst.cc: Add _M_insert instantiations.\n+\t* src/ostream-inst.cc: Add _M_extract instantiations.\n+\t* config/abi/pre/gnu.ver: Export the new symbols @GLIBCXX_3.4.7;\n+\tdetail existing @GLIBCXX_3.4 exports of basic_ostream, num_put,\n+\tmoney_put, etc., symbols to avoid exporting _M_insert symbols\n+\t@GLIBCXX_3.4.\n+\n 2005-12-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 40."}, {"sha": "831951d0d69507059ab01cad4551533a39a00ef6", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 91, "deletions": 41, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -42,7 +42,10 @@ GLIBCXX_3.4 {\n       std::basic_[j-n]*;\n       std::basic_o[a-e]*;\n #     std::basic_ofstream;\n-      std::basic_o[g-z]*;\n+#     std::basic_o[g-z]*;\n+      std::basic_o[g-r]*;\n+      std::basic_ostr[a-d]*;\n+      std::basic_ostr[f-z]*;\n       std::basic_[p-r]*;\n       std::basic_streambuf*;\n #     std::basic_string\n@@ -86,7 +89,12 @@ GLIBCXX_3.4 {\n       std::locale::_[J-Ra-z]*;\n       std::locale::_S_normalize_category*;\n       std::locale::_[T-Za-z]*;\n-      std::[A-Zm-r]*;\n+#     std::[A-Zm-r]*;\n+      std::[A-Zm-n]*;\n+      std::[p-r]*;\n+      std::ostrstream*;\n+      std::out_of_range*;\n+      std::overflow_error*;\n       std::set_new_handler*;\n       std::set_terminate*;\n       std::set_unexpected*;\n@@ -257,7 +265,7 @@ GLIBCXX_3.4 {\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE6ignoreE[il][ijlm];\n     _ZNSt13basic_istreamIwSt11char_traitsIwEErsE*;\n \n-    # std::istream operators and inserters\n+    # std::istream operators and extractors\n     _ZSt7getlineI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istream*;\n     _ZSt2wsI[cw]St11char_traitsI[cw]EE*;\n     _ZStrsI[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n@@ -267,6 +275,37 @@ GLIBCXX_3.4 {\n     _ZStrsIe[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n     _ZStrsIf[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n \n+    # std::basic_ostream<char>\n+    _ZNSoC*;\n+    _ZNSoD*;\n+    _ZNKSo6sentrycvbEv;\n+    _ZNSo8_M_write*;\n+    _ZNSo[0-9][a-z]*;\n+    _ZNSolsE*;\n+\n+    # std::basic_ostream<wchar_t>\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEEC*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEED*;\n+    _ZNKSt13basic_ostreamIwSt11char_traitsIwEE[0-9][a-z]*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE3putEw;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE5flushEv;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE5seekpE*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE5tellpEv;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE5writeEPKw*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentry*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE8_M_write*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEElsE*;\n+\n+    # std::ostream operators and inserters\n+    _ZSt4end[ls]I[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZSt5flushI[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZStlsI[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZStlsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_ostream*;\n+    _ZStlsISt11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZStlsId[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZStlsIe[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+    _ZStlsIf[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n+\n     # std::locale destructors\n     _ZNSt6localeD*;\n \t\n@@ -287,9 +326,15 @@ GLIBCXX_3.4 {\n     # std::num_get\n     _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n \n+    # std::num_put\n+    _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+\n     # std::money_get\n     _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n \n+    # std::money_put\n+    _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+\n     # std::_Rb_tree\n     _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base;\n     _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base;\n@@ -328,25 +373,25 @@ GLIBCXX_3.4 {\n     _ZN9__gnu_cxx18__exchange_and_add*;\n \n     # __gnu_debug\n-_ZN10__gnu_norm15_List_node_base4hookEPS0_;\n-_ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n-_ZN10__gnu_norm15_List_node_base6unhookEv;\n-_ZN10__gnu_norm15_List_node_base7reverseEv;\n-_ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n-_ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n-_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n-_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n-_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+    _ZN10__gnu_norm15_List_node_base4hookEPS0_;\n+    _ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n+    _ZN10__gnu_norm15_List_node_base6unhookEv;\n+    _ZN10__gnu_norm15_List_node_base7reverseEv;\n+    _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+    _ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n+    _ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n+    _ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n+    _ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n+    _ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n+    _ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n \n     # operator new(size_t)\n     _Znw[jm];\n@@ -596,25 +641,30 @@ GLIBCXX_3.4.7 {\n \n     _ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetE[jm];\n \n-_ZNSt10__gnu_norm15_List_node_base4hookEPS0_;\n-_ZNSt10__gnu_norm15_List_node_base4swapERS0_S1_;\n-_ZNSt10__gnu_norm15_List_node_base6unhookEv;\n-_ZNSt10__gnu_norm15_List_node_base7reverseEv;\n-_ZNSt10__gnu_norm15_List_node_base8transferEPS0_S1_;\n-_ZNKSt11__gnu_debug16_Error_formatter8_M_errorEv;\n-_ZNKSt11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n-_ZNKSt11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n-_ZNKSt11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n-_ZNKSt11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n-_ZNKSt11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n-_ZNKSt11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-_ZNKSt11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-_ZNSt11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-_ZNSt11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-_ZNSt11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-_ZNSt11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-_ZNSt11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-_ZNSt11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+    _ZNSt10__gnu_norm15_List_node_base4hookEPS0_;\n+    _ZNSt10__gnu_norm15_List_node_base4swapERS0_S1_;\n+    _ZNSt10__gnu_norm15_List_node_base6unhookEv;\n+    _ZNSt10__gnu_norm15_List_node_base7reverseEv;\n+    _ZNSt10__gnu_norm15_List_node_base8transferEPS0_S1_;\n+    _ZNKSt11__gnu_debug16_Error_formatter8_M_errorEv;\n+    _ZNKSt11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n+    _ZNKSt11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n+    _ZNKSt11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n+    _ZNKSt11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n+    _ZNKSt11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+    _ZNKSt11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+    _ZNKSt11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+    _ZNSt11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+    _ZNSt11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+    _ZNSt11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+    _ZNSt11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+    _ZNSt11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+    _ZNSt11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+\n+    _ZNSo9_M_insertI*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertI*;\n+    _ZNSi10_M_extractI*;\n+    _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractI*;\n \n } GLIBCXX_3.4.6;\n "}, {"sha": "184c2bd613fc6a2ed7071032973d1c91b2063209", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 21, "deletions": 304, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -110,310 +110,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(bool& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(short& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      long __l;\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __l);\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 118. basic_istream uses nonexistent num_get member functions.\n-\t      if (!(__err & ios_base::failbit)\n-\t\t  && (numeric_limits<short>::min() <= __l\n-\t\t      && __l <= numeric_limits<short>::max()))\n-\t\t__n = __l;\n-\t      else\n-                __err |= ios_base::failbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(unsigned short& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(int& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      long __l;\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __l);\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 118. basic_istream uses nonexistent num_get member functions.\n-\t      if (!(__err & ios_base::failbit)\n-\t\t  && (numeric_limits<int>::min() <= __l\n-\t\t      && __l <= numeric_limits<int>::max()))\n-\t\t__n = __l;\n-\t      else\n-                __err |= ios_base::failbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(unsigned int& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(long& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(unsigned long& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(long long& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(unsigned long long& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-#endif\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(float& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(double& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(long double& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    basic_istream<_CharT, _Traits>::\n-    operator>>(void*& __n)\n-    {\n-      sentry __cerb(*this, false);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n-\t      __ng.get(*this, 0, *this, __err, __n);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n+    template<typename _ValueT>\n+      basic_istream<_CharT, _Traits>&\n+      basic_istream<_CharT, _Traits>::\n+      _M_extract(_ValueT& __v)\n+      {\n+\tsentry __cerb(*this, false);\n+\tif (__cerb)\n+\t  {\n+\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t    try\n+\t      {\n+\t\tconst __num_get_type& __ng = __check_facet(this->_M_num_get);\n+\t\t__ng.get(*this, 0, *this, __err, __v);\n+\t      }\n+\t    catch(...)\n+\t      { this->_M_setstate(ios_base::badbit); }\n+\t    if (__err)\n+\t      this->setstate(__err);\n+\t  }\n+\treturn *this;\n+      }\n \n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>&"}, {"sha": "7b80495c7e86f6d31f825546f01eaddbe1335542", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 23, "deletions": 327, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -97,333 +97,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(bool __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(short __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 117. basic_ostream uses nonexistent num_put member functions.\n-\t      long __l;\n-\t      const ios_base::fmtflags __fmt = (this->flags()\n-\t\t\t\t\t\t& ios_base::basefield);\n-\t      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\n-\t\t__l = static_cast<long>(static_cast<unsigned short>(__n));\n-\t      else\n-\t\t__l = static_cast<long>(__n);\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __l).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(unsigned short __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 117. basic_ostream uses nonexistent num_put member functions.\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(),\n-\t\t\t   static_cast<unsigned long>(__n)).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(int __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 117. basic_ostream uses nonexistent num_put member functions.\n-\t      long __l;\n-\t      const ios_base::fmtflags __fmt = (this->flags()\n-\t\t\t\t\t\t& ios_base::basefield);\n-\t      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\n-\t\t__l = static_cast<long>(static_cast<unsigned int>(__n));\n-\t      else\n-\t\t__l = static_cast<long>(__n);\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __l).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(unsigned int __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 117. basic_ostream uses nonexistent num_put member functions.\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(),\n-\t\t\t   static_cast<unsigned long>(__n)).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(long __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(unsigned long __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(long long __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(unsigned long long __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-#endif\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(float __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 117. basic_ostream uses nonexistent num_put member functions.\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(),\n-\t\t\t   static_cast<double>(__n)).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(double __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(long double __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    operator<<(const void* __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t  try\n-\t    {\n-\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n-\t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\t__err |= ios_base::badbit;\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t  if (__err)\n-\t    this->setstate(__err);\n-\t}\n-      return *this;\n-    }\n-\n+    template<typename _ValueT>\n+      basic_ostream<_CharT, _Traits>&\n+      basic_ostream<_CharT, _Traits>::\n+      _M_insert(_ValueT __v)\n+      {\n+\tsentry __cerb(*this);\n+\tif (__cerb)\n+\t  {\n+\t    ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t    try\n+\t      {\n+\t\tconst __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t\tif (__np.put(*this, *this, this->fill(), __v).failed())\n+\t\t  __err |= ios_base::badbit;\n+\t      }\n+\t    catch(...)\n+\t      { this->_M_setstate(ios_base::badbit); }\n+\t    if (__err)\n+\t      this->setstate(__err);\n+\t  }\n+\treturn *this;\n+      }\n+  \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::"}, {"sha": "659d3e2a2d702ba9571253164926f2f961a68662", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -166,45 +166,86 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @c num_get facet) to parse the input data.\n       */\n       __istream_type& \n-      operator>>(bool& __n);\n+      operator>>(bool& __n)\n+      { return _M_extract(__n); }\n       \n       __istream_type& \n-      operator>>(short& __n);\n+      operator>>(short& __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 118. basic_istream uses nonexistent num_get member functions.\n+\tlong __l;\n+\t_M_extract(__l);\n+\tif (!this->fail())\n+\t  {\n+\t    if (numeric_limits<short>::min() <= __l\n+\t\t&& __l <= numeric_limits<short>::max())\n+\t      __n = __l;\n+\t    else\n+\t      this->setstate(ios_base::failbit);\n+\t  }\n+\treturn *this;\n+      }\n       \n       __istream_type& \n-      operator>>(unsigned short& __n);\n+      operator>>(unsigned short& __n)\n+      { return _M_extract(__n); }\n \n       __istream_type& \n-      operator>>(int& __n);\n-      \n+      operator>>(int& __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 118. basic_istream uses nonexistent num_get member functions.\n+\tlong __l;\n+\t_M_extract(__l);\n+\tif (!this->fail())\n+\t  {\n+\t    if (numeric_limits<int>::min() <= __l\n+\t\t&& __l <= numeric_limits<int>::max())\n+\t      __n = __l;\n+\t    else\n+\t      this->setstate(ios_base::failbit);\n+\t  }\n+\treturn *this;\n+      }\n+     \n       __istream_type& \n-      operator>>(unsigned int& __n);\n+      operator>>(unsigned int& __n)\n+      { return _M_extract(__n); }\n \n       __istream_type& \n-      operator>>(long& __n);\n+      operator>>(long& __n)\n+      { return _M_extract(__n); }\n       \n       __istream_type& \n-      operator>>(unsigned long& __n);\n+      operator>>(unsigned long& __n)\n+      { return _M_extract(__n); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n       __istream_type& \n-      operator>>(long long& __n);\n+      operator>>(long long& __n)\n+      { return _M_extract(__n); }\n \n       __istream_type& \n-      operator>>(unsigned long long& __n);\n+      operator>>(unsigned long long& __n)\n+      { return _M_extract(__n); }\n #endif\n \n       __istream_type& \n-      operator>>(float& __f);\n+      operator>>(float& __f)\n+      { return _M_extract(__f); }\n \n       __istream_type& \n-      operator>>(double& __f);\n+      operator>>(double& __f)\n+      { return _M_extract(__f); }\n \n       __istream_type& \n-      operator>>(long double& __f);\n+      operator>>(long double& __f)\n+      { return _M_extract(__f); }\n \n       __istream_type& \n-      operator>>(void*& __p);\n+      operator>>(void*& __p)\n+      { return _M_extract(__p); }\n \n       /**\n        *  @brief  Extracting into another streambuf.\n@@ -572,6 +613,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     protected:\n       explicit \n       basic_istream(): _M_gcount(streamsize(0)) { }\n+\n+      template<typename _ValueT>\n+        __istream_type&\n+        _M_extract(_ValueT& __v);\n     };\n \n   // Explicit specialization declarations, defined in src/istream.cc."}, {"sha": "8dc398ed0ef3c93e66e9236031026de5d564c755", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -164,45 +164,86 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @c num_get facet) to perform numeric formatting.\n       */\n       __ostream_type& \n-      operator<<(long __n);\n+      operator<<(long __n)\n+      { return _M_insert(__n); }\n       \n       __ostream_type& \n-      operator<<(unsigned long __n);\n+      operator<<(unsigned long __n)\n+      { return _M_insert(__n); }\t\n \n       __ostream_type& \n-      operator<<(bool __n);\n+      operator<<(bool __n)\n+      { return _M_insert(__n); }\n \n       __ostream_type& \n-      operator<<(short __n);\n+      operator<<(short __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 117. basic_ostream uses nonexistent num_put member functions.\n+\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t  return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));\n+\telse\n+\t  return _M_insert(static_cast<long>(__n));\n+      }\n \n       __ostream_type& \n-      operator<<(unsigned short __n);\n+      operator<<(unsigned short __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 117. basic_ostream uses nonexistent num_put member functions.\n+\treturn _M_insert(static_cast<unsigned long>(__n));\n+      }\n \n       __ostream_type& \n-      operator<<(int __n);\n+      operator<<(int __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 117. basic_ostream uses nonexistent num_put member functions.\n+\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t  return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));\n+\telse\n+\t  return _M_insert(static_cast<long>(__n));\n+      }\n \n       __ostream_type& \n-      operator<<(unsigned int __n);\n+      operator<<(unsigned int __n)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 117. basic_ostream uses nonexistent num_put member functions.\n+\treturn _M_insert(static_cast<unsigned long>(__n));\n+      }\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n       __ostream_type& \n-      operator<<(long long __n);\n+      operator<<(long long __n)\n+      { return _M_insert(__n); }\n \n       __ostream_type& \n-      operator<<(unsigned long long __n);\n+      operator<<(unsigned long long __n)\n+      { return _M_insert(__n); }\t\n #endif\n \n       __ostream_type& \n-      operator<<(double __f);\n+      operator<<(double __f)\n+      { return _M_insert(__f); }\n \n       __ostream_type& \n-      operator<<(float __f);\n+      operator<<(float __f)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 117. basic_ostream uses nonexistent num_put member functions.\n+\treturn _M_insert(static_cast<double>(__f));\n+      }\n \n       __ostream_type& \n-      operator<<(long double __f);\n+      operator<<(long double __f)\n+      { return _M_insert(__f); }\n \n       __ostream_type& \n-      operator<<(const void* __p);\n+      operator<<(const void* __p)\n+      { return _M_insert(__p); }\n \n       /**\n        *  @brief  Extracting from another streambuf.\n@@ -339,6 +380,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     protected:\n       explicit \n       basic_ostream() { }\n+\n+      template<typename _ValueT>\n+        __ostream_type&\n+        _M_insert(_ValueT __v);\n     };\n \n   /**"}, {"sha": "2e5c7d344187f5247f07dd7bf8930c40b994dbde", "filename": "libstdc++-v3/src/istream-inst.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream-inst.cc?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -53,6 +53,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template istream& operator>>(istream&, _Setprecision);\n   template istream& operator>>(istream&, _Setw);\n \n+  template istream& istream::_M_extract(unsigned short&);\n+  template istream& istream::_M_extract(unsigned int&);  \n+  template istream& istream::_M_extract(long&);\n+  template istream& istream::_M_extract(unsigned long&);\n+  template istream& istream::_M_extract(bool&);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template istream& istream::_M_extract(long long&);\n+  template istream& istream::_M_extract(unsigned long long&);\n+#endif\n+  template istream& istream::_M_extract(float&);\n+  template istream& istream::_M_extract(double&);\n+  template istream& istream::_M_extract(long double&);\n+  template istream& istream::_M_extract(void*&);\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_istream<wchar_t>;\n   template wistream& ws(wistream&);\n@@ -65,6 +79,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template wistream& operator>>(wistream&, _Setbase);\n   template wistream& operator>>(wistream&, _Setprecision);\n   template wistream& operator>>(wistream&, _Setw);\n+\n+  template wistream& wistream::_M_extract(unsigned short&);\n+  template wistream& wistream::_M_extract(unsigned int&);  \n+  template wistream& wistream::_M_extract(long&);\n+  template wistream& wistream::_M_extract(unsigned long&);\n+  template wistream& wistream::_M_extract(bool&);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template wistream& wistream::_M_extract(long long&);\n+  template wistream& wistream::_M_extract(unsigned long long&);\n+#endif\n+  template wistream& wistream::_M_extract(float&);\n+  template wistream& wistream::_M_extract(double&);\n+  template wistream& wistream::_M_extract(long double&);\n+  template wistream& wistream::_M_extract(void*&);\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "70df37beb76dc61f14cfc159f5e02ccd9e1e1966", "filename": "libstdc++-v3/src/ostream-inst.cc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d5c016dae45d256509c0ea80c983e431dce5cd/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc?ref=49d5c016dae45d256509c0ea80c983e431dce5cd", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -56,6 +56,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template ostream& operator<<(ostream&, _Setprecision);\n   template ostream& operator<<(ostream&, _Setw);\n \n+  template ostream& ostream::_M_insert(long);\n+  template ostream& ostream::_M_insert(unsigned long);\n+  template ostream& ostream::_M_insert(bool);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template ostream& ostream::_M_insert(long long);\n+  template ostream& ostream::_M_insert(unsigned long long);\n+#endif\n+  template ostream& ostream::_M_insert(double);\n+  template ostream& ostream::_M_insert(long double);\n+  template ostream& ostream::_M_insert(const void*);\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template class basic_ostream<wchar_t>;\n   template wostream& endl(wostream&);\n@@ -72,6 +83,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template wostream& operator<<(wostream&, _Setbase);\n   template wostream& operator<<(wostream&, _Setprecision);\n   template wostream& operator<<(wostream&, _Setw);\n+\n+  template wostream& wostream::_M_insert(long);\n+  template wostream& wostream::_M_insert(unsigned long);\n+  template wostream& wostream::_M_insert(bool);\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template wostream& wostream::_M_insert(long long);\n+  template wostream& wostream::_M_insert(unsigned long long);\n+#endif\n+  template wostream& wostream::_M_insert(double);\n+  template wostream& wostream::_M_insert(long double);\n+  template wostream& wostream::_M_insert(const void*);\n #endif\n \n _GLIBCXX_END_NAMESPACE"}]}