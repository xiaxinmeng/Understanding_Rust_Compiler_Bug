{"sha": "90ca31be0392b626536c5b5a65711cb1f41107e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBjYTMxYmUwMzkyYjYyNjUzNmM1YjVhNjU3MTFjYjFmNDExMDdlNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-12T19:06:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-12T19:06:16Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r458", "tree": {"sha": "f20ada4d7c2e9f7d731cb7003fba996568834332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20ada4d7c2e9f7d731cb7003fba996568834332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ca31be0392b626536c5b5a65711cb1f41107e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ca31be0392b626536c5b5a65711cb1f41107e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ca31be0392b626536c5b5a65711cb1f41107e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ca31be0392b626536c5b5a65711cb1f41107e5/comments", "author": null, "committer": null, "parents": [{"sha": "5a3740fd9467de7a52a39a08b5a14b6637a47fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3740fd9467de7a52a39a08b5a14b6637a47fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3740fd9467de7a52a39a08b5a14b6637a47fd0"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "2569128b9ee4bfd4e2705e1626c9acd68e84eb4c", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ca31be0392b626536c5b5a65711cb1f41107e5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ca31be0392b626536c5b5a65711cb1f41107e5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=90ca31be0392b626536c5b5a65711cb1f41107e5", "patch": "@@ -915,12 +915,6 @@ extern tree build_type_variant ();\n \n extern tree build_type_copy ();\n \n-/* Return the mode for data of a given size SIZE and mode class CLASS.\n-   If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.\n-   The value is BLKmode if no other mode is found.  */\n-\n-extern enum machine_mode mode_for_size ();\n-\n /* Given a ..._TYPE node, calculate the TYPE_SIZE, TYPE_SIZE_UNIT,\n    TYPE_ALIGN and TYPE_MODE fields.\n    If called more than once on one node, does nothing except\n@@ -1038,6 +1032,14 @@ extern int lvalue_or_else ();\n \n extern tree save_expr ();\n \n+/* variable_size (EXP) is like save_expr (EXP) except that it\n+   is for the special case of something that is part of a\n+   variable size for a data type.  It makes special arrangements\n+   to compute the value at the right time when the data type\n+   belongs to a function parameter.  */\n+\n+extern tree variable_size ();\n+\n /* stabilize_reference (EXP) returns an reference equivalent to EXP\n    but it can be used multiple times\n    and only evaluate the subexpressions once.  */"}]}