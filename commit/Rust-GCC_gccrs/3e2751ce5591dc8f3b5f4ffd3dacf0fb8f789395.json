{"sha": "3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyNzUxY2U1NTkxZGM4ZjNiNWY0ZmZkM2RhY2YwZmI4Zjc4OTM5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T09:38:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T09:38:39Z"}, "message": "[AArch64] Make <perm_insn> the complete mnemonic\n\nThe Advanced SIMD and SVE permute patterns both split the permute\noperation into a base name and a hilo suffix.  That works well, but it\nmeans that for \"@\" patterns, we need to pass the permute code twice,\nonce for the base name and once for the suffix.\n\nHaving a unified name avoids that and also makes the definitions\nslightly simpler.\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (perm_insn): Include the \"1\"/\"2\" suffix.\n\t(perm_hilo): Remove UNSPEC_ZIP*, UNSEPC_TRN* and UNSPEC_UZP*.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>): Rename to..\n\t(aarch64_<PERMUTE:perm_insn><mode>): ...this and remove perm_hilo\n\tfrom the asm template.\n\t* config/aarch64/aarch64-sve.md\n\t(aarch64_<perm_insn><perm_hilo><PRED_ALL:mode>): Rename to..\n\t(aarch64_<perm_insn><PRED_ALL:mode>): ...this and remove perm_hilo\n\tfrom the asm template.\n\t(aarch64_<perm_insn><perm_hilo><SVE_ALL:mode>): Rename to..\n\t(aarch64_<perm_insn><SVE_ALL:mode>): ...this and remove perm_hilo\n\tfrom the asm template.\n\t* config/aarch64/aarch64-simd-builtins.def: Update comment.\n\nFrom-SVN: r274366", "tree": {"sha": "12e9b2325e99567e5cf2823358cd369b09e1f5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e9b2325e99567e5cf2823358cd369b09e1f5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f77d27597dd0556c2a788476f52cf7ef4a5c44be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77d27597dd0556c2a788476f52cf7ef4a5c44be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77d27597dd0556c2a788476f52cf7ef4a5c44be"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "8562f53e6782cda4a09af762c0d35b1f5ac7d147", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "patch": "@@ -1,3 +1,20 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (perm_insn): Include the \"1\"/\"2\" suffix.\n+\t(perm_hilo): Remove UNSPEC_ZIP*, UNSEPC_TRN* and UNSPEC_UZP*.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>): Rename to..\n+\t(aarch64_<PERMUTE:perm_insn><mode>): ...this and remove perm_hilo\n+\tfrom the asm template.\n+\t* config/aarch64/aarch64-sve.md\n+\t(aarch64_<perm_insn><perm_hilo><PRED_ALL:mode>): Rename to..\n+\t(aarch64_<perm_insn><PRED_ALL:mode>): ...this and remove perm_hilo\n+\tfrom the asm template.\n+\t(aarch64_<perm_insn><perm_hilo><SVE_ALL:mode>): Rename to..\n+\t(aarch64_<perm_insn><SVE_ALL:mode>): ...this and remove perm_hilo\n+\tfrom the asm template.\n+\t* config/aarch64/aarch64-simd-builtins.def: Update comment.\n+\n 2019-08-13  Martin Liska  <mliska@suse.cz>\n \n \t* value-prof.c (gimple_ic_transform): Add new line."}, {"sha": "01518fec69b3ea2808422083a09ec67186232014", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "patch": "@@ -424,7 +424,7 @@\n   BUILTIN_VB (UNOP, rbit, 0)\n \n   /* Implemented by\n-     aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>.  */\n+     aarch64_<PERMUTE:perm_insn><mode>.  */\n   BUILTIN_VALL (BINOP, zip1, 0)\n   BUILTIN_VALL (BINOP, zip2, 0)\n   BUILTIN_VALL (BINOP, uzp1, 0)"}, {"sha": "e33a00967a9d42fda7efb291ff3498cfec56ca2a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "patch": "@@ -5781,13 +5781,13 @@\n ;; This instruction's pattern is generated directly by\n ;; aarch64_expand_vec_perm_const, so any changes to the pattern would\n ;; need corresponding changes there.\n-(define_insn \"aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>\"\n+(define_insn \"aarch64_<PERMUTE:perm_insn><mode>\"\n   [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n \t(unspec:VALL_F16 [(match_operand:VALL_F16 1 \"register_operand\" \"w\")\n \t\t\t  (match_operand:VALL_F16 2 \"register_operand\" \"w\")]\n \t PERMUTE))]\n   \"TARGET_SIMD\"\n-  \"<PERMUTE:perm_insn><PERMUTE:perm_hilo>\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  \"<PERMUTE:perm_insn>\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_permute<q>\")]\n )\n "}, {"sha": "c6ab217c8fd83a130ec24d9abbdb367c0d6a4c64", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "patch": "@@ -3356,13 +3356,13 @@\n \n ;; Permutes that take half the elements from one vector and half the\n ;; elements from the other.\n-(define_insn \"aarch64_sve_<perm_insn><perm_hilo><mode>\"\n+(define_insn \"aarch64_sve_<perm_insn><mode>\"\n   [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_ALL [(match_operand:SVE_ALL 1 \"register_operand\" \"w\")\n \t\t\t (match_operand:SVE_ALL 2 \"register_operand\" \"w\")]\n \t\t\tPERMUTE))]\n   \"TARGET_SVE\"\n-  \"<perm_insn><perm_hilo>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+  \"<perm_insn>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n ;; Concatenate two vectors and extract a subvector.  Note that the\n@@ -3395,13 +3395,13 @@\n \n ;; Permutes that take half the elements from one vector and half the\n ;; elements from the other.\n-(define_insn \"*aarch64_sve_<perm_insn><perm_hilo><mode>\"\n+(define_insn \"*aarch64_sve_<perm_insn><mode>\"\n   [(set (match_operand:PRED_ALL 0 \"register_operand\" \"=Upa\")\n \t(unspec:PRED_ALL [(match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")\n \t\t\t  (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\")]\n \t\t\t PERMUTE))]\n   \"TARGET_SVE\"\n-  \"<perm_insn><perm_hilo>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+  \"<perm_insn>\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n )\n \n ;; ========================================================================="}, {"sha": "f59052baf21f78012d1cc43564acdd9235ccf220", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "patch": "@@ -1888,18 +1888,15 @@\n \t\t\t\t   (UNSPEC_AUTIA1716 \"12\")\n \t\t\t\t   (UNSPEC_AUTIB1716 \"14\")])\n \n-(define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip\") (UNSPEC_ZIP2 \"zip\")\n-\t\t\t    (UNSPEC_TRN1 \"trn\") (UNSPEC_TRN2 \"trn\")\n-\t\t\t    (UNSPEC_UZP1 \"uzp\") (UNSPEC_UZP2 \"uzp\")])\n+(define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip1\") (UNSPEC_ZIP2 \"zip2\")\n+\t\t\t    (UNSPEC_TRN1 \"trn1\") (UNSPEC_TRN2 \"trn2\")\n+\t\t\t    (UNSPEC_UZP1 \"uzp1\") (UNSPEC_UZP2 \"uzp2\")])\n \n ; op code for REV instructions (size within which elements are reversed).\n (define_int_attr rev_op [(UNSPEC_REV64 \"64\") (UNSPEC_REV32 \"32\")\n \t\t\t (UNSPEC_REV16 \"16\")])\n \n-(define_int_attr perm_hilo [(UNSPEC_ZIP1 \"1\") (UNSPEC_ZIP2 \"2\")\n-\t\t\t    (UNSPEC_TRN1 \"1\") (UNSPEC_TRN2 \"2\")\n-\t\t\t    (UNSPEC_UZP1 \"1\") (UNSPEC_UZP2 \"2\")\n-\t\t\t    (UNSPEC_UNPACKSHI \"hi\") (UNSPEC_UNPACKUHI \"hi\")\n+(define_int_attr perm_hilo [(UNSPEC_UNPACKSHI \"hi\") (UNSPEC_UNPACKUHI \"hi\")\n \t\t\t    (UNSPEC_UNPACKSLO \"lo\") (UNSPEC_UNPACKULO \"lo\")])\n \n ;; Return true if the associated optab refers to the high-numbered lanes,"}]}