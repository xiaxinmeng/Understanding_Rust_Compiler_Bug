{"sha": "8389386c6d55d57afc3ae01f71546ac4468f7926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4OTM4NmM2ZDU1ZDU3YWZjM2FlMDFmNzE1NDZhYzQ0NjhmNzkyNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-10T13:24:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-10T13:24:32Z"}, "message": "gimple-parser.c (c_parser_gimple_postfix_expression): Support _Literal (int *) &x for address literals.\n\n2019-07-10  Richard Biener  <rguenther@suse.de>\n\n\tc/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression): Support\n\t_Literal (int *) &x for address literals.\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Look at valueized\n\tLHS whenever possible.\n\n\t* gcc.dg/torture/ssa-fre-5.c: New testcase.\n\t* gcc.dg/torture/ssa-fre-6.c: Likewise.\n\t* gcc.dg/torture/ssa-fre-7.c: Likewise.\n\nFrom-SVN: r273354", "tree": {"sha": "3c0df90f570091edafcdd5fb8f152cfb54ee4388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0df90f570091edafcdd5fb8f152cfb54ee4388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8389386c6d55d57afc3ae01f71546ac4468f7926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8389386c6d55d57afc3ae01f71546ac4468f7926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8389386c6d55d57afc3ae01f71546ac4468f7926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8389386c6d55d57afc3ae01f71546ac4468f7926/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f861d731ca497443702f78b78d5090063c17539d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f861d731ca497443702f78b78d5090063c17539d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f861d731ca497443702f78b78d5090063c17539d"}], "stats": {"total": 148, "additions": 139, "deletions": 9}, "files": [{"sha": "ac390d65ae7b0ef17e15b7af07682f7ce6089616", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -1,3 +1,8 @@\n+2019-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Look at valueized\n+\tLHS whenever possible.\n+\n 2019-07-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-alias.c (nonoverlapping_component_refs_p_1): Break out"}, {"sha": "bb0573e5401d2f8d3fb70b6553be0686cc8be4a4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -1,3 +1,8 @@\n+2019-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression): Support\n+\t_Literal (int *) &x for address literals.\n+\n 2019-07-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/61339"}, {"sha": "a0ea7215984ab01074c5622428ee4d28d25106ec", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -1606,8 +1606,10 @@ c_parser_gimple_postfix_expression (gimple_parser &parser)\n \t\t  tree val = c_parser_gimple_postfix_expression (parser).value;\n \t\t  if (! val\n \t\t      || val == error_mark_node\n-\t\t      || ! CONSTANT_CLASS_P (val)\n-\t\t      || (addr_p && TREE_CODE (val) != STRING_CST))\n+\t\t      || (!CONSTANT_CLASS_P (val)\n+\t\t\t  && !(addr_p\n+\t\t\t       && (TREE_CODE (val) == STRING_CST\n+\t\t\t\t   || DECL_P (val)))))\n \t\t    {\n \t\t      c_parser_error (parser, \"invalid _Literal\");\n \t\t      return expr;"}, {"sha": "840d9c1f251601a40b82941501920775f8ed78bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -1,3 +1,9 @@\n+2019-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/ssa-fre-5.c: New testcase.\n+\t* gcc.dg/torture/ssa-fre-6.c: Likewise.\n+\t* gcc.dg/torture/ssa-fre-7.c: Likewise.\n+\n 2019-07-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/modular5.adb: New testcase."}, {"sha": "5ee9d64204c81cc568a31fde136a32567b7f4408", "filename": "gcc/testsuite/gcc.dg/torture/ssa-fre-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-5.c?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-additional-options \"-fgimple -fdump-tree-fre1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+int __GIMPLE (ssa,startwith(\"fre\"))\n+foo ()\n+{\n+  int * p;\n+  int i;\n+  int x[4];\n+  long unsigned int _1;\n+  long unsigned int _2;\n+  int _7;\n+\n+  __BB(2):\n+  i_3 = 0;\n+  _1 = (long unsigned int) i_3;\n+  _2 = _1 * 4ul;\n+  p_4 = _Literal (int *) &x + _2;\n+  __MEM <v4si> ((v4si *)p_4) = _Literal (v4si) { 1, 2, 3, 4 };\n+  _7 = x[0];\n+  return _7;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"fre1\" } } */"}, {"sha": "ecdd8f64e956625b4cb7c5021ddbc1821724abd5", "filename": "gcc/testsuite/gcc.dg/torture/ssa-fre-6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-6.c?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-additional-options \"-fgimple -fdump-tree-fre1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+int __GIMPLE (ssa,startwith(\"fre\"))\n+foo ()\n+{\n+  int * p;\n+  int i;\n+  int x[4];\n+  long unsigned int _1;\n+  long unsigned int _2;\n+  int _7;\n+\n+  __BB(2):\n+  i_3 = 0;\n+  _1 = (long unsigned int) i_3;\n+  _2 = _1 * 4ul;\n+  p_4 = _Literal (int *) &x + _2;\n+  __MEM <v4si> ((v4si *)p_4) = _Literal (v4si) {};\n+  _7 = x[0];\n+  return _7;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"fre1\" } } */"}, {"sha": "07f3c9dc567e4d6467021c1ed29c7a449c51487e", "filename": "gcc/testsuite/gcc.dg/torture/ssa-fre-7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fssa-fre-7.c?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-additional-options \"-fgimple -fdump-tree-fre1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+int __GIMPLE (ssa,startwith(\"fre\"))\n+foo (int c)\n+{\n+  int * p;\n+  int i;\n+  int x[4];\n+  long unsigned int _1;\n+  long unsigned int _2;\n+  int _7;\n+  v4si _6;\n+\n+  __BB(2):\n+  i_3 = 0;\n+  _1 = (long unsigned int) i_3;\n+  _2 = _1 * 4ul;\n+  p_4 = _Literal (int *) &x + _2;\n+  _6 = _Literal (v4si) { c_5(D), c_5(D), c_5(D), c_5(D) };\n+  __MEM <v4si> ((v4si *)p_4) = _6;\n+  _7 = x[0];\n+  return _7;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return c_5\\\\(D\\\\);\" \"fre1\" } } */"}, {"sha": "777cf58e43b7ca5e8fc0dfe029e896cdb38672d0", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8389386c6d55d57afc3ae01f71546ac4468f7926/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8389386c6d55d57afc3ae01f71546ac4468f7926", "patch": "@@ -2488,12 +2488,22 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t   && gimple_assign_rhs_code (def_stmt) == CONSTRUCTOR\n \t   && CONSTRUCTOR_NELTS (gimple_assign_rhs1 (def_stmt)) == 0)\n     {\n+      tree lhs = gimple_assign_lhs (def_stmt);\n       tree base2;\n       poly_int64 offset2, size2, maxsize2;\n       HOST_WIDE_INT offset2i, size2i;\n       bool reverse;\n-      base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n-\t\t\t\t       &offset2, &size2, &maxsize2, &reverse);\n+      if (lhs_ref_ok)\n+\t{\n+\t  base2 = ao_ref_base (&lhs_ref);\n+\t  offset2 = lhs_ref.offset;\n+\t  size2 = lhs_ref.size;\n+\t  maxsize2 = lhs_ref.max_size;\n+\t  reverse = reverse_storage_order_for_component_p (lhs);\n+\t}\n+      else\n+\tbase2 = get_ref_base_and_extent (lhs,\n+\t\t\t\t\t &offset2, &size2, &maxsize2, &reverse);\n       if (known_size_p (maxsize2)\n \t  && known_eq (maxsize2, size2)\n \t  && adjust_offsets_for_equal_base_address (base, &offset,\n@@ -2541,12 +2551,22 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t       || (TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n \t\t   && is_gimple_min_invariant (SSA_VAL (gimple_assign_rhs1 (def_stmt))))))\n     {\n+      tree lhs = gimple_assign_lhs (def_stmt);\n       tree base2;\n       poly_int64 offset2, size2, maxsize2;\n       HOST_WIDE_INT offset2i, size2i;\n       bool reverse;\n-      base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n-\t\t\t\t       &offset2, &size2, &maxsize2, &reverse);\n+      if (lhs_ref_ok)\n+\t{\n+\t  base2 = ao_ref_base (&lhs_ref);\n+\t  offset2 = lhs_ref.offset;\n+\t  size2 = lhs_ref.size;\n+\t  maxsize2 = lhs_ref.max_size;\n+\t  reverse = reverse_storage_order_for_component_p (lhs);\n+\t}\n+      else\n+\tbase2 = get_ref_base_and_extent (lhs,\n+\t\t\t\t\t &offset2, &size2, &maxsize2, &reverse);\n       if (base2\n \t  && !reverse\n \t  && known_eq (maxsize2, size2)\n@@ -2627,12 +2647,21 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      downstream, not so much for actually doing the insertion.  */\n \t   && data->partial_defs.is_empty ())\n     {\n+      tree lhs = gimple_assign_lhs (def_stmt);\n       tree base2;\n       poly_int64 offset2, size2, maxsize2;\n       bool reverse;\n-      base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n-\t\t\t\t       &offset2, &size2, &maxsize2,\n-\t\t\t\t       &reverse);\n+      if (lhs_ref_ok)\n+\t{\n+\t  base2 = ao_ref_base (&lhs_ref);\n+\t  offset2 = lhs_ref.offset;\n+\t  size2 = lhs_ref.size;\n+\t  maxsize2 = lhs_ref.max_size;\n+\t  reverse = reverse_storage_order_for_component_p (lhs);\n+\t}\n+      else\n+\tbase2 = get_ref_base_and_extent (lhs,\n+\t\t\t\t\t &offset2, &size2, &maxsize2, &reverse);\n       tree def_rhs = gimple_assign_rhs1 (def_stmt);\n       if (!reverse\n \t  && known_size_p (maxsize2)"}]}