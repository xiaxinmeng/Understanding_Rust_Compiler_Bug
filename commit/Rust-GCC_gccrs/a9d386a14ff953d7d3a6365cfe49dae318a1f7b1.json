{"sha": "a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkMzg2YTE0ZmY5NTNkN2QzYTYzNjVjZmU0OWRhZTMxOGExZjdiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-01-28T10:40:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-01-28T10:40:06Z"}, "message": "re PR middle-end/38934 (ICE in set_value_range, at tree-vrp.c:398)\n\n\tPR middle-end/38934\n\t* tree-vrp.c (extract_range_from_assert): For LE_EXPR and LT_EXPR\n\tset to varying whenever max has TREE_OVERFLOW set, similarly\n\tfor GE_EXPR and GT_EXPR and TREE_OVERFLOW min.\n\n\t* gcc.dg/pr38934.c: New test.\n\nFrom-SVN: r143723", "tree": {"sha": "44a21a789fae6acc5ec9e7170f32184ee9138836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44a21a789fae6acc5ec9e7170f32184ee9138836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97a170cd637fd9c1c8203c9e286833d251ca5529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a170cd637fd9c1c8203c9e286833d251ca5529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a170cd637fd9c1c8203c9e286833d251ca5529"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "66eb17200ced9787ba57ae8d97bd7103c508bdb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "patch": "@@ -1,3 +1,10 @@\n+2009-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/38934\n+\t* tree-vrp.c (extract_range_from_assert): For LE_EXPR and LT_EXPR\n+\tset to varying whenever max has TREE_OVERFLOW set, similarly\n+\tfor GE_EXPR and GT_EXPR and TREE_OVERFLOW min.\n+\n 2009-01-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38908"}, {"sha": "ae3d55a57ae249e32778c13fc5452a0fd41468d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "patch": "@@ -1,3 +1,8 @@\n+2009-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/38934\n+\t* gcc.dg/pr38934.c: New test.\n+\n 2009-01-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38908"}, {"sha": "c05742c5baa75716bd3ee2297f1d31b9236da65c", "filename": "gcc/testsuite/gcc.dg/pr38934.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38934.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38934.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38934.c?ref=a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/38934 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=gnu99 -w\" } */\n+\n+/* This variable needed only to work around earlier optimizations than VRP.  */\n+unsigned char g;\n+\n+extern void abort ();\n+\n+void\n+f (long long int p)\n+{\n+  g = 255;\n+  if (p >= -9223372036854775808LL - (signed char) g)\n+    p = 1;\n+\n+  if (p)\n+    abort ();\n+}"}, {"sha": "8ca65b3385015430463ae60248e38b93f253ab2d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d386a14ff953d7d3a6365cfe49dae318a1f7b1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a9d386a14ff953d7d3a6365cfe49dae318a1f7b1", "patch": "@@ -1620,7 +1620,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t all should be optimized away above us.  */\n       if ((cond_code == LT_EXPR\n \t   && compare_values (max, min) == 0)\n-\t  || is_overflow_infinity (max))\n+\t  || (CONSTANT_CLASS_P (max) && TREE_OVERFLOW (max)))\n \tset_value_range_to_varying (vr_p);\n       else\n \t{\n@@ -1655,7 +1655,7 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t all should be optimized away above us.  */\n       if ((cond_code == GT_EXPR\n \t   && compare_values (min, max) == 0)\n-\t  || is_overflow_infinity (min))\n+\t  || (CONSTANT_CLASS_P (min) && TREE_OVERFLOW (min)))\n \tset_value_range_to_varying (vr_p);\n       else\n \t{"}]}