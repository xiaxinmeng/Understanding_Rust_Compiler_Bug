{"sha": "031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "node_id": "C_kwDOANBUbNoAKDAzMWE0MDBlNDlkOGRiMTU2YzQzZjllYzBiMjFhYjBjMmFlZThjNmQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-28T13:03:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-28T13:40:03Z"}, "message": "tree-optimization/107407 - wrong code with DSE\n\nSo what happens is that we elide processing of this check with\n\n          /* In addition to kills we can remove defs whose only use\n             is another def in defs.  That can only ever be PHIs of which\n             we track two for simplicity reasons, the first and last in\n             {first,last}_phi_def (we fail for multiple PHIs anyways).\n             We can also ignore defs that feed only into\n             already visited PHIs.  */\n          else if (single_imm_use (vdef, &use_p, &use_stmt)\n                   && (use_stmt == first_phi_def\n                       || use_stmt == last_phi_def\n                       || (gimple_code (use_stmt) == GIMPLE_PHI\n                           && bitmap_bit_p (visited,\n                                            SSA_NAME_VERSION\n                                              (PHI_RESULT (use_stmt))))))\n\nwhere we have the last PHI being the outer loop virtual PHI and the first\nPHI being the loop exit PHI of the outer loop and we've already processed\nthe single immediate use of the outer loop PHI, the inner loop PHI.  But\nwe still have to perform the above check!\n\nIt's easiest to perform the check when we visit the PHI node instead of\ndelaying it to the actual processing loop.\n\n\tPR tree-optimization/107407\n\t* tree-ssa-dse.cc (dse_classify_store): Perform backedge\n\tvarying index check when collecting PHI uses rather than\n\tafter optimizing processing of the candidate defs.\n\n\t* gcc.dg/torture/pr107407.c: New testcase.", "tree": {"sha": "3c493514e108f40f373e3a3dd5e9b71b50a344df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c493514e108f40f373e3a3dd5e9b71b50a344df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1add3635563b39e3c0e9bed4930d11b3f605fdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1add3635563b39e3c0e9bed4930d11b3f605fdd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1add3635563b39e3c0e9bed4930d11b3f605fdd3"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "228fce1e6992ac58b8e52ad2aeda2e53f4aa8860", "filename": "gcc/testsuite/gcc.dg/torture/pr107407.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107407.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107407.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr107407.c?ref=031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+int *a;\n+int c[4];\n+int d;\n+\n+static int\n+f(char k, int j)\n+{\n+  for (; k <= 3; k++)\n+    {\n+      a = &c[k];\n+      for (; d <= 1; d++)\n+        *a = 3;\n+    }\n+  *a = 0;\n+}\n+\n+int main()\n+{\n+  int i;\n+  f(0, 0);\n+  if (c[0] != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "82976bdbeb0b9d2b2cbc14d67f47ed4caf114071", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031a400e49d8db156c43f9ec0b21ab0c2aee8c6d/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=031a400e49d8db156c43f9ec0b21ab0c2aee8c6d", "patch": "@@ -978,14 +978,6 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \n       if (gimple_code (temp) == GIMPLE_PHI)\n \t{\n-\t  /* If we visit this PHI by following a backedge then we have to\n-\t     make sure ref->ref only refers to SSA names that are invariant\n-\t     with respect to the loop represented by this PHI node.  */\n-\t  if (dominated_by_p (CDI_DOMINATORS, gimple_bb (stmt),\n-\t\t\t      gimple_bb (temp))\n-\t      && !for_each_index (ref->ref ? &ref->ref : &ref->base,\n-\t\t\t\t  check_name, gimple_bb (temp)))\n-\t    return DSE_STORE_LIVE;\n \t  defvar = PHI_RESULT (temp);\n \t  bitmap_set_bit (visited, SSA_NAME_VERSION (defvar));\n \t}\n@@ -1019,6 +1011,15 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t      if (!bitmap_bit_p (visited,\n \t\t\t\t SSA_NAME_VERSION (PHI_RESULT (use_stmt))))\n \t\t{\n+\t\t  /* If we visit this PHI by following a backedge then we have\n+\t\t     to make sure ref->ref only refers to SSA names that are\n+\t\t     invariant with respect to the loop represented by this\n+\t\t     PHI node.  */\n+\t\t  if (dominated_by_p (CDI_DOMINATORS, gimple_bb (stmt),\n+\t\t\t\t      gimple_bb (use_stmt))\n+\t\t      && !for_each_index (ref->ref ? &ref->ref : &ref->base,\n+\t\t\t\t\t  check_name, gimple_bb (use_stmt)))\n+\t\t    return DSE_STORE_LIVE;\n \t\t  defs.safe_push (use_stmt);\n \t\t  if (!first_phi_def)\n \t\t    first_phi_def = as_a <gphi *> (use_stmt);"}]}