{"sha": "d1f43464d8c8e69f6ea012300065514b14afe6d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmNDM0NjRkOGM4ZTY5ZjZlYTAxMjMwMDA2NTUxNGIxNGFmZTZkNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-10-03T20:36:17Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-10-03T20:36:17Z"}, "message": "* stringpool.c (ggc_alloc_string): Terminate string.\n\nFrom-SVN: r140859", "tree": {"sha": "c84b1de37acf09296caed8b85de29db281b38b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84b1de37acf09296caed8b85de29db281b38b44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f43464d8c8e69f6ea012300065514b14afe6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f43464d8c8e69f6ea012300065514b14afe6d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f43464d8c8e69f6ea012300065514b14afe6d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f43464d8c8e69f6ea012300065514b14afe6d6/comments", "author": null, "committer": null, "parents": [{"sha": "32001f69b9db91182b382495c41c316bedb7e5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32001f69b9db91182b382495c41c316bedb7e5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32001f69b9db91182b382495c41c316bedb7e5cc"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "b563a2c66081822a9873b6bbd7eee65189de9eed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f43464d8c8e69f6ea012300065514b14afe6d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f43464d8c8e69f6ea012300065514b14afe6d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f43464d8c8e69f6ea012300065514b14afe6d6", "patch": "@@ -1,3 +1,7 @@\n+2008-10-03  Tom Tromey  <tromey@redhat.com>\n+\n+\t* stringpool.c (ggc_alloc_string): Terminate string.\n+\n 2008-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (gimplify_function_tree): For -finstrument-functions"}, {"sha": "d8d66f2418f08799ff8c7ac97dd1c38e8913a39a", "filename": "gcc/stringpool.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f43464d8c8e69f6ea012300065514b14afe6d6/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f43464d8c8e69f6ea012300065514b14afe6d6/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=d1f43464d8c8e69f6ea012300065514b14afe6d6", "patch": "@@ -18,9 +18,8 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* String text, identifier text and identifier node allocator.  Strings\n-   allocated by ggc_alloc_string are stored in an obstack which is\n-   never shrunk.  Identifiers are uniquely stored in a hash table.\n+/* String text, identifier text and identifier node allocator.\n+   Identifiers are uniquely stored in a hash table.\n \n    We use cpplib's hash table implementation.  libiberty's\n    hashtab.c is not used because it requires 100% average space\n@@ -76,9 +75,7 @@ alloc_node (hash_table *table ATTRIBUTE_UNUSED)\n \n /* Allocate and return a string constant of length LENGTH, containing\n    CONTENTS.  If LENGTH is -1, CONTENTS is assumed to be a\n-   nul-terminated string, and the length is calculated using strlen.\n-   If the same string constant has been allocated before, that copy is\n-   returned this time too.  */\n+   nul-terminated string, and the length is calculated using strlen.  */\n \n const char *\n ggc_alloc_string (const char *contents, int length)\n@@ -94,7 +91,8 @@ ggc_alloc_string (const char *contents, int length)\n     return digit_string (contents[0] - '0');\n \n   result = GGC_NEWVAR (char, length + 1);\n-  memcpy (result, contents, length + 1);\n+  memcpy (result, contents, length);\n+  result[length] = '\\0';\n   return (const char *) result;\n }\n "}]}