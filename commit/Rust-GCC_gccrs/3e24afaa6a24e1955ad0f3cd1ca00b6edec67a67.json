{"sha": "3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyNGFmYWE2YTI0ZTE5NTVhZDBmM2NkMWNhMDBiNmVkZWM2N2E2Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:38:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:38:55Z"}, "message": "[multiple changes]\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb: Remove Build_Explicit_Dereference.\n\t* sem_util.adb, sem_util.ads (Build_Explicit_Dereference): Moved here\n\tfrom sem_res.adb, used in analysis of additional constructs.\n\t(Is_Iterator, Is_Reversible_Iterator): New predicates for Ada2012\n\texpansion of iterators.\n\t(Is_Object_Reference): Recognize variables rewritten as explicit\n\tdereferences in Ada2012.\n\t* snames.ads-tmpl: Add Has_Element, Forward_Iterator,\n\tReversible_Iterator names, for expansion of Ada2012 iterators.\n\t* aspects.ads, aspects.adb (Find_Aspect): Utility.\n\t* a-cdlili.ads, a-cdlili.adb: Add new iterator machinery to doubly\n\tlinked list container.\n\t* a-coinve.ads, a-coinve.adb: Ditto for indefinite vector containers.\n\t* a-coorse.ads, a-coorse.adb: Ditto for ordered sets.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cohama.adb, a-cohama.ads: Add iterator primitives to hashed map\n\tcontainers.\n\n2011-08-29  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Gnatmake): Get the maximum number of simultaneous\n\tcompilation processes after the Builder switches has been scanned, as\n\tthere may include -jnn.\n\n2011-08-29  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-chtgbo.adb (Generic_Equal): Use correct overloading of Next.\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnatcmd.adb (GNATCmd): On OpenVMS, truncate the length of\n\tGNAT_DRIVER_COMMAND_LINE to 255.\n\n2011-08-29  Pascal Obry  <obry@adacore.com>\n\n\t* freeze.adb, sem_ch8.adb, a-convec.adb, a-convec.ads: Minor\n\treformatting and style fix (class attribute casing).\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch11.adb: Yet another case where expansion should be common\n\tbetween CodePeer and Alfa.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch9.adb: Partial revert of previous change for Alfa mode.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Matches_Limited_With_View): The limited views of an\n\tincomplete type and its completion match.\n\nFrom-SVN: r178228", "tree": {"sha": "c5c5a59fe92af48a72ef4d23e699ecfeee3903ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c5a59fe92af48a72ef4d23e699ecfeee3903ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/comments", "author": null, "committer": null, "parents": [{"sha": "3ddd922ebf36fb7d4701e8f55e633d27fca54296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddd922ebf36fb7d4701e8f55e633d27fca54296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddd922ebf36fb7d4701e8f55e633d27fca54296"}], "stats": {"total": 1258, "additions": 1092, "deletions": 166}, "files": [{"sha": "1ba297ce24d97feb458590aeb73e55d52b1e69a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -1,3 +1,59 @@\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb: Remove Build_Explicit_Dereference.\n+\t* sem_util.adb, sem_util.ads (Build_Explicit_Dereference): Moved here\n+\tfrom sem_res.adb, used in analysis of additional constructs.\n+\t(Is_Iterator, Is_Reversible_Iterator): New predicates for Ada2012\n+\texpansion of iterators.\n+\t(Is_Object_Reference): Recognize variables rewritten as explicit\n+\tdereferences in Ada2012.\n+\t* snames.ads-tmpl: Add Has_Element, Forward_Iterator,\n+\tReversible_Iterator names, for expansion of Ada2012 iterators.\n+\t* aspects.ads, aspects.adb (Find_Aspect): Utility.\n+\t* a-cdlili.ads, a-cdlili.adb: Add new iterator machinery to doubly\n+\tlinked list container.\n+\t* a-coinve.ads, a-coinve.adb: Ditto for indefinite vector containers.\n+\t* a-coorse.ads, a-coorse.adb: Ditto for ordered sets.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cohama.adb, a-cohama.ads: Add iterator primitives to hashed map\n+\tcontainers.\n+\n+2011-08-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake): Get the maximum number of simultaneous\n+\tcompilation processes after the Builder switches has been scanned, as\n+\tthere may include -jnn.\n+\n+2011-08-29  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-chtgbo.adb (Generic_Equal): Use correct overloading of Next.\n+\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnatcmd.adb (GNATCmd): On OpenVMS, truncate the length of\n+\tGNAT_DRIVER_COMMAND_LINE to 255.\n+\n+2011-08-29  Pascal Obry  <obry@adacore.com>\n+\n+\t* freeze.adb, sem_ch8.adb, a-convec.adb, a-convec.ads: Minor\n+\treformatting and style fix (class attribute casing).\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch11.adb: Yet another case where expansion should be common\n+\tbetween CodePeer and Alfa.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch9.adb: Partial revert of previous change for Alfa mode.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Matches_Limited_With_View): The limited views of an\n+\tincomplete type and its completion match.\n+\n 2011-08-29  Yannick Moy  <moy@adacore.com>\n \n \t* exp_ch13.adb: Adjust previous change."}, {"sha": "8a3b98358dd4b176c7401dafa49e579ce638abf4", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,6 +32,18 @@ with System;  use type System.Address;\n with Ada.Unchecked_Deallocation;\n \n package body Ada.Containers.Doubly_Linked_Lists is\n+   type Iterator is new\n+     List_Iterator_Interfaces.Reversible_Iterator with record\n+        Container : List_Access;\n+        Node      : Node_Access;\n+   end record;\n+\n+   overriding function First    (Object : Iterator) return Cursor;\n+   overriding function Last     (Object : Iterator) return Cursor;\n+   overriding function Next     (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+   overriding function Previous (Object : Iterator; Position : Cursor)\n+     return Cursor;\n \n    -----------------------\n    -- Local Subprograms --\n@@ -395,6 +407,12 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       return Cursor'(Container'Unchecked_Access, Container.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Object.Container.First);\n+   begin\n+      return C;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -794,6 +812,22 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : List)\n+     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Container.First);\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : List; Start : Cursor)\n+     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -807,6 +841,12 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       return Cursor'(Container'Unchecked_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Object.Container.Last);\n+   begin\n+      return C;\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -887,6 +927,16 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       end;\n    end Next;\n \n+   function Next (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Node = Object.Container.Last then\n+         return No_Element;\n+\n+      else\n+         return (Object.Container, Position.Node.Next);\n+      end if;\n+   end Next;\n+\n    -------------\n    -- Prepend --\n    -------------\n@@ -928,6 +978,16 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       end;\n    end Previous;\n \n+   function Previous (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Node = Position.Container.First then\n+         return No_Element;\n+\n+      else\n+         return (Object.Container, Position.Node.Prev);\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1027,6 +1087,50 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       raise Program_Error with \"attempt to stream list cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : List; Position : Cursor)\n+   return Constant_Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element => Position.Node.Element'Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : List; Position : Cursor)\n+   return Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element => Position.Node.Element'Access);\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -1832,4 +1936,20 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       raise Program_Error with \"attempt to stream list cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Doubly_Linked_Lists;"}, {"sha": "8b3a16abbf657132864d7a37ccabde38b908dd68", "filename": "gcc/ada/a-cdlili.ads", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,7 +32,8 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Finalization;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Element_Type is private;\n@@ -44,7 +45,13 @@ package Ada.Containers.Doubly_Linked_Lists is\n    pragma Preelaborate;\n    pragma Remote_Types;\n \n-   type List is tagged private;\n+   type List is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (List);\n \n    type Cursor is private;\n@@ -53,6 +60,10 @@ package Ada.Containers.Doubly_Linked_Lists is\n    Empty_List : constant List;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   package List_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    function \"=\" (Left, Right : List) return Boolean;\n \n@@ -126,6 +137,12 @@ package Ada.Containers.Doubly_Linked_Lists is\n \n    procedure Reverse_Elements (Container : in out List);\n \n+   function Iterate (Container : List)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate (Container : List; Start : Cursor)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    procedure Swap\n      (Container : in out List;\n       I, J      : Cursor);\n@@ -180,8 +197,6 @@ package Ada.Containers.Doubly_Linked_Lists is\n      (Container : List;\n       Item      : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    procedure Iterate\n      (Container : List;\n       Process   : not null access procedure (Position : Cursor));\n@@ -202,6 +217,48 @@ package Ada.Containers.Doubly_Linked_Lists is\n \n    end Generic_Sorting;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : List; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference\n+     (Container : List; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Reference_Type;\n+\n private\n \n    pragma Inline (Next);\n@@ -212,7 +269,7 @@ private\n \n    type Node_Type is\n       limited record\n-         Element : Element_Type;\n+         Element : aliased Element_Type;\n          Next    : Node_Access;\n          Prev    : Node_Access;\n       end record;\n@@ -232,8 +289,6 @@ private\n \n    overriding procedure Finalize (Container : in out List) renames Clear;\n \n-   use Ada.Streams;\n-\n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out List);\n@@ -267,6 +322,12 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_List : constant List := (Controlled with null, null, 0, 0, 0);\n \n    No_Element : constant Cursor := Cursor'(null, null);"}, {"sha": "fce5dd21a01bb83a0b6bd290c7c145036f21a460", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -296,7 +296,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n \n       --  Find the first node of hash table L\n \n-      L_Index := 0;\n+      L_Index := L.Buckets'First;\n       loop\n          L_Node := L.Buckets (L_Index);\n          exit when L_Node /= 0;\n@@ -314,7 +314,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n \n          N := N - 1;\n \n-         L_Node := Next (L, L_Node);\n+         L_Node := Next (L.Nodes (L_Node));\n \n          if L_Node = 0 then\n             --  We have exhausted the nodes in this bucket"}, {"sha": "fdf9696fd61762bf491e453935e3a7259f231bc9", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -37,6 +37,16 @@ pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n \n package body Ada.Containers.Hashed_Maps is\n \n+   type Iterator is new\n+     Map_Iterator_Interfaces.Forward_Iterator with record\n+      Container : Map_Access;\n+      Node      : Node_Access;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Next  (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -362,6 +372,17 @@ package body Ada.Containers.Hashed_Maps is\n       return Cursor'(Container'Unchecked_Access, Node);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      M : constant Map_Access  := Object.Container;\n+      N : constant Node_Access := HT_Ops.First (M.HT);\n+   begin\n+      if N = null then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(Object.Container.all'Unchecked_Access, N);\n+   end First;\n+\n    ----------\n    -- Free --\n    ----------\n@@ -578,6 +599,15 @@ package body Ada.Containers.Hashed_Maps is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class\n+   is\n+      Node : constant Node_Access := HT_Ops.First (Container.HT);\n+      It   : constant Iterator := (Container'Unrestricted_Access, Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ---------\n    -- Key --\n    ---------\n@@ -650,6 +680,16 @@ package body Ada.Containers.Hashed_Maps is\n       Position := Next (Position);\n    end Next;\n \n+   function Next (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Node = null then\n+         return No_Element;\n+\n+      else\n+         return (Object.Container, Next (Position).Node);\n+      end if;\n+   end Next;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -716,6 +756,38 @@ package body Ada.Containers.Hashed_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Map; Key : Key_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type is\n+   begin\n+      return (Element => Container.Element (Key)'Unrestricted_Access);\n+   end Reference;\n+\n    ---------------\n    -- Read_Node --\n    ---------------\n@@ -939,6 +1011,22 @@ package body Ada.Containers.Hashed_Maps is\n       raise Program_Error with \"attempt to stream map cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n    ----------------\n    -- Write_Node --\n    ----------------"}, {"sha": "2ade56e19525c8fbf2ddff2b0498076084187d6d", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,8 +32,9 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Containers.Hash_Tables;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n private with Ada.Finalization;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Key_Type is private;\n@@ -47,12 +48,30 @@ package Ada.Containers.Hashed_Maps is\n    pragma Preelaborate;\n    pragma Remote_Types;\n \n-   type Map is tagged private;\n+   type Map is tagged private\n+   with\n+      Constant_Indexing => Constant_Reference,\n+      Variable_Indexing => Reference,\n+      Default_Iterator  => Iterate,\n+      Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n    Empty_Map : constant Map;\n    --  Map objects declared without an initialization expression are\n    --  initialized to the value Empty_Map.\n@@ -61,6 +80,12 @@ package Ada.Containers.Hashed_Maps is\n    --  Cursor objects declared without an initialization expression are\n    --  initialized to the value No_Element.\n \n+   function Has_Element (Position : Cursor) return Boolean;\n+   --  Equivalent to Position /= No_Element\n+\n+   package Map_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n    function \"=\" (Left, Right : Map) return Boolean;\n    --  For each key/element pair in Left, equality attempts to find the key in\n    --  Right; if a search fails the equality returns False. The search works by\n@@ -235,9 +260,6 @@ package Ada.Containers.Hashed_Maps is\n    function Element (Container : Map; Key : Key_Type) return Element_Type;\n    --  Equivalent to Element (Find (Container, Key))\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-   --  Equivalent to Position /= No_Element\n-\n    function Equivalent_Keys (Left, Right : Cursor) return Boolean;\n    --  Returns the result of calling Equivalent_Keys with the keys of the nodes\n    --  designated by cursors Left and Right.\n@@ -250,11 +272,54 @@ package Ada.Containers.Hashed_Maps is\n    --  Returns the result of calling Equivalent_Keys with key Left and the node\n    --  designated by Right.\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : Map; Key : Key_Type)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Map; Key : Key_Type)\n+   return Reference_Type;\n+\n    procedure Iterate\n      (Container : Map;\n       Process   : not null access procedure (Position : Cursor));\n    --  Calls Process for each node in the map\n \n+   function Iterate (Container : Map)\n+      return Map_Iterator_Interfaces.Forward_Iterator'class;\n+\n private\n    pragma Inline (\"=\");\n    pragma Inline (Length);\n@@ -293,8 +358,6 @@ private\n \n    overriding procedure Finalize (Container : in out Map);\n \n-   use Ada.Streams;\n-\n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n       Container : Map);\n@@ -315,17 +378,11 @@ private\n       Node      : Node_Access;\n    end record;\n \n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Cursor);\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n \n-   for Cursor'Read use Read;\n-\n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Cursor);\n-\n-   for Cursor'Write use Write;\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n \n    Empty_Map : constant Map := (Controlled with HT => (null, 0, 0, 0));\n "}, {"sha": "fa90aaf31f5f9dc8077d1bf31d9de2900086b242", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 154, "deletions": 1, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,19 @@ package body Ada.Containers.Indefinite_Vectors is\n    procedure Free is\n      new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n+   type Iterator is new\n+     Vector_Iterator_Interfaces.Reversible_Iterator with record\n+      Container : Vector_Access;\n+      Index     : Index_Type;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+   overriding function Next  (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+   overriding function Previous (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+\n    ---------\n    -- \"&\" --\n    ---------\n@@ -1075,6 +1088,12 @@ package body Ada.Containers.Indefinite_Vectors is\n       return (Container'Unchecked_Access, Index_Type'First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Index_Type'First);\n+   begin\n+      return C;\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -2406,6 +2425,23 @@ package body Ada.Containers.Indefinite_Vectors is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Index_Type'First);\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator :=\n+             (Container'Unchecked_Access, Start.Index);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -2419,6 +2455,12 @@ package body Ada.Containers.Indefinite_Vectors is\n       return (Container'Unchecked_Access, Container.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+      C : constant Cursor := (Object.Container, Object.Container.Last);\n+   begin\n+      return C;\n+   end Last;\n+\n    -----------------\n    -- Last_Element --\n    ------------------\n@@ -2533,6 +2575,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       return No_Element;\n    end Next;\n \n+   function Next (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Index = Object.Container.Last then\n+         return  No_Element;\n+      else\n+         return (Object.Container, Position.Index + 1);\n+      end if;\n+   end Next;\n+\n    ----------\n    -- Next --\n    ----------\n@@ -2601,6 +2652,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       return No_Element;\n    end Previous;\n \n+   function Previous (Object : Iterator; Position : Cursor) return Cursor is\n+   begin\n+      if Position.Index > Index_Type'First then\n+         return (Object.Container, Position.Index - 1);\n+      else\n+         return No_Element;\n+      end if;\n+   end Previous;\n+\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -2695,6 +2755,83 @@ package body Ada.Containers.Indefinite_Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+       (Element => Position.Container.Elements.EA (Position.Index).all'Access);\n+   end Constant_Reference;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type is\n+   begin\n+      if (Position) > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element => Container.Elements.EA (Position).all'Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type is\n+   begin\n+      pragma Unreferenced (Container);\n+\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      if Position.Index > Position.Container.Last then\n+         raise Constraint_Error with \"Position cursor is out of range\";\n+      end if;\n+\n+      return\n+        (Element =>\n+           Position.Container.Elements.EA (Position.Index).all'Access);\n+   end Reference;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type is\n+   begin\n+      if Position > Container.Last then\n+         raise Constraint_Error with \"Index is out of range\";\n+      end if;\n+\n+      return (Element => Container.Elements.EA (Position).all'Access);\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -3579,4 +3716,20 @@ package body Ada.Containers.Indefinite_Vectors is\n       raise Program_Error with \"attempt to stream vector cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Indefinite_Vectors;"}, {"sha": "866beb9c55f1f62a19288af811c40851da89cf0c", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 85, "deletions": 19, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -32,7 +32,8 @@\n ------------------------------------------------------------------------------\n \n private with Ada.Finalization;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Index_Type is range <>;\n@@ -50,7 +51,13 @@ package Ada.Containers.Indefinite_Vectors is\n \n    No_Index : constant Extended_Index := Extended_Index'First;\n \n-   type Vector is tagged private;\n+   type Vector is tagged private\n+   with\n+     Constant_Indexing => Constant_Reference,\n+     Variable_Indexing => Reference,\n+     Default_Iterator  => Iterate,\n+     Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Vector);\n \n    type Cursor is private;\n@@ -59,6 +66,22 @@ package Ada.Containers.Indefinite_Vectors is\n    Empty_Vector : constant Vector;\n \n    No_Element : constant Cursor;\n+   function Has_Element (Position : Cursor) return Boolean;\n+\n+   procedure Read\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   procedure Write\n+     (Stream   : not null access Root_Stream_Type'Class;\n+      Position : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n+   package Vector_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n \n    overriding function \"=\" (Left, Right : Vector) return Boolean;\n \n@@ -92,6 +115,53 @@ package Ada.Containers.Indefinite_Vectors is\n \n    procedure Clear (Container : in out Vector);\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Cursor)    --  SHOULD BE ALIASED\n+   return Constant_Reference_Type;\n+\n+   function Constant_Reference\n+     (Container : Vector; Position : Index_Type)\n+   return Constant_Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Cursor)\n+   return Reference_Type;\n+\n+   function Reference (Container : Vector; Position : Index_Type)\n+   return Reference_Type;\n+\n    function To_Cursor\n      (Container : Vector;\n       Index     : Extended_Index) return Cursor;\n@@ -267,12 +337,16 @@ package Ada.Containers.Indefinite_Vectors is\n      (Container : Vector;\n       Item      : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    procedure Iterate\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Vector)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate (Container : Vector; Start : Cursor)\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    procedure Reverse_Iterate\n      (Container : Vector;\n       Process   : not null access procedure (Position : Cursor));\n@@ -323,12 +397,16 @@ private\n       Lock     : Natural := 0;\n    end record;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    overriding procedure Adjust (Container : in out Vector);\n \n    overriding procedure Finalize (Container : in out Vector);\n \n-   use Ada.Streams;\n-\n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;\n       Container : Vector);\n@@ -349,18 +427,6 @@ private\n       Index     : Index_Type := Index_Type'First;\n    end record;\n \n-   procedure Write\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : Cursor);\n-\n-   for Cursor'Write use Write;\n-\n-   procedure Read\n-     (Stream   : not null access Root_Stream_Type'Class;\n-      Position : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n    Empty_Vector : constant Vector := (Controlled with null, No_Index, 0, 0);\n \n    No_Element : constant Cursor := Cursor'(null, Index_Type'First);"}, {"sha": "3587b2d06af0c98ea868b2cec6762f2a3f551a45", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -2034,15 +2034,15 @@ package body Ada.Containers.Vectors is\n    end Iterate;\n \n    function Iterate (Container : Vector)\n-      return Vector_Iterator_Interfaces.Reversible_Iterator'class\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n       It : constant Iterator := (Container'Unchecked_Access, Index_Type'First);\n    begin\n       return It;\n    end Iterate;\n \n    function Iterate (Container : Vector; Start : Cursor)\n-      return Vector_Iterator_Interfaces.Forward_Iterator'class\n+      return Vector_Iterator_Interfaces.Forward_Iterator'Class\n    is\n       It : constant Iterator :=\n              (Container'Unchecked_Access, Start.Index);"}, {"sha": "bf9a0d42e0126d8a393efdc6de57245b9c948b7c", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -355,10 +355,10 @@ package Ada.Containers.Vectors is\n       Process   : not null access procedure (Position : Cursor));\n \n    function Iterate (Container : Vector)\n-      return Vector_Iterator_Interfaces.Reversible_Iterator'class;\n+      return Vector_Iterator_Interfaces.Reversible_Iterator'Class;\n \n    function Iterate (Container : Vector; Start : Cursor)\n-      return Vector_Iterator_Interfaces.Forward_Iterator'class;\n+      return Vector_Iterator_Interfaces.Forward_Iterator'Class;\n \n    generic\n       with function \"<\" (Left, Right : Element_Type) return Boolean is <>;"}, {"sha": "2224fdf317e459c3629ca2cbc6a93662225871cb", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -40,6 +40,19 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n package body Ada.Containers.Ordered_Sets is\n \n+   type Iterator is new\n+     Ordered_Set_Iterator_Interfaces.Reversible_Iterator with record\n+      Container : access constant Set;\n+      Node      : Node_Access;\n+   end record;\n+\n+   overriding function First (Object : Iterator) return Cursor;\n+   overriding function Last  (Object : Iterator) return Cursor;\n+   overriding function Next  (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+   overriding function Previous (Object : Iterator; Position : Cursor)\n+     return Cursor;\n+\n    ------------------------------\n    -- Access to Fields of Node --\n    ------------------------------\n@@ -512,6 +525,12 @@ package body Ada.Containers.Ordered_Sets is\n       return Cursor'(Container'Unrestricted_Access, Container.Tree.First);\n    end First;\n \n+   function First (Object : Iterator) return Cursor is\n+   begin\n+      return Cursor'(\n+       Object.Container.all'Unrestricted_Access, Object.Container.Tree.First);\n+   end First;\n+\n    -------------------\n    -- First_Element --\n    -------------------\n@@ -1115,6 +1134,23 @@ package body Ada.Containers.Ordered_Sets is\n       B := B - 1;\n    end Iterate;\n \n+   function Iterate (Container : Set)\n+     return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator :=\n+             (Container'Unchecked_Access, Container.Tree.First);\n+   begin\n+      return It;\n+   end Iterate;\n+\n+   function Iterate (Container : Set; Start : Cursor)\n+     return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class\n+   is\n+      It : constant Iterator := (Container'Unchecked_Access, Start.Node);\n+   begin\n+      return It;\n+   end Iterate;\n+\n    ----------\n    -- Last --\n    ----------\n@@ -1128,6 +1164,16 @@ package body Ada.Containers.Ordered_Sets is\n       return Cursor'(Container'Unrestricted_Access, Container.Tree.Last);\n    end Last;\n \n+   function Last (Object : Iterator) return Cursor is\n+   begin\n+      if Object.Container.Tree.Last = null then\n+         return No_Element;\n+      end if;\n+\n+      return Cursor'(\n+        Object.Container.all'Unrestricted_Access, Object.Container.Tree.Last);\n+   end Last;\n+\n    ------------------\n    -- Last_Element --\n    ------------------\n@@ -1202,6 +1248,14 @@ package body Ada.Containers.Ordered_Sets is\n       Position := Next (Position);\n    end Next;\n \n+   function Next  (Object : Iterator; Position : Cursor)\n+   return Cursor\n+   is\n+      pragma Unreferenced (Object);\n+   begin\n+      return Next (Position);\n+   end Next;\n+\n    -------------\n    -- Overlap --\n    -------------\n@@ -1251,6 +1305,13 @@ package body Ada.Containers.Ordered_Sets is\n       Position := Previous (Position);\n    end Previous;\n \n+   overriding function Previous (Object : Iterator; Position : Cursor)\n+   return Cursor\n+   is\n+      pragma Unreferenced (Object);\n+   begin\n+      return Previous (Position);\n+   end Previous;\n    -------------------\n    -- Query_Element --\n    -------------------\n@@ -1339,6 +1400,50 @@ package body Ada.Containers.Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference (Container : Set; Position : Cursor)\n+   return Constant_Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element => Position.Node.Element'Access);\n+   end Constant_Reference;\n+\n+   function Reference (Container : Set; Position : Cursor)\n+   return Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      if Position.Container = null then\n+         raise Constraint_Error with \"Position cursor has no element\";\n+      end if;\n+\n+      return (Element => Position.Node.Element'Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1654,4 +1759,20 @@ package body Ada.Containers.Ordered_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n end Ada.Containers.Ordered_Sets;"}, {"sha": "cf52da66a1cd298496a9bd56bf7e403a0d3b915b", "filename": "gcc/ada/a-coorse.ads", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -33,7 +33,8 @@\n \n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n-private with Ada.Streams;\n+with Ada.Streams; use Ada.Streams;\n+with Ada.Iterator_Interfaces;\n \n generic\n    type Element_Type is private;\n@@ -47,16 +48,81 @@ package Ada.Containers.Ordered_Sets is\n \n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean;\n \n-   type Set is tagged private;\n+   type Set is tagged private\n+   with\n+     Constant_Indexing => Constant_Reference,\n+     Variable_Indexing => Reference,\n+     Default_Iterator  => Iterate,\n+     Iterator_Element  => Element_Type;\n+\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);\n \n+   function Has_Element (Position : Cursor) return Boolean;\n+\n    Empty_Set : constant Set;\n \n    No_Element : constant Cursor;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Cursor);\n+\n+   for Cursor'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Cursor);\n+\n+   for Cursor'Read use Read;\n+\n+   package Ordered_Set_Iterator_Interfaces is new\n+     Ada.Iterator_Interfaces (Cursor, Has_Element);\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is\n+   private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   function Constant_Reference\n+     (Container : Set; Position : Cursor)\n+   return Constant_Reference_Type;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   function Reference\n+     (Container : Set; Position : Cursor)\n+   return Reference_Type;\n+\n    function \"=\" (Left, Right : Set) return Boolean;\n \n    function Equivalent_Sets (Left, Right : Set) return Boolean;\n@@ -168,8 +234,6 @@ package Ada.Containers.Ordered_Sets is\n \n    function Contains (Container : Set; Item : Element_Type) return Boolean;\n \n-   function Has_Element (Position : Cursor) return Boolean;\n-\n    function \"<\" (Left, Right : Cursor) return Boolean;\n \n    function \">\" (Left, Right : Cursor) return Boolean;\n@@ -190,6 +254,12 @@ package Ada.Containers.Ordered_Sets is\n      (Container : Set;\n       Process   : not null access procedure (Position : Cursor));\n \n+   function Iterate (Container : Set)\n+      return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class;\n+\n+   function Iterate (Container : Set; Start : Cursor)\n+      return Ordered_Set_Iterator_Interfaces.Reversible_Iterator'class;\n+\n    generic\n       type Key_Type (<>) is private;\n \n@@ -243,7 +313,7 @@ private\n       Left    : Node_Access;\n       Right   : Node_Access;\n       Color   : Red_Black_Trees.Color_Type := Red_Black_Trees.Red;\n-      Element : Element_Type;\n+      Element : aliased Element_Type;\n    end record;\n \n    package Tree_Types is\n@@ -260,7 +330,6 @@ private\n    use Red_Black_Trees;\n    use Tree_Types;\n    use Ada.Finalization;\n-   use Ada.Streams;\n \n    type Set_Access is access all Set;\n    for Set_Access'Storage_Size use 0;\n@@ -270,18 +339,6 @@ private\n       Node      : Node_Access;\n    end record;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Cursor);\n-\n-   for Cursor'Write use Write;\n-\n-   procedure Read\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : out Cursor);\n-\n-   for Cursor'Read use Read;\n-\n    No_Element : constant Cursor := Cursor'(null, null);\n \n    procedure Write\n@@ -296,6 +353,12 @@ private\n \n    for Set'Read use Read;\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is null record;\n+\n+   type Reference_Type\n+      (Element : not null access Element_Type) is null record;\n+\n    Empty_Set : constant Set :=\n                  (Controlled with Tree => (First  => null,\n                                            Last   => null,"}, {"sha": "f2159db7291d5e4db5278af217b0fb4c53665c29", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Einfo;    use Einfo;\n with Nlists;   use Nlists;\n with Sinfo;    use Sinfo;\n with Tree_IO;  use Tree_IO;\n@@ -118,6 +119,32 @@ package body Aspects is\n       return Aspect_Id_Hash_Table.Get (Name);\n    end Get_Aspect_Id;\n \n+   -----------------\n+   -- Find_Aspect --\n+   -----------------\n+\n+   function Find_Aspect (Ent : Entity_Id; A : Aspect_Id) return Node_Id is\n+      Ritem : Node_Id;\n+\n+   begin\n+      Ritem := First_Rep_Item (Ent);\n+      while Present (Ritem) loop\n+         if Nkind (Ritem) = N_Aspect_Specification\n+           and then Get_Aspect_Id (Chars (Identifier (Ritem))) = A\n+         then\n+            if A = Aspect_Default_Iterator then\n+               return Expression (Aspect_Rep_Item (Ritem));\n+            else\n+               return Expression (Ritem);\n+            end if;\n+         end if;\n+\n+         Next_Rep_Item (Ritem);\n+      end loop;\n+\n+      return Empty;\n+   end Find_Aspect;\n+\n    ------------------\n    -- Move_Aspects --\n    ------------------"}, {"sha": "b355cadc17d62744232b07e7bdffe791e7a36882", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -359,6 +359,9 @@ package Aspects is\n    --  node that has its Has_Aspects flag set True on entry, or with L being an\n    --  empty list or No_List.\n \n+   function Find_Aspect (Ent : Entity_Id; A : Aspect_Id) return Node_Id;\n+   --  Find value of a given aspect from aspect list of entity.\n+\n    procedure Move_Aspects (From : Node_Id; To : Node_Id);\n    --  Moves aspects from 'From' node to 'To' node. Has_Aspects (To) must be\n    --  False on entry. If Has_Aspects (From) is False, the call has no effect."}, {"sha": "8b391d5e80a0754ef274245c0cfb00a4dc452a21", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -1666,10 +1666,12 @@ package body Exp_Ch11 is\n \n       else\n          --  Bypass expansion to a run-time call when back-end exception\n-         --  handling is active, unless the target is a VM or CodePeer.\n+         --  handling is active, unless the target is a VM, CodePeer or\n+         --  GNATprove.\n \n          if VM_Target = No_VM\n            and then not CodePeer_Mode\n+           and then not ALFA_Mode\n            and then Exception_Mechanism = Back_End_Exceptions\n          then\n             return;"}, {"sha": "b57f3d62e654c4702df92c190210d63b009dec60", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -7930,12 +7930,6 @@ package body Exp_Ch9 is\n    --  Start of processing for Expand_N_Protected_Type_Declaration\n \n    begin\n-      --  Do not expand tasking constructs in formal verification mode\n-\n-      if ALFA_Mode then\n-         return;\n-      end if;\n-\n       if Present (Corresponding_Record_Type (Prot_Typ)) then\n          return;\n       else"}, {"sha": "4862518137c5741f81998a41bded2d463d753b2c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -2820,7 +2820,7 @@ package body Freeze is\n \n                --  Note: we inhibit this check for objects that do not come\n                --  from source because there is at least one case (the\n-               --  expansion of x'class'input where x is abstract) where we\n+               --  expansion of x'Class'Input where x is abstract) where we\n                --  legitimately generate an abstract object.\n \n                if Is_Abstract_Type (Etype (E))\n@@ -3712,7 +3712,7 @@ package body Freeze is\n             --     package Pkg is\n             --        type T is tagged private;\n             --        type DT is new T with private;\n-            --        procedure Prim (X : in out T; Y : in out DT'class);\n+            --        procedure Prim (X : in out T; Y : in out DT'Class);\n             --     private\n             --        type T is tagged null record;\n             --        Obj : T;"}, {"sha": "051082f640faf63781f717de765ba8fd153ea7f0", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -202,6 +202,9 @@ procedure GNATCmd is\n    --  indicate that the underlying tool (gnatcheck, gnatpp or gnatmetric)\n    --  should be invoked for all sources of all projects.\n \n+   Max_OpenVMS_Logical_Length : constant Integer := 255;\n+   --  The maximum length of OpenVMS logicals\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -1420,6 +1423,15 @@ begin\n       Add_Str_To_Name_Buffer (Argument (J));\n    end loop;\n \n+   --  On OpenVMS, setenv creates a logical whose length is limited to\n+   --  255 bytes.\n+\n+   if OpenVMS and then Name_Len > Max_OpenVMS_Logical_Length then\n+      Name_Buffer (Max_OpenVMS_Logical_Length - 2\n+                     .. Max_OpenVMS_Logical_Length) := \"...\";\n+      Name_Len := Max_OpenVMS_Logical_Length;\n+   end if;\n+\n    Setenv (\"GNAT_DRIVER_COMMAND_LINE\", Name_Buffer (1 .. Name_Len));\n \n    --  Add the directory where the GNAT driver is invoked in front of the path,"}, {"sha": "ce12020bc04941899b440c7660dd67a654e54e88", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -5977,54 +5977,6 @@ package body Make is\n       Gnatbind_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n       Gnatlink_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n \n-      --  If we have specified -j switch both from the project file\n-      --  and on the command line, the one from the command line takes\n-      --  precedence.\n-\n-      if Saved_Maximum_Processes = 0 then\n-         Saved_Maximum_Processes := Maximum_Processes;\n-      end if;\n-\n-      if Debug.Debug_Flag_M then\n-         Write_Line (\"Maximum number of simultaneous compilations =\" &\n-                     Saved_Maximum_Processes'Img);\n-      end if;\n-\n-      --  Allocate as many temporary mapping file names as the maximum number\n-      --  of compilations processed, for each possible project.\n-\n-      declare\n-         Data : Project_Compilation_Access;\n-         Proj : Project_List;\n-\n-      begin\n-         Proj := Project_Tree.Projects;\n-         while Proj /= null loop\n-            Data := new Project_Compilation_Data'\n-              (Mapping_File_Names        => new Temp_Path_Names\n-                                              (1 .. Saved_Maximum_Processes),\n-               Last_Mapping_File_Names   => 0,\n-               Free_Mapping_File_Indexes => new Free_File_Indexes\n-                                              (1 .. Saved_Maximum_Processes),\n-               Last_Free_Indexes         => 0);\n-\n-            Project_Compilation_Htable.Set\n-              (Project_Compilation, Proj.Project, Data);\n-            Proj := Proj.Next;\n-         end loop;\n-\n-         Data := new Project_Compilation_Data'\n-           (Mapping_File_Names        => new Temp_Path_Names\n-                                           (1 .. Saved_Maximum_Processes),\n-            Last_Mapping_File_Names   => 0,\n-            Free_Mapping_File_Indexes => new Free_File_Indexes\n-                                           (1 .. Saved_Maximum_Processes),\n-            Last_Free_Indexes         => 0);\n-\n-         Project_Compilation_Htable.Set\n-           (Project_Compilation, No_Project, Data);\n-      end;\n-\n       Bad_Compilation.Init;\n \n       --  If project files are used, create the mapping of all the sources, so\n@@ -6126,6 +6078,54 @@ package body Make is\n                end case;\n             end if;\n \n+            --  If we have specified -j switch both from the project file\n+            --  and on the command line, the one from the command line takes\n+            --  precedence.\n+\n+            if Saved_Maximum_Processes = 0 then\n+               Saved_Maximum_Processes := Maximum_Processes;\n+            end if;\n+\n+            if Debug.Debug_Flag_M then\n+               Write_Line (\"Maximum number of simultaneous compilations =\" &\n+                           Saved_Maximum_Processes'Img);\n+            end if;\n+\n+            --  Allocate as many temporary mapping file names as the maximum\n+            --  number of compilations processed, for each possible project.\n+\n+            declare\n+               Data : Project_Compilation_Access;\n+               Proj : Project_List;\n+\n+            begin\n+               Proj := Project_Tree.Projects;\n+               while Proj /= null loop\n+                  Data := new Project_Compilation_Data'\n+                    (Mapping_File_Names        => new Temp_Path_Names\n+                       (1 .. Saved_Maximum_Processes),\n+                     Last_Mapping_File_Names   => 0,\n+                     Free_Mapping_File_Indexes => new Free_File_Indexes\n+                       (1 .. Saved_Maximum_Processes),\n+                     Last_Free_Indexes         => 0);\n+\n+                  Project_Compilation_Htable.Set\n+                    (Project_Compilation, Proj.Project, Data);\n+                  Proj := Proj.Next;\n+               end loop;\n+\n+               Data := new Project_Compilation_Data'\n+                 (Mapping_File_Names        => new Temp_Path_Names\n+                    (1 .. Saved_Maximum_Processes),\n+                  Last_Mapping_File_Names   => 0,\n+                  Free_Mapping_File_Indexes => new Free_File_Indexes\n+                    (1 .. Saved_Maximum_Processes),\n+                  Last_Free_Indexes         => 0);\n+\n+               Project_Compilation_Htable.Set\n+                 (Project_Compilation, No_Project, Data);\n+            end;\n+\n             Is_First_Main := False;\n          end if;\n "}, {"sha": "877e8b8f7e24b35055f0726523fcbc295b388784", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -5669,6 +5669,12 @@ package body Sem_Ch6 is\n          then\n             return True;\n \n+         elsif From_With_Type (T1)\n+           and then From_With_Type (T2)\n+           and then Available_View (T1) = Available_View (T2)\n+         then\n+            return True;\n+\n          else\n             return False;\n          end if;"}, {"sha": "87d5717f41a810f754d96997e0ec35cc98222b71", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -1834,7 +1834,7 @@ package body Sem_Ch8 is\n             Result := Defining_Entity (New_Decl);\n          end if;\n \n-         --  Return the class-wide operation if one was created.\n+         --  Return the class-wide operation if one was created\n \n          return Result;\n       end Check_Class_Wide_Actual;\n@@ -2482,7 +2482,7 @@ package body Sem_Ch8 is\n \n             --  If this a defaulted subprogram for a class-wide actual there is\n             --  no check for mode conformance,  given that the signatures don't\n-            --  match (the source mentions T but the actual mentions T'class).\n+            --  match (the source mentions T but the actual mentions T'Class).\n \n             if CW_Actual then\n                null;\n@@ -5141,7 +5141,7 @@ package body Sem_Ch8 is\n                            Next_Entity (Id);\n                         end loop;\n \n-                        --  If not found,  standard error message.\n+                        --  If not found,  standard error message\n \n                         Error_Msg_NE (\"& not declared in&\", N, Selector);\n "}, {"sha": "86c6d3e41561de1204109b64dd21eb23b205e31e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -1754,15 +1754,6 @@ package body Sem_Res is\n       It1       : Interp;\n       Seen      : Entity_Id := Empty; -- prevent junk warning\n \n-      procedure Build_Explicit_Dereference\n-        (Expr : Node_Id;\n-         Disc : Entity_Id);\n-      --  AI05-139: Names with implicit dereference. If the expression N is a\n-      --  reference type and the context imposes the corresponding designated\n-      --  type, convert N into N.Disc.all. Such expressions are always over-\n-      --  loaded with both interpretations, and the dereference interpretation\n-      --  carries the name of the reference discriminant.\n-\n       function Comes_From_Predefined_Lib_Unit (Nod : Node_Id) return Boolean;\n       --  Determine whether a node comes from a predefined library unit or\n       --  Standard.\n@@ -1778,29 +1769,6 @@ package body Sem_Res is\n       procedure Resolution_Failed;\n       --  Called when attempt at resolving current expression fails\n \n-      --------------------------------\n-      -- Build_Explicit_Dereference --\n-      --------------------------------\n-\n-      procedure Build_Explicit_Dereference\n-        (Expr : Node_Id;\n-         Disc : Entity_Id)\n-      is\n-         Loc : constant Source_Ptr := Sloc (Expr);\n-\n-      begin\n-         Set_Is_Overloaded (Expr, False);\n-         Rewrite (Expr,\n-           Make_Explicit_Dereference (Loc,\n-             Prefix =>\n-               Make_Selected_Component (Loc,\n-                 Prefix        => Relocate_Node (Expr),\n-                 Selector_Name => New_Occurrence_Of (Disc, Loc))));\n-\n-         Set_Etype (Prefix (Expr), Etype (Disc));\n-         Set_Etype (Expr, Typ);\n-      end Build_Explicit_Dereference;\n-\n       ------------------------------------\n       -- Comes_From_Predefined_Lib_Unit --\n       -------------------------------------"}, {"sha": "f6088afc9d673de0640be1f82fd3087fea219684", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -981,6 +981,30 @@ package body Sem_Util is\n       Set_Has_Fully_Qualified_Name (Elab_Ent);\n    end Build_Elaboration_Entity;\n \n+   --------------------------------\n+   -- Build_Explicit_Dereference --\n+   --------------------------------\n+\n+   procedure Build_Explicit_Dereference\n+     (Expr : Node_Id;\n+      Disc : Entity_Id)\n+   is\n+      Loc : constant Source_Ptr := Sloc (Expr);\n+\n+   begin\n+      Set_Is_Overloaded (Expr, False);\n+      Rewrite (Expr,\n+        Make_Explicit_Dereference (Loc,\n+          Prefix =>\n+            Make_Selected_Component (Loc,\n+              Prefix => Relocate_Node (Expr),\n+              Selector_Name =>\n+            New_Occurrence_Of (Disc, Loc))));\n+\n+      Set_Etype (Prefix (Expr), Etype (Disc));\n+      Set_Etype (Expr, Designated_Type (Etype (Disc)));\n+   end Build_Explicit_Dereference;\n+\n    -----------------------------------\n    -- Cannot_Raise_Constraint_Error --\n    -----------------------------------\n@@ -7144,6 +7168,79 @@ package body Sem_Util is\n       end if;\n    end Is_Fully_Initialized_Variant;\n \n+   -----------------\n+   -- Is_Iterator --\n+   -----------------\n+\n+   function Is_Iterator (Typ : Entity_Id) return Boolean is\n+      Ifaces_List : Elist_Id;\n+      Iface_Elmt  : Elmt_Id;\n+      Iface       : Entity_Id;\n+\n+   begin\n+      if not Is_Tagged_Type (Typ)\n+        or else not Is_Derived_Type (Typ)\n+      then\n+         return False;\n+\n+      else\n+         Collect_Interfaces (Typ, Ifaces_List);\n+\n+         Iface_Elmt := First_Elmt (Ifaces_List);\n+         while Present (Iface_Elmt) loop\n+            Iface := Node (Iface_Elmt);\n+            if Chars (Iface) = Name_Forward_Iterator\n+              and then\n+                Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Iface)))\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Elmt (Iface_Elmt);\n+         end loop;\n+\n+         return False;\n+      end if;\n+\n+   end Is_Iterator;\n+\n+   ----------------------------\n+   -- Is_Reversible_Iterator --\n+   ----------------------------\n+\n+   function Is_Reversible_Iterator (Typ : Entity_Id) return Boolean is\n+      Ifaces_List : Elist_Id;\n+      Iface_Elmt  : Elmt_Id;\n+      Iface       : Entity_Id;\n+\n+   begin\n+      if not Is_Tagged_Type (Typ)\n+        or else not Is_Derived_Type (Typ)\n+      then\n+         return False;\n+      else\n+\n+         Collect_Interfaces (Typ, Ifaces_List);\n+\n+         Iface_Elmt := First_Elmt (Ifaces_List);\n+         while Present (Iface_Elmt) loop\n+            Iface := Node (Iface_Elmt);\n+            if Chars (Iface) = Name_Reversible_Iterator\n+              and then\n+                Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Iface)))\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Elmt (Iface_Elmt);\n+         end loop;\n+\n+      end if;\n+      return False;\n+   end Is_Reversible_Iterator;\n+\n    ------------\n    -- Is_LHS --\n    ------------\n@@ -7369,8 +7466,21 @@ package body Sem_Util is\n       --  original node is a conversion, then Is_Variable will not be true\n       --  but we still want to allow the conversion if it converts a variable).\n \n+      --  In Ada2012, the explicit dereference may be a rewritten call\n+      --  to a Reference function.\n+\n       elsif Original_Node (AV) /= AV then\n-         return Is_OK_Variable_For_Out_Formal (Original_Node (AV));\n+         if Ada_Version >= Ada_2012\n+           and then Nkind (Original_Node (AV)) = N_Function_Call\n+           and then\n+             Has_Implicit_Dereference\n+               (Etype (Name (Original_Node (AV))))\n+         then\n+            return True;\n+\n+         else\n+            return Is_OK_Variable_For_Out_Formal (Original_Node (AV));\n+         end if;\n \n       --  All other non-variables are rejected\n "}, {"sha": "89ae19819aeb6762017f2e556ad3be4fa2b9a952", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -141,6 +141,15 @@ package Sem_Util is\n    --  the compilation unit, and install it in the Elaboration_Entity field\n    --  of Spec_Id, the entity for the compilation unit.\n \n+      procedure Build_Explicit_Dereference\n+        (Expr : Node_Id;\n+         Disc : Entity_Id);\n+      --  AI05-139: Names with implicit dereference. If the expression N is a\n+      --  reference type and the context imposes the corresponding designated\n+      --  type, convert N into N.Disc.all. Such expressions are always over-\n+      --  loaded with both interpretations, and the dereference interpretation\n+      --  carries the name of the reference discriminant.\n+\n    function Cannot_Raise_Constraint_Error (Expr : Node_Id) return Boolean;\n    --  Returns True if the expression cannot possibly raise Constraint_Error.\n    --  The response is conservative in the sense that a result of False does\n@@ -799,6 +808,13 @@ package Sem_Util is\n    --  E is a subprogram. Return True is E is an implicit operation inherited\n    --  by the derived type declaration for type Typ.\n \n+   function Is_Iterator (Typ : Entity_Id) return Boolean;\n+   --  AI05-0139-2 : check whether Typ is derived from the predefined interface\n+   --  Ada.Iterator_Interfaces.Forward_Iterator.\n+\n+   function Is_Reversible_Iterator (Typ : Entity_Id) return Boolean;\n+   --  Ditto for Ada.Iterator_Interfaces.Reversible_Iterator.\n+\n    function Is_LHS (N : Node_Id) return Boolean;\n    --  Returns True iff N is used as Name in an assignment statement\n "}, {"sha": "3c54e8a05fb292b58d48fcc87459c25557b33d77", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=3e24afaa6a24e1955ad0f3cd1ca00b6edec67a67", "patch": "@@ -1219,7 +1219,10 @@ package Snames is\n    Name_Cursor                           : constant Name_Id := N + $;\n    Name_Element                          : constant Name_Id := N + $;\n    Name_Element_Type                     : constant Name_Id := N + $;\n+   Name_Has_Element                      : constant Name_Id := N + $;\n    Name_No_Element                       : constant Name_Id := N + $;\n+   Name_Forward_Iterator                 : constant Name_Id := N + $;\n+   Name_Reversible_Iterator              : constant Name_Id := N + $;\n    Name_Previous                         : constant Name_Id := N + $;\n \n    --  Ada 2005 reserved words"}]}