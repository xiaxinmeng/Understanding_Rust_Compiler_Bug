{"sha": "1bb6e262cf96060be3098d2089c1fe059e73dedd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiNmUyNjJjZjk2MDYwYmUzMDk4ZDIwODljMWZlMDU5ZTczZGVkZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T13:16:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T13:16:58Z"}, "message": "[multiple changes]\n\n2011-09-01  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch6.ads (Needs_BIP_Alloc_Form): New utility function.\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n\tTest for case where call\n\tinitializes an object of a return statement before testing for\n\ta constrained call, to ensure that all such cases get handled\n\tby simply passing on the caller's parameters. Also, in that\n\tcase call Needs_BIP_Alloc_Form to determine whether to pass on\n\tthe BIP_Alloc_Form parameter of the enclosing function rather\n\tthan testing Is_Constrained. Add similar tests for the return\n\tof a BIP call to later processing to ensure consistent handling.\n\t(Needs_BIP_Alloc_Form): New utility function.\n\t* sem_ch6.adb: (Create_Extra_Formals): Replace test for adding\n\ta BIP_Alloc_Form formal with call to new utility function\n\tNeeds_BIP_Alloc_Form.\n\n2011-09-01  Pascal Obry  <obry@adacore.com>\n\n\t* prj-part.adb: Minor reformatting.\n\n2011-09-01  Vincent Celier  <celier@adacore.com>\n\n\t* prj-env.adb (Create_Mapping_File.Process): Encode the upper\n\thalf character in the unit name.\n\nFrom-SVN: r178411", "tree": {"sha": "d9654ebc44bca87f43ed82e76a31c538ae729781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9654ebc44bca87f43ed82e76a31c538ae729781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb6e262cf96060be3098d2089c1fe059e73dedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb6e262cf96060be3098d2089c1fe059e73dedd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb6e262cf96060be3098d2089c1fe059e73dedd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb6e262cf96060be3098d2089c1fe059e73dedd/comments", "author": null, "committer": null, "parents": [{"sha": "db15225a8e354c5223e074054bbf8757b886d032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db15225a8e354c5223e074054bbf8757b886d032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db15225a8e354c5223e074054bbf8757b886d032"}], "stats": {"total": 181, "additions": 123, "deletions": 58}, "files": [{"sha": "83cf332fde56a7c6328ee80b7562148b860343f8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -1,3 +1,29 @@\n+2011-09-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.ads (Needs_BIP_Alloc_Form): New utility function.\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tTest for case where call\n+\tinitializes an object of a return statement before testing for\n+\ta constrained call, to ensure that all such cases get handled\n+\tby simply passing on the caller's parameters. Also, in that\n+\tcase call Needs_BIP_Alloc_Form to determine whether to pass on\n+\tthe BIP_Alloc_Form parameter of the enclosing function rather\n+\tthan testing Is_Constrained. Add similar tests for the return\n+\tof a BIP call to later processing to ensure consistent handling.\n+\t(Needs_BIP_Alloc_Form): New utility function.\n+\t* sem_ch6.adb: (Create_Extra_Formals): Replace test for adding\n+\ta BIP_Alloc_Form formal with call to new utility function\n+\tNeeds_BIP_Alloc_Form.\n+\n+2011-09-01  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-part.adb: Minor reformatting.\n+\n+2011-09-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-env.adb (Create_Mapping_File.Process): Encode the upper\n+\thalf character in the unit name.\n+\n 2011-09-01  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb: Minor code and comment reformatting."}, {"sha": "eb74c122847bba12584b9b2164b7beb1f6a88fa5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 70, "deletions": 50, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -4198,7 +4198,6 @@ package body Exp_Ch6 is\n                    Constant_Present    => True,\n                    Object_Definition   => New_Occurrence_Of (Temp_Typ, Loc),\n                    Expression          => New_A);\n-\n             else\n                Decl :=\n                  Make_Object_Renaming_Declaration (Loc,\n@@ -7579,61 +7578,40 @@ package body Exp_Ch6 is\n \n       Result_Subt := Etype (Function_Id);\n \n-      --  In the constrained case, add an implicit actual to the function call\n-      --  that provides access to the declared object. An unchecked conversion\n-      --  to the (specific) result type of the function is inserted to handle\n-      --  the case where the object is declared with a class-wide type.\n-\n-      if Is_Constrained (Underlying_Type (Result_Subt)) then\n-         Caller_Object :=\n-            Make_Unchecked_Type_Conversion (Loc,\n-              Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n-              Expression   => New_Reference_To (Obj_Def_Id, Loc));\n-\n-         --  When the function has a controlling result, an allocation-form\n-         --  parameter must be passed indicating that the caller is allocating\n-         --  the result object. This is needed because such a function can be\n-         --  called as a dispatching operation and must be treated similarly\n-         --  to functions with unconstrained result subtypes.\n-\n-         Add_Alloc_Form_Actual_To_Build_In_Place_Call\n-           (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n-\n-      --  If the function's result subtype is unconstrained and the object is\n-      --  a return object of an enclosing build-in-place function, then the\n-      --  implicit build-in-place parameters of the enclosing function must be\n-      --  passed along to the called function. (Unfortunately, this won't cover\n-      --  the case of extension aggregates where the ancestor part is a build-\n-      --  in-place unconstrained function call that should be passed along the\n-      --  caller's parameters. Currently those get mishandled by reassigning\n-      --  the result of the call to the aggregate return object, when the call\n-      --  result should really be directly built in place in the aggregate and\n-      --  not built in a temporary. ???)\n-\n-      elsif Is_Return_Object (Defining_Identifier (Object_Decl)) then\n+      --  If the the object is a return object of an enclosing build-in-place\n+      --  function, then the implicit build-in-place parameters of the\n+      --  enclosing function are simply passed along to the called function.\n+      --  (Unfortunately, this won't cover the case of extension aggregates\n+      --  where the ancestor part is a build-in-place unconstrained function\n+      --  call that should be passed along the caller's parameters. Currently\n+      --  those get mishandled by reassigning the result of the call to the\n+      --  aggregate return object, when the call result should really be\n+      --  directly built in place in the aggregate and not in a temporary. ???)\n+\n+      if Is_Return_Object (Defining_Identifier (Object_Decl)) then\n          Pass_Caller_Acc := True;\n \n          Enclosing_Func := Enclosing_Subprogram (Obj_Def_Id);\n \n-         --  If the enclosing function has a constrained result type, then\n-         --  caller allocation will be used.\n-\n-         if Is_Constrained (Etype (Enclosing_Func)) then\n-            Add_Alloc_Form_Actual_To_Build_In_Place_Call\n-              (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n-\n-         --  Otherwise, when the enclosing function has an unconstrained result\n-         --  type, the BIP_Alloc_Form formal of the enclosing function must be\n-         --  passed along to the callee.\n+         --  When the enclosing function has a BIP_Alloc_Form formal then we\n+         --  pass it along to the callee (such as when the enclosing function\n+         --  has an unconstrained or tagged result type).\n \n-         else\n+         if Needs_BIP_Alloc_Form (Enclosing_Func) then\n             Add_Alloc_Form_Actual_To_Build_In_Place_Call\n               (Func_Call,\n                Function_Id,\n                Alloc_Form_Exp =>\n                  New_Reference_To\n                    (Build_In_Place_Formal (Enclosing_Func, BIP_Alloc_Form),\n                     Loc));\n+\n+         --  Otherwise, if enclosing function has a constrained result subtype,\n+         --  then caller allocation will be used.\n+\n+         else\n+            Add_Alloc_Form_Actual_To_Build_In_Place_Call\n+              (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n          end if;\n \n          --  Retrieve the BIPacc formal from the enclosing function and convert\n@@ -7651,6 +7629,26 @@ package body Exp_Ch6 is\n                   (Build_In_Place_Formal (Enclosing_Func, BIP_Object_Access),\n                    Loc));\n \n+      --  In the constrained case, add an implicit actual to the function call\n+      --  that provides access to the declared object. An unchecked conversion\n+      --  to the (specific) result type of the function is inserted to handle\n+      --  the case where the object is declared with a class-wide type.\n+\n+      elsif Is_Constrained (Underlying_Type (Result_Subt)) then\n+         Caller_Object :=\n+            Make_Unchecked_Type_Conversion (Loc,\n+              Subtype_Mark => New_Reference_To (Result_Subt, Loc),\n+              Expression   => New_Reference_To (Obj_Def_Id, Loc));\n+\n+         --  When the function has a controlling result, an allocation-form\n+         --  parameter must be passed indicating that the caller is allocating\n+         --  the result object. This is needed because such a function can be\n+         --  called as a dispatching operation and must be treated similarly\n+         --  to functions with unconstrained result subtypes.\n+\n+         Add_Alloc_Form_Actual_To_Build_In_Place_Call\n+           (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n+\n       --  In other unconstrained cases, pass an indication to do the allocation\n       --  on the secondary stack and set Caller_Object to Empty so that a null\n       --  value will be passed for the caller's object address. A transient\n@@ -7710,11 +7708,14 @@ package body Exp_Ch6 is\n       --  The access type and its accompanying object must be inserted after\n       --  the object declaration in the constrained case, so that the function\n       --  call can be passed access to the object. In the unconstrained case,\n-      --  the access type and object must be inserted before the object, since\n-      --  the object declaration is rewritten to be a renaming of a dereference\n-      --  of the access object.\n+      --  or if the object declaration is for a return object, the access type\n+      --  and object must be inserted before the object, since the object\n+      --  declaration is rewritten to be a renaming of a dereference of the\n+      --  access object.\n \n-      if Is_Constrained (Underlying_Type (Result_Subt)) then\n+      if Is_Constrained (Underlying_Type (Result_Subt))\n+        and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n+      then\n          Insert_After_And_Analyze (Object_Decl, Ptr_Typ_Decl);\n       else\n          Insert_Action (Object_Decl, Ptr_Typ_Decl);\n@@ -7734,11 +7735,18 @@ package body Exp_Ch6 is\n           Object_Definition   => New_Reference_To (Ref_Type, Loc),\n           Expression          => New_Expr));\n \n-      if Is_Constrained (Underlying_Type (Result_Subt)) then\n+      --  If the result subtype of the called function is constrained and\n+      --  is not itself the return expression of an enclosing BIP function,\n+      --  then mark the object as having no initialization.\n+\n+      if Is_Constrained (Underlying_Type (Result_Subt))\n+        and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n+      then\n          Set_Expression (Object_Decl, Empty);\n          Set_No_Initialization (Object_Decl);\n \n-      --  In case of an unconstrained result subtype, rewrite the object\n+      --  In case of an unconstrained result subtype, or if the call is the\n+      --  return expression of an enclosing BIP function, rewrite the object\n       --  declaration as an object renaming where the renamed object is a\n       --  dereference of <function_Call>'reference:\n       --\n@@ -7830,4 +7838,16 @@ package body Exp_Ch6 is\n           and then Needs_Finalization (Func_Typ);\n    end Needs_BIP_Finalization_Master;\n \n+   --------------------------\n+   -- Needs_BIP_Alloc_Form --\n+   --------------------------\n+\n+   function Needs_BIP_Alloc_Form (Func_Id : Entity_Id) return Boolean is\n+      pragma Assert (Is_Build_In_Place_Function (Func_Id));\n+      Func_Typ : constant Entity_Id := Underlying_Type (Etype (Func_Id));\n+\n+   begin\n+      return not Is_Constrained (Func_Typ) or else Is_Tagged_Type (Func_Typ);\n+   end Needs_BIP_Alloc_Form;\n+\n end Exp_Ch6;"}, {"sha": "29dc27322d979bfacd1210a8c95e3dbd46bbfc71", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -198,7 +198,11 @@ package Exp_Ch6 is\n    --  node applied to such a function call.\n \n    function Needs_BIP_Finalization_Master (Func_Id : Entity_Id) return Boolean;\n-   --  Ada 2005 (AI-318-02): Return True if the function needs a finalization\n-   --  master implicit parameter.\n+   --  Ada 2005 (AI-318-02): Return True if the function needs an implicit\n+   --  finalization master implicit parameter.\n+\n+   function Needs_BIP_Alloc_Form (Func_Id : Entity_Id) return Boolean;\n+   --  Ada 2005 (AI-318-02): Return True if the function needs an implicit\n+   --  BIP_Alloc_Form parameter (see type BIP_Formal_Kind).\n \n end Exp_Ch6;"}, {"sha": "68965ab3156795a3eba85450e11022ba4e29b015", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -836,7 +836,24 @@ package body Prj.Env is\n                   or else Source.Unit /= No_Unit_Index)\n             then\n                if Source.Unit /= No_Unit_Index then\n-                  Get_Name_String (Source.Unit.Name);\n+                  --  Put the encoded unit name in the name buffer\n+\n+                  declare\n+                     Uname : constant String :=\n+                       Get_Name_String (Source.Unit.Name);\n+\n+                  begin\n+                     Name_Len := 0;\n+\n+                     for J in Uname'Range loop\n+                        if Uname (J) in Upper_Half_Character then\n+                           Store_Encoded_Character (Get_Char_Code (Uname (J)));\n+\n+                        else\n+                           Add_Char_To_Name_Buffer (Uname (J));\n+                        end if;\n+                     end loop;\n+                  end;\n \n                   if Source.Language.Config.Kind = Unit_Based then\n "}, {"sha": "3b07a804648026b4eab0404425121d347a4c8f1d", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -1037,8 +1037,8 @@ package body Prj.Part is\n                Proj_Qualifier := Aggregate;\n                Scan (In_Tree);\n \n-               if Token = Tok_Identifier and then\n-                 Token_Name = Snames.Name_Library\n+               if Token = Tok_Identifier\n+                 and then Token_Name = Snames.Name_Library\n                then\n                   Proj_Qualifier := Aggregate_Library;\n                   Scan (In_Tree);"}, {"sha": "7b4bf913ab64d46b3c91d2c06a4bb27493bce548", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb6e262cf96060be3098d2089c1fe059e73dedd/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1bb6e262cf96060be3098d2089c1fe059e73dedd", "patch": "@@ -6120,9 +6120,7 @@ package body Sem_Ch6 is\n             --  dispatching context and such calls must be handled like calls\n             --  to a class-wide function.\n \n-            if not Is_Constrained (Underlying_Type (Result_Subt))\n-              or else Is_Tagged_Type (Underlying_Type (Result_Subt))\n-            then\n+            if Needs_BIP_Alloc_Form (E) then\n                Discard :=\n                  Add_Extra_Formal\n                    (E, Standard_Natural,"}]}