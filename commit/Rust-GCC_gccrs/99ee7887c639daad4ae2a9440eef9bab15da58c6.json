{"sha": "99ee7887c639daad4ae2a9440eef9bab15da58c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllZTc4ODdjNjM5ZGFhZDRhZTJhOTQ0MGVlZjliYWIxNWRhNThjNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-30T15:58:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-30T15:58:53Z"}, "message": "sparc: Convert to atomic_exchange.\n\n        * config/sparc/sync.md (I124MODE): New mode iterator.\n        (memory_barrier): Remove.\n        (atomic_exchangesi): New.\n        (swapsi): Rename from *swapsi.\n        (atomic_test_and_set<I124MODE>): New.\n        (ldstubqi): Rename from *ldstubqi, merge with expander.\n        (ldstub<I24MODE>): Rename from *ldstub<I24MODE>, merge with expander.\n        (sync_lock_test_and_setsi): Remove.\n        (sync_lock_test_and_set<I12MODE>): Remove.\n\nFrom-SVN: r181852", "tree": {"sha": "826278786ccfead0abb9fd87b25e388e8d29be8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/826278786ccfead0abb9fd87b25e388e8d29be8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99ee7887c639daad4ae2a9440eef9bab15da58c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee7887c639daad4ae2a9440eef9bab15da58c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ee7887c639daad4ae2a9440eef9bab15da58c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee7887c639daad4ae2a9440eef9bab15da58c6/comments", "author": null, "committer": null, "parents": [{"sha": "470b6e51608048cdf9e18dafe7dd41b089f0cfe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470b6e51608048cdf9e18dafe7dd41b089f0cfe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470b6e51608048cdf9e18dafe7dd41b089f0cfe4"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "37dce30e2fffade1375d2c9db790a254a21c68d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee7887c639daad4ae2a9440eef9bab15da58c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee7887c639daad4ae2a9440eef9bab15da58c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99ee7887c639daad4ae2a9440eef9bab15da58c6", "patch": "@@ -1,3 +1,15 @@\n+2011-11-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sparc/sync.md (I124MODE): New mode iterator.\n+\t(memory_barrier): Remove.\n+\t(atomic_exchangesi): New.\n+\t(swapsi): Rename from *swapsi.\n+\t(atomic_test_and_set<I124MODE>): New.\n+\t(ldstubqi): Rename from *ldstubqi, merge with expander.\n+\t(ldstub<I24MODE>): Rename from *ldstub<I24MODE>, merge with expander.\n+\t(sync_lock_test_and_setsi): Remove.\n+\t(sync_lock_test_and_set<I12MODE>): Remove.\n+\n 2011-11-30  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/constraints.md (\"w\"): New."}, {"sha": "be8c4c4783a81e4071a412616915b3c7ee29d07d", "filename": "gcc/config/sparc/sync.md", "status": "modified", "additions": 30, "deletions": 60, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee7887c639daad4ae2a9440eef9bab15da58c6/gcc%2Fconfig%2Fsparc%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee7887c639daad4ae2a9440eef9bab15da58c6/gcc%2Fconfig%2Fsparc%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsync.md?ref=99ee7887c639daad4ae2a9440eef9bab15da58c6", "patch": "@@ -19,6 +19,7 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_mode_iterator I12MODE [QI HI])\n+(define_mode_iterator I124MODE [QI HI SI])\n (define_mode_iterator I24MODE [HI SI])\n (define_mode_iterator I48MODE [SI (DI \"TARGET_ARCH64 || TARGET_V8PLUS\")])\n (define_mode_attr modesuffix [(SI \"\") (DI \"x\")])\n@@ -32,14 +33,6 @@\n   DONE;\n })\n \n-(define_expand \"memory_barrier\"\n-  [(const_int 0)]\n-  \"TARGET_V8 || TARGET_V9\"\n-{\n-  sparc_emit_membar_for_model (MEMMODEL_SEQ_CST, 3, 3);\n-  DONE;\n-})\n-\n (define_expand \"membar\"\n   [(set (match_dup 1)\n \t(unspec:BLK [(match_dup 1)\n@@ -224,46 +217,22 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n-;;;;;;;;\n-\n-(define_expand \"sync_lock_test_and_set<mode>\"\n-  [(match_operand:I12MODE 0 \"register_operand\" \"\")\n-   (match_operand:I12MODE 1 \"memory_operand\" \"\")\n-   (match_operand:I12MODE 2 \"arith_operand\" \"\")]\n-  \"!TARGET_V9\"\n+(define_expand \"atomic_exchangesi\"\n+  [(match_operand:SI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+  \"TARGET_V8 || TARGET_V9\"\n {\n-  if (operands[2] != const1_rtx)\n-    FAIL;\n-  if (TARGET_V8)\n-    emit_insn (gen_memory_barrier ());\n-  if (<MODE>mode != QImode)\n-    operands[1] = adjust_address (operands[1], QImode, 0);\n-  emit_insn (gen_ldstub<mode> (operands[0], operands[1]));\n-  DONE;\n-})\n+  enum memmodel model = (enum memmodel) INTVAL (operands[3]);\n \n-(define_expand \"sync_lock_test_and_setsi\"\n-  [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (unspec_volatile:SI [(match_operand:SI 1 \"memory_operand\" \"\")]\n-\t\t\t       UNSPECV_SWAP))\n-      (set (match_dup 1)\n-\t   (match_operand:SI 2 \"arith_operand\" \"\"))])]\n-  \"\"\n-{\n-  if (! TARGET_V8 && ! TARGET_V9)\n-    {\n-      if (operands[2] != const1_rtx)\n-\tFAIL;\n-      operands[1] = adjust_address (operands[1], QImode, 0);\n-      emit_insn (gen_ldstubsi (operands[0], operands[1]));\n-      DONE;\n-    }\n-  emit_insn (gen_memory_barrier ());\n-  operands[2] = force_reg (SImode, operands[2]);\n+  sparc_emit_membar_for_model (model, 3, 1);\n+  emit_insn (gen_swapsi (operands[0], operands[1], operands[2]));\n+  sparc_emit_membar_for_model (model, 3, 2);\n+  DONE;\n })\n \n-(define_insn \"*swapsi\"\n+(define_insn \"swapsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:SI [(match_operand:SI 1 \"memory_operand\" \"+m\")]\n \t\t\t    UNSPECV_SWAP))\n@@ -273,24 +242,25 @@\n   \"swap\\t%1, %0\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_expand \"ldstubqi\"\n-  [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t   (unspec_volatile:QI [(match_operand:QI 1 \"memory_operand\" \"\")]\n-\t\t\t\t       UNSPECV_LDSTUB))\n-\t      (set (match_dup 1) (const_int -1))])]\n+(define_expand \"atomic_test_and_set<mode>\"\n+  [(match_operand:I124MODE 0 \"register_operand\" \"\")\n+   (match_operand:I124MODE 1 \"memory_operand\" \"\")\n+   (match_operand:SI 2 \"const_int_operand\" \"\")]\n   \"\"\n-  \"\")\n+{\n+  enum memmodel model = (enum memmodel) INTVAL (operands[2]);\n \n-(define_expand \"ldstub<mode>\"\n-  [(parallel [(set (match_operand:I24MODE 0 \"register_operand\" \"\")\n-\t\t   (zero_extend:I24MODE\n-\t\t      (unspec_volatile:QI [(match_operand:QI 1 \"memory_operand\" \"\")]\n-\t\t\t\t\t  UNSPECV_LDSTUB)))\n-\t      (set (match_dup 1) (const_int -1))])]\n-  \"\"\n-  \"\")\n+  sparc_emit_membar_for_model (model, 3, 1);\n+\n+  if (<MODE>mode != QImode)\n+    operands[1] = adjust_address (operands[1], QImode, 0);\n+  emit_insn (gen_ldstub<mode> (operands[0], operands[1]));\n+\n+  sparc_emit_membar_for_model (model, 3, 2);\n+  DONE;\n+})\n \n-(define_insn \"*ldstubqi\"\n+(define_insn \"ldstubqi\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:QI [(match_operand:QI 1 \"memory_operand\" \"+m\")]\n \t\t\t    UNSPECV_LDSTUB))\n@@ -299,7 +269,7 @@\n   \"ldstub\\t%1, %0\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"*ldstub<mode>\"\n+(define_insn \"ldstub<mode>\"\n   [(set (match_operand:I24MODE 0 \"register_operand\" \"=r\")\n \t(zero_extend:I24MODE\n \t  (unspec_volatile:QI [(match_operand:QI 1 \"memory_operand\" \"+m\")]"}]}