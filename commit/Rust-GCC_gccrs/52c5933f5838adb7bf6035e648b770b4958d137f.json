{"sha": "52c5933f5838adb7bf6035e648b770b4958d137f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjNTkzM2Y1ODM4YWRiN2JmNjAzNWU2NDhiNzcwYjQ5NThkMTM3Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:46:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T20:19:53Z"}, "message": "c++: Fix specialization of constrained member template.\n\nThe resolution of comment CA104 clarifies that we need to do direct\nsubstitution of constraints in order to determine which member template\ncorresponds to an explicit specialization.\n\ngcc/cp/ChangeLog\n2020-05-11  Jason Merrill  <jason@redhat.com>\n\n\tResolve C++20 NB comment CA104\n\t* pt.c (determine_specialization): Compare constraints for\n\tspecialization of member template of class instantiation.", "tree": {"sha": "18c8454e7f9ca88cfe88f2eb42b7658ff1d0312c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18c8454e7f9ca88cfe88f2eb42b7658ff1d0312c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c5933f5838adb7bf6035e648b770b4958d137f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5933f5838adb7bf6035e648b770b4958d137f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c5933f5838adb7bf6035e648b770b4958d137f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5933f5838adb7bf6035e648b770b4958d137f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f50f6daa140186a048cbf33f54f4591eabf5f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f50f6daa140186a048cbf33f54f4591eabf5f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f50f6daa140186a048cbf33f54f4591eabf5f12"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "5cf9dda42e2c8800e455c06a1dd9f69c9b3b6de8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=52c5933f5838adb7bf6035e648b770b4958d137f", "patch": "@@ -1,3 +1,9 @@\n+2020-05-11  Jason Merrill  <jason@redhat.com>\n+\n+\tResolve C++20 NB comment CA104\n+\t* pt.c (determine_specialization): Compare constraints for\n+\tspecialization of member template of class instantiation.\n+\n 2020-05-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92583"}, {"sha": "84864561c2581d7578fcf595a18244854f11c29c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=52c5933f5838adb7bf6035e648b770b4958d137f", "patch": "@@ -2282,8 +2282,29 @@ determine_specialization (tree template_id,\n              below. */\n \t  if (tsk == tsk_template)\n \t    {\n-\t      if (compparms (fn_arg_types, decl_arg_types))\n-\t\tcandidates = tree_cons (NULL_TREE, fn, candidates);\n+\t      if (!comp_template_parms (DECL_TEMPLATE_PARMS (fn),\n+\t\t\t\t\tcurrent_template_parms))\n+\t\tcontinue;\n+\t      if (!same_type_p (TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t\tTREE_TYPE (TREE_TYPE (fn))))\n+\t\tcontinue;\n+\t      if (!compparms (fn_arg_types, decl_arg_types))\n+\t\tcontinue;\n+\n+\t      tree freq = get_trailing_function_requirements (fn);\n+\t      tree dreq = get_trailing_function_requirements (decl);\n+\t      if (!freq != !dreq)\n+\t\tcontinue;\n+\t      if (freq)\n+\t\t{\n+\t\t  tree fargs = DECL_TI_ARGS (fn);\n+\t\t  tsubst_flags_t complain = tf_none;\n+\t\t  freq = tsubst_constraint (freq, fargs, complain, fn);\n+\t\t  if (!cp_tree_equal (freq, dreq))\n+\t\t    continue;\n+\t\t}\n+\n+\t      candidates = tree_cons (NULL_TREE, fn, candidates);\n \t      continue;\n \t    }\n \n@@ -2472,7 +2493,8 @@ determine_specialization (tree template_id,\n       *targs_out = copy_node (DECL_TI_ARGS (fn));\n \n       /* Propagate the candidate's constraints to the declaration.  */\n-      set_constraints (decl, get_constraints (fn));\n+      if (tsk != tsk_template)\n+\tset_constraints (decl, get_constraints (fn));\n \n       /* DECL is a re-declaration or partial instantiation of a template\n \t function.  */"}, {"sha": "5001813d7b7184f3d5e9a7ae7339284b01a2ebc7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-spec1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-spec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-spec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-spec1.C?ref=52c5933f5838adb7bf6035e648b770b4958d137f", "patch": "@@ -0,0 +1,10 @@\n+// Example from CA 104 proposal.\n+// { dg-do compile { target concepts } }\n+\n+template <class T> concept C = sizeof(T) == 8;\n+template <class T> struct A {\n+  template <class U> U f(U) requires C<typename T::type>; // #1\n+  template <class U> U f(U) requires C<T>; // #2\n+};\n+\n+template <> template <class U> U A<int>::f(U) requires C<int> { } // OK, specializes #2"}, {"sha": "b68416dca6188befdc130a5c79f11de15acc6be4", "filename": "gcc/testsuite/g++.dg/template/nontype18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c5933f5838adb7bf6035e648b770b4958d137f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype18.C?ref=52c5933f5838adb7bf6035e648b770b4958d137f", "patch": "@@ -5,4 +5,4 @@ template<int I> struct A\n     template<typename T> void foo();\n };\n \n-template<int I> template<typename T> void A<0>::foo() {} // { dg-error \"template parameter\" }\n+template<int I> template<typename T> void A<0>::foo() {} // { dg-error \"\" }"}]}