{"sha": "66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxNDMyMzJiY2MyYTg2ZDY5MjQyZjBlOTExZjJkOGE2ZjEyZmZiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-18T22:11:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-18T22:11:24Z"}, "message": "re PR libstdc++/19495 (basic_string::_M_rep() can produce an unnaturally aligned pointer to _Rep)\n\n2005-05-18  Paolo Carlini  <pcarlini@suse.de>\n\t    Nathan Myers  <ncm@cantrip.org>\n\n\tPR libstdc++/19495\n\t* include/bits/basic_string.h (_Raw_bytes_alloc): Rebind to\n\tsize_type instead of char and rename to _Raw_alloc.\n\t* include/bits/basic_string.tcc (_Rep::_M_destroy, _Rep::_S_create):\n\tUse the above.\n\t* src/bitmap_allocator.cc: Add instantiation for size_type.\n\t* src/mt_allocator.cc: Likewise.\n\t* src/pool_allocator.cc: Likewise.\n\t* include/ext/array_allocator.h: Tweak slightly, avoid assuming\n\tthe existence of an _Array::begin() and size() members.\n\t* testsuite/ext/array_allocator/2.cc: Tweak to use an allocator\n\tof size_type, instead of char, thus avoiding problems with\n\trebinds, not treated correctly by array_allocator.\n\nCo-Authored-By: Nathan Myers <ncm@cantrip.org>\n\nFrom-SVN: r99933", "tree": {"sha": "12331c2252e228302cd09fca657e502bb9e75b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12331c2252e228302cd09fca657e502bb9e75b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/comments", "author": null, "committer": null, "parents": [{"sha": "7bd3a7bfc96fe0c312476ae407ec7db38cbf498a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd3a7bfc96fe0c312476ae407ec7db38cbf498a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd3a7bfc96fe0c312476ae407ec7db38cbf498a"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "50db6bb11bf0a7e75aa54f1c8e5b6ee3b2bd0dac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -1,3 +1,20 @@\n+2005-05-18  Paolo Carlini  <pcarlini@suse.de>\n+\t    Nathan Myers  <ncm@cantrip.org>\n+\n+\tPR libstdc++/19495\n+\t* include/bits/basic_string.h (_Raw_bytes_alloc): Rebind to\n+\tsize_type instead of char and rename to _Raw_alloc.\n+\t* include/bits/basic_string.tcc (_Rep::_M_destroy, _Rep::_S_create):\n+\tUse the above.\n+\t* src/bitmap_allocator.cc: Add instantiation for size_type.\n+\t* src/mt_allocator.cc: Likewise.\n+\t* src/pool_allocator.cc: Likewise.\n+\t* include/ext/array_allocator.h: Tweak slightly, avoid assuming\n+\tthe existence of an _Array::begin() and size() members.\n+\t* testsuite/ext/array_allocator/2.cc: Tweak to use an allocator\n+\tof size_type, instead of char, thus avoiding problems with\n+\trebinds, not treated correctly by array_allocator.\n+\n 2005-05-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/ctype/is/char/2.cc: Adjust dg-require-namedlocale."}, {"sha": "b1fbaaac4d0837fc19fcc07b5e62d3b7558f1cf7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -151,7 +151,7 @@ namespace std\n       struct _Rep : _Rep_base\n       {\n \t// Types:\n-\ttypedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;\n+\ttypedef typename _Alloc::template rebind<size_type>::other _Raw_alloc;\n \n \t// (Public) Data members:\n "}, {"sha": "672457f9be9cfcfe8d99148500d84fac384f897f", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -425,9 +425,10 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _M_destroy(const _Alloc& __a) throw ()\n     {\n-      const size_type __size = sizeof(_Rep_base) +\n-\t                       (this->_M_capacity + 1) * sizeof(_CharT);\n-      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);\n+      const size_type __size = ((this->_M_capacity + 1) * sizeof(_CharT)\n+\t\t\t\t+ sizeof(_Rep_base) + sizeof(size_type) - 1);\n+      _Raw_alloc(__a).deallocate(reinterpret_cast<size_type*>(this), __size\n+\t\t\t\t / sizeof(size_type));\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -568,9 +569,12 @@ namespace std\n \t__capacity = 2 * __old_capacity;\n \n       // NB: Need an array of char_type[__capacity], plus a terminating\n-      // null char_type() element, plus enough for the _Rep data structure.\n+      // null char_type() element, plus enough for the _Rep data structure,\n+      // plus sizeof(size_type) - 1 to upper round to a size multiple\n+      // of sizeof(size_type).\n       // Whew. Seemingly so needy, yet so elemental.\n-      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n+      size_type __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep)\n+\t\t\t  + sizeof(size_type) - 1);\n \n       const size_type __adj_size = __size + __malloc_header_size;\n       if (__adj_size > __pagesize && __capacity > __old_capacity)\n@@ -580,12 +584,14 @@ namespace std\n \t  // Never allocate a string bigger than _S_max_size.\n \t  if (__capacity > _S_max_size)\n \t    __capacity = _S_max_size;\n-\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n+\t  __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep)\n+\t\t    + sizeof(size_type) - 1);\n \t}\n \n       // NB: Might throw, but no worries about a leak, mate: _Rep()\n       // does not throw.\n-      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);\n+      void* __place = _Raw_alloc(__alloc).allocate(__size\n+\t\t\t\t\t\t   / sizeof(size_type));\n       _Rep *__p = new (__place) _Rep;\n       __p->_M_capacity = __capacity;\n       return __p;"}, {"sha": "27169193306b5e48f06d2d93418d50b2c406f0e8", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -121,9 +121,10 @@ namespace __gnu_cxx\n       allocate(size_type __n, const void* = 0)\n       {\n \tstatic size_type __array_used;\n-\tif (_M_array == 0 || __array_used + __n > _M_array->size())\n+\tif (_M_array == 0\n+\t    || __array_used + __n > sizeof(*_M_array) / sizeof(_Tp))\n \t  std::__throw_bad_alloc();\n-\tpointer __ret = _M_array->begin() + __array_used;\n+\tpointer __ret = reinterpret_cast<_Tp*>(_M_array) + __array_used;\n \t__array_used += __n;\n \treturn __ret;\n       }"}, {"sha": "4e42cced450b7d69d027fbb361b3e3cb7afa7245", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -41,6 +41,10 @@ namespace __gnu_cxx\n     <bitmap_allocator<wchar_t>::_Alloc_block*, \n      bitmap_allocator<wchar_t>::_Alloc_block*> >;\n \n+    template class __mini_vector<std::pair\n+    <bitmap_allocator<size_t>::_Alloc_block*, \n+     bitmap_allocator<size_t>::_Alloc_block*> >;\n+\n     template class __mini_vector<size_t*>;\n \n     template size_t** __lower_bound"}, {"sha": "9c94bc860446de867bcec1baee38af465c8a749c", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -1,8 +1,8 @@\n // Allocator details.\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n-// This file is part of the GNU ISO C++ Librarbooly.  This library is free\n+// This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 2, or (at your option)\n@@ -552,4 +552,5 @@ namespace __gnu_cxx\n   // Instantiations.\n   template class __mt_alloc<char>;\n   template class __mt_alloc<wchar_t>;\n+  template class __mt_alloc<size_t>;  \n } // namespace __gnu_cxx"}, {"sha": "1ad4e9c9a45ac668bdeeff3494b1a8f0c5295694", "filename": "libstdc++-v3/src/pool_allocator.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fpool_allocator.cc?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -170,4 +170,5 @@ namespace __gnu_cxx\n   // Instantiations.\n   template class __pool_alloc<char>;\n   template class __pool_alloc<wchar_t>;\n+  template class __pool_alloc<size_t>;  \n } // namespace __gnu_cxx"}, {"sha": "1e8372589230870f1e012a07f36b227317ed6e47", "filename": "libstdc++-v3/testsuite/ext/array_allocator/2.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66143232bcc2a86d69242f0e911f2d8a6f12ffb4/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc?ref=66143232bcc2a86d69242f0e911f2d8a6f12ffb4", "patch": "@@ -1,7 +1,4 @@\n-// Expected execution error for PR19495.\n-// { dg-do run { xfail powerpc*-*-linux* } }\n-\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +32,10 @@\n \n typedef char char_type;\n typedef std::char_traits<char_type> traits_type;\n-typedef std::tr1::array<char_type, 32> array_type;\n+// NB: Array_allocator doesn't properly support rebinding, used by\n+// basic_string. See libstdc++/21609 for details.\n+typedef std::tr1::array<size_t, 16> array_type;\n+typedef __gnu_cxx::array_allocator<size_t, array_type> allocator_type;\n \n array_type extern_array;\n \n@@ -44,10 +44,8 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   using std::basic_string;\n-  typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n   typedef basic_string<char_type, traits_type, allocator_type> string_type;\n \n-  size_t index = array_type::_S_index;\n   allocator_type a(&extern_array);\n   string_type s(a);\n     "}]}