{"sha": "9f37ccb1946e0333e03cf6bcecad46e410a7158b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzN2NjYjE5NDZlMDMzM2UwM2NmNmJjZWNhZDQ2ZTQxMGE3MTU4Yg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-01-14T16:56:24Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-01-14T16:56:24Z"}, "message": "s390.md (movstrdix_64, [...]): Improve RTL templates.\n\n\t* config/s390/s390.md (movstrdix_64, movstrsix_31, movstrdi_64,\n\tmovstrsi_31, clrstrsi_64, clrstrsi_31): Improve RTL templates.\n\t(clrstrdi, clrstrsi): Adapt callers.\n\n\t(extendsidi2, zero_extendsidi2): Remove no-conflict blocks.\n\n\t(movti splitter): Never use register 0 as base register.\n\nFrom-SVN: r48832", "tree": {"sha": "0117deadf0c7afbf1bae1cc7d36175a87a7979b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0117deadf0c7afbf1bae1cc7d36175a87a7979b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f37ccb1946e0333e03cf6bcecad46e410a7158b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37ccb1946e0333e03cf6bcecad46e410a7158b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f37ccb1946e0333e03cf6bcecad46e410a7158b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f37ccb1946e0333e03cf6bcecad46e410a7158b/comments", "author": null, "committer": null, "parents": [{"sha": "6c2d03d0d1cbd6a2bf8a4078d5d256c6edebe5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2d03d0d1cbd6a2bf8a4078d5d256c6edebe5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2d03d0d1cbd6a2bf8a4078d5d256c6edebe5fa"}], "stats": {"total": 137, "additions": 72, "deletions": 65}, "files": [{"sha": "d199ca65871bbba24b6912387f7fb1a2506d2dd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f37ccb1946e0333e03cf6bcecad46e410a7158b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f37ccb1946e0333e03cf6bcecad46e410a7158b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f37ccb1946e0333e03cf6bcecad46e410a7158b", "patch": "@@ -1,3 +1,13 @@\n+2002-01-14  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (movstrdix_64, movstrsix_31, movstrdi_64,\n+\tmovstrsi_31, clrstrsi_64, clrstrsi_31): Improve RTL templates.\n+\t(clrstrdi, clrstrsi): Adapt callers.\n+\n+\t(extendsidi2, zero_extendsidi2): Remove no-conflict blocks.\n+\n+\t(movti splitter): Never use register 0 as base register.\t\n+\n 2002-01-14  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* combine.c (simplify_shift_const): Always generate new rtx "}, {"sha": "8a8b2eedc2c8320d6b91f1e257a64217b7f6b10b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 62, "deletions": 65, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f37ccb1946e0333e03cf6bcecad46e410a7158b/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f37ccb1946e0333e03cf6bcecad46e410a7158b/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9f37ccb1946e0333e03cf6bcecad46e410a7158b", "patch": "@@ -866,7 +866,7 @@\n    && !s_operand (operands[1], VOIDmode)\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 0) (mem:TI (match_dup 2)))]\n-  \"operands[2] = operand_subword (operands[0], 0, 0, TImode);\n+  \"operands[2] = operand_subword (operands[0], 1, 0, TImode);\n    operands[3] = XEXP (operands[1], 0);\")\n \n ;\n@@ -1717,11 +1717,15 @@\n ; Move a block that is more than 256 bytes in lenght or length in register\n \n (define_insn \"movstrdix_64\"\n-  [(clobber (match_operand:DI 0 \"register_operand\" \"=a\"))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=a\"))\n-   (set (mem:BLK (match_operand:DI 2 \"register_operand\" \"0\"))\n-        (mem:BLK (match_operand:DI 3 \"register_operand\" \"1\")))\n-   (use (match_operand:DI 4 \"register_operand\" \"a\"))\n+  [(use (match_operand:DI 4 \"register_operand\" \"a\"))\n+   (set (match_operand:DI 0 \"register_operand\" \"=a\")\n+        (plus:DI (match_operand:DI 2 \"register_operand\" \"0\")\n+                 (and:DI (match_dup 4) (const_int -256))))\n+   (set (match_operand:DI 1 \"register_operand\" \"=a\")\n+        (plus:DI (match_operand:DI 3 \"register_operand\" \"1\")\n+                 (and:DI (match_dup 4) (const_int -256))))\n+   (set (mem:BLK (match_dup 2))\n+        (mem:BLK (match_dup 3)))\n    (clobber (match_scratch:DI 5 \"=&a\"))\n    (clobber (reg:CC 33))]\n   \"\"\n@@ -1753,11 +1757,15 @@\n    (set_attr \"length\" \"44\")])\n \n (define_insn \"movstrsix_31\"\n-  [(clobber (match_operand:SI 0 \"register_operand\" \"=a\"))\n-   (clobber (match_operand:SI 1 \"register_operand\" \"=a\"))\n-   (set (mem:BLK (match_operand:SI 2 \"register_operand\" \"0\"))\n-        (mem:BLK (match_operand:SI 3 \"register_operand\" \"1\")))\n-   (use (match_operand:SI 4 \"register_operand\" \"a\"))\n+  [(use (match_operand:SI 4 \"register_operand\" \"a\"))\n+   (set (match_operand:SI 0 \"register_operand\" \"=a\")\n+        (plus:SI (match_operand:SI 2 \"register_operand\" \"0\")\n+                 (and:SI (match_dup 4) (const_int -256))))\n+   (set (match_operand:SI 1 \"register_operand\" \"=a\")\n+        (plus:SI (match_operand:SI 3 \"register_operand\" \"1\")\n+                 (and:SI (match_dup 4) (const_int -256))))\n+   (set (mem:BLK (match_dup 2))\n+        (mem:BLK (match_dup 3)))\n    (clobber (match_scratch:SI 5 \"=&a\"))\n    (clobber (reg:CC 33))]\n   \"\"\n@@ -1792,24 +1800,36 @@\n ; Move a block that is larger than 255 bytes in length.\n \n (define_insn \"movstrdi_64\"\n-  [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n-   (clobber (match_operand:TI 1 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n-        (mem:BLK (subreg:DI (match_operand:TI 3 \"register_operand\" \"1\") 0)))\n+  [(set (match_operand:TI 0 \"register_operand\" \"=d\")\n+        (ashift:TI (plus:TI (match_operand:TI 2 \"register_operand\" \"0\")\n+                            (lshiftrt:TI (match_dup 2) (const_int 64)))\n+                   (const_int 64)))\n+   (set (match_operand:TI 1 \"register_operand\" \"=d\")\n+        (ashift:TI (plus:TI (match_operand:TI 3 \"register_operand\" \"1\")\n+                            (lshiftrt:TI (match_dup 3) (const_int 64)))\n+                   (const_int 64)))\n+   (set (mem:BLK (subreg:DI (match_dup 2) 0))\n+        (mem:BLK (subreg:DI (match_dup 3) 0)))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"TARGET_64BIT\"\n   \"mvcle\\\\t%0,%1,0\\;jo\\\\t.-4\"\n   [(set_attr \"op_type\" \"NN\")\n    (set_attr \"atype\"   \"mem\")\n    (set_attr \"length\"  \"8\")])\n \n (define_insn \"movstrsi_31\"\n-  [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n-        (mem:BLK (subreg:SI (match_operand:DI 3 \"register_operand\" \"1\") 0)))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashift:DI (plus:DI (match_operand:DI 2 \"register_operand\" \"0\")\n+                            (lshiftrt:DI (match_dup 2) (const_int 32)))\n+                   (const_int 32)))\n+   (set (match_operand:DI 1 \"register_operand\" \"=d\")\n+        (ashift:DI (plus:DI (match_operand:DI 3 \"register_operand\" \"1\")\n+                            (lshiftrt:DI (match_dup 3) (const_int 32)))\n+                   (const_int 32)))\n+   (set (mem:BLK (subreg:SI (match_dup 2) 0))\n+        (mem:BLK (subreg:SI (match_dup 3) 0)))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"mvcle\\\\t%0,%1,0\\;jo\\\\t.-4\"\n    [(set_attr \"op_type\" \"NN\")\n     (set_attr \"atype\" \"mem\")\n@@ -1853,7 +1873,7 @@\n       emit_move_insn (gen_lowpart (DImode, reg1), const0_rtx);\n  \n       /* Clear! */\n-      emit_insn (gen_clrstrsi_64 (reg0, reg1, reg0, reg1));\n+      emit_insn (gen_clrstrsi_64 (reg0, reg1, reg0));\n       DONE;\t\n      }\n }\")\n@@ -1896,7 +1916,7 @@\n       emit_move_insn (gen_lowpart (SImode, reg1), const0_rtx);\n  \n       /* CLear! */\n-      emit_insn (gen_clrstrsi_31 (reg0, reg1, reg0, reg1));\n+      emit_insn (gen_clrstrsi_31 (reg0, reg1, reg0));\n       DONE;\t\n      }\n }\")\n@@ -1917,11 +1937,13 @@\n ; Clear memory with length greater 256 bytes or lenght not constant\n \n (define_insn \"clrstrsi_64\"\n-  [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n-   (clobber (match_operand:TI 1 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:DI (match_operand:TI 2 \"register_operand\" \"0\") 0))\n+  [(set (match_operand:TI 0 \"register_operand\" \"=d\")\n+        (ashift:TI (plus:TI (match_operand:TI 2 \"register_operand\" \"0\")\n+                            (lshiftrt:TI (match_dup 2) (const_int 64)))\n+                   (const_int 64)))\n+   (set (mem:BLK (subreg:DI (match_dup 2) 0))\n         (const_int 0))\n-   (use (match_operand:TI 3 \"register_operand\" \"1\"))\n+   (use (match_operand:TI 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT\"\n   \"mvcle\\\\t%0,%1,0\\;jo\\\\t.-4\"\n@@ -1931,11 +1953,13 @@\n    (set_attr \"length\"  \"8\")])\n \n (define_insn \"clrstrsi_31\"\n-  [(clobber (match_operand:DI 0 \"register_operand\" \"=d\"))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:SI (match_operand:DI 2 \"register_operand\" \"0\") 0))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashift:DI (plus:DI (match_operand:DI 2 \"register_operand\" \"0\")\n+                            (lshiftrt:DI (match_dup 2) (const_int 32)))\n+                   (const_int 32)))\n+   (set (mem:BLK (subreg:SI (match_dup 2) 0))\n         (const_int 0))\n-   (use (match_operand:DI 3 \"register_operand\" \"1\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC 33))]\n   \"!TARGET_64BIT\"\n   \"mvcle\\\\t%0,%1,0\\;jo\\\\t.-4\"\n@@ -2242,23 +2266,10 @@\n {\n   if (!TARGET_64BIT)\n     {\n-      rtx insns, subword;\n-\n-      operands[1] = force_reg (SImode, operands[1]);\n-      subword = operand_subword (operands[0], 0, 1, DImode);\n-\n-      start_sequence ();\n-      emit_move_insn (subword, operands[1]);\n-      emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (32))); \n-      insns = get_insns ();\n-      end_sequence ();\n-\n-      emit_no_conflict_block (insns, operands[0], operands[1], 0, \n-                              gen_rtx_SIGN_EXTEND (DImode, operands[1]));\n-\n-      /* Avoid having the REG_RETVAL destroyed by someone attaching \n-         other REG_EQUAL notes.  */\n-      emit_move_insn (operands[0], operands[0]);\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+      emit_move_insn (gen_highpart (SImode, operands[0]), operands[1]);\n+      emit_move_insn (gen_lowpart (SImode, operands[0]), const0_rtx);\n+      emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (32)));\n       DONE;\n     }\n }\n@@ -2419,23 +2430,9 @@\n {\n   if (!TARGET_64BIT)\n     {\n-      rtx insns, subword;\n-\n-      operands[1] = force_reg (SImode, operands[1]);\n-      subword = operand_subword (operands[0], 0, 1, DImode);\n-\n-      start_sequence ();\n-      emit_move_insn (subword, operands[1]);\n-      emit_insn (gen_lshrdi3 (operands[0], operands[0], GEN_INT (32))); \n-      insns = get_insns ();\n-      end_sequence ();\n-\n-      emit_no_conflict_block (insns, operands[0], operands[1], 0, \n-                              gen_rtx_ZERO_EXTEND (DImode, operands[1]));\n-\n-      /* Avoid having the REG_RETVAL destroyed by someone attaching \n-         other REG_EQUAL notes.  */\n-      emit_move_insn (operands[0], operands[0]);\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+      emit_move_insn (gen_lowpart (SImode, operands[0]), operands[1]);\n+      emit_move_insn (gen_highpart (SImode, operands[0]), const0_rtx);\n       DONE;\n     }\n }"}]}