{"sha": "55385f12f604fe242030f0a8fb057598c0f187a6", "node_id": "C_kwDOANBUbNoAKDU1Mzg1ZjEyZjYwNGZlMjQyMDMwZjBhOGZiMDU3NTk4YzBmMTg3YTY", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-06T19:23:18Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2022-01-07T01:34:35Z"}, "message": "Fortran: Fix handling of optional argument to SIZE intrinsic [PR103898]\n\nThis patch fixes a think-o in the code that triggered an ICE\nin the test case.\n\n2021-01-06  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR fortran/103898\n\n\tgcc/fortran/\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Make size_var\n\tactually be a variable and fix surrounding code.\n\n\tgcc/testsuite/\n\t* gfortran.dg/pr103898.f90: New test.", "tree": {"sha": "1c067ab8b44eb18982ae18616df52a822cf23720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c067ab8b44eb18982ae18616df52a822cf23720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55385f12f604fe242030f0a8fb057598c0f187a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55385f12f604fe242030f0a8fb057598c0f187a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55385f12f604fe242030f0a8fb057598c0f187a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55385f12f604fe242030f0a8fb057598c0f187a6/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d8ff73718fd07a9a7dfd2566d3b7b69f37b6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d8ff73718fd07a9a7dfd2566d3b7b69f37b6bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d8ff73718fd07a9a7dfd2566d3b7b69f37b6bd"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "aae34b06948c6e3294aaaea464b3b54d19650521", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55385f12f604fe242030f0a8fb057598c0f187a6/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55385f12f604fe242030f0a8fb057598c0f187a6/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=55385f12f604fe242030f0a8fb057598c0f187a6", "patch": "@@ -8006,10 +8006,14 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n \t  cond = gfc_evaluate_now (cond, &se->pre);\n \t  /* 'block2' contains the arg2 absent case, 'block' the arg2 present\n \t      case; size_var can be used in both blocks. */\n-\t  tree size_var = gfc_tree_array_size (&block2, arg1, e, NULL_TREE);\n+\t  tree size_var = gfc_create_var (TREE_TYPE (size), \"size\");\n \t  tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n \t\t\t\t TREE_TYPE (size_var), size_var, size);\n \t  gfc_add_expr_to_block (&block, tmp);\n+\t  size = gfc_tree_array_size (&block2, arg1, e, NULL_TREE);\n+\t  tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t TREE_TYPE (size_var), size_var, size);\n+\t  gfc_add_expr_to_block (&block2, tmp);\n \t  tmp = build3_v (COND_EXPR, cond, gfc_finish_block (&block),\n \t\t\t  gfc_finish_block (&block2));\n \t  gfc_add_expr_to_block (&se->pre, tmp);"}, {"sha": "6b4bb30e10adf8d5a7db3249531dd2bf3c54ad04", "filename": "gcc/testsuite/gfortran.dg/pr103898.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55385f12f604fe242030f0a8fb057598c0f187a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103898.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55385f12f604fe242030f0a8fb057598c0f187a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103898.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103898.f90?ref=55385f12f604fe242030f0a8fb057598c0f187a6", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+\n+! This test used to ICE during gimplification (PR103898).\n+\n+Module g\n+contains\n+  function mysize(array, dim)\n+    integer :: mysize\n+    integer, dimension(:), intent(in)   :: array\n+    integer, optional,     intent(in)   :: dim\n+    if (present(dim)) then\n+       mysize = size(array, dim=dim)\n+    endif\n+  end function mysize\n+end module"}]}