{"sha": "3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmYTlkYzFiNTE1ZjQ3NmM2ZjcyYTQ4MGUyYWRiZGI5MDc3ODgwYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-09-24T01:38:32Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-09-24T01:38:32Z"}, "message": "pa.c (hppa_expand_prologue): Do pic register save in frame marker without adding a frame note.\n\n\t* pa.c (hppa_expand_prologue): Do pic register save in frame marker\n\twithout adding a frame note.\n\t* pa.md (allocate_stack): Save pic register in new frame marker when\n\tgenerating pic code.\n\nFrom-SVN: r71709", "tree": {"sha": "ff7b109a3501f6617ec32bd91dabbe2d5820f7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7b109a3501f6617ec32bd91dabbe2d5820f7e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/comments", "author": null, "committer": null, "parents": [{"sha": "3eaf1216b9261886bee05a0094f67ec097cf293a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaf1216b9261886bee05a0094f67ec097cf293a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaf1216b9261886bee05a0094f67ec097cf293a"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "67ac8926f26b8f92dafae2ff08209095649f4e66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "patch": "@@ -1,3 +1,10 @@\n+2003-09-23  John Davind Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (hppa_expand_prologue): Do pic register save in frame marker\n+\twithout adding a frame note.\n+\t* pa.md (allocate_stack): Save pic register in new frame marker when\n+\tgenerating pic code.\n+\n 2003-09-23  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* cgraphunit.c (cgraph_expand_all_functions): Renamed from "}, {"sha": "a7a55881e3fde9e3e3c280c4d4b62a15f968ae81", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "patch": "@@ -3475,9 +3475,17 @@ hppa_expand_prologue (void)\n      when generating PIC code.  FIXME:  What is the correct thing\n      to do for functions which make no calls and allocate no\n      frame?  Do we need to allocate a frame, or can we just omit\n-     the save?   For now we'll just omit the save.  */\n+     the save?   For now we'll just omit the save.\n+     \n+     We don't want a note on this insn as the frame marker can\n+     move if there is a dynamic stack allocation.  */\n   if (flag_pic && actual_fsize != 0 && !TARGET_64BIT)\n-    store_reg (PIC_OFFSET_TABLE_REGNUM, -32, STACK_POINTER_REGNUM);\n+    {\n+      rtx addr = gen_rtx_PLUS (word_mode, stack_pointer_rtx, GEN_INT (-32));\n+\n+      emit_move_insn (gen_rtx_MEM (word_mode, addr), pic_offset_table_rtx);\n+\n+    }\n \n   /* Align pointer properly (doubleword boundary).  */\n   offset = (offset + 7) & ~7;"}, {"sha": "f6d9238c691f0e9abce2c347e48d0e857fc1bf57", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ffa9dc1b515f476c6f72a480e2adbdb9077880c/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3ffa9dc1b515f476c6f72a480e2adbdb9077880c", "patch": "@@ -8061,17 +8061,22 @@\n   \"\"\n   \"\n {\n+  rtx addr;\n+\n   /* Since the stack grows upward, we need to store virtual_stack_dynamic_rtx\n      in operand 0 before adjusting the stack.  */\n   emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n   anti_adjust_stack (operands[1]);\n   if (TARGET_HPUX_UNWIND_LIBRARY)\n     {\n-      rtx dst = gen_rtx_MEM (word_mode,\n-  \t\t\t     gen_rtx_PLUS (word_mode, stack_pointer_rtx,\n-\t\t\t  \t\t   GEN_INT (TARGET_64BIT ? -8 : -4)));\n-\n-      emit_move_insn (dst, frame_pointer_rtx);\n+      addr = gen_rtx_PLUS (word_mode, stack_pointer_rtx,\n+\t\t\t   GEN_INT (TARGET_64BIT ? -8 : -4));\n+      emit_move_insn (gen_rtx_MEM (word_mode, addr), frame_pointer_rtx);\n+    }\n+  if (!TARGET_64BIT && flag_pic)\n+    {\n+      rtx addr = gen_rtx_PLUS (word_mode, stack_pointer_rtx, GEN_INT (-32));\n+      emit_move_insn (gen_rtx_MEM (word_mode, addr), pic_offset_table_rtx);\n     }\n   DONE;\n }\")"}]}