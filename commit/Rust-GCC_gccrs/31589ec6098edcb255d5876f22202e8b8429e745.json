{"sha": "31589ec6098edcb255d5876f22202e8b8429e745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ODllYzYwOThlZGNiMjU1ZDU4NzZmMjIyMDJlOGI4NDI5ZTc0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-23T22:03:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-23T22:03:31Z"}, "message": "pr18425.c: Use effective target vect_long.\n\n        * gcc.dg/vect/pr18425.c: Use effective target vect_long.\n        * gcc.dg/vect/vect-13.c, gcc.dg/vect/vect-17.c, gcc.dg/vect/vect-18.c,\n        gcc.dg/vect/vect-19.c, gcc.dg/vect/vect-20.c, gcc.dg/vect/vect-48a.c,\n        gcc.dg/vect/vect-56a.c, gcc.dg/vect/vect-7.c, gcc.dg/vect/vect-77.c,\n        gcc.dg/vect/vect-77a.c, gcc.dg/vect/vect-78.c, gcc.dg/vect/vect-86.c,\n        gcc.dg/vect/vect-87.c, gcc.dg/vect/vect-88.c: XFAIL for alpha.\n\n        * gcc.dg/vect/vect.exp: Add check for alpha.\n        * lib/target-supports.exp (check_alpha_max_hw_available): New.\n        (check_effective_target_vect_int): Enable for alpha.\n        (check_effective_target_vect_long): New.\n        (is-effective-target): Add it.\n\nFrom-SVN: r91105", "tree": {"sha": "e0fad812df82165ae67ab41e9dae40c59e15dad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0fad812df82165ae67ab41e9dae40c59e15dad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31589ec6098edcb255d5876f22202e8b8429e745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31589ec6098edcb255d5876f22202e8b8429e745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31589ec6098edcb255d5876f22202e8b8429e745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31589ec6098edcb255d5876f22202e8b8429e745/comments", "author": null, "committer": null, "parents": [{"sha": "f8af9e2861bbcc7c9e647d7a38a81b2a6df23e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8af9e2861bbcc7c9e647d7a38a81b2a6df23e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8af9e2861bbcc7c9e647d7a38a81b2a6df23e05"}], "stats": {"total": 135, "additions": 109, "deletions": 26}, "files": [{"sha": "b395dd02d5cd2caaf48b1aa31491de74db382ee6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -1,3 +1,18 @@\n+2004-11-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/vect/pr18425.c: Use effective target vect_long.\n+\t* gcc.dg/vect/vect-13.c, gcc.dg/vect/vect-17.c, gcc.dg/vect/vect-18.c,\n+\tgcc.dg/vect/vect-19.c, gcc.dg/vect/vect-20.c, gcc.dg/vect/vect-48a.c,\n+\tgcc.dg/vect/vect-56a.c, gcc.dg/vect/vect-7.c, gcc.dg/vect/vect-77.c,\n+\tgcc.dg/vect/vect-77a.c, gcc.dg/vect/vect-78.c, gcc.dg/vect/vect-86.c,\n+\tgcc.dg/vect/vect-87.c, gcc.dg/vect/vect-88.c: XFAIL for alpha.\n+\n+\t* gcc.dg/vect/vect.exp: Add check for alpha.\n+\t* lib/target-supports.exp (check_alpha_max_hw_available): New.\n+\t(check_effective_target_vect_int): Enable for alpha.\n+\t(check_effective_target_vect_long): New.\n+\t(is-effective-target): Add it.\n+\n 2004-11-23  Uros Bizjak <uros@kss-loka.si>\n \n \t* gcc.dg/pr18614-1.c: New test."}, {"sha": "2fa1b799434bc04cb18025d09d1dd0390c69edbc", "filename": "gcc/testsuite/gcc.dg/vect/pr18425.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18425.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18425.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr18425.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -1,10 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target vect_int } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 16\n+/* ??? Using \"long\" isn't quite right; we're testing vectors of pointers here.\n+   But since no extant target supports sizeof(long) != sizeof(void*)...  */\n+/* { dg-require-effective-target vect_long } */\n \n char **      _M_allocate();\n void\n@@ -16,5 +13,4 @@ _M_fill_insert(unsigned int __n)\n      *__new_start = __tmp;\n }\n \n-\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "94048276ccb654dc7508938f22c8c44a7d11726c", "filename": "gcc/testsuite/gcc.dg/vect/vect-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -38,4 +38,4 @@ int main (void)\n \n /* These fail to vectorize on targets that don't have or model a vector\n    max operation.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* alpha*-*-* } } } */"}, {"sha": "50f11331c0be36989104e3b230d443637c96ea4d", "filename": "gcc/testsuite/gcc.dg/vect/vect-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-17.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -126,4 +126,4 @@ int main (void)\n \n /* These fail to vectorize on targets that don't have or model vector\n    bitwise operations.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-* alpha*-*-* } } } */"}, {"sha": "991deb44bb4d983750c4398f6eba32c2d9302373", "filename": "gcc/testsuite/gcc.dg/vect/vect-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-18.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -125,4 +125,4 @@ int main (void)\n \n /* These fail to vectorize on targets that don't have or model vector\n    bitwise operations.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-* alpha*-*-* } } } */"}, {"sha": "49c8a5ce8ba5c058559e491688fb5e46f09bb870", "filename": "gcc/testsuite/gcc.dg/vect/vect-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-19.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -125,4 +125,4 @@ int main (void)\n \n /* These fail to vectorize on targets that don't have or model vector\n    bitwise operations.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-* alpha*-*-* } } } */"}, {"sha": "e2674af3b00df52f91ff6c53725ad1bfb04b2b23", "filename": "gcc/testsuite/gcc.dg/vect/vect-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-20.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -97,4 +97,4 @@ int main (void)\n \n /* These fail to vectorize on targets that don't have or model vector\n    bitwise operations.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-*} } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" {xfail i?86-*-* x86_64-*-* alpha*-*-* } } } */"}, {"sha": "401da6c998a4911d0f33df73b164292cce26713c", "filename": "gcc/testsuite/gcc.dg/vect/vect-48a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -53,4 +53,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}, {"sha": "1cd117eb0b34e0f371bdcb122fe0242a3f48b1c1", "filename": "gcc/testsuite/gcc.dg/vect/vect-56a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -51,4 +51,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}, {"sha": "ae751cbd42cddb12a7dc1e20f36e1d120d824323", "filename": "gcc/testsuite/gcc.dg/vect/vect-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-7.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -45,4 +45,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* Fails for targets that don't vectorize PLUS.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail alpha*-*-* } } } */"}, {"sha": "a49a284348e65872065401ffee7444e7b06564dc", "filename": "gcc/testsuite/gcc.dg/vect/vect-77.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -41,5 +41,4 @@ int main (void)\n \n /* These are not yet vectorized on targets that do not model alignment-handling\n    mechanisms.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* } } } */\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* alpha*-*-* } } } */"}, {"sha": "5e10d28c97632c449ec8b9a3cfef3ec360af086c", "filename": "gcc/testsuite/gcc.dg/vect/vect-77a.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -43,5 +43,4 @@ int main (void)\n \n /* This fails to vectorize for 64-bit powerpc but there's no way to\n    specify that in an xfail list.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}, {"sha": "3a0bb3885bf1d51353877bf0a4136b1551372f1e", "filename": "gcc/testsuite/gcc.dg/vect/vect-78.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-78.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -40,6 +40,4 @@ int main (void)\n   return 0;\n }\n \n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* } } } */\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* sparc*-*-* alpha*-*-* } } } */"}, {"sha": "e90349d74c7707c29b39e5c7ba8b98d1cc30bce6", "filename": "gcc/testsuite/gcc.dg/vect/vect-86.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-86.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -45,4 +45,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Fails for targets that don't vectorize PLUS.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail alpha*-*-* } } } */"}, {"sha": "afc8a9ed59456df03d8df64f1f731fa6194e381f", "filename": "gcc/testsuite/gcc.dg/vect/vect-87.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-87.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -49,4 +49,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Fails for targets that don't vectorize PLUS.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail alpha*-*-* } } } */"}, {"sha": "d492eacc8979bd01b2493f415783f1fd0cfae3d2", "filename": "gcc/testsuite/gcc.dg/vect/vect-88.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-88.c?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -49,4 +49,5 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* Fails for targets that don't vectorize PLUS.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail alpha*-*-* } } } */"}, {"sha": "a3aa89ae5c3ce74d9b8851d4f7784e773f39148d", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -58,6 +58,13 @@ if [istarget \"powerpc*-*-*\"] {\n } elseif [istarget \"sparc*-*-*\"] {\n     lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n     set dg-do-what-default run\n+} elseif [istarget \"alpha*-*-*\"] {\n+    lappend DEFAULT_VECTCFLAGS \"-mmax\"\n+    if [check_alpha_max_hw_available] {\n+\tset dg-do-what-default run\n+    } else {\n+\tset dg-do-what-default compile\n+    }\n } else {\n     return\n }"}, {"sha": "4ea6e3f95cf395c249f86a0177e3970c6235238f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31589ec6098edcb255d5876f22202e8b8429e745/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=31589ec6098edcb255d5876f22202e8b8429e745", "patch": "@@ -368,6 +368,46 @@ proc check_vmx_hw_available { } {\n     return $vmx_hw_available_saved\n }\n \n+proc check_alpha_max_hw_available { } {\n+    global alpha_max_hw_available_saved\n+    global tool\n+\n+    if [info exists alpha_max_hw_available_saved] {\n+\tverbose \"check_alpha_max_hw_available returning saved $alpha_max_hw_available_saved\" 2\n+    } else {\n+\tset alpha_max_hw_available_saved 0\n+\n+\t# Set up, compile, and execute a test program probing bit 8 of the\n+\t# architecture mask, which indicates presence of MAX instructions.\n+\tset src max[pid].c\n+\tset exe max[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"int main() { return __builtin_alpha_amask(1<<8) != 0; }\"\n+\tclose $f\n+\n+\tverbose \"check_alpha_max_hw_available compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $exe executable \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] then {\n+\t    # No error message, compilation succeeded.\n+\t    set result [${tool}_load \"./$exe\" \"\" \"\"]\n+\t    set status [lindex $result 0]\n+\t    remote_file build delete $exe\n+\t    verbose \"check_alpha_max_hw_available testfile status is <$status>\" 2\n+\n+\t    if { $status == \"pass\" } then {\n+\t\tset alpha_max_hw_available_saved 1\n+\t    }\n+\t} else {\n+\t    verbose \"check_alpha_max_hw_availalble testfile compilation failed\" 2\n+\t}\n+    }\n+\n+    return $alpha_max_hw_available_saved\n+}\n+\n # Return 1 if we're generating 32-bit code using default options, 0\n # otherwise.\n \n@@ -406,7 +446,8 @@ proc check_effective_target_vect_int { } {\n \tif { [istarget i?86-*-*]\n \t      || [istarget powerpc*-*-*]\n \t      || [istarget x86_64-*-*]\n-\t      || [istarget sparc*-*-*] } {\n+\t      || [istarget sparc*-*-*]\n+\t      || [istarget alpha*-*-*] } {\n \t   set et_vect_int_saved 1\n \t}\n     }\n@@ -415,6 +456,29 @@ proc check_effective_target_vect_int { } {\n     return $et_vect_int_saved\n }\n \n+# Return 1 if the target supports hardware vectors of long, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_long { } {\n+    global et_vect_long_saved\n+\n+    if [info exists et_vect_long_saved] {\n+\tverbose \"check_effective_target_vect_long: using cached result\" 2\n+    } else {\n+\tset et_vect_long_saved 0\n+\tif { [istarget i?86-*-*]\n+\t      || [istarget powerpc*-*-*]\n+\t      || [istarget x86_64-*-*]\n+\t      || ([istarget sparc*-*-*] && [check_effective_target_ilp32]) } {\n+\t   set et_vect_long_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_long: returning $et_vect_long_saved\" 2\n+    return $et_vect_long_saved\n+}\n+\n # Return 1 if the target supports hardware vectors of float, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n@@ -473,6 +537,7 @@ proc is-effective-target { arg } {\n \t\"named_sections\" { set selected [check_named_sections_available] }\n \t\"gc_sections\" { set selected [check_gc_sections_available] }\n \t\"vect_int\" { set selected [check_effective_target_vect_int] }\n+\t\"vect_long\" { set selected [check_effective_target_vect_long] }\n \t\"vect_float\" { set selected [check_effective_target_vect_float] }\n \t\"vect_double\" { set selected [check_effective_target_vect_double] }\n \tdefault  { error \"unknown effective target selector `$arg'\" }"}]}