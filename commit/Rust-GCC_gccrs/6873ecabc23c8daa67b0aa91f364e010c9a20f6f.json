{"sha": "6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3M2VjYWJjMjNjOGRhYTY3YjBhYTkxZjM2NGUwMTBjOWEyMGY2Zg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-17T23:05:59Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-04-17T23:05:59Z"}, "message": "lower-subreg.c (resolve_simple_move): If called self-recursive...\n\n\n\t* lower-subreg.c (resolve_simple_move): If called self-recursive,\n\tdo not delete_insn insns that have not yet been emitted, only\n\tunlink them with remove_insn.\n\t* df-scan.c (df_insn_delete): Revert r197492.\n\nFrom-SVN: r198042", "tree": {"sha": "1ddf5fc33caa30e266a0ca4b1ed9eb24854c011c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ddf5fc33caa30e266a0ca4b1ed9eb24854c011c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/comments", "author": null, "committer": null, "parents": [{"sha": "bb52b0b918e2b357f195485db93943f7b212f423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52b0b918e2b357f195485db93943f7b212f423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb52b0b918e2b357f195485db93943f7b212f423"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "104f3170c74fd2ee040a0718b9b91fa5cd2c3d2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "patch": "@@ -1,3 +1,10 @@\n+2013-04-18  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* lower-subreg.c (resolve_simple_move): If called self-recursive,\n+\tdo not delete_insn insns that have not yet been emitted, only\n+\tunlink them with remove_insn.\n+\t* df-scan.c (df_insn_delete): Revert r197492.\n+\n 2013-04-17  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* emit-rtl.c (link_insn_into_chain): Handle chaining of SEQUENCEs."}, {"sha": "3a8e9ca7ec494c265e811f05a4acff15dc915a51", "filename": "gcc/df-scan.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "patch": "@@ -1158,17 +1158,7 @@ df_insn_delete (rtx insn)\n      In any case, we expect BB to be non-NULL at least up to register\n      allocation, so disallow a non-NULL BB up to there.  Not perfect\n      but better than nothing...  */\n-  /* ??? bb can also be NULL if lower-subreg.c:resolve_simple_mov emits\n-     an insn into a sequence and then does delete_insn on it.  Not sure\n-     if that makes sense, but for now it means this assert cannot work.\n-     See PR56738.\n-     Disable for now but revisit before the end of GCC 4.9 stage1.  */\n-#if 0\n   gcc_checking_assert (bb != NULL || reload_completed);\n-#else\n-  if (bb == NULL)\n-    return;\n-#endif\n \n   df_grow_bb_info (df_scan);\n   df_grow_reg_info ();"}, {"sha": "eb22d8c87f577dacac2b52715bd0f911755b7b39", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6873ecabc23c8daa67b0aa91f364e010c9a20f6f/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=6873ecabc23c8daa67b0aa91f364e010c9a20f6f", "patch": "@@ -1069,7 +1069,13 @@ resolve_simple_move (rtx set, rtx insn)\n \n   emit_insn_before (insns, insn);\n \n-  delete_insn (insn);\n+  /* If we get here via self-recutsion, then INSN is not yet in the insns\n+     chain and delete_insn will fail.  We only want to remove INSN from the\n+     current sequence.  See PR56738.  */\n+  if (in_sequence_p ())\n+    remove_insn (insn);\n+  else\n+    delete_insn (insn);\n \n   return insns;\n }"}]}