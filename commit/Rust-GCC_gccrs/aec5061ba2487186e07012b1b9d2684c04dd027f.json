{"sha": "aec5061ba2487186e07012b1b9d2684c04dd027f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjNTA2MWJhMjQ4NzE4NmUwNzAxMmIxYjlkMjY4NGMwNGRkMDI3Zg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-06-20T01:04:58Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-06-20T01:04:58Z"}, "message": "Imported version 5.1.\n\n2000-06-20  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\tImported version 5.1.\n\t* acinclude.m4: Push version to 5.1.\n\nFrom-SVN: r34610", "tree": {"sha": "75ede5286875b779db37ba8e1ff6003b2dd7494f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ede5286875b779db37ba8e1ff6003b2dd7494f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec5061ba2487186e07012b1b9d2684c04dd027f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec5061ba2487186e07012b1b9d2684c04dd027f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec5061ba2487186e07012b1b9d2684c04dd027f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec5061ba2487186e07012b1b9d2684c04dd027f/comments", "author": null, "committer": null, "parents": [{"sha": "aac350aaf9e77a205b5e852d2982df46fb54dbc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac350aaf9e77a205b5e852d2982df46fb54dbc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac350aaf9e77a205b5e852d2982df46fb54dbc8"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "de895eb1dd1b926a0776bf24ec4105c6e0538bd7", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -1,3 +1,8 @@\n+2000-06-20  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tImported version 5.1.\n+\t* acinclude.m4: Push version to 5.1.\n+\n 2000-06-19  Andrew Haley  <aph@cygnus.com>\n \n         * os_dep.c (read): Pass two dummy args to syscall()."}, {"sha": "7e333dbcf105102287b5a8506fab3da5910a980e", "filename": "boehm-gc/README", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FREADME?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -15,7 +15,7 @@ Permission to modify the code and to distribute modified code is granted,\n provided the above notices are retained, and a notice that the code was\n modified is included with the above copyright notice.\n \n-This is version 5.0 of a conservative garbage collector for C and C++.\n+This is version 5.1 of a conservative garbage collector for C and C++.\n \n You might find a more recent version of this at\n \n@@ -1611,6 +1611,18 @@ Since 5.0alpha7:\n    This caused occasional failures under Windows 98, and may also be\n    an issue under Windows NT/2000.\n \n+Since 5.0\n+ - Fixed a gc.h header bug which showed up under Irix.  (Thanks to\n+   Dan Sullivan.)\n+ - Fixed a typo in GC_double_descr in typd_mlc.c not getting traced correctly.\n+   This probably could result in objects described by array descriptors not\n+   getting traced correctly.  (Thanks to Ben Hutchings for pointing this out.)\n+ - The block nearly full tests in reclaim.c were not correct for 64 bit\n+   environments.  This could result in unnecessary heap growth under unlikely\n+   conditions.\n+ - Removed use of CLEAR_DOUBLE from generic reclaim code, since odd sizes\n+   could occur.\n+\n To do:\n  - Integrate Linux/SPARC fixes.\n  - Very large root set sizes (> 16 MB or so) could cause the collector"}, {"sha": "6491f99414374de9fe7fb5f7144185702387e9a2", "filename": "boehm-gc/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Facinclude.m4?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -31,7 +31,7 @@ AC_SUBST(boehm_gc_basedir)\n \n AC_CANONICAL_HOST\n \n-AM_INIT_AUTOMAKE(boehm-gc, 5.0, no-define)\n+AM_INIT_AUTOMAKE(boehm-gc, 5.1, no-define)\n \n # FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n # copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We"}, {"sha": "a0f394fd55f94aff48b016efebc04ca56599a403", "filename": "boehm-gc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Faclocal.m4?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -43,7 +43,7 @@ AC_SUBST(boehm_gc_basedir)\n \n AC_CANONICAL_HOST\n \n-AM_INIT_AUTOMAKE(boehm-gc, 5.0, no-define)\n+AM_INIT_AUTOMAKE(boehm-gc, 5.1, no-define)\n \n # FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n # copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We"}, {"sha": "d7cd8996085bff60fa60408aff0662f7e054b821", "filename": "boehm-gc/gc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Fgc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Fgc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc.h?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -372,8 +372,7 @@ GC_API GC_PTR GC_malloc_atomic_ignore_off_page GC_PROTO((size_t lb));\n \n #ifdef GC_ADD_CALLER\n #  define GC_EXTRAS GC_RETURN_ADDR, __FILE__, __LINE__\n-#  define GC_EXTRA_PARAMS GC_word ra, GC_CONST char * s,\n-\t\t          int i\n+#  define GC_EXTRA_PARAMS GC_word ra, GC_CONST char * s, int i\n #else\n #  define GC_EXTRAS __FILE__, __LINE__\n #  define GC_EXTRA_PARAMS GC_CONST char * s, int i"}, {"sha": "4ace1107d62c2b2bbf7cf248c26387ebf5d83c15", "filename": "boehm-gc/reclaim.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Freclaim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Freclaim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Freclaim.c?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -236,18 +236,9 @@ register word sz;\n \t\t/* Clear object, advance p to next object in the process */\n \t\t    q = p + sz;\n                     p++; /* Skip link field */\n-#\t\t    if defined(SMALL_CONFIG) && defined(ALIGN_DOUBLE)\n-\t\t      /* We assert that sz must be even\t*/\n-\t\t      *p++ = 0;\n-\t\t      while (p < q) {\n-\t\t\tCLEAR_DOUBLE(p);\n-\t\t\tp += 2;\n-\t\t      }\n-#\t\t    else\n-                      while (p < q) {\n+                    while (p < q) {\n \t\t\t*p++ = 0;\n-\t\t      }\n-#\t\t    endif\n+\t\t    }\n \t    }\n \t    word_no += sz;\n \t}\n@@ -604,20 +595,32 @@ int report_if_found;\t\t/* Abort if a reclaimable object is found */\n       switch(sz) {\n #      ifndef SMALL_CONFIG\n         case 1:\n-\t    full = GC_block_nearly_full1(hhdr, 0xffffffffl);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0xffffffffffffffffl);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0xffffffffl);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n \t    /* In the DONT_KNOW case, we let reclaim fault.\t*/\n             *flh = GC_reclaim1(hbp, hhdr, *flh);\n             break;\n         case 2:\n-\t    full = GC_block_nearly_full1(hhdr, 0x55555555l);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0x5555555555555555l);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0x55555555l);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n             *flh = GC_reclaim_clear2(hbp, hhdr, *flh);\n             break;\n         case 4:\n-\t    full = GC_block_nearly_full1(hhdr, 0x11111111l);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0x1111111111111111l);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0x11111111l);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n             *flh = GC_reclaim_clear4(hbp, hhdr, *flh);\n@@ -634,19 +637,31 @@ int report_if_found;\t\t/* Abort if a reclaimable object is found */\n       switch(sz) {\n #      ifndef SMALL_CONFIG\n         case 1:\n-\t    full = GC_block_nearly_full1(hhdr, 0xffffffffl);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0xffffffffffffffffl);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0xffffffffl);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n             *flh = GC_reclaim1(hbp, hhdr, *flh);\n             break;\n         case 2:\n-\t    full = GC_block_nearly_full1(hhdr, 0x55555555l);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0x5555555555555555l);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0x55555555l);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n             *flh = GC_reclaim_uninit2(hbp, hhdr, *flh);\n             break;\n         case 4:\n-\t    full = GC_block_nearly_full1(hhdr, 0x11111111l);\n+#           if CPP_WORDSZ == 64\n+\t      full = GC_block_nearly_full1(hhdr, 0x1111111111111111l);\n+#\t    else\n+\t      full = GC_block_nearly_full1(hhdr, 0x11111111l);\n+#\t    endif\n \t    if (TRUE == full) goto out;\n \t    if (FALSE == full) GC_write_hint(hbp);\n             *flh = GC_reclaim_uninit4(hbp, hhdr, *flh);"}, {"sha": "a198f6c154d13eaf5fa38317edb12152347a3583", "filename": "boehm-gc/typd_mlc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Ftypd_mlc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Ftypd_mlc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ftypd_mlc.c?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -175,7 +175,7 @@ GC_descr GC_double_descr(descriptor, nwords)\n register GC_descr descriptor;\n register word nwords;\n {\n-    if (descriptor && DS_TAGS == DS_LENGTH) {\n+    if (descriptor & DS_TAGS == DS_LENGTH) {\n         descriptor = GC_bm_table[BYTES_TO_WORDS((word)descriptor)];\n     };\n     descriptor |= (descriptor & ~DS_TAGS) >> nwords;"}, {"sha": "04787d85be3dc7e205307941f7b91a70d9d8b5eb", "filename": "boehm-gc/version.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec5061ba2487186e07012b1b9d2684c04dd027f/boehm-gc%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fversion.h?ref=aec5061ba2487186e07012b1b9d2684c04dd027f", "patch": "@@ -1,5 +1,5 @@\n #define GC_VERSION_MAJOR 5\n-#define GC_VERSION_MINOR 0\n+#define GC_VERSION_MINOR 1\n #define GC_ALPHA_VERSION GC_NOT_ALPHA\n \n #   define GC_NOT_ALPHA 0xff"}]}