{"sha": "5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxM2EwNGUwZGNiNmU2YzA3NzA4ZGM2Nzk2OTY4ZWU4OWI0NTYwYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-18T08:33:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:33:44Z"}, "message": "[Ada] Fix spurious alignment warning on simple address clause\n\nThis eliminates a spurious alignment warning given by the compiler on an\naddress clause when the No_Exception_Propagation restriction is in\neffect and the -gnatw.x switch is used. In this configuration the\naddress clauses whose expression is itself of the form X'Address would\nnot be sufficiently analyzed and, therefore, the compiler might give\nfalse positive warnings.\n\n2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.ads (Alignment_Warnings_Record): Add P component.\n\t* checks.adb (Apply_Address_Clause_Check): Be prepared to kill\n\tthe warning also if the clause is of the form X'Address.\n\t(Validate_Alignment_Check_Warning): Kill the warning if the\n\tclause is of the form X'Address and the alignment of X is\n\tcompatible.\n\ngcc/testsuite/\n\n\t* gnat.dg/warn31.adb, gnat.dg/warn31.ads: New testcase.\n\nFrom-SVN: r275865", "tree": {"sha": "dae5541eb31bca41017d94b7d91849322b24bb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae5541eb31bca41017d94b7d91849322b24bb50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/comments", "author": null, "committer": null, "parents": [{"sha": "1784b1eb1f22a802cf7e2f3529fa83a40bce1b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1784b1eb1f22a802cf7e2f3529fa83a40bce1b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1784b1eb1f22a802cf7e2f3529fa83a40bce1b20"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "240bc087a66660dc32a6a872e780bd6b5aa44c14", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -1,3 +1,12 @@\n+2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Alignment_Warnings_Record): Add P component.\n+\t* checks.adb (Apply_Address_Clause_Check): Be prepared to kill\n+\tthe warning also if the clause is of the form X'Address.\n+\t(Validate_Alignment_Check_Warning): Kill the warning if the\n+\tclause is of the form X'Address and the alignment of X is\n+\tcompatible.\n+\n 2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Set_Mixed_Node_Expression): If a conditional"}, {"sha": "9ca1cf0cdce0a993753845a31e3e74c4641e36e0", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -808,7 +808,21 @@ package body Checks is\n \n             if Compile_Time_Known_Value (Expr) then\n                Alignment_Warnings.Append\n-                 ((E => E, A => Expr_Value (Expr), W => Warning_Msg));\n+                 ((E => E,\n+                   A => Expr_Value (Expr),\n+                   P => Empty,\n+                   W => Warning_Msg));\n+\n+            --  Likewise if the expression is of the form X'Address\n+\n+            elsif Nkind (Expr) = N_Attribute_Reference\n+              and then Attribute_Name (Expr) = Name_Address\n+            then\n+               Alignment_Warnings.Append\n+                 ((E => E,\n+                   A => No_Uint,\n+                   P => Prefix (Expr),\n+                   W => Warning_Msg));\n \n             --  Add explanation of the warning generated by the check\n \n@@ -10925,7 +10939,12 @@ package body Checks is\n                     renames Alignment_Warnings.Table (J);\n          begin\n             if Known_Alignment (AWR.E)\n-              and then AWR.A mod Alignment (AWR.E) = 0\n+              and then ((AWR.A /= No_Uint\n+                          and then AWR.A mod Alignment (AWR.E) = 0)\n+                        or else (Present (AWR.P)\n+                                  and then Has_Compatible_Alignment\n+                                             (AWR.E, AWR.P, True) =\n+                                               Known_Compatible))\n             then\n                Delete_Warning_And_Continuations (AWR.W);\n             end if;"}, {"sha": "a1538a3f48fa74df505dadf3ac1ce5740b03302f", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -90,15 +90,15 @@ package Checks is\n    --  When we have address clauses, there is an issue of whether the address\n    --  specified is appropriate to the alignment. In the general case where the\n    --  address is dynamic, we generate a check and a possible warning (this\n-   --  warning occurs for example if we have a restricted run time with the\n+   --  warning occurs for example if we have a restricted runtime with the\n    --  restriction No_Exception_Propagation). We also issue this warning in\n    --  the case where the address is static, but we don't know the alignment\n    --  at the time we process the address clause. In such a case, we issue the\n    --  warning, but we may be able to find out later (after the back end has\n    --  annotated the actual alignment chosen) that the warning was not needed.\n \n    --  To deal with deleting these potentially annoying warnings, we save the\n-   --  warning information in a table, and then delete the waranings in the\n+   --  warning information in a table, and then delete the warnings in the\n    --  post compilation validation stage if we can tell that the check would\n    --  never fail (in general the back end will also optimize away the check\n    --  in such cases).\n@@ -113,6 +113,9 @@ package Checks is\n       --  Compile time known value of address clause for which the alignment\n       --  is to be checked once we know the alignment.\n \n+      P : Node_Id;\n+      --  Prefix of address clause when it is of the form X'Address\n+\n       W : Error_Msg_Id;\n       --  Id of warning message we might delete\n    end record;"}, {"sha": "dc84ed95055ffc019340e37c2e2a51374f862b50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -1,3 +1,7 @@\n+2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/warn31.adb, gnat.dg/warn31.ads: New testcase.\n+\n 2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/fixedpnt8.adb: New testcase."}, {"sha": "136c84f62987a929f5dee21c93002c741de3b7d8", "filename": "gcc/testsuite/gnat.dg/warn31.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.adb?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatw.x -gnatd.a\" }\n+package body Warn31 is\n+    procedure Dummy is null;\n+end Warn31;"}, {"sha": "5311079a69e18e90f4e926db0fb3ba0e4083c1e0", "filename": "gcc/testsuite/gnat.dg/warn31.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c13a04e0dcb6e6c07708dc6796968ee89b4560b/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn31.ads?ref=5c13a04e0dcb6e6c07708dc6796968ee89b4560b", "patch": "@@ -0,0 +1,20 @@\n+pragma Restrictions (No_Exception_Propagation);\n+\n+package Warn31 is\n+\n+   type U16 is mod 2 ** 16;\n+   type U32 is mod 2 ** 32;\n+\n+   type Pair is record\n+      X, Y : U16;\n+   end record;\n+   for Pair'Alignment use U32'Alignment;\n+\n+   Blob : array (1 .. 2) of Pair;\n+\n+   Sum : array (1 .. 2) of U32;\n+   for Sum'Address use Blob'Address;\n+\n+   procedure Dummy;\n+\n+end Warn31;\n\\ No newline at end of file"}]}