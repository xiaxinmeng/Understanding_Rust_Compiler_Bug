{"sha": "0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2N2FmMWNlMzBjZGVlOTI3M2JhYTY1MTY2ZmFiYmNiNmViMDRiOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-12-10T00:20:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-12-10T00:20:16Z"}, "message": "dwarf2out.c (default_eh_frame_section): Delete, moving handling of EH_FRAME_SECTION_NAME into...\n\n\t* dwarf2out.c (default_eh_frame_section): Delete, moving handling\n\tof EH_FRAME_SECTION_NAME into...\n\t(switch_to_eh_frame_section): ...here.  Try to set eh_frame_section\n\tif it is still null.\n\t* except.c (default_exception_section): Delete, moving most\n\tof the code to...\n\t(switch_to_exception_section): ...this new function.  Set\n\texception_section if it is still null, then switch to it.\n\t(output_function_exception_table): Use switch_to_exception_section.\n\t* varasm.c (exception_section, eh_frame_section): Update comments.\n\t(get_section): Hoist use of SECTION_NAMED.\n\t(init_varasm_once): Don't set exception_section and eh_frame_section.\n\t* output.h (default_exception_section): Delete.\n\t(default_eh_frame_section): Delete.\n\ntestsuite/\n\t* gcc.dg/20051207-1.c,\n\t* gcc.dg/20051207-2.c,\n\t* gcc.dg/20051207-3.c: New tests.\n\nFrom-SVN: r108336", "tree": {"sha": "7670fde6cf99d8c4dcfee7a32b97bae2259e7736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7670fde6cf99d8c4dcfee7a32b97bae2259e7736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/comments", "author": null, "committer": null, "parents": [{"sha": "386e0f8c3e02ce5f2e88395c9180f0f1ad1c42fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386e0f8c3e02ce5f2e88395c9180f0f1ad1c42fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386e0f8c3e02ce5f2e88395c9180f0f1ad1c42fd"}], "stats": {"total": 175, "additions": 105, "deletions": 70}, "files": [{"sha": "f62189804717b867a3961f6418ac151fdb6e8606", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -1,3 +1,20 @@\n+2005-12-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* dwarf2out.c (default_eh_frame_section): Delete, moving handling\n+\tof EH_FRAME_SECTION_NAME into...\n+\t(switch_to_eh_frame_section): ...here.  Try to set eh_frame_section\n+\tif it is still null.\n+\t* except.c (default_exception_section): Delete, moving most\n+\tof the code to...\n+\t(switch_to_exception_section): ...this new function.  Set\n+\texception_section if it is still null, then switch to it.\n+\t(output_function_exception_table): Use switch_to_exception_section.\n+\t* varasm.c (exception_section, eh_frame_section): Update comments.\n+\t(get_section): Hoist use of SECTION_NAMED.\n+\t(init_varasm_once): Don't set exception_section and eh_frame_section.\n+\t* output.h (default_exception_section): Delete.\n+\t(default_eh_frame_section): Delete.\n+\n 2005-12-09  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c: Include \"cgraph.h\"."}, {"sha": "0f52184cd6193b132833d1a3e3358d46eceb6044", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -113,42 +113,6 @@ dwarf2out_do_frame (void)\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n #endif\n \n-/* Return the default value of eh_frame_section.  Note that this function\n-   must appear outside the DWARF2_DEBUGGING_INFO || DWARF2_UNWIND_INFO\n-   macro guards.  */\n-\n-section *\n-default_eh_frame_section (void)\n-{\n-#ifdef EH_FRAME_SECTION_NAME\n-  int flags;\n-\n-  if (EH_TABLES_CAN_BE_READ_ONLY)\n-    {\n-      int fde_encoding;\n-      int per_encoding;\n-      int lsda_encoding;\n-\n-      fde_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1, /*global=*/0);\n-      per_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2, /*global=*/1);\n-      lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/0);\n-      flags = (! flag_pic\n-\t       || ((fde_encoding & 0x70) != DW_EH_PE_absptr\n-\t\t   && (fde_encoding & 0x70) != DW_EH_PE_aligned\n-\t\t   && (per_encoding & 0x70) != DW_EH_PE_absptr\n-\t\t   && (per_encoding & 0x70) != DW_EH_PE_aligned\n-\t\t   && (lsda_encoding & 0x70) != DW_EH_PE_absptr\n-\t\t   && (lsda_encoding & 0x70) != DW_EH_PE_aligned))\n-\t      ? 0 : SECTION_WRITE;\n-    }\n-  else\n-    flags = SECTION_WRITE;\n-  return get_section (EH_FRAME_SECTION_NAME, flags, NULL);\n-#else\n-  return NULL;\n-#endif\n-}\n-\n DEF_VEC_P(rtx);\n DEF_VEC_ALLOC_P(rtx,gc);\n \n@@ -1992,10 +1956,44 @@ switch_to_eh_frame_section (void)\n {\n   tree label;\n \n+#ifdef EH_FRAME_SECTION_NAME\n+  if (eh_frame_section == 0)\n+    {\n+      int flags;\n+\n+      if (EH_TABLES_CAN_BE_READ_ONLY)\n+\t{\n+\t  int fde_encoding;\n+\t  int per_encoding;\n+\t  int lsda_encoding;\n+\n+\t  fde_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1,\n+\t\t\t\t\t\t       /*global=*/0);\n+\t  per_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2,\n+\t\t\t\t\t\t       /*global=*/1);\n+\t  lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0,\n+\t\t\t\t\t\t\t/*global=*/0);\n+\t  flags = ((! flag_pic\n+\t\t    || ((fde_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t\t&& (fde_encoding & 0x70) != DW_EH_PE_aligned\n+\t\t\t&& (per_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t\t&& (per_encoding & 0x70) != DW_EH_PE_aligned\n+\t\t\t&& (lsda_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t\t&& (lsda_encoding & 0x70) != DW_EH_PE_aligned))\n+\t\t   ? 0 : SECTION_WRITE);\n+\t}\n+      else\n+\tflags = SECTION_WRITE;\n+      eh_frame_section = get_section (EH_FRAME_SECTION_NAME, flags, NULL);\n+    }\n+#endif\n+\n   if (eh_frame_section)\n     switch_to_section (eh_frame_section);\n   else\n     {\n+      /* We have no special eh_frame section.  Put the information in\n+\t the data section and emit special labels to guide collect2.  */\n       switch_to_section (data_section);\n       label = get_file_function_name ('F');\n       ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));"}, {"sha": "f8aed34c511819be4ab196ad471c702cb7cf126e", "filename": "gcc/except.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -3425,30 +3425,34 @@ sjlj_output_call_site_table (void)\n   call_site_base += n;\n }\n \n-/* Return the default value of exception_section.  */\n+/* Switch to the section that should be used for exception tables.  */\n \n-section *\n-default_exception_section (void)\n+static void\n+switch_to_exception_section (void)\n {\n-  if (targetm.have_named_sections)\n+  if (exception_section == 0)\n     {\n-      int flags;\n-\n-      if (EH_TABLES_CAN_BE_READ_ONLY)\n+      if (targetm.have_named_sections)\n \t{\n-\t  int tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n-\t  \n-\t  flags = (! flag_pic\n-\t\t   || ((tt_format & 0x70) != DW_EH_PE_absptr\n-\t\t       && (tt_format & 0x70) != DW_EH_PE_aligned))\n-\t    ? 0 : SECTION_WRITE;\n+\t  int flags;\n+\n+\t  if (EH_TABLES_CAN_BE_READ_ONLY)\n+\t    {\n+\t      int tt_format =\n+\t\tASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n+\t      flags = ((! flag_pic\n+\t\t\t|| ((tt_format & 0x70) != DW_EH_PE_absptr\n+\t\t\t    && (tt_format & 0x70) != DW_EH_PE_aligned))\n+\t\t       ? 0 : SECTION_WRITE);\n+\t    }\n+\t  else\n+\t    flags = SECTION_WRITE;\n+\t  exception_section = get_section (\".gcc_except_table\", flags, NULL);\n \t}\n       else\n-\tflags = SECTION_WRITE;\n-      return get_section (\".gcc_except_table\", flags, NULL);\n+\texception_section = flag_pic ? data_section : readonly_data_section;\n     }\n-  else\n-    return flag_pic ? data_section : readonly_data_section;\n+  switch_to_section (exception_section);\n }\n \n \n@@ -3530,7 +3534,7 @@ output_function_exception_table (void)\n   /* Note that varasm still thinks we're in the function's code section.\n      The \".endp\" directive that will immediately follow will take us back.  */\n #else\n-  switch_to_section (exception_section);\n+  switch_to_exception_section ();\n #endif\n \n   have_tt_data = (VEC_length (tree, cfun->eh->ttype_data) > 0"}, {"sha": "5ea0faaf8ae9853751e410a417c85581ce3a4fa9", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -384,12 +384,6 @@ extern const char *user_label_prefix;\n /* Default target function prologue and epilogue assembler output.  */\n extern void default_function_pro_epilogue (FILE *, HOST_WIDE_INT);\n \n-/* Return the default value of exception_section.  */\n-extern section *default_exception_section (void);\n-\n-/* Return the default value of eh_frame_section.  */\n-extern section *default_eh_frame_section (void);\n-\n /* Default target hook that outputs nothing to a stream.  */\n extern void no_asm_to_stream (FILE *);\n "}, {"sha": "63ef74e45e37d98bff58e9d06fe395a7d432a267", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -1,3 +1,9 @@\n+2005-12-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.dg/20051207-1.c,\n+\t* gcc.dg/20051207-2.c,\n+\t* gcc.dg/20051207-3.c: New tests.\n+\n 2005-12-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR testsuite/20772"}, {"sha": "326fb0271a0b3f0d1283b127d3ddf1ef951738fd", "filename": "gcc/testsuite/gcc.dg/20051207-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-1.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -0,0 +1,5 @@\n+/* GCC doesn't generate any .eh_frame data for this TU itself, so it\n+   shouldn't warn about \"a\" conflicting with the built-in idea of\n+   .eh_frame, even if it thinks that .eh_frame should be read-only.  */\n+/* { dg-require-named-sections \"\" } */\n+int a __attribute__((section (\".eh_frame\"))) = 1;"}, {"sha": "8a8708794a4c3ff13ae4cc84e8892235111ffdf0", "filename": "gcc/testsuite/gcc.dg/20051207-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-2.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -0,0 +1,5 @@\n+/* GCC doesn't generate any .eh_frame data for this TU itself, so it\n+   shouldn't warn about \"a\" conflicting with the built-in idea of\n+   .eh_frame, even if it thinks that .eh_frame should be read-write.  */\n+/* { dg-require-named-sections \"\" } */\n+const int a __attribute__((section (\".eh_frame\"))) = 1;"}, {"sha": "3d4b2a48c39567a5a0dfcca17578943a4fb47b6a", "filename": "gcc/testsuite/gcc.dg/20051207-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20051207-3.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -0,0 +1,7 @@\n+/* GCC doesn't generate any .eh_frame data for this TU itself, so it\n+   shouldn't warn about \"a\" conflicting with the built-in idea of\n+   .eh_frame.  The warning therefore belongs on the second decl.  */\n+/* { dg-options \"-fno-unit-at-a-time\" } */\n+/* { dg-require-named-sections \"\" } */\n+int a __attribute__((section (\".eh_frame\"))) = 1;\n+const int b __attribute__((section (\".eh_frame\"))) = 1; /* { dg-error \"section type conflict\" } */"}, {"sha": "244d6d8dfc429697648dc6c3d6c7f4eba8fbbdcd", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67af1ce30cdee9273baa65166fabbcb6eb04b8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0f67af1ce30cdee9273baa65166fabbcb6eb04b8", "patch": "@@ -155,12 +155,14 @@ section *sbss_section;\n section *init_section;\n section *fini_section;\n \n-/* The section that holds the main exception table.  */\n+/* The section that holds the main exception table, when known.  The section\n+   is set either by the target's init_sections hook or by the first call to\n+   switch_to_exception_section.  */\n section *exception_section;\n \n-/* The section that holds the DWARF2 frame unwind information.  If it\n-   is null, we will place the unwind information in the data section\n-   and emit special labels to guide collect2.  */\n+/* The section that holds the DWARF2 frame unwind information, when known.\n+   The section is set either by the target's init_sections hook or by the\n+   first call to switch_to_eh_frame_section.  */\n section *eh_frame_section;\n \n /* asm_out_file's current section.  This is NULL if no section has yet\n@@ -230,18 +232,19 @@ get_section (const char *name, unsigned int flags, tree decl)\n   slot = (section **)\n     htab_find_slot_with_hash (section_htab, name,\n \t\t\t      htab_hash_string (name), INSERT);\n+  flags |= SECTION_NAMED;\n   if (*slot == NULL)\n     {\n       sect = ggc_alloc (sizeof (struct named_section));\n-      sect->named.common.flags = flags | SECTION_NAMED;\n+      sect->named.common.flags = flags;\n       sect->named.name = ggc_strdup (name);\n       sect->named.decl = decl;\n       *slot = sect;\n     }\n   else\n     {\n       sect = *slot;\n-      if ((sect->common.flags & ~(SECTION_DECLARED | SECTION_NAMED)) != flags\n+      if ((sect->common.flags & ~SECTION_DECLARED) != flags\n \t  && ((sect->common.flags | flags) & SECTION_OVERRIDE) == 0)\n \t{\n \t  /* Sanity check user variables for flag changes.  */\n@@ -4868,10 +4871,6 @@ init_varasm_once (void)\n \n   if (readonly_data_section == NULL)\n     readonly_data_section = text_section;\n-  if (exception_section == NULL)\n-    exception_section = default_exception_section ();\n-  if (eh_frame_section == NULL)\n-    eh_frame_section = default_eh_frame_section ();\n }\n \n enum tls_model"}]}