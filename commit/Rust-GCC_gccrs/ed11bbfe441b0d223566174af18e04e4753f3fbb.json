{"sha": "ed11bbfe441b0d223566174af18e04e4753f3fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxMWJiZmU0NDFiMGQyMjM1NjYxNzRhZjE4ZTA0ZTQ3NTNmM2ZiYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:48:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:48:46Z"}, "message": "[multiple changes]\n\n2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taskin.ads: Minor code clean up.\n\t(Ada_Task_Control_Block): Move fixed size field before variable sized\n\tones.\n\t* einfo.ads: Minor editing.\n\n2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Aggregate_Accessibility): Apply rule in RM\n\t6.5 (8.3) to verify that access discriminants in an aggregate\n\tin a return statement have the proper accessibility, i.e. do\n\tnot lead to dangling references.\n\n2015-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Add missing\n\ttest on Address_Clause_Overlay_Warnings to the \"constant overlays\n\tvariable\" warning. For the reverse case, also issue a warning if\n\tthe modification is potentially made through the initialization\n\tof the variable.\n\n2015-10-23  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-exetim-posix.adb (Clock): Use the pthread_getcpuclockid\n\tfunction to have access to CPU clocks for tasks other than the\n\tcalling task.\n\nFrom-SVN: r229247", "tree": {"sha": "b69bed28b03d0c1d889700d5c5ee54994f08a04c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69bed28b03d0c1d889700d5c5ee54994f08a04c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed11bbfe441b0d223566174af18e04e4753f3fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed11bbfe441b0d223566174af18e04e4753f3fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed11bbfe441b0d223566174af18e04e4753f3fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed11bbfe441b0d223566174af18e04e4753f3fbb/comments", "author": null, "committer": null, "parents": [{"sha": "bf8f12c2a6b7c557031b431909fc831a6f6d7763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8f12c2a6b7c557031b431909fc831a6f6d7763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8f12c2a6b7c557031b431909fc831a6f6d7763"}], "stats": {"total": 161, "additions": 144, "deletions": 17}, "files": [{"sha": "94904273a64f871af7390361c7c2a9134840f5dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -1,3 +1,31 @@\n+2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taskin.ads: Minor code clean up.\n+\t(Ada_Task_Control_Block): Move fixed size field before variable sized\n+\tones.\n+\t* einfo.ads: Minor editing.\n+\n+2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Aggregate_Accessibility): Apply rule in RM\n+\t6.5 (8.3) to verify that access discriminants in an aggregate\n+\tin a return statement have the proper accessibility, i.e. do\n+\tnot lead to dangling references.\n+\n+2015-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Add missing\n+\ttest on Address_Clause_Overlay_Warnings to the \"constant overlays\n+\tvariable\" warning. For the reverse case, also issue a warning if\n+\tthe modification is potentially made through the initialization\n+\tof the variable.\n+\n+2015-10-23  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-exetim-posix.adb (Clock): Use the pthread_getcpuclockid\n+\tfunction to have access to CPU clocks for tasks other than the\n+\tcalling task.\n+\n 2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* debug.adb: Switch -gnatd.5 is no longer in use, remove the"}, {"sha": "9c7ad57166ee8d6ae4e84bfe8b83c2fd0e6f838c", "filename": "gcc/ada/a-exetim-posix.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fa-exetim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fa-exetim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-posix.adb?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2007-2012, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2007-2015, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,9 @@\n with Ada.Task_Identification;  use Ada.Task_Identification;\n with Ada.Unchecked_Conversion;\n \n-with System.OS_Constants; use System.OS_Constants;\n+with System.Tasking;\n with System.OS_Interface; use System.OS_Interface;\n+with System.Task_Primitives.Operations; use System.Task_Primitives.Operations;\n \n with Interfaces.C; use Interfaces.C;\n \n@@ -97,28 +98,45 @@ package body Ada.Execution_Time is\n      (T : Ada.Task_Identification.Task_Id :=\n         Ada.Task_Identification.Current_Task) return CPU_Time\n    is\n-      TS     : aliased timespec;\n-      Result : Interfaces.C.int;\n+      TS       : aliased timespec;\n+      Clock_Id : aliased Interfaces.C.int;\n+      Result   : Interfaces.C.int;\n \n       function To_CPU_Time is\n         new Ada.Unchecked_Conversion (Duration, CPU_Time);\n       --  Time is equal to Duration (although it is a private type) and\n       --  CPU_Time is equal to Time.\n \n+      function Convert_Ids is new\n+        Ada.Unchecked_Conversion (Task_Id, System.Tasking.Task_Id);\n+\n       function clock_gettime\n         (clock_id : Interfaces.C.int;\n          tp       : access timespec)\n          return int;\n       pragma Import (C, clock_gettime, \"clock_gettime\");\n       --  Function from the POSIX.1b Realtime Extensions library\n \n+      function pthread_getcpuclockid\n+        (tid       : Thread_Id;\n+         clock_id  : access Interfaces.C.int)\n+         return int;\n+      pragma Import (C, pthread_getcpuclockid, \"pthread_getcpuclockid\");\n+      --  Function from the Thread CPU-Time Clocks option\n+\n    begin\n       if T = Ada.Task_Identification.Null_Task_Id then\n          raise Program_Error;\n+      else\n+         --  Get the CPU clock for the task passed as parameter\n+\n+         Result := pthread_getcpuclockid\n+           (Get_Thread_Id (Convert_Ids (T)), Clock_Id'Access);\n+         pragma Assert (Result = 0);\n       end if;\n \n       Result := clock_gettime\n-        (clock_id => CLOCK_THREAD_CPUTIME_ID, tp => TS'Unchecked_Access);\n+        (clock_id => Clock_Id, tp => TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n \n       return To_CPU_Time (To_Duration (TS));"}, {"sha": "201da87738a702510cfbc33eb99a84bfce1db519", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -3945,7 +3945,7 @@ package Einfo is\n \n --    Rewritten_For_C (Flag287)\n --       Defined on functions that return a constrained array type, when\n---       Modify_Tree_For_C is set. indicates that a procedure with an extra\n+--       Modify_Tree_For_C is set. Indicates that a procedure with an extra\n --       out parameter has been created for it, and calls must be rewritten as\n --       calls to the new procedure.\n "}, {"sha": "539d08854fb7e3c9c59d2d42712257fd72952d89", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1135,20 +1135,23 @@ package System.Tasking is\n       --  User-writeable location, for use in debugging tasks; also provides a\n       --  simple task specific data.\n \n+      Free_On_Termination : Boolean := False;\n+      --  Deallocate the ATCB when the task terminates. This flag is normally\n+      --  False, and is set True when Unchecked_Deallocation is called on a\n+      --  non-terminated task so that the associated storage is automatically\n+      --  reclaimed when the task terminates.\n+\n       Attributes : Attribute_Array := (others => 0);\n       --  Task attributes\n \n+      --  IMPORTANT Note: the Entry_Queues field is last for efficiency of\n+      --  access to other fields, do not put new fields after this one.\n+\n       Entry_Queues : Task_Entry_Queue_Array (1 .. Entry_Num);\n       --  An array of task entry queues\n       --\n       --  Protection: Self.L. Once a task has set Self.Stage to Completing, it\n       --  has exclusive access to this field.\n-\n-      Free_On_Termination : Boolean := False;\n-      --  Deallocate the ATCB when the task terminates. This flag is normally\n-      --  False, and is set True when Unchecked_Deallocation is called on a\n-      --  non-terminated task so that the associated storage is automatically\n-      --  reclaimed when the task terminates.\n    end record;\n \n    --------------------"}, {"sha": "d54ef0ffd99a3333c2d994c5da0fe03b6ac3d9ec", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -4728,7 +4728,12 @@ package body Sem_Ch13 is\n                        Make_Raise_Program_Error (Loc,\n                          Reason => PE_Overlaid_Controlled_Object));\n \n-                  elsif Present (O_Ent)\n+                  --  Issue an unconditional warning for a constant overlaying\n+                  --  a variable. For the reverse case, we will issue it only\n+                  --  if the variable is modified, see below.\n+\n+                  elsif Address_Clause_Overlay_Warnings\n+                    and then Present (O_Ent)\n                     and then Ekind (U_Ent) = E_Constant\n                     and then not Is_Constant_Object (O_Ent)\n                   then\n@@ -4859,13 +4864,27 @@ package body Sem_Ch13 is\n \n                      --  If variable overlays a constant view, and we are\n                      --  warning on overlays, then mark the variable as\n-                     --  overlaying a constant (we will give warnings later\n-                     --  if this variable is assigned).\n+                     --  overlaying a constant and warn immediately if it\n+                     --  is initialized. We will give other warnings later\n+                     --  if the variable is assigned.\n \n                      if Is_Constant_Object (O_Ent)\n                        and then Ekind (U_Ent) = E_Variable\n                      then\n-                        Set_Overlays_Constant (U_Ent);\n+                        declare\n+                           Init : constant Node_Id :=\n+                             Expression (Declaration_Node (U_Ent));\n+                        begin\n+                           Set_Overlays_Constant (U_Ent);\n+                           if Present (Init)\n+                             and then Comes_From_Source (Init)\n+                           then\n+                              Error_Msg_Sloc := Sloc (N);\n+                              Error_Msg_NE\n+                                (\"??constant& may be modified via address \"\n+                                 & \"clause#\", Declaration_Node (U_Ent), O_Ent);\n+                           end if;\n+                        end;\n                      end if;\n                   end if;\n                end;"}, {"sha": "af31c9f1a85faf90fc8ceb0e46242a3a6faed571", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed11bbfe441b0d223566174af18e04e4753f3fbb/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ed11bbfe441b0d223566174af18e04e4753f3fbb", "patch": "@@ -619,6 +619,10 @@ package body Sem_Ch6 is\n       R_Type : constant Entity_Id := Etype (Scope_Id);\n       --  Function result subtype\n \n+      procedure Check_Aggregate_Accessibility (Aggr : Node_Id);\n+      --  Apply legality rule of 6.5 (8.2) to the access discriminants of\n+      --  an aggregate in a return statement.\n+\n       procedure Check_Limited_Return (Expr : Node_Id);\n       --  Check the appropriate (Ada 95 or Ada 2005) rules for returning\n       --  limited types. Used only for simple return statements.\n@@ -628,6 +632,57 @@ package body Sem_Ch6 is\n       --  Check that the return_subtype_indication properly matches the result\n       --  subtype of the function, as required by RM-6.5(5.1/2-5.3/2).\n \n+      -----------------------------------\n+      -- Check_Aggregate_Accessibility --\n+      -----------------------------------\n+\n+      procedure Check_Aggregate_Accessibility (Aggr : Node_Id) is\n+         Typ    : constant Entity_Id := Etype (Aggr);\n+         Assoc  : Node_Id;\n+         Discr  : Entity_Id;\n+         Expr   : Node_Id;\n+         Obj    : Node_Id;\n+\n+      begin\n+         if Is_Record_Type (Typ)\n+           and then Has_Discriminants (Typ)\n+         then\n+            Discr := First_Discriminant (Typ);\n+            Assoc := First (Component_Associations (Aggr));\n+            while Present (Discr) loop\n+               if Ekind (Etype (Discr)) = E_Anonymous_Access_Type then\n+                  Expr := Expression (Assoc);\n+                  if Nkind (Expr) = N_Attribute_Reference\n+                    and then Attribute_Name (Expr) /= Name_Unrestricted_Access\n+                  then\n+                     Obj := Prefix (Expr);\n+                     while Nkind_In (Obj,\n+                       N_Selected_Component, N_Indexed_Component)\n+                     loop\n+                        Obj := Prefix (Obj);\n+                     end loop;\n+\n+                     if Is_Entity_Name (Obj)\n+                       and then Is_Formal (Entity (Obj))\n+                     then\n+                        --  A run-time check may be needed ???\n+                        null;\n+\n+                     elsif Object_Access_Level (Obj) >\n+                       Scope_Depth (Scope (Scope_Id))\n+                     then\n+                        Error_Msg_N\n+                           (\"access discriminant in return aggregate \" &\n+                              \"will be a dangling reference\", Obj);\n+                     end if;\n+                  end if;\n+               end if;\n+\n+               Next_Discriminant (Discr);\n+            end loop;\n+         end if;\n+      end Check_Aggregate_Accessibility;\n+\n       --------------------------\n       -- Check_Limited_Return --\n       --------------------------\n@@ -931,6 +986,10 @@ package body Sem_Ch6 is\n \n             Resolve (Expr, R_Type);\n             Check_Limited_Return (Expr);\n+\n+            if Present (Expr) and then Nkind (Expr) = N_Aggregate then\n+               Check_Aggregate_Accessibility (Expr);\n+            end if;\n          end if;\n \n          --  RETURN only allowed in SPARK as the last statement in function"}]}