{"sha": "4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "node_id": "C_kwDOANBUbNoAKDRiZGI5ZDYxOGQzMGZjMzNkN2VhYWIzNzRiYWYzNzdmYTRlOWQ5NTU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T13:52:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:49Z"}, "message": "libstdc++: Enable type traits for wchar_t unconditionally [PR98725]\n\nNone of these traits depend on libc support for wchar_t, so they should\nbe defined unconditionally. The wchar_t type is always defined in C++.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98725\n\t* include/c_global/cstddef [!_GLIBCXX_USE_WCHAR_T]\n\t(__byte_operand<wchar_t>): Define specialization.\n\t* include/std/type_traits (__make_signed<wchar_t>)\n\t(__make_unsigned<wchar_t>): Remove redundant check for\n\t__WCHAR_TYPE__ being defined.\n\t* include/tr1/type_traits [!_GLIBCXX_USE_WCHAR_T]\n\t(__is_integral_helper<wchar_t>): Likewise.", "tree": {"sha": "8eb6d343d487b65fa9671831209b14ced33d60c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb6d343d487b65fa9671831209b14ced33d60c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4997c8b30ecfc82f9e6ce874cbd3840e227522eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4997c8b30ecfc82f9e6ce874cbd3840e227522eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4997c8b30ecfc82f9e6ce874cbd3840e227522eb"}], "stats": {"total": 12, "additions": 1, "deletions": 11}, "files": [{"sha": "a96319e31ef34b8a890df7620111ddc05b89dbbc", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "patch": "@@ -73,9 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> struct __byte_operand<char> { using __type = byte; };\n   template<> struct __byte_operand<signed char> { using __type = byte; };\n   template<> struct __byte_operand<unsigned char> { using __type = byte; };\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct __byte_operand<wchar_t> { using __type = byte; };\n-#endif\n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<> struct __byte_operand<char8_t> { using __type = byte; };\n #endif"}, {"sha": "d3693b1069e5f23aa6db9d84e4670a78e10ba8b9", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "patch": "@@ -309,12 +309,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // We want is_integral<wchar_t> to be true (and make_signed/unsigned to work)\n   // even when libc doesn't provide working <wchar.h> and related functions,\n-  // so check __WCHAR_TYPE__ instead of _GLIBCXX_USE_WCHAR_T.\n-#ifdef __WCHAR_TYPE__\n+  // so don't check _GLIBCXX_USE_WCHAR_T here.\n   template<>\n     struct __is_integral_helper<wchar_t>\n     : public true_type { };\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<>\n@@ -1828,14 +1826,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // neither signed integer types nor unsigned integer types, so must be\n   // transformed to the unsigned integer type with the smallest rank.\n   // Use the partial specialization for enumeration types to do that.\n-#ifdef __WCHAR_TYPE__\n   template<>\n     struct __make_unsigned<wchar_t>\n     {\n       using __type\n \t= typename __make_unsigned_selector<wchar_t, false, true>::__type;\n     };\n-#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   template<>\n@@ -1960,14 +1956,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // signed integer types nor unsigned integer types, so must be\n   // transformed to the signed integer type with the smallest rank.\n   // Use the partial specialization for enumeration types to do that.\n-#if defined(__WCHAR_TYPE__)\n   template<>\n     struct __make_signed<wchar_t>\n     {\n       using __type\n \t= typename __make_signed_selector<wchar_t, false, true>::__type;\n     };\n-#endif\n \n #if defined(_GLIBCXX_USE_CHAR8_T)\n   template<>"}, {"sha": "16d7e338bfefe7811b2ec694aea868c2481bffc6", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdb9d618d30fc33d7eaab374baf377fa4e9d955/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=4bdb9d618d30fc33d7eaab374baf377fa4e9d955", "patch": "@@ -109,9 +109,7 @@ namespace tr1\n   _DEFINE_SPEC(0, __is_integral_helper, char, true)\n   _DEFINE_SPEC(0, __is_integral_helper, signed char, true)\n   _DEFINE_SPEC(0, __is_integral_helper, unsigned char, true)\n-#ifdef _GLIBCXX_USE_WCHAR_T\n   _DEFINE_SPEC(0, __is_integral_helper, wchar_t, true)\n-#endif\n   _DEFINE_SPEC(0, __is_integral_helper, short, true)\n   _DEFINE_SPEC(0, __is_integral_helper, unsigned short, true)\n   _DEFINE_SPEC(0, __is_integral_helper, int, true)"}]}