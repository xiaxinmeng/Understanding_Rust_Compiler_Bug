{"sha": "b4e47472c9f2fb618a5b33517dca11ede3419fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlNDc0NzJjOWYyZmI2MThhNWIzMzUxN2RjYTExZWRlMzQxOWZhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-15T21:47:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-15T21:47:11Z"}, "message": "re PR middle-end/83837 (libgomp.fortran/pointer[12].f90 FAIL)\n\n\tPR middle-end/83837\n\t* omp-expand.c (expand_omp_atomic_pipeline): Use loaded_val\n\ttype rather than type addr's type points to.\n\t(expand_omp_atomic_mutex): Likewise.\n\t(expand_omp_atomic): Likewise.\n\nFrom-SVN: r256710", "tree": {"sha": "d86b57dbe538252844b2631c186c0e09bd4d3dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d86b57dbe538252844b2631c186c0e09bd4d3dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e47472c9f2fb618a5b33517dca11ede3419fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e47472c9f2fb618a5b33517dca11ede3419fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e47472c9f2fb618a5b33517dca11ede3419fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e47472c9f2fb618a5b33517dca11ede3419fa9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "732ed80aa31ea2c92fc5234f758a94b5766bfa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732ed80aa31ea2c92fc5234f758a94b5766bfa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732ed80aa31ea2c92fc5234f758a94b5766bfa16"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "bfaea13b33bbd9cce7272e246de79adf62687c4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e47472c9f2fb618a5b33517dca11ede3419fa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e47472c9f2fb618a5b33517dca11ede3419fa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e47472c9f2fb618a5b33517dca11ede3419fa9", "patch": "@@ -1,3 +1,11 @@\n+2018-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/83837\n+\t* omp-expand.c (expand_omp_atomic_pipeline): Use loaded_val\n+\ttype rather than type addr's type points to.\n+\t(expand_omp_atomic_mutex): Likewise.\n+\t(expand_omp_atomic): Likewise.\n+\n 2018-01-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/83839"}, {"sha": "8690f863404bcbfa233ac584d73597bae402f917", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e47472c9f2fb618a5b33517dca11ede3419fa9/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e47472c9f2fb618a5b33517dca11ede3419fa9/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=b4e47472c9f2fb618a5b33517dca11ede3419fa9", "patch": "@@ -6283,7 +6283,7 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n \t\t\t    int index)\n {\n   tree loadedi, storedi, initial, new_storedi, old_vali;\n-  tree type, itype, cmpxchg, iaddr;\n+  tree type, itype, cmpxchg, iaddr, atype;\n   gimple_stmt_iterator si;\n   basic_block loop_header = single_succ (load_bb);\n   gimple *phi, *stmt;\n@@ -6297,7 +6297,8 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   cmpxchg = builtin_decl_explicit (fncode);\n   if (cmpxchg == NULL_TREE)\n     return false;\n-  type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (addr)));\n+  type = TYPE_MAIN_VARIANT (TREE_TYPE (loaded_val));\n+  atype = type;\n   itype = TREE_TYPE (TREE_TYPE (cmpxchg));\n \n   if (!can_compare_and_swap_p (TYPE_MODE (itype), true)\n@@ -6317,6 +6318,7 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n \n       iaddr = create_tmp_reg (build_pointer_type_for_mode (itype, ptr_mode,\n \t\t\t\t\t\t\t   true));\n+      atype = itype;\n       iaddr_val\n \t= force_gimple_operand_gsi (&si,\n \t\t\t\t    fold_convert (TREE_TYPE (iaddr), addr),\n@@ -6337,13 +6339,17 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   tree loaddecl = builtin_decl_explicit (fncode);\n   if (loaddecl)\n     initial\n-      = fold_convert (TREE_TYPE (TREE_TYPE (iaddr)),\n+      = fold_convert (atype,\n \t\t      build_call_expr (loaddecl, 2, iaddr,\n \t\t\t\t       build_int_cst (NULL_TREE,\n \t\t\t\t\t\t      MEMMODEL_RELAXED)));\n   else\n-    initial = build2 (MEM_REF, TREE_TYPE (TREE_TYPE (iaddr)), iaddr,\n-\t\t      build_int_cst (TREE_TYPE (iaddr), 0));\n+    {\n+      tree off\n+\t= build_int_cst (build_pointer_type_for_mode (atype, ptr_mode,\n+\t\t\t\t\t\t      true), 0);\n+      initial = build2 (MEM_REF, atype, iaddr, off);\n+    }\n \n   initial\n     = force_gimple_operand_gsi (&si, initial, true, NULL_TREE, true,\n@@ -6495,15 +6501,20 @@ expand_omp_atomic_mutex (basic_block load_bb, basic_block store_bb,\n   t = build_call_expr (t, 0);\n   force_gimple_operand_gsi (&si, t, true, NULL_TREE, true, GSI_SAME_STMT);\n \n-  stmt = gimple_build_assign (loaded_val, build_simple_mem_ref (addr));\n+  tree mem = build_simple_mem_ref (addr);\n+  TREE_TYPE (mem) = TREE_TYPE (loaded_val);\n+  TREE_OPERAND (mem, 1)\n+    = fold_convert (build_pointer_type_for_mode (TREE_TYPE (mem), ptr_mode,\n+\t\t\t\t\t\t true),\n+\t\t    TREE_OPERAND (mem, 1));\n+  stmt = gimple_build_assign (loaded_val, mem);\n   gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n   gsi_remove (&si, true);\n \n   si = gsi_last_nondebug_bb (store_bb);\n   gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_ATOMIC_STORE);\n \n-  stmt = gimple_build_assign (build_simple_mem_ref (unshare_expr (addr)),\n-\t\t\t      stored_val);\n+  stmt = gimple_build_assign (unshare_expr (mem), stored_val);\n   gsi_insert_before (&si, stmt, GSI_SAME_STMT);\n \n   t = builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_END);\n@@ -6532,7 +6543,7 @@ expand_omp_atomic (struct omp_region *region)\n   tree loaded_val = gimple_omp_atomic_load_lhs (load);\n   tree addr = gimple_omp_atomic_load_rhs (load);\n   tree stored_val = gimple_omp_atomic_store_val (store);\n-  tree type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (addr)));\n+  tree type = TYPE_MAIN_VARIANT (TREE_TYPE (loaded_val));\n   HOST_WIDE_INT index;\n \n   /* Make sure the type is one of the supported sizes.  */"}]}