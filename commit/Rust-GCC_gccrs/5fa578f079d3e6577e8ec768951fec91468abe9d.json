{"sha": "5fa578f079d3e6577e8ec768951fec91468abe9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhNTc4ZjA3OWQzZTY1NzdlOGVjNzY4OTUxZmVjOTE0NjhhYmU5ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-17T07:02:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-17T07:02:29Z"}, "message": "re PR target/66824 (-miamcu doesn't load FP constant into register directly)\n\n\tPR target/66824\n\t* config/i386/i386.h (TARGET_HARD_SF_REGS): New define.\n\t(TARGET_HARD_DF_REGS): Ditto.\n\t(TARGET_HARD_XF_REGS): Ditto.\n\t* config/i386/i386.md (*movxf_internal): Add alternatives 9 and 10.\n\tEnable alternatives 9 and 10 only for !TARGET_HARD_XF_REG target.\n\t(*movdf_internal): Add alternatives 22, 23, 24 and 25. Enable\n\talternatives 22, 23, 24 and 25 only for !TARGET_HARD_DF_REG target.\n\t(*movsf_internal): Add alternatives 16 and 17. Enable\n\talternatives 16 and 17 only for !TARGET_HARD_SF_REG target.\n\nFrom-SVN: r225919", "tree": {"sha": "b231b337e9ea09ddacf91e264e8ea52a6b958598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b231b337e9ea09ddacf91e264e8ea52a6b958598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa578f079d3e6577e8ec768951fec91468abe9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa578f079d3e6577e8ec768951fec91468abe9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa578f079d3e6577e8ec768951fec91468abe9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa578f079d3e6577e8ec768951fec91468abe9d/comments", "author": null, "committer": null, "parents": [{"sha": "5ba53785f74d9a0bdff4692684f4eba2e3480f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba53785f74d9a0bdff4692684f4eba2e3480f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba53785f74d9a0bdff4692684f4eba2e3480f74"}], "stats": {"total": 108, "additions": 79, "deletions": 29}, "files": [{"sha": "2be9c82e64127165d7e260929d26317d35bf297b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fa578f079d3e6577e8ec768951fec91468abe9d", "patch": "@@ -1,3 +1,16 @@\n+2015-07-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66824\n+\t* config/i386/i386.h (TARGET_HARD_SF_REGS): New define.\n+\t(TARGET_HARD_DF_REGS): Ditto.\n+\t(TARGET_HARD_XF_REGS): Ditto.\n+\t* config/i386/i386.md (*movxf_internal): Add alternatives 9 and 10.\n+\tEnable alternatives 9 and 10 only for !TARGET_HARD_XF_REG target.\n+\t(*movdf_internal): Add alternatives 22, 23, 24 and 25. Enable\n+\talternatives 22, 23, 24 and 25 only for !TARGET_HARD_DF_REG target.\n+\t(*movsf_internal): Add alternatives 16 and 17. Enable\n+\talternatives 16 and 17 only for !TARGET_HARD_SF_REG target.\n+\n 2015-07-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/66891\n@@ -447,29 +460,29 @@\n 2015-07-15  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n \n-        * graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps): Point\n+\t* graphite-sese-to-poly.c (rewrite_cross_bb_scalar_deps): Point\n \titerator to use_stmt.\n \n 2015-07-15  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop <s.pop@samsung.com>\n \n-        * graphite-scop-detection.c (build_scops_1): Discard scops for\n+\t* graphite-scop-detection.c (build_scops_1): Discard scops for\n \twhich entry==exit.\n \n 2015-07-15  Aditya Kumar  <aditya.k7@samsung.com>\n-            Sebastian Pop <s.pop@samsung.com>\n+\t    Sebastian Pop <s.pop@samsung.com>\n \n-        * graphite-scop-detection.c (stmt_simple_for_scop_p): Bail out in\n+\t* graphite-scop-detection.c (stmt_simple_for_scop_p): Bail out in\n \tcase of a return statement in scop.\n \n 2015-07-15  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop <s.pop@samsung.com>\n \n-        * graphite-sese-to-poly.c (parameter_index_in_region): Only handle\n+\t* graphite-sese-to-poly.c (parameter_index_in_region): Only handle\n \tINTEGER_TYPE parameters.\n-        (scan_tree_for_params): Handle REAL_CST, COMPLEX_CST, and\n+\t(scan_tree_for_params): Handle REAL_CST, COMPLEX_CST, and\n \tVECTOR_CST in scan_tree_for_params.\n-        (add_conditions_to_domain): Only constrain on INTEGER_TYPE.\n+\t(add_conditions_to_domain): Only constrain on INTEGER_TYPE.\n \n 2015-07-15  Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "ab668feb9348e07b31ca3b7655a25e6457db47de", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5fa578f079d3e6577e8ec768951fec91468abe9d", "patch": "@@ -524,6 +524,10 @@ extern unsigned char x86_prefetch_sse;\n #define TARGET_MIX_SSE_I387 \\\n  ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))\n \n+#define TARGET_HARD_SF_REGS\t(TARGET_80387 || TARGET_MMX || TARGET_SSE)\n+#define TARGET_HARD_DF_REGS\t(TARGET_80387 || TARGET_SSE)\n+#define TARGET_HARD_XF_REGS\t(TARGET_80387)\n+\n #define TARGET_GNU_TLS\t\t(ix86_tls_dialect == TLS_DIALECT_GNU)\n #define TARGET_GNU2_TLS\t\t(ix86_tls_dialect == TLS_DIALECT_GNU2)\n #define TARGET_ANY_GNU_TLS\t(TARGET_GNU_TLS || TARGET_GNU2_TLS)"}, {"sha": "ea98a3651c621113d1ce5b2306dc3329b4e9327e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa578f079d3e6577e8ec768951fec91468abe9d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5fa578f079d3e6577e8ec768951fec91468abe9d", "patch": "@@ -3087,9 +3087,9 @@\n ;; in alternatives 4, 6, 7 and 8.\n (define_insn \"*movxf_internal\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\"\n-\t \"=f,m,f,?r ,!o,?*r ,!o,!o,!o\")\n+\t \"=f,m,f,?r ,!o,?*r ,!o,!o,!o,r  ,o\")\n \t(match_operand:XF 1 \"general_operand\"\n-\t \"fm,f,G,roF,r , *roF,*r,F ,C\"))]\n+\t \"fm,f,G,roF,r , *roF,*r,F ,C,roF,rF\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3098,7 +3098,8 @@\n \t   && standard_80387_constant_p (operands[1]) > 0\n \t   && !memory_operand (operands[0], XFmode))\n        || (!TARGET_MEMORY_MISMATCH_STALL\n-\t   && memory_operand (operands[0], XFmode)))\"\n+\t   && memory_operand (operands[0], XFmode))\n+       || !TARGET_HARD_XF_REGS)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -3122,12 +3123,12 @@\n \t      ]\n \t      (const_string \"*\")))\n    (set (attr \"type\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8,9,10\")\n \t\t (const_string \"multi\")\n \t      ]\n \t      (const_string \"fmov\")))\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8,9,10\")\n \t\t (if_then_else (match_test \"TARGET_64BIT\")\n \t\t   (const_string \"DI\")\n \t\t   (const_string \"SI\"))\n@@ -3136,14 +3137,24 @@\n    (set (attr \"preferred_for_size\")\n      (cond [(eq_attr \"alternative\" \"3,4\")\n               (symbol_ref \"false\")]\n-           (symbol_ref \"true\")))])\n+           (symbol_ref \"true\")))\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"9,10\")\n+              (if_then_else\n+\t\t(match_test \"TARGET_HARD_XF_REGS\")\n+\t\t(symbol_ref \"false\")\n+\t\t(const_string \"*\"))\n+            (not (match_test \"TARGET_HARD_XF_REGS\"))\n+\t      (symbol_ref \"false\")\n+\t   ]\n+\t   (const_string \"*\")))])\n    \n ;; Possible store forwarding (partial memory) stall in alternatives 4, 6 and 7.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-    \"=Yf*f,m   ,Yf*f,?r ,!o,?*r ,!o,!o,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,Yi\")\n+    \"=Yf*f,m   ,Yf*f,?r ,!o,?*r ,!o,!o,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,Yi,r  ,o ,r  ,m\")\n \t(match_operand:DF 1 \"general_operand\"\n-    \"Yf*fm,Yf*f,G   ,roF,r ,*roF,*r,F ,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,Yj,r\"))]\n+    \"Yf*fm,Yf*f,G   ,roF,r ,*roF,*r,F ,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,Yj,r ,roF,rF,rmF,rC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3155,7 +3166,8 @@\n \t\t   && standard_sse_constant_p (operands[1])))\n \t   && !memory_operand (operands[0], DFmode))\n        || ((TARGET_64BIT || !TARGET_MEMORY_MISMATCH_STALL)\n-\t   && memory_operand (operands[0], DFmode)))\"\n+\t   && memory_operand (operands[0], DFmode))\n+       || !TARGET_HARD_DF_REGS)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -3216,9 +3228,9 @@\n     }\n }\n   [(set (attr \"isa\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,22,23\")\n \t\t (const_string \"nox64\")\n-\t       (eq_attr \"alternative\" \"8,9,10,11,20,21\")\n+\t       (eq_attr \"alternative\" \"8,9,10,11,20,21,24,25\")\n \t\t (const_string \"x64\")\n \t       (eq_attr \"alternative\" \"12,13,14,15\")\n \t\t (const_string \"sse2\")\n@@ -3227,9 +3239,9 @@\n    (set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n-\t       (eq_attr \"alternative\" \"3,4,5,6,7\")\n+\t       (eq_attr \"alternative\" \"3,4,5,6,7,22,23\")\n \t\t (const_string \"multi\")\n-\t       (eq_attr \"alternative\" \"8,9,10,11\")\n+\t       (eq_attr \"alternative\" \"8,9,10,11,24,25\")\n \t\t (const_string \"imov\")\n \t       (eq_attr \"alternative\" \"12,16\")\n \t\t (const_string \"sselog1\")\n@@ -3254,9 +3266,9 @@\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,10\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,10,22,23\")\n \t\t (const_string \"SI\")\n-\t       (eq_attr \"alternative\" \"8,9,11,20,21\")\n+\t       (eq_attr \"alternative\" \"8,9,11,20,21,24,25\")\n \t\t (const_string \"DI\")\n \n \t       /* xorps is one byte shorter for non-AVX targets.  */\n@@ -3320,13 +3332,23 @@\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"3,4\")\n               (symbol_ref \"TARGET_INTEGER_DFMODE_MOVES\")]\n-           (symbol_ref \"true\")))])\n+           (symbol_ref \"true\")))\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"22,23,24,25\")\n+              (if_then_else\n+\t\t(match_test \"TARGET_HARD_DF_REGS\")\n+\t\t(symbol_ref \"false\")\n+\t\t(const_string \"*\"))\n+            (not (match_test \"TARGET_HARD_DF_REGS\"))\n+\t      (symbol_ref \"false\")\n+\t   ]\n+\t   (const_string \"*\")))])\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=Yf*f,m   ,Yf*f,?r ,?m,v,v,v,m,?r,?Yi,!*y,!*y,!m,!r ,!*Ym\")\n+\t  \"=Yf*f,m   ,Yf*f,?r ,?m,v,v,v,m,?r,?Yi,!*y,!*y,!m,!r ,!*Ym,r  ,m\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,v,m,v,Yj,r  ,*y ,m  ,*y,*Yn,r\"))]\n+\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,v,m,v,Yj,r  ,*y ,m  ,*y,*Yn,r   ,rmF,rF\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3336,7 +3358,8 @@\n \t\t&& standard_80387_constant_p (operands[1]) > 0)\n \t       || (TARGET_SSE_MATH\n \t\t   && standard_sse_constant_p (operands[1]))))\n-       || memory_operand (operands[0], SFmode))\"\n+       || memory_operand (operands[0], SFmode)\n+       || !TARGET_HARD_SF_REGS)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -3390,7 +3413,7 @@\n   [(set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n-\t       (eq_attr \"alternative\" \"3,4\")\n+\t       (eq_attr \"alternative\" \"3,4,16,17\")\n \t\t (const_string \"imov\")\n \t       (eq_attr \"alternative\" \"5\")\n \t\t (const_string \"sselog1\")\n@@ -3407,7 +3430,7 @@\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"3,4,9,10,12,13,14,15\")\n+        (cond [(eq_attr \"alternative\" \"3,4,9,10,12,13,14,15,16,17\")\n \t\t (const_string \"SI\")\n \t       (eq_attr \"alternative\" \"11\")\n \t\t (const_string \"DI\")\n@@ -3445,7 +3468,17 @@\n \t\t       ]\n \t\t       (const_string \"SF\"))\n \t      ]\n-\t      (const_string \"SF\")))])\n+\t      (const_string \"SF\")))\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"16,17\")\n+              (if_then_else\n+\t\t(match_test \"TARGET_HARD_SF_REGS\")\n+\t\t(symbol_ref \"false\")\n+\t\t(const_string \"*\"))\n+            (not (match_test \"TARGET_HARD_SF_REGS\"))\n+\t      (symbol_ref \"false\")\n+\t   ]\n+\t   (const_string \"*\")))])\n \n (define_split\n   [(set (match_operand 0 \"any_fp_register_operand\")"}]}