{"sha": "d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4ZDE2YjExZThjOTc0ODRjZGRlZjJkOTcyYjgxZTRiZmJhZGIzZQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-04-17T04:52:39Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-04-17T04:52:39Z"}, "message": "c4x.md (*andqi3_255_clobber,*andqi3_65535_clobber): New logical and patterns using C40 bit-field insert instructions.\n\n\t* config/c4x/c4x.md (*andqi3_255_clobber,*andqi3_65535_clobber):\n\tNew logical and patterns using C40 bit-field insert instructions.\n\t(*lshrqi3_24_clobber,*ashrqi3_24_clobber,*lshrqi3_16_clobber,\n\t*ashrqi3_16_clobber): New shift patterns using C40 bit-field insert\n\tinstructions.\n\nFrom-SVN: r26513", "tree": {"sha": "b2a17cc5b91a1f4dddb6f2cc77621265b7712d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a17cc5b91a1f4dddb6f2cc77621265b7712d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98d16b11e8c97484cddef2d972b81e4bfbadb3e/comments", "author": null, "committer": null, "parents": [{"sha": "920279f23799773df5fe4883fa6236720bfd68fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920279f23799773df5fe4883fa6236720bfd68fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920279f23799773df5fe4883fa6236720bfd68fa"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "525e4b63f1872ee5d43b4e7f3104d035f8a8e0d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98d16b11e8c97484cddef2d972b81e4bfbadb3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98d16b11e8c97484cddef2d972b81e4bfbadb3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "patch": "@@ -1,3 +1,11 @@\n+Sat Apr 17 23:47:24 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (*andqi3_255_clobber,*andqi3_65535_clobber):\n+\tNew logical and patterns using C40 bit-field insert instructions.\n+\t(*lshrqi3_24_clobber,*ashrqi3_24_clobber,*lshrqi3_16_clobber,\n+\t*ashrqi3_16_clobber): New shift patterns using C40 bit-field insert\n+\tinstructions.\n+\t\n 1999-04-16 22:44 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* system.h: Always prototype abort.  Prototype fatal.  Define"}, {"sha": "e7e132400d560ee6ab450f771b2622e4e37c5558", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98d16b11e8c97484cddef2d972b81e4bfbadb3e/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98d16b11e8c97484cddef2d972b81e4bfbadb3e/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=d98d16b11e8c97484cddef2d972b81e4bfbadb3e", "patch": "@@ -1,4 +1,4 @@\n-;; Machine description for the TMS320C[34]x for GNU C compiler\n+];; Machine description for the TMS320C[34]x for GNU C compiler\n ;; Copyright (C) 1994-98, 1999 Free Software Foundation, Inc.\n \n ;; Contributed by Michael Hayes (m.hayes@elec.canterbury.ac.nz)\n@@ -2167,6 +2167,27 @@\n  \"\"\n  \"legitimize_operands (AND, operands, QImode);\")\n \n+\n+(define_insn \"*andqi3_255_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                (const_int 255)))\n+   (clobber (reg:CC 21))]\n+ \"! TARGET_C3X\"\n+ \"lbu0\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n+(define_insn \"*andqi3_65535_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,?c\")\n+        (and:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                (const_int 65535)))\n+   (clobber (reg:CC 21))]\n+ \"! TARGET_C3X\"\n+ \"lhu0\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n (define_insn \"*andqi3_clobber\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=d,?d,d,d,c,?c,c,c\")\n         (and:QI (match_operand:QI 1 \"src_operand\" \"%rR,rS<>,0,0,rR,rS<>,0,0\")\n@@ -2513,6 +2534,47 @@\n   \"\"\n   \"legitimize_operands (LSHIFTRT, operands, QImode);\")\n \n+\n+(define_insn \"*lshrqi3_24_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n+        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                     (const_int 24)))\n+   (clobber (reg:CC 21))]\n+  \"! TARGET_C3X\"\n+  \"lbu3\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n+(define_insn \"*ashrqi3_24_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n+        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                     (const_int 24)))\n+   (clobber (reg:CC 21))]\n+  \"! TARGET_C3X\"\n+  \"lb3\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n+(define_insn \"lshrqi3_16_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n+        (lshiftrt:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                     (const_int 16)))\n+   (clobber (reg:CC 21))]\n+  \"! TARGET_C3X\"\n+  \"lhu1\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n+(define_insn \"*ashrqi3_16_clobber\"\n+  [(set (match_operand:QI 0 \"reg_operand\" \"=d,c\")\n+        (ashiftrt:QI (match_operand:QI 1 \"src_operand\" \"mr,mr\")\n+                     (const_int 16)))\n+   (clobber (reg:CC 21))]\n+  \"! TARGET_C3X\"\n+  \"lh1\\\\t%1,%0\"\n+  [(set_attr \"type\" \"unarycc\")])\n+\n+\n ; When the shift count is greater than the size of the word\n ; the result can be implementation specific\n (define_insn \"*lshrqi3_const_clobber\"\n@@ -2874,9 +2936,11 @@\n   \"*\n    if (INTVAL (operands[2]) == 8)\n      {\n+\t/* 8 bit extract.  */\n        operands[3] = GEN_INT (INTVAL (operands[3]) / 8);\n        return \\\"lbu%3\\\\t%1,%0\\\";\n      }\n+   /* 16 bit extract.  */\n    operands[3] = GEN_INT (INTVAL (operands[3]) / 16);\n    return \\\"lhu%3\\\\t%1,%0\\\";\n   \"\n@@ -2912,14 +2976,17 @@\n   \"*\n    if (INTVAL (operands[1]) == 8)\n      {\n+       /* 8 bit insert.  */\n        operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n        return \\\"mb%2\\\\t%3,%0\\\";\n      }\n    else if (INTVAL (operands[1]) == 16)\n      {\n+       /* 16 bit insert.  */\n        operands[2] = GEN_INT (INTVAL (operands[2]) / 16);\n        return \\\"mh%2\\\\t%3,%0\\\";\n      }\n+   /* 24 bit insert.  */\n    return \\\"lwl1\\\\t%3,%0\\\";\n   \"\n   [(set_attr \"type\" \"binarycc,binary\")\n@@ -2948,7 +3015,7 @@\n   [(set_attr \"type\" \"binarycc\")\n    (set_attr \"data\" \"uint16\")])\n \n-;\n+\n ; TWO OPERAND FLOAT INSTRUCTIONS\n ;\n \n@@ -7034,4 +7101,3 @@\n  \"(REGNO (operands[0]) != REGNO (operands[4]))\"\n  \"xor3\\\\t%2,%1,%0\\\\n||\\\\tsti\\\\t%4,%3\")\n \n-"}]}