{"sha": "58a40e76ebadce78639644cd3d56e42b68336927", "node_id": "C_kwDOANBUbNoAKDU4YTQwZTc2ZWJhZGNlNzg2Mzk2NDRjZDNkNTZlNDJiNjgzMzY5Mjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-29T19:57:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-29T19:57:51Z"}, "message": "libcpp: Ignore CPP_PADDING tokens in _cpp_parse_expr [PR105732]\n\nThe first part of the following testcase (m1-m3 macros and its use)\nregressed with my PR89971 fix, but as the m1,m4-m5 and its use part shows,\nthe problem isn't new, we can emit a CPP_PADDING token to avoid it from\nbeing adjacent to whatever comes after the __VA_OPT__ (in this case there\nis nothing afterwards, true).\n\nIn most cases these CPP_PADDING tokens don't matter, all other\ncallers of cpp_get_token_with_location either ignore CPP_PADDING tokens\ncompletely (e.g. c_lex_with_flags) or they just remember them and\ntake them into account when printing stuff whether there should be\nadded whitespace or not (scan_translation_unit + token_streamer::stream).\nSo, I think we should just ignore CPP_PADDING tokens the same way in\n_cpp_parse_expr.\n\n2022-05-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/105732\n\t* expr.cc (_cpp_parse_expr): Handle CPP_PADDING by just another\n\ttoken.\n\n\t* c-c++-common/cpp/va-opt-10.c: New test.", "tree": {"sha": "4e9302c965b06758d9f1c25b197a1533ca3c7a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9302c965b06758d9f1c25b197a1533ca3c7a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a40e76ebadce78639644cd3d56e42b68336927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a40e76ebadce78639644cd3d56e42b68336927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a40e76ebadce78639644cd3d56e42b68336927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a40e76ebadce78639644cd3d56e42b68336927/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794737976b9a6418eab817f143bb4eb2d0c834d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794737976b9a6418eab817f143bb4eb2d0c834d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794737976b9a6418eab817f143bb4eb2d0c834d2"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "f810b429dd6148536a61d00b0b86d5a343f58a74", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-10.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a40e76ebadce78639644cd3d56e42b68336927/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a40e76ebadce78639644cd3d56e42b68336927/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-10.c?ref=58a40e76ebadce78639644cd3d56e42b68336927", "patch": "@@ -0,0 +1,18 @@\n+/* PR preprocessor/105732 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+#define m1(p1, p2, p3) p3\n+#define m2(p1, ...) 1##__VA_OPT__(foo)\n+#define m3(...) m1(1, 2, m2)\n+#define m4(p1, ...) 1 __VA_OPT__()\n+#define m5(...) m1(1, 2, m4)\n+#if m3(,)(,)\n+#else\n+#error\n+#endif\n+#if m5(,)(,)\n+#else\n+#error\n+#endif"}, {"sha": "a02290471aeb8782ef3a59f6fcb8a6544a1a8932", "filename": "libcpp/expr.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a40e76ebadce78639644cd3d56e42b68336927/libcpp%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a40e76ebadce78639644cd3d56e42b68336927/libcpp%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.cc?ref=58a40e76ebadce78639644cd3d56e42b68336927", "patch": "@@ -1366,6 +1366,10 @@ _cpp_parse_expr (cpp_reader *pfile, bool is_if)\n \t    op.op = CPP_UMINUS;\n \t  break;\n \n+\tcase CPP_PADDING:\n+\t  lex_count--;\n+\t  continue;\n+\n \tdefault:\n \t  if ((int) op.op <= (int) CPP_EQ || (int) op.op >= (int) CPP_PLUS_EQ)\n \t    SYNTAX_ERROR2_AT (op.loc,"}]}