{"sha": "89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllNjRiYzAzMDVmMzZhNGFiZTQ4NmNlMDdjYmVlN2MxM2E2ZGM4MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-15T17:54:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-15T17:54:20Z"}, "message": "Move misplaced assignment in num_sign_bit_copies1\n\nThe old assignment to bitwidth was before we handled VOIDmode with:\n\n      if (mode == VOIDmode)\n        mode = GET_MODE (x);\n\nso when VOIDmode was specified we would always use:\n\n      if (bitwidth < GET_MODE_PRECISION (GET_MODE (x)))\n        {\n          num0 = cached_num_sign_bit_copies (x, GET_MODE (x),\n                                             known_x, known_mode, known_ret);\n          return MAX (1,\n                      num0 - (int) (GET_MODE_PRECISION (GET_MODE (x)) - bitwidth));\n        }\n\nFor a zero bitwidth this always returns 1 (which is the most\npessimistic result).\n\ngcc/\n2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* rtlanal.c (num_sign_bit_copies1): Calculate bitwidth after\n\thandling VOIDmode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242440", "tree": {"sha": "7865fe77f868e75b75fafceb52188b5e90e535e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7865fe77f868e75b75fafceb52188b5e90e535e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e64bc0305f36a4abe486ce07cbee7c13a6dc81/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e4d2ca469ec10fca86fe7e0b3b2a4c9d0371419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4d2ca469ec10fca86fe7e0b3b2a4c9d0371419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4d2ca469ec10fca86fe7e0b3b2a4c9d0371419"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "95e3dc5047c5ea32cca663f0cf32dc0d9bb3d086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e64bc0305f36a4abe486ce07cbee7c13a6dc81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e64bc0305f36a4abe486ce07cbee7c13a6dc81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "patch": "@@ -1,3 +1,10 @@\n+2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* rtlanal.c (num_sign_bit_copies1): Calculate bitwidth after\n+\thandling VOIDmode.\n+\n 2016-11-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* doc/install.texi: Remove references to gcj/libjava."}, {"sha": "e08f2be789b9a7394673216f4c50cc219a31cce8", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e64bc0305f36a4abe486ce07cbee7c13a6dc81/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e64bc0305f36a4abe486ce07cbee7c13a6dc81/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=89e64bc0305f36a4abe486ce07cbee7c13a6dc81", "patch": "@@ -4795,7 +4795,6 @@ num_sign_bit_copies1 (const_rtx x, machine_mode mode, const_rtx known_x,\n \t\t      unsigned int known_ret)\n {\n   enum rtx_code code = GET_CODE (x);\n-  unsigned int bitwidth = GET_MODE_PRECISION (mode);\n   machine_mode inner_mode;\n   int num0, num1, result;\n   unsigned HOST_WIDE_INT nonzero;\n@@ -4811,7 +4810,8 @@ num_sign_bit_copies1 (const_rtx x, machine_mode mode, const_rtx known_x,\n       || VECTOR_MODE_P (GET_MODE (x)) || VECTOR_MODE_P (mode))\n     return 1;\n \n-  /* For a smaller object, just ignore the high bits.  */\n+  /* For a smaller mode, just ignore the high bits.  */\n+  unsigned int bitwidth = GET_MODE_PRECISION (mode);\n   if (bitwidth < GET_MODE_PRECISION (GET_MODE (x)))\n     {\n       num0 = cached_num_sign_bit_copies (x, GET_MODE (x),"}]}