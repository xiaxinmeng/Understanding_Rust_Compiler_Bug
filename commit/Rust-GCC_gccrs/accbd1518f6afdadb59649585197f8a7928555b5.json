{"sha": "accbd1518f6afdadb59649585197f8a7928555b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjYmQxNTE4ZjZhZmRhZGI1OTY0OTU4NTE5N2Y4YTc5Mjg1NTViNQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-06-28T17:04:13Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-06-28T17:04:13Z"}, "message": "arm.c (arm_final_prescan_ins): Eliminate code related to jump_clobbers.\n\n2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n\n        * config/arm/arm.c (arm_final_prescan_ins): Eliminate code\n        related to jump_clobbers.\n        * config/arm/arm.md (conds): Remove jump_clob case.\n        (addsi3_cbranch, addsi3_cbranch_scratch, subsi3_cbranch, two\n        splits): Change comparison_operator to arm_comparison_operator.\n        (*arm_buneq, *arm_bltgt, *arm_buneq_reversed, *arm_bltgt_reversed):\n        Eliminate.\n\nFrom-SVN: r149034", "tree": {"sha": "2e4bcb173178edda010404e31cb884f65a656cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4bcb173178edda010404e31cb884f65a656cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/accbd1518f6afdadb59649585197f8a7928555b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accbd1518f6afdadb59649585197f8a7928555b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accbd1518f6afdadb59649585197f8a7928555b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accbd1518f6afdadb59649585197f8a7928555b5/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45475a3fb2c32ca082c07e633b2ded9ead70177e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45475a3fb2c32ca082c07e633b2ded9ead70177e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45475a3fb2c32ca082c07e633b2ded9ead70177e"}], "stats": {"total": 151, "additions": 24, "deletions": 127}, "files": [{"sha": "db35ccf4bc56e50ace35877466fe30d53a515330", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=accbd1518f6afdadb59649585197f8a7928555b5", "patch": "@@ -1,3 +1,13 @@\n+2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * config/arm/arm.c (arm_final_prescan_ins): Eliminate code\n+        related to jump_clobbers.\n+        * config/arm/arm.md (conds): Remove jump_clob case.\n+        (addsi3_cbranch, addsi3_cbranch_scratch, subsi3_cbranch, two\n+        splits): Change comparison_operator to arm_comparison_operator.\n+        (*arm_buneq, *arm_bltgt, *arm_buneq_reversed, *arm_bltgt_reversed):\n+        Eliminate.\n+\n 2009-06-28  Paolo Bonzini  <bonzini@gnu.org>\n \n         * dojump.c (do_compare_rtx_and_jump): Try swapping the"}, {"sha": "7e8b8a33d332d46822ee97e43b982053af4e4220", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=accbd1518f6afdadb59649585197f8a7928555b5", "patch": "@@ -14487,12 +14487,6 @@ arm_final_prescan_insn (rtx insn)\n      reversed if it appears to fail.  */\n   int reverse = 0;\n \n-  /* JUMP_CLOBBERS will be one implies that the conditions if a branch is\n-     taken are clobbered, even if the rtl suggests otherwise.  It also\n-     means that we have to grub around within the jump expression to find\n-     out what the conditions are when the jump isn't taken.  */\n-  int jump_clobbers = 0;\n-\n   /* If we start with a return insn, we only succeed if we find another one.  */\n   int seeking_return = 0;\n \n@@ -14571,14 +14565,6 @@ arm_final_prescan_insn (rtx insn)\n       int then_not_else = TRUE;\n       rtx this_insn = start_insn, label = 0;\n \n-      /* If the jump cannot be done with one instruction, we cannot\n-\t conditionally execute the instruction in the inverse case.  */\n-      if (get_attr_conds (insn) == CONDS_JUMP_CLOB)\n-\t{\n-\t  jump_clobbers = 1;\n-\t  return;\n-\t}\n-\n       /* Register the insn jumped to.  */\n       if (reverse)\n         {\n@@ -14621,13 +14607,7 @@ arm_final_prescan_insn (rtx insn)\n \t\t control falls in from somewhere else.  */\n \t      if (this_insn == label)\n \t\t{\n-\t\t  if (jump_clobbers)\n-\t\t    {\n-\t\t      arm_ccfsm_state = 2;\n-\t\t      this_insn = next_nonnote_insn (this_insn);\n-\t\t    }\n-\t\t  else\n-\t\t    arm_ccfsm_state = 1;\n+\t\t  arm_ccfsm_state = 1;\n \t\t  succeed = TRUE;\n \t\t}\n \t      else\n@@ -14642,13 +14622,7 @@ arm_final_prescan_insn (rtx insn)\n \t      this_insn = next_nonnote_insn (this_insn);\n \t      if (this_insn && this_insn == label)\n \t\t{\n-\t\t  if (jump_clobbers)\n-\t\t    {\n-\t\t      arm_ccfsm_state = 2;\n-\t\t      this_insn = next_nonnote_insn (this_insn);\n-\t\t    }\n-\t\t  else\n-\t\t    arm_ccfsm_state = 1;\n+\t\t  arm_ccfsm_state = 1;\n \t\t  succeed = TRUE;\n \t\t}\n \t      else\n@@ -14676,13 +14650,7 @@ arm_final_prescan_insn (rtx insn)\n \t      if (this_insn && this_insn == label\n \t\t  && insns_skipped < max_insns_skipped)\n \t\t{\n-\t\t  if (jump_clobbers)\n-\t\t    {\n-\t\t      arm_ccfsm_state = 2;\n-\t\t      this_insn = next_nonnote_insn (this_insn);\n-\t\t    }\n-\t\t  else\n-\t\t    arm_ccfsm_state = 1;\n+\t\t  arm_ccfsm_state = 1;\n \t\t  succeed = TRUE;\n \t\t}\n \t      else\n@@ -14788,25 +14756,11 @@ arm_final_prescan_insn (rtx insn)\n \t        }\n \t      arm_target_insn = this_insn;\n \t    }\n-\t  if (jump_clobbers)\n-\t    {\n-\t      gcc_assert (!reverse);\n-\t      arm_current_cc =\n-\t\t  get_arm_condition_code (XEXP (XEXP (XEXP (SET_SRC (body),\n-\t\t\t\t\t\t\t    0), 0), 1));\n-\t      if (GET_CODE (XEXP (XEXP (SET_SRC (body), 0), 0)) == AND)\n-\t\tarm_current_cc = ARM_INVERSE_CONDITION_CODE (arm_current_cc);\n-\t      if (GET_CODE (XEXP (SET_SRC (body), 0)) == NE)\n-\t\tarm_current_cc = ARM_INVERSE_CONDITION_CODE (arm_current_cc);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* If REVERSE is true, ARM_CURRENT_CC needs to be inverted from\n-\t\t what it was.  */\n-\t      if (!reverse)\n-\t\tarm_current_cc = get_arm_condition_code (XEXP (SET_SRC (body),\n-\t\t\t\t\t\t\t       0));\n-\t    }\n+\n+\t  /* If REVERSE is true, ARM_CURRENT_CC needs to be inverted from\n+\t     what it was.  */\n+\t  if (!reverse)\n+\t    arm_current_cc = get_arm_condition_code (XEXP (SET_SRC (body), 0));\n \n \t  if (reverse || then_not_else)\n \t    arm_current_cc = ARM_INVERSE_CONDITION_CODE (arm_current_cc);"}, {"sha": "0fd0a1982eac8700a73c1ad9c40b7cb4cfb37633", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 73, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accbd1518f6afdadb59649585197f8a7928555b5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=accbd1518f6afdadb59649585197f8a7928555b5", "patch": "@@ -334,15 +334,12 @@\n ; CLOB means that the condition codes are altered in an undefined manner, if\n ;   they are altered at all\n ;\n-; JUMP_CLOB is used when the condition cannot be represented by a single\n-;   instruction (UNEQ and LTGT).  These cannot be predicated.\n-;\n ; UNCONDITIONAL means the instions can not be conditionally executed.\n ;\n ; NOCOND means that the condition codes are neither altered nor affect the\n ;   output of this insn\n \n-(define_attr \"conds\" \"use,set,clob,jump_clob,unconditional,nocond\"\n+(define_attr \"conds\" \"use,set,clob,unconditional,nocond\"\n \t(if_then_else (eq_attr \"type\" \"call\")\n \t (const_string \"clob\")\n \t (if_then_else (eq_attr \"neon_type\" \"none\")\n@@ -7420,7 +7417,7 @@\n (define_insn \"*addsi3_cbranch\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(plus:SI\n \t    (match_operand:SI 2 \"s_register_operand\" \"%l,0,*0,1,1,1\")\n \t    (match_operand:SI 3 \"reg_or_int_operand\" \"lL,IJ,*r,lIJ,lIJ,lIJ\"))\n@@ -7502,7 +7499,7 @@\n (define_insn \"*addsi3_cbranch_scratch\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 3 \"comparison_operator\"\n+\t (match_operator 3 \"arm_comparison_operator\"\n \t  [(plus:SI\n \t    (match_operand:SI 1 \"s_register_operand\" \"%l,l,l,0\")\n \t    (match_operand:SI 2 \"reg_or_int_operand\" \"J,l,L,IJ\"))\n@@ -7570,7 +7567,7 @@\n (define_insn \"*subsi3_cbranch\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 4 \"comparison_operator\"\n+\t (match_operator 4 \"arm_comparison_operator\"\n \t  [(minus:SI\n \t    (match_operand:SI 2 \"s_register_operand\" \"l,l,1,l\")\n \t    (match_operand:SI 3 \"s_register_operand\" \"l,l,l,l\"))\n@@ -7811,38 +7808,6 @@\n ;; Patterns to match conditional branch insns.\n ;;\n \n-; Special pattern to match UNEQ.\n-(define_insn \"*arm_buneq\"\n-  [(set (pc)\n-\t(if_then_else (uneq (match_operand 1 \"cc_register\" \"\") (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n-  \"*\n-  gcc_assert (!arm_ccfsm_state);\n-\n-  return \\\"bvs\\\\t%l0\\;beq\\\\t%l0\\\";\n-  \"\n-  [(set_attr \"conds\" \"jump_clob\")\n-   (set_attr \"length\" \"8\")]\n-)\n-\n-; Special pattern to match LTGT.\n-(define_insn \"*arm_bltgt\"\n-  [(set (pc)\n-\t(if_then_else (ltgt (match_operand 1 \"cc_register\" \"\") (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n-  \"*\n-  gcc_assert (!arm_ccfsm_state);\n-\n-  return \\\"bmi\\\\t%l0\\;bgt\\\\t%l0\\\";\n-  \"\n-  [(set_attr \"conds\" \"jump_clob\")\n-   (set_attr \"length\" \"8\")]\n-)\n-\n (define_insn \"*arm_cond_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"arm_comparison_operator\"\n@@ -7862,38 +7827,6 @@\n    (set_attr \"type\" \"branch\")]\n )\n \n-; Special pattern to match reversed UNEQ.\n-(define_insn \"*arm_buneq_reversed\"\n-  [(set (pc)\n-\t(if_then_else (uneq (match_operand 1 \"cc_register\" \"\") (const_int 0))\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n-  \"*\n-  gcc_assert (!arm_ccfsm_state);\n-\n-  return \\\"bmi\\\\t%l0\\;bgt\\\\t%l0\\\";\n-  \"\n-  [(set_attr \"conds\" \"jump_clob\")\n-   (set_attr \"length\" \"8\")]\n-)\n-\n-; Special pattern to match reversed LTGT.\n-(define_insn \"*arm_bltgt_reversed\"\n-  [(set (pc)\n-\t(if_then_else (ltgt (match_operand 1 \"cc_register\" \"\") (const_int 0))\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n-  \"*\n-  gcc_assert (!arm_ccfsm_state);\n-\n-  return \\\"bvs\\\\t%l0\\;beq\\\\t%l0\\\";\n-  \"\n-  [(set_attr \"conds\" \"jump_clob\")\n-   (set_attr \"length\" \"8\")]\n-)\n-\n (define_insn \"*arm_cond_branch_reversed\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"arm_comparison_operator\"\n@@ -9600,7 +9533,7 @@\n \t(compare:CC_NOOV (ior:SI\n \t\t\t  (and:SI (match_operand:SI 0 \"s_register_operand\" \"\")\n \t\t\t\t  (const_int 1))\n-\t\t\t  (match_operator:SI 1 \"comparison_operator\"\n+\t\t\t  (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t\t   [(match_operand:SI 2 \"s_register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"arm_add_operand\" \"\")]))\n \t\t\t (const_int 0)))\n@@ -9617,7 +9550,7 @@\n (define_split\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (ior:SI\n-\t\t\t  (match_operator:SI 1 \"comparison_operator\"\n+\t\t\t  (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t\t   [(match_operand:SI 2 \"s_register_operand\" \"\")\n \t\t\t    (match_operand:SI 3 \"arm_add_operand\" \"\")])\n \t\t\t  (and:SI (match_operand:SI 0 \"s_register_operand\" \"\")"}]}