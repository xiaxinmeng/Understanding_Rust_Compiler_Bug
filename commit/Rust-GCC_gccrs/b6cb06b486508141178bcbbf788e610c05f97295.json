{"sha": "b6cb06b486508141178bcbbf788e610c05f97295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjYjA2YjQ4NjUwODE0MTE3OGJjYmJmNzg4ZTYxMGMwNWY5NzI5NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-05-27T20:36:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-05-27T20:36:14Z"}, "message": "re PR c++/66270 (ICE: canonical types differ for identical types)\n\n\tPR c++/66270\n\t* tree.c (build_pointer_type_for_mode): Canonical type does not\n\tinherit can_alias_all.\n\t(build_reference_type_for_mode): Likewise.\n\n\tPR c++/66270\n\t* g++.dg/ext/alias-canon3.C: New.\n\nFrom-SVN: r223773", "tree": {"sha": "2d1ddb9c581feb9557b80c8483d01fd02391336a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d1ddb9c581feb9557b80c8483d01fd02391336a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6cb06b486508141178bcbbf788e610c05f97295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6cb06b486508141178bcbbf788e610c05f97295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6cb06b486508141178bcbbf788e610c05f97295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6cb06b486508141178bcbbf788e610c05f97295/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73b4a60f5cac0df12dd2346cf3963d9700e8e205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b4a60f5cac0df12dd2346cf3963d9700e8e205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b4a60f5cac0df12dd2346cf3963d9700e8e205"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "d30eeb775de1adff6930c0665a1d6faa01d8fa76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b6cb06b486508141178bcbbf788e610c05f97295", "patch": "@@ -1,3 +1,10 @@\n+2015-05-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/66270\n+\t* tree.c (build_pointer_type_for_mode): Canonical type does not\n+\tinherit can_alias_all.\n+\t(build_reference_type_for_mode): Likewise.\n+\n 2015-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/66243"}, {"sha": "1923a2f2fba3fb80f8fdcbedd2d237fafcbd8126", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6cb06b486508141178bcbbf788e610c05f97295", "patch": "@@ -1,3 +1,8 @@\n+2015-05-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/66270\n+\t* g++.dg/ext/alias-canon3.C: New.\n+\n 2015-05-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66272"}, {"sha": "22e29e8ad582de8c1c6c6596b8b48005c0acfbea", "filename": "gcc/testsuite/g++.dg/ext/alias-canon3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon3.C?ref=b6cb06b486508141178bcbbf788e610c05f97295", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// PR c++/66270\n+\n+typedef float __m256 __attribute__ (( __vector_size__(32), __may_alias__ ));\n+struct A {\n+  __m256 ymm;\n+  const float &f() const;\n+};\n+\n+const float &A::f() const {\n+  return ymm[1];\n+}"}, {"sha": "ca48c60dd1090b6a2abb1345feb6c46ed231b799", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6cb06b486508141178bcbbf788e610c05f97295/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b6cb06b486508141178bcbbf788e610c05f97295", "patch": "@@ -7719,6 +7719,7 @@ build_pointer_type_for_mode (tree to_type, machine_mode mode,\n \t\t\t     bool can_alias_all)\n {\n   tree t;\n+  bool could_alias = can_alias_all;\n \n   if (to_type == error_mark_node)\n     return error_mark_node;\n@@ -7756,7 +7757,7 @@ build_pointer_type_for_mode (tree to_type, machine_mode mode,\n \n   if (TYPE_STRUCTURAL_EQUALITY_P (to_type))\n     SET_TYPE_STRUCTURAL_EQUALITY (t);\n-  else if (TYPE_CANONICAL (to_type) != to_type)\n+  else if (TYPE_CANONICAL (to_type) != to_type || could_alias)\n     TYPE_CANONICAL (t)\n       = build_pointer_type_for_mode (TYPE_CANONICAL (to_type),\n \t\t\t\t     mode, false);\n@@ -7786,6 +7787,7 @@ build_reference_type_for_mode (tree to_type, machine_mode mode,\n \t\t\t       bool can_alias_all)\n {\n   tree t;\n+  bool could_alias = can_alias_all;\n \n   if (to_type == error_mark_node)\n     return error_mark_node;\n@@ -7823,7 +7825,7 @@ build_reference_type_for_mode (tree to_type, machine_mode mode,\n \n   if (TYPE_STRUCTURAL_EQUALITY_P (to_type))\n     SET_TYPE_STRUCTURAL_EQUALITY (t);\n-  else if (TYPE_CANONICAL (to_type) != to_type)\n+  else if (TYPE_CANONICAL (to_type) != to_type || could_alias)\n     TYPE_CANONICAL (t)\n       = build_reference_type_for_mode (TYPE_CANONICAL (to_type),\n \t\t\t\t       mode, false);"}]}