{"sha": "16397eff06ff427844ae00e28a448a2694cbec65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzOTdlZmYwNmZmNDI3ODQ0YWUwMGUyOGE0NDhhMjY5NGNiZWM2NQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-07-04T13:30:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:30:10Z"}, "message": "sem_res.adb (Resolve_Actuals): Do not resolve the expression of an actual that is a view conversion of a bit...\n\n2005-07-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): Do not resolve the expression of an\n\tactual that is a view conversion of a bit packed array reference.\n\nFrom-SVN: r101590", "tree": {"sha": "655ca951f7529c8fecb9f9428aa9935691fbe842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655ca951f7529c8fecb9f9428aa9935691fbe842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16397eff06ff427844ae00e28a448a2694cbec65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16397eff06ff427844ae00e28a448a2694cbec65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16397eff06ff427844ae00e28a448a2694cbec65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16397eff06ff427844ae00e28a448a2694cbec65/comments", "author": null, "committer": null, "parents": [{"sha": "c2bf339e6b769c71653b255148ae8386b19c229c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bf339e6b769c71653b255148ae8386b19c229c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2bf339e6b769c71653b255148ae8386b19c229c"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "c8cbcf2379f635989178ccae328a2fd63f5da26c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16397eff06ff427844ae00e28a448a2694cbec65/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16397eff06ff427844ae00e28a448a2694cbec65/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=16397eff06ff427844ae00e28a448a2694cbec65", "patch": "@@ -2582,12 +2582,15 @@ package body Sem_Res is\n             --  If the formal is Out or In_Out, do not resolve and expand the\n             --  conversion, because it is subsequently expanded into explicit\n             --  temporaries and assignments. However, the object of the\n-            --  conversion can be resolved. An exception is the case of\n-            --  a tagged type conversion with a class-wide actual. In that\n-            --  case we want the tag check to occur and no temporary will\n-            --  will be needed (no representation change can occur) and\n-            --  the parameter is passed by reference, so we go ahead and\n-            --  resolve the type conversion.\n+            --  conversion can be resolved. An exception is the case of a\n+            --  tagged type conversion with a class-wide actual. In that case\n+            --  we want the tag check to occur and no temporary will be needed\n+            --  (no representation change can occur) and the parameter is\n+            --  passed by reference, so we go ahead and resolve the type\n+            --  conversion. Another excpetion is the case of reference to a\n+            --  component or subcomponent of a bit-packed array, in which case\n+            --  we want to defer expansion to the point the in and out\n+            --  assignments are performed.\n \n             if Ekind (F) /= E_In_Parameter\n               and then Nkind (A) = N_Type_Conversion\n@@ -2628,8 +2631,9 @@ package body Sem_Res is\n                   end if;\n                end if;\n \n-               if Conversion_OK (A)\n-                 or else Valid_Conversion (A, Etype (A), Expression (A))\n+               if (Conversion_OK (A)\n+                     or else Valid_Conversion (A, Etype (A), Expression (A)))\n+                 and then not Is_Ref_To_Bit_Packed_Array (Expression (A))\n                then\n                   Resolve (Expression (A));\n                end if;"}]}