{"sha": "6338536c1e438e49c67271708d45b95306506cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzODUzNmMxZTQzOGU0OWM2NzI3MTcwOGQ0NWI5NTMwNjUwNmNmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-04-12T19:10:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-04-12T19:10:58Z"}, "message": "re PR c++/65736 (ICE (in process_init_constructor_array, at cp/typeck2.c:1263))\n\n\tPR c++/65736\n\t* constexpr.c (cxx_eval_pointer_plus_expression): Don't fold for VLAs,\n\tdon't fold if op01 isn't divisible by TYPE_SIZE_UNIT.  Convert\n\tthe expression to the original type at the end.\n\n\t* g++.dg/cpp0x/pr65736.C: New test.\n\nFrom-SVN: r222022", "tree": {"sha": "a98d933aa30f555ca23fa7b9fe11b58553b4fcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98d933aa30f555ca23fa7b9fe11b58553b4fcb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6338536c1e438e49c67271708d45b95306506cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6338536c1e438e49c67271708d45b95306506cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6338536c1e438e49c67271708d45b95306506cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6338536c1e438e49c67271708d45b95306506cfd/comments", "author": null, "committer": null, "parents": [{"sha": "b8d6284e3a998ac0985943e590c8aff10cd77a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d6284e3a998ac0985943e590c8aff10cd77a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d6284e3a998ac0985943e590c8aff10cd77a99"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "aa9349aafbd097342e4ee9c963622c2f8df1eca3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6338536c1e438e49c67271708d45b95306506cfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6338536c1e438e49c67271708d45b95306506cfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6338536c1e438e49c67271708d45b95306506cfd", "patch": "@@ -2,7 +2,7 @@\n \n \t* doc/contrib.texi (Contributors): Add Maxim Kuvyrkov.\n \n-2015-04-11 Jan Hubicka  <hubicka@ucw.cz>\n+2015-04-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65743\n \t* ipa-inline-transform.c (speculation_removed): Remove static var.\n@@ -12,8 +12,8 @@\n \t* ipa-prop.c (ipa_make_edge_direct_to_target): Do not\n \tconsider non-invariants.\n \n-2015-04-11 Jan Hubicka  <hubicka@ucw.cz>\n-\t   Martin Liska  <mliska@suse.cz>\n+2015-04-11  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/65722\n \t* ipa-icf.c (sem_item::compare_cgraph_references): function and"}, {"sha": "e5a6ae2ea5f3edf5117850e5ab67b694a9b198cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6338536c1e438e49c67271708d45b95306506cfd", "patch": "@@ -1,3 +1,10 @@\n+2015-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/65736\n+\t* constexpr.c (cxx_eval_pointer_plus_expression): Don't fold for VLAs,\n+\tdon't fold if op01 isn't divisible by TYPE_SIZE_UNIT.  Convert\n+\tthe expression to the original type at the end.\n+\n 2015-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/65690"}, {"sha": "2952cbe1c592a2d136f33f16b58a8b4257b0739b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=6338536c1e438e49c67271708d45b95306506cfd", "patch": "@@ -2929,6 +2929,7 @@ cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t  bool lval, bool *non_constant_p,\n \t\t\t\t  bool *overflow_p)\n {\n+  tree orig_type = TREE_TYPE (t);\n   tree op00 = TREE_OPERAND (t, 0);\n   tree op01 = TREE_OPERAND (t, 1);\n   location_t loc = EXPR_LOCATION (t);\n@@ -2945,23 +2946,31 @@ cxx_eval_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n   /* &A[i] p+ j => &A[i + j] */\n   if (TREE_CODE (op00) == ARRAY_REF\n       && TREE_CODE (TREE_OPERAND (op00, 1)) == INTEGER_CST\n-      && TREE_CODE (op01) == INTEGER_CST)\n+      && TREE_CODE (op01) == INTEGER_CST\n+      && TYPE_SIZE_UNIT (TREE_TYPE (op00))\n+      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (op00))) == INTEGER_CST)\n     {\n       tree type = TREE_TYPE (op00);\n       t = fold_convert_loc (loc, ssizetype, TREE_OPERAND (op00, 1));\n       tree nelts = array_type_nelts_top (TREE_TYPE (TREE_OPERAND (op00, 0)));\n       /* Don't fold an out-of-bound access.  */\n       if (!tree_int_cst_le (t, nelts))\n \treturn NULL_TREE;\n+      op01 = cp_fold_convert (ssizetype, op01);\n+      /* Don't fold if op01 can't be divided exactly by TYPE_SIZE_UNIT.\n+\t constexpr int A[1]; ... (char *)&A[0] + 1 */\n+      if (!integer_zerop (fold_build2_loc (loc, TRUNC_MOD_EXPR, sizetype,\n+\t\t\t\t\t   op01, TYPE_SIZE_UNIT (type))))\n+\treturn NULL_TREE;\n       /* Make sure to treat the second operand of POINTER_PLUS_EXPR\n \t as signed.  */\n-      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype,\n-\t\t\t      cp_fold_convert (ssizetype, op01),\n+      op01 = fold_build2_loc (loc, EXACT_DIV_EXPR, ssizetype, op01,\n \t\t\t      TYPE_SIZE_UNIT (type));\n       t = size_binop_loc (loc, PLUS_EXPR, op01, t);\n       t = build4_loc (loc, ARRAY_REF, type, TREE_OPERAND (op00, 0),\n \t\t      t, NULL_TREE, NULL_TREE);\n       t = cp_build_addr_expr (t, tf_warning_or_error);\n+      t = cp_fold_convert (orig_type, t);\n       return cxx_eval_constant_expression (ctx, t, lval, non_constant_p,\n \t\t\t\t\t   overflow_p);\n     }"}, {"sha": "ea6b3a487fe39875cc0b6cb3672f948081ee02fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6338536c1e438e49c67271708d45b95306506cfd", "patch": "@@ -1,5 +1,10 @@\n-2015-04-11 Jan Hubicka  <hubicka@ucw.cz>\n-\t   Martin Liska  <mliska@suse.cz>\n+2015-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/65736\n+\t* g++.dg/cpp0x/pr65736.C: New test.\n+\n+2015-04-11  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/65722\n \t* g++.dg/ipa/pr65722.C: New testcase."}, {"sha": "6e9c7fb990c1ea4b424e30013bee5a04a03dbcbc", "filename": "gcc/testsuite/g++.dg/cpp0x/pr65736.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65736.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6338536c1e438e49c67271708d45b95306506cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65736.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr65736.C?ref=6338536c1e438e49c67271708d45b95306506cfd", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/65736\n+// { dg-do compile { target c++11 } }\n+\n+int a[1];                                                                                                                                 \n+char *b[1] { (char *)&a[0] + 1 };"}]}