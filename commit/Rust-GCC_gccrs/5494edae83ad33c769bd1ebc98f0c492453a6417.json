{"sha": "5494edae83ad33c769bd1ebc98f0c492453a6417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5NGVkYWU4M2FkMzNjNzY5YmQxZWJjOThmMGM0OTI0NTNhNjQxNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T18:32:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-26T18:32:30Z"}, "message": "libstdc++: Use correct argument type for __use_alloc [PR 96803]\n\nThe _Tuple_impl constructor for allocator-extended construction from a\ndifferent tuple type uses the _Tuple_impl's own _Head type in the\n__use_alloc test. That is incorrect, because the argument tuple could\nhave a different type. Using the wrong type might select the\nleading-allocator convention when it should use the trailing-allocator\nconvention, or vice versa.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96803\n\t* include/std/tuple\n\t(_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):\n\tReplace parameter pack with a type parameter and a pack and pass\n\tthe first type to __use_alloc.\n\t* testsuite/20_util/tuple/cons/96803.cc: New test.", "tree": {"sha": "7eea5a73704c5afb870a066d9a5852b3b6b869cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eea5a73704c5afb870a066d9a5852b3b6b869cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5494edae83ad33c769bd1ebc98f0c492453a6417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5494edae83ad33c769bd1ebc98f0c492453a6417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5494edae83ad33c769bd1ebc98f0c492453a6417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5494edae83ad33c769bd1ebc98f0c492453a6417/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5df67ffcf421b8c532513a655a37839e632710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5df67ffcf421b8c532513a655a37839e632710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5df67ffcf421b8c532513a655a37839e632710"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "7be9943e34a0ef21cdca203f5ce1a705f35d2b7f", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5494edae83ad33c769bd1ebc98f0c492453a6417/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5494edae83ad33c769bd1ebc98f0c492453a6417/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=5494edae83ad33c769bd1ebc98f0c492453a6417", "patch": "@@ -338,14 +338,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n \t        std::forward<_Head>(_M_head(__in))) { }\n \n-      template<typename _Alloc, typename... _UElements>\n+      template<typename _Alloc, typename _UHead, typename... _UTails>\n \t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n-\t            const _Tuple_impl<_Idx, _UElements...>& __in)\n+\t\t    const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)\n \t: _Inherited(__tag, __a,\n-\t\t     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),\n-\t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n-\t\t_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n+\t\t     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),\n+\t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n+\t\t_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)) { }\n \n       template<typename _Alloc, typename _UHead, typename... _UTails>\n \t_GLIBCXX20_CONSTEXPR"}, {"sha": "9d3c07d55b27d11b63713f20c4c0a4ebd50c09e1", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/96803.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5494edae83ad33c769bd1ebc98f0c492453a6417/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5494edae83ad33c769bd1ebc98f0c492453a6417/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc?ref=5494edae83ad33c769bd1ebc98f0c492453a6417", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <tuple>\n+#include <memory>\n+\n+struct X\n+{\n+  using allocator_type = std::allocator<int>;\n+\n+  X(X&&) { }\n+  X(std::allocator_arg_t, const allocator_type&, X&&) { }\n+\n+  explicit X(int) { }\n+  explicit X(int, allocator_type) { }\n+};\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/96803\n+  // std::tuple chooses wrong constructor for uses-allocator construction\n+  std::tuple<int> o;\n+  std::tuple<X> nok(std::allocator_arg, std::allocator<int>(), o);\n+}"}]}