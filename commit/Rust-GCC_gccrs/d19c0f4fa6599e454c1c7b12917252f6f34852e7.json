{"sha": "d19c0f4fa6599e454c1c7b12917252f6f34852e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5YzBmNGZhNjU5OWU0NTRjMWM3YjEyOTE3MjUyZjZmMzQ4NTJlNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-11-26T12:25:50Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-11-26T12:25:50Z"}, "message": "re PR fortran/29892 (substring out of bounds: Missing variable name for variables with parameter attribute)\n\n\tPR fortran/29892\n\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Use a locus in\n\tthe call to gfc_trans_runtime_check.\n\t* trans-array.c (gfc_trans_array_bound_check): Try harder to find\n\tthe variable or function name for the runtime error message.\n\t(gfc_trans_dummy_array_bias): Use a locus in the call to\n\tgfc_trans_runtime_check\n\nFrom-SVN: r119223", "tree": {"sha": "dd60c2c6bad2e014d025f178a2f49f119786e154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd60c2c6bad2e014d025f178a2f49f119786e154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19c0f4fa6599e454c1c7b12917252f6f34852e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19c0f4fa6599e454c1c7b12917252f6f34852e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19c0f4fa6599e454c1c7b12917252f6f34852e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19c0f4fa6599e454c1c7b12917252f6f34852e7/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dedcfe16a380a72d92cb164f229c64a5e97d312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dedcfe16a380a72d92cb164f229c64a5e97d312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dedcfe16a380a72d92cb164f229c64a5e97d312"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "4c8a2ecda68294ce0e395122a73db7991a2287b8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d19c0f4fa6599e454c1c7b12917252f6f34852e7", "patch": "@@ -1,3 +1,13 @@\n+2006-11-26  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/29892\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Use a locus in\n+\tthe call to gfc_trans_runtime_check.\n+\t* trans-array.c (gfc_trans_array_bound_check): Try harder to find\n+\tthe variable or function name for the runtime error message.\n+\t(gfc_trans_dummy_array_bias): Use a locus in the call to\n+\tgfc_trans_runtime_check\n+\n 2006-11-26  Andrew Pinski  <pinskia@gmail.com>\n \n \t* trans-decl.c (gfc_build_intrinsic_function_decls): Mark the"}, {"sha": "991fa1c18ea916c5b39c61f706012cf3f150a2f9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d19c0f4fa6599e454c1c7b12917252f6f34852e7", "patch": "@@ -1849,18 +1849,47 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n   tree fault;\n   tree tmp;\n   char *msg;\n+  const char * name = NULL;\n \n   if (!flag_bounds_check)\n     return index;\n \n   index = gfc_evaluate_now (index, &se->pre);\n \n+  /* We find a name for the error message.  */\n+  if (se->ss)\n+    name = se->ss->expr->symtree->name;\n+\n+  if (!name && se->loop && se->loop->ss && se->loop->ss->expr\n+      && se->loop->ss->expr->symtree)\n+    name = se->loop->ss->expr->symtree->name;\n+\n+  if (!name && se->loop && se->loop->ss && se->loop->ss->loop_chain\n+      && se->loop->ss->loop_chain->expr\n+      && se->loop->ss->loop_chain->expr->symtree)\n+    name = se->loop->ss->loop_chain->expr->symtree->name;\n+\n+  if (!name && se->loop && se->loop->ss && se->loop->ss->loop_chain\n+      && se->loop->ss->loop_chain->expr->symtree)\n+    name = se->loop->ss->loop_chain->expr->symtree->name;\n+\n+  if (!name && se->loop && se->loop->ss && se->loop->ss->expr)\n+    {\n+      if (se->loop->ss->expr->expr_type == EXPR_FUNCTION\n+\t  && se->loop->ss->expr->value.function.name)\n+\tname = se->loop->ss->expr->value.function.name;\n+      else\n+\tif (se->loop->ss->type == GFC_SS_CONSTRUCTOR\n+\t    || se->loop->ss->type == GFC_SS_SCALAR)\n+\t  name = \"unnamed constant\";\n+    }\n+\n   /* Check lower bound.  */\n   tmp = gfc_conv_array_lbound (descriptor, n);\n   fault = fold_build2 (LT_EXPR, boolean_type_node, index, tmp);\n-  if (se->ss)\n+  if (name)\n     asprintf (&msg, \"%s for array '%s', lower bound of dimension %d exceeded\",\n-\t      gfc_msg_fault, se->ss->expr->symtree->name, n+1);\n+\t      gfc_msg_fault, name, n+1);\n   else\n     asprintf (&msg, \"%s, lower bound of dimension %d exceeded\",\n \t      gfc_msg_fault, n+1);\n@@ -1870,9 +1899,9 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n   /* Check upper bound.  */\n   tmp = gfc_conv_array_ubound (descriptor, n);\n   fault = fold_build2 (GT_EXPR, boolean_type_node, index, tmp);\n-  if (se->ss)\n+  if (name)\n     asprintf (&msg, \"%s for array '%s', upper bound of dimension %d exceeded\",\n-\t      gfc_msg_fault, se->ss->expr->symtree->name, n+1);\n+\t      gfc_msg_fault, name, n+1);\n   else\n     asprintf (&msg, \"%s, upper bound of dimension %d exceeded\",\n \t      gfc_msg_fault, n+1);\n@@ -3904,7 +3933,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n               tmp = fold_build2 (NE_EXPR, gfc_array_index_type, tmp, stride2);\n \t      asprintf (&msg, \"%s for dimension %d of array '%s'\",\n \t\t\tgfc_msg_bounds, n+1, sym->name);\n-\t      gfc_trans_runtime_check (tmp, msg, &block, NULL);\n+\t      gfc_trans_runtime_check (tmp, msg, &block, &loc);\n \t      gfc_free (msg);\n \t    }\n \t}"}, {"sha": "d284931bca557bfb65afc3d1ca88ad1390aa1625", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19c0f4fa6599e454c1c7b12917252f6f34852e7/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d19c0f4fa6599e454c1c7b12917252f6f34852e7", "patch": "@@ -779,7 +779,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n           tmp = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (TREE_TYPE (desc))];\n           tmp = fold_build2 (GE_EXPR, boolean_type_node, bound, tmp);\n           cond = fold_build2 (TRUTH_ORIF_EXPR, boolean_type_node, cond, tmp);\n-          gfc_trans_runtime_check (cond, gfc_msg_fault, &se->pre, NULL);\n+          gfc_trans_runtime_check (cond, gfc_msg_fault, &se->pre, &expr->where);\n         }\n     }\n "}]}