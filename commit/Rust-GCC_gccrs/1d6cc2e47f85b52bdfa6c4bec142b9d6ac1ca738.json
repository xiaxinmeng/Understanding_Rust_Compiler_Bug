{"sha": "1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2Y2MyZTQ3Zjg1YjUyYmRmYTZjNGJlYzE0MmI5ZDZhYzFjYTczOA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-07-08T15:04:54Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-07-08T15:04:54Z"}, "message": "re PR target/66334 (cleanup block fails to initialize EBX)\n\n2015-07-08  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR middle-end/66334\n\t* ira-lives.c (process_bb_node_lives): Make conflicts with PIC\n\thard regno live at the start of BB with incoming abnormal edges.\n\t* lra-lives.c (process_bb_lives): Ditto.\n\n2015-07-08  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR middle-end/66334\n\t* gcc.target/i386/pr66334.c: New.\n\nFrom-SVN: r225561", "tree": {"sha": "4f395a3ca90492ec25149e62c9b15f37dd24b130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f395a3ca90492ec25149e62c9b15f37dd24b130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a92defdab79a1268f4b9dcf42b937e4002a4cf15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92defdab79a1268f4b9dcf42b937e4002a4cf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92defdab79a1268f4b9dcf42b937e4002a4cf15"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "9d19711adf6d3a481e9929238f1e1a6ef923c5cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "patch": "@@ -1,3 +1,10 @@\n+2015-07-08  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/66334\n+\t* ira-lives.c (process_bb_node_lives): Make conflicts with PIC\n+\thard regno live at the start of BB with incoming abnormal edges.\n+\t* lra-lives.c (process_bb_lives): Ditto.\n+\n 2015-07-08  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR libgomp/65099"}, {"sha": "44f0cbf74ffab5e8fbb8851e3a8d1b773fb9e260", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "patch": "@@ -1344,7 +1344,21 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t     allocate such regs in this case.  */\n \t  if (!cfun->has_nonlocal_label && bb_has_abnormal_call_pred (bb))\n \t    for (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n-\t      if (call_used_regs[px])\n+\t      if (call_used_regs[px]\n+#ifdef REAL_PIC_OFFSET_TABLE_REGNUM\n+\t\t  /* We should create a conflict of PIC pseudo with\n+\t\t     PIC hard reg as PIC hard reg can have a wrong\n+\t\t     value after jump described by the abnormal edge.\n+\t\t     In this case we can not allocate PIC hard reg to\n+\t\t     PIC pseudo as PIC pseudo will also have a wrong\n+\t\t     value.  This code is not critical as LRA can fix\n+\t\t     it but it is better to have the right allocation\n+\t\t     earlier.  */\n+\t\t  || (px == REAL_PIC_OFFSET_TABLE_REGNUM\n+\t\t      && pic_offset_table_rtx != NULL_RTX\n+\t\t      && REGNO (pic_offset_table_rtx) >= FIRST_PSEUDO_REGISTER)\n+#endif\n+\t\t  )\n \t\tmake_hard_regno_born (px);\n \t}\n "}, {"sha": "edf4a91028e3a1250cd49c11a0f860a504b885a9", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "patch": "@@ -953,7 +953,18 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \t allocate such regs in this case.  */\n       if (!cfun->has_nonlocal_label && bb_has_abnormal_call_pred (bb))\n \tfor (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n-\t  if (call_used_regs[px])\n+\t  if (call_used_regs[px]\n+#ifdef REAL_PIC_OFFSET_TABLE_REGNUM\n+\t      /* We should create a conflict of PIC pseudo with PIC\n+\t\t hard reg as PIC hard reg can have a wrong value after\n+\t\t jump described by the abnormal edge.  In this case we\n+\t\t can not allocate PIC hard reg to PIC pseudo as PIC\n+\t\t pseudo will also have a wrong value.  */\n+\t      || (px == REAL_PIC_OFFSET_TABLE_REGNUM\n+\t\t  && pic_offset_table_rtx != NULL_RTX\n+\t\t  && REGNO (pic_offset_table_rtx) >= FIRST_PSEUDO_REGISTER)\n+#endif\n+\t      )\n \t    make_hard_regno_born (px, false);\n     }\n "}, {"sha": "b288f0d7490949047e471d827c9bc3a8e18d8ef4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "patch": "@@ -1,3 +1,8 @@\n+2015-07-08  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/66334\n+\t* gcc.target/i386/pr66334.c: New.\n+\n 2015-07-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-error-gcc_jit_block_end_with_switch-NULL-case.c: Fix"}, {"sha": "97dfecc8725cd6695d5b4aaa6aac45261e4e1c38", "filename": "gcc/testsuite/gcc.target/i386/pr66334.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66334.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66334.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66334.c?ref=1d6cc2e47f85b52bdfa6c4bec142b9d6ac1ca738", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2 -fpic -fexceptions -fasynchronous-unwind-tables\" } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\].+, %ebx\" } } */\n+extern int foo (int);\n+extern void exit (int __status) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));\n+struct __pthread_cleanup_frame\n+{\n+  void (*__cancel_routine) (void *);\n+  void *__cancel_arg;\n+  int __do_it;\n+  int __cancel_type;\n+};\n+extern __inline void\n+__pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)\n+{\n+  if (__frame->__do_it)\n+    __frame->__cancel_routine (__frame->__cancel_arg);\n+}\n+static int cl_called;\n+\n+static void\n+cl (void *arg)\n+{\n+  ++cl_called;\n+}\n+\n+\n+void *\n+tf_usleep (void *arg)\n+{\n+\n+  do { struct __pthread_cleanup_frame __clframe __attribute__ ((__cleanup__ (__pthread_cleanup_routine))) = { .__cancel_routine = (cl), .__cancel_arg = (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ((void *)0)), .__do_it = 1 };;\n+\n+    foo (arg == ((void *)0) ? (0x7fffffffL * 2UL + 1UL) : 0);\n+\n+    __clframe.__do_it = (0); } while (0);\n+\n+  exit (1);\n+}"}]}