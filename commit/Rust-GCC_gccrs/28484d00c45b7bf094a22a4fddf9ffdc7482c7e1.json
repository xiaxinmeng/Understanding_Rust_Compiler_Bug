{"sha": "28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0ODRkMDBjNDViN2JmMDk0YTIyYTRmZGRmOWZmZGM3NDgyYzdlMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-26T18:44:49Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-26T18:46:26Z"}, "message": "i386: Autovectorize 4-byte vectors\n\n2021-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386.c (ix86_autovectorize_vector_modes):\n\tAdd V4QImode and V16QImode for TARGET_SSE2.\n\t* doc/sourcebuild.texi (Vector-specific attributes):\n\tAdd vect64 and vect32 description.\n\ngcc/testsuite/\n\n\t* lib/target-supports.exp (check_effective_target_vect32): New.\n\t(available_vector_sizes): Append 32 for x86 targets.\n\t* gcc.dg/vect/pr71264.c (dg-final): Xfail scan dump for vect32 targets.\n\t* gcc.dg/vect/slp-28.c (dg-final): Adjust dumps for vect32 targets.\n\t* gcc.dg/vect/slp-3.c (dg-final): Ditto.\n\n\t* gcc.target/i386/pr100637-3b.c: New test.\n\t* gcc.target/i386/pr100637-3w.c: Ditto.\n\t* gcc.target/i386/pr100637-4b.c: Ditto.\n\t* gcc.target/i386/pr100637-4w.c: Ditto.", "tree": {"sha": "7004265233600a5c10b51e27431d7a5e03b21c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7004265233600a5c10b51e27431d7a5e03b21c00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a49a045b92f982f5617c3bbde97a33157237e25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49a045b92f982f5617c3bbde97a33157237e25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49a045b92f982f5617c3bbde97a33157237e25b"}], "stats": {"total": 214, "additions": 205, "deletions": 9}, "files": [{"sha": "04649b4212219b1f0df99173f111ead11547e332", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -22190,12 +22190,15 @@ ix86_autovectorize_vector_modes (vector_modes *modes, bool all)\n       modes->safe_push (V16QImode);\n       modes->safe_push (V32QImode);\n     }\n-  else if (TARGET_MMX_WITH_SSE)\n+  else if (TARGET_SSE2)\n     modes->safe_push (V16QImode);\n \n   if (TARGET_MMX_WITH_SSE)\n     modes->safe_push (V8QImode);\n \n+  if (TARGET_SSE2)\n+    modes->safe_push (V4QImode);\n+\n   return 0;\n }\n "}, {"sha": "16c6a3b8e9956e7ed5ea0766c2bd738d2a112cd4", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -1740,6 +1740,12 @@ circumstances.\n @item vect_variable_length\n Target has variable-length vectors.\n \n+@item vect64\n+Target supports vectors of 64 bits.\n+\n+@item vect32\n+Target supports vectors of 32 bits.\n+\n @item vect_widen_sum_hi_to_si\n Target supports a vector widening summation of @code{short} operands\n into @code{int} results, or can promote (unpack) from @code{short}"}, {"sha": "1381e0ed132ce28ce43aef18be6619ae499aac86", "filename": "gcc/testsuite/gcc.dg/vect/pr71264.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71264.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -19,5 +19,4 @@ void test(uint8_t *ptr, uint8_t *mask)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" { xfail s390*-*-* sparc*-*-* } } } */\n-\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" { xfail { { s390*-*-* sparc*-*-* } || vect32 } } } } */"}, {"sha": "0bb5f0eb0e40307558dc3ab826d583ea004891cd", "filename": "gcc/testsuite/gcc.dg/vect/slp-28.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-28.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -88,6 +88,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! vect32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect32 } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { ! vect32 } } } } */\n   "}, {"sha": "80ded1840ad297f0f282866d89d8a3d8f17f6fad", "filename": "gcc/testsuite/gcc.dg/vect/slp-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -141,8 +141,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { ! vect_partial_vectors } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_partial_vectors } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { target { ! vect_partial_vectors } } } }*/\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target vect_partial_vectors } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { ! { vect_partial_vectors || vect32 } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target { vect_partial_vectors || vect32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { target { ! { vect_partial_vectors || vect32 } } } } }*/\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target { vect_partial_vectors || vect32 } } } } */\n   "}, {"sha": "16df70059a94432baa5266a589440526de8b10fa", "filename": "gcc/testsuite/gcc.target/i386/pr100637-3b.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3b.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -0,0 +1,56 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+\n+char r[4], a[4], b[4];\n+unsigned char ur[4], ua[4], ub[4];\n+\n+void maxs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = a[i] > b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxsb\" } } */\n+\n+void maxu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ur[i] = ua[i] > ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxub\" } } */\n+\n+void mins (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = a[i] < b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminsb\" } } */\n+\n+void minu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    ur[i] = ua[i] < ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminub\" } } */\n+\n+void _abs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    r[i] = a[i] < 0 ? -a[i] : a[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pabsb\" } } */"}, {"sha": "7f1882e7a562b2132f54112beef942421504457a", "filename": "gcc/testsuite/gcc.target/i386/pr100637-3w.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -0,0 +1,86 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+\n+short r[2], a[2], b[2];\n+unsigned short ur[2], ua[2], ub[2];\n+\n+void mulh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = ((int) a[i] * b[i]) >> 16;\n+}\n+\n+/* { dg-final { scan-assembler \"pmulhw\" { xfail *-*-* } } } */\n+\n+void mulhu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = ((unsigned int) ua[i] * ub[i]) >> 16;\n+}\n+\n+/* { dg-final { scan-assembler \"pmulhuw\" { xfail *-*-* } } } */\n+\n+void mulhrs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = ((((int) a[i] * b[i]) >> 14) + 1) >> 1;\n+}\n+\n+/* { dg-final { scan-assembler \"pmulhrsw\" } } */\n+\n+void maxs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] > b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxsw\" } } */\n+\n+void maxu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = ua[i] > ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pmaxuw\" } } */\n+\n+void mins (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] < b[i] ? a[i] : b[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminsw\" } } */\n+\n+void minu (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    ur[i] = ua[i] < ub[i] ? ua[i] : ub[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pminuw\" } } */\n+\n+void _abs (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = a[i] < 0 ? -a[i] : a[i];\n+}\n+\n+/* { dg-final { scan-assembler \"pabsw\" } } */"}, {"sha": "198e3dd3352558d4db03a52c02bd1f0959876cf5", "filename": "gcc/testsuite/gcc.target/i386/pr100637-4b.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4b.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+typedef char T;\n+\n+#define M 4\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtb\" } } */"}, {"sha": "0f5dacce9069a7b08889639634edcc16935392f0", "filename": "gcc/testsuite/gcc.target/i386/pr100637-4w.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-4w.c?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/100637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse2\" } */\n+\n+typedef short T;\n+\n+#define M 2\n+\n+extern T a[M], b[M], s1[M], s2[M], r[M];\n+\n+void foo (void)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    r[j] = (a[j] < b[j]) ? s1[j] : s2[j];\n+}\n+\n+/* { dg-final { scan-assembler \"pcmpgtw\" { xfail *-*-* } } } */"}, {"sha": "7f78c5593ac4394fa5ca058e41517d7e7c98bd06", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28484d00c45b7bf094a22a4fddf9ffdc7482c7e1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=28484d00c45b7bf094a22a4fddf9ffdc7482c7e1", "patch": "@@ -7626,6 +7626,7 @@ proc available_vector_sizes { } {\n \tif { ![is-effective-target ia32] } {\n \t    lappend result 64\n \t}\n+\tlappend result 32\n     } elseif { [istarget sparc*-*-*] } {\n \tlappend result 64\n     } elseif { [istarget amdgcn*-*-*] } {\n@@ -7655,6 +7656,12 @@ proc check_effective_target_vect64 { } {\n     return [expr { [lsearch -exact [available_vector_sizes] 64] >= 0 }]\n }\n \n+# Return 1 if the target supports vectors of 32 bits.\n+\n+proc check_effective_target_vect32 { } {\n+    return [expr { [lsearch -exact [available_vector_sizes] 32] >= 0 }]\n+}\n+\n # Return 1 if the target supports vector copysignf calls.\n \n proc check_effective_target_vect_call_copysignf { } {"}]}