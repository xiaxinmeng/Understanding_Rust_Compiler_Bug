{"sha": "f8ca792302bcc455bf7d45f807d71a9f06c4add8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjYTc5MjMwMmJjYzQ1NWJmN2Q0NWY4MDdkNzFhOWYwNmM0YWRkOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-10-29T19:41:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-29T19:41:35Z"}, "message": "re PR target/8322 (SSE2 intrinsics broken?)\n\n\t* i386.h (CONST_DOUBLE_OK_FOR_LETTER_P): Remove 'H'\n\t* i386.md (movsf*, movdf*): Use 'C' instead of 'H'\n\t* md.texi (machine dependent constraints): Document 'C'\n\n\t* simplify-rtx.c (simplify_subreg): Fix const_int->vector subregging.\n\n\t* i386.c (ix86_expand_vector_move): Fix.\n\n\t* i386.c (ix86_expand_builtin): Use sse2_maskmovdqu_rex64.\n\t* i386.md (sse2_maskmovdqu_rex64): New pattern\n\n\tPR target/8322\n\t* xmmintrin.h (_mm_stream_pi, _mm_stream_pd): Fix cast.\n\t(ix86_init_mmx_sse_builtins): Fix type.\n\nFrom-SVN: r58631", "tree": {"sha": "27d4c59c3c7ead9c8d08aff4d7458e55a6343fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d4c59c3c7ead9c8d08aff4d7458e55a6343fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ca792302bcc455bf7d45f807d71a9f06c4add8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ca792302bcc455bf7d45f807d71a9f06c4add8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ca792302bcc455bf7d45f807d71a9f06c4add8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ca792302bcc455bf7d45f807d71a9f06c4add8/comments", "author": null, "committer": null, "parents": [{"sha": "c95d07f893f510c270e214445f628e20173d62f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95d07f893f510c270e214445f628e20173d62f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95d07f893f510c270e214445f628e20173d62f1"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "7c7837fe89dec3591ac44d877dd7dc34ac9d6eb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -1,3 +1,20 @@\n+Tue Oct 29 19:32:16 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (CONST_DOUBLE_OK_FOR_LETTER_P): Remove 'H'\n+\t* i386.md (movsf*, movdf*): Use 'C' instead of 'H'\n+\t* md.texi (machine dependent constraints): Document 'C'\n+\n+\t* simplify-rtx.c (simplify_subreg): Fix const_int->vector subregging.\n+\n+\t* i386.c (ix86_expand_vector_move): Fix.\n+\n+\t* i386.c (ix86_expand_builtin): Use sse2_maskmovdqu_rex64.\n+\t* i386.md (sse2_maskmovdqu_rex64): New pattern\n+\n+\tPR target/8322\n+\t* xmmintrin.h (_mm_stream_pi, _mm_stream_pd): Fix cast.\n+\t(ix86_init_mmx_sse_builtins): Fix type.\n+\n 2002-10-29  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* gthr-posix.h: Include <unistd.h> for feature tests."}, {"sha": "7145e9299f29ca5e2e596bfa6fa97f25a1c4652f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -7799,14 +7799,10 @@ ix86_expand_vector_move (mode, operands)\n   if ((reload_in_progress | reload_completed) == 0\n       && register_operand (operands[0], mode)\n       && CONSTANT_P (operands[1]))\n-    {\n-      rtx addr = gen_reg_rtx (Pmode);\n-      emit_move_insn (addr, XEXP (force_const_mem (mode, operands[1]), 0));\n-      operands[1] = gen_rtx_MEM (mode, addr);\n-    }\n+    operands[1] = force_const_mem (mode, operands[1]);\n \n   /* Make operand1 a register if it isn't already.  */\n-  if ((reload_in_progress | reload_completed) == 0\n+  if (!no_new_pseudos\n       && !register_operand (operands[0], mode)\n       && !register_operand (operands[1], mode))\n     {\n@@ -12287,10 +12283,10 @@ ix86_init_mmx_sse_builtins ()\n   /* @@@ the type is bogus */\n   tree v4sf_ftype_v4sf_pv2si\n     = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4SF_type_node, pv2di_type_node, NULL_TREE);\n+\t\t\t\tV4SF_type_node, pv2si_type_node, NULL_TREE);\n   tree void_ftype_pv2si_v4sf\n     = build_function_type_list (void_type_node,\n-\t\t\t\tpv2di_type_node, V4SF_type_node, NULL_TREE);\n+\t\t\t\tpv2si_type_node, V4SF_type_node, NULL_TREE);\n   tree void_ftype_pfloat_v4sf\n     = build_function_type_list (void_type_node,\n \t\t\t\tpfloat_type_node, V4SF_type_node, NULL_TREE);\n@@ -13145,7 +13141,8 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n     case IX86_BUILTIN_MASKMOVDQU:\n       icode = (fcode == IX86_BUILTIN_MASKMOVQ\n \t       ? (TARGET_64BIT ? CODE_FOR_mmx_maskmovq_rex : CODE_FOR_mmx_maskmovq)\n-\t       : CODE_FOR_sse2_maskmovdqu);\n+\t       : (TARGET_64BIT ? CODE_FOR_sse2_maskmovdqu_rex64\n+\t\t  : CODE_FOR_sse2_maskmovdqu));\n       /* Note the arg order is different from the operand order.  */\n       arg1 = TREE_VALUE (arglist);\n       arg2 = TREE_VALUE (TREE_CHAIN (arglist));"}, {"sha": "87add77f18c262e4ba631c0eb351e5b09340a28f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -1411,7 +1411,7 @@ enum reg_class\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n   ((C) == 'G' ? standard_80387_constant_p (VALUE) \\\n-   : ((C) == 'H' ? standard_sse_constant_p (VALUE) : 0))\n+   : 0)\n \n /* A C expression that defines the optional machine-dependent\n    constraint letters that can be used to segregate specific types of"}, {"sha": "4b1c5d14200770c5ca2dee9257a8f63cc0fee619", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -2095,7 +2095,7 @@\n \n (define_insn \"*movsf_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f#xr,m,f#xr,r#xf,m,x#rf,x#rf,x#rf,m,!*y,!rm,!*y\")\n-\t(match_operand:SF 1 \"general_operand\" \"fm#rx,f#rx,G,rmF#fx,Fr#fx,H,x,xm#rf,x#rf,rm,*y,*y\"))]\n+\t(match_operand:SF 1 \"general_operand\" \"fm#rx,f#rx,G,rmF#fx,Fr#fx,C,x,xm#rf,x#rf,rm,*y,*y\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2280,7 +2280,7 @@\n \n (define_insn \"*movdf_nointeger\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#Y,m,f#Y,*r,o,Y#f,Y#f,Y#f,m\")\n-\t(match_operand:DF 1 \"general_operand\" \"fm#Y,f#Y,G,*roF,F*r,H,Y#f,YHm#f,Y#f\"))]\n+\t(match_operand:DF 1 \"general_operand\" \"fm#Y,f#Y,G,*roF,F*r,C,Y#f,YHm#f,Y#f\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (optimize_size || !TARGET_INTEGER_DFMODE_MOVES)\n    && (reload_in_progress || reload_completed\n@@ -2341,7 +2341,7 @@\n \n (define_insn \"*movdf_integer\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#Yr,m,f#Yr,r#Yf,o,Y#rf,Y#rf,Y#rf,m\")\n-\t(match_operand:DF 1 \"general_operand\" \"fm#Yr,f#Yr,G,roF#Yf,Fr#Yf,H,Y#rf,Ym#rf,Y#rf\"))]\n+\t(match_operand:DF 1 \"general_operand\" \"fm#Yr,f#Yr,G,roF#Yf,Fr#Yf,C,Y#rf,Ym#rf,Y#rf\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && !optimize_size && TARGET_INTEGER_DFMODE_MOVES\n    && (reload_in_progress || reload_completed\n@@ -20552,6 +20552,17 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_maskmovdqu_rex64\"\n+  [(set (mem:V16QI (match_operand:DI 0 \"register_operand\" \"D\"))\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"x\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"x\")]\n+\t\t      UNSPEC_MASKMOV))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ check ordering of operands in intel/nonintel syntax\n+  \"maskmovdqu\\t{%2, %1|%1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"sse2_movntv2df\"\n   [(set (match_operand:V2DF 0 \"memory_operand\" \"=m\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"x\")]"}, {"sha": "4136e901795065232f71be1ed70291c4f696bb07", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -1037,7 +1037,7 @@ _mm_prefetch (void *__P, enum _mm_hint __I)\n static __inline void\n _mm_stream_pi (__m64 *__P, __m64 __A)\n {\n-  __builtin_ia32_movntq (__P, (long long)__A);\n+  __builtin_ia32_movntq ((unsigned long long *)__P, (unsigned long long)__A);\n }\n \n /* Likewise.  The address must be 16-byte aligned.  */\n@@ -2426,7 +2426,7 @@ _mm_stream_si128 (__m128i *__A, __m128i __B)\n static __inline void\n _mm_stream_pd (double *__A, __m128d __B)\n {\n-  __builtin_ia32_movntpd ((__m128d *)__A, (__v2df)__B);\n+  __builtin_ia32_movntpd (__A, (__v2df)__B);\n }\n \n static __inline __m128i"}, {"sha": "0dbeb2b120c40e0a0277848092bd849c6b702290", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -1606,6 +1606,10 @@ Second floating point register\n @item c\n @samp{c} register\n \n+@item C\n+Specifies constant that can be easilly constructed in SSE register without\n+loading it from memory.\n+\n @item d\n @samp{d} register\n "}, {"sha": "52a92504a001fe2d5be38d0fe7ba20ca2c3c9a56", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ca792302bcc455bf7d45f807d71a9f06c4add8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=f8ca792302bcc455bf7d45f807d71a9f06c4add8", "patch": "@@ -2399,7 +2399,10 @@ simplify_subreg (outermode, op, innermode, byte)\n \t      /* This might fail, e.g. if taking a subreg from a SYMBOL_REF.  */\n \t      /* ??? It would be nice if we could actually make such subregs\n \t\t on targets that allow such relocations.  */\n-\t      elt = simplify_subreg (submode, op, innermode, byte);\n+\t      if (byte >= GET_MODE_UNIT_SIZE (innermode))\n+\t\telt = CONST0_RTX (submode);\n+\t      else\n+\t        elt = simplify_subreg (submode, op, innermode, byte);\n \t      if (! elt)\n \t\treturn NULL_RTX;\n \t      RTVEC_ELT (v, i) = elt;"}]}