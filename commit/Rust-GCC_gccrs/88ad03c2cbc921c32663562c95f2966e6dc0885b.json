{"sha": "88ad03c2cbc921c32663562c95f2966e6dc0885b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhZDAzYzJjYmM5MjFjMzI2NjM1NjJjOTVmMjk2NmU2ZGMwODg1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-16T09:06:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-16T09:06:02Z"}, "message": "re PR target/44942 (Bug in argument passing of long double)\n\n\tPR target/44942\n\t* config/i386/i386-protos.h (ix86_function_arg_boundary): Change second\n\targument to const_tree.\n\t* config/i386/i386.c (function_arg_advance): If padding needs to be\n\tinserted before argument, increment cum->words by number of padding\n\twords as well.\n\t(contains_aligned_value_p): Change argument to const_tree.\n\t(ix86_function_arg_boundary): Change second argument to const_tree.\n\n\t* gcc.c-torture/execute/pr44942.c: New test.\n\t* gcc.target/i386/pr44942.c: New test.\n\nFrom-SVN: r162255", "tree": {"sha": "30e7ceedd3005f1370130fd0eea949d4448e16a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e7ceedd3005f1370130fd0eea949d4448e16a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ad03c2cbc921c32663562c95f2966e6dc0885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ad03c2cbc921c32663562c95f2966e6dc0885b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ad03c2cbc921c32663562c95f2966e6dc0885b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ad03c2cbc921c32663562c95f2966e6dc0885b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba2dc63db7830c104a1325133ee5f286e4ff4dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2dc63db7830c104a1325133ee5f286e4ff4dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2dc63db7830c104a1325133ee5f286e4ff4dcf"}], "stats": {"total": 150, "additions": 142, "deletions": 8}, "files": [{"sha": "8fac566e8804ebb69694e1578c3da7bcb6ad9ab5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -1,3 +1,14 @@\n+2010-07-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/44942\n+\t* config/i386/i386-protos.h (ix86_function_arg_boundary): Change second\n+\targument to const_tree.\n+\t* config/i386/i386.c (function_arg_advance): If padding needs to be\n+\tinserted before argument, increment cum->words by number of padding\n+\twords as well.\n+\t(contains_aligned_value_p): Change argument to const_tree.\n+\t(ix86_function_arg_boundary): Change second argument to const_tree.\n+\n 2010-07-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/42235"}, {"sha": "23938b882c6b0b7c8c163cc944d6802e01155aa1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -140,8 +140,8 @@ extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n extern void ix86_asm_output_function_label (FILE *, const char *, tree);\n-extern int ix86_function_arg_boundary (enum machine_mode, tree);\n-extern bool ix86_solaris_return_in_memory (const_tree,const_tree);\n+extern int ix86_function_arg_boundary (enum machine_mode, const_tree);\n+extern bool ix86_solaris_return_in_memory (const_tree, const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n extern enum calling_abi ix86_cfun_abi (void);"}, {"sha": "fdb4787c94f70ad4a53c8ad9af9a655acf112df3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -6157,17 +6157,20 @@ function_arg_advance_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (!named && VALID_AVX256_REG_MODE (mode))\n     return;\n \n-  if (!examine_argument (mode, type, 0, &int_nregs, &sse_nregs))\n-    cum->words += words;\n-  else if (sse_nregs <= cum->sse_nregs && int_nregs <= cum->nregs)\n+  if (examine_argument (mode, type, 0, &int_nregs, &sse_nregs)\n+      && sse_nregs <= cum->sse_nregs && int_nregs <= cum->nregs)\n     {\n       cum->nregs -= int_nregs;\n       cum->sse_nregs -= sse_nregs;\n       cum->regno += int_nregs;\n       cum->sse_regno += sse_nregs;\n     }\n   else\n-    cum->words += words;\n+    {\n+      int align = ix86_function_arg_boundary (mode, type) / BITS_PER_WORD;\n+      cum->words = (cum->words + align - 1) & ~(align - 1);\n+      cum->words += words;\n+    }\n }\n \n static void\n@@ -6508,7 +6511,7 @@ ix86_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n /* Return true when TYPE should be 128bit aligned for 32bit argument passing\n    ABI.  */\n static bool\n-contains_aligned_value_p (tree type)\n+contains_aligned_value_p (const_tree type)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n   if (((TARGET_SSE && SSE_REG_MODE_P (mode))\n@@ -6558,7 +6561,7 @@ contains_aligned_value_p (tree type)\n    specified mode and type.  */\n \n int\n-ix86_function_arg_boundary (enum machine_mode mode, tree type)\n+ix86_function_arg_boundary (enum machine_mode mode, const_tree type)\n {\n   int align;\n   if (type)"}, {"sha": "eb478bfe779ec7ab8af5d555a19ffe4f5b57e63c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -1,3 +1,9 @@\n+2010-07-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/44942\n+\t* gcc.c-torture/execute/pr44942.c: New test.\n+\t* gcc.target/i386/pr44942.c: New test.\n+\n 2010-07-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44909"}, {"sha": "3ef0830220d61a068021eb86030fad992525f57d", "filename": "gcc/testsuite/gcc.c-torture/execute/pr44942.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44942.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44942.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr44942.c?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -0,0 +1,70 @@\n+/* PR target/44942 */\n+\n+#include <stdarg.h>\n+\n+void\n+test1 (int a, int b, int c, int d, int e, int f, int g, long double h, ...)\n+{\n+  int i;\n+  va_list ap;\n+\n+  va_start (ap, h);\n+  i = va_arg (ap, int);\n+  if (i != 1234)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+void\n+test2 (int a, int b, int c, int d, int e, int f, int g, long double h, int i,\n+       long double j, int k, long double l, int m, long double n, ...)\n+{\n+  int o;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  o = va_arg (ap, int);\n+  if (o != 1234)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+void\n+test3 (double a, double b, double c, double d, double e, double f,\n+       double g, long double h, ...)\n+{\n+  double i;\n+  va_list ap;\n+\n+  va_start (ap, h);\n+  i = va_arg (ap, double);\n+  if (i != 1234.0)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+void\n+test4 (double a, double b, double c, double d, double e, double f, double g,\n+       long double h, double i, long double j, double k, long double l,\n+       double m, long double n, ...)\n+{\n+  double o;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  o = va_arg (ap, double);\n+  if (o != 1234.0)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+int\n+main ()\n+{\n+  test1 (0, 0, 0, 0, 0, 0, 0, 0.0L, 1234);\n+  test2 (0, 0, 0, 0, 0, 0, 0, 0.0L, 0, 0.0L, 0, 0.0L, 0, 0.0L, 1234);\n+  test3 (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0L, 1234.0);\n+  test4 (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0L, 0.0, 0.0L,\n+\t 0.0, 0.0L, 0.0, 0.0L, 1234.0);\n+  return 0;\n+}"}, {"sha": "4664f7e0d5345c1ebe1f59d4a2600c2d3f272683", "filename": "gcc/testsuite/gcc.target/i386/pr44942.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44942.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ad03c2cbc921c32663562c95f2966e6dc0885b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44942.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44942.c?ref=88ad03c2cbc921c32663562c95f2966e6dc0885b", "patch": "@@ -0,0 +1,44 @@\n+/* PR target/44942 */\n+/* { dg-do run { target lp64 } } */\n+\n+#include <stdarg.h>\n+#include <emmintrin.h>\n+\n+void\n+test1 (double a, double b, double c, double d, double e, double f,\n+       double g, __m128d h, ...)\n+{\n+  double i;\n+  va_list ap;\n+\n+  va_start (ap, h);\n+  i = va_arg (ap, double);\n+  if (i != 1234.0)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+void\n+test2 (double a, double b, double c, double d, double e, double f, double g,\n+       __m128d h, double i, __m128d j, double k, __m128d l,\n+       double m, __m128d n, ...)\n+{\n+  double o;\n+  va_list ap;\n+\n+  va_start (ap, n);\n+  o = va_arg (ap, double);\n+  if (o != 1234.0)\n+    __builtin_abort ();\n+  va_end (ap);\n+}\n+\n+int\n+main ()\n+{\n+  __m128d m = _mm_set1_pd (7.0);\n+  test1 (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, m, 1234.0);\n+  test2 (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, m, 0.0, m,\n+\t 0.0, m, 0.0, m, 1234.0);\n+  return 0;\n+}"}]}