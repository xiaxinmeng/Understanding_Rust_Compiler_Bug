{"sha": "40c79d58a3f379be9eb020e7d338319bf0e93907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjNzlkNThhM2YzNzliZTllYjAyMGU3ZDMzODMxOWJmMGU5MzkwNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-12T00:35:36Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-12T00:35:36Z"}, "message": "cpplib.h (struct cpp_options): Change lang_asm to char.\n\n2000-01-11 16:24 -0800  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* cpplib.h (struct cpp_options): Change lang_asm to char.\n\tAdd lang_fortran.\n\t* cppinit.c (builtin_array): Take out __STDC_VERSION__, it's\n\tdone in cpp_handle_option now.\n\t(initialize_builtins): Take out special case code used only by\n\t__STDC_VERSION__.\n\t(cpp_handle_option): Turn off trigraphs and trigraph warnings\n\tif -traditional.  Recognize -lang-fortran and set\n\tlang_fortran, also turn off cplusplus_comments.\n\t(print_help): Document -lang-fortran.\n\t* cpplib.c (handle_directive): Ignore `# 123 \"file\"' if\n\tlang_asm. Ignore all directives other than `# 123 \"file\"' if\n\tCPP_PREPROCESSED.\n\t(cpp_get_token): If -traditional, don't recognize directives\n\tunless the # is in column 1.\n\t(parse_string): If lang_fortran or lang_asm, silently\n\tterminate strings ('' or \"\") at end of line.\n\tRemove unnecessary braces.\n\nFrom-SVN: r31342", "tree": {"sha": "e9b1edb4e28f5f27868000490ca3a879bdf09c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b1edb4e28f5f27868000490ca3a879bdf09c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c79d58a3f379be9eb020e7d338319bf0e93907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c79d58a3f379be9eb020e7d338319bf0e93907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c79d58a3f379be9eb020e7d338319bf0e93907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c79d58a3f379be9eb020e7d338319bf0e93907/comments", "author": null, "committer": null, "parents": [{"sha": "2e76d35c7c6d9da8bbe0743362f43699cb384b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e76d35c7c6d9da8bbe0743362f43699cb384b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e76d35c7c6d9da8bbe0743362f43699cb384b56"}], "stats": {"total": 97, "additions": 72, "deletions": 25}, "files": [{"sha": "613166f5105622f6d89e9dde17052515f4515577", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40c79d58a3f379be9eb020e7d338319bf0e93907", "patch": "@@ -1,4 +1,26 @@\n-2000-01-11  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>, Richard Henderson  <rth@cygnus.com>\n+2000-01-11 16:24 -0800  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.h (struct cpp_options): Change lang_asm to char.\n+\tAdd lang_fortran.\n+\t* cppinit.c (builtin_array): Take out __STDC_VERSION__, it's\n+\tdone in cpp_handle_option now.\n+\t(initialize_builtins): Take out special case code used only by\n+\t__STDC_VERSION__.\n+\t(cpp_handle_option): Turn off trigraphs and trigraph warnings\n+\tif -traditional.  Recognize -lang-fortran and set\n+\tlang_fortran, also turn off cplusplus_comments.\n+\t(print_help): Document -lang-fortran.\n+\t* cpplib.c (handle_directive): Ignore `# 123 \"file\"' if\n+\tlang_asm. Ignore all directives other than `# 123 \"file\"' if\n+\tCPP_PREPROCESSED.\n+\t(cpp_get_token): If -traditional, don't recognize directives\n+\tunless the # is in column 1.\n+\t(parse_string): If lang_fortran or lang_asm, silently\n+\tterminate strings ('' or \"\") at end of line.\n+\tRemove unnecessary braces.\n+\n+2000-01-11  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+\t    Richard Henderson  <rth@cygnus.com>\n \n \t* resource.c (mark_referenced_resources): Mark a set strict_low_part\n \tas used."}, {"sha": "b854a3037d861a6f68c90744f149ecfb98bb812a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=40c79d58a3f379be9eb020e7d338319bf0e93907", "patch": "@@ -496,8 +496,6 @@ cpp_cleanup (pfile)\n    VALUE (if any).  FLAGS tweaks the behavior a little:\n    DUMP\t\twrite debug info for this macro\n    STDC\t\tdefine only if not -traditional\n-   C89\t\tdefine only if -lang-c89\n-   C9X\t\tdefine only if -lang-c9x\n    ULP\t\tvalue is the global user_label_prefix (which can't be\n \t\tput directly into the table).\n  */\n@@ -511,8 +509,6 @@ struct builtin\n };\n #define DUMP 0x01\n #define STDC 0x02\n-#define C89  0x04\n-#define C9X  0x08\n #define ULP  0x10\n \n static const struct builtin builtin_array[] =\n@@ -536,8 +532,6 @@ static const struct builtin builtin_array[] =\n   { \"__PTRDIFF_TYPE__\",\t\tPTRDIFF_TYPE,\t T_CONST, DUMP },\n #endif\n   { \"__WCHAR_TYPE__\",\t\tWCHAR_TYPE,\t T_CONST, DUMP },\n-  { \"__STDC_VERSION__\",\t\t\"199409L\",\t T_CONST, DUMP|STDC|C89 },\n-  { \"__STDC_VERSION__\",\t\t\"199909L\",\t T_CONST, DUMP|STDC|C9X },\n   { 0, 0, 0, 0 }\n };\n \n@@ -555,10 +549,6 @@ initialize_builtins (pfile)\n     {\n       if ((b->flags & STDC) && CPP_TRADITIONAL (pfile))\n \tcontinue;\n-      if ((b->flags & C89) && CPP_OPTIONS (pfile)->c9x)\n-\tcontinue;\n-      if ((b->flags & C9X) && !CPP_OPTIONS (pfile)->c9x)\n-\tcontinue;\n \n       val = (b->flags & ULP) ? user_label_prefix : b->value;\n       len = strlen (b->name);\n@@ -571,8 +561,6 @@ initialize_builtins (pfile)\n }\n #undef DUMP\n #undef STDC\n-#undef C89\n-#undef C9X\n #undef ULP\n \n /* Another subroutine of cpp_start_read.  This one sets up to do\n@@ -1312,6 +1300,8 @@ cpp_handle_option (pfile, argc, argv)\n \t  {\n \t    opts->traditional = 1;\n \t    opts->cplusplus_comments = 0;\n+\t    opts->trigraphs = 0;\n+\t    opts->warn_trigraphs = 0;\n \t  }\n \telse if (!strcmp (argv[i], \"-trigraphs\"))\n \t  opts->trigraphs = 1;\n@@ -1339,6 +1329,8 @@ cpp_handle_option (pfile, argc, argv)\n \t    opts->c9x = 0, opts->objc = 1;\n \tif (! strcmp (argv[i], \"-lang-asm\"))\n \t  opts->lang_asm = 1;\n+\tif (! strcmp (argv[i], \"-lang-fortran\"))\n+\t  opts->lang_fortran = 1, opts->cplusplus_comments = 0;\n \tif (! strcmp (argv[i], \"-lint\"))\n \t  opts->for_lint = 1;\n \tif (! strcmp (argv[i], \"-lang-chill\"))\n@@ -1722,6 +1714,7 @@ Switches:\\n\\\n   -lang-objc                Assume that the input sources are in ObjectiveC\\n\\\n   -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\\\n   -lang-asm                 Assume that the input sources are in assembler\\n\\\n+  -lang-fortran\t\t    Assume that the input sources are in Fortran\\n\\\n   -lang-chill               Assume that the input sources are in Chill\\n\\\n   -std=<std name>           Specify the conformance standard; one of:\\n\\\n                             gnu89, gnu9x, c89, c9x, iso9899:1990,\\n\\"}, {"sha": "90f6c800ee14d80d44a6b055f41fbf2b3efb72e3", "filename": "gcc/cpplib.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=40c79d58a3f379be9eb020e7d338319bf0e93907", "patch": "@@ -527,11 +527,18 @@ handle_directive (pfile)\n   cpp_skip_hspace (pfile);\n \n   c = PEEKC ();\n+  /* # followed by a number is equivalent to #line.  Do not recognize\n+     this form in assembly language source files.  Complain about this\n+     form if we're being pedantic, but not if this is regurgitated\n+     input (preprocessed or fed back in by the C++ frontend).  */\n   if (c >= '0' && c <= '9')\n     {\n-      /* Handle # followed by a line number.  Complain about using that\n-         form if we're being pedantic, but not if this is regurgitated\n-         input (preprocessed or fed back in by the C++ frontend).  */\n+      if (CPP_OPTIONS (pfile)->lang_asm)\n+\t{\n+\t  skip_rest_of_line (pfile);\n+\t  return 1;\n+\t}\n+\n       if (CPP_PEDANTIC (pfile)\n \t  && ! CPP_PREPROCESSED (pfile)\n \t  && ! CPP_BUFFER (pfile)->manual_pop)\n@@ -540,6 +547,11 @@ handle_directive (pfile)\n       return 1;\n     }\n \n+  /* If we are rescanning preprocessed input, don't obey any directives\n+     other than # nnn.  */\n+  if (CPP_PREPROCESSED (pfile))\n+    return 0;\n+\n   /* Now find the directive name.  */\n   CPP_PUTC (pfile, '#');\n   parse_name (pfile, GETC());\n@@ -2388,6 +2400,12 @@ cpp_get_token (pfile)\n \n \t  if (!pfile->only_seen_white)\n \t    goto randomchar;\n+\t  /* -traditional directives are recognized only with the # in\n+\t     column 1.\n+\t     XXX Layering violation.  */\n+\t  if (CPP_TRADITIONAL (pfile)\n+\t      && CPP_BUFFER (pfile)->cur - CPP_BUFFER (pfile)->line_base != 1)\n+\t    goto randomchar;\n \t  if (handle_directive (pfile))\n \t    return CPP_DIRECTIVE;\n \t  pfile->only_seen_white = 0;\n@@ -2872,20 +2890,26 @@ parse_string (pfile, c)\n \tcase '\\n':\n \t  CPP_BUMP_LINE (pfile);\n \t  pfile->lineno++;\n+\n+\t  /* In Fortran and assembly language, silently terminate\n+\t     strings of either variety at end of line.  This is a\n+\t     kludge around not knowing where comments are in these\n+\t     languages.  */\n+\t  if (CPP_OPTIONS (pfile)->lang_fortran\n+\t      || CPP_OPTIONS (pfile)->lang_asm)\n+\t    return;\n \t  /* Character constants may not extend over multiple lines.\n-\t     In ANSI, neither may strings.  We accept multiline strings\n-\t     as an extension.  */\n+\t     In Standard C, neither may strings.  We accept multiline\n+\t     strings as an extension.  */\n \t  if (c == '\\'')\n \t    {\n \t      cpp_error_with_line (pfile, start_line, start_column,\n \t\t\t\t   \"unterminated character constant\");\n \t      return;\n \t    }\n \t  if (CPP_PEDANTIC (pfile) && pfile->multiline_string_line == 0)\n-\t    {\n-\t      cpp_pedwarn_with_line (pfile, start_line, start_column,\n-\t\t\t\t     \"string constant runs past end of line\");\n-\t    }\n+\t    cpp_pedwarn_with_line (pfile, start_line, start_column,\n+\t\t\t\t   \"string constant runs past end of line\");\n \t  if (pfile->multiline_string_line == 0)\n \t    pfile->multiline_string_line = start_line;\n \t  break;"}, {"sha": "a517a26e2d773552c3a0dc7a1b73db17829733b6", "filename": "gcc/cpplib.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c79d58a3f379be9eb020e7d338319bf0e93907/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=40c79d58a3f379be9eb020e7d338319bf0e93907", "patch": "@@ -346,10 +346,18 @@ struct cpp_options {\n \n   char objc;\n \n-  /* Nonzero means this is an assembly file, and allow\n-     unknown directives, which could be comments.  */\n+  /* Nonzero means this is an assembly file, so ignore unrecognized\n+     directives and the \"# 33\" form of #line, both of which are\n+     probably comments.  Also, permit unbalanced ' strings (again,\n+     likely to be in comments).  */\n \n-  int lang_asm;\n+  char lang_asm;\n+\n+  /* Nonzero means this is Fortran, and we don't know where the\n+     comments are, so permit unbalanced ' strings.  Unlike lang_asm,\n+     this does not ignore unrecognized directives.  */\n+\n+  char lang_fortran;\n \n   /* Nonzero means turn NOTREACHED into #pragma NOTREACHED etc */\n "}]}