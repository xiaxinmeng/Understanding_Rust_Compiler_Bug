{"sha": "5d1b2443237a407785f84be09909f93abdcfec48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxYjI0NDMyMzdhNDA3Nzg1Zjg0YmUwOTkwOWY5M2FiZGNmZWM0OA==", "commit": {"author": {"name": "Jan Kratochvil", "email": "jan.kratochvil@redhat.com", "date": "2017-01-31T01:01:09Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-01-31T01:01:09Z"}, "message": "libcc1 base API: bump set_arguments; add set_driver_filename, set_triplet_regexp\n\nfor  include/ChangeLog\n\n\t* gcc-interface.h (enum gcc_base_api_version): Update comment\n\tfor GCC_FE_VERSION_1.\n\t(struct gcc_base_vtable): Rename set_arguments to\n\tset_arguments_v0.  Add set_arguments, set_triplet_regexp and\n\tset_driver_filename.\n\nfor  libcc1/ChangeLog\n\n\t* libcc1.cc (libcc1): Add class compiler with field compilerp,\n\tclass compiler_triplet_regexp and class\n\tcompiler_driver_filename.\n\t(libcc1::libcc1): Initialize compilerp.\n\t(libcc1::~libcc1): Delete compilerp.\n\t(libcc1::compiler::find, libcc1::compiler_triplet_regexp::find)\n\t(libcc1::compiler_driver_filename::find): New methods.\n\t(libcc1_set_arguments): Remove parameter triplet_regexp.\n\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename)\n\t(libcc1_set_arguments_v0): New functions.\n\t(vtable): Use libcc1_set_arguments_v0, add\n\tlibcc1_set_arguments, libcc1_set_triplet_regexp and\n\tlibcc1_set_driver_filename.\n\nFrom-SVN: r245049", "tree": {"sha": "2ecd98d407dc9ae43d7a9cbc9f5b44d9cca8106e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecd98d407dc9ae43d7a9cbc9f5b44d9cca8106e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d1b2443237a407785f84be09909f93abdcfec48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1b2443237a407785f84be09909f93abdcfec48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1b2443237a407785f84be09909f93abdcfec48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1b2443237a407785f84be09909f93abdcfec48/comments", "author": {"login": "jankratochvil", "id": 1223939, "node_id": "MDQ6VXNlcjEyMjM5Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1223939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankratochvil", "html_url": "https://github.com/jankratochvil", "followers_url": "https://api.github.com/users/jankratochvil/followers", "following_url": "https://api.github.com/users/jankratochvil/following{/other_user}", "gists_url": "https://api.github.com/users/jankratochvil/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankratochvil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankratochvil/subscriptions", "organizations_url": "https://api.github.com/users/jankratochvil/orgs", "repos_url": "https://api.github.com/users/jankratochvil/repos", "events_url": "https://api.github.com/users/jankratochvil/events{/privacy}", "received_events_url": "https://api.github.com/users/jankratochvil/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b5c10724d7a0c29ae613bee7a0822131b06b5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c10724d7a0c29ae613bee7a0822131b06b5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5c10724d7a0c29ae613bee7a0822131b06b5a8"}], "stats": {"total": 220, "additions": 192, "deletions": 28}, "files": [{"sha": "c1a52dbfca2fc5c9a1ec0e076dfb1f8716c73aa6", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2443237a407785f84be09909f93abdcfec48/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2443237a407785f84be09909f93abdcfec48/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=5d1b2443237a407785f84be09909f93abdcfec48", "patch": "@@ -1,5 +1,11 @@\n 2017-01-30  Jan Kratochvil <jan.kratochvil@redhat.com>\n \n+\t* gcc-interface.h (enum gcc_base_api_version): Update comment\n+\tfor GCC_FE_VERSION_1.\n+\t(struct gcc_base_vtable): Rename set_arguments to\n+\tset_arguments_v0.  Add set_arguments, set_triplet_regexp and\n+\tset_driver_filename.\n+\n \t* gcc-interface.h (enum gcc_base_api_version): Add comment to\n \tGCC_FE_VERSION_1.\n \t(struct gcc_base_vtable): Rename compile to compile_v0."}, {"sha": "e3ffd18a75d78472554703b91362fb32184bff61", "filename": "include/gcc-interface.h", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2443237a407785f84be09909f93abdcfec48/include%2Fgcc-interface.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2443237a407785f84be09909f93abdcfec48/include%2Fgcc-interface.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgcc-interface.h?ref=5d1b2443237a407785f84be09909f93abdcfec48", "patch": "@@ -46,7 +46,9 @@ enum gcc_base_api_version\n {\n   GCC_FE_VERSION_0 = 0,\n \n-  /* Deprecated method compile_v0.  Added method set_verbose and compile.  */\n+  /* Deprecated methods set_arguments_v0 and compile_v0.  Added methods\n+     set_arguments, set_triplet_regexp, set_driver_filename, set_verbose and\n+     compile.  */\n   GCC_FE_VERSION_1 = 1,\n };\n \n@@ -67,20 +69,12 @@ struct gcc_base_vtable\n \n   unsigned int version;\n \n-  /* Set the compiler's command-line options for the next compilation.\n-     TRIPLET_REGEXP is a regular expression that is used to match the\n-     configury triplet prefix to the compiler.\n-     The arguments are copied by GCC.  ARGV need not be\n-     NULL-terminated.  The arguments must be set separately for each\n-     compilation; that is, after a compile is requested, the\n-     previously-set arguments cannot be reused.\n-\n-     This returns NULL on success.  On failure, returns a malloc()d\n-     error message.  The caller is responsible for freeing it.  */\n+  /* Deprecated GCC_FE_VERSION_0 variant of the GCC_FE_VERSION_1\n+     methods set_triplet_regexp and set_arguments.  */\n \n-  char *(*set_arguments) (struct gcc_base_context *self,\n-\t\t\t  const char *triplet_regexp,\n-\t\t\t  int argc, char **argv);\n+  char *(*set_arguments_v0) (struct gcc_base_context *self,\n+\t\t\t     const char *triplet_regexp,\n+\t\t\t     int argc, char **argv);\n \n   /* Set the file name of the program to compile.  The string is\n      copied by the method implementation, but the caller must\n@@ -125,6 +119,45 @@ struct gcc_base_vtable\n \n   int /* bool */ (*compile) (struct gcc_base_context *self,\n \t\t\t     const char *filename);\n+\n+  /* Set the compiler's command-line options for the next compilation.\n+     The arguments are copied by GCC.  ARGV need not be\n+     NULL-terminated.  The arguments must be set separately for each\n+     compilation; that is, after a compile is requested, the\n+     previously-set arguments cannot be reused.\n+\n+     This returns NULL on success.  On failure, returns a malloc()d\n+     error message.  The caller is responsible for freeing it.\n+\n+     This method is only available since GCC_FE_VERSION_1.  */\n+\n+  char *(*set_arguments) (struct gcc_base_context *self,\n+\t\t\t  int argc, char **argv);\n+\n+  /* Set TRIPLET_REGEXP as a regular expression that is used to match\n+     the configury triplet prefix to the compiler.  Calling this method\n+     overrides possible previous call of itself or set_driver_filename.\n+\n+     This returns NULL on success.  On failure, returns a malloc()d\n+     error message.  The caller is responsible for freeing it.\n+\n+     This method is only available since GCC_FE_VERSION_1.  */\n+\n+  char *(*set_triplet_regexp) (struct gcc_base_context *self,\n+\t\t\t       const char *triplet_regexp);\n+\n+  /* DRIVER_FILENAME should be filename of the gcc compiler driver\n+     program.  It will be searched in PATH components like\n+     TRIPLET_REGEXP.  Calling this method overrides possible previous\n+     call of itself or set_triplet_regexp.\n+\n+     This returns NULL on success.  On failure, returns a malloc()d\n+     error message.  The caller is responsible for freeing it.\n+\n+     This method is only available since GCC_FE_VERSION_1.  */\n+\n+  char *(*set_driver_filename) (struct gcc_base_context *self,\n+\t\t\t\tconst char *driver_filename);\n };\n \n /* The GCC object.  */"}, {"sha": "ef1577b2d29d711879981e9003e7c45623918285", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2443237a407785f84be09909f93abdcfec48/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2443237a407785f84be09909f93abdcfec48/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=5d1b2443237a407785f84be09909f93abdcfec48", "patch": "@@ -1,5 +1,19 @@\n 2017-01-30  Jan Kratochvil <jan.kratochvil@redhat.com>\n \n+\t* libcc1.cc (libcc1): Add class compiler with field compilerp,\n+\tclass compiler_triplet_regexp and class\n+\tcompiler_driver_filename.\n+\t(libcc1::libcc1): Initialize compilerp.\n+\t(libcc1::~libcc1): Delete compilerp.\n+\t(libcc1::compiler::find, libcc1::compiler_triplet_regexp::find)\n+\t(libcc1::compiler_driver_filename::find): New methods.\n+\t(libcc1_set_arguments): Remove parameter triplet_regexp.\n+\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename)\n+\t(libcc1_set_arguments_v0): New functions.\n+\t(vtable): Use libcc1_set_arguments_v0, add\n+\tlibcc1_set_arguments, libcc1_set_triplet_regexp and\n+\tlibcc1_set_driver_filename.\n+\n \t* libcc1.cc: Include intl.h.\n \t(struct libcc1): Add field verbose.\n \t(libcc1::libcc1): Initialize it."}, {"sha": "572bc2ae9ea318a9a0b54454136e0fda8410dfea", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 125, "deletions": 14, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2443237a407785f84be09909f93abdcfec48/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2443237a407785f84be09909f93abdcfec48/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=5d1b2443237a407785f84be09909f93abdcfec48", "patch": "@@ -70,6 +70,53 @@ struct libcc1 : public gcc_c_context\n \n   /* Non-zero as an equivalent to gcc driver option \"-v\".  */\n   bool verbose;\n+\n+  /* Compiler to set by set_triplet_regexp or set_driver_filename.  */\n+  class compiler\n+  {\n+  protected:\n+    libcc1 *self_;\n+  public:\n+    compiler (libcc1 *self) : self_ (self)\n+    {\n+    }\n+    virtual char *find (std::string &compiler) const;\n+    virtual ~compiler ()\n+    {\n+    }\n+  } *compilerp;\n+\n+  /* Compiler to set by set_triplet_regexp.  */\n+  class compiler_triplet_regexp : public compiler\n+  {\n+  private:\n+    std::string triplet_regexp_;\n+  public:\n+    virtual char *find (std::string &compiler) const;\n+    compiler_triplet_regexp (libcc1 *self, std::string triplet_regexp)\n+      : compiler (self), triplet_regexp_ (triplet_regexp)\n+    {\n+    }\n+    virtual ~compiler_triplet_regexp ()\n+    {\n+    }\n+  };\n+\n+  /* Compiler to set by set_driver_filename.  */\n+  class compiler_driver_filename : public compiler\n+  {\n+  private:\n+    std::string driver_filename_;\n+  public:\n+    virtual char *find (std::string &compiler) const;\n+    compiler_driver_filename (libcc1 *self, std::string driver_filename)\n+      : compiler (self), driver_filename_ (driver_filename)\n+    {\n+    }\n+    virtual ~compiler_driver_filename ()\n+    {\n+    }\n+  };\n };\n \n // A local subclass of connection that holds a back-pointer to the\n@@ -102,7 +149,8 @@ libcc1::libcc1 (const gcc_base_vtable *v,\n     print_datum (NULL),\n     args (),\n     source_file (),\n-    verbose (false)\n+    verbose (false),\n+    compilerp (new libcc1::compiler (this))\n {\n   base.ops = v;\n   c_ops = cv;\n@@ -111,6 +159,7 @@ libcc1::libcc1 (const gcc_base_vtable *v,\n libcc1::~libcc1 ()\n {\n   delete connection;\n+  delete compilerp;\n }\n \n \f\n@@ -319,20 +368,21 @@ libcc1_set_verbose (struct gcc_base_context *s, int /* bool */ verbose)\n   self->verbose = verbose != 0;\n }\n \n-static char *\n-libcc1_set_arguments (struct gcc_base_context *s,\n-\t\t      const char *triplet_regexp,\n-\t\t      int argc, char **argv)\n+char *\n+libcc1::compiler::find (std::string &compiler ATTRIBUTE_UNUSED) const\n {\n-  libcc1 *self = (libcc1 *) s;\n-  regex_t triplet;\n-  int code;\n+  return xstrdup (_(\"Compiler has not been specified\"));\n+}\n \n-  std::string rx = make_regexp (triplet_regexp, COMPILER_NAME);\n-  // Simulate fnotice by fprintf.\n-  if (self->verbose)\n+char *\n+libcc1::compiler_triplet_regexp::find (std::string &compiler) const\n+{\n+  std::string rx = make_regexp (triplet_regexp_.c_str (), COMPILER_NAME);\n+  if (self_->verbose)\n     fprintf (stderr, _(\"searching for compiler matching regex %s\\n\"),\n \t     rx.c_str());\n+  regex_t triplet;\n+  int code;\n   code = regcomp (&triplet, rx.c_str (), REG_EXTENDED | REG_NOSUB);\n   if (code != 0)\n     {\n@@ -348,7 +398,6 @@ libcc1_set_arguments (struct gcc_base_context *s,\n \t\t     (char *) NULL);\n     }\n \n-  std::string compiler;\n   if (!find_compiler (triplet, &compiler))\n     {\n       regfree (&triplet);\n@@ -358,8 +407,32 @@ libcc1_set_arguments (struct gcc_base_context *s,\n \t\t     (char *) NULL);\n     }\n   regfree (&triplet);\n-  if (self->verbose)\n+  if (self_->verbose)\n     fprintf (stderr, _(\"found compiler %s\\n\"), compiler.c_str());\n+  return NULL;\n+}\n+\n+char *\n+libcc1::compiler_driver_filename::find (std::string &compiler) const\n+{\n+  // Simulate fnotice by fprintf.\n+  if (self_->verbose)\n+    fprintf (stderr, _(\"using explicit compiler filename %s\\n\"),\n+\t     driver_filename_.c_str());\n+  compiler = driver_filename_;\n+  return NULL;\n+}\n+\n+static char *\n+libcc1_set_arguments (struct gcc_base_context *s,\n+\t\t      int argc, char **argv)\n+{\n+  libcc1 *self = (libcc1 *) s;\n+\n+  std::string compiler;\n+  char *errmsg = self->compilerp->find (compiler);\n+  if (errmsg != NULL)\n+    return errmsg;\n \n   self->args.push_back (compiler);\n \n@@ -369,6 +442,41 @@ libcc1_set_arguments (struct gcc_base_context *s,\n   return NULL;\n }\n \n+static char *\n+libcc1_set_triplet_regexp (struct gcc_base_context *s,\n+\t\t\t   const char *triplet_regexp)\n+{\n+  libcc1 *self = (libcc1 *) s;\n+\n+  delete self->compilerp;\n+  self->compilerp = new libcc1::compiler_triplet_regexp (self, triplet_regexp);\n+  return NULL;\n+}\n+\n+static char *\n+libcc1_set_driver_filename (struct gcc_base_context *s,\n+\t\t\t    const char *driver_filename)\n+{\n+  libcc1 *self = (libcc1 *) s;\n+\n+  delete self->compilerp;\n+  self->compilerp = new libcc1::compiler_driver_filename (self,\n+\t\t\t\t\t\t\t  driver_filename);\n+  return NULL;\n+}\n+\n+static char *\n+libcc1_set_arguments_v0 (struct gcc_base_context *s,\n+\t\t\t const char *triplet_regexp,\n+\t\t\t int argc, char **argv)\n+{\n+  char *errmsg = libcc1_set_triplet_regexp (s, triplet_regexp);\n+  if (errmsg != NULL)\n+    return errmsg;\n+\n+  return libcc1_set_arguments (s, argc, argv);\n+}\n+\n static void\n libcc1_set_source_file (struct gcc_base_context *s,\n \t\t\tconst char *file)\n@@ -531,13 +639,16 @@ libcc1_destroy (struct gcc_base_context *s)\n static const struct gcc_base_vtable vtable =\n {\n   GCC_FE_VERSION_1,\n-  libcc1_set_arguments,\n+  libcc1_set_arguments_v0,\n   libcc1_set_source_file,\n   libcc1_set_print_callback,\n   libcc1_compile_v0,\n   libcc1_destroy,\n   libcc1_set_verbose,\n   libcc1_compile,\n+  libcc1_set_arguments,\n+  libcc1_set_triplet_regexp,\n+  libcc1_set_driver_filename,\n };\n \n extern \"C\" gcc_c_fe_context_function gcc_c_fe_context;"}]}