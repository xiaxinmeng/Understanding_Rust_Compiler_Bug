{"sha": "94a073b2515f43d69404f14cd4a66eaa5301c734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhMDczYjI1MTVmNDNkNjk0MDRmMTRjZDRhNjZlYWE1MzAxYzczNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-12T03:49:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-12T03:49:13Z"}, "message": "Remove N3639 \"array of runtime length\" from -std=c++14.\n\ngcc/cp/\n\t* decl.c (compute_array_index_type): VLAs are not part of C++14.\n\t(create_array_type_for_decl, grokdeclarator): Likewise.\n\t* lambda.c (add_capture): Likewise.\n\t* pt.c (tsubst): Likewise.\n\t* rtti.c (get_tinfo_decl): Likewise.\n\t* semantics.c (finish_decltype_type): Likewise.\n\t* typeck.c (cxx_sizeof_or_alignof_type): Likewise.\n\t(cp_build_addr_expr_1): Likewise.\n\t* init.c (build_vec_init): Don't throw bad_array_length.\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_runtime_arrays if\n\twe aren't complaining about VLAs.\nlibstdc++-v3/\n\t* libsupc++/new (bad_array_length): Move...\n\t* bad_array_length.cc: ...here.\n\t* cxxabi.h, eh_aux_runtime.cc (__cxa_throw_bad_array_new_length): Also\n\tmove to bad_array_length.cc.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_runtime_arrays if\n\twe aren't complaining about VLAs.\n\nFrom-SVN: r218655", "tree": {"sha": "743e5ca8ce9e5b2570cd784c2de90d51c8b44bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743e5ca8ce9e5b2570cd784c2de90d51c8b44bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94a073b2515f43d69404f14cd4a66eaa5301c734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a073b2515f43d69404f14cd4a66eaa5301c734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a073b2515f43d69404f14cd4a66eaa5301c734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a073b2515f43d69404f14cd4a66eaa5301c734/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183"}], "stats": {"total": 342, "additions": 112, "deletions": 230}, "files": [{"sha": "db08d185e08c0bd1e0cd67e0f16f3a294184050e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,3 +1,8 @@\n+2014-12-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_runtime_arrays if\n+\twe aren't complaining about VLAs.\n+\n 2014-12-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/64183"}, {"sha": "54d3acd85479dc768b5027d0780c1578e979c6e1", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -828,6 +828,15 @@ c_cpp_builtins (cpp_reader *pfile)\n \t and were standardized for C++14.  */\n       if (!pedantic || cxx_dialect > cxx11)\n \tcpp_define (pfile, \"__cpp_binary_literals=201304\");\n+\n+      /* Arrays of runtime bound were removed from C++14, but we still\n+\t support GNU VLAs.  Let's define this macro to a low number\n+\t (corresponding to the initial test release of GNU C++) if we won't\n+\t complain about use of VLAs.  */\n+      if (c_dialect_cxx ()\n+\t  && (pedantic ? warn_vla == 0 : warn_vla <= 0))\n+\tcpp_define (pfile, \"__cpp_runtime_arrays=198712\");\n+\n       if (cxx_dialect >= cxx11)\n \t{\n \t  /* Set feature test macros for C++11  */\n@@ -863,9 +872,6 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_variable_templates=201304\");\n \t  cpp_define (pfile, \"__cpp_digit_separators=201309\");\n \t  //cpp_define (pfile, \"__cpp_sized_deallocation=201309\");\n-\t  /* We'll have to see where runtime arrays wind up.\n-\t     Let's put it in C++14 for now.  */\n-\t  cpp_define (pfile, \"__cpp_runtime_arrays=201304\");\n \t}\n     }\n   /* Note that we define this for C as well, so that we know if"}, {"sha": "53bf2f5981c2bcb2fd62b1631bc0299c1a35c7f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,16 @@\n 2014-12-11  Jason Merrill  <jason@redhat.com>\n \n+\tRemove N3639 \"array of runtime length\" from -std=c++14.\n+\t* decl.c (compute_array_index_type): VLAs are not part of C++14.\n+\t(create_array_type_for_decl, grokdeclarator): Likewise.\n+\t* lambda.c (add_capture): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\t* rtti.c (get_tinfo_decl): Likewise.\n+\t* semantics.c (finish_decltype_type): Likewise.\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Likewise.\n+\t(cp_build_addr_expr_1): Likewise.\n+\t* init.c (build_vec_init): Don't throw bad_array_length.\n+\n \tPR c++/64248\n \tRevert:\n \t* parser.c (cp_parser_unqualified_id): Handle __func__ here."}, {"sha": "efc20012831a3fb28b810c0e18b703ef8eae9281", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -8515,7 +8515,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t   /* We don't allow VLAs at non-function scopes, or during\n \t      tentative template substitution.  */\n \t   || !at_function_scope_p ()\n-\t   || (cxx_dialect < cxx14 && !(complain & tf_error)))\n+\t   || !(complain & tf_error))\n     {\n       if (!(complain & tf_error))\n \treturn error_mark_node;\n@@ -8527,7 +8527,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \terror (\"size of array is not an integral constant-expression\");\n       size = integer_one_node;\n     }\n-  else if (cxx_dialect < cxx14 && pedantic && warn_vla != 0)\n+  else if (pedantic && warn_vla != 0)\n     {\n       if (name)\n \tpedwarn (input_location, OPT_Wvla, \"ISO C++ forbids variable length array %qD\", name);\n@@ -8585,25 +8585,12 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \n \t  stabilize_vla_size (itype);\n \n-\t  if (cxx_dialect >= cxx14 && flag_exceptions)\n+\t  if (flag_sanitize & SANITIZE_VLA\n+\t      && current_function_decl != NULL_TREE\n+\t      && !lookup_attribute (\"no_sanitize_undefined\",\n+\t\t\t\t    DECL_ATTRIBUTES\n+\t\t\t\t    (current_function_decl)))\n \t    {\n-\t      /* If the VLA bound is larger than half the address space,\n-\t         or less than zero, throw std::bad_array_length.  */\n-\t      tree comp = build2 (LT_EXPR, boolean_type_node, itype,\n-\t\t\t\t  ssize_int (-1));\n-\t      comp = build3 (COND_EXPR, void_type_node, comp,\n-\t\t\t     throw_bad_array_length (), void_node);\n-\t      finish_expr_stmt (comp);\n-\t    }\n-\t  else if (flag_sanitize & SANITIZE_VLA\n-\t\t   && current_function_decl != NULL_TREE\n-\t\t   && !lookup_attribute (\"no_sanitize_undefined\",\n-\t\t\t\t\t DECL_ATTRIBUTES\n-\t\t\t\t\t   (current_function_decl)))\n-\t    {\n-\t      /* From C++14 onwards, we throw an exception on a negative\n-\t\t length size of an array; see above.  */\n-\n \t      /* We have to add 1 -- in the ubsan routine we generate\n \t\t LE_EXPR rather than LT_EXPR.  */\n \t      tree t = fold_build2 (PLUS_EXPR, TREE_TYPE (itype), itype,\n@@ -8730,10 +8717,6 @@ create_array_type_for_decl (tree name, tree type, tree size)\n       return error_mark_node;\n     }\n \n-  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n-      && (flag_iso || warn_vla > 0))\n-    pedwarn (input_location, OPT_Wvla, \"array of array of runtime bound\");\n-\n   /* Figure out the index type for the array.  */\n   if (size)\n     itype = compute_array_index_type (name, size, tf_warning_or_error);\n@@ -9984,13 +9967,6 @@ grokdeclarator (const cp_declarator *declarator,\n                    : G_(\"cannot declare pointer to qualified function type %qT\"),\n \t\t   type);\n \n-\t  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n-\t      && (flag_iso || warn_vla > 0))\n-\t    pedwarn (input_location, OPT_Wvla,\n-\t\t     declarator->kind == cdk_reference\n-\t\t     ? G_(\"reference to array of runtime bound\")\n-\t\t     : G_(\"pointer to array of runtime bound\"));\n-\n \t  /* When the pointed-to type involves components of variable size,\n \t     care must be taken to ensure that the size evaluation code is\n \t     emitted early enough to dominate all the possible later uses\n@@ -10341,11 +10317,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = error_mark_node;\n \t}\n \n-      if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n-\t  && (flag_iso || warn_vla > 0))\n-\tpedwarn (input_location, OPT_Wvla,\n-\t\t \"typedef naming array of runtime bound\");\n-\n       if (decl_context == FIELD)\n \tdecl = build_lang_decl (TYPE_DECL, unqualified_id, type);\n       else"}, {"sha": "b987ef15a0d0e044a454e89711ea2e92d9a48c1a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -3591,10 +3591,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       if (length_check)\n \t{\n \t  tree throw_call;\n-\t  if (array_of_runtime_bound_p (atype))\n-\t    throw_call = throw_bad_array_length ();\n-\t  else\n-\t    throw_call = throw_bad_array_new_length ();\n+\t  throw_call = throw_bad_array_new_length ();\n \t  length_check = build3 (COND_EXPR, void_type_node, length_check,\n \t\t\t\t throw_call, void_node);\n \t  finish_expr_stmt (length_check);"}, {"sha": "9eb9200632326bc5f3c13ef8184402ea681175bd", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -485,7 +485,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n     }\n   else if (variably_modified_type_p (type, NULL_TREE))\n     {\n-      error (\"capture of variable-size type %qT that is not a C++14 array \"\n+      error (\"capture of variable-size type %qT that is not an N3639 array \"\n \t     \"of runtime bound\", type);\n       if (TREE_CODE (type) == ARRAY_TYPE\n \t  && variably_modified_type_p (TREE_TYPE (type), NULL_TREE))"}, {"sha": "d8a9c5b1b32b32b9c9276aa33cbe68546b02c1e0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -12241,21 +12241,6 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  r = cp_build_reference_type (type, TYPE_REF_IS_RVALUE (t));\n \tr = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n \n-\tif (cxx_dialect >= cxx14\n-\t    && !(TREE_CODE (t) == REFERENCE_TYPE && REFERENCE_VLA_OK (t))\n-\t    && array_of_runtime_bound_p (type)\n-\t    && (flag_iso || warn_vla > 0))\n-\t  {\n-\t    if (complain & tf_warning_or_error)\n-\t      pedwarn\n-\t\t(input_location, OPT_Wvla,\n-\t\t code == REFERENCE_TYPE\n-\t\t ? G_(\"cannot declare reference to array of runtime bound\")\n-\t\t : G_(\"cannot declare pointer to array of runtime bound\"));\n-\t    else\n-\t      r = error_mark_node;\n-\t  }\n-\n \tif (r != error_mark_node)\n \t  /* Will this ever be needed for TYPE_..._TO values?  */\n \t  layout_type (r);"}, {"sha": "2270f3d27052d2bbd9d7a18123bc1c1e872bb27d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -396,12 +396,9 @@ get_tinfo_decl (tree type)\n \n   if (variably_modified_type_p (type, /*fn=*/NULL_TREE))\n     {\n-      if (array_of_runtime_bound_p (type))\n-\terror (\"typeid of array of runtime bound\");\n-      else\n-\terror (\"cannot create type information for type %qT because \"\n-\t       \"it involves types of variable size\",\n-\t       type);\n+      error (\"cannot create type information for type %qT because \"\n+\t     \"it involves types of variable size\",\n+\t     type);\n       return error_mark_node;\n     }\n "}, {"sha": "8a1de7e095c97fc92063cfaf9e5d4f8ae79d64b9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -7239,16 +7239,6 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t}\n     }\n \n-  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n-      && (flag_iso || warn_vla > 0))\n-    {\n-      if (complain & tf_warning_or_error)\n-\tpedwarn (input_location, OPT_Wvla,\n-\t\t \"taking decltype of array of runtime bound\");\n-      else\n-\treturn error_mark_node;\n-    }\n-\n   return type;\n }\n "}, {"sha": "6d6abe9020a31a9a4326f16f35c92a3b18f55377", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -920,7 +920,8 @@ build_array_of_n_type (tree elt, int n)\n   return build_cplus_array_type (elt, build_index_type (size_int (n - 1)));\n }\n \n-/* True iff T is a C++14 array of runtime bound (VLA).  */\n+/* True iff T is an N3639 array of runtime bound (VLA).  These were\n+   approved for C++14 but then removed.  */\n \n bool\n array_of_runtime_bound_p (tree t)"}, {"sha": "7b39816bdb1f6962fb6ed17cfb4c17cb60d34d57", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1578,16 +1578,6 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n       return value;\n     }\n \n-  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n-      && (flag_iso || warn_vla > 0))\n-    {\n-      if (complain)\n-\tpedwarn (input_location, OPT_Wvla,\n-\t\t \"taking sizeof array of runtime bound\");\n-      else\n-\treturn error_mark_node;\n-    }\n-\n   return c_sizeof_or_alignof_type (input_location, complete_type (type),\n \t\t\t\t   op == SIZEOF_EXPR, false,\n \t\t\t\t   complain);\n@@ -5540,18 +5530,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     }\n \n   if (argtype != error_mark_node)\n-    {\n-      if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (argtype)\n-\t  && (flag_iso || warn_vla > 0))\n-\t{\n-\t  if (complain & tf_warning_or_error)\n-\t    pedwarn (input_location, OPT_Wvla,\n-\t\t     \"taking address of array of runtime bound\");\n-\t  else\n-\t    return error_mark_node;\n-\t}\n-      argtype = build_pointer_type (argtype);\n-    }\n+    argtype = build_pointer_type (argtype);\n \n   /* In a template, we are processing a non-dependent expression\n      so we can just form an ADDR_EXPR with the correct type.  */"}, {"sha": "d81885152c57a278cc359fa3c442b3b6c76a99c5", "filename": "gcc/testsuite/g++.dg/cpp0x/Wattributes1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -5,4 +5,4 @@\n #include <new>\n __attribute__((visibility(\"hidden\")))void*operator new(std::size_t); // { dg-warning \"visibility attribute ignored\" }\n \n-// { dg-message \"previous declaration\" \"\" { target *-*-* } 128 }\n+// { dg-message \"previous declaration\" \"\" { target *-*-* } 111 }"}, {"sha": "8fd267f4409f5a25aa90594c2e36e8d113bb4b15", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,6 +1,6 @@\n // PR c++/42059\n // { dg-do compile { target c++11 } }\n-// { dg-options \"\" { target { ! c++14 } } }\n+// { dg-options \"\" }\n \n void\n foo (int i)"}, {"sha": "ec931891173ec47910d64e5699fd9b7e1c538bfc", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11-neg.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11-neg.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++11_only } }\n-// { dg-options \"-pedantic-errors\" }\n \n // C++14 features:\n "}, {"sha": "67f75a725482aa386c13c7c0013569d9ef5edf3c", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx11.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx11.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -133,6 +133,14 @@\n #  error \"__cpp_binary_literals != 201304\"\n #endif\n \n+//  GNU VLA support:\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#elif __cpp_runtime_arrays != 198712\n+#  error \"__cpp_runtime_arrays != 198712\"\n+#endif\n+\n //  C++11 attributes:\n \n #ifdef __has_cpp_attribute"}, {"sha": "d271752ec10c06ae43e39be99bb0697aa0a33097", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -187,12 +187,12 @@\n #  error \"__cpp_sized_deallocation\"\n #endif\n \n-//  Array TS features:\n+//  GNU VLA support:\n \n #ifndef __cpp_runtime_arrays\n #  error \"__cpp_runtime_arrays\"\n-#elif __cpp_runtime_arrays != 201304\n-#  error \"__cpp_runtime_arrays != 201304\"\n+#elif __cpp_runtime_arrays != 198712\n+#  error \"__cpp_runtime_arrays != 198712\"\n #endif\n \n //  C++11 attributes:"}, {"sha": "54f42e1841a4cd9771eba991068c27e6dd7bbc19", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98-neg.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98-neg.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,4 @@\n // { dg-do compile { target c++98_only } }\n-// { dg-options \"-ansi\" }\n \n //  C++11 features:\n "}, {"sha": "d15e7aadcee1118e4bc0dac471f07803b2a7003f", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx98.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx98.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -22,3 +22,11 @@\n #elif  __cpp_binary_literals != 201304\n #  error \"__cpp_binary_literals != 201304\"\n #endif\n+\n+//  GNU VLA support:\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#elif __cpp_runtime_arrays != 198712\n+#  error \"__cpp_runtime_arrays != 198712\"\n+#endif"}, {"sha": "e313dd8710315faaad444916bfaf2b23c968e878", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-vla.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-vla.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-vla.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-vla.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -0,0 +1,5 @@\n+// We shouldn't define this feature macro when we complain about VLAs.\n+\n+#ifdef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#endif"}, {"sha": "4cabccb27b7421d9cfc81da48d36faefe704de71", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-vla1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // PR c++/59271\n // { dg-do compile { target c++14 } }\n+// { dg-options \"-Wno-vla\" }\n \n extern \"C\" int printf (const char *, ...);\n "}, {"sha": "8f5709dbc38500e4ce6dbf02b4fc8115153a8f43", "filename": "gcc/testsuite/g++.dg/cpp1y/vla-initlist1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,4 +1,5 @@\n-// { dg-do run { target c++14 } }\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n #include <initializer_list>\n "}, {"sha": "cea17ef73754547f6942cdfb0f349def74548de9", "filename": "gcc/testsuite/g++.dg/cpp1y/vla1.C", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,40 +0,0 @@\n-// { dg-do compile { target c++14 } }\n-\n-#include <typeinfo>\n-\n-void f(int n)\n-{\n-  int a[n];\n-  int aa[n][n];\t\t\t// { dg-error \"\" }\n-  &a;\t\t\t\t// { dg-error \"\" }\n-  sizeof a;\t\t\t// { dg-error \"\" }\n-  typeid(a);\t\t\t// { dg-error \"\" }\n-  decltype(a) a2;\t\t// { dg-error \"\" }\n-  typedef int at[n];\t\t// { dg-error \"\" }\n-  int (*p)[n];\t\t\t// { dg-error \"\" }\n-  int (&r)[n] = a;\t\t// { dg-error \"\" }\n-  struct A\n-  {\n-    int a[n];\t\t\t// { dg-error \"\" }\n-  };\n-}\n-\n-template <class T>\n-void g(int n)\n-{\n-  int a[n];\n-  int aa[n][n];\t\t\t// { dg-error \"\" }\n-  &a;\t\t\t\t// { dg-error \"\" }\n-  sizeof a;\t\t\t// { dg-error \"\" }\n-  typeid(a);\t\t\t// { dg-error \"\" }\n-  decltype(a) a2;\t\t// { dg-error \"\" }\n-  typedef int at[n];\t\t// { dg-error \"\" }\n-  int (*p)[n];\t\t\t// { dg-error \"\" }\n-  int (&r)[n] = a;\t\t// { dg-error \"\" }\n-  struct A\n-  {\n-    int a[n];\t\t\t// { dg-error \"\" }\n-  };\n-}\n-\n-template void g<int>(int);"}, {"sha": "f81ab9bd1cd35520c0518278fd2d4144129ea754", "filename": "gcc/testsuite/g++.dg/cpp1y/vla10.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // PR c++/57402\n-// { dg-do compile { target c++14 } }\n+// { dg-do run }\n+// { dg-options \"\" }\n \n int i = 2;\n "}, {"sha": "ca2263528794c00204be622fb91c379a5b5342a7", "filename": "gcc/testsuite/g++.dg/cpp1y/vla11.C", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,8 +0,0 @@\n-// PR c++/60251\n-// { dg-do compile { target c++14 } }\n-\n-void foo(int n)\n-{\n-  int x[n];\n-  [&x]() { decltype(x) y; }; // { dg-error \"decltype of array of runtime bound\" }\n-}"}, {"sha": "7fc9987367cf16eab34fa4d80d0c4a5b30d3f067", "filename": "gcc/testsuite/g++.dg/cpp1y/vla12.C", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,7 +0,0 @@\n-// PR c++/60250\n-// { dg-do compile { target c++14 } }\n-\n-template<typename> void foo()\n-{\n-  typedef int T[ ([](){ return 1; }()) ]; // { dg-error \"runtime bound\" }\n-}"}, {"sha": "f5dab26c62158544e2d62f0b2c405d17601b3fe9", "filename": "gcc/testsuite/g++.dg/cpp1y/vla13.C", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,8 +0,0 @@\n-// PR c++/60227\n-// { dg-do compile { target c++14 } }\n-\n-void foo(int n)\n-{\n-  int a[n];\n-  int (&r)[n] = {};\t\t// { dg-error \"\" }\n-}"}, {"sha": "07c300884a37ef43ab248dbed22a3a4d1b0c813e", "filename": "gcc/testsuite/g++.dg/cpp1y/vla2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // N3639 allows initialization and capture of VLAs\n-// { dg-do run { target c++14 } }\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n void f(int n)\n {"}, {"sha": "a3d8adb05c95149de8258dc5b6eff06e7ae6a4cf", "filename": "gcc/testsuite/g++.dg/cpp1y/vla3.C", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C?ref=8c7e9a616ecd878f0d58f19e65fe7a5b55a2b183", "patch": "@@ -1,29 +0,0 @@\n-// Test for throwing bad_array_length on invalid array length\n-// { dg-do run { target c++14 } }\n-\n-#include <new>\n-\n-int f(int i)\n-{\n-  int ar[i]{1,2,3,4};\n-  return ar[i-1];\n-}\n-\n-void g(int i)\n-{\n-  int ar[i];\n-  ar[0] = 42;\n-}\n-\n-int main()\n-{\n-  int ok = 0;\n-  f(4);\t\t\t\t// OK\n-  try { f(3); }\t\t\t// too small\n-  catch (std::bad_array_length) { ++ok; }\n-  try { g(-24); }\t\t// negative\n-  catch (std::bad_array_length) { ++ok; }\n-\n-  if (ok != 2)\n-    __builtin_abort ();\n-}"}, {"sha": "74bf66a07d9dcd1fc733859112f377b834d143ff", "filename": "gcc/testsuite/g++.dg/cpp1y/vla4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // Test for range-based for with VLAs.\n-// { dg-do run { target c++14 } }\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n #include <new>\n "}, {"sha": "6bfbece9174ca19075185c3792d41a753fc0fc63", "filename": "gcc/testsuite/g++.dg/cpp1y/vla5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // PR c++/55149\n-// { dg-do compile { target c++14 } }\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n void test(int n) {\n   int r[n];"}, {"sha": "68cafe585e97da75f54d21030847405295327893", "filename": "gcc/testsuite/g++.dg/cpp1y/vla8.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // PR c++/55149\n-// { dg-do compile { target c++14 } }\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n template<unsigned int TA>\n  struct SA"}, {"sha": "939de30a3c1765e6e35ec3d26b681eb4d101e707", "filename": "gcc/testsuite/g++.dg/cpp1y/vla9.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,5 +1,6 @@\n // PR c++/57408\n-// { dg-do compile { target c++14 } }\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-vla\" }\n \n template<typename Callable>\n   struct Impl\n@@ -19,7 +20,7 @@ extern \"C\" int printf(const char*, ...);\n \n int main(){\n     int y = 2;\n-    float fa[2][y];\t    // { dg-error \"array of array of runtime bound\" }\n+    float fa[2][y];\n     fa[0][0]=0.8;\n     fa[0][1]=1.8;\n     auto fx=[&](){"}, {"sha": "e733f481f3e32556bd55881c2f6280787b072eb0", "filename": "gcc/testsuite/g++.dg/ext/vla11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,6 +1,6 @@\n // Test that auto works with VLAs.\n // { dg-do compile { target c++11 } }\n-// { dg-options \"\" { target { ! c++14 } } }\n+// { dg-options \"-Wno-vla\" }\n \n void bar(int n)\n {"}, {"sha": "0c125ecd731a1b10ef3e114e9ef2e18a7a545c41", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -1,3 +1,10 @@\n+2014-12-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/new (bad_array_length): Move...\n+\t* bad_array_length.cc: ...here.\n+\t* cxxabi.h, eh_aux_runtime.cc (__cxa_throw_bad_array_new_length): Also\n+\tmove to bad_array_length.cc.\n+\n 2014-12-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/30_threads/condition_variable/members/3.cc: Only use"}, {"sha": "0230a381a3ba632986248311cc7bd0886557272e", "filename": "libstdc++-v3/libsupc++/bad_array_length.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_length.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_length.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fbad_array_length.cc?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -25,6 +25,20 @@\n \n namespace std \n {\n+// From N3639.  This was voted in and then back out of C++14, and is now\n+// just here for backward link compatibility with code built with 4.9.\n+class bad_array_length : public bad_alloc\n+{\n+public:\n+  bad_array_length() throw() { };\n+\n+  // This declaration is not useless:\n+  // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n+  virtual ~bad_array_length() throw();\n+\n+  // See comment in eh_exception.cc.\n+  virtual const char* what() const throw();\n+};\n \n bad_array_length::~bad_array_length() _GLIBCXX_USE_NOEXCEPT { }\n \n@@ -33,3 +47,11 @@ bad_array_length::what() const _GLIBCXX_USE_NOEXCEPT\n { return \"std::bad_array_length\"; }\n \n } // namespace std\n+\n+namespace __cxxabiv1 {\n+\n+extern \"C\" void\n+__cxa_throw_bad_array_length ()\n+{ _GLIBCXX_THROW_OR_ABORT(std::bad_array_length()); }\n+\n+} // namespace __cxxabiv1"}, {"sha": "36048f33dc03cf53d80e50dac3a9fb93a0c96bce", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -154,9 +154,6 @@ namespace __cxxabiv1\n   void\n   __cxa_throw_bad_array_new_length() __attribute__((__noreturn__));\n \n-  void\n-  __cxa_throw_bad_array_length() __attribute__((__noreturn__));\n-\n   /**\n    *  @brief Demangling routine.\n    *  ABI-mandated entry point in the C++ runtime library for demangling."}, {"sha": "1846aa2c205022fc4f3513cd977c4009462f5ce0", "filename": "libstdc++-v3/libsupc++/eh_aux_runtime.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -40,7 +40,3 @@ __cxxabiv1::__cxa_bad_typeid ()\n extern \"C\" void\n __cxxabiv1::__cxa_throw_bad_array_new_length ()\n { _GLIBCXX_THROW_OR_ABORT(std::bad_array_new_length()); }\n-\n-extern \"C\" void\n-__cxxabiv1::__cxa_throw_bad_array_length ()\n-{ _GLIBCXX_THROW_OR_ABORT(std::bad_array_length()); }"}, {"sha": "76eddfcb03844e11044acdbe99c068480a41c6b0", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a073b2515f43d69404f14cd4a66eaa5301c734/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=94a073b2515f43d69404f14cd4a66eaa5301c734", "patch": "@@ -79,23 +79,6 @@ namespace std\n   };\n #endif\n \n-  // We throw this exception for GNU VLAs of negative length in all C++\n-  // dialects, so declare it if we aren't in strict conformance mode.\n-#if __cplusplus > 201103L || !defined(__STRICT_ANSI__)\n-  class bad_array_length : public bad_alloc\n-  {\n-  public:\n-    bad_array_length() throw() { };\n-\n-    // This declaration is not useless:\n-    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n-    virtual ~bad_array_length() throw();\n-\n-    // See comment in eh_exception.cc.\n-    virtual const char* what() const throw();\n-  };\n-#endif\n-\n   struct nothrow_t { };\n \n   extern const nothrow_t nothrow;"}]}