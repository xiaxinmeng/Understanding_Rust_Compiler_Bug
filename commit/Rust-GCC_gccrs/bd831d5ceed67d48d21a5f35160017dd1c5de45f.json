{"sha": "bd831d5ceed67d48d21a5f35160017dd1c5de45f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4MzFkNWNlZWQ2N2Q0OGQyMWE1ZjM1MTYwMDE3ZGQxYzVkZTQ1Zg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-06T12:48:49Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-06T12:48:49Z"}, "message": "optabs.c (prepare_float_lib_cmp): Attach a REG_EQUAL note describing the return value of the comparison libcall...\n\n\n\t* optabs.c (prepare_float_lib_cmp):  Attach a REG_EQUAL note\n\tdescribing the return value of the comparison libcall to the\n\tREG_RETVAL instruction of the emitted sequence.\n\nFrom-SVN: r72148", "tree": {"sha": "f9815f2246bcd803eeec24f207ab139f1ba15042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9815f2246bcd803eeec24f207ab139f1ba15042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd831d5ceed67d48d21a5f35160017dd1c5de45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd831d5ceed67d48d21a5f35160017dd1c5de45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd831d5ceed67d48d21a5f35160017dd1c5de45f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd831d5ceed67d48d21a5f35160017dd1c5de45f/comments", "author": null, "committer": null, "parents": [{"sha": "9ebfd78bad3cde0cb92ae3261314546fce5e949e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebfd78bad3cde0cb92ae3261314546fce5e949e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebfd78bad3cde0cb92ae3261314546fce5e949e"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "4b4130637bcef27d9071bc5601fde64466bdbc8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd831d5ceed67d48d21a5f35160017dd1c5de45f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd831d5ceed67d48d21a5f35160017dd1c5de45f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd831d5ceed67d48d21a5f35160017dd1c5de45f", "patch": "@@ -1,3 +1,9 @@\n+2003-10-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* optabs.c (prepare_float_lib_cmp):  Attach a REG_EQUAL note\n+\tdescribing the return value of the comparison libcall to the\n+\tREG_RETVAL instruction of the emitted sequence.\n+\n 2003-10-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/12215"}, {"sha": "7f8affc0ddf7aa08c05268b12df3d24426552d21", "filename": "gcc/optabs.c", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd831d5ceed67d48d21a5f35160017dd1c5de45f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd831d5ceed67d48d21a5f35160017dd1c5de45f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bd831d5ceed67d48d21a5f35160017dd1c5de45f", "patch": "@@ -3877,6 +3877,7 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n   rtx y = protect_from_queue (*py, 0);\n   enum machine_mode orig_mode = GET_MODE (x);\n   enum machine_mode mode;\n+  rtx before_call;\n   rtx libfunc = 0;\n   rtx result;\n \n@@ -3903,12 +3904,97 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n       y = convert_to_mode (mode, y, 0);\n     }\n \n+  before_call = get_last_insn ();\n+\n+  result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n+\t\t\t\t    word_mode, 2, x, mode, y, mode);\n+\n+  /* If we're optimizing attach a REG_EQUAL note describing the semantics\n+     of the libcall to the RTL.  The allows the RTL optimizers to delete\n+     the libcall if the condition can be determined at compile-time.  */\n+  if (optimize\n+      && ! side_effects_p (x)\n+      && ! side_effects_p (y))\n+    {\n+      /* Search backwards through the insns emitted above looking for\n+\t the instruction with the REG_RETVAL note.  */\n+      rtx last = get_last_insn ();\n+      while (last != before_call)\n+\t{\n+\t  if (find_reg_note (last, REG_RETVAL, NULL))\n+\t    break;\n+\t  last = PREV_INSN (last);\n+\t}\n+\n+      if (last != before_call)\n+\t{\n+\t  rtx equiv;\n+\t  if (comparison == UNORDERED)\n+\t    {\n+\t      rtx temp = simplify_gen_relational (NE, word_mode,\n+\t\t\t\t\t\t  mode, x, x);\n+\t      equiv = simplify_gen_relational (NE, word_mode,\n+\t\t\t\t\t       mode, y, y);\n+\t      equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode,\n+\t\t\t\t\t    word_mode, temp,\n+\t\t\t\t\t    const_true_rtx, equiv);\n+\t    }\n+\t  else\n+\t    {\n+\t      equiv = simplify_gen_relational (comparison, word_mode,\n+\t\t\t\t\t       mode, x, y);\n+\t      if (! FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n+\t\t{\n+\t\t  rtx true_rtx, false_rtx;\n+\n+\t\t  switch (comparison)\n+\t\t    {\n+\t\t    case EQ:\n+\t\t      true_rtx = const0_rtx;\n+\t\t      false_rtx = const_true_rtx;\n+\t\t      break;\n+\n+\t\t    case NE:\n+\t\t      true_rtx = const_true_rtx;\n+\t\t      false_rtx = const0_rtx;\n+\t\t      break;\n+\n+\t\t    case GT:\n+\t\t      true_rtx = const1_rtx;\n+\t\t      false_rtx = const0_rtx;\n+\t\t      break;\n+\n+\t\t    case GE:\n+\t\t      true_rtx = const0_rtx;\n+\t\t      false_rtx = constm1_rtx;\n+\t\t      break;\n+\n+\t\t    case LT:\n+\t\t      true_rtx = constm1_rtx;\n+\t\t      false_rtx = const0_rtx;\n+\t\t      break;\n+\n+\t\t    case LE:\n+\t\t      true_rtx = const0_rtx;\n+\t\t      false_rtx = const1_rtx;\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      abort ();\n+\t\t    }\n+\t\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode,\n+\t\t\t\t\t\tword_mode, equiv,\n+\t\t\t\t\t\ttrue_rtx, false_rtx);\n+\t\t}\n+\t    }\n+\t  set_unique_reg_note (last, REG_EQUAL, equiv);\n+\t}\n+    }\n+\n   if (comparison == UNORDERED\n       || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n     comparison = NE;\n \n-  result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n-\t\t\t\t    word_mode, 2, x, mode, y, mode);\n   *px = result;\n   *py = const0_rtx;\n   *pmode = word_mode;"}]}