{"sha": "a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhZWExNzY0ZTE2ZTEzMmYyY2U2ZmMwYjRlMWI5ZWRiZmVmZTRhZg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T10:18:17Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T10:18:17Z"}, "message": "configure.in: Update to autoconf 2.59; clean up slightly.\n\n2004-04-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n\n\t* configure.in: Update to autoconf 2.59; clean up slightly.\n\t* acinclude.m4: Update to autoconf 2.59.\n\t* aclocal.m4: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r80544", "tree": {"sha": "58faef984a563a8bde14477b5ab1beeb653ad085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58faef984a563a8bde14477b5ab1beeb653ad085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/comments", "author": null, "committer": null, "parents": [{"sha": "be9125155e0a003a35f2b035d901f48a5f89deb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9125155e0a003a35f2b035d901f48a5f89deb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9125155e0a003a35f2b035d901f48a5f89deb0"}], "stats": {"total": 6223, "additions": 4649, "deletions": 1574}, "files": [{"sha": "a55a024a06c6f981f8ea516c70ba2340eccbb3b7", "filename": "zlib/ChangeLog.gcj", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog.gcj?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "patch": "@@ -1,3 +1,11 @@\n+2004-04-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* configure.in: Update to autoconf 2.59; clean up slightly.\n+\t* acinclude.m4: Update to autoconf 2.59.\n+\t* aclocal.m4: Regenerate. \n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2004-01-14  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* configure.in: Add in AC_PREREQ(2.13)"}, {"sha": "45418aac1bce37dd74ad78a782b49534af6320c0", "filename": "zlib/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FMakefile.in?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "patch": "@@ -189,7 +189,7 @@ aclocal.m4 configure configure.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libz_a_SOURCES) $(libzgcj_convenience_la_SOURCES)\n OBJECTS = $(libz_a_OBJECTS) $(libzgcj_convenience_la_OBJECTS)"}, {"sha": "9a5f5485716a5f17b16356b128be5637f5212ec6", "filename": "zlib/acinclude.m4", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Facinclude.m4?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "patch": "@@ -1,43 +1,4 @@\n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-dnl Fool anybody using AC_PROG_CC.\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n-\n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-])\n-\n+sinclude(../config/no-executables.m4)\n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4\n dnl AM_PROG_LIBTOOL into aclocal.m4, while still arranging for automake"}, {"sha": "fbf3500117f6192fde75dd6cd961c215a5a9c95e", "filename": "zlib/aclocal.m4", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Faclocal.m4?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "patch": "@@ -10,46 +10,7 @@ dnl but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n dnl PARTICULAR PURPOSE.\n \n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-dnl Fool anybody using AC_PROG_CC.\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n-\n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-])\n-\n+sinclude(../config/no-executables.m4)\n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4\n dnl AM_PROG_LIBTOOL into aclocal.m4, while still arranging for automake"}, {"sha": "cc5bef67e7561e2f0f8f59fca959d276afe5b6d3", "filename": "zlib/configure", "status": "modified", "additions": 4613, "deletions": 1464, "changes": 6077, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af"}, {"sha": "e716daf9ff678fe8ba57b619e7cdc70fdfd38076", "filename": "zlib/configure.in", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af/zlib%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure.in?ref=a8aea1764e16e132f2ce6fc0b4e1b9edbfefe4af", "patch": "@@ -1,7 +1,8 @@\n dnl Process this with autoconf to create configure\n \n-AC_PREREQ(2.13)\n-AC_INIT(zlib.h)\n+AC_PREREQ(2.59)\n+AC_INIT\n+AC_CONFIG_SRCDIR([zlib.h])\n \n # This works around the fact that libtool configuration may change LD\n # for this particular configuration, but some shells, instead of\n@@ -44,6 +45,14 @@ dnl We use these options to decide which functions to include.\n AC_ARG_WITH(target-subdir,\n [  --with-target-subdir=SUBDIR\n                           configuring in a subdirectory])\n+\n+if test -z \"$with_target_subdir\" || test \"$with_target_subdir\" = \".\"; then\n+   COMPPATH=.\n+else\n+   COMPPATH=..\n+fi\n+AC_SUBST(COMPPATH)\n+\n AC_ARG_WITH(cross-host,\n [  --with-cross-host=HOST  configuring with a cross compiler])\n \n@@ -59,29 +68,12 @@ AC_ARG_ENABLE(multilib,\n AC_ARG_WITH(system-zlib,\n [  --with-system-zlib      use installed libz])\n \n-LIB_AC_PROG_CC\n-# We need AC_EXEEXT to keep automake happy in cygnus mode.  However,\n-# at least currently, we never actually build a program, so we never\n-# need to use $(EXEEXT).  Moreover, the test for EXEEXT normally\n-# fails, because we are probably configuring with a cross compiler\n-# which cant create executables.  So we include AC_EXEEXT to keep\n-# automake happy, but we dont execute it, since we dont care about\n-# the result.\n-if false; then\n-  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n-  # to nothing, so nothing would remain between `then' and `fi' if it\n-  # were not for the `:' below.\n-  :\n-  AC_EXEEXT\n-fi\n-AM_PROG_LIBTOOL\n+# Make sure we don't test executables when making cross-tools.\n+GCC_NO_EXECUTABLES\n \n-if test -z \"$with_target_subdir\" || test \"$with_target_subdir\" = \".\"; then\n-   COMPPATH=.\n-else\n-   COMPPATH=..\n-fi\n-AC_SUBST(COMPPATH)\n+AC_PROG_CC\n+\n+AM_PROG_LIBTOOL\n \n # Find CPP now so that any conditional tests below won't do it and\n # thereby make the resulting definitions conditional.\n@@ -142,12 +134,14 @@ else\n   multilib_arg=\n fi\n \n-AC_OUTPUT(Makefile,\n-[if test -n \"$CONFIG_FILES\"; then\n+AC_CONFIG_FILES([Makefile])\n+\n+AC_CONFIG_COMMANDS([default],\n+[[if test -n \"$CONFIG_FILES\"; then\n   LD=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n   ac_file=Makefile . ${zlib_basedir}/../config-ml.in\n-fi],\n-srcdir=${srcdir}\n+fi]],\n+[[srcdir=${srcdir}\n host=${host}\n target=${target}\n with_multisubdir=${with_multisubdir}\n@@ -157,4 +151,6 @@ zlib_basedir=${zlib_basedir}\n CC=\"${CC}\"\n CXX=\"${CXX}\"\n ORIGINAL_LD_FOR_MULTILIBS=\"${ORIGINAL_LD_FOR_MULTILIBS}\"\n-)\n+]])\n+\n+AC_OUTPUT"}]}