{"sha": "8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5NmEzMTJhMGRiYmZiODRmNTE2MmE4YTFjY2E1NTNlZGFjNmZhOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-04-04T16:10:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-04-04T16:10:52Z"}, "message": "config.gcc (extra_headers): Add wmmintrin.h for x86 and x86-64.\n\ngcc/\n\n2008-04-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc (extra_headers): Add wmmintrin.h for x86 and x86-64.\n\n\t* config/i386/cpuid.h (bit_AES): New.\n\t(bit_PCLMUL): Likewise.\n\n\t* config/i386/i386.c (pta_flags): Add PTA_AES and PTA_PCLMUL.\n\t(override_options): Handle PTA_AES and PTA_PCLMUL.  Enable\n\tSSE2 if AES or PCLMUL is enabled.\n\t(ix86_builtins): Add IX86_BUILTIN_AESENC128,\n\tIX86_BUILTIN_AESENCLAST128, IX86_BUILTIN_AESDEC128,\n\tIX86_BUILTIN_AESDECLAST128, IX86_BUILTIN_AESIMC128,\n\tIX86_BUILTIN_AESKEYGENASSIST128 and IX86_BUILTIN_PCLMULQDQ128.\n\t(bdesc_sse_3arg): Add IX86_BUILTIN_PCLMULQDQ128.\n\t(bdesc_2arg): Add IX86_BUILTIN_AESENC128,\n\tIX86_BUILTIN_AESENCLAST128, IX86_BUILTIN_AESDEC128,\n\tIX86_BUILTIN_AESDECLAST128 and IX86_BUILTIN_AESKEYGENASSIST128.\n\t(bdesc_1arg): Add IX86_BUILTIN_AESIMC128.\n\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_aesenc128,\n\t__builtin_ia32_aesenclast128, __builtin_ia32_aesdec128,\n\t__builtin_ia32_aesdeclast128,__builtin_ia32_aesimc128,\n\t__builtin_ia32_aeskeygenassist128 and\n\t__builtin_ia32_pclmulqdq128.\n\t* config/i386/i386.c (ix86_expand_binop_imm_builtin): New.\n\t(ix86_expand_builtin): Use it for IX86_BUILTIN_PSLLDQI128 and\n\tIX86_BUILTIN_PSRLDQI128.  Handle IX86_BUILTIN_AESKEYGENASSIST128.\n\n\t* config/i386/i386.h (TARGET_AES): New.\n\t(TARGET_PCLMUL): Likewise.\n\t(TARGET_CPU_CPP_BUILTINS): Handle TARGET_AES and TARGET_PCLMUL.\n\n\t* config/i386/i386.md (UNSPEC_AESENC): New.\n\t(UNSPEC_AESENCLAST): Likewise.\n\t(UNSPEC_AESDEC): Likewise.\n\t(UNSPEC_AESDECLAST): Likewise.\n\t(UNSPEC_AESIMC): Likewise.\n\t(UNSPEC_AESKEYGENASSIST): Likewise.\n\t(UNSPEC_PCLMULQDQ): Likewise.\n\n\t* config/i386/i386.opt (maes): New.\n\t(mpclmul): Likewise.\n\n\t* config/i386/sse.md (aesenc): New pattern.\n\t(aesenclast): Likewise.\n\t(aesdec): Likewise.\n\t(aesdeclast): Likewise.\n\t(aesimc): Likewise.\n\t(aeskeygenassist): Likewise.\n\t(pclmulqdq): Likewise.\n\n\t* config/i386/wmmintrin.h: New.\n\n\t* doc/extend.texi: Document AES and PCLMUL built-in function.\n\n\t* doc/invoke.texi: Document -maes and -mpclmul.\n\ngcc/testsuite/\n\n2008-04-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* g++.dg/other/i386-2.C: Include <wmmintrin.h>.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\n\t* gcc.target/i386/aes-check.h: New.\n\t* gcc.target/i386/aesdec.c: Likewise.\n\t* gcc.target/i386/aesdeclast.c: Likewise.\n\t* gcc.target/i386/aesenc.c: Likewise.\n\t* gcc.target/i386/aesenclast.c: Likewise.\n\t* gcc.target/i386/aesimc.c: Likewise.\n\t* gcc.target/i386/aeskeygenassist.c: Likewise.\n\t* gcc.target/i386/pclmulqdq.c: Likewise.\n\t* gcc.target/i386/pclmul-check.h: Likewise.\n\n\t* gcc.target/i386/i386.exp (check_effective_target_aes): New.\n\t(check_effective_target_pclmul): Likewise.\n\nFrom-SVN: r133902", "tree": {"sha": "25211283997297a5a20cd8a102186f545171ee39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25211283997297a5a20cd8a102186f545171ee39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e892493899b225a21746d24221d7dc45fc19fed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e892493899b225a21746d24221d7dc45fc19fed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e892493899b225a21746d24221d7dc45fc19fed2"}], "stats": {"total": 1080, "additions": 1041, "deletions": 39}, "files": [{"sha": "09a38f60d4012469a9cf9a7bc255ffbafaedf829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,3 +1,60 @@\n+2008-04-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc (extra_headers): Add wmmintrin.h for x86 and x86-64.\n+\n+\t* config/i386/cpuid.h (bit_AES): New.\n+\t(bit_PCLMUL): Likewise.\n+\n+\t* config/i386/i386.c (pta_flags): Add PTA_AES and PTA_PCLMUL.\n+\t(override_options): Handle PTA_AES and PTA_PCLMUL.  Enable\n+\tSSE2 if AES or PCLMUL is enabled.\n+\t(ix86_builtins): Add IX86_BUILTIN_AESENC128,\n+\tIX86_BUILTIN_AESENCLAST128, IX86_BUILTIN_AESDEC128,\n+\tIX86_BUILTIN_AESDECLAST128, IX86_BUILTIN_AESIMC128,\n+\tIX86_BUILTIN_AESKEYGENASSIST128 and IX86_BUILTIN_PCLMULQDQ128.\n+\t(bdesc_sse_3arg): Add IX86_BUILTIN_PCLMULQDQ128.\n+\t(bdesc_2arg): Add IX86_BUILTIN_AESENC128,\n+\tIX86_BUILTIN_AESENCLAST128, IX86_BUILTIN_AESDEC128,\n+\tIX86_BUILTIN_AESDECLAST128 and IX86_BUILTIN_AESKEYGENASSIST128.\n+\t(bdesc_1arg): Add IX86_BUILTIN_AESIMC128.\n+\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_aesenc128,\n+\t__builtin_ia32_aesenclast128, __builtin_ia32_aesdec128,\n+\t__builtin_ia32_aesdeclast128,__builtin_ia32_aesimc128,\n+\t__builtin_ia32_aeskeygenassist128 and\n+\t__builtin_ia32_pclmulqdq128.\n+\t* config/i386/i386.c (ix86_expand_binop_imm_builtin): New.\n+\t(ix86_expand_builtin): Use it for IX86_BUILTIN_PSLLDQI128 and\n+\tIX86_BUILTIN_PSRLDQI128.  Handle IX86_BUILTIN_AESKEYGENASSIST128.\n+\n+\t* config/i386/i386.h (TARGET_AES): New.\n+\t(TARGET_PCLMUL): Likewise.\n+\t(TARGET_CPU_CPP_BUILTINS): Handle TARGET_AES and TARGET_PCLMUL.\n+\n+\t* config/i386/i386.md (UNSPEC_AESENC): New.\n+\t(UNSPEC_AESENCLAST): Likewise.\n+\t(UNSPEC_AESDEC): Likewise.\n+\t(UNSPEC_AESDECLAST): Likewise.\n+\t(UNSPEC_AESIMC): Likewise.\n+\t(UNSPEC_AESKEYGENASSIST): Likewise.\n+\t(UNSPEC_PCLMULQDQ): Likewise.\n+\n+\t* config/i386/i386.opt (maes): New.\n+\t(mpclmul): Likewise.\n+\n+\t* config/i386/sse.md (aesenc): New pattern.\n+\t(aesenclast): Likewise.\n+\t(aesdec): Likewise.\n+\t(aesdeclast): Likewise.\n+\t(aesimc): Likewise.\n+\t(aeskeygenassist): Likewise.\n+\t(pclmulqdq): Likewise.\n+\n+\t* config/i386/wmmintrin.h: New.\n+\n+\t* doc/extend.texi: Document AES and PCLMUL built-in function.\n+\n+\t* doc/invoke.texi: Document -maes and -mpclmul.\n+\n 2008-04-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* function.c (free_after_parsing): Replace with"}, {"sha": "bc440c9f045bd0d51e9d702364b462e386a8c483", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -309,13 +309,15 @@ i[34567]86-*-*)\n \tcpu_type=i386\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n-\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\"\n+\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n+\t\t       wmmintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n-\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\"\n+\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n+\t\t       wmmintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "ce406c5404a14c96198639d0d6afd5c98d5fc38b", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -33,11 +33,13 @@\n \n /* %ecx */\n #define bit_SSE3\t(1 << 0)\n+#define bit_PCLMUL\t(1 << 1)\n #define bit_SSSE3\t(1 << 9)\n #define bit_CMPXCHG16B\t(1 << 13)\n #define bit_SSE4_1\t(1 << 19)\n #define bit_SSE4_2\t(1 << 20)\n #define bit_POPCNT\t(1 << 23)\n+#define bit_AES\t\t(1 << 25)\n \n /* %edx */\n #define bit_CMPXCHG8B\t(1 << 8)"}, {"sha": "14aac4689188c7314c5c9127716214822a371be5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 106, "deletions": 27, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -2078,7 +2078,9 @@ override_options (void)\n       PTA_NO_SAHF = 1 << 13,\n       PTA_SSE4_1 = 1 << 14,\n       PTA_SSE4_2 = 1 << 15,\n-      PTA_SSE5 = 1 << 16\n+      PTA_SSE5 = 1 << 16,\n+      PTA_AES = 1 << 17,\n+      PTA_PCLMUL = 1 << 18\n     };\n \n   static struct pta\n@@ -2385,6 +2387,10 @@ override_options (void)\n \t  x86_prefetch_sse = true;\n \tif (!(TARGET_64BIT && (processor_alias_table[i].flags & PTA_NO_SAHF)))\n \t  x86_sahf = true;\n+\tif (processor_alias_table[i].flags & PTA_AES)\n+\t  x86_aes = true;\n+\tif (processor_alias_table[i].flags & PTA_PCLMUL)\n+\t  x86_pclmul = true;\n \n \tbreak;\n       }\n@@ -2428,6 +2434,14 @@ override_options (void)\n   if (i == pta_size)\n     error (\"bad value (%s) for -mtune= switch\", ix86_tune_string);\n \n+  /* Enable SSE2 if AES or PCLMUL is enabled.  */\n+  if ((x86_aes || x86_pclmul)\n+      && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SSE2))\n+    {\n+      ix86_isa_flags |= OPTION_MASK_ISA_SSE2_SET;\n+      ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_SET;\n+    }\n+\n   ix86_tune_mask = 1u << ix86_tune;\n   for (i = 0; i < X86_TUNE_LAST; ++i)\n     ix86_tune_features[i] &= ix86_tune_mask;\n@@ -17590,6 +17604,17 @@ enum ix86_builtins\n \n   IX86_BUILTIN_PCMPGTQ,\n \n+  /* AES instructions */\n+  IX86_BUILTIN_AESENC128,\n+  IX86_BUILTIN_AESENCLAST128,\n+  IX86_BUILTIN_AESDEC128,\n+  IX86_BUILTIN_AESDECLAST128,\n+  IX86_BUILTIN_AESIMC128,\n+  IX86_BUILTIN_AESKEYGENASSIST128,\n+\n+  /* PCLMUL instruction */\n+  IX86_BUILTIN_PCLMULQDQ128,\n+\n   /* TFmode support builtins.  */\n   IX86_BUILTIN_INFQ,\n   IX86_BUILTIN_FABSQ,\n@@ -17951,6 +17976,9 @@ static const struct builtin_description bdesc_sse_3arg[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, 0 },\n+\n+  /* PCLMUL */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_pclmulqdq, 0, IX86_BUILTIN_PCLMULQDQ128, UNKNOWN, 0 },\n };\n \n static const struct builtin_description bdesc_2arg[] =\n@@ -18231,6 +18259,13 @@ static const struct builtin_description bdesc_2arg[] =\n \n   /* SSE4.2 */\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, 0 },\n+\n+  /* AES */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aesenc, 0, IX86_BUILTIN_AESENC128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aesenclast, 0, IX86_BUILTIN_AESENCLAST128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aesdec, 0, IX86_BUILTIN_AESDEC128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aesdeclast, 0, IX86_BUILTIN_AESDECLAST128, UNKNOWN, 0 },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aeskeygenassist, 0, IX86_BUILTIN_AESKEYGENASSIST128, UNKNOWN, 0 },\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -18308,6 +18343,9 @@ static const struct builtin_description bdesc_1arg[] =\n   /* Fake 1 arg builtins with a constant smaller than 8 bits as the 2nd arg.  */\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundpd, 0, IX86_BUILTIN_ROUNDPD, UNKNOWN, 0 },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_roundps, 0, IX86_BUILTIN_ROUNDPS, UNKNOWN, 0 },\n+\n+  /* AES */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_aesimc, 0, IX86_BUILTIN_AESIMC128, UNKNOWN, 0 },\n };\n \n /* SSE5 */\n@@ -19544,6 +19582,25 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\t    NULL_TREE);\n   def_builtin_const (OPTION_MASK_ISA_SSE4_2, \"__builtin_ia32_crc32di\", ftype, IX86_BUILTIN_CRC32DI);\n \n+  /* AES */\n+  if (TARGET_AES)\n+    {\n+      /* Define AES built-in functions only if AES is enabled.  */\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aesenc128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_AESENC128);\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aesenclast128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_AESENCLAST128);\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aesdec128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_AESDEC128);\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aesdeclast128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_AESDECLAST128);\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aesimc128\", v2di_ftype_v2di, IX86_BUILTIN_AESIMC128);\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_aeskeygenassist128\", v2di_ftype_v2di_int, IX86_BUILTIN_AESKEYGENASSIST128);\n+    }\n+\n+  /* PCLMUL */\n+  if (TARGET_PCLMUL)\n+    {\n+      /* Define PCLMUL built-in function only if PCLMUL is enabled.  */\n+      def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pclmulqdq128\", v2di_ftype_v2di_v2di_int, IX86_BUILTIN_PCLMULQDQ128);\n+    }\n+\n   /* AMDFAM10 SSE4A New built-ins  */\n   def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntsd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTSD);\n   def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntss\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTSS);\n@@ -19824,6 +19881,44 @@ ix86_expand_crc32 (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n+/* Subroutine of ix86_expand_builtin to take care of binop insns\n+   with an immediate.  */\n+\n+static rtx\n+ix86_expand_binop_imm_builtin (enum insn_code icode, tree exp,\n+\t\t\t\trtx target)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+    {\n+      op0 = copy_to_reg (op0);\n+      op0 = simplify_gen_subreg (mode0, op0, GET_MODE (op0), 0);\n+    }\n+\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    {\n+      error (\"the last operand must be an immediate\");\n+      return const0_rtx;\n+    }\n+\n+  target = gen_reg_rtx (V2DImode);\n+  pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target,\n+\t\t\t\t\t      V2DImode, 0),\n+\t\t\t op0, op1);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of binop insns.  */\n \n static rtx\n@@ -20916,34 +21011,18 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return target;\n \n     case IX86_BUILTIN_PSLLDQI128:\n+      return ix86_expand_binop_imm_builtin (CODE_FOR_sse2_ashlti3,\n+\t\t\t\t\t     exp, target);\n+      break;\n+\n     case IX86_BUILTIN_PSRLDQI128:\n-      icode = (fcode == IX86_BUILTIN_PSLLDQI128 ? CODE_FOR_sse2_ashlti3\n-\t       : CODE_FOR_sse2_lshrti3);\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n+      return ix86_expand_binop_imm_builtin (CODE_FOR_sse2_lshrti3,\n+\t\t\t\t\t     exp, target);\n+      break;\n \n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-\t{\n-\t  op0 = copy_to_reg (op0);\n-\t  op0 = simplify_gen_subreg (mode1, op0, GET_MODE (op0), 0);\n-\t}\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-\t{\n-\t  error (\"shift must be an immediate\");\n-\t  return const0_rtx;\n-\t}\n-      target = gen_reg_rtx (V2DImode);\n-      pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target, V2DImode, 0),\n-\t\t\t     op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n+    case IX86_BUILTIN_AESKEYGENASSIST128:\n+      return ix86_expand_binop_imm_builtin (CODE_FOR_aeskeygenassist,\n+\t\t\t\t\t     exp, target);\n \n     case IX86_BUILTIN_FEMMS:\n       emit_insn (gen_mmx_femms ());"}, {"sha": "faf0a18937c99f2c84aa542e3fd64aa6cd8bdded", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -395,6 +395,8 @@ extern int x86_prefetch_sse;\n #define TARGET_SAHF\t\tx86_sahf\n #define TARGET_RECIP\t\tx86_recip\n #define TARGET_FUSED_MADD\tx86_fused_muladd\n+#define TARGET_AES\t\t(TARGET_SSE2 && x86_aes)\n+#define TARGET_PCLMUL\t\t(TARGET_SSE2 && x86_pclmul)\n \n #define ASSEMBLER_DIALECT\t(ix86_asm_dialect)\n \n@@ -683,6 +685,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \tbuiltin_define (\"__SSE4_1__\");\t\t\t\t\\\n       if (TARGET_SSE4_2)\t\t\t\t\t\\\n \tbuiltin_define (\"__SSE4_2__\");\t\t\t\t\\\n+      if (TARGET_AES)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__AES__\");\t\t\t\t\\\n+      if (TARGET_PCLMUL)\t\t\t\t\t\\\n+\tbuiltin_define (\"__PCLMUL__\");\t\t\t\t\\\n       if (TARGET_SSE4A)\t\t\t\t\t\t\\\n  \tbuiltin_define (\"__SSE4A__\");\t\t                \\\n       if (TARGET_SSE5)\t\t\t\t\t\t\\"}, {"sha": "7b65a9e705ead4c8bc5fa598edf69e2cb67eeb0e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -186,6 +186,17 @@\n    (UNSPEC_FRCZ\t\t\t156)\n    (UNSPEC_CVTPH2PS\t\t157)\n    (UNSPEC_CVTPS2PH\t\t158)\n+\n+   ; For AES support\n+   (UNSPEC_AESENC\t\t159)\n+   (UNSPEC_AESENCLAST\t\t160)\n+   (UNSPEC_AESDEC\t\t161)\n+   (UNSPEC_AESDECLAST\t\t162)\n+   (UNSPEC_AESIMC\t\t163)\n+   (UNSPEC_AESKEYGENASSIST\t164)\n+\n+   ; For PCLMUL support\n+   (UNSPEC_PCLMUL\t\t165)\n   ])\n \n (define_constants"}, {"sha": "45af24acac4055c1fd4f7ad6222673602a98b915", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -275,3 +275,11 @@ Target Report Var(x86_fused_muladd) Init(1)\n Enable automatic generation of fused floating point multiply-add instructions\n if the ISA supports such instructions.  The -mfused-madd option is on by\n default.\n+\n+maes\n+Target Report RejectNegative Var(x86_aes)\n+Support AES built-in functions and code generation\n+\n+mpclmul\n+Target Report RejectNegative Var(x86_pclmul)\n+Support PCLMUL built-in functions and code generation"}, {"sha": "e40416b3a9cd55c26c15db7d9eb91df76e7a6b9f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -7897,3 +7897,80 @@\n }\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aesenc\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t      UNSPEC_AESENC))]\n+  \"TARGET_AES\"\n+  \"aesenc\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aesenclast\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t      UNSPEC_AESENCLAST))]\n+  \"TARGET_AES\"\n+  \"aesenclast\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aesdec\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t      UNSPEC_AESDEC))]\n+  \"TARGET_AES\"\n+  \"aesdec\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aesdeclast\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t      UNSPEC_AESDECLAST))]\n+  \"TARGET_AES\"\n+  \"aesdeclast\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aesimc\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t      UNSPEC_AESIMC))]\n+  \"TARGET_AES\"\n+  \"aesimc\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"aeskeygenassist\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t\t     UNSPEC_AESKEYGENASSIST))]\n+  \"TARGET_AES\"\n+  \"aeskeygenassist\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"pclmulqdq\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t\t     UNSPEC_PCLMUL))]\n+  \"TARGET_PCLMUL\"\n+  \"pclmulqdq\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"mode\" \"TI\")])"}, {"sha": "8a08cf20158c59dc4c39ecd5a00eb2ad6806c794", "filename": "gcc/config/i386/wmmintrin.h", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fwmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fconfig%2Fi386%2Fwmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwmmintrin.h?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,123 @@\n+/* Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 10.1.  */\n+\n+#ifndef _WMMINTRIN_H_INCLUDED\n+#define _WMMINTRIN_H_INCLUDED\n+\n+/* We need definitions from the SSE2 header file.  */\n+#include <emmintrin.h>\n+\n+#if !defined (__AES__) && !defined (__PCLMUL__)\n+# error \"AES/PCLMUL instructions not enabled\"\n+#else\n+\n+/* AES */\n+\n+#ifdef __AES__\n+/* Performs 1 round of AES decryption of the first m128i using \n+   the second m128i as a round key.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdec_si128 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_aesdec128 ((__v2di)__X, (__v2di)__Y);\n+}\n+\n+/* Performs the last round of AES decryption of the first m128i \n+   using the second m128i as a round key.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdeclast_si128 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_aesdeclast128 ((__v2di)__X,\n+\t\t\t\t\t\t (__v2di)__Y);\n+}\n+\n+/* Performs 1 round of AES encryption of the first m128i using \n+   the second m128i as a round key.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesenc_si128 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_aesenc128 ((__v2di)__X, (__v2di)__Y);\n+}\n+\n+/* Performs the last round of AES encryption of the first m128i\n+   using the second m128i as a round key.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesenclast_si128 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_aesenclast128 ((__v2di)__X, (__v2di)__Y);\n+}\n+\n+/* Performs the InverseMixColumn operation on the source m128i \n+   and stores the result into m128i destination.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesimc_si128 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n+}\n+\n+/* Generates a m128i round key for the input m128i AES cipher key and\n+   byte round constant.  The second parameter must be a compile time\n+   constant.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aeskeygenassist_si128 (__m128i __X, const int __C)\n+{\n+  return (__m128i) __builtin_ia32_aeskeygenassist128 ((__v2di)__X, __C);\n+}\n+#else\n+#define _mm_aeskeygenassist_si128(X, C)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_aeskeygenassist128 ((__v2di)(__m128i)(X),\t\\\n+\t\t\t\t\t\t(int)(C)))\n+#endif\n+#endif  /* __AES__ */\n+\n+/* PCLMUL */\n+\n+#ifdef __PCLMUL__\n+/* Performs carry-less integer multiplication of 64-bit halves of\n+   128-bit input operands.  The third parameter inducates which 64-bit\n+   haves of the input parameters v1 and v2 should be used. It must be\n+   a compile time constant.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_clmulepi64_si128 (__m128i __X, __m128i __Y, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n+\t\t\t\t\t\t(__v2di)__Y, __I);\n+}\n+#else\n+#define _mm_clmulepi64_si128(X, Y, I)\t\t\t\t\t\\\n+  ((__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)(__m128i)(X),\t\t\\\n+\t\t\t\t\t  (__v2di)(__m128i)(Y), (int)(I)))\n+#endif\n+#endif  /* __PCLMUL__  */\n+\n+#endif /* __AES__/__PCLMUL__ */\n+\n+#endif /* _WMMINTRIN_H_INCLUDED */"}, {"sha": "7cae1a4e0707bdd3d60ee38ace640adc3107db2a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -8013,6 +8013,27 @@ depending on the size of @code{unsigned long}.\n Generates the @code{popcntq} machine instruction.\n @end table\n \n+The following built-in functions are available when @option{-maes} is\n+used.  All of them generate the machine instruction that is part of the\n+name.\n+\n+@smallexample\n+v2di __builtin_ia32_aesenc128 (v2di, v2di)\n+v2di __builtin_ia32_aesenclast128 (v2di, v2di)\n+v2di __builtin_ia32_aesdec128 (v2di, v2di)\n+v2di __builtin_ia32_aesdeclast128 (v2di, v2di)\n+v2di __builtin_ia32_aeskeygenassist128 (v2di, const int)\n+v2di __builtin_ia32_aesimc128 (v2di)\n+@end smallexample\n+\n+The following built-in function is available when @option{-mpclmul} is\n+used.\n+\n+@table @code\n+@item v2di __builtin_ia32_pclmulqdq128 (v2di, v2di, const int)\n+Generates the @code{pclmulqdq} machine instruction.\n+@end table\n+\n The following built-in functions are available when @option{-msse4a} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "36c57c59f1611d28cfbb7351df53735b42b4efc0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -555,6 +555,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} -mcx16 -msahf -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 @gol\n+-maes -mpclmul @gol\n -msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -10720,6 +10721,10 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-sse4.2\n @itemx -msse4\n @itemx -mno-sse4\n+@itemx -maes\n+@itemx -mno-aes\n+@itemx -mpclmul\n+@itemx -mno-pclmul\n @itemx -msse4a\n @itemx -mno-sse4a\n @itemx -msse5\n@@ -10737,8 +10742,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n-SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4A, SSE5, ABM or 3DNow!@: extended\n-instruction sets.\n+SSE, SSE2, SSE3, SSSE3, SSE4.1, AES, PCLMUL, SSE4A, SSE5, ABM or\n+3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}, {"sha": "1ec1c2df538331752651449189feb11acceabbc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,3 +1,23 @@\n+2008-04-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Include <wmmintrin.h>.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\n+\t* gcc.target/i386/aes-check.h: New.\n+\t* gcc.target/i386/aesdec.c: Likewise.\n+\t* gcc.target/i386/aesdeclast.c: Likewise.\n+\t* gcc.target/i386/aesenc.c: Likewise.\n+\t* gcc.target/i386/aesenclast.c: Likewise.\n+\t* gcc.target/i386/aesimc.c: Likewise.\n+\t* gcc.target/i386/aeskeygenassist.c: Likewise.\n+\t* gcc.target/i386/pclmulqdq.c: Likewise.\n+\t* gcc.target/i386/pclmul-check.h: Likewise.\n+\n+\t* gcc.target/i386/i386.exp (check_effective_target_aes): New.\n+\t(check_effective_target_pclmul): Likewise.\n+\n 2008-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35440"}, {"sha": "57acdd32ca3de3daec6e6e585c85a9632c901c37", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,8 +1,9 @@\n-/* Test that {,x,e,p,t,s,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,w,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -msse4 -msse5\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n \n+#include <wmmintrin.h>\n #include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "a57bae33b8acc3383a8d30958f7ab54568fb305f", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,8 +1,9 @@\n-/* Test that {,x,e,p,t,s,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,w,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -fkeep-inline-functions.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -msse4 -msse5\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -maes -mpclmul -msse4 -msse5\" } */\n \n+#include <wmmintrin.h>\n #include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "f56f1adeb3e67453944420699084d07f7fc90c33", "filename": "gcc/testsuite/gcc.target/i386/aes-check.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faes-check.h?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,30 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void aes_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AES test only if host has AES support.  */\n+  if (ecx & bit_AES)\n+    {\n+      aes_test ();\n+#ifdef DEBUG\n+    printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "0cf0d855d225e257e6da2df878003ec4395b20e9", "filename": "gcc/testsuite/gcc.target/i386/aesdec.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdec.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i src1[NUM];\n+static __m128i src2[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set\n+   of input/output vectors).  */\n+static void\n+init_data (__m128i *s1, __m128i *s2, __m128i *d)\n+{\n+  int i;\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x5d53475d, 0x63746f72,\n+\t\t\t      0x73745665, 0x7b5b5465);\n+      s2[i] = _mm_setr_epi32 (0x726f6e5d, 0x5b477565,\n+\t\t\t      0x68617929, 0x48692853);\n+      d[i]  = _mm_setr_epi32 (0xb730392a, 0xb58eb95e,\n+\t\t\t      0xfaea2787, 0x138ac342);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, src2, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i] = _mm_aesdec_si128 (src1[i], src2[i]);\n+      resdst[i + 1] = _mm_aesdec_si128 (src1[i + 1], src2[i + 1]);\n+      resdst[i + 2] = _mm_aesdec_si128 (src1[i + 2], src2[i + 2]);\n+      resdst[i + 3] = _mm_aesdec_si128 (src1[i + 3], src2[i + 3]);\n+      resdst[i + 4] = _mm_aesdec_si128 (src1[i + 4], src2[i + 4]);\n+      resdst[i + 5] = _mm_aesdec_si128 (src1[i + 5], src2[i + 5]);\n+      resdst[i + 6] = _mm_aesdec_si128 (src1[i + 6], src2[i + 6]);\n+      resdst[i + 7] = _mm_aesdec_si128 (src1[i + 7], src2[i + 7]);\n+      resdst[i + 8] = _mm_aesdec_si128 (src1[i + 8], src2[i + 8]);\n+      resdst[i + 9] = _mm_aesdec_si128 (src1[i + 9], src2[i + 9]);\n+      resdst[i + 10] = _mm_aesdec_si128 (src1[i + 10], src2[i + 10]);\n+      resdst[i + 11] = _mm_aesdec_si128 (src1[i + 11], src2[i + 11]);\n+      resdst[i + 12] = _mm_aesdec_si128 (src1[i + 12], src2[i + 12]);\n+      resdst[i + 13] = _mm_aesdec_si128 (src1[i + 13], src2[i + 13]);\n+      resdst[i + 14] = _mm_aesdec_si128 (src1[i + 14], src2[i + 14]);\n+      resdst[i + 15] = _mm_aesdec_si128 (src1[i + 15], src2[i + 15]);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp (edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "3bf360ec62443b6c646700e69e333b78cdbb8924", "filename": "gcc/testsuite/gcc.target/i386/aesdeclast.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesdeclast.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i src1[NUM];\n+static __m128i src2[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set of\n+   input/output vectors).  */\n+\n+static void\n+init_data (__m128i *s1, __m128i *s2, __m128i *d)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x5d53475d, 0x63746f72,\n+\t\t\t      0x73745665, 0x7b5b5465);\n+      s2[i] = _mm_setr_epi32 (0x726f6e5d, 0x5b477565,\n+\t\t\t      0x68617929, 0x48692853);\n+      d[i] = _mm_setr_epi32 (0x72a593d0, 0xd410637b,\n+\t\t\t     0x6b317f95, 0xc5a391ef);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, src2, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i] = _mm_aesdeclast_si128 (src1[i], src2[i]);\n+      resdst[i + 1] = _mm_aesdeclast_si128 (src1[i + 1], src2[i + 1]);\n+      resdst[i + 2] = _mm_aesdeclast_si128 (src1[i + 2], src2[i + 2]);\n+      resdst[i + 3] = _mm_aesdeclast_si128 (src1[i + 3], src2[i + 3]);\n+      resdst[i + 4] = _mm_aesdeclast_si128 (src1[i + 4], src2[i + 4]);\n+      resdst[i + 5] = _mm_aesdeclast_si128 (src1[i + 5], src2[i + 5]);\n+      resdst[i + 6] = _mm_aesdeclast_si128 (src1[i + 6], src2[i + 6]);\n+      resdst[i + 7] = _mm_aesdeclast_si128 (src1[i + 7], src2[i + 7]);\n+      resdst[i + 8] = _mm_aesdeclast_si128 (src1[i + 8], src2[i + 8]);\n+      resdst[i + 9] = _mm_aesdeclast_si128 (src1[i + 9], src2[i + 9]);\n+      resdst[i + 10] = _mm_aesdeclast_si128 (src1[i + 10], src2[i + 10]);\n+      resdst[i + 11] = _mm_aesdeclast_si128 (src1[i + 11], src2[i + 11]);\n+      resdst[i + 12] = _mm_aesdeclast_si128 (src1[i + 12], src2[i + 12]);\n+      resdst[i + 13] = _mm_aesdeclast_si128 (src1[i + 13], src2[i + 13]);\n+      resdst[i + 14] = _mm_aesdeclast_si128 (src1[i + 14], src2[i + 14]);\n+      resdst[i + 15] = _mm_aesdeclast_si128 (src1[i + 15], src2[i + 15]);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp (edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "f94a5bcccb173065ca1168112caa91dd2f4a6529", "filename": "gcc/testsuite/gcc.target/i386/aesenc.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenc.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i src1[NUM];\n+static __m128i src2[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set\n+   of input/output vectors).  */\n+\n+static void\n+init_data (__m128i *s1, __m128i *s2, __m128i *d)\n+{\n+  int i;\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x5d53475d, 0x63746f72,\n+\t\t\t      0x73745665, 0x7b5b5465);\n+      s2[i] = _mm_setr_epi32 (0x726f6e5d, 0x5b477565,\n+\t\t\t      0x68617929, 0x48692853);\n+      d[i] = _mm_setr_epi32 (0xded7e595, 0x8b104b58,\n+\t\t\t     0x9fdba3c5, 0xa8311c2f);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, src2, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i] = _mm_aesenc_si128 (src1[i], src2[i]);\n+      resdst[i + 1] = _mm_aesenc_si128 (src1[i + 1], src2[i + 1]);\n+      resdst[i + 2] = _mm_aesenc_si128 (src1[i + 2], src2[i + 2]);\n+      resdst[i + 3] = _mm_aesenc_si128 (src1[i + 3], src2[i + 3]);\n+      resdst[i + 4] = _mm_aesenc_si128 (src1[i + 4], src2[i + 4]);\n+      resdst[i + 5] = _mm_aesenc_si128 (src1[i + 5], src2[i + 5]);\n+      resdst[i + 6] = _mm_aesenc_si128 (src1[i + 6], src2[i + 6]);\n+      resdst[i + 7] = _mm_aesenc_si128 (src1[i + 7], src2[i + 7]);\n+      resdst[i + 8] = _mm_aesenc_si128 (src1[i + 8], src2[i + 8]);\n+      resdst[i + 9] = _mm_aesenc_si128 (src1[i + 9], src2[i + 9]);\n+      resdst[i + 10] = _mm_aesenc_si128 (src1[i + 10], src2[i + 10]);\n+      resdst[i + 11] = _mm_aesenc_si128 (src1[i + 11], src2[i + 11]);\n+      resdst[i + 12] = _mm_aesenc_si128 (src1[i + 12], src2[i + 12]);\n+      resdst[i + 13] = _mm_aesenc_si128 (src1[i + 13], src2[i + 13]);\n+      resdst[i + 14] = _mm_aesenc_si128 (src1[i + 14], src2[i + 14]);\n+      resdst[i + 15] = _mm_aesenc_si128 (src1[i + 15], src2[i + 15]);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp (edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "0786316bc57a0ae8570383645e6766ae85225cb5", "filename": "gcc/testsuite/gcc.target/i386/aesenclast.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesenclast.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i src1[NUM];\n+static __m128i src2[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one\n+   set of input/output vectors).  */\n+\n+static void\n+init_data (__m128i *s1, __m128i *s2, __m128i *d)\n+{\n+  int i;\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x5d53475d, 0x63746f72,\n+\t\t\t      0x73745665, 0x7b5b5465);\n+      s2[i] = _mm_setr_epi32 (0x726f6e5d, 0x5b477565,\n+\t\t\t      0x68617929, 0x48692853);\n+      d[i] = _mm_setr_epi32 (0x53fdc611, 0x177ec425,\n+\t\t\t     0x938c5964, 0xc7fb881e);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, src2, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i] = _mm_aesenclast_si128 (src1[i], src2[i]);\n+      resdst[i + 1] = _mm_aesenclast_si128 (src1[i + 1], src2[i + 1]);\n+      resdst[i + 2] = _mm_aesenclast_si128 (src1[i + 2], src2[i + 2]);\n+      resdst[i + 3] = _mm_aesenclast_si128 (src1[i + 3], src2[i + 3]);\n+      resdst[i + 4] = _mm_aesenclast_si128 (src1[i + 4], src2[i + 4]);\n+      resdst[i + 5] = _mm_aesenclast_si128 (src1[i + 5], src2[i + 5]);\n+      resdst[i + 6] = _mm_aesenclast_si128 (src1[i + 6], src2[i + 6]);\n+      resdst[i + 7] = _mm_aesenclast_si128 (src1[i + 7], src2[i + 7]);\n+      resdst[i + 8] = _mm_aesenclast_si128 (src1[i + 8], src2[i + 8]);\n+      resdst[i + 9] = _mm_aesenclast_si128 (src1[i + 9], src2[i + 9]);\n+      resdst[i + 10] = _mm_aesenclast_si128 (src1[i + 10], src2[i + 10]);\n+      resdst[i + 11] = _mm_aesenclast_si128 (src1[i + 11], src2[i + 11]);\n+      resdst[i + 12] = _mm_aesenclast_si128 (src1[i + 12], src2[i + 12]);\n+      resdst[i + 13] = _mm_aesenclast_si128 (src1[i + 13], src2[i + 13]);\n+      resdst[i + 14] = _mm_aesenclast_si128 (src1[i + 14], src2[i + 14]);\n+      resdst[i + 15] = _mm_aesenclast_si128 (src1[i + 15], src2[i + 15]);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp(edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "ea56fe870dc1d9dfec18a341c950455423b7ee14", "filename": "gcc/testsuite/gcc.target/i386/aesimc.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faesimc.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i src1[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set\n+   of input/output vectors).   */\n+\n+static void\n+init_data (__m128i *s1, __m128i *d)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x5d53475d, 0x63746f72,\n+\t\t\t      0x73745665, 0x7b5b5465);\n+      d[i] = _mm_setr_epi32 (0x81c3b3e5, 0x2b18330a,\n+\t\t\t     0x44b109c8, 0x627a6f66);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i] = _mm_aesimc_si128 (src1[i]);\n+      resdst[i + 1] = _mm_aesimc_si128 (src1[i + 1]);\n+      resdst[i + 2] = _mm_aesimc_si128 (src1[i + 2]);\n+      resdst[i + 3] = _mm_aesimc_si128 (src1[i + 3]);\n+      resdst[i + 4] = _mm_aesimc_si128 (src1[i + 4]);\n+      resdst[i + 5] = _mm_aesimc_si128 (src1[i + 5]);\n+      resdst[i + 6] = _mm_aesimc_si128 (src1[i + 6]);\n+      resdst[i + 7] = _mm_aesimc_si128 (src1[i + 7]);\n+      resdst[i + 8] = _mm_aesimc_si128 (src1[i + 8]);\n+      resdst[i + 9] = _mm_aesimc_si128 (src1[i + 9]);\n+      resdst[i + 10] = _mm_aesimc_si128 (src1[i + 10]);\n+      resdst[i + 11] = _mm_aesimc_si128 (src1[i + 11]);\n+      resdst[i + 12] = _mm_aesimc_si128 (src1[i + 12]);\n+      resdst[i + 13] = _mm_aesimc_si128 (src1[i + 13]);\n+      resdst[i + 14] = _mm_aesimc_si128 (src1[i + 14]);\n+      resdst[i + 15] = _mm_aesimc_si128 (src1[i + 15]);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp(edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "2fc8ad7efb05c716d9966b07b2e4b06a8e03e215", "filename": "gcc/testsuite/gcc.target/i386/aeskeygenassist.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Faeskeygenassist.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target aes } */\n+/* { dg-options \"-O2 -maes\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"aes-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+#define IMM8 1\n+\n+static __m128i src1[NUM];\n+static __m128i edst[NUM];\n+\n+static __m128i resdst[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set\n+   of input/output vectors).  */\n+\n+static void\n+init_data (__m128i *s1, __m128i *d)\n+{\n+  int i;\n+  for (i = 0; i < NUM; i++)\n+    {\n+      s1[i] = _mm_setr_epi32 (0x16157e2b, 0xa6d2ae28,\n+\t\t\t      0x8815f7ab, 0x3c4fcf09);\n+      d[i] = _mm_setr_epi32 (0x24b5e434, 0x3424b5e5,\n+\t\t\t     0xeb848a01, 0x01eb848b);\n+    }\n+}\n+\n+static void\n+aes_test (void)\n+{\n+  int i;\n+\n+  init_data (src1, edst);\n+\n+  for (i = 0; i < NUM; i += 16)\n+    {\n+      resdst[i]  = _mm_aeskeygenassist_si128 (src1[i], IMM8);\n+      resdst[i + 1] = _mm_aeskeygenassist_si128 (src1[i + 1], IMM8);\n+      resdst[i + 2] = _mm_aeskeygenassist_si128 (src1[i + 2], IMM8);\n+      resdst[i + 3] = _mm_aeskeygenassist_si128 (src1[i + 3], IMM8);\n+      resdst[i + 4] = _mm_aeskeygenassist_si128 (src1[i + 4], IMM8);\n+      resdst[i + 5] = _mm_aeskeygenassist_si128 (src1[i + 5], IMM8);\n+      resdst[i + 6] = _mm_aeskeygenassist_si128 (src1[i + 6], IMM8);\n+      resdst[i + 7] = _mm_aeskeygenassist_si128 (src1[i + 7], IMM8);\n+      resdst[i + 8] = _mm_aeskeygenassist_si128 (src1[i + 8], IMM8);\n+      resdst[i + 9] = _mm_aeskeygenassist_si128 (src1[i + 9], IMM8);\n+      resdst[i + 10] = _mm_aeskeygenassist_si128 (src1[i + 10], IMM8);\n+      resdst[i + 11] = _mm_aeskeygenassist_si128 (src1[i + 11], IMM8);\n+      resdst[i + 12] = _mm_aeskeygenassist_si128 (src1[i + 12], IMM8);\n+      resdst[i + 13] = _mm_aeskeygenassist_si128 (src1[i + 13], IMM8);\n+      resdst[i + 14] = _mm_aeskeygenassist_si128 (src1[i + 14], IMM8);\n+      resdst[i + 15] = _mm_aeskeygenassist_si128 (src1[i + 15], IMM8);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    if (memcmp(edst + i, resdst + i, sizeof (__m128i)))\n+      abort ();\n+}"}, {"sha": "e28ce933c7f1d280db4b19323af64d81375d1ff0", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -51,6 +51,34 @@ proc check_effective_target_sse4 { } {\n     } \"-O2 -msse4.1\" ]\n }\n \n+# Return 1 if aes instructions can be compiled.\n+proc check_effective_target_aes { } {\n+    return [check_no_compiler_messages aes object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_aesimc_si128 (__m128i __X)\n+\t{\n+\t    return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n+\t}\n+    } \"-O2 -maes\" ]\n+}\n+\n+# Return 1 if pclmul instructions can be compiled.\n+proc check_effective_target_pclmul { } {\n+    return [check_no_compiler_messages pclmul object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i pclmulqdq_test (__m128i __X, __m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n+\t\t\t\t\t\t\t  (__v2di)__Y,\n+\t\t\t\t\t\t\t  1);\n+\t}\n+    } \"-O2 -mpclmul\" ]\n+}\n+\n # Return 1 if sse4a instructions can be compiled.\n proc check_effective_target_sse4a { } {\n     return [check_no_compiler_messages sse4a object {"}, {"sha": "706fd6400342beab559f5693447e94bd9672f022", "filename": "gcc/testsuite/gcc.target/i386/pclmul-check.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmul-check.h?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,30 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void pclmul_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+ \n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run PCLMULQDQ test only if host has PCLMULQDQ support.  */\n+  if (ecx & bit_PCLMUL)\n+    {\n+      pclmul_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "d4ab8493e312b0035bceded9dcf05f9efa5733c4", "filename": "gcc/testsuite/gcc.target/i386/pclmulqdq.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmulqdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmulqdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpclmulqdq.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target pclmul } */\n+/* { dg-options \"-O2 -mpclmul\" } */\n+\n+#include <wmmintrin.h>\n+#include <string.h>\n+\n+#include \"pclmul-check.h\"\n+\n+extern void abort (void);\n+\n+#define NUM 1024\n+\n+static __m128i s1[NUM];\n+static __m128i s2[NUM];\n+/* We need this array to generate mem form of inst */\n+static __m128i s2m[NUM];\n+\n+static __m128i e_00[NUM];\n+static __m128i e_01[NUM];\n+static __m128i e_10[NUM];\n+static __m128i e_11[NUM];\n+\n+static __m128i d_00[NUM];\n+static __m128i d_01[NUM];\n+static __m128i d_10[NUM];\n+static __m128i d_11[NUM];\n+\n+/* Initialize input/output vectors.  (Currently, there is only one set\n+   of input/output vectors).  */\n+static void\n+init_data (__m128i *ls1,   __m128i *ls2, __m128i *le_00, __m128i *le_01,\n+\t   __m128i *le_10, __m128i *le_11)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      ls1[i] = _mm_set_epi32 (0x7B5B5465, 0x73745665,\n+\t\t\t      0x63746F72, 0x5D53475D);\n+      ls2[i] = _mm_set_epi32 (0x48692853, 0x68617929,\n+\t\t\t      0x5B477565, 0x726F6E5D);\n+      s2m[i] = _mm_set_epi32 (0x48692853, 0x68617929,\n+\t\t\t      0x5B477565, 0x726F6E5D);\n+      le_00[i] = _mm_set_epi32 (0x1D4D84C8, 0x5C3440C0,\n+\t\t\t\t0x929633D5, 0xD36F0451);\n+      le_01[i] = _mm_set_epi32 (0x1A2BF6DB, 0x3A30862F,\n+\t\t\t\t0xBABF262D, 0xF4B7D5C9);\n+      le_10[i] = _mm_set_epi32 (0x1BD17C8D, 0x556AB5A1,\n+\t\t\t\t0x7FA540AC, 0x2A281315);\n+      le_11[i] = _mm_set_epi32 (0x1D1E1F2C, 0x592E7C45,\n+\t\t\t\t0xD66EE03E, 0x410FD4ED);\n+    }\n+}\n+\n+static void\n+pclmul_test (void)\n+{\n+  int i;\n+\n+  init_data (s1, s2, e_00, e_01, e_10, e_11);\n+\n+  for (i = 0; i < NUM; i += 2)\n+    {\n+      d_00[i] = _mm_clmulepi64_si128 (s1[i], s2m[i], 0x00);\n+      d_01[i] = _mm_clmulepi64_si128 (s1[i], s2[i], 0x01);\n+      d_10[i] = _mm_clmulepi64_si128 (s1[i], s2[i], 0x10);\n+      d_11[i] = _mm_clmulepi64_si128 (s1[i], s2[i], 0x11);\n+\n+      d_11[i + 1] = _mm_clmulepi64_si128 (s1[i + 1], s2[i + 1], 0x11);\n+      d_00[i + 1] = _mm_clmulepi64_si128 (s1[i + 1], s2[i + 1], 0x00);\n+      d_10[i + 1] = _mm_clmulepi64_si128 (s1[i + 1], s2m[i + 1], 0x10);\n+      d_01[i + 1] = _mm_clmulepi64_si128 (s1[i + 1], s2[i + 1], 0x01);\n+    }\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      if (memcmp (d_00 + i, e_00 + i, sizeof (__m128i)))\n+\tabort ();\n+      if (memcmp (d_01 + i, e_01 + i, sizeof (__m128i)))\n+\tabort ();\n+      if (memcmp (d_10 + i, e_10 + i, sizeof (__m128i)))\n+\tabort ();\n+      if (memcmp(d_11 + i, e_11 + i, sizeof (__m128i)))\n+\tabort ();\n+    }\n+}"}, {"sha": "aa6bc69e978a713b3c775f14c61638020e1ab101", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile with optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,a,b}mmintrin.h and mm3dnow.h\n+   defined as inline functions in {,x,e,p,t,s,w,a,b}mmintrin.h and mm3dnow.h\n    that reference the proper builtin functions.  Defining away \"extern\" and\n    \"__inline\" results in all of them being compiled as proper functions.  */\n \n@@ -17,6 +17,10 @@\n #define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n #define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n \n+/* wmmintrin.h */\n+#define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n+#define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n+\n /* smmintrin.h */\n #define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n #define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n@@ -94,6 +98,7 @@\n #define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n+#include <wmmintrin.h>\n #include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "264cdb63c6634b1a284336923c986a336ed7f11c", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b96a312a0dbbfb84f5162a8a1cca553edac6fa8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=8b96a312a0dbbfb84f5162a8a1cca553edac6fa8", "patch": "@@ -1,16 +1,17 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,a,b}mmintrin.h  and mm3dnow.h\n+   defined as inline functions in {,x,e,p,t,s,w,a,b}mmintrin.h  and mm3dnow.h\n    that reference the proper builtin functions.  Defining away \"extern\" and\n    \"__inline\" results in all of them being compiled as proper functions.  */\n \n #define extern\n #define __inline\n \n+#include <wmmintrin.h>\n #include <bmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>\n@@ -46,6 +47,10 @@\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n \n+/* wmmintrin.h */\n+test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n+test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n+\n /* smmintrin.h */\n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)"}]}