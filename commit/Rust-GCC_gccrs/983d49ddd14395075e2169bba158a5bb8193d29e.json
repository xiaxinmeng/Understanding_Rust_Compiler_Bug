{"sha": "983d49ddd14395075e2169bba158a5bb8193d29e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgzZDQ5ZGRkMTQzOTUwNzVlMjE2OWJiYTE1OGE1YmI4MTkzZDI5ZQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-03-21T18:46:44Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-03-21T18:46:44Z"}, "message": "PR 84615 Regressions due to type mismatch with character functions\n\nSince the kind of the hidden character length variable is not part of\nthe character variable definition, we must ensure that character\nlengths are always of the same kind in interfaces, regardless of how\nthey were declared in the source. This patch ensures this when calling\na procedure.\n\nRegtested on x86_64-pc-linux-gnu and i686-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-03-21  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/84615\n\t* trans-expr.c (gfc_conv_procedure_call): Convert charlen to\n\tgfc_charlen_type_node when calling procedure.\n\ngcc/testsuite/ChangeLog:\n\n2018-03-21  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/84615\n\t* gfortran.dg/char_result_17.f90: New test.\n\nFrom-SVN: r258736", "tree": {"sha": "9237e503aac33b16a9206822adb2413c0e98e3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9237e503aac33b16a9206822adb2413c0e98e3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/983d49ddd14395075e2169bba158a5bb8193d29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983d49ddd14395075e2169bba158a5bb8193d29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/983d49ddd14395075e2169bba158a5bb8193d29e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983d49ddd14395075e2169bba158a5bb8193d29e/comments", "author": null, "committer": null, "parents": [{"sha": "5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afef8b119ac69393900a8be42cc6b69ad0bcbd0"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "b69b559cae7fb7cb77e9de60e23ff6b682c1878c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=983d49ddd14395075e2169bba158a5bb8193d29e", "patch": "@@ -1,8 +1,14 @@\n+2018-03-21  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/84615\n+\t* trans-expr.c (gfc_conv_procedure_call): Convert charlen to\n+\tgfc_charlen_type_node when calling procedure.\n+\n 2018-03-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85001\n \t* interface.c (symbol_rank): Remove bogus null pointer check that\n-\tcrept in when translating a ternary operator into an if-else \n+\tcrept in when translating a ternary operator into an if-else\n \tconstructor.\n \n 2018-03-19  Thomas Koenig  <tkoenig@gcc.gnu.org>"}, {"sha": "8bf550445cc19739804e20314b0570b4bf142911", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=983d49ddd14395075e2169bba158a5bb8193d29e", "patch": "@@ -5973,9 +5973,13 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  gfc_add_block_to_block (&se->pre, &parmse.pre);\n \t  gfc_add_block_to_block (&se->post, &parmse.post);\n \t  tmp = parmse.expr;\n+\t  /* TODO: It would be better to have the charlens as\n+\t     gfc_charlen_type_node already when the interface is\n+\t     created instead of converting it here (see PR 84615).  */\n \t  tmp = fold_build2_loc (input_location, MAX_EXPR,\n-\t\t\t\t TREE_TYPE (tmp), tmp,\n-\t\t\t\t build_zero_cst (TREE_TYPE (tmp)));\n+\t\t\t\t gfc_charlen_type_node,\n+\t\t\t\t fold_convert (gfc_charlen_type_node, tmp),\n+\t\t\t\t build_zero_cst (gfc_charlen_type_node));\n \t  cl.backend_decl = tmp;\n \t}\n "}, {"sha": "43122bb71b49f89889086430d35d25219b35f96c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=983d49ddd14395075e2169bba158a5bb8193d29e", "patch": "@@ -1,3 +1,8 @@\n+2018-03-21  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/84615\n+\t* gfortran.dg/char_result_17.f90: New test.\n+\n 2018-03-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/84994"}, {"sha": "05ab72dd07043630ef428c5fd2a8bc278916c5f0", "filename": "gcc/testsuite/gfortran.dg/char_result_17.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/983d49ddd14395075e2169bba158a5bb8193d29e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_17.f90?ref=983d49ddd14395075e2169bba158a5bb8193d29e", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! PR fortran/84615\n+! Charlen should always be the ABI defined character length type\n+! regardless of which kind it is declared as in the source.\n+program TestStringTools\n+  character(len=52)               :: txt\n+  character(len=1), dimension(52) :: chararr = &\n+       (/(char(i+64),char(i+96), i = 1,26)/)\n+  txt = chararray2string(chararr)\n+  if (txt .ne. \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") &\n+       STOP 1\n+contains\n+  function chararray2string(chararray) result(text)\n+    character(len=1), dimension(:) :: chararray    ! input\n+    character(len=int(size(chararray, 1), kind=8)) :: text      ! output\n+    do i = 1,size(chararray,1)\n+       text(i:i) = chararray (i)\n+    end do\n+  end function chararray2string\n+end program TestStringTools"}]}