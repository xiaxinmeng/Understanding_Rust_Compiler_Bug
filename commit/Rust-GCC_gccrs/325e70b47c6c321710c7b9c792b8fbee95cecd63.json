{"sha": "325e70b47c6c321710c7b9c792b8fbee95cecd63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1ZTcwYjQ3YzZjMzIxNzEwYzdiOWM3OTJiOGZiZWU5NWNlY2Q2Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-18T22:38:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-18T22:43:00Z"}, "message": "libbacktrace: use correct directory/filename for DWARF 5\n\n\tPR debug/98716\n\t* dwarf.c (read_v2_paths): Allocate zero entry for dirs and\n\tfilenames.\n\t(read_line_program): Remove parameter u, change caller.  Don't\n\tsubtract one from dirs and filenames index.\n\t(read_function_entry): Don't subtract one from filenames index.", "tree": {"sha": "93309e8e5ab73fd95e1b959e38b6c245d8c662b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93309e8e5ab73fd95e1b959e38b6c245d8c662b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/325e70b47c6c321710c7b9c792b8fbee95cecd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325e70b47c6c321710c7b9c792b8fbee95cecd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325e70b47c6c321710c7b9c792b8fbee95cecd63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325e70b47c6c321710c7b9c792b8fbee95cecd63/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a89c5d3539c36f160ca5b997324ebcd3d601d56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89c5d3539c36f160ca5b997324ebcd3d601d56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89c5d3539c36f160ca5b997324ebcd3d601d56e"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "9097df6cc76e4b24aa620ccb8a497d22d5c606a3", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/325e70b47c6c321710c7b9c792b8fbee95cecd63/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/325e70b47c6c321710c7b9c792b8fbee95cecd63/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=325e70b47c6c321710c7b9c792b8fbee95cecd63", "patch": "@@ -2344,19 +2344,20 @@ read_v2_paths (struct backtrace_state *state, struct unit *u,\n       ++hdr->dirs_count;\n     }\n \n-  hdr->dirs = NULL;\n-  if (hdr->dirs_count != 0)\n-    {\n-      hdr->dirs = ((const char **)\n-\t\t   backtrace_alloc (state,\n-\t\t\t\t    hdr->dirs_count * sizeof (const char *),\n-\t\t\t\t    hdr_buf->error_callback,\n-\t\t\t\t    hdr_buf->data));\n-      if (hdr->dirs == NULL)\n-\treturn 0;\n-    }\n+  /* The index of the first entry in the list of directories is 1.  Index 0 is\n+     used for the current directory of the compilation.  To simplify index\n+     handling, we set entry 0 to the compilation unit directory.  */\n+  ++hdr->dirs_count;\n+  hdr->dirs = ((const char **)\n+\t       backtrace_alloc (state,\n+\t\t\t\thdr->dirs_count * sizeof (const char *),\n+\t\t\t\thdr_buf->error_callback,\n+\t\t\t\thdr_buf->data));\n+  if (hdr->dirs == NULL)\n+    return 0;\n \n-  i = 0;\n+  hdr->dirs[0] = u->comp_dir;\n+  i = 1;\n   while (*hdr_buf->buf != '\\0')\n     {\n       if (hdr_buf->reported_underflow)\n@@ -2383,14 +2384,19 @@ read_v2_paths (struct backtrace_state *state, struct unit *u,\n       ++hdr->filenames_count;\n     }\n \n+  /* The index of the first entry in the list of file names is 1.  Index 0 is\n+     used for the DW_AT_name of the compilation unit.  To simplify index\n+     handling, we set entry 0 to the compilation unit file name.  */\n+  ++hdr->filenames_count;\n   hdr->filenames = ((const char **)\n \t\t    backtrace_alloc (state,\n \t\t\t\t     hdr->filenames_count * sizeof (char *),\n \t\t\t\t     hdr_buf->error_callback,\n \t\t\t\t     hdr_buf->data));\n   if (hdr->filenames == NULL)\n     return 0;\n-  i = 0;\n+  hdr->filenames[0] = u->filename;\n+  i = 1;\n   while (*hdr_buf->buf != '\\0')\n     {\n       const char *filename;\n@@ -2404,7 +2410,7 @@ read_v2_paths (struct backtrace_state *state, struct unit *u,\n \treturn 0;\n       dir_index = read_uleb128 (hdr_buf);\n       if (IS_ABSOLUTE_PATH (filename)\n-\t  || (dir_index == 0 && u->comp_dir == NULL))\n+\t  || (dir_index < hdr->dirs_count && hdr->dirs[dir_index] == NULL))\n \thdr->filenames[i] = filename;\n       else\n \t{\n@@ -2413,10 +2419,8 @@ read_v2_paths (struct backtrace_state *state, struct unit *u,\n \t  size_t filename_len;\n \t  char *s;\n \n-\t  if (dir_index == 0)\n-\t    dir = u->comp_dir;\n-\t  else if (dir_index - 1 < hdr->dirs_count)\n-\t    dir = hdr->dirs[dir_index - 1];\n+\t  if (dir_index < hdr->dirs_count)\n+\t    dir = hdr->dirs[dir_index];\n \t  else\n \t    {\n \t      dwarf_buf_error (hdr_buf,\n@@ -2704,8 +2708,8 @@ read_line_header (struct backtrace_state *state, struct dwarf_data *ddata,\n \n static int\n read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n-\t\t   struct unit *u, const struct line_header *hdr,\n-\t\t   struct dwarf_buf *line_buf, struct line_vector *vec)\n+\t\t   const struct line_header *hdr, struct dwarf_buf *line_buf,\n+\t\t   struct line_vector *vec)\n {\n   uint64_t address;\n   unsigned int op_index;\n@@ -2715,8 +2719,8 @@ read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n \n   address = 0;\n   op_index = 0;\n-  if (hdr->filenames_count > 0)\n-    reset_filename = hdr->filenames[0];\n+  if (hdr->filenames_count > 1)\n+    reset_filename = hdr->filenames[1];\n   else\n     reset_filename = \"\";\n   filename = reset_filename;\n@@ -2781,10 +2785,8 @@ read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t    size_t f_len;\n \t\t    char *p;\n \n-\t\t    if (dir_index == 0 && hdr->version < 5)\n-\t\t      dir = u->comp_dir;\n-\t\t    else if (dir_index - 1 < hdr->dirs_count)\n-\t\t      dir = hdr->dirs[dir_index - 1];\n+\t\t    if (dir_index < hdr->dirs_count)\n+\t\t      dir = hdr->dirs[dir_index];\n \t\t    else\n \t\t      {\n \t\t\tdwarf_buf_error (line_buf,\n@@ -2851,14 +2853,14 @@ read_line_program (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t  filename = \"\";\n \t\telse\n \t\t  {\n-\t\t    if (fileno - 1 >= hdr->filenames_count)\n+\t\t    if (fileno >= hdr->filenames_count)\n \t\t      {\n \t\t\tdwarf_buf_error (line_buf,\n \t\t\t\t\t (\"invalid file number in \"\n \t\t\t\t\t  \"line number program\"));\n \t\t\treturn 0;\n \t\t      }\n-\t\t    filename = hdr->filenames[fileno - 1];\n+\t\t    filename = hdr->filenames[fileno];\n \t\t  }\n \t      }\n \t      break;\n@@ -2948,7 +2950,7 @@ read_line_info (struct backtrace_state *state, struct dwarf_data *ddata,\n   if (!read_line_header (state, ddata, u, is_dwarf64, &line_buf, hdr))\n     goto fail;\n \n-  if (!read_line_program (state, ddata, u, hdr, &line_buf, &vec))\n+  if (!read_line_program (state, ddata, hdr, &line_buf, &vec))\n     goto fail;\n \n   if (line_buf.reported_underflow)\n@@ -3289,15 +3291,15 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t\tfunction->caller_filename = \"\";\n \t\t      else\n \t\t\t{\n-\t\t\t  if (val.u.uint - 1 >= lhdr->filenames_count)\n+\t\t\t  if (val.u.uint >= lhdr->filenames_count)\n \t\t\t    {\n \t\t\t      dwarf_buf_error (unit_buf,\n \t\t\t\t\t       (\"invalid file number in \"\n \t\t\t\t\t\t\"DW_AT_call_file attribute\"));\n \t\t\t      return 0;\n \t\t\t    }\n \t\t\t  function->caller_filename =\n-\t\t\t    lhdr->filenames[val.u.uint - 1];\n+\t\t\t    lhdr->filenames[val.u.uint];\n \t\t\t}\n \t\t    }\n \t\t  break;"}]}