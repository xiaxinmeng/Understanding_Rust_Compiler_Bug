{"sha": "6b32b6286bcc158ec954b458576d50bcd7ed5df3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzMmI2Mjg2YmNjMTU4ZWM5NTRiNDU4NTc2ZDUwYmNkN2VkNWRmMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-08-06T10:17:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-08-06T10:17:14Z"}, "message": "i386.c (ix86_expand_clrmem): Move gen_cld down to the places where it is actually needed.\n\n\t* config/i386/i386.c (ix86_expand_clrmem): Move gen_cld down to\n\tthe places where it is actually needed.  Don't use repz; stosb\n\tfor -Os with sufficiently small constant sizes.\n\tFor sufficiently small repz; stos{l,q} repeat counts use a sequence\n\tof stos{l,q} instructions instead.\n\nFrom-SVN: r85635", "tree": {"sha": "921579deec711673c464f2e0a1bfb3050a1f4db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/921579deec711673c464f2e0a1bfb3050a1f4db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b32b6286bcc158ec954b458576d50bcd7ed5df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b32b6286bcc158ec954b458576d50bcd7ed5df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b32b6286bcc158ec954b458576d50bcd7ed5df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b32b6286bcc158ec954b458576d50bcd7ed5df3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6797f908eec82d7ead4ca65eb970868c7489f244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6797f908eec82d7ead4ca65eb970868c7489f244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6797f908eec82d7ead4ca65eb970868c7489f244"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "eacfe7c2455793765df80beee352769d59b394e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b32b6286bcc158ec954b458576d50bcd7ed5df3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b32b6286bcc158ec954b458576d50bcd7ed5df3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b32b6286bcc158ec954b458576d50bcd7ed5df3", "patch": "@@ -1,3 +1,11 @@\n+2004-08-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_clrmem): Move gen_cld down to\n+\tthe places where it is actually needed.  Don't use repz; stosb\n+\tfor -Os with sufficiently small constant sizes.\n+\tFor sufficiently small repz; stos{l,q} repeat counts use a sequence\n+\tof stos{l,q} instructions instead.\n+\n 2004-08-06  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \tPR tree-optimization/16807"}, {"sha": "951573415da73d62289ae747c9c79b75d4b90f02", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b32b6286bcc158ec954b458576d50bcd7ed5df3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b32b6286bcc158ec954b458576d50bcd7ed5df3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b32b6286bcc158ec954b458576d50bcd7ed5df3", "patch": "@@ -11508,13 +11508,20 @@ ix86_expand_clrmem (rtx dst, rtx count_exp, rtx align_exp)\n   if (destreg != XEXP (dst, 0))\n     dst = replace_equiv_address_nv (dst, destreg);\n \n-  emit_insn (gen_cld ());\n \n   /* When optimizing for size emit simple rep ; movsb instruction for\n-     counts not divisible by 4.  */\n+     counts not divisible by 4.  The movl $N, %ecx; rep; stosb\n+     sequence is 7 bytes long, so if optimizing for size and count is\n+     small enough that some stosl, stosw and stosb instructions without\n+     rep are shorter, fall back into the next if.  */\n \n-  if ((!optimize || optimize_size) && (count == 0 || (count & 0x03)))\n+  if ((!optimize || optimize_size)\n+      && (count == 0\n+\t  || ((count & 0x03)\n+\t      && (!optimize_size || (count & 0x03) + (count >> 2) > 7))))\n     {\n+      emit_insn (gen_cld ());\n+\n       countreg = ix86_zero_extend_to_Pmode (count_exp);\n       zeroreg = copy_to_mode_reg (QImode, const0_rtx);\n       destexp = gen_rtx_PLUS (Pmode, destreg, countreg);\n@@ -11528,17 +11535,54 @@ ix86_expand_clrmem (rtx dst, rtx count_exp, rtx align_exp)\n       int size = TARGET_64BIT && !optimize_size ? 8 : 4;\n       unsigned HOST_WIDE_INT offset = 0;\n \n+      emit_insn (gen_cld ());\n+\n       zeroreg = copy_to_mode_reg (size == 4 ? SImode : DImode, const0_rtx);\n       if (count & ~(size - 1))\n \t{\n-\t  countreg = copy_to_mode_reg (counter_mode,\n-\t\t\t\t       GEN_INT ((count >> (size == 4 ? 2 : 3))\n-\t\t\t\t\t\t& (TARGET_64BIT ? -1 : 0x3fffffff)));\n-\t  countreg = ix86_zero_extend_to_Pmode (countreg);\n-\t  destexp = gen_rtx_ASHIFT (Pmode, countreg, GEN_INT (size == 4 ? 2 : 3));\n-\t  destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n-\t  emit_insn (gen_rep_stos (destreg, countreg, dst, zeroreg, destexp));\n-\t  offset = count & ~(size - 1);\n+\t  unsigned HOST_WIDE_INT repcount;\n+\t  unsigned int max_nonrep;\n+\n+\t  repcount = count >> (size == 4 ? 2 : 3);\n+\t  if (!TARGET_64BIT)\n+\t    repcount &= 0x3fffffff;\n+\n+\t  /* movl $N, %ecx; rep; stosl is 7 bytes, while N x stosl is N bytes.\n+\t     movl $N, %ecx; rep; stosq is 8 bytes, while N x stosq is 2xN\n+\t     bytes.  In both cases the latter seems to be faster for small\n+\t     values of N.  */\n+\t  max_nonrep = size == 4 ? 7 : 4;\n+\t  if (!optimize_size)\n+\t    switch (ix86_tune)\n+\t      {\n+\t      case PROCESSOR_PENTIUM4:\n+\t      case PROCESSOR_NOCONA:\n+\t        max_nonrep = 3;\n+\t        break;\n+\t      default:\n+\t        break;\n+\t      }\n+\n+\t  if (repcount <= max_nonrep)\n+\t    while (repcount-- > 0)\n+\t      {\n+\t\trtx mem = adjust_automodify_address_nv (dst,\n+\t\t\t\t\t\t\tGET_MODE (zeroreg),\n+\t\t\t\t\t\t\tdestreg, offset);\n+\t\temit_insn (gen_strset (destreg, mem, zeroreg));\n+\t\toffset += size;\n+\t      }\n+\t  else\n+\t    {\n+\t      countreg = copy_to_mode_reg (counter_mode, GEN_INT (repcount));\n+\t      countreg = ix86_zero_extend_to_Pmode (countreg);\n+\t      destexp = gen_rtx_ASHIFT (Pmode, countreg,\n+\t\t\t\t\tGEN_INT (size == 4 ? 2 : 3));\n+\t      destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n+\t      emit_insn (gen_rep_stos (destreg, countreg, dst, zeroreg,\n+\t\t\t\t       destexp));\n+\t      offset = count & ~(size - 1);\n+\t    }\n \t}\n       if (size == 8 && (count & 0x04))\n \t{"}]}