{"sha": "8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwZDM5YTg2Yjk2M2FkMGQzOWVkYjJlN2JmNjMzYjU3OTA0MzJmYw==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-02-19T21:31:02Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-02-19T21:31:02Z"}, "message": "re PR libfortran/21303 (L edit descriptor without a width)\n\n\tPR libfortran/21303\n\n\t* gfortran.h (notification): New enumeration.\n\t(gfc_notification_std): Prototype for the new function.\n\t* error.c (gfc_notification_std): New function.\n\t* io.c (check_format): Handle the case of a L format descriptor\n\twithout a width.\n\n\t* runtime/error.c (notification_std): New function.\n\t* libgfortran.h (notification): New enumeration.\n\t* io/io.h (notification_std): Prototype for the new function. \n\t* io/format.c (parse_format_list): Handle the case of a L format\n\tdescriptor without a width.\n\n\t* gcc/testsuite/gfortran.dg/fmt_l.f90: New test.\n\nFrom-SVN: r111281", "tree": {"sha": "0f202b9e85194d9bc5ec4b762d158c3dabb04d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f202b9e85194d9bc5ec4b762d158c3dabb04d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5dc42bbcc9180a661f1447efda575d6362cf9fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5dc42bbcc9180a661f1447efda575d6362cf9fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5dc42bbcc9180a661f1447efda575d6362cf9fc"}], "stats": {"total": 166, "additions": 158, "deletions": 8}, "files": [{"sha": "4c82c4a5498a02b246cef5827afaf72a33cd0a7c", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -1,6 +1,6 @@\n /* Handle errors.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software\n+   Foundation, Inc.\n    Contributed by Andy Vaught & Niels Kristian Bech Jensen\n \n This file is part of GCC.\n@@ -483,6 +483,22 @@ gfc_warning (const char *nocmsgid, ...)\n }\n \n \n+/* Whether, for a feature included in a given standard set (GFC_STD_*),\n+   we should issue an error or a warning, or be quiet.  */\n+\n+notification\n+gfc_notification_std (int std)\n+{\n+  bool warning;\n+\n+  warning = ((gfc_option.warn_std & std) != 0) && !inhibit_warnings;\n+  if ((gfc_option.allow_std & std) != 0 && !warning)\n+    return SILENT;\n+\n+  return warning ? WARNING : ERROR;\n+}\n+\n+\n /* Possibly issue a warning/error about use of a nonstandard (or deleted)\n    feature.  An error/warning will be issued if the currently selected\n    standard does not contain the requested bits.  Return FAILURE if"}, {"sha": "17e97779653d95bc67477c0fe43f078ef9ae9fec", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -129,6 +129,14 @@ typedef enum\n { SUCCESS = 1, FAILURE }\n try;\n \n+/* This is returned by gfc_notification_std to know if, given the flags\n+   that were given (-std=, -pedantic) we should issue an error, a warning\n+   or nothing.  */\n+\n+typedef enum\n+{ SILENT, WARNING, ERROR }\n+notification;\n+\n /* Matchers return one of these three values.  The difference between\n    MATCH_NO and MATCH_ERROR is that MATCH_ERROR means that a match was\n    successful, but that something non-syntactic is wrong and an error\n@@ -1737,6 +1745,7 @@ void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC\n void gfc_clear_error (void);\n int gfc_error_check (void);\n \n+notification gfc_notification_std (int);\n try gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n \n /* A general purpose syntax error.  */"}, {"sha": "b45e983a045fc87bb3477b3d608db12967eff560", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -569,8 +569,26 @@ check_format (void)\n       if (t == FMT_POSINT)\n \tbreak;\n \n-      error = posint_required;\n-      goto syntax;\n+      switch (gfc_notification_std (GFC_STD_GNU))\n+\t{\n+\t  case WARNING:\n+\t    gfc_warning\n+\t      (\"Extension: Missing positive width after L descriptor at %C\");\n+\t    saved_token = t;\n+\t    break;\n+\n+\t  case ERROR:\n+\t    error = posint_required;\n+\t    goto syntax;\n+\n+\t  case SILENT:\n+\t    saved_token = t;\n+\t    break;\n+\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n+      break;\n \n     case FMT_A:\n       t = format_lex ();"}, {"sha": "e03f63d8b3b061fbacc72138cd2c961d7193c59f", "filename": "gcc/testsuite/gfortran.dg/fmt_l.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_l.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_l.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_l.f90?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu -pedantic -ffree-line-length-none\" }\n+! Test the GNU extension of a L format descriptor without width\n+! PR libfortran/21303\n+program test_l\n+  logical(kind=1) :: l1\n+  logical(kind=2) :: l2\n+  logical(kind=4) :: l4\n+  logical(kind=8) :: l8\n+\n+  character(len=20) :: str\n+\n+  l1 = .true.\n+  write (str,\"(L)\") l1 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l1 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l1 .neqv. .true.) call abort\n+\n+  l2 = .true.\n+  write (str,\"(L)\") l2 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l2 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l2 .neqv. .true.) call abort\n+\n+  l4 = .true.\n+  write (str,\"(L)\") l4 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l4 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l4 .neqv. .true.) call abort\n+\n+  l8 = .true.\n+  write (str,\"(L)\") l8 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l8 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l8 .neqv. .true.) call abort\n+\n+  l1 = .false.\n+  write (str,\"(L)\") l1 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l1 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l1 .neqv. .false.) call abort\n+\n+  l2 = .false.\n+  write (str,\"(L)\") l2 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l2 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l2 .neqv. .false.) call abort\n+\n+  l4 = .false.\n+  write (str,\"(L)\") l4 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l4 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l4 .neqv. .false.) call abort\n+\n+  l8 = .false.\n+  write (str,\"(L)\") l8 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  read (str,\"(L)\") l8 ! { dg-warning \"Extension: Missing positive width after L descriptor\" }\n+  if (l8 .neqv. .false.) call abort\n+\n+end program test_l\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }\n+! { dg-output \"Fortran runtime warning: Positive width required in format\\n\" }"}, {"sha": "9528dbad277e4311c3e0d0d611369b6457ba7da2", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -662,8 +662,17 @@ parse_format_list (st_parameter_dt *dtp)\n       t = format_lex (fmt);\n       if (t != FMT_POSINT)\n \t{\n-\t  fmt->error = posint_required;\n-\t  goto finished;\n+\t  if (notification_std(GFC_STD_GNU) == ERROR)\n+\t    {\n+\t      fmt->error = posint_required;\n+\t      goto finished;\n+\t    }\n+\t  else\n+\t    {\n+\t      fmt->saved_token = t;\n+\t      fmt->value = 1;\t/* Default width */\n+\t      notify_std(GFC_STD_GNU, posint_required);\n+\t    }\n \t}\n \n       get_fnode (fmt, &head, &tail, FMT_L);"}, {"sha": "9b35ef9165078035be747f526748dbea94fa5b0b", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -843,6 +843,9 @@ internal_proto(list_formatted_write);\n extern try notify_std (int, const char *);\n internal_proto(notify_std);\n \n+extern notification notification_std(int);\n+internal_proto(notification_std);\n+\n /* size_from_kind.c */\n extern size_t size_from_real_kind (int);\n internal_proto(size_from_real_kind);"}, {"sha": "524c57e37bcf58c140760dccd7796bba81403c7c", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -404,6 +404,13 @@ error_codes;\n #define GFC_FPE_UNDERFLOW  (1<<4)\n #define GFC_FPE_PRECISION  (1<<5)\n \n+/* This is returned by notification_std to know if, given the flags\n+   that were given (-std=, -pedantic) we should issue an error, a warning\n+   or nothing.  */\n+typedef enum\n+{ SILENT, WARNING, ERROR }\n+notification;\n+\n /* The filename and line number don't go inside the globals structure.\n    They are set by the rest of the program and must be linked to.  */\n "}, {"sha": "e102449cec512bc502ed2b6162735a732f8b13ab", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0d39a86b963ad0d39edb2e7bf633b5790432fc/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "patch": "@@ -498,6 +498,25 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n }\n \n \n+/* Whether, for a feature included in a given standard set (GFC_STD_*),\n+   we should issue an error or a warning, or be quiet.  */\n+\n+notification\n+notification_std (int std)\n+{\n+  int warning;\n+\n+  if (!compile_options.pedantic)\n+    return SILENT;\n+\n+  warning = compile_options.warn_std & std;\n+  if ((compile_options.allow_std & std) != 0 && !warning)\n+    return SILENT;\n+\n+  return warning ? WARNING : ERROR;\n+}\n+\n+\n \n /* Possibly issue a warning/error about use of a nonstandard (or deleted)\n    feature.  An error/warning will be issued if the currently selected"}]}