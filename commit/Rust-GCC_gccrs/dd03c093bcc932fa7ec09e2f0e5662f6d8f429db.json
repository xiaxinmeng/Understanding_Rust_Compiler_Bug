{"sha": "dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwM2MwOTNiY2M5MzJmYTdlYzA5ZTJmMGU1NjYyZjZkOGY0MjlkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-27T20:39:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-27T20:39:19Z"}, "message": "PR c++/89831 - error with qualified-id in const member function.\n\nSince the fix for 15272 we were remembering the wrong function to use at\ninstantiation time, because the type of the SCOPE_REF didn't reflect the\ncv-quals of 'this'.  Conveniently, we can fix this by simplifying the code.\n\n\t* semantics.c (finish_non_static_data_member): Use object cv-quals\n\tin scoped case, too.\n\nFrom-SVN: r269977", "tree": {"sha": "251e708b448eecbb80af1b26733466be5475b1e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251e708b448eecbb80af1b26733466be5475b1e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fad170232ce3b8c7a7743cc5a6031932257c9720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad170232ce3b8c7a7743cc5a6031932257c9720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad170232ce3b8c7a7743cc5a6031932257c9720"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "9803ef947f803bc1c59810df0b0487b55cbf9bcc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "patch": "@@ -1,5 +1,9 @@\n 2019-03-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/89831 - error with qualified-id in const member function.\n+\t* semantics.c (finish_non_static_data_member): Use object cv-quals\n+\tin scoped case, too.\n+\n \tPR c++/89421 - ICE with lambda in template parameter list.\n \t* parser.c (cp_parser_lambda_expression): Also reject a lambda in a\n \ttemplate parameter list before C++20."}, {"sha": "a08a2a57f5ffcb6ce9ddd2dddfde361043266d49", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "patch": "@@ -1861,7 +1861,7 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n \n   if (current_class_ptr)\n     TREE_USED (current_class_ptr) = 1;\n-  if (processing_template_decl && !qualifying_scope)\n+  if (processing_template_decl)\n     {\n       tree type = TREE_TYPE (decl);\n \n@@ -1882,17 +1882,16 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n \t  type = cp_build_qualified_type (type, quals);\n \t}\n \n-      ret = (convert_from_reference\n-\t      (build_min (COMPONENT_REF, type, object, decl, NULL_TREE)));\n+      if (qualifying_scope)\n+\t/* Wrap this in a SCOPE_REF for now.  */\n+\tret = build_qualified_name (type, qualifying_scope, decl,\n+\t\t\t\t    /*template_p=*/false);\n+      else\n+\tret = (convert_from_reference\n+\t       (build_min (COMPONENT_REF, type, object, decl, NULL_TREE)));\n     }\n   /* If PROCESSING_TEMPLATE_DECL is nonzero here, then\n-     QUALIFYING_SCOPE is also non-null.  Wrap this in a SCOPE_REF\n-     for now.  */\n-  else if (processing_template_decl)\n-    ret = build_qualified_name (TREE_TYPE (decl),\n-\t\t\t\tqualifying_scope,\n-\t\t\t\tdecl,\n-\t\t\t\t/*template_p=*/false);\n+     QUALIFYING_SCOPE is also non-null.  */\n   else\n     {\n       tree access_type = TREE_TYPE (object);"}, {"sha": "6d28fb2ec9e0dc8fb8ee74e00880b12209c4ba65", "filename": "gcc/testsuite/g++.dg/template/scope6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd03c093bcc932fa7ec09e2f0e5662f6d8f429db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope6.C?ref=dd03c093bcc932fa7ec09e2f0e5662f6d8f429db", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/89831\n+\n+struct Q { \n+    int operator[](int i) { return 0; }\n+    int operator[](int i) const { return 0; }\n+};\n+\n+struct Base {\n+    Q x;\n+};\n+struct X : public Base {\n+    template <typename T>\n+    void f(T) const {\n+        int q = Base::x[0];\n+    }   \n+};\n+int main() { X().f(3); }"}]}