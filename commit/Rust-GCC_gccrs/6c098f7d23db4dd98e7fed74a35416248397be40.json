{"sha": "6c098f7d23db4dd98e7fed74a35416248397be40", "node_id": "C_kwDOANBUbNoAKDZjMDk4ZjdkMjNkYjRkZDk4ZTdmZWQ3NGEzNTQxNjI0ODM5N2JlNDA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T08:25:58Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T14:23:29Z"}, "message": "RISC-V: Add testcases for VSETVL PASS 5\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-21.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-22.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-23.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-24.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-25.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-26.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-29.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-30.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-31.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-32.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-33.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-34.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-35.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-36.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-37.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-38.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-39.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-40.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-41.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-42.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-43.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-44.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-46.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-9.c: New test.", "tree": {"sha": "bf2606c6744744daa20c6328ebb849262d95596a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf2606c6744744daa20c6328ebb849262d95596a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c098f7d23db4dd98e7fed74a35416248397be40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c098f7d23db4dd98e7fed74a35416248397be40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c098f7d23db4dd98e7fed74a35416248397be40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c098f7d23db4dd98e7fed74a35416248397be40/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54"}], "stats": {"total": 2579, "additions": 2579, "deletions": 0}, "files": [{"sha": "fbf451f3d4cd5e78ae1fd9a1af7da9582a2a58dd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-1.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ba289f24d230cc824e64a4ad054d5f5b25132a03", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-10.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-10.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond2, int cond3)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0)\n+  {\n+    if (cond2 == 11)\n+    {\n+      for (int i = 0; i < n; i++)\n+      {\n+        out[i] = out[i] + 2;\n+      }\n+    }\n+    else if (cond2 == 111)\n+    {\n+      if (cond3 == 300)\n+      {\n+        for (int i = 0; i < n; i++)\n+        {\n+          out[i] = out[i] + out[i];\n+        }\n+      }\n+    }\n+  }\n+\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "44e8a3f12f72216f064166b32b16b4e1b6148726", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-11.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-11.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond2, int cond3)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200 + i);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300 + i);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400 + i);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500 + i);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0)\n+  {\n+    if (cond2 == 11)\n+    {\n+      for (int i = 0; i < n; i++)\n+      {\n+        out[i] = out[i] + 2;\n+      }\n+    }\n+    else if (cond2 == 111)\n+    {\n+      if (cond3 == 300)\n+      {\n+        for (int i = 0; i < n; i++)\n+        {\n+          out[i] = out[i] + out[i];\n+        }\n+      } else {\n+        for (int i = 0; i < n; i++) {\n+          vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 2000 + i);\n+          *(vfloat32mf2_t*)(out + i + 4000) = v;\n+        }\n+      }\n+    }\n+  }\n+\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a8f5af9f1fad4cd79ce8e82f133f939c0b08d149", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-12.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-12.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond2, int cond3)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200 + i);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300 + i);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400 + i);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500 + i);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0)\n+  {\n+    if (cond2 == 11)\n+    {\n+      for (int i = 0; i < n; i++)\n+      {\n+        out[i] = out[i] + 2;\n+      }\n+    }\n+    else if (cond2 == 111)\n+    {\n+      if (cond3 == 300)\n+      {\n+        for (int i = 0; i < n; i++)\n+        {\n+          out[i] = out[i] + out[i];\n+        }\n+      } else {\n+        for (int i = 0; i < n; i++) {\n+          vint8mf2_t v = *(vint8mf2_t*)(in + 2000 + i);\n+          *(vint8mf2_t*)(out + i + 4000) = v;\n+        }\n+      }\n+    }\n+  }\n+\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "31034bcfa253ff81f4db1a02b45744779f3dbf81", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond2, int cond3)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200 + i);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300 + i);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400 + i);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500 + i);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0)\n+  {\n+    if (cond2 == 11)\n+    {\n+      for (int i = 0; i < n; i++)\n+      {\n+        out[i] = out[i] + 2;\n+      }\n+    }\n+    else if (cond2 == 111)\n+    {\n+      if (cond3 == 300)\n+      {\n+        for (int i = 0; i < n; i++)\n+        {\n+          out[i] = out[i] + out[i];\n+        }\n+      } else {\n+        for (int i = 0; i < n; i++) {\n+          vint8mf2_t v = *(vint8mf2_t*)(in + 2000 + i);\n+          *(vint8mf2_t*)(out + i + 4000) = v;\n+        }\n+      }\n+    }\n+  }\n+\n+  for (int i = 0; i < n; i++) {\n+    vint16m1_t v;\n+    *(vint16m1_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "dececb45294e15cf87fe4bbd9a3c46e5a6418254", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-14.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-14.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "161d14c200947750f6390ba22bbdabb8c966538c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-15.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-15.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+ \n+   if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+\n+    if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+    if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+    if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+      *(vint8mf8_t*)(out + i + 333) = v;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 444);\n+    *(vint32mf2_t*)(out + i + 444) = v;\n+  }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 555);\n+    *(vint64m1_t*)(out + i + 555) = v;\n+  }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 666);\n+    *(vfloat64m1_t*)(out + i + 666) = v;\n+  }\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "84abe55a2b00a8c80c2e57d0e0a482a85a006636", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-16.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-16.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 771);\n+    *(vint8mf8_t*)(out + 771) = v;\n+    vint32mf2_t v2 = *(vint32mf2_t*)(in + 71);\n+    *(vint32mf2_t*)(out + 71) = v2;\n+    vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17);\n+    *(vfloat32mf2_t*)(out + 17) = v3;\n+     vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117);\n+    *(vuint32mf2_t*)(out + 117) = v4;\n+  } else {\n+    vfloat32mf2_t v0 = *(vfloat32mf2_t*)(in + 1123);\n+    *(vfloat32mf2_t*)(out + 1123) = v0;\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+    *(vint8mf8_t*)(out + 333) = v;\n+    vbool64_t v2 = *(vbool64_t*)(in + 91);\n+    *(vbool64_t*)(out + 91) = v2;\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1f3bae2342a08679ab27b43cbe4a3a1c86405a61", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-17.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-17.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++){\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 771 + i);\n+      *(vint8mf8_t*)(out + 771 + i) = v;\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + 71 + i);\n+      *(vint32mf2_t*)(out + 71 + i) = v2;\n+      vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17 + i);\n+      *(vfloat32mf2_t*)(out + 17 + i) = v3;\n+       vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117 + i);\n+      *(vuint32mf2_t*)(out + 117 + i) = v4;\n+    }\n+  } else {\n+    for (int i = 0; i < n; i++){\n+      vfloat32mf2_t v0 = *(vfloat32mf2_t*)(in + 1123 + i);\n+      *(vfloat32mf2_t*)(out + 1123 + i) = v0;\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333 + i);\n+      *(vint8mf8_t*)(out + 333 + i) = v;\n+      vbool64_t v2 = *(vbool64_t*)(in + 91 + i);\n+      *(vbool64_t*)(out + 91 + i) = v2;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "33885e77ae9a071b9be8dfe225fb772068acdc48", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-18.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-18.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++){\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 771 + i);\n+      *(vint8mf8_t*)(out + 771 + i) = v;\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + 71 + i);\n+      *(vint32mf2_t*)(out + 71 + i) = v2;\n+      vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17 + i);\n+      *(vfloat32mf2_t*)(out + 17 + i) = v3;\n+       vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117 + i);\n+      *(vuint32mf2_t*)(out + 117 + i) = v4;\n+    }\n+  } else {\n+    vfloat32mf2_t v0 = *(vfloat32mf2_t*)(in + 1123);\n+    *(vfloat32mf2_t*)(out + 1123) = v0;\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+    *(vint8mf8_t*)(out + 333) = v;\n+    vbool64_t v2 = *(vbool64_t*)(in + 91);\n+    *(vbool64_t*)(out + 91) = v2;\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "213c48a1b55a16ae158a52151fd379e2d67b44ce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-19.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-19.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 771);\n+    *(vint8mf8_t*)(out + 771) = v;\n+    vint32mf2_t v2 = *(vint32mf2_t*)(in + 71);\n+    *(vint32mf2_t*)(out + 71) = v2;\n+    vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17);\n+    *(vfloat32mf2_t*)(out + 17) = v3;\n+     vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117);\n+    *(vuint32mf2_t*)(out + 117) = v4;\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b8c2cc05f38171c1d23cd1ca9169b458da982a4b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-2.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    out[i] = out[i] + 2;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    out[i] = out[i] + out[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    out[i] = out[i] * 2;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    out[i] = out[i] * out[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    out[i] = out[i] * out[i] + 100;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1f3bae2342a08679ab27b43cbe4a3a1c86405a61", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-20.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-20.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++){\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 771 + i);\n+      *(vint8mf8_t*)(out + 771 + i) = v;\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + 71 + i);\n+      *(vint32mf2_t*)(out + 71 + i) = v2;\n+      vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17 + i);\n+      *(vfloat32mf2_t*)(out + 17 + i) = v3;\n+       vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117 + i);\n+      *(vuint32mf2_t*)(out + 117 + i) = v4;\n+    }\n+  } else {\n+    for (int i = 0; i < n; i++){\n+      vfloat32mf2_t v0 = *(vfloat32mf2_t*)(in + 1123 + i);\n+      *(vfloat32mf2_t*)(out + 1123 + i) = v0;\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 333 + i);\n+      *(vint8mf8_t*)(out + 333 + i) = v;\n+      vbool64_t v2 = *(vbool64_t*)(in + 91 + i);\n+      *(vbool64_t*)(out + 91 + i) = v2;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b60a6527262a95c093cf066ae15bc30b760860ee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-21.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-21.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++){\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 771 + i);\n+      *(vint8mf8_t*)(out + 771 + i) = v;\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + 71 + i);\n+      *(vint32mf2_t*)(out + 71 + i) = v2;\n+      vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17 + i);\n+      *(vfloat32mf2_t*)(out + 17 + i) = v3;\n+       vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117 + i);\n+      *(vuint32mf2_t*)(out + 117 + i) = v4;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c4a04511f344526710b4042064fab03d0b99791c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-22.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-22.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++){\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 771 + i);\n+      *(vint8mf8_t*)(out + 771 + i) = v;\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + 71 + i);\n+      *(vint32mf2_t*)(out + 71 + i) = v2;\n+      vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in + 17 + i);\n+      *(vfloat32mf2_t*)(out + 17 + i) = v3;\n+       vuint32mf2_t v4 = *(vuint32mf2_t*)(in + 117 + i);\n+      *(vuint32mf2_t*)(out + 117 + i) = v4;\n+    }\n+  } else {\n+    vfloat32mf2_t v0 = *(vfloat32mf2_t*)(in + 1123);\n+    *(vfloat32mf2_t*)(out + 1123) = v0;\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 333);\n+    *(vint8mf8_t*)(out + 333) = v;\n+    vbool64_t v2 = *(vbool64_t*)(in + 91);\n+    *(vbool64_t*)(out + 91) = v2;\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "36a18a40536407f17c47b4a1e1ac563dd1f4a28f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-23.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-23.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  vint32mf2_t v;\n+  *(vint32mf2_t*)(out + 7000) = v;\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b4d4240b8d47a30f47664c6e137a5f1c4d84b1d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-24.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-24.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  vint32mf2_t v;\n+  *(vint32mf2_t*)(out + 7000) = v;\n+ \n+  for (int i = 0; i < n; i++) {\n+    vbool64_t v;\n+    *(vbool64_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4295ac3a2bb4679b06672da8ad4658e14489079f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-25.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-25.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint16mf4_t v2;\n+        *(vint16mf4_t*)(out + i + 100) = v2;\n+      }\n+  } else if (cond == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+    *(vint8mf8_t*)(out + 200) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint32mf2_t v2;\n+        *(vint32mf2_t*)(out + i + 200) = v2;\n+      }\n+  } else if (cond == 2) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+    *(vint8mf8_t*)(out + 300) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v2;\n+        *(vint8mf8_t*)(out + i + 300) = v2;\n+      }\n+  } else if (cond == 3) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 400);\n+    *(vint8mf8_t*)(out + 400) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint64m1_t v2;\n+        *(vint64m1_t*)(out + i + 400) = v2;\n+      }\n+  } else if (cond == 4) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 500) = v2;\n+      }\n+  } else if (cond == 5) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 600);\n+    *(vuint8mf8_t*)(out + 600) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint16mf4_t v2;\n+        *(vuint16mf4_t*)(out + i + 600) = v2;\n+      }\n+  } else if (cond == 6) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 700);\n+    *(vuint8mf8_t*)(out + 700) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint32mf2_t v2;\n+        *(vuint32mf2_t*)(out + i + 700) = v2;\n+      }\n+  } else if (cond == 7) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 800);\n+    *(vuint8mf8_t*)(out + 800) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint8mf8_t v2;\n+        *(vuint8mf8_t*)(out + i + 800) = v2;\n+      }\n+  } else if (cond == 8) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900);\n+    *(vuint8mf8_t*)(out + 900) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint64m1_t v2;\n+        *(vuint64m1_t*)(out + i + 900) = v2;\n+      }\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 1000);\n+    *(vuint8mf8_t*)(out + 1000) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 1000) = v2;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 10 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 20 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "59e069f21499e963835da3a3070b06d28968ad19", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-26.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-26.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint16mf4_t v2;\n+        *(vint16mf4_t*)(out + i + 100) = v2;\n+      }\n+  } else if (cond == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+    *(vint8mf8_t*)(out + 200) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint32mf2_t v2;\n+        *(vint32mf2_t*)(out + i + 200) = v2;\n+      }\n+  } else if (cond == 2) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+    *(vint8mf8_t*)(out + 300) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint8mf8_t v2;\n+        *(vint8mf8_t*)(out + i + 300) = v2;\n+      }\n+  } else if (cond == 3) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 400);\n+    *(vint8mf8_t*)(out + 400) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint64m1_t v2;\n+        *(vint64m1_t*)(out + i + 400) = v2;\n+      }\n+  } else if (cond == 4) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 500) = v2;\n+      }\n+  } else if (cond == 5) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 600);\n+    *(vuint8mf8_t*)(out + 600) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint16mf4_t v2;\n+        *(vuint16mf4_t*)(out + i + 600) = v2;\n+      }\n+  } else if (cond == 6) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 700);\n+    *(vuint8mf8_t*)(out + 700) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint32mf2_t v2;\n+        *(vuint32mf2_t*)(out + i + 700) = v2;\n+      }\n+  } else if (cond == 7) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 800);\n+    *(vuint8mf8_t*)(out + 800) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint8mf8_t v2;\n+        *(vuint8mf8_t*)(out + i + 800) = v2;\n+      }\n+  } else if (cond == 8) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900);\n+    *(vuint8mf8_t*)(out + 900) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vuint64m1_t v2;\n+        *(vuint64m1_t*)(out + i + 900) = v2;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 8 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 17 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e148a1cc859c3a670bdb1791d865a2b9b3cf541f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-27.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-27.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint16mf4_t v2;\n+        *(vint16mf4_t*)(out + i + 100) = v2;\n+      }\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 1000);\n+    *(vuint8mf8_t*)(out + 1000) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 1000) = v2;\n+        vbool64_t v3;\n+        *(vbool64_t*)(out + i + 2000) = v3;\n+        vbool32_t v4;\n+        *(vbool32_t*)(out + i + 3000) = v4;\n+        vbool16_t v5;\n+        *(vbool16_t*)(out + i + 4000) = v5;\n+        vbool8_t v6;\n+        *(vbool8_t*)(out + i + 5000) = v6;\n+        vbool4_t v7;\n+        *(vbool4_t*)(out + i + 6000) = v7;\n+        vbool2_t v8;\n+        *(vbool2_t*)(out + i + 7000) = v8;\n+        vbool1_t v9;\n+        *(vbool1_t*)(out + i + 8000) = v9;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e8340a63ee27605fc2fa9c020343c5f4a487b90d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-28.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-28.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint16mf4_t v2;\n+        *(vint16mf4_t*)(out + i + 100) = v2;\n+      }\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 1000);\n+    *(vuint8mf8_t*)(out + 1000) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 1000) = v2;\n+        vbool64_t v3;\n+        *(vbool64_t*)(out + i + 2000) = v3;\n+        vbool32_t v4;\n+        *(vbool32_t*)(out + i + 3000) = v4;\n+        vbool16_t v5;\n+        *(vbool16_t*)(out + i + 4000) = v5;\n+        vbool8_t v6;\n+        *(vbool8_t*)(out + i + 5000) = v6;\n+        vbool4_t v7;\n+        *(vbool4_t*)(out + i + 6000) = v7;\n+        vbool2_t v8;\n+        *(vbool2_t*)(out + i + 7000) = v8;\n+        vbool1_t v9;\n+        *(vbool1_t*)(out + i + 8000) = v9;\n+        vuint32mf2_t v10;\n+        *(vuint32mf2_t*)(out + i + 100000) = v10;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "74584e7708b2c4d969e8004a706b55ec0ad2353a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-29.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-29.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vint16mf4_t v2;\n+        *(vint16mf4_t*)(out + i + 100) = v2;\n+      }\n+  } else {\n+    vuint8mf8_t v;\n+    *(vuint8mf8_t*)(out + 1000) = v;\n+    for (int i = 0; i < n; i++)\n+      {\n+        vfloat32mf2_t v2;\n+        *(vfloat32mf2_t*)(out + i + 1000) = v2;\n+        vbool64_t v3;\n+        *(vbool64_t*)(out + i + 2000) = v3;\n+        vbool32_t v4;\n+        *(vbool32_t*)(out + i + 3000) = v4;\n+        vbool16_t v5;\n+        *(vbool16_t*)(out + i + 4000) = v5;\n+        vbool8_t v6;\n+        *(vbool8_t*)(out + i + 5000) = v6;\n+        vbool4_t v7;\n+        *(vbool4_t*)(out + i + 6000) = v7;\n+        vbool2_t v8;\n+        *(vbool2_t*)(out + i + 7000) = v8;\n+        vbool1_t v9;\n+        *(vbool1_t*)(out + i + 8000) = v9;\n+        vuint32mf2_t v10;\n+        *(vuint32mf2_t*)(out + i + 100000) = v10;\n+      }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 11 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "63f6c72c60ebbc9eb661bf8e2c789bfbeb70d194", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-3.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-3.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 2;\n+    }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 3;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "92bf3abaec7642ac808560681fe7321712555729", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-30.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-30.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v2 = *(vfloat32mf2_t*)(in + i + 1000);\n+      *(vfloat32mf2_t*)(out + i + 1000) = v2;\n+      vbool32_t v4;\n+      *(vbool32_t*)(out + i + 3000) = v4;\n+      vbool16_t v5;\n+      *(vbool16_t*)(out + i + 4000) = v5;\n+      vbool8_t v6;\n+      *(vbool8_t*)(out + i + 5000) = v6;\n+      vbool4_t v7;\n+      *(vbool4_t*)(out + i + 6000) = v7;\n+      vbool2_t v8;\n+      *(vbool2_t*)(out + i + 7000) = v8;\n+      vbool1_t v9;\n+      *(vbool1_t*)(out + i + 8000) = v9;\n+      vuint32mf2_t v10 = *(vuint32mf2_t*)(in + i + 100000);\n+      *(vuint32mf2_t*)(out + i + 100000) = v10;\n+    }\n+  \n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4d254570e4d0a0131615cf6f15d0f8bb9c078a86", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-31.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-31.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v2 = *(vuint16mf4_t*)(in + i + 1000);\n+      *(vuint16mf4_t*)(out + i + 1000) = v2;\n+      vbool32_t v4;\n+      *(vbool32_t*)(out + i + 3000) = v4;\n+      vbool16_t v5;\n+      *(vbool16_t*)(out + i + 4000) = v5;\n+      vbool8_t v6;\n+      *(vbool8_t*)(out + i + 5000) = v6;\n+      vbool4_t v7;\n+      *(vbool4_t*)(out + i + 6000) = v7;\n+      vbool2_t v8;\n+      *(vbool2_t*)(out + i + 7000) = v8;\n+      vbool1_t v9;\n+      *(vbool1_t*)(out + i + 8000) = v9;\n+      vuint32mf2_t v10 = *(vuint32mf2_t*)(in + i + 100000);\n+      *(vuint32mf2_t*)(out + i + 100000) = v10;\n+    }\n+  \n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "284df7245e73ce5b97592edfaedc4e4ff81b5183", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-32.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-32.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v2 = *(vuint16mf4_t*)(in + i + 1000);\n+      *(vuint16mf4_t*)(out + i + 1000) = v2;\n+      vbool32_t v4;\n+      *(vbool32_t*)(out + i + 3000) = v4;\n+      vbool16_t v5;\n+      *(vbool16_t*)(out + i + 4000) = v5;\n+      vbool8_t v6;\n+      *(vbool8_t*)(out + i + 5000) = v6;\n+      vbool4_t v7;\n+      *(vbool4_t*)(out + i + 6000) = v7;\n+      vbool2_t v8;\n+      *(vbool2_t*)(out + i + 7000) = v8;\n+      vbool1_t v9;\n+      *(vbool1_t*)(out + i + 8000) = v9;\n+      vuint32mf2_t v10;\n+      *(vuint32mf2_t*)(out + i + 100000) = v10;\n+    }\n+  \n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1 = *(vint8mf8_t*)(in + i + 100000);\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "1057b1bc00b4ea5f757175496928582c3696d4f4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-33.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-33.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, void * restrict in2, void * restrict out2,  int n, int cond)\n+{\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v2;\n+      *(vuint16mf4_t*)(out + i + 1000) = v2;\n+      vbool32_t v4;\n+      *(vbool32_t*)(out + i + 3000) = v4;\n+      vbool16_t v5;\n+      *(vbool16_t*)(out + i + 4000) = v5;\n+      vbool8_t v6;\n+      *(vbool8_t*)(out + i + 5000) = v6;\n+      vbool4_t v7;\n+      *(vbool4_t*)(out + i + 6000) = v7;\n+      vbool2_t v8;\n+      *(vbool2_t*)(out + i + 7000) = v8;\n+      vbool1_t v9;\n+      *(vbool1_t*)(out + i + 8000) = v9;\n+      vuint32mf2_t v10;\n+      *(vuint32mf2_t*)(out + i + 100000) = v10;\n+    }\n+  \n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1 = *(vint8mf8_t*)(in + i + 100000);\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9746ebed18c76391fa32dcae53ff7c9868bc97b4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-34.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-34.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, int32_t * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0)\n+    {\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] + in[i];\n+        }\n+    }\n+  else if (cond == 1)\n+   {\n+      for (int i = 0; i < n; i++)\n+          {\n+            out2[i] = out[i] + in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+          {\n+            out[i] = out2[i] / in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] * in[i];\n+        }\n+   }\n+  else\n+   {\n+     for (int i = 0; i < n; i++)\n+      {\n+        out[i] = in[i] + 4;\n+      }\n+   }\n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0547d62283852ee6f9abdcdbc3c689260078fadb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-35.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-35.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, int32_t * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0)\n+    {\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] + in[i];\n+        }\n+    }\n+  else if (cond == 1)\n+   {\n+      for (int i = 0; i < n; i++)\n+          {\n+            out2[i] = out[i] + in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+          {\n+            out[i] = out2[i] / in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] * in[i];\n+        }\n+   }\n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a82b86f4d8896e517d4c66f2851cda2aa4ed60a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-36.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-36.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, int32_t * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0)\n+    {\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] + in[i];\n+        }\n+    }\n+  else if (cond == 1)\n+   {\n+      for (int i = 0; i < n; i++)\n+          {\n+            out2[i] = out[i] + in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+          {\n+            out[i] = out2[i] / in[i];\n+          }\n+      for (int i = 0; i < n; i++)\n+        {\n+          out2[i] = out[i] * in[i];\n+        }\n+   }\n+  else\n+   {\n+     for (int i = 0; i < n; i++) \n+      {\n+        vint32mf2_t v1 = *(vint32mf2_t*)in2;\n+        *(vint32mf2_t*)(out + i + 10) = v1;\n+      }\n+   }\n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "981e90ed6af4e54111e1d37168d5195ac9921afe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-37.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-37.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, int32_t * restrict out2,  int n, int cond)\n+{\n+  if (cond == 0)\n+    {\n+      for (int i = 0; i < n; i++) \n+      {\n+        vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1000);\n+        *(vfloat32mf2_t*)(out + i + 1000) = v1;\n+      }\n+      for (int i = 0; i < n; i++) \n+      {\n+        vint32mf2_t v1 = *(vint32mf2_t*)in;\n+        *(vint32mf2_t*)(out + i + 10) = v1;\n+      }\n+    for (int i = 0; i < n; i++) \n+      {\n+        vint16mf4_t v1 = *(vint16mf4_t*)(in + 100);\n+        *(vint16mf4_t*)(out + i + 100) = v1;\n+      }\n+    }\n+  else\n+   {\n+     fn3 ();\n+   }\n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "79dbeefb5851f4f2234144177bd6ffa4544947d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-38.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-38.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int32_t * restrict in2, int32_t * restrict out2,  int n, int cond, int cond2)\n+{\n+  if (cond == 0)\n+    {\n+      if (cond2) {\n+      for (int i = 0; i < n; i++) \n+      {\n+        vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 1000);\n+        *(vfloat32mf2_t*)(out + i + 1000) = v1;\n+      }\n+      for (int i = 0; i < n; i++) \n+      {\n+        vint32mf2_t v1 = *(vint32mf2_t*)in;\n+        *(vint32mf2_t*)(out + i + 10) = v1;\n+      }\n+    for (int i = 0; i < n; i++) \n+      {\n+        vint16mf4_t v1 = *(vint16mf4_t*)(in + 100);\n+        *(vint16mf4_t*)(out + i + 100) = v1;\n+      }\n+      } else {\n+        for (int i = 0; i < n; i++) \n+      {\n+        vfloat32mf2_t v1 = *(vfloat32mf2_t*)(in + 2000);\n+        *(vfloat32mf2_t*)(out + i + 2000) = v1;\n+      }\n+      for (int i = 0; i < n; i++) \n+      {\n+        vint32mf2_t v1 = *(vint32mf2_t*)(in + 200);\n+        *(vint32mf2_t*)(out + i + 200) = v1;\n+      }\n+    for (int i = 0; i < n; i++) \n+      {\n+        vint16mf4_t v1 = *(vint16mf4_t*)(in + 300);\n+        *(vint16mf4_t*)(out + i + 300) = v1;\n+      }\n+      }\n+    }\n+  else\n+   {\n+     for (int i = 0; i < n; i++) \n+      {\n+        vint16mf4_t v1 = *(vint16mf4_t*)(in + 30000);\n+        *(vint16mf4_t*)(out + i + 30000) = v1;\n+      }\n+    for (int i = 0; i < n; i++) \n+      {\n+        vint32mf2_t v1 = *(vint32mf2_t*)(in + 40000);\n+        *(vint32mf2_t*)(out + i + 40000) = v1;\n+      }\n+    for (int i = 0; i < n; i++) \n+      {\n+        vuint32mf2_t v1 = *(vuint32mf2_t*)(in + 50000);\n+        *(vuint32mf2_t*)(out + i + 50000) = v1;\n+      }\n+   }\n+  for (int i = 0; i < n; i++) \n+    {\n+      vint8mf8_t v1;\n+      *(vint8mf8_t*)(out + i + 10) = v1;\n+    }\n+}\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c3eb6f9f6a79aeb6442e0bca693509296eca471a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-39.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-39.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_3 (int32_t * restrict in, int32_t * restrict out, size_t n, int cond)\n+{\n+  vint8mf2_t v;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2 == 0) {\n+        v = *(vint8mf2_t*)(in + i);\n+      } else {\n+        *(vint8mf2_t*)(out + i) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0ba60047699e417f713c10617b3a71bb9304bdcf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-4.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-4.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 2;\n+    }\n+  } else if (cond == 1){\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 3;\n+    }\n+  } else if (cond == 2) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 5;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 6;\n+    }\n+  } else if (cond == 4) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 8;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 9;\n+    }\n+  } else if (cond == 5) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 10;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 11;\n+    }\n+  } else if (cond == 6) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 12;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 13;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] * out[i];\n+    }\n+  } else if (cond == 7) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 15;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 16;\n+    }\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + out[i];\n+    }\n+  } else if (cond == 8) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 101;\n+    }\n+  } else if (cond == 9) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] * 101;\n+    }\n+  } else if (cond == 10) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] >> 3;\n+    }\n+  } else {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] << 1;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "67f1a3387ceb0732b3a7f508674ae459551db0bf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-40.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-40.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_4 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  vint8mf2_t v;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      for (size_t j = 0; j < m; j += 1) {\n+        if (j % 2 == 0) {\n+          v = *(vint8mf2_t*)(in + i + j);\n+        } else {\n+          *(vint8mf2_t*)(out + i + j) = v;\n+        }\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b2f4feed76ee7f0b73cec20abd0562af1a9ae22b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-41.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-41.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_5 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  vint8mf2_t v;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        for (size_t j = 0; j < m; j += 1) {\n+          if (j % 2 == 0) {\n+            v = *(vint8mf2_t*)(in + i + j);\n+          } else {\n+            *(vint8mf2_t*)(out + i + j) = v;\n+          }\n+        }\n+      } else {\n+        *(vint8mf2_t*)(out + i) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4eb57de0de8abff161986fa5f975afd533d21524", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-42.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-42.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_6 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  vint8mf2_t v;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        for (size_t j = 0; j < m; j += 1) {\n+          if (j % 2 == 0) {\n+            v = *(vint8mf2_t*)(in + i + j);\n+          } else {\n+            *(vint8mf2_t*)(out + i + j) = v;\n+          }\n+        }\n+      } else {\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "047369e7734fea8e05d0fdd284d403f0569367bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-43.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-43.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_3 (int32_t * restrict in, int32_t * restrict out, size_t n, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 16 == 0) {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      } else if (i % 8 == 0) {\n+        vint16mf4_t v = *(vint16mf4_t*)(in + i + 200);\n+        *(vint16mf4_t*)(out + i + 200) = v;\n+      } else if (i % 4 == 0) {\n+        vint32mf2_t v = *(vint32mf2_t*)(in + i + 300);\n+        *(vint32mf2_t*)(out + i + 300) = v;\n+      } else {\n+        vbool64_t v = *(vbool64_t*)(in + i + 400);\n+        *(vbool64_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "05e9810609ec8872cf6f5d1779e3aa7d125c8e92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-44.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-44.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_4 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      for (size_t j = 0; j < m; j += 1) {\n+        if (i % 16 == 0) {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + i + 100 + j);\n+          *(vint8mf8_t*)(out + i + 100 + j) = v;\n+        } else if (i % 8 == 0) {\n+          vint16mf4_t v = *(vint16mf4_t*)(in + i + 200 + j);\n+          *(vint16mf4_t*)(out + i + 200 + j) = v;\n+        } else if (i % 4 == 0) {\n+          vint32mf2_t v = *(vint32mf2_t*)(in + i + 300 + j);\n+          *(vint32mf2_t*)(out + i + 300 + j) = v;\n+        } else {\n+          vbool64_t v = *(vbool64_t*)(in + i + 400 + j);\n+          *(vbool64_t*)(out + i + 400 + j) = v;\n+        }\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "0f6b96e6db6bede901fd858b81652281d30c30a8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-45.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-45.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_5 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        for (size_t j = 0; j < m; j += 1) {\n+          if (i % 16 == 0) {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + i + 100 + j);\n+          *(vint8mf8_t*)(out + i + 100 + j) = v;\n+        } else if (i % 8 == 0) {\n+          vint16mf4_t v = *(vint16mf4_t*)(in + i + 200 + j);\n+          *(vint16mf4_t*)(out + i + 200 + j) = v;\n+        } else if (i % 4 == 0) {\n+          vint32mf2_t v = *(vint32mf2_t*)(in + i + 300 + j);\n+          *(vint32mf2_t*)(out + i + 300 + j) = v;\n+        } else {\n+          vbool64_t v = *(vbool64_t*)(in + i + 400 + j);\n+          *(vbool64_t*)(out + i + 400 + j) = v;\n+        }\n+        }\n+      } else {\n+        vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 88888);\n+        *(vfloat32mf2_t*)(out + 88888) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a211beda0e62d909a847d3d2f6344dada9fae498", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-46.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-46.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo5_6 (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        for (size_t j = 0; j < m; j += 1) {\n+          if (i % 16 == 0) {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + i + 100 + j);\n+          *(vint8mf8_t*)(out + i + 100 + j) = v;\n+        } else if (i % 8 == 0) {\n+          vint16mf4_t v = *(vint16mf4_t*)(in + i + 200 + j);\n+          *(vint16mf4_t*)(out + i + 200 + j) = v;\n+        } else if (i % 4 == 0) {\n+          vint32mf2_t v = *(vint32mf2_t*)(in + i + 300 + j);\n+          *(vint32mf2_t*)(out + i + 300 + j) = v;\n+        } else {\n+          vbool64_t v = *(vbool64_t*)(in + i + 400 + j);\n+          *(vbool64_t*)(out + i + 400 + j) = v;\n+        }\n+        }\n+      } else {\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b38e362b880595151fdb7dc037f5e17306cfb8d8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-5.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-5.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+  \n+  switch (cond)\n+  {\n+  case 0:\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 2;\n+    }\n+    break;\n+  \n+  default:\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 3;\n+    }\n+    break;\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}"}, {"sha": "2edc1810ab2e20b350e694028ecd828d5f76ece8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-6.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-6.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,155 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  switch (cond)\n+  {\n+  case 0:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 2;\n+      }\n+  }\n+  break;\n+  case 1:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 3;\n+      }\n+  }\n+  break;\n+  case 2:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 5;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 6;\n+      }\n+  }\n+  break;\n+  case 4:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 8;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 9;\n+      }\n+  }\n+  break;\n+  case 5:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 10;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 11;\n+      }\n+  }\n+  break;\n+  case 6:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 12;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 13;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] * out[i];\n+      }\n+  }\n+  break;\n+  case 7:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 15;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 16;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + out[i];\n+      }\n+  }\n+  break;\n+  case 8:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 101;\n+      }\n+  }\n+  break;\n+  case 9:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] * 101;\n+      }\n+  }\n+  break;\n+  case 10:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] >> 3;\n+      }\n+  }\n+  break;\n+  default:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] << 1;\n+      }\n+  }\n+  break;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "68d595fbbaab0c7172c13cccf873ab01d7f579e7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-7.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 2;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f49eebdf20b8e230c3dbfedb9dee4491ae85aef0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-8.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-8.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,149 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  switch (cond)\n+  {\n+  case 0:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 2;\n+      }\n+  }\n+  break;\n+  case 1:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 3;\n+      }\n+  }\n+  break;\n+  case 2:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 5;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 6;\n+      }\n+  }\n+  break;\n+  case 4:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 8;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 9;\n+      }\n+  }\n+  break;\n+  case 5:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 10;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 11;\n+      }\n+  }\n+  break;\n+  case 6:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 12;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 13;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] * out[i];\n+      }\n+  }\n+  break;\n+  case 7:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 15;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 16;\n+      }\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + out[i];\n+      }\n+  }\n+  break;\n+  case 8:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] + 101;\n+      }\n+  }\n+  break;\n+  case 9:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] * 101;\n+      }\n+  }\n+  break;\n+  case 10:\n+  {\n+      for (int i = 0; i < n; i++)\n+      {\n+          out[i] = out[i] >> 3;\n+      }\n+  }\n+  break;\n+  default:\n+  break;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "8483cdc3e962dd83500e14a79a194a4b5362334b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-9.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c098f7d23db4dd98e7fed74a35416248397be40/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-9.c?ref=6c098f7d23db4dd98e7fed74a35416248397be40", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)in;\n+    *(vint8mf8_t*)(out + i + 200) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = *(vint64m1_t*)(in + 300);\n+    *(vint64m1_t*)(out + i + 400) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + i + 500) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500);\n+    *(vfloat64m1_t*)(out + i + 600) = v;\n+  }\n+\n+  if (cond == 0) {\n+    for (int i = 0; i < n; i++) {\n+      out[i] = out[i] + 2;\n+    }\n+  }\n+ \n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}]}