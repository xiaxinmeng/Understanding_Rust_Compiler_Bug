{"sha": "35117aa8a959b64c128715b6142a6ab45efb9169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxMTdhYThhOTU5YjY0YzEyODcxNWI2MTQyYTZhYjQ1ZWZiOTE2OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:43:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:43:39Z"}, "message": "[multiple changes]\n\n2009-05-06  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Add subsection for Exits_From_Conditional_Loops rule\n\tAdd formal definition for extra exit point metric\n\n2009-05-06  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c: Support for setting attributes on unicode filename on\n\tWindows.\n\nFrom-SVN: r147171", "tree": {"sha": "f3bf018f81dee2549add1a7bdde000898d559e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bf018f81dee2549add1a7bdde000898d559e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35117aa8a959b64c128715b6142a6ab45efb9169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35117aa8a959b64c128715b6142a6ab45efb9169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35117aa8a959b64c128715b6142a6ab45efb9169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35117aa8a959b64c128715b6142a6ab45efb9169/comments", "author": null, "committer": null, "parents": [{"sha": "0c020ddef1f2574c03e6d49497e8b73d55824e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c020ddef1f2574c03e6d49497e8b73d55824e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c020ddef1f2574c03e6d49497e8b73d55824e22"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "0a77a748d0810408f1a3d63ba21f6756cac882a4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=35117aa8a959b64c128715b6142a6ab45efb9169", "patch": "@@ -1,3 +1,13 @@\n+2009-05-06  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Add subsection for Exits_From_Conditional_Loops rule\n+\tAdd formal definition for extra exit point metric\n+\n+2009-05-06  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c: Support for setting attributes on unicode filename on\n+\tWindows.\n+\n 2009-05-06  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_warn.adb: Minor reformatting"}, {"sha": "1f5e15467966b4940b4adc8580ad949626e7f693", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=35117aa8a959b64c128715b6142a6ab45efb9169", "patch": "@@ -3369,6 +3369,63 @@ __gnat_copy_attribs (char *from, char *to, int mode)\n {\n #if defined (VMS) || defined (__vxworks) || defined (__nucleus__)\n   return -1;\n+\n+#elif defined (_WIN32) && !defined (RTX)\n+  TCHAR wfrom [GNAT_MAX_PATH_LEN + 2];\n+  TCHAR wto [GNAT_MAX_PATH_LEN + 2];\n+  BOOL res;\n+  FILETIME fct, flat, flwt;\n+  HANDLE hfrom, hto;\n+\n+  S2WSC (wfrom, from, GNAT_MAX_PATH_LEN + 2);\n+  S2WSC (wto, to, GNAT_MAX_PATH_LEN + 2);\n+\n+  /* retrieve from times */\n+\n+  hfrom = CreateFile\n+    (wfrom, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n+\n+  if (hfrom == INVALID_HANDLE_VALUE)\n+    return -1;\n+\n+  res = GetFileTime (hfrom, &fct, &flat, &flwt);\n+\n+  CloseHandle (hfrom);\n+\n+  if (res == 0)\n+    return -1;\n+\n+  /* retrieve from times */\n+\n+  hto = CreateFile\n+    (wto, GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n+\n+  if (hto == INVALID_HANDLE_VALUE)\n+    return -1;\n+\n+  res = SetFileTime (hto, NULL, &flat, &flwt);\n+\n+  CloseHandle (hto);\n+\n+  if (res == 0)\n+    return -1;\n+\n+  /* Set file attributes in full mode. */\n+\n+  if (mode == 1)\n+    {\n+      DWORD attribs = GetFileAttributes (wfrom);\n+\n+      if (attribs == INVALID_FILE_ATTRIBUTES)\n+\treturn -1;\n+\n+      res = SetFileAttributes (wto, attribs);\n+      if (res == 0)\n+\treturn -1;\n+    }\n+\n+  return 0;\n+\n #else\n   struct stat fbuf;\n   struct utimbuf tbuf;"}, {"sha": "4a59e16d5142e2d52863af86765cccb0ea45eeac", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35117aa8a959b64c128715b6142a6ab45efb9169/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=35117aa8a959b64c128715b6142a6ab45efb9169", "patch": "@@ -17637,7 +17637,11 @@ Do not consider @code{exit} statements as @code{goto}s when\n computing Essential Complexity\n \n @item ^--extra-exit-points^/EXTRA_EXIT_POINTS_ON^\n-Report the extra exit points for subprogram bodies\n+Report the extra exit points for subprogram bodies. As an exit point, this\n+metric counts @code{return} statements and raise statements in case when the\n+raised exception is not handled in the same body. In case of a function this\n+metric subtracts 1 from the number of exit points, because a function body\n+must contain at least one @code{return} statement.\n \n @item ^--no-extra-exit-points^/EXTRA_EXIT_POINTS_OFF^\n Do not report the extra exit points for subprogram bodies\n@@ -20889,6 +20893,7 @@ used as a parameter of the @option{+R} or @option{-R} options.\n * Discriminated_Records::\n * Enumeration_Ranges_In_CASE_Statements::\n * Exceptions_As_Control_Flow::\n+* Exits_From_Conditional_Loops::\n * EXIT_Statements_With_No_Loop_Name::\n * Expanded_Loop_Exit_Names::\n * Explicit_Full_Discrete_Ranges::\n@@ -20939,6 +20944,7 @@ used as a parameter of the @option{+R} or @option{-R} options.\n * Slices::\n * Unassigned_OUT_Parameters::\n * Uncommented_BEGIN_In_Package_Bodies::\n+* Unconditional_Exits::\n * Unconstrained_Array_Returns::\n * Universal_Ranges::\n * Unnamed_Blocks_And_Loops::\n@@ -21155,6 +21161,20 @@ package body, task body or entry body is not flagged.\n \n The rule has no parameters.\n \n+@node Exits_From_Conditional_Loops\n+@subsection @code{Exits_From_Conditional_Loops}\n+@cindex @code{Exits_From_Conditional_Loops} (for @command{gnatcheck})\n+\n+@noindent\n+Flag any exit statement if it transfers the control out of a @code{for} loop\n+or a @code{while} loop. This includes cases when the @code{exit} statement\n+applies to a @code{FOR} or @code{while} loop, and cases when it is enclosed\n+in some @code{for} or @code{while} loop, but transfers the control from some\n+outer (inconditional) @code{loop} statement.\n+\n+The rule has no parameters.\n+\n+\n @node EXIT_Statements_With_No_Loop_Name\n @subsection @code{EXIT_Statements_With_No_Loop_Name}\n @cindex @code{EXIT_Statements_With_No_Loop_Name} (for @command{gnatcheck})\n@@ -22253,6 +22273,14 @@ diagnostic message is attached to the line containing the first statement.\n \n This rule has no parameters.\n \n+@node Unconditional_Exits\n+@subsection @code{Unconditional_Exits}\n+@cindex @code{Unconditional_Exits} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flag unconditional @code{exit} statements.\n+\n+This rule has no parameters.\n \n @node Unconstrained_Array_Returns\n @subsection @code{Unconstrained_Array_Returns}"}]}