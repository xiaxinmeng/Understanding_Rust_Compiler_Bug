{"sha": "2cfb33fc1e71a76bd20d48d291539804ec342e0d", "node_id": "C_kwDOANBUbNoAKDJjZmIzM2ZjMWU3MWE3NmJkMjBkNDhkMjkxNTM5ODA0ZWMzNDJlMGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-23T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-23T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "0a57fe02d7a65b325778a5644dbe69c8d711c19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a57fe02d7a65b325778a5644dbe69c8d711c19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cfb33fc1e71a76bd20d48d291539804ec342e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfb33fc1e71a76bd20d48d291539804ec342e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cfb33fc1e71a76bd20d48d291539804ec342e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cfb33fc1e71a76bd20d48d291539804ec342e0d/comments", "author": null, "committer": null, "parents": [{"sha": "3d54f1ffaf77f9dfa75362f2228e6bbd191bcbc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d54f1ffaf77f9dfa75362f2228e6bbd191bcbc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d54f1ffaf77f9dfa75362f2228e6bbd191bcbc8"}], "stats": {"total": 560, "additions": 559, "deletions": 1}, "files": [{"sha": "2485aaaed7856a6a68f16f5e50e0b2937fbd9c9b", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,7 @@\n+2022-02-22  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* MAINTAINERS (Write After Approval): Update my e-mail address.\n+\n 2022-02-08  Ulrich Weigand  <ulrich.weigand@de.ibm.com>\n \n \t* MAINTAINERS: Remove Hartmut Penner as s390 maintainer."}, {"sha": "714ab104d4ea707116ebeea312926b203f553ad0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,338 @@\n+2022-02-22  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-expand.cc (ix86_expand_cmpxchg_loop): Restore\n+\tbootstrap.\n+\n+2022-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.cc (omp_build_component_ref): Move function...\n+\t* omp-general.cc (omp_build_component_ref): ... here.  Remove\n+\t'static'.\n+\t* omp-general.h (omp_build_component_ref): Declare function.\n+\t* omp-oacc-neuter-broadcast.cc (oacc_build_component_ref): Remove\n+\tfunction.\n+\t(build_receiver_ref, build_sender_ref): Call\n+\t'omp_build_component_ref' instead.\n+\n+2022-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-oacc-neuter-broadcast.cc (record_field_map_t): Further\n+\tsimplify.  Adjust all users.\n+\n+2022-02-22  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/88134\n+\t* config/rs6000/rs6000.cc (atomic_hold_decl, atomic_clear_decl,\n+\tatomic_update_decl): Add GTY markup.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/arm.h (REG_CLASS_CONTENTS): Add VPR_REG to ALL_REGS.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/arm/arm-builtins.cc (CX_UNARY_UNONE_QUALIFIERS): Use\n+\tpredicate.\n+\t(CX_BINARY_UNONE_QUALIFIERS): Likewise.\n+\t(CX_TERNARY_UNONE_QUALIFIERS): Likewise.\n+\t(TERNOP_NONE_NONE_NONE_UNONE_QUALIFIERS): Delete.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS): Delete.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Delete.\n+\t* config/arm/arm_mve_builtins.def: Use predicated qualifiers.\n+\t* config/arm/mve.md: Use VxBI instead of HI.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/arm/arm-builtins.cc (STRSBS_P_QUALIFIERS): Use predicate\n+\tqualifier.\n+\t(STRSBU_P_QUALIFIERS): Likewise.\n+\t(LDRGBS_Z_QUALIFIERS): Likewise.\n+\t(LDRGBU_Z_QUALIFIERS): Likewise.\n+\t(LDRGBWBXU_Z_QUALIFIERS): Likewise.\n+\t(LDRGBWBS_Z_QUALIFIERS): Likewise.\n+\t(LDRGBWBU_Z_QUALIFIERS): Likewise.\n+\t(STRSBWBS_P_QUALIFIERS): Likewise.\n+\t(STRSBWBU_P_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md: Use VxBI instead of HI.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/arm/arm-builtins.cc (TERNOP_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Change to ...\n+\t(TERNOP_UNONE_UNONE_NONE_PRED_QUALIFIERS): ... this.\n+\t(TERNOP_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(TERNOP_UNONE_UNONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(TERNOP_NONE_NONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(TERNOP_NONE_NONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(TERNOP_NONE_NONE_UNONE_UNONE_QUALIFIERS): Change to ...\n+\t(TERNOP_NONE_NONE_UNONE_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_UNONE_UNONE_NONE_NONE_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_NONE_NONE_NONE_NONE_PRED_QUALIFIERS): New.\n+\t(QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_NONE_NONE_NONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_PRED_QUALIFIERS): New.\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_NONE_NONE_UNONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Change to ...\n+\t(QUADOP_UNONE_UNONE_UNONE_NONE_PRED_QUALIFIERS): ... this.\n+\t(STRS_P_QUALIFIERS): Use predicate qualifier.\n+\t(STRU_P_QUALIFIERS): Likewise.\n+\t(STRSU_P_QUALIFIERS): Likewise.\n+\t(STRSS_P_QUALIFIERS): Likewise.\n+\t(LDRGS_Z_QUALIFIERS): Likewise.\n+\t(LDRGU_Z_QUALIFIERS): Likewise.\n+\t(LDRS_Z_QUALIFIERS): Likewise.\n+\t(LDRU_Z_QUALIFIERS): Likewise.\n+\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Change to ...\n+\t(QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_PRED_QUALIFIERS): ... this.\n+\t(BINOP_NONE_NONE_PRED_QUALIFIERS): New.\n+\t(BINOP_UNONE_UNONE_PRED_QUALIFIERS): New.\n+\t* config/arm/arm_mve_builtins.def: Use new predicated qualifiers.\n+\t* config/arm/mve.md: Use MVE_VPRED instead of HI.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/arm/arm-builtins.cc (BINOP_UNONE_NONE_NONE_QUALIFIERS):\n+\tDelete.\n+\t(TERNOP_UNONE_NONE_NONE_UNONE_QUALIFIERS): Change to ...\n+\t(TERNOP_PRED_NONE_NONE_PRED_QUALIFIERS): ... this.\n+\t(TERNOP_PRED_UNONE_UNONE_PRED_QUALIFIERS): New.\n+\t* config/arm/arm_mve_builtins.def (vcmp*q_n_, vcmp*q_m_f): Use new\n+\tpredicated qualifiers.\n+\t* config/arm/mve.md (mve_vcmp<mve_cmp_op>q_n_<mode>)\n+\t(mve_vcmp*q_m_f<mode>): Use MVE_VPRED instead of HI.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\t* config/arm/arm-protos.h (arm_get_mask_mode): New prototype.\n+\t(arm_expand_vector_compare): Update prototype.\n+\t* config/arm/arm.cc (TARGET_VECTORIZE_GET_MASK_MODE): New.\n+\t(arm_vector_mode_supported_p): Add support for VxBI modes.\n+\t(arm_expand_vector_compare): Remove useless generation of vpsel.\n+\t(arm_expand_vcond): Fix select operands.\n+\t(arm_get_mask_mode): New.\n+\t* config/arm/mve.md (vec_cmp<mode><MVE_vpred>): New.\n+\t(vec_cmpu<mode><MVE_vpred>): New.\n+\t(vcond_mask_<mode><MVE_vpred>): New.\n+\t* config/arm/vec-common.md (vec_cmp<mode><v_cmp_result>)\n+\t(vec_cmpu<mode><mode, vcond_mask_<mode><v_cmp_result>): Move to ...\n+\t* config/arm/neon.md (vec_cmp<mode><v_cmp_result>)\n+\t(vec_cmpu<mode><mode, vcond_mask_<mode><v_cmp_result>): ... here\n+\tand disable for MVE.\n+\t* doc/sourcebuild.texi (arm_mve): Document new effective-target.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/arm/arm-builtins.cc (BINOP_PRED_UNONE_UNONE_QUALIFIERS)\n+\t(BINOP_PRED_NONE_NONE_QUALIFIERS)\n+\t(TERNOP_NONE_NONE_NONE_PRED_QUALIFIERS)\n+\t(TERNOP_UNONE_UNONE_UNONE_PRED_QUALIFIERS): New.\n+\t* config/arm/arm-protos.h (mve_bool_vec_to_const): New.\n+\t* config/arm/arm.cc (arm_hard_regno_mode_ok): Handle new VxBI\n+\tmodes.\n+\t(arm_mode_to_pred_mode): New.\n+\t(arm_expand_vector_compare): Use the right VxBI mode instead of\n+\tHI.\n+\t(arm_expand_vcond): Likewise.\n+\t(simd_valid_immediate): Handle MODE_VECTOR_BOOL.\n+\t(mve_bool_vec_to_const): New.\n+\t(neon_make_constant): Call mve_bool_vec_to_const when needed.\n+\t* config/arm/arm_mve_builtins.def (vcmpneq_, vcmphiq_, vcmpcsq_)\n+\t(vcmpltq_, vcmpleq_, vcmpgtq_, vcmpgeq_, vcmpeqq_, vcmpneq_f)\n+\t(vcmpltq_f, vcmpleq_f, vcmpgtq_f, vcmpgeq_f, vcmpeqq_f, vpselq_u)\n+\t(vpselq_s, vpselq_f): Use new predicated qualifiers.\n+\t* config/arm/constraints.md (DB): New.\n+\t* config/arm/iterators.md (MVE_7, MVE_7_HI): New mode iterators.\n+\t(MVE_VPRED, MVE_vpred): New attribute iterators.\n+\t* config/arm/mve.md (@mve_vcmp<mve_cmp_op>q_<mode>)\n+\t(@mve_vcmp<mve_cmp_op>q_f<mode>, @mve_vpselq_<supf><mode>)\n+\t(@mve_vpselq_f<mode>): Use MVE_VPRED instead of HI.\n+\t(@mve_vpselq_<supf>v2di): Define separately.\n+\t(mov<mode>): New expander for VxBI modes.\n+\t* config/arm/vfp.md (thumb2_movhi_vfp, thumb2_movhi_fp16): Use\n+\tMVE_7_HI iterator and add support for DB constraint.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* config/aarch64/aarch64-modes.def (VNx16BI, VNx8BI, VNx4BI,\n+\tVNx2BI): Update definition.\n+\t* config/arm/arm-builtins.cc (arm_init_simd_builtin_types): Add new\n+\tsimd types.\n+\t(arm_init_builtin): Map predicate vectors arguments to HImode.\n+\t(arm_expand_builtin_args): Move HImode predicate arguments to VxBI\n+\trtx. Move return value to HImode rtx.\n+\t* config/arm/arm-builtins.h (arm_type_qualifiers): Add qualifier_predicate.\n+\t* config/arm/arm-modes.def (B2I, B4I, V16BI, V8BI, V4BI): New modes.\n+\t* config/arm/arm-simd-builtin-types.def (Pred1x16_t,\n+\tPred2x8_t,Pred4x4_t): New.\n+\t* emit-rtl.cc (init_emit_once): Handle all boolean modes.\n+\t* genmodes.cc (mode_data): Add boolean field.\n+\t(blank_mode): Initialize it.\n+\t(make_complex_modes): Fix handling of boolean modes.\n+\t(make_vector_modes): Likewise.\n+\t(VECTOR_BOOL_MODE): Use new COMPONENT parameter.\n+\t(make_vector_bool_mode): Likewise.\n+\t(BOOL_MODE): New.\n+\t(make_bool_mode): New.\n+\t(emit_insn_modes_h): Fix generation of boolean modes.\n+\t(emit_class_narrowest_mode): Likewise.\n+\t* machmode.def: (VECTOR_BOOL_MODE): Document new COMPONENT\n+\tparameter.  Use new BOOL_MODE instead of FRACTIONAL_INT_MODE to\n+\tdefine BImode.\n+\t* rtx-vector-builder.cc (rtx_vector_builder::find_cached_value):\n+\tFix handling of constm1_rtx for VECTOR_BOOL.\n+\t* simplify-rtx.cc (native_encode_rtx): Fix support for VECTOR_BOOL.\n+\t(native_decode_vector_rtx): Likewise.\n+\t(test_vector_ops_duplicate): Skip vec_merge test\n+\twith vectors of booleans.\n+\t* varasm.cc (output_constant_pool_2): Likewise.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/mve.md (mve_vmvnq_n_<supf><mode>): Use V_elem mode\n+\tfor operand 1.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/arm.cc (arm_class_likely_spilled_p): Handle VPR_REG.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/arm.h (reg_class): Add GENERAL_AND_VPR_REGS.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Likewise.\n+\t(CLASS_MAX_NREGS): Handle VPR.\n+\t* config/arm/arm.cc (arm_hard_regno_nregs): Handle VPR.\n+\n+2022-02-22  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-c.cc (nvptx_cpu_cpp_builtins): Handle SM70.\n+\t* config/nvptx/nvptx.cc (first_ptx_version_supporting_sm):\n+\tLikewise.\n+\t* config/nvptx/nvptx.opt (misa): Add sm_70 alias PTX_ISA_SM70.\n+\n+2022-02-22  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.opt (mptx): Add 6.0 alias PTX_VERSION_6_0.\n+\t* doc/invoke.texi (-mptx): Update for new values and defaults.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (gen_comment): New function.\n+\t(workaround_uninit_method_1, workaround_uninit_method_2)\n+\t(workaround_uninit_method_3): : Use gen_comment.\n+\t* config/nvptx/nvptx.opt (mptx-comment): New option.\n+\n+2022-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.cc (vect_build_slp_tree_2): Dump the def used\n+\tfor a splat.\n+\n+2022-02-22  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.cc (ctor_single_nonzero_element): New function to\n+\treturn the single non-zero element of a (vector) constructor.\n+\t* fold-const.h (ctor_single_nonzero_element): Prototype here.\n+\t* match.pd (reduc (constructor@0)): Simplify reductions of a\n+\tconstructor containing a single non-zero element.\n+\t(reduc (@0 op VECTOR_CST) ->  (reduc @0) op CONST): Simplify\n+\treductions of vector operations of the same operator with\n+\tconstant vector operands.\n+\n+2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104604\n+\t* gimple-range-fold.cc (adjust_imagpart_expr, adjust_realpart_expr):\n+\tOnly check if gimple_assign_rhs1 is COMPLEX_CST if\n+\tgimple_assign_rhs_code is COMPLEX_CST.\n+\n+2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104612\n+\t* config/i386/i386-expand.cc (ix86_expand_copysign): Call force_reg\n+\ton input operands before calling lowpart_subreg on it.  For output\n+\toperand, use a vmode pseudo as destination and then move its lowpart\n+\tsubreg into operands[0] if lowpart_subreg fails on dest.\n+\t(ix86_expand_xorsign): Likewise.\n+\n+2022-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104582\n+\tPR target/99881\n+\t* config/i386/i386.cc (ix86_vector_costs::add_stmt_cost):\n+\tCost GPR to vector register moves for integer vector construction.\n+\n+2022-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104582\n+\t* tree-vectorizer.h (stmt_info_for_cost::node): New field.\n+\t(vector_costs::add_stmt_cost): Add SLP node parameter.\n+\t(dump_stmt_cost): Likewise.\n+\t(add_stmt_cost): Likewise, new overload and adjust.\n+\t(add_stmt_costs): Adjust.\n+\t(record_stmt_cost): New overload.\n+\t* tree-vectorizer.cc (dump_stmt_cost): Dump the SLP node.\n+\t(vector_costs::add_stmt_cost): Adjust.\n+\t* tree-vect-loop.cc (vect_estimate_min_profitable_iters):\n+\tAdjust.\n+\t* tree-vect-slp.cc (vect_prologue_cost_for_slp): Record\n+\tthe SLP node for costing.\n+\t(vectorizable_slp_permutation): Likewise.\n+\t* tree-vect-stmts.cc (record_stmt_cost): Adjust and add\n+\tnew overloads.\n+\t* config/i386/i386.cc (ix86_vector_costs::add_stmt_cost):\n+\tAdjust.\n+\t* config/aarch64/aarch64.cc (aarch64_vector_costs::add_stmt_cost):\n+\tAdjust.\n+\t* config/rs6000/rs6000.cc (rs6000_vector_costs::add_stmt_cost):\n+\tAdjust.\n+\t(rs6000_cost_data::adjust_vect_cost_per_loop): Likewise.\n+\n+2022-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104582\n+\t* tree-vectorizer.h (add_stmt_cost): New overload.\n+\t(record_stmt_cost): Likewise.\n+\t* tree-vect-loop.cc (vect_compute_single_scalar_iteration_cost):\n+\tUse add_stmt_costs.\n+\t(vect_get_known_peeling_cost): Use new overloads.\n+\t(vect_estimate_min_profitable_iters): Likewise.  Consistently\n+\tuse scalar_stmt for costing versioning checks.\n+\t* tree-vect-stmts.cc (record_stmt_cost): New overload.\n+\n+2022-02-22  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/103069\n+\t* config/i386/i386-expand.cc (ix86_expand_atomic_fetch_op_loop):\n+\tSplit atomic fetch and loop part.\n+\t(ix86_expand_cmpxchg_loop): New expander for cmpxchg loop.\n+\t* config/i386/i386-protos.h (ix86_expand_cmpxchg_loop): New\n+\tprototype.\n+\t* config/i386/sync.md (atomic_compare_and_swap<mode>): Call new\n+\texpander under TARGET_RELAX_CMPXCHG_LOOP.\n+\t(atomic_compare_and_swap<mode>): Likewise for doubleword modes.\n+\n 2022-02-21  Dan Li  <ashimida@linux.alibaba.com>\n \n \t* config/aarch64/aarch64.cc (SLOT_REQUIRED):"}, {"sha": "5d0073eb6bc804b5e748882a7a8033ee3ff43bce", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1 +1 @@\n-20220222\n+20220223"}, {"sha": "f91945474275c639ad2db1c8a367eced5abeb556", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,9 @@\n+2022-02-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104619\n+\t* resolve.cc (resolve_structure_cons): Skip shape check if shape\n+\tof constructor cannot be determined at compile time.\n+\n 2022-02-20  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/77693"}, {"sha": "6534fadfd2abf54da4d03e5d2912deb933d4b453", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,156 @@\n+2022-02-22  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* g++.dg/ext/altivec-1.C: Move to g++.target/powerpc, adjust dg\n+\tdirectives.\n+\t* g++.dg/ext/altivec-2.C: Likewise.\n+\t* g++.dg/ext/altivec-3.C: Likewise.\n+\t* g++.dg/ext/altivec-4.C: Likewise.\n+\t* g++.dg/ext/altivec-5.C: Likewise.\n+\t* g++.dg/ext/altivec-6.C: Likewise.\n+\t* g++.dg/ext/altivec-7.C: Likewise.\n+\t* g++.dg/ext/altivec-8.C: Likewise.\n+\t* g++.dg/ext/altivec-9.C: Likewise.\n+\t* g++.dg/ext/altivec-10.C: Likewise.\n+\t* g++.dg/ext/altivec-11.C: Likewise.\n+\t* g++.dg/ext/altivec-12.C: Likewise.\n+\t* g++.dg/ext/altivec-13.C: Likewise.\n+\t* g++.dg/ext/altivec-14.C: Likewise.\n+\t* g++.dg/ext/altivec-15.C: Likewise.\n+\t* g++.dg/ext/altivec-16.C: Likewise.\n+\t* g++.dg/ext/altivec-17.C: Likewise.\n+\t* g++.dg/ext/altivec-18.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-1.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-2.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-3.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-4.C: Likewise.\n+\t* g++.dg/ext/altivec-cell-5.C: Likewise.\n+\t* g++.dg/ext/altivec-types-1.C: Likewise.\n+\t* g++.dg/ext/altivec-types-2.C: Likewise.\n+\t* g++.dg/ext/altivec-types-3.C: Likewise.\n+\t* g++.dg/ext/altivec-types-4.C: Likewise.\n+\t* g++.dg/ext/undef-bool-1.C: Likewise.\n+\t* g++.target/powerpc/altivec-1.C: New file.\n+\t* g++.target/powerpc/altivec-10.C: New file.\n+\t* g++.target/powerpc/altivec-11.C: New file.\n+\t* g++.target/powerpc/altivec-12.C: New file.\n+\t* g++.target/powerpc/altivec-13.C: New file.\n+\t* g++.target/powerpc/altivec-14.C: New file.\n+\t* g++.target/powerpc/altivec-15.C: New file.\n+\t* g++.target/powerpc/altivec-16.C: New file.\n+\t* g++.target/powerpc/altivec-17.C: New file.\n+\t* g++.target/powerpc/altivec-18.C: New file.\n+\t* g++.target/powerpc/altivec-2.C: New file.\n+\t* g++.target/powerpc/altivec-3.C: New file.\n+\t* g++.target/powerpc/altivec-4.C: New file.\n+\t* g++.target/powerpc/altivec-5.C: New file.\n+\t* g++.target/powerpc/altivec-6.C: New file.\n+\t* g++.target/powerpc/altivec-7.C: New file.\n+\t* g++.target/powerpc/altivec-8.C: New file.\n+\t* g++.target/powerpc/altivec-9.C: New file.\n+\t* g++.target/powerpc/altivec-cell-1.C: New file.\n+\t* g++.target/powerpc/altivec-cell-2.C: New file.\n+\t* g++.target/powerpc/altivec-cell-3.C: New file.\n+\t* g++.target/powerpc/altivec-cell-4.C: New file.\n+\t* g++.target/powerpc/altivec-cell-5.C: New file.\n+\t* g++.target/powerpc/altivec-types-1.C: New file.\n+\t* g++.target/powerpc/altivec-types-2.C: New file.\n+\t* g++.target/powerpc/altivec-types-3.C: New file.\n+\t* g++.target/powerpc/altivec-types-4.C: New file.\n+\t* g++.target/powerpc/undef-bool-1.C: New file.\n+\n+2022-02-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104619\n+\t* gfortran.dg/derived_constructor_comps_7.f90: New test.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/100757\n+\t* gcc.target/arm/simd/pr100757-2.c: New.\n+\t* gcc.target/arm/simd/pr100757-3.c: New.\n+\t* gcc.target/arm/simd/pr100757-4.c: New.\n+\t* gcc.target/arm/simd/pr100757.c: New.\n+\t* gcc.dg/signbit-2.c: Skip when targeting ARM/MVE.\n+\t* lib/target-supports.exp (check_effective_target_arm_mve): New.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/100757\n+\tPR target/101325\n+\t* gcc.dg/rtl/arm/mve-vxbi.c: New test.\n+\t* gcc.target/arm/simd/pr101325.c: New.\n+\t* gcc.target/arm/simd/pr101325-2.c: New.\n+\t* lib/target-supports.exp (check_effective_target_arm_mve_hw): Use\n+\tadd_options_for_arm_v8_1m_mve_fp.\n+\n+2022-02-22  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* gcc.target/arm/simd/mve-vcmp-f32-2.c: New.\n+\t* gcc.target/arm/simd/neon-compare-1.c: New.\n+\t* gcc.target/arm/simd/neon-compare-2.c: New.\n+\t* gcc.target/arm/simd/neon-compare-3.c: New.\n+\t* gcc.target/arm/simd/neon-compare-scalar-1.c: New.\n+\t* gcc.target/arm/simd/neon-vcmp-f16.c: New.\n+\t* gcc.target/arm/simd/neon-vcmp-f32-2.c: New.\n+\t* gcc.target/arm/simd/neon-vcmp-f32-3.c: New.\n+\t* gcc.target/arm/simd/neon-vcmp-f32.c: New.\n+\t* gcc.target/arm/simd/neon-vcmp.c: New.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic-store-2.c: Use -misa=sm_70.\n+\t* gcc.target/nvptx/uniform-simt-3.c: Same.\n+\n+2022-02-22  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-reduc-1.c: New test case.\n+\n+2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104604\n+\t* gcc.c-torture/execute/pr104604.c: New test.\n+\n+2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104612\n+\t* gcc.dg/pr104612.c: New test.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/sibcall-10.c: Xfail execution test for nvptx.\n+\t* gcc.dg/sibcall-3.c: Same.\n+\t* gcc.dg/sibcall-4.c: Same.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/float16-1.c: Drop -mptx setting.\n+\t* gcc.target/nvptx/float16-2.c: Same.\n+\t* gcc.target/nvptx/float16-3.c: Same.\n+\t* gcc.target/nvptx/float16-4.c: Same.\n+\t* gcc.target/nvptx/float16-5.c: Same.\n+\t* gcc.target/nvptx/float16-6.c: Same.\n+\t* gcc.target/nvptx/tanh-1.c: Same.\n+\n+2022-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104582\n+\tPR target/99881\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-1.c: New.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-2.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-3.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-4.c: Likewise.\n+\t* gcc.target/i386/pr99881.c: Un-XFAIL.\n+\t* gcc.target/i386/pr91446.c: Adjust to not expect vectorization.\n+\n+2022-02-22  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/103069\n+\t* gcc.target/i386/pr103069-2.c: Adjust result check.\n+\t* gcc.target/i386/pr103069-3.c: New test.\n+\t* gcc.target/i386/pr103069-4.c: Likewise.\n+\n 2022-02-21  Dan Li  <ashimida@linux.alibaba.com>\n \n \t* gcc.target/aarch64/shadow_call_stack_1.c: New test."}, {"sha": "d65bcb4949ae136df2fc0a92d87fc6dfbe0a5770", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,33 @@\n+2022-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Fix OpenACC\n+\tgang-redundant execution.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/99555\n+\t* config/nvptx/bar.c (generation_to_barrier): New function, copied\n+\tfrom config/rtems/bar.c.\n+\t(futex_wait, futex_wake): New function.\n+\t(do_spin, do_wait): New function, copied from config/linux/wait.h.\n+\t(gomp_barrier_wait_end, gomp_barrier_wait_last)\n+\t(gomp_team_barrier_wake, gomp_team_barrier_wait_end):\n+\t(gomp_team_barrier_wait_cancel_end, gomp_team_barrier_cancel): Remove\n+\tand replace with include of config/linux/bar.c.\n+\t* config/nvptx/bar.h (gomp_barrier_t): Add fields waiters and lock.\n+\t(gomp_barrier_init): Init new fields.\n+\t* testsuite/libgomp.c-c++-common/task-detach-6.c: Remove nvptx-specific\n+\tworkarounds.\n+\t* testsuite/libgomp.c/pr99555-1.c: Same.\n+\t* testsuite/libgomp.fortran/task-detach-6.f90: Same.\n+\n+2022-02-22  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR testsuite/104146\n+\t* testsuite/libgomp.c++/pr96390.C: Add additional-option\n+\t-foffload=-Wa,--verify for nvptx.\n+\t* testsuite/libgomp.c-c++-common/pr96390.c: Same.\n+\n 2022-02-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/depend-4.f90: New test."}, {"sha": "7683a82e57f4beb0434f76043148116df86006c7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,12 @@\n+2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/104617\n+\t* simple-object-elf.c (simple_object_elf_match): Fix up URL\n+\tin comment.\n+\t(simple_object_elf_copy_lto_debug_sections): Remap sh_info and\n+\tsh_link even if they are in the SHN_LORESERVE .. SHN_HIRESERVE\n+\trange (inclusive).\n+\n 2022-02-17  Mark Wielaard  <mark@klomp.org>\n \n \t* rust-demangle.c (rust_demangle_callback): Ignore everything"}, {"sha": "3f2506ddfad6f98de48743404dbc226df5891439", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cfb33fc1e71a76bd20d48d291539804ec342e0d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cfb33fc1e71a76bd20d48d291539804ec342e0d", "patch": "@@ -1,3 +1,24 @@\n+2022-02-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (__detail::__is_initializer_list):\n+\tDefine.\n+\t(viewable_range): Adjust as per P2415R2.\n+\t* include/bits/ranges_cmp.h (__cpp_lib_ranges): Adjust value.\n+\t* include/std/ranges (owning_view): Define as per P2415R2.\n+\t(enable_borrowed_range<owning_view>): Likewise.\n+\t(views::__detail::__can_subrange): Replace with ...\n+\t(views::__detail::__can_owning_view): ... this.\n+\t(views::_All::_S_noexcept): Sync with operator().\n+\t(views::_All::operator()): Use owning_view instead of subrange\n+\tas per P2415R2.\n+\t* include/std/version (__cpp_lib_ranges): Adjust value.\n+\t* testsuite/std/ranges/adaptors/all.cc (test06): Adjust now that\n+\tviews::all uses owning_view instead of subrange.\n+\t(test08): New test.\n+\t* testsuite/std/ranges/adaptors/lazy_split.cc (test09): Adjust\n+\tnow that rvalue non-view non-borrowed ranges are viewable.\n+\t* testsuite/std/ranges/adaptors/split.cc (test06): Likewise.\n+\n 2022-02-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/104559"}]}