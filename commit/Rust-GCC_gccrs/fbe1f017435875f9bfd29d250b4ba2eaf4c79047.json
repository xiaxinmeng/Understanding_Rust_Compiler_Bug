{"sha": "fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlMWYwMTc0MzU4NzVmOWJmZDI5ZDI1MGI0YmEyZWFmNGM3OTA0Nw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-11T21:34:40Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-11T21:34:40Z"}, "message": "check.c (gfc_check_kill): Check pid and sig are scalar.\n\n2018-03-11  Steven G. Kargl  <kargls@gcc.gnu.org>\n\n\t* check.c (gfc_check_kill):  Check pid and sig are scalar.\n\t(gfc_check_kill_sub): Restrict kind to 4 and 8.\n\t* intrinsic.c (add_function): Sort keyword list.  Add pid and sig\n\tkeywords for KILL.  Remove redundant *back=\"back\" in favor of the\n\toriginal *bck=\"back\".\n\t(add_subroutines): Sort keyword list.  Add pid and sig keywords\n\tfor KILL.\n\t* intrinsic.texi: Fix documentation to consistently use pid and sig.\n\t* iresolve.c (gfc_resolve_kill): Kind can only be 4 or 8.  Choose the\n\tcorrect function.\n\t(gfc_resolve_rename_sub): Add comment.\n\nFrom-SVN: r258436", "tree": {"sha": "b74e8b8a89bebff4e89246bb82fad265f81c3579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b74e8b8a89bebff4e89246bb82fad265f81c3579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/comments", "author": null, "committer": null, "parents": [{"sha": "6f76317a471e2960343ff94a60620fec76cdc35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f76317a471e2960343ff94a60620fec76cdc35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f76317a471e2960343ff94a60620fec76cdc35c"}], "stats": {"total": 140, "additions": 88, "deletions": 52}, "files": [{"sha": "68e4f38bb8516a2ac24a81c81a845130f7eb55c3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "patch": "@@ -1,4 +1,18 @@\n-2017-06-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+2018-03-11  Steven G. Kargl  <kargls@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_kill):  Check pid and sig are scalar.\n+\t(gfc_check_kill_sub): Restrict kind to 4 and 8.\n+\t* intrinsic.c (add_function): Sort keyword list.  Add pid and sig\n+\tkeywords for KILL.  Remove redundant *back=\"back\" in favor of the\n+\toriginal *bck=\"back\".\n+\t(add_subroutines): Sort keyword list.  Add pid and sig keywords\n+\tfor KILL.\n+\t* intrinsic.texi: Fix documentation to consistently use pid and sig.\n+\t* iresolve.c (gfc_resolve_kill): Kind can only be 4 or 8.  Choose the\n+\tcorrect function.\n+\t(gfc_resolve_rename_sub): Add comment.\n+\n+2018-03-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/66128\n \t* simplify.c (simplify_transformation): Return default result for"}, {"sha": "1971db037b19e11e39316080fc1fdd6733d89375", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "patch": "@@ -2755,9 +2755,15 @@ gfc_check_kill (gfc_expr *pid, gfc_expr *sig)\n   if (!type_check (pid, 0, BT_INTEGER))\n     return false;\n \n+  if (!scalar_check (pid, 0))\n+    return false;\n+\n   if (!type_check (sig, 1, BT_INTEGER))\n     return false;\n \n+  if (!scalar_check (sig, 1))\n+    return false;\n+\n   return true;\n }\n \n@@ -2786,6 +2792,13 @@ gfc_check_kill_sub (gfc_expr *pid, gfc_expr *sig, gfc_expr *status)\n   if (!scalar_check (status, 2))\n     return false;\n \n+  if (status->ts.kind != 4 && status->ts.kind != 8)\n+    {\n+      gfc_error (\"Invalid kind type parameter for STATUS at %L\",\n+\t\t &status->where);\n+      return false;\n+    }\n+\n   return true;\n }\n "}, {"sha": "006b11413540f4ce32069f348d7b96cdd19c3ce4", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "patch": "@@ -1229,25 +1229,26 @@ set_attr_value (int n, ...)\n static void\n add_functions (void)\n {\n-  /* Argument names as in the standard (to be used as argument keywords).  */\n+  /* Argument names.  These are used as argument keywords and so need to\n+    match the documentation.  Please keep this list in sorted order.  */\n   const char\n-    *a = \"a\", *f = \"field\", *pt = \"pointer\", *tg = \"target\",\n-    *b = \"b\", *m = \"matrix\", *ma = \"matrix_a\", *mb = \"matrix_b\",\n-    *c = \"c\", *n = \"n\", *ncopies= \"ncopies\", *pos = \"pos\", *bck = \"back\",\n-    *i = \"i\", *v = \"vector\", *va = \"vector_a\", *vb = \"vector_b\",\n-    *j = \"j\", *a1 = \"a1\", *fs = \"fsource\", *ts = \"tsource\",\n-    *l = \"l\", *a2 = \"a2\", *mo = \"mold\", *ord = \"order\",\n-    *p = \"p\", *ar = \"array\", *shp = \"shape\", *src = \"source\",\n-    *r = \"r\", *bd = \"boundary\", *pad = \"pad\", *set = \"set\",\n-    *s = \"s\", *dm = \"dim\", *kind = \"kind\", *msk = \"mask\",\n-    *x = \"x\", *sh = \"shift\", *stg = \"string\", *ssg = \"substring\",\n-    *y = \"y\", *sz = \"size\", *sta = \"string_a\", *stb = \"string_b\",\n-    *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n-    *num = \"number\", *tm = \"time\", *nm = \"name\", *md = \"mode\",\n-    *vl = \"values\", *p1 = \"path1\", *p2 = \"path2\", *com = \"command\",\n-    *ca = \"coarray\", *sub = \"sub\", *dist = \"distance\", *failed=\"failed\",\n-    *c_ptr_1 = \"c_ptr_1\", *c_ptr_2 = \"c_ptr_2\", *back = \"back\",\n-    *team = \"team\", *image = \"image\", *level = \"level\";\n+    *a = \"a\", *a1 = \"a1\", *a2 = \"a2\", *ar = \"array\", *b = \"b\",\n+    *bck = \"back\", *bd = \"boundary\", *c = \"c\", *c_ptr_1 = \"c_ptr_1\",\n+    *c_ptr_2 = \"c_ptr_2\", *ca = \"coarray\", *com = \"command\",\n+    *dist = \"distance\", *dm = \"dim\", *f = \"field\", *failed=\"failed\",\n+    *fs = \"fsource\", *han = \"handler\", *i = \"i\",\n+    *image = \"image\", *j = \"j\", *kind = \"kind\",\n+    *l = \"l\", *ln = \"len\", *level = \"level\", *m = \"matrix\", *ma = \"matrix_a\",\n+    *mb = \"matrix_b\", *md = \"mode\", *mo = \"mold\", *msk = \"mask\",\n+    *n = \"n\", *ncopies= \"ncopies\", *nm = \"name\", *num = \"number\",\n+    *ord = \"order\", *p = \"p\", *p1 = \"path1\", *p2 = \"path2\",\n+    *pad = \"pad\", *pid = \"pid\", *pos = \"pos\", *pt = \"pointer\",\n+    *r = \"r\", *s = \"s\", *set = \"set\", *sh = \"shift\", *shp = \"shape\",\n+    *sig = \"sig\", *src = \"source\", *ssg = \"substring\",\n+    *sta = \"string_a\", *stb = \"string_b\", *stg = \"string\",\n+    *sub = \"sub\", *sz = \"size\", *tg = \"target\", *team = \"team\", *tm = \"time\",\n+    *ts = \"tsource\", *ut = \"unit\", *v = \"vector\", *va = \"vector_a\",\n+    *vb = \"vector_b\", *vl = \"values\", *x = \"x\", *y = \"y\", *z = \"z\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -2255,7 +2256,7 @@ add_functions (void)\n \n   add_sym_2 (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n \t     di, GFC_STD_GNU, gfc_check_kill, NULL, gfc_resolve_kill,\n-\t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n+\t     pid, BT_INTEGER, di, REQUIRED, sig, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"kill\", GFC_ISYM_KILL, GFC_STD_GNU);\n \n@@ -2471,7 +2472,7 @@ add_functions (void)\n \t       gfc_check_minloc_maxloc, gfc_simplify_maxloc, gfc_resolve_maxloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL,\n-\t       back, BT_LOGICAL, dl, OPTIONAL);\n+\t       bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n@@ -2548,7 +2549,7 @@ add_functions (void)\n \t       gfc_check_minloc_maxloc, gfc_simplify_minloc, gfc_resolve_minloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n \t       msk, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL,\n-\t       back, BT_LOGICAL, dl, OPTIONAL);\n+\t       bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n@@ -3301,20 +3302,21 @@ add_functions (void)\n static void\n add_subroutines (void)\n {\n-  /* Argument names as in the standard (to be used as argument keywords).  */\n-  const char\n-    *a = \"a\", *h = \"harvest\", *dt = \"date\", *vl = \"values\", *pt = \"put\",\n-    *c = \"count\", *tm = \"time\", *tp = \"topos\", *gt = \"get\",\n-    *t = \"to\", *zn = \"zone\", *fp = \"frompos\", *cm = \"count_max\",\n-    *f = \"from\", *sz = \"size\", *ln = \"len\", *cr = \"count_rate\",\n-    *com = \"command\", *length = \"length\", *st = \"status\",\n-    *val = \"value\", *num = \"number\", *name = \"name\",\n-    *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n-    *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\",\n-    *whence = \"whence\", *pos = \"pos\", *ptr = \"ptr\", *p1 = \"path1\",\n-    *p2 = \"path2\", *msk = \"mask\", *old = \"old\", *result_image = \"result_image\",\n-    *stat = \"stat\", *errmsg = \"errmsg\";\n-\n+  /* Argument names.  These are used as argument keywords and so need to\n+     match the documentation.  Please keep this list in sorted order.  */\n+  static const char\n+    *a = \"a\", *c = \"count\", *cm = \"count_max\", *com = \"command\",\n+    *cr = \"count_rate\", *dt = \"date\", *errmsg = \"errmsg\", *f = \"from\",\n+    *fp = \"frompos\", *gt = \"get\", *h = \"harvest\", *han = \"handler\",\n+    *length = \"length\", *ln = \"len\", *md = \"mode\", *msk = \"mask\",\n+    *name = \"name\", *num = \"number\", *of = \"offset\", *old = \"old\",\n+    *p1 = \"path1\", *p2 = \"path2\", *pid = \"pid\", *pos = \"pos\",\n+    *pt = \"put\", *ptr = \"ptr\", *res = \"result\",\n+    *result_image = \"result_image\", *sec = \"seconds\", *sig = \"sig\",\n+    *st = \"status\", *stat = \"stat\", *sz = \"size\", *t = \"to\",\n+    *tm = \"time\", *tp = \"topos\", *trim_name = \"trim_name\", *ut = \"unit\",\n+    *val = \"value\", *vl = \"values\", *whence = \"whence\", *zn = \"zone\";\n+ \n   int di, dr, dc, dl, ii;\n \n   di = gfc_default_integer_kind;\n@@ -3723,8 +3725,8 @@ add_subroutines (void)\n \n   add_sym_3s (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_kill_sub, NULL, gfc_resolve_kill_sub,\n-\t      c, BT_INTEGER, di, REQUIRED, INTENT_IN,\n-\t      val, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      pid, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      sig, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"link\", GFC_ISYM_LINK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,"}, {"sha": "bd77c1ebfc8d6b8ba1e6539ebddcd446c2a9d298", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "patch": "@@ -8715,38 +8715,41 @@ end program test_itime\n @table @asis\n @item @emph{Description}:\n @item @emph{Standard}:\n-Sends the signal specified by @var{SIGNAL} to the process @var{PID}.\n+Sends the signal specified by @var{SIG} to the process @var{PID}.\n See @code{kill(2)}.\n \n-This intrinsic is provided in both subroutine and function forms; however,\n-only one form can be used in any given program unit.\n+This intrinsic is provided in both subroutine and function forms;\n+however,  only one form can be used in any given program unit.\n \n @item @emph{Class}:\n Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{CALL KILL(C, VALUE [, STATUS])}\n-@item @code{STATUS = KILL(C, VALUE)}\n+@item @code{CALL KILL(PID, SIG [, STATUS])}\n+@item @code{STATUS = KILL(PID, SIG)}\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{C} @tab Shall be a scalar @code{INTEGER}, with\n+@item @var{PID} @tab Shall be a scalar @code{INTEGER} with\n @code{INTENT(IN)}\n-@item @var{VALUE} @tab Shall be a scalar @code{INTEGER}, with\n+@item @var{SIG} @tab Shall be a scalar @code{INTEGER} with\n @code{INTENT(IN)}\n-@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)} or\n-@code{INTEGER(8)}. Returns 0 on success, or a system-specific error code\n-otherwise.\n+@item @var{STATUS} @tab [Subroutine](Optional) status flag of type\n+@code{INTEGER(4)} or @code{INTEGER(8)}.\n+Returns 0 on success; otherwise a system-specific error code is returned.\n+@item @var{STATUS} @tab [Function] The kind type parameter is that of\n+@code{pid} if @code{pid} is of type @code{INTEGER(4)} or @code{INTEGER(8)};\n+otherwise, it is default integer kind.\n+Returns 0 on success; otherwise a system-specific error code is returned.\n @end multitable\n \n @item @emph{See also}:\n @ref{ABORT}, @ref{EXIT}\n @end table\n \n \n-\n @node KIND\n @section @code{KIND} --- Kind of an entity\n @fnindex KIND"}, {"sha": "f2208b4c2cf7f8135f1a6ec4026faf8a97c36a5e", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe1f017435875f9bfd29d250b4ba2eaf4c79047/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=fbe1f017435875f9bfd29d250b4ba2eaf4c79047", "patch": "@@ -1492,11 +1492,14 @@ gfc_resolve_ishftc (gfc_expr *f, gfc_expr *i, gfc_expr *shift, gfc_expr *size)\n \n \n void\n-gfc_resolve_kill (gfc_expr *f, gfc_expr *p ATTRIBUTE_UNUSED,\n-\t\t  gfc_expr *s ATTRIBUTE_UNUSED)\n+gfc_resolve_kill (gfc_expr *f, gfc_expr *pid,\n+\t\t  gfc_expr *sig ATTRIBUTE_UNUSED)\n {\n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind;\n+  if (pid->ts.kind == 4 || pid->ts.kind == 8)\n+    f->ts.kind = pid->ts.kind;\n+  else\n+    f->ts.kind = gfc_default_integer_kind;\n   f->value.function.name = gfc_get_string (PREFIX (\"kill_i%d\"), f->ts.kind);\n }\n \n@@ -3446,6 +3449,7 @@ gfc_resolve_rename_sub (gfc_code *c)\n   const char *name;\n   int kind;\n \n+  /* Find the type of status.  If not present use default integer kind.  */\n   if (c->ext.actual->next->next->expr != NULL)\n     kind = c->ext.actual->next->next->expr->ts.kind;\n   else"}]}