{"sha": "b5a3eb844512505aed41fb3a0cb4e3f45c082589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVhM2ViODQ0NTEyNTA1YWVkNDFmYjNhMGNiNGUzZjQ1YzA4MjU4OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-02-10T17:28:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-02-10T17:28:24Z"}, "message": "Fix 64b-x-32b cross compiler breakage.  Make alpha-x-m32r work again.\n\n\t* emit-rtl.c (operand_subword): Sign extend REAL_VALUE_TO_TARGET_SINGLE\n\tresult.\n\t* final.c (split_double): Sign extend REAL_VALUE_TO_TARGET_DOUBLE\n\tresult.\n\t* real.c (endian): Delete sign extension code.\n\t* config/m32r/m32r.md (movsf_insn+1): REAL_VALUE_TO_TARGET_SINGLE call\n\treplaced with operand_subword call.\n\nFrom-SVN: r25140", "tree": {"sha": "893f28e5cc7f90ccdec4e2184b9e0139d7125f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893f28e5cc7f90ccdec4e2184b9e0139d7125f68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5a3eb844512505aed41fb3a0cb4e3f45c082589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a3eb844512505aed41fb3a0cb4e3f45c082589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a3eb844512505aed41fb3a0cb4e3f45c082589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a3eb844512505aed41fb3a0cb4e3f45c082589/comments", "author": null, "committer": null, "parents": [{"sha": "01dd4564b6358bed9004a3f8daa41234d1555108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01dd4564b6358bed9004a3f8daa41234d1555108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01dd4564b6358bed9004a3f8daa41234d1555108"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "5fb1e563d1a5c60650e22dba2372d232f6d29483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5a3eb844512505aed41fb3a0cb4e3f45c082589", "patch": "@@ -1,3 +1,13 @@\n+Wed Feb 10 17:12:21 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* emit-rtl.c (operand_subword): Sign extend REAL_VALUE_TO_TARGET_SINGLE\n+\tresult.\n+\t* final.c (split_double): Sign extend REAL_VALUE_TO_TARGET_DOUBLE\n+\tresult.\n+\t* real.c (endian): Delete sign extension code.\n+\t* config/m32r/m32r.md (movsf_insn+1): REAL_VALUE_TO_TARGET_SINGLE call\n+\treplaced with operand_subword call.\n+\n Wed Feb 10 15:16:39 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (cmov compound patterns): Delete.  Jump can now"}, {"sha": "3f1e6e51f712108996a50183b0d783f7b3194d26", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=b5a3eb844512505aed41fb3a0cb4e3f45c082589", "patch": "@@ -589,14 +589,8 @@\n   [(set (match_dup 2) (match_dup 3))]\n   \"\n {\n-  long l;\n-  REAL_VALUE_TYPE rv;\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n-\n   operands[2] = operand_subword (operands[0], 0, 0, SFmode);\n-  operands[3] = GEN_INT (l);\n+  operands[3] = operand_subword (operands[1], 0, 0, SFmode);\n }\")\n \n (define_expand \"movdf\""}, {"sha": "a761c45745a6141467a1796ccccf08e21cf1379d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b5a3eb844512505aed41fb3a0cb4e3f45c082589", "patch": "@@ -1303,6 +1303,18 @@ operand_subword (op, i, validate_address, mode)\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n \n+      /* If 32 bits is an entire word for the target, but not for the host,\n+\t then sign-extend on the host so that the number will look the same\n+\t way on the host that it would on the target.  See for instance\n+\t simplify_unary_operation.  The #if is needed to avoid compiler\n+\t warnings.  */\n+\n+#if HOST_BITS_PER_LONG > 32\n+      if (BITS_PER_WORD < HOST_BITS_PER_LONG && BITS_PER_WORD == 32\n+\t  && (l & ((long) 1 << 31)))\n+\tl |= ((long) (-1) << 32);\n+#endif\n+\n       if (BITS_PER_WORD == 16)\n \t{\n \t  if ((i & 0x1) == !WORDS_BIG_ENDIAN)"}, {"sha": "602c27823fd87779aa8f0f14c0963438e4247596", "filename": "gcc/final.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b5a3eb844512505aed41fb3a0cb4e3f45c082589", "patch": "@@ -3929,6 +3929,22 @@ split_double (value, first, second)\n \t not necessarily BITS_PER_WORD bits.  */\n       REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n \n+      /* If 32 bits is an entire word for the target, but not for the host,\n+\t then sign-extend on the host so that the number will look the same\n+\t way on the host that it would on the target.  See for instance\n+\t simplify_unary_operation.  The #if is needed to avoid compiler\n+\t warnings.  */\n+\n+#if HOST_BITS_PER_LONG > 32\n+      if (BITS_PER_WORD < HOST_BITS_PER_LONG && BITS_PER_WORD == 32)\n+\t{\n+\t  if (l[0] & ((long) 1 << 31))\n+\t    l[0] |= ((long) (-1) << 32);\n+\t  if (l[1] & ((long) 1 << 31))\n+\t    l[1] |= ((long) (-1) << 32);\n+\t}\n+#endif\n+\n       *first = GEN_INT ((HOST_WIDE_INT) l[0]);\n       *second = GEN_INT ((HOST_WIDE_INT) l[1]);\n #else"}, {"sha": "8c5e3fe805b346e8b36dcf985042a524cd9e2929", "filename": "gcc/real.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a3eb844512505aed41fb3a0cb4e3f45c082589/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=b5a3eb844512505aed41fb3a0cb4e3f45c082589", "patch": "@@ -558,23 +558,6 @@ endian (e, x, mode)\n \t  abort ();\n \t}\n     }\n-\n-  /* If 32 bits is an entire word for the target, but not for the host,\n-     then sign-extend on the host so that the number will look the same\n-     way on the host that it would on the target.  See for instance\n-     simplify_unary_operation.  The #if is needed to avoid compiler\n-     warnings.  */\n-\n-#if HOST_BITS_PER_WIDE_INT > 32\n-  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == 32)\n-    {\n-      if (x[0] & ((HOST_WIDE_INT) 1 << 31))\n-\tx[0] |= ((HOST_WIDE_INT) (-1) << 32);\n-\n-      if (x[1] & ((HOST_WIDE_INT) 1 << 31))\n-\tx[1] |= ((HOST_WIDE_INT) (-1) << 32);\n-    }\n-#endif\n }\n \n "}]}