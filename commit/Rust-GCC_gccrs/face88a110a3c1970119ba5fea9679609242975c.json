{"sha": "face88a110a3c1970119ba5fea9679609242975c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjZTg4YTExMGEzYzE5NzAxMTliYTVmZWE5Njc5NjA5MjQyOTc1Yw==", "commit": {"author": {"name": "Sergei Trofimovich", "email": "siarheit@google.com", "date": "2016-01-05T17:57:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-05T17:57:05Z"}, "message": "[PATCH v2] ia64: don't use dynamic relocations for local symbols PR other/60465\n\n[PATCH v2] ia64: don't use dynamic relocations for local symbols\n\tPR other/60465\n\t* config/ia64/ia64.c (ia64_expand_load_address): Use gprel64\n\tfor local symbolic operands.\n\t* config/ia64/predicates.md (local_symbolic_operand64): New\n\tpredicate.\n\n        PR other/60465\n\t* gcc.target/ia64/pr60465-gprel64.c: New test.\n\t* gcc.target/ia64/pr60465-gprel64-c37.c: New test.\n\nFrom-SVN: r232080", "tree": {"sha": "a68c987f368170593f89e4702fe5083696175be2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68c987f368170593f89e4702fe5083696175be2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/face88a110a3c1970119ba5fea9679609242975c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/face88a110a3c1970119ba5fea9679609242975c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/face88a110a3c1970119ba5fea9679609242975c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/face88a110a3c1970119ba5fea9679609242975c/comments", "author": {"login": "trofi", "id": 226650, "node_id": "MDQ6VXNlcjIyNjY1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trofi", "html_url": "https://github.com/trofi", "followers_url": "https://api.github.com/users/trofi/followers", "following_url": "https://api.github.com/users/trofi/following{/other_user}", "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}", "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trofi/subscriptions", "organizations_url": "https://api.github.com/users/trofi/orgs", "repos_url": "https://api.github.com/users/trofi/repos", "events_url": "https://api.github.com/users/trofi/events{/privacy}", "received_events_url": "https://api.github.com/users/trofi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0866effcd38476b14e96b069ac697e08f5f5b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0866effcd38476b14e96b069ac697e08f5f5b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0866effcd38476b14e96b069ac697e08f5f5b79"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "d54d604efced5e9fcf0f121e4c9ec94af1288fdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -1,3 +1,11 @@\n+2016-01-05  Sergei Trofimovich <siarheit@google.com>\n+\n+\tPR other/60465\n+\t* config/ia64/ia64.c (ia64_expand_load_address): Use gprel64\n+\tfor local symbolic operands.\n+\t* config/ia64/predicates.md (local_symbolic_operand64): New\n+\tpredicate.\n+\n 2016-01-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68651"}, {"sha": "33ec7a74beec3f630af23326cabe6efb6f7692a4", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -1105,6 +1105,15 @@ ia64_expand_load_address (rtx dest, rtx src)\n     emit_insn (gen_load_fptr (dest, src));\n   else if (sdata_symbolic_operand (src, VOIDmode))\n     emit_insn (gen_load_gprel (dest, src));\n+  else if (local_symbolic_operand64 (src, VOIDmode))\n+    {\n+      /* We want to use @gprel rather than @ltoff relocations for local\n+\t symbols:\n+\t  - @gprel does not require dynamic linker\n+\t  - and does not use .sdata section\n+\t https://gcc.gnu.org/bugzilla/60465 */\n+      emit_insn (gen_load_gprel64 (dest, src));\n+    }\n   else\n     {\n       HOST_WIDE_INT addend = 0;"}, {"sha": "02347f7823c68930420c07e639fd3a78ad2939bb", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -97,6 +97,32 @@\n     }\n })\n \n+;; True if OP refers to a local symbol [+any offset].\n+;; To be encoded as:\n+;;   movl % = @gprel(symbol+offset)\n+;;   add  % = %, gp\n+(define_predicate \"local_symbolic_operand64\"\n+  (match_code \"symbol_ref,const\")\n+{\n+  switch (GET_CODE (op))\n+    {\n+    case CONST:\n+      op = XEXP (op, 0);\n+      if (GET_CODE (op) != PLUS\n+\t  || GET_CODE (XEXP (op, 0)) != SYMBOL_REF\n+\t  || GET_CODE (XEXP (op, 1)) != CONST_INT)\n+\treturn false;\n+      op = XEXP (op, 0);\n+      /* FALLTHRU */\n+\n+    case SYMBOL_REF:\n+\treturn SYMBOL_REF_LOCAL_P (op);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n+\n ;; True if OP refers to a symbol in the small address area.\n (define_predicate \"small_addr_symbolic_operand\" \n   (match_code \"symbol_ref,const\")"}, {"sha": "2075964cab1513b08a72df5a29ea50a0e62cf393", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -1,3 +1,9 @@\n+2016-01-05  Sergei Trofimovich <siarheit@google.com>\n+\n+        PR other/60465\n+\t* gcc.target/ia64/pr60465-gprel64.c: New test.\n+\t* gcc.target/ia64/pr60465-gprel64-c37.c: New test.\n+\n 2016-01-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68651"}, {"sha": "a7e6809eb6dfcf6e432cedc351a64dcc35eb65fa", "filename": "gcc/testsuite/gcc.target/ia64/pr60465-gprel64-c37.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64-c37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64-c37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64-c37.c?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\" } } */\n+\n+/* A bit of https://bugzilla.redhat.com/show_bug.cgi?id=33354\n+   where many stores to static variables overflow .sdata */\n+\n+static const char *s90;\n+void f() { s90 = \"string 90\"; }\n+const char * g() { return s90; }"}, {"sha": "c00ecc947d92cddb9ff05cfc246d47e39ef00b2b", "filename": "gcc/testsuite/gcc.target/ia64/pr60465-gprel64.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/face88a110a3c1970119ba5fea9679609242975c/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr60465-gprel64.c?ref=face88a110a3c1970119ba5fea9679609242975c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler-not \"@ltoffx\" } } */\n+\n+/* Test imitates early ld.so setup in glibc\n+   where no dynamic relocations must be present. */\n+\n+struct rtld_global\n+{\n+    long *p[77];\n+};\n+\n+struct rtld_global _rtld_local __attribute__ ((visibility (\"hidden\"), section (\".sdata\")));\n+\n+static void __attribute__ ((unused, noinline))\n+elf_get_dynamic_info (struct rtld_global * g, long * dyn)\n+{\n+  long **info = g->p;\n+\n+  info[(0x6ffffeff - *dyn) + 66] = dyn;\n+}\n+\n+void __attribute__ ((unused, noinline))\n+_dl_start (long * dyn)\n+{\n+  elf_get_dynamic_info(&_rtld_local, dyn);\n+}"}]}