{"sha": "bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkZTMzNDVlYTk3YWVmMzZmNWI0ZTI5ZjA5ZjcxYmNkNDE4NzliMg==", "commit": {"author": {"name": "Alejandro Martinez", "email": "alejandro.martinezvicente@arm.com", "date": "2019-06-03T09:13:32Z"}, "committer": {"name": "Alejandro Martinez", "email": "alejandro@gcc.gnu.org", "date": "2019-06-03T09:13:32Z"}, "message": "Fix ICE in vect_slp_analyze_node_operations_1\n\nThis patch fixes bug 90681.  It was caused by trying to SLP vectorize a non\ngroupped load.  We've fixed it by tweaking a bit the implementation: mark\nmasked loads as not vectorizable, but support them as an special case.  Then\nthe detect them in the test for normal non-groupped loads that was already\nthere.\n\nFrom-SVN: r271856", "tree": {"sha": "a37c040cad49749087ab467c78458e04f08ef665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a37c040cad49749087ab467c78458e04f08ef665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/comments", "author": null, "committer": null, "parents": [{"sha": "961dce6b9d495ebdb3a0b98bf0d15bb8f062ff00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961dce6b9d495ebdb3a0b98bf0d15bb8f062ff00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961dce6b9d495ebdb3a0b98bf0d15bb8f062ff00"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "cceed1af5690ead7f8b3ecfea258d7fdb7d74292", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "patch": "@@ -1,3 +1,10 @@\n+2019-06-03  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\tPR tree-optimization/90681\n+\t* internal-fn.c (mask_load_direct): Mark as non-vectorizable again.\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Add masked loads as a\n+\tspecial case for SLP, but fail on non-groupped loads.\n+\n 2019-06-03  Martin Liska  <mliska@suse.cz>\n \n \t* cfg.c (debug): Use TDF_DETAILS for debug and"}, {"sha": "04081f36c4d31ecfba4099e50412345c67e1f58f", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "patch": "@@ -100,7 +100,7 @@ init_internal_fns ()\n /* Create static initializers for the information returned by\n    direct_internal_fn.  */\n #define not_direct { -2, -2, false }\n-#define mask_load_direct { -1, 2, true }\n+#define mask_load_direct { -1, 2, false }\n #define load_lanes_direct { -1, -1, false }\n #define mask_load_lanes_direct { -1, -1, false }\n #define gather_load_direct { -1, -1, false }"}, {"sha": "453e9c646c37bef79ba8706b4399c9d65d614aea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "patch": "@@ -1,3 +1,8 @@\n+2019-06-03  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\tPR tree-optimization/90681\n+\t* gfortran.dg/vect/pr90681.f: New test.\n+\n 2019-06-03  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/90713"}, {"sha": "03d3987b146d6f3b47a658e781a8b4de2e4103d9", "filename": "gcc/testsuite/gfortran.dg/vect/pr90681.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr90681.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr90681.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr90681.f?ref=bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "patch": "@@ -0,0 +1,13 @@\n+C { dg-do compile }\n+C { dg-additional-options \"-march=armv8.2-a+sve\" { target { aarch64*-*-* } } }\n+      SUBROUTINE HMU (H1)\n+      COMMON DD(107)\n+      DIMENSION H1(NORBS,*)\n+            DO 70 J1 = IA,I1\n+               H1(I1,J1) = 0\n+               JO1 = J1\n+               IF (JO1.EQ.1) THEN\n+                   H1(I1,J1) = DD(NI)\n+               END IF\n+   70       CONTINUE\n+      END"}, {"sha": "930cd79784e746f55d00ccab9fd37bdb85995293", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcde3345ea97aef36f5b4e29f09f71bcd41879b2/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=bcde3345ea97aef36f5b4e29f09f71bcd41879b2", "patch": "@@ -661,6 +661,7 @@ vect_build_slp_tree_1 (unsigned char *swap,\n   machine_mode optab_op2_mode;\n   machine_mode vec_mode;\n   stmt_vec_info first_load = NULL, prev_first_load = NULL;\n+  bool load_p = false;\n \n   /* For every stmt in NODE find its def stmt/s.  */\n   stmt_vec_info stmt_info;\n@@ -714,13 +715,16 @@ vect_build_slp_tree_1 (unsigned char *swap,\n       if (gcall *call_stmt = dyn_cast <gcall *> (stmt))\n \t{\n \t  rhs_code = CALL_EXPR;\n-\t  if ((gimple_call_internal_p (call_stmt)\n-\t       && (!vectorizable_internal_fn_p\n-\t\t   (gimple_call_internal_fn (call_stmt))))\n-\t      || gimple_call_tail_p (call_stmt)\n-\t      || gimple_call_noreturn_p (call_stmt)\n-\t      || !gimple_call_nothrow_p (call_stmt)\n-\t      || gimple_call_chain (call_stmt))\n+\n+\t  if (gimple_call_internal_p (stmt, IFN_MASK_LOAD))\n+\t    load_p = true;\n+\t  else if ((gimple_call_internal_p (call_stmt)\n+\t\t    && (!vectorizable_internal_fn_p\n+\t\t\t(gimple_call_internal_fn (call_stmt))))\n+\t\t   || gimple_call_tail_p (call_stmt)\n+\t\t   || gimple_call_noreturn_p (call_stmt)\n+\t\t   || !gimple_call_nothrow_p (call_stmt)\n+\t\t   || gimple_call_chain (call_stmt))\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -732,7 +736,10 @@ vect_build_slp_tree_1 (unsigned char *swap,\n \t    }\n \t}\n       else\n-\trhs_code = gimple_assign_rhs_code (stmt);\n+\t{\n+\t  rhs_code = gimple_assign_rhs_code (stmt);\n+\t  load_p = TREE_CODE_CLASS (rhs_code) == tcc_reference;\n+\t}\n \n       /* Check the operation.  */\n       if (i == 0)\n@@ -899,7 +906,7 @@ vect_build_slp_tree_1 (unsigned char *swap,\n         } /* Grouped access.  */\n       else\n \t{\n-\t  if (TREE_CODE_CLASS (rhs_code) == tcc_reference)\n+\t  if (load_p)\n \t    {\n \t      /* Not grouped load.  */\n \t      if (dump_enabled_p ())"}]}