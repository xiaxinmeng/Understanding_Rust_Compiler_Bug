{"sha": "62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "node_id": "C_kwDOANBUbNoAKDYyZDQ4ZDVlNGE5ZTEwYWEzMTUwOWRjZGQzZTZkOTYwYzQwZjQxMzQ", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2023-04-06T17:20:55Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-11T07:42:45Z"}, "message": "gccrs: Introduce AST::Visitable class for AST\n\nAST::Visitable is an abstract class with a unique accept_vis() method.\nMake all abstract AST node class inherit from this class.\n\nAllows for easy definition of operations on nodes that must accept a\nvisitor.\n\nThe static Dump::dump() is an example of such use: the static method\naccepts any AST node, creates a Dump visitor and have it visit the AST\nstarting at the node.\n\nThis change also inserts a debug(Visitable&) function in the global\nnamespace to make it easy to call from the debugger (similar to\ndebug_tree or debug(rtx*) functions).\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::debug): New.\n\t* ast/rust-ast-dump.h (Dump::debug): Untemplate it.\n\t(debug): New.\n\t* ast/rust-ast.h (class Visitable): New.\n\t(class TokenTree): Inherit from Visitable.\n\t(class MacroMatch): Likewise.\n\t(class AttrInput): Likewise.\n\t(class MetaItemInner): Likewise.\n\t(class Pattern): Likewise.\n\t(classTypeParamBound): Likewise.\n\t(class GenericParam): Likewise.\n\t(class TraitItem): Likewise.\n\t(classInherentImplItem): Likewise.\n\t(class TraitImplItem): Likewise.\n\t(class ExternalItem): Likewise.\n\t(class SingleASTNode): Likewise.\n\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "904408b4e3dc158a4f9330e7673cd9fd951f6723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904408b4e3dc158a4f9330e7673cd9fd951f6723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc9f60374ff5a5910d5a3d746d20903a8f50543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc9f60374ff5a5910d5a3d746d20903a8f50543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc9f60374ff5a5910d5a3d746d20903a8f50543"}], "stats": {"total": 99, "additions": 43, "deletions": 56}, "files": [{"sha": "05de528b2366df5f2b018bc556a2a51e9a547cbc", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-dump.h\"\n+#include \"rust-expr.h\"\n \n namespace Rust {\n namespace AST {\n@@ -1916,5 +1917,21 @@ Dump::visit (BareFunctionType &type)\n     }\n }\n \n+void\n+Dump::debug (Visitable &v)\n+{\n+  auto dump = Dump (std::cerr);\n+\n+  std::cerr << '\\n';\n+  v.accept_vis (dump);\n+  std::cerr << '\\n';\n+}\n+\n } // namespace AST\n } // namespace Rust\n+\n+void\n+debug (Rust::AST::Visitable &v)\n+{\n+  Rust::AST::Dump::debug (v);\n+}"}, {"sha": "45722f27b011fdec0b989f028390d5eeb526270f", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "patch": "@@ -38,21 +38,8 @@ class Dump : public ASTVisitor\n   void go (AST::Crate &crate);\n   void go (AST::Item &item);\n \n-  /**\n-   * Use the AST Dump as a debugging tool\n-   */\n-  template <typename T> static void debug (T &instance)\n-  {\n-    auto dump = Dump (std::cerr);\n-\n-    std::cerr << '\\n';\n-    instance.accept_vis (dump);\n-    std::cerr << '\\n';\n-  }\n-  template <typename T> static void debug (std::unique_ptr<T> &instance)\n-  {\n-    debug (*instance);\n-  }\n+  // Helper method to get a quick debug dump to standard error output\n+  static void debug (Visitable &v);\n \n private:\n   std::ostream &stream;\n@@ -309,4 +296,8 @@ class Dump : public ASTVisitor\n } // namespace AST\n } // namespace Rust\n \n+// In the global namespace to make it easier to call from debugger\n+void\n+debug (Rust::AST::Visitable &v);\n+\n #endif // !RUST_AST_DUMP_H"}, {"sha": "540a2624b3f7b7a68c2cdaa9ca6b6c3dec434a14", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 20, "deletions": 41, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d48d5e4a9e10aa31509dcdd3e6d960c40f4134/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=62d48d5e4a9e10aa31509dcdd3e6d960c40f4134", "patch": "@@ -46,8 +46,14 @@ enum Kind\n   MACRO_INVOCATION,\n };\n \n+class Visitable\n+{\n+public:\n+  virtual void accept_vis (ASTVisitor &vis) = 0;\n+};\n+\n // Abstract base class for all AST elements\n-class Node\n+class Node : public Visitable\n {\n public:\n   /**\n@@ -72,7 +78,7 @@ enum DelimType\n class Token;\n \n // A tree of tokens (or a single token) - abstract base class\n-class TokenTree\n+class TokenTree : public Visitable\n {\n public:\n   virtual ~TokenTree () {}\n@@ -85,8 +91,6 @@ class TokenTree\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   /* Converts token tree to a flat token stream. Tokens must be pointer to avoid\n    * mutual dependency with Token. */\n   virtual std::vector<std::unique_ptr<Token> > to_token_stream () const = 0;\n@@ -97,7 +101,7 @@ class TokenTree\n };\n \n // Abstract base class for a macro match\n-class MacroMatch\n+class MacroMatch : public Visitable\n {\n public:\n   enum MacroMatchType\n@@ -119,8 +123,6 @@ class MacroMatch\n     return std::unique_ptr<MacroMatch> (clone_macro_match_impl ());\n   }\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual MacroMatchType get_macro_match_type () const = 0;\n \n protected:\n@@ -587,7 +589,7 @@ struct Attribute\n };\n \n // Attribute body - abstract base class\n-class AttrInput\n+class AttrInput : public Visitable\n {\n public:\n   enum AttrInputType\n@@ -607,8 +609,6 @@ class AttrInput\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual bool check_cfg_predicate (const Session &session) const = 0;\n \n   // Parse attribute input to meta item, if possible\n@@ -630,7 +630,7 @@ class AttrInput\n class MetaNameValueStr;\n \n // abstract base meta item inner class\n-class MetaItemInner\n+class MetaItemInner : public Visitable\n {\n protected:\n   // pure virtual as MetaItemInner\n@@ -649,8 +649,6 @@ class MetaItemInner\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   /* HACK: used to simplify parsing - creates a copy of that type, or returns\n    * null */\n   virtual std::unique_ptr<MetaNameValueStr> to_meta_name_value_str () const;\n@@ -894,8 +892,6 @@ class Stmt : public Node\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual Location get_locus () const = 0;\n \n   virtual void mark_for_strip () = 0;\n@@ -976,8 +972,6 @@ class Expr : public Node\n   // HACK: strictly not needed, but faster than full downcast clone\n   virtual bool is_expr_without_block () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n@@ -1092,7 +1086,7 @@ class IdentifierExpr : public ExprWithoutBlock\n };\n \n // Pattern base AST node\n-class Pattern\n+class Pattern : public Visitable\n {\n public:\n   // Unique pointer custom clone function\n@@ -1106,7 +1100,6 @@ class Pattern\n   virtual ~Pattern () {}\n \n   virtual std::string as_string () const = 0;\n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n \n   // as only one kind of pattern can be stripped, have default of nothing\n   virtual void mark_for_strip () {}\n@@ -1144,8 +1137,6 @@ class Type : public Node\n   /* as pointer, shouldn't require definition beforehand, only forward\n    * declaration. */\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   // as only two kinds of types can be stripped, have default of nothing\n   virtual void mark_for_strip () {}\n   virtual bool is_marked_for_strip () const { return false; }\n@@ -1190,7 +1181,7 @@ class TypeNoBounds : public Type\n \n /* Abstract base class representing a type param bound - Lifetime and TraitBound\n  * extends it */\n-class TypeParamBound\n+class TypeParamBound : public Visitable\n {\n public:\n   virtual ~TypeParamBound () {}\n@@ -1203,8 +1194,6 @@ class TypeParamBound\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   NodeId get_node_id () const { return node_id; }\n \n   virtual Location get_locus () const = 0;\n@@ -1279,7 +1268,7 @@ class Lifetime : public TypeParamBound\n \n /* Base generic parameter in AST. Abstract - can be represented by a Lifetime or\n  * Type param */\n-class GenericParam\n+class GenericParam : public Visitable\n {\n public:\n   enum class Kind\n@@ -1299,8 +1288,6 @@ class GenericParam\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual Location get_locus () const = 0;\n \n   virtual Kind get_kind () const = 0;\n@@ -1372,7 +1359,7 @@ class LifetimeParam : public GenericParam\n };\n \n // Item used in trait declarations - abstract base class\n-class TraitItem\n+class TraitItem : public Visitable\n {\n protected:\n   TraitItem (Location locus)\n@@ -1396,8 +1383,6 @@ class TraitItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n@@ -1407,7 +1392,7 @@ class TraitItem\n \n /* Abstract base class for items used within an inherent impl block (the impl\n  * name {} one) */\n-class InherentImplItem\n+class InherentImplItem : public Visitable\n {\n protected:\n   // Clone function implementation as pure virtual method\n@@ -1424,16 +1409,14 @@ class InherentImplItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n   virtual Location get_locus () const = 0;\n };\n \n // Abstract base class for items used in a trait impl\n-class TraitImplItem\n+class TraitImplItem : public Visitable\n {\n protected:\n   virtual TraitImplItem *clone_trait_impl_item_impl () const = 0;\n@@ -1449,14 +1432,12 @@ class TraitImplItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n };\n \n // Abstract base class for an item used inside an extern block\n-class ExternalItem\n+class ExternalItem : public Visitable\n {\n public:\n   ExternalItem () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n@@ -1471,8 +1452,6 @@ class ExternalItem\n \n   virtual std::string as_string () const = 0;\n \n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n@@ -1576,7 +1555,7 @@ struct MacroInvocData\n   }\n };\n \n-class SingleASTNode\n+class SingleASTNode : public Visitable\n {\n public:\n   enum NodeType\n@@ -1792,7 +1771,7 @@ class SingleASTNode\n     return std::move (type);\n   }\n \n-  void accept_vis (ASTVisitor &vis)\n+  void accept_vis (ASTVisitor &vis) override\n   {\n     switch (kind)\n       {"}]}