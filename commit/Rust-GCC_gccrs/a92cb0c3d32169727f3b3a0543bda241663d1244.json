{"sha": "a92cb0c3d32169727f3b3a0543bda241663d1244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyY2IwYzNkMzIxNjk3MjdmM2IzYTA1NDNiZGEyNDE2NjNkMTI0NA==", "commit": {"author": {"name": "Jens-Michael Hoffmann", "email": "jensmh@gmx.de", "date": "2002-11-18T15:46:34Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-11-18T15:46:34Z"}, "message": "buffer.c: Remove unnecessary casts.\n\n2002-11-14  Jens-Michael Hoffmann  <jensmh@gmx.de>\n\n        * buffer.c: Remove unnecessary casts.\n        * check-init.c: Likewise.\n        * class.c: Likewise.\n        * constants.c: Likewise.\n        * decl.c: Likewise.\n        * except.c: Likewise.\n        * gjavah.c: Likewise.\n        * jcf-io.c: Likewise.\n        * jcf-parse.c: Likewise.\n        * jcf-path.c: Likewise.\n        * jvspec.c: Likewise.\n        * lang.c: Likewise.\n        * lex.c: Likewise.\n        * verify.c: Likewise.\n\nFrom-SVN: r59224", "tree": {"sha": "eb8e95ee304089b9733a38cca3a66ca60c241853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb8e95ee304089b9733a38cca3a66ca60c241853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a92cb0c3d32169727f3b3a0543bda241663d1244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92cb0c3d32169727f3b3a0543bda241663d1244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92cb0c3d32169727f3b3a0543bda241663d1244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92cb0c3d32169727f3b3a0543bda241663d1244/comments", "author": null, "committer": null, "parents": [{"sha": "e7e0de7e333f5389009e7f7b9894c97035021609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e0de7e333f5389009e7f7b9894c97035021609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e0de7e333f5389009e7f7b9894c97035021609"}], "stats": {"total": 135, "additions": 73, "deletions": 62}, "files": [{"sha": "d0dd06862759df700094891f6740cb435d24020b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -1,3 +1,20 @@\n+2002-11-14  Jens-Michael Hoffmann  <jensmh@gmx.de>\n+\n+\t* buffer.c: Remove unnecessary casts.\n+\t* check-init.c: Likewise.\n+\t* class.c: Likewise.\n+\t* constants.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* except.c: Likewise.\n+\t* gjavah.c: Likewise.\n+\t* jcf-io.c: Likewise.\n+\t* jcf-parse.c: Likewise.\n+\t* jcf-path.c: Likewise.\n+\t* jvspec.c: Likewise.\n+\t* lang.c: Likewise.\n+\t* lex.c: Likewise.\n+\t* verify.c: Likewise.\n+\n 2002-11-06  Tom Tromey  <tromey@redhat.com>\n \n \t* gjavah.c (print_stub_or_jni): Include JNIEXPORT and JNICALL in"}, {"sha": "170cc04540afea27250671392093a9adb04ab17a", "filename": "gcc/java/buffer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fbuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fbuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuffer.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -37,14 +37,14 @@ buffer_grow (bufp, size)\n     {\n       if (size < 120)\n \tsize = 120;\n-      bufp->data = (unsigned char*) xmalloc (size);\n+      bufp->data = xmalloc (size);\n       bufp->ptr = bufp->data;\n     }\n   else\n     {\n       int index = bufp->ptr - bufp->data;\n       size += 2 * (bufp->limit - bufp->data);\n-      bufp->data = (unsigned char *) xrealloc (bufp->data, size);\n+      bufp->data = xrealloc (bufp->data, size);\n       bufp->ptr = bufp->data + index;\n     }\n   bufp->limit = bufp->data + size;"}, {"sha": "6495a78d85a619a12e8af58e611400d813aff72d", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -108,7 +108,7 @@ static tree get_variable_decl PARAMS ((tree));\n static void final_assign_error PARAMS ((tree));\n static void check_final_reassigned PARAMS ((tree, words));\n \n-#define ALLOC_WORDS(NUM) ((word*) xmalloc ((NUM) * sizeof (word)))\n+#define ALLOC_WORDS(NUM) (xmalloc ((NUM) * sizeof (word)))\n #define FREE_WORDS(PTR) (free (PTR))\n \n /* DECLARE_BUFFERS is used to allocate NUMBUFFER bit sets, each of"}, {"sha": "5df0ffc688dac3f783898056edc8152734a7532b", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -150,7 +150,7 @@ add_assume_compiled (ident, excludep)\n {\n   assume_compiled_node *parent;\n   assume_compiled_node *node = \n-    (assume_compiled_node *) xmalloc (sizeof (assume_compiled_node));\n+    xmalloc (sizeof (assume_compiled_node));\n \n   node->ident = xstrdup (ident);\n   node->excludep = excludep;\n@@ -160,8 +160,7 @@ add_assume_compiled (ident, excludep)\n \n   if (NULL == assume_compiled_tree)\n     {\n-      assume_compiled_tree = \n-\t(assume_compiled_node *) xmalloc (sizeof (assume_compiled_node));\n+      assume_compiled_tree = xmalloc (sizeof (assume_compiled_node));\n       assume_compiled_tree->ident = \"\";\n       assume_compiled_tree->excludep = 0;\n       assume_compiled_tree->sibling = NULL;\n@@ -232,7 +231,7 @@ ident_subst (old_name, old_length, prefix, old_char, new_char, suffix)\n #ifdef __GNUC__\n   char buffer[i];\n #else\n-  char *buffer = (char *)alloca  (i);\n+  char *buffer = alloca (i);\n #endif\n   strcpy (buffer, prefix);\n   for (i = 0; i < old_length; i++)\n@@ -613,7 +612,7 @@ add_method_1 (this_class, access_flags, name, function_type)\n   DECL_CONTEXT (fndecl) = this_class;\n \n   DECL_LANG_SPECIFIC (fndecl)\n-    = (struct lang_decl *) ggc_alloc_cleared (sizeof (struct lang_decl));\n+    = ggc_alloc_cleared (sizeof (struct lang_decl));\n   DECL_LANG_SPECIFIC (fndecl)->desc = LANG_DECL_FUNC;\n \n   /* Initialize the static initializer test table.  */"}, {"sha": "23f99572c9226094c3166c44fa7cf5028dacb188", "filename": "gcc/java/constants.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -47,19 +47,17 @@ set_constant_entry (cpool, index, tag, value)\n   if (cpool->data == NULL)\n     {\n       cpool->capacity = 100;\n-      cpool->tags = (uint8*) xmalloc (sizeof(uint8) * cpool->capacity);\n-      cpool->data = (jword*) xmalloc (sizeof(jword) * cpool->capacity);\n+      cpool->tags = xmalloc (sizeof(uint8) * cpool->capacity);\n+      cpool->data = xmalloc (sizeof(jword) * cpool->capacity);\n       cpool->count = 1;\n     }\n   if (index >= cpool->capacity)\n     {\n       cpool->capacity *= 2;\n       if (index >= cpool->capacity)\n \tcpool->capacity = index + 10;\n-      cpool->tags = (uint8*) xrealloc (cpool->tags,\n-\t\t\t\t       sizeof(uint8) * cpool->capacity);\n-      cpool->data = (jword*) xrealloc (cpool->data,\n-\t\t\t\t       sizeof(jword) * cpool->capacity);\n+      cpool->tags = xrealloc (cpool->tags, sizeof(uint8) * cpool->capacity);\n+      cpool->data = xrealloc (cpool->data, sizeof(jword) * cpool->capacity);\n     }\n   if (index >= cpool->count)\n     cpool->count = index + 1;"}, {"sha": "bcf30b3718eb1f4a2e765a744c0b3184cfa8b38b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -1183,7 +1183,7 @@ static struct binding_level *\n make_binding_level ()\n {\n   /* NOSTRICT */\n-  return (struct binding_level *) xmalloc (sizeof (struct binding_level));\n+  return xmalloc (sizeof (struct binding_level));\n }\n \n void\n@@ -1778,7 +1778,7 @@ start_java_method (fndecl)\n \n   i = DECL_MAX_LOCALS(fndecl) + DECL_MAX_STACK(fndecl);\n   decl_map = make_tree_vec (i);\n-  type_map = (tree *) xrealloc (type_map, i * sizeof (tree));\n+  type_map = xrealloc (type_map, i * sizeof (tree));\n \n #if defined(DEBUG_JAVA_BINDING_LEVELS)\n   fprintf (stderr, \"%s:\\n\", lang_printable_name (fndecl, 2));"}, {"sha": "0de4c8af0b37d25ee729b90e717adef6394f0563", "filename": "gcc/java/except.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -153,8 +153,7 @@ link_handler (range, outer)\n   /* Handle overlapping ranges by splitting the new range.  */\n   if (range->start_pc < outer->start_pc || range->end_pc > outer->end_pc)\n     {\n-      struct eh_range *h\n-\t= (struct eh_range *) xmalloc (sizeof (struct eh_range));\n+      struct eh_range *h = xmalloc (sizeof (struct eh_range));\n       if (range->start_pc < outer->start_pc)\n \t{\n \t  h->start_pc = range->start_pc;\n@@ -286,7 +285,7 @@ add_handler (start_pc, end_pc, handler, type)\n       prev = ptr;\n     }\n \n-  h = (struct eh_range *) xmalloc (sizeof (struct eh_range));\n+  h = xmalloc (sizeof (struct eh_range));\n   h->start_pc = start_pc;\n   h->end_pc = end_pc;\n   h->first_child = NULL;"}, {"sha": "0c9d24990b7844499d49a945b7e4495f0798f091", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -834,13 +834,13 @@ DEFUN(print_method_info, (stream, jcf, name_index, sig_index, flags),\n     {\n       struct method_name *nn;\n \n-      nn = (struct method_name *) xmalloc (sizeof (struct method_name));\n-      nn->name = (char *) xmalloc (length);\n+      nn = xmalloc (sizeof (struct method_name));\n+      nn->name = xmalloc (length);\n       memcpy (nn->name, str, length);\n       nn->length = length;\n       nn->next = method_name_list;\n       nn->sig_length = JPOOL_UTF_LENGTH (jcf, sig_index);\n-      nn->signature = (char *) xmalloc (nn->sig_length);\n+      nn->signature = xmalloc (nn->sig_length);\n       memcpy (nn->signature, JPOOL_UTF_DATA (jcf, sig_index),\n \t      nn->sig_length);\n       method_name_list = nn;\n@@ -1151,7 +1151,7 @@ throwable_p (clname)\n \n   for (length = 0; clname[length] != ';' && clname[length] != '\\0'; ++length)\n     ;\n-  current = (unsigned char *) ALLOC (length);\n+  current = ALLOC (length);\n   for (i = 0; i < length; ++i)\n     current[i] = clname[i] == '/' ? '.' : clname[i];\n   current[length] = '\\0';\n@@ -1189,7 +1189,7 @@ throwable_p (clname)\n       jcf_parse_class (&jcf);\n \n       tmp = (unsigned char *) super_class_name (&jcf, &super_length);\n-      super = (unsigned char *) ALLOC (super_length + 1);\n+      super = ALLOC (super_length + 1);\n       memcpy (super, tmp, super_length);      \n       super[super_length] = '\\0';\n \n@@ -1733,7 +1733,7 @@ print_include (out, utf8, len)\n \treturn;\n     }\n \n-  incl = (struct include *) xmalloc (sizeof (struct include));\n+  incl = xmalloc (sizeof (struct include));\n   incl->name = xmalloc (len + 1);\n   strncpy (incl->name, utf8, len);\n   incl->name[len] = '\\0';\n@@ -1820,7 +1820,7 @@ add_namelet (name, name_limit, parent)\n \n   if (n == NULL)\n     {\n-      n = (struct namelet *) xmalloc (sizeof (struct namelet));\n+      n = xmalloc (sizeof (struct namelet));\n       n->name = xmalloc (p - name + 1);\n       strncpy (n->name, name, p - name);\n       n->name[p - name] = '\\0';\n@@ -2376,25 +2376,25 @@ DEFUN(main, (argc, argv),\n \n \tcase OPT_PREPEND:\n \t  if (prepend_count == 0)\n-\t    prepend_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t    prepend_specs = ALLOC (argc * sizeof (char*));\n \t  prepend_specs[prepend_count++] = optarg;\n \t  break;\n \n \tcase OPT_FRIEND:\n \t  if (friend_count == 0)\n-\t    friend_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t    friend_specs = ALLOC (argc * sizeof (char*));\n \t  friend_specs[friend_count++] = optarg;\n \t  break;\n \n \tcase OPT_ADD:\n \t  if (add_count == 0)\n-\t    add_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t    add_specs = ALLOC (argc * sizeof (char*));\n \t  add_specs[add_count++] = optarg;\n \t  break;\n \n \tcase OPT_APPEND:\n \t  if (append_count == 0)\n-\t    append_specs = (char**) ALLOC (argc * sizeof (char*));\n+\t    append_specs = ALLOC (argc * sizeof (char*));\n \t  append_specs[append_count++] = optarg;\n \t  break;\n \n@@ -2481,7 +2481,7 @@ DEFUN(main, (argc, argv),\n \t{\n \t  int dir_len = strlen (output_directory);\n \t  int i, classname_length = strlen (classname);\n-\t  current_output_file = (char*) ALLOC (dir_len + classname_length + 5);\n+\t  current_output_file = ALLOC (dir_len + classname_length + 5);\n \t  strcpy (current_output_file, output_directory);\n \t  if (dir_len > 0 && output_directory[dir_len-1] != '/')\n \t    current_output_file[dir_len++] = '/';"}, {"sha": "7b0eacacc2f107ef5a52429eb530368eaf13aeef", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -455,10 +455,10 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n   /* Allocate and zero out the buffer, since we don't explicitly put a\n      null pointer when we're copying it below.  */\n   buflen = jcf_path_max_len () + classname_length + 10;\n-  buffer = (char *) ALLOC (buflen);\n+  buffer = ALLOC (buflen);\n   memset (buffer, 0, buflen);\n \n-  java_buffer = (char *) alloca (buflen);\n+  java_buffer = alloca (buflen);\n \n   jcf->java_source = 0;\n "}, {"sha": "eeb262a48468b69da0f355634041f5b465fb0fd2", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -708,7 +708,7 @@ void\n init_outgoing_cpool ()\n {\n   current_constant_pool_data_ref = NULL_TREE;\n-  outgoing_cpool = (struct CPool *)xmalloc (sizeof (struct CPool));\n+  outgoing_cpool = xmalloc (sizeof (struct CPool));\n   memset (outgoing_cpool, 0, sizeof (struct CPool));\n }\n \n@@ -1059,7 +1059,7 @@ java_parse_file (set_yydebug)\n \tfatal_io_error (\"can't open %s\", IDENTIFIER_POINTER (name));\n       \n #ifdef IO_BUFFER_SIZE\n-      setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE),\n+      setvbuf (finput, xmalloc (IO_BUFFER_SIZE),\n \t       _IOFBF, IO_BUFFER_SIZE);\n #endif\n       input_filename = IDENTIFIER_POINTER (name);"}, {"sha": "c9ed323dea41d3528bac9035729a7e9b0702de3f", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -143,7 +143,7 @@ add_entry (entp, filename, is_system)\n   int len;\n   struct entry *n;\n \n-  n = (struct entry *) ALLOC (sizeof (struct entry));\n+  n = ALLOC (sizeof (struct entry));\n   n->flags = is_system ? FLAG_SYSTEM : 0;\n   n->next = NULL;\n \n@@ -165,7 +165,7 @@ add_entry (entp, filename, is_system)\n      work more easily.  Eww.  */\n   if (filename[len - 1] != '/' && filename[len - 1] != DIR_SEPARATOR)\n     {\n-      char *f2 = (char *) alloca (len + 2);\n+      char *f2 = alloca (len + 2);\n       strcpy (f2, filename);\n       f2[len] = DIR_SEPARATOR;\n       f2[len + 1] = '\\0';\n@@ -191,7 +191,7 @@ add_path (entp, cp, is_system)\n \n   if (cp)\n     {\n-      char *buf = (char *) alloca (strlen (cp) + 3);\n+      char *buf = alloca (strlen (cp) + 3);\n       startp = endp = cp;\n       while (1)\n \t{\n@@ -299,7 +299,7 @@ jcf_path_init ()\n       /* Desperation: use the installed one.  */\n       char *extdirs;\n       add_entry (&sys_dirs, LIBGCJ_ZIP_FILE, 1);\n-      extdirs = (char *) alloca (strlen (LIBGCJ_ZIP_FILE) + 1);\n+      extdirs = alloca (strlen (LIBGCJ_ZIP_FILE) + 1);\n       strcpy (extdirs, LIBGCJ_ZIP_FILE);\n       strcpy (&extdirs[strlen (LIBGCJ_ZIP_FILE)\n \t\t      - strlen (\"libgcj-\" DEFAULT_TARGET_VERSION \".jar\")],\n@@ -346,7 +346,7 @@ jcf_path_extdirs_arg (cp)\n \n   if (cp)\n     {\n-      char *buf = (char *) alloca (strlen (cp) + 3);\n+      char *buf = alloca (strlen (cp) + 3);\n       startp = endp = cp;\n       while (1)\n \t{\n@@ -375,9 +375,8 @@ jcf_path_extdirs_arg (cp)\n \t\t    \n \t\t    if (direntp->d_name[0] != '.')\n \t\t      {\n-\t\t\tchar *name = \n-\t\t\t  (char *) alloca (dirname_length\n-\t\t\t\t\t   + strlen (direntp->d_name) + 2);\n+\t\t\tchar *name = alloca (dirname_length\n+\t\t\t\t\t     + strlen (direntp->d_name) + 2);\n \t\t\tstrcpy (name, buf);\n \t\t\tif (name[dirname_length-1] != DIR_SEPARATOR)\n \t\t\t  {"}, {"sha": "8638ac38f6d683596487d49a32cdc62d5360b72c", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -88,8 +88,8 @@ find_spec_file (dir)\n   int x;\n   struct stat sb;\n \n-  spec = (char *) xmalloc (strlen (dir) + sizeof (SPEC_FILE)\n-\t\t\t   + sizeof (\"-specs=\") + 4);\n+  spec = xmalloc (strlen (dir) + sizeof (SPEC_FILE)\n+\t\t  + sizeof (\"-specs=\") + 4);\n   strcpy (spec, \"-specs=\");\n   x = strlen (spec);\n   strcat (spec, dir);\n@@ -251,7 +251,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   argv = *in_argv;\n   added_libraries = *in_added_libraries;\n \n-  args = (int *) xcalloc (argc, sizeof (int));\n+  args = xcalloc (argc, sizeof (int));\n \n   for (i = 1; i < argc; i++)\n     {\n@@ -496,7 +496,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   \n   num_args += shared_libgcc;\n \n-  arglist = (const char **) xmalloc ((num_args + 1) * sizeof (char *));\n+  arglist = xmalloc ((num_args + 1) * sizeof (char *));\n   j = 0;\n \n   for (i = 0; i < argc; i++, j++)"}, {"sha": "0d9605c09ffdea1fb90431886d511cccdda91da4", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -559,8 +559,8 @@ java_init (filename)\n \t\terror (\"couldn't determine target name for dependency tracking\");\n \t      else\n \t\t{\n-\t\t  char *buf = (char *) xmalloc (dot - filename +\n-\t\t\t\t\t\t3 + sizeof (TARGET_OBJECT_SUFFIX));\n+\t\t  char *buf = xmalloc (dot - filename +\n+\t\t\t\t       3 + sizeof (TARGET_OBJECT_SUFFIX));\n \t\t  strncpy (buf, filename, dot - filename);\n \n \t\t  /* If emitting class files, we might have multiple\n@@ -633,12 +633,12 @@ put_decl_string (str, len)\n       if (decl_buf == NULL)\n \t{\n \t  decl_buflen = len + 100;\n-\t  decl_buf = (char *) xmalloc (decl_buflen);\n+\t  decl_buf = xmalloc (decl_buflen);\n \t}\n       else\n \t{\n \t  decl_buflen *= 2;\n-\t  decl_buf = (char *) xrealloc (decl_buf, decl_buflen);\n+\t  decl_buf = xrealloc (decl_buf, decl_buflen);\n \t}\n     }\n   strcpy (decl_buf + decl_bufpos, str);"}, {"sha": "f1589dbe85303975ac41816d7e6bddf212480263", "filename": "gcc/java/lex.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -128,8 +128,8 @@ java_init_lex (finput, encoding)\n   CPC_INITIALIZER_LIST (ctxp) = CPC_STATIC_INITIALIZER_LIST (ctxp) =\n     CPC_INSTANCE_INITIALIZER_LIST (ctxp) = NULL_TREE;\n \n-  memset ((PTR) ctxp->modifier_ctx, 0, sizeof (ctxp->modifier_ctx));\n-  memset ((PTR) current_jcf, 0, sizeof (JCF));\n+  memset (ctxp->modifier_ctx, 0, sizeof (ctxp->modifier_ctx));\n+  memset (current_jcf, 0, sizeof (JCF));\n   ctxp->current_parsed_class = NULL;\n   ctxp->package = NULL_TREE;\n #endif\n@@ -196,12 +196,11 @@ java_allocate_new_line ()\n \n   if (!ctxp->c_line)\n     {\n-      ctxp->c_line = (struct java_line *)xmalloc (sizeof (struct java_line));\n+      ctxp->c_line = xmalloc (sizeof (struct java_line));\n       ctxp->c_line->max = JAVA_LINE_MAX;\n-      ctxp->c_line->line = (unicode_t *)xmalloc \n-\t(sizeof (unicode_t)*ctxp->c_line->max);\n+      ctxp->c_line->line = xmalloc (sizeof (unicode_t)*ctxp->c_line->max);\n       ctxp->c_line->unicode_escape_p = \n-\t  (char *)xmalloc (sizeof (char)*ctxp->c_line->max);\n+\txmalloc (sizeof (char)*ctxp->c_line->max);\n       ctxp->c_line->white_space_only = 0;\n     }\n \n@@ -226,7 +225,7 @@ java_new_lexer (finput, encoding)\n      FILE *finput;\n      const char *encoding;\n {\n-  java_lexer *lex = (java_lexer *) xmalloc (sizeof (java_lexer));\n+  java_lexer *lex = xmalloc (sizeof (java_lexer));\n   int enc_error = 0;\n \n   lex->finput = finput;\n@@ -522,9 +521,9 @@ java_store_unicode (l, c, unicode_escape_p)\n   if (l->size == l->max)\n     {\n       l->max += JAVA_LINE_MAX;\n-      l->line = (unicode_t *) xrealloc (l->line, sizeof (unicode_t)*l->max);\n-      l->unicode_escape_p = (char *) xrealloc (l->unicode_escape_p, \n-\t\t\t\t\t       sizeof (char)*l->max);\n+      l->line = xrealloc (l->line, sizeof (unicode_t)*l->max);\n+      l->unicode_escape_p = xrealloc (l->unicode_escape_p, \n+\t\t\t\t      sizeof (char)*l->max);\n     }\n   l->line [l->size] = c;\n   l->unicode_escape_p [l->size++] = unicode_escape_p;"}, {"sha": "250e479b5fc323351577da6bca68a060af165320", "filename": "gcc/java/verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92cb0c3d32169727f3b3a0543bda241663d1244/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=a92cb0c3d32169727f3b3a0543bda241663d1244", "patch": "@@ -449,7 +449,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \n   /* We read the exception handlers in order of increasing start PC.\n      To do this we first read and sort the start PCs.  */\n-  starts = (struct pc_index *) xmalloc (eh_count * sizeof (struct pc_index));\n+  starts = xmalloc (eh_count * sizeof (struct pc_index));\n   for (i = 0; i < eh_count; ++i)\n     {\n       starts[i].start_pc = GET_u2 (jcf->read_ptr + 8 * i);"}]}