{"sha": "4754708156e80c291f4e3dad16db906ecc07ce8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1NDcwODE1NmU4MGMyOTFmNGUzZGFkMTZkYjkwNmVjYzA3Y2U4ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-04T21:34:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-04T21:34:42Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r684", "tree": {"sha": "87153ad251ea789f8661eaeef95035b13f6737b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87153ad251ea789f8661eaeef95035b13f6737b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4754708156e80c291f4e3dad16db906ecc07ce8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4754708156e80c291f4e3dad16db906ecc07ce8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4754708156e80c291f4e3dad16db906ecc07ce8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4754708156e80c291f4e3dad16db906ecc07ce8d/comments", "author": null, "committer": null, "parents": [{"sha": "6e9a74dd133a5b3e1365aa1a19d1da1de52b0084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9a74dd133a5b3e1365aa1a19d1da1de52b0084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9a74dd133a5b3e1365aa1a19d1da1de52b0084"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "b7e76bbfa8fd9f5fe88d439ad354578c314951d0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 61, "deletions": 30, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4754708156e80c291f4e3dad16db906ecc07ce8d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4754708156e80c291f4e3dad16db906ecc07ce8d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4754708156e80c291f4e3dad16db906ecc07ce8d", "patch": "@@ -177,6 +177,11 @@ EXTRA_PARTS =\n # compiler proper (cc1, cc1obj, cc1plus).\n EXTRA_OBJS =\n \n+# Set this to `ld' to enable use of collect2.\n+# USE_COLLECT2 =\n+# It is convenient for configure to add the assignment at the beginning,\n+# so don't override it here.\n+\n # List of extra C and assembler files to add to libgcc1.a.\n # Assembler files should have names ending in `.asm'.\n LIB1FUNCS_EXTRA = \n@@ -202,7 +207,7 @@ GCC_PASSES=gcc cc1 cpp $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use gcc\n # to link anything.\n-GCC_PARTS=$(GCC_PASSES) libgcc.a $(EXTRA_PROGRAMS) $(EXTRA_PARTS)\n+GCC_PARTS=$(GCC_PASSES) libgcc.a $(EXTRA_PROGRAMS) $(USE_COLLECT2) $(EXTRA_PARTS)\n \n # Change this to empty to prevent installing limits.h.\n # Actually, this currently has no effect,\n@@ -328,12 +333,13 @@ CPLUS_OBJS = cp-parse.o cp-decl.o cp-decl2.o \\\n # Language-independent object files.\n OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n  function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o \\\n- rtl.o print-rtl.o rtlanal.o dbxout.o sdbout.o dwarfout.o emit-rtl.o \\\n+ rtl.o print-rtl.o rtlanal.o emit-rtl.o \\\n+ dbxout.o sdbout.o dwarfout.o xcoffout.o \\\n  integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \\\n  regclass.o local-alloc.o global-alloc.o reload.o reload1.o caller-save.o \\\n  insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \\\n  insn-recog.o insn-extract.o insn-output.o insn-emit.o \\\n- insn-attrtab.o aux-output.o xcoffout.o $(EXTRA_OBJS)\n+ insn-attrtab.o aux-output.o getpwd.o $(EXTRA_OBJS)\n \n # GEN files are listed separately, so they can be built before doing parallel\n #  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load\n@@ -349,8 +355,8 @@ STAGESTUFF = *.o insn-flags.h insn-config.h insn-codes.h \\\n  stamp-attr stamp-attrtab \\\n  genemit genoutput genrecog genextract genflags gencodes genconfig genpeep \\\n  genattrtab genattr \\\n- $(GCC_PASSES) $(EXTRA_PARTS) gcc-cross cccp cc1plus cc1obj enquire \\\n- protoize unprotoize specs collect2\n+ $(GCC_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross cccp \\\n+ cc1plus cc1obj enquire protoize unprotoize specs collect2\n \n # Members of libgcc1.a.\n LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n@@ -392,7 +398,7 @@ CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n # Avoid a lot of time thinking about remaking Makefile.in and *.def.\n .SUFFIXES: .in .def\n \n-Makefile: $(srcdir)/Makefile.in $(srcdir)/configure \\\n+Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n    $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)\n \tsh config.status\n \n@@ -407,7 +413,7 @@ for-bootstrap: start.encap libgcc.a\n rest.encap: libgcc.a float.h  $(EXTRA_PARTS)\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n-native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS)\n+native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n C c: cc1\n@@ -675,10 +681,21 @@ cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n \n+# To make a configuration always use collect2, set USE_COLLECT2 to ld.\n+ld: collect2\n+\trm -f ld\n+\tln collect2 ld\n+\n collect2 : collect2.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o collect2 collect2.o version.o $(LIBS)\n \n collect2.o : collect2.c $(CONFIG_H) gstab.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+  -DSTANDARD_STARTFILE_PREFIX=\\\"$(libdir)/\\\" \\\n+  -DSTANDARD_BIN_PREFIX=\\\"$(bindir)/\\\" \\\n+  -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc-lib/\\\" \\\n+  -DDEFAULT_TARGET_MACHINE=\\\"$(target)\\\" \\\n+  -c `echo $(srcdir)/collect2.c | sed 's,^\\./,,'`\n \n # Objectionable C language specific files.\n \n@@ -714,15 +731,17 @@ print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) function.h\n fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h \n toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h input.h \\\n-   insn-attr.h xcoff.h\n+   insn-attr.h xcoffout.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+  $(MAYBE_USE_COLLECT2) -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n \n rtl.o : rtl.c $(CONFIG_H) $(RTL_H)\n \n print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)\n \n varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h \\\n-   insn-codes.h expr.h hard-reg-set.h regs.h xcoff.h\n+   insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h\n function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n    recog.h output.h\n@@ -739,12 +758,12 @@ explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \\\n optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h recog.h\n dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h \\\n-   insn-config.h reload.h gstab.h xcoff.h\n+   insn-config.h reload.h gstab.h xcoffout.h\n sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h flags.h \\\n    insn-config.h reload.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h \\\n    insn-config.h reload.h output.h\n-xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoff.h flags.h\n+xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) flags.h gvarargs.h function.h  \\\n    regs.h insn-config.h insn-codes.h real.h expr.h\n getpwd.o : getpwd.c $(CONFIG_H)\n@@ -788,7 +807,7 @@ sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n final.o : final.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h regs.h \\\n    recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n-   hard-reg-set.h insn-codes.h gstab.h xcoff.h\n+   hard-reg-set.h insn-codes.h gstab.h xcoffout.h\n recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n    regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n    insn-flags.h insn-codes.h real.h\n@@ -808,6 +827,7 @@ alloca.o:\talloca.c\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS) \\\n \t  `echo $(srcdir)/alloca.c | sed 's,^\\./,,'`\n \t$(ALLOCA_FINISH)\n+\t-rm alloca.s\n \f\n # Generate header and source files from the machine description, \n # and compile them.\n@@ -1090,37 +1110,38 @@ unprotoize.1:\t$(srcdir)/proto-man ./cpp\n \t\t\t| awk 'NF > 0 {print}' > tmp-unproto.1\n \tmv tmp-unproto.1 unprotoize.1\n \n-SYSCALLS.c : $(srcdir)/sys-types.h $(srcdir)/sys-protos.h\n-\tcat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h >$@\n-\n # This info describes the target machine, so compile with GCC just built.\n-SYSCALLS.c.X:\tSYSCALLS.c $(GCC_PASSES)\n+SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)\n+\t-rm -f SYSCALLS.c\n+\tcat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h > SYSCALLS.c\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -fgen-aux-info -S -o /dev/null SYSCALLS.c\n+\t  -aux-info $@ -S -o /dev/null SYSCALLS.c\n+\t-rm -f SYSCALLS.c\n \f\n # Remake the info files.\n \n-doc: $(srcdir)/cpp.info $(srcdir)/gplus.info $(srcdir)/gcc.info\n+doc: $(srcdir)/cpp.info $(srcdir)/gcc.info\n \n $(srcdir)/cpp.info: $(srcdir)/cpp.texi\n \tmakeinfo `echo $(srcdir)/cpp.texi | sed 's,^\\./,,'`\n \n-$(srcdir)/gplus.info: $(srcdir)/gplus.texi\n-\tmakeinfo `echo $(srcdir)/gplus.texi | sed 's,^\\./,,'`\n+#$(srcdir)/gplus.info: $(srcdir)/gplus.texi\n+#\tmakeinfo `echo $(srcdir)/gplus.texi | sed 's,^\\./,,'`\n \n $(srcdir)/gcc.info: $(srcdir)/gcc.texi\n \tmakeinfo `echo $(srcdir)/gcc.texi | sed 's,^\\./,,'`\n \f\n # Deletion of files made during compilation.\n # There are four levels of this:\n-#   `mostlyclean', `clean', `cleanconfig' and `realclean'.\n+#   `mostlyclean', `clean', `distclean' and `realclean'.\n # `mostlyclean' is useful while working on a particular type of machine.\n # It deletes most, but not all, of the files made by compilation.\n # It does not delete libgcc.a or its parts, so it won't have to be recompiled.\n # `clean' deletes everything made by running `make all'.\n-# `cleanconfig' also deletes the files made by config.\n+# `distclean' also deletes the files made by config.\n # `realclean' also deletes everything that could be regenerated automatically.\n \n+\n mostlyclean:\n \t-rm -f $(STAGESTUFF)\n # Delete the temporary source copies for cross compilation.\n@@ -1139,28 +1160,31 @@ mostlyclean:\n \t-rm -f *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack\n # Delete some files made during installation.\n \t-rm -f specs float.h enquire SYSCALLS.c SYSCALLS.c.X\n-\t-rm -f collect collect2 ld mips-tfile mips-tdump\n+\t-rm -f collect collect2 ld mips-tfile mips-tdump alloca.s\n # Delete unwanted output files from TeX.\n \t-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg\n+# Delete sorted indices we don't actually use.\n+\t-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns\n # Delete core dumps.\n \t-rm -f core\n \n-# delete all files made by compilation.\n+# Delete all files made by compilation\n+# that don't exist in the distribution.\n clean: mostlyclean\n \t-rm -f libgcc.a libgcc1.a libgcc2.a libgcc2.ready\n-\t-rm -fr stage1 stage2 stage3 stage4\n \n-# This is used to get rid of everything found in the source dir\n-# that shouldn't be in the distribution.\n+# Delete all files that users would normally create\n+# while building and installing GCC.\n distclean: clean\n \t-rm -f tm.h aux-output.c config.h md config.status tconfig.h\n \t-rm -f Makefile *.dvi *.oaux\n+\t-rm -fr stage1 stage2 stage3 stage4\n \n # Delete anything likely to be found in the source directory\n # that shouldn't be in the distribution.\n extraclean: distclean\n-\t-rm -rf =* #* *~ config/#* config/*~\n-\t-rm -f *.dvi *.oaux patch*\n+\t-rm -rf =* #* *~* config/=* config/#* config/*~*\n+\t-rm -f *.dvi *.oaux patch* config/patch* *.orig *.rej *.d *.Z *.tar\n \t-rm -f *.s *.s[0-9] *.i\n \n # Get rid of every file that's generated from some other file.\n@@ -1250,6 +1274,7 @@ install-float-h-cross:\n install-dir:\n \tif [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; fi\n \tif [ -d $(libdir)/gcc-lib ] ; then true ; else mkdir $(libdir)/gcc-lib ; fi\n+\tif [ -d $(libdir)/gcc-lib/include ] ; then true ; else mkdir $(libdir)/gcc-lib/include ; fi\n \tif [ -d $(libdir)/gcc-lib/$(target) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target) ; fi\n \tif [ -d $(libdir)/gcc-lib/$(target)/$(version) ] ; then true ; else mkdir $(libdir)/gcc-lib/$(target)/$(version) ; fi\n \tif [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; fi\n@@ -1269,7 +1294,7 @@ install-common: native install-dir\n \t  else true; \\\n \t  fi; \\\n \tdone\n-\tfor file in $(EXTRA_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) ..; do \\\n+\tfor file in $(EXTRA_PASSES) $(EXTRA_PARTS) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \\\n \t  if [ x\"$$file\" != x.. ]; then \\\n \t    rm -f $(libsubdir)/$$file; \\\n \t    $(INSTALL_PROGRAM) $$file $(libsubdir)/$$file; \\\n@@ -1480,6 +1505,12 @@ gcc.xtar:\n \ttar chf gcc.xtar gcc-$(version)\n # Get rid of the temporary directory.\n \trm -rf gcc-$(version)\n+# Update the version number in README\n+\tawk '$$1 \" \" $$2 \" \" $$3 == \"This directory contains\" \\\n+\t\t{ $$6 = version; print $$0 } \\\n+\t     $$1 \" \" $$2 \" \" $$3 != \"This directory contains\"' \\\n+\t  version=$(version) README > tmp.README\n+\tmv tmp.README README\n \n # do make -f ../gcc/Makefile maketest DIR=../gcc\n # in the intended test directory to make it a suitable test directory."}]}