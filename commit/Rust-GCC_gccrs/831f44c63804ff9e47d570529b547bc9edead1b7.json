{"sha": "831f44c63804ff9e47d570529b547bc9edead1b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxZjQ0YzYzODA0ZmY5ZTQ3ZDU3MDUyOWI1NDdiYzllZGVhZDFiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-14T08:14:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-14T08:14:54Z"}, "message": "gigi.h: Reorder declarations and tweak comments.\n\n\t* gcc-interface/gigi.h: Reorder declarations and tweak comments.\n\t(gigi): Adjust ATTRIBUTE_UNUSED markers.\n\t* gcc-interface/gadaint.h: New file.\n\t* gcc-interface/trans.c: Include it in lieu of adaint.h.  Reorder.\n\t(__gnat_to_canonical_file_spec): Remove declaration.\n\t(number_names): Delete.\n\t(number_files): Likewise.\n\t(gigi): Adjust.\n\t* gcc-interface/Make-lang.in (ada/trans.o): Adjust dependencies to\n\tabove change.\n\nFrom-SVN: r158296", "tree": {"sha": "7672ff83aceea65a73de3d64f2428443ed25f7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7672ff83aceea65a73de3d64f2428443ed25f7a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/831f44c63804ff9e47d570529b547bc9edead1b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831f44c63804ff9e47d570529b547bc9edead1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831f44c63804ff9e47d570529b547bc9edead1b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831f44c63804ff9e47d570529b547bc9edead1b7/comments", "author": null, "committer": null, "parents": [{"sha": "f08863f97b94e6429ee8923bf6d2936aef81be4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08863f97b94e6429ee8923bf6d2936aef81be4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08863f97b94e6429ee8923bf6d2936aef81be4b"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "1ec190e6b84c13d62680cb011ab28dbfba705190", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=831f44c63804ff9e47d570529b547bc9edead1b7", "patch": "@@ -1,3 +1,16 @@\n+2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h: Reorder declarations and tweak comments.\n+\t(gigi): Adjust ATTRIBUTE_UNUSED markers.\n+\t* gcc-interface/gadaint.h: New file.\n+\t* gcc-interface/trans.c: Include it in lieu of adaint.h.  Reorder.\n+\t(__gnat_to_canonical_file_spec): Remove declaration.\n+\t(number_names): Delete.\n+\t(number_files): Likewise.\n+\t(gigi): Adjust.\n+\t* gcc-interface/Make-lang.in (ada/trans.o): Adjust dependencies to\n+\tabove change.\n+\n 2010-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Class_Wide_Type>: Fix"}, {"sha": "25c0964a1f8e1b1153cb240b3d948f0921a53bdb", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=831f44c63804ff9e47d570529b547bc9edead1b7", "patch": "@@ -1254,7 +1254,8 @@ ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(GIMPLE_H) ada/gcc-interface/ada.h ada/adadecode.h ada/types.h \\\n    ada/atree.h ada/elists.h ada/namet.h ada/nlists.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/urealp.h ada/fe.h ada/sinfo.h ada/einfo.h \\\n-   $(ADA_TREE_H) ada/gcc-interface/gigi.h gt-ada-trans.h\n+   ada/gcc-interface/gadaint.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\\n+   gt-ada-trans.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/utils.o : ada/gcc-interface/utils.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "57503f069fed61cbc91ec050c025b27da2b2c27d", "filename": "gcc/ada/gcc-interface/gadaint.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Fgadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Fgadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgadaint.h?ref=831f44c63804ff9e47d570529b547bc9edead1b7", "patch": "@@ -0,0 +1,35 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                              G A D A I N T                               *\n+ *                                                                          *\n+ *                              C Header File                               *\n+ *                                                                          *\n+ *             Copyright (C) 2010, Free Software Foundation, Inc.           *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *\n+ * for  more details.  You should have  received  a copy of the GNU General *\n+ * Public License  distributed  with GNAT;  see file  COPYING3.  If not see *\n+ * <http://www.gnu.org/licenses/>.                                          *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/* This file contains the declarations of adaint.c material used in gigi.\n+   It should be used in lieu of adaint.h in gigi because the latter drags\n+   a lot of stuff on Windows and this pollutes the namespace of macros.  */\n+\n+#ifndef GCC_ADAINT_H\n+#define GCC_ADAINT_H\n+\n+extern char *__gnat_to_canonical_file_spec (char *);\n+\n+#endif /* GCC_ADAINT_H */"}, {"sha": "6b7790b98e718f223e32f2879ae4e0e669ff2f8b", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=831f44c63804ff9e47d570529b547bc9edead1b7", "patch": "@@ -168,12 +168,18 @@ extern tree create_concat_name (Entity_Id gnat_entity, const char *suffix);\n    the name followed by \"___\" and the specified suffix.  */\n extern tree concat_name (tree gnu_name, const char *suffix);\n \n-/* If true, then gigi is being called on an analyzed but unexpanded tree, and\n-   the only purpose of the call is to properly annotate types with\n-   representation information.  */\n+/* Highest number in the front-end node table.  */\n+extern int max_gnat_nodes;\n+\n+/* Current node being treated, in case abort called.  */\n+extern Node_Id error_gnat_node;\n+\n+/* True when gigi is being called on an analyzed but unexpanded\n+   tree, and the only purpose of the call is to properly annotate\n+   types with representation information.  */\n extern bool type_annotate_only;\n \n-/* Current file name without path */\n+/* Current file name without path.  */\n extern const char *ref_filename;\n \n /* This structure must be kept synchronized with Call_Back_End.  */\n@@ -184,11 +190,9 @@ struct File_Info_Type\n };\n \n /* This is the main program of the back-end.  It sets up all the table\n-   structures and then generates code.\n-\n-   ??? Needs parameter descriptions  */\n-\n-extern void gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n+   structures and then generates code.  */\n+extern void gigi (Node_Id gnat_root, int max_gnat_node,\n+                  int number_name ATTRIBUTE_UNUSED,\n                   struct Node *nodes_ptr, Node_Id *next_node_ptr,\n                   Node_Id *prev_node_ptr, struct Elist_Header *elists_ptr,\n                   struct Elmt_Item *elmts_ptr,\n@@ -257,13 +261,6 @@ extern void post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent,\n    if none.  */\n extern tree get_exception_label (char kind);\n \n-/* Current node being treated, in case gigi_abort or Check_Elaboration_Code\n-   called.  */\n-extern Node_Id error_gnat_node;\n-\n-/* Highest number in the front-end node table.  */\n-extern int max_gnat_nodes;\n-\n /* If nonzero, pretend we are allocating at global level.  */\n extern int force_global;\n "}, {"sha": "ec2b8ca2cb691e4605574c1fcb317376d8d824bc", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/831f44c63804ff9e47d570529b547bc9edead1b7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=831f44c63804ff9e47d570529b547bc9edead1b7", "patch": "@@ -49,6 +49,7 @@\n #include \"fe.h\"\n #include \"sinfo.h\"\n #include \"einfo.h\"\n+#include \"gadaint.h\"\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n@@ -75,11 +76,7 @@\n #endif\n #endif\n \n-extern char *__gnat_to_canonical_file_spec (char *);\n-\n-int max_gnat_nodes;\n-int number_names;\n-int number_files;\n+/* Pointers to front-end tables accessed through macros.  */\n struct Node *Nodes_Ptr;\n Node_Id *Next_Node_Ptr;\n Node_Id *Prev_Node_Ptr;\n@@ -89,14 +86,20 @@ struct String_Entry *Strings_Ptr;\n Char_Code *String_Chars_Ptr;\n struct List_Header *List_Headers_Ptr;\n \n-/* Current filename without path.  */\n-const char *ref_filename;\n+/* Highest number in the front-end node table.  */\n+int max_gnat_nodes;\n+\n+/* Current node being treated, in case abort called.  */\n+Node_Id error_gnat_node;\n \n /* True when gigi is being called on an analyzed but unexpanded\n    tree, and the only purpose of the call is to properly annotate\n    types with representation information.  */\n bool type_annotate_only;\n \n+/* Current filename without path.  */\n+const char *ref_filename;\n+\n /* When not optimizing, we cache the 'First, 'Last and 'Length attributes\n    of unconstrained array IN parameters to avoid emitting a great deal of\n    redundant instructions to recompute them each time.  */\n@@ -183,9 +186,6 @@ static GTY(()) tree gnu_program_error_label_stack;\n /* Map GNAT tree codes to GCC tree codes for simple expressions.  */\n static enum tree_code gnu_codes[Number_Node_Kinds];\n \n-/* Current node being treated, in case abort called.  */\n-Node_Id error_gnat_node;\n-\n static void init_code_table (void);\n static void Compilation_Unit_to_gnu (Node_Id);\n static void record_code_position (Node_Id);\n@@ -226,7 +226,7 @@ static const char *decode_name (const char *) ATTRIBUTE_UNUSED;\n    structures and then generates code.  */\n \n void\n-gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n+gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       struct Node *nodes_ptr, Node_Id *next_node_ptr, Node_Id *prev_node_ptr,\n       struct Elist_Header *elists_ptr, struct Elmt_Item *elmts_ptr,\n       struct String_Entry *strings_ptr, Char_Code *string_chars_ptr,\n@@ -242,8 +242,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   int i;\n \n   max_gnat_nodes = max_gnat_node;\n-  number_names = number_name;\n-  number_files = number_file;\n+\n   Nodes_Ptr = nodes_ptr;\n   Next_Node_Ptr = next_node_ptr;\n   Prev_Node_Ptr = prev_node_ptr;\n@@ -262,7 +261,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   t = create_concat_name (Defining_Entity (Unit (gnat_root)), NULL);\n   first_global_object_name = ggc_strdup (IDENTIFIER_POINTER (t));\n \n-  for (i = 0; i < number_files; i++)\n+  for (i = 0; i < number_file; i++)\n     {\n       /* Use the identifier table to make a permanent copy of the filename as\n \t the name table gets reallocated after Gigi returns but before all the"}]}