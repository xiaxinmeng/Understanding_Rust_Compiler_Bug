{"sha": "d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1M2E2OTViOTE3ZDMyNDBmY2Y4Y2E1ZWE5ZTA5YWQ4ZGQ4YTVmMw==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2017-01-23T11:19:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:19:56Z"}, "message": "exp_spark.adb (Expand_SPARK_Attribute_Reference): For attributes which return Universal_Integer...\n\n2017-01-23  Claire Dross  <dross@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Attribute_Reference): For attributes\n\twhich return Universal_Integer, force the overflow check flag for\n\tLength and Range_Length for types as big as Long_Long_Integer.\n\nFrom-SVN: r244777", "tree": {"sha": "db41c8e1c5a062bf3dd5dd48a8dbfcba6f173090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db41c8e1c5a062bf3dd5dd48a8dbfcba6f173090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d67bea9215e3d0ca6fb9dbd55124907a395f746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d67bea9215e3d0ca6fb9dbd55124907a395f746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d67bea9215e3d0ca6fb9dbd55124907a395f746"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "cc26c9f3793db8fa8fa982b6e60665f8902198e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "patch": "@@ -1,3 +1,9 @@\n+2017-01-23  Claire Dross  <dross@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Attribute_Reference): For attributes\n+\twhich return Universal_Integer, force the overflow check flag for\n+\tLength and Range_Length for types as big as Long_Long_Integer.\n+\n 2017-01-23  Claire Dross  <dross@adacore.com>\n \n \t* exp_spark.adb (Expand_SPARK_Attribute_Reference):  For"}, {"sha": "e93f71dad055c2fe0e1d28335cb6edf94d7c0a99", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "patch": "@@ -38,6 +38,9 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Tbuild;   use Tbuild;\n+with Uintp; use Uintp;\n+with Sem_Eval; use Sem_Eval;\n+with Stand; use Stand;\n \n package body Exp_SPARK is\n \n@@ -171,7 +174,54 @@ package body Exp_SPARK is\n         or else Attr_Id = Attribute_Aft\n         or else Attr_Id = Attribute_Max_Alignment_For_Allocation\n       then\n-         Apply_Universal_Integer_Attribute_Checks (N);\n+\n+         --  If the expected type is Long_Long_Integer, there will be no check\n+         --  flag as the compiler assumes attributes always fit in this type.\n+         --  Since in SPARK_Mode we do not take Storage_Error into account, we\n+         --  cannot make this assumption and need to produce a check.\n+         --  ??? It should be enough to add this check for attributes 'Length\n+         --  and 'Range_Length when the type is as big as Long_Long_Integer.\n+\n+         declare\n+            Typ : Entity_Id := Empty;\n+         begin\n+            if Attr_Id = Attribute_Range_Length then\n+               Typ := Etype (Prefix (N));\n+            elsif Attr_Id = Attribute_Length then\n+               Typ := Etype (Prefix (N));\n+\n+               declare\n+                  Indx   : Node_Id;\n+                  J      : Int;\n+               begin\n+                  if Is_Access_Type (Typ) then\n+                     Typ := Designated_Type (Typ);\n+                  end if;\n+\n+                  if No (Expressions (N)) then\n+                     J := 1;\n+                  else\n+                     J := UI_To_Int (Expr_Value (First (Expressions (N))));\n+                  end if;\n+\n+                  Indx := First_Index (Typ);\n+                  while J > 1 loop\n+                     Next_Index (Indx);\n+                     J := J - 1;\n+                  end loop;\n+\n+                  Typ := Etype (Indx);\n+               end;\n+            end if;\n+\n+            Apply_Universal_Integer_Attribute_Checks (N);\n+\n+            if Present (Typ)\n+              and then RM_Size (Typ) = RM_Size (Standard_Long_Long_Integer)\n+            then\n+               Set_Do_Overflow_Check (N);\n+            end if;\n+         end;\n       end if;\n    end Expand_SPARK_Attribute_Reference;\n "}]}