{"sha": "39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllNmE2OTBlYzQyMDg4YmNiNzQ4OGY5YzhlMzIyZWUzYTE5MDdjZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-04-14T15:32:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-04-14T15:32:58Z"}, "message": "re PR libstdc++/60497 (unique_ptr<T> tries to complete its type T even though it's not required to be a complete type)\n\n\tPR libstdc++/60497\n\t* include/std/tuple (get): Qualify calls to prevent ADL.\n\t* testsuite/20_util/tuple/60497.cc: New.\n\nFrom-SVN: r209381", "tree": {"sha": "13d3f808e898b886eca42252ff208b45b7b4bcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d3f808e898b886eca42252ff208b45b7b4bcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e364673d87f7409f9014d25989293f6a80c9508c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e364673d87f7409f9014d25989293f6a80c9508c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e364673d87f7409f9014d25989293f6a80c9508c"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "ef35927cc25421763a2473256c7f9e8f049ea53e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "patch": "@@ -9,6 +9,10 @@\n \t* include/bits/allocator.h (operator==, operator!=): Add exception\n \tspecifications.\n \n+\tPR libstdc++/60497\n+\t* include/std/tuple (get): Qualify calls to prevent ADL.\n+\t* testsuite/20_util/tuple/60497.cc: New.\n+\n 2014-04-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/59434"}, {"sha": "47a10ec75fcca08a2187f33405ca0d7745a2bc2b", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "patch": "@@ -755,14 +755,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(tuple<_Elements...>& __t) noexcept\n-    { return __get_helper<__i>(__t); }\n+    { return std::__get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n     constexpr typename __add_c_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(const tuple<_Elements...>& __t) noexcept\n-    { return __get_helper<__i>(__t); }\n+    { return std::__get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n     constexpr typename __add_r_ref<\n@@ -786,17 +786,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&\n     get(tuple<_Types...>& __t) noexcept\n-    { return __get_helper2<_Tp>(__t); }\n+    { return std::__get_helper2<_Tp>(__t); }\n \n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&&\n     get(tuple<_Types...>&& __t) noexcept\n-    { return std::move(__get_helper2<_Tp>(__t)); }\n+    { return std::move(std::__get_helper2<_Tp>(__t)); }\n \n   template <typename _Tp, typename... _Types>\n     constexpr const _Tp&\n     get(const tuple<_Types...>& __t) noexcept\n-    { return __get_helper2<_Tp>(__t); }\n+    { return std::__get_helper2<_Tp>(__t); }\n #endif\n \n   // This class helps construct the various comparison operations on tuples"}, {"sha": "76d4223165f318a009ce649485a150511c98fd43", "filename": "libstdc++-v3/testsuite/20_util/tuple/60497.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F60497.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e6a690ec42088bcb7488f9c8e322ee3a1907cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F60497.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F60497.cc?ref=39e6a690ec42088bcb7488f9c8e322ee3a1907cd", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/60497\n+\n+#include <tuple>\n+\n+struct A;\n+template<typename T> struct B { T t; };\n+\n+using element_type = B<A>*;\n+using tuple_type = std::tuple<element_type>;\n+\n+tuple_type t;\n+const tuple_type ct;\n+\n+auto a = std::get<0>(t);\n+auto b = std::get<0>(ct);\n+auto c = std::get<element_type>(t);\n+auto d = std::get<element_type>(ct);"}]}