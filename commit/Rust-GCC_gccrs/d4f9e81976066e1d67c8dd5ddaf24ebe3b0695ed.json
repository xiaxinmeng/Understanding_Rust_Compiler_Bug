{"sha": "d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmOWU4MTk3NjA2NmUxZDY3YzhkZDVkZGFmMjRlYmUzYjA2OTVlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-30T10:52:06Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-30T10:52:06Z"}, "message": "aarch64: Tweak movti and movtf patterns\n\nmovti lacked an way of zeroing an FPR, meaning that we'd do:\n\n        mov     x0, 0\n        mov     x1, 0\n        fmov    d0, x0\n        fmov    v0.d[1], x1\n\ninstead of just:\n\n        movi    v0.2d, #0\n\nmovtf had the opposite problem for GPRs: we'd generate:\n\n        movi    v0.2d, #0\n        fmov    x0, d0\n        fmov    x1, v0.d[1]\n\ninstead of just:\n\n        mov     x0, 0\n        mov     x1, 0\n\nAlso, there was an unnecessary earlyclobber on the GPR<-GPR movtf\nalternative (but not the movti one).  The splitter handles overlap\ncorrectly.\n\nThe TF splitter used aarch64_reg_or_imm, but the _imm part only\naccepts integer constants, not floating-point ones.  The patch\nchanges it to nonmemory_operand instead.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_split_128bit_move_p): Add a\n\tfunction comment.  Tighten check for FP moves.\n\t* config/aarch64/aarch64.md (*movti_aarch64): Add a w<-Z alternative.\n\t(*movtf_aarch64): Handle r<-Y like r<-r.  Remove unnecessary\n\tearlyclobber.  Change splitter predicate from aarch64_reg_or_imm\n\tto nonmemory_operand.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/movtf_1.c: New test.\n\t* gcc.target/aarch64/movti_1.c: Likewise.", "tree": {"sha": "8707fbaee9b6f6dba8166470df3b42c3aa1e01b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8707fbaee9b6f6dba8166470df3b42c3aa1e01b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63023fafbbc13545fef67e6b32a55b48a945fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63023fafbbc13545fef67e6b32a55b48a945fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63023fafbbc13545fef67e6b32a55b48a945fcf"}], "stats": {"total": 200, "additions": 190, "deletions": 10}, "files": [{"sha": "9e88438b3c319c4539e7d5dcdc9cc3acd8efab41", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "patch": "@@ -3422,11 +3422,16 @@ aarch64_split_128bit_move (rtx dst, rtx src)\n     }\n }\n \n+/* Return true if we should split a move from 128-bit value SRC\n+   to 128-bit register DEST.  */\n+\n bool\n aarch64_split_128bit_move_p (rtx dst, rtx src)\n {\n-  return (! REG_P (src)\n-\t  || ! (FP_REGNUM_P (REGNO (dst)) && FP_REGNUM_P (REGNO (src))));\n+  if (FP_REGNUM_P (REGNO (dst)))\n+    return REG_P (src) && !FP_REGNUM_P (REGNO (src));\n+  /* All moves to GPRs need to be split.  */\n+  return true;\n }\n \n /* Split a complex SIMD combine.  */"}, {"sha": "78fe7c43a00432861e59f19330dacec234b58875", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "patch": "@@ -1361,13 +1361,14 @@\n \n (define_insn \"*movti_aarch64\"\n   [(set (match_operand:TI 0\n-\t \"nonimmediate_operand\"  \"=   r,w, r,w,r,m,m,w,m\")\n+\t \"nonimmediate_operand\"  \"=   r,w,w, r,w,r,m,m,w,m\")\n \t(match_operand:TI 1\n-\t \"aarch64_movti_operand\" \" rUti,r, w,w,m,r,Z,m,w\"))]\n+\t \"aarch64_movti_operand\" \" rUti,Z,r, w,w,m,r,Z,m,w\"))]\n   \"(register_operand (operands[0], TImode)\n     || aarch64_reg_or_zero (operands[1], TImode))\"\n   \"@\n    #\n+   movi\\\\t%0.2d, #0\n    #\n    #\n    mov\\\\t%0.16b, %1.16b\n@@ -1376,11 +1377,11 @@\n    stp\\\\txzr, xzr, %0\n    ldr\\\\t%q0, %1\n    str\\\\t%q1, %0\"\n-  [(set_attr \"type\" \"multiple,f_mcr,f_mrc,neon_logic_q, \\\n+  [(set_attr \"type\" \"multiple,neon_move,f_mcr,f_mrc,neon_logic_q, \\\n \t\t             load_16,store_16,store_16,\\\n                              load_16,store_16\")\n-   (set_attr \"length\" \"8,8,8,4,4,4,4,4,4\")\n-   (set_attr \"arch\" \"*,*,*,simd,*,*,*,fp,fp\")]\n+   (set_attr \"length\" \"8,4,8,8,4,4,4,4,4,4\")\n+   (set_attr \"arch\" \"*,simd,*,*,simd,*,*,*,fp,fp\")]\n )\n \n ;; Split a TImode register-register or register-immediate move into\n@@ -1511,9 +1512,9 @@\n \n (define_insn \"*movtf_aarch64\"\n   [(set (match_operand:TF 0\n-\t \"nonimmediate_operand\" \"=w,?&r,w ,?r,w,?w,w,m,?r,m ,m\")\n+\t \"nonimmediate_operand\" \"=w,?r ,w ,?r,w,?w,w,m,?r,m ,m\")\n \t(match_operand:TF 1\n-\t \"general_operand\"      \" w,?r, ?r,w ,Y,Y ,m,w,m ,?r,Y\"))]\n+\t \"general_operand\"      \" w,?rY,?r,w ,Y,Y ,m,w,m ,?r,Y\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], TFmode)\n     || aarch64_reg_or_fp_zero (operands[1], TFmode))\"\n   \"@\n@@ -1536,7 +1537,7 @@\n \n (define_split\n    [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t (match_operand:TF 1 \"aarch64_reg_or_imm\" \"\"))]\n+\t (match_operand:TF 1 \"nonmemory_operand\" \"\"))]\n   \"reload_completed && aarch64_split_128bit_move_p (operands[0], operands[1])\"\n   [(const_int 0)]\n   {"}, {"sha": "570de93138934f2d2a4306e131bcd28d781cab91", "filename": "gcc/testsuite/gcc.target/aarch64/movtf_1.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_1.c?ref=d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/*\n+** zero_q:\n+**\tmovi\tv0.2d, #0\n+**\tret\n+*/\n+void\n+zero_q ()\n+{\n+  register _Float128 q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** load_q:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+void\n+load_q (_Float128 *ptr)\n+{\n+  register _Float128 q0 asm (\"q0\");\n+  q0 = *ptr;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** store_q:\n+**\tstr\tq0, \\[x0\\]\n+**\tret\n+*/\n+void\n+store_q (_Float128 *ptr)\n+{\n+  register _Float128 q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  *ptr = q0;\n+}\n+\n+/*\n+** zero_x:\n+** (\n+**\tmov\tx0, #?0\n+**\tmov\tx1, #?0\n+** |\n+**\tmov\tx1, #?0\n+**\tmov\tx0, #?0\n+** )\n+**\tret\n+*/\n+void\n+zero_x ()\n+{\n+  register _Float128 x0 asm (\"x0\");\n+  x0 = 0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}\n+\n+/*\n+** load_x:\n+**\tldp\tx2, x3, \\[x0\\]\n+**\tret\n+*/\n+void\n+load_x (_Float128 *ptr)\n+{\n+  register _Float128 x2 asm (\"x2\");\n+  x2 = *ptr;\n+  asm volatile (\"\" :: \"r\" (x2));\n+}\n+\n+/*\n+** store_x:\n+**\tstp\tx2, x3, \\[x0\\]\n+**\tret\n+*/\n+void\n+store_x (_Float128 *ptr)\n+{\n+  register _Float128 x2 asm (\"x2\");\n+  asm volatile (\"\" : \"=r\" (x2));\n+  *ptr = x2;\n+}"}, {"sha": "160e1acd2814dc54700d09b63e6beaf85c330c39", "filename": "gcc/testsuite/gcc.target/aarch64/movti_1.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_1.c?ref=d4f9e81976066e1d67c8dd5ddaf24ebe3b0695ed", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/*\n+** zero_q:\n+**\tmovi\tv0.2d, #0\n+**\tret\n+*/\n+void\n+zero_q ()\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** load_q:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+void\n+load_q (__int128_t *ptr)\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  q0 = *ptr;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** store_q:\n+**\tstr\tq0, \\[x0\\]\n+**\tret\n+*/\n+void\n+store_q (__int128_t *ptr)\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  *ptr = q0;\n+}\n+\n+/*\n+** zero_x:\n+** (\n+**\tmov\tx0, #?0\n+**\tmov\tx1, #?0\n+** |\n+**\tmov\tx1, #?0\n+**\tmov\tx0, #?0\n+** )\n+**\tret\n+*/\n+void\n+zero_x ()\n+{\n+  register __int128_t x0 asm (\"x0\");\n+  x0 = 0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}\n+\n+/*\n+** load_x:\n+**\tldp\tx2, x3, \\[x0\\]\n+**\tret\n+*/\n+void\n+load_x (__int128_t *ptr)\n+{\n+  register __int128_t x2 asm (\"x2\");\n+  x2 = *ptr;\n+  asm volatile (\"\" :: \"r\" (x2));\n+}\n+\n+/*\n+** store_x:\n+**\tstp\tx2, x3, \\[x0\\]\n+**\tret\n+*/\n+void\n+store_x (__int128_t *ptr)\n+{\n+  register __int128_t x2 asm (\"x2\");\n+  asm volatile (\"\" : \"=r\" (x2));\n+  *ptr = x2;\n+}"}]}