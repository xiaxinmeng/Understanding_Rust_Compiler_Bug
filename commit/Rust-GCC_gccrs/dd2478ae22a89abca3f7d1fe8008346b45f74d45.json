{"sha": "dd2478ae22a89abca3f7d1fe8008346b45f74d45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyNDc4YWUyMmE4OWFiY2EzZjdkMWZlODAwODM0NmI0NWY3NGQ0NQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-09T20:32:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-09T20:32:33Z"}, "message": "(mem_loc_descriptor, case MULT): Add.\n\nFrom-SVN: r13253", "tree": {"sha": "c0073cdc984cee7c96ce40a935914512d044486d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0073cdc984cee7c96ce40a935914512d044486d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd2478ae22a89abca3f7d1fe8008346b45f74d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2478ae22a89abca3f7d1fe8008346b45f74d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2478ae22a89abca3f7d1fe8008346b45f74d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2478ae22a89abca3f7d1fe8008346b45f74d45/comments", "author": null, "committer": null, "parents": [{"sha": "72ec9bf85cf245e96d2dcd870fa428846ec83e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ec9bf85cf245e96d2dcd870fa428846ec83e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ec9bf85cf245e96d2dcd870fa428846ec83e05"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "6ac7d45585372f06f562e117158a144480ab8245", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd2478ae22a89abca3f7d1fe8008346b45f74d45/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd2478ae22a89abca3f7d1fe8008346b45f74d45/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dd2478ae22a89abca3f7d1fe8008346b45f74d45", "patch": "@@ -4999,6 +4999,14 @@ mem_loc_descriptor (rtl)\n \t}\n       break;\n \n+    case MULT:\n+      /* If a pseudo-reg is optimized away, it is possible for it to\n+\t be replaced with a MEM containing a multiply.  */\n+      add_loc_descr (&mem_loc_result, mem_loc_descriptor (XEXP (rtl, 0)));\n+      add_loc_descr (&mem_loc_result, mem_loc_descriptor (XEXP (rtl, 1)));\n+      add_loc_descr (&mem_loc_result, new_loc_descr (DW_OP_mul, 0, 0));\n+      break;\n+\n     case CONST_INT:\n       mem_loc_result = new_loc_descr (DW_OP_constu, INTVAL (rtl), 0);\n       break;"}]}