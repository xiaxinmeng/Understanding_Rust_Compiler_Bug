{"sha": "1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "node_id": "C_kwDOANBUbNoAKDFhMGUzYmJhNGI3MzVmYThlNDQ2M2Q1Mjk1MGQwY2U5YzMwYzE2Yzc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-01T20:05:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-01T20:05:31Z"}, "message": "warn-access: Fix up check_pointer_uses [PR104715]\n\nThe following testcase emits bogus -Wdangling-pointer warnings.\nThe bug is that when it sees that ptr immediate use is a call that\nreturns one of its arguments, it will assume that the return value\nis based on ptr, but that is the case only if ptr is passed to the\nargument that is actually returned (so e.g. for memcpy the first argument,\netc.).  When the builtins guarantee e.g. that the result is based on the\nfirst argument (either ERF_RETURNS_ARG 0 in which case it will always\njust returns the first argument as is, or when it is something like\nstrstr or strpbrk or mempcpy that it returns some pointer based on the\nfirst argument), it means the result is not based on second or following\nargument if any.  The second hunk fixes this.\n\nThe first hunk just removes an unnecessary TREE_CODE check, the code only\npushes SSA_NAMEs into the pointers vector and if it didn't, it uses\n      FOR_EACH_IMM_USE_FAST (use_p, iter, ptr)\na few lines below this, which of course requires that ptr is a SSA_NAME.\nTree checking on SSA_NAME_VERSION will already ensure that if it wasn't\na SSA_NAME, we'd ICE.\n\n2022-03-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/104715\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_pointer_uses): Don't\n\tunnecessarily test if ptr is a SSA_NAME, it has to be.  Only push lhs\n\tof a call if gimple_call_return_arg is equal to ptr, not just when it\n\tis non-NULL.\n\n\t* c-c++-common/Wdangling-pointer-7.c: New test.", "tree": {"sha": "03f123bdb7160873acc9930fdd7724de9ed18973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03f123bdb7160873acc9930fdd7724de9ed18973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1c20df82c9e14478d79fbe1ae9690a36285ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1c20df82c9e14478d79fbe1ae9690a36285ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1c20df82c9e14478d79fbe1ae9690a36285ac1"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "b7cdad517b307d24c0b53cca14377bbd1af67aa3", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "patch": "@@ -4169,8 +4169,7 @@ pass_waccess::check_pointer_uses (gimple *stmt, tree ptr,\n   for (unsigned i = 0; i != pointers.length (); ++i)\n     {\n       tree ptr = pointers[i];\n-      if (TREE_CODE (ptr) == SSA_NAME\n-\t  && !bitmap_set_bit (visited, SSA_NAME_VERSION (ptr)))\n+      if (!bitmap_set_bit (visited, SSA_NAME_VERSION (ptr)))\n \t/* Avoid revisiting the same pointer.  */\n \tcontinue;\n \n@@ -4267,7 +4266,7 @@ pass_waccess::check_pointer_uses (gimple *stmt, tree ptr,\n \n \t  if (gcall *call = dyn_cast <gcall *>(use_stmt))\n \t    {\n-\t      if (gimple_call_return_arg (call))\n+\t      if (gimple_call_return_arg (call) == ptr)\n \t\tif (tree lhs = gimple_call_lhs (call))\n \t\t  if (TREE_CODE (lhs) == SSA_NAME)\n \t\t    pointers.safe_push (lhs);"}, {"sha": "8423d3b01adf1bebac28a8e3259a564f1ae2ac96", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-7.c?ref=1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/104715 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdangling-pointer\" } */\n+\n+char *\n+foo (char *p)\n+{\n+  {\n+    char q[61] = \"012345678901234567890123456789012345678901234567890123456789\";\n+    char *r = q;\n+    p = __builtin_strcat (p, r);\n+  }\n+  return p;\t/* { dg-bogus \"using dangling pointer\" } */\n+}\n+\n+char *\n+bar (char *p)\n+{\n+  {\n+    char q[] = \"0123456789\";\n+    char *r = q;\n+    p = __builtin_strstr (p, r);\n+  }\n+  return p;\t/* { dg-bogus \"using dangling pointer\" } */\n+}\n+\n+char *\n+baz (char *p)\n+{\n+  {\n+    char q[] = \"0123456789\";\n+    char *r = q;\n+    p = __builtin_strpbrk (p, r);\n+  }\n+  return p;\t/* { dg-bogus \"using dangling pointer\" } */\n+}"}]}