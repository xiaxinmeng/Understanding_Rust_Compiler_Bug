{"sha": "1b212aa85f81e6b9374bcf13b1f84742428a2945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyMTJhYTg1ZjgxZTZiOTM3NGJjZjEzYjFmODQ3NDI0MjhhMjk0NQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-01-11T19:06:50Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1993-01-11T19:06:50Z"}, "message": "Cygnus<-->FSF merge.\n\nFrom-SVN: r3191", "tree": {"sha": "d3b2a7560e87e4387f327a939f2c28970fe967bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b2a7560e87e4387f327a939f2c28970fe967bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b212aa85f81e6b9374bcf13b1f84742428a2945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b212aa85f81e6b9374bcf13b1f84742428a2945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b212aa85f81e6b9374bcf13b1f84742428a2945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b212aa85f81e6b9374bcf13b1f84742428a2945/comments", "author": null, "committer": null, "parents": [{"sha": "d09c632362c881c3afd20cd730993e590e06d9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09c632362c881c3afd20cd730993e590e06d9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09c632362c881c3afd20cd730993e590e06d9be"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "f13de28feeb7c07e470aaa7f56b7f1193e10ddf8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b212aa85f81e6b9374bcf13b1f84742428a2945/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b212aa85f81e6b9374bcf13b1f84742428a2945/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1b212aa85f81e6b9374bcf13b1f84742428a2945", "patch": "@@ -738,7 +738,7 @@ c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H)\n \n # C++ language specific files.\n \n-cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h cp-lex.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   `echo $(srcdir)/cp-parse.c | sed 's,^\\./,,'`\n \n@@ -748,31 +748,29 @@ $(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n \tcd $(srcdir); grep '^#define[ \t]*YYEMPTY' cp-parse.c >>cp-parse.h\n \n cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h flags.h\n+   $(srcdir)/cp-parse.h flags.h cp-lex.h\n cp-lex.o : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h $(srcdir)/cp-input.c flags.h\n+   $(srcdir)/cp-parse.h $(srcdir)/cp-input.c flags.h cp-hash.h cp-lex.h\n cp-decl.o : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n   cp-lex.h cp-decl.h stack.h\n cp-decl2.o : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n   cp-lex.h cp-decl.h\n cp-type2.o : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h \\\n-    cp-class.h flags.h\n-cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h cp-class.h \\\n-    flags.h\n-cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n+cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n cp-method.o : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-cvt.o : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-search.o : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n cp-tree.o : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n cp-ptree.o : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)\n cp-gc.o : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n+cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n cp-expr.o : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \\\n   expr.h insn-codes.h\n cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n-cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H)\n+cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H) input.h\n cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld."}]}