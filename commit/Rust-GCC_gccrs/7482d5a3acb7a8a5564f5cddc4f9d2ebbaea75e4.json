{"sha": "7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4MmQ1YTNhY2I3YThhNTU2NGY1Y2RkYzRmOWQyZWJiYWVhNzVlNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-02T15:47:49Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-07T17:38:01Z"}, "message": "c++: ICE with switch and scoped enum bit-fields [PR98043]\n\nIn this testcase we are crashing trying to gimplify a switch, because\nthe types of the switch condition and case constants have different\nTYPE_PRECISIONs.\n\nThis started with my r5-3726 fix: SWITCH_STMT_TYPE is supposed to be the\noriginal type of the switch condition before any conversions, so in the\nC++ FE we need to use unlowered_expr_type to get the unlowered type of\nenum bit-fields.\n\nNormally, the switch type is subject to integral promotions, but here\nwe have a scoped enum type and those don't promote:\n\n  enum class B { A };\n  struct C { B c : 8; };\n\n  switch (x.c) // type B\n    case B::A: // type int, will be converted to B\n\nHere TREE_TYPE is \"signed char\" but SWITCH_STMT_TYPE is \"B\".  When\ngimplifying this in gimplify_switch_expr, the index type is \"B\" and\nwe convert all the case values to \"B\" in preprocess_case_label_vec,\nbut SWITCH_COND is of type \"signed char\": gimple_switch_index should\nbe the (possibly promoted) type, not the original type, so we gimplify\nthe \"x.c\" SWITCH_COND to a SSA_NAME of type \"signed char\".  And then\nwe crash because the precision of the index type doesn't match the\nprecision of the case value type.\n\nI think it makes sense to do the following; at the end of pop_switch\nwe've already issued the switch warnings, and since scoped enums don't\npromote, it should be okay to use the type of SWITCH_STMT_COND.  The\nr5-3726 change was about giving warnings for enum bit-fields anyway.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98043\n\t* decl.c (pop_switch): If SWITCH_STMT_TYPE is a scoped enum type,\n\tset it to the type of SWITCH_STMT_COND.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98043\n\t* g++.dg/cpp0x/enum41.C: New test.", "tree": {"sha": "609461ed358a3da102a18a84eebcd01d2fbd1a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/609461ed358a3da102a18a84eebcd01d2fbd1a94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16a2a458809103d1c382c09c62b09697aac9b935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a2a458809103d1c382c09c62b09697aac9b935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a2a458809103d1c382c09c62b09697aac9b935"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "7da8c65e984381f2b9a71edd909419026b08abe2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "patch": "@@ -3690,17 +3690,17 @@ void\n pop_switch (void)\n {\n   struct cp_switch *cs = switch_stack;\n-  location_t switch_location;\n \n   /* Emit warnings as needed.  */\n-  switch_location = cp_expr_loc_or_input_loc (cs->switch_stmt);\n+  location_t switch_location = cp_expr_loc_or_input_loc (cs->switch_stmt);\n+  tree cond = SWITCH_STMT_COND (cs->switch_stmt);\n   const bool bool_cond_p\n     = (SWITCH_STMT_TYPE (cs->switch_stmt)\n        && TREE_CODE (SWITCH_STMT_TYPE (cs->switch_stmt)) == BOOLEAN_TYPE);\n   if (!processing_template_decl)\n     c_do_switch_warnings (cs->cases, switch_location,\n-\t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt),\n-\t\t\t  SWITCH_STMT_COND (cs->switch_stmt), bool_cond_p);\n+\t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt), cond,\n+\t\t\t  bool_cond_p);\n \n   /* For the benefit of block_may_fallthru remember if the switch body\n      case labels cover all possible values and if there are break; stmts.  */\n@@ -3711,6 +3711,15 @@ pop_switch (void)\n     SWITCH_STMT_ALL_CASES_P (cs->switch_stmt) = 1;\n   if (!cs->break_stmt_seen_p)\n     SWITCH_STMT_NO_BREAK_P (cs->switch_stmt) = 1;\n+  /* Now that we're done with the switch warnings, set the switch type\n+     to the type of the condition if the index type was of scoped enum type.\n+     (Such types don't participate in the integer promotions.)  We do this\n+     because of bit-fields whose declared type is a scoped enum type:\n+     gimplification will use the lowered index type, but convert the\n+     case values to SWITCH_STMT_TYPE, which would have been the declared type\n+     and verify_gimple_switch doesn't accept that.  */\n+  if (is_bitfield_expr_with_lowered_type (cond))\n+    SWITCH_STMT_TYPE (cs->switch_stmt) = TREE_TYPE (cond);\n   gcc_assert (!cs->in_loop_body_p);\n   splay_tree_delete (cs->cases);\n   switch_stack = switch_stack->next;"}, {"sha": "5f6ef13289bbfde440a75613d844742d31c92949", "filename": "gcc/testsuite/g++.dg/cpp0x/enum41.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum41.C?ref=7482d5a3acb7a8a5564f5cddc4f9d2ebbaea75e4", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/98043\n+// { dg-do compile { target c++11 } }\n+\n+enum class B { A };\n+struct C { B c : 8; };\n+\n+bool\n+foo (C x)\n+{\n+  switch (x.c)\n+    {\n+    case B::A:\n+      return false;\n+    default:\n+      return true;\n+    }\n+}\n+\n+enum E { X };\n+struct D { E c : 7; };\n+\n+bool\n+bar (D x)\n+{\n+  switch (x.c)\n+    {\n+    case E::X:\n+      return false;\n+    default:\n+      return true;\n+    }\n+}"}]}