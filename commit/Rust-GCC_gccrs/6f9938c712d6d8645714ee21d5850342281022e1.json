{"sha": "6f9938c712d6d8645714ee21d5850342281022e1", "node_id": "C_kwDOANBUbNoAKDZmOTkzOGM3MTJkNmQ4NjQ1NzE0ZWUyMWQ1ODUwMzQyMjgxMDIyZTE", "commit": {"author": {"name": "vincent", "email": "jfan30@u.rochester.edu", "date": "2023-03-07T20:32:04Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-09T13:54:25Z"}, "message": "hir: add a helper function for visit\n\nThis commit adds a helper function for TypeCheckPattern::visit\n(HIR::RangePattern &pattern) to remove redundancy\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-pattern.cc\n\t(TypeCheckPattern::visit): rewrite part code to helper function\n\t(TypeCheckPattern::typecheck_range_pattern_bound): helper function\n\t* typecheck/rust-hir-type-check-pattern.h\n\t(TypeCheckPattern::typecheck_range_pattern_bound):\n\tchange the parameter of the function\n\nSigned-off-by: Jiakun Fan <jfan30@u.rochester.edu>", "tree": {"sha": "bd8a4c71087589ca4fe866824384e00437b5f07c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8a4c71087589ca4fe866824384e00437b5f07c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9938c712d6d8645714ee21d5850342281022e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9938c712d6d8645714ee21d5850342281022e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9938c712d6d8645714ee21d5850342281022e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9938c712d6d8645714ee21d5850342281022e1/comments", "author": {"login": "chosen-ox", "id": 81693205, "node_id": "MDQ6VXNlcjgxNjkzMjA1", "avatar_url": "https://avatars.githubusercontent.com/u/81693205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chosen-ox", "html_url": "https://github.com/chosen-ox", "followers_url": "https://api.github.com/users/chosen-ox/followers", "following_url": "https://api.github.com/users/chosen-ox/following{/other_user}", "gists_url": "https://api.github.com/users/chosen-ox/gists{/gist_id}", "starred_url": "https://api.github.com/users/chosen-ox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chosen-ox/subscriptions", "organizations_url": "https://api.github.com/users/chosen-ox/orgs", "repos_url": "https://api.github.com/users/chosen-ox/repos", "events_url": "https://api.github.com/users/chosen-ox/events{/privacy}", "received_events_url": "https://api.github.com/users/chosen-ox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd4b19068c8ab8b8324fd3b8f20c4c3cb5cd277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd4b19068c8ab8b8324fd3b8f20c4c3cb5cd277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd4b19068c8ab8b8324fd3b8f20c4c3cb5cd277"}], "stats": {"total": 117, "additions": 47, "deletions": 70}, "files": [{"sha": "cd0dbef40fe2c786817a0fa45dbbd645254f23c1", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 44, "deletions": 66, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9938c712d6d8645714ee21d5850342281022e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9938c712d6d8645714ee21d5850342281022e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=6f9938c712d6d8645714ee21d5850342281022e1", "patch": "@@ -321,73 +321,13 @@ TypeCheckPattern::visit (HIR::RangePattern &pattern)\n   // Resolve the upper and lower bounds, and ensure they are compatible types\n   TyTy::BaseType *upper = nullptr, *lower = nullptr;\n \n-  // TODO: It would be nice to factor this out into a helper since the logic for\n-  // both bounds is exactly the same...\n-  switch (pattern.get_upper_bound ()->get_bound_type ())\n-    {\n-      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n-\tHIR::RangePatternBoundLiteral &ref\n-\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n-\t    pattern.get_upper_bound ().get ());\n-\n-\tHIR::Literal lit = ref.get_literal ();\n-\n-\tupper = resolve_literal (pattern.get_pattern_mappings (), lit,\n-\t\t\t\t pattern.get_locus ());\n-      }\n-      break;\n-\n-      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n-\tHIR::RangePatternBoundPath &ref\n-\t  = *static_cast<HIR::RangePatternBoundPath *> (\n-\t    pattern.get_upper_bound ().get ());\n-\n-\tupper = TypeCheckExpr::Resolve (&ref.get_path ());\n-      }\n-      break;\n-\n-      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n-\tHIR::RangePatternBoundQualPath &ref\n-\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n-\t    pattern.get_upper_bound ().get ());\n-\n-\tupper = TypeCheckExpr::Resolve (&ref.get_qualified_path ());\n-      }\n-      break;\n-    }\n-\n-  switch (pattern.get_lower_bound ()->get_bound_type ())\n-    {\n-      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n-\tHIR::RangePatternBoundLiteral &ref\n-\t  = *static_cast<HIR::RangePatternBoundLiteral *> (\n-\t    pattern.get_lower_bound ().get ());\n-\n-\tHIR::Literal lit = ref.get_literal ();\n-\n-\tlower = resolve_literal (pattern.get_pattern_mappings (), lit,\n-\t\t\t\t pattern.get_locus ());\n-      }\n-      break;\n-\n-      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n-\tHIR::RangePatternBoundPath &ref\n-\t  = *static_cast<HIR::RangePatternBoundPath *> (\n-\t    pattern.get_lower_bound ().get ());\n-\n-\tlower = TypeCheckExpr::Resolve (&ref.get_path ());\n-      }\n-      break;\n+  upper = typecheck_range_pattern_bound (pattern.get_upper_bound (),\n+\t\t\t\t\t pattern.get_pattern_mappings (),\n+\t\t\t\t\t pattern.get_locus ());\n \n-      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n-\tHIR::RangePatternBoundQualPath &ref\n-\t  = *static_cast<HIR::RangePatternBoundQualPath *> (\n-\t    pattern.get_lower_bound ().get ());\n-\n-\tlower = TypeCheckExpr::Resolve (&ref.get_qualified_path ());\n-      }\n-      break;\n-    }\n+  lower = typecheck_range_pattern_bound (pattern.get_lower_bound (),\n+\t\t\t\t\t pattern.get_pattern_mappings (),\n+\t\t\t\t\t pattern.get_locus ());\n \n   infered = unify_site (pattern.get_pattern_mappings ().get_hirid (),\n \t\t\tTyTy::TyWithLocation (upper),\n@@ -442,6 +382,44 @@ TypeCheckPattern::emit_pattern_size_error (const HIR::Pattern &pattern,\n \t\t got_field_count == 1 ? \"element\" : \"elements\");\n }\n \n+TyTy::BaseType *\n+TypeCheckPattern::typecheck_range_pattern_bound (\n+  std::unique_ptr<Rust::HIR::RangePatternBound> &bound,\n+  Analysis::NodeMapping mappings, Location locus)\n+{\n+  TyTy::BaseType *resolved_bound = nullptr;\n+  switch (bound->get_bound_type ())\n+    {\n+      case HIR::RangePatternBound::RangePatternBoundType::LITERAL: {\n+\tHIR::RangePatternBoundLiteral &ref\n+\t  = *static_cast<HIR::RangePatternBoundLiteral *> (bound.get ());\n+\n+\tHIR::Literal lit = ref.get_literal ();\n+\n+\tresolved_bound = resolve_literal (mappings, lit, locus);\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::PATH: {\n+\tHIR::RangePatternBoundPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundPath *> (bound.get ());\n+\n+\tresolved_bound = TypeCheckExpr::Resolve (&ref.get_path ());\n+      }\n+      break;\n+\n+      case HIR::RangePatternBound::RangePatternBoundType::QUALPATH: {\n+\tHIR::RangePatternBoundQualPath &ref\n+\t  = *static_cast<HIR::RangePatternBoundQualPath *> (bound.get ());\n+\n+\tresolved_bound = TypeCheckExpr::Resolve (&ref.get_qualified_path ());\n+      }\n+      break;\n+    }\n+\n+  return resolved_bound;\n+}\n+\n void\n TypeCheckPattern::visit (HIR::AltPattern &pattern)\n {"}, {"sha": "d5d0fd00de514505b9b02c4569bab9966b7f45c7", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9938c712d6d8645714ee21d5850342281022e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9938c712d6d8645714ee21d5850342281022e1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=6f9938c712d6d8645714ee21d5850342281022e1", "patch": "@@ -47,10 +47,9 @@ class TypeCheckPattern : public TypeCheckBase, public HIR::HIRPatternVisitor\n private:\n   TypeCheckPattern (TyTy::BaseType *parent);\n \n-  static TyTy::BaseType *\n-  typecheck_range_pattern_bound (HIR::RangePatternBound *bound,\n-\t\t\t\t Analysis::NodeMapping mappings,\n-\t\t\t\t Location locus);\n+  TyTy::BaseType *typecheck_range_pattern_bound (\n+    std::unique_ptr<Rust::HIR::RangePatternBound> &bound,\n+    Analysis::NodeMapping mappings, Location locus);\n \n   void emit_pattern_size_error (const HIR::Pattern &pattern,\n \t\t\t\tsize_t expected_field_count,"}]}