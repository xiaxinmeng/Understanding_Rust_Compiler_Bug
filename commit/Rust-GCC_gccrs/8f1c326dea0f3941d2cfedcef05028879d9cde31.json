{"sha": "8f1c326dea0f3941d2cfedcef05028879d9cde31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxYzMyNmRlYTBmMzk0MWQyY2ZlZGNlZjA1MDI4ODc5ZDljZGUzMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2013-11-22T15:43:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2013-11-22T15:43:11Z"}, "message": "re PR target/59216 (ARM negdi*extendsidi regression)\n\n\tPR target/59216\n\ngcc/\n\t* arm.md (negdi_extendsidi): Fix invalid split.\n\ngcc/testsuite/\n\t* gcc.target/arm/negdi-4.c: Delete invalid test.\n\t* gcc.dg/torture/pr59216.c: New test.\n\nFrom-SVN: r205271", "tree": {"sha": "8ef5412edd36a4a5579bf809dc96f1b2b022cbde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef5412edd36a4a5579bf809dc96f1b2b022cbde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1c326dea0f3941d2cfedcef05028879d9cde31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1c326dea0f3941d2cfedcef05028879d9cde31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1c326dea0f3941d2cfedcef05028879d9cde31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1c326dea0f3941d2cfedcef05028879d9cde31/comments", "author": null, "committer": null, "parents": [{"sha": "1e09922c5f98eada179244ba266dd971c416b1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e09922c5f98eada179244ba266dd971c416b1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e09922c5f98eada179244ba266dd971c416b1d1"}], "stats": {"total": 156, "additions": 105, "deletions": 51}, "files": [{"sha": "c1320a5807b7d509a4f8d1c4468b7eefcb5b201b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f1c326dea0f3941d2cfedcef05028879d9cde31", "patch": "@@ -1,3 +1,8 @@\n+2013-11-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/59216\n+\t* arm.md (negdi_extendsidi): Fix invalid split.\n+\n 2013-11-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmov_n_f32): Implemented in C."}, {"sha": "8e52003af1cf150ab7f61b7784421f2a71b5f97c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8f1c326dea0f3941d2cfedcef05028879d9cde31", "patch": "@@ -4710,47 +4710,74 @@\n \n ;; Negate an extended 32-bit value.\n (define_insn_and_split \"*negdi_extendsidi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,&r,l,&l\")\n-\t(neg:DI (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"0,r,0,l\"))))\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=l,r\")\n+\t(neg:DI (sign_extend:DI\n+\t\t (match_operand:SI 1 \"s_register_operand\" \"l,r\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\" ; rsb\\\\t%Q0, %1, #0\\;asr\\\\t%R0, %Q0, #31\n+  \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-     operands[2] = gen_highpart (SImode, operands[0]);\n-     operands[0] = gen_lowpart (SImode, operands[0]);\n-     rtx tmp = gen_rtx_SET (VOIDmode,\n-                            operands[0],\n-                            gen_rtx_MINUS (SImode,\n-                                           const0_rtx,\n-                                           operands[1]));\n-     if (TARGET_ARM)\n-       {\n-         emit_insn (tmp);\n-       }\n-     else\n-       {\n-         /* Set the flags, to emit the short encoding in Thumb2.  */\n-         rtx flags = gen_rtx_SET (VOIDmode,\n-                                  gen_rtx_REG (CCmode, CC_REGNUM),\n-                                  gen_rtx_COMPARE (CCmode,\n-                                                   const0_rtx,\n-                                                   operands[1]));\n-         emit_insn (gen_rtx_PARALLEL (VOIDmode,\n-                                      gen_rtvec (2,\n-                                                 flags,\n-                                                 tmp)));\n-       }\n-       emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[2],\n-                              gen_rtx_ASHIFTRT (SImode,\n-                                                operands[0],\n-                                                GEN_INT (31))));\n-     DONE;\n+    rtx low = gen_lowpart (SImode, operands[0]);\n+    rtx high = gen_highpart (SImode, operands[0]);\n+\n+    if (reg_overlap_mentioned_p (low, operands[1]))\n+      {\n+\t/* Input overlaps the low word of the output.  Use:\n+\t\tasr\tRhi, Rin, #31\n+\t\trsbs\tRlo, Rin, #0\n+\t\trsc\tRhi, Rhi, #0 (thumb2: sbc Rhi, Rhi, Rhi, lsl #1).  */\n+\trtx cc_reg = gen_rtx_REG (CC_Cmode, CC_REGNUM);\n+\n+\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\t\t\t\tgen_rtx_ASHIFTRT (SImode, operands[1],\n+\t\t\t\t\t\t  GEN_INT (31))));\n+\n+\temit_insn (gen_subsi3_compare (low, const0_rtx, operands[1]));\n+\tif (TARGET_ARM)\n+\t  emit_insn (gen_rtx_SET (VOIDmode, high,\n+\t\t\t\t  gen_rtx_MINUS (SImode,\n+\t\t\t\t\t\t gen_rtx_MINUS (SImode,\n+\t\t\t\t\t\t\t\tconst0_rtx,\n+\t\t\t\t\t\t\t\thigh),\n+\t\t\t\t\t\t gen_rtx_LTU (SImode,\n+\t\t\t\t\t\t\t      cc_reg,\n+\t\t\t\t\t\t\t      const0_rtx))));\n+\telse\n+\t  {\n+\t    rtx two_x = gen_rtx_ASHIFT (SImode, high, GEN_INT (1));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, high,\n+\t\t\t\t    gen_rtx_MINUS (SImode,\n+\t\t\t\t\t\t   gen_rtx_MINUS (SImode,\n+\t\t\t\t\t\t\t\t  high,\n+\t\t\t\t\t\t\t\t  two_x),\n+\t\t\t\t\t\t   gen_rtx_LTU (SImode,\n+\t\t\t\t\t\t\t\tcc_reg,\n+\t\t\t\t\t\t\t\tconst0_rtx))));\n+\t  }\n+      }\n+    else\n+      {\n+\t/* No overlap, or overlap on high word.  Use:\n+\t\trsb\tRlo, Rin, #0\n+\t\tbic\tRhi, Rlo, Rin\n+\t\tasr\tRhi, Rhi, #31\n+\t   Flags not needed for this sequence.  */\n+\temit_insn (gen_rtx_SET (VOIDmode, low,\n+\t\t\t\tgen_rtx_NEG (SImode, operands[1])));\n+\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\t\t\t\tgen_rtx_AND (SImode,\n+\t\t\t\t\t     gen_rtx_NOT (SImode, operands[1]),\n+\t\t\t\t\t     low)));\n+\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\t\t\t\tgen_rtx_ASHIFTRT (SImode, high,\n+\t\t\t\t\t\t  GEN_INT (31))));\n+      }\n+    DONE;\n   }\n-  [(set_attr \"length\" \"8,8,4,4\")\n-   (set_attr \"arch\" \"a,a,t2,t2\")\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"arch\" \"t2,*\")\n    (set_attr \"type\" \"multiple\")]\n )\n "}, {"sha": "38c359e1fe0379be6f9497573c5376a2c51584c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f1c326dea0f3941d2cfedcef05028879d9cde31", "patch": "@@ -1,3 +1,9 @@\n+2013-11-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/59216\n+\t* gcc.target/arm/negdi-4.c: Delete invalid test.\n+\t* gcc.dg/torture/pr59216.c: New test.\n+\n 2013-11-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vmov_n_1.c: New testcase."}, {"sha": "0de51bac95bc1f433844d63399578b98cc7298d5", "filename": "gcc/testsuite/gcc.dg/torture/pr59216.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1c326dea0f3941d2cfedcef05028879d9cde31/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59216.c?ref=8f1c326dea0f3941d2cfedcef05028879d9cde31", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+\n+#include <limits.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+long long __attribute__((noinline)) f(int a)\n+{\n+  return -(long long) a;\n+}\n+\n+int\n+main()\n+{\n+  if (f(0) != 0)\n+    abort ();\n+\n+  if (f(1) != -(long long)1)\n+    abort ();\n+\n+  if (f(-1) != -(long long)-1)\n+    abort ();\n+\n+  if (f(INT_MIN) != -(long long)INT_MIN)\n+    abort ();\n+\n+  if (f(INT_MAX) != -(long long)INT_MAX)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "dc3deaad5ada72d7549dd8be6bab3e26e826912e", "filename": "gcc/testsuite/gcc.target/arm/negdi-4.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e09922c5f98eada179244ba266dd971c416b1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e09922c5f98eada179244ba266dd971c416b1d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c?ref=1e09922c5f98eada179244ba266dd971c416b1d1", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target arm32 } */\n-/* { dg-options \"-O2\" } */\n-\n-signed long long negdi_extendsidi (signed int x)\n-{\n-  return -((signed long long) x);\n-}\n-/*\n-Expected output:\n-        rsbs    r0, r0, #0\n-        mov     r1, r0, asr #31\n-*/\n-/* { dg-final { scan-assembler-times \"rsb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"asr\" 1 } } */\n-/* { dg-final { scan-assembler-times \"rsc\" 0 } } */"}]}