{"sha": "f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "node_id": "C_kwDOANBUbNoAKGY4YzFmMjlhMGI0N2I0YjRhM2MxNTA2Njc4ZjdjYTJjZTRiN2ZmYmI", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-25T21:46:07Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-30T13:50:20Z"}, "message": "c++: ICE with aggregate assignment and DMI [PR104583]\n\nThe attached 93280 test no longer ICEs but looks like it was never added to the\ntestsuite.  The 104583 test, modified so that it closely resembles 93280, still\nICEs.\n\nThe problem is that in 104583 we have a value-init from {} (the line A a{};),\nso this code in convert_like_internal\n\n 7960         /* If we're initializing from {}, it's value-initialization.  */\n 7961         if (BRACE_ENCLOSED_INITIALIZER_P (expr)\n 7962             && CONSTRUCTOR_NELTS (expr) == 0\n 7963             && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype)\n 7964             && !processing_template_decl)\n 7965           {\n 7966             bool direct = CONSTRUCTOR_IS_DIRECT_INIT (expr);\n...\n 7974                 TARGET_EXPR_DIRECT_INIT_P (expr) = direct;\n\nsets TARGET_EXPR_DIRECT_INIT_P.  This does not happen in 93280 where we\ninitialize from {0}.\n\nIn 104583, when gimplifying, the d = {}; line, we have\n\nd = {.a=TARGET_EXPR <D.2474, <<< Unknown tree: aggr_init_expr\n  4\n  __ct_comp\n  D.2474\n  (struct A *) <<< Unknown tree: void_cst >>> >>>>}\n\nwhere the TARGET_EXPR is the one with TARGET_EXPR_DIRECT_INIT_P set.  In\ngimplify_init_ctor_preeval we do\n\n 4724       FOR_EACH_VEC_SAFE_ELT (v, ix, ce)\n 4725         gimplify_init_ctor_preeval (&ce->value, pre_p, post_p, data);\n\nso we gimplify the TARGET_EXPR, crashing at\n\n 744     case TARGET_EXPR:\n 745       /* A TARGET_EXPR that expresses direct-initialization should have\nbeen\n 746          elided by cp_gimplify_init_expr.  */\n 747       gcc_checking_assert (!TARGET_EXPR_DIRECT_INIT_P (*expr_p));\n\nbut there is no INIT_EXPR so cp_gimplify_init_expr was never called!\n\nNow, the fix for c++/93280\n<https://gcc.gnu.org/pipermail/gcc-patches/2020-January/538414.html>\nsays \"let's only set TARGET_EXPR_DIRECT_INIT_P when we're using the DMI in\na constructor.\" and the comment talks about the full initialization.  Is\nis accurate to say that our TARGET_EXPR does not represent the full\ninitialization, because it only initializes the 'a' subobject?  If so,\nthen maybe get_nsdmi should clear TARGET_EXPR_DIRECT_INIT_P when in_ctor\nis false.\n\nI've compared the 93280.s and 104583.s files, they differ only in one\nmovl $0, so there are no extra calls and similar.\n\n\tPR c++/93280\n\tPR c++/104583\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (get_nsdmi): Set TARGET_EXPR_DIRECT_INIT_P to in_ctor.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-list7.C: New test.\n\t* g++.dg/cpp0x/nsdmi-list8.C: New test.", "tree": {"sha": "2a7a6f23b0915c4de9e1c6922cb37cd5aad25eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7a6f23b0915c4de9e1c6922cb37cd5aad25eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8cd03f5b52ad297f73e7181e9f0c643a88a51e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cd03f5b52ad297f73e7181e9f0c643a88a51e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cd03f5b52ad297f73e7181e9f0c643a88a51e3"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "01e762320f31f6cb5379b082fc6d53d7a2244bb1", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "patch": "@@ -679,10 +679,10 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n   if (simple_target)\n     init = TARGET_EXPR_INITIAL (init);\n   init = break_out_target_exprs (init, /*loc*/true);\n-  if (in_ctor && init && TREE_CODE (init) == TARGET_EXPR)\n-    /* This expresses the full initialization, prevent perform_member_init from\n-       calling another constructor (58162).  */\n-    TARGET_EXPR_DIRECT_INIT_P (init) = true;\n+  if (init && TREE_CODE (init) == TARGET_EXPR)\n+    /* In a constructor, this expresses the full initialization, prevent\n+       perform_member_init from calling another constructor (58162).  */\n+    TARGET_EXPR_DIRECT_INIT_P (init) = in_ctor;\n   if (simple_target && TREE_CODE (init) != CONSTRUCTOR)\n     /* Now put it back so C++17 copy elision works.  */\n     init = get_target_expr (init);"}, {"sha": "62b07429beca26c45be3756edfb133ce700ecd71", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-list7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list7.C?ref=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/93280\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  template <typename T> A(T);\n+  int c;\n+};\n+\n+struct D {\n+  A a{0};\n+};\n+\n+void g()\n+{\n+  D d;\n+  d = {};\n+}"}, {"sha": "fe73da8f98df05347188d602662810779085ca6b", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-list8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-list8.C?ref=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/104583\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  A();\n+  int c;\n+};\n+\n+struct D {\n+  A a{};\n+};\n+\n+void g()\n+{\n+  D d;\n+  d = {};\n+}"}]}