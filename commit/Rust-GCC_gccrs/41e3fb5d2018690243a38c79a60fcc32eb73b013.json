{"sha": "41e3fb5d2018690243a38c79a60fcc32eb73b013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlM2ZiNWQyMDE4NjkwMjQzYTM4Yzc5YTYwZmNjMzJlYjczYjAxMw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-06T14:57:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-06T14:57:33Z"}, "message": "Merge #610\n\n610: More rustspec.cc cleanups r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000117.html\r\n\r\n> rustspec.cc was based on the Go frontend gospec.cc. Remove special\r\n> handling of math and pthread libraries and profiling option. Handle\r\n> .rs files instead of .go files. Keep support for linking with (static)\r\n> librust which is currently commented out. Add generic static-librust\r\n> option to common.opt.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "195af4a66f9205ca6de8baccdaa4ba48e9c17f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195af4a66f9205ca6de8baccdaa4ba48e9c17f52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhDU3dCRBK7hj4Ov3rIwAARfAIAGKTq52Vj0EyPHbPshIhPKq6\nqgfotFeM+ZchF/skvtglvKPlsxO+E/ojtJbveE1t2AICc+x738BSSIR1bwG8W7GX\npHksMd675Et32enL7XZNSxlZkkMuUdwXxQN3vkbF//oUaWdwmcHNIS1Uha+W6U4S\nqduVwuqXXVWxVOSxk+tcuB/b7/cKmEVtTmekgQ0fDcxuHIsBYqTtvLFa7EMJAafD\ntOJ/gsEcdj8cjDlWhzdJ7JiTkPn7S7PjWOuVeyOAgZzKUNWrPoPHA3sWIErrXXu0\nugokQEAG8PEX4QqXmjZqG6rsJdwNieDSHAuMI0Agh2jsnSBObSe7cdWcbuvIBH0=\n=5sdd\n-----END PGP SIGNATURE-----\n", "payload": "tree 195af4a66f9205ca6de8baccdaa4ba48e9c17f52\nparent 935f1d7da3ea82980bed642c6eea06d69de5fdf6\nparent 8389c018e53070662b9092aa344fc73319576deb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628261853 +0000\ncommitter GitHub <noreply@github.com> 1628261853 +0000\n\nMerge #610\n\n610: More rustspec.cc cleanups r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000117.html\r\n\r\n> rustspec.cc was based on the Go frontend gospec.cc. Remove special\r\n> handling of math and pthread libraries and profiling option. Handle\r\n> .rs files instead of .go files. Keep support for linking with (static)\r\n> librust which is currently commented out. Add generic static-librust\r\n> option to common.opt.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e3fb5d2018690243a38c79a60fcc32eb73b013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e3fb5d2018690243a38c79a60fcc32eb73b013/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935f1d7da3ea82980bed642c6eea06d69de5fdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935f1d7da3ea82980bed642c6eea06d69de5fdf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935f1d7da3ea82980bed642c6eea06d69de5fdf6"}, {"sha": "8389c018e53070662b9092aa344fc73319576deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8389c018e53070662b9092aa344fc73319576deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8389c018e53070662b9092aa344fc73319576deb"}], "stats": {"total": 152, "additions": 32, "deletions": 120}, "files": [{"sha": "820de1f41b088be0a9a978c0a21de1df0b95dddd", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=41e3fb5d2018690243a38c79a60fcc32eb73b013", "patch": "@@ -3449,6 +3449,10 @@ static-libgo\n Driver\n ; Documented for Go, but always accepted by driver.\n \n+static-librust\n+Driver\n+; Documented for Rust, but always accepted by driver.\n+\n static-libasan\n Driver\n "}, {"sha": "1d61d2afc6bb9a1cb227f006b77a52003105ef1d", "filename": "gcc/rust/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Frust%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Frust%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fconfig-lang.in?ref=41e3fb5d2018690243a38c79a60fcc32eb73b013", "patch": "@@ -1,4 +1,4 @@\n-# config-lang.in -- Top level configure fragment for gcc Go frontend.\n+# config-lang.in -- Top level configure fragment for gcc Rust frontend.\n \n # Copyright (C) 2009-2019 Free Software Foundation, Inc.\n "}, {"sha": "806514a9d9421470c79bf0346f49e788650402a0", "filename": "gcc/rust/rustspec.cc", "status": "modified", "additions": 27, "deletions": 119, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Frust%2Frustspec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e3fb5d2018690243a38c79a60fcc32eb73b013/gcc%2Frust%2Frustspec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frustspec.cc?ref=41e3fb5d2018690243a38c79a60fcc32eb73b013", "patch": "@@ -1,4 +1,4 @@\n-/* rustspec.c -- Specific flags and argument handling of the gcc Go front end.\n+/* rustspec.c -- Specific flags and argument handling of the gcc Rust front end.\n    Copyright (C) 2009-2020 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -28,24 +28,10 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This bit is set if we saw a `-xfoo' language specification.  */\n #define LANGSPEC (1 << 1)\n-/* This bit is set if they did `-lm' or `-lmath'.  */\n-#define MATHLIB (1 << 2)\n-/* This bit is set if they did `-lpthread'.  */\n-#define THREADLIB (1 << 3)\n /* This bit is set if they did `-lc'.  */\n-#define WITHLIBC (1 << 4)\n+#define WITHLIBC (1 << 2)\n /* Skip this option.  */\n-#define SKIPOPT (1 << 5)\n-\n-#ifndef MATH_LIBRARY\n-#define MATH_LIBRARY \"m\"\n-#endif\n-#ifndef MATH_LIBRARY_PROFILE\n-#define MATH_LIBRARY_PROFILE MATH_LIBRARY\n-#endif\n-\n-#define THREAD_LIBRARY \"pthread\"\n-#define THREAD_LIBRARY_PROFILE THREAD_LIBRARY\n+#define SKIPOPT (1 << 3)\n \n void\n lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n@@ -54,38 +40,23 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n {\n   unsigned int i, j;\n \n-  /* If true, the user gave us the `-p' or `-pg' flag.  */\n-  bool saw_profile_flag = false;\n-\n   /* This is a tristate:\n-     -1 means we should not link in libgo\n-     0  means we should link in libgo if it is needed\n-     1  means libgo is needed and should be linked in.\n-     2  means libgo is needed and should be linked statically.  */\n+     -1 means we should not link in librust\n+     0  means we should link in librust if it is needed\n+     1  means librust is needed and should be linked in.\n+     2  means librust is needed and should be linked statically.  */\n   int library = 0;\n \n   /* The new argument list will be contained in this.  */\n   struct cl_decoded_option *new_decoded_options;\n \n-  /* \"-lm\" or \"-lmath\" if it appears on the command line.  */\n-  const struct cl_decoded_option *saw_math = 0;\n-\n-  /* \"-lpthread\" if it appears on the command line.  */\n-  const struct cl_decoded_option *saw_thread = 0;\n-\n   /* \"-lc\" if it appears on the command line.  */\n   const struct cl_decoded_option *saw_libc = 0;\n \n   /* An array used to flag each argument that needs a bit set for\n-     LANGSPEC, MATHLIB, or WITHLIBC.  */\n+     LANGSPEC or WITHLIBC.  */\n   int *args;\n \n-  /* Whether we need the thread library.  */\n-  int need_thread = 0;\n-\n-  /* By default, we throw on the math library if we have one.  */\n-  int need_math = (MATH_LIBRARY[0] != '\\0');\n-\n   /* True if we saw -static.  */\n   int static_link = 0;\n \n@@ -115,8 +86,8 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether the -S option was used.  */\n   bool saw_opt_S = false;\n \n-  /* The first input file with an extension of .go.  */\n-  const char *first_go_file = NULL;\n+  /* The first input file with an extension of .rs.  */\n+  const char *first_rust_file = NULL;\n \n   argc = *in_decoded_options_count;\n   decoded_options = *in_decoded_options;\n@@ -137,34 +108,22 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  break;\n \n \tcase OPT_l:\n-\t  if (strcmp (arg, MATH_LIBRARY) == 0)\n-\t    {\n-\t      args[i] |= MATHLIB;\n-\t      need_math = 0;\n-\t    }\n-\t  else if (strcmp (arg, THREAD_LIBRARY) == 0)\n-\t    args[i] |= THREADLIB;\n-\t  else if (strcmp (arg, \"c\") == 0)\n+\t  if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n \t  else\n-\t    /* Unrecognized libraries (e.g. -lfoo) may require libgo.  */\n+\t    /* Unrecognized libraries (e.g. -lfoo) may require librust.  */\n \t    library = (library == 0) ? 1 : library;\n \t  break;\n \n-\tcase OPT_pg:\n-\tcase OPT_p:\n-\t  saw_profile_flag = true;\n-\t  break;\n-\n \tcase OPT_x:\n-\t  if (library == 0 && strcmp (arg, \"go\") == 0)\n+\t  if (library == 0 && strcmp (arg, \"rust\") == 0)\n \t    library = 1;\n \t  break;\n \n \tcase OPT_Xlinker:\n \tcase OPT_Wl_:\n \t  /* Arguments that go directly to the linker might be .o files,\n-\t     or something, and so might cause libgo to be needed.  */\n+\t     or something, and so might cause librust to be needed.  */\n \t  if (library == 0)\n \t    library = 1;\n \t  break;\n@@ -197,7 +156,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  shared_libgcc = 0;\n \t  break;\n \n-\tcase OPT_static_libgo:\n+\tcase OPT_static_librust:\n \t  library = library >= 0 ? 2 : library;\n \t  args[i] |= SKIPOPT;\n \t  break;\n@@ -206,13 +165,13 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  if (library == 0)\n \t    library = 1;\n \n-\t  if (first_go_file == NULL)\n+\t  if (first_rust_file == NULL)\n \t    {\n \t      int len;\n \n \t      len = strlen (arg);\n-\t      if (len > 3 && strcmp (arg + len - 3, \".go\") == 0)\n-\t\tfirst_go_file = arg;\n+\t      if (len > 3 && strcmp (arg + len - 3, \".rs\") == 0)\n+\t\tfirst_rust_file = arg;\n \t    }\n \n \t  break;\n@@ -226,7 +185,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Make sure to have room for the trailing NULL argument.  */\n-  num_args = argc + need_math + shared_libgcc + (library > 0) * 5 + 10;\n+  num_args = argc + shared_libgcc + (library > 0) * 5 + 10;\n   new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n@@ -240,20 +199,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     {\n       new_decoded_options[j] = decoded_options[i];\n \n-      /* Make sure -lgo is before the math library, since libgo itself\n-\t uses those math routines.  */\n-      if (!saw_math && (args[i] & MATHLIB) && library > 0)\n-\t{\n-\t  --j;\n-\t  saw_math = &decoded_options[i];\n-\t}\n-\n-      if (!saw_thread && (args[i] & THREADLIB) && library > 0)\n-\t{\n-\t  --j;\n-\t  saw_thread = &decoded_options[i];\n-\t}\n-\n       if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n \t{\n \t  --j;\n@@ -268,11 +213,11 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     }\n \n   /* If we didn't see a -o option, add one.  This is because we need\n-     the driver to pass all .go files to go1.  Without a -o option the\n-     driver will invoke go1 separately for each input file.  FIXME:\n+     the driver to pass all .rs files to rust1.  Without a -o option the\n+     driver will invoke rust1 separately for each input file.  FIXME:\n      This should probably use some other interface to force the driver\n      to set combine_inputs.  */\n-  if (first_go_file != NULL && !saw_opt_o)\n+  if (first_rust_file != NULL && !saw_opt_o)\n     {\n       if (saw_opt_c || saw_opt_S)\n \t{\n@@ -281,7 +226,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  int alen;\n \t  char *out;\n \n-\t  base = lbasename (first_go_file);\n+\t  base = lbasename (first_rust_file);\n \t  baselen = strlen (base) - 3;\n \t  alen = baselen + 3;\n \t  out = XNEWVEC (char, alen);\n@@ -301,7 +246,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n       j++;\n     }\n \n-  /* Add `-lgo' if we haven't already done so.  */\n+  /* Add `-lrust' if we haven't already done so.  */\n   if (library > 0)\n     {\n       // generate_option (OPT_l, LIBGOBEGIN, 1, CL_DRIVER,\n@@ -318,7 +263,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t}\n #endif\n \n-\t// generate_option (OPT_l, saw_profile_flag ? LIBGO_PROFILE : LIBGO, 1,\n+\t// generate_option (OPT_l, LIBGO, 1,\n \t//   \t       CL_DRIVER, &new_decoded_options[j]);\n \t// added_libraries++;\n \t// j++;\n@@ -331,34 +276,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  j++;\n \t}\n #endif\n-\n-      /* When linking libgo statically we also need to link with the\n-\t pthread library.  */\n-      if (library > 1 || static_link)\n-\tneed_thread = 1;\n-    }\n-\n-  if (saw_thread)\n-    new_decoded_options[j++] = *saw_thread;\n-  else if (library > 0 && need_thread)\n-    {\n-      generate_option (OPT_l,\n-\t\t       (saw_profile_flag ? THREAD_LIBRARY_PROFILE\n-\t\t\t\t\t : THREAD_LIBRARY),\n-\t\t       1, CL_DRIVER, &new_decoded_options[j]);\n-      added_libraries++;\n-      j++;\n-    }\n-\n-  if (saw_math)\n-    new_decoded_options[j++] = *saw_math;\n-  else if (library > 0 && need_math)\n-    {\n-      generate_option (OPT_l,\n-\t\t       saw_profile_flag ? MATH_LIBRARY_PROFILE : MATH_LIBRARY,\n-\t\t       1, CL_DRIVER, &new_decoded_options[j]);\n-      added_libraries++;\n-      j++;\n     }\n \n   if (saw_libc)\n@@ -367,26 +284,17 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n \t\t     &new_decoded_options[j++]);\n \n-#if defined(TARGET_SOLARIS) && !defined(USE_GLD)\n-  /* We use a common symbol for go$zerovalue.  On Solaris, when not\n-     using the GNU linker, the Solaris linker needs an option to not\n-     warn about this.  Everything works without this option, but you\n-     get unsightly warnings at link time.  */\n-  generate_option (OPT_Wl_, \"-t\", 1, CL_DRIVER, &new_decoded_options[j]);\n-  j++;\n-#endif\n-\n   *in_decoded_options_count = j;\n   *in_decoded_options = new_decoded_options;\n   *in_added_libraries = added_libraries;\n }\n \n /* Called before linking.  Returns 0 on success and -1 on failure.  */\n int\n-lang_specific_pre_link (void) /* Not used for Go.  */\n+lang_specific_pre_link (void) /* Not used for Rust.  */\n {\n   return 0;\n }\n \n /* Number of extra output files that lang_specific_pre_link may generate.  */\n-int lang_specific_extra_outfiles = 0; /* Not used for Go.  */\n+int lang_specific_extra_outfiles = 0; /* Not used for Rust.  */"}]}