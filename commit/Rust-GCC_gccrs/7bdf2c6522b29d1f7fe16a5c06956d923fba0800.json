{"sha": "7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkZjJjNjUyMmIyOWQxZjdmZTE2YTVjMDY5NTZkOTIzZmJhMDgwMA==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-03T20:52:43Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-03T20:52:43Z"}, "message": "m68hc11.h (STATIC_CHAIN_REGNUM): Use soft z register instead of _.d1.\n\n\t* config/m68hc11/m68hc11.h (STATIC_CHAIN_REGNUM): Use soft z register\n\tinstead of _.d1.\n\t(INITIALIZE_TRAMPOLINE): Call it.\n\t(TRAMPOLINE_SIZE): Define according to 68HC11/68HC12.\n\t(TRAMPOLINE_TEMPLATE): Remove.\n\t* config/m68hc11/m68hc11.c (m68hc11_initialize_trampoline): New.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_initialize_trampoline):\n\tDeclare.\n\nFrom-SVN: r41808", "tree": {"sha": "8cac8d1f0a2ff86505849786a60d6ecb9949bb5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cac8d1f0a2ff86505849786a60d6ecb9949bb5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/comments", "author": null, "committer": null, "parents": [{"sha": "f8e4b51d3666e23172cdaa0367a0a7b18e1707cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e4b51d3666e23172cdaa0367a0a7b18e1707cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e4b51d3666e23172cdaa0367a0a7b18e1707cd"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "81dc3c49846876121183d18a5f8850e6a83482c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "patch": "@@ -1,3 +1,14 @@\n+2001-05-03  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.h (STATIC_CHAIN_REGNUM): Use soft z register\n+\tinstead of _.d1.\n+\t(INITIALIZE_TRAMPOLINE): Call it.\n+\t(TRAMPOLINE_SIZE): Define according to 68HC11/68HC12.\n+\t(TRAMPOLINE_TEMPLATE): Remove.\n+\t* config/m68hc11/m68hc11.c (m68hc11_initialize_trampoline): New.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_initialize_trampoline):\n+\tDeclare.\n+\n 2001-05-03  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config/t-freebsd: Don't install \"assert.h\" in gcc.  Compile crtbeginS.o"}, {"sha": "e8ccaefb1226b0a9cbe155e60a2f7b9057945114", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "patch": "@@ -39,6 +39,8 @@ extern int m68hc11_block_profiler PARAMS((FILE*,int));\n extern void m68hc11_asm_file_start PARAMS((FILE*, char*));\n \n #ifdef TREE_CODE\n+extern void m68hc11_initialize_trampoline PARAMS((rtx, rtx, rtx));\n+\n extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,\n                                                  tree,"}, {"sha": "1ae397932fbf5f716296091a3d337ff1316724d5", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "patch": "@@ -1056,6 +1056,54 @@ m68hc11_function_block_profiler (out, block_or_label)\n {\n   return 0;\n }\n+\n+/* Emit the code to build the trampoline used to call a nested function.\n+   \n+   68HC11               68HC12\n+\n+   ldy #&CXT            movw #&CXT,*_.d1\n+   sty *_.d1            jmp FNADDR\n+   jmp FNADDR\n+\n+*/\n+void\n+m68hc11_initialize_trampoline (tramp, fnaddr, cxt)\n+     rtx tramp;\n+     rtx fnaddr;\n+     rtx cxt;\n+{\n+  char *static_chain_reg = reg_names[STATIC_CHAIN_REGNUM];\n+\n+  /* Skip the '*'.  */\n+  if (*static_chain_reg == '*')\n+    static_chain_reg++;\n+  if (TARGET_M6811)\n+    {\n+      emit_move_insn (gen_rtx_MEM (HImode, tramp), GEN_INT (0x18ce));\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 2)), cxt);\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 4)),\n+                      GEN_INT (0x18df));\n+      emit_move_insn (gen_rtx_MEM (QImode, plus_constant (tramp, 6)),\n+                      gen_rtx_CONST (QImode,\n+                                     gen_rtx_SYMBOL_REF (Pmode,\n+                                                         static_chain_reg)));\n+      emit_move_insn (gen_rtx_MEM (QImode, plus_constant (tramp, 7)),\n+                      GEN_INT (0x7e));\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 8)), fnaddr);\n+    }\n+  else\n+    {\n+      emit_move_insn (gen_rtx_MEM (HImode, tramp), GEN_INT (0x1803));\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 2)), cxt);\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 4)),\n+                      gen_rtx_CONST (HImode,\n+                                     gen_rtx_SYMBOL_REF (Pmode,\n+                                                         static_chain_reg)));\n+      emit_move_insn (gen_rtx_MEM (QImode, plus_constant (tramp, 6)),\n+                      GEN_INT (0x06));\n+      emit_move_insn (gen_rtx_MEM (HImode, plus_constant (tramp, 7)), fnaddr);\n+    }\n+}\n \f\n /* Declaration of types.  */\n "}, {"sha": "f8589c59cdae6b93cf473d50ac101c80336ec57e", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdf2c6522b29d1f7fe16a5c06956d923fba0800/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=7bdf2c6522b29d1f7fe16a5c06956d923fba0800", "patch": "@@ -714,6 +714,9 @@ enum reg_class\n #define Y_REGNO_P(REGNO)        ((REGNO) == HARD_Y_REGNUM)\n #define Y_REG_P(X)              (REG_P (X) && Y_REGNO_P (REGNO (X)))\n \n+#define Z_REGNO_P(REGNO)        ((REGNO) == HARD_Z_REGNUM)\n+#define Z_REG_P(X)              (REG_P (X) && Z_REGNO_P (REGNO (X)))\n+\n #define SP_REGNO_P(REGNO)       ((REGNO) == HARD_SP_REGNUM)\n #define SP_REG_P(X)             (REG_P (X) && SP_REGNO_P (REGNO (X)))\n \n@@ -932,7 +935,7 @@ extern int m68hc11_sp_correction;\n #define ARG_POINTER_REGNUM\t\tSOFT_AP_REGNUM\n \n /* Register in which static-chain is passed to a function.  */\n-#define STATIC_CHAIN_REGNUM\t        SOFT_REG_FIRST\n+#define STATIC_CHAIN_REGNUM\t        SOFT_Z_REGNUM\n \n \f\n /* Definitions for register eliminations.\n@@ -975,8 +978,6 @@ extern int m68hc11_sp_correction;\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n     { OFFSET = m68hc11_initial_elimination_offset (FROM, TO); }\n \n-/* LONGJMP_RESTORE_FROM_STACK */\n-\n \f\n /* Passing Function Arguments on the Stack.  */\n \n@@ -1183,21 +1184,17 @@ typedef struct m68hc11_args\n     asm (\"puly\");\t       \\\n   }\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n-#define TRAMPOLINE_TEMPLATE(FILE) { \\\n-  fprintf (FILE, \"\\t.bogus\\t\\t; TRAMPOLINE_TEMPLATE unimplemented\\n\"); }\n-\n /* Length in units of the trampoline for entering a nested function.  */\n-#define TRAMPOLINE_SIZE\t\t0\n+#define TRAMPOLINE_SIZE\t\t(TARGET_M6811 ? 11 : 9)\n \n /* A C statement to initialize the variable parts of a trampoline.\n    ADDR is an RTX for the address of the trampoline; FNADDR is an\n    RTX for the address of the nested function; STATIC_CHAIN is an\n    RTX for the static chain value that should be passed to the\n    function when it is called.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) { \\\n-\t}\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n+  m68hc11_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n+\n \f\n \n /* If defined, a C expression whose value is nonzero if IDENTIFIER"}]}