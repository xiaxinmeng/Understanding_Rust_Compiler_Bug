{"sha": "6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiNWE2ZjMwZjJhM2E5ZGIzNzYwNDE5NWZmNGI4MDI3NzlmODNiYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-24T19:35:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-24T19:35:37Z"}, "message": "re PR target/82460 (AVX512: choose between vpermi2d and vpermt2d to save mov instructions.  Also, fails to optimize away shifts before shuffle)\n\n\tPR target/82460\n\t* config/i386/sse.md (UNSPEC_VPERMI2, UNSPEC_VPERMI2_MASK): Remove.\n\t(VPERMI2, VPERMI2I): New mode iterators.\n\t(<avx512>_vpermi2var<mode>3_maskz): Remove 3 define_expand patterns.\n\t(<avx512>_vpermi2var<mode>3<sd_maskz_name>): Remove 3 define_insn\n\tpatterns.\n\t(<avx512>_vpermi2var<mode>3_mask): New define_expand using VPERMI2\n\tmode iterator.  Remove 3 old define_insn patterns.\n\t(*<avx512>_vpermi2var<mode>3_mask): 2 new define_insn patterns.\n\t(<avx512>_vpermt2var<mode>3_maskz): Adjust 1 define_expand to use\n\tVPERMI2 mode iterator, remove the other two expanders.\n\t(<avx512>_vpermt2var<mode>3<sd_maskz_name>): Adjust 1 define_insn\n\tto use VPERMI2 mode iterator, add another alternative for vpermi2*\n\tinstructions, remove the other two patterns.\n\t(<avx512>_vpermt2var<mode>3_mask): Adjust 1 define_insn to use VPERMI2\n\tmode iterator, remove the other two patterns.\n\t* config/i386/i386.c (ix86_expand_vec_perm_vpermi2): Renamed to ...\n\t(ix86_expand_vec_perm_vpermt2): ... this.  Swap mask and op0\n\targuments, use gen_*vpermt2* expanders instead of gen_*vpermi2*\n\tand adjust argument order accordingly.\n\t(ix86_expand_vec_perm): Adjust caller.\n\t(expand_vec_perm_1): Likewise.\n\t(expand_vec_perm_vpermi2_vpshub2): Rename to ...\n\t(expand_vec_perm_vpermt2_vpshub2): ... this.\n\t(ix86_expand_vec_perm_const_1): Adjust caller.\n\t(ix86_vectorize_vec_perm_const_ok): Adjust comments.\n\n\t* gcc.target/i386/pr82460-1.c: New test.\n\t* gcc.target/i386/pr82460-2.c: New test.\n\t* gcc.target/i386/avx512f-vpermt2pd-1.c: Adjust scan-assembler*\n\tregexps to allow vpermt2* to vpermi2* replacement or vice versa\n\twhere possible.\n\t* gcc.target/i386/avx512vl-vpermt2pd-1.c: Likewise.\n\t* gcc.target/i386/avx512f-vpermt2d-1.c: Likewise.\n\t* gcc.target/i386/vect-pack-trunc-2.c: Likewise.\n\t* gcc.target/i386/avx512vl-vpermt2ps-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-vpermt2q-1.c: Likewise.\n\t* gcc.target/i386/avx512f-vpermt2ps-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-vpermt2d-1.c: Likewise.\n\t* gcc.target/i386/avx512bw-vpermt2w-1.c: Likewise.\n\t* gcc.target/i386/avx512vbmi-vpermt2b-1.c: Likewise.\n\t* gcc.target/i386/avx512f-vpermt2q-1.c: Likewise.\n\nFrom-SVN: r254059", "tree": {"sha": "22378ee47407e4cd17e78007eb82d0a84431ca98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22378ee47407e4cd17e78007eb82d0a84431ca98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c0331f62dd2d4025a97538aa6583b787a4a8214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0331f62dd2d4025a97538aa6583b787a4a8214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0331f62dd2d4025a97538aa6583b787a4a8214"}], "stats": {"total": 533, "additions": 237, "deletions": 296}, "files": [{"sha": "2f750ac6da33982207f23dd03ff90348692d5c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,5 +1,32 @@\n 2017-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82460\n+\t* config/i386/sse.md (UNSPEC_VPERMI2, UNSPEC_VPERMI2_MASK): Remove.\n+\t(VPERMI2, VPERMI2I): New mode iterators.\n+\t(<avx512>_vpermi2var<mode>3_maskz): Remove 3 define_expand patterns.\n+\t(<avx512>_vpermi2var<mode>3<sd_maskz_name>): Remove 3 define_insn\n+\tpatterns.\n+\t(<avx512>_vpermi2var<mode>3_mask): New define_expand using VPERMI2\n+\tmode iterator.  Remove 3 old define_insn patterns.\n+\t(*<avx512>_vpermi2var<mode>3_mask): 2 new define_insn patterns.\n+\t(<avx512>_vpermt2var<mode>3_maskz): Adjust 1 define_expand to use\n+\tVPERMI2 mode iterator, remove the other two expanders.\n+\t(<avx512>_vpermt2var<mode>3<sd_maskz_name>): Adjust 1 define_insn\n+\tto use VPERMI2 mode iterator, add another alternative for vpermi2*\n+\tinstructions, remove the other two patterns.\n+\t(<avx512>_vpermt2var<mode>3_mask): Adjust 1 define_insn to use VPERMI2\n+\tmode iterator, remove the other two patterns.\n+\t* config/i386/i386.c (ix86_expand_vec_perm_vpermi2): Renamed to ...\n+\t(ix86_expand_vec_perm_vpermt2): ... this.  Swap mask and op0\n+\targuments, use gen_*vpermt2* expanders instead of gen_*vpermi2*\n+\tand adjust argument order accordingly.\n+\t(ix86_expand_vec_perm): Adjust caller.\n+\t(expand_vec_perm_1): Likewise.\n+\t(expand_vec_perm_vpermi2_vpshub2): Rename to ...\n+\t(expand_vec_perm_vpermt2_vpshub2): ... this.\n+\t(ix86_expand_vec_perm_const_1): Adjust caller.\n+\t(ix86_vectorize_vec_perm_const_ok): Adjust comments.\n+\n \tPR target/82370\n \t* config/i386/sse.md (VIMAX_AVX2): Remove V4TImode.\n \t(VIMAX_AVX2_AVX512BW, VIMAX_AVX512VL): New mode iterators."}, {"sha": "367cadea3c1303409a46cea1af08aa7b11f2f9ef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -24049,10 +24049,10 @@ struct expand_vec_perm_d\n };\n \n static bool\n-ix86_expand_vec_perm_vpermi2 (rtx target, rtx op0, rtx mask, rtx op1,\n+ix86_expand_vec_perm_vpermt2 (rtx target, rtx mask, rtx op0, rtx op1,\n \t\t\t      struct expand_vec_perm_d *d)\n {\n-  /* ix86_expand_vec_perm_vpermi2 is called from both const and non-const\n+  /* ix86_expand_vec_perm_vpermt2 is called from both const and non-const\n      expander, so args are either in d, or in op0, op1 etc.  */\n   machine_mode mode = GET_MODE (d ? d->op0 : op0);\n   machine_mode maskmode = mode;\n@@ -24062,83 +24062,83 @@ ix86_expand_vec_perm_vpermi2 (rtx target, rtx op0, rtx mask, rtx op1,\n     {\n     case E_V8HImode:\n       if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\tgen = gen_avx512vl_vpermi2varv8hi3;\n+\tgen = gen_avx512vl_vpermt2varv8hi3;\n       break;\n     case E_V16HImode:\n       if (TARGET_AVX512VL && TARGET_AVX512BW)\n-\tgen = gen_avx512vl_vpermi2varv16hi3;\n+\tgen = gen_avx512vl_vpermt2varv16hi3;\n       break;\n     case E_V64QImode:\n       if (TARGET_AVX512VBMI)\n-\tgen = gen_avx512bw_vpermi2varv64qi3;\n+\tgen = gen_avx512bw_vpermt2varv64qi3;\n       break;\n     case E_V32HImode:\n       if (TARGET_AVX512BW)\n-\tgen = gen_avx512bw_vpermi2varv32hi3;\n+\tgen = gen_avx512bw_vpermt2varv32hi3;\n       break;\n     case E_V4SImode:\n       if (TARGET_AVX512VL)\n-\tgen = gen_avx512vl_vpermi2varv4si3;\n+\tgen = gen_avx512vl_vpermt2varv4si3;\n       break;\n     case E_V8SImode:\n       if (TARGET_AVX512VL)\n-\tgen = gen_avx512vl_vpermi2varv8si3;\n+\tgen = gen_avx512vl_vpermt2varv8si3;\n       break;\n     case E_V16SImode:\n       if (TARGET_AVX512F)\n-\tgen = gen_avx512f_vpermi2varv16si3;\n+\tgen = gen_avx512f_vpermt2varv16si3;\n       break;\n     case E_V4SFmode:\n       if (TARGET_AVX512VL)\n \t{\n-\t  gen = gen_avx512vl_vpermi2varv4sf3;\n+\t  gen = gen_avx512vl_vpermt2varv4sf3;\n \t  maskmode = V4SImode;\n \t}\n       break;\n     case E_V8SFmode:\n       if (TARGET_AVX512VL)\n \t{\n-\t  gen = gen_avx512vl_vpermi2varv8sf3;\n+\t  gen = gen_avx512vl_vpermt2varv8sf3;\n \t  maskmode = V8SImode;\n \t}\n       break;\n     case E_V16SFmode:\n       if (TARGET_AVX512F)\n \t{\n-\t  gen = gen_avx512f_vpermi2varv16sf3;\n+\t  gen = gen_avx512f_vpermt2varv16sf3;\n \t  maskmode = V16SImode;\n \t}\n       break;\n     case E_V2DImode:\n       if (TARGET_AVX512VL)\n-\tgen = gen_avx512vl_vpermi2varv2di3;\n+\tgen = gen_avx512vl_vpermt2varv2di3;\n       break;\n     case E_V4DImode:\n       if (TARGET_AVX512VL)\n-\tgen = gen_avx512vl_vpermi2varv4di3;\n+\tgen = gen_avx512vl_vpermt2varv4di3;\n       break;\n     case E_V8DImode:\n       if (TARGET_AVX512F)\n-\tgen = gen_avx512f_vpermi2varv8di3;\n+\tgen = gen_avx512f_vpermt2varv8di3;\n       break;\n     case E_V2DFmode:\n       if (TARGET_AVX512VL)\n \t{\n-\t  gen = gen_avx512vl_vpermi2varv2df3;\n+\t  gen = gen_avx512vl_vpermt2varv2df3;\n \t  maskmode = V2DImode;\n \t}\n       break;\n     case E_V4DFmode:\n       if (TARGET_AVX512VL)\n \t{\n-\t  gen = gen_avx512vl_vpermi2varv4df3;\n+\t  gen = gen_avx512vl_vpermt2varv4df3;\n \t  maskmode = V4DImode;\n \t}\n       break;\n     case E_V8DFmode:\n       if (TARGET_AVX512F)\n \t{\n-\t  gen = gen_avx512f_vpermi2varv8df3;\n+\t  gen = gen_avx512f_vpermt2varv8df3;\n \t  maskmode = V8DImode;\n \t}\n       break;\n@@ -24149,7 +24149,7 @@ ix86_expand_vec_perm_vpermi2 (rtx target, rtx op0, rtx mask, rtx op1,\n   if (gen == NULL)\n     return false;\n \n-  /* ix86_expand_vec_perm_vpermi2 is called from both const and non-const\n+  /* ix86_expand_vec_perm_vpermt2 is called from both const and non-const\n      expander, so args are either in d, or in op0, op1 etc.  */\n   if (d)\n     {\n@@ -24162,7 +24162,7 @@ ix86_expand_vec_perm_vpermi2 (rtx target, rtx op0, rtx mask, rtx op1,\n       mask = gen_rtx_CONST_VECTOR (maskmode, gen_rtvec_v (d->nelt, vec));\n     }\n \n-  emit_insn (gen (target, op0, force_reg (maskmode, mask), op1));\n+  emit_insn (gen (target, force_reg (maskmode, mask), op0, op1));\n   return true;\n }\n \n@@ -24213,7 +24213,7 @@ ix86_expand_vec_perm (rtx operands[])\n \t}\n     }\n \n-  if (ix86_expand_vec_perm_vpermi2 (target, op0, mask, op1, NULL))\n+  if (ix86_expand_vec_perm_vpermt2 (target, mask, op0, op1, NULL))\n     return;\n \n   if (TARGET_AVX2)\n@@ -45395,8 +45395,8 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   if (ix86_expand_vec_one_operand_perm_avx512 (d))\n     return true;\n \n-  /* Try the AVX512F vpermi2 instructions.  */\n-  if (ix86_expand_vec_perm_vpermi2 (NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX, d))\n+  /* Try the AVX512F vpermt2/vpermi2 instructions.  */\n+  if (ix86_expand_vec_perm_vpermt2 (NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX, d))\n     return true;\n \n   /* See if we can get the same permutation in different vector integer\n@@ -47055,9 +47055,9 @@ expand_vec_perm_broadcast (struct expand_vec_perm_d *d)\n }\n \n /* Implement arbitrary permutations of two V64QImode operands\n-   will 2 vpermi2w, 2 vpshufb and one vpor instruction.  */\n+   with 2 vperm[it]2w, 2 vpshufb and one vpor instruction.  */\n static bool\n-expand_vec_perm_vpermi2_vpshub2 (struct expand_vec_perm_d *d)\n+expand_vec_perm_vpermt2_vpshub2 (struct expand_vec_perm_d *d)\n {\n   if (!TARGET_AVX512BW || !(d->vmode == V64QImode))\n     return false;\n@@ -47302,7 +47302,7 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_vpshufb2_vpermq_even_odd (d))\n     return true;\n \n-  if (expand_vec_perm_vpermi2_vpshub2 (d))\n+  if (expand_vec_perm_vpermt2_vpshub2 (d))\n     return true;\n \n   /* ??? Look for narrow permutations whose element orderings would\n@@ -47450,25 +47450,25 @@ ix86_vectorize_vec_perm_const_ok (machine_mode vmode, vec_perm_indices sel)\n     case E_V8DImode:\n     case E_V8DFmode:\n       if (TARGET_AVX512F)\n-\t/* All implementable with a single vpermi2 insn.  */\n+\t/* All implementable with a single vperm[it]2 insn.  */\n \treturn true;\n       break;\n     case E_V32HImode:\n       if (TARGET_AVX512BW)\n-\t/* All implementable with a single vpermi2 insn.  */\n+\t/* All implementable with a single vperm[it]2 insn.  */\n \treturn true;\n       break;\n     case E_V64QImode:\n       if (TARGET_AVX512BW)\n-\t/* Implementable with 2 vpermi2, 2 vpshufb and 1 or insn.  */\n+\t/* Implementable with 2 vperm[it]2, 2 vpshufb and 1 or insn.  */\n \treturn true;\n       break;\n     case E_V8SImode:\n     case E_V8SFmode:\n     case E_V4DFmode:\n     case E_V4DImode:\n       if (TARGET_AVX512VL)\n-\t/* All implementable with a single vpermi2 insn.  */\n+\t/* All implementable with a single vperm[it]2 insn.  */\n \treturn true;\n       break;\n     case E_V16HImode:"}, {"sha": "fe3cb1791ad0c28711d94bf1a84b9c86b0d4d365", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 67, "deletions": 217, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -83,9 +83,7 @@\n   UNSPEC_VSIBADDR\n \n   ;; For AVX512F support\n-  UNSPEC_VPERMI2\n   UNSPEC_VPERMT2\n-  UNSPEC_VPERMI2_MASK\n   UNSPEC_UNSIGNED_FIX_NOTRUNC\n   UNSPEC_UNSIGNED_PCMP\n   UNSPEC_TESTM\n@@ -18085,140 +18083,76 @@\n    (set_attr \"prefix\" \"<mask_prefix>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n-  [(match_operand:VI48F 0 \"register_operand\")\n-   (match_operand:VI48F 1 \"register_operand\")\n-   (match_operand:<sseintvecmode> 2 \"register_operand\")\n-   (match_operand:VI48F 3 \"nonimmediate_operand\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512F\"\n-{\n-  emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n-\toperands[0], operands[1], operands[2], operands[3],\n-\tCONST0_RTX (<MODE>mode), operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n-  [(match_operand:VI1_AVX512VL 0 \"register_operand\")\n-   (match_operand:VI1_AVX512VL 1 \"register_operand\")\n-   (match_operand:<sseintvecmode> 2 \"register_operand\")\n-   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512VBMI\"\n-{\n-  emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n-\toperands[0], operands[1], operands[2], operands[3],\n-\tCONST0_RTX (<MODE>mode), operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"<avx512>_vpermi2var<mode>3_maskz\"\n-  [(match_operand:VI2_AVX512VL 0 \"register_operand\")\n-   (match_operand:VI2_AVX512VL 1 \"register_operand\")\n-   (match_operand:<sseintvecmode> 2 \"register_operand\")\n-   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512BW\"\n-{\n-  emit_insn (gen_<avx512>_vpermi2var<mode>3_maskz_1 (\n-\toperands[0], operands[1], operands[2], operands[3],\n-\tCONST0_RTX (<MODE>mode), operands[4]));\n-  DONE;\n-})\n-\n-(define_insn \"<avx512>_vpermi2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI48F 0 \"register_operand\" \"=v\")\n-\t(unspec:VI48F\n-\t  [(match_operand:VI48F 1 \"register_operand\" \"v\")\n-\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPERMI2))]\n+(define_mode_iterator VPERMI2\n+  [V16SI V16SF V8DI V8DF\n+   (V8SI \"TARGET_AVX512VL\") (V8SF \"TARGET_AVX512VL\")\n+   (V4DI \"TARGET_AVX512VL\") (V4DF \"TARGET_AVX512VL\")\n+   (V4SI \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   (V2DI \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512BW && TARGET_AVX512VL\")\n+   (V8HI \"TARGET_AVX512BW && TARGET_AVX512VL\")\n+   (V64QI \"TARGET_AVX512VBMI\") (V32QI \"TARGET_AVX512VBMI && TARGET_AVX512VL\")\n+   (V16QI \"TARGET_AVX512VBMI && TARGET_AVX512VL\")])\n+\n+(define_mode_iterator VPERMI2I\n+  [V16SI V8DI\n+   (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512BW && TARGET_AVX512VL\")\n+   (V8HI \"TARGET_AVX512BW && TARGET_AVX512VL\")\n+   (V64QI \"TARGET_AVX512VBMI\") (V32QI \"TARGET_AVX512VBMI && TARGET_AVX512VL\")\n+   (V16QI \"TARGET_AVX512VBMI && TARGET_AVX512VL\")])\n+\n+(define_expand \"<avx512>_vpermi2var<mode>3_mask\"\n+  [(set (match_operand:VPERMI2 0 \"register_operand\")\n+\t(vec_merge:VPERMI2\n+\t  (unspec:VPERMI2\n+\t    [(match_operand:<sseintvecmode> 2 \"register_operand\")\n+\t     (match_operand:VPERMI2 1 \"register_operand\")\n+\t     (match_operand:VPERMI2 3 \"nonimmediate_operand\")]\n+\t    UNSPEC_VPERMT2)\n+\t  (match_dup 5)\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n   \"TARGET_AVX512F\"\n-  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermi2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI1_AVX512VL\n-\t  [(match_operand:VI1_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPERMI2))]\n-  \"TARGET_AVX512VBMI\"\n-  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermi2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI2_AVX512VL\n-\t  [(match_operand:VI2_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPERMI2))]\n-  \"TARGET_AVX512BW\"\n-  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermi2var<mode>3_mask\"\n-  [(set (match_operand:VI48F 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI48F\n-\t  (unspec:VI48F\n-\t    [(match_operand:VI48F 1 \"register_operand\" \"v\")\n-\t    (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPERMI2_MASK)\n-\t  (match_dup 0)\n+  \"operands[5] = gen_lowpart (<MODE>mode, operands[2]);\")\n+\n+(define_insn \"*<avx512>_vpermi2var<mode>3_mask\"\n+  [(set (match_operand:VPERMI2I 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VPERMI2I\n+\t  (unspec:VPERMI2I\n+\t    [(match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+\t     (match_operand:VPERMI2I 1 \"register_operand\" \"v\")\n+\t     (match_operand:VPERMI2I 3 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_VPERMT2)\n+\t  (match_dup 2)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpermi2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_vpermi2var<mode>3_mask\"\n-  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI1_AVX512VL\n-\t  (unspec:VI1_AVX512VL\n-\t    [(match_operand:VI1_AVX512VL 1 \"register_operand\" \"v\")\n-\t    (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPERMI2_MASK)\n-\t  (match_dup 0)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512VBMI\"\n-  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermi2var<mode>3_mask\"\n-  [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI2_AVX512VL\n-\t  (unspec:VI2_AVX512VL\n-\t    [(match_operand:VI2_AVX512VL 1 \"register_operand\" \"v\")\n-\t    (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPERMI2_MASK)\n-\t  (match_dup 0)\n+(define_insn \"*<avx512>_vpermi2var<mode>3_mask\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+\t     (match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n+\t    UNSPEC_VPERMT2)\n+\t  (subreg:VF_AVX512VL (match_dup 2) 0)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512BW\"\n+  \"TARGET_AVX512F\"\n   \"vpermi2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI48F 0 \"register_operand\")\n+  [(match_operand:VPERMI2 0 \"register_operand\")\n    (match_operand:<sseintvecmode> 1 \"register_operand\")\n-   (match_operand:VI48F 2 \"register_operand\")\n-   (match_operand:VI48F 3 \"nonimmediate_operand\")\n+   (match_operand:VPERMI2 2 \"register_operand\")\n+   (match_operand:VPERMI2 3 \"nonimmediate_operand\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -18228,80 +18162,28 @@\n   DONE;\n })\n \n-(define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI1_AVX512VL 0 \"register_operand\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\")\n-   (match_operand:VI1_AVX512VL 2 \"register_operand\")\n-   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512VBMI\"\n-{\n-  emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 (\n-\toperands[0], operands[1], operands[2], operands[3],\n-\tCONST0_RTX (<MODE>mode), operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"<avx512>_vpermt2var<mode>3_maskz\"\n-  [(match_operand:VI2_AVX512VL 0 \"register_operand\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\")\n-   (match_operand:VI2_AVX512VL 2 \"register_operand\")\n-   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512BW\"\n-{\n-  emit_insn (gen_<avx512>_vpermt2var<mode>3_maskz_1 (\n-\toperands[0], operands[1], operands[2], operands[3],\n-\tCONST0_RTX (<MODE>mode), operands[4]));\n-  DONE;\n-})\n-\n (define_insn \"<avx512>_vpermt2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI48F 0 \"register_operand\" \"=v\")\n-\t(unspec:VI48F\n-\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48F 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VPERMI2 0 \"register_operand\" \"=v,v\")\n+\t(unspec:VPERMI2\n+\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v,0\")\n+\t   (match_operand:VPERMI2 2 \"register_operand\" \"0,v\")\n+\t   (match_operand:VPERMI2 3 \"nonimmediate_operand\" \"vm,vm\")]\n \t  UNSPEC_VPERMT2))]\n   \"TARGET_AVX512F\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermt2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI1_AVX512VL\n-\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPERMT2))]\n-  \"TARGET_AVX512VBMI\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermt2var<mode>3<sd_maskz_name>\"\n-  [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VI2_AVX512VL\n-\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI2_AVX512VL 2 \"register_operand\" \"0\")\n-\t   (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPERMT2))]\n-  \"TARGET_AVX512BW\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\"\n+  \"@\n+   vpermt2<ssemodesuffix>\\t{%3, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %3}\n+   vpermi2<ssemodesuffix>\\t{%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_vpermt2var<mode>3_mask\"\n-  [(set (match_operand:VI48F 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI48F\n-\t  (unspec:VI48F\n+  [(set (match_operand:VPERMI2 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VPERMI2\n+\t  (unspec:VPERMI2\n \t    [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t    (match_operand:VI48F 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI48F 3 \"nonimmediate_operand\" \"vm\")]\n+\t    (match_operand:VPERMI2 2 \"register_operand\" \"0\")\n+\t    (match_operand:VPERMI2 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPERMT2)\n \t  (match_dup 2)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n@@ -18311,38 +18193,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_vpermt2var<mode>3_mask\"\n-  [(set (match_operand:VI1_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI1_AVX512VL\n-\t  (unspec:VI1_AVX512VL\n-\t    [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t    (match_operand:VI1_AVX512VL 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI1_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPERMT2)\n-\t  (match_dup 2)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512VBMI\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<avx512>_vpermt2var<mode>3_mask\"\n-  [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI2_AVX512VL\n-\t  (unspec:VI2_AVX512VL\n-\t    [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n-\t    (match_operand:VI2_AVX512VL 2 \"register_operand\" \"0\")\n-\t    (match_operand:VI2_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPERMT2)\n-\t  (match_dup 2)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512BW\"\n-  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_expand \"avx_vperm2f128<mode>3\"\n   [(set (match_operand:AVX256MODE2P 0 \"register_operand\")\n \t(unspec:AVX256MODE2P"}, {"sha": "8dbf3b5604dcbaac7d6c2e1730f55046bdf71b9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,5 +1,22 @@\n 2017-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82460\n+\t* gcc.target/i386/pr82460-1.c: New test.\n+\t* gcc.target/i386/pr82460-2.c: New test.\n+\t* gcc.target/i386/avx512f-vpermt2pd-1.c: Adjust scan-assembler*\n+\tregexps to allow vpermt2* to vpermi2* replacement or vice versa\n+\twhere possible.\n+\t* gcc.target/i386/avx512vl-vpermt2pd-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-vpermt2d-1.c: Likewise.\n+\t* gcc.target/i386/vect-pack-trunc-2.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vpermt2ps-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vpermt2q-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-vpermt2ps-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vpermt2d-1.c: Likewise.\n+\t* gcc.target/i386/avx512bw-vpermt2w-1.c: Likewise.\n+\t* gcc.target/i386/avx512vbmi-vpermt2b-1.c: Likewise.\n+\t* gcc.target/i386/avx512f-vpermt2q-1.c: Likewise.\n+\n \tPR target/82370\n \t* gcc.target/i386/pr82370.c: New test.\n "}, {"sha": "a734cb600ce676d5306aa07e383f4e3a31e629c7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermt2w-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } *\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } *\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2w\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "919cd217c98cb18d3b8e347c2e5004bb43a9690b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermt2d-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2d-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "c021efb3192acdc29d08be18b6d29a94a05a2660", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermt2pd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2pd-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "ffe177bf32099f2a9321540d02767a2beefaabea", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermt2ps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2ps-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "74bb4ed037cf00ea518239d248a13572a372052b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermt2q-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermt2q-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "24a0b9e3fce37c80ec43db0727ec91944098e6b0", "filename": "gcc/testsuite/gcc.target/i386/avx512vbmi-vpermt2b-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vbmi-vpermt2b-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vbmi -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 3 } } *\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 3 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 3 } } *\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2b\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "218650c6cc486599e8cc771198b33f2787996be1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermt2d-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2d-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2d\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "64bd30e40c334c5e9401829121e6b80a0d6fb881", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermt2pd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2pd-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "7af2dea6f9a44a52f5699ff87e630ce9763caf7f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermt2ps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2ps-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "0cbd8b5b2a3b3877595d4a0a799c0e71a6e33269", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpermt2q-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpermt2q-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpermt2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[ti]2q\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "6529c4a9b9e22b7140349dbf37f801fb6ab809aa", "filename": "gcc/testsuite/gcc.target/i386/pr82460-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-1.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/82460 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vbmi\" } */\n+/* { dg-final { scan-assembler-not {\\mvmovd} } } */\n+\n+#include <x86intrin.h>\n+\n+__m512i\n+f1 (__m512i x, __m512i y, char *z)\n+{\n+  return _mm512_permutex2var_epi32 (y, x, _mm512_loadu_si512 (z));\n+}\n+\n+__m512i\n+f2 (__m512i x, __m512i y, char *z)\n+{\n+  return _mm512_permutex2var_epi32 (x, y, _mm512_loadu_si512 (z));\n+}\n+\n+__m512i\n+f3 (__m512i x, __m512i y, __m512i z)\n+{\n+  return _mm512_permutex2var_epi8 (y, x, z);\n+}\n+\n+__m512i\n+f4 (__m512i x, __m512i y, __m512i z)\n+{\n+  return _mm512_permutex2var_epi8 (x, y, z);\n+}"}, {"sha": "4d965216b59cdccfe3f44210285f0f953ca8f574", "filename": "gcc/testsuite/gcc.target/i386/pr82460-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82460-2.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/82460 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512vbmi -mno-prefer-avx256\" } */\n+/* We want to reuse the permutation mask in the loop, so use vpermt2b rather\n+   than vpermi2b.  */\n+/* { dg-final { scan-assembler-not {\\mvpermi2b\\M} } } */\n+/* { dg-final { scan-assembler {\\mvpermt2b\\M} } } */\n+\n+void\n+foo (unsigned char *__restrict__ x, const unsigned short *__restrict__ y,\n+     unsigned long z)\n+{\n+  unsigned char *w = x + z;\n+  do\n+    *x++ = *y++ >> 8;\n+  while (x < w);\n+}"}, {"sha": "3503deaa9d9b4611609cbafe54a42381b06eb6ec", "filename": "gcc/testsuite/gcc.target/i386/vect-pack-trunc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5a6f30f2a3a9db37604195ff4b802779f83bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pack-trunc-2.c?ref=6ab5a6f30f2a3a9db37604195ff4b802779f83bc", "patch": "@@ -25,4 +25,4 @@ avx512bw_test ()\n       abort ();\n }\n \n-/* { dg-final { scan-assembler-times \"vpermi2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\\[it]2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */"}]}