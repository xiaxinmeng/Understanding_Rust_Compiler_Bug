{"sha": "18648e7b9f54c0cec4d4d865ff42b453b8de7101", "node_id": "C_kwDOANBUbNoAKDE4NjQ4ZTdiOWY1NGMwY2VjNGQ0ZDg2NWZmNDJiNDUzYjhkZTcxMDE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-29T14:37:38Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-29T15:35:52Z"}, "message": "Add support for the self path\n\nThis keyword is described in\nhttps://doc.rust-lang.org/std/keyword.self.html\n\nWhich allows it to refer to the current module when used as the first\nsegment. If the keyword is used as any other segment it leads to a\nconfusion between self the local parameter keyword in methods. Rustc\nemits a generic unresolved segment error in that senario which I have\nadopted here.\n\nFixes #1227", "tree": {"sha": "e81aeb3fa144b3cb85139c2d0eae4092d68db5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e81aeb3fa144b3cb85139c2d0eae4092d68db5e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18648e7b9f54c0cec4d4d865ff42b453b8de7101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18648e7b9f54c0cec4d4d865ff42b453b8de7101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18648e7b9f54c0cec4d4d865ff42b453b8de7101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18648e7b9f54c0cec4d4d865ff42b453b8de7101/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81abc8623cb75fa18315c65e94c5965ec36fdb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81abc8623cb75fa18315c65e94c5965ec36fdb54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81abc8623cb75fa18315c65e94c5965ec36fdb54"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "367c6d611e304498a9983dcc2b086d014a48c055", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=18648e7b9f54c0cec4d4d865ff42b453b8de7101", "patch": "@@ -50,6 +50,8 @@ class PathIdentSegment\n \n   std::string as_string () const { return segment_name; }\n \n+  Location get_locus () const { return locus; }\n+\n   bool is_super_segment () const { return as_string ().compare (\"super\") == 0; }\n   bool is_crate_segment () const { return as_string ().compare (\"crate\") == 0; }\n   bool is_lower_self () const { return as_string ().compare (\"self\") == 0; }\n@@ -616,6 +618,10 @@ class TypePathSegment\n     return get_ident_segment ().is_super_segment ();\n   }\n   bool is_big_self_seg () const { return get_ident_segment ().is_big_self (); }\n+  bool is_lower_self_seg () const\n+  {\n+    return get_ident_segment ().is_lower_self ();\n+  }\n };\n \n // Segment used in type path with generic args"}, {"sha": "c3631fd57eca13e15f4c91b97a171700e6474445", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=18648e7b9f54c0cec4d4d865ff42b453b8de7101", "patch": "@@ -59,6 +59,18 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       bool is_first_segment = i == 0;\n       resolved_node_id = UNKNOWN_NODEID;\n \n+      bool in_middle_of_path = i > 0;\n+      if (in_middle_of_path && segment.is_lower_self_seg ())\n+\t{\n+\t  // error[E0433]: failed to resolve: `self` in paths can only be used\n+\t  // in start position\n+\t  rust_error_at (segment.get_locus (),\n+\t\t\t \"failed to resolve: %<%s%> in paths can only be used \"\n+\t\t\t \"in start position\",\n+\t\t\t segment.as_string ().c_str ());\n+\t  return;\n+\t}\n+\n       NodeId crate_scope_id = resolver->peek_crate_module_scope ();\n       if (segment.is_crate_path_seg ())\n \t{\n@@ -170,6 +182,15 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \t    }\n \t  else\n \t    {\n+\t      if (segment.is_lower_self_seg ())\n+\t\t{\n+\t\t  module_scope_id = crate_scope_id;\n+\t\t  previous_resolved_node_id = module_scope_id;\n+\t\t  resolver->insert_resolved_name (segment.get_node_id (),\n+\t\t\t\t\t\t  module_scope_id);\n+\t\t  continue;\n+\t\t}\n+\n \t      rust_error_at (segment.get_locus (),\n \t\t\t     \"Cannot find path %<%s%> in this scope\",\n \t\t\t     segment.as_string ().c_str ());"}, {"sha": "7d7eac17311e00381f86bc6d3b855fdac8ab618a", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=18648e7b9f54c0cec4d4d865ff42b453b8de7101", "patch": "@@ -95,6 +95,18 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n       bool is_first_segment = i == 0;\n       resolved_node_id = UNKNOWN_NODEID;\n \n+      bool in_middle_of_path = i > 0;\n+      if (in_middle_of_path && segment->is_lower_self_seg ())\n+\t{\n+\t  // error[E0433]: failed to resolve: `self` in paths can only be used\n+\t  // in start position\n+\t  rust_error_at (segment->get_locus (),\n+\t\t\t \"failed to resolve: %<%s%> in paths can only be used \"\n+\t\t\t \"in start position\",\n+\t\t\t segment->as_string ().c_str ());\n+\t  return false;\n+\t}\n+\n       NodeId crate_scope_id = resolver->peek_crate_module_scope ();\n       if (segment->is_crate_path_seg ())\n \t{\n@@ -129,10 +141,7 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n \t      = static_cast<AST::TypePathSegmentGeneric *> (segment.get ());\n \t    if (s->has_generic_args ())\n \t      {\n-\t\tfor (auto &gt : s->get_generic_args ().get_type_args ())\n-\t\t  {\n-\t\t    ResolveType::go (gt.get ());\n-\t\t  }\n+\t\tResolveType::type_resolve_generic_args (s->get_generic_args ());\n \t      }\n \t  }\n \t  break;\n@@ -198,6 +207,17 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n \t    }\n \t  else\n \t    {\n+\t      if (segment->is_lower_self_seg ())\n+\t\t{\n+\t\t  // what is the current crate scope node id?\n+\t\t  module_scope_id = crate_scope_id;\n+\t\t  previous_resolved_node_id = module_scope_id;\n+\t\t  resolver->insert_resolved_name (segment->get_node_id (),\n+\t\t\t\t\t\t  module_scope_id);\n+\n+\t\t  continue;\n+\t\t}\n+\n \t      rust_error_at (segment->get_locus (),\n \t\t\t     \"failed to resolve TypePath: %s in this scope\",\n \t\t\t     segment->as_string ().c_str ());"}, {"sha": "425ba848fc049700a19211d8579186c63e4cec49", "filename": "gcc/testsuite/rust/compile/self-path1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs?ref=18648e7b9f54c0cec4d4d865ff42b453b8de7101", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options \"-w\" }\n+struct foo;\n+\n+fn bar() -> self::foo {\n+    crate::foo\n+}\n+\n+fn baz() {\n+    let a: foo = self::bar();\n+\n+    crate::bar();\n+}"}, {"sha": "b9b82cae5a6a502a6e6223976f8da8c5b0e7bc7b", "filename": "gcc/testsuite/rust/compile/self-path2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18648e7b9f54c0cec4d4d865ff42b453b8de7101/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs?ref=18648e7b9f54c0cec4d4d865ff42b453b8de7101", "patch": "@@ -0,0 +1,21 @@\n+// { dg-additional-options \"-w\" }\n+struct foo;\n+\n+fn bar() -> self::foo {\n+    crate::foo\n+}\n+\n+fn baz() {\n+    let a: foo = self::bar();\n+\n+    crate::bar();\n+\n+    crate::self::foo();\n+    // { dg-error \"failed to resolve: .self. in paths can only be used in start position\" \"\" { target *-*-* } .-1 }\n+}\n+\n+type a = foo;\n+type b = crate::foo;\n+type c = self::foo;\n+type d = crate::self::foo;\n+// { dg-error \"failed to resolve: .self. in paths can only be used in start position\" \"\" { target *-*-* } .-1 }"}]}