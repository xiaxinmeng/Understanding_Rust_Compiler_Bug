{"sha": "b6e7a7498732b83df61443c211b8d69454ad0b22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlN2E3NDk4NzMyYjgzZGY2MTQ0M2MyMTFiOGQ2OTQ1NGFkMGIyMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-05T08:14:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-05T08:14:07Z"}, "message": "aarch64: Reimplement vget_low* intrinsics\n\nWe can do better on the vget_low* intrinsics.\nCurrently they reinterpret their argument into a V2DI vector and extract the low \"lane\",\nreinterpreting that back into the shorter vector.\nThis is functionally correct and generates a sequence of subregs and a vec_select that, by itself,\ngets optimised away eventually.\nHowever it's bad when we want to use the result in a other SIMD operations.\nThen the subreg-vec_select-subreg combo blocks many combine patterns.\n\nThis patch reimplements them to emit a proper low vec_select from the start.\nIt generates much cleaner RTL and allows for more aggressive combinations, particularly\nwith the patterns that Jonathan has been pushing lately.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (get_low): Define builtin.\n\t* config/aarch64/aarch64-simd.md (aarch64_get_low<mode>): Define.\n\t* config/aarch64/arm_neon.h (__GET_LOW): Delete.\n\t(vget_low_f16): Reimplement using new builtin.\n\t(vget_low_f32): Likewise.\n\t(vget_low_f64): Likewise.\n\t(vget_low_p8): Likewise.\n\t(vget_low_p16): Likewise.\n\t(vget_low_p64): Likewise.\n\t(vget_low_s8): Likewise.\n\t(vget_low_s16): Likewise.\n\t(vget_low_s32): Likewise.\n\t(vget_low_s64): Likewise.\n\t(vget_low_u8): Likewise.\n\t(vget_low_u16): Likewise.\n\t(vget_low_u32): Likewise.\n\t(vget_low_u64): Likewise.", "tree": {"sha": "59812c9e666a19680aef716fccaff066146bff71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59812c9e666a19680aef716fccaff066146bff71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e7a7498732b83df61443c211b8d69454ad0b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e7a7498732b83df61443c211b8d69454ad0b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e7a7498732b83df61443c211b8d69454ad0b22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e7a7498732b83df61443c211b8d69454ad0b22/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072f20c555907cce38a424da47b6c1baa8330169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072f20c555907cce38a424da47b6c1baa8330169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072f20c555907cce38a424da47b6c1baa8330169"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "66420cf4f4b84b210c2ba7a9919d49d012cfc59f", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=b6e7a7498732b83df61443c211b8d69454ad0b22", "patch": "@@ -55,6 +55,9 @@\n   BUILTIN_VS (UNOP, ctz, 2, NONE)\n   BUILTIN_VB (UNOP, popcount, 2, NONE)\n \n+  /* Implemented by aarch64_get_low<mode>.  */\n+  BUILTIN_VQMOV (UNOP, get_low, 0, AUTO_FP)\n+\n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n   BUILTIN_VSDQ_I (BINOP, sqshl, 0, NONE)\n   BUILTIN_VSDQ_I (BINOP_UUS, uqshl, 0, NONE)"}, {"sha": "e730ff5f28e9c942ff083d905bb5ac2e9955e7e3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b6e7a7498732b83df61443c211b8d69454ad0b22", "patch": "@@ -297,6 +297,17 @@\n   \"TARGET_SIMD\"\n )\n \n+(define_expand \"aarch64_get_low<mode>\"\n+  [(match_operand:<VHALF> 0 \"register_operand\")\n+   (match_operand:VQMOV 1 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n+    emit_insn (gen_aarch64_get_half<mode> (operands[0], operands[1], lo));\n+    DONE;\n+  }\n+)\n+\n (define_insn_and_split \"aarch64_simd_mov_from_<mode>low\"\n   [(set (match_operand:<VHALF> 0 \"register_operand\" \"=w,?r\")\n         (vec_select:<VHALF>"}, {"sha": "67c7f2493893c22e571b6e9107f01fda72168399", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e7a7498732b83df61443c211b8d69454ad0b22/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=b6e7a7498732b83df61443c211b8d69454ad0b22", "patch": "@@ -6302,111 +6302,104 @@ vsetq_lane_u64 (uint64_t __elem, uint64x2_t __vec, const int __index)\n   return __aarch64_vset_lane_any (__elem, __vec, __index);\n }\n \n-#define __GET_LOW(__TYPE) \\\n-  uint64x2_t tmp = vreinterpretq_u64_##__TYPE (__a);  \\\n-  uint64x1_t lo = vcreate_u64 (vgetq_lane_u64 (tmp, 0));  \\\n-  return vreinterpret_##__TYPE##_u64 (lo);\n-\n __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_f16 (float16x8_t __a)\n {\n-  __GET_LOW (f16);\n+  return __builtin_aarch64_get_lowv8hf (__a);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_f32 (float32x4_t __a)\n {\n-  __GET_LOW (f32);\n+  return __builtin_aarch64_get_lowv4sf (__a);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_f64 (float64x2_t __a)\n {\n-  return (float64x1_t) {vgetq_lane_f64 (__a, 0)};\n+  return (float64x1_t) {__builtin_aarch64_get_lowv2df (__a)};\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_p8 (poly8x16_t __a)\n {\n-  __GET_LOW (p8);\n+  return (poly8x8_t) __builtin_aarch64_get_lowv16qi ((int8x16_t) __a);\n }\n \n __extension__ extern __inline poly16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_p16 (poly16x8_t __a)\n {\n-  __GET_LOW (p16);\n+  return (poly16x4_t) __builtin_aarch64_get_lowv8hi ((int16x8_t) __a);\n }\n \n __extension__ extern __inline poly64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_p64 (poly64x2_t __a)\n {\n-  __GET_LOW (p64);\n+  return (poly64x1_t) __builtin_aarch64_get_lowv2di ((int64x2_t) __a);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_s8 (int8x16_t __a)\n {\n-  __GET_LOW (s8);\n+  return  __builtin_aarch64_get_lowv16qi (__a);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_s16 (int16x8_t __a)\n {\n-  __GET_LOW (s16);\n+  return  __builtin_aarch64_get_lowv8hi (__a);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_s32 (int32x4_t __a)\n {\n-  __GET_LOW (s32);\n+  return  __builtin_aarch64_get_lowv4si (__a);\n }\n \n __extension__ extern __inline int64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_s64 (int64x2_t __a)\n {\n-  __GET_LOW (s64);\n+  return  (int64x1_t) {__builtin_aarch64_get_lowv2di (__a)};\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_u8 (uint8x16_t __a)\n {\n-  __GET_LOW (u8);\n+  return (uint8x8_t) __builtin_aarch64_get_lowv16qi ((int8x16_t) __a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_u16 (uint16x8_t __a)\n {\n-  __GET_LOW (u16);\n+  return (uint16x4_t) __builtin_aarch64_get_lowv8hi ((int16x8_t) __a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_u32 (uint32x4_t __a)\n {\n-  __GET_LOW (u32);\n+  return (uint32x2_t) __builtin_aarch64_get_lowv4si ((int32x4_t) __a);\n }\n \n __extension__ extern __inline uint64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vget_low_u64 (uint64x2_t __a)\n {\n-  return vcreate_u64 (vgetq_lane_u64 (__a, 0));\n+  return (uint64x1_t) {__builtin_aarch64_get_lowv2di ((int64x2_t) __a)};\n }\n \n-#undef __GET_LOW\n-\n #define __GET_HIGH(__TYPE)\t\t\t\t\t\\\n   uint64x2_t tmp = vreinterpretq_u64_##__TYPE (__a);\t\t\\\n   uint64x1_t hi = vcreate_u64 (vgetq_lane_u64 (tmp, 1));\t\\"}]}