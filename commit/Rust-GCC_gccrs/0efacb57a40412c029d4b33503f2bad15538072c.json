{"sha": "0efacb57a40412c029d4b33503f2bad15538072c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmYWNiNTdhNDA0MTJjMDI5ZDRiMzM1MDNmMmJhZDE1NTM4MDcyYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:41:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:41:31Z"}, "message": "[AArch64][12/14] Target attributes and target pragmas tests\n\n\t* gcc.target/aarch64/pragma_cpp_predefs_1.c: New test.\n\t* gcc.target/aarch64/target_attr_1.c: Likewise.\n\t* gcc.target/aarch64/target_attr_2.c: Likewise.\n\t* gcc.target/aarch64/target_attr_3.c: Likewise.\n\t* gcc.target/aarch64/target_attr_4.c: Likewise.\n\t* gcc.target/aarch64/target_attr_5.c: Likewise.\n\t* gcc.target/aarch64/target_attr_6.c: Likewise.\n\t* gcc.target/aarch64/target_attr_7.c: Likewise.\n\t* gcc.target/aarch64/target_attr_8.c: Likewise.\n\t* gcc.target/aarch64/target_attr_9.c: Likewise.\n\t* gcc.target/aarch64/target_attr_10.c: Likewise.\n\t* gcc.target/aarch64/target_attr_11.c: Likewise.\n\t* gcc.target/aarch64/target_attr_12.c: Likewise.\n\t* gcc.target/aarch64/target_attr_13.c: Likewise.\n\t* gcc.target/aarch64/target_attr_14.c: Likewise.\n\t* gcc.target/aarch64/target_attr_15.c: Likewise.\n\nFrom-SVN: r226565", "tree": {"sha": "57482a6ee1724a2d13fd069842d9b91391d646b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57482a6ee1724a2d13fd069842d9b91391d646b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0efacb57a40412c029d4b33503f2bad15538072c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efacb57a40412c029d4b33503f2bad15538072c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efacb57a40412c029d4b33503f2bad15538072c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efacb57a40412c029d4b33503f2bad15538072c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e95a988adae82e72ad88f61d3bded0f12fd2152c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95a988adae82e72ad88f61d3bded0f12fd2152c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95a988adae82e72ad88f61d3bded0f12fd2152c"}], "stats": {"total": 592, "additions": 592, "deletions": 0}, "files": [{"sha": "37b41687abafd1edc498ac50d484786791d7abc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -1,3 +1,22 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/pragma_cpp_predefs_1.c: New test.\n+\t* gcc.target/aarch64/target_attr_1.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_2.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_3.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_4.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_5.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_6.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_7.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_8.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_9.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_10.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_11.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_12.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_13.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_14.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_15.c: Likewise.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/target_attr_crypto_ice_1.c: New test."}, {"sha": "bfb044f5d145636d4d2cc731a38bc6e5455e0fb9", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_1.c", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_1.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,255 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8-a+crypto\" } */\n+\n+/* Test that pragma option pushing and popping works.\n+   Also that CPP predefines redefinitions on #pragma works.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+nofp+nosimd\")\n+#ifdef __ARM_FEATURE_FMA\n+#error \"__ARM_FEATURE_FMA is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+fp+nosimd\")\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+fp+simd\")\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-a+fp+simd+crypto\")\n+\n+#ifndef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is not defined but should be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+/* And again, but using cpu=.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"cpu=cortex-a53+nofp+nosimd\")\n+#ifdef __ARM_FEATURE_FMA\n+#error \"__ARM_FEATURE_FMA is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"cpu=cortex-a53+fp+nosimd\")\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"cpu=cortex-a53+fp+simd+nocrypto\")\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"cpu=cortex-a53+fp+simd+crypto\")\n+\n+#ifndef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is not defined but should be!\"\n+#endif\n+\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+/* And again, but using just the ISA extensions.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+nofp\")\n+#ifdef __ARM_FEATURE_FMA\n+#error \"__ARM_FEATURE_FMA is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+fp+nosimd\")\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+fp+simd+nocrypto\")\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+fp+simd+crypto\")\n+\n+#ifndef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is not defined but should be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_NEON\n+#error \"__ARM_NEON is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+\n+#pragma GCC pop_options\n+\n+#ifndef __ARM_FP\n+#error \"__ARM_FP is not defined but should be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+/* Make sure that general-regs-only works too.  */\n+#pragma GCC push_options\n+#pragma GCC target (\"general-regs-only\")\n+#ifdef __ARM_FEATURE_FMA\n+#error \"__ARM_FEATURE_FMA is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FP\n+#error \"__ARM_FP is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_NEON\n+#error \"__ARM_NEON is defined but should not be!\"\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRYPTO\n+#error \"__ARM_FEATURE_CRYPTO is defined but should not be!\"\n+#endif\n+\n+#pragma GCC pop_options\n+\n+/* Also check that crc re-defines work.  */\n+#pragma GCC target (\"+nocrc\")\n+#ifdef __ARM_FEATURE_CRC32\n+#error \"__ARM_FEATURE_CRC32 is defined but should not be!\"\n+#endif\n+\n+#pragma GCC target (\"+crc\")\n+#ifndef __ARM_FEATURE_CRC32\n+#error \"__ARM_FEATURE_CRC32 is not defined but should be!\"\n+#endif\n+\n+int\n+foo (int a)\n+{\n+  return a;\n+}"}, {"sha": "b1d52a6bbe47e97260d7afa10df22e1805c040f6", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_1.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mcpu=thunderx -save-temps\" } */\n+\n+/* Test that cpu attribute overrides the command-line -mcpu.  */\n+\n+__attribute__ ((target (\"cpu=cortex-a72.cortex-a53\")))\n+int\n+foo (int a)\n+{\n+  return a + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"//.tune cortex-a72.cortex-a53\" } } */\n+/* { dg-final { scan-assembler-not \"thunderx\" } } */"}, {"sha": "b2c48c4524b611f6e9832eda4d729af10fc48844", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_10.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_10.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8-a+simd\" } */\n+\n+/* Using a SIMD intrinsic from a function tagged with nosimd should fail\n+   due to inlining rules.  */\n+\n+#include \"arm_neon.h\"\n+\n+__attribute__ ((target (\"+nosimd\")))\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, uint8x16_t c)\n+{\n+  return vbslq_u8 (a, b, c); /* { dg-error \"called from here\" } */\n+}\n+\n+/* { dg-error \"inlining failed in call to always_inline\" \"\" { target *-*-* } 0 } */"}, {"sha": "7cfb826fc44a6069035743fa8f49f1430d08bd74", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_11.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+/* Reject the negated form of non-negatable attributes.  */\n+\n+__attribute__ ((target (\"no-general-regs-only\")))\n+int\n+foo (int a)\n+{\n+  return a + 1;\n+}\n+\n+/* { dg-error \"does not allow a negated form\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"is invalid\" \"\" { target *-*-* } 0 } */"}, {"sha": "39cb996400308ceba9e89a5bd9de21e3219d324c", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_12.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_12.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+/* Reject arguments to attributes that do not accept any.  */\n+\n+__attribute__ ((target (\"general-regs-only=+crc\")))\n+int\n+foo (int a)\n+{\n+  return a + 1;\n+}\n+\n+/* { dg-error \"does not accept an argument\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"is invalid\" \"\" { target *-*-* } 0 } */"}, {"sha": "0f81e9aa587dce0986929e2ef719f07902a479af", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_13.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_13.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -march=armv8-a+crc+crypto\" } */\n+\n+#include \"arm_acle.h\"\n+\n+/* Make sure that 'crypto' is not required to compile an intrinsic\n+   from arm_acle.h in a non-crypto function.  Tests that arm_acle.h\n+   properly clears the architectural features in its initial target\n+   pragma.  */\n+\n+__attribute__ ((target (\"+crc+nocrypto\")))\n+int\n+foo (uint32_t a, uint8_t b)\n+{\n+  return __crc32b (a, b);\n+}"}, {"sha": "a4e481d2dc529b961e7238e666aec3756cdac69d", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_14.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_14.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+/* Inlining non-strict-align functions into strict-align\n+   functions is allowed.  */\n+\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"strict-align\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"bl.*bar\" } } */"}, {"sha": "02091c6c542b98b61156409b437d142169348138", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_15.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-march=armv8-a+crypto -save-temps\" } */\n+\n+/* Check that \"+nothing\" clears the ISA flags.  */\n+\n+__attribute__ ((target (\"+nothing\")))\n+int\n+foo (int a)\n+{\n+  return a + 1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\+fp\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\+crypto\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\+simd\" } } */"}, {"sha": "39bb6e7dd364c173993e6e363b5d11321380642a", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_2.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -mcpu=cortex-a57 -ftree-vectorize -fdump-tree-vect-all\" } */\n+\n+/* The various ways to turn off simd availability should\n+   turn off vectorization.  */\n+\n+__attribute__ ((target (\"+nosimd\")))\n+int\n+baz (int *a)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] += 5;\n+}\n+\n+__attribute__ ((target (\"arch=armv8-a+nosimd\")))\n+int\n+baz2 (int *a)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] += 5;\n+}\n+\n+__attribute__ ((target (\"cpu=cortex-a53+nosimd\")))\n+int\n+baz3 (int *a)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] += 5;\n+}\n+\n+__attribute__ ((target (\"general-regs-only\")))\n+int\n+baz4 (int *a)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] += 5;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "50e52520ef0d1082681661999cb034f01ffc3fab", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-fix-cortex-a53-835769 -save-temps\" } */\n+\n+/* Check that the attribute overrides the command line option\n+   and the fix is applied once.  */\n+\n+__attribute__ ((target (\"fix-cortex-a53-835769\")))\n+unsigned long\n+test (unsigned long a, double b, unsigned long c,\n+      unsigned long d, unsigned long *e)\n+{\n+  double result;\n+  volatile unsigned long tmp = *e;\n+  __asm__ __volatile (\"// %0, %1\"\n+\t\t\t: \"=w\" (result)\n+\t\t\t: \"0\" (b)\n+\t\t\t:    /* No clobbers.  */);\n+  return c * d + d;\n+}\n+\n+unsigned long\n+test2 (unsigned long a, double b, unsigned long c,\n+       unsigned long d, unsigned long *e)\n+{\n+  double result;\n+  volatile unsigned long tmp = *e;\n+  __asm__ __volatile (\"// %0, %1\"\n+\t\t\t: \"=w\" (result)\n+\t\t\t: \"0\" (b)\n+\t\t\t:   /* No clobbers.  */);\n+  return c * d + d;\n+}\n+\n+/* { dg-final { scan-assembler-times \"between mem op and\" 1 } } */"}, {"sha": "d98ba42303f73f2afbe793499793359f615fd2f2", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_4.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -march=armv8-a+nocrc -save-temps\" } */\n+\n+#include \"arm_acle.h\"\n+\n+/* Check that enabling an ISA feature using an attribute in a file\n+   compiled without that attribute works.  */\n+\n+__attribute__ ((target (\"+crc\")))\n+uint32_t\n+foo (uint32_t a, uint8_t b)\n+{\n+  return __crc32b (a, b);\n+}\n+\n+__attribute__ ((target (\"arch=armv8-a+crc\")))\n+uint32_t\n+fooarch (uint32_t a, uint8_t b)\n+{\n+  return __crc32b (a, b);\n+}\n+\n+__attribute__ ((target (\"cpu=cortex-a53+crc\")))\n+uint32_t\n+foocpu (uint32_t a, uint8_t b)\n+{\n+  return __crc32b (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crc32b\\tw..?, w..?, w..?\\n\" 3 } } */"}, {"sha": "4fc0709be81d2ca67c56ac1feda1db0d90e9f822", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_5.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+/* Make sure that bar is inlined into bam.  */\n+\n+__attribute__ ((target (\"arch=armv8-a+nocrc\")))\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"cpu=cortex-a53+nocrc\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"bl.*bar\" } } */"}, {"sha": "dd55a079fad2de03cf18caa5426104243fcd77b5", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_6.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+/* Inlining strict-align functions into non-strict align\n+   functions is not allowed.  */\n+\n+__attribute__ ((target (\"strict-align\")))\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+/* { dg-final { scan-assembler \"bl.*bar\" } } */"}, {"sha": "32a840378ab4cad8cc90b896be112c7c46bc01a8", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_7.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=thunderx -save-temps\" } */\n+\n+/* Make sure that #pragma overrides command line option and\n+   target attribute overrides the pragma.  */\n+\n+#pragma GCC target (\"cpu=xgene1\")\n+\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"tune=cortex-a53\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"//.tune xgene1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"//.tune cortex-a53\" 1 } } */\n+/* { dg-final { scan-assembler-not \"thunderx\" } } */"}, {"sha": "32d173cb25bd136d7410352ece4fc457c3677662", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_8.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+/* bar has a subset set of the architectural flags of bam.\n+   Inlining should be allowed.  */\n+\n+__attribute__ ((target (\"arch=armv8-a+nocrc\")))\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"arch=armv8-a+crc\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"bl.*bar\" } } */"}, {"sha": "3da90a152d2c62c470ab65babb11aeb29faf5aee", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_9.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efacb57a40412c029d4b33503f2bad15538072c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_9.c?ref=0efacb57a40412c029d4b33503f2bad15538072c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+/* bar does not have a subset of architectural flags of bam.\n+   Inlining should be rejected.  */\n+\n+__attribute__ ((target (\"arch=armv8-a+crc\")))\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"arch=armv8-a+nocrc\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+\n+/* { dg-final { scan-assembler \"bl.*bar\" } } */"}]}