{"sha": "2781287255a16b6f2db18c68d02c3f40004332a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4MTI4NzI1NWExNmI2ZjJkYjE4YzY4ZDAyYzNmNDAwMDQzMzJhNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-05T14:44:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-05T14:44:56Z"}, "message": "PR libstdc++/89090 avoid C++17 features in C++11/C++14 code\n\nAlthough GCC and Clang both allow these features pre-C++17 in system\nheaders, Clang does issue warnings with -Wsystem-headers. It can also\ncomplicate bisection and/or testcase reduction if # line markers are\nstripped, because the code won't be known to come from system headers.\n\n\tPR libstdc++/89090\n\t* include/bits/stl_uninitialized.h (__relocate_a_1): Make unused\n\tparameter unnamed. Add message to static assertion.\n\t* include/bits/vector.tcc (vector::reserve, vector::_M_realloc_insert)\n\t(vector::_M_default_append): Use _GLIBCXX17_CONSTEXPR for if constexpr\n\tin C++11 code.\n\nFrom-SVN: r268536", "tree": {"sha": "63071e5f3fce4b2d7b749df5647e2a331a5c5a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63071e5f3fce4b2d7b749df5647e2a331a5c5a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2781287255a16b6f2db18c68d02c3f40004332a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2781287255a16b6f2db18c68d02c3f40004332a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2781287255a16b6f2db18c68d02c3f40004332a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2781287255a16b6f2db18c68d02c3f40004332a7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b52fcaf50dadbed3ebd0e8e9805a61644231e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b52fcaf50dadbed3ebd0e8e9805a61644231e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b52fcaf50dadbed3ebd0e8e9805a61644231e2"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "ff847f86d6a56cd1af2e8441754c2ad98995177b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2781287255a16b6f2db18c68d02c3f40004332a7", "patch": "@@ -1,3 +1,12 @@\n+2019-02-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/89090\n+\t* include/bits/stl_uninitialized.h (__relocate_a_1): Make unused\n+\tparameter unnamed. Add message to static assertion.\n+\t* include/bits/vector.tcc (vector::reserve, vector::_M_realloc_insert)\n+\t(vector::_M_default_append): Use _GLIBCXX17_CONSTEXPR for if constexpr\n+\tin C++11 code.\n+\n 2019-02-05  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/87106"}, {"sha": "0d42b253df18bf1c719031e1341cf3a37bf9c66d", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=2781287255a16b6f2db18c68d02c3f40004332a7", "patch": "@@ -904,7 +904,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename _Up>\n     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>\n     __relocate_a_1(_Tp* __first, _Tp* __last,\n-\t\t   _Tp* __result, allocator<_Up>& __alloc) noexcept\n+\t\t   _Tp* __result, allocator<_Up>&) noexcept\n     {\n       ptrdiff_t __count = __last - __first;\n       if (__count > 0)\n@@ -925,7 +925,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_ValueType;\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType2;\n-      static_assert(std::is_same<_ValueType, _ValueType2>::value);\n+      static_assert(std::is_same<_ValueType, _ValueType2>::value,\n+\t  \"relocation is only possible for values of the same type\");\n       _ForwardIterator __cur = __result;\n       for (; __first != __last; ++__first, (void)++__cur)\n \tstd::__relocate_object_a(std::__addressof(*__cur),"}, {"sha": "54c09774b15e7673f696e037ba224d651dbcc3b5", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2781287255a16b6f2db18c68d02c3f40004332a7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=2781287255a16b6f2db18c68d02c3f40004332a7", "patch": "@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  const size_type __old_size = size();\n \t  pointer __tmp;\n #if __cplusplus >= 201103L\n-\t  if constexpr (_S_use_relocate())\n+\t  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())\n \t    {\n \t      __tmp = this->_M_allocate(__n);\n \t      std::__relocate_a(this->_M_impl._M_start,\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  __new_finish = pointer();\n \n #if __cplusplus >= 201103L\n-\t  if constexpr (_S_use_relocate())\n+\t  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())\n \t    {\n \t      __new_finish\n \t\t= std::__relocate_a\n@@ -498,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  __throw_exception_again;\n \t}\n #if __cplusplus >= 201103L\n-      if constexpr (!_S_use_relocate())\n+      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())\n #endif\n \tstd::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());\n       _GLIBCXX_ASAN_ANNOTATE_REINIT;\n@@ -638,8 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      const size_type __len =\n \t\t_M_check_len(__n, \"vector::_M_default_append\");\n \t      pointer __new_start(this->_M_allocate(__len));\n-#if __cplusplus >= 201103L\n-\t      if constexpr (_S_use_relocate())\n+\t      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())\n \t\t{\n \t\t  __try\n \t\t    {\n@@ -656,7 +655,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t    __new_start, _M_get_Tp_allocator());\n \t\t}\n \t      else\n-#endif\n \t\t{\n \t\t  pointer __destroy_from = pointer();\n \t\t  __try"}]}