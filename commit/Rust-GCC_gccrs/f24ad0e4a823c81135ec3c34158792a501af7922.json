{"sha": "f24ad0e4a823c81135ec3c34158792a501af7922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0YWQwZTRhODIzYzgxMTM1ZWMzYzM0MTU4NzkyYTUwMWFmNzkyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T18:59:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T18:59:11Z"}, "message": "(try_combine): Remove decls of unused variables.\n\n(subst): Remove decls of unused variables ORIG_CODE.\n(simplify_if_then_else): Remove decl of unused variable C2.\n(make_compound_operation): Remove decl of unused variable COUNT.\n(known_cond): Remove decl of unused variable NEW.\n(make_field_assignment): Remove decl of unused variable OURDEST.\n(simplify_and_const_int): Remove decls of unused variables.\n(simplify_shift_const): Remove decl of unused variable INNER.\n\nFrom-SVN: r6876", "tree": {"sha": "d3a5468a9d071241a1f4e1dd014cd240051ead96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a5468a9d071241a1f4e1dd014cd240051ead96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f24ad0e4a823c81135ec3c34158792a501af7922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24ad0e4a823c81135ec3c34158792a501af7922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24ad0e4a823c81135ec3c34158792a501af7922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24ad0e4a823c81135ec3c34158792a501af7922/comments", "author": null, "committer": null, "parents": [{"sha": "0dd4a7035f80cae3e1c80553efc9dfd006094903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4a7035f80cae3e1c80553efc9dfd006094903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd4a7035f80cae3e1c80553efc9dfd006094903"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "49b3b80762f94a994c692825681b37f644244a5b", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f24ad0e4a823c81135ec3c34158792a501af7922/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f24ad0e4a823c81135ec3c34158792a501af7922/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f24ad0e4a823c81135ec3c34158792a501af7922", "patch": "@@ -2006,7 +2006,6 @@ try_combine (i3, i2, i1)\n   /* If we had to change another insn, make sure it is valid also.  */\n   if (undobuf.other_insn)\n     {\n-      rtx other_notes = REG_NOTES (undobuf.other_insn);\n       rtx other_pat = PATTERN (undobuf.other_insn);\n       rtx new_other_notes;\n       rtx note, next;\n@@ -2056,8 +2055,6 @@ try_combine (i3, i2, i1)\n     rtx i3notes, i2notes, i1notes = 0;\n     rtx i3links, i2links, i1links = 0;\n     rtx midnotes = 0;\n-    int all_adjacent = (next_real_insn (i2) == i3\n-\t\t\t&& (i1 == 0 || next_real_insn (i1) == i2));\n     register int regno;\n     /* Compute which registers we expect to eliminate.  */\n     rtx elim_i2 = (newi2pat || i2dest_in_i2src || i2dest_in_i1src\n@@ -2743,7 +2740,7 @@ subst (x, from, to, in_dest, unique_copy)\n      int in_dest;\n      int unique_copy;\n {\n-  register enum rtx_code code = GET_CODE (x), orig_code = code;\n+  register enum rtx_code code = GET_CODE (x);\n   enum machine_mode op0_mode = VOIDmode;\n   register char *fmt;\n   register int len, i;\n@@ -4059,7 +4056,7 @@ simplify_if_then_else (x)\n       rtx cond_op1 = XEXP (cond, 1);\n       enum rtx_code op, extend_op = NIL;\n       enum machine_mode m = mode;\n-      rtx z = 0, c1, c2;\n+      rtx z = 0, c1;\n \n       if (f == const0_rtx)\n \treturn gen_binary (MULT, mode, gen_binary (true_code, mode, cond_op0,\n@@ -5279,7 +5276,7 @@ make_compound_operation (x, in_code)\n   enum machine_mode mode = GET_MODE (x);\n   int mode_width = GET_MODE_BITSIZE (mode);\n   enum rtx_code next_code;\n-  int i, count;\n+  int i;\n   rtx new = 0;\n   rtx tem;\n   char *fmt;\n@@ -6218,7 +6215,7 @@ known_cond (x, cond, reg, val)\n      rtx reg, val;\n {\n   enum rtx_code code = GET_CODE (x);\n-  rtx new, temp;\n+  rtx temp;\n   char *fmt;\n   int i, j;\n \n@@ -6304,7 +6301,6 @@ make_field_assignment (x)\n {\n   rtx dest = SET_DEST (x);\n   rtx src = SET_SRC (x);\n-  rtx ourdest;\n   rtx assign;\n   HOST_WIDE_INT c1;\n   int pos, len;\n@@ -6545,8 +6541,6 @@ simplify_and_const_int (x, mode, varop, constop)\n      rtx varop;\n      unsigned HOST_WIDE_INT constop;\n {\n-  register enum machine_mode tmode;\n-  register rtx temp;\n   unsigned HOST_WIDE_INT nonzero;\n   int i;\n \n@@ -7692,7 +7686,6 @@ simplify_shift_const (x, code, result_mode, varop, count)\n \t      int first_count = INTVAL (XEXP (varop, 1));\n \t      unsigned HOST_WIDE_INT mask;\n \t      rtx mask_rtx;\n-\t      rtx inner;\n \n \t      if (first_code == LSHIFT)\n \t\tfirst_code = ASHIFT;"}]}