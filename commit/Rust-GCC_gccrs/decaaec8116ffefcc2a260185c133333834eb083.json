{"sha": "decaaec8116ffefcc2a260185c133333834eb083", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjYWFlYzgxMTZmZmVmY2MyYTI2MDE4NWMxMzMzMzM4MzRlYjA4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-05-21T08:04:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-21T08:04:03Z"}, "message": "re PR middle-end/61252 (Invalid code produced for omp  simd reduction(min:var) where var is reference)\n\n\tPR middle-end/61252\n\t* omp-low.c (handle_simd_reference): New function.\n\t(lower_rec_input_clauses): Use it.  Defer adding reference\n\tinitialization even for reduction without placeholder if in simd,\n\thandle it properly later on.\n\n\t* testsuite/libgomp.c++/simd-9.C: New test.\n\nFrom-SVN: r210679", "tree": {"sha": "83ee15107981de3b2fc88d6ca0feff25cb45f4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ee15107981de3b2fc88d6ca0feff25cb45f4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/decaaec8116ffefcc2a260185c133333834eb083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decaaec8116ffefcc2a260185c133333834eb083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decaaec8116ffefcc2a260185c133333834eb083", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decaaec8116ffefcc2a260185c133333834eb083/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3d96270fc4d1f16fbb905049e16cf39152c9baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d96270fc4d1f16fbb905049e16cf39152c9baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d96270fc4d1f16fbb905049e16cf39152c9baa"}], "stats": {"total": 132, "additions": 108, "deletions": 24}, "files": [{"sha": "f167e76e14007a8aa4c0ad6042f82ec4ebc45c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decaaec8116ffefcc2a260185c133333834eb083/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decaaec8116ffefcc2a260185c133333834eb083/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=decaaec8116ffefcc2a260185c133333834eb083", "patch": "@@ -1,3 +1,11 @@\n+2014-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/61252\n+\t* omp-low.c (handle_simd_reference): New function.\n+\t(lower_rec_input_clauses): Use it.  Defer adding reference\n+\tinitialization even for reduction without placeholder if in simd,\n+\thandle it properly later on.\n+\n 2014-05-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR tree-optimization/60899"}, {"sha": "95b0e5273d225636304c460a9ee3bca01b31ed46", "filename": "gcc/omp-low.c", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decaaec8116ffefcc2a260185c133333834eb083/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decaaec8116ffefcc2a260185c133333834eb083/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=decaaec8116ffefcc2a260185c133333834eb083", "patch": "@@ -2998,6 +2998,27 @@ lower_rec_simd_input_clauses (tree new_var, omp_context *ctx, int &max_vf,\n   return true;\n }\n \n+/* Helper function of lower_rec_input_clauses.  For a reference\n+   in simd reduction, add an underlying variable it will reference.  */\n+\n+static void\n+handle_simd_reference (location_t loc, tree new_vard, gimple_seq *ilist)\n+{\n+  tree z = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (new_vard)));\n+  if (TREE_CONSTANT (z))\n+    {\n+      const char *name = NULL;\n+      if (DECL_NAME (new_vard))\n+\tname = IDENTIFIER_POINTER (DECL_NAME (new_vard));\n+\n+      z = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (new_vard)), name);\n+      gimple_add_tmp_var (z);\n+      TREE_ADDRESSABLE (z) = 1;\n+      z = build_fold_addr_expr_loc (loc, z);\n+      gimplify_assign (new_vard, z, ilist);\n+    }\n+}\n+\n /* Generate code to implement the input clauses, FIRSTPRIVATE and COPYIN,\n    from the receiver (aka child) side and initializers for REFERENCE_TYPE\n    private variables.  Initialization statements go in ILIST, while calls\n@@ -3189,13 +3210,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t}\n \t      else if (TREE_CONSTANT (x))\n \t\t{\n-\t\t  /* For reduction with placeholder in SIMD loop,\n-\t\t     defer adding the initialization of the reference,\n-\t\t     because if we decide to use SIMD array for it,\n-\t\t     the initilization could cause expansion ICE.  */\n-\t\t  if (c_kind == OMP_CLAUSE_REDUCTION\n-\t\t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c)\n-\t\t      && is_simd)\n+\t\t  /* For reduction in SIMD loop, defer adding the\n+\t\t     initialization of the reference, because if we decide\n+\t\t     to use SIMD array for it, the initilization could cause\n+\t\t     expansion ICE.  */\n+\t\t  if (c_kind == OMP_CLAUSE_REDUCTION && is_simd)\n \t\t    x = NULL_TREE;\n \t\t  else\n \t\t    {\n@@ -3524,23 +3543,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t     But if they aren't used, we need to emit the deferred\n \t\t     initialization now.  */\n \t\t  else if (is_reference (var) && is_simd)\n-\t\t    {\n-\t\t      tree z\n-\t\t\t= TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (new_vard)));\n-\t\t      if (TREE_CONSTANT (z))\n-\t\t\t{\n-\t\t\t  const char *name = NULL;\n-\t\t\t  if (DECL_NAME (var))\n-\t\t\t    name = IDENTIFIER_POINTER (DECL_NAME (new_vard));\n-\n-\t\t\t  z = create_tmp_var_raw\n-\t\t\t\t(TREE_TYPE (TREE_TYPE (new_vard)), name);\n-\t\t\t  gimple_add_tmp_var (z);\n-\t\t\t  TREE_ADDRESSABLE (z) = 1;\n-\t\t\t  z = build_fold_addr_expr_loc (clause_loc, z);\n-\t\t\t  gimplify_assign (new_vard, z, ilist);\n-\t\t\t}\n-\t\t    }\n+\t\t    handle_simd_reference (clause_loc, new_vard, ilist);\n \t\t  x = lang_hooks.decls.omp_clause_default_ctor\n \t\t\t\t(c, new_var, unshare_expr (x));\n \t\t  if (x)\n@@ -3573,6 +3576,13 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  if (code == MINUS_EXPR)\n \t\t    code = PLUS_EXPR;\n \n+\t\t  tree new_vard = new_var;\n+\t\t  if (is_simd && is_reference (var))\n+\t\t    {\n+\t\t      gcc_assert (TREE_CODE (new_var) == MEM_REF);\n+\t\t      new_vard = TREE_OPERAND (new_var, 0);\n+\t\t      gcc_assert (DECL_P (new_vard));\n+\t\t    }\n \t\t  if (is_simd\n \t\t      && lower_rec_simd_input_clauses (new_var, ctx, max_vf,\n \t\t\t\t\t\t       idx, lane, ivar, lvar))\n@@ -3584,9 +3594,18 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t      x = build2 (code, TREE_TYPE (ref), ref, ivar);\n \t\t      ref = build_outer_var_ref (var, ctx);\n \t\t      gimplify_assign (ref, x, &llist[1]);\n+\n+\t\t      if (new_vard != new_var)\n+\t\t\t{\n+\t\t\t  SET_DECL_VALUE_EXPR (new_vard,\n+\t\t\t\t\t       build_fold_addr_expr (lvar));\n+\t\t\t  DECL_HAS_VALUE_EXPR_P (new_vard) = 1;\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {\n+\t\t      if (is_reference (var) && is_simd)\n+\t\t\thandle_simd_reference (clause_loc, new_vard, ilist);\n \t\t      gimplify_assign (new_var, x, ilist);\n \t\t      if (is_simd)\n \t\t\t{"}, {"sha": "45daf0e6597c65200800ba33182cdbede88ff9dd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decaaec8116ffefcc2a260185c133333834eb083/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decaaec8116ffefcc2a260185c133333834eb083/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=decaaec8116ffefcc2a260185c133333834eb083", "patch": "@@ -1,3 +1,8 @@\n+2014-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/61252\n+\t* testsuite/libgomp.c++/simd-9.C: New test.\n+\n 2014-05-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* libgomp.texi (Runitme Library Routines): Remove multiple @menu."}, {"sha": "3c567b31c3eb37f3568f01cab5e24fce4eb097e1", "filename": "libgomp/testsuite/libgomp.c++/simd-9.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decaaec8116ffefcc2a260185c133333834eb083/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decaaec8116ffefcc2a260185c133333834eb083/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fsimd-9.C?ref=decaaec8116ffefcc2a260185c133333834eb083", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+extern \"C\" void abort ();\n+int a[1024] __attribute__((aligned (32))) = { 1 };\n+#pragma omp declare reduction (foo:int:omp_out += omp_in) \\\n+\t\t    initializer (omp_priv = 0)\n+\n+__attribute__((noinline, noclone)) void\n+foo (int &u, int &v)\n+{\n+  int i;\n+  #pragma omp simd aligned(a : 32) reduction(foo:u) reduction(+:v)\n+  for (i = 0; i < 1024; i++)\n+    {\n+      int x = a[i];\n+      u += x;\n+      v += x;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (int &u, int &v)\n+{\n+  int i;\n+  #pragma omp simd aligned(a : 32) reduction(foo:u) reduction(+:v) \\\n+\t\t   safelen(1)\n+  for (i = 0; i < 1024; i++)\n+    {\n+      int x = a[i];\n+      u += x;\n+      v += x;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    a[i] = (i & 31) + (i / 128);\n+  int u = 0, v = 0;\n+  foo (u, v);\n+  if (u != 19456 || v != 19456)\n+    abort ();\n+  u = 0; v = 0;\n+  bar (u, v);\n+  if (u != 19456 || v != 19456)\n+    abort ();\n+}"}]}