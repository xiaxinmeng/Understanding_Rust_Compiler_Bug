{"sha": "013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzMDIxMDQxYTgyZWM0ZjllMWVhM2UzYWE5NGI4ZTkyZDljYTRkMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2006-11-25T09:17:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-11-25T09:17:57Z"}, "message": "config/i386/i386.md (UNSPEC_TRUNC_NOOP): New unspec definition.\n\n        (X87MODEF): New mode macro.\n        (ssemodefsuffix): New mode attribute.\n        (truncxf<mode>2_i387_noop_unspec): New insn pattern.\n        (sqrt_extend<mode>xf2_i387): New insn pattern.\n        (sqrt<mode>2): For non-SSE sqrt, emit sqrt_extend<mode>xf2_i387\n        insn and truncate result back to original mode using\n        UNSPEC_TRUNC_NOOP truncation.\n        (*sqrt<mode>2_sse): Implement using SSEMODEF mode macro and\n        ssemodefsuffix mode attribute.\n        (*sqrtsf2_mixed, *sqrtsf2_i387, *sqrtdf2_mixed, *sqrtdf2_i387)\n        (*sqrtextendsfdf2_i387, *sqrtextendsfxf2_i387)\n        (*sqrtextenddfxf2_i387): Remove insn patterns.\n\n        (fmodsf3, fmoddf3, remaindersf3, remainderdf3): Use noop\n        truncation patterns.\n\n        reg-stack.c (get_true_reg): Handle UNSPEC_TRUNC_NOOP.\n\nFrom-SVN: r119188", "tree": {"sha": "13d6aedbbab4e67a27ac966d32bd18545d7bc2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d6aedbbab4e67a27ac966d32bd18545d7bc2f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0513be5bc3f4832a9bd2d7e78a09d1983f647402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0513be5bc3f4832a9bd2d7e78a09d1983f647402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0513be5bc3f4832a9bd2d7e78a09d1983f647402"}], "stats": {"total": 187, "additions": 81, "deletions": 106}, "files": [{"sha": "753bf292d81f8059c6963bcdc7e0301e80cfc7be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "patch": "@@ -1,3 +1,24 @@\n+2006-11-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tconfig/i386/i386.md (UNSPEC_TRUNC_NOOP): New unspec definition.\n+\t(X87MODEF): New mode macro.\n+\t(ssemodefsuffix): New mode attribute.\n+\t(truncxf<mode>2_i387_noop_unspec): New insn pattern.\n+\t(sqrt_extend<mode>xf2_i387): New insn pattern.\n+\t(sqrt<mode>2): For non-SSE sqrt, emit sqrt_extend<mode>xf2_i387\n+\tinsn and truncate result back to original mode using\n+\tUNSPEC_TRUNC_NOOP truncation.\n+\t(*sqrt<mode>2_sse): Implement using SSEMODEF mode macro and\n+\tssemodefsuffix mode attribute.\n+\t(*sqrtsf2_mixed, *sqrtsf2_i387, *sqrtdf2_mixed, *sqrtdf2_i387)\n+\t(*sqrtextendsfdf2_i387, *sqrtextendsfxf2_i387)\n+\t(*sqrtextenddfxf2_i387): Remove insn patterns.\n+\n+\t(fmodsf3, fmoddf3, remaindersf3, remainderdf3): Use noop\n+\ttruncation patterns.\n+\n+\treg-stack.c (get_true_reg): Handle UNSPEC_TRUNC_NOOP. \n+\t\n 2006-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/29955"}, {"sha": "f9242fb44faaecc72278f5633f83df1519b8e199", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 106, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "patch": "@@ -85,6 +85,7 @@\n    (UNSPEC_REP\t\t\t26)\n    (UNSPEC_EH_RETURN\t\t27)\n    (UNSPEC_LD_MPIC\t\t28)\t; load_macho_picbase\n+   (UNSPEC_TRUNC_NOOP\t\t29)\n \n    ; For SSE/MMX support:\n    (UNSPEC_FIX_NOTRUNC\t\t30)\n@@ -461,6 +462,9 @@\n ;; All x87 floating point modes\n (define_mode_macro X87MODEF [SF DF XF])\n \n+;; x87 SFmode and DFMode floating point modes\n+(define_mode_macro X87MODEF12 [SF DF])\n+\n ;; All integer modes handled by x87 fisttp operator.\n (define_mode_macro X87MODEI [HI SI DI])\n \n@@ -473,6 +477,9 @@\n ;; All integer modes handled by SSE cvtts?2si* operators.\n (define_mode_macro SSEMODEI24 [SI DI])\n \n+;; SSE asm suffix for floating point modes\n+(define_mode_attr ssemodefsuffix [(SF \"s\") (DF \"d\")])\n+\n \f\n ;; Scheduling descriptions\n \n@@ -3908,9 +3915,7 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_80387 && flag_unsafe_math_optimizations\"\n-{\n-  return output_387_reg_move (insn, operands);\n-}\n+  \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -4006,9 +4011,7 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_truncate:DF (match_operand:XF 1 \"register_operand\" \"f\")))]\n   \"TARGET_80387 && flag_unsafe_math_optimizations\"\n-{\n-  return output_387_reg_move (insn, operands);\n-}\n+  \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -15525,92 +15528,17 @@\n \f\n ;; FPU special functions.\n \n-(define_expand \"sqrtsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(sqrt:SF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_USE_FANCY_MATH_387 || TARGET_SSE_MATH\"\n-{\n-  if (!TARGET_SSE_MATH)\n-    operands[1] = force_reg (SFmode, operands[1]);\n-})\n-\n-(define_insn \"*sqrtsf2_mixed\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,x\")\n-\t(sqrt:SF (match_operand:SF 1 \"nonimmediate_operand\" \"0,xm\")))]\n-  \"TARGET_USE_FANCY_MATH_387 && TARGET_MIX_SSE_I387\"\n-  \"@\n-   fsqrt\n-   sqrtss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fpspc,sse\")\n-   (set_attr \"mode\" \"SF,SF\")\n-   (set_attr \"athlon_decode\" \"direct,*\")])\n-\n-(define_insn \"*sqrtsf2_sse\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n-\t(sqrt:SF (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE_MATH\"\n-  \"sqrtss\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"*\")])\n+;; This pattern implements a no-op XFmode truncation for\n+;; all fancy i386 XFmode math functions.\n \n-(define_insn \"*sqrtsf2_i387\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n+(define_insn \"truncxf<mode>2_i387_noop_unspec\"\n+  [(set (match_operand:X87MODEF12 0 \"register_operand\" \"=f\")\n+\t(unspec:X87MODEF12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n+\tUNSPEC_TRUNC_NOOP))]\n   \"TARGET_USE_FANCY_MATH_387\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"SF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n-\n-(define_expand \"sqrtdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(sqrt:DF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_USE_FANCY_MATH_387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n-{\n-  if (!(TARGET_SSE2 && TARGET_SSE_MATH))\n-    operands[1] = force_reg (DFmode, operands[1]);\n-})\n-\n-(define_insn \"*sqrtdf2_mixed\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,Y\")\n-\t(sqrt:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,Ym\")))]\n-  \"TARGET_USE_FANCY_MATH_387 && TARGET_SSE2 && TARGET_MIX_SSE_I387\"\n-  \"@\n-   fsqrt\n-   sqrtsd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"fpspc,sse\")\n-   (set_attr \"mode\" \"DF,DF\")\n-   (set_attr \"athlon_decode\" \"direct,*\")])\n-\n-(define_insn \"*sqrtdf2_sse\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n-\t(sqrt:DF (match_operand:DF 1 \"nonimmediate_operand\" \"Ym\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-  \"sqrtsd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"*\")])\n-\n-(define_insn \"*sqrtdf2_i387\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_USE_FANCY_MATH_387\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n-\n-(define_insn \"*sqrtextendsfdf2_i387\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(sqrt:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n+  \"* return output_387_reg_move (insn, operands);\"\n+  [(set_attr \"type\" \"fmov\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n@@ -15621,25 +15549,44 @@\n    (set_attr \"mode\" \"XF\")\n    (set_attr \"athlon_decode\" \"direct\")])\n \n-(define_insn \"*sqrtextendsfxf2_i387\"\n+(define_insn \"sqrt<mode>xf2_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(sqrt:XF (float_extend:XF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n+\t(sqrt:XF\n+\t  (float_extend:XF\n+\t    (match_operand:X87MODEF12 1 \"register_operand\" \"0\"))))]\n   \"TARGET_USE_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n    (set_attr \"athlon_decode\" \"direct\")])\n \n-(define_insn \"*sqrtextenddfxf2_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(sqrt:XF (float_extend:XF\n-\t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_USE_FANCY_MATH_387\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n+(define_insn \"*sqrt<mode>2_sse\"\n+  [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=x\")\n+\t(sqrt:SSEMODEF\n+\t  (match_operand:SSEMODEF 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"sqrts<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"athlon_decode\" \"*\")])\n+\n+(define_expand \"sqrt<mode>2\"\n+  [(set (match_operand:X87MODEF12 0 \"register_operand\" \"\")\n+\t(sqrt:X87MODEF12\n+\t  (match_operand:X87MODEF12 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n+{\n+  if (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = force_reg (<MODE>mode, operands[1]);\n+\n+      emit_insn (gen_sqrt<mode>xf2_i387 (op0, op1));\n+      emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[0], op0));\n+      DONE;\n+   }\n+})\n \n (define_insn \"fpremxf4\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n@@ -15676,7 +15623,7 @@\n   emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfsf2 (operands[0], op1));\n+  emit_insn (gen_truncxfsf2_i387_noop_unspec (operands[0], op1));\n   DONE;\n })\n \n@@ -15700,7 +15647,7 @@\n   emit_insn (gen_fpremxf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfdf2 (operands[0], op1));\n+  emit_insn (gen_truncxfdf2_i387_noop_unspec (operands[0], op1));\n   DONE;\n })\n \n@@ -15757,7 +15704,7 @@\n   emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfsf2 (operands[0], op1));\n+  emit_insn (gen_truncxfsf2_i387_noop_unspec (operands[0], op1));\n   DONE;\n })\n \n@@ -15781,7 +15728,7 @@\n   emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));\n   ix86_emit_fp_unordered_jump (label);\n \n-  emit_insn (gen_truncxfdf2 (operands[0], op1));\n+  emit_insn (gen_truncxfdf2_i387_noop_unspec (operands[0], op1));\n   DONE;\n })\n "}, {"sha": "aca45fe32c2f6f1fdad93f4af4017e7c9362f960", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=013021041a82ec4f9e1ea3e3aa94b8e92d9ca4d2", "patch": "@@ -439,6 +439,13 @@ get_true_reg (rtx *pat)\n \tpat = & XEXP (*pat, 0);\n \tbreak;\n \n+      case UNSPEC:\n+\tif (XINT (*pat, 1) == UNSPEC_TRUNC_NOOP)\n+\t  {\n+\t    pat = & XVECEXP (*pat, 0, 0);\n+\t    break;\n+\t  }\n+\n       case FLOAT_TRUNCATE:\n \tif (!flag_unsafe_math_optimizations)\n \t  return pat;"}]}