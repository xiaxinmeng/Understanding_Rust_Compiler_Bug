{"sha": "b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjOWFmOTY1Zjc0ZmU5ZjY3YWRmOWUwMzQzZTRhZWM0MWRhNmM4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-24T08:08:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-24T08:08:26Z"}, "message": "tree-inline.h (estimate_move_cost): Add speed_p parameter.\n\n2014-07-24  Richard Biener  <rguenther@suse.de>\n\n\t* tree-inline.h (estimate_move_cost): Add speed_p parameter.\n\t* tree-inline.c (estimate_move_cost): Add speed_p parameter\n\tand adjust MOVE_RATIO query accordingly.\n\t(estimate_num_insns): Adjust callers.\n\t* ipa-prop.c (ipa_populate_param_decls): Likewise.\n\t* ipa-cp.c (gather_context_independent_values,\n\testimate_local_effects): Likewise.\n\t* ipa-split.c (consider_split): Likewise.\n\nFrom-SVN: r212970", "tree": {"sha": "d651168c51e1b1aa9a90adba74a92d53e8a5798c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d651168c51e1b1aa9a90adba74a92d53e8a5798c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "997ef9e7389f4962edc8c504a3d9753ab806ed6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997ef9e7389f4962edc8c504a3d9753ab806ed6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997ef9e7389f4962edc8c504a3d9753ab806ed6f"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "b9542459c9dc91f47f790f882e4747fd6b89a2cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -1,3 +1,14 @@\n+2014-07-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-inline.h (estimate_move_cost): Add speed_p parameter.\n+\t* tree-inline.c (estimate_move_cost): Add speed_p parameter\n+\tand adjust MOVE_RATIO query accordingly.\n+\t(estimate_num_insns): Adjust callers.\n+\t* ipa-prop.c (ipa_populate_param_decls): Likewise.\n+\t* ipa-cp.c (gather_context_independent_values,\n+\testimate_local_effects): Likewise.\n+\t* ipa-split.c (consider_split): Likewise.\n+\n 2014-07-24  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* config/i386/driver-i386.c: Remove names of unused arguments and"}, {"sha": "9039000745622aecb4b97a94f06a481cccb54199", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -1845,7 +1845,7 @@ gather_context_independent_values (struct ipa_node_params *info,\n \t      (*known_csts)[i] = val->value;\n \t      if (removable_params_cost)\n \t\t*removable_params_cost\n-\t\t  += estimate_move_cost (TREE_TYPE (val->value));\n+\t\t  += estimate_move_cost (TREE_TYPE (val->value), false);\n \t      ret = true;\n \t    }\n \t  else if (plats->virt_call)\n@@ -1997,7 +1997,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t    {\n \t      known_csts[i] = val->value;\n \t      known_binfos[i] = NULL_TREE;\n-\t      emc = estimate_move_cost (TREE_TYPE (val->value));\n+\t      emc = estimate_move_cost (TREE_TYPE (val->value), true);\n \t    }\n \t  else if (plats->virt_call)\n \t    {"}, {"sha": "f457b1291e080479f0b3553384f94130ce799bb3", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -204,7 +204,8 @@ ipa_populate_param_decls (struct cgraph_node *node,\n   for (parm = fnargs; parm; parm = DECL_CHAIN (parm))\n     {\n       descriptors[param_num].decl = parm;\n-      descriptors[param_num].move_cost = estimate_move_cost (TREE_TYPE (parm));\n+      descriptors[param_num].move_cost = estimate_move_cost (TREE_TYPE (parm),\n+\t\t\t\t\t\t\t     true);\n       param_num++;\n     }\n }"}, {"sha": "cba0309262aac06a1059b60c1e7e26a0f6b69e49", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -488,13 +488,14 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n \t\t\t       SSA_NAME_VERSION (ddef)))\n \t    {\n \t      if (!VOID_TYPE_P (TREE_TYPE (parm)))\n-\t\tcall_overhead += estimate_move_cost (TREE_TYPE (parm));\n+\t\tcall_overhead += estimate_move_cost (TREE_TYPE (parm), false);\n \t      num_args++;\n \t    }\n \t}\n     }\n   if (!VOID_TYPE_P (TREE_TYPE (current_function_decl)))\n-    call_overhead += estimate_move_cost (TREE_TYPE (current_function_decl));\n+    call_overhead += estimate_move_cost (TREE_TYPE (current_function_decl),\n+\t\t\t\t\t false);\n \n   if (current->split_size <= call_overhead)\n     {"}, {"sha": "c5fab40089229bf71942a9def5855085fa0d960f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -3623,11 +3623,12 @@ tree_inlinable_function_p (tree fn)\n   return inlinable;\n }\n \n-/* Estimate the cost of a memory move.  Use machine dependent\n-   word size and take possible memcpy call into account.  */\n+/* Estimate the cost of a memory move of type TYPE.  Use machine dependent\n+   word size and take possible memcpy call into account and return\n+   cost based on whether optimizing for size or speed according to SPEED_P.  */\n \n int\n-estimate_move_cost (tree type)\n+estimate_move_cost (tree type, bool speed_p)\n {\n   HOST_WIDE_INT size;\n \n@@ -3645,7 +3646,7 @@ estimate_move_cost (tree type)\n \n   size = int_size_in_bytes (type);\n \n-  if (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO (!optimize_size))\n+  if (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO (speed_p))\n     /* Cost of a memcpy call, 3 arguments and the call.  */\n     return 4;\n   else\n@@ -3847,9 +3848,9 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \n       /* Account for the cost of moving to / from memory.  */\n       if (gimple_store_p (stmt))\n-\tcost += estimate_move_cost (TREE_TYPE (lhs));\n+\tcost += estimate_move_cost (TREE_TYPE (lhs), weights->time_based);\n       if (gimple_assign_load_p (stmt))\n-\tcost += estimate_move_cost (TREE_TYPE (rhs));\n+\tcost += estimate_move_cost (TREE_TYPE (rhs), weights->time_based);\n \n       cost += estimate_operator_cost (gimple_assign_rhs_code (stmt), weights,\n       \t\t\t\t      gimple_assign_rhs1 (stmt),\n@@ -3923,11 +3924,13 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \n \tcost = decl ? weights->call_cost : weights->indirect_call_cost;\n \tif (gimple_call_lhs (stmt))\n-\t  cost += estimate_move_cost (TREE_TYPE (gimple_call_lhs (stmt)));\n+\t  cost += estimate_move_cost (TREE_TYPE (gimple_call_lhs (stmt)),\n+\t\t\t\t      weights->time_based);\n \tfor (i = 0; i < gimple_call_num_args (stmt); i++)\n \t  {\n \t    tree arg = gimple_call_arg (stmt, i);\n-\t    cost += estimate_move_cost (TREE_TYPE (arg));\n+\t    cost += estimate_move_cost (TREE_TYPE (arg),\n+\t\t\t\t\tweights->time_based);\n \t  }\n \tbreak;\n       }"}, {"sha": "2a5daaf7f61920586e6c13f5e044fee6ef62a2f2", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c9af965f74fe9f67adf9e0343e4aec41da6c8e/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=b4c9af965f74fe9f67adf9e0343e4aec41da6c8e", "patch": "@@ -191,7 +191,7 @@ tree maybe_inline_call_in_expr (tree);\n bool tree_inlinable_function_p (tree);\n tree copy_tree_r (tree *, int *, void *);\n tree copy_decl_no_change (tree decl, copy_body_data *id);\n-int estimate_move_cost (tree type);\n+int estimate_move_cost (tree type, bool);\n int estimate_num_insns (gimple, eni_weights *);\n int estimate_num_insns_fn (tree, eni_weights *);\n int count_insns_seq (gimple_seq, eni_weights *);"}]}