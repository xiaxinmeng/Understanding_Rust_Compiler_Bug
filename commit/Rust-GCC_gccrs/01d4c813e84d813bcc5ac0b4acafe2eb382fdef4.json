{"sha": "01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkNGM4MTNlODRkODEzYmNjNWFjMGI0YWNhZmUyZWIzODJmZGVmNA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2004-04-23T13:51:21Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-04-23T13:51:21Z"}, "message": "arm.c (arm_output_epilogue): Reverse the order of loading iWMMXt registers with a frame pointer.\n\n\t* config/arm/arm.c (arm_output_epilogue): Reverse the order of\n\tloading iWMMXt registers with a frame pointer.  Use post-increment\n\twithout a frame pointer.\n\t(arm_expand_prologue): Reverse the order of saving iWMMXt registers.\ntestsuite/\n\t* gcc.c-torture/execute/simd-5.c: New test.\n\nFrom-SVN: r81092", "tree": {"sha": "078627b568904e8511ae186f72dd68fd9fd02028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078627b568904e8511ae186f72dd68fd9fd02028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/comments", "author": null, "committer": null, "parents": [{"sha": "4424e0da57fd1562550505beefc2b6b62a733701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4424e0da57fd1562550505beefc2b6b62a733701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4424e0da57fd1562550505beefc2b6b62a733701"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "e544a23210a46a0ef17e7770b7abdc4e86ba7ecb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "patch": "@@ -1,3 +1,10 @@\n+2004-04-23  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* config/arm/arm.c (arm_output_epilogue): Reverse the order of\n+\tloading iWMMXt registers with a frame pointer.  Use post-increment\n+\twithout a frame pointer.\n+\t(arm_expand_prologue): Reverse the order of saving iWMMXt registers.\n+\n 2004-04-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/invoke.texi (Optimize Options): Refer to \"unit-at-a-time"}, {"sha": "1c2f2b2b4949fdd89f6eae4146fb3d1eb5e83691", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "patch": "@@ -9492,7 +9492,7 @@ arm_output_epilogue (rtx sibling)\n \t     the live_regs_mask.  */\n \t  lrm_count += (lrm_count % 2 ? 2 : 1);\n \t      \n-\t  for (reg = FIRST_IWMMXT_REGNUM; reg <= LAST_IWMMXT_REGNUM; reg++)\n+\t  for (reg = LAST_IWMMXT_REGNUM; reg >= FIRST_IWMMXT_REGNUM; reg--)\n \t    if (regs_ever_live[reg] && !call_used_regs[reg])\n \t      {\n \t\tasm_fprintf (f, \"\\twldrd\\t%r, [%r, #-%d]\\n\", \n@@ -9613,7 +9613,7 @@ arm_output_epilogue (rtx sibling)\n       if (TARGET_IWMMXT)\n \tfor (reg = FIRST_IWMMXT_REGNUM; reg <= LAST_IWMMXT_REGNUM; reg++)\n \t  if (regs_ever_live[reg] && !call_used_regs[reg])\n-\t    asm_fprintf (f, \"\\twldrd\\t%r, [%r, #+8]!\\n\", reg, SP_REGNUM);\n+\t    asm_fprintf (f, \"\\twldrd\\t%r, [%r], #8\\n\", reg, SP_REGNUM);\n \n       /* If we can, restore the LR into the PC.  */\n       if (ARM_FUNC_TYPE (func_type) == ARM_FT_NORMAL\n@@ -10339,7 +10339,7 @@ arm_expand_prologue (void)\n     }\n \n   if (TARGET_IWMMXT)\n-    for (reg = FIRST_IWMMXT_REGNUM; reg <= LAST_IWMMXT_REGNUM; reg++)\n+    for (reg = LAST_IWMMXT_REGNUM; reg >= FIRST_IWMMXT_REGNUM; reg--)\n       if (regs_ever_live[reg] && ! call_used_regs [reg])\n \t{\n \t  insn = gen_rtx_PRE_DEC (V2SImode, stack_pointer_rtx);"}, {"sha": "f25bfd1b0c76b39c5b6dcc4380958cc3cc3f81fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "patch": "@@ -1,3 +1,7 @@\n+2004-04-23  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* gcc.c-torture/execute/simd-5.c: New test.\n+\n 2004-04-23  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/15064"}, {"sha": "f0584328716b7ad794a978a543a73ab555705347", "filename": "gcc/testsuite/gcc.c-torture/execute/simd-5.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d4c813e84d813bcc5ac0b4acafe2eb382fdef4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-5.c?ref=01d4c813e84d813bcc5ac0b4acafe2eb382fdef4", "patch": "@@ -0,0 +1,59 @@\n+/* Test saving and restoring of SIMD registers.  */\n+\n+typedef short Q __attribute__((vector_size(8)));\n+\n+Q q1 = {1, 2}, q2 = {3, 4}, q3 = {5, 6}, q4 = {7, 8};\n+\n+Q w1, w2, w3, w4;\n+Q z1, z2, z3, z4;\n+\n+volatile int dummy;\n+\n+void  __attribute__((__noinline__))\n+func0 (void)\n+{\n+  dummy = 1;\n+}\n+\n+void __attribute__((__noinline__))\n+func1 (void)\n+{\n+  Q a, b;\n+  a = q1 * q2;\n+  b = q3 * q4;\n+  w1 = a;\n+  w2 = b;\n+  func0 ();\n+  w3 = a;\n+  w4 = b;\n+}\n+\n+void __attribute__((__noinline__))\n+func2 (void)\n+{\n+  Q a, b;\n+  a = q1 + q2;\n+  b = q3 - q4;\n+  z1 = a;\n+  z2 = b;\n+  func1 ();\n+  z3 = a;\n+  z4 = b;\n+}\n+\n+int\n+main (void)\n+{\n+  func2 ();\n+\n+  if (memcmp (&w1, &w3, sizeof (Q)) != 0)\n+    abort ();\n+  if (memcmp (&w2, &w4, sizeof (Q)) != 0)\n+    abort ();\n+  if (memcmp (&z1, &z3, sizeof (Q)) != 0)\n+    abort ();\n+  if (memcmp (&z2, &z4, sizeof (Q)) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}]}