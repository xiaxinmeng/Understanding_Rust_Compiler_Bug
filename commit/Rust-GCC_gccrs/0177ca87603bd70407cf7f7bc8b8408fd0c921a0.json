{"sha": "0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3N2NhODc2MDNiZDcwNDA3Y2Y3ZjdiYzhiODQwOGZkMGM5MjFhMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-20T07:12:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-20T07:12:50Z"}, "message": "typeck.c (more_qualified_p): Remove.\n\n\t* typeck.c (more_qualified_p): Remove.\n\t* cp-tree.h: Remove the corresponding prototype.\n\nFrom-SVN: r93949", "tree": {"sha": "82d2c4aadfb0b76d16b83b90314557b198be9e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d2c4aadfb0b76d16b83b90314557b198be9e65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/comments", "author": null, "committer": null, "parents": [{"sha": "f75959a6a36a08908bfb66af87f67b00e056a4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75959a6a36a08908bfb66af87f67b00e056a4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75959a6a36a08908bfb66af87f67b00e056a4c4"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "4ac203523eec7e210d1a93fa3be0089d553316bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "patch": "@@ -1,3 +1,8 @@\n+2005-01-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* typeck.c (more_qualified_p): Remove.\n+\t* cp-tree.h: Remove the corresponding prototype.\n+\n 2005-01-19  Matt Austern  <austern@apple.com>\n \n \t* typeck.c (comptypes): Handle return code from objc_comptypes"}, {"sha": "0594dbe5cd941a277c1427de770096ee5b21fd22", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "patch": "@@ -4306,7 +4306,6 @@ extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool);\n extern int cp_type_quals                        (tree);\n extern bool cp_has_mutable_p                     (tree);\n extern bool at_least_as_qualified_p              (tree, tree);\n-extern bool more_qualified_p                     (tree, tree);\n extern tree build_ptrmemfunc1                   (tree, tree, tree);\n extern void expand_ptrmemfunc_cst               (tree, tree *, tree *);\n extern tree pfn_from_ptrmemfunc                 (tree);"}, {"sha": "0485d65e17f2e8812a685e1fcec3bd4135558d80", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0177ca87603bd70407cf7f7bc8b8408fd0c921a0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0177ca87603bd70407cf7f7bc8b8408fd0c921a0", "patch": "@@ -1089,17 +1089,6 @@ at_least_as_qualified_p (tree type1, tree type2)\n   return (q1 & q2) == q2;\n }\n \n-/* Returns 1 if TYPE1 is more qualified than TYPE2.  */\n-\n-bool\n-more_qualified_p (tree type1, tree type2)\n-{\n-  int q1 = cp_type_quals (type1);\n-  int q2 = cp_type_quals (type2);\n-\n-  return q1 != q2 && (q1 & q2) == q2;\n-}\n-\n /* Returns 1 if TYPE1 is more cv-qualified than TYPE2, -1 if TYPE2 is\n    more cv-qualified that TYPE1, and 0 otherwise.  */\n "}]}