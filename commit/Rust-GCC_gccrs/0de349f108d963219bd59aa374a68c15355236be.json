{"sha": "0de349f108d963219bd59aa374a68c15355236be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlMzQ5ZjEwOGQ5NjMyMTliZDU5YWEzNzRhNjhjMTUzNTUyMzZiZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-01-29T19:23:53Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-01-29T19:26:35Z"}, "message": "Improve DSE which in turn eliminates the need for jump threading and block duplication for the original testcase in pr89689 which in turn eliminates the false positive -Warray-bounds warning for the original testcase.\n\n\tPR tree-optimization/89689\n\t* builtins.def (BUILT_IN_OBJECT_SIZE): Make it const rather than pure.\n\n\tPR tree-optimization/89689\n\t* gcc.dg/pr89689.c: New test.", "tree": {"sha": "5ac0fe26ef9542fb34274a9a502095b4e213f6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac0fe26ef9542fb34274a9a502095b4e213f6a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0de349f108d963219bd59aa374a68c15355236be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de349f108d963219bd59aa374a68c15355236be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de349f108d963219bd59aa374a68c15355236be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de349f108d963219bd59aa374a68c15355236be/comments", "author": null, "committer": null, "parents": [{"sha": "2812a28418b72b24979805cfca1f140dda4963b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2812a28418b72b24979805cfca1f140dda4963b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2812a28418b72b24979805cfca1f140dda4963b7"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "567dff632f5e657f47f44c0c31ab0efff06424d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de349f108d963219bd59aa374a68c15355236be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de349f108d963219bd59aa374a68c15355236be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0de349f108d963219bd59aa374a68c15355236be", "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/89689\n+\t* builtins.def (BUILT_IN_OBJECT_SIZE): Make it const rather than pure.\n+\n 2020-01-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tRevert:"}, {"sha": "fa8b0641ab13b36f983c591a7020f6b432e5fb3d", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de349f108d963219bd59aa374a68c15355236be/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de349f108d963219bd59aa374a68c15355236be/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=0de349f108d963219bd59aa374a68c15355236be", "patch": "@@ -972,7 +972,7 @@ DEF_BUILTIN_STUB (BUILT_IN_STRCMP_EQ, \"__builtin_strcmp_eq\")\n DEF_BUILTIN_STUB (BUILT_IN_STRNCMP_EQ, \"__builtin_strncmp_eq\")\n \n /* Object size checking builtins.  */\n-DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_PURE_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMCPY_CHK, \"__memcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)"}, {"sha": "b62e7effb595ed5de35c5836143fe961f931b42e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de349f108d963219bd59aa374a68c15355236be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de349f108d963219bd59aa374a68c15355236be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0de349f108d963219bd59aa374a68c15355236be", "patch": "@@ -1,3 +1,8 @@\n+2020-01-29  Jeff Law  <law@redhat.com\n+\n+\tPR tree-optimization/89689\n+\t* gcc.dg/pr89689.c: New test.\n+\n 2020-01-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91754 - Fix template arguments comparison with class NTTP."}, {"sha": "ee81274d3c4ae17e3c5037593d7a94cfe5f0bb40", "filename": "gcc/testsuite/gcc.dg/pr89689.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de349f108d963219bd59aa374a68c15355236be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89689.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de349f108d963219bd59aa374a68c15355236be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89689.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89689.c?ref=0de349f108d963219bd59aa374a68c15355236be", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do-compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+#include <string.h>\n+#include <assert.h>\n+#include <stdio.h>\n+\n+static inline __attribute__((__artificial__)) void *a(char *c, const char *d, long n)\n+{\n+    return __builtin___memcpy_chk(c, d, n, __builtin_object_size(c, 0));\n+}\n+typedef struct {\n+    char *data;\n+    int len;\n+} sb_t;\n+const char __sb_slop[1];\n+static void inline set0(sb_t *c)\n+{\n+    if (c->data != __sb_slop)\n+        c->data[0] = 0;\n+    else\n+        assert (c->data[0] == 0);\n+}\n+char buf[5];\n+sb_t l = {\n+    .data = buf,\n+    .len = 0\n+};\n+void o()\n+{\n+    char *data = \"abcd\";\n+    sb_t h = l;\n+    set0(&h);\n+    a(h.data, data, strlen(data));\n+    printf(\"%s\\n\", h.data);\n+    printf(\"%d\\n\", h.data == __sb_slop);\n+    printf(\"%d\\n\", h.data == buf);\n+    set0(&h);\n+}\n+int main(void) {\n+    o();\n+    return 0;\n+}"}]}