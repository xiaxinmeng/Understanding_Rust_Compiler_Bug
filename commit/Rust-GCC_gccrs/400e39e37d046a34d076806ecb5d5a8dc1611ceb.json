{"sha": "400e39e37d046a34d076806ecb5d5a8dc1611ceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwZTM5ZTM3ZDA0NmEzNGQwNzY4MDZlY2I1ZDVhOGRjMTYxMWNlYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-22T02:57:27Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-22T02:57:27Z"}, "message": "bt-load.c, [...]: Remove unnecessary casts.\n\n\t* bt-load.c, builtins.c, cfghooks.c, cfgrtl.c, gcse.c,\n\tggc-page.c, integrate.c, var-tracking.c, web.c: Remove\n\tunnecessary casts.\n\nFrom-SVN: r79811", "tree": {"sha": "a58465330fa743ce33f43c71477dcf5b003ce91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58465330fa743ce33f43c71477dcf5b003ce91a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/400e39e37d046a34d076806ecb5d5a8dc1611ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400e39e37d046a34d076806ecb5d5a8dc1611ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400e39e37d046a34d076806ecb5d5a8dc1611ceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400e39e37d046a34d076806ecb5d5a8dc1611ceb/comments", "author": null, "committer": null, "parents": [{"sha": "bd8ec6a7cdf75d6441b8a784e962cf177f237b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8ec6a7cdf75d6441b8a784e962cf177f237b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8ec6a7cdf75d6441b8a784e962cf177f237b34"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "1478197c2c8b4ba13f7b87fe2d71bf40006dc268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -1,3 +1,9 @@\n+2004-03-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* bt-load.c, builtins.c, cfghooks.c, cfgrtl.c, gcse.c,\n+\tggc-page.c, integrate.c, var-tracking.c, web.c: Remove\n+\tunnecessary casts.\n+\n 2004-03-22  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR target/14291"}, {"sha": "0008f3c7fe839078d3ab89015c630f96adde265e", "filename": "gcc/bt-load.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -1385,8 +1385,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \n   while (!fibheap_empty (all_btr_defs))\n     {\n-      btr_def def =\n-\t(btr_def) fibheap_extract_min (all_btr_defs);\n+      btr_def def = fibheap_extract_min (all_btr_defs);\n       int min_cost = -fibheap_min_key (all_btr_defs);\n       if (migrate_btr_def (def, min_cost))\n \t{"}, {"sha": "fd1b2950da42271871de762ebd7d2d7833e9a07d", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -4650,7 +4650,7 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n \t    {\n \t      /* Create a NUL-terminated string that's one char shorter\n \t\t than the original, stripping off the trailing '\\n'.  */\n-\t      char *newstr = (char *) alloca (len);\n+\t      char *newstr = alloca (len);\n \t      memcpy (newstr, fmt_str, len - 1);\n \t      newstr[len - 1] = 0;\n "}, {"sha": "9f70604c6f2b50146c1d1db42c0b9263a018a604", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -206,8 +206,8 @@ dump_bb (basic_block bb, FILE *outf, int indent)\n   edge e;\n   char *s_indent;\n  \n-  s_indent = (char *) alloca ((size_t) indent + 1);\n-  memset ((void *) s_indent, ' ', (size_t) indent);\n+  s_indent = alloca ((size_t) indent + 1);\n+  memset (s_indent, ' ', (size_t) indent);\n   s_indent[indent] = '\\0';\n \n   fprintf (outf, \";;%s basic block %d, loop depth %d, count \","}, {"sha": "20de6259fabbce1df1926205c04cc2e32649ed61", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -1665,8 +1665,8 @@ rtl_dump_bb (basic_block bb, FILE *outf, int indent)\n   rtx last;\n   char *s_indent;\n \n-  s_indent = (char *) alloca ((size_t) indent + 1);\n-  memset ((void *) s_indent, ' ', (size_t) indent);\n+  s_indent = alloca ((size_t) indent + 1);\n+  memset (s_indent, ' ', (size_t) indent);\n   s_indent[indent] = '\\0';\n \n   fprintf (outf, \";;%s Registers live at start: \", s_indent);"}, {"sha": "eb37e18244b85547e87191b641c4010c9667c13a", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -8366,7 +8366,7 @@ eliminate_partially_redundant_loads (basic_block bb, rtx insn,\n \t  ok_count += pred->count;\n           if (EDGE_CRITICAL_P (pred))\n             critical_count += pred->count;\n-\t  occr = (struct unoccr *) gmalloc (sizeof (struct unoccr));\n+\t  occr = gmalloc (sizeof (struct unoccr));\n \t  occr->insn = avail_insn;\n \t  occr->pred = pred;\n \t  occr->next = avail_occrs;\n@@ -8377,7 +8377,7 @@ eliminate_partially_redundant_loads (basic_block bb, rtx insn,\n \t  not_ok_count += pred->count;\n           if (EDGE_CRITICAL_P (pred))\n             critical_count += pred->count;\n-\t  unoccr = (struct unoccr *) gmalloc (sizeof (struct unoccr));\n+\t  unoccr = gmalloc (sizeof (struct unoccr));\n \t  unoccr->insn = NULL_RTX;\n \t  unoccr->pred = pred;\n \t  unoccr->next = unavail_occrs;\n@@ -8616,8 +8616,7 @@ compute_hash_table_after_reload (struct hash_table *table)\n   clear_modify_mem_tables ();\n \n   /* Some working arrays used to track first and last set in each block.  */\n-  reg_avail_info = (struct reg_avail_info*)\n-\t\t   gmalloc (max_gcse_regno * sizeof (struct reg_avail_info));\n+  reg_avail_info = gmalloc (max_gcse_regno * sizeof (struct reg_avail_info));\n \n   for (i = 0; i < max_gcse_regno; ++i)\n     reg_avail_info[i].last_bb = NULL;"}, {"sha": "4fc68872fcfb2baac79b1c9ed09cf0e8d4b48cbb", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -652,12 +652,12 @@ static inline char *\n alloc_anon (char *pref ATTRIBUTE_UNUSED, size_t size)\n {\n #ifdef HAVE_MMAP_ANON\n-  char *page = (char *) mmap (pref, size, PROT_READ | PROT_WRITE,\n-\t\t\t      MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  char *page = mmap (pref, size, PROT_READ | PROT_WRITE,\n+\t\t     MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n #endif\n #ifdef HAVE_MMAP_DEV_ZERO\n-  char *page = (char *) mmap (pref, size, PROT_READ | PROT_WRITE,\n-\t\t\t      MAP_PRIVATE, G.dev_zero_fd, 0);\n+  char *page = mmap (pref, size, PROT_READ | PROT_WRITE,\n+\t\t     MAP_PRIVATE, G.dev_zero_fd, 0);\n #endif\n \n   if (page == (char *) MAP_FAILED)"}, {"sha": "d715ef26222c0e0211f02817adae8d0039bdb31e", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -1667,11 +1667,11 @@ copy_insn_list (rtx insns, struct inline_remap *map, rtx static_chain_value)\n \t\t  tree *mapped_block_p;\n \n \t\t  mapped_block_p\n-\t\t    = (tree *) bsearch (NOTE_BLOCK (insn),\n-\t\t\t\t\t&VARRAY_TREE (map->block_map, 0),\n-\t\t\t\t\tmap->block_map->elements_used,\n-\t\t\t\t\tsizeof (tree),\n-\t\t\t\t\tfind_block);\n+\t\t    = bsearch (NOTE_BLOCK (insn),\n+\t\t\t       &VARRAY_TREE (map->block_map, 0),\n+\t\t\t       map->block_map->elements_used,\n+\t\t\t       sizeof (tree),\n+\t\t\t       find_block);\n \n \t\t  if (!mapped_block_p)\n \t\t    abort ();"}, {"sha": "d26893bdfe09cc3dfccf074ba29b78303ead89e0", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -1297,8 +1297,8 @@ dataflow_set_different_1 (void **slot, void *data)\n   variable var1, var2;\n \n   var1 = *(variable *) slot;\n-  var2 = (variable) htab_find_with_hash (htab, var1->decl,\n-\t\t\t\t\t VARIABLE_HASH_VAL (var1->decl));\n+  var2 = htab_find_with_hash (htab, var1->decl,\n+\t\t\t      VARIABLE_HASH_VAL (var1->decl));\n   if (!var2)\n     {\n       dataflow_set_different_value = true;\n@@ -1329,8 +1329,8 @@ dataflow_set_different_2 (void **slot, void *data)\n   variable var1, var2;\n \n   var1 = *(variable *) slot;\n-  var2 = (variable) htab_find_with_hash (htab, var1->decl,\n-\t\t\t\t\t VARIABLE_HASH_VAL (var1->decl));\n+  var2 = htab_find_with_hash (htab, var1->decl,\n+\t\t\t      VARIABLE_HASH_VAL (var1->decl));\n   if (!var2)\n     {\n       dataflow_set_different_value = true;\n@@ -1671,8 +1671,8 @@ vt_find_locations (void)\n \n   /* Compute reverse completion order of depth first search of the CFG\n      so that the data-flow runs faster.  */\n-  rc_order = (int *) xmalloc (n_basic_blocks * sizeof (int));\n-  bb_order = (int *) xmalloc (last_basic_block * sizeof (int));\n+  rc_order = xmalloc (n_basic_blocks * sizeof (int));\n+  bb_order = xmalloc (last_basic_block * sizeof (int));\n   flow_depth_first_order_compute (NULL, rc_order);\n   for (i = 0; i < n_basic_blocks; i++)\n     bb_order[rc_order[i]] = i;\n@@ -2272,8 +2272,8 @@ emit_notes_for_differences_1 (void **slot, void *data)\n   variable old_var, new_var;\n \n   old_var = *(variable *) slot;\n-  new_var = (variable) htab_find_with_hash (new_vars, old_var->decl,\n-\t\t\t\t\t    VARIABLE_HASH_VAL (old_var->decl));\n+  new_var = htab_find_with_hash (new_vars, old_var->decl,\n+\t\t\t\t VARIABLE_HASH_VAL (old_var->decl));\n \n   if (!new_var)\n     {\n@@ -2305,8 +2305,8 @@ emit_notes_for_differences_2 (void **slot, void *data)\n   variable old_var, new_var;\n \n   new_var = *(variable *) slot;\n-  old_var = (variable) htab_find_with_hash (old_vars, new_var->decl,\n-\t\t\t\t\t    VARIABLE_HASH_VAL (new_var->decl));\n+  old_var = htab_find_with_hash (old_vars, new_var->decl,\n+\t\t\t\t VARIABLE_HASH_VAL (new_var->decl));\n   if (!old_var)\n     {\n       /* Variable has appeared.  */"}, {"sha": "af006bfaf5053cadeb4572b383e22076bddfd505", "filename": "gcc/web.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/400e39e37d046a34d076806ecb5d5a8dc1611ceb/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=400e39e37d046a34d076806ecb5d5a8dc1611ceb", "patch": "@@ -267,12 +267,10 @@ web_main (void)\n   df = df_init ();\n   df_analyze (df, 0, DF_UD_CHAIN | DF_EQUIV_NOTES);\n \n-  def_entry =\n-    (struct web_entry *) xcalloc (df->n_defs, sizeof (struct web_entry));\n-  use_entry =\n-    (struct web_entry *) xcalloc (df->n_uses, sizeof (struct web_entry));\n-  used = (char *) xcalloc (max, sizeof (char));\n-  use_addressof = (char *) xcalloc (max, sizeof (char));\n+  def_entry = xcalloc (df->n_defs, sizeof (struct web_entry));\n+  use_entry = xcalloc (df->n_uses, sizeof (struct web_entry));\n+  used = xcalloc (max, sizeof (char));\n+  use_addressof = xcalloc (max, sizeof (char));\n \n   if (dump_file)\n     df_dump (df, DF_UD_CHAIN | DF_DU_CHAIN, dump_file);"}]}