{"sha": "d2874d905647a1d146dafa60199d440e837adc4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4NzRkOTA1NjQ3YTFkMTQ2ZGFmYTYwMTk5ZDQ0MGU4MzdhZGM0ZA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-31T09:36:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-01T01:08:00Z"}, "message": "Get rid of all float-int special cases in validate_subreg.\n\ngcc/ChangeLog:\n\n\t* emit-rtl.c (validate_subreg): Get rid of all float-int\n\tspecial cases.", "tree": {"sha": "ba0900d8ac042b261e43e97168e0955876d0959d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0900d8ac042b261e43e97168e0955876d0959d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2874d905647a1d146dafa60199d440e837adc4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2874d905647a1d146dafa60199d440e837adc4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2874d905647a1d146dafa60199d440e837adc4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2874d905647a1d146dafa60199d440e837adc4d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508fa61b6319377e48cbee98da221aacd475fd10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508fa61b6319377e48cbee98da221aacd475fd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508fa61b6319377e48cbee98da221aacd475fd10"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "77ea8948ee8039554ea58e5f6e66d7e545b60c77", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2874d905647a1d146dafa60199d440e837adc4d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2874d905647a1d146dafa60199d440e837adc4d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d2874d905647a1d146dafa60199d440e837adc4d", "patch": "@@ -922,46 +922,6 @@ validate_subreg (machine_mode omode, machine_mode imode,\n \n   poly_uint64 regsize = REGMODE_NATURAL_SIZE (imode);\n \n-  /* ??? This should not be here.  Temporarily continue to allow word_mode\n-     subregs of anything.  The most common offender is (subreg:SI (reg:DF)).\n-     Generally, backends are doing something sketchy but it'll take time to\n-     fix them all.  */\n-  if (omode == word_mode)\n-    ;\n-  /* ??? Similarly, e.g. with (subreg:DF (reg:TI)).  Though store_bit_field\n-     is the culprit here, and not the backends.  */\n-  else if (known_ge (osize, regsize) && known_ge (isize, osize))\n-    ;\n-  /* Allow component subregs of complex and vector.  Though given the below\n-     extraction rules, it's not always clear what that means.  */\n-  else if ((COMPLEX_MODE_P (imode) || VECTOR_MODE_P (imode))\n-\t   && GET_MODE_INNER (imode) == omode)\n-    ;\n-  /* ??? x86 sse code makes heavy use of *paradoxical* vector subregs,\n-     i.e. (subreg:V4SF (reg:SF) 0) or (subreg:V4SF (reg:V2SF) 0).  This\n-     surely isn't the cleanest way to represent this.  It's questionable\n-     if this ought to be represented at all -- why can't this all be hidden\n-     in post-reload splitters that make arbitrarily mode changes to the\n-     registers themselves.  */\n-  else if (VECTOR_MODE_P (omode)\n-\t   && GET_MODE_INNER (omode) == GET_MODE_INNER (imode))\n-    ;\n-  /* Subregs involving floating point modes are not allowed to\n-     change size.  Therefore (subreg:DI (reg:DF) 0) is fine, but\n-     (subreg:SI (reg:DF) 0) isn't.  */\n-  else if (FLOAT_MODE_P (imode) || FLOAT_MODE_P (omode))\n-    {\n-      if (! (known_eq (isize, osize)\n-\t     /* LRA can use subreg to store a floating point value in\n-\t\tan integer mode.  Although the floating point and the\n-\t\tinteger modes need the same number of hard registers,\n-\t\tthe size of floating point mode can be less than the\n-\t\tinteger mode.  LRA also uses subregs for a register\n-\t\tshould be used in different mode in on insn.  */\n-\t     || lra_in_progress))\n-\treturn false;\n-    }\n-\n   /* Paradoxical subregs must have offset zero.  */\n   if (maybe_gt (osize, isize))\n     return known_eq (offset, 0U);"}]}