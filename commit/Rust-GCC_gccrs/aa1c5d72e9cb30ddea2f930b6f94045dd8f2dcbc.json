{"sha": "aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWExYzVkNzJlOWNiMzBkZGVhMmY5MzBiNmY5NDA0NWRkOGYyZGNiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T19:03:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T19:03:15Z"}, "message": "ira-int.h (target_ira_int): Add x_max_struct_costs_size...\n\ngcc/\n\t* ira-int.h (target_ira_int): Add x_max_struct_costs_size, x_init_cost,\n\tx_temp_costs, x_op_costs, x_this_op_costs and x_cost_classes.\n\t* ira-costs.c (max_struct_costs_size, init_cost, temp_costs, op_costs)\n\t(this_op_costs, costs_classes): Redefine as macros.\n\t(record_reg_classes): Don't take op_costs as a parameter.\n\t(record_operand_costs): Likewise.  Update calls to record_reg_classes.\n\t(scan_one_insn): Update call to record_operand_costs.\n\nFrom-SVN: r162103", "tree": {"sha": "ed1e21f22d705875935767c123667b9066177bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed1e21f22d705875935767c123667b9066177bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afcc66c49afbb6e971a70f503b96d1fd1a41f7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afcc66c49afbb6e971a70f503b96d1fd1a41f7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afcc66c49afbb6e971a70f503b96d1fd1a41f7c5"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "28e2273a2d6f195e7da35da36e6c806875f75d66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "patch": "@@ -1,3 +1,13 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira-int.h (target_ira_int): Add x_max_struct_costs_size, x_init_cost,\n+\tx_temp_costs, x_op_costs, x_this_op_costs and x_cost_classes.\n+\t* ira-costs.c (max_struct_costs_size, init_cost, temp_costs, op_costs)\n+\t(this_op_costs, costs_classes): Redefine as macros.\n+\t(record_reg_classes): Don't take op_costs as a parameter.\n+\t(record_operand_costs): Likewise.  Update calls to record_reg_classes.\n+\t(scan_one_insn): Update call to record_operand_costs.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (target-globals.o): Depend on $(IRA_INT_H)."}, {"sha": "24e8393dd0bd08dbe863aedbbc9dacb576011152", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "patch": "@@ -68,32 +68,25 @@ struct costs\n   int cost[1];\n };\n \n-/* Initialized once.  It is a maximal possible size of the allocated\n-   struct costs.  */\n-static int max_struct_costs_size;\n-\n-/* Allocated and initialized once, and used to initialize cost values\n-   for each insn.  */\n-static struct costs *init_cost;\n-\n-/* Allocated once, and used for temporary purposes.  */\n-static struct costs *temp_costs;\n-\n-/* Allocated once, and used for the cost calculation.  */\n-static struct costs *op_costs[MAX_RECOG_OPERANDS];\n-static struct costs *this_op_costs[MAX_RECOG_OPERANDS];\n+#define max_struct_costs_size \\\n+  (this_target_ira_int->x_max_struct_costs_size)\n+#define init_cost \\\n+  (this_target_ira_int->x_init_cost)\n+#define temp_costs \\\n+  (this_target_ira_int->x_temp_costs)\n+#define op_costs \\\n+  (this_target_ira_int->x_op_costs)\n+#define this_op_costs \\\n+  (this_target_ira_int->x_this_op_costs)\n+#define cost_classes \\\n+  (this_target_ira_int->x_cost_classes)\n \n /* Costs of each class for each allocno or pseudo.  */\n static struct costs *costs;\n \n /* Accumulated costs of each class for each allocno.  */\n static struct costs *total_allocno_costs;\n \n-/* Classes used for cost calculation.  They may be different on\n-   different iterations of the cost calculations or in different\n-   optimization modes.  */\n-static enum reg_class *cost_classes;\n-\n /* The size of the previous array.  */\n static int cost_classes_num;\n \n@@ -210,8 +203,7 @@ copy_cost (rtx x, enum machine_mode mode, enum reg_class rclass, bool to_p,\n static void\n record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t    enum machine_mode *modes, const char **constraints,\n-\t\t    rtx insn, struct costs **op_costs,\n-\t\t    enum reg_class *pref)\n+\t\t    rtx insn, enum reg_class *pref)\n {\n   int alt;\n   int i, j, k;\n@@ -945,7 +937,7 @@ record_address_regs (enum machine_mode mode, rtx x, int context,\n \n /* Calculate the costs of insn operands.  */\n static void\n-record_operand_costs (rtx insn, struct costs **op_costs, enum reg_class *pref)\n+record_operand_costs (rtx insn, enum reg_class *pref)\n {\n   const char *constraints[MAX_RECOG_OPERANDS];\n   enum machine_mode modes[MAX_RECOG_OPERANDS];\n@@ -998,11 +990,11 @@ record_operand_costs (rtx insn, struct costs **op_costs, enum reg_class *pref)\n \txconstraints[i+1] = constraints[i];\n \trecord_reg_classes (recog_data.n_alternatives, recog_data.n_operands,\n \t\t\t    recog_data.operand, modes,\n-\t\t\t    xconstraints, insn, op_costs, pref);\n+\t\t\t    xconstraints, insn, pref);\n       }\n   record_reg_classes (recog_data.n_alternatives, recog_data.n_operands,\n \t\t      recog_data.operand, modes,\n-\t\t      constraints, insn, op_costs, pref);\n+\t\t      constraints, insn, pref);\n }\n \n \f\n@@ -1047,7 +1039,7 @@ scan_one_insn (rtx insn)\n \t\t\t   0, MEM, SCRATCH, frequency * 2);\n     }\n \n-  record_operand_costs (insn, op_costs, pref);\n+  record_operand_costs (insn, pref);\n \n   /* Now add the cost for each operand to the total costs for its\n      allocno.  */"}, {"sha": "f32c22bb1ca3b4e45550fd7a0d8851a3ab24a52a", "filename": "gcc/ira-int.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=aa1c5d72e9cb30ddea2f930b6f94045dd8f2dcbc", "patch": "@@ -715,6 +715,26 @@ minmax_set_iter_next (minmax_set_iterator *i)\n        minmax_set_iter_next (&(ITER)))\n \f\n struct target_ira_int {\n+  /* Initialized once.  It is a maximal possible size of the allocated\n+     struct costs.  */\n+  int x_max_struct_costs_size;\n+\n+  /* Allocated and initialized once, and used to initialize cost values\n+     for each insn.  */\n+  struct costs *x_init_cost;\n+\n+  /* Allocated once, and used for temporary purposes.  */\n+  struct costs *x_temp_costs;\n+\n+  /* Allocated once, and used for the cost calculation.  */\n+  struct costs *x_op_costs[MAX_RECOG_OPERANDS];\n+  struct costs *x_this_op_costs[MAX_RECOG_OPERANDS];\n+\n+  /* Classes used for cost calculation.  They may be different on\n+     different iterations of the cost calculations or in different\n+     optimization modes.  */\n+  enum reg_class *x_cost_classes;\n+\n   /* Hard registers that can not be used for the register allocator for\n      all functions of the current compilation unit.  */\n   HARD_REG_SET x_no_unit_alloc_regs;"}]}