{"sha": "9257bcc8fa8f754fc85697a034c5677e34070a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1N2JjYzhmYThmNzU0ZmM4NTY5N2EwMzRjNTY3N2UzNDA3MGEwZA==", "commit": {"author": {"name": "Roman Kennke", "email": "roman@kennke.org", "date": "2005-04-20T05:47:57Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-20T05:47:57Z"}, "message": "2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicButtonUI.java\n\t(paint): This should not care about margin and insets\n\tat the same time, as insets already include the margin\n\tthrough the border.\n\t* javax/swing/plaf/basic/BasicGraphicsUtils.java\n\t(getPreferredButtonSize): Likewise.\n\t* javax/swing/plaf/metal/MetalBorders.java\n\t(getBorderInsets): Likewise.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicOptionPaneUI.java\n\t(createMessageArea): The JPanel that holds the message area\n\tdoesn't need to override getPreferredSize. This prevents some\n\tmessage components from rendering nicely.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalInternalFrameUI.java\n\t(createUI): Do not share instances between components.\n\t* javax/swing/plaf/metal/MetalSliderUI.java\n\t(createUI): Do not share instances between components.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalBorders:\n\t(PopupMenuBorder): Added.\n\t* javax/swing/plaf/metal/MetalLookAndFeel\n\t(initComponentDefaults): Added PopupMenuBorder.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/tree/DefaultTreeSelectionModel.java:\n\tAdded API documentation all over the class.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicScrollPaneUI.java\n\t(installDefaults): Link managed JScrollPane in instance field.\n\t(uninstallDefaults): Unlink managed JScrollPane in instance field.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n\t(PropertyChangeHandler.propertyChange): Add default\n\tto switch statement to avoid errors with unusual values\n\tfor orientation.\n\t(installComponents): Likewise.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalScrollBarUI.java:\n\t(createUI): Instances cannot be shared among JScrollPanes.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initComponentDefaults): Added defaults for Menu, MenuBar\n\tMenuEntry fonts.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n\t(installUI): Install listeners after everything all, otherwise\n\twe get strange NPEs in some situations, especially with\n\tcustom L&Fs.\n\t(createIncreaseButton): Orientation is expected to be\n\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n\tHORIZONTAL or VERTICAL.\n\t(createDecreaseButton): Orientation is expected to be\n\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n\tHORIZONTAL or VERTICAL.\n\t(installComponents): Orientation for buttons is expected to be\n\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n\tHORIZONTAL or VERTICAL.\n\n2005-04-20  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/JToolBar.java\n\t(addImpl): Adjust added AbstractButtons to look and feel like\n\ttoolbar buttons.\n\t* javax/swing/plaf/metal/MetalBorders.java:\n\tAdjusted insets of ButtonBorder.\n\t(RolloverMarginBorder): Added class for toolbar buttons.\n\t(getButtonBorder): Adjusted factory method to return a shared\n\tinstance of button border.\n\t(getToolbarButtonBorder): Added factory method to return a shared\n\tinstance of toolbar button border.\n\t(getMarginBorder): Added factory method to return a shared\n\tinstance of margin border.\n\t* javax/swing/plaf/metal/MetalButtonUI.java\n\t(installDefauls): If button is child of a JToolBar then set\n\tspecial border on this button.\n\nFrom-SVN: r98439", "tree": {"sha": "eec6fd2c91ed099ee33fc17329a909a8d892724e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec6fd2c91ed099ee33fc17329a909a8d892724e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9257bcc8fa8f754fc85697a034c5677e34070a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257bcc8fa8f754fc85697a034c5677e34070a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9257bcc8fa8f754fc85697a034c5677e34070a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257bcc8fa8f754fc85697a034c5677e34070a0d/comments", "author": null, "committer": null, "parents": [{"sha": "4d23e5b880bccc4f4c5759dc3c22351dc5e58060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d23e5b880bccc4f4c5759dc3c22351dc5e58060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d23e5b880bccc4f4c5759dc3c22351dc5e58060"}], "stats": {"total": 694, "additions": 551, "deletions": 143}, "files": [{"sha": "3e92407a1cd724f63d94460488557981c5e7b98c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -1,3 +1,99 @@\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicButtonUI.java\n+\t(paint): This should not care about margin and insets\n+\tat the same time, as insets already include the margin\n+\tthrough the border.\n+\t* javax/swing/plaf/basic/BasicGraphicsUtils.java\n+\t(getPreferredButtonSize): Likewise.\n+\t* javax/swing/plaf/metal/MetalBorders.java\n+\t(getBorderInsets): Likewise.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicOptionPaneUI.java\n+\t(createMessageArea): The JPanel that holds the message area\n+\tdoesn't need to override getPreferredSize. This prevents some\n+\tmessage components from rendering nicely.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalInternalFrameUI.java\n+\t(createUI): Do not share instances between components.\n+\t* javax/swing/plaf/metal/MetalSliderUI.java\n+\t(createUI): Do not share instances between components.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalBorders:\n+\t(PopupMenuBorder): Added.\n+\t* javax/swing/plaf/metal/MetalLookAndFeel\n+\t(initComponentDefaults): Added PopupMenuBorder.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/tree/DefaultTreeSelectionModel.java:\n+\tAdded API documentation all over the class.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicScrollPaneUI.java\n+\t(installDefaults): Link managed JScrollPane in instance field.\n+\t(uninstallDefaults): Unlink managed JScrollPane in instance field.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n+\t(PropertyChangeHandler.propertyChange): Add default\n+\tto switch statement to avoid errors with unusual values\n+\tfor orientation.\n+\t(installComponents): Likewise.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalScrollBarUI.java:\n+\t(createUI): Instances cannot be shared among JScrollPanes.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initComponentDefaults): Added defaults for Menu, MenuBar\n+\tMenuEntry fonts.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n+\t(installUI): Install listeners after everything all, otherwise\n+\twe get strange NPEs in some situations, especially with\n+\tcustom L&Fs.\n+\t(createIncreaseButton): Orientation is expected to be\n+\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n+\tHORIZONTAL or VERTICAL.\n+\t(createDecreaseButton): Orientation is expected to be\n+\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n+\tHORIZONTAL or VERTICAL.\n+\t(installComponents): Orientation for buttons is expected to be\n+\tSwingConstants.NORTH, ..SOUTH, ..WEST or ..EAST and not\n+\tHORIZONTAL or VERTICAL.\n+\n+2005-04-20  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/JToolBar.java\n+\t(addImpl): Adjust added AbstractButtons to look and feel like\n+\ttoolbar buttons.\n+\t* javax/swing/plaf/metal/MetalBorders.java:\n+\tAdjusted insets of ButtonBorder.\n+\t(RolloverMarginBorder): Added class for toolbar buttons.\n+\t(getButtonBorder): Adjusted factory method to return a shared\n+\tinstance of button border.\n+\t(getToolbarButtonBorder): Added factory method to return a shared\n+\tinstance of toolbar button border.\n+\t(getMarginBorder): Added factory method to return a shared\n+\tinstance of margin border.\n+\t* javax/swing/plaf/metal/MetalButtonUI.java\n+\t(installDefauls): If button is child of a JToolBar then set\n+\tspecial border on this button.\n+\n 2005-04-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URLConnection.java"}, {"sha": "2b994a5555cd4a3ed9c7fd7e05c7ceaf0cacf799", "filename": "libjava/javax/swing/JToolBar.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2FJToolBar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2FJToolBar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJToolBar.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -50,6 +50,7 @@\n import javax.accessibility.AccessibleContext;\n import javax.accessibility.AccessibleRole;\n import javax.accessibility.AccessibleStateSet;\n+import javax.swing.JButton;\n import javax.swing.plaf.ToolBarUI;\n \n /**\n@@ -742,6 +743,15 @@ protected void addImpl(Component component, Object constraints, int index)\n   {\n     // XXX: Sun says disable button but test cases show otherwise.\n     super.addImpl(component, constraints, index);\n+\n+    // if we added a Swing Button then adjust this a little\n+    if (component instanceof AbstractButton)\n+      {\n+        AbstractButton b = (AbstractButton) component;\n+        b.setRolloverEnabled(rollover);\n+        b.updateUI();\n+      }\n+\n   } // addImpl()\n \n   /**"}, {"sha": "15b715b3a7caa2b7e5862128a3cd343782d0d20f", "filename": "libjava/javax/swing/plaf/basic/BasicButtonUI.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicButtonUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -247,14 +247,12 @@ public void paint(Graphics g, JComponent c)\n     Rectangle tr = new Rectangle();\n     Rectangle ir = new Rectangle();\n     Rectangle vr = new Rectangle();\n-    Rectangle br = new Rectangle();\n \n     Font f = c.getFont();\n \n     g.setFont(f);\n \n-    SwingUtilities.calculateInnerArea(b, br);\n-    SwingUtilities.calculateInsetArea(br, b.getMargin(), vr);    \n+    SwingUtilities.calculateInnerArea(b, vr);\n     String text = SwingUtilities.layoutCompoundLabel(c, g.getFontMetrics(f), \n                                                      b.getText(),\n                                                      currentIcon(b),\n@@ -270,7 +268,7 @@ public void paint(Graphics g, JComponent c)\n         || b.isSelected())\n       paintButtonPressed(g, b);\n     else\n-      paintButtonNormal(g, br, c);\n+      paintButtonNormal(g, vr, c);\n \t\n     paintIcon(g, c, ir);\n     if (text != null)"}, {"sha": "07be39d06521f089aceb5864e57fdf3a384c21b9", "filename": "libjava/javax/swing/plaf/basic/BasicGraphicsUtils.java", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicGraphicsUtils.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicGraphicsUtils.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicGraphicsUtils.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -595,7 +595,6 @@ public static Dimension getPreferredButtonSize(AbstractButton b,\n     Rectangle iconRect = new Rectangle();\n     Rectangle textRect = new Rectangle();\n     Insets insets = b.getInsets();\n-    Insets margin = b.getMargin();\n     \n     viewRect = new Rectangle();\n \n@@ -628,11 +627,11 @@ public static Dimension getPreferredButtonSize(AbstractButton b,\n \n     contentRect = textRect.union(iconRect);\n \n-    return new Dimension(insets.left + margin.left\n+    return new Dimension(insets.left\n \t\t\t + contentRect.width \n-\t\t\t + insets.right + margin.right,\n-                         insets.top + margin.top\n+\t\t\t + insets.right,\n+                         insets.top\n \t\t\t + contentRect.height \n-\t\t\t + insets.bottom + margin.bottom);\n+\t\t\t + insets.bottom);\n   }\n }"}, {"sha": "95d53b00bd2e17f60f430b246449fb41b5a7bc04", "filename": "libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -846,18 +846,7 @@ protected Container createMessageArea()\n     messageArea.setLayout(new BorderLayout());\n     addIcon(messageArea);\n \n-    JPanel rightSide = new JPanel()\n-      {\n-\tpublic Dimension getPreferredSize()\n-\t{\n-\t  int w = Math.max(optionPane.getSize().width, minimumWidth);\n-\t  Insets i = optionPane.getInsets();\n-\t  Dimension orig = super.getPreferredSize();\n-\t  Dimension value = new Dimension(w - i.left - i.right - iconSize,\n-\t                                  orig.height);\n-\t  return value;\n-\t}\n-      };\n+    JPanel rightSide = new JPanel();\n     rightSide.setLayout(new GridBagLayout());\n     GridBagConstraints con = createConstraints();\n "}, {"sha": "5dd54affcaa07b476ffe8f7f9b677a967c06b31c", "filename": "libjava/javax/swing/plaf/basic/BasicScrollBarUI.java", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -152,8 +152,18 @@ else if (e.getPropertyName().equals(\"orientation\"))\n         {\n \t  incrButton.removeMouseListener(buttonListener);\n \t  decrButton.removeMouseListener(buttonListener);\n-\t  incrButton = createIncreaseButton(scrollbar.getOrientation());\n-\t  decrButton = createDecreaseButton(scrollbar.getOrientation());\n+          int orientation = scrollbar.getOrientation();\n+          switch (orientation)\n+            {\n+            case (JScrollBar.HORIZONTAL):\n+              incrButton = createIncreaseButton(EAST);\n+              decrButton = createDecreaseButton(WEST);\n+              break;\n+            default:\n+              incrButton = createIncreaseButton(SOUTH);\n+              decrButton = createDecreaseButton(NORTH);\n+              break;\n+            }\n \t  incrButton.addMouseListener(buttonListener);\n \t  decrButton.addMouseListener(buttonListener);\n \t  calculatePreferredSize();\n@@ -513,16 +523,9 @@ protected ArrowButtonListener createArrowButtonListener()\n   protected JButton createIncreaseButton(int orientation)\n   {\n     if (incrButton == null)\n-      incrButton = new BasicArrowButton((orientation == SwingConstants.HORIZONTAL)\n-                                        ? SwingConstants.EAST\n-                                        : SwingConstants.SOUTH);\n+      incrButton = new BasicArrowButton(orientation);\n     else\n-      {\n-\tif (orientation == SwingConstants.HORIZONTAL)\n-\t  ((BasicArrowButton) incrButton).setDirection(SwingConstants.EAST);\n-\telse\n-\t  ((BasicArrowButton) incrButton).setDirection(SwingConstants.SOUTH);\n-      }\n+      ((BasicArrowButton) incrButton).setDirection(orientation);\n     return incrButton;\n   }\n \n@@ -537,16 +540,9 @@ protected JButton createIncreaseButton(int orientation)\n   protected JButton createDecreaseButton(int orientation)\n   {\n     if (decrButton == null)\n-      decrButton = new BasicArrowButton((orientation == SwingConstants.HORIZONTAL)\n-                                        ? SwingConstants.WEST\n-                                        : SwingConstants.NORTH);\n+      decrButton = new BasicArrowButton(orientation);\n     else\n-      {\n-\tif (orientation == SwingConstants.HORIZONTAL)\n-\t  ((BasicArrowButton) decrButton).setDirection(SwingConstants.WEST);\n-\telse\n-\t  ((BasicArrowButton) decrButton).setDirection(SwingConstants.NORTH);\n-      }\n+      ((BasicArrowButton) decrButton).setDirection(orientation);\n     return decrButton;\n   }\n \n@@ -793,9 +789,19 @@ protected Rectangle getTrackBounds()\n    */\n   protected void installComponents()\n   {\n-    incrButton = createIncreaseButton(scrollbar.getOrientation());\n+    int orientation = scrollbar.getOrientation();\n+    switch (orientation)\n+      {\n+      case (JScrollBar.HORIZONTAL):\n+        incrButton = createIncreaseButton(EAST);\n+        decrButton = createDecreaseButton(WEST);\n+        break;\n+      default:\n+        incrButton = createIncreaseButton(SOUTH);\n+        decrButton = createDecreaseButton(NORTH);\n+        break;\n+      }\n     scrollbar.add(incrButton);\n-    decrButton = createDecreaseButton(scrollbar.getOrientation());\n     scrollbar.add(decrButton);\n   }\n \n@@ -869,9 +875,9 @@ public void installUI(JComponent c)\n \tscrollTimer.setRepeats(true);\n \n \tinstallComponents();\n-\tinstallListeners();\n \tinstallDefaults();\n \tconfigureScrollBarColors();\n+\tinstallListeners();\n \n \tcalculatePreferredSize();\n \tlayoutContainer(scrollbar);"}, {"sha": "da924bb49c8433d33361931f85b4b3aca56155f8", "filename": "libjava/javax/swing/plaf/basic/BasicScrollPaneUI.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollPaneUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -53,14 +53,18 @@\n public class BasicScrollPaneUI extends ScrollPaneUI\n   implements ScrollPaneConstants\n {\n-  \n+\n+  /** The Scrollpane for which the UI is provided by this class. */\n+  protected JScrollPane scrollpane;\n+\n   public static ComponentUI createUI(final JComponent c) \n   {\n     return new BasicScrollPaneUI();\n   }\n \n   protected void installDefaults(JScrollPane p)\n   {\n+    scrollpane = p;\n     UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n     p.setForeground(defaults.getColor(\"ScrollPane.foreground\"));\n     p.setBackground(defaults.getColor(\"ScrollPane.background\"));\n@@ -75,6 +79,7 @@ protected void uninstallDefaults(JScrollPane p)\n     p.setBackground(null);\n     p.setFont(null);\n     p.setBorder(null);\n+    scrollpane = null;\n   }\n     \n   public void installUI(final JComponent c) "}, {"sha": "8b7ebecf41a8345bd7c219b94f8ef01edbdd7c40", "filename": "libjava/javax/swing/plaf/metal/MetalBorders.java", "status": "modified", "additions": 177, "deletions": 15, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -49,6 +49,7 @@\n import javax.swing.border.AbstractBorder;\n import javax.swing.border.Border;\n import javax.swing.plaf.BorderUIResource;\n+import javax.swing.plaf.UIResource;\n import javax.swing.plaf.basic.BasicGraphicsUtils;\n import javax.swing.plaf.basic.BasicBorders;\n \n@@ -61,21 +62,28 @@\n public class MetalBorders\n {\n \n+  /** The shared instance for getButtonBorder(). */\n+  private static Border buttonBorder;\n+\n+  /** The shared instance for getRolloverButtonBorder(). */\n+  private static Border toolbarButtonBorder;\n+\n   /**\n    * A MarginBorder that gets shared by multiple components.\n    * Created on demand by the private helper function {@link\n    * #getMarginBorder()}.\n    */\n-  private static BasicBorders.MarginBorder sharedMarginBorder;\n+  private static BasicBorders.MarginBorder marginBorder;\n \n   /**\n    * The border that is drawn around Swing buttons.\n    */\n   public static class MetalButtonBorder\n     extends AbstractBorder\n+    implements UIResource\n   {\n     /** The borders insets. */\n-    protected static Insets borderInsets = new Insets(2, 2, 2, 2);\n+    protected static Insets borderInsets = new Insets(3, 3, 3, 3);\n \n     /**\n      * Creates a new instance of ButtonBorder.\n@@ -166,6 +174,7 @@ public Insets getBorderInsets(Component c, Insets newInsets)\n       if (newInsets == null)\n         newInsets = new Insets(0, 0, 0, 0);\n \n+      AbstractButton b = (AbstractButton) c;\n       newInsets.bottom = borderInsets.bottom;\n       newInsets.left = borderInsets.left;\n       newInsets.right = borderInsets.right;\n@@ -174,6 +183,141 @@ public Insets getBorderInsets(Component c, Insets newInsets)\n     }\n   }\n \n+  /**\n+   * This border is used in Toolbar buttons as inner border.\n+   */\n+  static class RolloverMarginBorder extends AbstractBorder\n+  {\n+    /** The borders insets. */\n+    protected static Insets borderInsets = new Insets(3, 3, 3, 3);\n+\n+    /**\n+     * Creates a new instance of RolloverBorder.\n+     */\n+    public RolloverMarginBorder()\n+    {\n+    }\n+    \n+    /**\n+     * Returns the insets of the RolloverBorder.\n+     *\n+     * @param c the component for which the border is used\n+     *\n+     * @return the insets of the RolloverBorder\n+     */\n+    public Insets getBorderInsets(Component c)\n+    {\n+      return getBorderInsets(c, null);\n+    }\n+\n+    /**\n+     * Returns the insets of the RolloverMarginBorder in the specified\n+     * Insets object.\n+     *\n+     * @param c the component for which the border is used\n+     * @param newInsets the insets object where to put the values\n+     *\n+     * @return the insets of the RolloverMarginBorder\n+     */\n+    public Insets getBorderInsets(Component c, Insets newInsets)\n+    {\n+      if (newInsets == null)\n+        newInsets = new Insets(0, 0, 0, 0);\n+\n+      AbstractButton b = (AbstractButton) c;\n+      Insets margin = b.getMargin();\n+      newInsets.bottom = borderInsets.bottom;\n+      newInsets.left = borderInsets.left;\n+      newInsets.right = borderInsets.right;\n+      newInsets.top = borderInsets.top;\n+      return newInsets;\n+    }\n+  }\n+\n+  /**\n+   * A border implementation for popup menus.\n+   */\n+  public static class PopupMenuBorder\n+    extends AbstractBorder\n+    implements UIResource\n+  {\n+\n+    /** The border's insets. */\n+    protected static Insets borderInsets = new Insets(2, 2, 1, 1);\n+\n+    /**\n+     * Constructs a new PopupMenuBorder.\n+     */\n+    public PopupMenuBorder()\n+    {\n+    }\n+    \n+    /**\n+     * Returns the insets of the border, creating a new Insets instance\n+     * with each call.\n+     *\n+     * @param c the component for which we return the border insets\n+     *          (not used here)\n+     */\n+    public Insets getBorderInsets(Component c)\n+    {\n+      return getBorderInsets(c, null);\n+    }\n+    \n+    /**\n+     * Returns the insets of the border, using the supplied Insets instance.\n+     *\n+     * @param c the component for which we return the border insets\n+     *          (not used here)\n+     * @param i the Insets instance to fill with the Insets values\n+     */\n+    public Insets getBorderInsets(Component c, Insets i)\n+    {\n+      Insets insets;\n+      if (i == null)\n+        insets = new Insets(borderInsets.top, borderInsets.left,\n+                            borderInsets.bottom, borderInsets.right);\n+      else\n+        {\n+          insets = i;\n+          insets.top = borderInsets.top;\n+          insets.left = borderInsets.left;\n+          insets.bottom = borderInsets.bottom;\n+          insets.right = borderInsets.right;\n+        }\n+      \n+      return insets;\n+    }\n+\n+    /**\n+     * Paints the border for component <code>c</code> using the\n+     * Graphics context <code>g</code> with the dimension\n+     * <code>x, y, w, h</code>.\n+     *\n+     * @param c the component for which we paint the border\n+     * @param g the Graphics context to use\n+     * @param x the X coordinate of the upper left corner of c\n+     * @param y the Y coordinate of the upper left corner of c\n+     * @param w the width of c\n+     * @param h the height of c\n+     */\n+    public void paintBorder(Component c, Graphics g, int x, int y, int w,\n+                            int h)\n+    {\n+      Color darkShadow = MetalLookAndFeel.getPrimaryControlDarkShadow();\n+      Color light = MetalLookAndFeel.getPrimaryControlHighlight();\n+\n+      // draw dark outer border\n+      g.setColor(darkShadow);\n+      g.drawRect(x, y, w - 1, h - 1);\n+      \n+      // draw highlighted inner border (only top and left)\n+      g.setColor(light);\n+      g.drawLine(x + 1, y + 1, x + 1, y + h - 2);\n+      g.drawLine(x + 1, y + 1, x + w - 2, y + 1);\n+    }\n+    \n+  }\n \n   /**\n    * Returns a border for Swing buttons in the Metal Look &amp; Feel.\n@@ -182,24 +326,42 @@ public Insets getBorderInsets(Component c, Insets newInsets)\n    */\n   public static Border getButtonBorder()\n   {\n-    Border outer = new MetalButtonBorder();\n-    Border inner = getMarginBorder();\n-\n-    return new BorderUIResource.CompoundBorderUIResource(outer, inner);\n+    if (buttonBorder == null)\n+      {\n+        Border outer = new MetalButtonBorder();\n+        Border inner = getMarginBorder();\n+        buttonBorder = new BorderUIResource.CompoundBorderUIResource\n+            (outer, inner);\n+      }\n+    return buttonBorder;\n   }\n \n   /**\n-   * Returns a shared MarginBorder.\n+   * Returns a border for Toolbar buttons in the Metal Look &amp; Feel.\n+   *\n+   * @return a border for Toolbar buttons in the Metal Look &amp; Feel\n    */\n-  static Border getMarginBorder()  // intentionally not public\n+  static Border getToolbarButtonBorder()\n   {\n-    /* Swing is not designed to be thread-safe, so there is no\n-     * need to synchronize the access to the global variable.\n-     */\n-    if (sharedMarginBorder == null)\n-      sharedMarginBorder = new BasicBorders.MarginBorder();\n-\n-    return sharedMarginBorder;\n+    if (toolbarButtonBorder == null)\n+      {\n+        Border outer = new MetalButtonBorder();\n+        Border inner = new RolloverMarginBorder();\n+        toolbarButtonBorder = new BorderUIResource.CompoundBorderUIResource\n+          (outer, inner);\n+      }\n+    return toolbarButtonBorder;\n   }\n \n+  /**\n+   * Returns a shared instance of {@link BasicBorders.MarginBorder}.\n+   *\n+   * @return a shared instance of {@link BasicBorders.MarginBorder}\n+   */\n+  static Border getMarginBorder()\n+  {\n+    if (marginBorder == null)\n+      marginBorder = new BasicBorders.MarginBorder();\n+    return marginBorder;\n+  }\n }"}, {"sha": "7b9130e0e5d610ae1395a853a28a26b4d56b8c8a", "filename": "libjava/javax/swing/plaf/metal/MetalButtonUI.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalButtonUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -40,6 +40,7 @@\n \n import javax.swing.AbstractButton;\n import javax.swing.JComponent;\n+import javax.swing.JToolBar;\n import javax.swing.UIDefaults;\n import javax.swing.UIManager;\n import javax.swing.plaf.ComponentUI;\n@@ -92,6 +93,9 @@ public void installDefaults(AbstractButton button)\n \n     UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n     button.setFont(defaults.getFont(\"Button.font\"));\n+\n+    if (button.getParent() instanceof JToolBar)\n+      button.setBorder(MetalBorders.getToolbarButtonBorder());\n   }\n \n }"}, {"sha": "f2f8e360060d7432db00cd870e856345f60f0c5e", "filename": "libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -38,6 +38,8 @@\n \n package javax.swing.plaf.metal;\n \n+import java.util.HashMap;\n+\n import javax.swing.JComponent;\n import javax.swing.JInternalFrame;\n import javax.swing.plaf.ComponentUI;\n@@ -47,9 +49,8 @@\n   extends BasicInternalFrameUI\n {\n \n-  // FIXME: maybe replace by a Map of instances when this becomes stateful\n-  /** The shared UI instance for JInternalFrames */\n-  private static MetalInternalFrameUI instance = null;\n+  /** The instances of MetalInternalFrameUI*/\n+  private static HashMap instances;\n \n   /**\n    * Constructs a new instance of MetalInternalFrameUI.\n@@ -68,8 +69,20 @@ public MetalInternalFrameUI(JInternalFrame frame)\n    */\n   public static ComponentUI createUI(JComponent component)\n   {\n-    if (instance == null)\n-      instance = new MetalInternalFrameUI((JInternalFrame) component);\n+    if (instances == null)\n+      instances = new HashMap();\n+\n+\n+    Object o = instances.get(component);\n+    MetalInternalFrameUI instance;\n+    if (o == null)\n+      {\n+\tinstance = new MetalInternalFrameUI((JInternalFrame) component);\n+\tinstances.put(component, instance);\n+      }\n+    else\n+      instance = (MetalInternalFrameUI) o;\n+\n     return instance;\n   }\n }"}, {"sha": "db48a7492b5bee5343f5ce75e8ba45c1ed2f82b9", "filename": "libjava/javax/swing/plaf/metal/MetalLookAndFeel.java", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -449,6 +449,9 @@ protected void initClassDefaults(UIDefaults defaults)\n    * </tr><tr>\n    * <td>ScrollBar.background</td><td>0xcccccc</td>\n    * </tr><tr>\n+   * <td>PopupMenu.border</td>\n+   * <td><code>new javax.swing.plaf.metal.MetalBorders.PopupMenuBorder()</td>\n+   * </tr><tr>\n    * </table>\n    *\n    * @param defaults the UIDefaults instance to which the values are added\n@@ -472,9 +475,13 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"Label.background\", new ColorUIResource(getControl()),\n       \"Label.font\", getControlTextFont(),\n       \"Menu.background\", new ColorUIResource(getControl()),\n+      \"Menu.font\", getControlTextFont(),\n       \"MenuBar.background\", new ColorUIResource(getControl()),\n+      \"MenuBar.font\", getControlTextFont(),\n       \"MenuItem.background\", new ColorUIResource(getControl()),\n-      \"ScrollBar.background\", new ColorUIResource(getControl())\n+      \"MenuItem.font\", getControlTextFont(),\n+      \"ScrollBar.background\", new ColorUIResource(getControl()),\n+      \"PopupMenu.border\", new MetalBorders.PopupMenuBorder()\n     };\n     defaults.putDefaults(myDefaults);\n   }"}, {"sha": "e89ccc6a422f505bc9f806a445a9884d61ce6b3f", "filename": "libjava/javax/swing/plaf/metal/MetalScrollBarUI.java", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalScrollBarUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -38,6 +38,8 @@\n \n package javax.swing.plaf.metal;\n \n+import java.util.HashMap;\n+\n import javax.swing.JComponent;\n import javax.swing.plaf.ComponentUI;\n import javax.swing.plaf.basic.BasicScrollBarUI;\n@@ -48,7 +50,7 @@\n \n   // FIXME: maybe replace by a Map of instances when this becomes stateful\n   /** The shared UI instance for JScrollBars. */\n-  private static MetalScrollBarUI instance = null;\n+  private static HashMap instances = null;\n \n   /**\n    * Constructs a new instance of MetalScrollBarUI.\n@@ -67,8 +69,19 @@ public MetalScrollBarUI()\n    */\n   public static ComponentUI createUI(JComponent component)\n   {\n-    if (instance == null)\n-      instance = new MetalScrollBarUI();\n+    if (instances == null)\n+      instances = new HashMap();\n+\n+    Object o = instances.get(component);\n+    MetalScrollBarUI instance;\n+    if (o == null)\n+      {\n+\tinstance = new MetalScrollBarUI();\n+\tinstances.put(component, instance);\n+      }\n+    else\n+      instance = (MetalScrollBarUI) o;\n+\n     return instance;\n   }\n }"}, {"sha": "fafd21d3e02d8614c716a934353734fcb160c795", "filename": "libjava/javax/swing/plaf/metal/MetalSliderUI.java", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalSliderUI.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -38,6 +38,8 @@\n \n package javax.swing.plaf.metal;\n \n+import java.util.HashMap;\n+\n import javax.swing.JComponent;\n import javax.swing.plaf.ComponentUI;\n import javax.swing.plaf.basic.BasicSliderUI;\n@@ -46,9 +48,8 @@\n   extends BasicSliderUI\n {\n \n-  // FIXME: maybe replace by a Map of instances when this becomes stateful\n-  /** The shared UI instance for MetalSliderUIs */\n-  private static MetalSliderUI instance = null;\n+  /** The UI instances for MetalSliderUIs */\n+  private static HashMap instances;\n \n   /**\n    * Constructs a new instance of MetalSliderUI.\n@@ -67,8 +68,20 @@ public MetalSliderUI()\n    */\n   public static ComponentUI createUI(JComponent component)\n   {\n-    if (instance == null)\n-      instance = new MetalSliderUI();\n+    if (instances == null)\n+      instances = new HashMap();\n+\n+\n+    Object o = instances.get(component);\n+    MetalSliderUI instance;\n+    if (o == null)\n+      {\n+\tinstance = new MetalSliderUI();\n+\tinstances.put(component, instance);\n+      }\n+    else\n+      instance = (MetalSliderUI) o;\n+\n     return instance;\n   }\n }"}, {"sha": "05b9741de178b39643ce3e7555e2513e445a8837", "filename": "libjava/javax/swing/tree/DefaultTreeSelectionModel.java", "status": "modified", "additions": 162, "deletions": 69, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9257bcc8fa8f754fc85697a034c5677e34070a0d/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java?ref=9257bcc8fa8f754fc85697a034c5677e34070a0d", "patch": "@@ -67,71 +67,75 @@\n   public static final String SELECTION_MODE_PROPERTY = \"selectionMode\";\n \n   /**\n-   * changeSupport\n+   * Our Swing property change support.\n    */\n   protected SwingPropertyChangeSupport changeSupport;\n \n   /**\n-   * selection\n+   * The current selection.\n    */\n   protected TreePath[] selection;\n \n   /**\n-   * listenerList\n+   * Our TreeSelectionListeners.\n    */\n   protected EventListenerList listenerList;\n \n   /**\n-   * rowMapper\n+   * The current RowMapper.\n    */\n   protected transient RowMapper rowMapper;\n \n   /**\n-   * listSelectionModel\n+   * The current listSelectionModel.\n    */\n   protected DefaultListSelectionModel listSelectionModel;\n \n   /**\n-   * selectionMode\n+   * The current selection mode.\n    */\n   protected int selectionMode;\n \n   /**\n-   * leadPath\n+   * The path that has been added last.\n    */\n   protected TreePath leadPath;\n \n   /**\n-   * leadIndex\n+   * The index of the last added path.\n    */\n   protected int leadIndex;\n \n   /**\n-   * leadRow\n+   * The row of the last added path according to the RowMapper.\n    */\n   protected int leadRow;\n \n   /**\n-   * Constructor DefaultTreeSelectionModel\n+   * Constructs a new DefaultTreeSelectionModel.\n    */\n   public DefaultTreeSelectionModel()\n   {\n     // TODO\n   }\n \n   /**\n-   * clone\n-   * @exception CloneNotSupportedException TODO\n-   * @return Object\n+   * Creates a clone of this DefaultTreeSelectionModel with the same\n+   * selection.\n+   *\n+   * @exception CloneNotSupportedException should not be thrown here\n+   *\n+   * @return a clone of this DefaultTreeSelectionModel\n    */\n   public Object clone() throws CloneNotSupportedException\n   {\n     return null; // TODO\n   }\n \n   /**\n-   * toString\n-   * @return String\n+   * Returns a string that shows this object's properties.\n+   *\n+   * @return a string that shows this object's properties\n    */\n   public String toString()\n   {\n@@ -161,143 +165,201 @@ private void readObject(ObjectInputStream value0)\n   }\n \n   /**\n-   * setRowMapper\n-   * @param value0 TODO\n+   * Sets the RowMapper that should be used to map between paths and their\n+   * rows.\n+   *\n+   * @param rowMapper the RowMapper to set\n+   *\n+   * @see {@link RowMapper\n    */\n   public void setRowMapper(RowMapper value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * getRowMapper\n-   * @return RowMapper\n+   * Returns the RowMapper that is currently used to map between paths and\n+   * their rows.\n+   *\n+   * @return the current RowMapper\n+   *\n+   * @see {@link RowMapper\n    */\n   public RowMapper getRowMapper()\n   {\n     return null; // TODO\n   }\n \n   /**\n-   * setSelectionMode\n-   * @param value0 TODO\n+   * Sets the current selection mode. Possible values are\n+   * {@link #SINGLE_TREE_SELECTION}, {@link CONTIGUOUS_TREE_SELECTION}\n+   * and {@link #DISCONTIGUOUS_TREE_SELECTION}.\n+   *\n+   * @param mode the selection mode to be set\n+   *\n+   * @see {@link #getSelectionMode}\n+   * @see {@link #SINGLE_TREE_SELECTION}\n+   * @see {@link #CONTIGUOUS_TREE_SELECTION}\n+   * @see {@link #DISCONTIGUOUS_TREE_SELECTION}\n    */\n   public void setSelectionMode(int value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * getSelectionMode\n-   * @return int\n+   * Returns the current selection mode.\n+   *\n+   * @return the current selection mode\n+   *\n+   * @see {@link #setSelectionMode}\n+   * @see {@link #SINGLE_TREE_SELECTION}\n+   * @see {@link #CONTIGUOUS_TREE_SELECTION}\n+   * @see {@link #DISCONTIGUOUS_TREE_SELECTION}\n    */\n   public int getSelectionMode()\n   {\n     return 0; // TODO\n   }\n \n   /**\n-   * setSelectionPath\n-   * @param value0 TODO\n+   * Sets this path as the only selection.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param path the path to set as selection\n    */\n   public void setSelectionPath(TreePath value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * setSelectionPaths\n-   * @param value0 TODO\n+   * Sets the paths as selection. This method checks for duplicates and\n+   * removes them.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param paths the paths to set as selection\n    */\n   public void setSelectionPaths(TreePath[] value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * addSelectionPath\n-   * @param value0 TODO\n+   * Adds a path to the list of selected paths. This method checks if the\n+   * path is already selected and doesn't add the same path twice.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param path the path to add to the selection\n    */\n   public void addSelectionPath(TreePath value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * addSelectionPaths\n-   * @param value0 TODO\n+   * Adds the paths to the list of selected paths. This method checks if the\n+   * paths are already selected and doesn't add the same path twice.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param paths the paths to add to the selection\n    */\n   public void addSelectionPaths(TreePath[] value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * removeSelectionPath\n-   * @param value0 TODO\n+   * Removes the path from the selection.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param path the path to remove\n    */\n   public void removeSelectionPath(TreePath value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * removeSelectionPaths\n-   * @param value0 TODO\n+   * Removes the paths from the selection.\n+   *\n+   * If this changes the selection the registered TreeSelectionListeners\n+   * are notified.\n+   *\n+   * @param paths the path to remove\n    */\n   public void removeSelectionPaths(TreePath[] value0)\n   {\n     // TODO\n   }\n \n   /**\n-   * getSelectionPath\n-   * @return TreePath\n+   * Returns the first path in the selection. This is especially useful\n+   * when the selectionMode is {@link #SINGLE_TREE_SELECTION}.\n+   *\n+   * @return the first path in the selection\n    */\n   public TreePath getSelectionPath()\n   {\n     return null; // TODO\n   }\n \n   /**\n-   * getSelectionPaths\n-   * @return TreePath[]\n+   * Returns the complete selection.\n+   *\n+   * @return the complete selection\n    */\n   public TreePath[] getSelectionPaths()\n   {\n     return null; // TODO\n   }\n \n   /**\n-   * getSelectionCount\n-   * @return int\n+   * Returns the number of paths in the selection.\n+   *\n+   * @return the number of paths in the selection\n    */\n   public int getSelectionCount()\n   {\n     return 0; // TODO\n   }\n \n   /**\n-   * isPathSelected\n-   * @param value0 TODO\n-   * @return boolean\n+   * Checks if a given path is in the selection.\n+   *\n+   * @param path the path to check\n+   *\n+   * @return <code>true</code> if the path is in the selection,\n+   *         <code>false</code> otherwise\n    */\n   public boolean isPathSelected(TreePath value0)\n   {\n     return false; // TODO\n   }\n \n   /**\n-   * isSelectionEmpty\n-   * @return boolean\n+   * Checks if the selection is empty.\n+   *\n+   * @return <code>true</code> if the selection is empty,\n+   *         <code>false</code> otherwise\n    */\n   public boolean isSelectionEmpty()\n   {\n     return false; // TODO\n   }\n \n   /**\n-   * clearSelection\n+   * Removes all paths from the selection.\n    */\n   public void clearSelection()\n   {\n@@ -364,44 +426,50 @@ public EventListener[] getListeners(Class listenerType)\n   }\n \n   /**\n-   * getSelectionRows\n-   * @return int[]\n+   * Returns the currently selected rows.\n+   *\n+   * @return the currently selected rows\n    */\n   public int[] getSelectionRows()\n   {\n     return null; // TODO\n   }\n \n   /**\n-   * getMinSelectionRow\n-   * @return int\n+   * Returns the smallest row index from the selection.\n+   *\n+   * @return the smallest row index from the selection\n    */\n   public int getMinSelectionRow()\n   {\n     return 0; // TODO\n   }\n \n   /**\n-   * getMaxSelectionRow\n-   * @return int\n+   * Returns the largest row index from the selection.\n+   *\n+   * @return the largest row index from the selection\n    */\n   public int getMaxSelectionRow()\n   {\n     return 0; // TODO\n   }\n \n   /**\n-   * isRowSelected\n-   * @param value0 TODO\n-   * @return boolean\n+   * Checks if a particular row is selected.\n+   *\n+   * @param row the index of the row to check\n+   *\n+   * @return <code>true</code> if the row is in this selection,\n+   *         <code>false</code> otherwise\n    */\n   public boolean isRowSelected(int value0)\n   {\n     return false; // TODO\n   }\n \n   /**\n-   * resetRowSelection\n+   * Updates the mappings from TreePaths to row indices.\n    */\n   public void resetRowSelection()\n   {\n@@ -459,37 +527,62 @@ public PropertyChangeListener[] getPropertyChangeListeners()\n   }\n \n   /**\n-   * insureRowContinuity\n+   * Makes sure the currently selected paths are valid according to the\n+   * current selectionMode.\n+   *\n+   * If the selectionMode is set to {@link CONTIGUOUS_TREE_SELECTION}\n+   * and the selection isn't contiguous then the selection is reset to\n+   * the first set of contguous paths.\n+   *\n+   * If the selectionMode is set to {@link SINGLE_TREE_SELECTION}\n+   * and the selection has more than one path, the selection is reset to\n+   * the contain only the first path.\n    */\n   protected void insureRowContinuity()\n   {\n     // TODO\n   }\n \n   /**\n-   * arePathsContiguous\n-   * @param value0 TODO\n-   * @return boolean\n+   * Returns <code>true</code> if the paths are contiguous or we\n+   * have no RowMapper assigned.\n+   *\n+   * @param paths the paths to check for continuity\n+   * @return <code>true</code> if the paths are contiguous or we\n+   *         have no RowMapper assigned\n    */\n   protected boolean arePathsContiguous(TreePath[] value0)\n   {\n     return false; // TODO\n   }\n \n   /**\n-   * canPathsBeAdded\n-   * @param value0 TODO\n-   * @return boolean\n+   * Checks if the paths can be added. This returns <code>true</code> if:\n+   * <ul>\n+   * <li><code>paths</code> is <code>null</code> or empty</li>\n+   * <li>we have no RowMapper assigned</li>\n+   * <li>nothing is currently selected</li>\n+   * <li>selectionMode is {@link DISCONTIGUOUS_TREE_SELECTION</li>\n+   * <li>adding the paths to the selection still results in a contiguous set\n+   *   of paths</li>\n+   *\n+   * @param paths the paths to check\n+   *\n+   * @return <code>true</code> if the paths can be added with respect to the\n+   *         selectionMode\n    */\n   protected boolean canPathsBeAdded(TreePath[] value0)\n   {\n     return false; // TODO\n   }\n \n   /**\n-   * canPathsBeRemoved\n-   * @param value0 TODO\n-   * @return boolean\n+   * Checks if the paths can be removed without breaking the continuity of\n+   * the selection according to selectionMode.\n+   *\n+   * @param paths the paths to check\n+   * @return  <code>true</code> if the paths can be removed with respect to the\n+   *         selectionMode\n    */\n   protected boolean canPathsBeRemoved(TreePath[] value0)\n   {\n@@ -507,15 +600,15 @@ protected void notifyPathChange(Vector value0, TreePath value1)\n   }\n \n   /**\n-   * updateLeadIndex\n+   * Updates the lead index instance field.\n    */\n   protected void updateLeadIndex()\n   {\n     // TODO\n   }\n \n   /**\n-   * insureUniqueness\n+   * Deprecated and not used.\n    */\n   protected void insureUniqueness()\n   {"}]}