{"sha": "d30c94610f659937c248c3ee06f789fb2200fd38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwYzk0NjEwZjY1OTkzN2MyNDhjM2VlMDZmNzg5ZmIyMjAwZmQzOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-04T10:00:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-04T10:00:55Z"}, "message": "re PR target/19235 (GCC generates SSE2 instructions for AthlonXP which doesn't support them.)\n\n        PR target/19235\n        * config/i386/i386.md (movdi_2): Separate SSE1 and SSE2 alternatives.\n        (mov<MMXMODEI>_internal): Likewise.\n        (movdf_nointeger): Prefer Y while not preferring, but allowing, x.\n        Add V2SF case; use it for SSE1; don't use TI.\n        (movdf_integer): Likewise.\n        (mov<SSEMODEI>_internal, movti_internal): Force V4SF for SSE1.\n\nFrom-SVN: r92889", "tree": {"sha": "b008982197840fff22fed360fd068a3ef0ecfc57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b008982197840fff22fed360fd068a3ef0ecfc57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d30c94610f659937c248c3ee06f789fb2200fd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30c94610f659937c248c3ee06f789fb2200fd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30c94610f659937c248c3ee06f789fb2200fd38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30c94610f659937c248c3ee06f789fb2200fd38/comments", "author": null, "committer": null, "parents": [{"sha": "7d23434bbe5fcf17afa0f57f7cbddf985c8425cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d23434bbe5fcf17afa0f57f7cbddf985c8425cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d23434bbe5fcf17afa0f57f7cbddf985c8425cb"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "4437724366eb1ae3102355c4737ebca7d13a2f0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d30c94610f659937c248c3ee06f789fb2200fd38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d30c94610f659937c248c3ee06f789fb2200fd38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d30c94610f659937c248c3ee06f789fb2200fd38", "patch": "@@ -1,3 +1,13 @@\n+2005-01-03  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/19235\n+\t* config/i386/i386.md (movdi_2): Separate SSE1 and SSE2 alternatives.\n+\t(mov<MMXMODEI>_internal): Likewise.\n+\t(movdf_nointeger): Prefer Y while not preferring, but allowing, x.\n+\tAdd V2SF case; use it for SSE1; don't use TI.\n+\t(movdf_integer): Likewise.\n+\t(mov<SSEMODEI>_internal, movti_internal): Force V4SF for SSE1.\n+\n 2005-01-03  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vectorizer.c (vect_strip_conversions): New function."}, {"sha": "add15a8781c149cc6325c07ca5c6f53a76b35665", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d30c94610f659937c248c3ee06f789fb2200fd38/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d30c94610f659937c248c3ee06f789fb2200fd38/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d30c94610f659937c248c3ee06f789fb2200fd38", "patch": "@@ -1899,8 +1899,10 @@\n    (set_attr \"length_immediate\" \"1\")])\n \n (define_insn \"*movdi_2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,!m*y,!*y,!m,!*x,!*x\")\n-\t(match_operand:DI 1 \"general_operand\" \"riFo,riF,*y,m,*x,*x,m\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+\t\t\t\t\t\"=r  ,o  ,m*y,*y,m ,*Y,*Y,m ,*x,*x\")\n+\t(match_operand:DI 1 \"general_operand\"\n+\t\t\t\t\t\"riFo,riF,*y ,m ,*Y,*Y,m ,*x,*x,m \"))]\n   \"!TARGET_64BIT\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n@@ -1910,9 +1912,12 @@\n    movq\\t{%1, %0|%0, %1}\n    movq\\t{%1, %0|%0, %1}\n    movdqa\\t{%1, %0|%0, %1}\n-   movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"*,*,mmx,mmx,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI\")])\n+   movq\\t{%1, %0|%0, %1}\n+   movlps\\t{%1, %0|%0, %1}\n+   movaps\\t{%1, %0|%0, %1}\n+   movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"*,*,mmx,mmx,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,V2SF,V4SF,V2SF\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"push_operand\" \"\")\n@@ -2444,9 +2449,9 @@\n \n (define_insn \"*movdf_nointeger\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=f#x,m  ,f#x,*r  ,o  ,x#f,x#f,x#f  ,m\")\n+\t\t\t\"=f#Y,m  ,f#Y,*r  ,o  ,Y#f*x,Y#f*x,Y#f*x  ,m    \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\t\t\"fm#x,f#x,G  ,*roF,F*r,C  ,x#f,xHm#f,x#f\"))]\n+\t\t\t\"fm#Y,f#Y,G  ,*roF,F*r,C    ,Y#f*x,HmY#f*x,Y#f*x\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && ((optimize_size || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n@@ -2500,6 +2505,8 @@\n \t  return \"movsd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V1DF:\n \t  return \"movlpd\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2SF:\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n \t  abort ();\n \t}\n@@ -2510,18 +2517,17 @@\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,ssemov,ssemov,ssemov,ssemov\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"3,4\")\n+        (cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"DF\")\n+\t       (eq_attr \"alternative\" \"3,4\")\n \t\t (const_string \"SI\")\n \n \t       /* For SSE1, we have many fewer alternatives.  */\n \t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n \t\t (cond [(eq_attr \"alternative\" \"5,6\")\n-\t\t\t  (if_then_else\n-\t\t\t    (ne (symbol_ref \"optimize_size\") (const_int 0))\n-\t\t\t    (const_string \"V4SF\")\n-\t\t\t    (const_string \"TI\"))\n+\t\t\t  (const_string \"V4SF\")\n \t\t       ]\n-\t\t   (const_string \"DI\"))\n+\t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5\")\n@@ -2563,9 +2569,9 @@\n \n (define_insn \"*movdf_integer\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t\"=f#Yr,m   ,f#Yr,r#Yf  ,o    ,Y#rf,Y#rf,Y#rf ,m\")\n+\t\t\"=f#Yr,m   ,f#Yr,r#Yf  ,o    ,Y#rf*x,Y#rf*x,Y#rf*x,m\")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\t\"fm#Yr,f#Yr,G   ,roF#Yf,Fr#Yf,C   ,Y#rf,Ym#rf,Y#rf\"))]\n+\t\t\"fm#Yr,f#Yr,G   ,roF#Yf,Fr#Yf,C     ,Y#rf*x,m     ,Y#rf*x\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && ((!optimize_size && TARGET_INTEGER_DFMODE_MOVES) || TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n@@ -2620,6 +2626,8 @@\n \t  return \"movsd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V1DF:\n \t  return \"movlpd\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V2SF:\n+\t  return \"movlps\\t{%1, %0|%0, %1}\";\n \tdefault:\n \t  abort ();\n \t}\n@@ -2630,18 +2638,17 @@\n }\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi,ssemov,ssemov,ssemov,ssemov\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"3,4\")\n+        (cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"DF\")\n+\t       (eq_attr \"alternative\" \"3,4\")\n \t\t (const_string \"SI\")\n \n \t       /* For SSE1, we have many fewer alternatives.  */\n \t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n \t\t (cond [(eq_attr \"alternative\" \"5,6\")\n-\t\t\t  (if_then_else\n-\t\t\t    (ne (symbol_ref \"optimize_size\") (const_int 0))\n-\t\t\t    (const_string \"V4SF\")\n-\t\t\t    (const_string \"TI\"))\n+\t\t\t  (const_string \"V4SF\")\n \t\t       ]\n-\t\t   (const_string \"DI\"))\n+\t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5\")\n@@ -19825,7 +19832,10 @@\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,1\")\n+        (cond [(eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t\t (const_string \"V4SF\")\n+\n+\t       (eq_attr \"alternative\" \"0,1\")\n \t\t (if_then_else\n \t\t   (ne (symbol_ref \"optimize_size\")\n \t\t       (const_int 0))\n@@ -19878,9 +19888,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=*y,*y ,m ,*y,*Y,*x,*x ,m\")\n+\t\t\t\t\"=*y,*y ,m ,*y,*Y,*Y,*Y ,m ,*x,*x,*x,m\")\n \t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\t\t\"C  ,*ym,*y,*Y,*y,C ,*xm,*x\"))]\n+\t\t\t\t\"C  ,*ym,*y,*Y,*y,C ,*Ym,*Y,C ,*x,m ,*x\"))]\n   \"TARGET_MMX\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n@@ -19891,9 +19901,13 @@\n     movq2dq\\t{%1, %0|%0, %1}\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov\")\n-   (set_attr \"mode\" \"DI\")])\n+    movq\\t{%1, %0|%0, %1}\n+    xorps\\t%0, %0\n+    movaps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\n+    movlps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF\")])\n \n (define_expand \"movv2sf\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n@@ -19983,7 +19997,10 @@\n }\n   [(set_attr \"type\" \"ssemov,ssemov,ssemov\")\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"0,1\")\n+        (cond [(eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t\t (const_string \"V4SF\")\n+\n+\t       (eq_attr \"alternative\" \"0,1\")\n \t\t (if_then_else\n \t\t   (ne (symbol_ref \"optimize_size\")\n \t\t       (const_int 0))"}]}