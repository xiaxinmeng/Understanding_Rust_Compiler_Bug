{"sha": "a7dc5980e91d758905750a5c0a533f689eca355e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkYzU5ODBlOTFkNzU4OTA1NzUwYTVjMGE1MzNmNjg5ZWNhMzU1ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-23T15:37:09Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-05-23T15:37:09Z"}, "message": "re PR c/49859 (gcc could warn about statements between \"switch\" and first \"case\")\n\n\tPR c/49859\n\t* common.opt (Wswitch-unreachable): New option.\n\t* doc/invoke.texi: Document -Wswitch-unreachable.\n\t* gimplify.c (gimplify_switch_expr): Implement the -Wswitch-unreachable\n\twarning.\n\n\t* c-c++-common/Wswitch-unreachable-1.c: New test.\n\t* gcc.dg/Wswitch-unreachable-1.c: New test.\n\t* c-c++-common/goacc/sb-2.c (void foo): Add dg-warning.\n\t* g++.dg/cpp0x/lambda/lambda-switch.C (main): Likewise.\n\t* g++.dg/gomp/block-10.C: Likewise.\n\t* gcc.dg/gomp/block-10.c: Likewise.\n\t* g++.dg/gomp/block-9.C: Likewise.\n\t* gcc.dg/gomp/block-9.c: Likewise.\n\t* g++.dg/gomp/target-1.C: Likewise.\n\t* g++.dg/gomp/target-2.C: Likewise.\n\t* gcc.dg/gomp/target-1.c: Likewise.\n\t* gcc.dg/gomp/target-2.c: Likewise. \n\t* g++.dg/gomp/taskgroup-1.C: Likewise.\n\t* gcc.dg/gomp/taskgroup-1.c: Likewise.\n\t* gcc.dg/gomp/teams-1.c: Likewise.\n\t* g++.dg/gomp/teams-1.C: Likewise.\n\t* g++.dg/overload/error3.C: Likewise.\n\t* g++.dg/tm/jump1.C: Likewise.\n\t* g++.dg/torture/pr40335.C: Likewise.\n\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n\t* gcc.dg/switch-warn-1.c: Likewise.\n\t* gcc.dg/Wjump-misses-init-1.c: Use -Wno-switch-unreachable.\n\t* gcc.dg/nested-func-1.c: Likewise.\n\t* gcc.dg/pr67784-4.c: Likewise.\n\nFrom-SVN: r236597", "tree": {"sha": "d51176bb0505d6371f073a25030266ac0a853be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51176bb0505d6371f073a25030266ac0a853be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7dc5980e91d758905750a5c0a533f689eca355e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7dc5980e91d758905750a5c0a533f689eca355e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7dc5980e91d758905750a5c0a533f689eca355e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7dc5980e91d758905750a5c0a533f689eca355e/comments", "author": null, "committer": null, "parents": [{"sha": "7e5a3c96db2383a41587d6525b4ac9ea1fafe091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5a3c96db2383a41587d6525b4ac9ea1fafe091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5a3c96db2383a41587d6525b4ac9ea1fafe091"}], "stats": {"total": 334, "additions": 294, "deletions": 40}, "files": [{"sha": "d838407bc0b4e3864360493e22b167541ed387ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1,4 +1,12 @@\n-2016-05-23 Bin Cheng  <bin.cheng@arm.com>\n+2016-05-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49859\n+\t* common.opt (Wswitch-unreachable): New option.\n+\t* doc/invoke.texi: Document -Wswitch-unreachable.\n+\t* gimplify.c (gimplify_switch_expr): Implement the -Wswitch-unreachable\n+\twarning.\n+\n+2016-05-23  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-address.c (copy_ref_info): Check NULL TMR_STEP when\n \tTMR_INDEX is non-NULL."}, {"sha": "fccd4b5f9a54a038101d409b648c4e3c8bc12a0a", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -707,6 +707,11 @@ Wsuggest-final-methods\n Common Var(warn_suggest_final_methods) Warning\n Warn about C++ virtual methods where adding final keyword would improve code quality.\n \n+Wswitch-unreachable\n+Common Var(warn_switch_unreachable) Warning Init(1)\n+Warn about statements between switch's controlling expression and the first\n+case.\n+\n Wsystem-headers\n Common Var(warn_system_headers) Warning\n Do not suppress warnings from system headers."}, {"sha": "d2dfdd9914f951457749fc01d042780e83d08086", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -297,7 +297,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{]} @gol\n -Wsuggest-final-types @gol -Wsuggest-final-methods -Wsuggest-override @gol\n -Wmissing-format-attribute -Wsubobject-linkage @gol\n--Wswitch  -Wswitch-default  -Wswitch-enum -Wswitch-bool -Wsync-nand @gol\n+-Wswitch  -Wswitch-bool  -Wswitch-default  -Wswitch-enum @gol\n+-Wswitch-unreachable  -Wsync-nand @gol\n -Wsystem-headers  -Wtautological-compare  -Wtrampolines  -Wtrigraphs @gol\n -Wtype-limits  -Wundef @gol\n -Wuninitialized  -Wunknown-pragmas  -Wunsafe-loop-optimizations @gol\n@@ -4144,6 +4145,39 @@ switch ((int) (a == 4))\n @end smallexample\n This warning is enabled by default for C and C++ programs.\n \n+@item -Wswitch-unreachable\n+@opindex Wswitch-unreachable\n+@opindex Wno-switch-unreachable\n+Warn whenever a @code{switch} statement contains statements between the\n+controlling expression and the first case label, which will never be\n+executed.  For example:\n+@smallexample\n+@group\n+switch (cond)\n+  @{\n+   i = 15;\n+  @dots{}\n+   case 5:\n+  @dots{}\n+  @}\n+@end group\n+@end smallexample\n+@option{-Wswitch-unreachable} does not warn if the statement between the\n+controlling expression and the first case label is just a declaration:\n+@smallexample\n+@group\n+switch (cond)\n+  @{\n+   int i;\n+  @dots{}\n+   case 5:\n+   i = 5;\n+  @dots{}\n+  @}\n+@end group\n+@end smallexample\n+This warning is enabled by default for C and C++ programs.\n+\n @item -Wsync-nand @r{(C and C++ only)}\n @opindex Wsync-nand\n @opindex Wno-sync-nand"}, {"sha": "6473544251c9e5276754eb6b7c39b7ed354b994e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1595,6 +1595,32 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n       gimplify_ctxp->case_labels.create (8);\n \n       gimplify_stmt (&SWITCH_BODY (switch_expr), &switch_body_seq);\n+\n+      /* Possibly warn about unreachable statements between switch's\n+\t controlling expression and the first case.  */\n+      if (warn_switch_unreachable\n+\t  /* This warning doesn't play well with Fortran when optimizations\n+\t     are on.  */\n+\t  && !lang_GNU_Fortran ()\n+\t  && switch_body_seq != NULL)\n+\t{\n+\t  gimple_seq seq = switch_body_seq;\n+\t  if (gimple_code (switch_body_seq) == GIMPLE_BIND)\n+\t    seq = gimple_bind_body (as_a <gbind *> (switch_body_seq));\n+\t  gimple *stmt = gimple_seq_first_stmt (seq);\n+\t  enum gimple_code code = gimple_code (stmt);\n+\t  if (code != GIMPLE_LABEL && code != GIMPLE_TRY)\n+\t    {\n+\t      if (code == GIMPLE_GOTO\n+\t\t  && TREE_CODE (gimple_goto_dest (stmt)) == LABEL_DECL\n+\t\t  && DECL_ARTIFICIAL (gimple_goto_dest (stmt)))\n+\t\t/* Don't warn for compiler-generated gotos.  These occur\n+\t\t   in Duff's devices, for example.  */;\n+\t      else\n+\t\twarning_at (gimple_location (stmt), OPT_Wswitch_unreachable,\n+\t\t\t    \"statement will never be executed\");\n+\t    }\n+\t}\n       labels = gimplify_ctxp->case_labels;\n       gimplify_ctxp->case_labels = saved_labels;\n "}, {"sha": "5a5c7b8515f6f9a19cd849ba94feaf32ee5c20f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1,3 +1,31 @@\n+2016-05-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49859\n+\t* c-c++-common/Wswitch-unreachable-1.c: New test.\n+\t* gcc.dg/Wswitch-unreachable-1.c: New test.\n+\t* c-c++-common/goacc/sb-2.c (void foo): Add dg-warning.\n+\t* g++.dg/cpp0x/lambda/lambda-switch.C (main): Likewise.\n+\t* g++.dg/gomp/block-10.C: Likewise.\n+\t* gcc.dg/gomp/block-10.c: Likewise.\n+\t* g++.dg/gomp/block-9.C: Likewise.\n+\t* gcc.dg/gomp/block-9.c: Likewise.\n+\t* g++.dg/gomp/target-1.C: Likewise.\n+\t* g++.dg/gomp/target-2.C: Likewise.\n+\t* gcc.dg/gomp/target-1.c: Likewise.\n+\t* gcc.dg/gomp/target-2.c: Likewise. \n+\t* g++.dg/gomp/taskgroup-1.C: Likewise.\n+\t* gcc.dg/gomp/taskgroup-1.c: Likewise.\n+\t* gcc.dg/gomp/teams-1.c: Likewise.\n+\t* g++.dg/gomp/teams-1.C: Likewise.\n+\t* g++.dg/overload/error3.C: Likewise.\n+\t* g++.dg/tm/jump1.C: Likewise.\n+\t* g++.dg/torture/pr40335.C: Likewise.\n+\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n+\t* gcc.dg/switch-warn-1.c: Likewise.\n+\t* gcc.dg/Wjump-misses-init-1.c: Use -Wno-switch-unreachable.\n+\t* gcc.dg/nested-func-1.c: Likewise.\n+\t* gcc.dg/pr67784-4.c: Likewise.\n+\n 2016-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71230"}, {"sha": "ee6ecc1c37cf44f739afff5a370ee370877f8e88", "filename": "gcc/testsuite/c-c++-common/Wswitch-unreachable-1.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWswitch-unreachable-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -0,0 +1,116 @@\n+/* PR c/49859 */\n+/* { dg-do compile } */\n+\n+extern void foo (int);\n+extern int j;\n+\n+void\n+fn0 (int i)\n+{\n+  switch (i)\n+    {\n+    int k;\n+    case 1:\n+      k = 11;\n+      foo (k);\n+    }\n+\n+  switch (i)\n+    j = 10; /* { dg-warning \"statement will never be executed\" } */\n+\n+  switch (i)\n+    ;\n+\n+  switch (i)\n+    {\n+    j = 12; /* { dg-warning \"statement will never be executed\" } */\n+    default:\n+      foo (j);\n+    }\n+\n+  int o;\n+  switch (i)\n+    {\n+    o = 333; /* { dg-warning \"statement will never be executed\" } */\n+    case 4: break;\n+    default:\n+      foo (o);\n+    }\n+\n+  switch (i)\n+    switch (j) /* { dg-warning \"statement will never be executed\" } */\n+      {\n+      o = 42; /* { dg-warning \"statement will never be executed\" } */\n+      case 8:;\n+      }\n+\n+  switch (i)\n+    {\n+      int l = 3; /* { dg-warning \"statement will never be executed\" } */\n+      o = 5;\n+      j = 7;\n+      ++l;\n+    }\n+\n+  switch (i)\n+    {\n+      int x;\n+      int l = 3; /* { dg-warning \"statement will never be executed\" } */\n+      ++l, ++x;\n+    }\n+\n+  switch (i)\n+    if (j != 3) /* { dg-warning \"statement will never be executed\" } */\n+      foo (j);\n+\n+  switch (i)\n+    while (1)\n+     foo (0);\n+\n+  switch (i)\n+    while (i > 5) { }\n+\n+  switch (i)\n+    goto X; /* { dg-warning \"statement will never be executed\" } */\n+X:\n+\n+  switch (i)\n+    do\n+      foo (1);\n+    while (1);\n+\n+  switch (i)\n+    for (;;)\n+      foo (-1);\n+\n+  switch (i)\n+    default:\n+      j = 6;\n+\n+  switch (i)\n+    {\n+    typedef int T;\n+    case 3:\n+      {\n+\tT x = 5;\n+\tfoo (x);\n+      }\n+    }\n+\n+  switch (i)\n+    {\n+      static int g;\n+      default:\n+\tfoo (g);\n+    }\n+\n+  switch (i)\n+    {\n+L:\n+      j = 16;\n+      default:\n+\tif (j < 5)\n+\t  goto L;\n+\tbreak;\n+    }\n+}"}, {"sha": "e986af3bb276961f71e203d6c19c1434812874e0", "filename": "gcc/testsuite/c-c++-common/goacc/sb-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-2.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -4,19 +4,19 @@ void foo(int i)\n {\n   switch (i) // { dg-error \"invalid entry to OpenACC structured block\" }\n   {\n-  #pragma acc parallel\n+  #pragma acc parallel // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n \n   switch (i) // { dg-error \"invalid entry to OpenACC structured block\" }\n   {\n-  #pragma acc kernels\n+  #pragma acc kernels // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n \n   switch (i) // { dg-error \"invalid entry to OpenACC structured block\" }\n   {\n-  #pragma acc data\n+  #pragma acc data // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n }"}, {"sha": "d71d3ade2ace5411f4ce49bef8c6dfc6d6e1af93", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-switch.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -20,7 +20,7 @@ main ()\n \t    {\n \t    case 3:\t\t// { dg-error \"case\" }\n \t      break;\t\t// { dg-error \"break\" }\n-\t    };\n+\t    };\t\t\t// { dg-warning \"statement will never be executed\" }\n \t}\n     }\n }"}, {"sha": "4aa41cdf2e29a5007852c9ef261c618f861c31f6", "filename": "gcc/testsuite/g++.dg/gomp/block-10.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-10.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -5,36 +5,36 @@ void foo(int i)\n   int j;\n   switch (i)\n   {\n-  #pragma omp parallel\n+  #pragma omp parallel\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t// { dg-error \"jump|enters\" }\n   }\n   switch (i)\n   {\n-  #pragma omp for\n+  #pragma omp for\t// { dg-warning \"statement will never be executed\" }\n     for (j = 0; j < 10; ++ j)\n       { case 1:; }\t// { dg-error \"jump|enters\" }\n   }\n   switch (i)\n   {\n-  #pragma omp critical\n+  #pragma omp critical\t// { dg-warning \"statement will never be executed\" }\n     { case 2:; }\t// { dg-error \"jump|enters\" }\n   }\n   switch (i)\n   {\n-  #pragma omp master\n+  #pragma omp master\t// { dg-warning \"statement will never be executed\" }\n     { case 3:; }\t// { dg-error \"jump|enters\" }\n   }\n   switch (i)\n   {\n-  #pragma omp sections\n+  #pragma omp sections\t// { dg-warning \"statement will never be executed\" }\n     { case 4:;\t\t// { dg-error \"jump|enters\" }\n     #pragma omp section\n        { case 5:; }\t// { dg-error \"jump|enters\" }\n     }\n   }\n   switch (i)\n   {\n-  #pragma omp ordered\n+  #pragma omp ordered\t// { dg-warning \"statement will never be executed\" }\n     { default:; }\t// { dg-error \"jump|enters\" }\n   }\n }"}, {"sha": "1de40a983f953f45c1f30b4448ed257d2c24650b", "filename": "gcc/testsuite/g++.dg/gomp/block-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-9.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -5,7 +5,7 @@ void foo(int i)\n   int j;\n   switch (i)\n   {\n-  #pragma omp parallel\n+  #pragma omp parallel\t\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump|enters\" }\n   #pragma omp for\n     for (j = 0; j < 10; ++ j)"}, {"sha": "97508739d8cc1594be973767698db40ab79adbd7", "filename": "gcc/testsuite/g++.dg/gomp/target-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-1.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -24,7 +24,7 @@ foo (int x)\n \n   switch (x)\n   {\n-  #pragma omp target\n+  #pragma omp target\t\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n                                 // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n   }"}, {"sha": "333b4d0f7fcb85de20481197d198c6b939e9c556", "filename": "gcc/testsuite/g++.dg/gomp/target-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftarget-2.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -24,7 +24,7 @@ foo (int x, int y)\n \n   switch (x)\n   {\n-  #pragma omp target data map(tofrom: y)\n+  #pragma omp target data map(tofrom: y) // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n                                 // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n   }"}, {"sha": "5542a4e4fd2a898912b9c991ae3d781e7b1c4540", "filename": "gcc/testsuite/g++.dg/gomp/taskgroup-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftaskgroup-1.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -24,7 +24,7 @@ foo (int x)\n \n   switch (x)\n   {\n-  #pragma omp taskgroup\n+  #pragma omp taskgroup\t\t// { dg-warning \"statement will never be executed\" }\n     { case 0:; }\t\t// { dg-error \"jump\" }\n                                 // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n   }"}, {"sha": "d0460c3c22c3ffa91b7af0a3c6f6650dde9e4116", "filename": "gcc/testsuite/g++.dg/gomp/teams-1.C", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fteams-1.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -26,6 +26,7 @@ foo (int x)\n   {\n   #pragma omp target teams\n     { case 0:; }\t\t// { dg-error \"jump\" }\n+\t\t\t\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } 28 }\n                                 // { dg-message \"enters\" \"\" { target *-*-* } 28 }\n   }\n }\n@@ -43,7 +44,7 @@ bar (int x)\n   #pragma omp teams\n     {\n       bad2: ;\t\t\t// { dg-error \"jump to label\" }\n-                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 45 }\n+                                // { dg-message \"enters OpenMP\" \"\" { target *-*-* } 46 }\n     }\n \n   #pragma omp target\n@@ -57,14 +58,14 @@ bar (int x)\n \n   switch (x)\n   {\n-  #pragma omp target\n+  #pragma omp target\t\t// { dg-warning \"statement will never be executed\" }\n   #pragma omp teams\n     { case 0:; }\t\t// { dg-error \"jump\" }\n-                                // { dg-message \"enters\" \"\" { target *-*-* } 62 }\n+                                // { dg-message \"enters\" \"\" { target *-*-* } 63 }\n   }\n }\n \n // { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target *-*-* } 8 }\n // { dg-error \"invalid entry to OpenMP structured block\" \"\" { target *-*-* } 10 }\n-// { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target *-*-* } 39 }\n-// { dg-error \"invalid entry to OpenMP structured block\" \"\" { target *-*-* } 41 }\n+// { dg-error \"invalid branch to/from OpenMP structured block\" \"\" { target *-*-* } 40 }\n+// { dg-error \"invalid entry to OpenMP structured block\" \"\" { target *-*-* } 42 }"}, {"sha": "8391875150b53eb7991efefee962b25c6648ef36", "filename": "gcc/testsuite/g++.dg/overload/error3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror3.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -35,6 +35,7 @@ class MainWindow  {\n void MainWindow::update_status(Result result) {\n     switch (result) {\n         status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"green\")); // { dg-error \"\" }\n+\t// { dg-warning \"statement will never be executed\" \"\" { target *-*-* } 37 }\n         status_frame.modify_bg(Gtk::STATE_NORMAL,Gdk::Color::Color(\"red\")); // { dg-error \"\" }\n         status_label.set_text(\"Out of memory\");\n     }"}, {"sha": "e28282dc624e9e7bf0ccaaaf2d6c58f9cbd0ea48", "filename": "gcc/testsuite/g++.dg/tm/jump1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fjump1.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -14,7 +14,7 @@ void f()\n \n   switch (i)\n     {\n-      synchronized {\n+      synchronized {\t\t// { dg-warning \"statement will never be executed\" }\n \t++i;\n       case 42:\t\t\t// { dg-error \"\" }\n \t++i;"}, {"sha": "295a356d3fad6711cf98692add135f35a54de240", "filename": "gcc/testsuite/g++.dg/torture/pr40335.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -8,7 +8,7 @@ main (void)\n   switch ((signed char) i)\n     {\n       case 255: /* { dg-bogus \"exceeds maximum value\" \"\" { xfail *-*-* } } */\n-\tabort ();\n+\tabort (); /* { dg-warning \"statement will never be executed\" } */\n       default:\n \tbreak;\n     }"}, {"sha": "71809be59335b6605e739a2d45706228c94aa8ac", "filename": "gcc/testsuite/gcc.dg/Wjump-misses-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2FWjump-misses-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2FWjump-misses-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWjump-misses-init-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wjump-misses-init\" } */\n+/* { dg-options \"-Wjump-misses-init -Wno-switch-unreachable\" } */\n int\n f1 (int a)\n {"}, {"sha": "2e5c99bce3c578426fcefb44fa864152f7d843e7", "filename": "gcc/testsuite/gcc.dg/Wswitch-unreachable-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-unreachable-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/49859 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch-unreachable\" } */\n+\n+extern void foo (int);\n+extern int j;\n+\n+void\n+fn0 (int i)\n+{\n+  switch (i)\n+    {\n+    int t = 10; /* { dg-warning \"statement will never be executed\" } */\n+    default:\n+      foo (t);\n+    }\n+\n+  switch (i)\n+    { /* { dg-warning \"statement will never be executed\" } */\n+      int A[i];\n+      default: /* { dg-error \"switch jumps into scope\" } */\n+\tbreak;\n+    }\n+\n+  switch (i)\n+    default:\n+      j = sizeof (struct { int i; });\n+\n+  switch (i)\n+    {\n+      int A[3];\n+      default:\n+\tbreak;\n+    }\n+}"}, {"sha": "5b5fc74f2e9dc9623ad3649ab7bd30c21abab770", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -14,7 +14,7 @@\n void\n f (int a, int b)\n {\n-  switch (a) {\n+  switch (a) { /* { dg-warning \"statement will never be executed\" } */\n     int v[b];\n   case 2: /* { dg-error \"switch jumps into scope of identifier with variably modified type\" } */\n   default: /* { dg-error \"switch jumps into scope of identifier with variably modified type\" } */"}, {"sha": "29c2d91431f7e2e823b224853bd666211ae836aa", "filename": "gcc/testsuite/gcc.dg/gomp/block-10.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-10.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -5,36 +5,36 @@ void foo(int i)\n   int j;\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp parallel\n+  #pragma omp parallel // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp for\n+  #pragma omp for // { dg-warning \"statement will never be executed\" }\n     for (j = 0; j < 10; ++ j)\n       { case 1:; }\n   }\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp critical\n+  #pragma omp critical // { dg-warning \"statement will never be executed\" }\n     { case 2:; }\n   }\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp master\n+  #pragma omp master // { dg-warning \"statement will never be executed\" }\n     { case 3:; }\n   }\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp sections\n+  #pragma omp sections // { dg-warning \"statement will never be executed\" }\n     { case 4:;\n     #pragma omp section\n        { case 5:; }\n     }\n   }\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp ordered\n+  #pragma omp ordered // { dg-warning \"statement will never be executed\" }\n     { default:; }\n   }\n }"}, {"sha": "202599f2ae2e030077c8c89b8ea87147b3022e2b", "filename": "gcc/testsuite/gcc.dg/gomp/block-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fblock-9.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -5,7 +5,7 @@ void foo(int i)\n   int j;\n   switch (i) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp parallel\n+  #pragma omp parallel // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   #pragma omp for\n     for (j = 0; j < 10; ++ j)"}, {"sha": "6bc5eb9493eb3a620d8e4f59d532480d533d88ef", "filename": "gcc/testsuite/gcc.dg/gomp/target-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -23,7 +23,7 @@ foo (int x)\n \n   switch (x) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp target\n+  #pragma omp target // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n }"}, {"sha": "c5c38d8b537be230e7396e6c35ff8e920e4b8bcb", "filename": "gcc/testsuite/gcc.dg/gomp/target-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftarget-2.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -23,7 +23,7 @@ foo (int x, int y)\n \n   switch (x) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp target data map(tofrom: y)\n+  #pragma omp target data map(tofrom: y) // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n }"}, {"sha": "f39b7ef725534b6433ebc2660826b1cb79b8b8c2", "filename": "gcc/testsuite/gcc.dg/gomp/taskgroup-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftaskgroup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftaskgroup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Ftaskgroup-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -23,7 +23,7 @@ foo (int x)\n \n   switch (x) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp taskgroup\n+  #pragma omp taskgroup // { dg-warning \"statement will never be executed\" }\n     { case 0:; }\n   }\n }"}, {"sha": "a5370470cde6b754cd83077e9d6faf16d4cc3ea6", "filename": "gcc/testsuite/gcc.dg/gomp/teams-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fteams-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fteams-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fteams-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -24,7 +24,7 @@ foo (int x)\n   switch (x) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n   #pragma omp target teams\n-    { case 0:; }\n+    { case 0:; } // { dg-warning \"statement will never be executed\" }\n   }\n }\n \n@@ -54,7 +54,7 @@ bar (int x)\n \n   switch (x) // { dg-error \"invalid entry to OpenMP structured block\" }\n   {\n-  #pragma omp target\n+  #pragma omp target // { dg-warning \"statement will never be executed\" }\n   #pragma omp teams\n     { case 0:; }\n   }"}, {"sha": "2052a6f40da55fbb64accaf0910cefe414072255", "filename": "gcc/testsuite/gcc.dg/nested-func-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1,7 +1,7 @@\n /* Test for proper errors for break and continue in nested functions.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-switch-unreachable\" } */\n \n void\n foo (int a)"}, {"sha": "54620802a90303184f023dc59d1663b9e7e0afa4", "filename": "gcc/testsuite/gcc.dg/pr67784-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -1,6 +1,6 @@\n /* PR c/67784 */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-Wno-switch-unreachable\" } */\n \n typedef int T;\n "}, {"sha": "58fbd7d4860e2e37bb913f2c5aed6d1a4bf282bb", "filename": "gcc/testsuite/gcc.dg/switch-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7dc5980e91d758905750a5c0a533f689eca355e/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fswitch-warn-1.c?ref=a7dc5980e91d758905750a5c0a533f689eca355e", "patch": "@@ -11,7 +11,7 @@ foo1 (unsigned char i)\n {\n   switch (i)\n     {\n-    case -1:   /* { dg-warning \"case label value is less than minimum value for type\" } */\n+    case -1:   /* { dg-warning \"case label value is less than minimum value for type|statement will never be executed\" } */\n       return 1;\n     case 256:  /* { dg-warning \"case label value exceeds maximum value for type\" } */\n       return 2;"}]}