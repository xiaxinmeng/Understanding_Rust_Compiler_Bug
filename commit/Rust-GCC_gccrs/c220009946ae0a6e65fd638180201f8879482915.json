{"sha": "c220009946ae0a6e65fd638180201f8879482915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyMDAwOTk0NmFlMGE2ZTY1ZmQ2MzgxODAyMDFmODg3OTQ4MjkxNQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2001-02-15T14:03:14Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-02-15T14:03:14Z"}, "message": "defineclass.cc: Don't include alloca.h.\n\n2001-02-15  Anthony Green  <green@redhat.com>\n\n\t* defineclass.cc: Don't include alloca.h.\n\t(prepare_pool_entry): Convert alloca to __builtin_alloca.\n\t* interpret.cc (run_normal): Ditto.\n        (continue1): Ditto.\n\t* java/lang/natDouble.cc (parseDouble): Ditto.\n\nFrom-SVN: r39719", "tree": {"sha": "6059ba33908803e9a953cff732f1a849acc36899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6059ba33908803e9a953cff732f1a849acc36899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c220009946ae0a6e65fd638180201f8879482915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c220009946ae0a6e65fd638180201f8879482915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c220009946ae0a6e65fd638180201f8879482915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c220009946ae0a6e65fd638180201f8879482915/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85b99cbe643d85e0ab23513f1a284f52644c6235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b99cbe643d85e0ab23513f1a284f52644c6235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b99cbe643d85e0ab23513f1a284f52644c6235"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "ecf60575f1918d8765ebf0f4e0ffe7773dd163b8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c220009946ae0a6e65fd638180201f8879482915/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c220009946ae0a6e65fd638180201f8879482915/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c220009946ae0a6e65fd638180201f8879482915", "patch": "@@ -1,3 +1,11 @@\n+2001-02-15  Anthony Green  <green@redhat.com>\n+\n+\t* defineclass.cc: Don't include alloca.h.\n+\t(prepare_pool_entry): Convert alloca to __builtin_alloca.\n+\t* interpret.cc (run_normal): Ditto.\n+\t(continue1): Ditto.\n+\t* java/lang/natDouble.cc (parseDouble): Ditto.\n+\n 2001-02-15  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/util/TreeSet.java (clone): Call TreeMap.clone(), not "}, {"sha": "d58051677dd513ad7e52b0826645c7f00a491a89", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c220009946ae0a6e65fd638180201f8879482915/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c220009946ae0a6e65fd638180201f8879482915/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=c220009946ae0a6e65fd638180201f8879482915", "patch": "@@ -25,9 +25,6 @@ details.  */\n #ifdef INTERPRETER\n \n #include <stdlib.h>\n-#if HAVE_ALLOCA_H\n-#include <alloca.h>\n-#endif\n #include <java-cpool.h>\n #include <gcj/cni.h>\n \n@@ -678,7 +675,7 @@ _Jv_ClassReader::prepare_pool_entry (int index, unsigned char this_tag)\n \t// order to accomondate gcj's internal representation.\n \n \tint len = get2u (this_data);\n-\tchar *buffer = (char*) alloca (len);\n+\tchar *buffer = (char*) __builtin_alloca (len);\n \tchar *s = ((char*) this_data)+2;\n \n \t/* FIXME: avoid using a buffer here */"}, {"sha": "44dc1ca1f109907b447ddc75cac7d821e1de637d", "filename": "libjava/interpret.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c220009946ae0a6e65fd638180201f8879482915/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c220009946ae0a6e65fd638180201f8879482915/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=c220009946ae0a6e65fd638180201f8879482915", "patch": "@@ -36,9 +36,6 @@ details.  */\n #ifdef INTERPRETER\n \n #include <stdlib.h>\n-#if HAVE_ALLOCA_H\n-#include <alloca.h>\n-#endif\n \n static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n \n@@ -336,8 +333,8 @@ void _Jv_InterpMethod::run_normal (ffi_cif* cif,\n   // \"run\" ro be inlined.  Otherwise gcc will ignore the inline directive.\n   int storage_size = _this->max_stack+_this->max_locals;\n   _Jv_InterpMethodInvocation* inv = (_Jv_InterpMethodInvocation*) \n-    alloca (sizeof (_Jv_InterpMethodInvocation)\n-\t    + storage_size * sizeof (_Jv_word));\n+    __builtin_alloca (sizeof (_Jv_InterpMethodInvocation)\n+\t\t      + storage_size * sizeof (_Jv_word));\n \n   jobject ex = _this->run (cif, ret, args, inv);\n   if (ex != 0) _Jv_Throw (ex);\n@@ -353,8 +350,8 @@ void _Jv_InterpMethod::run_synch_object (ffi_cif* cif,\n \n   int storage_size = _this->max_stack+_this->max_locals;\n   _Jv_InterpMethodInvocation* inv = (_Jv_InterpMethodInvocation*) \n-    alloca (sizeof (_Jv_InterpMethodInvocation)\n-\t    + storage_size * sizeof (_Jv_word));\n+    __builtin_alloca (sizeof (_Jv_InterpMethodInvocation)\n+\t\t      + storage_size * sizeof (_Jv_word));\n \n   _Jv_MonitorEnter (rcv);\n   jobject ex = _this->run (cif, ret, args, inv);\n@@ -373,8 +370,8 @@ void _Jv_InterpMethod::run_synch_class (ffi_cif* cif,\n \n   int storage_size = _this->max_stack+_this->max_locals;\n   _Jv_InterpMethodInvocation* inv = (_Jv_InterpMethodInvocation*) \n-    alloca (sizeof (_Jv_InterpMethodInvocation)\n-\t    + storage_size * sizeof (_Jv_word));\n+    __builtin_alloca (sizeof (_Jv_InterpMethodInvocation)\n+\t\t      + storage_size * sizeof (_Jv_word));\n \n   _Jv_MonitorEnter (sync);\n   jobject ex = _this->run (cif, ret, args, inv);\n@@ -2380,7 +2377,7 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \tjclass type    \n \t  = (_Jv_ResolvePoolEntry (defining_class, kind_index)).clazz;\n \t_Jv_InitClass (type);\n-\tjint *sizes    = (jint*) alloca (sizeof (jint)*dim);\n+\tjint *sizes    = (jint*) __builtin_alloca (sizeof (jint)*dim);\n \n \tfor (int i = dim - 1; i >= 0; i--)\n \t  {"}, {"sha": "9ed7e53910d40f0c5a8d4f8c7f089bdc6b9ed5bd", "filename": "libjava/java/lang/natDouble.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c220009946ae0a6e65fd638180201f8879482915/libjava%2Fjava%2Flang%2FnatDouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c220009946ae0a6e65fd638180201f8879482915/libjava%2Fjava%2Flang%2FnatDouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatDouble.cc?ref=c220009946ae0a6e65fd638180201f8879482915", "patch": "@@ -10,10 +10,6 @@ details.  */\n \n #include <config.h>\n \n-#if HAVE_ALLOCA_H\n-#include <alloca.h>\n-#endif\n-\n #include <stdlib.h>\n \n #include <gcj/cni.h>\n@@ -166,11 +162,7 @@ java::lang::Double::parseDouble(jstring str)\n   int length = str->length();\n   // Note that UTF can expand 3x.\n \n-#ifdef HAVE_ALLOCA\n-  char *data = (char *) alloca (3 * length + 1);\n-#else\n-#error --- need an alternate implementation here ---\n-#endif\n+  char *data = (char *) __builtin_alloca (3 * length + 1);\n \n   data[_Jv_GetStringUTFRegion (str, 0, length, data)] = 0; \n "}]}