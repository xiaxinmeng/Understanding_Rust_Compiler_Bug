{"sha": "c06883ac2d1cc41a051a54141abff4deed429f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2ODgzYWMyZDFjYzQxYTA1MWE1NDE0MWFiZmY0ZGVlZDQyOWYzNQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-16T12:40:41Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-16T12:40:41Z"}, "message": "Remove first_pass_instance from pass_ccp\n\n2015-11-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* passes.def: Add arg to pass_ccp pass instantiation.\n\t* tree-ssa-ccp.c (ccp_finalize): Add param nonzero_p.  Use nonzero_p\n\tinstead of first_pass_instance.\n\t(do_ssa_ccp): Add and handle param nonzero_p.\n\t(pass_ccp::pass_ccp): Initialize nonzero_p.\n\t(pass_ccp::set_pass_param): New member function.  Set nonzero_p.\n\t(pass_ccp::execute): Call do_ssa_ccp with extra arg.\n\t(pass_ccp::nonzero_p): New private member.\n\nFrom-SVN: r230419", "tree": {"sha": "20813276f7d4d2e3f8730db9827136142a62ec84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20813276f7d4d2e3f8730db9827136142a62ec84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06883ac2d1cc41a051a54141abff4deed429f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06883ac2d1cc41a051a54141abff4deed429f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06883ac2d1cc41a051a54141abff4deed429f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06883ac2d1cc41a051a54141abff4deed429f35/comments", "author": null, "committer": null, "parents": [{"sha": "813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "e2fd1ec9d637b1cf0ade684052fb701c51bc71cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c06883ac2d1cc41a051a54141abff4deed429f35", "patch": "@@ -1,3 +1,14 @@\n+2015-11-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* passes.def: Add arg to pass_ccp pass instantiation.\n+\t* tree-ssa-ccp.c (ccp_finalize): Add param nonzero_p.  Use nonzero_p\n+\tinstead of first_pass_instance.\n+\t(do_ssa_ccp): Add and handle param nonzero_p.\n+\t(pass_ccp::pass_ccp): Initialize nonzero_p.\n+\t(pass_ccp::set_pass_param): New member function.  Set nonzero_p.\n+\t(pass_ccp::execute): Call do_ssa_ccp with extra arg.\n+\t(pass_ccp::nonzero_p): New private member.\n+\n 2015-11-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* passes.def: Add arg to pass_object_sizes pass instantiation."}, {"sha": "17027786f7f29a691db416757677fca88de9d7bc", "filename": "gcc/passes.def", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=c06883ac2d1cc41a051a54141abff4deed429f35", "patch": "@@ -78,7 +78,9 @@ along with GCC; see the file COPYING3.  If not see\n       PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n \t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n \t  NEXT_PASS (pass_object_sizes, true /* insert_min_max_p */);\n-\t  NEXT_PASS (pass_ccp);\n+\t  /* Don't record nonzero bits before IPA to avoid\n+\t     using too much memory.  */\n+\t  NEXT_PASS (pass_ccp, false /* nonzero_p */);\n \t  /* After CCP we rewrite no longer addressed locals into SSA\n \t     form if possible.  */\n \t  NEXT_PASS (pass_forwprop);\n@@ -157,7 +159,7 @@ along with GCC; see the file COPYING3.  If not see\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n       NEXT_PASS (pass_strip_predict_hints);\n-      NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n       NEXT_PASS (pass_complete_unrolli);\n@@ -209,7 +211,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n       NEXT_PASS (pass_cse_sincos);\n@@ -319,7 +321,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_lower_complex);\n       NEXT_PASS (pass_lower_vector_ssa);\n       /* Perform simple scalar cleanup which is constant/copy propagation.  */\n-      NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       NEXT_PASS (pass_object_sizes);\n       /* Fold remaining builtins.  */\n       NEXT_PASS (pass_fold_builtins);"}, {"sha": "7b6b4518b088d448552f3a179b513429c07710fd", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06883ac2d1cc41a051a54141abff4deed429f35/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c06883ac2d1cc41a051a54141abff4deed429f35", "patch": "@@ -886,12 +886,12 @@ do_dbg_cnt (void)\n \n \n /* Do final substitution of propagated values, cleanup the flowgraph and\n-   free allocated storage.\n+   free allocated storage.  If NONZERO_P, record nonzero bits.\n \n    Return TRUE when something was optimized.  */\n \n static bool\n-ccp_finalize (void)\n+ccp_finalize (bool nonzero_p)\n {\n   bool something_changed;\n   unsigned i;\n@@ -912,7 +912,7 @@ ccp_finalize (void)\n \t      && (!INTEGRAL_TYPE_P (TREE_TYPE (name))\n \t\t  /* Don't record nonzero bits before IPA to avoid\n \t\t     using too much memory.  */\n-\t\t  || first_pass_instance)))\n+\t\t  || !nonzero_p)))\n \tcontinue;\n \n       val = get_value (name);\n@@ -2394,16 +2394,17 @@ ccp_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n }\n \n \n-/* Main entry point for SSA Conditional Constant Propagation.  */\n+/* Main entry point for SSA Conditional Constant Propagation.  If NONZERO_P,\n+   record nonzero bits.  */\n \n static unsigned int\n-do_ssa_ccp (void)\n+do_ssa_ccp (bool nonzero_p)\n {\n   unsigned int todo = 0;\n   calculate_dominance_info (CDI_DOMINATORS);\n   ccp_initialize ();\n   ssa_propagate (ccp_visit_stmt, ccp_visit_phi_node);\n-  if (ccp_finalize ())\n+  if (ccp_finalize (nonzero_p))\n     todo = (TODO_cleanup_cfg | TODO_update_ssa);\n   free_dominance_info (CDI_DOMINATORS);\n   return todo;\n@@ -2429,14 +2430,22 @@ class pass_ccp : public gimple_opt_pass\n {\n public:\n   pass_ccp (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_ccp, ctxt)\n+    : gimple_opt_pass (pass_data_ccp, ctxt), nonzero_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_ccp (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      nonzero_p = param;\n+    }\n   virtual bool gate (function *) { return flag_tree_ccp != 0; }\n-  virtual unsigned int execute (function *) { return do_ssa_ccp (); }\n+  virtual unsigned int execute (function *) { return do_ssa_ccp (nonzero_p); }\n \n+ private:\n+  /* Determines whether the pass instance records nonzero bits.  */\n+  bool nonzero_p;\n }; // class pass_ccp\n \n } // anon namespace"}]}