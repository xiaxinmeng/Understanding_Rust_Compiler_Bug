{"sha": "d634c5d7c78c6ec0fa39d96984460475564519c8", "node_id": "C_kwDOANBUbNoAKGQ2MzRjNWQ3Yzc4YzZlYzBmYTM5ZDk2OTg0NDYwNDc1NTY0NTE5Yzg", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2022-04-14T17:02:45Z"}, "committer": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2022-04-14T17:04:16Z"}, "message": "Refactor and update CTF testcases [PR105089]\n\nThis commit splits the ctf-array-2.c into ctf-array-5.c and\nctf-variables.c with the following responsibilities:\n\n[1] ctf-array-2.c: Test CTF generation for unsized arrays.\n[2] ctf-array-5.c: Test CTF generation for unsized but initialized array.\n[3] ctf-variables-3.c: Test CTF generation for extern variable with defining\ndecl.\n\nEarlier all three tests above were being done in ctf-array-2.c.  The\nchecks around [3] were very loose in the original version of ctf-array-2.c\nin that the testcase was only checking that the types are as expected.  The\ncompiler was emitting two CTF variable records as follows:\n\n Variables:\n  _CTF_NEWSTR ->  5: const const char [0] (size 0x0) -> 4: const char [0] (size 0x0)\n  _CTF_NEWSTR ->  8: const const char [8] (size 0x8) -> 7: const char [8] (size 0x8)\n\nThis is incorrect behaviour as it creates ambiguity.  The testcase\nctf-variables-3.c now has added checks that only one CTF variable record\nis expected.\n\n2022-04-14  Indu Bhagat  <indu.bhagat@oracle.com>\n\ngcc/testsuite/ChangeLog:\n\n\tPR debug/105089\n\t* gcc.dg/debug/ctf/ctf-array-2.c: Refactor testcase.  Move some\n\tchecks ...\n\t* gcc.dg/debug/ctf/ctf-array-5.c: ... to here.\n\t* gcc.dg/debug/ctf/ctf-variables-3.c: ... and here.  Add\n\tadditional checks for one CTF variable and one CTF object info\n\trecord.", "tree": {"sha": "4a041d19a5fa67a0396a4d3a15490ec9a5631eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a041d19a5fa67a0396a4d3a15490ec9a5631eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d634c5d7c78c6ec0fa39d96984460475564519c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634c5d7c78c6ec0fa39d96984460475564519c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d634c5d7c78c6ec0fa39d96984460475564519c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634c5d7c78c6ec0fa39d96984460475564519c8/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b00e74bf59c73b79471bbe9de19373b8661e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b00e74bf59c73b79471bbe9de19373b8661e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b00e74bf59c73b79471bbe9de19373b8661e20"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "4721c4fb2f97479dd50ed7ea0ddc4325d826d5dd", "filename": "gcc/testsuite/gcc.dg/debug/ctf/ctf-array-2.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-2.c?ref=d634c5d7c78c6ec0fa39d96984460475564519c8", "patch": "@@ -5,34 +5,26 @@\n \n    TBD_CTF_FORMAT_OPEN_ISSUES (1) - \n    This testcase makes a note of the case of a probable misrepresentation.\n-   See Note 1 and Note 2 below.\n+   See Note 1 below.\n \n    In the CTF section, these types are encoded as :\n \n      Variables:\n-      _CTF_NEWSTR ->  7: const char [0] (size 0x0)\n-      _CTF_SECTION ->  6: const char [5] (size 0x5)\n-      b1 ->  2: int [0] (size 0x0)\n-      b2 ->  3: int [0] (size 0x0)\n+      b1 ->  3: int [0] (size 0x0)\n+      b2 ->  5: int [0] (size 0x0)\n \n     Note 1 : There is misrepresentation in that b1 and b2 are specified\n     differently by the user.\n-    Note 2 : It is arguable though whether the representation for\n-    _CTF_NEWSTR is incorrect.  */\n+    \n+    In this testcase, two CTF array records each of type int [0] is expected.  */\n \n /* { dg-do compile )  */\n /* { dg-options \"-O0 -gctf -dA\" } */\n \n-/* { dg-final { scan-assembler-times \"0x12000000\\[\\t \\]+\\[^\\n\\]*ctt_info\" 5 } } */\n+/* { dg-final { scan-assembler-times \"0x12000000\\[\\t \\]+\\[^\\n\\]*ctt_info\" 2 } } */\n \n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x5\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 2 } } */\n \n static int b1[] = {};\n \n int b2[0];\n-\n-const char _CTF_SECTION[] = \".ctf\";\n-\n-extern const char _CTF_NEWSTR[];\n-const char _CTF_NEWSTR[] = \"ctfinfo\"; "}, {"sha": "ec504412ef56430f433caac9e9f60ae125544719", "filename": "gcc/testsuite/gcc.dg/debug/ctf/ctf-array-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-array-5.c?ref=d634c5d7c78c6ec0fa39d96984460475564519c8", "patch": "@@ -0,0 +1,17 @@\n+/* CTF generation for unsized (but initialized) arrays\n+\n+   In this testcase, one CTF array type record of size 5 is expected.\n+\n+     Variables:\n+      _CTF_SECTION ->  5: const const char [5] (size 0x5) -> 4: const char [5] (size 0x5)\n+\n+*/\n+\n+/* { dg-do compile )  */\n+/* { dg-options \"-O0 -gctf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"0x12000000\\[\\t \\]+\\[^\\n\\]*ctt_info\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x5\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 1 } } */\n+\n+const char _CTF_SECTION[] = \".ctf\";"}, {"sha": "8aea1e82749ed8f7881bea6bc1747ec3683c108b", "filename": "gcc/testsuite/gcc.dg/debug/ctf/ctf-variables-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-variables-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d634c5d7c78c6ec0fa39d96984460475564519c8/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-variables-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-variables-3.c?ref=d634c5d7c78c6ec0fa39d96984460475564519c8", "patch": "@@ -0,0 +1,22 @@\n+/* CTF generation for extern variable with defining and non-defining decl\n+   in the same CU.\n+\n+   This testcase checks the case when a non-defining decl is followed by\n+   a defining decl for the same variable.  See PR debug/105089.\n+   \n+   In this testcase,  although two CTF array types are generated, only a\n+   single CTF variable and a single entry in the CTF object info section\n+   are expected.  */\n+\n+/* { dg-do compile )  */\n+/* { dg-options \"-O0 -gctf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"0x12000000\\[\\t \\]+\\[^\\n\\]*ctt_info\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x8\\[\\t \\]+\\[^\\n\\]*cta_nelems\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ctv_name\" 1 } } */\n+/* { dg-final { scan-assembler-times \"objtinfo_var_type\" 1 } } */\n+\n+extern const char _CTF_NEWSTR[];\n+const char _CTF_NEWSTR[] = \"ctfinfo\"; "}]}