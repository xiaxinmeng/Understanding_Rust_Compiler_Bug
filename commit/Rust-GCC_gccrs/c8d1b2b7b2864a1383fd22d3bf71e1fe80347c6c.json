{"sha": "c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkMWIyYjdiMjg2NGExMzgzZmQyMmQzYmY3MWUxZmU4MDM0N2M2Yw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-16T23:44:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-16T23:44:00Z"}, "message": "mips-protos.h (embedded_pic_fnaddr_reg): New.\n\n* config/mips/mips-protos.h (embedded_pic_fnaddr_reg): New.\n* config/mips/mips.h (embedded_pic_fnaddr_rtx): Lose.\n(mips16_gp_pseudo_rtx): Lose.\n(INIT_EXPANDERS): Deleted.\n* config/mips/mips.c (mips_init_machine_status): New.\n(mips_free_machine_status): New.\n(mips_mark_machine_status): New.\n(override_options): Set them.\n(embedded_pic_fnaddr_rtx, mips16_gp_pseudo_rtx): Moved to...\n(struct machine_function): ... new.  Replaced all references.\n(mips_add_gc_roots): Don't mark them.\n(embedded_pic_fnaddr_reg): New, extracted from...\n(embedded_pic_offset): ... here.\n* config/mips/mips.md (movdi): Call embedded_pic_fnaddr_reg.\n(movsi): Likewise.\n\nFrom-SVN: r50896", "tree": {"sha": "a5da5a4a3ae5bc7131576c183901994def9f1eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5da5a4a3ae5bc7131576c183901994def9f1eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/comments", "author": null, "committer": null, "parents": [{"sha": "c2765075dbaf9350c3a37c68d634fd24c43b94a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2765075dbaf9350c3a37c68d634fd24c43b94a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2765075dbaf9350c3a37c68d634fd24c43b94a9"}], "stats": {"total": 136, "additions": 99, "deletions": 37}, "files": [{"sha": "0216c1b30967a45905463c1145bffce27189e40c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "patch": "@@ -1,3 +1,21 @@\n+2002-03-16  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mips/mips-protos.h (embedded_pic_fnaddr_reg): New.\n+\t* config/mips/mips.h (embedded_pic_fnaddr_rtx): Lose.\n+\t(mips16_gp_pseudo_rtx): Lose.\n+\t(INIT_EXPANDERS): Deleted.\n+\t* config/mips/mips.c (mips_init_machine_status): New.\n+\t(mips_free_machine_status): New.\n+\t(mips_mark_machine_status): New.\n+\t(override_options): Set them.\n+\t(embedded_pic_fnaddr_rtx, mips16_gp_pseudo_rtx): Moved to...\n+\t(struct machine_function): ... new.  Replaced all references.\n+\t(mips_add_gc_roots): Don't mark them.\n+\t(embedded_pic_fnaddr_reg): New, extracted from...\n+\t(embedded_pic_offset): ... here.\n+\t* config/mips/mips.md (movdi): Call embedded_pic_fnaddr_reg.\n+\t(movsi): Likewise.\n+\n 2002-03-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppinit.c: Revert -MD removal."}, {"sha": "8c4cec289db2430f629e7d5f81dab20299872a8b", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "patch": "@@ -45,6 +45,7 @@ extern void\t\tmips_output_lineno PARAMS ((FILE *, int));\n extern void\t\tmips_output_ascii PARAMS ((FILE *, const char *,\n \t\t\t\t\t\t   size_t));\n extern void\t\tmips_order_regs_for_local_alloc PARAMS ((void));\n+extern struct rtx_def * embedded_pic_fnaddr_reg PARAMS ((void));\n extern struct rtx_def *\tmips16_gp_pseudo_reg PARAMS ((void));\n #ifdef ASM_OUTPUT_UNDEF_FUNCTION\n extern int\t\tmips_output_external_libcall PARAMS ((FILE *, const char *));"}, {"sha": "4a44b754f13b00ffa84e53495cb20eafce3f9578", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 78, "deletions": 24, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "patch": "@@ -135,6 +135,22 @@ static int iris6_section_align_1\t\tPARAMS ((void **, void *));\n #endif\n static int mips_adjust_cost\t\t\tPARAMS ((rtx, rtx, rtx, int));\n \n+static void mips_init_machine_status\t\tPARAMS ((struct function *));\n+static void mips_free_machine_status\t\tPARAMS ((struct function *));\n+static void mips_mark_machine_status\t\tPARAMS ((struct function *));\n+\n+struct machine_function {\n+  /* Pseudo-reg holding the address of the current function when\n+     generating embedded PIC code.  Created by LEGITIMIZE_ADDRESS,\n+     used by mips_finalize_pic if it was created.  */\n+  rtx embedded_pic_fnaddr_rtx;\n+\n+  /* Pseudo-reg holding the value of $28 in a mips16 function which\n+     refers to GP relative global variables.  */\n+  rtx mips16_gp_pseudo_rtx;\n+};\n+\n+\n /* Global variables for machine-dependent things.  */\n \n /* Threshold for data being put into the small data/bss area, instead\n@@ -293,21 +309,12 @@ struct mips_frame_info current_frame_info;\n /* Zero structure to initialize current_frame_info.  */\n struct mips_frame_info zero_frame_info;\n \n-/* Pseudo-reg holding the address of the current function when\n-   generating embedded PIC code.  Created by LEGITIMIZE_ADDRESS, used\n-   by mips_finalize_pic if it was created.  */\n-rtx embedded_pic_fnaddr_rtx;\n-\n /* The length of all strings seen when compiling for the mips16.  This\n    is used to tell how many strings are in the constant pool, so that\n    we can see if we may have an overflow.  This is reset each time the\n    constant pool is output.  */\n int mips_string_length;\n \n-/* Pseudo-reg holding the value of $28 in a mips16 function which\n-   refers to GP relative global variables.  */\n-rtx mips16_gp_pseudo_rtx;\n-\n /* In mips16 mode, we build a list of all the string constants we see\n    in a particular function.  */\n \n@@ -1828,19 +1835,18 @@ mips_count_memory_refs (op, num)\n }\n \n \f\n-/* Return RTL for the offset from the current function to the argument.\n-\n-   ??? Which argument is this?  */\n+/* Return a pseudo that points to the address of the current function.\n+   The first time it is called for a function, an initializer for the\n+   pseudo is emitted in the beginning of the function.  */\n \n rtx\n-embedded_pic_offset (x)\n-     rtx x;\n+embedded_pic_fnaddr_reg ()\n {\n-  if (embedded_pic_fnaddr_rtx == NULL)\n+  if (cfun->machine->embedded_pic_fnaddr_rtx == NULL)\n     {\n       rtx seq;\n \n-      embedded_pic_fnaddr_rtx = gen_reg_rtx (Pmode);\n+      cfun->machine->embedded_pic_fnaddr_rtx = gen_reg_rtx (Pmode);\n \n       /* Output code at function start to initialize the pseudo-reg.  */\n       /* ??? We used to do this in FINALIZE_PIC, but that does not work for\n@@ -1851,7 +1857,7 @@ embedded_pic_offset (x)\n \t initialize this value every time a function is inlined into another\n \t function.  */\n       start_sequence ();\n-      emit_insn (gen_get_fnaddr (embedded_pic_fnaddr_rtx,\n+      emit_insn (gen_get_fnaddr (cfun->machine->embedded_pic_fnaddr_rtx,\n \t\t\t\t XEXP (DECL_RTL (current_function_decl), 0)));\n       seq = gen_sequence ();\n       end_sequence ();\n@@ -1860,6 +1866,19 @@ embedded_pic_offset (x)\n       pop_topmost_sequence ();\n     }\n \n+  return cfun->machine->embedded_pic_fnaddr_rtx;\n+}  \n+\n+/* Return RTL for the offset from the current function to the argument.\n+   X is the symbol whose offset from the current function we want.  */\n+\n+rtx\n+embedded_pic_offset (x)\n+     rtx x;\n+{\n+  /* Make sure it is emitted.  */\n+  embedded_pic_fnaddr_reg ();\n+\n   return\n     gen_rtx_CONST (Pmode,\n \t\t   gen_rtx_MINUS (Pmode, x,\n@@ -5281,6 +5300,42 @@ override_options ()\n \n   /* Register global variables with the garbage collector.  */\n   mips_add_gc_roots ();\n+\n+  /* Functions to allocate, mark and deallocate machine-dependent\n+     function status.  */\n+  init_machine_status = &mips_init_machine_status;\n+  free_machine_status = &mips_free_machine_status;\n+  mark_machine_status = &mips_mark_machine_status;\n+}\n+\n+/* Allocate a chunk of memory for per-function machine-dependent data.  */\n+static void\n+mips_init_machine_status (fn)\n+     struct function *fn;\n+{\n+  fn->machine = ((struct machine_function *)\n+\t\t xcalloc (1, sizeof (struct machine_function)));\n+}\n+\n+/* Release the chunk of memory for per-function machine-dependent data.  */\n+static void\n+mips_free_machine_status (fn)\n+     struct function *fn;\n+{\n+  free (fn->machine);\n+  fn->machine = NULL;\n+}\n+\n+/* Mark per-function machine-dependent data.  */\n+static void\n+mips_mark_machine_status (fn)\n+     struct function *fn;\n+{\n+  if (fn->machine)\n+    {\n+      ggc_mark_rtx (fn->machine->embedded_pic_fnaddr_rtx);\n+      ggc_mark_rtx (fn->machine->mips16_gp_pseudo_rtx);\n+    }\n }\n \n /* On the mips16, we want to allocate $24 (T_REG) before other\n@@ -8226,21 +8281,22 @@ mips_secondary_reload_class (class, mode, x, in_p)\n rtx\n mips16_gp_pseudo_reg ()\n {\n-  if (mips16_gp_pseudo_rtx == NULL_RTX)\n+  if (cfun->machine->mips16_gp_pseudo_rtx == NULL_RTX)\n     {\n       rtx const_gp;\n       rtx insn, scan;\n \n-      mips16_gp_pseudo_rtx = gen_reg_rtx (Pmode);\n-      RTX_UNCHANGING_P (mips16_gp_pseudo_rtx) = 1;\n+      cfun->machine->mips16_gp_pseudo_rtx = gen_reg_rtx (Pmode);\n+      RTX_UNCHANGING_P (cfun->machine->mips16_gp_pseudo_rtx) = 1;\n \n       /* We want to initialize this to a value which gcc will believe\n          is constant.  */\n       const_gp = gen_rtx (CONST, Pmode,\n \t\t\t  gen_rtx (REG, Pmode, GP_REG_FIRST + 28));\n \n       start_sequence ();\n-      emit_move_insn (mips16_gp_pseudo_rtx, const_gp);\n+      emit_move_insn (cfun->machine->mips16_gp_pseudo_rtx,\n+\t\t      const_gp);\n       insn = gen_sequence ();\n       end_sequence ();\n \n@@ -8257,7 +8313,7 @@ mips16_gp_pseudo_reg ()\n       pop_topmost_sequence ();\n     }\n \n-  return mips16_gp_pseudo_rtx;\n+  return cfun->machine->mips16_gp_pseudo_rtx;\n }\n \n /* Return an RTX which represents the signed 16 bit offset from the\n@@ -9834,8 +9890,6 @@ mips_add_gc_roots ()\n   ggc_add_rtx_root (&mips_load_reg3, 1);\n   ggc_add_rtx_root (&mips_load_reg4, 1);\n   ggc_add_rtx_root (branch_cmp, ARRAY_SIZE (branch_cmp));\n-  ggc_add_rtx_root (&embedded_pic_fnaddr_rtx, 1);\n-  ggc_add_rtx_root (&mips16_gp_pseudo_rtx, 1);\n }\n \n static enum processor_type"}, {"sha": "ded10123c1973b6d02ccae7a995e82085218d10e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "patch": "@@ -166,9 +166,7 @@ extern struct rtx_def *mips_load_reg;\t/* register to check for load delay */\n extern struct rtx_def *mips_load_reg2;\t/* 2nd reg to check for load delay */\n extern struct rtx_def *mips_load_reg3;\t/* 3rd reg to check for load delay */\n extern struct rtx_def *mips_load_reg4;\t/* 4th reg to check for load delay */\n-extern struct rtx_def *embedded_pic_fnaddr_rtx;\t/* function address */\n extern int mips_string_length;\t\t/* length of strings for mips16 */\n-extern struct rtx_def *mips16_gp_pseudo_rtx; /* psuedo reg holding $gp */\n \n /* Functions to change what output section we are using.  */\n extern void\t\trdata_section PARAMS ((void));\n@@ -2017,15 +2015,6 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n #define PIC_OFFSET_TABLE_REGNUM (GP_REG_FIRST + 28)\n \n #define PIC_FUNCTION_ADDR_REGNUM (GP_REG_FIRST + 25)\n-\n-/* Initialize embedded_pic_fnaddr_rtx before RTL generation for\n-   each function.  We used to do this in FINALIZE_PIC, but FINALIZE_PIC\n-   isn't always called for static inline functions.  */\n-#define INIT_EXPANDERS\t\t\t\\\n-do {\t\t\t\t\t\\\n-  embedded_pic_fnaddr_rtx = NULL;\t\\\n-  mips16_gp_pseudo_rtx = NULL;\t\t\\\n-} while (0)\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants."}, {"sha": "536443bf0878bda74a925ca8c5220347ed82f0d4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c8d1b2b7b2864a1383fd22d3bf71e1fe80347c6c", "patch": "@@ -4945,7 +4945,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       rtx temp;\n \n       temp = embedded_pic_offset (operands[1]);\n-      temp = gen_rtx_PLUS (Pmode, embedded_pic_fnaddr_rtx,\n+      temp = gen_rtx_PLUS (Pmode, embedded_pic_fnaddr_reg (),\n \t\t\t   force_reg (DImode, temp));\n       emit_move_insn (operands[0], force_reg (DImode, temp));\n       DONE;\n@@ -5371,7 +5371,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       rtx temp;\n \n       temp = embedded_pic_offset (operands[1]);\n-      temp = gen_rtx_PLUS (Pmode, embedded_pic_fnaddr_rtx,\n+      temp = gen_rtx_PLUS (Pmode, embedded_pic_fnaddr_reg (),\n \t\t\t   force_reg (SImode, temp));\n       emit_move_insn (operands[0], force_reg (SImode, temp));\n       DONE;"}]}