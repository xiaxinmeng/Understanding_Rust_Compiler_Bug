{"sha": "4f05d85a22351720d860afb788cc5cdaffca92ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwNWQ4NWEyMjM1MTcyMGQ4NjBhZmI3ODhjYzVjZGFmZmNhOTJjYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-17T21:46:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-17T21:46:40Z"}, "message": "PR c++/79592 - missing explanation of invalid constexpr.\n\nWe changed months back to use the pre-generic form for constexpr evaluation,\nbut explain_invalid_constexpr_fn was still using DECL_SAVED_TREE.  This\nmostly works, but misses some issues due to folding.  So with this patch we\nsave the pre-generic form of constexpr functions even when we know they\ncan't produce a constant result.\n\n\t* constexpr.c (register_constexpr_fundef): Do store the body of a\n\ttemplate instantiation that is not potentially constant.\n\t(explain_invalid_constexpr_fn): Look it up.\n\t(cxx_eval_call_expression): Check fundef->result.\n\nFrom-SVN: r279473", "tree": {"sha": "f09533c4151488583374ed223b5d904118a1fc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f09533c4151488583374ed223b5d904118a1fc44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f05d85a22351720d860afb788cc5cdaffca92ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f05d85a22351720d860afb788cc5cdaffca92ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f05d85a22351720d860afb788cc5cdaffca92ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f05d85a22351720d860afb788cc5cdaffca92ca/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c7b2b0ba8687f92f7beab2e3615a1107c7063db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7b2b0ba8687f92f7beab2e3615a1107c7063db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7b2b0ba8687f92f7beab2e3615a1107c7063db"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "91837d36d6e02ab9047d1df66966ffa64e8b08aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f05d85a22351720d860afb788cc5cdaffca92ca", "patch": "@@ -1,3 +1,11 @@\n+2019-12-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79592 - missing explanation of invalid constexpr.\n+\t* constexpr.c (register_constexpr_fundef): Do store the body of a\n+\ttemplate instantiation that is not potentially constant.\n+\t(explain_invalid_constexpr_fn): Look it up.\n+\t(cxx_eval_call_expression): Check fundef->result.\n+\n 2019-12-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92576 - redeclaration of variable template."}, {"sha": "87d78d2672899b7cf2f2132c1204574405882b05", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4f05d85a22351720d860afb788cc5cdaffca92ca", "patch": "@@ -885,16 +885,16 @@ register_constexpr_fundef (tree fun, tree body)\n       return NULL;\n     }\n \n-  if (!potential_rvalue_constant_expression (massaged))\n-    {\n-      if (!DECL_GENERATED_P (fun))\n-\trequire_potential_rvalue_constant_expression (massaged);\n-      return NULL;\n-    }\n+  bool potential = potential_rvalue_constant_expression (massaged);\n+  if (!potential && !DECL_GENERATED_P (fun))\n+    require_potential_rvalue_constant_expression (massaged);\n \n   if (DECL_CONSTRUCTOR_P (fun)\n       && cx_check_missing_mem_inits (DECL_CONTEXT (fun),\n \t\t\t\t     massaged, !DECL_GENERATED_P (fun)))\n+    potential = false;\n+\n+  if (!potential && !DECL_GENERATED_P (fun))\n     return NULL;\n \n   /* Create the constexpr function table if necessary.  */\n@@ -917,6 +917,12 @@ register_constexpr_fundef (tree fun, tree body)\n   if (clear_ctx)\n     DECL_CONTEXT (DECL_RESULT (fun)) = NULL_TREE;\n \n+  if (!potential)\n+    /* For a template instantiation, we want to remember the pre-generic body\n+       for explain_invalid_constexpr_fn, but do tell cxx_eval_call_expression\n+       that it doesn't need to bother trying to expand the function.  */\n+    entry.result = error_mark_node;\n+\n   gcc_assert (*slot == NULL);\n   *slot = ggc_alloc<constexpr_fundef> ();\n   **slot = entry;\n@@ -962,11 +968,15 @@ explain_invalid_constexpr_fn (tree fun)\n     {\n       /* Then if it's OK, the body.  */\n       if (!DECL_DECLARED_CONSTEXPR_P (fun)\n-\t  && !LAMBDA_TYPE_P (CP_DECL_CONTEXT (fun)))\n+\t  && DECL_DEFAULTED_FN (fun))\n \texplain_implicit_non_constexpr (fun);\n       else\n \t{\n-\t  body = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n+\t  if (constexpr_fundef *fd = retrieve_constexpr_fundef (fun))\n+\t    body = fd->body;\n+\t  else\n+\t    body = DECL_SAVED_TREE (fun);\n+\t  body = massage_constexpr_body (fun, body);\n \t  require_potential_rvalue_constant_expression (body);\n \t  if (DECL_CONSTRUCTOR_P (fun))\n \t    cx_check_missing_mem_inits (DECL_CONTEXT (fun), body, true);\n@@ -1919,6 +1929,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     {\n       new_call.fundef = retrieve_constexpr_fundef (fun);\n       if (new_call.fundef == NULL || new_call.fundef->body == NULL\n+\t  || new_call.fundef->result == error_mark_node\n \t  || fun == current_function_decl)\n         {\n \t  if (!ctx->quiet)"}, {"sha": "b94cf3099f4b101df9e5fea3dc72eb6c87787f28", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nsdmi1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f05d85a22351720d860afb788cc5cdaffca92ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi1.C?ref=4f05d85a22351720d860afb788cc5cdaffca92ca", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/79592\n+// { dg-do compile { target c++11 } }\n+\n+struct pthread_mutex {\n+  void *m_ptr;\n+};\n+\n+struct M {\n+  pthread_mutex m = { ((void *) 1LL) }; // { dg-error \"reinterpret_cast\" }\n+};\n+\n+constexpr M m;\t\t\t// { dg-error \"M::M\" }"}]}