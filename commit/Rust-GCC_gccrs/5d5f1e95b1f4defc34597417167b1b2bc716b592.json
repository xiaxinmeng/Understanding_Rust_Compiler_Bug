{"sha": "5d5f1e95b1f4defc34597417167b1b2bc716b592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ZjFlOTViMWY0ZGVmYzM0NTk3NDE3MTY3YjFiMmJjNzE2YjU5Mg==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-11-09T01:41:26Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-11-09T01:41:26Z"}, "message": "Fix ice in set_value_range\n\nFix ice in set_value_range\ngcc/ChangeLog:\n\n2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR ipa/78121\n\t* ipa-cp.c (propagate_vr_accross_jump_function): Pass param type.\n\tAlso fold constant passed as argument while computing value range.\n\t(propagate_constants_accross_call): Pass param type.\n\t* ipa-prop.c: export ipa_get_callee_param_type.\n\t* ipa-prop.h: export ipa_get_callee_param_type.\n\ngcc/testsuite/ChangeLog:\n\n2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR ipa/78121\n\t* gcc.dg/ipa/pr78121.c: New test.\n\nFrom-SVN: r241989", "tree": {"sha": "993a3d81302508074a9b5c91e514840c243f83dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993a3d81302508074a9b5c91e514840c243f83dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5f1e95b1f4defc34597417167b1b2bc716b592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5f1e95b1f4defc34597417167b1b2bc716b592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5f1e95b1f4defc34597417167b1b2bc716b592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5f1e95b1f4defc34597417167b1b2bc716b592/comments", "author": null, "committer": null, "parents": [{"sha": "8f33501e32c020eada7df9d834622f2e2168f400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f33501e32c020eada7df9d834622f2e2168f400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f33501e32c020eada7df9d834622f2e2168f400"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "0ae292f37bd5f3077eb5fc319feaae55c22f4bcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -1,3 +1,12 @@\n+2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR ipa/78121\n+\t* ipa-cp.c (propagate_vr_accross_jump_function): Pass param type.\n+\tAlso fold constant passed as argument while computing value range.\n+\t(propagate_constants_accross_call): Pass param type.\n+\t* ipa-prop.c: export ipa_get_callee_param_type.\n+\t* ipa-prop.h: export ipa_get_callee_param_type.\n+\n 2016-11-09  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* asan.h (asan_intercepted_p): Handle BUILT_IN_STRCSPN,"}, {"sha": "79e621a174af8271cf917eb015f107f30832800a", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -1834,19 +1834,26 @@ propagate_bits_accross_jump_function (cgraph_edge *cs, int idx, ipa_jump_func *j\n }\n \n /* Propagate value range across jump function JFUNC that is associated with\n-   edge CS and update DEST_PLATS accordingly.  */\n+   edge CS with param of callee of PARAM_TYPE and update DEST_PLATS\n+   accordingly.  */\n \n static bool\n propagate_vr_accross_jump_function (cgraph_edge *cs,\n \t\t\t\t    ipa_jump_func *jfunc,\n-\t\t\t\t    struct ipcp_param_lattices *dest_plats)\n+\t\t\t\t    struct ipcp_param_lattices *dest_plats,\n+\t\t\t\t    tree param_type)\n {\n   struct ipcp_param_lattices *src_lats;\n   ipcp_vr_lattice *dest_lat = &dest_plats->m_value_range;\n \n   if (dest_lat->bottom_p ())\n     return false;\n \n+  if (!param_type\n+      || (!INTEGRAL_TYPE_P (param_type)\n+\t  && !POINTER_TYPE_P (param_type)))\n+    return dest_lat->set_to_bottom ();\n+\n   if (jfunc->type == IPA_JF_PASS_THROUGH)\n     {\n       struct ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n@@ -1865,6 +1872,7 @@ propagate_vr_accross_jump_function (cgraph_edge *cs,\n \t{\n \t  if (TREE_OVERFLOW_P (val))\n \t    val = drop_tree_overflow (val);\n+\t  val = fold_convert (param_type, val);\n \t  jfunc->vr_known = true;\n \t  jfunc->m_vr.type = VR_RANGE;\n \t  jfunc->m_vr.min = val;\n@@ -2214,6 +2222,7 @@ propagate_constants_accross_call (struct cgraph_edge *cs)\n     {\n       struct ipa_jump_func *jump_func = ipa_get_ith_jump_func (args, i);\n       struct ipcp_param_lattices *dest_plats;\n+      tree param_type = ipa_get_callee_param_type (cs, i);\n \n       dest_plats = ipa_get_parm_lattices (callee_info, i);\n       if (availability == AVAIL_INTERPOSABLE)\n@@ -2230,7 +2239,8 @@ propagate_constants_accross_call (struct cgraph_edge *cs)\n \t\t\t\t\t\t       dest_plats);\n \t  if (opt_for_fn (callee->decl, flag_ipa_vrp))\n \t    ret |= propagate_vr_accross_jump_function (cs,\n-\t\t\t\t\t\t       jump_func, dest_plats);\n+\t\t\t\t\t\t       jump_func, dest_plats,\n+\t\t\t\t\t\t       param_type);\n \t  else\n \t    ret |= dest_plats->m_value_range.set_to_bottom ();\n \t}"}, {"sha": "74fe199ea71a4b0ba858c47d060a5cb9441877dc", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -1595,7 +1595,10 @@ determine_locally_known_aggregate_parts (gcall *call, tree arg,\n     }\n }\n \n-static tree\n+/* Return the Ith param type of callee associated with call graph\n+   edge E.  */\n+\n+tree\n ipa_get_callee_param_type (struct cgraph_edge *e, int i)\n {\n   int n;"}, {"sha": "0e75cf48c1ad2050b2f80fb30c7e72459a9d2665", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -818,6 +818,7 @@ ipa_parm_adjustment *ipa_get_adjustment_candidate (tree **, bool *,\n \t\t\t\t\t\t   ipa_parm_adjustment_vec,\n \t\t\t\t\t\t   bool);\n void ipa_release_body_info (struct ipa_func_body_info *);\n+tree ipa_get_callee_param_type (struct cgraph_edge *e, int i);\n \n /* From tree-sra.c:  */\n tree build_ref_for_offset (location_t, tree, HOST_WIDE_INT, bool, tree,"}, {"sha": "4f8042ebe4a823a1a3abd807b479d12f350de3ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -1,3 +1,8 @@\n+2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR ipa/78121\n+\t* gcc.dg/ipa/pr78121.c: New test.\n+\n 2016-11-09  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* c-c++-common/asan/default_options.h: New file."}, {"sha": "4a0ae187256af866bed05927f2f3d8c115aa7cda", "filename": "gcc/testsuite/gcc.dg/ipa/pr78121.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr78121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5f1e95b1f4defc34597417167b1b2bc716b592/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr78121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr78121.c?ref=5d5f1e95b1f4defc34597417167b1b2bc716b592", "patch": "@@ -0,0 +1,16 @@\n+/* PR ipa/78121 */\n+/* { dg-do compile } */\n+/* { dg-options \"-ansi -O2 -fdump-ipa-cp-details\" } */\n+\n+void fn2 (unsigned char c);\n+int a;\n+static void fn1(c) unsigned char c;\n+{\n+    if (a)\n+          fn2 (c);\n+      fn1('#');\n+}\n+\n+void fn3() { fn1 (267); }\n+\n+/* { dg-final { scan-ipa-dump-times \"Setting value range of param 0 \\\\\\[11, 35\\\\\\]\" 1 \"cp\" } } */"}]}