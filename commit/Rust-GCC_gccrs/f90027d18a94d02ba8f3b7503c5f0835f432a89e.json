{"sha": "f90027d18a94d02ba8f3b7503c5f0835f432a89e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwMDI3ZDE4YTk0ZDAyYmE4ZjNiNzUwM2M1ZjA4MzVmNDMyYTg5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-19T13:36:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-24T16:34:06Z"}, "message": "libstdc++: Define std::to_chars overloads for __ieee128 [PR 98389]\n\nThis adds overloads of std::to_chars for powerpc64's __ieee128, so that\nstd::to_chars can be used for long double when -mabi=ieeelongdouble is\nin used.\n\nEventually we'll want to extend these new overloads to work for\n__float128 on all targets that support that type. For now, we're only\ndoing it for powerpc64 when the new long double type is supported in\nparallel to the old long double type.\n\nAdditionally the existing std::to_chars overloads for long double\nare given the right symbol version, resolving PR libstdc++/98389.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98389\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Do not match to_chars\n\tsymbols for long double arguments mangled as 'g'.\n\t* config/os/gnu-linux/ldbl-extra.ver: Likewise.\n\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: Likewise.\n\t* src/c++17/Makefile.am [GLIBCXX_LDBL_ALT128_COMPAT_TRUE]:\n\tUse -mabi=ibmlongdouble for floating_to_chars.cc.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++17/floating_to_chars.cc (floating_type_traits_binary128):\n\tNew type defining type traits of IEEE binary128 format.\n\t(floating_type_traits<__float128>): Define specialization.\n\t(floating_type_traits<long double>): Define in terms of\n\tfloating_type_traits_binary128 when appropriate.\n\t(floating_to_shortest_scientific): Handle __float128.\n\t(sprintf_ld): New function template for printing a long double\n\tor __ieee128 value using sprintf.\n\t(__floating_to_chars_shortest, __floating_to_chars_precision):\n\tUse sprintf_ld.\n\t(to_chars): Define overloads for __float128.", "tree": {"sha": "628d2d69a7c5662f21086db0fc356cacc164ab4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/628d2d69a7c5662f21086db0fc356cacc164ab4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90027d18a94d02ba8f3b7503c5f0835f432a89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90027d18a94d02ba8f3b7503c5f0835f432a89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90027d18a94d02ba8f3b7503c5f0835f432a89e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90027d18a94d02ba8f3b7503c5f0835f432a89e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0453cf5c68b6aa0e8c57a7a99d4285f047387b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0453cf5c68b6aa0e8c57a7a99d4285f047387b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0453cf5c68b6aa0e8c57a7a99d4285f047387b7"}], "stats": {"total": 316, "additions": 200, "deletions": 116}, "files": [{"sha": "a2c151d11ac3ad2e9a3bdda2a2e2a73478225ca9", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -2394,11 +2394,11 @@ GLIBCXX_3.4.29 {\n     _ZNSt9once_flag9_M_finishEb;\n \n     # std::to_chars(char*, char*, [float|double|long double])\n-    _ZSt8to_charsPcS_[defg];\n+    _ZSt8to_charsPcS_[def];\n     # std::to_chars(char*, char*, [float|double|long double], chars_format)\n-    _ZSt8to_charsPcS_[defg]St12chars_format;\n+    _ZSt8to_charsPcS_[def]St12chars_format;\n     # std::to_chars(char*, char*, [float|double|long double], chars_format, int)\n-    _ZSt8to_charsPcS_[defg]St12chars_formati;\n+    _ZSt8to_charsPcS_[def]St12chars_formati;\n \n } GLIBCXX_3.4.28;\n "}, {"sha": "8c7c783ba588c8c2de32e146dbd1ec38d87de751", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-extra.ver", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -42,6 +42,7 @@ GLIBCXX_LDBL_3.4.21 {\n \n GLIBCXX_LDBL_3.4.29 {\n   _ZSt10from_charsPKcS0_RgSt12chars_format;\n+  _ZSt8to_charsPcS_g*;\n } GLIBCXX_LDBL_3.4.21;\n \n CXXABI_LDBL_1.3 {"}, {"sha": "9b421b6f1f9e54ab4ceb4e92e3b28fc0f94714aa", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-ieee128-extra.ver", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -41,6 +41,7 @@ GLIBCXX_IEEE128_3.4.29 {\n   _ZNKSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE3putES4_bRSt8ios_base[cw]u9__ieee128;\n \n   _ZSt10from_charsPKcS0_Ru9__ieee128St12chars_format;\n+  _ZSt8to_charsPcS_u9__ieee128*;\n \n } GLIBCXX_3.4.29;\n "}, {"sha": "cb94aff5f1a6f73ab4d4ab0d5e5d2176879a937e", "filename": "libstdc++-v3/src/c++17/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -67,6 +67,10 @@ floating_from_chars.lo: floating_from_chars.cc\n \t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n floating_from_chars.o: floating_from_chars.cc\n \t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+floating_to_chars.lo: floating_to_chars.cc\n+\t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+floating_to_chars.o: floating_to_chars.cc\n+\t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n endif\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be"}, {"sha": "63984ecd52ad40aa925dbf3beba14e67890a44e6", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -761,6 +761,10 @@ vpath % $(top_srcdir)/src/c++17\n @GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n @GLIBCXX_LDBL_ALT128_COMPAT_TRUE@floating_from_chars.o: floating_from_chars.cc\n @GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@floating_to_chars.lo: floating_to_chars.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@floating_to_chars.o: floating_to_chars.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "aea96e08df18c0e3fa97932ed968451ec9fa0e00", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 187, "deletions": 113, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90027d18a94d02ba8f3b7503c5f0835f432a89e/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=f90027d18a94d02ba8f3b7503c5f0835f432a89e", "patch": "@@ -40,6 +40,14 @@\n #include <string_view>\n #include <type_traits>\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+#ifndef __LONG_DOUBLE_IBM128__\n+#error \"floating_to_chars.cc must be compiled with -mabi=ibmlongdouble\"\n+#endif\n+// sprintf for __ieee128\n+extern \"C\" int __sprintfieee128(char*, const char*, ...);\n+#endif\n+\n // This implementation crucially assumes float/double have the\n // IEEE binary32/binary64 formats.\n #if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n@@ -67,11 +75,27 @@\n # elif __LDBL_MANT_DIG__ == 106\n #  define LONG_DOUBLE_KIND LDK_IBM128\n # endif\n+# if defined _GLIBCXX_USE_FLOAT128 && __FLT128_MANT_DIG__ == 113\n+// Define overloads of std::to_chars for __float128.\n+#  define FLOAT128_TO_CHARS 1\n+# endif\n #endif\n+\n #if !defined(LONG_DOUBLE_KIND)\n # define LONG_DOUBLE_KIND LDK_UNSUPPORTED\n #endif\n \n+// For now we only support __float128 when it's the powerpc64 __ieee128 type.\n+#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+# undef FLOAT128_TO_CHARS\n+#endif\n+\n+#ifdef FLOAT128_TO_CHARS\n+using F128_type = __float128;\n+#else\n+using F128_type = void;\n+#endif\n+\n namespace\n {\n   namespace ryu\n@@ -140,9 +164,107 @@ namespace\n \t    0b0001010000011001011100100001010000010101101000001101000000000000 };\n     };\n \n+#if LONG_DOUBLE_KIND == LDK_BINARY128 || defined FLOAT128_TO_CHARS\n+  // Traits for the IEEE binary128 format.\n+  struct floating_type_traits_binary128\n+  {\n+    static constexpr int mantissa_bits = 112;\n+    static constexpr int exponent_bits = 15;\n+    static constexpr bool has_implicit_leading_bit = true;\n+    using mantissa_t = unsigned __int128;\n+    using shortest_scientific_t = ryu::floating_decimal_128;\n+\n+    static constexpr uint64_t pow10_adjustment_tab[]\n+      = { 0b0000000000000000000000000000000000000000000000000100000010000000,\n+\t  0b1011001111110100000100010101101110011100100110000110010110011000,\n+\t  0b1010100010001101111111000000001101010010100010010000111011110111,\n+\t  0b1011111001110001111000011111000010110111000111110100101010100101,\n+\t  0b0110100110011110011011000011000010011001110001001001010011100011,\n+\t  0b0000011111110010101111101011101010000110011111100111001110100111,\n+\t  0b0100010101010110000010111011110100000010011001001010001110111101,\n+\t  0b1101110111000010001101100000110100000111001001101011000101011011,\n+\t  0b0100111011101101010000001101011000101100101110010010110000101011,\n+\t  0b0100000110111000000110101000010011101000110100010110000011101101,\n+\t  0b1011001101001000100001010001100100001111011101010101110001010110,\n+\t  0b1000000001000000101001110010110010001111101101010101001100000110,\n+\t  0b0101110110100110000110000001001010111110001110010000111111010011,\n+\t  0b1010001111100111000100011100100100111100100101000001011001000111,\n+\t  0b1010011000011100110101100111001011100101111111100001110100000100,\n+\t  0b1100011100100010100000110001001010000000100000001001010111011101,\n+\t  0b0101110000100011001111101101000000100110000010010111010001111010,\n+\t  0b0100111100011010110111101000100110000111001001101100000001111100,\n+\t  0b1100100100111110101011000100000101011010110111000111110100110101,\n+\t  0b0110010000010111010100110011000000111010000010111011010110000100,\n+\t  0b0101001001010010110111010111000101011100000111100111000001110010,\n+\t  0b1101111111001011101010110001000111011010111101001011010110100100,\n+\t  0b0001000100110000011111101011001101110010110110010000000011100100,\n+\t  0b0001000000000101001001001000000000011000100011001110101001001110,\n+\t  0b0010010010001000111010011011100001000110011011011110110100111000,\n+\t  0b0000100110101100000111100010100100011100110111011100001111001100,\n+\t  0b1011111010001110001100000011110111111111100000001011111111101100,\n+\t  0b0000011100001111010101110000100110111100101101110111101001000001,\n+\t  0b1100010001110110111100001001001101101000011100000010110101001011,\n+\t  0b0100101001101011111001011110101101100011011111011100101010101111,\n+\t  0b0001101001111001110000101101101100001011010001011110011101000010,\n+\t  0b1111000000101001101111011010110011101110100001011011001011100010,\n+\t  0b0101001010111101101100001111100010010110001101001000001101100100,\n+\t  0b0101100101011110001100101011111000111001111001001001101101100001,\n+\t  0b1111001101010010100100011011000110110010001111000111010001001101,\n+\t  0b0001110010011000000001000110110111011000011100001000011001110111,\n+\t  0b0100001011011011011011110011101100100101111111101100101000001110,\n+\t  0b0101011110111101010111100111101111000101111111111110100011011010,\n+\t  0b1110101010001001110100000010110111010111111010111110100110010110,\n+\t  0b1010001111100001001100101000110100001100011100110010000011010111,\n+\t  0b1111111101101111000100111100000101011000001110011011101010111001,\n+\t  0b1111101100001110100101111101011001000100000101110000110010100011,\n+\t  0b1001010110110101101101000101010001010000101011011111010011010000,\n+\t  0b0111001110110011101001100111000001000100001010110000010000001101,\n+\t  0b0101111100111110100111011001111001111011011110010111010011101010,\n+\t  0b1110111000000001100100111001100100110001011011001110101111110111,\n+\t  0b0001010001001101010111101010011111000011110001101101011001111111,\n+\t  0b0101000011100011010010001101100001011101011010100110101100100010,\n+\t  0b0001000101011000100101111100110110000101101101111000110001001011,\n+\t  0b0101100101001011011000010101000000010100011100101101000010011111,\n+\t  0b1000010010001011101001011010100010111011110100110011011000100111,\n+\t  0b1000011011100001010111010111010011101100100010010010100100101001,\n+\t  0b1001001001010111110101000010111010000000101111010100001010010010,\n+\t  0b0011011110110010010101111011000001000000000011011111000011111011,\n+\t  0b1011000110100011001110000001000100000001011100010111010010011110,\n+\t  0b0111101110110101110111110000011000000100011100011000101101101110,\n+\t  0b1001100101111011011100011110101011001111100111101010101010110111,\n+\t  0b1100110010010001100011001111010000000100011101001111011101001111,\n+\t  0b1000111001111010100101000010000100000001001100101010001011001101,\n+\t  0b0011101011110000110010100101010100110010100001000010101011111101,\n+\t  0b1100000000000110000010101011000000011101000110011111100010111111,\n+\t  0b0010100110000011011100010110111100010110101100110011101110001101,\n+\t  0b0010111101010011111000111001111100110111111100100011110001101110,\n+\t  0b1001110111001001101001001001011000010100110001000000100011010110,\n+\t  0b0011110101100111011011111100001000011001010100111100100101111010,\n+\t  0b0010001101000011000010100101110000010101101000100110000100001010,\n+\t  0b0010000010100110010101100101110011101111000111111111001001100001,\n+\t  0b0100111111011011011011100111111011000010011101101111011111110110,\n+\t  0b1111111111010110101011101000100101110100001110001001101011100111,\n+\t  0b1011111101000101110000111100100010111010100001010000010010110010,\n+\t  0b1111010101001011101011101010000100110110001110111100100110111111,\n+\t  0b1011001101000001001101000010101010010110010001100001011100011010,\n+\t  0b0101001011011101010001110100010000010001111100100100100001001101,\n+\t  0b0010100000111001100011000101100101000001111100111001101000000010,\n+\t  0b1011001111010101011001000100100110100100110111110100000110111000,\n+\t  0b0101011111010011100011010010111101110010100001111111100010001001,\n+\t  0b0010111011101100100000000000001111111010011101100111100001001101,\n+\t  0b1101000000000000000000000000000000000000000000000000000000000000 };\n+  };\n+\n+# ifdef FLOAT128_TO_CHARS\n+  template<>\n+    struct floating_type_traits<__float128> : floating_type_traits_binary128\n+    { };\n+# endif\n+#endif\n+\n #if LONG_DOUBLE_KIND == LDK_BINARY64\n   // When long double is equivalent to double, we just forward the long double\n-  // overloads to the double overloads, so we don't need to define a a\n+  // overloads to the double overloads, so we don't need to define a\n   // floating_type_traits<long double> specialization in this case.\n #elif LONG_DOUBLE_KIND == LDK_FLOAT80\n   template<>\n@@ -236,94 +358,8 @@ namespace\n     };\n #elif LONG_DOUBLE_KIND == LDK_BINARY128\n   template<>\n-    struct floating_type_traits<long double>\n-    {\n-      static constexpr int mantissa_bits = 112;\n-      static constexpr int exponent_bits = 15;\n-      static constexpr bool has_implicit_leading_bit = true;\n-      using mantissa_t = unsigned __int128;\n-      using shortest_scientific_t = ryu::floating_decimal_128;\n-\n-      static constexpr uint64_t pow10_adjustment_tab[]\n-\t= { 0b0000000000000000000000000000000000000000000000000100000010000000,\n-\t    0b1011001111110100000100010101101110011100100110000110010110011000,\n-\t    0b1010100010001101111111000000001101010010100010010000111011110111,\n-\t    0b1011111001110001111000011111000010110111000111110100101010100101,\n-\t    0b0110100110011110011011000011000010011001110001001001010011100011,\n-\t    0b0000011111110010101111101011101010000110011111100111001110100111,\n-\t    0b0100010101010110000010111011110100000010011001001010001110111101,\n-\t    0b1101110111000010001101100000110100000111001001101011000101011011,\n-\t    0b0100111011101101010000001101011000101100101110010010110000101011,\n-\t    0b0100000110111000000110101000010011101000110100010110000011101101,\n-\t    0b1011001101001000100001010001100100001111011101010101110001010110,\n-\t    0b1000000001000000101001110010110010001111101101010101001100000110,\n-\t    0b0101110110100110000110000001001010111110001110010000111111010011,\n-\t    0b1010001111100111000100011100100100111100100101000001011001000111,\n-\t    0b1010011000011100110101100111001011100101111111100001110100000100,\n-\t    0b1100011100100010100000110001001010000000100000001001010111011101,\n-\t    0b0101110000100011001111101101000000100110000010010111010001111010,\n-\t    0b0100111100011010110111101000100110000111001001101100000001111100,\n-\t    0b1100100100111110101011000100000101011010110111000111110100110101,\n-\t    0b0110010000010111010100110011000000111010000010111011010110000100,\n-\t    0b0101001001010010110111010111000101011100000111100111000001110010,\n-\t    0b1101111111001011101010110001000111011010111101001011010110100100,\n-\t    0b0001000100110000011111101011001101110010110110010000000011100100,\n-\t    0b0001000000000101001001001000000000011000100011001110101001001110,\n-\t    0b0010010010001000111010011011100001000110011011011110110100111000,\n-\t    0b0000100110101100000111100010100100011100110111011100001111001100,\n-\t    0b1011111010001110001100000011110111111111100000001011111111101100,\n-\t    0b0000011100001111010101110000100110111100101101110111101001000001,\n-\t    0b1100010001110110111100001001001101101000011100000010110101001011,\n-\t    0b0100101001101011111001011110101101100011011111011100101010101111,\n-\t    0b0001101001111001110000101101101100001011010001011110011101000010,\n-\t    0b1111000000101001101111011010110011101110100001011011001011100010,\n-\t    0b0101001010111101101100001111100010010110001101001000001101100100,\n-\t    0b0101100101011110001100101011111000111001111001001001101101100001,\n-\t    0b1111001101010010100100011011000110110010001111000111010001001101,\n-\t    0b0001110010011000000001000110110111011000011100001000011001110111,\n-\t    0b0100001011011011011011110011101100100101111111101100101000001110,\n-\t    0b0101011110111101010111100111101111000101111111111110100011011010,\n-\t    0b1110101010001001110100000010110111010111111010111110100110010110,\n-\t    0b1010001111100001001100101000110100001100011100110010000011010111,\n-\t    0b1111111101101111000100111100000101011000001110011011101010111001,\n-\t    0b1111101100001110100101111101011001000100000101110000110010100011,\n-\t    0b1001010110110101101101000101010001010000101011011111010011010000,\n-\t    0b0111001110110011101001100111000001000100001010110000010000001101,\n-\t    0b0101111100111110100111011001111001111011011110010111010011101010,\n-\t    0b1110111000000001100100111001100100110001011011001110101111110111,\n-\t    0b0001010001001101010111101010011111000011110001101101011001111111,\n-\t    0b0101000011100011010010001101100001011101011010100110101100100010,\n-\t    0b0001000101011000100101111100110110000101101101111000110001001011,\n-\t    0b0101100101001011011000010101000000010100011100101101000010011111,\n-\t    0b1000010010001011101001011010100010111011110100110011011000100111,\n-\t    0b1000011011100001010111010111010011101100100010010010100100101001,\n-\t    0b1001001001010111110101000010111010000000101111010100001010010010,\n-\t    0b0011011110110010010101111011000001000000000011011111000011111011,\n-\t    0b1011000110100011001110000001000100000001011100010111010010011110,\n-\t    0b0111101110110101110111110000011000000100011100011000101101101110,\n-\t    0b1001100101111011011100011110101011001111100111101010101010110111,\n-\t    0b1100110010010001100011001111010000000100011101001111011101001111,\n-\t    0b1000111001111010100101000010000100000001001100101010001011001101,\n-\t    0b0011101011110000110010100101010100110010100001000010101011111101,\n-\t    0b1100000000000110000010101011000000011101000110011111100010111111,\n-\t    0b0010100110000011011100010110111100010110101100110011101110001101,\n-\t    0b0010111101010011111000111001111100110111111100100011110001101110,\n-\t    0b1001110111001001101001001001011000010100110001000000100011010110,\n-\t    0b0011110101100111011011111100001000011001010100111100100101111010,\n-\t    0b0010001101000011000010100101110000010101101000100110000100001010,\n-\t    0b0010000010100110010101100101110011101111000111111111001001100001,\n-\t    0b0100111111011011011011100111111011000010011101101111011111110110,\n-\t    0b1111111111010110101011101000100101110100001110001001101011100111,\n-\t    0b1011111101000101110000111100100010111010100001010000010010110010,\n-\t    0b1111010101001011101011101010000100110110001110111100100110111111,\n-\t    0b1011001101000001001101000010101010010110010001100001011100011010,\n-\t    0b0101001011011101010001110100010000010001111100100100100001001101,\n-\t    0b0010100000111001100011000101100101000001111100111001101000000010,\n-\t    0b1011001111010101011001000100100110100100110111110100000110111000,\n-\t    0b0101011111010011100011010010111101110010100001111111100010001001,\n-\t    0b0010111011101100100000000000001111111010011101100111100001001101,\n-\t    0b1101000000000000000000000000000000000000000000000000000000000000 };\n-    };\n+    struct floating_type_traits<long double> : floating_type_traits_binary128\n+    { };\n #elif LONG_DOUBLE_KIND == LDK_IBM128\n   template<>\n     struct floating_type_traits<long double>\n@@ -461,7 +497,8 @@ namespace\n       else if constexpr (std::is_same_v<T, double>)\n \treturn ryu::floating_to_fd64(value);\n #ifdef __SIZEOF_INT128__\n-      else if constexpr (std::is_same_v<T, long double>)\n+      else if constexpr (std::is_same_v<T, long double>\n+\t\t\t || std::is_same_v<T, F128_type>)\n \t{\n \t  constexpr int mantissa_bits\n \t    = floating_type_traits<T>::mantissa_bits;\n@@ -815,6 +852,39 @@ template<typename T>\n     return result;\n   }\n \n+namespace\n+{\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wabi\"\n+  template<typename T, typename... Extra>\n+  inline int\n+  sprintf_ld(char* buffer, const char* format_string, T value, Extra... args)\n+  {\n+    int len;\n+\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n+    const int saved_rounding_mode = fegetround();\n+    if (saved_rounding_mode != FE_TONEAREST)\n+      fesetround(FE_TONEAREST); // We want round-to-nearest behavior.\n+#endif\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+    if constexpr (is_same_v<T, __ieee128>)\n+      len = __sprintfieee128(buffer, format_string, value, args...);\n+    else\n+#endif\n+    len = sprintf(buffer, format_string, value, args...);\n+\n+#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n+    if (saved_rounding_mode != FE_TONEAREST)\n+      fesetround(saved_rounding_mode);\n+#endif\n+\n+    return len;\n+  }\n+#pragma GCC diagnostic pop\n+}\n+\n template<typename T>\n   static to_chars_result\n   __floating_to_chars_shortest(char* first, char* const last, const T value,\n@@ -926,7 +996,7 @@ template<typename T>\n \t     < floating_type_traits<T>::mantissa_bits - 2);\n \tif (value_fits_inside_mantissa_p)\n \t  {\n-\t    // Print the small exactly-represantable number in fixed form by\n+\t    // Print the small exactly-representable number in fixed form by\n \t    // writing out fd.mantissa followed by fd.exponent many 0s.\n \t    if (fd.sign)\n \t      *first++ = '-';\n@@ -938,26 +1008,18 @@ template<typename T>\n \t    __glibcxx_assert(output_length == expected_output_length);\n \t    return result;\n \t  }\n-\telse if constexpr (is_same_v<T, long double>)\n+\telse if constexpr (is_same_v<T, long double>\n+\t\t\t   || is_same_v<T, F128_type>)\n \t  {\n \t    // We can't use d2fixed_buffered_n for types larger than double,\n \t    // so we instead format larger types through sprintf.\n \t    // TODO: We currently go through an intermediate buffer in order\n-\t    // to accomodate the mandatory null terminator of sprintf, but we\n+\t    // to accommodate the mandatory null terminator of sprintf, but we\n \t    // can avoid this if we use sprintf to write all but the last\n \t    // digit, and carefully compute and write the last digit\n \t    // ourselves.\n \t    char buffer[expected_output_length+1];\n-#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n-\t    const int saved_rounding_mode = fegetround();\n-\t    if (saved_rounding_mode != FE_TONEAREST)\n-\t      fesetround(FE_TONEAREST); // We want round-to-nearest behavior.\n-#endif\n-\t    const int output_length = sprintf(buffer, \"%.0Lf\", value);\n-#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n-\t    if (saved_rounding_mode != FE_TONEAREST)\n-\t      fesetround(saved_rounding_mode);\n-#endif\n+\t    const int output_length = sprintf_ld(buffer, \"%.0Lf\", value);\n \t    __glibcxx_assert(output_length == expected_output_length);\n \t    memcpy(first, buffer, output_length);\n \t    return {first + output_length, errc{}};\n@@ -1143,17 +1205,8 @@ template<typename T>\n \n \t// Do the sprintf into the local buffer.\n \tchar buffer[output_length_upper_bound+1];\n-#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n-\tconst int saved_rounding_mode = fegetround();\n-\tif (saved_rounding_mode != FE_TONEAREST)\n-\t  fesetround(FE_TONEAREST); // We want round-to-nearest behavior.\n-#endif\n \tint output_length\n-\t  = sprintf(buffer, output_specifier, effective_precision, value);\n-#if _GLIBCXX_USE_C99_FENV_TR1 && defined(FE_TONEAREST)\n-\tif (saved_rounding_mode != FE_TONEAREST)\n-\t  fesetround(saved_rounding_mode);\n-#endif\n+\t  = sprintf_ld(buffer, output_specifier, value, effective_precision);\n \t__glibcxx_assert(output_length <= output_length_upper_bound);\n \n \tif (effective_precision > 0)\n@@ -1546,6 +1599,27 @@ to_chars(char* first, char* last, long double value, chars_format fmt,\n     return __floating_to_chars_precision(first, last, value, fmt, precision);\n }\n \n+#ifdef FLOAT128_TO_CHARS\n+to_chars_result\n+to_chars(char* first, char* last, __float128 value) noexcept\n+{\n+  return __floating_to_chars_shortest(first, last, value, chars_format{});\n+}\n+\n+to_chars_result\n+to_chars(char* first, char* last, __float128 value, chars_format fmt) noexcept\n+{\n+  return __floating_to_chars_shortest(first, last, value, fmt);\n+}\n+\n+to_chars_result\n+to_chars(char* first, char* last, __float128 value, chars_format fmt,\n+\t int precision) noexcept\n+{\n+  return __floating_to_chars_precision(first, last, value, fmt, precision);\n+}\n+#endif\n+\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n // Map the -mlong-double-64 long double overloads to the double overloads.\n extern \"C\" to_chars_result"}]}