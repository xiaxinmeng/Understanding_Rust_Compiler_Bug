{"sha": "51e674b7f1aa2a940befe7000a2c3975aa2e355e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlNjc0YjdmMWFhMmE5NDBiZWZlNzAwMGEyYzM5NzVhYTJlMzU1ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-07T13:09:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-07T13:09:09Z"}, "message": "target-supports.exp (check_effective_target_sync_int_128): Don't cache the result.\n\n\t* lib/target-supports.exp (check_effective_target_sync_int_128):\n\tDon't cache the result.\n\t(check_effective_target_sync_long_long): Ditto.\n\nFrom-SVN: r181082", "tree": {"sha": "1f35e81474d954d68a8e7db7e5dfc7ce1f710e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f35e81474d954d68a8e7db7e5dfc7ce1f710e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e674b7f1aa2a940befe7000a2c3975aa2e355e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e674b7f1aa2a940befe7000a2c3975aa2e355e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e674b7f1aa2a940befe7000a2c3975aa2e355e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e674b7f1aa2a940befe7000a2c3975aa2e355e/comments", "author": null, "committer": null, "parents": [{"sha": "3cc227e5bf0eb195c7ad66f5270b73e8883edd38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc227e5bf0eb195c7ad66f5270b73e8883edd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc227e5bf0eb195c7ad66f5270b73e8883edd38"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "8aada19d2d6eb254b2f0f6789c4347f8df039d5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e674b7f1aa2a940befe7000a2c3975aa2e355e", "patch": "@@ -27,7 +27,15 @@\n \t* config.gcc (alpha64-dec-*vms*, alpha*-dec-*vms*, ia64-hp-*vms*):\n \tAdjust for above change.\n \n- 2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n+2011-11-07  Enkovich Ilya  <ilya.enkovich@intel.com>\n+\n+\tPR target/50962\n+\t* config/i386/i386-protos.h (ix86_use_lea_for_mov): New.\n+\t* config/i386/i386.c (ix86_use_lea_for_mov): Likewise.\n+\t* config/i386/i386.md (movsi_internal): Emit lea if profitable.\n+\t(movdi_internal_rex64): Likewise.\n+\n+2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n \n \tPR rtl-optimization/47698\n \t* ifconv.c (noce_operand_ok): prevent CMOV generation for volatile mem."}, {"sha": "33c4955426b6f02a59b953ebed62884cdeeb588e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51e674b7f1aa2a940befe7000a2c3975aa2e355e", "patch": "@@ -1,10 +1,8 @@\n-2011-11-07  Enkovich Ilya  <ilya.enkovich@intel.com>\n+2011-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n-\tPR target/50962\n-\t* config/i386/i386-protos.h (ix86_use_lea_for_mov): New.\n-\t* config/i386/i386.c (ix86_use_lea_for_mov): Likewise.\n-\t* config/i386/i386.md (movsi_internal): Emit lea if profitable.\n-\t(movdi_internal_rex64): Likewise.\n+\t* lib/target-supports.exp (check_effective_target_sync_int_128):\n+\tDon't cache the result.\n+\t(check_effective_target_sync_long_long): Ditto.\n \n 2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n "}, {"sha": "fd6b2691a97b56d8886a308fa9b042febcd45657", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e674b7f1aa2a940befe7000a2c3975aa2e355e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=51e674b7f1aa2a940befe7000a2c3975aa2e355e", "patch": "@@ -3542,39 +3542,23 @@ proc check_effective_target_section_anchors { } {\n # Return 1 if the target supports atomic operations on \"int_128\" values.\n \n proc check_effective_target_sync_int_128 { } {\n-    global et_sync_int_128_saved\n-\n-    if [info exists et_sync_int_128_saved] {\n-        verbose \"check_effective_target_sync_int_128: using cached result\" 2\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n+\t && ![is-effective-target ia32] } {\n+\treturn 1\n     } else {\n-        set et_sync_int_128_saved 0\n-        if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n-\t     && ![is-effective-target ia32] } {\n-           set et_sync_int_128_saved 1\n-        }\n+\treturn 0\n     }\n-\n-    verbose \"check_effective_target_sync_int_128: returning $et_sync_int_128_saved\" 2\n-    return $et_sync_int_128_saved\n }\n \n # Return 1 if the target supports atomic operations on \"long long\".\n \n proc check_effective_target_sync_long_long { } {\n-    global et_sync_long_long_saved\n-\n-    if [info exists et_sync_long_long_saved] {\n-        verbose \"check_effective_target_sync_long_long: using cached result\" 2\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n+\t && ![is-effective-target ia32] } {\n+\treturn 1\n     } else {\n-        set et_sync_long_long_saved 0\n-        if { ([istarget x86_64-*-*] || [istarget i?86-*-*])\n-\t     && ![is-effective-target ia32] } {\n-           set et_sync_long_long_saved 1\n-        }\n+\treturn 0\n     }\n-\n-    verbose \"check_effective_target_sync_long_long: returning $et_sync_long_long_saved\" 2\n-    return $et_sync_long_long_saved\n }\n \n # Return 1 if the target supports atomic operations on \"int\" and \"long\"."}]}