{"sha": "9b025925eceaf207e3d0104cddace753ac6dabd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwMjU5MjVlY2VhZjIwN2UzZDAxMDRjZGRhY2U3NTNhYzZkYWJkNQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-28T14:39:33Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-08-27T15:50:19Z"}, "message": "libgfortran: Use the libtool macro to determine libm availability.\n\nWe recently had a report of build failure against a Darwin branch on\nthe latest OS release.  This was because (temporarily) the symlink\nfrom libm.dylib => libSystem.dylib had been removed/omitted.\n\nlibm is not needed on Darwin, and should not be added unconditionally\neven if that is (mostly) harmless since it is a symlink to libc.\n\nThere could be cases where the addition was not completely harmless\nbecause the presentation of the symlink would cause the symbols exposed\nin libSystem to be considered ahead of ones presented in convenience\nlibraries.\n\nlibgfortran/ChangeLog:\n\n\t* Makefile.am: Use configured libm availability.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Use libtool macro to find libm availability.\n\t* libgfortran.spec.in: Use configured libm availability.", "tree": {"sha": "229425bf8564f2898e489f8112f91d8e473ea29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229425bf8564f2898e489f8112f91d8e473ea29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b025925eceaf207e3d0104cddace753ac6dabd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b025925eceaf207e3d0104cddace753ac6dabd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b025925eceaf207e3d0104cddace753ac6dabd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b025925eceaf207e3d0104cddace753ac6dabd5/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42ea63bcc12e819c3e1066974a691988e86b724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42ea63bcc12e819c3e1066974a691988e86b724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42ea63bcc12e819c3e1066974a691988e86b724"}], "stats": {"total": 154, "additions": 149, "deletions": 5}, "files": [{"sha": "6fc4b465c6e6f12c040e0e551a23d2462b66a186", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=9b025925eceaf207e3d0104cddace753ac6dabd5", "patch": "@@ -42,7 +42,7 @@ libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n \t$(LTLDFLAGS) $(LIBQUADLIB) ../libbacktrace/libbacktrace.la \\\n \t$(HWCAP_LDFLAGS) \\\n-\t-lm $(extra_ldflags_libgfortran) \\\n+\t$(LIBM) $(extra_ldflags_libgfortran) \\\n \t$(version_arg) -Wc,-shared-libgcc\n libgfortran_la_DEPENDENCIES = $(version_dep) libgfortran.spec $(LIBQUADLIB_DEP)\n "}, {"sha": "6fc9bafe07ad729094e14373aff1e8e02f913cd6", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=9b025925eceaf207e3d0104cddace753ac6dabd5", "patch": "@@ -610,6 +610,7 @@ LD = @LD@\n LDFLAGS = @LDFLAGS@\n LIBGOMP_CHECKED_INT_KINDS = @LIBGOMP_CHECKED_INT_KINDS@\n LIBGOMP_CHECKED_REAL_KINDS = @LIBGOMP_CHECKED_REAL_KINDS@\n+LIBM = @LIBM@\n LIBOBJS = @LIBOBJS@\n LIBQUADINCLUDE = @LIBQUADINCLUDE@\n LIBQUADLIB = @LIBQUADLIB@\n@@ -734,7 +735,7 @@ libgfortran_la_LINK = $(LINK) $(libgfortran_la_LDFLAGS)\n libgfortran_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n \t$(LTLDFLAGS) $(LIBQUADLIB) ../libbacktrace/libbacktrace.la \\\n \t$(HWCAP_LDFLAGS) \\\n-\t-lm $(extra_ldflags_libgfortran) \\\n+\t$(LIBM) $(extra_ldflags_libgfortran) \\\n \t$(version_arg) -Wc,-shared-libgcc\n \n libgfortran_la_DEPENDENCIES = $(version_dep) libgfortran.spec $(LIBQUADLIB_DEP)"}, {"sha": "4810b9b032e3bb96076ea34c3ffb6779b5b41704", "filename": "libgfortran/configure", "status": "modified", "additions": 144, "deletions": 2, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=9b025925eceaf207e3d0104cddace753ac6dabd5", "patch": "@@ -658,6 +658,7 @@ FC\n enable_static\n enable_shared\n lt_host_flags\n+LIBM\n OTOOL64\n OTOOL\n LIPO\n@@ -12727,7 +12728,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12730 \"configure\"\n+#line 12731 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12833,7 +12834,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12836 \"configure\"\n+#line 12837 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13070,6 +13071,147 @@ CC=\"$lt_save_CC\"\n # Only expand once:\n \n \n+LIBM=\n+case $host in\n+*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n+  # These system don't have libm, or don't need it\n+  ;;\n+*-ncr-sysv4.3*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _mwvalidcheckl in -lmw\" >&5\n+$as_echo_n \"checking for _mwvalidcheckl in -lmw... \" >&6; }\n+if ${ac_cv_lib_mw__mwvalidcheckl+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lmw  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char _mwvalidcheckl ();\n+int\n+main ()\n+{\n+return _mwvalidcheckl ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_mw__mwvalidcheckl=yes\n+else\n+  ac_cv_lib_mw__mwvalidcheckl=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_mw__mwvalidcheckl\" >&5\n+$as_echo \"$ac_cv_lib_mw__mwvalidcheckl\" >&6; }\n+if test \"x$ac_cv_lib_mw__mwvalidcheckl\" = xyes; then :\n+  LIBM=\"-lmw\"\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for cos in -lm\" >&5\n+$as_echo_n \"checking for cos in -lm... \" >&6; }\n+if ${ac_cv_lib_m_cos+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char cos ();\n+int\n+main ()\n+{\n+return cos ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_cos=yes\n+else\n+  ac_cv_lib_m_cos=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_cos\" >&5\n+$as_echo \"$ac_cv_lib_m_cos\" >&6; }\n+if test \"x$ac_cv_lib_m_cos\" = xyes; then :\n+  LIBM=\"$LIBM -lm\"\n+fi\n+\n+  ;;\n+*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for cos in -lm\" >&5\n+$as_echo_n \"checking for cos in -lm... \" >&6; }\n+if ${ac_cv_lib_m_cos+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char cos ();\n+int\n+main ()\n+{\n+return cos ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_cos=yes\n+else\n+  ac_cv_lib_m_cos=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_cos\" >&5\n+$as_echo \"$ac_cv_lib_m_cos\" >&6; }\n+if test \"x$ac_cv_lib_m_cos\" = xyes; then :\n+  LIBM=\"-lm\"\n+fi\n+\n+  ;;\n+esac\n+\n+\n \n \n "}, {"sha": "a77509801e68b88ba9b01b4fd6c7fbc76fbebedd", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=9b025925eceaf207e3d0104cddace753ac6dabd5", "patch": "@@ -260,6 +260,7 @@ AC_PROG_INSTALL\n #AC_MSG_NOTICE([====== Starting libtool configuration])\n AC_LIBTOOL_DLOPEN\n AM_PROG_LIBTOOL\n+LT_LIB_M\n ACX_LT_HOST_FLAGS\n AC_SUBST(enable_shared)\n AC_SUBST(enable_static)"}, {"sha": "367d485c230c215e3de4d4cafcdc0fc949a76fcf", "filename": "libgfortran/libgfortran.spec.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Flibgfortran.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b025925eceaf207e3d0104cddace753ac6dabd5/libgfortran%2Flibgfortran.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.spec.in?ref=9b025925eceaf207e3d0104cddace753ac6dabd5", "patch": "@@ -5,4 +5,4 @@\n #\n \n %rename lib liborig\n-*lib: @LIBQUADSPEC@ -lm %(libgcc) %(liborig)\n+*lib: @LIBQUADSPEC@ @LIBM@ %(libgcc) %(liborig)"}]}