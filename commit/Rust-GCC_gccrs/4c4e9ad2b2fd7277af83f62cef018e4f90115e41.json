{"sha": "4c4e9ad2b2fd7277af83f62cef018e4f90115e41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0ZTlhZDJiMmZkNzI3N2FmODNmNjJjZWYwMThlNGY5MDExNWU0MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-05-27T08:49:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-27T08:49:47Z"}, "message": "sem_attr.adb: add guard to previous patch.\n\n2008-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: add guard to previous patch.\n\nFrom-SVN: r135977", "tree": {"sha": "4098b2932f5f1fa7f6f52961730c2ae8b9d751c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4098b2932f5f1fa7f6f52961730c2ae8b9d751c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4e9ad2b2fd7277af83f62cef018e4f90115e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4e9ad2b2fd7277af83f62cef018e4f90115e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4e9ad2b2fd7277af83f62cef018e4f90115e41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4e9ad2b2fd7277af83f62cef018e4f90115e41/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "986a8d9011564b90d14a972af1d78dea4eaa95c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986a8d9011564b90d14a972af1d78dea4eaa95c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986a8d9011564b90d14a972af1d78dea4eaa95c8"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "0cb2ace755e11d256bf0c40dcda37ede374397e0", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4e9ad2b2fd7277af83f62cef018e4f90115e41/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4e9ad2b2fd7277af83f62cef018e4f90115e41/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4c4e9ad2b2fd7277af83f62cef018e4f90115e41", "patch": "@@ -5234,6 +5234,7 @@ package body Sem_Attr is\n          --  subtype then get the type from the initial value. If the value has\n          --  been expanded into assignments, there is no expression and the\n          --  attribute reference remains dynamic.\n+\n          --  We could do better here and retrieve the type ???\n \n          if Ekind (P_Entity) = E_Constant\n@@ -8094,9 +8095,10 @@ package body Sem_Attr is\n                --  the slice is non-null. That is because a null slice can have\n                --  an out of bounds index value.\n \n-               --  Right now, gigi blows up if given 'Address on a slice, and\n-               --  this covers up that bug in one case, but the bug is likely\n-               --  still there in the cases not transformed by this code ???\n+               --  Right now, gigi blows up if given 'Address on a slice as a\n+               --  result of some incorrect freeze nodes generated by the front\n+               --  end, and this covers up that bug in one case, but the bug is\n+               --  likely still there in the cases not handled by this code ???\n \n                --  It's not clear what 'Address *should* return for a null\n                --  slice with out of bounds indexes, this might be worth an ARG\n@@ -8127,7 +8129,9 @@ package body Sem_Attr is\n                           Prefix => (New_Occurrence_Of (Entity (D), Loc)),\n                           Attribute_Name => Name_First);\n \n-                  elsif Not_Null_Range (Low_Bound (D), High_Bound (D)) then\n+                  elsif Nkind (D) = N_Range\n+                    and then Not_Null_Range (Low_Bound (D), High_Bound (D))\n+                  then\n                      Lo := Low_Bound (D);\n \n                   else"}]}