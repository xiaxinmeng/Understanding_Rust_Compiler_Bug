{"sha": "c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2NTA0ZjZlYWJhZDdlMTczZTRmYmNmYWNmNTI4MjBmZmZjYjllYw==", "commit": {"author": {"name": "Li Jia He", "email": "helijia@linux.ibm.com", "date": "2019-09-16T14:22:16Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-09-16T14:22:16Z"}, "message": "Fix PR88784, middle end is missing some optimizations about unsigned\n\n2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n\t    Qi Feng  <ffengqi@linux.ibm.com>\n\n\tPR middle-end/88784\n\t* match.pd (x >  y  &&  x != XXX_MIN): Optimize into 'x > y'.\n\t(x >  y  &&  x == XXX_MIN): Optimize into 'false'.\n\t(x <= y  &&  x == XXX_MIN): Optimize into 'x == XXX_MIN'.\n\t(x <  y  &&  x != XXX_MAX): Optimize into 'x < y'.\n\t(x <  y  &&  x == XXX_MAX): Optimize into 'false'.\n\t(x >= y  &&  x == XXX_MAX): Optimize into 'x == XXX_MAX'.\n\t(x >  y  ||  x != XXX_MIN): Optimize into 'x != XXX_MIN'.\n\t(x <= y  ||  x != XXX_MIN): Optimize into 'true'.\n\t(x <= y  ||  x == XXX_MIN): Optimize into 'x <= y'.\n\t(x <  y  ||  x != XXX_MAX): Optimize into 'x != XXX_MAX'.\n\t(x >= y  ||  x != XXX_MAX): Optimize into 'true'.\n\t(x >= y  ||  x == XXX_MAX): Optimize into 'x >= y'.\n2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n\t    Qi Feng  <ffengqi@linux.ibm.com>\n\n\tPR middle-end/88784\n\t* gcc.dg/pr88784-1.c: New testcase.\n\t* gcc.dg/pr88784-2.c: New testcase.\n\t* gcc.dg/pr88784-3.c: New testcase.\n\t* gcc.dg/pr88784-4.c: New testcase.\n\t* gcc.dg/pr88784-5.c: New testcase.\n\t* gcc.dg/pr88784-6.c: New testcase.\n\t* gcc.dg/pr88784-7.c: New testcase.\n\t* gcc.dg/pr88784-8.c: New testcase.\n\t* gcc.dg/pr88784-9.c: New testcase.\n\t* gcc.dg/pr88784-10.c: New testcase.\n\t* gcc.dg/pr88784-11.c: New testcase.\n\t* gcc.dg/pr88784-12.c: New testcase.\n\nCo-Authored-By: Qi Feng <ffengqi@linux.ibm.com>\n\nFrom-SVN: r275749", "tree": {"sha": "4239b17f23fa988f4b8813323346e97f44b8feca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4239b17f23fa988f4b8813323346e97f44b8feca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/comments", "author": {"login": "HLJ2009", "id": 18440836, "node_id": "MDQ6VXNlcjE4NDQwODM2", "avatar_url": "https://avatars.githubusercontent.com/u/18440836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HLJ2009", "html_url": "https://github.com/HLJ2009", "followers_url": "https://api.github.com/users/HLJ2009/followers", "following_url": "https://api.github.com/users/HLJ2009/following{/other_user}", "gists_url": "https://api.github.com/users/HLJ2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/HLJ2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HLJ2009/subscriptions", "organizations_url": "https://api.github.com/users/HLJ2009/orgs", "repos_url": "https://api.github.com/users/HLJ2009/repos", "events_url": "https://api.github.com/users/HLJ2009/events{/privacy}", "received_events_url": "https://api.github.com/users/HLJ2009/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f487a349de62613d7fa429bcbfbeeafbfc94f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f487a349de62613d7fa429bcbfbeeafbfc94f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f487a349de62613d7fa429bcbfbeeafbfc94f3a"}], "stats": {"total": 488, "additions": 484, "deletions": 4}, "files": [{"sha": "3bb383769e5a75c23b0aca8485c18780c0f0c97c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -1,3 +1,20 @@\n+2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n+\t    Qi Feng  <ffengqi@linux.ibm.com>\n+\n+\tPR middle-end/88784\n+\t* match.pd (x >  y  &&  x != XXX_MIN): Optimize into 'x > y'.\n+\t(x >  y  &&  x == XXX_MIN): Optimize into 'false'.\n+\t(x <= y  &&  x == XXX_MIN): Optimize into 'x == XXX_MIN'.\n+\t(x <  y  &&  x != XXX_MAX): Optimize into 'x < y'.\n+\t(x <  y  &&  x == XXX_MAX): Optimize into 'false'.\n+\t(x >= y  &&  x == XXX_MAX): Optimize into 'x == XXX_MAX'.\n+\t(x >  y  ||  x != XXX_MIN): Optimize into 'x != XXX_MIN'.\n+\t(x <= y  ||  x != XXX_MIN): Optimize into 'true'.\n+\t(x <= y  ||  x == XXX_MIN): Optimize into 'x <= y'.\n+\t(x <  y  ||  x != XXX_MAX): Optimize into 'x != XXX_MAX'.\n+\t(x >= y  ||  x != XXX_MAX): Optimize into 'true'.\n+\t(x >= y  ||  x == XXX_MAX): Optimize into 'x >= y'.\n+\n 2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "2ca88000cadee33c34164c1c13d526bc97471e9d", "filename": "gcc/match.pd", "status": "modified", "additions": 78, "deletions": 4, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -1883,6 +1883,80 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     { wide_int_to_tree (type, (wi::to_wide (@1)\n \t\t\t       & (bitpos / BITS_PER_UNIT))); }))))\n \n+(match min_value\n+ INTEGER_CST\n+ (if (INTEGRAL_TYPE_P (type)\n+      && wi::eq_p (wi::to_wide (t), wi::min_value (type)))))\n+\n+(match max_value\n+ INTEGER_CST\n+ (if (INTEGRAL_TYPE_P (type)\n+      && wi::eq_p (wi::to_wide (t), wi::max_value (type)))))\n+\n+/* x >  y  &&  x != XXX_MIN  -->  x > y\n+   x >  y  &&  x == XXX_MIN  -->  false . */\n+(for eqne (eq ne)\n+ (simplify\n+  (bit_and:c (gt:c@2 @0 @1) (eqne @0 min_value))\n+   (switch\n+    (if (eqne == EQ_EXPR)\n+     { constant_boolean_node (false, type); })\n+    (if (eqne == NE_EXPR)\n+     @2)\n+    )))\n+\n+/* x <  y  &&  x != XXX_MAX  -->  x < y\n+   x <  y  &&  x == XXX_MAX  -->  false.  */\n+(for eqne (eq ne)\n+ (simplify\n+  (bit_and:c (lt:c@2 @0 @1) (eqne @0 max_value))\n+   (switch\n+    (if (eqne == EQ_EXPR)\n+     { constant_boolean_node (false, type); })\n+    (if (eqne == NE_EXPR)\n+     @2)\n+    )))\n+\n+/* x <=  y  &&  x == XXX_MIN  -->  x == XXX_MIN.  */\n+(simplify\n+ (bit_and:c (le:c @0 @1) (eq@2 @0 min_value))\n+  @2)\n+\n+/* x >=  y  &&  x == XXX_MAX  -->  x == XXX_MAX.  */\n+(simplify\n+ (bit_and:c (ge:c @0 @1) (eq@2 @0 max_value))\n+  @2)\n+\n+/* x >  y  ||  x != XXX_MIN   -->  x != XXX_MIN.  */\n+(simplify\n+ (bit_ior:c (gt:c @0 @1) (ne@2 @0 min_value))\n+  @2)\n+\n+/* x <=  y  ||  x != XXX_MIN   -->  true.  */\n+(simplify\n+ (bit_ior:c (le:c @0 @1) (ne @0 min_value))\n+  { constant_boolean_node (true, type); })\n+\n+/* x <=  y  ||  x == XXX_MIN   -->  x <= y.  */\n+(simplify\n+ (bit_ior:c (le:c@2 @0 @1) (eq @0 min_value))\n+  @2)\n+\n+/* x <  y  ||  x != XXX_MAX   -->  x != XXX_MAX.  */\n+(simplify\n+ (bit_ior:c (lt:c @0 @1) (ne@2 @0 max_value))\n+  @2)\n+\n+/* x >=  y  ||  x != XXX_MAX   -->  true\n+   x >=  y  ||  x == XXX_MAX   -->  x >= y.  */\n+(for eqne (eq ne)\n+ (simplify\n+  (bit_ior:c (ge:c@2 @0 @1) (eqne @0 max_value))\n+   (switch\n+    (if (eqne == EQ_EXPR)\n+     @2)\n+    (if (eqne == NE_EXPR)\n+     { constant_boolean_node (true, type); }))))\n \n /* We can't reassociate at all for saturating types.  */\n (if (!TYPE_SATURATING (type))\n@@ -5425,10 +5499,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    on c, so could drop potentially-trapping arithmetic, but that's a valid\n    simplification if the result of the operation isn't needed.\n \n-   Avoid speculatively generating a stand-alone vector comparison                                                                                \n-   on targets that might not support them.  Any target implementing                                                                              \n-   conditional internal functions must support the same comparisons                                                                              \n-   inside and outside a VEC_COND_EXPR.  */                                                                                                       \n+   Avoid speculatively generating a stand-alone vector comparison\n+   on targets that might not support them.  Any target implementing\n+   conditional internal functions must support the same comparisons\n+   inside and outside a VEC_COND_EXPR.  */\n \n #if GIMPLE\n (for uncond_op (UNCOND_BINARY)"}, {"sha": "7b9d0d05089f18077fa0b9cb78503de52e7e67a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -1,3 +1,20 @@\n+2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n+\t    Qi Feng  <ffengqi@linux.ibm.com>\n+\n+\tPR middle-end/88784\n+\t* gcc.dg/pr88784-1.c: New testcase.\n+\t* gcc.dg/pr88784-2.c: New testcase.\n+\t* gcc.dg/pr88784-3.c: New testcase.\n+\t* gcc.dg/pr88784-4.c: New testcase.\n+\t* gcc.dg/pr88784-5.c: New testcase.\n+\t* gcc.dg/pr88784-6.c: New testcase.\n+\t* gcc.dg/pr88784-7.c: New testcase.\n+\t* gcc.dg/pr88784-8.c: New testcase.\n+\t* gcc.dg/pr88784-9.c: New testcase.\n+\t* gcc.dg/pr88784-10.c: New testcase.\n+\t* gcc.dg/pr88784-11.c: New testcase.\n+\t* gcc.dg/pr88784-12.c: New testcase.\n+\n 2019-09-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91756"}, {"sha": "b8daae0b330651df6ea1a44008bb7c2fe647984e", "filename": "gcc/testsuite/gcc.dg/pr88784-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-1.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x > y && x != 0 --> x > y */\n+  return x > y && x != 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x < y && x != UINT_MAX --> x < y */\n+  return x < y && x != UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x > y && x != INT_MIN --> x > y */\n+  return x > y && x != INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x < y && x != INT_MAX --> x < y */\n+  return x < y && x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" != \" \"ifcombine\" } } */"}, {"sha": "958d7656556a62cbbc3ebd6c59078fca65536ebf", "filename": "gcc/testsuite/gcc.dg/pr88784-10.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-10.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x <= y || x != 0 --> true */\n+  return x <= y || x != 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x >= y || x != UINT_MAX --> true */\n+  return x >= y || x != UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x <= y || x != INT_MIN --> true */\n+  return x <= y || x != INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x >= y || x != INT_MAX --> true */\n+  return x >= y || x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" != \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" <= \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" >= \" \"optimized\" } } */"}, {"sha": "c4b0508244365066f1c5b54b3aeb837da95e89c0", "filename": "gcc/testsuite/gcc.dg/pr88784-11.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-11.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x <= y || x == 0 --> x <= y */\n+  return x <= y || x == 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x >= y || x == UINT_MAX --> x >= y */\n+  return x >= y || x == UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x <= y || x == INT_MIN --> x <= y */\n+  return x <= y || x == INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x >= y || x == INT_MAX --> x >= y */\n+  return x >= y || x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" == \" \"ifcombine\" } } */"}, {"sha": "5b60b3883f00131aa2c5ac5958ab93053a4a15df", "filename": "gcc/testsuite/gcc.dg/pr88784-12.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-12.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dce3\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x <= y || x == 0 --> x <= y */\n+  return x <= y || x == 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x >= y || x == UINT_MAX --> x >= y */\n+  return x >= y || x == UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x <= y || x == INT_MIN --> x <= y */\n+  return x <= y || x == INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x >= y || x == INT_MAX --> x >= y */\n+  return x >= y || x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" == \" \"dce3\" } } */"}, {"sha": "ed360018b0febca26bbd94662ce4cecd80531437", "filename": "gcc/testsuite/gcc.dg/pr88784-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-2.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x > y && x != 0 --> x > y */\n+  return x > y && x != 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x < y && x != UINT_MAX --> x < y */\n+  return x < y && x != UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x > y && x != INT_MIN --> x > y */\n+  return x > y && x != INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x < y && x != INT_MAX --> x < y */\n+  return x < y && x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" != \" \"optimized\" } } */"}, {"sha": "8c48e1b894352e4c7e03b28088f33be5b625b355", "filename": "gcc/testsuite/gcc.dg/pr88784-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-3.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x > y && x == 0 --> false */\n+  return x > y && x == 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x < y && x == UINT_MAX --> false */\n+  return x < y && x == UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x > y && x == INT_MIN --> false */\n+  return x > y && x == INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x < y && x == INT_MAX --> false */\n+  return x < y && x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" == \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" > \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" < \" \"ifcombine\" } } */"}, {"sha": "a9aa74cb9c3fc97be5ac2998b74cfa05c0f783f4", "filename": "gcc/testsuite/gcc.dg/pr88784-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-4.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x > y && x == 0 --> false */\n+  return x > y && x == 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x < y && x == UINT_MAX --> false */\n+  return x < y && x == UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x > y && x == INT_MIN --> false */\n+  return x > y && x == INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x < y && x == INT_MAX --> false */\n+  return x < y && x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" == \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" > \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" < \" \"optimized\" } } */"}, {"sha": "b147abbcfaf371f91344dcbd7e6fbeefb55bd4bc", "filename": "gcc/testsuite/gcc.dg/pr88784-5.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-5.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x <= y && x == 0 --> x == 0 */\n+  return x <= y && x == 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x >= y && x == UINT_MAX --> x == UINT_MAX */\n+  return x >= y && x == UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x <= y && x == INT_MIN --> x == INT_MIN */\n+  return x <= y && x == INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x >= y && x == INT_MAX --> x == INT_MAX */\n+  return x >= y && x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" <= \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" >= \" \"ifcombine\" } } */"}, {"sha": "6d5bd7b0c74125d787e838e8ab694d36be977592", "filename": "gcc/testsuite/gcc.dg/pr88784-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-6.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include <limits.h>\n+\n+_Bool and1(unsigned x, unsigned y)\n+{\n+  /* x <= y && x == 0 --> x == 0 */\n+  return x <= y && x == 0;\n+}\n+\n+_Bool and2(unsigned x, unsigned y)\n+{\n+  /* x >= y && x == UINT_MAX --> x == UINT_MAX */\n+  return x >= y && x == UINT_MAX;\n+}\n+\n+_Bool and3(signed x, signed y)\n+{\n+  /* x <= y && x == INT_MIN --> x == INT_MIN */\n+  return x <= y && x == INT_MIN;\n+}\n+\n+_Bool and4(signed x, signed y)\n+{\n+  /* x >= y && x == INT_MAX --> x == INT_MAX */\n+  return x >= y && x == INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" <= \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" >= \" \"optimized\" } } */"}, {"sha": "6577ff9e14d7138d8c565e801ec8a30001a2f373", "filename": "gcc/testsuite/gcc.dg/pr88784-7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-7.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x > y || x != 0 --> x != 0 */\n+  return x > y || x != 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x < y || x != UINT_MAX --> x != UINT_MAX */\n+  return x < y || x != UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x > y || x != INT_MIN --> x != INT_MIN */\n+  return x > y || x != INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x < y || x != INT_MAX --> x != INT_MAX */\n+  return x < y || x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" > \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" < \" \"ifcombine\" } } */"}, {"sha": "6bb56a91561a57ffa27c6f957f4776d92828c761", "filename": "gcc/testsuite/gcc.dg/pr88784-8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-8.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x > y || x != 0 --> x != 0 */\n+  return x > y || x != 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x < y || x != UINT_MAX --> x != UINT_MAX */\n+  return x < y || x != UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x > y || x != INT_MIN --> x != INT_MIN */\n+  return x > y || x != INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x < y || x != INT_MAX --> x != INT_MAX */\n+  return x < y || x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" > \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" < \" \"optimized\" } } */"}, {"sha": "27e3281c555bec059ffc05cdbca889d3592e79b5", "filename": "gcc/testsuite/gcc.dg/pr88784-9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16504f6eabad7e173e4fbcfacf52820fffcb9ec/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88784-9.c?ref=c16504f6eabad7e173e4fbcfacf52820fffcb9ec", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ifcombine\" } */\n+\n+#include <limits.h>\n+\n+_Bool or1(unsigned x, unsigned y)\n+{\n+  /* x <= y || x != 0 --> true */\n+  return x <= y || x != 0;\n+}\n+\n+_Bool or2(unsigned x, unsigned y)\n+{\n+  /* x >= y || x != UINT_MAX --> true */\n+  return x >= y || x != UINT_MAX;\n+}\n+\n+_Bool or3(signed x, signed y)\n+{\n+  /* x <= y || x != INT_MIN --> true */\n+  return x <= y || x != INT_MIN;\n+}\n+\n+_Bool or4(signed x, signed y)\n+{\n+  /* x >= y || x != INT_MAX --> true */\n+  return x >= y || x != INT_MAX;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" != \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" <= \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \" >= \" \"ifcombine\" } } */"}]}