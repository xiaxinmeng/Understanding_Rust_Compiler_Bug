{"sha": "0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwNmRjY2RhNWM5YWRmYWY2NWUxMzJmZGE1YjhjMGZiYzVjZTFkNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:01:49Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:01:49Z"}, "message": "[arm] Perform early splitting of adddi3.\n\nThis patch causes the expansion of adddi3 to split the operation\nimmediately for Arm and Thumb-2.  This is desirable as it frees up the\nregister allocator to pick what ever combination of registers suits\nbest and reduces the number of auxiliary patterns that we need in the\nback-end.  Three of the testcases that we disabled earlier are already\nfixed by this patch.  Finally, we add a new pattern to match the\ncanonicalization of add-with-carry when using an immediate of zero.\n\ngcc:\n\t* config/arm/arm-protos.h (arm_decompose_di_binop): New prototype.\n\t* config/arm/arm.c (arm_decompose_di_binop): New function.\n\t* config/arm/arm.md (adddi3): Also accept any const_int for op2.\n\tIf not generating Thumb-1 code, decompose the operation into 32-bit\n\tpieces.\n\t* add0si_carryin_<optab>: New pattern.\n\ntestsuite:\n\t* gcc.target/arm/pr53447-1.c: Remove XFAIL.\n\t* gcc.target/arm/pr53447-3.c: Remove XFAIL.\n\t* gcc.target/arm/pr53447-4.c: Remove XFAIL.\n\nFrom-SVN: r277165", "tree": {"sha": "c5af2c341d3df8179000e0ece11be36b74e123c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5af2c341d3df8179000e0ece11be36b74e123c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/comments", "author": null, "committer": null, "parents": [{"sha": "1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1769e3f3ac65d8d59bd8cc73aebd93af588388d2"}], "stats": {"total": 110, "additions": 91, "deletions": 19}, "files": [{"sha": "a4acdccc770f1ecb29933f0db73474e4493c8357", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -1,3 +1,12 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_decompose_di_binop): New prototype.\n+\t* config/arm/arm.c (arm_decompose_di_binop): New function.\n+\t* config/arm/arm.md (adddi3): Also accept any const_int for op2.\n+\tIf not generating Thumb-1 code, decompose the operation into 32-bit\n+\tpieces.\n+\t* add0si_carryin_<optab>: New pattern.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (adddi3): Only accept register operands."}, {"sha": "c685bcbf99c81210a34192cc31db055fa7b2d605", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -57,6 +57,7 @@ extern rtx arm_simd_vect_par_cnst_half (machine_mode mode, bool high);\n extern bool arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n \t\t\t\t\t\t bool high);\n extern void arm_emit_speculation_barrier_function (void);\n+extern void arm_decompose_di_binop (rtx, rtx, rtx *, rtx *, rtx *, rtx *);\n \n #ifdef RTX_CODE\n extern void arm_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,"}, {"sha": "f26945dbcf00e5e82774e441cdc2bf34a8e3364c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -14933,6 +14933,21 @@ gen_cpymem_ldrd_strd (rtx *operands)\n   return true;\n }\n \n+/* Decompose operands for a 64-bit binary operation in OP1 and OP2\n+   into its component 32-bit subregs.  OP2 may be an immediate\n+   constant and we want to simplify it in that case.  */\n+void\n+arm_decompose_di_binop (rtx op1, rtx op2, rtx *lo_op1, rtx *hi_op1,\n+\t\t\trtx *lo_op2, rtx *hi_op2)\n+{\n+  *lo_op1 = gen_lowpart (SImode, op1);\n+  *hi_op1 = gen_highpart (SImode, op1);\n+  *lo_op2 = simplify_gen_subreg (SImode, op2, DImode,\n+\t\t\t\t subreg_lowpart_offset (SImode, DImode));\n+  *hi_op2 = simplify_gen_subreg (SImode, op2, DImode,\n+\t\t\t\t subreg_highpart_offset (SImode, DImode));\n+}\n+\n /* Select a dominance comparison mode if possible for a test of the general\n    form (OP (COND_OR (X) (Y)) (const_int 0)).  We support three forms.\n    COND_OR == DOM_CC_X_AND_Y => (X && Y)"}, {"sha": "5ba42a13430baf8550e2d2c9d780a3d2f10140a2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -437,25 +437,53 @@\n  [(parallel\n    [(set (match_operand:DI           0 \"s_register_operand\")\n \t  (plus:DI (match_operand:DI 1 \"s_register_operand\")\n-\t           (match_operand:DI 2 \"s_register_operand\")))\n+\t\t   (match_operand:DI 2 \"reg_or_int_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n-  if (TARGET_THUMB1 && !REG_P (operands[2]))\n-    operands[2] = force_reg (DImode, operands[2]);\n-  \"\n-)\n+  if (TARGET_THUMB1)\n+    {\n+      if (!REG_P (operands[2]))\n+\toperands[2] = force_reg (DImode, operands[2]);\n+    }\n+  else\n+    {\n+      rtx lo_result, hi_result, lo_dest, hi_dest;\n+      rtx lo_op1, hi_op1, lo_op2, hi_op2;\n+      arm_decompose_di_binop (operands[1], operands[2], &lo_op1, &hi_op1,\n+\t\t\t      &lo_op2, &hi_op2);\n+      lo_result = lo_dest = gen_lowpart (SImode, operands[0]);\n+      hi_result = hi_dest = gen_highpart (SImode, operands[0]);\n+\n+      if (lo_op2 == const0_rtx)\n+\t{\n+\t  lo_dest = lo_op1;\n+\t  if (!arm_add_operand (hi_op2, SImode))\n+\t    hi_op2 = force_reg (SImode, hi_op2);\n+\t  /* Assume hi_op2 won't also be zero.  */\n+\t  emit_insn (gen_addsi3 (hi_dest, hi_op1, hi_op2));\n+\t}\n+      else\n+\t{\n+\t  if (!arm_add_operand (lo_op2, SImode))\n+\t    lo_op2 = force_reg (SImode, lo_op2);\n+\t  if (!arm_not_operand (hi_op2, SImode))\n+\t    hi_op2 = force_reg (SImode, hi_op2);\n+\n+\t  emit_insn (gen_addsi3_compareC (lo_dest, lo_op1, lo_op2));\n+\t  if (hi_op2 == const0_rtx)\n+\t    emit_insn (gen_add0si3_carryin_ltu (hi_dest, hi_op1));\n+\t  else\n+\t    emit_insn (gen_addsi3_carryin_ltu (hi_dest, hi_op1, hi_op2));\n+\t}\n \n-(define_insn \"*arm_adddi3\"\n-  [(set (match_operand:DI 0 \"s_register_operand\"  \"=&r,&r,&r\")\n-\t(plus:DI (match_operand:DI 1 \"s_register_operand\" \" %0,0,r\")\n-\t\t (match_operand:DI 2 \"s_register_operand\" \" r,0,r\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"adds\\\\t%Q0, %Q1, %Q2;adc\\\\t%R0, %R1, %R2\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n+      if (lo_result != lo_dest)\n+\temit_move_insn (lo_result, lo_dest);\n+      if (hi_result != hi_dest)\n+\temit_move_insn (gen_highpart (SImode, operands[0]), hi_dest);\n+      DONE;\n+    }\n+  \"\n )\n \n (define_expand \"addv<mode>4\"\n@@ -830,7 +858,7 @@\n    (set_attr \"type\" \"alus_imm,alus_sreg,alus_imm,alus_imm,alus_sreg\")]\n  )\n \n-(define_insn \"*addsi3_carryin_<optab>\"\n+(define_insn \"addsi3_carryin_<optab>\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n         (plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%l,r,r\")\n                           (match_operand:SI 2 \"arm_not_operand\" \"0,rI,K\"))\n@@ -848,6 +876,19 @@\n    (set_attr \"type\" \"adc_reg,adc_reg,adc_imm\")]\n )\n \n+;; Canonicalization of the above when the immediate is zero.\n+(define_insn \"add0si3_carryin_<optab>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n+\t\t (match_operand:SI 1 \"arm_not_operand\" \"r\")))]\n+  \"TARGET_32BIT\"\n+  \"adc%?\\\\t%0, %1, #0\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"adc_imm\")]\n+)\n+\n (define_insn \"*addsi3_carryin_alt2_<optab>\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n         (plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))"}, {"sha": "ae9d216e1e3d88345400a1fb22a22c7b9e979467", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -1,3 +1,9 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/pr53447-1.c: Remove XFAIL.\n+\t* gcc.target/arm/pr53447-3.c: Remove XFAIL.\n+\t* gcc.target/arm/pr53447-4.c: Remove XFAIL.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.target/arm/negdi-3.c: Add XFAILS."}, {"sha": "dc094180c85092febd18be7eef2887e6f1d7640f", "filename": "gcc/testsuite/gcc.target/arm/pr53447-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n \n void t0p(long long * p)\n {"}, {"sha": "8e48f119b748244a4032a9ab39fcae022d7527e6", "filename": "gcc/testsuite/gcc.target/arm/pr53447-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n \n \n void t0p(long long * p)"}, {"sha": "22acb97270e2eec424be5cd6a82ee65bca07f72e", "filename": "gcc/testsuite/gcc.target/arm/pr53447-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c?ref=0406dccda5c9adfaf65e132fda5b8c0fbc5ce1d5", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n \n \n void t0p(long long * p)"}]}