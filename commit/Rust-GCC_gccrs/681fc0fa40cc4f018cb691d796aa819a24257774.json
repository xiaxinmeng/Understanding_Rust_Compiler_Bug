{"sha": "681fc0fa40cc4f018cb691d796aa819a24257774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxZmMwZmE0MGNjNGYwMThjYjY5MWQ3OTZhYTgxOWEyNDI1Nzc3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-21T12:56:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-21T12:56:50Z"}, "message": "Extend neg_const_int simplifications to other const rtxes\n\nThis patch generalises some neg_const_int-based rtx simplifications\nso that they handle all CONST_SCALAR_INTs and also CONST_POLY_INT.\nThis actually simplifies things a bit, since we no longer have\nto treat HOST_WIDE_INT_MIN specially.\n\nThis is tested by later SVE patches.\n\n2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* simplify-rtx.c (neg_const_int): Replace with...\n\t(neg_poly_int_rtx): ...this new function.\n\t(simplify_binary_operation_1): Extend (minus x C) -> (plus X -C)\n\tto all CONST_SCALAR_INTs and to CONST_POLY_INT.\n\t(simplify_plus_minus): Likewise for constant terms here.\n\nFrom-SVN: r276017", "tree": {"sha": "1a8c7cd272154e48ea4d73bc50268b21cd13050b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a8c7cd272154e48ea4d73bc50268b21cd13050b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681fc0fa40cc4f018cb691d796aa819a24257774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681fc0fa40cc4f018cb691d796aa819a24257774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681fc0fa40cc4f018cb691d796aa819a24257774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681fc0fa40cc4f018cb691d796aa819a24257774/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2addbf403fe60091ed4d2363cb36938b75b4892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2addbf403fe60091ed4d2363cb36938b75b4892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2addbf403fe60091ed4d2363cb36938b75b4892"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "ca23b27629c94c0faf370638c9e379af88207f02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681fc0fa40cc4f018cb691d796aa819a24257774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681fc0fa40cc4f018cb691d796aa819a24257774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=681fc0fa40cc4f018cb691d796aa819a24257774", "patch": "@@ -1,3 +1,11 @@\n+2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* simplify-rtx.c (neg_const_int): Replace with...\n+\t(neg_poly_int_rtx): ...this new function.\n+\t(simplify_binary_operation_1): Extend (minus x C) -> (plus X -C)\n+\tto all CONST_SCALAR_INTs and to CONST_POLY_INT.\n+\t(simplify_plus_minus): Likewise for constant terms here.\n+\n 2019-09-20  Jonas Pfeil  <jonas.pfeil@uli-ulm.de>\n \n \t* config/microblaze/microblaze.h (ASM_OUTPUT_SKIP): Use"}, {"sha": "9a70720c764300c5f6b5e04f2b03f028a1c2f033", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681fc0fa40cc4f018cb691d796aa819a24257774/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681fc0fa40cc4f018cb691d796aa819a24257774/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=681fc0fa40cc4f018cb691d796aa819a24257774", "patch": "@@ -46,7 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #define HWI_SIGN_EXTEND(low) \\\n   ((((HOST_WIDE_INT) low) < 0) ? HOST_WIDE_INT_M1 : HOST_WIDE_INT_0)\n \n-static rtx neg_const_int (machine_mode, const_rtx);\n static bool plus_minus_operand_p (const_rtx);\n static rtx simplify_plus_minus (enum rtx_code, machine_mode, rtx, rtx);\n static rtx simplify_associative_operation (enum rtx_code, machine_mode,\n@@ -57,17 +56,12 @@ static rtx simplify_unary_operation_1 (enum rtx_code, machine_mode, rtx);\n static rtx simplify_binary_operation_1 (enum rtx_code, machine_mode,\n \t\t\t\t\trtx, rtx, rtx, rtx);\n \f\n-/* Negate a CONST_INT rtx.  */\n+/* Negate I, which satisfies poly_int_rtx_p.  MODE is the mode of I.  */\n+\n static rtx\n-neg_const_int (machine_mode mode, const_rtx i)\n+neg_poly_int_rtx (machine_mode mode, const_rtx i)\n {\n-  unsigned HOST_WIDE_INT val = -UINTVAL (i);\n-  \n-  if (!HWI_COMPUTABLE_MODE_P (mode)\n-      && val == UINTVAL (i))\n-    return simplify_const_unary_operation (NEG, mode, CONST_CAST_RTX (i),\n-\t\t\t\t\t   mode);\n-  return gen_int_mode (val, mode);\n+  return immed_wide_int_const (-wi::to_poly_wide (i, mode), mode);\n }\n \n /* Test whether expression, X, is an immediate constant that represents\n@@ -2547,10 +2541,10 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \treturn plus_constant (mode, op0, trunc_int_for_mode (-offset, mode));\n \n       /* Don't let a relocatable value get a negative coeff.  */\n-      if (CONST_INT_P (op1) && GET_MODE (op0) != VOIDmode)\n+      if (poly_int_rtx_p (op1) && GET_MODE (op0) != VOIDmode)\n \treturn simplify_gen_binary (PLUS, mode,\n \t\t\t\t    op0,\n-\t\t\t\t    neg_const_int (mode, op1));\n+\t\t\t\t    neg_poly_int_rtx (mode, op1));\n \n       /* (x - (x & y)) -> (x & ~y) */\n       if (INTEGRAL_MODE_P (mode) && GET_CODE (op1) == AND)\n@@ -4619,11 +4613,12 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n \t\t}\n \t      break;\n \n-\t    case CONST_INT:\n+\t    CASE_CONST_SCALAR_INT:\n+\t    case CONST_POLY_INT:\n \t      n_constants++;\n \t      if (this_neg)\n \t\t{\n-\t\t  ops[i].op = neg_const_int (mode, this_op);\n+\t\t  ops[i].op = neg_poly_int_rtx (mode, this_op);\n \t\t  ops[i].neg = 0;\n \t\t  changed = 1;\n \t\t  canonicalized = 1;\n@@ -4748,8 +4743,8 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n \t\t    lneg &= rneg;\n \t\t    if (GET_CODE (tem) == NEG)\n \t\t      tem = XEXP (tem, 0), lneg = !lneg;\n-\t\t    if (CONST_INT_P (tem) && lneg)\n-\t\t      tem = neg_const_int (mode, tem), lneg = 0;\n+\t\t    if (poly_int_rtx_p (tem) && lneg)\n+\t\t      tem = neg_poly_int_rtx (mode, tem), lneg = 0;\n \n \t\t    ops[i].op = tem;\n \t\t    ops[i].neg = lneg;\n@@ -4808,12 +4803,12 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n      in the array and that any other constant will be next-to-last.  */\n \n   if (n_ops > 1\n-      && CONST_INT_P (ops[n_ops - 1].op)\n+      && poly_int_rtx_p (ops[n_ops - 1].op)\n       && CONSTANT_P (ops[n_ops - 2].op))\n     {\n       rtx value = ops[n_ops - 1].op;\n       if (ops[n_ops - 1].neg ^ ops[n_ops - 2].neg)\n-\tvalue = neg_const_int (mode, value);\n+\tvalue = neg_poly_int_rtx (mode, value);\n       if (CONST_INT_P (value))\n \t{\n \t  ops[n_ops - 2].op = plus_constant (mode, ops[n_ops - 2].op,"}]}