{"sha": "fca821b51c6cf7367d78251644e39ee370eb38c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhODIxYjUxYzZjZjczNjdkNzgyNTE2NDRlMzllZTM3MGViMzhjMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-02T12:28:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-02T12:28:54Z"}, "message": "tree-ssa-structalias.c (find_func_aliases): Handle pointer alignment via BIT_AND_EXPR.\n\n2010-07-02  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (find_func_aliases): Handle\n\tpointer alignment via BIT_AND_EXPR.\n\t* tree-vrp.c (extract_range_from_binary_expr): Likewise.\n\nFrom-SVN: r161707", "tree": {"sha": "6bb5539ceb91a17458bf33d67d2ef2edaf93e5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bb5539ceb91a17458bf33d67d2ef2edaf93e5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca821b51c6cf7367d78251644e39ee370eb38c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca821b51c6cf7367d78251644e39ee370eb38c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca821b51c6cf7367d78251644e39ee370eb38c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca821b51c6cf7367d78251644e39ee370eb38c3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8198d5418158d397b73f13aa709d29b209761417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8198d5418158d397b73f13aa709d29b209761417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8198d5418158d397b73f13aa709d29b209761417"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "5fd429843f7ab14a868412d4336997ebc50db095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca821b51c6cf7367d78251644e39ee370eb38c3", "patch": "@@ -1,3 +1,9 @@\n+2010-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (find_func_aliases): Handle\n+\tpointer alignment via BIT_AND_EXPR.\n+\t* tree-vrp.c (extract_range_from_binary_expr): Likewise.\n+\n 2010-07-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-data-ref.c (initialize_data_dependence_relation): Handle"}, {"sha": "b0efcfa3473ae2987b24c8bcf3fe7ef317fbe27c", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=fca821b51c6cf7367d78251644e39ee370eb38c3", "patch": "@@ -4395,6 +4395,14 @@ find_func_aliases (gimple origt)\n \t  if (gimple_assign_rhs_code (t) == POINTER_PLUS_EXPR)\n \t    get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n \t\t\t\t\t   gimple_assign_rhs2 (t), &rhsc);\n+\t  else if (gimple_assign_rhs_code (t) == BIT_AND_EXPR\n+\t\t   && TREE_CODE (gimple_assign_rhs2 (t)) == INTEGER_CST)\n+\t    {\n+\t      /* Aligning a pointer via a BIT_AND_EXPR is offsetting\n+\t\t the pointer.  Handle it by offsetting it by UNKNOWN.  */\n+\t      get_constraint_for_ptr_offset (gimple_assign_rhs1 (t),\n+\t\t\t\t\t     NULL_TREE, &rhsc);\n+\t    }\n \t  else if ((CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (t))\n \t\t    && !(POINTER_TYPE_P (gimple_expr_type (t))\n \t\t\t && !POINTER_TYPE_P (TREE_TYPE (rhsop))))"}, {"sha": "74b3a7ac1990906a0eeb71aca8ed67c3e1634fc0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca821b51c6cf7367d78251644e39ee370eb38c3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fca821b51c6cf7367d78251644e39ee370eb38c3", "patch": "@@ -2188,15 +2188,30 @@ extract_range_from_binary_expr (value_range_t *vr,\n \n \t  return;\n \t}\n-      gcc_assert (code == POINTER_PLUS_EXPR);\n-      /* For pointer types, we are really only interested in asserting\n-\t whether the expression evaluates to non-NULL.  */\n-      if (range_is_nonnull (&vr0) || range_is_nonnull (&vr1))\n-\tset_value_range_to_nonnull (vr, expr_type);\n-      else if (range_is_null (&vr0) && range_is_null (&vr1))\n-\tset_value_range_to_null (vr, expr_type);\n+      if (code == POINTER_PLUS_EXPR)\n+\t{\n+\t  /* For pointer types, we are really only interested in asserting\n+\t     whether the expression evaluates to non-NULL.  */\n+\t  if (range_is_nonnull (&vr0) || range_is_nonnull (&vr1))\n+\t    set_value_range_to_nonnull (vr, expr_type);\n+\t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n+\t    set_value_range_to_null (vr, expr_type);\n+\t  else\n+\t    set_value_range_to_varying (vr);\n+\t}\n+      else if (code == BIT_AND_EXPR)\n+\t{\n+\t  /* For pointer types, we are really only interested in asserting\n+\t     whether the expression evaluates to non-NULL.  */\n+\t  if (range_is_nonnull (&vr0) && range_is_nonnull (&vr1))\n+\t    set_value_range_to_nonnull (vr, expr_type);\n+\t  else if (range_is_null (&vr0) || range_is_null (&vr1))\n+\t    set_value_range_to_null (vr, expr_type);\n+\t  else\n+\t    set_value_range_to_varying (vr);\n+\t}\n       else\n-\tset_value_range_to_varying (vr);\n+\tgcc_unreachable ();\n \n       return;\n     }"}]}