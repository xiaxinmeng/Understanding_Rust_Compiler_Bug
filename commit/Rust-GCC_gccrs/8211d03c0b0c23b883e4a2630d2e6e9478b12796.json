{"sha": "8211d03c0b0c23b883e4a2630d2e6e9478b12796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxMWQwM2MwYjBjMjNiODgzZTRhMjYzMGQyZTZlOTQ3OGIxMjc5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-23T00:40:29Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-23T00:40:29Z"}, "message": "Don't crash asking for type of invalid const.\n\nFrom-SVN: r168194", "tree": {"sha": "01e987903d1b8ae9a585b8ccecdc4e1d5dd59cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01e987903d1b8ae9a585b8ccecdc4e1d5dd59cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8211d03c0b0c23b883e4a2630d2e6e9478b12796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8211d03c0b0c23b883e4a2630d2e6e9478b12796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8211d03c0b0c23b883e4a2630d2e6e9478b12796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8211d03c0b0c23b883e4a2630d2e6e9478b12796/comments", "author": null, "committer": null, "parents": [{"sha": "bf0a2edc320dce72dff5a65ed43ae103e95a18bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0a2edc320dce72dff5a65ed43ae103e95a18bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0a2edc320dce72dff5a65ed43ae103e95a18bb"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "23f6e2ba47e5856f9cf6c1e291d6624dddf2f9a9", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8211d03c0b0c23b883e4a2630d2e6e9478b12796/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8211d03c0b0c23b883e4a2630d2e6e9478b12796/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8211d03c0b0c23b883e4a2630d2e6e9478b12796", "patch": "@@ -894,6 +894,19 @@ Expression::make_type(Type* type, source_location location)\n   return new Type_expression(type, location);\n }\n \n+// Class Parser_expression.\n+\n+Type*\n+Parser_expression::do_type()\n+{\n+  // We should never really ask for the type of a Parser_expression.\n+  // However, it can happen, at least when we have an invalid const\n+  // whose initializer refers to the const itself.  In that case we\n+  // may ask for the type when lowering the const itself.\n+  gcc_assert(saw_errors());\n+  return Type::make_error_type();\n+}\n+\n // Class Var_expression.\n \n // Lower a variable expression.  Here we just make sure that the"}, {"sha": "fe4ade2c99d9a993378b77c51543d1b6042b4c35", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8211d03c0b0c23b883e4a2630d2e6e9478b12796/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8211d03c0b0c23b883e4a2630d2e6e9478b12796/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=8211d03c0b0c23b883e4a2630d2e6e9478b12796", "patch": "@@ -873,8 +873,7 @@ class Parser_expression : public Expression\n   do_lower(Gogo*, Named_object*, int) = 0;\n \n   Type*\n-  do_type()\n-  { gcc_unreachable(); }\n+  do_type();\n \n   void\n   do_determine_type(const Type_context*)"}]}