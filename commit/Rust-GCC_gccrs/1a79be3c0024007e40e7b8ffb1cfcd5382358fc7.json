{"sha": "1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3OWJlM2MwMDI0MDA3ZTQwZTdiOGZmYjFjZmNkNTM4MjM1OGZjNw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-07-04T13:25:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:25:47Z"}, "message": "2005-07-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-expect-vms.adb, g-expect.ads, g-expect.adb\n\t(Get_Command_Output): New subprogram to launch a process and get its\n\tstandard output as a string.\n\nFrom-SVN: r101571", "tree": {"sha": "3472e464f86f39a9585e53bad9acf1de5b6409c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3472e464f86f39a9585e53bad9acf1de5b6409c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/comments", "author": null, "committer": null, "parents": [{"sha": "fc64d83c6f8850a74d45bfcea1458eca80f4182c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc64d83c6f8850a74d45bfcea1458eca80f4182c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc64d83c6f8850a74d45bfcea1458eca80f4182c"}], "stats": {"total": 222, "additions": 201, "deletions": 21}, "files": [{"sha": "cbf8c724302d5e0db95e3950ea9e9abaa6a93681", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "patch": "@@ -761,6 +761,89 @@ package body GNAT.Expect is\n \n    end Flush;\n \n+   ------------------------\n+   -- Get_Command_Output --\n+   ------------------------\n+\n+   function Get_Command_Output\n+     (Command    : String;\n+      Arguments  : GNAT.OS_Lib.Argument_List;\n+      Input      : String;\n+      Status     : access Integer;\n+      Err_To_Out : Boolean := False) return String\n+   is\n+      use GNAT.Expect;\n+\n+      Process : Process_Descriptor;\n+\n+      Output : String_Access := new String (1 .. 1024);\n+      --  Buffer used to accumulate standard output from the launched\n+      --  command, expanded as necessary during execution.\n+\n+      Last : Integer := 0;\n+      --  Index of the last used character within Output\n+\n+   begin\n+      Non_Blocking_Spawn\n+        (Process, Command, Arguments, Err_To_Out => Err_To_Out);\n+\n+      if Input'Length > 0 then\n+         Send (Process, Input);\n+      end if;\n+\n+      GNAT.OS_Lib.Close (Get_Input_Fd (Process));\n+\n+      declare\n+         Result : Expect_Match;\n+\n+      begin\n+         --  This loop runs until the call to Expect raises Process_Died\n+\n+         loop\n+            Expect (Process, Result, \".+\");\n+\n+            declare\n+               NOutput : String_Access;\n+               S       : constant String := Expect_Out (Process);\n+               pragma Assert (S'Length > 0);\n+\n+            begin\n+               --  Expand buffer if we need more space\n+\n+               if Last + S'Length > Output'Last then\n+                  NOutput := new String (1 .. 2 * Output'Last);\n+                  NOutput (Output'Range) := Output.all;\n+                  Free (Output);\n+\n+                  --  Here if current buffer size is OK\n+\n+               else\n+                  NOutput := Output;\n+               end if;\n+\n+               NOutput (Last + 1 .. Last + S'Length) := S;\n+               Last := Last + S'Length;\n+               Output := NOutput;\n+            end;\n+         end loop;\n+\n+      exception\n+         when Process_Died =>\n+            Close (Process, Status.all);\n+      end;\n+\n+      if Last = 0 then\n+         return \"\";\n+      end if;\n+\n+      declare\n+         S : constant String := Output (1 .. Last);\n+      begin\n+         Free (Output);\n+         return S;\n+      end;\n+   end Get_Command_Output;\n+\n    ------------------\n    -- Get_Error_Fd --\n    ------------------"}, {"sha": "6f0f7cff29fd317ddd86863cc9d682edc3b1dc1a", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "patch": "@@ -108,7 +108,7 @@ package body GNAT.Expect is\n \n    function Waitpid (Pid : Process_Id) return Integer;\n    pragma Import (C, Waitpid, \"__gnat_waitpid\");\n-   --  Wait for a specific process id, and return its exit code.\n+   --  Wait for a specific process id, and return its exit code\n \n    ---------\n    -- \"+\" --\n@@ -656,7 +656,7 @@ package body GNAT.Expect is\n                                    Descriptors (J).Buffer_Size - N;\n                               end if;\n \n-                              --  Keep what we read in the buffer.\n+                              --  Keep what we read in the buffer\n \n                               Descriptors (J).Buffer\n                                 (Descriptors (J).Buffer_Index + 1 ..\n@@ -754,9 +754,91 @@ package body GNAT.Expect is\n                end if;\n          end case;\n       end loop;\n-\n    end Flush;\n \n+   ------------------------\n+   -- Get_Command_Output --\n+   ------------------------\n+\n+   function Get_Command_Output\n+     (Command    : String;\n+      Arguments  : GNAT.OS_Lib.Argument_List;\n+      Input      : String;\n+      Status     : access Integer;\n+      Err_To_Out : Boolean := False) return String\n+   is\n+      use GNAT.Expect;\n+\n+      Process : Process_Descriptor;\n+\n+      Output : String_Access := new String (1 .. 1024);\n+      --  Buffer used to accumulate standard output from the launched\n+      --  command, expanded as necessary during execution.\n+\n+      Last : Integer := 0;\n+      --  Index of the last used character within Output\n+\n+   begin\n+      Non_Blocking_Spawn\n+        (Process, Command, Arguments, Err_To_Out => Err_To_Out);\n+\n+      if Input'Length > 0 then\n+         Send (Process, Input);\n+      end if;\n+\n+      GNAT.OS_Lib.Close (Get_Input_Fd (Process));\n+\n+      declare\n+         Result : Expect_Match;\n+\n+      begin\n+         --  This loop runs until the call to Expect raises Process_Died\n+\n+         loop\n+            Expect (Process, Result, \".+\");\n+\n+            declare\n+               NOutput : String_Access;\n+               S       : constant String := Expect_Out (Process);\n+               pragma Assert (S'Length > 0);\n+\n+            begin\n+               --  Expand buffer if we need more space\n+\n+               if Last + S'Length > Output'Last then\n+                  NOutput := new String (1 .. 2 * Output'Last);\n+                  NOutput (Output'Range) := Output.all;\n+                  Free (Output);\n+\n+                  --  Here if current buffer size is OK\n+\n+               else\n+                  NOutput := Output;\n+               end if;\n+\n+               NOutput (Last + 1 .. Last + S'Length) := S;\n+               Last := Last + S'Length;\n+               Output := NOutput;\n+            end;\n+         end loop;\n+\n+      exception\n+         when Process_Died =>\n+            Close (Process, Status.all);\n+      end;\n+\n+      if Last = 0 then\n+         return \"\";\n+      end if;\n+\n+      declare\n+         S : constant String := Output (1 .. Last);\n+      begin\n+         Free (Output);\n+         return S;\n+      end;\n+   end Get_Command_Output;\n+\n    ------------------\n    -- Get_Error_Fd --\n    ------------------\n@@ -1012,7 +1094,7 @@ package body GNAT.Expect is\n    begin\n       if Empty_Buffer then\n \n-         --  Force a read on the process if there is anything waiting.\n+         --  Force a read on the process if there is anything waiting\n \n          Expect_Internal (Descriptors, Result,\n                           Timeout => 0, Full_Buffer => False);\n@@ -1047,7 +1129,7 @@ package body GNAT.Expect is\n    is\n    begin\n       Kill (Descriptor.Pid, Signal);\n-      --  ??? Need to check process status here.\n+      --  ??? Need to check process status here\n    end Send_Signal;\n \n    ---------------------------------"}, {"sha": "2a82e4dd2c50620908c0905fce1a31a6d18f10a3", "filename": "gcc/ada/g-expect.ads", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79be3c0024007e40e7b8ffb1cfcd5382358fc7/gcc%2Fada%2Fg-expect.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.ads?ref=1a79be3c0024007e40e7b8ffb1cfcd5382358fc7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2000-2004 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 2000-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,8 +35,9 @@\n --  for VMS. It is not yet implemented for any of the cross-ports (e.g. it\n --  is not available for VxWorks or LynxOS).\n \n---  Usage\n---  =====\n+--  -----------\n+--  -- Usage --\n+--  -----------\n \n --  This package provides a set of subprograms similar to what is available\n --  with the standard Tcl Expect tool.\n@@ -111,11 +112,14 @@\n --      Send (Fd, \"command\");\n --      Expect (Fd, Result, \"..\"); -- match only on the output of command\n \n---  Task Safety\n---  ===========\n+--  -----------------\n+--  -- Task Safety --\n+--  -----------------\n \n --  This package is not task-safe: there should be not concurrent calls to\n---  the functions defined in this package.\n+--  the functions defined in this package. In other words, separate tasks\n+--  may not access the facilities of this package without synchronization\n+--  that serializes access.\n \n with System;\n with GNAT.OS_Lib;\n@@ -195,7 +199,7 @@ package GNAT.Expect is\n    procedure Send_Signal\n      (Descriptor : Process_Descriptor;\n       Signal     : Integer);\n-   --  Send a given signal to the process.\n+   --  Send a given signal to the process\n \n    procedure Interrupt (Descriptor : in out Process_Descriptor);\n    --  Interrupt the process (the equivalent of Ctrl-C on unix and windows)\n@@ -204,22 +208,33 @@ package GNAT.Expect is\n    function Get_Input_Fd\n      (Descriptor : Process_Descriptor)\n       return       GNAT.OS_Lib.File_Descriptor;\n-   --  Return the input file descriptor associated with Descriptor.\n+   --  Return the input file descriptor associated with Descriptor\n \n    function Get_Output_Fd\n      (Descriptor : Process_Descriptor)\n       return       GNAT.OS_Lib.File_Descriptor;\n-   --  Return the output file descriptor associated with Descriptor.\n+   --  Return the output file descriptor associated with Descriptor\n \n    function Get_Error_Fd\n      (Descriptor : Process_Descriptor)\n       return       GNAT.OS_Lib.File_Descriptor;\n-   --  Return the error output file descriptor associated with Descriptor.\n+   --  Return the error output file descriptor associated with Descriptor\n \n    function Get_Pid\n      (Descriptor : Process_Descriptor)\n       return       Process_Id;\n-   --  Return the process id assocated with a given process descriptor.\n+   --  Return the process id assocated with a given process descriptor\n+\n+   function Get_Command_Output\n+     (Command    : String;\n+      Arguments  : GNAT.OS_Lib.Argument_List;\n+      Input      : String;\n+      Status     : access Integer;\n+      Err_To_Out : Boolean := False) return String;\n+   --  Execute Command with the specified Arguments and Input, and return the\n+   --  generated standard output data as a single string. If Err_To_Out is\n+   --  True, generated standard error output is included as well. On return,\n+   --  Status is set to the command's exit status.\n \n    --------------------\n    -- Adding filters --\n@@ -302,10 +317,10 @@ package GNAT.Expect is\n \n    type Expect_Match is new Integer;\n    Expect_Full_Buffer : constant Expect_Match := -1;\n-   --  If the buffer was full and some characters were discarded.\n+   --  If the buffer was full and some characters were discarded\n \n    Expect_Timeout : constant Expect_Match := -2;\n-   --  If not output matching the regexps was found before the timeout.\n+   --  If not output matching the regexps was found before the timeout\n \n    function \"+\" (S : String) return GNAT.OS_Lib.String_Access;\n    --  Allocate some memory for the string. This is merely a convenience\n@@ -380,7 +395,7 @@ package GNAT.Expect is\n       Matched     : out GNAT.Regpat.Match_Array;\n       Timeout     : Integer := 10000;\n       Full_Buffer : Boolean := False);\n-   --  Same as above, but with a precompiled regular expression.\n+   --  Same as above, but with a precompiled regular expression\n \n    -------------------------------------------------------------\n    -- Working on the output (single process, multiple regexp) --\n@@ -461,7 +476,7 @@ package GNAT.Expect is\n       Matched     : out GNAT.Regpat.Match_Array;\n       Timeout     : Integer := 10000;\n       Full_Buffer : Boolean := False);\n-   --  Same as above, but for multi processes.\n+   --  Same as above, but for multi processes\n \n    procedure Expect\n      (Result      : out Expect_Match;\n@@ -535,7 +550,7 @@ private\n    type Pipe_Type is record\n       Input, Output : GNAT.OS_Lib.File_Descriptor;\n    end record;\n-   --  This type represents a pipe, used to communicate between two processes.\n+   --  This type represents a pipe, used to communicate between two processes\n \n    procedure Set_Up_Communications\n      (Pid        : in out Process_Descriptor;"}]}