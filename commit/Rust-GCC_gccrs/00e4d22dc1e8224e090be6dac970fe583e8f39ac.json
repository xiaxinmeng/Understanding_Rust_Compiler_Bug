{"sha": "00e4d22dc1e8224e090be6dac970fe583e8f39ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlNGQyMmRjMWU4MjI0ZTA5MGJlNmRhYzk3MGZlNTgzZThmMzlhYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-12T14:45:35Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-12T14:45:35Z"}, "message": "Fix integer overflow in stats of trees.\n\n2018-01-12  Martin Liska  <mliska@suse.cz>\n\n\t* tree-core.h: Use uint64_t instead of int.\n\t* tree.c (tree_node_counts): Likewise.\n\t(tree_node_sizes): Likewise.\n\t(dump_tree_statistics): Use PRIu64 in printf format.\n\nFrom-SVN: r256583", "tree": {"sha": "9db60d2f28b5c758fb23d06837456a895c9a71cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db60d2f28b5c758fb23d06837456a895c9a71cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00e4d22dc1e8224e090be6dac970fe583e8f39ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e4d22dc1e8224e090be6dac970fe583e8f39ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e4d22dc1e8224e090be6dac970fe583e8f39ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e4d22dc1e8224e090be6dac970fe583e8f39ac/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b27b31dc2d160453e7b05168f1dd195e73cb176b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27b31dc2d160453e7b05168f1dd195e73cb176b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27b31dc2d160453e7b05168f1dd195e73cb176b"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "730e8edd02b0c23df96a788198aab38b0cc78103", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00e4d22dc1e8224e090be6dac970fe583e8f39ac", "patch": "@@ -1,3 +1,10 @@\n+2018-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-core.h: Use uint64_t instead of int.\n+\t* tree.c (tree_node_counts): Likewise.\n+\t(tree_node_sizes): Likewise.\n+\t(dump_tree_statistics): Use PRIu64 in printf format.\n+\n 2018-01-12  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: As qsort_chk is implemented in vec.c, add"}, {"sha": "478c631998cf17139081c65d81f179dfb982b67d", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=00e4d22dc1e8224e090be6dac970fe583e8f39ac", "patch": "@@ -2123,8 +2123,8 @@ extern GTY(()) tree integer_types[itk_none];\n extern GTY(()) tree sizetype_tab[(int) stk_type_kind_last];\n \n /* Arrays for keeping track of tree node statistics.  */\n-extern int tree_node_counts[];\n-extern int tree_node_sizes[];\n+extern uint64_t tree_node_counts[];\n+extern uint64_t tree_node_sizes[];\n \n /* True if we are in gimple form and the actions of the folders need to\n    be restricted.  False if we are not in gimple form and folding is not"}, {"sha": "c008a55804c1e342eb8e2c0c6658ef9e8a831d3b", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e4d22dc1e8224e090be6dac970fe583e8f39ac/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00e4d22dc1e8224e090be6dac970fe583e8f39ac", "patch": "@@ -129,9 +129,9 @@ extern int _obstack_allocated_p (struct obstack *h, void *obj);\n \n /* Statistics-gathering stuff.  */\n \n-static int tree_code_counts[MAX_TREE_CODES];\n-int tree_node_counts[(int) all_kinds];\n-int tree_node_sizes[(int) all_kinds];\n+static uint64_t tree_code_counts[MAX_TREE_CODES];\n+uint64_t tree_node_counts[(int) all_kinds];\n+uint64_t tree_node_sizes[(int) all_kinds];\n \n /* Keep in sync with tree.h:enum tree_node_kind.  */\n static const char * const tree_node_kind_names[] = {\n@@ -9123,25 +9123,27 @@ dump_tree_statistics (void)\n   if (GATHER_STATISTICS)\n     {\n       int i;\n-      int total_nodes, total_bytes;\n+      uint64_t total_nodes, total_bytes;\n       fprintf (stderr, \"\\nKind                   Nodes      Bytes\\n\");\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       total_nodes = total_bytes = 0;\n       for (i = 0; i < (int) all_kinds; i++)\n \t{\n-\t  fprintf (stderr, \"%-20s %7d %10d\\n\", tree_node_kind_names[i],\n-\t\t   tree_node_counts[i], tree_node_sizes[i]);\n+\t  fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\",\n+\t\t   tree_node_kind_names[i], tree_node_counts[i],\n+\t\t   tree_node_sizes[i]);\n \t  total_nodes += tree_node_counts[i];\n \t  total_bytes += tree_node_sizes[i];\n \t}\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n-      fprintf (stderr, \"%-20s %7d %10d\\n\", \"Total\", total_nodes, total_bytes);\n+      fprintf (stderr, \"%-20s %7\" PRIu64 \" %10\" PRIu64 \"\\n\", \"Total\",\n+\t       total_nodes, total_bytes);\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       fprintf (stderr, \"Code                   Nodes\\n\");\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       for (i = 0; i < (int) MAX_TREE_CODES; i++)\n-\tfprintf (stderr, \"%-32s %7d\\n\", get_tree_code_name ((enum tree_code) i),\n-                 tree_code_counts[i]);\n+\tfprintf (stderr, \"%-32s %7\" PRIu64 \"\\n\",\n+\t\t get_tree_code_name ((enum tree_code) i), tree_code_counts[i]);\n       mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       fprintf (stderr, \"\\n\");\n       ssanames_print_statistics ();"}]}