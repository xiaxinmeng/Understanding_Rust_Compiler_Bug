{"sha": "7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjNjFkNmNmYjc3YWI5ZDNjNTljYzA0ZDRiZmI3MzJiZGI1ZjdkMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-08T13:45:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-08T13:45:38Z"}, "message": "builtins.c (readonly_data_expr): New function.\n\ngcc:\n\t* builtins.c (readonly_data_expr): New function.\n\t(expand_builtin_memmove): Optimize any rodata source, not just\n\tstrings.\n\ntestsuite\n\tgcc.c-torture/execute/string-opt-19.c: Add general rodata tests.\n\t(bcopy): Call memmove.\n\nFrom-SVN: r66597", "tree": {"sha": "5a03f0bcac76ac17d2d946ba52f8619024d49c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a03f0bcac76ac17d2d946ba52f8619024d49c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/comments", "author": null, "committer": null, "parents": [{"sha": "53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53415fa1a1f7b3c13dde3aa0a73f35ae4dcc335b"}], "stats": {"total": 109, "additions": 88, "deletions": 21}, "files": [{"sha": "c09938447e6e06de9bdc2d0b067296f67e9c41d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "patch": "@@ -1,3 +1,9 @@\n+2003-05-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (readonly_data_expr): New function.\n+\t(expand_builtin_memmove): Optimize any rodata source, not just\n+\tstrings.\n+\n 2003-05-07  David Mosberger <davidm@hpl.hp.com>\n \n         * unwind-libunwind.c (_Unwind_FindEnclosingFunction): New."}, {"sha": "6745300fe803825d635fddaa4233b66880e8e69b", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "patch": "@@ -168,6 +168,7 @@ static tree fold_builtin_inf\t\tPARAMS ((tree, int));\n static tree fold_builtin_nan\t\tPARAMS ((tree, tree, int));\n static int validate_arglist\t\tPARAMS ((tree, ...));\n static tree fold_trunc_transparent_mathfn PARAMS ((tree));\n+static bool readonly_data_expr\t\tPARAMS ((tree));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -2423,10 +2424,16 @@ expand_builtin_memmove (arglist, target, mode)\n       if (src_align == 0)\n \treturn 0;\n \n-      /* If src is a string constant and strings are not writable,\n-\t we can use normal memcpy.  */\n-      if (!flag_writable_strings && c_getstr (src))\n-\treturn expand_builtin_memcpy (arglist, target, mode, 0);\n+      /* If src is categorized for a readonly section we can use\n+\t normal memcpy.  */\n+      if (readonly_data_expr (src))\n+        {\n+\t  tree const fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n+\t  if (!fn)\n+\t    return 0;\n+\t  return expand_expr (build_function_call_expr (fn, arglist),\n+\t\t\t      target, mode, EXPAND_NORMAL);\n+\t}\n \n       /* Otherwise, call the normal function.  */\n       return 0;\n@@ -5449,3 +5456,16 @@ purge_builtin_constant_p ()\n       }\n }\n \n+/* Returns true is EXP represents data that would potentially reside\n+   in a readonly section.  */\n+\n+static bool\n+readonly_data_expr (tree exp)\n+{\n+  STRIP_NOPS (exp);\n+\n+  if (TREE_CODE (exp) == ADDR_EXPR)\n+    return decl_readonly_section (TREE_OPERAND (exp, 0), 0);\n+  else\n+    return false;\n+}"}, {"sha": "a11244a602fd85db79605211c046c97be2ea3bd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "patch": "@@ -1,3 +1,8 @@\n+2003-05-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tgcc.c-torture/execute/string-opt-19.c: Add general rodata tests.\n+\t(bcopy): Call memmove.\n+\n 2003-05-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* g77.f-torture/compile/8485.f: New test case."}, {"sha": "33823162f18528d258780f5eb1f19abe4415c330", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-19.c", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-19.c?ref=7dc61d6cfb77ab9d3c59cc04d4bfb732bdb5f7d0", "patch": "@@ -13,10 +13,61 @@ extern int memcmp (const void *, const void *, size_t);\n const char s1[] = \"123\";\n char p[32] = \"\";\n \n+static const struct foo\n+{\n+  char *s;\n+  double d;\n+  long l;\n+} foo[] =\n+{\n+  { \"hello world1\", 3.14159, 101L },\n+  { \"hello world2\", 3.14159, 102L },\n+  { \"hello world3\", 3.14159, 103L },\n+  { \"hello world4\", 3.14159, 104L },\n+  { \"hello world5\", 3.14159, 105L },\n+  { \"hello world6\", 3.14159, 106L }\n+};\n+\n+static const struct bar\n+{\n+  char *s;\n+  const struct foo f[3];\n+} bar[] =\n+{\n+  {\n+    \"hello world10\",\n+    {\n+      { \"hello1\", 3.14159, 201L },\n+      { \"hello2\", 3.14159, 202L },\n+      { \"hello3\", 3.14159, 203L },\n+    }\n+  },\n+  {\n+    \"hello world11\",\n+    {\n+      { \"hello4\", 3.14159, 204L },\n+      { \"hello5\", 3.14159, 205L },\n+      { \"hello6\", 3.14159, 206L },\n+    }\n+  }\n+};\n+\n+static const int baz[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n+\n int main()\n {\n-  int i;\n   const char *s;\n+  struct foo f1[sizeof foo/sizeof*foo];\n+  struct bar b1[sizeof bar/sizeof*bar];\n+  int bz[sizeof baz/sizeof*baz];\n+\n+  if (memmove (f1, foo, sizeof (foo)) != f1 || memcmp (f1, foo, sizeof(foo)))\n+    abort();\n+  if (memmove (b1, bar, sizeof (bar)) != b1 || memcmp (b1, bar, sizeof(bar)))\n+    abort();\n+  bcopy (baz, bz, sizeof (baz));\n+  if (memcmp (bz, baz, sizeof(baz)))\n+    abort();\n \n   if (memmove (p, \"abcde\", 6) != p || memcmp (p, \"abcde\", 6))\n     abort ();\n@@ -70,20 +121,5 @@ __attribute__ ((noinline))\n static void\n bcopy (const void *s, void *d, size_t n)\n {\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  char *dst = (char *) d;\n-  const char *src = (const char *) s;\n-  if (src < dst)\n-    {\n-      dst += n;\n-      src += n;\n-      while (n--)\n-        *--dst = *--src;\n-    }\n-  else\n-    while (n--)\n-      *dst++ = *src++;\n-#endif\n+  memmove (d, s, n);\n }"}]}