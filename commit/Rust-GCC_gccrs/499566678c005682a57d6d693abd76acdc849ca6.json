{"sha": "499566678c005682a57d6d693abd76acdc849ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5NTY2Njc4YzAwNTY4MmE1N2Q2ZDY5M2FiZDc2YWNkYzg0OWNhNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-05T17:14:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-05T17:14:16Z"}, "message": "dwarf2out: Remove unused text-based unwind entry points.\n\nThe dwarf2out_cfi_label function is privatized, the\ndwarf2out_def_cfa function is merged into its last user.\nThe others really are unused.\n\n        * dwarf2out.c (dwarf2out_cfi_label): Make static.\n        (dwarf2out_flush_queued_reg_saves): Make static.\n        (dwarf2out_reg_save): Remove.\n        (dwarf2out_return_save): Remove.\n        (dwarf2out_return_reg): Remove.\n        (dwarf2out_reg_save_reg): Remove.\n        (dwarf2out_def_cfa): Merge into ...\n        (dwarf2out_frame_init): ... here.\n        * dwarf2out.h, tree.h: Remove declarations as necessary.\n\nFrom-SVN: r175876", "tree": {"sha": "cf2c11657a1463f21eeb264da1d773d901f3ce6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2c11657a1463f21eeb264da1d773d901f3ce6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/499566678c005682a57d6d693abd76acdc849ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499566678c005682a57d6d693abd76acdc849ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499566678c005682a57d6d693abd76acdc849ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499566678c005682a57d6d693abd76acdc849ca6/comments", "author": null, "committer": null, "parents": [{"sha": "c2b40eba3ab707ce122464620bbdabf8b9044452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b40eba3ab707ce122464620bbdabf8b9044452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b40eba3ab707ce122464620bbdabf8b9044452"}], "stats": {"total": 107, "additions": 20, "deletions": 87}, "files": [{"sha": "70de80a5f5a7c96e76ab806c29e9bfed96a60ddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499566678c005682a57d6d693abd76acdc849ca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499566678c005682a57d6d693abd76acdc849ca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=499566678c005682a57d6d693abd76acdc849ca6", "patch": "@@ -1,3 +1,15 @@\n+2011-07-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_cfi_label): Make static.\n+\t(dwarf2out_flush_queued_reg_saves): Make static.\n+\t(dwarf2out_reg_save): Remove.\n+\t(dwarf2out_return_save): Remove.\n+\t(dwarf2out_return_reg): Remove.\n+\t(dwarf2out_reg_save_reg): Remove.\n+\t(dwarf2out_def_cfa): Merge into ...\n+\t(dwarf2out_frame_init): ... here.\n+\t* dwarf2out.h, tree.h: Remove declarations as necessary.\n+\n 2011-07-05  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_dwarf_handle_frame_unspec): Remove."}, {"sha": "436110e03a990cd343474469436155ae48908e3e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 59, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=499566678c005682a57d6d693abd76acdc849ca6", "patch": "@@ -848,7 +848,7 @@ add_cfi (cfi_vec *vec, dw_cfi_ref cfi)\n /* Generate a new label for the CFI info to refer to.  FORCE is true\n    if a label needs to be output even when using .cfi_* directives.  */\n \n-char *\n+static char *\n dwarf2out_cfi_label (bool force)\n {\n   static char label[20];\n@@ -1080,21 +1080,6 @@ static HOST_WIDE_INT args_size;\n /* The last args_size we actually output.  */\n static HOST_WIDE_INT old_args_size;\n \n-/* Entry point to update the canonical frame address (CFA).\n-   LABEL is passed to add_fde_cfi.  The value of CFA is now to be\n-   calculated from REG+OFFSET.  */\n-\n-void\n-dwarf2out_def_cfa (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n-{\n-  dw_cfa_location loc;\n-  loc.indirect = 0;\n-  loc.base_offset = 0;\n-  loc.reg = reg;\n-  loc.offset = offset;\n-  def_cfa_1 (label, &loc);\n-}\n-\n /* Determine if two dw_cfa_location structures define the same data.  */\n \n static bool\n@@ -1232,33 +1217,6 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT\n   add_fde_cfi (label, cfi);\n }\n \n-/* Entry point for saving a register to the stack.  REG is the GCC register\n-   number.  LABEL and OFFSET are passed to reg_save.  */\n-\n-void\n-dwarf2out_reg_save (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n-{\n-  reg_save (label, DWARF_FRAME_REGNUM (reg), INVALID_REGNUM, offset);\n-}\n-\n-/* Entry point for saving the return address in the stack.\n-   LABEL and OFFSET are passed to reg_save.  */\n-\n-void\n-dwarf2out_return_save (const char *label, HOST_WIDE_INT offset)\n-{\n-  reg_save (label, DWARF_FRAME_RETURN_COLUMN, INVALID_REGNUM, offset);\n-}\n-\n-/* Entry point for saving the return address in a register.\n-   LABEL and SREG are passed to reg_save.  */\n-\n-void\n-dwarf2out_return_reg (const char *label, unsigned int sreg)\n-{\n-  reg_save (label, DWARF_FRAME_RETURN_COLUMN, DWARF_FRAME_REGNUM (sreg), 0);\n-}\n-\n /* Record the initial position of the return address.  RTL is\n    INCOMING_RETURN_ADDR_RTX.  */\n \n@@ -1816,7 +1774,7 @@ queue_reg_save (const char *label, rtx reg, rtx sreg, HOST_WIDE_INT offset)\n \n /* Output all the entries in QUEUED_REG_SAVES.  */\n \n-void\n+static void\n dwarf2out_flush_queued_reg_saves (void)\n {\n   struct queued_reg_save *q;\n@@ -1866,20 +1824,6 @@ clobbers_queued_reg_save (const_rtx insn)\n   return false;\n }\n \n-/* Entry point for saving the first register into the second.  */\n-\n-void\n-dwarf2out_reg_save_reg (const char *label, rtx reg, rtx sreg)\n-{\n-  unsigned int regno, sregno;\n-\n-  record_reg_saved_in_reg (sreg, reg);\n-\n-  regno = DWARF_FRAME_REGNUM (REGNO (reg));\n-  sregno = DWARF_FRAME_REGNUM (REGNO (sreg));\n-  reg_save (label, regno, sregno, 0);\n-}\n-\n /* What register, if any, is currently saved in REG?  */\n \n static rtx\n@@ -4273,6 +4217,8 @@ dwarf2out_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n void\n dwarf2out_frame_init (void)\n {\n+  dw_cfa_location loc;\n+\n   /* Allocate the initial hunk of the fde_table.  */\n   fde_table = ggc_alloc_cleared_vec_dw_fde_node (FDE_TABLE_INCREMENT);\n   fde_table_allocated = FDE_TABLE_INCREMENT;\n@@ -4282,7 +4228,10 @@ dwarf2out_frame_init (void)\n      sake of lookup_cfa.  */\n \n   /* On entry, the Canonical Frame Address is at SP.  */\n-  dwarf2out_def_cfa (NULL, STACK_POINTER_REGNUM, INCOMING_FRAME_SP_OFFSET);\n+  memset(&loc, 0, sizeof (loc));\n+  loc.reg = STACK_POINTER_REGNUM;\n+  loc.offset = INCOMING_FRAME_SP_OFFSET;\n+  def_cfa_1 (NULL, &loc);\n \n   if (targetm.debug_unwind_info () == UI_DWARF2\n       || targetm_common.except_unwind_info (&global_options) == UI_DWARF2)"}, {"sha": "ca2c26aea04887a08a2d337e91e21ef720e1ac5c", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=499566678c005682a57d6d693abd76acdc849ca6", "patch": "@@ -23,7 +23,6 @@ extern void dwarf2out_frame_debug (rtx, bool);\n extern void dwarf2out_frame_debug_init (void);\n extern void dwarf2out_cfi_begin_epilogue (rtx);\n extern void dwarf2out_frame_debug_restore_state (void);\n-extern void dwarf2out_flush_queued_reg_saves (void);\n \n extern void debug_dwarf (void);\n struct die_struct;"}, {"sha": "fd7d5cea1094073edc40451d905951f2ffa4fec8", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/499566678c005682a57d6d693abd76acdc849ca6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=499566678c005682a57d6d693abd76acdc849ca6", "patch": "@@ -5602,33 +5602,6 @@ extern tree tree_overlaps_hard_reg_set (tree, HARD_REG_SET *);\n #endif\n \n \f\n-/* In dwarf2out.c */\n-/* Interface of the DWARF2 unwind info support.  */\n-\n-/* Generate a new label for the CFI info to refer to.  */\n-\n-extern char *dwarf2out_cfi_label (bool);\n-\n-/* Entry point to update the canonical frame address (CFA).  */\n-\n-extern void dwarf2out_def_cfa (const char *, unsigned, HOST_WIDE_INT);\n-\n-/* Entry point for saving a register to the stack.  */\n-\n-extern void dwarf2out_reg_save (const char *, unsigned, HOST_WIDE_INT);\n-\n-/* Entry point for saving the return address in the stack.  */\n-\n-extern void dwarf2out_return_save (const char *, HOST_WIDE_INT);\n-\n-/* Entry point for saving the return address in a register.  */\n-\n-extern void dwarf2out_return_reg (const char *, unsigned);\n-\n-/* Entry point for saving the first register into the second.  */\n-\n-extern void dwarf2out_reg_save_reg (const char *, rtx, rtx);\n-\n /* In tree-inline.c  */\n \n /* The type of a set of already-visited pointers.  Functions for creating"}]}