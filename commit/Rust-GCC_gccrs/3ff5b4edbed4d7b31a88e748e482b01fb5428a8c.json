{"sha": "3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "node_id": "C_kwDOANBUbNoAKDNmZjViNGVkYmVkNGQ3YjMxYTg4ZTc0OGU0ODJiMDFmYjU0MjhhOGM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-27T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-27T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "0c3e20e1c02262580ef2a38db00fec46c36b05b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c3e20e1c02262580ef2a38db00fec46c36b05b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/comments", "author": null, "committer": null, "parents": [{"sha": "ab10383aaebf2feebd2b6d68247f2520eff48f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab10383aaebf2feebd2b6d68247f2520eff48f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab10383aaebf2feebd2b6d68247f2520eff48f79"}], "stats": {"total": 372, "additions": 371, "deletions": 1}, "files": [{"sha": "40aa75905173f39a0ba2bb2bf5669591a228b557", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,12 @@\n+2021-10-26  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* MAINTAINERS: Fix up Maciej's entries.\n+\n+2021-10-26  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* MAINTAINERS (CPU Port Maintainers): Add myself as a VAX port\n+\tmaintainer.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "322b31b877f455a9e21beb42758432e241992b62", "filename": "c++tools/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/c%2B%2Btools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/c%2B%2Btools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,8 @@\n+2021-10-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* resolver.cc (module_resolver::read_tuple_file): Use unique_ptr\n+\tto ensure memory is freed before returning.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "b6381eda8f863e96ed099ba8122f842c881f00e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,174 @@\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102238\n+\tPR tree-optimization/102919\n+\t* gimple-ssa-sprintf.c (get_string_length): Add an argument.\n+\t(array_elt_at_offset): Move to pointer-query.\n+\t(set_aggregate_size_and_offset): New function.\n+\t(field_at_offset):  Move to pointer-query.\n+\t(get_origin_and_offset): Rename...\n+\t(get_origin_and_offset_r): this.  Add an argument.  Make aggregate\n+\thandling more robust.\n+\t(get_origin_and_offset): New.\n+\t(alias_offset): Add an argument.\n+\t(format_string): Use subobject size determined by get_origin_and_offset.\n+\t* pointer-query.cc (field_at_offset): Move from gimple-ssa-sprintf.c.\n+\tImprove/correct handling of aggregates.\n+\t(array_elt_at_offset): Same.\n+\t* pointer-query.h (field_at_offset): Declare.\n+\t(array_elt_at_offset): Declare.\n+\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (check_strncat_sizes): Pass access_data ctor additional\n+\targuments.\n+\t(expand_builtin_memcmp): Move code to gimple-ssa-warn-access.cc.\n+\t(expand_builtin_fork_or_exec): Same.\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_mem_ref): Pass\n+\tcompute_objsize additional arguments.\n+\t(inbounds_memaccess_p): Same.\n+\t(array_bounds_checker::check_array_bounds): Add an assert.  Stash\n+\tstatement in a member.\n+\t(check_array_bounds_dom_walker::before_dom_children): Same.\n+\t* gimple-array-bounds.h (array_bounds_checker::m_stmt): New member.\n+\t* gimple-ssa-sprintf.c (get_destination_size): Add an argument.\n+\t(handle_printf_call): Pass a new argument.\n+\t* gimple-ssa-warn-access.cc (get_size_range): Add an argument.\n+\t(check_access): Add an argument and pass it along to callees.\n+\t(check_read_access): Make a member function.\n+\t(pass_waccess::check_strcat): Pass access_data ctor additional\n+\targuments.\n+\t(pass_waccess::check_strncat): Same.\n+\t(pass_waccess::check_stxcpy): Same.\n+\t(pass_waccess::check_stxncpy): Same.\n+\t(pass_waccess::check_strncmp): Same.\n+\t(pass_waccess::check_read_access): Same.\n+\t(pass_waccess::check_builtin): Same.\n+\t(pass_waccess::maybe_check_access_sizes): Same.\n+\t(pass_waccess::maybe_check_dealloc_call): Same.\n+\t* gimple-ssa-warn-access.h (check_read_access): Declare a new\n+\tmember function.\n+\t* pointer-query.cc (compute_objsize_r): Add an argument.\n+\t(gimple_call_return_array): Same.\n+\t(gimple_call_alloc_size): Same.\n+\t(access_ref::access_ref): Same.\n+\t(access_ref::get_ref): Same.\n+\t(pointer_query::get_ref): Same.\n+\t(handle_min_max_size): Pass an arguments to callees.\n+\t(handle_array_ref): Add an argument.\n+\t(handle_mem_ref): Same.\n+\t(compute_objsize): Same.\n+\t* pointer-query.h (struct access_ref): Adjust signatures.\n+\t(struct access_data): Same.\n+\t(gimple_call_alloc_size): Add an argument.\n+\t(gimple_parm_array_size): Same.\n+\t(compute_objsize): Same.\n+\t* tree-ssa-strlen.c (strlen_pass::adjust_last_stmt): Pass an additional\n+\targument to compute_objsize.\n+\t(strlen_pass::maybe_warn_overflow): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102453\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_atomic_builtin): New.\n+\t(pass_waccess::check_atomic_builtin): Call it.\n+\n+2021-10-26  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/102842\n+\t* lra-constraints.c (match_reload): Ignore out in checking values\n+\tof outs.\n+\t(curr_insn_transform): Collect outputs before doing reloads of operands.\n+\n+2021-10-26  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/102719\n+\t* config/rs6000/x86intrin.h: Move some included headers to new\n+\theaders.  Include new immintrin.h instead of those headers.\n+\t* config/rs6000/immintrin.h: New.\n+\t* config/rs6000/x86gprintrin.h: New.\n+\t* config.gcc (powerpc*-*-*): Add new headers to extra_headers.\n+\n+2021-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_create_addr_base_for_vector_ref):\n+\tRemove byte_offset parameter.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n+\tLikewise.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_store): Adjust.\n+\t(vectorizable_load): Likewise.\n+\n+2021-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96109\n+\t* tree-vectorizer.h (dr_misalignment): Add optional offset\n+\tparameter.\n+\t* tree-vect-data-refs.c (dr_misalignment): Likewise.  Remove\n+\toffset applied for negative stride accesses.\n+\t(vect_enhance_data_refs_alignment): Compute negative stride\n+\taccess offset and pass it to dr_misalignment.\n+\t* tree-vect-stmts.c (get_negative_load_store_type): Pass\n+\tnegative offset to dr_misalignment.\n+\t(get_group_load_store_type): Likewise.\n+\t(get_load_store_type): Likewise.\n+\t(vectorizable_store): Remove asserts about alignment.\n+\t(vectorizable_load): Likewise.\n+\n+2021-10-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/102897\n+\t* tree-ssa-forwprop.c (simplify_permutation): Remove a wrong assertion.\n+\n+2021-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n+\tTake offset in bytes.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t* tree-vect-loop-manip.c (get_misalign_in_elems): Multiply\n+\toffset by element size.\n+\t(vect_create_cond_for_align_checks): Likewise.\n+\t* tree-vect-stmts.c (get_negative_load_store_type): Likewise.\n+\t(vectorizable_load): Remove duplicate leftover from merge\n+\tconflict.\n+\n+2021-10-26  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_v1ti_shift): New helper\n+\tfunction to expand V1TI mode logical shifts by integer constants.\n+\t(ix86_expand_v1ti_rotate): New helper function to expand V1TI\n+\tmode rotations by integer constants.\n+\t* config/i386/i386-protos.h (ix86_expand_v1ti_shift,\n+\tix86_expand_v1ti_rotate): Prototype new functions here.\n+\t* config/i386/sse.md (ashlv1ti3, lshrv1ti3, rotlv1ti3, rotrv1ti3):\n+\tNew TARGET_SSE2 expanders to implement V1TI shifts and rotations.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::maybe_register_path):\n+\tAvoid threading circular paths.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::resolve_phi):\n+\tAttempt to resolve all incoming paths to a PHI.\n+\t(back_threader::resolve_def): Always return true for PHIs.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n+\tAlways try to resolve path without looking back.\n+\t* tree-ssa-threadupdate.c (dump_jump_thread): Indidicate whether\n+\tedge is a back edge.\n+\n+2021-10-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/102789\n+\t* tree-vect-loop-manip.c (vect_update_inits_of_drs): Do not\n+\tupdate inits of simd_lane_access.\n+\n 2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-vrp.c (vrp_simplify_cond_using_ranges): Add return type and"}, {"sha": "3b249e4ee3fd52c33ab2f9bb251a8fbb7f10ca76", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1 +1 @@\n-20211026\n+20211027"}, {"sha": "ced68643d63cd712f96984883d7e862e34cd5dd1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,11 @@\n+2021-10-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102617\n+\t* parser.c (cp_parser_for): Maybe call cp_parser_init_statement\n+\ttwice.  Warn about range-based for loops with initializer here.\n+\t(cp_parser_init_statement): Don't duplicate code.  Allow\n+\talias-declaration in init-statement.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "6d0a022b36312e9662608132dea4a632e29c7762", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,27 @@\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102956\n+\t* symbol.c (gfc_check_conflict): Add conflict check for PDT KIND\n+\tand LEN type parameters.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102917\n+\t* decl.c (match_attr_spec): Remove invalid integer kind checks on\n+\tKIND and LEN attributes of PDTs.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102816\n+\t* resolve.c (resolve_structure_cons): Reject invalid array spec of\n+\ta DT component referenced in a structure constructor.\n+\n+2021-10-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102885\n+\t* trans-decl.c (gfc_conv_cfi_to_gfc): Properly handle nonconstant\n+\tcharacter lenghts.\n+\n 2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* trans-decl.c (gfc_conv_cfi_to_gfc): Initialize rank to NULL_TREE."}, {"sha": "d16e500819aabf5e5c893d7243e9e55b7ae06579", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,141 @@\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/102238\n+\tPR tree-optimization/102919\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-23.c: Remove warnings.\n+\t* gcc.dg/Wrestrict-23.c: New test.\n+\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-22.c: Correct typos.\n+\t* gcc.dg/Wstringop-overflow-81.c: New test.\n+\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/102453\n+\t* gcc.dg/Warray-bounds-90.c: New test.\n+\t* gcc.dg/Wstringop-overflow-77.c: New test.\n+\t* gcc.dg/Wstringop-overflow-78.c: New test.\n+\t* gcc.dg/Wstringop-overflow-79.c: New test.\n+\t* gcc.dg/Wstringop-overflow-80.c: New test.\n+\t* c-c++-common/gomp/atomic-4.c: Avoid an out-of-bounds access.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/86551\n+\t* gfortran.dg/pr86551.f90: New test to verify that PR86551 remains\n+\tfixed.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102956\n+\t* gfortran.dg/pdt_32.f03: New test.\n+\n+2021-10-26  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/102842\n+\t* g++.target/arm/pr102842.C: New test.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102917\n+\t* gfortran.dg/pdt_4.f03: Adjust testcase.\n+\n+2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102816\n+\t* gfortran.dg/pr102816.f90: New test.\n+\n+2021-10-26  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/pr78102.c: Fix dg directives to require Power8\n+\tvector support.  Also, add -DNO_WARN_X86_INTRINSICS.\n+\n+2021-10-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102617\n+\t* g++.dg/cpp23/init-stmt1.C: New test.\n+\t* g++.dg/cpp23/init-stmt2.C: New test.\n+\n+2021-10-26  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR testsuite/102910\n+\t* gfortran.dg/c-interop/cf-descriptor-5-c.c: Use a static buffer\n+\tinstead of alloca.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR testsuite/102834\n+\t* gcc.target/i386/avx512f-pr96891-3.c: Add -mstv -mno-stackrealign\n+\tto dg-options.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR testsuite/102835\n+\t* gcc.target/i386/avx512fp16-trunchf.c: Allow for %esp instead of\n+\t%ebp.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR testsuite/102836\n+\t* gcc.target/i386/pieces-memset-1.c: Add -mno-stackrealign to\n+\tdg-options.\n+\t* gcc.target/i386/pieces-memset-4.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-7.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-8.c: Likewise.\n+\t* gcc.target/i386/pieces-memset-41.c: Likewise.\n+\t* gcc.target/i386/pr90773-1.c: Likewise.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.target/i386/pr100704-1.c: Add -fomit-frame-pointer to\n+\tdg-options.\n+\t* gcc.target/i386/pr100704-2.c: Likewise.\n+\n+2021-10-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.dg/pr102897.c: New test.\n+\n+2021-10-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102885\n+\t* gfortran.dg/lto/bind-c-char_0.f90: New test.\n+\n+2021-10-26  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse2-v1ti-shift.c: New test case.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR testsuite/102857\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Add -fdump-tree-vrp2-stats.\n+\tTweak for aarch64.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr21090.c: Adjust for threading.\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: Removed.\n+\n+2021-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/graphite/scop-dsyr2k-2.c: Adjust for jump threading changes.\n+\t* gcc.dg/graphite/scop-dsyr2k.c: Same.\n+\t* gcc.dg/graphite/scop-dsyrk-2.c: Same.\n+\t* gcc.dg/graphite/scop-dsyrk.c: Same.\n+\t* gcc.dg/tree-ssa/pr20701.c: Same.\n+\t* gcc.dg/tree-ssa/pr20702.c: Same.\n+\t* gcc.dg/tree-ssa/pr21086.c: Same.\n+\t* gcc.dg/tree-ssa/pr25382.c: Same.\n+\t* gcc.dg/tree-ssa/pr58480.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Same.\n+\t* gcc.dg/tree-ssa/vrp08.c: Same.\n+\t* gcc.dg/tree-ssa/vrp55.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Removed.\n+\t* gcc.dg/tree-ssa/ssa-thread-11.c: Removed.\n+\t* gcc.dg/uninit-pr89230-1.c: xfail.\n+\t* gcc.dg/tree-ssa/ssa-thread-backedge.c: New file.\n+\n 2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/tree-ssa/vrp98.c: Disable evrp for vrp1 test."}, {"sha": "d71d761fcb2093e3ff6664e4a80be4aef7c68af2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "patch": "@@ -1,3 +1,18 @@\n+2021-10-26  Martin Sebor  <msebor@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/capacity/1.cc: Also suppress\n+\t-Wstringop-overread.\n+\t* testsuite/27_io/filesystem/path/factory/u8path-char8_t.cc: Same.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/28_regex/basic_regex/84110.cc (test01)\n+\t[__cpp_exceptions]: Disambiguate extended.\n+\n+2021-10-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/17_intro/names.cc [__sun__] (r, x): Undef.\n+\n 2021-10-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/102894"}]}