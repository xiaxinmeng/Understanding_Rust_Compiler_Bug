{"sha": "f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "node_id": "C_kwDOANBUbNoAKGY1NGNlYjIwNjJjN2ZlZjI5NGY4NWFlMDkzOTE0ZmE2YzdjYTM1Yjg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-24T21:09:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-25T15:06:25Z"}, "message": "libstdc++: Call predicate with non-const values in std::erase_if [PR107850]\n\nAs specified in the standard, the predicate for std::erase_if has to be\ninvocable as non-const with a non-const lvalues argument. Restore\nsupport for predicates that only accept non-const arguments.\n\nIt's not strictly nevessary to change it for the set and unordered_set\noverloads, because they only give const access to the elements anyway.\nI've done it for them too just to keep them all consistent.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107850\n\t* include/bits/erase_if.h (__erase_nodes_if): Use non-const\n\treference to the container.\n\t* include/experimental/map (erase_if): Likewise.\n\t* include/experimental/set (erase_if): Likewise.\n\t* include/experimental/unordered_map (erase_if): Likewise.\n\t* include/experimental/unordered_set (erase_if): Likewise.\n\t* include/std/map (erase_if): Likewise.\n\t* include/std/set (erase_if): Likewise.\n\t* include/std/unordered_map (erase_if): Likewise.\n\t* include/std/unordered_set (erase_if): Likewise.\n\t* testsuite/23_containers/map/erasure.cc: Check with\n\tconst-incorrect predicate.\n\t* testsuite/23_containers/set/erasure.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/erasure.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/erasure.cc: Likewise.\n\t* testsuite/experimental/map/erasure.cc: Likewise.\n\t* testsuite/experimental/set/erasure.cc: Likewise.\n\t* testsuite/experimental/unordered_map/erasure.cc: Likewise.\n\t* testsuite/experimental/unordered_set/erasure.cc: Likewise.", "tree": {"sha": "8e935211c279fc7accbe99a5d6fdcc23d59f065d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e935211c279fc7accbe99a5d6fdcc23d59f065d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e4a9d93885b3d82cfcbf1e804fe9c3eaabf157"}], "stats": {"total": 142, "additions": 121, "deletions": 21}, "files": [{"sha": "b336e263d2d1d7b8b4b44e41692c83d9ae232399", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -49,7 +49,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Container, typename _UnsafeContainer,\n \t     typename _Predicate>\n       typename _Container::size_type\n-      __erase_nodes_if(_Container& __cont, const _UnsafeContainer& __ucont,\n+      __erase_nodes_if(_Container& __cont, _UnsafeContainer& __ucont,\n \t\t       _Predicate __pred)\n       {\n \ttypename _Container::size_type __num = 0;"}, {"sha": "9557a2aec1c550dc64c0c73a167f1f0c72495ba5", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -53,8 +53,7 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>&\n-\t__ucont = __cont;\n+      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n \n@@ -63,8 +62,7 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>&\n-\t__ucont = __cont;\n+      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n "}, {"sha": "7d142e081d99ca1353882c2b0a6aeaf20c826d10", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -53,7 +53,7 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n \n@@ -62,7 +62,7 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n "}, {"sha": "02bba7edab923bc5d0487281ed5624769d1702e3", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -54,7 +54,7 @@ inline namespace fundamentals_v2\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n@@ -65,7 +65,7 @@ inline namespace fundamentals_v2\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }"}, {"sha": "04bbb7fb700cb815f1ea2a69d54690278a761d27", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -54,7 +54,7 @@ inline namespace fundamentals_v2\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n@@ -65,7 +65,7 @@ inline namespace fundamentals_v2\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       std::__detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }"}, {"sha": "9bf484dc5e3fadbdd0b3f1e6e87c0ec817566ddb", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -98,8 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename map<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>&\n-\t__ucont = __cont;\n+      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n \n@@ -108,8 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename multimap<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>&\n-\t__ucont = __cont;\n+      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3ada45c91544745d24d15f3da5140e427149cd42", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename set<_Key, _Compare, _Alloc>::size_type\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n \n@@ -103,7 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename multiset<_Key, _Compare, _Alloc>::size_type\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n+      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "38c4987c795788533e12c65554f57044c5ba9dad", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }"}, {"sha": "09f74ab6b2cae0f70a6acbb3fa10a38b7232694a", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }\n@@ -89,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n     {\n-      const _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n+      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>&\n \t__ucont = __cont;\n       return __detail::__erase_nodes_if(__cont, __ucont, __pred);\n     }"}, {"sha": "643ad0a3f17fd8f84d6b1ad68619857e92e15e0b", "filename": "libstdc++-v3/testsuite/23_containers/map/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -61,11 +61,24 @@ test02()\n   VERIFY( num == 4 );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const and only accepts non-const argument.\n+  struct Pred { bool operator()(std::pair<const int, int>&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::map<int, int> m;\n+  std::erase_if(m, pred);\n+  std::multimap<int, int> mm;\n+  std::erase_if(mm, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "bfa28f2600966e6b09bbc65789e9b0172f685562", "filename": "libstdc++-v3/testsuite/23_containers/set/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -49,11 +49,24 @@ test02()\n   VERIFY( num == 4 );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const.\n+  struct Pred { bool operator()(const int&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::set<int> s;\n+  std::erase_if(s, pred);\n+  std::multiset<int> ms;\n+  std::erase_if(ms, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "8392e538ac7509e53da7afa36a0975c99a663c8b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -61,11 +61,24 @@ test02()\n   VERIFY( num == 4 );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const and only accepts non-const argument.\n+  struct Pred { bool operator()(std::pair<const int, int>&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::unordered_map<int, int> m;\n+  std::erase_if(m, pred);\n+  std::unordered_multimap<int, int> mm;\n+  std::erase_if(mm, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "768454942893d38e6ff8611b7ba7470f1501d694", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -51,11 +51,24 @@ test02()\n   VERIFY( num == 4 );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const.\n+  struct Pred { bool operator()(const int&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::unordered_set<int> s;\n+  std::erase_if(s, pred);\n+  std::unordered_multiset<int> ms;\n+  std::erase_if(ms, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "b377926898f9fe21b85d2dd9f53771e9aa26440a", "filename": "libstdc++-v3/testsuite/experimental/map/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -52,11 +52,24 @@ test02()\n   VERIFY( mm == t );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const and only accepts non-const argument.\n+  struct Pred { bool operator()(std::pair<const int, int>&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::map<int, int> m;\n+  std::experimental::erase_if(m, pred);\n+  std::multimap<int, int> mm;\n+  std::experimental::erase_if(mm, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "b4272282c320c8ecb365d348ee9fd89f7fdc225a", "filename": "libstdc++-v3/testsuite/experimental/set/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -40,11 +40,24 @@ test02()\n   VERIFY( ms == t );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const.\n+  struct Pred { bool operator()(const int&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::set<int> s;\n+  std::experimental::erase_if(s, pred);\n+  std::multiset<int> ms;\n+  std::experimental::erase_if(ms, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "cd281bc70dad8bc90815c23f18ad611e025f909b", "filename": "libstdc++-v3/testsuite/experimental/unordered_map/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -52,11 +52,24 @@ test02()\n   VERIFY( umm == t );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const and only accepts non-const argument.\n+  struct Pred { bool operator()(std::pair<const int, int>&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::unordered_map<int, int> m;\n+  std::experimental::erase_if(m, pred);\n+  std::unordered_multimap<int, int> mm;\n+  std::experimental::erase_if(mm, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}, {"sha": "918f455f5c001658cd6f91d738071b2d6db4b9e3", "filename": "libstdc++-v3/testsuite/experimental/unordered_set/erasure.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54ceb2062c7fef294f85ae093914fa6c7ca35b8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc?ref=f54ceb2062c7fef294f85ae093914fa6c7ca35b8", "patch": "@@ -42,11 +42,24 @@ test02()\n   VERIFY( ums == t );\n }\n \n+void\n+test_pr107850()\n+{\n+  // Predicate only callable as non-const.\n+  struct Pred { bool operator()(const int&) { return false; } };\n+  const Pred pred; // erase_if parameter is passed by value, so non-const.\n+  std::unordered_set<int> s;\n+  std::experimental::erase_if(s, pred);\n+  std::unordered_multiset<int> ms;\n+  std::experimental::erase_if(ms, pred);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test_pr107850();\n \n   return 0;\n }"}]}