{"sha": "1ee58398659d789a5dfca67a3a7c80ad052367d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlNTgzOTg2NTlkNzg5YTVkZmNhNjdhM2E3YzgwYWQwNTIzNjdkOA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-06T09:23:30Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-06T09:23:30Z"}, "message": "[AArch64] Fix size of memory store for the vst<n>_lane intrinsics\n\ngcc/\n\t* config/aarch64/arm_neon.h\n\t(__ST2_LANE_FUNC): Better model data size.\n\t(__ST3_LANE_FUNC): Likewise.\n\t(__ST4_LANE_FUNC): Likewise.\n\nFrom-SVN: r204448", "tree": {"sha": "8b65a251ea49553e1a8f13b21a76409e89a2e03b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b65a251ea49553e1a8f13b21a76409e89a2e03b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ee58398659d789a5dfca67a3a7c80ad052367d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee58398659d789a5dfca67a3a7c80ad052367d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee58398659d789a5dfca67a3a7c80ad052367d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee58398659d789a5dfca67a3a7c80ad052367d8/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50cfbf99154d0b0b157e9d5b2a3dc616d1354ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cfbf99154d0b0b157e9d5b2a3dc616d1354ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cfbf99154d0b0b157e9d5b2a3dc616d1354ffb"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "069cb506f720cabec69d936800f91a8a086b57f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee58398659d789a5dfca67a3a7c80ad052367d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee58398659d789a5dfca67a3a7c80ad052367d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ee58398659d789a5dfca67a3a7c80ad052367d8", "patch": "@@ -1,3 +1,10 @@\n+2013-11-06  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h\n+\t(__ST2_LANE_FUNC): Better model data size.\n+\t(__ST3_LANE_FUNC): Likewise.\n+\t(__ST4_LANE_FUNC): Likewise.\n+\n 2013-11-06  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.h (TARGET_CPU_CPP_BUILTINS): Define the"}, {"sha": "c33e4a963b78f7da41b157449e3391ec2a583308", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee58398659d789a5dfca67a3a7c80ad052367d8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee58398659d789a5dfca67a3a7c80ad052367d8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1ee58398659d789a5dfca67a3a7c80ad052367d8", "patch": "@@ -14704,16 +14704,19 @@ __LD4_LANE_FUNC (uint64x2x4_t, uint64_t, 2d, d, u64, q)\n \n #define __ST2_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n \t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n+  typedef struct { ptrtype __x[2]; } __ST2_LANE_STRUCTURE_##intype;\t\\\n   __extension__ static __inline void\t\t\t\t\t\\\n   __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst2 ## Q ## _lane_ ## funcsuffix (const ptrtype *ptr,\t\t\\\n+  vst2 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n \t\t\t\t     intype b, const int c)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n+    __ST2_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n+\t\t\t\t(__ST2_LANE_STRUCTURE_##intype *)ptr;\t\\\n     __asm__ (\"ld1 {v16.\" #regsuffix \", v17.\" #regsuffix \"}, %1\\n\\t\"\t\\\n \t     \"st2 {v16.\" #lnsuffix \", v17.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*(intype *) ptr)\t\t\t\t\t\\\n+\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n \t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"memory\", \"v16\", \"v17\");\t\t\t\t\t\\\n+\t     : \"v16\", \"v17\");\t\t\t\t\t\t\\\n   }\n \n __ST2_LANE_FUNC (int8x8x2_t, int8_t, 8b, b, s8,)\n@@ -14743,16 +14746,19 @@ __ST2_LANE_FUNC (uint64x2x2_t, uint64_t, 2d, d, u64, q)\n \n #define __ST3_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n \t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n+  typedef struct { ptrtype __x[3]; } __ST3_LANE_STRUCTURE_##intype;\t\\\n   __extension__ static __inline void\t\t\t\t\t\\\n   __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst3 ## Q ## _lane_ ## funcsuffix (const ptrtype *ptr,\t\t\\\n+  vst3 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n \t\t\t\t     intype b, const int c)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n+    __ST3_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n+\t\t\t\t(__ST3_LANE_STRUCTURE_##intype *)ptr;\t\\\n     __asm__ (\"ld1 {v16.\" #regsuffix \" - v18.\" #regsuffix \"}, %1\\n\\t\"\t\\\n \t     \"st3 {v16.\" #lnsuffix \" - v18.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*(intype *) ptr)\t\t\t\t\t\\\n+\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n \t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"memory\", \"v16\", \"v17\", \"v18\");\t\t\t\t\\\n+\t     : \"v16\", \"v17\", \"v18\");\t\t\t\t\t\\\n   }\n \n __ST3_LANE_FUNC (int8x8x3_t, int8_t, 8b, b, s8,)\n@@ -14782,16 +14788,19 @@ __ST3_LANE_FUNC (uint64x2x3_t, uint64_t, 2d, d, u64, q)\n \n #define __ST4_LANE_FUNC(intype, ptrtype, regsuffix,\t\t\t\\\n \t\t\tlnsuffix, funcsuffix, Q)\t\t\t\\\n+  typedef struct { ptrtype __x[4]; } __ST4_LANE_STRUCTURE_##intype;\t\\\n   __extension__ static __inline void\t\t\t\t\t\\\n   __attribute__ ((__always_inline__))\t\t\t\t\t\\\n-  vst4 ## Q ## _lane_ ## funcsuffix (const ptrtype *ptr,\t\t\\\n+  vst4 ## Q ## _lane_ ## funcsuffix (ptrtype *ptr,\t\t\t\\\n \t\t\t\t     intype b, const int c)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n+    __ST4_LANE_STRUCTURE_##intype *__p =\t\t\t\t\\\n+\t\t\t\t(__ST4_LANE_STRUCTURE_##intype *)ptr;\t\\\n     __asm__ (\"ld1 {v16.\" #regsuffix \" - v19.\" #regsuffix \"}, %1\\n\\t\"\t\\\n \t     \"st4 {v16.\" #lnsuffix \" - v19.\" #lnsuffix \"}[%2], %0\\n\\t\"\t\\\n-\t     : \"=Q\"(*(intype *) ptr)\t\t\t\t\t\\\n+\t     : \"=Q\"(*__p)\t\t\t\t\t\t\\\n \t     : \"Q\"(b), \"i\"(c)\t\t\t\t\t\t\\\n-\t     : \"memory\", \"v16\", \"v17\", \"v18\", \"v19\");\t\t\t\\\n+\t     : \"v16\", \"v17\", \"v18\", \"v19\");\t\t\t\t\\\n   }\n \n __ST4_LANE_FUNC (int8x8x4_t, int8_t, 8b, b, s8,)"}]}