{"sha": "5882f0f31a400e94182c921c39fb4ddd9781517e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4MmYwZjMxYTQwMGU5NDE4MmM5MjFjMzlmYjRkZGQ5NzgxNTE3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-17T01:24:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-17T01:24:06Z"}, "message": "c-common.def (COMPOUND_STMT): Remove.\n\n        * c-common.def (COMPOUND_STMT): Remove.\n        * c-common.c (finish_fname_decls): Don't look through it.\n        * c-typeck.c (c_tree_expr_nonnegative_p): Likewise.\n        * c-common.h (COMPOUND_BODY): Remove.\n        (c_common_stmt_codes): Remove COMPOUND_STMT.\n        * c-dump.c (c_dump_tree): Likewise.\n        * c-gimplify.c (c_gimplify_stmt): Likewise.\n        * c-pretty-print.c (pp_c_statement): Likewise.\n        * tree.h (DECL_SAVED_TREE): Update commentary.\n        * doc/c-tree.texi (ASM_EXPR): Rename from ASM_STMT.\n        (CASE_LABEL_EXPR): Rename from CASE_LABEL.\n        (GOTO_EXPR): Rename from GOTO_STMT.\n        (GOTO_FAKE_P): Remove.\n        (COMPOUND_STMT): Remove.\n        (HANDLER): Update wrt COMPOUND_STMT.\n        (STMT_EXPR): Likewise.\n        (LABEL_EXPR): Rename from LABEL_STMT.\n        (SCOPE_STMT): Remove.\n        * objc/objc-act.c (objc_build_try_catch_finally_stmt): Don't look\n        through COMPOUND_STMT.\ncp/\n        * cp-tree.h (COMPOUND_STMT_TRY_BLOCK, COMPOUND_STMT_BODY_BLOCK): Kill.\n        (BIND_EXPR_TRY_BLOCK, BIND_EXPR_BODY_BLOCK): New.\n        * cxx-pretty-print.c (pp_cxx_function_definition): Move handling\n        of CTOR_INITIALIZER ...\n        (pp_cxx_statement): ... here.\n        * decl.c (begin_function_body): Don't set COMPOUND_STMT_BODY_BLOCK.\n        (finish_function): Use alloc_stmt_list to zap entire function.\n        * parser.c (cp_parser_compound_statement): Update commentary.\n        * pt.c (tsubst_expr): Use BIND_EXPR instead of COMPOUND_STMT.\n        * semantics.c (begin_compound_stmt, finish_compound_stmt): Likewise.\n        (finish_stmt_expr): Don't look through COMPOUND_STMT.\n\nFrom-SVN: r83281", "tree": {"sha": "adae3bbd37c6518542d8e5d8f6e0b08583a9f162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adae3bbd37c6518542d8e5d8f6e0b08583a9f162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5882f0f31a400e94182c921c39fb4ddd9781517e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5882f0f31a400e94182c921c39fb4ddd9781517e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5882f0f31a400e94182c921c39fb4ddd9781517e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5882f0f31a400e94182c921c39fb4ddd9781517e/comments", "author": null, "committer": null, "parents": [{"sha": "9e51cf9da473db64da0af8587a27dab945890990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e51cf9da473db64da0af8587a27dab945890990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e51cf9da473db64da0af8587a27dab945890990"}], "stats": {"total": 238, "additions": 93, "deletions": 145}, "files": [{"sha": "6263dbdf1603d4502f015e3140187f26b517de4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1,3 +1,26 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.def (COMPOUND_STMT): Remove.\n+\t* c-common.c (finish_fname_decls): Don't look through it.\n+\t* c-typeck.c (c_tree_expr_nonnegative_p): Likewise.\n+\t* c-common.h (COMPOUND_BODY): Remove.\n+\t(c_common_stmt_codes): Remove COMPOUND_STMT.\n+\t* c-dump.c (c_dump_tree): Likewise.\n+\t* c-gimplify.c (c_gimplify_stmt): Likewise.\n+\t* c-pretty-print.c (pp_c_statement): Likewise.\n+\t* tree.h (DECL_SAVED_TREE): Update commentary.\n+\t* doc/c-tree.texi (ASM_EXPR): Rename from ASM_STMT.\n+\t(CASE_LABEL_EXPR): Rename from CASE_LABEL.\n+\t(GOTO_EXPR): Rename from GOTO_STMT.\n+\t(GOTO_FAKE_P): Remove.\n+\t(COMPOUND_STMT): Remove.\n+\t(HANDLER): Update wrt COMPOUND_STMT.\n+\t(STMT_EXPR): Likewise.\n+\t(LABEL_EXPR): Rename from LABEL_STMT.\n+\t(SCOPE_STMT): Remove.\n+\t* objc/objc-act.c (objc_build_try_catch_finally_stmt): Don't look\n+\tthrough COMPOUND_STMT.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.h (c_begin_if_stmt, c_begin_while_stmt,"}, {"sha": "ac439e5848537d9ca7cbe042965d413f77224666", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -899,8 +899,6 @@ finish_fname_decls (void)\n     {\n       tree *bodyp = &DECL_SAVED_TREE (current_function_decl);\n \n-      if (TREE_CODE (*bodyp) == COMPOUND_STMT)\n-\tbodyp = &COMPOUND_BODY (*bodyp);\n       if (TREE_CODE (*bodyp) == BIND_EXPR)\n \tbodyp = &BIND_EXPR_BODY (*bodyp);\n "}, {"sha": "b66098a3a27d23795a2a1832bf23bd83b336004f", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -33,10 +33,6 @@ DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", '1', 1)\n    obtain the expression.  */\n DEFTREECODE (EXPR_STMT, \"expr_stmt\", 'e', 1)\n \n-/* Used to represent a brace-enclosed block.  The operand is\n-   COMPOUND_BODY.  */\n-DEFTREECODE (COMPOUND_STMT, \"compound_stmt\", 'e', 1)\n-\n /* Used to represent a local declaration. The operand is\n    DECL_STMT_DECL.  */\n DEFTREECODE (DECL_STMT, \"decl_stmt\", 'e', 1)"}, {"sha": "2f661538e4675c55a7e2dbf6a7bab29b49eb01fb", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -956,12 +956,6 @@ extern void finish_file\t(void);\n \n #define SWITCH_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n \n-/* COMPOUND_STMT accessor. This gives access to the TREE_LIST of\n-   statements associated with a compound statement. The result is the\n-   first statement in the list. Succeeding nodes can be accessed by\n-   calling TREE_CHAIN on a node in the list.  */\n-#define COMPOUND_BODY(NODE)     TREE_OPERAND (COMPOUND_STMT_CHECK (NODE), 0)\n-\n /* DECL_STMT accessor. This gives access to the DECL associated with\n    the given declaration statement.  */\n #define DECL_STMT_DECL(NODE)    TREE_OPERAND (DECL_STMT_CHECK (NODE), 0)\n@@ -1000,7 +994,7 @@ enum c_tree_code {\n #undef DEFTREECODE\n \n #define c_common_stmt_codes\t\t\t\t\\\n-   CLEANUP_STMT,\tEXPR_STMT,\tCOMPOUND_STMT,\t\\\n+   CLEANUP_STMT,\tEXPR_STMT,\t\t\t\\\n    DECL_STMT,\t\tIF_STMT,\tFOR_STMT,\t\\\n    WHILE_STMT,\t\tDO_STMT,\tRETURN_STMT,\t\\\n    BREAK_STMT,\t\tCONTINUE_STMT,\tSWITCH_STMT"}, {"sha": "74ef44db0322df7a9afc8293ce5f1e371554ca0b", "filename": "gcc/c-dump.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -76,12 +76,6 @@ c_dump_tree (void *dump_info, tree t)\n       dump_next_stmt (di, t);\n       break;\n \n-    case COMPOUND_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"body\", COMPOUND_BODY (t));\n-      dump_next_stmt (di, t);\n-      break;\n-\n     case DECL_STMT:\n       dump_stmt (di, t);\n       dump_child (\"decl\", DECL_STMT_DECL (t));"}, {"sha": "933b24faf312d1a0354c884e159972e22e61fac6", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -227,11 +227,6 @@ c_gimplify_stmt (tree *stmt_p)\n \n   switch (TREE_CODE (stmt))\n     {\n-    case COMPOUND_STMT:\n-      stmt = COMPOUND_BODY (stmt);\n-      ret = GS_OK;\n-      break;\n-\n     case FOR_STMT:\n       ret = gimplify_for_stmt (&stmt, &pre);\n       break;"}, {"sha": "490cf809800308a7178be4a799e1cbb39d48d23e", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1909,27 +1909,6 @@ pp_c_statement (c_pretty_printer *pp, tree stmt)\n       }\n       break;\n \n-      /* compound-statement:\n-            {  block-item-list(opt) }\n-\n-         block-item-list:\n-            block-item\n-            block-item-list block-item\n-\n-         block-item:\n-            declaration\n-            statement   */\n-    case COMPOUND_STMT:\n-      if (pp_needs_newline (pp))\n-        pp_newline_and_indent (pp, 0);\n-      pp_c_left_brace (pp);\n-      pp_newline_and_indent (pp, 3);\n-      pp_statement (pp, COMPOUND_BODY (stmt));\n-      pp_newline_and_indent (pp, -3);\n-      pp_c_right_brace (pp);\n-      pp_needs_newline (pp) = true;\n-      break;\n-\n       /* expression-statement:\n             expression(opt) ;  */\n     case EXPR_STMT:"}, {"sha": "434cd575ce0930b27afe43f18bc0e8b311c536f3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -2208,7 +2208,7 @@ int\n c_tree_expr_nonnegative_p (tree t)\n {\n   if (TREE_CODE (t) == STMT_EXPR)\n-    t = expr_last (COMPOUND_BODY (STMT_EXPR_STMT (t)));\n+    t = expr_last (STMT_EXPR_STMT (t));\n   return tree_expr_nonnegative_p (t);\n }\n "}, {"sha": "08ac68f0f0921e93ca59afabfc92f1031d91573d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1,3 +1,17 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-tree.h (COMPOUND_STMT_TRY_BLOCK, COMPOUND_STMT_BODY_BLOCK): Kill.\n+\t(BIND_EXPR_TRY_BLOCK, BIND_EXPR_BODY_BLOCK): New.\n+\t* cxx-pretty-print.c (pp_cxx_function_definition): Move handling\n+\tof CTOR_INITIALIZER ...\n+\t(pp_cxx_statement): ... here.\n+\t* decl.c (begin_function_body): Don't set COMPOUND_STMT_BODY_BLOCK.\n+\t(finish_function): Use alloc_stmt_list to zap entire function.\n+\t* parser.c (cp_parser_compound_statement): Update commentary.\n+\t* pt.c (tsubst_expr): Use BIND_EXPR instead of COMPOUND_STMT.\n+\t* semantics.c (begin_compound_stmt, finish_compound_stmt): Likewise.\n+\t(finish_stmt_expr): Don't look through COMPOUND_STMT.\n+\n 2004-06-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* pt.c (mark_decl_instantiated): Don't call defer_fn."}, {"sha": "36d493c26fd8e07f9ed7779f459f34edb39c4da8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -50,7 +50,7 @@ struct diagnostic_context;\n       KOENIG_LOOKUP_P (in CALL_EXPR)\n       STATEMENT_LIST_NO_SCOPE (in STATEMENT_LIST).\n       EXPR_STMT_STMT_EXPR_RESULT (in EXPR_STMT)\n-      COMPOUND_STMT_TRY_BLOCK (in COMPOUND_STMT)\n+      BIND_EXPR_TRY_BLOCK (in BIND_EXPR)\n    1: IDENTIFIER_VIRTUAL_P.\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -74,7 +74,7 @@ struct diagnostic_context;\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n       IDENTIFIER_CTOR_OR_DTOR_P (in IDENTIFIER_NODE)\n-      COMPOUND_STMT_BODY_BLOCK (in COMPOUND_STMT)\n+      BIND_EXPR_BODY_BLOCK (in BIND_EXPR)\n    4: BINFO_NEW_VTABLE_MARKED.\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n           or FIELD_DECL).\n@@ -271,12 +271,12 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n \n #define CLEANUP_P(NODE)         TREE_LANG_FLAG_0 (TRY_BLOCK_CHECK (NODE))\n \n-#define COMPOUND_STMT_TRY_BLOCK(NODE) \\\n-  TREE_LANG_FLAG_0 (COMPOUND_STMT_CHECK (NODE))\n+#define BIND_EXPR_TRY_BLOCK(NODE) \\\n+  TREE_LANG_FLAG_0 (BIND_EXPR_CHECK (NODE))\n \n /* Used to mark the block around the member initializers and cleanups.  */\n-#define COMPOUND_STMT_BODY_BLOCK(NODE) \\\n-  TREE_LANG_FLAG_3 (COMPOUND_STMT_CHECK (NODE))\n+#define BIND_EXPR_BODY_BLOCK(NODE) \\\n+  TREE_LANG_FLAG_3 (BIND_EXPR_CHECK (NODE))\n \n #define STATEMENT_LIST_NO_SCOPE(NODE) \\\n   TREE_LANG_FLAG_0 (STATEMENT_LIST_CHECK (NODE))"}, {"sha": "a50ecc4114c1274a24d4bddd518c2cfd705c016b", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1304,17 +1304,7 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n   pp_needs_newline (pp) = true;\n   pp->enclosing_scope = DECL_CONTEXT (t);\n   if (DECL_SAVED_TREE (t))\n-    {\n-      tree body = DECL_SAVED_TREE (t);\n-      if (TREE_CODE (body) == COMPOUND_STMT\n-          && TREE_CODE (COMPOUND_BODY (body)) == CTOR_INITIALIZER)\n-        {\n-          body = COMPOUND_BODY (body);\n-          pp_cxx_ctor_initializer (pp, body);\n-          body = TREE_CHAIN (body);\n-        }\n-      pp_cxx_statement (pp, body);\n-    }\n+    pp_cxx_statement (pp, DECL_SAVED_TREE (t));\n   else\n     {\n       pp_cxx_semicolon (pp);\n@@ -1471,6 +1461,10 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n {\n   switch (TREE_CODE (t))\n     {\n+    case CTOR_INITIALIZER:\n+      pp_cxx_ctor_initializer (pp, t);\n+      break;\n+\n     case USING_STMT:\n       pp_cxx_identifier (pp, \"using\");\n       pp_cxx_identifier (pp, \"namespace\");"}, {"sha": "b794b9e96f059f1ff7e1079b56a3a91e7f7eedc5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -10618,7 +10618,6 @@ begin_function_body (void)\n     keep_next_level (true);\n \n   stmt = begin_compound_stmt (BCS_FN_BODY);\n-  COMPOUND_STMT_BODY_BLOCK (stmt) = 1;\n \n   if (processing_template_decl)\n     /* Do nothing now.  */;\n@@ -10743,7 +10742,7 @@ finish_function (int flags)\n \n       /* Throw away the broken statement tree and extra binding\n          levels.  */\n-      DECL_SAVED_TREE (fndecl) = build_stmt (COMPOUND_STMT, NULL_TREE);\n+      DECL_SAVED_TREE (fndecl) = alloc_stmt_list ();\n \n       while (current_binding_level->kind != sk_function_parms)\n \t{"}, {"sha": "91512dee5d7c360a1054d8bfdffe425bd99740cf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -5841,7 +5841,7 @@ cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n    compound-statement:\n      { statement-seq [opt] }\n \n-   Returns a COMPOUND_STMT representing the statement.  */\n+   Returns a tree representing the statement.  */\n \n static tree\n cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,"}, {"sha": "d724a13e6881692eabca83c20e9bf8998f54d4b4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -7931,18 +7931,18 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       }\n       break;\n \n-    case COMPOUND_STMT:\n+    case BIND_EXPR:\n       {\n \tprep_stmt (t);\n-\tif (COMPOUND_STMT_BODY_BLOCK (t))\n+\tif (BIND_EXPR_BODY_BLOCK (t))\n \t  stmt = begin_function_body ();\n \telse\n-\t  stmt = begin_compound_stmt (COMPOUND_STMT_TRY_BLOCK (t)\n+\t  stmt = begin_compound_stmt (BIND_EXPR_TRY_BLOCK (t)\n \t\t\t\t      ? BCS_TRY_BLOCK : 0);\n \n-\ttsubst_expr (COMPOUND_BODY (t), args, complain, in_decl);\n+\ttsubst_expr (BIND_EXPR_BODY (t), args, complain, in_decl);\n \n-\tif (COMPOUND_STMT_BODY_BLOCK (t))\n+\tif (BIND_EXPR_BODY_BLOCK (t))\n \t  finish_function_body (stmt);\n \telse\n \t  finish_compound_stmt (stmt);"}, {"sha": "271092a6c2414460a8a5b1820ca4b8bcd6dd8a79", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -950,9 +950,12 @@ finish_handler (tree handler)\n   HANDLER_BODY (handler) = do_poplevel (HANDLER_BODY (handler));\n }\n \n-/* Begin a compound-statement.  If HAS_NO_SCOPE is true, the\n-   compound-statement does not define a scope.  Returns a new\n-   COMPOUND_STMT.  */\n+/* Begin a compound statement.  FLAGS contains some bits that control the\n+   behaviour and context.  If BCS_NO_SCOPE is set, the compound statement\n+   does not define a scope.  If BCS_FN_BODY is set, this is the outermost\n+   block of a function.  If BCS_TRY_BLOCK is set, this is the block \n+   created on behalf of a TRY statement.  Returns a token to be passed to\n+   finish_compound_stmt.  */\n \n tree\n begin_compound_stmt (unsigned int flags)\n@@ -973,24 +976,30 @@ begin_compound_stmt (unsigned int flags)\n   else\n     r = do_pushlevel (flags & BCS_TRY_BLOCK ? sk_try : sk_block);\n \n-  if (flags & BCS_FN_BODY || processing_template_decl)\n+  /* When processing a template, we need to remember where the braces were,\n+     so that we can set up identical scopes when instantiating the template\n+     later.  BIND_EXPR is a handy candidate for this.\n+     Note that do_poplevel won't create a BIND_EXPR itself here (and thus\n+     result in nested BIND_EXPRs), since we don't build BLOCK nodes when\n+     processing templates.  */\n+  if (processing_template_decl)\n     {\n-      r = build (COMPOUND_STMT, NULL_TREE, r);\n-      COMPOUND_STMT_TRY_BLOCK (r) = (flags & BCS_TRY_BLOCK) != 0;\n-      COMPOUND_STMT_BODY_BLOCK (r) = (flags & BCS_FN_BODY) != 0;\n+      r = build (BIND_EXPR, NULL, NULL, r, NULL);\n+      BIND_EXPR_TRY_BLOCK (r) = (flags & BCS_TRY_BLOCK) != 0;\n+      BIND_EXPR_BODY_BLOCK (r) = (flags & BCS_FN_BODY) != 0;\n       TREE_SIDE_EFFECTS (r) = 1;\n     }\n \n   return r;\n }\n \n-/* Finish a compound-statement, which is given by COMPOUND_STMT.  */\n+/* Finish a compound-statement, which is given by STMT.  */\n \n void\n finish_compound_stmt (tree stmt)\n {\n-  if (TREE_CODE (stmt) == COMPOUND_STMT)\n-    COMPOUND_BODY (stmt) = do_poplevel (COMPOUND_BODY (stmt));\n+  if (TREE_CODE (stmt) == BIND_EXPR)\n+    BIND_EXPR_BODY (stmt) = do_poplevel (BIND_EXPR_BODY (stmt));\n   else if (STATEMENT_LIST_NO_SCOPE (stmt))\n     stmt = pop_stmt_list (stmt);\n   else\n@@ -1456,9 +1465,6 @@ finish_stmt_expr (tree stmt_expr, bool has_no_scope)\n \t    case BIND_EXPR:\n \t      result_stmt_p = &BIND_EXPR_BODY (t);\n \t      break;\n-\t    case COMPOUND_STMT:\n-\t      result_stmt_p = &COMPOUND_BODY (t);\n-\t      break;\n \t    case TRY_FINALLY_EXPR:\n \t    case TRY_CATCH_EXPR:\n \t    case CLEANUP_STMT:"}, {"sha": "3a7fd58b241458231c3088aec1e8da29be16f35c", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 14, "deletions": 58, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1272,18 +1272,10 @@ This predicate holds if the function an overloaded\n @subsection Function Bodies\n @cindex function body\n @cindex statements\n-@tindex ASM_STMT\n-@findex ASM_STRING\n-@findex ASM_CV_QUAL\n-@findex ASM_INPUTS\n-@findex ASM_OUTPUTS\n-@findex ASM_CLOBBERS\n @tindex BREAK_STMT\n @tindex CLEANUP_STMT\n @findex CLEANUP_DECL\n @findex CLEANUP_EXPR\n-@tindex COMPOUND_STMT\n-@findex COMPOUND_BODY\n @tindex CONTINUE_STMT\n @tindex DECL_STMT\n @findex DECL_STMT_DECL\n@@ -1298,23 +1290,14 @@ This predicate holds if the function an overloaded\n @findex FOR_COND\n @findex FOR_EXPR\n @findex FOR_BODY\n-@tindex GOTO_STMT\n-@findex GOTO_DESTINATION\n-@findex GOTO_FAKE_P\n @tindex HANDLER\n @tindex IF_STMT\n @findex IF_COND\n @findex THEN_CLAUSE\n @findex ELSE_CLAUSE\n-@tindex LABEL_STMT\n-@tindex LABEL_STMT_LABEL\n @tindex RETURN_INIT\n @tindex RETURN_STMT\n @findex RETURN_EXPR\n-@tindex SCOPE_STMT\n-@findex SCOPE_BEGIN_P\n-@findex SCOPE_END_P\n-@findex SCOPE_NULLIFIED_P\n @tindex SUBOBJECT\n @findex SUBOBJECT_CLEANUP\n @tindex SWITCH_STMT\n@@ -1335,9 +1318,7 @@ have a non-@code{NULL} @code{DECL_INITIAL}.  However, back ends should not make\n use of the particular value given by @code{DECL_INITIAL}.\n \n The @code{DECL_SAVED_TREE} macro will give the complete body of the\n-function.  This node will usually be a @code{COMPOUND_STMT} representing\n-the outermost block of the function, but it may also be a\n-@code{TRY_BLOCK}, a @code{RETURN_INIT}, or any other valid statement.\n+function.\n \n @subsubsection Statements\n \n@@ -1398,7 +1379,7 @@ compound statement), the intermediate representation will sometimes use\n several statements chained together.\n \n @table @code\n-@item ASM_STMT\n+@item ASM_EXPR\n \n Used to represent an inline assembly statement.  For an inline assembly\n statement like:\n@@ -1425,14 +1406,14 @@ embedded @code{NUL}-characters.\n If the assembly statement is declared @code{volatile}, or if the\n statement was not an extended assembly statement, and is therefore\n implicitly volatile, then the predicate @code{ASM_VOLATILE_P} will hold\n-of the @code{ASM_STMT}.\n+of the @code{ASM_EXPR}.\n \n @item BREAK_STMT\n \n Used to represent a @code{break} statement.  There are no additional\n fields.\n \n-@item CASE_LABEL\n+@item CASE_LABEL_EXPR\n \n Use to represent a @code{case} label, range of @code{case} labels, or a\n @code{default} label.  If @code{CASE_LOW} is @code{NULL_TREE}, then this is a\n@@ -1463,14 +1444,6 @@ expression to execute.  The cleanups executed on exit from a scope\n should be run in the reverse order of the order in which the associated\n @code{CLEANUP_STMT}s were encountered.\n \n-@item COMPOUND_STMT\n-\n-Used to represent a brace-enclosed block.  The first substatement is\n-given by @code{COMPOUND_BODY}.  Subsequent substatements are found by\n-following the @code{TREE_CHAIN} link from one substatement to the next.\n-The @code{COMPOUND_BODY} will be @code{NULL_TREE} if there are no\n-substatements.\n-\n @item CONTINUE_STMT\n \n Used to represent a @code{continue} statement.  There are no additional\n@@ -1521,24 +1494,20 @@ expression increments a counter.  The body of the loop is given by\n return statements, while @code{FOR_COND} and @code{FOR_EXPR} return\n expressions.\n \n-@item GOTO_STMT\n+@item GOTO_EXPR\n \n Used to represent a @code{goto} statement.  The @code{GOTO_DESTINATION} will\n usually be a @code{LABEL_DECL}.  However, if the ``computed goto'' extension\n has been used, the @code{GOTO_DESTINATION} will be an arbitrary expression\n indicating the destination.  This expression will always have pointer type.\n-Additionally the @code{GOTO_FAKE_P} flag is set whenever the goto statement\n-does not come from source code, but it is generated implicitly by the compiler.\n-This is used for branch prediction.\n \n @item HANDLER\n \n Used to represent a C++ @code{catch} block.  The @code{HANDLER_TYPE}\n is the type of exception that will be caught by this handler; it is\n equal (by pointer equality) to @code{NULL} if this handler is for all\n types.  @code{HANDLER_PARMS} is the @code{DECL_STMT} for the catch\n-parameter, and @code{HANDLER_BODY} is the @code{COMPOUND_STMT} for the\n-block itself.\n+parameter, and @code{HANDLER_BODY} is the code for the block itself.\n \n @item IF_STMT\n \n@@ -1562,10 +1531,10 @@ The @code{THEN_CLAUSE} represents the statement given by the @code{then}\n condition, while the @code{ELSE_CLAUSE} represents the statement given\n by the @code{else} condition.\n \n-@item LABEL_STMT\n+@item LABEL_EXPR\n \n Used to represent a label.  The @code{LABEL_DECL} declared by this\n-statement can be obtained with the @code{LABEL_STMT_LABEL} macro.  The\n+statement can be obtained with the @code{LABEL_EXPR_LABEL} macro.  The\n @code{IDENTIFIER_NODE} giving the name of the label can be obtained from\n the @code{LABEL_DECL} with @code{DECL_NAME}.\n \n@@ -1594,17 +1563,6 @@ was just\n return;\n @end smallexample\n \n-@item SCOPE_STMT\n-\n-A scope-statement represents the beginning or end of a scope.  If\n-@code{SCOPE_BEGIN_P} holds, this statement represents the beginning of a\n-scope; if @code{SCOPE_END_P} holds this statement represents the end of\n-a scope.  On exit from a scope, all cleanups from @code{CLEANUP_STMT}s\n-occurring in the scope must be run, in reverse order to the order in\n-which they were encountered.  If @code{SCOPE_NULLIFIED_P} or\n-@code{SCOPE_NO_CLEANUPS_P} holds of the scope, back ends should behave\n-as if the @code{SCOPE_STMT} were not present at all.\n-\n @item SUBOBJECT\n \n In a constructor, these nodes are used to mark the point at which a\n@@ -2259,21 +2217,19 @@ int f() @{ return (@{ int j; j = 3; j + 7; @}); @}\n In other words, an sequence of statements may occur where a single\n expression would normally appear.  The @code{STMT_EXPR} node represents\n such an expression.  The @code{STMT_EXPR_STMT} gives the statement\n-contained in the expression; this is always a @code{COMPOUND_STMT}.  The\n-value of the expression is the value of the last sub-statement in the\n-@code{COMPOUND_STMT}.  More precisely, the value is the value computed\n-by the last @code{EXPR_STMT} in the outermost scope of the\n-@code{COMPOUND_STMT}.  For example, in:\n+contained in the expression.  The value of the expression is the value\n+of the last sub-statement in the body.  More precisely, the value is the\n+value computed by the last statement nested inside @code{BIND_EXPR},\n+@code{TRY_FINALLY_EXPR}, or @code{TRY_CATCH_EXPR}.  For example, in:\n @smallexample\n (@{ 3; @})\n @end smallexample\n the value is @code{3} while in:\n @smallexample\n (@{ if (x) @{ 3; @} @})\n @end smallexample\n-(represented by a nested @code{COMPOUND_STMT}), there is no value.  If\n-the @code{STMT_EXPR} does not yield a value, it's type will be\n-@code{void}.\n+there is no value.  If the @code{STMT_EXPR} does not yield a value,\n+it's type will be @code{void}.\n \n @item BIND_EXPR\n These nodes represent local blocks.  The first operand is a list of"}, {"sha": "8946bd02cc1d9e8d9c79c94d2ecb4d08dcb53c58", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -3144,8 +3144,9 @@ objc_build_try_catch_finally_stmt (int has_catch, int has_finally)\n   /* NB: The operative assumption here is that TRY_FINALLY_EXPR will\n      deal with all exits from 'try_catch_blk' and route them through\n      'finally_blk'.  */\n+  /* ??? This is all crock.  What the hell is this trying to do?  */\n   tree outer_blk = objc_build_finally_epilogue ();\n-  tree prec_stmt = TREE_CHAIN (TREE_CHAIN (COMPOUND_BODY (outer_blk)));\n+  tree prec_stmt = TREE_CHAIN (TREE_CHAIN (outer_blk));\n   tree try_catch_blk = TREE_CHAIN (prec_stmt), try_catch_expr;\n   tree finally_blk = TREE_CHAIN (try_catch_blk), finally_expr;\n   tree succ_stmt = TREE_CHAIN (finally_blk);"}, {"sha": "db32362ec7b55641f84bf8faafd2ccec993d8287", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5882f0f31a400e94182c921c39fb4ddd9781517e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5882f0f31a400e94182c921c39fb4ddd9781517e", "patch": "@@ -1934,8 +1934,7 @@ struct tree_type GTY(())\n #define DECL_THREAD_LOCAL(NODE) (VAR_DECL_CHECK (NODE)->decl.thread_local_flag)\n \n /* In a FUNCTION_DECL, the saved representation of the body of the\n-   entire function.  Usually a COMPOUND_STMT, but in C++ this may also\n-   be a RETURN_INIT, CTOR_INITIALIZER, or TRY_BLOCK.  */\n+   entire function.  */\n #define DECL_SAVED_TREE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.saved_tree)\n \n /* List of FUNCTION_DECLs inlined into this function's body.  */"}]}