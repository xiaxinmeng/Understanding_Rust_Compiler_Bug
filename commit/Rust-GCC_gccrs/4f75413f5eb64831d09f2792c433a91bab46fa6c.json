{"sha": "4f75413f5eb64831d09f2792c433a91bab46fa6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY3NTQxM2Y1ZWI2NDgzMWQwOWYyNzkyYzQzM2E5MWJhYjQ2ZmE2Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-15T19:49:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-15T19:49:33Z"}, "message": "re PR c++/50732 ([type_traits] is_base_of<Base, Derived> unnecessarily instantiates Base (which shouldn't be instantiated))\n\n/cp\n2011-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50732\n\t* semantics.c (finish_trait_expr): Do not try to instantiate the\n\tthe base type of an __is_base_of trait.\n\t(check_trait_type): Return a tree; use complete_type_or_else.\n\n/testsuite\n2011-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50732\n\t* g++.dg/ext/is_base_of_incomplete.C: New.\n\t* g++.dg/ext/is_base_of_diagnostic.C: Adjust dg-errors.\n\t* g++.dg/ext/unary_trait_incomplete.C: Likewise.\n\nFrom-SVN: r180048", "tree": {"sha": "926a7708203d24fbbb6e3f7f99596c230ab2c51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926a7708203d24fbbb6e3f7f99596c230ab2c51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f75413f5eb64831d09f2792c433a91bab46fa6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f75413f5eb64831d09f2792c433a91bab46fa6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f75413f5eb64831d09f2792c433a91bab46fa6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f75413f5eb64831d09f2792c433a91bab46fa6c/comments", "author": null, "committer": null, "parents": [{"sha": "2635892a1c64fc7e5b8c1c13d53dd0468ffc757d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2635892a1c64fc7e5b8c1c13d53dd0468ffc757d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2635892a1c64fc7e5b8c1c13d53dd0468ffc757d"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "c2c452d2cd5c44edb66ad6ab4444981fcc53eba3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -1,3 +1,10 @@\n+2011-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50732\n+\t* semantics.c (finish_trait_expr): Do not try to instantiate the\n+\tthe base type of an __is_base_of trait.\n+\t(check_trait_type): Return a tree; use complete_type_or_else.\n+\n 2011-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50563"}, {"sha": "1efe57907b0ce850a8bf49c07a4c6fa0c47f9734", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -5210,23 +5210,20 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n     }\n }\n \n-/* Returns true if TYPE is a complete type, an array of unknown bound,\n-   or (possibly cv-qualified) void, returns false otherwise.  */\n+/* If TYPE is an array of unknown bound, or (possibly cv-qualified)\n+   void, or a complete type, returns it, otherwise NULL_TREE.  */\n \n-static bool\n+static tree\n check_trait_type (tree type)\n {\n-  if (COMPLETE_TYPE_P (type))\n-    return true;\n-\n   if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type)\n       && COMPLETE_TYPE_P (TREE_TYPE (type)))\n-    return true;\n+    return type;\n \n   if (VOID_TYPE_P (type))\n-    return true;\n+    return type;\n \n-  return false;\n+  return complete_type_or_else (strip_array_types (type), NULL_TREE);\n }\n \n /* Process a trait expression.  */\n@@ -5276,10 +5273,6 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n       return trait_expr;\n     }\n \n-  complete_type (type1);\n-  if (type2)\n-    complete_type (type2);\n-\n   switch (kind)\n     {\n     case CPTK_HAS_NOTHROW_ASSIGN:\n@@ -5298,20 +5291,15 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n     case CPTK_IS_STD_LAYOUT:\n     case CPTK_IS_TRIVIAL:\n       if (!check_trait_type (type1))\n-\t{\n-\t  error (\"incomplete type %qT not allowed\", type1);\n-\t  return error_mark_node;\n-\t}\n+\treturn error_mark_node;\n       break;\n \n     case CPTK_IS_BASE_OF:\n       if (NON_UNION_CLASS_TYPE_P (type1) && NON_UNION_CLASS_TYPE_P (type2)\n \t  && !same_type_ignoring_top_level_qualifiers_p (type1, type2)\n-\t  && !COMPLETE_TYPE_P (type2))\n-\t{\n-\t  error (\"incomplete type %qT not allowed\", type2);\n-\t  return error_mark_node;\n-\t}\n+\t  && !complete_type_or_else (type2, NULL_TREE))\n+\t/* We already issued an error.  */\n+\treturn error_mark_node;\n       break;\n \n     case CPTK_IS_CLASS:"}, {"sha": "ce5705ec7ff7e9bf18ab7149d6b3f4d428ebaaf8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -1,3 +1,10 @@\n+2011-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50732\n+\t* g++.dg/ext/is_base_of_incomplete.C: New.\n+\t* g++.dg/ext/is_base_of_diagnostic.C: Adjust dg-errors.\n+\t* g++.dg/ext/unary_trait_incomplete.C: Likewise.\n+\n 2011-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/combined-1.c: Compile at -O2."}, {"sha": "4ccc72b9e943ac22c8cf8802daab797fe080c34b", "filename": "gcc/testsuite/g++.dg/ext/is_base_of_diagnostic.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_diagnostic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_diagnostic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_diagnostic.C?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -1,7 +1,7 @@\n class A\n { };\n \n-class B;\n+class B; // { dg-error \"forward declaration\" }\n \n union C\n { };"}, {"sha": "4704ff5dee123049ce4595f3bd3d1e875f9a8630", "filename": "gcc/testsuite/g++.dg/ext/is_base_of_incomplete.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_incomplete.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_incomplete.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_base_of_incomplete.C?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/50732\n+\n+template <typename T>\n+struct non_instantiable\n+{\n+  typedef typename T::THIS_TYPE_CANNOT_BE_INSTANTIATED type;\n+};\n+\n+int check[__is_base_of(non_instantiable<int>, void) ? -1 : 1];"}, {"sha": "ecc5ec224b3002640e5bfe8146ce16c452703c46", "filename": "gcc/testsuite/g++.dg/ext/unary_trait_incomplete.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f75413f5eb64831d09f2792c433a91bab46fa6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Funary_trait_incomplete.C?ref=4f75413f5eb64831d09f2792c433a91bab46fa6c", "patch": "@@ -1,6 +1,6 @@\n // PR c++/39475\n \n-struct I;\n+struct I; // { dg-error \"forward declaration\" }\n struct C { };\n \n bool nas1 = __has_nothrow_assign(I); // { dg-error \"incomplete type\" }"}]}