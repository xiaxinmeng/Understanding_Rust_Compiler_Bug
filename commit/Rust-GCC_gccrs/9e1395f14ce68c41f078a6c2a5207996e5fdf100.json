{"sha": "9e1395f14ce68c41f078a6c2a5207996e5fdf100", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxMzk1ZjE0Y2U2OGM0MWYwNzhhNmMyYTUyMDc5OTZlNWZkZjEwMA==", "commit": {"author": {"name": "James A. Morrison", "email": "ja2morri@uwaterloo.ca", "date": "2004-03-26T11:13:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-26T11:13:48Z"}, "message": "config.gcc: Remove sparc-tti-*.\n\n\t* config.gcc: Remove sparc-tti-*.\n\t* config/sparc/pbd.h: Delete.\n\n\t* config/sparc/sol2.h: Remove note about Sun OS 4.x.\n\t* config/sparc/aout.h: Likewise.\n\n\t* config/sparc/sparc.h: Remove if 0'd code.\n\t* config/sparc/sparc.md (call): Remove if 0'd code.\n\t(call_value): Likewise.\n\t(nonlocal_goto): Likewise.\n\t(unimp_insn): Delete.\n\nFrom-SVN: r79980", "tree": {"sha": "791d6370437bde18eebb5f25f84a9a2112a2b1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791d6370437bde18eebb5f25f84a9a2112a2b1a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1395f14ce68c41f078a6c2a5207996e5fdf100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1395f14ce68c41f078a6c2a5207996e5fdf100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1395f14ce68c41f078a6c2a5207996e5fdf100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1395f14ce68c41f078a6c2a5207996e5fdf100/comments", "author": null, "committer": null, "parents": [{"sha": "22e63bd346c056fb94086e0797eda465fbe7a7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e63bd346c056fb94086e0797eda465fbe7a7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e63bd346c056fb94086e0797eda465fbe7a7ac"}], "stats": {"total": 230, "additions": 23, "deletions": 207}, "files": [{"sha": "b41b630fa8c18801b202c52054bc04445af7f4bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -1,3 +1,17 @@\n+2004-03-26  James A. Morrison  <ja2morri@uwaterloo.ca>\n+\n+\t* config.gcc: Remove sparc-tti-*.\n+\t* config/sparc/pbd.h: Delete.\n+\n+\t* config/sparc/sol2.h: Remove note about Sun OS 4.x.\n+\t* config/sparc/aout.h: Likewise.\n+\n+\t* config/sparc/sparc.h: Remove if 0'd code.\n+\t* config/sparc/sparc.md (call): Remove if 0'd code.\n+\t(call_value): Likewise.\n+\t(nonlocal_goto): Likewise.\n+\t(unimp_insn): Delete.\n+\n 2004-03-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (tree_expr_nonnegative_p): Handle BIT_XOR_EXPR like"}, {"sha": "9be962c21112000eb67ca1c279a594c8639a08ee", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -1784,10 +1784,6 @@ sh-*-*)\n \ttm_file=\"${tm_file} dbxcoff.h sh/coff.h\"\n \tuse_fixproto=yes\n \t;;\n-sparc-tti-*)\n-\ttm_file=\"${tm_file} sparc/pbd.h\"\n-\tuse_fixproto=yes\n-\t;;\n sparc-*-netbsdelf*)\n \ttm_file=\"${tm_file} elfos.h svr4.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n \t;;"}, {"sha": "5c5e6226888863e4a85ff70a133818ec5790e3ff", "filename": "gcc/config/sparc/aout.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Faout.h?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -48,10 +48,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* This is how to output a note to DBX telling it the line number\n-   to which the following sequence of instructions corresponds.\n-\n-   This is needed for SunOS 4.0, and should not hurt for 3.2\n-   versions either.  */\n+   to which the following sequence of instructions corresponds.  */\n #define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n   fprintf (file, \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\\\n \t   line, counter, counter)"}, {"sha": "650ad68d8dd027e8e05143e9bb415ea3ff40646e", "filename": "gcc/config/sparc/pbd.h", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e63bd346c056fb94086e0797eda465fbe7a7ac/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e63bd346c056fb94086e0797eda465fbe7a7ac/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=22e63bd346c056fb94086e0797eda465fbe7a7ac", "patch": "@@ -1,145 +0,0 @@\n-/* Definitions of target machine for GNU compiler, Citicorp/TTI Unicom PBD\n-   version (using GAS and COFF (encapsulated is unacceptable) )\n-   Copyright (C) 1990, 1996, 2000, 2004 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* Target OS builtins.  */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"unix\");\t\t\\\n-\tbuiltin_define_std (\"UnicomPBD\");\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* We want DBX format for use with gdb under COFF.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-\n-/* Generate calls to memcpy, memcmp and memset.  */\n-\n-#define TARGET_MEM_FUNCTIONS\n-\n-/* we use /lib/libp/lib*  when profiling */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{p:-L/usr/lib/libp} %{pg:-L/usr/lib/libp} -lc\"\n-\n-\n-/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n-/*\n- * The loader directive file gcc.ifile defines how to merge the constructor \n- * sections into the data section.  Also, since gas only puts out those \n- * sections in response to N_SETT stabs, and does not (yet) have a \n- * \".sections\" directive, gcc.ifile also defines the list symbols \n- * __DTOR_LIST__ and __CTOR_LIST__.\n- * \n- * Finally, we must explicitly specify the file from libgcc.a that defines\n- * exit(), otherwise if the user specifies (for example) \"-lc_s\" on the \n- * command line, the wrong exit() will be used and global destructors will \n- * not get called .\n- */\n-\n-#define STARTFILE_SPEC \\\n-\"%{!r: gcc.ifile%s} %{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}} \\\n-%{!r:_exit.o%s}\"\n-\n-#define ENDFILE_SPEC \"crtn.o%s\"\n-\n-/* LINK_SPEC is needed only for SunOS 4.  */\n-\n-#undef LINK_SPEC\n-\n-/* Although the gas we use can create .ctor and .dtor sections from N_SETT\n-   stabs, it does not support section directives, so we need to have the loader\n-   define the lists.\n-   */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n-/* similar to default, but allows for the table defined by ld with gcc.ifile. \n-   nptrs is always 0.  So we need to instead check that __DTOR_LIST__[1] != 0.\n-   The old check is left in so that the same macro can be used if and when  \n-   a future version of gas does support section directives.  */\n-\n-#define DO_GLOBAL_DTORS_BODY {int nptrs = *(int *)__DTOR_LIST__; int i; \\\n-  if (nptrs == -1 || (__DTOR_LIST__[0] == 0 && __DTOR_LIST__[1] != 0))  \\\n-    for (nptrs = 0; __DTOR_LIST__[nptrs + 1] != 0; nptrs++); \t\t\\\n-  for (i = nptrs; i >= 1; i--)\t\t\t\t\t\t\\\n-    __DTOR_LIST__[i] (); }\n-\n-/* \n- * Here is an example gcc.ifile.  I've tested it on PBD sparc\n- * systems. The NEXT(0x200000) works on just about all 386 and m68k systems, \n- * but can be reduced to any power of 2 that is >= NBPS (0x40000 on a pbd).\n-\n-   SECTIONS {\n-       .text BIND(0x41000200) BLOCK (0x200) : \n-\t\t{ *(.init) *(.text) vfork = fork; *(.fini) }\n-\n-      \tGROUP BIND( NEXT(0x200000) + ADDR(.text) + SIZEOF(.text)):\n-\t{      .data : { __CTOR_LIST__ = . ; . += 4; *(.ctor) . += 4 ;\n-\t\t       \t __DTOR_LIST__ = . ; . += 4; *(.dtor) . += 4 ; }\n-\t       .bss : { }\n-       }\n-  }\n- */\n-\n-/* The prefix to add to user-visible assembler symbols.  */\n-\n-#undef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-\n-/* fixes: */\n-/*\n- *  Internal labels are prefixed with a period.\n- */\n-\n-#undef  LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX  \".\"\n-\n-/* This is how to store into the string LABEL\n-   the symbol_ref name of an internal numbered label where\n-   PREFIX is the class of label and NUM is the number within the class.\n-   This is suitable for output with `assemble_name'.  */\n-\n-#undef ASM_GENERATE_INTERNAL_LABEL\n-#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)                   \\\n-        sprintf (LABEL, \"*.%s%ld\", PREFIX, (long)(NUM))\n-\n-/* This is how to output an element of a case-vector that is relative.  */\n-\n-#undef  ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)  \\\n-  fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL)\n-\n-/* This is how to output an element of a case-vector that is absolute.\n-   (The 68000 does not use such vectors,\n-   but we must define this macro anyway.)  */\n-\n-#undef ASM_OUTPUT_ADDR_VEC_ELT\n-#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-  fprintf (FILE, \"\\t.word .L%d\\n\", VALUE)\n-\n-/* This is needed for SunOS 4.0, and should not hurt for 3.2\n-   versions either.  */\n-#undef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n-  fprintf (file, \".stabn 68,0,%d,.LM%d\\n.LM%d:\\n\",\t\\\n-\t   line, counter, counter)"}, {"sha": "fcfc75976859aa52dac07c8d7c9370df30839ec2", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -130,8 +130,6 @@ Boston, MA 02111-1307, USA.  */\n #undef SUPPORTS_INIT_PRIORITY\n #define SUPPORTS_INIT_PRIORITY 0\n \f\n-/* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.\n-   Instead, it is enabled here, because it does work under Solaris.  */\n /* Define for support of TFmode long double.\n    SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE 128"}, {"sha": "768525be312b5ebf85468ac338925e53a6282cab", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -699,14 +699,9 @@ extern struct sparc_cpu_select sparc_select[];\n #define LONG_LONG_TYPE_SIZE\t64\n #define FLOAT_TYPE_SIZE\t\t32\n #define DOUBLE_TYPE_SIZE\t64\n-\n-#if 0\n-/* ??? This does not work in SunOS 4.x, so it is not enabled here.\n-   Instead, it is enabled in sol2.h, because it does work under Solaris.  */\n-/* Define for support of TFmode long double.\n-   SPARC ABI says that long double is 4 words.  */\n-#define LONG_DOUBLE_TYPE_SIZE 128\n-#endif\n+/* LONG_DOUBLE_TYPE_SIZE is defined per OS even though the\n+   SPARC ABI says that it is 128-bit wide.  */\n+/* #define LONG_DOUBLE_TYPE_SIZE\t128 */\n \n /* Width in bits of a pointer.\n    See also the macro `Pmode' defined below.  */"}, {"sha": "2c388f99c8a7207fd85ede4f7827f511015172b7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1395f14ce68c41f078a6c2a5207996e5fdf100/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9e1395f14ce68c41f078a6c2a5207996e5fdf100", "patch": "@@ -7309,15 +7309,6 @@\n   \"jmp\\t%a0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-;; This pattern recognizes the \"instruction\" that appears in \n-;; a function call that wants a structure value, \n-;; to inform the called function if compiled with Sun CC.\n-;(define_insn \"*unimp_insn\"\n-;  [(match_operand:SI 0 \"immediate_operand\" \"\")]\n-;  \"GET_CODE (operands[0]) == CONST_INT && INTVAL (operands[0]) > 0\"\n-;  \"unimp\\t%0\"\n-;  [(set_attr \"type\" \"marker\")])\n-\n ;;- jump to subroutine\n (define_expand \"call\"\n   ;; Note that this expression is not used for generating RTL.\n@@ -7328,7 +7319,7 @@\n   ;; operands[3] is struct_value_size_rtx.\n   \"\"\n {\n-  rtx fn_rtx, nregs_rtx;\n+  rtx fn_rtx;\n \n    if (GET_MODE (operands[0]) != FUNCTION_MODE)\n     abort ();\n@@ -7362,42 +7353,21 @@\n \n   fn_rtx = operands[0];\n \n-  /* Count the number of parameter registers being used by this call.\n-     if that argument is NULL, it means we are using them all, which\n-     means 6 on the sparc.  */\n-#if 0\n-  if (operands[2])\n-    nregs_rtx = GEN_INT (REGNO (operands[2]) - 8);\n-  else\n-    nregs_rtx = GEN_INT (6);\n-#else\n-  nregs_rtx = const0_rtx;\n-#endif\n-\n   if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n     emit_call_insn\n       (gen_rtx_PARALLEL\n        (VOIDmode,\n-\tgen_rtvec (3, gen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx),\n+\tgen_rtvec (3, gen_rtx_CALL (VOIDmode, fn_rtx, const0_rtx),\n \t\t   operands[3],\n \t\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)))));\n   else\n     emit_call_insn\n       (gen_rtx_PARALLEL\n        (VOIDmode,\n-\tgen_rtvec (2, gen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx),\n+\tgen_rtvec (2, gen_rtx_CALL (VOIDmode, fn_rtx, const0_rtx),\n \t\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)))));\n \n  finish_call:\n-#if 0\n-  /* If this call wants a structure value,\n-     emit an unimp insn to let the called function know about this.  */\n-  if (! TARGET_ARCH64 && INTVAL (operands[3]) > 0)\n-    {\n-      rtx insn = emit_insn (operands[3]);\n-      SCHED_GROUP_P (insn) = 1;\n-    }\n-#endif\n \n   DONE;\n })\n@@ -7502,26 +7472,17 @@\n   ;; operand 3 is next_arg_register\n   \"\"\n {\n-  rtx fn_rtx, nregs_rtx;\n+  rtx fn_rtx;\n   rtvec vec;\n \n   if (GET_MODE (operands[1]) != FUNCTION_MODE)\n     abort ();\n \n   fn_rtx = operands[1];\n \n-#if 0\n-  if (operands[3])\n-    nregs_rtx = GEN_INT (REGNO (operands[3]) - 8);\n-  else\n-    nregs_rtx = GEN_INT (6);\n-#else\n-  nregs_rtx = const0_rtx;\n-#endif\n-\n   vec = gen_rtvec (2,\n \t\t   gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\tgen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx)),\n+\t\t\t\tgen_rtx_CALL (VOIDmode, fn_rtx, const0_rtx)),\n \t\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)));\n \n   emit_call_insn (gen_rtx_PARALLEL (VOIDmode, vec));"}]}