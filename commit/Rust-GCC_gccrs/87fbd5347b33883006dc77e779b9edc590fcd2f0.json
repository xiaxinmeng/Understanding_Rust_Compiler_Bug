{"sha": "87fbd5347b33883006dc77e779b9edc590fcd2f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmYmQ1MzQ3YjMzODgzMDA2ZGM3N2U3NzliOWVkYzU5MGZjZDJmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-03T21:03:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-03T22:52:17Z"}, "message": "c++: Fix constexpr vs. reference parameter.\n\n[expr.const] specifically rules out mentioning a reference even if its\naddress is never used, because it implies indirection that is similarly\nnon-constant for a pointer variable.\n\n\tPR c++/66477\n\t* constexpr.c (cxx_eval_constant_expression) [PARM_DECL]: Don't\n\tdefer loading the value of a reference.", "tree": {"sha": "348baf29ff78fbda5e5cbdf5556c0aeebb6509d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/348baf29ff78fbda5e5cbdf5556c0aeebb6509d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fbd5347b33883006dc77e779b9edc590fcd2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fbd5347b33883006dc77e779b9edc590fcd2f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fbd5347b33883006dc77e779b9edc590fcd2f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fbd5347b33883006dc77e779b9edc590fcd2f0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "8b352134aa73d6cf50c7e24b546145d70311672c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87fbd5347b33883006dc77e779b9edc590fcd2f0", "patch": "@@ -1,3 +1,9 @@\n+2020-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66477\n+\t* constexpr.c (cxx_eval_constant_expression) [PARM_DECL]: Don't\n+\tdefer loading the value of a reference.\n+\n 2020-02-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91953"}, {"sha": "3962763fb21a6e47a5e1d0325f8965c52e656504", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=87fbd5347b33883006dc77e779b9edc590fcd2f0", "patch": "@@ -5322,8 +5322,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tr = *p;\n       else if (lval)\n \t/* Defer in case this is only used for its type.  */;\n-      else if (TYPE_REF_P (TREE_TYPE (t)))\n-\t/* Defer, there's no lvalue->rvalue conversion.  */;\n       else if (COMPLETE_TYPE_P (TREE_TYPE (t))\n \t       && is_really_empty_class (TREE_TYPE (t), /*ignore_vptr*/false))\n \t{"}, {"sha": "1c0651203147756fc4c32eafd35afb20bc74f57c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array-ptr6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr6.C?ref=87fbd5347b33883006dc77e779b9edc590fcd2f0", "patch": "@@ -12,7 +12,7 @@ constexpr auto sz_d = size(array_double);\n static_assert(sz_d == 3, \"Array size failure\");\n \n void f(bool (&param)[2]) {\n-  static_assert(size(param) == 2, \"Array size failure\"); // Line 13\n+  static_assert(size(param) == 2, \"Array size failure\"); // { dg-error \"\" }\n   short data[] = {-1, 2, -45, 6, 88, 99, -345};\n   static_assert(size(data) == 7, \"Array size failure\");\n }"}, {"sha": "7c3ce66b4c913726cbb38b83de4134a8053f2fc8", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref12.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref12.C?ref=87fbd5347b33883006dc77e779b9edc590fcd2f0", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/66477\n+// { dg-do compile { target c++11 } }\n+\n+struct a { constexpr bool g() const { return true; } };\n+constexpr bool g(a&) { return true;}\n+constexpr bool h(a) { return true;}\n+\n+a a1;\n+a& ar = a1;\n+\n+void f(a ap, a& arp)\n+{\n+  a a2;\n+  a& ar2 = a2;\n+\n+  // Most of these are OK because no data is actually loaded.\n+  static_assert (a1.g(),\"\");\n+  static_assert (g(a1),\"\");\n+  static_assert (h(a1),\"\");\n+\n+  static_assert (a2.g(),\"\");\n+  static_assert (g(a2),\"\");\n+  static_assert (h(a2),\"\");\n+\n+  static_assert (ap.g(),\"\");\n+  static_assert (g(ap),\"\");\n+  static_assert (h(ap),\"\");\n+\n+  static_assert (ar.g(),\"\");\n+  static_assert (g(ar),\"\");\n+  static_assert (h(ar),\"\");\n+\n+  // But these are specifically prohibited in [expr.const]/4.12:\n+  // * an id-expression that refers to a variable or data member of reference\n+  //   type unless the reference has a preceding initialization and either\n+  // ** it is usable in constant expressions or\n+  // ** its lifetime began within the evaluation of e;\n+\n+  static_assert (ar2.g(),\"\");\t// { dg-error \"constant\" }\n+  static_assert (g(ar2),\"\");\t// { dg-error \"constant\" }\n+  static_assert (h(ar2),\"\");\t// { dg-error \"constant\" }\n+\n+  static_assert (arp.g(),\"\");\t// { dg-error \"constant\" }\n+  static_assert (g(arp),\"\");\t// { dg-error \"constant\" }\n+  static_assert (h(arp),\"\");\t// { dg-error \"constant\" }\n+}"}, {"sha": "2f48dae47465013810609cdea1df5925fe078990", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fbd5347b33883006dc77e779b9edc590fcd2f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C?ref=87fbd5347b33883006dc77e779b9edc590fcd2f0", "patch": "@@ -11,7 +11,7 @@ int main()\n   constexpr auto x = f(); //ok, call constexpr const non-static method\n \n   [](auto const &f) {\n-    constexpr auto x = f(); /*ok*/\n+    constexpr auto x = f();\t// { dg-error \"\" }\n   }(f);\n \n   [&]() {"}]}