{"sha": "46aad78f22f0d84855daed56e7369e73e31c8c26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhYWQ3OGYyMmYwZDg0ODU1ZGFlZDU2ZTczNjllNzNlMzFjOGMyNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-27T16:31:29Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-27T16:31:29Z"}, "message": "re PR tree-optimization/21658 (CCP does not propagate ADDR_EXPR far enough.)\n\ngcc/\n\tPR tree-optimization/21658\n\t* tree-ssa-ccp.c (ccp_fold): Call fold_binary instead of\n\tfold_binary_to_constant.  Likewise, call fold_unary instead of\n\tfold_unary_to_constant.\n\ntestsuite/\n\tPR tree-optimization/21658\n\t* gcc.dg/tree-ssa/pr21658.c: New.\n\nFrom-SVN: r100266", "tree": {"sha": "f43746efbc3b2066008ddcc71e7b5829eb7349b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43746efbc3b2066008ddcc71e7b5829eb7349b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46aad78f22f0d84855daed56e7369e73e31c8c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aad78f22f0d84855daed56e7369e73e31c8c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46aad78f22f0d84855daed56e7369e73e31c8c26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aad78f22f0d84855daed56e7369e73e31c8c26/comments", "author": null, "committer": null, "parents": [{"sha": "8b60fb432a133613e348278fa9037d70c3243cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b60fb432a133613e348278fa9037d70c3243cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b60fb432a133613e348278fa9037d70c3243cd3"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "557ed56c0e43301b23c355f3776fc72b6417a1c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46aad78f22f0d84855daed56e7369e73e31c8c26", "patch": "@@ -1,3 +1,10 @@\n+2005-05-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21658\n+\t* tree-ssa-ccp.c (ccp_fold): Call fold_binary instead of\n+\tfold_binary_to_constant.  Likewise, call fold_unary instead of\n+\tfold_unary_to_constant.\n+\n 2005-05-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* vec.h: Implement integral type vector specialization."}, {"sha": "efeae615a679e138d935c101bb3ae9301ddf0fdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46aad78f22f0d84855daed56e7369e73e31c8c26", "patch": "@@ -1,3 +1,8 @@\n+2005-05-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21658\n+\t* gcc.dg/tree-ssa/pr21658.c: New.\n+\n 2005-05-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21455"}, {"sha": "993b493bb4dd66a6b20b7884cf88e8243a5daf7d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21658.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21658.c?ref=46aad78f22f0d84855daed56e7369e73e31c8c26", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/21658\n+   CCP did not propagate an ADDR_EXPR far enough, preventing the \"if\"\n+   statement below from being folded.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-ccp-details\" } */\n+\n+void link_error (void);\n+\n+void\n+f (void)\n+{\n+  int a[10];\n+  int *p = &a[5];\n+  int *q = p - 1;\n+  if (q != &a[4])\n+    link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"with if \\\\(0\\\\)\" 1 \"ccp\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp\" } } */"}, {"sha": "c1593f884c3726f14cfa4f7d57da80f9f4142166", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aad78f22f0d84855daed56e7369e73e31c8c26/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=46aad78f22f0d84855daed56e7369e73e31c8c26", "patch": "@@ -849,7 +849,7 @@ ccp_fold (tree stmt)\n \t    op0 = get_value (op0, true)->value;\n \t}\n \n-      retval = fold_unary_to_constant (code, TREE_TYPE (rhs), op0);\n+      retval = fold_unary (code, TREE_TYPE (rhs), op0);\n \n       /* If we folded, but did not create an invariant, then we can not\n \t use this expression.  */\n@@ -900,7 +900,7 @@ ccp_fold (tree stmt)\n \t    op1 = val->value;\n \t}\n \n-      retval = fold_binary_to_constant (code, TREE_TYPE (rhs), op0, op1);\n+      retval = fold_binary (code, TREE_TYPE (rhs), op0, op1);\n \n       /* If we folded, but did not create an invariant, then we can not\n \t use this expression.  */"}]}