{"sha": "f089723609077cd38821c15ad042a45936f949e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4OTcyMzYwOTA3N2NkMzg4MjFjMTVhZDA0MmE0NTkzNmY5NDllNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-25T12:51:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-25T12:51:50Z"}, "message": "Add support for empty struct initilizer\n\nRust supports unit struct initilization such as S{} this takes this tree\nand resolves it fully. This should really be all desugared via HIR but that\nis in progress in another PR.", "tree": {"sha": "d8f8f094efbc8806111f4ee9b450792853852a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f8f094efbc8806111f4ee9b450792853852a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f089723609077cd38821c15ad042a45936f949e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f089723609077cd38821c15ad042a45936f949e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f089723609077cd38821c15ad042a45936f949e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f089723609077cd38821c15ad042a45936f949e6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "fc8ad814c5dcb5d06a5a76893d687c14a6540f83", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f089723609077cd38821c15ad042a45936f949e6", "patch": "@@ -527,6 +527,20 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n+  void visit (HIR::StructExprStruct &struct_expr) override\n+  {\n+    TyTy::BaseType *tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (\n+\t  struct_expr.get_mappings ().get_hirid (), &tyty))\n+      {\n+\trust_error_at (struct_expr.get_locus (), \"unknown type\");\n+\treturn;\n+      }\n+\n+    rust_assert (tyty->is_unit ());\n+    translated = ctx->get_backend ()->unit_expression ();\n+  }\n+\n   void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;"}, {"sha": "19ce8c2cf1f8fdae150e3e08c980aa29410cbbbe", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=f089723609077cd38821c15ad042a45936f949e6", "patch": "@@ -467,6 +467,24 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t expr.get_locus ());\n   }\n \n+  void visit (AST::StructExprStruct &struct_expr) override\n+  {\n+    HIR::PathInExpression *path\n+      = ASTLowerPathInExpression::translate (&struct_expr.get_struct_name ());\n+    HIR::PathInExpression copied_path (*path);\n+    delete path;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, struct_expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::StructExprStruct (mapping, copied_path,\n+\t\t\t\t\t    struct_expr.get_inner_attrs (),\n+\t\t\t\t\t    struct_expr.get_outer_attrs (),\n+\t\t\t\t\t    struct_expr.get_locus ());\n+  }\n+\n   void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     // bit of a hack for now"}, {"sha": "bbd88188ed617682928969862178d10dbb7f5eaf", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=f089723609077cd38821c15ad042a45936f949e6", "patch": "@@ -219,6 +219,14 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (elems.get_elem_to_copy ().get (), elems.get_node_id ());\n   }\n \n+  // this this an empty struct constructor like 'S {}'\n+  void visit (AST::StructExprStruct &struct_expr) override\n+  {\n+    ResolveExpr::go (&struct_expr.get_struct_name (),\n+\t\t     struct_expr.get_node_id ());\n+  }\n+\n+  // this this a struct constructor with fields\n   void visit (AST::StructExprStructFields &struct_expr) override\n   {\n     ResolveExpr::go (&struct_expr.get_struct_name (),"}, {"sha": "bdebfd3d4cf6b1821ef1525e96e6db0ee20607a8", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f089723609077cd38821c15ad042a45936f949e6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f089723609077cd38821c15ad042a45936f949e6", "patch": "@@ -827,6 +827,21 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (elems.get_elem_to_copy (), false);\n   }\n \n+  // empty struct\n+  void visit (HIR::StructExprStruct &struct_expr) override\n+  {\n+    TyTy::BaseType *struct_path_ty\n+      = TypeCheckExpr::Resolve (&struct_expr.get_struct_name (), false);\n+    if (struct_path_ty->get_kind () != TyTy::TypeKind::ADT)\n+      {\n+\trust_error_at (struct_expr.get_struct_name ().get_locus (),\n+\t\t       \"expected an ADT type for constructor\");\n+\treturn;\n+      }\n+\n+    infered = struct_path_ty;\n+  }\n+\n   void visit (HIR::StructExprStructFields &struct_expr) override\n   {\n     infered = TypeCheckStructExpr::Resolve (&struct_expr);"}, {"sha": "ccbfa21818af8a7759a7d074830cd84556bfe4e1", "filename": "gcc/testsuite/rust/compile/torture/unit_type4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f089723609077cd38821c15ad042a45936f949e6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f089723609077cd38821c15ad042a45936f949e6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type4.rs?ref=f089723609077cd38821c15ad042a45936f949e6", "patch": "@@ -0,0 +1,5 @@\n+struct S;\n+\n+fn main() {\n+    let _s = S {};\n+}"}]}