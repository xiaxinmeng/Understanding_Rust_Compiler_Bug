{"sha": "c7b1f30258f6dbf26705d86343b8cd402376cb70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiMWYzMDI1OGY2ZGJmMjY3MDVkODYzNDNiOGNkNDAyMzc2Y2I3MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-06T08:18:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-06T08:21:15Z"}, "message": "Remove std::map use from graphite\n\nThis replaces the use of std::map with hash_map for mapping\nISL ids to SSA names.\n\n2020-08-06  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-isl-ast-to-gimple.c (ivs_params): Use hash_map instead\n\tof std::map.\n\t(ivs_params_clear): Adjust.\n\t(gcc_expression_from_isl_ast_expr_id): Likewise.\n\t(graphite_create_new_loop): Likewise.\n\t(add_parameters_to_ivs_params): Likewise.", "tree": {"sha": "290612b8bd1e858b4354c6f259858fe52182da55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290612b8bd1e858b4354c6f259858fe52182da55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b1f30258f6dbf26705d86343b8cd402376cb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b1f30258f6dbf26705d86343b8cd402376cb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b1f30258f6dbf26705d86343b8cd402376cb70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b1f30258f6dbf26705d86343b8cd402376cb70/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c072fd236dc08f990bfcffd98b27f211a39bb404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c072fd236dc08f990bfcffd98b27f211a39bb404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c072fd236dc08f990bfcffd98b27f211a39bb404"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "5fa70ff2d4e028d0c1bf0b48ccd91747ea1cb5f8", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b1f30258f6dbf26705d86343b8cd402376cb70/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b1f30258f6dbf26705d86343b8cd402376cb70/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=c7b1f30258f6dbf26705d86343b8cd402376cb70", "patch": "@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifdef HAVE_isl\n \n-#define INCLUDE_MAP\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"backend.h\"\n@@ -69,18 +68,14 @@ struct ast_build_info\n /* IVS_PARAMS maps isl's scattering and parameter identifiers\n    to corresponding trees.  */\n \n-typedef std::map<isl_id *, tree> ivs_params;\n+typedef hash_map<isl_id *, tree> ivs_params;\n \n /* Free all memory allocated for isl's identifiers.  */\n \n static void ivs_params_clear (ivs_params &ip)\n {\n-  std::map<isl_id *, tree>::iterator it;\n-  for (it = ip.begin ();\n-       it != ip.end (); it++)\n-    {\n-      isl_id_free (it->first);\n-    }\n+  for (auto it = ip.begin (); it != ip.end (); ++it)\n+    isl_id_free ((*it).first);\n }\n \n /* Set the \"separate\" option for the schedule node.  */\n@@ -256,13 +251,11 @@ gcc_expression_from_isl_ast_expr_id (tree type,\n {\n   gcc_assert (isl_ast_expr_get_type (expr_id) == isl_ast_expr_id);\n   isl_id *tmp_isl_id = isl_ast_expr_get_id (expr_id);\n-  std::map<isl_id *, tree>::iterator res;\n-  res = ip.find (tmp_isl_id);\n+  tree *tp = ip.get (tmp_isl_id);\n   isl_id_free (tmp_isl_id);\n-  gcc_assert (res != ip.end () &&\n-\t      \"Could not map isl_id to tree expression\");\n+  gcc_assert (tp && \"Could not map isl_id to tree expression\");\n   isl_ast_expr_free (expr_id);\n-  tree t = res->second;\n+  tree t = *tp;\n   if (useless_type_conversion_p (type, TREE_TYPE (t)))\n     return t;\n   if (POINTER_TYPE_P (TREE_TYPE (t))\n@@ -596,11 +589,9 @@ graphite_create_new_loop (edge entry_edge, __isl_keep isl_ast_node *node_for,\n \n   isl_ast_expr *for_iterator = isl_ast_node_for_get_iterator (node_for);\n   isl_id *id = isl_ast_expr_get_id (for_iterator);\n-  std::map<isl_id *, tree>::iterator res;\n-  res = ip.find (id);\n-  if (ip.count (id))\n-    isl_id_free (res->first);\n-  ip[id] = iv;\n+  bool existed_p = ip.put (id, iv);\n+  if (existed_p)\n+    isl_id_free (id);\n   isl_ast_expr_free (for_iterator);\n   return loop;\n }\n@@ -1347,7 +1338,8 @@ add_parameters_to_ivs_params (scop_p scop, ivs_params &ip)\n     {\n       isl_id *tmp_id = isl_set_get_dim_id (scop->param_context,\n \t\t\t\t\t   isl_dim_param, i);\n-      ip[tmp_id] = param;\n+      bool existed_p = ip.put (tmp_id, param);\n+      gcc_assert (!existed_p);\n     }\n }\n "}]}