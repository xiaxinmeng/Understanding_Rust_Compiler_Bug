{"sha": "b70210069319f6934a6bfd2b0aad5fb6befecc83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcwMjEwMDY5MzE5ZjY5MzRhNmJmZDJiMGFhZDVmYjZiZWZlY2M4Mw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-05-27T14:08:37Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-05-27T14:08:37Z"}, "message": "re PR libstdc++/66338 (std::forward_as_tuple() issue with single argument)\n\n2016-05-24  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tPR libstdc++/66338\n\t* include/std/tuple (_TMC): Add a check for _NotSameTuple.\n\t* include/std/tuple (tuple(_UElements&&...)): Remove the separate\n\tcheck for _NotSameTuple.\n\t* include/std/tuple (_TMCT): New.\n\t* include/std/tuple (tuple(const tuple<_UElements...>&)): Use it.\n\t* include/std/tuple (tuple(tuple<_UElements...>&&)): Likewise.\n\t* include/std/tuple (tuple(allocator_arg_t, const _Alloc&,\n\t      const tuple<_UElements...>&)): Likewise.\n\t* include/std/tuple (tuple(allocator_arg_t, const _Alloc&,\n\t      tuple<_UElements...>&&)): Likewise.\n\t* testsuite/20_util/tuple/cons/66338.cc: New.\n\nFrom-SVN: r236822", "tree": {"sha": "7294d0ef22deb1db82da5222f52bf5fce6cba3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7294d0ef22deb1db82da5222f52bf5fce6cba3fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b70210069319f6934a6bfd2b0aad5fb6befecc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70210069319f6934a6bfd2b0aad5fb6befecc83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70210069319f6934a6bfd2b0aad5fb6befecc83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70210069319f6934a6bfd2b0aad5fb6befecc83/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d"}], "stats": {"total": 102, "additions": 79, "deletions": 23}, "files": [{"sha": "16bc239d7d6384fa925fb3ac85db202b1ad576d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b70210069319f6934a6bfd2b0aad5fb6befecc83", "patch": "@@ -1,3 +1,18 @@\n+2016-05-27  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/66338\n+\t* include/std/tuple (_TMC): Add a check for _NotSameTuple.\n+\t* include/std/tuple (tuple(_UElements&&...)): Remove the separate\n+\tcheck for _NotSameTuple.\n+\t* include/std/tuple (_TMCT): New.\n+\t* include/std/tuple (tuple(const tuple<_UElements...>&)): Use it.\n+\t* include/std/tuple (tuple(tuple<_UElements...>&&)): Likewise.\n+\t* include/std/tuple (tuple(allocator_arg_t, const _Alloc&,\n+\t      const tuple<_UElements...>&)): Likewise.\n+\t* include/std/tuple (tuple(allocator_arg_t, const _Alloc&,\n+\t      tuple<_UElements...>&&)): Likewise.\n+\t* testsuite/20_util/tuple/cons/66338.cc: New.\n+\n 2016-05-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Fix test for sendfile."}, {"sha": "5ef3003b70649e2294fe5fff2eecb8fcb9d2b154", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=b70210069319f6934a6bfd2b0aad5fb6befecc83", "patch": "@@ -620,14 +620,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Shortcut for the cases where constructors taking _UElements...\n       // need to be constrained.\n       template<typename... _UElements> using _TMC =\n-                  _TC<(sizeof...(_Elements) == sizeof...(_UElements)),\n+                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))\n+\t\t      && (_TC<(sizeof...(_UElements)==1), _Elements...>::\n+\t\t\t  template _NotSameTuple<_UElements...>()),\n+                      _Elements...>;\n+\n+      // Shortcut for the cases where constructors taking tuple<_UElements...>\n+      // need to be constrained.\n+      template<typename... _UElements> using _TMCT =\n+                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))\n+\t\t      && !is_same<tuple<Elements...>,\n+\t\t\t\t  tuple<_UElements...>>::value,\n                       _Elements...>;\n \n       template<typename... _UElements, typename\n \t       enable_if<\n-\t\t  _TC<sizeof...(_UElements) == 1, _Elements...>::template\n-\t\t    _NotSameTuple<_UElements...>()\n-\t\t  && _TMC<_UElements...>::template\n+\t\t  _TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && _TMC<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()\n@@ -638,9 +646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename... _UElements, typename\n         enable_if<\n-\t\t  _TC<sizeof...(_UElements) == 1, _Elements...>::template\n-\t\t    _NotSameTuple<_UElements...>()\n-\t\t  && _TMC<_UElements...>::template\n+\t\t  _TMC<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n                   && !_TMC<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()\n@@ -660,9 +666,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             _Elements...>;\n \n       template<typename... _UElements, typename _Dummy = void, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n-                  && _TMC<_UElements...>::template\n+                  && _TMCT<_UElements...>::template\n                     _ImplicitlyConvertibleTuple<_UElements...>()\n                   && _TNTC<_Dummy>::template\n                     _NonNestedTuple<const tuple<_UElements...>&>(),\n@@ -672,9 +678,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { }\n \n       template<typename... _UElements, typename _Dummy = void, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n-                  && !_TMC<_UElements...>::template\n+                  && !_TMCT<_UElements...>::template\n                     _ImplicitlyConvertibleTuple<_UElements...>()\n                   && _TNTC<_Dummy>::template\n                     _NonNestedTuple<const tuple<_UElements...>&>(),\n@@ -684,9 +690,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { }\n \n       template<typename... _UElements, typename _Dummy = void, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n-                  && _TMC<_UElements...>::template\n+                  && _TMCT<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()\n                   && _TNTC<_Dummy>::template\n                     _NonNestedTuple<tuple<_UElements...>&&>(),\n@@ -695,9 +701,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n       template<typename... _UElements, typename _Dummy = void, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n-                  && !_TMC<_UElements...>::template\n+                  && !_TMCT<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>()\n                   && _TNTC<_Dummy>::template\n                     _NonNestedTuple<tuple<_UElements...>&&>(),\n@@ -764,9 +770,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\n \n       template<typename _Alloc, typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n-                  && _TMC<_UElements...>::template\n+                  && _TMCT<_UElements...>::template\n                     _ImplicitlyConvertibleTuple<_UElements...>(),\n         bool>::type=true>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n@@ -776,9 +782,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Alloc, typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _ConstructibleTuple<_UElements...>()\n-                  && !_TMC<_UElements...>::template\n+                  && !_TMCT<_UElements...>::template\n                     _ImplicitlyConvertibleTuple<_UElements...>(),\n         bool>::type=false>\n \texplicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n@@ -788,9 +794,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Alloc, typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n-                  && _TMC<_UElements...>::template\n+                  && _TMCT<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),\n         bool>::type=true>\n \ttuple(allocator_arg_t __tag, const _Alloc& __a,\n@@ -800,9 +806,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Alloc, typename... _UElements, typename\n-        enable_if<_TMC<_UElements...>::template\n+        enable_if<_TMCT<_UElements...>::template\n                     _MoveConstructibleTuple<_UElements...>()\n-                  && !_TMC<_UElements...>::template\n+                  && !_TMCT<_UElements...>::template\n                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),\n         bool>::type=false>\n \texplicit tuple(allocator_arg_t __tag, const _Alloc& __a,"}, {"sha": "f57eae90549300dd64615f60fec5971ffd72c483", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/66338.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F66338.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70210069319f6934a6bfd2b0aad5fb6befecc83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F66338.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F66338.cc?ref=b70210069319f6934a6bfd2b0aad5fb6befecc83", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+struct S {\n+  int i_;\n+\n+  template<typename T>\n+  S(T&& i)\n+    noexcept(noexcept(i_ = i))\n+  { i_ = i; }\n+\n+  S() noexcept : i_{0} {};\n+};\n+\n+int main()\n+{\n+  std::tuple<S&&>(std::forward_as_tuple(S{}));\n+  return 0;\n+}"}]}