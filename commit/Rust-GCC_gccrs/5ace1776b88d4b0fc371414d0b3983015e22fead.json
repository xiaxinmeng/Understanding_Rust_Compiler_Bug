{"sha": "5ace1776b88d4b0fc371414d0b3983015e22fead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjZTE3NzZiODhkNGIwZmMzNzE0MTRkMGIzOTgzMDE1ZTIyZmVhZA==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-11-01T13:09:27Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-11-19T17:39:49Z"}, "message": "pru: Add builtins for HALT and LMBD\n\nAdd builtins for HALT and LMBD, per Texas Instruments document\nSPRUHV7C.  Use the new LMBD pattern to define an expand for clz.\n\nBinutils [1] and sim [2] support for LMBD instruction are merged now.\n\n[1] https://sourceware.org/pipermail/binutils/2020-October/113901.html\n[2] https://sourceware.org/pipermail/gdb-patches/2020-November/173141.html\n\ngcc/ChangeLog:\n\n\t* config/pru/alu-zext.md: Add lmbd patterns for zero_extend\n\tvariants.\n\t* config/pru/pru.c (enum pru_builtin): Add HALT and LMBD.\n\t(pru_init_builtins): Ditto.\n\t(pru_builtin_decl): Ditto.\n\t(pru_expand_builtin): Ditto.\n\t* config/pru/pru.h (CLZ_DEFINED_VALUE_AT_ZERO): Define PRU\n\tvalue for CLZ with zero value parameter.\n\t* config/pru/pru.md: Add halt, lmbd and clz patterns.\n\t* doc/extend.texi: Document PRU builtins.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/pru/halt.c: New test.\n\t* gcc.target/pru/lmbd.c: New test.", "tree": {"sha": "0185ff9ee4bdfc8940b18eee4e5c4eb4555a0f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0185ff9ee4bdfc8940b18eee4e5c4eb4555a0f1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ace1776b88d4b0fc371414d0b3983015e22fead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ace1776b88d4b0fc371414d0b3983015e22fead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ace1776b88d4b0fc371414d0b3983015e22fead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ace1776b88d4b0fc371414d0b3983015e22fead/comments", "author": null, "committer": null, "parents": [{"sha": "0b0061f4d83cd8eb181f7114a077237b95a0c144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0061f4d83cd8eb181f7114a077237b95a0c144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0061f4d83cd8eb181f7114a077237b95a0c144"}], "stats": {"total": 207, "additions": 201, "deletions": 6}, "files": [{"sha": "35a6dbdda7927f527e926847297476cd58cdf2ad", "filename": "gcc/config/pru/alu-zext.md", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Falu-zext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Falu-zext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Falu-zext.md?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -37,6 +37,10 @@\n (define_subst_attr \"alu3_zext_op2\" \"alu3_zext_op2_subst\" \"_z2\" \"_noz2\")\n (define_subst_attr \"alu3_zext\"     \"alu3_zext_subst\"     \"_z\" \"_noz\")\n \n+(define_subst_attr \"lmbd_zext_op1\" \"lmbd_zext_op1_subst\" \"_z1\" \"_noz1\")\n+(define_subst_attr \"lmbd_zext_op2\" \"lmbd_zext_op2_subst\" \"_z2\" \"_noz2\")\n+(define_subst_attr \"lmbd_zext\"     \"lmbd_zext_subst\"     \"_z\"  \"_noz\")\n+\n (define_subst_attr \"bitalu_zext\"   \"bitalu_zext_subst\"   \"_z\" \"_noz\")\n \n (define_code_iterator ALUOP3 [plus minus and ior xor umin umax ashift lshiftrt])\n@@ -72,6 +76,19 @@\n   [(set_attr \"type\" \"alu\")])\n \n \n+;; Left Most Bit Detect instruction.\n+(define_insn \"pru_lmbd_impl<EQD:mode><EQS0:mode><EQS1:mode>_<lmbd_zext><lmbd_zext_op1><lmbd_zext_op2>\"\n+  [(set (match_operand:EQD 0 \"register_operand\" \"=r\")\n+\t(unspec:EQD\n+\t  [(zero_extend:EQD\n+\t     (match_operand:EQS0 1 \"register_operand\" \"r\"))\n+\t   (zero_extend:EQD\n+\t     (match_operand:EQS1 2 \"reg_or_ubyte_operand\" \"r<EQS1:ubyte_constr>\"))]\n+\t  UNSPEC_LMBD))]\n+  \"\"\n+  \"lmbd\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")])\n+\n (define_insn \"neg_impl<EQD:mode><EQS0:mode>_<alu2_zext>\"\n   [(set (match_operand:EQD 0 \"register_operand\" \"=r\")\n \t(neg:EQD\n@@ -179,3 +196,37 @@\n   [(set (match_dup 0)\n \t(ALUOP3:EQD (zero_extend:EQD (match_dup 1))\n \t\t    (match_dup 2)))])\n+\n+\n+(define_subst \"lmbd_zext_subst\"\n+  [(set (match_operand:EQD 0)\n+\t(unspec:EQD [(zero_extend:EQD (match_operand:EQD 1))\n+\t\t     (zero_extend:EQD (match_operand:EQD 2))]\n+\t\t    UNSPEC_LMBD))]\n+  \"\"\n+  [(set (match_dup 0)\n+\t(unspec:EQD [(match_dup 1)\n+\t\t     (match_dup 2)]\n+\t\t    UNSPEC_LMBD))])\n+\n+(define_subst \"lmbd_zext_op1_subst\"\n+  [(set (match_operand:EQD 0)\n+\t(unspec:EQD [(zero_extend:EQD (match_operand:EQD 1))\n+\t\t     (zero_extend:EQD (match_operand:EQS1 2))]\n+\t\t    UNSPEC_LMBD))]\n+  \"\"\n+  [(set (match_dup 0)\n+\t(unspec:EQD [(match_dup 1)\n+\t\t     (zero_extend:EQD (match_dup 2))]\n+\t\t    UNSPEC_LMBD))])\n+\n+(define_subst \"lmbd_zext_op2_subst\"\n+  [(set (match_operand:EQD 0)\n+\t(unspec:EQD [(zero_extend:EQD (match_operand:EQD 1))\n+\t\t     (zero_extend:EQD (match_operand:EQD 2))]\n+\t\t    UNSPEC_LMBD))]\n+  \"\"\n+  [(set (match_dup 0)\n+\t(unspec:EQD [(zero_extend:EQD (match_dup 1))\n+\t\t     (match_dup 2)]\n+\t\t    UNSPEC_LMBD))])"}, {"sha": "65ad6878a12aab7b7b0258da9a9fb2fc8f24d648", "filename": "gcc/config/pru/pru.c", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.c?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -2705,6 +2705,8 @@ pru_reorg (void)\n enum pru_builtin\n {\n   PRU_BUILTIN_DELAY_CYCLES,\n+  PRU_BUILTIN_HALT,\n+  PRU_BUILTIN_LMBD,\n   PRU_BUILTIN_max\n };\n \n@@ -2719,11 +2721,31 @@ pru_init_builtins (void)\n     = build_function_type_list (void_type_node,\n \t\t\t\tlong_long_integer_type_node,\n \t\t\t\tNULL);\n+  tree uint_ftype_uint_uint\n+    = build_function_type_list (unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL);\n+\n+  tree void_ftype_void\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tvoid_type_node,\n+\t\t\t\tNULL);\n \n   pru_builtins[PRU_BUILTIN_DELAY_CYCLES]\n     = add_builtin_function (\"__delay_cycles\", void_ftype_longlong,\n \t\t\t    PRU_BUILTIN_DELAY_CYCLES, BUILT_IN_MD, NULL,\n \t\t\t    NULL_TREE);\n+\n+  pru_builtins[PRU_BUILTIN_HALT]\n+    = add_builtin_function (\"__halt\", void_ftype_void,\n+\t\t\t    PRU_BUILTIN_HALT, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+\n+  pru_builtins[PRU_BUILTIN_LMBD]\n+    = add_builtin_function (\"__lmbd\", uint_ftype_uint_uint,\n+\t\t\t    PRU_BUILTIN_LMBD, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n }\n \n /* Implement TARGET_BUILTIN_DECL.  */\n@@ -2734,6 +2756,8 @@ pru_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n   switch (code)\n     {\n     case PRU_BUILTIN_DELAY_CYCLES:\n+    case PRU_BUILTIN_HALT:\n+    case PRU_BUILTIN_LMBD:\n       return pru_builtins[code];\n     default:\n       return error_mark_node;\n@@ -2806,19 +2830,45 @@ pru_expand_delay_cycles (rtx arg)\n    IGNORE is nonzero if the value is to be ignored.  */\n \n static rtx\n-pru_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n+pru_expand_builtin (tree exp, rtx target,\n \t\t    rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t    machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t    machine_mode mode,\n \t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n-  rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n \n-  if (fcode == PRU_BUILTIN_DELAY_CYCLES)\n-    return pru_expand_delay_cycles (arg1);\n+  switch (fcode)\n+    {\n+    case PRU_BUILTIN_DELAY_CYCLES:\n+\t{\n+\t  rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+\t  return pru_expand_delay_cycles (arg1);\n+\t}\n+      break;\n+    case PRU_BUILTIN_HALT:\n+\t{\n+\t  emit_insn (gen_pru_halt ());\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+    case PRU_BUILTIN_LMBD:\n+\t{\n+\t  rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+\t  rtx arg2 = expand_normal (CALL_EXPR_ARG (exp, 1));\n+\n+\t  if (target == NULL_RTX || GET_MODE (target) != mode)\n+\t    {\n+\t      target = gen_reg_rtx (mode);\n+\t    }\n \n-  internal_error (\"bad builtin code\");\n+\t  emit_insn (gen_pru_lmbd (mode, target, arg1, arg2));\n+\t  return target;\n+\t}\n+      break;\n+    default:\n+      internal_error (\"bad builtin code\");\n+    }\n \n   return NULL_RTX;\n }"}, {"sha": "7f217fe2045065efa13451ff2ba7c8d9f245d831", "filename": "gcc/config/pru/pru.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.h?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -562,6 +562,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define CASE_VECTOR_MODE Pmode\n \n+/* See definition of clz pattern for rationale of value -1.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = -1, 2)\n+\n /* Jumps are cheap on PRU.  */\n #define LOGICAL_OP_NON_SHORT_CIRCUIT\t\t0\n "}, {"sha": "125444cf47b59a6eb268285abfa4cf17450e2473", "filename": "gcc/config/pru/pru.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fconfig%2Fpru%2Fpru.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.md?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -51,6 +51,10 @@\n \n ;; Enumeration of UNSPECs.\n \n+(define_c_enum \"unspec\" [\n+  UNSPEC_LMBD\n+])\n+\n (define_c_enum \"unspecv\" [\n   UNSPECV_DELAY_CYCLES_START\n   UNSPECV_DELAY_CYCLES_END\n@@ -61,6 +65,8 @@\n   UNSPECV_LOOP_BEGIN\n   UNSPECV_LOOP_END\n \n+  UNSPECV_HALT\n+\n   UNSPECV_BLOCKAGE\n ])\n \f\n@@ -1020,3 +1026,37 @@\n   \"\"\n   \"nop\\\\t# Loop end guard\"\n   [(set_attr \"type\" \"alu\")])\n+\n+;; HALT instruction.\n+(define_insn \"pru_halt\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_HALT)]\n+  \"\"\n+  \"halt\"\n+  [(set_attr \"type\" \"control\")])\n+\n+;; Count Leading Zeros implemented using LMBD.\n+;; LMBD returns 32 if bit value is not present, and we subtract 31 to get CLZ.\n+;; Hence we get a defined value -1 for CLZ_DEFINED_VALUE_AT_ZERO.\n+(define_expand \"clz<mode>2\"\n+  [(set (match_operand:QISI 0 \"register_operand\")\n+\t(clz:QISI (match_operand:QISI 1 \"register_operand\")))]\n+  \"\"\n+{\n+  rtx dst = operands[0];\n+  rtx src = operands[1];\n+  rtx tmpval = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_pru_lmbd (<MODE>mode, tmpval, src, const1_rtx));\n+  emit_insn (gen_sub3_insn (dst, GEN_INT (31), tmpval));\n+  DONE;\n+})\n+\n+;; Left Most Bit Detect operation, which maps to a single instruction.\n+(define_expand \"@pru_lmbd<mode>\"\n+  [(set (match_operand:QISI 0 \"register_operand\")\n+\t(unspec:QISI\n+\t  [(match_operand:QISI 1 \"register_operand\")\n+\t   (match_operand:QISI 2 \"reg_or_ubyte_operand\")]\n+\t  UNSPEC_LMBD))]\n+  \"\"\n+  \"\")"}, {"sha": "cdf9108cd5b1cf9663deab23d9cc56d617528454", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -14154,6 +14154,7 @@ instructions, but allow the compiler to schedule those calls.\n * PowerPC Hardware Transactional Memory Built-in Functions::\n * PowerPC Atomic Memory Operation Functions::\n * PowerPC Matrix-Multiply Assist Built-in Functions::\n+* PRU Built-in Functions::\n * RISC-V Built-in Functions::\n * RX Built-in Functions::\n * S/390 System z Built-in Functions::\n@@ -21934,6 +21935,33 @@ vec_t __builtin_vsx_xvcvspbf16 (vec_t);\n vec_t __builtin_vsx_xvcvbf16spn (vec_t);\n @end smallexample\n \n+@node PRU Built-in Functions\n+@subsection PRU Built-in Functions\n+\n+GCC provides a couple of special builtin functions to aid in utilizing\n+special PRU instructions.\n+\n+The built-in functions supported are:\n+\n+@table @code\n+@item __delay_cycles (long long @var{cycles})\n+This inserts an instruction sequence that takes exactly @var{cycles}\n+cycles (between 0 and 0xffffffff) to complete.  The inserted sequence\n+may use jumps, loops, or no-ops, and does not interfere with any other\n+instructions.  Note that @var{cycles} must be a compile-time constant\n+integer - that is, you must pass a number, not a variable that may be\n+optimized to a constant later.  The number of cycles delayed by this\n+builtin is exact.\n+\n+@item __halt (void)\n+This inserts a HALT instruction to stop processor execution.\n+\n+@item unsigned int __lmbd (unsigned int @var{wordval}, unsigned int @var{bitval})\n+This inserts LMBD instruction to calculate the left-most bit with value\n+@var{bitval} in value @var{wordval}.  Only the least significant bit\n+of @var{bitval} is taken into account.\n+@end table\n+\n @node RISC-V Built-in Functions\n @subsection RISC-V Built-in Functions\n "}, {"sha": "8aed576fe6c61b47f6c5c9453d9b644af975733b", "filename": "gcc/testsuite/gcc.target/pru/halt.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fhalt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fhalt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fhalt.c?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -0,0 +1,9 @@\n+/* Test HALT builtin.  */\n+\n+void\n+test_halt (void)\n+{\n+  /* { dg-final { scan-assembler \"halt\" } } */\n+  __halt();\n+}\n+"}, {"sha": "bfe4beb0c4dd046b26a4b1d432518b55d2ce380f", "filename": "gcc/testsuite/gcc.target/pru/lmbd.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flmbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ace1776b88d4b0fc371414d0b3983015e22fead/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flmbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flmbd.c?ref=5ace1776b88d4b0fc371414d0b3983015e22fead", "patch": "@@ -0,0 +1,14 @@\n+/* Test LMBD builtin.  */\n+\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it zero_extend\n+   operation may not be optimized.  */\n+\n+unsigned int\n+test_lmbd (unsigned char a, unsigned short b)\n+{\n+  /* { dg-final { scan-assembler \"lmbd\\\\tr14, r14.w1, r14.b0\" } } */\n+  return __lmbd(b, a);\n+}\n+"}]}