{"sha": "826f35d8124731d0f4f5415c84fb59d2b6adf58b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2ZjM1ZDgxMjQ3MzFkMGY0ZjU0MTVjODRmYjU5ZDJiNmFkZjU4Yg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-05-09T12:48:43Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-05-09T12:48:43Z"}, "message": "shrink-wrap: Improve spread_components (PR85645)\n\nIn the testcase for PR85645 we do a pretty dumb placement of the\nprologue/epilogue for the LR component: we place an epilogue for LR\nbefore a control flow split where one of the branches clobbers LR\neventually, and the other does not.  The branch that does clobber it\nwill need a prologue again some time later.  Because saving and\nrestoring LR is a two step process---it needs to be moved via a GPR---\nthe backend emits CFI directives so that we get correct unwind\ninformation.  But both regcprop and regrename do not properly handle\nsuch CFI directives leading to ICEs.\n\nNow, neither of the two branches needs to have LR restored at all,\nbecause both of the branches end up in an infinite loop.\n\nThis patch makes spread_component return a boolean saying if anything\nwas changed, and if so, it is called again.  This obviously is finite\n(there is a finite number of basic blocks, each with a finite number\nof components, and spread_components can only assign more components\nto a block, never less).  I also instrumented the code, and on a\nbootstrap+regtest spread_components made changes a maximum of two\ntimes.  Interestingly though it made changes on two iterations in\na third of the cases it did anything at all!\n\n\n\tPR rtl-optimization/85645\n\t* shrink-wrap.c (spread_components): Return a boolean saying if\n\tanything was changed.\n\t(try_shrink_wrapping_separate): Iterate spread_components until\n\tnothing changes anymore.\n\nFrom-SVN: r260076", "tree": {"sha": "1910a313b5a9cb60b3a35d1183deadcd113a548a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1910a313b5a9cb60b3a35d1183deadcd113a548a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826f35d8124731d0f4f5415c84fb59d2b6adf58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826f35d8124731d0f4f5415c84fb59d2b6adf58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826f35d8124731d0f4f5415c84fb59d2b6adf58b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826f35d8124731d0f4f5415c84fb59d2b6adf58b/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97741c118180621e47edb6350571077eb0bc28ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97741c118180621e47edb6350571077eb0bc28ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97741c118180621e47edb6350571077eb0bc28ca"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "1c81e4f555299362100abc1cd70c7224a8111b4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826f35d8124731d0f4f5415c84fb59d2b6adf58b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826f35d8124731d0f4f5415c84fb59d2b6adf58b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826f35d8124731d0f4f5415c84fb59d2b6adf58b", "patch": "@@ -1,3 +1,11 @@\n+2018-05-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/85645\n+\t* shrink-wrap.c (spread_components): Return a boolean saying if\n+\tanything was changed.\n+\t(try_shrink_wrapping_separate): Iterate spread_components until\n+\tnothing changes anymore.\n+\n 2018-05-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/85645"}, {"sha": "1ad73798747b9a4d88ee6f8dc01663f9f3e54284", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826f35d8124731d0f4f5415c84fb59d2b6adf58b/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826f35d8124731d0f4f5415c84fb59d2b6adf58b/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=826f35d8124731d0f4f5415c84fb59d2b6adf58b", "patch": "@@ -1253,8 +1253,9 @@ place_prologue_for_one_component (unsigned int which, basic_block head)\n /* Set HAS_COMPONENTS in every block to the maximum it can be set to without\n    setting it on any path from entry to exit where it was not already set\n    somewhere (or, for blocks that have no path to the exit, consider only\n-   paths from the entry to the block itself).  */\n-static void\n+   paths from the entry to the block itself).  Return whether any changes\n+   were made to some HAS_COMPONENTS.  */\n+static bool\n spread_components (sbitmap components)\n {\n   basic_block entry_block = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n@@ -1377,12 +1378,19 @@ spread_components (sbitmap components)\n \n   /* Finally, mark everything not not needed both forwards and backwards.  */\n \n+  bool did_changes = false;\n+\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n+      bitmap_copy (old, SW (bb)->has_components);\n+\n       bitmap_and (SW (bb)->head_components, SW (bb)->head_components,\n \t\t  SW (bb)->tail_components);\n       bitmap_and_compl (SW (bb)->has_components, components,\n \t\t\tSW (bb)->head_components);\n+\n+      if (!did_changes && !bitmap_equal_p (old, SW (bb)->has_components))\n+\tdid_changes = true;\n     }\n \n   FOR_ALL_BB_FN (bb, cfun)\n@@ -1394,6 +1402,8 @@ spread_components (sbitmap components)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n+\n+  return did_changes;\n }\n \n /* If we cannot handle placing some component's prologues or epilogues where\n@@ -1797,7 +1807,16 @@ try_shrink_wrapping_separate (basic_block first_bb)\n   EXECUTE_IF_SET_IN_BITMAP (components, 0, j, sbi)\n     place_prologue_for_one_component (j, first_bb);\n \n-  spread_components (components);\n+  /* Try to minimize the number of saves and restores.  Do this as long as\n+     it changes anything.  This does not iterate more than a few times.  */\n+  int spread_times = 0;\n+  while (spread_components (components))\n+    {\n+      spread_times++;\n+\n+      if (dump_file)\n+\tfprintf (dump_file, \"Now spread %d times.\\n\", spread_times);\n+    }\n \n   disqualify_problematic_components (components);\n "}]}