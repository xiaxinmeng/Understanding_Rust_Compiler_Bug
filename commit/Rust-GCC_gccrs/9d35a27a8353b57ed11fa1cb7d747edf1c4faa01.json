{"sha": "9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzNWEyN2E4MzUzYjU3ZWQxMWZhMWNiN2Q3NDdlZGYxYzRmYWEwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-20T02:00:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-20T02:00:29Z"}, "message": "PR c++/88368 - wrong 'use of deleted function'\n\nSince my patch for 81359 allowed us to signal failure on return from\nmaybe_instantiate_noexcept, we no longer need to turn an error into\nnoexcept(false).  We also need to handle NSDMI instantiation errors under\nsynthesized_method_walk.  This change caused some instantiation context\nnotes to be lost in the testsuite, so I added push_tinst_level to\nget_defaulted_eh_spec to restore that context.\n\n\t* method.c (walk_field_subobs): Remember errors from get_nsdmi.\n\t(get_defaulted_eh_spec): Call push_tinst_level.\n\t* pt.c (maybe_instantiate_noexcept): Keep error_mark_node.\n\t* typeck2.c (merge_exception_specifiers): Handle error_mark_node.\n\nFrom-SVN: r269032", "tree": {"sha": "dd8f6590bbce03b4e8b1c01a6fae5791f01696f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd8f6590bbce03b4e8b1c01a6fae5791f01696f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dca1dc386b4b87558ed80b12a3d700908baeac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dca1dc386b4b87558ed80b12a3d700908baeac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dca1dc386b4b87558ed80b12a3d700908baeac0"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "3fe0cedb0e321987d1b3a7bd5ebeed92cb0ab66c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -1,3 +1,11 @@\n+2019-02-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88368 - wrong 'use of deleted function'\n+\t* method.c (walk_field_subobs): Remember errors from get_nsdmi.\n+\t(get_defaulted_eh_spec): Call push_tinst_level.\n+\t* pt.c (maybe_instantiate_noexcept): Keep error_mark_node.\n+\t* typeck2.c (merge_exception_specifiers): Handle error_mark_node.\n+\n 2019-02-19  Chung-Lin Tang <cltang@codesourcery.com>\n \n \tPR c/87924"}, {"sha": "6e0df68273efab1f0f2cebf06fcd0fcb21074424", "filename": "gcc/cp/method.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -1367,7 +1367,10 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t      if (spec_p)\n \t\t{\n \t\t  tree nsdmi = get_nsdmi (field, /*ctor*/false, complain);\n-\t\t  if (!expr_noexcept_p (nsdmi, complain))\n+\t\t  if (nsdmi == error_mark_node)\n+\t\t    *spec_p = error_mark_node;\n+\t\t  else if (*spec_p != error_mark_node\n+\t\t\t   && !expr_noexcept_p (nsdmi, complain))\n \t\t    *spec_p = noexcept_false_spec;\n \t\t}\n \t      /* Don't do the normal processing.  */\n@@ -1753,8 +1756,13 @@ get_defaulted_eh_spec (tree decl, tsubst_flags_t complain)\n   if (SFK_DTOR_P (sfk) && DECL_VIRTUAL_P (decl))\n     /* We have to examine virtual bases even if abstract.  */\n     sfk = sfk_virtual_destructor;\n+  bool pushed = false;\n+  if (CLASSTYPE_TEMPLATE_INSTANTIATION (ctype))\n+    pushed = push_tinst_level (decl);\n   synthesized_method_walk (ctype, sfk, const_p, &spec, NULL, NULL,\n \t\t\t   NULL, diag, &inh, parms);\n+  if (pushed)\n+    pop_tinst_level ();\n   return spec;\n }\n "}, {"sha": "a69a17ad3b2b24fd00bc4a2f7903207081f981ba", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -24199,8 +24199,6 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t  pop_deferring_access_checks ();\n \t  pop_access_scope (fn);\n \t  pop_tinst_level ();\n-\t  if (spec == error_mark_node)\n-\t    spec = noexcept_false_spec;\n \t}\n       else\n \tspec = noexcept_false_spec;"}, {"sha": "4e4b1f03b7cda511b208ef127884fedf8c01cf07", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -2363,6 +2363,9 @@ merge_exception_specifiers (tree list, tree add)\n {\n   tree noex, orig_list;\n \n+  if (list == error_mark_node || add == error_mark_node)\n+    return error_mark_node;\n+\n   /* No exception-specifier or noexcept(false) are less strict than\n      anything else.  Prefer the newer variant (LIST).  */\n   if (!list || list == noexcept_false_spec)"}, {"sha": "8276eab8f8056f57614e8b74b6fd400792251ab8", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi3.C?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -13,6 +13,7 @@ struct B\n   A a3 = { 3 };\t\t\t// { dg-error \"explicit\" }\n };\n \n-constexpr B b;\t\t\t// { dg-error \"B::B\" }\n+constexpr B b;\n \n+// { dg-prune-output \"B::B. is not usable\" }\n // { dg-prune-output \"B::a1\" }"}, {"sha": "c7c58746cd0a5b2d790cf13cbf0ae40b08b55908", "filename": "gcc/testsuite/g++.dg/ext/is_constructible3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible3.C?ref=9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/88368\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+\n+  struct B {\n+    int I = 1;\n+    B() = default;\n+  };\n+\n+  static constexpr bool v = __is_constructible (B);\n+\n+};\n+\n+void print()  {\n+  A::B BB;\n+}"}]}