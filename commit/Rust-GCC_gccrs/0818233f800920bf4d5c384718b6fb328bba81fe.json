{"sha": "0818233f800920bf4d5c384718b6fb328bba81fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxODIzM2Y4MDA5MjBiZjRkNWMzODQ3MThiNmZiMzI4YmJhODFmZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:47:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:47:28Z"}, "message": "internal/testenv: support testing gccgo\n    \n    If GO_TESTING_GOTOOLS is set in the environment, permit tests using\n    gccgo to run the go tool. Like GO_BUILDER_NAME, this should not be set\n    normally. But it is needed when testing the go tool itself, and will\n    be set by the gotools Makefile in a future CL.\n    \n    Reviewed-on: https://go-review.googlesource.com/45693\n\nFrom-SVN: r249195", "tree": {"sha": "9fed014ef5dbc40f5099ade7ed858784fb31b09a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fed014ef5dbc40f5099ade7ed858784fb31b09a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0818233f800920bf4d5c384718b6fb328bba81fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0818233f800920bf4d5c384718b6fb328bba81fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0818233f800920bf4d5c384718b6fb328bba81fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0818233f800920bf4d5c384718b6fb328bba81fe/comments", "author": null, "committer": null, "parents": [{"sha": "6916d6104ff448f07130597473356334c3d73501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6916d6104ff448f07130597473356334c3d73501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6916d6104ff448f07130597473356334c3d73501"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "21bf5f28f22176a4cb841a254cc10d1edc032516", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818233f800920bf4d5c384718b6fb328bba81fe/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818233f800920bf4d5c384718b6fb328bba81fe/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0818233f800920bf4d5c384718b6fb328bba81fe", "patch": "@@ -1,4 +1,4 @@\n-c0840d5826abb713487b2d8a04ab249764b21010\n+6d1d558109b5f5e53b31cc3325485dbb9f06d430\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8d416384022a95a871f93cb324aee04336ddf90a", "filename": "libgo/go/internal/testenv/testenv.go", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0818233f800920bf4d5c384718b6fb328bba81fe/libgo%2Fgo%2Finternal%2Ftestenv%2Ftestenv.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0818233f800920bf4d5c384718b6fb328bba81fe/libgo%2Fgo%2Finternal%2Ftestenv%2Ftestenv.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Ftestenv%2Ftestenv.go?ref=0818233f800920bf4d5c384718b6fb328bba81fe", "patch": "@@ -22,6 +22,13 @@ import (\n \t\"testing\"\n )\n \n+// testingGotools reports whether we are testing the gotools directory\n+// that is part of GCC. We just use an environment variable set by the\n+// gotools check target.\n+func testingGotools() bool {\n+\treturn os.Getenv(\"GO_TESTING_GOTOOLS\") != \"\"\n+}\n+\n // Builder reports the name of the builder running this test\n // (for example, \"linux-amd64\" or \"windows-386-gce\").\n // If the test is not running on the build infrastructure,\n@@ -42,14 +49,16 @@ func HasGoBuild() bool {\n \t\t}\n \t}\n \t// gccgo tests can not run \"go build\".\n-\treturn false\n+\treturn testingGotools()\n }\n \n // MustHaveGoBuild checks that the current system can build programs with ``go build''\n // and then run them with os.StartProcess or exec.Command.\n // If not, MustHaveGoBuild calls t.Skip with an explanation.\n func MustHaveGoBuild(t *testing.T) {\n-\tt.Skip(\"skipping test: 'go build' not available for gccgo tests\")\n+\tif !testingGotools() {\n+\t\tt.Skip(\"skipping test: 'go build' not available for gccgo tests\")\n+\t}\n \tif !HasGoBuild() {\n \t\tt.Skipf(\"skipping test: 'go build' not available on %s/%s\", runtime.GOOS, runtime.GOARCH)\n \t}\n@@ -64,7 +73,9 @@ func HasGoRun() bool {\n // MustHaveGoRun checks that the current system can run programs with ``go run.''\n // If not, MustHaveGoRun calls t.Skip with an explanation.\n func MustHaveGoRun(t *testing.T) {\n-\tt.Skip(\"skipping test: 'go run' not available for gccgo tests\")\n+\tif !testingGotools() {\n+\t\tt.Skip(\"skipping test: 'go run' not available for gccgo tests\")\n+\t}\n \tif !HasGoRun() {\n \t\tt.Skipf(\"skipping test: 'go run' not available on %s/%s\", runtime.GOOS, runtime.GOARCH)\n \t}"}]}