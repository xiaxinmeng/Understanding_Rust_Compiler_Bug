{"sha": "c37f46274613f72c3724c6c95bf78af32f316bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3ZjQ2Mjc0NjEzZjcyYzM3MjRjNmM5NWJmNzhhZjMyZjMxNmJkMQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-21T21:37:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "Need access to the LHS of the expression", "tree": {"sha": "b9ec6ab95acf539c7cb97661a6b7fe63368c68f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9ec6ab95acf539c7cb97661a6b7fe63368c68f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37f46274613f72c3724c6c95bf78af32f316bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37f46274613f72c3724c6c95bf78af32f316bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37f46274613f72c3724c6c95bf78af32f316bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37f46274613f72c3724c6c95bf78af32f316bd1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0840906b7475bdacbcd0655bb1aa9055925aedeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840906b7475bdacbcd0655bb1aa9055925aedeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0840906b7475bdacbcd0655bb1aa9055925aedeb"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "4a9716d62a288c45a3eaa75ac9fef8ab56561a20", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37f46274613f72c3724c6c95bf78af32f316bd1/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37f46274613f72c3724c6c95bf78af32f316bd1/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=c37f46274613f72c3724c6c95bf78af32f316bd1", "patch": "@@ -620,6 +620,8 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  Expr *get_lhs () { return main_or_left_expr.get (); }\n+\n   void visit_lhs (ASTVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n \n   void visit_rhs (ASTVisitor &vis) { right_expr->accept_vis (vis); }"}]}