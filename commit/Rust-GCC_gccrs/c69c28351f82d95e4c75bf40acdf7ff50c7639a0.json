{"sha": "c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5YzI4MzUxZjgyZDk1ZTRjNzViZjQwYWNkZjdmZjUwYzc2MzlhMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-25T14:27:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-06-25T14:27:35Z"}, "message": "DR 178 PR c++/49132\n\n/cp\n2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 178\n\tPR c++/49132\n\t* typeck2.c (process_init_constructor_record): Do not complain about\n\tuninitialized const members, because within aggregate-initialization,\n\tmembers without explicit initializers are value-initialized.\n\n/testsuite\n2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 178\n\tPR c++/49132\n\t* g++.dg/cpp0x/aggr1.C: New.\n\t* g++.dg/cpp0x/aggr2.C: Likewise.\n\t* g++.dg/init/aggr11.C: Likewise.\n\t* g++.dg/init/aggr12.C: Likewise.\n\nFrom-SVN: r211981", "tree": {"sha": "89b6e42df93d4170964a93203b396fb509869b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b6e42df93d4170964a93203b396fb509869b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/comments", "author": null, "committer": null, "parents": [{"sha": "1a7e871bab1082f2bb7fc0e807e5755132d7f376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7e871bab1082f2bb7fc0e807e5755132d7f376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7e871bab1082f2bb7fc0e807e5755132d7f376"}], "stats": {"total": 103, "additions": 87, "deletions": 16}, "files": [{"sha": "c3d520e3923eebf14f6ab8b6f44cc70d80250026", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -1,3 +1,11 @@\n+2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 178\n+\tPR c++/49132\n+\t* typeck2.c (process_init_constructor_record): Do not complain about\n+\tuninitialized const members, because within aggregate-initialization,\n+\tmembers without explicit initializers are value-initialized.\n+\n 2014-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* semantics.c (finish_omp_clauses): Make sure\n@@ -6,7 +14,8 @@\n 2014-06-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* class.c (check_methods, create_vtable_ptr, determine_key_method,\n-\tadd_vcall_offset_vtbl_entries_1): Guard VINDEX checks by FUNCTION_DECL check.\n+\tadd_vcall_offset_vtbl_entries_1): Guard VINDEX checks by\n+\tFUNCTION_DECL check.\n \t* cp-tree.h (lang_decl_ns): Add ns_using and ns_users.\n \t(DECL_NAMESPACE_USING, DECL_NAMESPACE_USERS): Use lang_decl_ns.\n \t(DECL_NAMESPACE_ASSOCIATIONS): Use DECL_INITIAL."}, {"sha": "f57aef1431633d5793534fa195fa11c15339f990", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -1342,37 +1342,32 @@ process_init_constructor_record (tree type, tree init,\n \t  next = massage_init_elt (TREE_TYPE (field), next, complain);\n \n \t  /* Warn when some struct elements are implicitly initialized.  */\n-\t  warning (OPT_Wmissing_field_initializers,\n-\t\t   \"missing initializer for member %qD\", field);\n+\t  if (complain & tf_warning)\n+\t    warning (OPT_Wmissing_field_initializers,\n+\t\t     \"missing initializer for member %qD\", field);\n \t}\n       else\n \t{\n-\t  if (TREE_READONLY (field))\n+\t  if (TREE_CODE (TREE_TYPE (field)) == REFERENCE_TYPE)\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"uninitialized const member %qD\", field);\n-\t      else\n-\t\treturn PICFLAG_ERRONEOUS;\n-\t    }\n-\t  else if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (TREE_TYPE (field)))\n-\t    {\n-\t      if (complain & tf_error)\n-\t\terror (\"member %qD with uninitialized const fields\", field);\n+\t\terror (\"member %qD is uninitialized reference\", field);\n \t      else\n \t\treturn PICFLAG_ERRONEOUS;\n \t    }\n-\t  else if (TREE_CODE (TREE_TYPE (field)) == REFERENCE_TYPE)\n+\t  else if (CLASSTYPE_REF_FIELDS_NEED_INIT (TREE_TYPE (field)))\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"member %qD is uninitialized reference\", field);\n+\t\terror (\"member %qD with uninitialized reference fields\", field);\n \t      else\n \t\treturn PICFLAG_ERRONEOUS;\n \t    }\n \n \t  /* Warn when some struct elements are implicitly initialized\n \t     to zero.  */\n-\t  warning (OPT_Wmissing_field_initializers,\n-\t\t   \"missing initializer for member %qD\", field);\n+\t  if (complain & tf_warning)\n+\t    warning (OPT_Wmissing_field_initializers,\n+\t\t     \"missing initializer for member %qD\", field);\n \n \t  if (!zero_init_p (TREE_TYPE (field)))\n \t    next = build_zero_init (TREE_TYPE (field), /*nelts=*/NULL_TREE,"}, {"sha": "1370ee4bc4a7fbe42f4f0de303e09ba146c33bae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -1,3 +1,12 @@\n+2014-06-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 178\n+\tPR c++/49132\n+\t* g++.dg/cpp0x/aggr1.C: New.\n+\t* g++.dg/cpp0x/aggr2.C: Likewise.\n+\t* g++.dg/init/aggr11.C: Likewise.\n+\t* g++.dg/init/aggr12.C: Likewise.\n+\n 2014-06-25  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/ipa/pr61540.C: Remove dumping test."}, {"sha": "0e408e6c6842eda28677daae51ac4cfa7df7f1f4", "filename": "gcc/testsuite/g++.dg/cpp0x/aggr1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr1.C?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/49132\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  const int m;\n+};\n+\n+A a1 = {};\n+A a2{};\n+\n+struct B {\n+  A a;\n+};\n+\n+B b1 = {};\n+B b2{};"}, {"sha": "26e9dd05b62503fee7729de2e0f9a39de32e3ee5", "filename": "gcc/testsuite/g++.dg/cpp0x/aggr2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faggr2.C?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/49132\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  int& m;\n+};\n+\n+A a1 = {};  // { dg-error \"uninitialized reference\" }\n+A a2{};     // { dg-error \"uninitialized reference\" }\n+\n+struct B {\n+  A a;\n+};\n+\n+B b1 = {};  // { dg-error \"uninitialized reference\" }\n+B b2{};     // { dg-error \"uninitialized reference\" }"}, {"sha": "0da3f410a5b1bcb32efaf2e94fe1aa9782b88816", "filename": "gcc/testsuite/g++.dg/init/aggr11.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr11.C?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/49132\n+\n+struct A {\n+  const int m;\n+};\n+\n+A a1 = {};\n+\n+struct B {\n+  A a;\n+};\n+\n+B b1 = {};"}, {"sha": "0c4bd3a2056c5e1a88859fd4193fca4d9e4b6332", "filename": "gcc/testsuite/g++.dg/init/aggr12.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c28351f82d95e4c75bf40acdf7ff50c7639a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr12.C?ref=c69c28351f82d95e4c75bf40acdf7ff50c7639a0", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/49132\n+\n+struct A {\n+  int& m;\n+};\n+\n+A a1 = {}; // { dg-error \"uninitialized reference\" }\n+\n+struct B {\n+  A a;\n+};\n+\n+B b1 = {}; // { dg-error \"uninitialized reference\" }"}]}