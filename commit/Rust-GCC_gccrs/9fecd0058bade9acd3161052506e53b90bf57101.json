{"sha": "9fecd0058bade9acd3161052506e53b90bf57101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlY2QwMDU4YmFkZTlhY2QzMTYxMDUyNTA2ZTUzYjkwYmY1NzEwMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-24T11:37:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-24T11:37:20Z"}, "message": "re PR target/53961 (internal compiler error: in memory_address_length, at config/i386/i386.c:23341)\n\n\tPR target/53961\n\t* config/i386/i386.c (ix86_legitimate_address_p): Move check for\n\tnegative constant address for TARET_X32 ...\n\t(ix86_decompose_address): ... here.  Reject constant addresses\n\tthat don't satisfy x86_64_immediate_operand predicate.\n\nFrom-SVN: r189806", "tree": {"sha": "2f43e4a2afdf8a9215d700db9b4e3b5f4810dd7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f43e4a2afdf8a9215d700db9b4e3b5f4810dd7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fecd0058bade9acd3161052506e53b90bf57101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fecd0058bade9acd3161052506e53b90bf57101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fecd0058bade9acd3161052506e53b90bf57101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fecd0058bade9acd3161052506e53b90bf57101/comments", "author": null, "committer": null, "parents": [{"sha": "552b56fcf26648938a107c54548551e39b1f6430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552b56fcf26648938a107c54548551e39b1f6430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552b56fcf26648938a107c54548551e39b1f6430"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "08722afb81be28496e0cb7a27ebfdabed1247b1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fecd0058bade9acd3161052506e53b90bf57101", "patch": "@@ -1,7 +1,14 @@\n+2012-07-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53961\n+\t* config/i386/i386.c (ix86_legitimate_address_p): Move check for\n+\tnegative constant address for TARET_X32 ...\n+\t(ix86_decompose_address): ... here.  Reject constant addresses\n+\tthat don't satisfy x86_64_immediate_operand predicate.\n+\n 2012-07-24  Julian Brown  <julian@codesourcery.com>\n \n-\t* doc/sourcebuild.texi (arm_hf_eabi): Document effective-target\n-\tcheck.\n+\t* doc/sourcebuild.texi (arm_hf_eabi): Document effective-target check.\n \n 2012-07-24  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -17,15 +24,16 @@\n \t(GCC_MEM_STAT_ARGUMENTS): New define.\n \t(ALONE_MEM_STAT_DECL): Define in terms of GCC_MEM_STAT_ARGUMENTS.\n \t(ALONE_FINAL_MEM_STAT_DECL, ALONE_FINAL_PASS_MEM_STAT): New defines.\n-\t(MEM_STAT_DECL, FINAL_MEM_STAT_DECL, PASS_MEM_STAT, FINAL_PASS_MEM_STAT,\n+\t(MEM_STAT_DECL, FINAL_MEM_STAT_DECL, PASS_MEM_STAT,\n+\tFINAL_PASS_MEM_STAT): Define.\n \t* ggc-internal.h (ggc_record_overhead): Use FINAL_MEM_STAT_DECL.\n \t* ggc.h (ggc_record_overhead, ggc_free_overhead,\n \tggc_prune_overhead_list): Remove internal prototypes, they are defined\n \talready in ggc-internal.h.\n \t* ggc-common.c (struct loc_descriptor): Remove #ifdef GATHER_STATISTICS\n \twrappers.\n \t(add_statistics): Likewise.\n-\t(dump_ggc_loc_statistics): Likewise. Return if GATHER_STATISTICS is 0. \n+\t(dump_ggc_loc_statistics): Likewise. Return if GATHER_STATISTICS is 0.\n \t* ggc-zone.c (struct page_entry): Remove #ifdef GATHER_STATISTICS\n \twrappers around \"survived\" and \"stats\" members.\n \t(alloc_large_page): Always initialize survived."}, {"sha": "efad32c728add2be54f6930db57827730d622306", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9fecd0058bade9acd3161052506e53b90bf57101", "patch": "@@ -11733,6 +11733,19 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n       scale = 1 << scale;\n       retval = -1;\n     }\n+  else if (CONST_INT_P (addr))\n+    {\n+      if (!x86_64_immediate_operand (addr, VOIDmode))\n+\treturn 0;\n+\n+      /* Constant addresses are sign extended to 64bit, we have to\n+\t prevent addresses from 0x80000000 to 0xffffffff in x32 mode.  */\n+      if (TARGET_X32\n+\t  && val_signbit_known_set_p (SImode, INTVAL (addr)))\n+\treturn 0;\n+\n+      disp = addr;\n+    }\n   else\n     disp = addr;\t\t\t/* displacement */\n \n@@ -12242,13 +12255,6 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n   rtx base, index, disp;\n   HOST_WIDE_INT scale;\n \n-  /* Since constant address in x32 is signed extended to 64bit,\n-     we have to prevent addresses from 0x80000000 to 0xffffffff.  */\n-  if (TARGET_X32\n-      && CONST_INT_P (addr)\n-      && INTVAL (addr) < 0)\n-    return false;\n-\n   if (ix86_decompose_address (addr, &parts) <= 0)\n     /* Decomposition failed.  */\n     return false;"}, {"sha": "00489340431212ec505978bee0229f2dddcc79f9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fecd0058bade9acd3161052506e53b90bf57101/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9fecd0058bade9acd3161052506e53b90bf57101", "patch": "@@ -5450,6 +5450,8 @@\n   DONE;\n })\n \f\n+;; Load effective address instructions\n+\n (define_insn_and_split \"*lea<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(match_operand:SWI48 1 \"lea_address_operand\" \"p\"))]"}]}