{"sha": "3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1NDc4ZWEyMTBkMGM3MWIyYzBlNjk1ZjRmZDBlNWUxODNhOWI3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T00:53:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T00:53:28Z"}, "message": "(delete_jump): Use single_set to see if INSN just sets PC.\n\nRemove code to delete previous cc0-setting insn.\n(delete_compution): No longer conditional on #ifndef HAVE_cc0.\nIf insn uses CC0, delete previous insn that just sets CC0 for us;\ndo deletion via recursive call.\n\nFrom-SVN: r2936", "tree": {"sha": "34b052177fc9568800d79d36dc4514161ab81659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34b052177fc9568800d79d36dc4514161ab81659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a/comments", "author": null, "committer": null, "parents": [{"sha": "9fca773d22ce7679d9f683210a36ae5e520cb311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fca773d22ce7679d9f683210a36ae5e520cb311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fca773d22ce7679d9f683210a36ae5e520cb311"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "5ba93449e03ffe08faf59118b3e0790d8e295c30", "filename": "gcc/jump.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=3e5478ea210d0c71b2c0e695f4fd0e5e183a9b7a", "patch": "@@ -3041,12 +3041,34 @@ void\n delete_jump (insn)\n      rtx insn;\n {\n-  register rtx x = PATTERN (insn);\n+  register rtx set = single_set (insn);\n+\n+  if (set && GET_CODE (SET_DEST (set)) == PC)\n+    delete_computation (insn);\n+}\n+\n+/* Delete INSN and recursively delete insns that compute values used only\n+   by INSN.  This uses the REG_DEAD notes computed during flow analysis.\n+   If we are running before flow.c, we need do nothing since flow.c will\n+   delete dead code.  We also can't know if the registers being used are\n+   dead or not at this point.\n+\n+   Otherwise, look at all our REG_DEAD notes.  If a previous insn does\n+   nothing other than set a register that dies in this insn, we can delete\n+   that insn as well.\n+\n+   On machines with CC0, if CC0 is used in this insn, we may be able to\n+   delete the insn that set it.  */\n+\n+void\n+delete_computation (insn)\n+     rtx insn;\n+{\n+  rtx note, next;\n \n-  if (GET_CODE (x) == SET\n-      && GET_CODE (SET_DEST (x)) == PC)\n-    {\n #ifdef HAVE_cc0\n+  if (reg_referenced_p (cc0_rtx, insn))\n+    {\n       rtx prev = prev_nonnote_insn (insn);\n       /* We assume that at this stage\n \t CC's are always set explicitly\n@@ -3059,34 +3081,14 @@ delete_jump (insn)\n \t{\n \t  if (sets_cc0_p (PATTERN (prev)) > 0\n \t      && !FIND_REG_INC_NOTE (prev, NULL_RTX))\n-\t    delete_insn (prev);\n+\t    delete_computation (prev);\n \t  else\n \t    /* Otherwise, show that cc0 won't be used.  */\n \t    REG_NOTES (prev) = gen_rtx (EXPR_LIST, REG_UNUSED,\n \t\t\t\t\tcc0_rtx, REG_NOTES (prev));\n \t}\n-#endif\n-      /* Now delete the jump insn itself.  */\n-      delete_computation (insn);\n     }\n-}\n-\n-/* Delete INSN and recursively delete insns that compute values used only\n-   by INSN.  This uses the REG_DEAD notes computed during flow analysis.\n-   If we are running before flow.c, we need do nothing since flow.c will\n-   delete dead code.  We also can't know if the registers being used are\n-   dead or not at this point.\n-\n-   Otherwise, look at all our REG_DEAD notes.  If a previous insn does\n-   nothing other than set a register that dies in this insn, we can delete\n-   that insn as well.  */\n-\n-void\n-delete_computation (insn)\n-     rtx insn;\n-{\n-#ifndef HAVE_cc0\n-  rtx note, next;\n+#endif\n \n   for (note = REG_NOTES (insn); note; note = next)\n     {\n@@ -3157,7 +3159,7 @@ delete_computation (insn)\n \t    }\n \t}\n     }\n-#endif /* Don't HAVE_cc0 */\n+\n   delete_insn (insn);\n }\n \f"}]}