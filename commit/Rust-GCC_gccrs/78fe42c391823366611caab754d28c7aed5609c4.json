{"sha": "78fe42c391823366611caab754d28c7aed5609c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmZTQyYzM5MTgyMzM2NjYxMWNhYWI3NTRkMjhjN2FlZDU2MDljNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-21T20:21:04Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-21T20:21:04Z"}, "message": "AlgorithmParameterGenerator.java, [...]: Import cleanup.\n\n2004-10-21  Michael Koch  <konqueror@gmx.de>\n\n\t* java/security/AlgorithmParameterGenerator.java,\n\tjava/security/AlgorithmParameters.java,\n\tjava/security/AlgorithmParametersSpi.java,\n\tjava/security/AllPermission.java,\n\tjava/security/BasicPermission.java,\n\tjava/security/Certificate.java,\n\tjava/security/CodeSource.java,\n\tjava/security/DigestInputStream.java,\n\tjava/security/DigestOutputStream.java,\n\tjava/security/GuardedObject.java,\n\tjava/security/KeyFactory.java,\n\tjava/security/KeyFactorySpi.java,\n\tjava/security/KeyPairGenerator.java,\n\tjava/security/KeyStore.java,\n\tjava/security/KeyStoreSpi.java,\n\tjava/security/Permissions.java,\n\tjava/security/Security.java,\n\tjava/security/Signature.java,\n\tjava/security/UnresolvedPermission.java,\n\tjava/security/cert/CertPathBuilder.java,\n\tjava/security/cert/CertPathValidator.java,\n\tjava/security/cert/CertStore.java,\n\tjava/security/cert/Certificate.java,\n\tjava/security/cert/CertificateFactory.java,\n\tjava/security/cert/PolicyQualifierInfo.java,\n\tjava/security/cert/TrustAnchor.java,\n\tjava/security/cert/X509CRL.java,\n\tjava/security/cert/X509CRLSelector.java,\n\tjava/security/cert/X509CertSelector.java:\n\tImport cleanup.\n\nFrom-SVN: r89397", "tree": {"sha": "ca5e9e6e5d7f5512baf3126648ac200a1c7a6f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5e9e6e5d7f5512baf3126648ac200a1c7a6f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78fe42c391823366611caab754d28c7aed5609c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fe42c391823366611caab754d28c7aed5609c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78fe42c391823366611caab754d28c7aed5609c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78fe42c391823366611caab754d28c7aed5609c4/comments", "author": null, "committer": null, "parents": [{"sha": "02db0fc1ce50955172b5172a448bd0e9f5b70104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db0fc1ce50955172b5172a448bd0e9f5b70104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02db0fc1ce50955172b5172a448bd0e9f5b70104"}], "stats": {"total": 953, "additions": 500, "deletions": 453}, "files": [{"sha": "7ddfd77f59079370def4a8718959e7ddcc1d36ee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,3 +1,36 @@\n+2004-10-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/security/AlgorithmParameterGenerator.java,\n+\tjava/security/AlgorithmParameters.java,\n+\tjava/security/AlgorithmParametersSpi.java,\n+\tjava/security/AllPermission.java,\n+\tjava/security/BasicPermission.java,\n+\tjava/security/Certificate.java,\n+\tjava/security/CodeSource.java,\n+\tjava/security/DigestInputStream.java,\n+\tjava/security/DigestOutputStream.java,\n+\tjava/security/GuardedObject.java,\n+\tjava/security/KeyFactory.java,\n+\tjava/security/KeyFactorySpi.java,\n+\tjava/security/KeyPairGenerator.java,\n+\tjava/security/KeyStore.java,\n+\tjava/security/KeyStoreSpi.java,\n+\tjava/security/Permissions.java,\n+\tjava/security/Security.java,\n+\tjava/security/Signature.java,\n+\tjava/security/UnresolvedPermission.java,\n+\tjava/security/cert/CertPathBuilder.java,\n+\tjava/security/cert/CertPathValidator.java,\n+\tjava/security/cert/CertStore.java,\n+\tjava/security/cert/Certificate.java,\n+\tjava/security/cert/CertificateFactory.java,\n+\tjava/security/cert/PolicyQualifierInfo.java,\n+\tjava/security/cert/TrustAnchor.java,\n+\tjava/security/cert/X509CRL.java,\n+\tjava/security/cert/X509CRLSelector.java,\n+\tjava/security/cert/X509CertSelector.java:\n+\tImport cleanup.\n+\n 2004-10-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/rmi/MarshalledObject.java,"}, {"sha": "cf245da5a6279549a98d8a15ebb92110c83b115c", "filename": "libjava/java/security/AlgorithmParameterGenerator.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* AlgorithmParameterGenerator.java --- Algorithm Parameter Generator\n-   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,12 +35,13 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-package java.security;\n \n-import java.security.spec.AlgorithmParameterSpec;\n+package java.security;\n \n import gnu.java.security.Engine;\n \n+import java.security.spec.AlgorithmParameterSpec;\n+\n /**\n  * <p>The <code>AlgorithmParameterGenerator</code> class is used to generate a\n  * set of parameters to be used with a certain algorithm. Parameter generators"}, {"sha": "afeb843a97edc2415e106c9c3f1a5449dc989e55", "filename": "libjava/java/security/AlgorithmParameters.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* AlgorithmParameters.java --- Algorithm Parameters Implementation Class\n-   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,14 +35,15 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-package java.security;\n \n-import java.security.spec.InvalidParameterSpecException;\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.io.IOException;\n+package java.security;\n \n import gnu.java.security.Engine;\n \n+import java.io.IOException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n /**\n  * <p>This class is used as an opaque representation of cryptographic\n  * parameters.</p>"}, {"sha": "d3bcdc78259c845ab78e609a997ae4fd071040ac", "filename": "libjava/java/security/AlgorithmParametersSpi.java", "status": "modified", "additions": 70, "deletions": 66, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* AlgorithmParametersSpi.java --- Algorithm Parameters SPI\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,111 +35,115 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n-import java.security.spec.InvalidParameterSpecException;\n-import java.security.spec.AlgorithmParameterSpec;\n+\n import java.io.IOException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n \n /**\n-   AlgorithmParametersSpi is the Service Provider Interface\n-   for the Algorithm Parameters class. This class is used\n-   to manage the algorithm parameters.\n-\n-   @since JDK 1.2\n-   @author Mark Benvenuto\n+ * AlgorithmParametersSpi is the Service Provider Interface\n+ * for the Algorithm Parameters class. This class is used\n+ * to manage the algorithm parameters.\n+ *\n+ * @since 1.2\n+ * @author Mark Benvenuto\n  */\n public abstract class AlgorithmParametersSpi\n {\n   /**\n-     Creates a new instance of AlgorithmParametersSpi\n+   * Creates a new instance of AlgorithmParametersSpi\n    */\n   public AlgorithmParametersSpi()\n   {\n   }\n \n   /**\n-     Initializes the engine with the specified \n-     AlgorithmParameterSpec class.\n-\n-     @param paramSpec A AlgorithmParameterSpec to initialize with\n-\n-     @throws InvalidParameterSpecException For an inapporiate ParameterSpec class\n+   * Initializes the engine with the specified \n+   * AlgorithmParameterSpec class.\n+   *\n+   * @param paramSpec A AlgorithmParameterSpec to initialize with\n+   *\n+   * @throws InvalidParameterSpecException For an inapporiate\n+   * ParameterSpec class\n    */\n-  protected abstract void engineInit(AlgorithmParameterSpec paramSpec) throws\n-    InvalidParameterSpecException;\n+  protected abstract void engineInit(AlgorithmParameterSpec paramSpec)\n+    throws InvalidParameterSpecException;\n \n   /**\n-     Initializes the engine with the specified \n-     parameters stored in the byte array and decodes them\n-     according to the ASN.1 specification. If the ASN.1\n-     specification exists then it succeeds or else it throws\n-     IOException.\n-\n-     @param params Parameters to initialize with\n-\n-     @throws IOException Decoding Error\n+   * Initializes the engine with the specified \n+   * parameters stored in the byte array and decodes them\n+   * according to the ASN.1 specification. If the ASN.1\n+   * specification exists then it succeeds or else it throws\n+   * IOException.\n+   *\n+   * @param params Parameters to initialize with\n+   *\n+   * @throws IOException Decoding Error\n    */\n   protected abstract void engineInit(byte[]params) throws IOException;\n \n   /**\n-     Initializes the engine with the specified \n-     parameters stored in the byte array and decodes them\n-     according to the specified decoding specification. \n-     If format is null, then it is decoded using the ASN.1 \n-     specification if it exists or else it throws\n-     IOException.\n-\n-     @param params Parameters to initialize with\n-     @param format Name of decoding format to use\n-\n-     @throws IOException Decoding Error\n+   * Initializes the engine with the specified \n+   * parameters stored in the byte array and decodes them\n+   * according to the specified decoding specification. \n+   * If format is null, then it is decoded using the ASN.1 \n+   * specification if it exists or else it throws\n+   * IOException.\n+   *\n+   * @param params Parameters to initialize with\n+   * @param format Name of decoding format to use\n+   *\n+   * @throws IOException Decoding Error\n    */\n-  protected abstract void engineInit(byte[]params,\n-\t\t\t\t     String format) throws IOException;\n+  protected abstract void engineInit(byte[]params, String format)\n+    throws IOException;\n \n \n   /**\n-     Returns a specification of this AlgorithmParameters object.\n-     paramSpec identifies the class to return the AlgortihmParameters\n-     in. \n-\n-     @param paramSpec Class to return AlgorithmParameters in\n-\n-     @return the parameter specification\n-\n-     @throws InvalidParameterSpecException if the paramSpec is an invalid parameter class\n+   * Returns a specification of this AlgorithmParameters object.\n+   * paramSpec identifies the class to return the AlgortihmParameters\n+   * in.\n+   *\n+   * @param paramSpec Class to return AlgorithmParameters in\n+   *\n+   * @return the parameter specification\n+   *\n+   * @throws InvalidParameterSpecException if the paramSpec is an\n+   * invalid parameter class\n    */\n   protected abstract AlgorithmParameterSpec engineGetParameterSpec(Class\n \t\t\t\t\t\t\t\t   paramSpec)\n     throws InvalidParameterSpecException;\n \n \n   /**\n-     Returns the parameters in the default encoding format. \n-     The primary encoding format is ASN.1 format if it exists\n-     for the specified type.\n-\n-     @return byte array representing the parameters\n+   * Returns the parameters in the default encoding format. \n+   * The primary encoding format is ASN.1 format if it exists\n+   * for the specified type.\n+   *\n+   * @return byte array representing the parameters\n    */\n   protected abstract byte[] engineGetEncoded() throws IOException;\n \n \n   /**\n-     Returns the parameters in the specified encoding format. \n-     If <code>format</code> is <code>null</code> then the \n-     primary encoding format is used, the ASN.1 format, \n-     if it exists for the specified type.\n-\n-     @return byte array representing the parameters\n+   * Returns the parameters in the specified encoding format. \n+   * If <code>format</code> is <code>null</code> then the \n+   * primary encoding format is used, the ASN.1 format, \n+   * if it exists for the specified type.\n+   *\n+   * @return byte array representing the parameters\n    */\n-  protected abstract byte[] engineGetEncoded(String format) throws\n-    IOException;\n+  protected abstract byte[] engineGetEncoded(String format)\n+    throws IOException;\n \n   /**\n-     Returns a string describing the parameters in the \n-     AlgorithmParametersSpi class.\n-\n-     @return A string representing the format of the parameters.\n+   * Returns a string describing the parameters in the \n+   * AlgorithmParametersSpi class.\n+   *\n+   * @return A string representing the format of the parameters.\n    */\n   protected abstract String engineToString();\n }"}, {"sha": "32d0b45f57ca8829904a79ea14c00672dd31c1de", "filename": "libjava/java/security/AllPermission.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAllPermission.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* AllPermission.java -- Permission to do anything\n-   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,19 +35,21 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n-import java.util.Enumeration;\n-import java.util.Collections;\n import gnu.java.util.EmptyEnumeration;\n \n+import java.util.Collections;\n+import java.util.Enumeration;\n+\n /**\n  * This class is a permission that implies all other permissions.  Granting\n  * this permission effectively grants all others.  Extreme caution should\n  * be exercised in granting this permission.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @see AccessController\n  * @see Permissions\n  * @see SecurityManager"}, {"sha": "fef0b87a8ad1dcfbeb189e93049872398ba1732f", "filename": "libjava/java/security/BasicPermission.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FBasicPermission.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* BasicPermission.java -- implements a simple named permission\n-   Copyright (C) 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n import java.io.Serializable;\n-import java.util.Hashtable;\n import java.util.Enumeration;\n+import java.util.Hashtable;\n \n /**\n  * This class implements a simple model for named permissions without an"}, {"sha": "ab6fdb4ac175a5b662a96317bd8b2f6df521b63b", "filename": "libjava/java/security/Certificate.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FCertificate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FCertificate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCertificate.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* Certificate.java -- deprecated interface for modeling digital certificates\n-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,9 +38,9 @@\n \n package java.security;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.io.IOException;\n \n /**\n  * This interface models a digital certificate which verifies the"}, {"sha": "12eb156ed1e70674ab8df10e8cf8c255fae3cfa1", "filename": "libjava/java/security/CodeSource.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCodeSource.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* CodeSource.java -- Code location and certifcates\n-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -43,13 +43,13 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n-import java.net.URL;\n import java.net.SocketPermission;\n+import java.net.URL;\n // Note that this overrides Certificate in this package.\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -59,8 +59,8 @@\n  * represented by a URL), and the list of certificates that are used to\n  * check the signatures of signed code loaded from this source.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.1\n  * @status updated to 1.4\n  */"}, {"sha": "2ca9d1b395606bf778e1fb9e0e0df0179823e48a", "filename": "libjava/java/security/DigestInputStream.java", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* DigestInputStream.java --- An Input stream tied to a message digest\n-   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,41 +35,42 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n-import java.io.InputStream;\n import java.io.FilterInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n \n /**\n-   DigestInputStream is a class that ties an InputStream with a \n-   MessageDigest. The Message Digest is used by the class to \n-   update it self as bytes are read from the InputStream.\n-\n-   The updating to the digest depends on the on flag which is set\n-   to true by default to tell the class to update the data\n-   in the message digest.\n-\n-   @version 0.0\n-   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+ * DigestInputStream is a class that ties an InputStream with a \n+ * MessageDigest. The Message Digest is used by the class to \n+ * update it self as bytes are read from the InputStream.\n+ *\n+ * The updating to the digest depends on the on flag which is set\n+ * to true by default to tell the class to update the data\n+ * in the message digest.\n+ *\n+ * @version 0.0\n+ * @author Mark Benvenuto <ivymccough@worldnet.att.net>\n  */\n public class DigestInputStream extends FilterInputStream\n {\n   /**\n-     The message digest for the DigestInputStream \n+   * The message digest for the DigestInputStream \n    */\n   protected MessageDigest digest;\n \n   //Manages the on flag\n   private boolean state = true;\n \n   /**\n-     Constructs a new DigestInputStream.\n-     It associates a MessageDigest with the stream to \n-     compute the stream as data is written.\n-\n-     @param stream An InputStream to associate this stream with\n-     @param digest A MessageDigest to hash the stream with\n+   * Constructs a new DigestInputStream.\n+   * It associates a MessageDigest with the stream to \n+   * compute the stream as data is written.\n+   *\n+   * @param stream An InputStream to associate this stream with\n+   * @param digest A MessageDigest to hash the stream with\n    */\n   public DigestInputStream(InputStream stream, MessageDigest digest)\n   {\n@@ -79,35 +80,35 @@ public DigestInputStream(InputStream stream, MessageDigest digest)\n   }\n \n   /**\n-     Returns the MessageDigest associated with this DigestInputStream \n-\n-     @return The MessageDigest used to hash this stream\n+   * Returns the MessageDigest associated with this DigestInputStream \n+   *\n+   * @return The MessageDigest used to hash this stream\n    */\n   public MessageDigest getMessageDigest()\n   {\n     return digest;\n   }\n \n   /**\n-     Sets the current MessageDigest to current parameter\n-\n-     @param digest A MessageDigest to associate with this stream\n+   * Sets the current MessageDigest to current parameter\n+   *\n+   * @param digest A MessageDigest to associate with this stream\n    */\n   public void setMessageDigest(MessageDigest digest)\n   {\n     this.digest = digest;\n   }\n \n   /** \n-     Reads a byte from the input stream and updates the digest.\n-     This method reads the underlying input stream and if the \n-     on flag is true then updates the message digest.\n-\n-     @return Returns a byte from the input stream, -1 is returned to indicate that \n-     the end of stream was reached before this read call\n-\n-     @throws IOException if an IO error occurs in the underlying input stream,\n-     this error is thrown\n+   * Reads a byte from the input stream and updates the digest.\n+   * This method reads the underlying input stream and if the \n+   * on flag is true then updates the message digest.\n+   *\n+   * @return Returns a byte from the input stream, -1 is returned to indicate that \n+   * the end of stream was reached before this read call\n+   *\n+   * @throws IOException if an IO error occurs in the underlying input stream,\n+   * this error is thrown\n    */\n   public int read() throws IOException\n   {\n@@ -120,18 +121,18 @@ public int read() throws IOException\n   }\n \n   /** \n-     Reads bytes from the input stream and updates the digest.\n-     This method reads the underlying input stream and if the \n-     on flag is true then updates the message digest.\n-\n-     @param b a byte array to store the data from the input stream\n-     @param off an offset to start at in the array\n-     @param len length of data to read\n-     @return Returns count of bytes read, -1 is returned to indicate that \n-     the end of stream was reached before this read call\n-\n-     @throws IOException if an IO error occurs in the underlying input stream,\n-     this error is thrown\n+   * Reads bytes from the input stream and updates the digest.\n+   * This method reads the underlying input stream and if the \n+   * on flag is true then updates the message digest.\n+   *\n+   * @param b a byte array to store the data from the input stream\n+   * @param off an offset to start at in the array\n+   * @param len length of data to read\n+   * @return Returns count of bytes read, -1 is returned to indicate that \n+   * the end of stream was reached before this read call\n+   *\n+   * @throws IOException if an IO error occurs in the underlying input stream,\n+   * this error is thrown\n    */\n   public int read(byte[]b, int off, int len) throws IOException\n   {\n@@ -144,20 +145,20 @@ public int read(byte[]b, int off, int len) throws IOException\n   }\n \n   /**\n-     Sets the flag specifing if this DigestInputStream updates the\n-     digest in the write() methods. The default is on;\n-\n-     @param on True means it digests stream, false means it does not\n+   * Sets the flag specifing if this DigestInputStream updates the\n+   * digest in the write() methods. The default is on;\n+   *\n+   * @param on True means it digests stream, false means it does not\n    */\n   public void on(boolean on)\n   {\n     state = on;\n   }\n \n   /**\n-     Converts the input stream and underlying message digest to a string.\n-\n-     @return A string representing the input stream and message digest.\n+   * Converts the input stream and underlying message digest to a string.\n+   *\n+   * @return A string representing the input stream and message digest.\n    */\n   public String toString()\n   {"}, {"sha": "caf059bf40e8fe14916390885e7043f568856c06", "filename": "libjava/java/security/DigestOutputStream.java", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* DigestOutputStream.java --- An output stream tied to a message digest\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,41 +35,42 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n-import java.io.OutputStream;\n import java.io.FilterOutputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n \n /**\n-   DigestOutputStream is a class that ties an OutputStream with a\n-   MessageDigest. The Message Digest is used by the class to update it\n-   self as bytes are written to the OutputStream.\n-\n-   The updating to the digest depends on the on flag which is set to\n-   true by default that tells the class to update the data in the\n-   message digest.\n-\n-   @version 0.0\n-   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+ * DigestOutputStream is a class that ties an OutputStream with a\n+ * MessageDigest. The Message Digest is used by the class to update it\n+ * self as bytes are written to the OutputStream.\n+ *\n+ * The updating to the digest depends on the on flag which is set to\n+ * true by default that tells the class to update the data in the\n+ * message digest.\n+ *\n+ * @version 0.0\n+ * @author Mark Benvenuto <ivymccough@worldnet.att.net>\n  */\n public class DigestOutputStream extends FilterOutputStream\n {\n   /**\n-     The message digest for the DigestOutputStream\n+   * The message digest for the DigestOutputStream\n    */\n   protected MessageDigest digest;\n \n   //Manages the on flag\n   private boolean state = true;\n \n   /**\n-     Constructs a new DigestOutputStream.  It associates a\n-     MessageDigest with the stream to compute the stream as data is\n-     written.\n-\n-     @param stream An OutputStream to associate this stream with\n-     @param digest A MessageDigest to hash the stream with\n+   * Constructs a new DigestOutputStream.  It associates a\n+   * MessageDigest with the stream to compute the stream as data is\n+   * written.\n+   *\n+   * @param stream An OutputStream to associate this stream with\n+   * @param digest A MessageDigest to hash the stream with\n    */\n   public DigestOutputStream(OutputStream stream, MessageDigest digest)\n   {\n@@ -78,19 +79,19 @@ public DigestOutputStream(OutputStream stream, MessageDigest digest)\n   }\n \n   /**\n-     Returns the MessageDigest associated with this DigestOutputStream\n-\n-     @return The MessageDigest used to hash this stream\n+   * Returns the MessageDigest associated with this DigestOutputStream\n+   *\n+   * @return The MessageDigest used to hash this stream\n    */\n   public MessageDigest getMessageDigest()\n   {\n     return digest;\n   }\n \n   /**\n-     Sets the current MessageDigest to current parameter\n-\n-     @param digest A MessageDigest to associate with this stream\n+   * Sets the current MessageDigest to current parameter\n+   *\n+   * @param digest A MessageDigest to associate with this stream\n    */\n   public void setMessageDigest(MessageDigest digest)\n   {\n@@ -99,13 +100,13 @@ public void setMessageDigest(MessageDigest digest)\n \n \n   /**\n-     Updates the hash if the on flag is true and then writes a byte to\n-     the underlying output stream.\n-\n-     @param b A byte to write to the output stream\n-\n-     @exception IOException if the underlying output stream \n-     cannot write the byte, this is thrown.\n+   * Updates the hash if the on flag is true and then writes a byte to\n+   * the underlying output stream.\n+   *\n+   * @param b A byte to write to the output stream\n+   *\n+   * @exception IOException if the underlying output stream \n+   * cannot write the byte, this is thrown.\n    */\n   public void write(int b) throws IOException\n   {\n@@ -116,15 +117,15 @@ public void write(int b) throws IOException\n   }\n \n   /**\n-     Updates the hash if the on flag is true and then writes the bytes\n-     to the underlying output stream.\n-\n-     @param b Bytes to write to the output stream\n-     @param off Offset to start to start at in array\n-     @param len Length of data to write\n-\n-     @exception IOException if the underlying output stream \n-     cannot write the bytes, this is thrown.\n+   * Updates the hash if the on flag is true and then writes the bytes\n+   * to the underlying output stream.\n+   *\n+   * @param b Bytes to write to the output stream\n+   * @param off Offset to start to start at in array\n+   * @param len Length of data to write\n+   *\n+   * @exception IOException if the underlying output stream \n+   * cannot write the bytes, this is thrown.\n    */\n   public void write(byte[]b, int off, int len) throws IOException\n   {\n@@ -135,20 +136,20 @@ public void write(byte[]b, int off, int len) throws IOException\n   }\n \n   /**\n-     Sets the flag specifying if this DigestOutputStream updates the\n-     digest in the write() methods. The default is on;\n-\n-     @param on True means it digests stream, false means it does not\n+   * Sets the flag specifying if this DigestOutputStream updates the\n+   * digest in the write() methods. The default is on;\n+   *\n+   * @param on True means it digests stream, false means it does not\n    */\n   public void on(boolean on)\n   {\n     state = on;\n   }\n \n   /**\n-     Converts the output stream and underlying message digest to a string.\n-\n-     @return A string representing the output stream and message digest.\n+   * Converts the output stream and underlying message digest to a string.\n+   *\n+   * @return A string representing the output stream and message digest.\n    */\n   public String toString()\n   {"}, {"sha": "a4cdf74bd3e26234df1007286dc9b82cd6076987", "filename": "libjava/java/security/GuardedObject.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGuardedObject.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* GuardedObject.java -- An object protected by a Guard\n-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n-import java.io.Serializable;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n \n /**\n  * This class is an object that is guarded by a <code>Guard</code> object."}, {"sha": "27171f5096637b5955f8fcac14b50223d52d1ec4", "filename": "libjava/java/security/KeyFactory.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyFactory.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* KeyFactory.java --- Key Factory Class\n-   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,13 +35,14 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-package java.security;\n \n-import java.security.spec.KeySpec;\n-import java.security.spec.InvalidKeySpecException;\n+package java.security;\n \n import gnu.java.security.Engine;\n \n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+\n /**\n  * <p>Key factories are used to convert keys (opaque cryptographic keys of type\n  * {@link Key}) into key specifications (transparent representations of the"}, {"sha": "6c240d735dd1ac1f724910f9d45e2f9d3afadf31", "filename": "libjava/java/security/KeyFactorySpi.java", "status": "modified", "additions": 62, "deletions": 60, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* KeyFactorySpi.java --- Key Factory Service Provider Interface\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,96 +35,98 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n-import java.security.spec.KeySpec;\n+\n import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n \n /**\n-   KeyFactorySpi is the Service Provider Interface (SPI) for the \n-   KeyFactory class. This is the interface for providers to \n-   supply to implement a key factory for an algorithm.\n-\n-   Key factories are used to convert keys (opaque cryptographic \n-   keys of type Key) into key specifications (transparent \n-   representations of the underlying key material).\n-\n-   Key factories are bi-directional. They allow a key class \n-   to be converted into a key specification (key material) and\n-   back again.\n-\n-   For example DSA public keys can be specified as \n-   DSAPublicKeySpec or X509EncodedKeySpec. The key factory\n-   translate these key specifications. \n-\n-   @since JDK 1.2\n-   @author Mark Benvenuto\n+ * KeyFactorySpi is the Service Provider Interface (SPI) for the \n+ * KeyFactory class. This is the interface for providers to \n+ * supply to implement a key factory for an algorithm.\n+ *\n+ * Key factories are used to convert keys (opaque cryptographic \n+ * keys of type Key) into key specifications (transparent \n+ * representations of the underlying key material).\n+ *\n+ * Key factories are bi-directional. They allow a key class \n+ * to be converted into a key specification (key material) and\n+ * back again.\n+ *\n+ * For example DSA public keys can be specified as \n+ * DSAPublicKeySpec or X509EncodedKeySpec. The key factory\n+ * translate these key specifications. \n+ *\n+ * @since JDK 1.2\n+ * @author Mark Benvenuto\n  */\n public abstract class KeyFactorySpi\n {\n   /**\n-     Constucts a new KeyFactorySpi.\n+   * Constucts a new KeyFactorySpi.\n    */\n   public KeyFactorySpi()\n   {\n   }\n \n   /**\n-     Generates a public key from the provided key specification.\n-\n-     @param keySpec key specification\n-\n-     @return the public key\n-\n-     @throws InvalidKeySpecException invalid key specification for\n-     this key factory to produce a public key\n+   * Generates a public key from the provided key specification.\n+   *\n+   * @param keySpec key specification\n+   *\n+   * @return the public key\n+   *\n+   * @throws InvalidKeySpecException invalid key specification for\n+   * this key factory to produce a public key\n    */\n   protected abstract PublicKey engineGeneratePublic(KeySpec keySpec)\n     throws InvalidKeySpecException;\n \n \n   /**\n-     Generates a private key from the provided key specification.\n-\n-     @param keySpec key specification\n-\n-     @return the private key\n-\n-     @throws InvalidKeySpecException invalid key specification for\n-     this key factory to produce a private key\n+   * Generates a private key from the provided key specification.\n+   *\n+   * @param keySpec key specification\n+   *\n+   * @return the private key\n+   *\n+   * @throws InvalidKeySpecException invalid key specification for\n+   * this key factory to produce a private key\n    */\n   protected abstract PrivateKey engineGeneratePrivate(KeySpec keySpec)\n     throws InvalidKeySpecException;\n \n   /**\n-     Returns a key specification for the given key. keySpec \n-     identifies the specification class to return the key \n-     material in.\n-\n-     @param key the key\n-     @param keySpec the specification class to return the \n-     key material in.\n-\n-     @return the key specification in an instance of the requested\n-     specification class\n-\n-     @throws InvalidKeySpecException the requested key specification\n-     is inappropriate for this key or the key is \n-     unrecognized.\n+   * Returns a key specification for the given key. keySpec \n+   * identifies the specification class to return the key \n+   * material in.\n+   *\n+   * @param key the key\n+   * @param keySpec the specification class to return the \n+   * key material in.\n+   *\n+   * @return the key specification in an instance of the requested\n+   * specification class\n+   *\n+   * @throws InvalidKeySpecException the requested key specification\n+   * is inappropriate for this key or the key is \n+   * unrecognized.\n    */\n   protected abstract KeySpec engineGetKeySpec(Key key, Class keySpec)\n     throws InvalidKeySpecException;\n \n \n   /**\n-     Translates the key from an unknown or untrusted provider\n-     into a key for this key factory.\n-\n-     @param the key from an unknown or untrusted provider\n-\n-     @return the translated key\n-\n-     @throws InvalidKeySpecException if the key cannot be \n-     processed by this key factory\n+   * Translates the key from an unknown or untrusted provider\n+   * into a key for this key factory.\n+   *\n+   * @param the key from an unknown or untrusted provider\n+   *\n+   * @return the translated key\n+   *\n+   * @throws InvalidKeySpecException if the key cannot be \n+   * processed by this key factory\n    */\n   protected abstract Key engineTranslateKey(Key key)\n     throws InvalidKeyException;"}, {"sha": "38bd007fa6a86c4826599190872956cf1c664fca", "filename": "libjava/java/security/KeyPairGenerator.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* KeyPairGenerator.java --- Key Pair Generator Class\n-   Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,12 +35,13 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-package java.security;\n \n-import java.security.spec.AlgorithmParameterSpec;\n+package java.security;\n \n import gnu.java.security.Engine;\n \n+import java.security.spec.AlgorithmParameterSpec;\n+\n /**\n  * <p>The <code>KeyPairGenerator</code> class is used to generate pairs of\n  * public and private keys. Key pair generators are constructed using the"}, {"sha": "99aaed3f123be32405526db8695f8f224e3e1ca5", "filename": "libjava/java/security/KeyStore.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStore.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* KeyStore.java --- Key Store Class\n-   Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,17 +35,18 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n-import java.io.InputStream;\n+import gnu.java.security.Engine;\n+\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.security.cert.CertificateException;\n import java.util.Date;\n import java.util.Enumeration;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * Keystore represents an in-memory collection of keys and \n  * certificates. There are two types of entries:"}, {"sha": "56f8c965ed6b886d827490b998acbde66f3c30fe", "filename": "libjava/java/security/KeyStoreSpi.java", "status": "modified", "additions": 138, "deletions": 136, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* KeyStoreSpi.java --- Key Store Service Provider Interface\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,101 +35,103 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n-import java.io.InputStream;\n+\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.security.cert.CertificateException;\n import java.util.Date;\n import java.util.Enumeration;\n \n /**\n-   KeyStoreSpi is the Service Provider Interface (SPI) for the \n-   KeyStore class. This is the interface for providers to \n-   supply to implement a keystore for a particular keystore \n-   type.\n-\n-   @since JDK 1.2\n-   @author Mark Benvenuto\n+ * KeyStoreSpi is the Service Provider Interface (SPI) for the \n+ * KeyStore class. This is the interface for providers to \n+ * supply to implement a keystore for a particular keystore \n+ * type.\n+ *\n+ * @since 1.2\n+ * @author Mark Benvenuto\n  */\n public abstract class KeyStoreSpi\n {\n   /**\n-     Constructs a new KeyStoreSpi\n+   * Constructs a new KeyStoreSpi\n    */\n   public KeyStoreSpi()\n   {\n   }\n \n   /**\n-     Returns the key associated with given alias using the \n-     supplied password.\n-\n-     @param alias an alias for the key to get\n-     @param password password to access key with\n-\n-     @return the requested key, or null otherwise\n-\n-     @throws NoSuchAlgorithmException if there is no algorithm\n-     for recovering the key\n-     @throws UnrecoverableKeyException key cannot be reocovered\n-     (wrong password).\n+   * Returns the key associated with given alias using the \n+   * supplied password.\n+   *\n+   * @param alias an alias for the key to get\n+   * @param password password to access key with\n+   *\n+   * @return the requested key, or null otherwise\n+   *\n+   * @throws NoSuchAlgorithmException if there is no algorithm\n+   * for recovering the key\n+   * @throws UnrecoverableKeyException key cannot be reocovered\n+   * (wrong password).\n    */\n   public abstract Key engineGetKey(String alias, char[]password)\n     throws NoSuchAlgorithmException, UnrecoverableKeyException;\n \n   /**\n-     Gets a Certificate chain for the specified alias.\n-\n-     @param alias the alias name\n-\n-     @return a chain of Certificates ( ordered from the user's \n-     certificate to the Certificate Authority's ) or \n-     null if the alias does not exist or there is no\n-     certificate chain for the alias ( the alias refers\n-     to a trusted certificate entry or there is no entry).\n+   * Gets a Certificate chain for the specified alias.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @return a chain of Certificates ( ordered from the user's \n+   * certificate to the Certificate Authority's ) or \n+   * null if the alias does not exist or there is no\n+   * certificate chain for the alias ( the alias refers\n+   * to a trusted certificate entry or there is no entry).\n    */\n   public abstract java.security.cert.\n     Certificate[] engineGetCertificateChain(String alias);\n \n \n   /**\n-     Gets a Certificate for the specified alias.\n-\n-     If there is a trusted certificate entry then that is returned.\n-     it there is a key entry with a certificate chain then the\n-     first certificate is return or else null.\n-\n-     @param alias the alias name\n-\n-     @return a Certificate or null if the alias does not exist \n-     or there is no certificate for the alias\n+   * Gets a Certificate for the specified alias.\n+   *\n+   * If there is a trusted certificate entry then that is returned.\n+   * it there is a key entry with a certificate chain then the\n+   * first certificate is return or else null.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @return a Certificate or null if the alias does not exist \n+   * or there is no certificate for the alias\n    */\n   public abstract java.security.cert.\n     Certificate engineGetCertificate(String alias);\n \n   /**\n-     Gets entry creation date for the specified alias.\n-\n-     @param alias the alias name\n-\n-     @returns the entry creation date or null\n+   * Gets entry creation date for the specified alias.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @returns the entry creation date or null\n    */\n   public abstract Date engineGetCreationDate(String alias);\n \n   /**\n-     Assign the key to the alias in the keystore, protecting it\n-     with the given password. It will overwrite an existing \n-     entry and if the key is a PrivateKey, also add the \n-     certificate chain representing the corresponding public key.\n-\n-     @param alias the alias name\n-     @param key the key to add\n-     @password the password to protect with\n-     @param chain the certificate chain for the corresponding\n-     public key\n-\n-     @throws KeyStoreException if it fails\n+   * Assign the key to the alias in the keystore, protecting it\n+   * with the given password. It will overwrite an existing \n+   * entry and if the key is a PrivateKey, also add the \n+   * certificate chain representing the corresponding public key.\n+   *\n+   * @param alias the alias name\n+   * @param key the key to add\n+   * @password the password to protect with\n+   * @param chain the certificate chain for the corresponding\n+   * public key\n+   *\n+   * @throws KeyStoreException if it fails\n    */\n   public abstract void engineSetKeyEntry(String alias, Key key,\n \t\t\t\t\t char[]password,\n@@ -138,17 +140,17 @@ public abstract void engineSetKeyEntry(String alias, Key key,\n     KeyStoreException;\n \n   /**\n-     Assign the key to the alias in the keystore. It will overwrite\n-     an existing entry and if the key is a PrivateKey, also \n-     add the certificate chain representing the corresponding \n-     public key.\n-\n-     @param alias the alias name\n-     @param key the key to add\n-     @param chain the certificate chain for the corresponding\n-     public key\n-\n-     @throws KeyStoreException if it fails\n+   * Assign the key to the alias in the keystore. It will overwrite\n+   * an existing entry and if the key is a PrivateKey, also \n+   * add the certificate chain representing the corresponding \n+   * public key.\n+   *\n+   * @param alias the alias name\n+   * @param key the key to add\n+   * @param chain the certificate chain for the corresponding\n+   * public key\n+   *\n+   * @throws KeyStoreException if it fails\n    */\n   public abstract void engineSetKeyEntry(String alias, byte[]key,\n \t\t\t\t\t java.security.cert.\n@@ -157,116 +159,116 @@ public abstract void engineSetKeyEntry(String alias, byte[]key,\n \n \n   /**\n-     Assign the certificate to the alias in the keystore. It \n-     will overwrite an existing entry.\n-\n-     @param alias the alias name\n-     @param cert the certificate to add\n-\n-     @throws KeyStoreException if it fails\n+   * Assign the certificate to the alias in the keystore. It \n+   * will overwrite an existing entry.\n+   *\n+   * @param alias the alias name\n+   * @param cert the certificate to add\n+   *\n+   * @throws KeyStoreException if it fails\n    */\n   public abstract void engineSetCertificateEntry(String alias,\n \t\t\t\t\t\t java.security.cert.\n \t\t\t\t\t\t Certificate cert) throws\n     KeyStoreException;\n \n   /**\n-     Deletes the entry for the specified entry.\n-\n-     @param alias the alias name\n-\n-     @throws KeyStoreException if it fails\n+   * Deletes the entry for the specified entry.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @throws KeyStoreException if it fails\n    */\n   public abstract void engineDeleteEntry(String alias)\n     throws KeyStoreException;\n \n   /**\n-     Generates a list of all the aliases in the keystore.\n-\n-     @return an Enumeration of the aliases\n+   * Generates a list of all the aliases in the keystore.\n+   *\n+   * @return an Enumeration of the aliases\n    */\n   public abstract Enumeration engineAliases();\n \n   /**\n-     Determines if the keystore contains the specified alias.\n-\n-     @param alias the alias name\n-\n-     @return true if it contains the alias, false otherwise\n+   * Determines if the keystore contains the specified alias.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @return true if it contains the alias, false otherwise\n    */\n   public abstract boolean engineContainsAlias(String alias);\n \n   /**\n-     Returns the number of entries in the keystore.\n-\n-     @returns the number of keystore entries.\n+   * Returns the number of entries in the keystore.\n+   *\n+   * @returns the number of keystore entries.\n    */\n   public abstract int engineSize();\n \n   /**\n-     Determines if the keystore contains a key entry for \n-     the specified alias.\n-\n-     @param alias the alias name\n-\n-     @return true if it is a key entry, false otherwise\n+   * Determines if the keystore contains a key entry for \n+   * the specified alias.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @return true if it is a key entry, false otherwise\n    */\n   public abstract boolean engineIsKeyEntry(String alias);\n \n   /**\n-     Determines if the keystore contains a certificate entry for \n-     the specified alias.\n-\n-     @param alias the alias name\n-\n-     @return true if it is a certificate entry, false otherwise\n+   * Determines if the keystore contains a certificate entry for \n+   * the specified alias.\n+   *\n+   * @param alias the alias name\n+   *\n+   * @return true if it is a certificate entry, false otherwise\n    */\n   public abstract boolean engineIsCertificateEntry(String alias);\n \n   /**\n-     Determines if the keystore contains the specified certificate \n-     entry and returns the alias.\n-\n-     It checks every entry and for a key entry checks only the\n-     first certificate in the chain.\n-\n-     @param cert Certificate to look for\n-\n-     @return alias of first matching certificate, null if it \n-     does not exist.\n+   * Determines if the keystore contains the specified certificate \n+   * entry and returns the alias.\n+   *\n+   * It checks every entry and for a key entry checks only the\n+   * first certificate in the chain.\n+   *\n+   * @param cert Certificate to look for\n+   *\n+   * @return alias of first matching certificate, null if it \n+   * does not exist.\n    */\n   public abstract String engineGetCertificateAlias(java.security.cert.\n \t\t\t\t\t\t   Certificate cert);\n \n   /**\n-     Stores the keystore in the specified output stream and it\n-     uses the specified key it keep it secure.\n-\n-     @param stream the output stream to save the keystore to\n-     @param password the password to protect the keystore integrity with\n-\n-     @throws IOException if an I/O error occurs.\n-     @throws NoSuchAlgorithmException the data integrity algorithm \n-     used cannot be found.\n-     @throws CertificateException if any certificates could not be\n-     stored in the output stream.\n+   * Stores the keystore in the specified output stream and it\n+   * uses the specified key it keep it secure.\n+   *\n+   * @param stream the output stream to save the keystore to\n+   * @param password the password to protect the keystore integrity with\n+   *\n+   * @throws IOException if an I/O error occurs.\n+   * @throws NoSuchAlgorithmException the data integrity algorithm \n+   * used cannot be found.\n+   * @throws CertificateException if any certificates could not be\n+   * stored in the output stream.\n    */\n   public abstract void engineStore(OutputStream stream, char[]password)\n     throws IOException, NoSuchAlgorithmException, CertificateException;\n \n \n   /**\n-     Loads the keystore from the specified input stream and it\n-     uses the specified password to check for integrity if supplied.\n-\n-     @param stream the input stream to load the keystore from\n-     @param password the password to check the keystore integrity with\n-\n-     @throws IOException if an I/O error occurs.\n-     @throws NoSuchAlgorithmException the data integrity algorithm \n-     used cannot be found.\n-     @throws CertificateException if any certificates could not be\n-     stored in the output stream.\n+   * Loads the keystore from the specified input stream and it\n+   * uses the specified password to check for integrity if supplied.\n+   *\n+   * @param stream the input stream to load the keystore from\n+   * @param password the password to check the keystore integrity with\n+   *\n+   * @throws IOException if an I/O error occurs.\n+   * @throws NoSuchAlgorithmException the data integrity algorithm \n+   * used cannot be found.\n+   * @throws CertificateException if any certificates could not be\n+   * stored in the output stream.\n    */\n   public abstract void engineLoad(InputStream stream, char[]password)\n     throws IOException, NoSuchAlgorithmException, CertificateException;"}, {"sha": "cf3fc16bf41f1d3988b3cd38eee01963f95c1de2", "filename": "libjava/java/security/Permissions.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FPermissions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FPermissions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissions.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* Permissions.java -- a collection of permission collections\n-   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n import java.io.Serializable;\n-import java.util.Hashtable;\n import java.util.Enumeration;\n+import java.util.Hashtable;\n import java.util.NoSuchElementException;\n \n /**"}, {"sha": "1820319c06d84c1ddb61a9d46d32d5103a396d48", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -35,13 +35,14 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n import gnu.java.security.action.GetPropertyAction;\n-import java.io.InputStream;\n+\n import java.io.IOException;\n+import java.io.InputStream;\n import java.net.URL;\n-import java.security.AccessController;\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;"}, {"sha": "6a69e1a6da17108d90420a51842a5b102e985ac5", "filename": "libjava/java/security/Signature.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignature.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -35,14 +35,15 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n+import gnu.java.security.Engine;\n+\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n import java.security.spec.AlgorithmParameterSpec;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * <p>This <code>Signature</code> class is used to provide applications the\n  * functionality of a digital signature algorithm. Digital signatures are used"}, {"sha": "8a7b7036099f4806f5736db5d3e32e982dab0bf7", "filename": "libjava/java/security/UnresolvedPermission.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* UnresolvedPermission.java -- Placeholder for unresolved permissions\n-   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,16 +35,17 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.security;\n \n // All uses of Certificate in this file refer to the one in the listed\n // package, not this one.\n import java.security.cert.Certificate;\n import java.util.Arrays;\n-import java.util.Hashtable;\n-import java.util.Vector;\n import java.util.Enumeration;\n+import java.util.Hashtable;\n import java.util.NoSuchElementException;\n+import java.util.Vector;\n \n /**\n  * This class is used to hold instances of all permissions that cannot"}, {"sha": "86808f46ca33e717d3014b5eaad98f38fd4ab8d2", "filename": "libjava/java/security/cert/CertPathBuilder.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathBuilder.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* CertPathBuilder.java -- bulids CertPath objects from Certificates.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,14 +38,14 @@\n \n package java.security.cert;\n \n+import gnu.java.security.Engine;\n+\n import java.security.InvalidAlgorithmParameterException;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.Provider;\n import java.security.Security;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * This class builds certificate paths (also called certificate chains),\n  * which can be used to establish trust for a particular certificate by"}, {"sha": "b8e40223ac7c5fe0c5debc1df65fc08ab78655c7", "filename": "libjava/java/security/cert/CertPathValidator.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertPathValidator.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* CertPathValidator -- validates certificate paths.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,6 +38,8 @@\n \n package java.security.cert;\n \n+import gnu.java.security.Engine;\n+\n import java.security.AccessController;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.NoSuchAlgorithmException;\n@@ -46,8 +48,6 @@\n import java.security.Provider;\n import java.security.Security;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * Generic interface to classes that validate certificate paths.\n  *"}, {"sha": "67e606cab36f449dc78020d675d63976fb04923c", "filename": "libjava/java/security/cert/CertStore.java", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertStore.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* CertStore -- stores and retrieves certificates.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,17 +38,16 @@\n \n package java.security.cert;\n \n+import gnu.java.security.Engine;\n+\n import java.security.InvalidAlgorithmParameterException;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.PrivilegedAction;\n import java.security.Provider;\n import java.security.Security;\n-\n import java.util.Collection;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * A CertStore is a read-only repository for certificates and\n  * certificate revocation lists."}, {"sha": "a9079fbc33f448936d4c551debde4806ebcfd2f7", "filename": "libjava/java/security/cert/Certificate.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificate.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* Certificate.java --- Certificate class\n-   Copyright (C) 1999,2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,15 +38,15 @@\n \n package java.security.cert;\n \n-import java.security.PublicKey;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.InvalidKeyException;\n-import java.security.NoSuchProviderException;\n-import java.security.SignatureException;\n import java.io.ByteArrayInputStream;\n import java.io.InvalidObjectException;\n import java.io.ObjectStreamException;\n import java.io.Serializable;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.PublicKey;\n+import java.security.SignatureException;\n \n /**\n  * The Certificate class is an abstract class used to manage "}, {"sha": "31664401aea16760bf1173bebb0638967231ab90", "filename": "libjava/java/security/cert/CertificateFactory.java", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FCertificateFactory.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* CertificateFactory.java -- Certificate Factory Class\n-   Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,19 +38,17 @@\n \n package java.security.cert;\n \n+import gnu.java.security.Engine;\n+\n+import java.io.InputStream;\n import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n import java.security.Provider;\n import java.security.Security;\n-\n-import java.io.InputStream;\n-\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n \n-import gnu.java.security.Engine;\n-\n /**\n  * This class implements the CertificateFactory class interface used to\n  * generate certificates, certificate revocation lists (CRLs), and certificate"}, {"sha": "c53a325eb4dd904aa660e0cb3699aaef8268929a", "filename": "libjava/java/security/cert/PolicyQualifierInfo.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FPolicyQualifierInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FPolicyQualifierInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FPolicyQualifierInfo.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* PolicyQualifierInfo.java -- policy qualifier info object.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,14 +38,14 @@\n \n package java.security.cert;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-\n import gnu.java.io.ASN1ParsingException;\n import gnu.java.security.OID;\n import gnu.java.security.der.DERReader;\n import gnu.java.security.der.DERValue;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+\n /**\n  * The PolicyQualifierInfo X.509 certificate extension.\n  * PolicyQualifierInfo objects are represented by the ASN.1 structure:"}, {"sha": "4758cf73d7bda40504b4ae92a2384a582d507a6b", "filename": "libjava/java/security/cert/TrustAnchor.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FTrustAnchor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FTrustAnchor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FTrustAnchor.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* TrustAnchor.java -- an ultimately-trusted certificate.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,10 +38,10 @@\n \n package java.security.cert;\n \n-import java.security.PublicKey;\n-\n import gnu.java.security.x509.X500DistinguishedName;\n \n+import java.security.PublicKey;\n+\n /**\n  * An ultimately-trusted certificate to serve as the root of a\n  * certificate chain."}, {"sha": "a606253af083f2a9b00e6002134c1bd8b1b1b272", "filename": "libjava/java/security/cert/X509CRL.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRL.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -1,5 +1,5 @@\n /* X509CRL.java --- X.509 Certificate Revocation List\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,11 +39,11 @@\n package java.security.cert;\n \n import java.math.BigInteger;\n-import java.security.Principal;\n-import java.security.PublicKey;\n-import java.security.NoSuchAlgorithmException;\n import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n import java.security.NoSuchProviderException;\n+import java.security.Principal;\n+import java.security.PublicKey;\n import java.security.SignatureException;\n import java.util.Date;\n import java.util.Set;"}, {"sha": "7ff8700e058b8f6ed8f607be62d9bb7e79871923", "filename": "libjava/java/security/cert/X509CRLSelector.java", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRLSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRLSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CRLSelector.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -38,13 +38,14 @@\n \n package java.security.cert;\n \n+import gnu.java.security.action.GetPropertyAction;\n+import gnu.java.security.der.DERReader;\n+import gnu.java.security.der.DERValue;\n+\n import java.io.IOException;\n import java.io.InputStream;\n-\n import java.math.BigInteger;\n-\n import java.security.AccessController;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -55,10 +56,6 @@\n \n import javax.security.auth.x500.X500Principal;\n \n-import gnu.java.security.action.GetPropertyAction;\n-import gnu.java.security.der.DERReader;\n-import gnu.java.security.der.DERValue;\n-\n /**\n  * A class for matching X.509 certificate revocation lists by criteria.\n  *"}, {"sha": "046314283120c406f37db129cb0e3a5f4277aa58", "filename": "libjava/java/security/cert/X509CertSelector.java", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CertSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78fe42c391823366611caab754d28c7aed5609c4/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CertSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fcert%2FX509CertSelector.java?ref=78fe42c391823366611caab754d28c7aed5609c4", "patch": "@@ -38,15 +38,15 @@\n \n package java.security.cert;\n \n-import java.io.IOException;\n+import gnu.java.security.OID;\n+import gnu.java.security.action.GetPropertyAction;\n \n+import java.io.IOException;\n import java.math.BigInteger;\n-\n import java.security.AccessController;\n import java.security.KeyFactory;\n import java.security.PublicKey;\n import java.security.spec.X509EncodedKeySpec;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -60,9 +60,6 @@\n \n import javax.security.auth.x500.X500Principal;\n \n-import gnu.java.security.OID;\n-import gnu.java.security.action.GetPropertyAction;\n-\n /**\n  * A concrete implementation of {@link CertSelector} for X.509 certificates,\n  * which allows a number of criteria to be set when accepting certificates,"}]}