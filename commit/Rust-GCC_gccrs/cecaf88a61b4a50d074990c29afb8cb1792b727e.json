{"sha": "cecaf88a61b4a50d074990c29afb8cb1792b727e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjYWY4OGE2MWI0YTUwZDA3NDk5MGMyOWFmYjhjYjE3OTJiNzI3ZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-06-06T10:13:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:13:44Z"}, "message": "a-taster.adb, [...]: Replace Unchecked_* by Ada.Unchecked_*\n\n2007-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* a-taster.adb, s-osinte-hpux.ads, s-osinte-solaris-posix.ads,\n\ts-osinte-irix.ads, s-interr-sigaction.adb, s-mastop-irix.adb,\n\ts-osinte-hpux-dce.ads, s-osinte-interix.ads, s-osinte-solaris.ads,\n\ts-taspri-solaris.ads, s-inmaop-vms.adb, s-interr-vms.adb,\n\ts-mastop-vms.adb, s-osinte-vms.ads, s-tpopde-vms.adb,\n\ts-osinte-mingw.ads, s-interr-vxworks.adb, i-cstrea-vms.adb,\n\ta-diocst.adb, a-direio.adb, a-interr.adb, a-sequio.adb, a-siocst.adb,\n\ta-ssicst.adb, a-storio.adb, a-ststio.adb, a-stwima.adb, a-tasatt.adb,\n\ta-taside.adb, a-tiocst.adb, a-witeio.adb, a-wtcstr.adb, g-crc32.adb,\n\tg-dirope.adb, g-dyntab.adb, g-memdum.adb, g-regexp.adb, g-spipat.adb,\n\tg-spitbo.adb, g-string.adb, g-string.ads, g-table.adb, g-thread.adb,\n\ti-cobol.adb, i-cpoint.adb, i-cstrea.adb, i-cstrin.adb, i-pacdec.adb,\n\ts-addima.adb, s-arit64.adb, s-auxdec.adb, s-auxdec.ads,\n\ts-auxdec-vms_64.ads, s-carsi8.adb, s-carun8.adb, s-casi16.adb,\n\ts-casi32.adb, s-casi64.adb, s-caun16.adb, s-caun32.adb, s-caun64.adb,\n\ts-direio.adb, s-fileio.adb, s-finimp.ads, s-geveop.adb, s-imgenu.adb,\n\ts-pack03.adb, s-pack05.adb, s-pack06.adb, s-pack07.adb, s-pack09.adb,\n\ts-pack10.adb, s-pack11.adb, s-pack12.adb, s-pack13.adb, s-pack14.adb,\n \ts-pack15.adb, s-pack17.adb, s-pack18.adb, s-pack19.adb, s-pack20.adb,\n\ts-pack21.adb, s-pack22.adb, s-pack23.adb, s-pack24.adb, s-pack25.adb,\n\ts-pack26.adb, s-pack27.adb, s-pack28.adb, s-pack29.adb, s-pack30.adb,\n\ts-pack31.adb, s-pack33.adb, s-pack34.adb, s-pack35.adb, s-pack36.adb,\n\ts-pack37.adb, s-pack38.adb, s-pack39.adb, s-pack40.adb, s-pack41.adb,\n\ts-pack42.adb, s-pack43.adb, s-pack44.adb, s-pack45.adb, s-pack46.adb,\n\ts-pack47.adb, s-pack48.adb, s-pack49.adb, s-pack50.adb, s-pack51.adb,\n\ts-pack52.adb, s-pack53.adb, s-pack54.adb, s-pack55.adb, s-pack56.adb,\n\ts-pack57.adb, s-pack58.adb, s-pack59.adb, s-pack60.adb, s-pack61.adb,\n\ts-pack62.adb, s-pack63.adb, s-pooloc.adb, s-poosiz.adb, s-scaval.adb,\n\ts-sequio.adb, s-shasto.adb, s-stalib.ads, s-stratt.adb, s-strcom.adb,\n\ts-taasde.adb, s-tasdeb.adb, s-tasuti.ads, s-tataat.ads, s-tpoben.ads,\n\ts-valenu.adb, s-widenu.adb, s-wwdenu.adb, s-addope.adb, a-stzmap.adb,\n\ta-ztcstr.adb, a-ztexio.adb, s-osinte-linux-hppa.ads: Replace\n\tUnchecked_* by Ada.Unchecked_*\n\nFrom-SVN: r125359", "tree": {"sha": "36d0b6c5388a9497841e084962bf6e6201e1c3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d0b6c5388a9497841e084962bf6e6201e1c3f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cecaf88a61b4a50d074990c29afb8cb1792b727e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecaf88a61b4a50d074990c29afb8cb1792b727e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecaf88a61b4a50d074990c29afb8cb1792b727e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecaf88a61b4a50d074990c29afb8cb1792b727e/comments", "author": null, "committer": null, "parents": [{"sha": "47a5501df944948337ef4441297618938a1a3651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a5501df944948337ef4441297618938a1a3651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a5501df944948337ef4441297618938a1a3651"}], "stats": {"total": 2733, "additions": 677, "deletions": 2056}, "files": [{"sha": "38f0bdfc08bbc9b32e1def8e1e13927f7dc2fef6", "filename": "gcc/ada/a-diocst.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-diocst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-diocst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-diocst.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n with System.Direct_IO;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Direct_IO.C_Streams is\n \n@@ -45,7 +45,7 @@ package body Ada.Direct_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "44479efedfdcb9956fe29fae972c2d2a81ffedbc", "filename": "gcc/ada/a-direio.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,7 @@ with System.File_Control_Block;\n with System.File_IO;\n with System.Direct_IO;\n with System.Storage_Elements;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n use type System.Direct_IO.Count;\n \n@@ -63,8 +63,8 @@ package body Ada.Direct_IO is\n    subtype FP      is DIO.File_Type;\n    subtype DPCount is DIO.Positive_Count;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n-   function To_DIO is new Unchecked_Conversion (FCB.File_Mode, File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_DIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n \n    use type System.CRTL.size_t;\n "}, {"sha": "e011f2cfc3d4b3cb4a3f6d2b13e86250bc12fbdd", "filename": "gcc/ada/a-interr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-interr.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2006, AdaCore                     --\n+--                     Copyright (C) 1995-2007, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,16 +32,16 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Interrupts is\n \n    package SI renames System.Interrupts;\n \n-   function To_System is new Unchecked_Conversion\n+   function To_System is new Ada.Unchecked_Conversion\n      (Parameterless_Handler, SI.Parameterless_Handler);\n \n-   function To_Ada is new Unchecked_Conversion\n+   function To_Ada is new Ada.Unchecked_Conversion\n      (SI.Parameterless_Handler, Parameterless_Handler);\n \n    --------------------"}, {"sha": "eb9e989c65bc287fe709ef0a8d112b0d1679597e", "filename": "gcc/ada/a-sequio.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sequio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@ with System.CRTL;\n with System.File_Control_Block;\n with System.File_IO;\n with System.Storage_Elements;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Sequential_IO is\n \n@@ -56,8 +56,8 @@ package body Ada.Sequential_IO is\n    subtype AP is FCB.AFCB_Ptr;\n    subtype FP is SIO.File_Type;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n-   function To_SIO is new Unchecked_Conversion (FCB.File_Mode, File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_SIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n \n    use type System.CRTL.size_t;\n \n@@ -202,7 +202,7 @@ package body Ada.Sequential_IO is\n                --  which can't possibly come this way, and for which the\n                --  size of the access types differs.\n \n-               function To_ItemP is new Unchecked_Conversion (SAP, ItemP);\n+               function To_ItemP is new Ada.Unchecked_Conversion (SAP, ItemP);\n \n                pragma Warnings (On);\n "}, {"sha": "9db4e126e1331625092c7ad4f31169f84af60a7f", "filename": "gcc/ada/a-siocst.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-siocst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-siocst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-siocst.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n with System.Sequential_IO;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Sequential_IO.C_Streams is\n \n@@ -45,7 +45,7 @@ package body Ada.Sequential_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "a26f681829ac3fa308096b16cabfdcb1cf8bc287", "filename": "gcc/ada/a-ssicst.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ssicst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ssicst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ssicst.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Streams.Stream_IO.C_Streams is\n \n@@ -43,7 +43,7 @@ package body Ada.Streams.Stream_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "6bd0a5939b63f8830b810d139cde555b013b2c63", "filename": "gcc/ada/a-storio.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-storio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-storio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-storio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,14 +31,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Storage_IO is\n \n    type Buffer_Ptr is access all Buffer_Type;\n    type Elmt_Ptr   is access all Element_Type;\n \n-   function To_Buffer_Ptr is new Unchecked_Conversion (Elmt_Ptr, Buffer_Ptr);\n+   function To_Buffer_Ptr is\n+     new Ada.Unchecked_Conversion (Elmt_Ptr, Buffer_Ptr);\n \n    ----------\n    -- Read --"}, {"sha": "6b8376489ad94c24e65d5a572a8c3233b21b85fa", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,8 +38,8 @@ with System.File_IO;\n with System.Soft_Links;\n with System.CRTL;\n \n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n package body Ada.Streams.Stream_IO is\n \n@@ -48,8 +48,8 @@ package body Ada.Streams.Stream_IO is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n-   function To_SIO is new Unchecked_Conversion (FCB.File_Mode, File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_SIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n    use type FCB.File_Mode;\n    use type FCB.Shared_Status_Type;\n \n@@ -90,7 +90,7 @@ package body Ada.Streams.Stream_IO is\n       type FCB_Ptr is access all Stream_AFCB;\n       FT : FCB_Ptr := FCB_Ptr (File);\n \n-      procedure Free is new Unchecked_Deallocation (Stream_AFCB, FCB_Ptr);\n+      procedure Free is new Ada.Unchecked_Deallocation (Stream_AFCB, FCB_Ptr);\n \n    begin\n       Free (FT);"}, {"sha": "aeefb7c3e6d736e1da7c9a18e5609661cca4f69f", "filename": "gcc/ada/a-stwima.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-stwima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-stwima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwima.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body Ada.Strings.Wide_Maps is\n \n@@ -363,7 +363,7 @@ package body Ada.Strings.Wide_Maps is\n \n    procedure Finalize (Object : in out Wide_Character_Mapping) is\n \n-      procedure Free is new Unchecked_Deallocation\n+      procedure Free is new Ada.Unchecked_Deallocation\n         (Wide_Character_Mapping_Values,\n          Wide_Character_Mapping_Values_Access);\n \n@@ -375,7 +375,7 @@ package body Ada.Strings.Wide_Maps is\n \n    procedure Finalize (Object : in out Wide_Character_Set) is\n \n-      procedure Free is new Unchecked_Deallocation\n+      procedure Free is new Ada.Unchecked_Deallocation\n         (Wide_Character_Ranges,\n          Wide_Character_Ranges_Access);\n "}, {"sha": "9c77c7196cfbb5ca83cb70e0e2d0cd91ce284b69", "filename": "gcc/ada/a-stzmap.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-stzmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-stzmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzmap.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body Ada.Strings.Wide_Wide_Maps is\n \n@@ -365,7 +365,7 @@ package body Ada.Strings.Wide_Wide_Maps is\n \n    procedure Finalize (Object : in out Wide_Wide_Character_Mapping) is\n \n-      procedure Free is new Unchecked_Deallocation\n+      procedure Free is new Ada.Unchecked_Deallocation\n         (Wide_Wide_Character_Mapping_Values,\n          Wide_Wide_Character_Mapping_Values_Access);\n \n@@ -377,7 +377,7 @@ package body Ada.Strings.Wide_Wide_Maps is\n \n    procedure Finalize (Object : in out Wide_Wide_Character_Set) is\n \n-      procedure Free is new Unchecked_Deallocation\n+      procedure Free is new Ada.Unchecked_Deallocation\n         (Wide_Wide_Character_Ranges,\n          Wide_Wide_Character_Ranges_Access);\n "}, {"sha": "3bace41794a1d2fffb1bb4202a805407d38c1d63", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2006, AdaCore                     --\n+--                     Copyright (C) 1995-2007, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -102,8 +102,8 @@\n \n --  In the first approach the objects on the attribute list are all derived\n --  from one controlled type, say T, and are linked using an access type to\n---  T'Class. The runtime system has an Unchecked_Deallocation for T'Class with\n---  access type T'Class, and uses this to deallocate and finalize all the\n+--  T'Class. The runtime system has an Ada.Unchecked_Deallocation for T'Class\n+--  with access type T'Class, and uses this to deallocate and finalize all the\n --  items in the list. The limitation of this approach is that each\n --  instantiation of the package Ada.Task_Attributes derives a new record\n --  extension of T, and since T is controlled (RM 3.9.1 (3)), instantiation is\n@@ -239,8 +239,8 @@ with System.Tasking;\n --           Direct_Index\n \n with System.Tasking.Initialization;\n---  Used for Defer_Abortion\n---           Undefer_Abortion\n+--  Used for Defer_Abort\n+--           Undefer_Abort\n --           Initialize_Attributes_Link\n --           Finalize_Attributes_Link\n \n@@ -255,8 +255,8 @@ with System.Tasking.Task_Attributes;\n with Ada.Exceptions;\n --  Used for Raise_Exception\n \n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n pragma Elaborate_All (System.Tasking.Task_Attributes);\n --  To ensure the initialization of object Local (below) will work\n@@ -290,29 +290,29 @@ package body Ada.Task_Attributes is\n    --  the compiler will generate warnings for the occurrences in the large\n    --  attribute case, even though they will not actually be used.\n \n-   function To_Attribute_Handle is new Unchecked_Conversion\n+   function To_Attribute_Handle is new Ada.Unchecked_Conversion\n      (System.Address, Attribute_Handle);\n-   function To_Direct_Attribute_Element is new Unchecked_Conversion\n+   function To_Direct_Attribute_Element is new Ada.Unchecked_Conversion\n      (System.Address, Direct_Attribute_Element);\n    --  For reference to directly addressed task attributes\n \n    type Access_Integer_Address is access all\n      System.Storage_Elements.Integer_Address;\n \n-   function To_Attribute_Handle is new Unchecked_Conversion\n+   function To_Attribute_Handle is new Ada.Unchecked_Conversion\n      (Access_Integer_Address, Attribute_Handle);\n    --  For reference to directly addressed task attributes\n \n    pragma Warnings (On);\n    --  End of warnings off region for directly addressed\n    --  attribute conversion functions.\n \n-   function To_Access_Address is new Unchecked_Conversion\n+   function To_Access_Address is new Ada.Unchecked_Conversion\n      (Access_Node, Access_Address);\n    --  To store pointer to list of indirect attributes\n \n    pragma Warnings (Off);\n-   function To_Access_Wrapper is new Unchecked_Conversion\n+   function To_Access_Wrapper is new Ada.Unchecked_Conversion\n      (Access_Dummy_Wrapper, Access_Wrapper);\n    pragma Warnings (On);\n    --  To fetch pointer to actual wrapper of attribute node. We turn off\n@@ -321,17 +321,17 @@ package body Ada.Task_Attributes is\n    --  real wrapper type (we never actually allocate objects of type\n    --  Dummy_Wrapper).\n \n-   function To_Access_Dummy_Wrapper is new Unchecked_Conversion\n+   function To_Access_Dummy_Wrapper is new Ada.Unchecked_Conversion\n      (Access_Wrapper, Access_Dummy_Wrapper);\n    --  To store pointer to actual wrapper of attribute node\n \n-   function To_Task_Id is new Unchecked_Conversion\n+   function To_Task_Id is new Ada.Unchecked_Conversion\n      (Task_Identification.Task_Id, Task_Id);\n    --  To access TCB of identified task\n \n    type Local_Deallocator is access procedure (P : in out Access_Node);\n \n-   function To_Lib_Level_Deallocator is new Unchecked_Conversion\n+   function To_Lib_Level_Deallocator is new Ada.Unchecked_Conversion\n      (Local_Deallocator, Deallocator);\n    --  To defeat accessibility check\n \n@@ -366,7 +366,7 @@ package body Ada.Task_Attributes is\n    for Wrapper'Alignment use Standard'Maximum_Alignment;\n \n    procedure Free is\n-      new Unchecked_Deallocation (Wrapper, Access_Wrapper);\n+      new Ada.Unchecked_Deallocation (Wrapper, Access_Wrapper);\n \n    procedure Deallocate (P : in out Access_Node) is\n       T : Access_Wrapper := To_Access_Wrapper (P.Wrapper);"}, {"sha": "005d961938764decbaf19bdca58933a8e3a949ed", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with System.Address_Image;\n with System.Parameters;\n with System.Soft_Links;\n with System.Task_Primitives.Operations;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n@@ -114,7 +114,7 @@ package body Ada.Task_Identification is\n \n    function Image (T : Task_Id) return String is\n       function To_Address is new\n-        Unchecked_Conversion (Task_Id, System.Address);\n+        Ada.Unchecked_Conversion (Task_Id, System.Address);\n \n    begin\n       if T = Null_Task_Id then"}, {"sha": "aa06c95cae8bf536f71d2a6adeaada20286a87c0", "filename": "gcc/ada/a-taster.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-taster.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-taster.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taster.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,7 +48,7 @@ with System.Soft_Links;\n --  use for Abort_Defer\n --          Abort_Undefer\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Task_Termination is\n \n@@ -63,13 +63,13 @@ package body Ada.Task_Termination is\n    -- Local subprograms --\n    -----------------------\n \n-   function To_TT is new Unchecked_Conversion\n+   function To_TT is new Ada.Unchecked_Conversion\n      (System.Tasking.Termination_Handler, Termination_Handler);\n \n-   function To_ST is new Unchecked_Conversion\n+   function To_ST is new Ada.Unchecked_Conversion\n      (Termination_Handler, System.Tasking.Termination_Handler);\n \n-   function To_Task_Id is new Unchecked_Conversion\n+   function To_Task_Id is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, System.Tasking.Task_Id);\n \n    -----------------------------------"}, {"sha": "52bbe5ebbed5cac47e9b4cb39985a54db93d2edc", "filename": "gcc/ada/a-tiocst.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-tiocst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-tiocst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tiocst.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Text_IO.C_Streams is\n \n@@ -43,7 +43,7 @@ package body Ada.Text_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "ab057950ae826fc35ec588c06ffd7d44b993fd1c", "filename": "gcc/ada/a-witeio.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,8 +40,8 @@ with System.File_IO;\n with System.WCh_Cnv;       use System.WCh_Cnv;\n with System.WCh_Con;       use System.WCh_Con;\n \n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n pragma Elaborate_All (System.File_IO);\n --  Needed because of calls to Chain_File in package body elaboration\n@@ -52,8 +52,8 @@ package body Ada.Wide_Text_IO is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n-   function To_TIO is new Unchecked_Conversion (FCB.File_Mode, File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_TIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n    use type FCB.File_Mode;\n \n    use type System.CRTL.size_t;\n@@ -122,7 +122,8 @@ package body Ada.Wide_Text_IO is\n       type FCB_Ptr is access all Wide_Text_AFCB;\n       FT : FCB_Ptr := FCB_Ptr (File);\n \n-      procedure Free is new Unchecked_Deallocation (Wide_Text_AFCB, FCB_Ptr);\n+      procedure Free is\n+        new Ada.Unchecked_Deallocation (Wide_Text_AFCB, FCB_Ptr);\n \n    begin\n       Free (FT);"}, {"sha": "2b6eecadac6b02a060710f31b81f26ecb1bb4913", "filename": "gcc/ada/a-wtcstr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-wtcstr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-wtcstr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtcstr.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Wide_Text_IO.C_Streams is\n \n@@ -43,7 +43,7 @@ package body Ada.Wide_Text_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "228506845794757669921f3c0ea7d71e1e9708bc", "filename": "gcc/ada/a-ztcstr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ztcstr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ztcstr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztcstr.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n with System.File_IO;\n with System.File_Control_Block;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Ada.Wide_Wide_Text_IO.C_Streams is\n \n@@ -43,7 +43,7 @@ package body Ada.Wide_Wide_Text_IO.C_Streams is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n \n    --------------\n    -- C_Stream --"}, {"sha": "2134bd635412a4ecd4947b024e6f0f9457e845eb", "filename": "gcc/ada/a-ztexio.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ztexio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fa-ztexio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztexio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,8 +40,8 @@ with System.File_IO;\n with System.WCh_Cnv;       use System.WCh_Cnv;\n with System.WCh_Con;       use System.WCh_Con;\n \n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n pragma Elaborate_All (System.File_IO);\n --  Needed because of calls to Chain_File in package body elaboration\n@@ -52,8 +52,8 @@ package body Ada.Wide_Wide_Text_IO is\n \n    subtype AP is FCB.AFCB_Ptr;\n \n-   function To_FCB is new Unchecked_Conversion (File_Mode, FCB.File_Mode);\n-   function To_TIO is new Unchecked_Conversion (FCB.File_Mode, File_Mode);\n+   function To_FCB is new Ada.Unchecked_Conversion (File_Mode, FCB.File_Mode);\n+   function To_TIO is new Ada.Unchecked_Conversion (FCB.File_Mode, File_Mode);\n    use type FCB.File_Mode;\n \n    use type System.CRTL.size_t;\n@@ -123,7 +123,7 @@ package body Ada.Wide_Wide_Text_IO is\n       FT : FCB_Ptr := FCB_Ptr (File);\n \n       procedure Free is new\n-        Unchecked_Deallocation (Wide_Wide_Text_AFCB, FCB_Ptr);\n+        Ada.Unchecked_Deallocation (Wide_Wide_Text_AFCB, FCB_Ptr);\n \n    begin\n       Free (FT);"}, {"sha": "49c9734ce26bbba752f63eb34e8848fbb3e0323c", "filename": "gcc/ada/g-crc32.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-crc32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-crc32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-crc32.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2005, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body GNAT.CRC32 is\n \n@@ -47,7 +47,7 @@ package body GNAT.CRC32 is\n    end Update;\n \n    procedure Update (C : in out CRC32; Value : Ada.Streams.Stream_Element) is\n-      function To_Char is new Unchecked_Conversion\n+      function To_Char is new Ada.Unchecked_Conversion\n         (Ada.Streams.Stream_Element, Character);\n       V : constant Character := To_Char (Value);\n    begin\n@@ -70,7 +70,7 @@ package body GNAT.CRC32 is\n \n    procedure Wide_Update (C : in out CRC32; Value : Wide_Character) is\n       subtype S2 is String (1 .. 2);\n-      function To_S2 is new Unchecked_Conversion (Wide_Character, S2);\n+      function To_S2 is new Ada.Unchecked_Conversion (Wide_Character, S2);\n       VS : constant S2 := To_S2 (Value);\n    begin\n       Update (C, VS (1));"}, {"sha": "3ba99353e42bb62cb1374418d6653103d12f224a", "filename": "gcc/ada/g-dirope.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-dirope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-dirope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2006, AdaCore                     --\n+--                     Copyright (C) 1998-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,8 +34,8 @@\n with Ada.Characters.Handling;\n with Ada.Strings.Fixed;\n \n-with Unchecked_Deallocation;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n \n with System;      use System;\n with System.CRTL; use System.CRTL;\n@@ -54,7 +54,7 @@ package body GNAT.Directory_Operations is\n    --  1024 is the value of FILENAME_MAX in stdio.h\n \n    procedure Free is new\n-     Unchecked_Deallocation (Dir_Type_Value, Dir_Type);\n+     Ada.Unchecked_Deallocation (Dir_Type_Value, Dir_Type);\n \n    ---------------\n    -- Base_Name --\n@@ -689,7 +689,7 @@ package body GNAT.Directory_Operations is\n          type    Path_String_Access is access Path_String;\n \n          function Address_To_Access is new\n-           Unchecked_Conversion\n+           Ada.Unchecked_Conversion\n              (Source => Address,\n               Target => Path_String_Access);\n "}, {"sha": "f90cc7b09be5c2705bbe6b219249a9fcb3684795", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2006, AdaCore                     --\n+--                     Copyright (C) 2000-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with GNAT.Heap_Sort_G;\n with System;        use System;\n with System.Memory; use System.Memory;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body GNAT.Dynamic_Tables is\n \n@@ -55,8 +55,8 @@ package body GNAT.Dynamic_Tables is\n    --  These unchecked conversions are in fact safe, since they never\n    --  generate improperly aliased pointer values.\n \n-   function To_Address is new Unchecked_Conversion (Table_Ptr, Address);\n-   function To_Pointer is new Unchecked_Conversion (Address, Table_Ptr);\n+   function To_Address is new Ada.Unchecked_Conversion (Table_Ptr, Address);\n+   function To_Pointer is new Ada.Unchecked_Conversion (Address, Table_Ptr);\n \n    pragma Warnings (On);\n \n@@ -269,7 +269,7 @@ package body GNAT.Dynamic_Tables is\n       --  Local subprograms\n \n       function Index_Of (Idx : Natural) return Table_Index_Type;\n-      --  Apply Natural to indexs of the table\n+      --  Return index of Idx'th element of table\n \n       function Lower_Than (Op1, Op2 : Natural) return Boolean;\n       --  Compare two components"}, {"sha": "5b8b3c05b7355b802911dbd484af9ac5d9b6a8e1", "filename": "gcc/ada/g-memdum.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-memdum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-memdum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-memdum.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2003-2005, AdaCore                     --\n+--                     Copyright (C) 2003-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ with System.Storage_Elements; use System.Storage_Elements;\n with GNAT.IO;              use GNAT.IO;\n with GNAT.Debug_Utilities; use GNAT.Debug_Utilities;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body GNAT.Memory_Dump is\n \n@@ -70,7 +70,7 @@ package body GNAT.Memory_Dump is\n \n       type Char_Ptr is access all Character;\n \n-      function To_Char_Ptr is new Unchecked_Conversion (Address, Char_Ptr);\n+      function To_Char_Ptr is new Ada.Unchecked_Conversion (Address, Char_Ptr);\n \n    begin\n       while Ctr /= 0 loop"}, {"sha": "65c1166bff10c49aeadce2b38d28604f804475ef", "filename": "gcc/ada/g-regexp.adb", "status": "modified", "additions": 5, "deletions": 1354, "changes": 1359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-regexp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-regexp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-regexp.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2005, AdaCore                     --\n+--                     Copyright (C) 1999-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,1357 +31,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Deallocation;\n-with Ada.Exceptions;\n-with GNAT.Case_Util;\n+--  This package does not require a body, since it is a package renaming. We\n+--  provide a dummy file containing a No_Body pragma so that previous versions\n+--  of the body (which did exist) will not intefere.\n \n-package body GNAT.Regexp is\n-\n-   Open_Paren    : constant Character := '(';\n-   Close_Paren   : constant Character := ')';\n-   Open_Bracket  : constant Character := '[';\n-   Close_Bracket : constant Character := ']';\n-\n-   type State_Index is new Natural;\n-   type Column_Index is new Natural;\n-\n-   type Regexp_Array is array\n-     (State_Index range <>, Column_Index range <>) of State_Index;\n-   --  First index is for the state number\n-   --  Second index is for the character type\n-   --  Contents is the new State\n-\n-   type Regexp_Array_Access is access Regexp_Array;\n-   --  Use this type through the functions Set below, so that it\n-   --  can grow dynamically depending on the needs.\n-\n-   type Mapping is array (Character'Range) of Column_Index;\n-   --  Mapping between characters and column in the Regexp_Array\n-\n-   type Boolean_Array is array (State_Index range <>) of Boolean;\n-\n-   type Regexp_Value\n-     (Alphabet_Size : Column_Index;\n-      Num_States    : State_Index) is\n-   record\n-      Map            : Mapping;\n-      States         : Regexp_Array (1 .. Num_States, 0 .. Alphabet_Size);\n-      Is_Final       : Boolean_Array (1 .. Num_States);\n-      Case_Sensitive : Boolean;\n-   end record;\n-   --  Deterministic finite-state machine\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   procedure Set\n-     (Table  : in out Regexp_Array_Access;\n-      State  : State_Index;\n-      Column : Column_Index;\n-      Value  : State_Index);\n-   --  Sets a value in the table. If the table is too small, reallocate it\n-   --  dynamically so that (State, Column) is a valid index in it.\n-\n-   function Get\n-     (Table  : Regexp_Array_Access;\n-      State  : State_Index;\n-      Column : Column_Index)\n-      return   State_Index;\n-   --  Returns the value in the table at (State, Column).\n-   --  If this index does not exist in the table, returns 0\n-\n-   procedure Free is new Unchecked_Deallocation\n-     (Regexp_Array, Regexp_Array_Access);\n-\n-   ------------\n-   -- Adjust --\n-   ------------\n-\n-   procedure Adjust (R : in out Regexp) is\n-      Tmp : Regexp_Access;\n-\n-   begin\n-      Tmp := new Regexp_Value (Alphabet_Size => R.R.Alphabet_Size,\n-                               Num_States    => R.R.Num_States);\n-      Tmp.all := R.R.all;\n-      R.R := Tmp;\n-   end Adjust;\n-\n-   -------------\n-   -- Compile --\n-   -------------\n-\n-   function Compile\n-     (Pattern        : String;\n-      Glob           : Boolean := False;\n-      Case_Sensitive : Boolean := True)\n-      return           Regexp\n-   is\n-      S : String := Pattern;\n-      --  The pattern which is really compiled (when the pattern is case\n-      --  insensitive, we convert this string to lower-cases\n-\n-      Map : Mapping := (others => 0);\n-      --  Mapping between characters and columns in the tables\n-\n-      Alphabet_Size : Column_Index := 0;\n-      --  Number of significant characters in the regular expression.\n-      --  This total does not include special operators, such as *, (, ...\n-\n-      procedure Create_Mapping;\n-      --  Creates a mapping between characters in the regexp and columns\n-      --  in the tables representing the regexp. Test that the regexp is\n-      --  well-formed Modifies Alphabet_Size and Map\n-\n-      procedure Create_Primary_Table\n-        (Table       : out Regexp_Array_Access;\n-         Num_States  : out State_Index;\n-         Start_State : out State_Index;\n-         End_State   : out State_Index);\n-      --  Creates the first version of the regexp (this is a non determinist\n-      --  finite state machine, which is unadapted for a fast pattern\n-      --  matching algorithm). We use a recursive algorithm to process the\n-      --  parenthesis sub-expressions.\n-      --\n-      --  Table : at the end of the procedure : Column 0 is for any character\n-      --  ('.') and the last columns are for no character (closure)\n-      --  Num_States is set to the number of states in the table\n-      --  Start_State is the number of the starting state in the regexp\n-      --  End_State is the number of the final state when the regexp matches\n-\n-      procedure Create_Primary_Table_Glob\n-        (Table       : out Regexp_Array_Access;\n-         Num_States  : out State_Index;\n-         Start_State : out State_Index;\n-         End_State   : out State_Index);\n-      --  Same function as above, but it deals with the second possible\n-      --  grammar for 'globbing pattern', which is a kind of subset of the\n-      --  whole regular expression grammar.\n-\n-      function Create_Secondary_Table\n-        (First_Table : Regexp_Array_Access;\n-         Num_States  : State_Index;\n-         Start_State : State_Index;\n-         End_State   : State_Index)\n-         return        Regexp;\n-      --  Creates the definitive table representing the regular expression\n-      --  This is actually a transformation of the primary table First_Table,\n-      --  where every state is grouped with the states in its 'no-character'\n-      --  columns. The transitions between the new states are then recalculated\n-      --  and if necessary some new states are created.\n-      --\n-      --  Note that the resulting finite-state machine is not optimized in\n-      --  terms of the number of states : it would be more time-consuming to\n-      --  add a third pass to reduce the number of states in the machine, with\n-      --  no speed improvement...\n-\n-      procedure Raise_Exception\n-        (M     : String;\n-         Index : Integer);\n-      pragma No_Return (Raise_Exception);\n-      --  Raise an exception, indicating an error at character Index in S\n-\n-      --------------------\n-      -- Create_Mapping --\n-      --------------------\n-\n-      procedure Create_Mapping is\n-\n-         procedure Add_In_Map (C : Character);\n-         --  Add a character in the mapping, if it is not already defined\n-\n-         ----------------\n-         -- Add_In_Map --\n-         ----------------\n-\n-         procedure Add_In_Map (C : Character) is\n-         begin\n-            if Map (C) = 0 then\n-               Alphabet_Size := Alphabet_Size + 1;\n-               Map (C) := Alphabet_Size;\n-            end if;\n-         end Add_In_Map;\n-\n-         J                 : Integer := S'First;\n-         Parenthesis_Level : Integer := 0;\n-         Curly_Level       : Integer := 0;\n-\n-      --  Start of processing for Create_Mapping\n-\n-      begin\n-         while J <= S'Last loop\n-            case S (J) is\n-               when Open_Bracket =>\n-                  J := J + 1;\n-\n-                  if S (J) = '^' then\n-                     J := J + 1;\n-                  end if;\n-\n-                  if S (J) = ']' or S (J) = '-' then\n-                     J := J + 1;\n-                  end if;\n-\n-                  --  The first character never has a special meaning\n-\n-                  loop\n-                     if J > S'Last then\n-                        Raise_Exception\n-                          (\"Ran out of characters while parsing \", J);\n-                     end if;\n-\n-                     exit when S (J) = Close_Bracket;\n-\n-                     if S (J) = '-'\n-                       and then S (J + 1) /= Close_Bracket\n-                     then\n-                        declare\n-                           Start : constant Integer := J - 1;\n-\n-                        begin\n-                           J := J + 1;\n-\n-                           if S (J) = '\\' then\n-                              J := J + 1;\n-                           end if;\n-\n-                           for Char in S (Start) .. S (J) loop\n-                              Add_In_Map (Char);\n-                           end loop;\n-                        end;\n-                     else\n-                        if S (J) = '\\' then\n-                           J := J + 1;\n-                        end if;\n-\n-                        Add_In_Map (S (J));\n-                     end if;\n-\n-                     J := J + 1;\n-                  end loop;\n-\n-                  --  A close bracket must follow a open_bracket,\n-                  --  and cannot be found alone on the line\n-\n-               when Close_Bracket =>\n-                  Raise_Exception\n-                    (\"Incorrect character ']' in regular expression\", J);\n-\n-               when '\\' =>\n-                  if J < S'Last  then\n-                     J := J + 1;\n-                     Add_In_Map (S (J));\n-\n-                  else\n-                     --  \\ not allowed at the end of the regexp\n-\n-                     Raise_Exception\n-                       (\"Incorrect character '\\' in regular expression\", J);\n-                  end if;\n-\n-               when Open_Paren =>\n-                  if not Glob then\n-                     Parenthesis_Level := Parenthesis_Level + 1;\n-                  else\n-                     Add_In_Map (Open_Paren);\n-                  end if;\n-\n-               when Close_Paren =>\n-                  if not Glob then\n-                     Parenthesis_Level := Parenthesis_Level - 1;\n-\n-                     if Parenthesis_Level < 0 then\n-                        Raise_Exception\n-                          (\"')' is not associated with '(' in regular \"\n-                           & \"expression\", J);\n-                     end if;\n-\n-                     if S (J - 1) = Open_Paren then\n-                        Raise_Exception\n-                          (\"Empty parenthesis not allowed in regular \"\n-                           & \"expression\", J);\n-                     end if;\n-\n-                  else\n-                     Add_In_Map (Close_Paren);\n-                  end if;\n-\n-               when '.' =>\n-                  if Glob then\n-                     Add_In_Map ('.');\n-                  end if;\n-\n-               when '{' =>\n-                  if not Glob then\n-                     Add_In_Map (S (J));\n-                  else\n-                     Curly_Level := Curly_Level + 1;\n-                  end if;\n-\n-               when '}' =>\n-                  if not Glob then\n-                     Add_In_Map (S (J));\n-                  else\n-                     Curly_Level := Curly_Level - 1;\n-                  end if;\n-\n-               when '*' | '?' =>\n-                  if not Glob then\n-                     if J = S'First then\n-                        Raise_Exception\n-                          (\"'*', '+', '?' and '|' operators cannot be in \"\n-                           & \"first position in regular expression\", J);\n-                     end if;\n-                  end if;\n-\n-               when '|' | '+' =>\n-                  if not Glob then\n-                     if J = S'First then\n-\n-                        --  These operators must apply to a sub-expression,\n-                        --  and cannot be found at the beginning of the line\n-\n-                        Raise_Exception\n-                          (\"'*', '+', '?' and '|' operators cannot be in \"\n-                           & \"first position in regular expression\", J);\n-                     end if;\n-\n-                  else\n-                     Add_In_Map (S (J));\n-                  end if;\n-\n-               when others =>\n-                  Add_In_Map (S (J));\n-            end case;\n-\n-            J := J + 1;\n-         end loop;\n-\n-         --  A closing parenthesis must follow an open parenthesis\n-\n-         if Parenthesis_Level /= 0 then\n-            Raise_Exception\n-              (\"'(' must always be associated with a ')'\", J);\n-         end if;\n-\n-         if Curly_Level /= 0 then\n-            Raise_Exception\n-              (\"'{' must always be associated with a '}'\", J);\n-         end if;\n-      end Create_Mapping;\n-\n-      --------------------------\n-      -- Create_Primary_Table --\n-      --------------------------\n-\n-      procedure Create_Primary_Table\n-        (Table       : out Regexp_Array_Access;\n-         Num_States  : out State_Index;\n-         Start_State : out State_Index;\n-         End_State   : out State_Index)\n-      is\n-         Empty_Char : constant Column_Index := Alphabet_Size + 1;\n-\n-         Current_State : State_Index := 0;\n-         --  Index of the last created state\n-\n-         procedure Add_Empty_Char\n-           (State    : State_Index;\n-            To_State : State_Index);\n-         --  Add a empty-character transition from State to To_State\n-\n-         procedure Create_Repetition\n-           (Repetition : Character;\n-            Start_Prev : State_Index;\n-            End_Prev   : State_Index;\n-            New_Start  : out State_Index;\n-            New_End    : in out State_Index);\n-         --  Create the table in case we have a '*', '+' or '?'.\n-         --  Start_Prev .. End_Prev should indicate respectively the start and\n-         --  end index of the previous expression, to which '*', '+' or '?' is\n-         --  applied.\n-\n-         procedure Create_Simple\n-           (Start_Index : Integer;\n-            End_Index   : Integer;\n-            Start_State : out State_Index;\n-            End_State   : out State_Index);\n-         --  Fill the table for the regexp Simple.\n-         --  This is the recursive procedure called to handle () expressions\n-         --  If End_State = 0, then the call to Create_Simple creates an\n-         --  independent regexp, not a concatenation\n-         --  Start_Index .. End_Index is the starting index in the string S.\n-         --\n-         --  Warning: it may look like we are creating too many empty-string\n-         --  transitions, but they are needed to get the correct regexp.\n-         --  The table is filled as follow ( s means start-state, e means\n-         --  end-state) :\n-         --\n-         --  regexp   state_num | a b * empty_string\n-         --  -------  ------------------------------\n-         --    a          1 (s) | 2 - - -\n-         --               2 (e) | - - - -\n-         --\n-         --    ab         1 (s) | 2 - - -\n-         --               2     | - - - 3\n-         --               3     | - 4 - -\n-         --               4 (e) | - - - -\n-         --\n-         --    a|b        1     | 2 - - -\n-         --               2     | - - - 6\n-         --               3     | - 4 - -\n-         --               4     | - - - 6\n-         --               5 (s) | - - - 1,3\n-         --               6 (e) | - - - -\n-         --\n-         --    a*         1     | 2 - - -\n-         --               2     | - - - 4\n-         --               3 (s) | - - - 1,4\n-         --               4 (e) | - - - 3\n-         --\n-         --    (a)        1 (s) | 2 - - -\n-         --               2 (e) | - - - -\n-         --\n-         --    a+         1     | 2 - - -\n-         --               2     | - - - 4\n-         --               3 (s) | - - - 1\n-         --               4 (e) | - - - 3\n-         --\n-         --    a?         1     | 2 - - -\n-         --               2     | - - - 4\n-         --               3 (s) | - - - 1,4\n-         --               4 (e) | - - - -\n-         --\n-         --    .          1 (s) | 2 2 2 -\n-         --               2 (e) | - - - -\n-\n-         function Next_Sub_Expression\n-           (Start_Index : Integer;\n-            End_Index   : Integer)\n-            return        Integer;\n-         --  Returns the index of the last character of the next sub-expression\n-         --  in Simple. Index cannot be greater than End_Index.\n-\n-         --------------------\n-         -- Add_Empty_Char --\n-         --------------------\n-\n-         procedure Add_Empty_Char\n-           (State    : State_Index;\n-            To_State : State_Index)\n-         is\n-            J : Column_Index := Empty_Char;\n-\n-         begin\n-            while Get (Table, State, J) /= 0 loop\n-               J := J + 1;\n-            end loop;\n-\n-            Set (Table, State, J, To_State);\n-         end Add_Empty_Char;\n-\n-         -----------------------\n-         -- Create_Repetition --\n-         -----------------------\n-\n-         procedure Create_Repetition\n-           (Repetition : Character;\n-            Start_Prev : State_Index;\n-            End_Prev   : State_Index;\n-            New_Start  : out State_Index;\n-            New_End    : in out State_Index)\n-         is\n-         begin\n-            New_Start := Current_State + 1;\n-\n-            if New_End /= 0 then\n-               Add_Empty_Char (New_End, New_Start);\n-            end if;\n-\n-            Current_State := Current_State + 2;\n-            New_End   := Current_State;\n-\n-            Add_Empty_Char (End_Prev, New_End);\n-            Add_Empty_Char (New_Start, Start_Prev);\n-\n-            if Repetition /= '+' then\n-               Add_Empty_Char (New_Start, New_End);\n-            end if;\n-\n-            if Repetition /= '?' then\n-               Add_Empty_Char (New_End, New_Start);\n-            end if;\n-         end Create_Repetition;\n-\n-         -------------------\n-         -- Create_Simple --\n-         -------------------\n-\n-         procedure Create_Simple\n-           (Start_Index : Integer;\n-            End_Index   : Integer;\n-            Start_State : out State_Index;\n-            End_State   : out State_Index)\n-         is\n-            J          : Integer := Start_Index;\n-            Last_Start : State_Index := 0;\n-\n-         begin\n-            Start_State := 0;\n-            End_State   := 0;\n-            while J <= End_Index loop\n-               case S (J) is\n-                  when Open_Paren =>\n-                     declare\n-                        J_Start    : constant Integer := J + 1;\n-                        Next_Start : State_Index;\n-                        Next_End   : State_Index;\n-\n-                     begin\n-                        J := Next_Sub_Expression (J, End_Index);\n-                        Create_Simple (J_Start, J - 1, Next_Start, Next_End);\n-\n-                        if J < End_Index\n-                          and then (S (J + 1) = '*' or else\n-                                    S (J + 1) = '+' or else\n-                                    S (J + 1) = '?')\n-                        then\n-                           J := J + 1;\n-                           Create_Repetition\n-                             (S (J),\n-                              Next_Start,\n-                              Next_End,\n-                              Last_Start,\n-                              End_State);\n-\n-                        else\n-                           Last_Start := Next_Start;\n-\n-                           if End_State /= 0 then\n-                              Add_Empty_Char (End_State, Last_Start);\n-                           end if;\n-\n-                           End_State := Next_End;\n-                        end if;\n-                     end;\n-\n-                  when '|' =>\n-                     declare\n-                        Start_Prev : constant State_Index := Start_State;\n-                        End_Prev   : constant State_Index := End_State;\n-                        Start_J    : constant Integer     := J + 1;\n-                        Start_Next : State_Index := 0;\n-                        End_Next   : State_Index := 0;\n-\n-                     begin\n-                        J := Next_Sub_Expression (J, End_Index);\n-\n-                        --  Create a new state for the start of the alternative\n-\n-                        Current_State := Current_State + 1;\n-                        Last_Start := Current_State;\n-                        Start_State := Last_Start;\n-\n-                        --  Create the tree for the second part of alternative\n-\n-                        Create_Simple (Start_J, J, Start_Next, End_Next);\n-\n-                        --  Create the end state\n-\n-                        Add_Empty_Char (Last_Start, Start_Next);\n-                        Add_Empty_Char (Last_Start, Start_Prev);\n-                        Current_State := Current_State + 1;\n-                        End_State := Current_State;\n-                        Add_Empty_Char (End_Prev, End_State);\n-                        Add_Empty_Char (End_Next, End_State);\n-                     end;\n-\n-                  when Open_Bracket =>\n-                     Current_State := Current_State + 1;\n-\n-                     declare\n-                        Next_State : State_Index := Current_State + 1;\n-\n-                     begin\n-                        J := J + 1;\n-\n-                        if S (J) = '^' then\n-                           J := J + 1;\n-\n-                           Next_State := 0;\n-\n-                           for Column in 0 .. Alphabet_Size loop\n-                              Set (Table, Current_State, Column,\n-                                   Value => Current_State + 1);\n-                           end loop;\n-                        end if;\n-\n-                        --  Automatically add the first character\n-\n-                        if S (J) = '-' or S (J) = ']' then\n-                           Set (Table, Current_State, Map (S (J)),\n-                                Value => Next_State);\n-                           J := J + 1;\n-                        end if;\n-\n-                        --  Loop till closing bracket found\n-\n-                        loop\n-                           exit when S (J) = Close_Bracket;\n-\n-                           if S (J) = '-'\n-                             and then S (J + 1) /= ']'\n-                           then\n-                              declare\n-                                 Start : constant Integer := J - 1;\n-\n-                              begin\n-                                 J := J + 1;\n-\n-                                 if S (J) = '\\' then\n-                                    J := J + 1;\n-                                 end if;\n-\n-                                 for Char in S (Start) .. S (J) loop\n-                                    Set (Table, Current_State, Map (Char),\n-                                         Value => Next_State);\n-                                 end loop;\n-                              end;\n-\n-                           else\n-                              if S (J) = '\\' then\n-                                 J := J + 1;\n-                              end if;\n-\n-                              Set (Table, Current_State, Map (S (J)),\n-                                   Value => Next_State);\n-                           end if;\n-                           J := J + 1;\n-                        end loop;\n-                     end;\n-\n-                     Current_State := Current_State + 1;\n-\n-                     --  If the next symbol is a special symbol\n-\n-                     if J < End_Index\n-                       and then (S (J + 1) = '*' or else\n-                                 S (J + 1) = '+' or else\n-                                 S (J + 1) = '?')\n-                     then\n-                        J := J + 1;\n-                        Create_Repetition\n-                          (S (J),\n-                           Current_State - 1,\n-                           Current_State,\n-                           Last_Start,\n-                           End_State);\n-\n-                     else\n-                        Last_Start := Current_State - 1;\n-\n-                        if End_State /= 0 then\n-                           Add_Empty_Char (End_State, Last_Start);\n-                        end if;\n-\n-                        End_State := Current_State;\n-                     end if;\n-\n-                  when '*' | '+' | '?' | Close_Paren | Close_Bracket =>\n-                     Raise_Exception\n-                       (\"Incorrect character in regular expression :\", J);\n-\n-                  when others =>\n-                     Current_State := Current_State + 1;\n-\n-                     --  Create the state for the symbol S (J)\n-\n-                     if S (J) = '.' then\n-                        for K in 0 .. Alphabet_Size loop\n-                           Set (Table, Current_State, K,\n-                                Value => Current_State + 1);\n-                        end loop;\n-\n-                     else\n-                        if S (J) = '\\' then\n-                           J := J + 1;\n-                        end if;\n-\n-                        Set (Table, Current_State, Map (S (J)),\n-                             Value => Current_State + 1);\n-                     end if;\n-\n-                     Current_State := Current_State + 1;\n-\n-                     --  If the next symbol is a special symbol\n-\n-                     if J < End_Index\n-                       and then (S (J + 1) = '*' or else\n-                                 S (J + 1) = '+' or else\n-                                 S (J + 1) = '?')\n-                     then\n-                        J := J + 1;\n-                        Create_Repetition\n-                          (S (J),\n-                           Current_State - 1,\n-                           Current_State,\n-                           Last_Start,\n-                           End_State);\n-\n-                     else\n-                        Last_Start := Current_State - 1;\n-\n-                        if End_State /= 0 then\n-                           Add_Empty_Char (End_State, Last_Start);\n-                        end if;\n-\n-                        End_State := Current_State;\n-                     end if;\n-\n-               end case;\n-\n-               if Start_State = 0 then\n-                  Start_State := Last_Start;\n-               end if;\n-\n-               J := J + 1;\n-            end loop;\n-         end Create_Simple;\n-\n-         -------------------------\n-         -- Next_Sub_Expression --\n-         -------------------------\n-\n-         function Next_Sub_Expression\n-           (Start_Index : Integer;\n-            End_Index   : Integer)\n-            return        Integer\n-         is\n-            J              : Integer := Start_Index;\n-            Start_On_Alter : Boolean := False;\n-\n-         begin\n-            if S (J) = '|' then\n-               Start_On_Alter := True;\n-            end if;\n-\n-            loop\n-               exit when J = End_Index;\n-               J := J + 1;\n-\n-               case S (J) is\n-                  when '\\' =>\n-                     J := J + 1;\n-\n-                  when Open_Bracket =>\n-                     loop\n-                        J := J + 1;\n-                        exit when S (J) = Close_Bracket;\n-\n-                        if S (J) = '\\' then\n-                           J := J + 1;\n-                        end if;\n-                     end loop;\n-\n-                  when Open_Paren =>\n-                     J := Next_Sub_Expression (J, End_Index);\n-\n-                  when Close_Paren =>\n-                     return J;\n-\n-                  when '|' =>\n-                     if Start_On_Alter then\n-                        return J - 1;\n-                     end if;\n-\n-                  when others =>\n-                     null;\n-               end case;\n-            end loop;\n-\n-            return J;\n-         end Next_Sub_Expression;\n-\n-      --  Start of Create_Primary_Table\n-\n-      begin\n-         Table.all := (others => (others => 0));\n-         Create_Simple (S'First, S'Last, Start_State, End_State);\n-         Num_States := Current_State;\n-      end Create_Primary_Table;\n-\n-      -------------------------------\n-      -- Create_Primary_Table_Glob --\n-      -------------------------------\n-\n-      procedure Create_Primary_Table_Glob\n-        (Table       : out Regexp_Array_Access;\n-         Num_States  : out State_Index;\n-         Start_State : out State_Index;\n-         End_State   : out State_Index)\n-      is\n-         Empty_Char : constant Column_Index := Alphabet_Size + 1;\n-\n-         Current_State : State_Index := 0;\n-         --  Index of the last created state\n-\n-         procedure Add_Empty_Char\n-           (State    : State_Index;\n-            To_State : State_Index);\n-         --  Add a empty-character transition from State to To_State\n-\n-         procedure Create_Simple\n-           (Start_Index : Integer;\n-            End_Index   : Integer;\n-            Start_State : out State_Index;\n-            End_State   : out State_Index);\n-         --  Fill the table for the S (Start_Index .. End_Index).\n-         --  This is the recursive procedure called to handle () expressions\n-\n-         --------------------\n-         -- Add_Empty_Char --\n-         --------------------\n-\n-         procedure Add_Empty_Char\n-           (State    : State_Index;\n-            To_State : State_Index)\n-         is\n-            J : Column_Index := Empty_Char;\n-\n-         begin\n-            while Get (Table, State, J) /= 0 loop\n-               J := J + 1;\n-            end loop;\n-\n-            Set (Table, State, J,\n-                 Value => To_State);\n-         end Add_Empty_Char;\n-\n-         -------------------\n-         -- Create_Simple --\n-         -------------------\n-\n-         procedure Create_Simple\n-           (Start_Index : Integer;\n-            End_Index   : Integer;\n-            Start_State : out State_Index;\n-            End_State   : out State_Index)\n-         is\n-            J          : Integer := Start_Index;\n-            Last_Start : State_Index := 0;\n-\n-         begin\n-            Start_State := 0;\n-            End_State   := 0;\n-\n-            while J <= End_Index loop\n-               case S (J) is\n-\n-                  when Open_Bracket =>\n-                     Current_State := Current_State + 1;\n-\n-                     declare\n-                        Next_State : State_Index := Current_State + 1;\n-\n-                     begin\n-                        J := J + 1;\n-\n-                        if S (J) = '^' then\n-                           J := J + 1;\n-                           Next_State := 0;\n-\n-                           for Column in 0 .. Alphabet_Size loop\n-                              Set (Table, Current_State, Column,\n-                                   Value => Current_State + 1);\n-                           end loop;\n-                        end if;\n-\n-                        --  Automatically add the first character\n-\n-                        if S (J) = '-' or S (J) = ']' then\n-                           Set (Table, Current_State, Map (S (J)),\n-                                Value => Current_State);\n-                           J := J + 1;\n-                        end if;\n-\n-                        --  Loop till closing bracket found\n-\n-                        loop\n-                           exit when S (J) = Close_Bracket;\n-\n-                           if S (J) = '-'\n-                             and then S (J + 1) /= ']'\n-                           then\n-                              declare\n-                                 Start : constant Integer := J - 1;\n-                              begin\n-                                 J := J + 1;\n-\n-                                 if S (J) = '\\' then\n-                                    J := J + 1;\n-                                 end if;\n-\n-                                 for Char in S (Start) .. S (J) loop\n-                                    Set (Table, Current_State, Map (Char),\n-                                         Value => Next_State);\n-                                 end loop;\n-                              end;\n-\n-                           else\n-                              if S (J) = '\\' then\n-                                 J := J + 1;\n-                              end if;\n-\n-                              Set (Table, Current_State, Map (S (J)),\n-                                   Value => Next_State);\n-                           end if;\n-                           J := J + 1;\n-                        end loop;\n-                     end;\n-\n-                     Last_Start := Current_State;\n-                     Current_State := Current_State + 1;\n-\n-                     if End_State /= 0 then\n-                        Add_Empty_Char (End_State, Last_Start);\n-                     end if;\n-\n-                     End_State := Current_State;\n-\n-                  when '{' =>\n-                     declare\n-                        End_Sub          : Integer;\n-                        Start_Regexp_Sub : State_Index;\n-                        End_Regexp_Sub   : State_Index;\n-                        Create_Start     : State_Index := 0;\n-\n-                        Create_End : State_Index := 0;\n-                        --  Initialized to avoid junk warning\n-\n-                     begin\n-                        while S (J) /= '}' loop\n-\n-                           --  First step : find sub pattern\n-\n-                           End_Sub := J + 1;\n-                           while S (End_Sub) /= ','\n-                             and then S (End_Sub) /= '}'\n-                           loop\n-                              End_Sub := End_Sub + 1;\n-                           end loop;\n-\n-                           --  Second step : create a sub pattern\n-\n-                           Create_Simple\n-                             (J + 1,\n-                              End_Sub - 1,\n-                              Start_Regexp_Sub,\n-                              End_Regexp_Sub);\n-\n-                           J := End_Sub;\n-\n-                           --  Third step : create an alternative\n-\n-                           if Create_Start = 0 then\n-                              Current_State := Current_State + 1;\n-                              Create_Start := Current_State;\n-                              Add_Empty_Char (Create_Start, Start_Regexp_Sub);\n-                              Current_State := Current_State + 1;\n-                              Create_End := Current_State;\n-                              Add_Empty_Char (End_Regexp_Sub, Create_End);\n-\n-                           else\n-                              Current_State := Current_State + 1;\n-                              Add_Empty_Char (Current_State, Create_Start);\n-                              Create_Start := Current_State;\n-                              Add_Empty_Char (Create_Start, Start_Regexp_Sub);\n-                              Add_Empty_Char (End_Regexp_Sub, Create_End);\n-                           end if;\n-                        end loop;\n-\n-                        if End_State /= 0 then\n-                           Add_Empty_Char (End_State, Create_Start);\n-                        end if;\n-\n-                        End_State := Create_End;\n-                        Last_Start := Create_Start;\n-                     end;\n-\n-                  when '*' =>\n-                     Current_State := Current_State + 1;\n-\n-                     if End_State /= 0 then\n-                        Add_Empty_Char (End_State, Current_State);\n-                     end if;\n-\n-                     Add_Empty_Char (Current_State, Current_State + 1);\n-                     Add_Empty_Char (Current_State, Current_State + 3);\n-                     Last_Start := Current_State;\n-\n-                     Current_State := Current_State + 1;\n-\n-                     for K in 0 .. Alphabet_Size loop\n-                        Set (Table, Current_State, K,\n-                             Value => Current_State + 1);\n-                     end loop;\n-\n-                     Current_State := Current_State + 1;\n-                     Add_Empty_Char (Current_State, Current_State + 1);\n-\n-                     Current_State := Current_State + 1;\n-                     Add_Empty_Char (Current_State,  Last_Start);\n-                     End_State := Current_State;\n-\n-                  when others =>\n-                     Current_State := Current_State + 1;\n-\n-                     if S (J) = '?' then\n-                        for K in 0 .. Alphabet_Size loop\n-                           Set (Table, Current_State, K,\n-                                Value => Current_State + 1);\n-                        end loop;\n-\n-                     else\n-                        if S (J) = '\\' then\n-                           J := J + 1;\n-                        end if;\n-\n-                        --  Create the state for the symbol S (J)\n-\n-                        Set (Table, Current_State, Map (S (J)),\n-                             Value => Current_State + 1);\n-                     end if;\n-\n-                     Last_Start := Current_State;\n-                     Current_State := Current_State + 1;\n-\n-                     if End_State /= 0 then\n-                        Add_Empty_Char (End_State, Last_Start);\n-                     end if;\n-\n-                     End_State := Current_State;\n-\n-               end case;\n-\n-               if Start_State = 0 then\n-                  Start_State := Last_Start;\n-               end if;\n-\n-               J := J + 1;\n-            end loop;\n-         end Create_Simple;\n-\n-      --  Start of processing for Create_Primary_Table_Glob\n-\n-      begin\n-         Table.all := (others => (others => 0));\n-         Create_Simple (S'First, S'Last, Start_State, End_State);\n-         Num_States := Current_State;\n-      end Create_Primary_Table_Glob;\n-\n-      ----------------------------\n-      -- Create_Secondary_Table --\n-      ----------------------------\n-\n-      function Create_Secondary_Table\n-        (First_Table : Regexp_Array_Access;\n-         Num_States  : State_Index;\n-         Start_State : State_Index;\n-         End_State   : State_Index) return Regexp\n-      is\n-         pragma Warnings (Off, Num_States);\n-\n-         Last_Index : constant State_Index := First_Table'Last (1);\n-         type Meta_State is array (1 .. Last_Index) of Boolean;\n-\n-         Table : Regexp_Array (1 .. Last_Index, 0 .. Alphabet_Size) :=\n-                   (others => (others => 0));\n-\n-         Meta_States : array (1 .. Last_Index + 1) of Meta_State :=\n-                         (others => (others => False));\n-\n-         Temp_State_Not_Null : Boolean;\n-\n-         Is_Final : Boolean_Array (1 .. Last_Index) := (others => False);\n-\n-         Current_State       : State_Index := 1;\n-         Nb_State            : State_Index := 1;\n-\n-         procedure Closure\n-           (State : in out Meta_State;\n-            Item  :        State_Index);\n-         --  Compute the closure of the state (that is every other state which\n-         --  has a empty-character transition) and add it to the state\n-\n-         -------------\n-         -- Closure --\n-         -------------\n-\n-         procedure Closure\n-           (State : in out Meta_State;\n-            Item  : State_Index)\n-         is\n-         begin\n-            if State (Item) then\n-               return;\n-            end if;\n-\n-            State (Item) := True;\n-\n-            for Column in Alphabet_Size + 1 .. First_Table'Last (2) loop\n-               if First_Table (Item, Column) = 0 then\n-                  return;\n-               end if;\n-\n-               Closure (State, First_Table (Item, Column));\n-            end loop;\n-         end Closure;\n-\n-      --  Start of procesing for Create_Secondary_Table\n-\n-      begin\n-         --  Create a new state\n-\n-         Closure (Meta_States (Current_State), Start_State);\n-\n-         while Current_State <= Nb_State loop\n-\n-            --  If this new meta-state includes the primary table end state,\n-            --  then this meta-state will be a final state in the regexp\n-\n-            if Meta_States (Current_State)(End_State) then\n-               Is_Final (Current_State) := True;\n-            end if;\n-\n-            --  For every character in the regexp, calculate the possible\n-            --  transitions from Current_State\n-\n-            for Column in 0 .. Alphabet_Size loop\n-               Meta_States (Nb_State + 1) := (others => False);\n-               Temp_State_Not_Null := False;\n-\n-               for K in Meta_States (Current_State)'Range loop\n-                  if Meta_States (Current_State)(K)\n-                    and then First_Table (K, Column) /= 0\n-                  then\n-                     Closure\n-                       (Meta_States (Nb_State + 1), First_Table (K, Column));\n-                     Temp_State_Not_Null := True;\n-                  end if;\n-               end loop;\n-\n-               --  If at least one transition existed\n-\n-               if Temp_State_Not_Null then\n-\n-                  --  Check if this new state corresponds to an old one\n-\n-                  for K in 1 .. Nb_State loop\n-                     if Meta_States (K) = Meta_States (Nb_State + 1) then\n-                        Table (Current_State, Column) := K;\n-                        exit;\n-                     end if;\n-                  end loop;\n-\n-                  --  If not, create a new state\n-\n-                  if Table (Current_State, Column) = 0 then\n-                     Nb_State := Nb_State + 1;\n-                     Table (Current_State, Column) := Nb_State;\n-                  end if;\n-               end if;\n-            end loop;\n-\n-            Current_State := Current_State + 1;\n-         end loop;\n-\n-         --  Returns the regexp\n-\n-         declare\n-            R : Regexp_Access;\n-\n-         begin\n-            R := new Regexp_Value (Alphabet_Size => Alphabet_Size,\n-                                   Num_States    => Nb_State);\n-            R.Map            := Map;\n-            R.Is_Final       := Is_Final (1 .. Nb_State);\n-            R.Case_Sensitive := Case_Sensitive;\n-\n-            for State in 1 .. Nb_State loop\n-               for K in 0 .. Alphabet_Size loop\n-                  R.States (State, K) := Table (State, K);\n-               end loop;\n-            end loop;\n-\n-            return (Ada.Finalization.Controlled with R => R);\n-         end;\n-      end Create_Secondary_Table;\n-\n-      ---------------------\n-      -- Raise_Exception --\n-      ---------------------\n-\n-      procedure Raise_Exception\n-        (M     : String;\n-         Index : Integer)\n-      is\n-      begin\n-         Ada.Exceptions.Raise_Exception\n-           (Error_In_Regexp'Identity, M & \" at offset \" & Index'Img);\n-      end Raise_Exception;\n-\n-   --  Start of processing for Compile\n-\n-   begin\n-      --  Special case for the empty string: it always matches, and the\n-      --  following processing would fail on it.\n-      if S = \"\" then\n-         return (Ada.Finalization.Controlled with\n-                 R => new Regexp_Value'\n-                      (Alphabet_Size => 0,\n-                       Num_States    => 1,\n-                       Map           => (others => 0),\n-                       States        => (others => (others => 1)),\n-                       Is_Final      => (others => True),\n-                       Case_Sensitive => True));\n-      end if;\n-\n-      if not Case_Sensitive then\n-         GNAT.Case_Util.To_Lower (S);\n-      end if;\n-\n-      Create_Mapping;\n-\n-      --  Creates the primary table\n-\n-      declare\n-         Table : Regexp_Array_Access;\n-         Num_States  : State_Index;\n-         Start_State : State_Index;\n-         End_State   : State_Index;\n-         R           : Regexp;\n-\n-      begin\n-         Table := new Regexp_Array (1 .. 100,\n-                                    0 .. Alphabet_Size + 10);\n-         if not Glob then\n-            Create_Primary_Table (Table, Num_States, Start_State, End_State);\n-         else\n-            Create_Primary_Table_Glob\n-              (Table, Num_States, Start_State, End_State);\n-         end if;\n-\n-         --  Creates the secondary table\n-\n-         R := Create_Secondary_Table\n-           (Table, Num_States, Start_State, End_State);\n-         Free (Table);\n-         return R;\n-      end;\n-   end Compile;\n-\n-   --------------\n-   -- Finalize --\n-   --------------\n-\n-   procedure Finalize (R : in out Regexp) is\n-      procedure Free is new\n-        Unchecked_Deallocation (Regexp_Value, Regexp_Access);\n-\n-   begin\n-      Free (R.R);\n-   end Finalize;\n-\n-   ---------\n-   -- Get --\n-   ---------\n-\n-   function Get\n-     (Table  : Regexp_Array_Access;\n-      State  : State_Index;\n-      Column : Column_Index) return State_Index\n-   is\n-   begin\n-      if State <= Table'Last (1)\n-        and then Column <= Table'Last (2)\n-      then\n-         return Table (State, Column);\n-      else\n-         return 0;\n-      end if;\n-   end Get;\n-\n-   -----------\n-   -- Match --\n-   -----------\n-\n-   function Match (S : String; R : Regexp) return Boolean is\n-      Current_State : State_Index := 1;\n-\n-   begin\n-      if R.R = null then\n-         raise Constraint_Error;\n-      end if;\n-\n-      for Char in S'Range loop\n-\n-         if R.R.Case_Sensitive then\n-            Current_State := R.R.States (Current_State, R.R.Map (S (Char)));\n-         else\n-            Current_State :=\n-              R.R.States (Current_State,\n-                          R.R.Map (GNAT.Case_Util.To_Lower (S (Char))));\n-         end if;\n-\n-         if Current_State = 0 then\n-            return False;\n-         end if;\n-\n-      end loop;\n-\n-      return R.R.Is_Final (Current_State);\n-   end Match;\n-\n-   ---------\n-   -- Set --\n-   ---------\n-\n-   procedure Set\n-     (Table  : in out Regexp_Array_Access;\n-      State  : State_Index;\n-      Column : Column_Index;\n-      Value  : State_Index)\n-   is\n-      New_Lines   : State_Index;\n-      New_Columns : Column_Index;\n-      New_Table   : Regexp_Array_Access;\n-\n-   begin\n-      if State <= Table'Last (1)\n-        and then Column <= Table'Last (2)\n-      then\n-         Table (State, Column) := Value;\n-      else\n-         --  Doubles the size of the table until it is big enough that\n-         --  (State, Column) is a valid index\n-\n-         New_Lines := Table'Last (1) * (State / Table'Last (1) + 1);\n-         New_Columns := Table'Last (2) * (Column / Table'Last (2) + 1);\n-         New_Table := new Regexp_Array (Table'First (1) .. New_Lines,\n-                                        Table'First (2) .. New_Columns);\n-         New_Table.all := (others => (others => 0));\n-\n-         for J in Table'Range (1) loop\n-            for K in Table'Range (2) loop\n-               New_Table (J, K) := Table (J, K);\n-            end loop;\n-         end loop;\n-\n-         Free (Table);\n-         Table := New_Table;\n-         Table (State, Column) := Value;\n-      end if;\n-   end Set;\n-\n-end GNAT.Regexp;\n+pragma No_Body;"}, {"sha": "49d9bf6bac9f0ffff98576f3092bdae8f4d842ad", "filename": "gcc/ada/g-spipat.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spipat.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2006, AdaCore                     --\n+--                     Copyright (C) 1998-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,8 +43,8 @@ with GNAT.Debug_Utilities;      use GNAT.Debug_Utilities;\n \n with System;                    use System;\n \n-with Unchecked_Conversion;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n \n package body GNAT.Spitbol.Patterns is\n \n@@ -75,7 +75,7 @@ package body GNAT.Spitbol.Patterns is\n    subtype String_Ptr is Ada.Strings.Unbounded.String_Access;\n    subtype File_Ptr   is Ada.Text_IO.File_Access;\n \n-   function To_Address is new Unchecked_Conversion (PE_Ptr, Address);\n+   function To_Address is new Ada.Unchecked_Conversion (PE_Ptr, Address);\n    --  Used only for debugging output purposes\n \n    subtype AFC is Ada.Finalization.Controlled;\n@@ -2324,8 +2324,8 @@ package body GNAT.Spitbol.Patterns is\n \n    procedure Finalize (Object : in out Pattern) is\n \n-      procedure Free is new Unchecked_Deallocation (PE, PE_Ptr);\n-      procedure Free is new Unchecked_Deallocation (String, String_Ptr);\n+      procedure Free is new Ada.Unchecked_Deallocation (PE, PE_Ptr);\n+      procedure Free is new Ada.Unchecked_Deallocation (String, String_Ptr);\n \n    begin\n       --  Nothing to do if already freed\n@@ -3544,7 +3544,7 @@ package body GNAT.Spitbol.Patterns is\n    ------------\n \n    function Str_BF (A : Boolean_Func) return String is\n-      function To_A is new Unchecked_Conversion (Boolean_Func, Address);\n+      function To_A is new Ada.Unchecked_Conversion (Boolean_Func, Address);\n    begin\n       return \"BF(\" & Image (To_A (A)) & ')';\n    end Str_BF;\n@@ -3563,7 +3563,7 @@ package body GNAT.Spitbol.Patterns is\n    ------------\n \n    function Str_NF (A : Natural_Func) return String is\n-      function To_A is new Unchecked_Conversion (Natural_Func, Address);\n+      function To_A is new Ada.Unchecked_Conversion (Natural_Func, Address);\n    begin\n       return \"NF(\" & Image (To_A (A)) & ')';\n    end Str_NF;\n@@ -3591,7 +3591,7 @@ package body GNAT.Spitbol.Patterns is\n    ------------\n \n    function Str_VF (A : VString_Func) return String is\n-      function To_A is new Unchecked_Conversion (VString_Func, Address);\n+      function To_A is new Ada.Unchecked_Conversion (VString_Func, Address);\n    begin\n       return \"VF(\" & Image (To_A (A)) & ')';\n    end Str_VF;"}, {"sha": "2015bb2eee7914624b07195ca62f2543b0f17557", "filename": "gcc/ada/g-spitbo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-spitbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-spitbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spitbo.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2006, AdaCore                     --\n+--                     Copyright (C) 1998-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ with Ada.Strings.Unbounded.Aux; use Ada.Strings.Unbounded.Aux;\n with GNAT.Debug_Utilities;      use GNAT.Debug_Utilities;\n with GNAT.IO;                   use GNAT.IO;\n \n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body GNAT.Spitbol is\n \n@@ -320,7 +320,7 @@ package body GNAT.Spitbol is\n    package body Table is\n \n       procedure Free is new\n-        Unchecked_Deallocation (Hash_Element, Hash_Element_Ptr);\n+        Ada.Unchecked_Deallocation (Hash_Element, Hash_Element_Ptr);\n \n       -----------------------\n       -- Local Subprograms --"}, {"sha": "bdbb995ff95ef66aba891c9addaaf937e85b1ead", "filename": "gcc/ada/g-string.adb", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-string.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-string.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-string.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1995-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,31 +31,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body GNAT.Strings is\n+--  This package does not require a body, since it is a package renaming. We\n+--  provide a dummy file containing a No_Body pragma so that previous versions\n+--  of the body (which did exist) will not intefere.\n \n-   ----------\n-   -- Free --\n-   ----------\n-\n-   procedure Free (Arg : in out String_List_Access) is\n-      X : String_Access;\n-\n-      procedure Free_Array is new Unchecked_Deallocation\n-        (Object => String_List, Name => String_List_Access);\n-\n-   begin\n-      --  First free all the String_Access components if any\n-\n-      if Arg /= null then\n-         for J in Arg'Range loop\n-            X := Arg (J);\n-            Free (X);\n-         end loop;\n-      end if;\n-\n-      --  Now free the allocated array\n-\n-      Free_Array (Arg);\n-   end Free;\n-\n-end GNAT.Strings;\n+pragma No_Body;"}, {"sha": "fd6d492b61d05b2b26921fb206c514700af62193", "filename": "gcc/ada/g-string.ads", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-string.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-string.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-string.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,27 +33,8 @@\n \n --  Common String access types and related subprograms\n \n-with Unchecked_Deallocation;\n+--  See file s-string.ads for full documentation of the interface\n \n-package GNAT.Strings is\n-   pragma Preelaborate;\n+with System.Strings;\n \n-   type String_Access is access all String;\n-   --  General purpose string access type. Note that the caller is\n-   --  responsible for freeing allocated strings to avoid memory leaks.\n-\n-   procedure Free is new Unchecked_Deallocation\n-     (Object => String, Name => String_Access);\n-   --  This procedure is provided for freeing allocated values of type\n-   --  String_Access.\n-\n-   type String_List is array (Positive range <>) of String_Access;\n-   type String_List_Access is access all String_List;\n-   --  General purpose array and pointer for list of string accesses\n-\n-   procedure Free (Arg : in out String_List_Access);\n-   --  Frees the given array and all strings that its elements reference,\n-   --  and then sets the argument to null. Provided for freeing allocated\n-   --  values of this type.\n-\n-end GNAT.Strings;\n+package GNAT.Strings renames System.Strings;"}, {"sha": "f16b6fd1fe55c175e2ee499d39b77356d3afe353", "filename": "gcc/ada/g-table.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-table.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-table.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2005, AdaCore                     --\n+--                     Copyright (C) 1998-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with System;        use System;\n with System.Memory; use System.Memory;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body GNAT.Table is\n \n@@ -65,8 +65,8 @@ package body GNAT.Table is\n    --  internally in this package, and cannot never result in any instances\n    --  of improperly aliased pointers for the client of the package.\n \n-   function To_Address is new Unchecked_Conversion (Table_Ptr, Address);\n-   function To_Pointer is new Unchecked_Conversion (Address, Table_Ptr);\n+   function To_Address is new Ada.Unchecked_Conversion (Table_Ptr, Address);\n+   function To_Pointer is new Ada.Unchecked_Conversion (Address, Table_Ptr);\n \n    pragma Warnings (On);\n "}, {"sha": "92a2beab32171cc0511f73376a4bc7ed042f8f13", "filename": "gcc/ada/g-thread.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-thread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fg-thread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-thread.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2006 AdaCore                      --\n+--                    Copyright (C) 1998-2007, AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ with System.Tasking;\n with System.Tasking.Stages;   use System.Tasking.Stages;\n with System.OS_Interface;     use System.OS_Interface;\n with System.Soft_Links;       use System.Soft_Links;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body GNAT.Threads is\n \n@@ -51,12 +51,12 @@ package body GNAT.Threads is\n    --  The following unchecked conversions are aliasing safe, since they\n    --  are never used to create pointers to improperly aliased data.\n \n-   function To_Addr is new Unchecked_Conversion (Task_Id, Address);\n-   function To_Id   is new Unchecked_Conversion (Address, Task_Id);\n-   function To_Id   is new Unchecked_Conversion (Address, Tasking.Task_Id);\n-   function To_Tid  is new Unchecked_Conversion\n+   function To_Addr is new Ada.Unchecked_Conversion (Task_Id, Address);\n+   function To_Id   is new Ada.Unchecked_Conversion (Address, Task_Id);\n+   function To_Id   is new Ada.Unchecked_Conversion (Address, Tasking.Task_Id);\n+   function To_Tid  is new Ada.Unchecked_Conversion\n      (Address, Ada.Task_Identification.Task_Id);\n-   function To_Thread is new Unchecked_Conversion (Address, Thread_Id_Ptr);\n+   function To_Thread is new Ada.Unchecked_Conversion (Address, Thread_Id_Ptr);\n \n    pragma Warnings (On);\n \n@@ -91,7 +91,7 @@ package body GNAT.Threads is\n    is\n       TP : Tptr;\n \n-      function To_CP is new Unchecked_Conversion (Address, Code_Proc);\n+      function To_CP is new Ada.Unchecked_Conversion (Address, Code_Proc);\n \n    begin\n       TP := new Thread (Size, Prio, Parm, To_CP (Code));\n@@ -174,7 +174,7 @@ package body GNAT.Threads is\n    ----------------\n \n    function To_Task_Id\n-     (Id   : System.Address) return Ada.Task_Identification.Task_Id\n+     (Id : System.Address) return Ada.Task_Identification.Task_Id\n    is\n    begin\n       return To_Tid (Id);"}, {"sha": "f9f696b9eeea490c925d36dc98424b4fc4083985", "filename": "gcc/ada/i-cobol.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cobol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cobol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cobol.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@\n \n with Interfaces; use Interfaces;\n with System;     use System;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Interfaces.COBOL is\n \n@@ -52,22 +52,22 @@ package body Interfaces.COBOL is\n    subtype B8 is Byte_Array (1 .. 8);\n    --  Representations for 1,2,4,8 byte binary values\n \n-   function To_B1 is new Unchecked_Conversion (Integer_8,  B1);\n-   function To_B2 is new Unchecked_Conversion (Integer_16, B2);\n-   function To_B4 is new Unchecked_Conversion (Integer_32, B4);\n-   function To_B8 is new Unchecked_Conversion (Integer_64, B8);\n+   function To_B1 is new Ada.Unchecked_Conversion (Integer_8,  B1);\n+   function To_B2 is new Ada.Unchecked_Conversion (Integer_16, B2);\n+   function To_B4 is new Ada.Unchecked_Conversion (Integer_32, B4);\n+   function To_B8 is new Ada.Unchecked_Conversion (Integer_64, B8);\n    --  Conversions from native binary to external binary\n \n-   function From_B1 is new Unchecked_Conversion (B1, Integer_8);\n-   function From_B2 is new Unchecked_Conversion (B2, Integer_16);\n-   function From_B4 is new Unchecked_Conversion (B4, Integer_32);\n-   function From_B8 is new Unchecked_Conversion (B8, Integer_64);\n+   function From_B1 is new Ada.Unchecked_Conversion (B1, Integer_8);\n+   function From_B2 is new Ada.Unchecked_Conversion (B2, Integer_16);\n+   function From_B4 is new Ada.Unchecked_Conversion (B4, Integer_32);\n+   function From_B8 is new Ada.Unchecked_Conversion (B8, Integer_64);\n    --  Conversions from external binary to signed native binary\n \n-   function From_B1U is new Unchecked_Conversion (B1, Unsigned_8);\n-   function From_B2U is new Unchecked_Conversion (B2, Unsigned_16);\n-   function From_B4U is new Unchecked_Conversion (B4, Unsigned_32);\n-   function From_B8U is new Unchecked_Conversion (B8, Unsigned_64);\n+   function From_B1U is new Ada.Unchecked_Conversion (B1, Unsigned_8);\n+   function From_B2U is new Ada.Unchecked_Conversion (B2, Unsigned_16);\n+   function From_B4U is new Ada.Unchecked_Conversion (B4, Unsigned_32);\n+   function From_B8U is new Ada.Unchecked_Conversion (B8, Unsigned_64);\n    --  Conversions from external binary to unsigned native binary\n \n    -----------------------"}, {"sha": "25752a1e9f64a2b51ebbd753f893bf218349f954", "filename": "gcc/ada/i-cpoint.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cpoint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cpoint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpoint.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,16 +34,16 @@\n with Interfaces.C.Strings; use Interfaces.C.Strings;\n with System;               use System;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Interfaces.C.Pointers is\n \n    type Addr is mod Memory_Size;\n \n-   function To_Pointer is new Unchecked_Conversion (Addr,      Pointer);\n-   function To_Addr    is new Unchecked_Conversion (Pointer,   Addr);\n-   function To_Addr    is new Unchecked_Conversion (ptrdiff_t, Addr);\n-   function To_Ptrdiff is new Unchecked_Conversion (Addr,      ptrdiff_t);\n+   function To_Pointer is new Ada.Unchecked_Conversion (Addr,      Pointer);\n+   function To_Addr    is new Ada.Unchecked_Conversion (Pointer,   Addr);\n+   function To_Addr    is new Ada.Unchecked_Conversion (ptrdiff_t, Addr);\n+   function To_Ptrdiff is new Ada.Unchecked_Conversion (Addr,      ptrdiff_t);\n \n    Elmt_Size : constant ptrdiff_t :=\n                  (Element_Array'Component_Size\n@@ -197,7 +197,7 @@ package body Interfaces.C.Pointers is\n             subtype A is Element_Array (L .. H);\n \n             type PA is access A;\n-            function To_PA is new Unchecked_Conversion (Pointer, PA);\n+            function To_PA is new Ada.Unchecked_Conversion (Pointer, PA);\n \n          begin\n             return To_PA (Ref).all;\n@@ -240,7 +240,7 @@ package body Interfaces.C.Pointers is\n             subtype A is Element_Array (L .. H);\n \n             type PA is access A;\n-            function To_PA is new Unchecked_Conversion (Pointer, PA);\n+            function To_PA is new Ada.Unchecked_Conversion (Pointer, PA);\n \n          begin\n             return To_PA (Ref).all;"}, {"sha": "a941dba3bd5ec57074acf4c14da0492c4915fa5f", "filename": "gcc/ada/i-cstrea-vms.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrea-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrea-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea-vms.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n --  This is the Alpha/VMS version\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n package body Interfaces.C_Streams is\n \n    use type System.CRTL.size_t;\n@@ -81,7 +81,7 @@ package body Interfaces.C_Streams is\n       type Buffer_Type is array (size_t range 1 .. count,\n                                  size_t range 1 .. size) of Character;\n       type Buffer_Access is access Buffer_Type;\n-      function To_BA is new Unchecked_Conversion (voids, Buffer_Access);\n+      function To_BA is new Ada.Unchecked_Conversion (voids, Buffer_Access);\n \n       BA : constant Buffer_Access := To_BA (buffer);\n       Ch : int;\n@@ -119,7 +119,7 @@ package body Interfaces.C_Streams is\n       type Buffer_Type is array (size_t range 1 .. count,\n                                  size_t range 1 .. size) of Character;\n       type Buffer_Access is access Buffer_Type;\n-      function To_BA is new Unchecked_Conversion (voids, Buffer_Access);\n+      function To_BA is new Ada.Unchecked_Conversion (voids, Buffer_Access);\n \n       BA : constant Buffer_Access := To_BA (buffer);\n       Ch : int;\n@@ -181,7 +181,7 @@ package body Interfaces.C_Streams is\n       type Buffer_Type is array (size_t range 1 .. count,\n                                  size_t range 1 .. size) of Character;\n       type Buffer_Access is access Buffer_Type;\n-      function To_BA is new Unchecked_Conversion (voids, Buffer_Access);\n+      function To_BA is new Ada.Unchecked_Conversion (voids, Buffer_Access);\n \n       BA : constant Buffer_Access := To_BA (buffer);\n "}, {"sha": "68d84a4d240c7e143a36161ed073715429e6a894", "filename": "gcc/ada/i-cstrea.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@\n --  Note: the reason that we provide for specialization here is that on\n --  some systems, notably VMS, we may need to worry about buffering.\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Interfaces.C_Streams is\n \n@@ -94,7 +94,7 @@ package body Interfaces.C_Streams is\n \n    type Acc_Bytes is access all Byte_Buffer;\n \n-   function To_Acc_Bytes is new Unchecked_Conversion (voids, Acc_Bytes);\n+   function To_Acc_Bytes is new Ada.Unchecked_Conversion (voids, Acc_Bytes);\n \n    function fread\n      (buffer : voids;"}, {"sha": "42e4ed4494a9fa7559aa4a2a96844f7ce0351207", "filename": "gcc/ada/i-cstrin.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-cstrin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrin.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with System; use System;\n with System.Storage_Elements; use System.Storage_Elements;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body Interfaces.C.Strings is\n \n@@ -44,10 +44,10 @@ package body Interfaces.C.Strings is\n    --  this type will in fact be used for aliasing values of other types.\n \n    function To_chars_ptr is\n-      new Unchecked_Conversion (Address, chars_ptr);\n+      new Ada.Unchecked_Conversion (Address, chars_ptr);\n \n    function To_Address is\n-      new Unchecked_Conversion (chars_ptr, Address);\n+      new Ada.Unchecked_Conversion (chars_ptr, Address);\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "f7dadf4e321160b983727ae6e4a509cbe34f2dba", "filename": "gcc/ada/i-pacdec.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-pacdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fi-pacdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-pacdec.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --            (Version for IBM Mainframe Packed Decimal Format)             --\n --                                                                          --\n---          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,16 +32,18 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System;                  use System;\n-with Unchecked_Conversion;\n+with System; use System;\n+\n+with Ada.Unchecked_Conversion;\n \n package body Interfaces.Packed_Decimal is\n \n    type Packed is array (Byte_Length) of Unsigned_8;\n    --  The type used internally to represent packed decimal\n \n    type Packed_Ptr is access Packed;\n-   function To_Packed_Ptr is new Unchecked_Conversion (Address, Packed_Ptr);\n+   function To_Packed_Ptr is\n+     new Ada.Unchecked_Conversion (Address, Packed_Ptr);\n \n    --  The following array is used to convert a value in the range 0-99 to\n    --  a packed decimal format with two hexadecimal nibbles. It is worth"}, {"sha": "363cc1ee2fe8869d7c6f4a282f68e77cbac13d19", "filename": "gcc/ada/s-addima.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-addima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-addima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-addima.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n function System.Address_Image (A : Address) return String is\n \n@@ -46,7 +46,7 @@ function System.Address_Image (A : Address) return String is\n    type Bytes is array (1 .. Address'Size / Storage_Unit) of Byte;\n    for Bytes'Size use Address'Size;\n \n-   function To_Bytes is new Unchecked_Conversion (Address, Bytes);\n+   function To_Bytes is new Ada.Unchecked_Conversion (Address, Bytes);\n \n    Byte_Sequence : constant Bytes := To_Bytes (A);\n "}, {"sha": "548b214dccc4b1935aedf2ae9f18601d6d8b4c9a", "filename": "gcc/ada/s-addope.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-addope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-addope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-addope.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2004-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,15 +31,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Address_Operations is\n \n    type IA is mod 2 ** Address'Size;\n    --  The type used to provide the actual desired operations\n \n-   function I is new Unchecked_Conversion (Address, IA);\n-   function A is new Unchecked_Conversion (IA, Address);\n+   function I is new Ada.Unchecked_Conversion (Address, IA);\n+   function A is new Ada.Unchecked_Conversion (IA, Address);\n    --  The operations are implemented by unchecked conversion to type IA,\n    --  followed by doing the intrinsic operation on the IA values, followed\n    --  by converting the result back to type Address."}, {"sha": "8683e1c7298b6cbf47aed1daafa2fdd47a3ff910", "filename": "gcc/ada/s-arit64.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,19 +31,17 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Pure_Exceptions; use System.Pure_Exceptions;\n-\n with Interfaces; use Interfaces;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Arith_64 is\n \n    pragma Suppress (Overflow_Check);\n    pragma Suppress (Range_Check);\n \n    subtype Uns64 is Unsigned_64;\n-   function To_Uns is new Unchecked_Conversion (Int64, Uns64);\n-   function To_Int is new Unchecked_Conversion (Uns64, Int64);\n+   function To_Uns is new Ada.Unchecked_Conversion (Int64, Uns64);\n+   function To_Int is new Ada.Unchecked_Conversion (Uns64, Int64);\n \n    subtype Uns32 is Unsigned_32;\n \n@@ -379,7 +377,7 @@ package body System.Arith_64 is\n \n    procedure Raise_Error is\n    begin\n-      Raise_Exception (CE, \"64-bit arithmetic overflow\");\n+      raise Constraint_Error with \"64-bit arithmetic overflow\";\n    end Raise_Error;\n \n    -------------------"}, {"sha": "0911dd647b043ef52abdc2a19b995f3b6fec34c7", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,9 +37,9 @@\n --  These definitions can be used directly by withing this package, or merged\n --  with System using pragma Extend_System (Aux_DEC)\n \n---  This is the VMS 64 bit version.\n+--  This is the VMS 64 bit version\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Aux_DEC is\n    pragma Preelaborate;\n@@ -60,7 +60,7 @@ package System.Aux_DEC is\n    --  not available.\n \n    Short_Memory_Size : constant := 2 ** 32;\n-   --  Defined for convenience of porting.\n+   --  Defined for convenience of porting\n \n    type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n    for Integer_8'Size  use  8;\n@@ -495,61 +495,61 @@ private\n    --  detectable by a program)\n \n    function To_Unsigned_Byte_A is new\n-     Unchecked_Conversion (Bit_Array_8, Unsigned_Byte);\n+     Ada.Unchecked_Conversion (Bit_Array_8, Unsigned_Byte);\n \n    function To_Unsigned_Byte (X : Bit_Array_8) return Unsigned_Byte\n      renames To_Unsigned_Byte_A;\n \n    function To_Bit_Array_8_A is new\n-     Unchecked_Conversion (Unsigned_Byte, Bit_Array_8);\n+     Ada.Unchecked_Conversion (Unsigned_Byte, Bit_Array_8);\n \n    function To_Bit_Array_8 (X : Unsigned_Byte) return Bit_Array_8\n      renames To_Bit_Array_8_A;\n \n    function To_Unsigned_Word_A is new\n-     Unchecked_Conversion (Bit_Array_16, Unsigned_Word);\n+     Ada.Unchecked_Conversion (Bit_Array_16, Unsigned_Word);\n \n    function To_Unsigned_Word (X : Bit_Array_16) return Unsigned_Word\n      renames To_Unsigned_Word_A;\n \n    function To_Bit_Array_16_A is new\n-     Unchecked_Conversion (Unsigned_Word, Bit_Array_16);\n+     Ada.Unchecked_Conversion (Unsigned_Word, Bit_Array_16);\n \n    function To_Bit_Array_16 (X : Unsigned_Word) return Bit_Array_16\n      renames To_Bit_Array_16_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (Bit_Array_32, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (Bit_Array_32, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : Bit_Array_32) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;\n \n    function To_Bit_Array_32_A is new\n-     Unchecked_Conversion (Unsigned_Longword, Bit_Array_32);\n+     Ada.Unchecked_Conversion (Unsigned_Longword, Bit_Array_32);\n \n    function To_Bit_Array_32 (X : Unsigned_Longword) return Bit_Array_32\n      renames To_Bit_Array_32_A;\n \n    function To_Unsigned_32_A is new\n-     Unchecked_Conversion (Bit_Array_32, Unsigned_32);\n+     Ada.Unchecked_Conversion (Bit_Array_32, Unsigned_32);\n \n    function To_Unsigned_32 (X : Bit_Array_32) return Unsigned_32\n      renames To_Unsigned_32_A;\n \n    function To_Bit_Array_32_A is new\n-     Unchecked_Conversion (Unsigned_32, Bit_Array_32);\n+     Ada.Unchecked_Conversion (Unsigned_32, Bit_Array_32);\n \n    function To_Bit_Array_32 (X : Unsigned_32) return Bit_Array_32\n      renames To_Bit_Array_32_A;\n \n    function To_Unsigned_Quadword_A is new\n-     Unchecked_Conversion (Bit_Array_64, Unsigned_Quadword);\n+     Ada.Unchecked_Conversion (Bit_Array_64, Unsigned_Quadword);\n \n    function To_Unsigned_Quadword (X : Bit_Array_64) return Unsigned_Quadword\n      renames To_Unsigned_Quadword_A;\n \n    function To_Bit_Array_64_A is new\n-     Unchecked_Conversion (Unsigned_Quadword, Bit_Array_64);\n+     Ada.Unchecked_Conversion (Unsigned_Quadword, Bit_Array_64);\n \n    function To_Bit_Array_64 (X : Unsigned_Quadword) return Bit_Array_64\n      renames To_Bit_Array_64_A;\n@@ -560,35 +560,35 @@ private\n    --  want warnings when we compile on such systems.\n \n    function To_Address_A is new\n-     Unchecked_Conversion (Integer, Address);\n+     Ada.Unchecked_Conversion (Integer, Address);\n    pragma Pure_Function (To_Address_A);\n \n    function To_Address (X : Integer) return Address\n      renames To_Address_A;\n    pragma Pure_Function (To_Address);\n \n    function To_Address_Long_A is new\n-     Unchecked_Conversion (Unsigned_Longword, Address);\n+     Ada.Unchecked_Conversion (Unsigned_Longword, Address);\n    pragma Pure_Function (To_Address_Long_A);\n \n    function To_Address_Long (X : Unsigned_Longword) return Address\n      renames To_Address_Long_A;\n    pragma Pure_Function (To_Address_Long);\n \n    function To_Integer_A is new\n-     Unchecked_Conversion (Address, Integer);\n+     Ada.Unchecked_Conversion (Address, Integer);\n \n    function To_Integer (X : Address) return Integer\n      renames To_Integer_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (Address, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (Address, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : Address) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (AST_Handler, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (AST_Handler, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : AST_Handler) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;"}, {"sha": "5bde295d6b5419095d95f564683c3772fae227d2", "filename": "gcc/ada/s-auxdec.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/Or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,8 +51,8 @@ package body System.Aux_DEC is\n    type LIU is mod 2 ** Largest_Integer'Size;\n    --  Unsigned type of same length as Largest_Integer\n \n-   function To_LI   is new Unchecked_Conversion (LIU, Largest_Integer);\n-   function From_LI is new Unchecked_Conversion (Largest_Integer, LIU);\n+   function To_LI   is new Ada.Unchecked_Conversion (LIU, Largest_Integer);\n+   function From_LI is new Ada.Unchecked_Conversion (Largest_Integer, LIU);\n \n    function \"not\" (Left : Largest_Integer) return Largest_Integer is\n    begin\n@@ -86,8 +86,8 @@ package body System.Aux_DEC is\n    type SA is range -(2 ** Asiz) .. 2 ** Asiz - 1;\n    --  Signed type of same size as Address\n \n-   function To_A   is new Unchecked_Conversion (SA, Address);\n-   function From_A is new Unchecked_Conversion (Address, SA);\n+   function To_A   is new Ada.Unchecked_Conversion (SA, Address);\n+   function From_A is new Ada.Unchecked_Conversion (Address, SA);\n \n    function \"+\" (Left : Address; Right : Integer) return Address is\n    begin\n@@ -117,7 +117,7 @@ package body System.Aux_DEC is\n \n    function Fetch_From_Address (A : Address) return Target is\n       type T_Ptr is access all Target;\n-      function To_T_Ptr is new Unchecked_Conversion (Address, T_Ptr);\n+      function To_T_Ptr is new Ada.Unchecked_Conversion (Address, T_Ptr);\n       Ptr : constant T_Ptr := To_T_Ptr (A);\n    begin\n       return Ptr.all;\n@@ -129,7 +129,7 @@ package body System.Aux_DEC is\n \n    procedure Assign_To_Address (A : Address; T : Target) is\n       type T_Ptr is access all Target;\n-      function To_T_Ptr is new Unchecked_Conversion (Address, T_Ptr);\n+      function To_T_Ptr is new Ada.Unchecked_Conversion (Address, T_Ptr);\n       Ptr : constant T_Ptr := To_T_Ptr (A);\n    begin\n       Ptr.all := T;\n@@ -145,8 +145,8 @@ package body System.Aux_DEC is\n    type BU is mod 2 ** Unsigned_Byte'Size;\n    --  Unsigned type of same length as Unsigned_Byte\n \n-   function To_B   is new Unchecked_Conversion (BU, Unsigned_Byte);\n-   function From_B is new Unchecked_Conversion (Unsigned_Byte, BU);\n+   function To_B   is new Ada.Unchecked_Conversion (BU, Unsigned_Byte);\n+   function From_B is new Ada.Unchecked_Conversion (Unsigned_Byte, BU);\n \n    function \"not\" (Left : Unsigned_Byte) return Unsigned_Byte is\n    begin\n@@ -178,8 +178,8 @@ package body System.Aux_DEC is\n    type WU is mod 2 ** Unsigned_Word'Size;\n    --  Unsigned type of same length as Unsigned_Word\n \n-   function To_W   is new Unchecked_Conversion (WU, Unsigned_Word);\n-   function From_W is new Unchecked_Conversion (Unsigned_Word, WU);\n+   function To_W   is new Ada.Unchecked_Conversion (WU, Unsigned_Word);\n+   function From_W is new Ada.Unchecked_Conversion (Unsigned_Word, WU);\n \n    function \"not\" (Left : Unsigned_Word) return Unsigned_Word is\n    begin\n@@ -211,8 +211,8 @@ package body System.Aux_DEC is\n    type LWU is mod 2 ** Unsigned_Longword'Size;\n    --  Unsigned type of same length as Unsigned_Longword\n \n-   function To_LW   is new Unchecked_Conversion (LWU, Unsigned_Longword);\n-   function From_LW is new Unchecked_Conversion (Unsigned_Longword, LWU);\n+   function To_LW   is new Ada.Unchecked_Conversion (LWU, Unsigned_Longword);\n+   function From_LW is new Ada.Unchecked_Conversion (Unsigned_Longword, LWU);\n \n    function \"not\" (Left : Unsigned_Longword) return Unsigned_Longword is\n    begin\n@@ -244,8 +244,8 @@ package body System.Aux_DEC is\n    type U32 is mod 2 ** Unsigned_32'Size;\n    --  Unsigned type of same length as Unsigned_32\n \n-   function To_U32   is new Unchecked_Conversion (U32, Unsigned_32);\n-   function From_U32 is new Unchecked_Conversion (Unsigned_32, U32);\n+   function To_U32   is new Ada.Unchecked_Conversion (U32, Unsigned_32);\n+   function From_U32 is new Ada.Unchecked_Conversion (Unsigned_32, U32);\n \n    function \"not\" (Left : Unsigned_32) return Unsigned_32 is\n    begin\n@@ -277,8 +277,8 @@ package body System.Aux_DEC is\n    type QWU is mod 2 ** 64;  -- 64 = Unsigned_Quadword'Size\n    --  Unsigned type of same length as Unsigned_Quadword\n \n-   function To_QW   is new Unchecked_Conversion (QWU, Unsigned_Quadword);\n-   function From_QW is new Unchecked_Conversion (Unsigned_Quadword, QWU);\n+   function To_QW   is new Ada.Unchecked_Conversion (QWU, Unsigned_Quadword);\n+   function From_QW is new Ada.Unchecked_Conversion (Unsigned_Quadword, QWU);\n \n    function \"not\" (Left : Unsigned_Quadword) return Unsigned_Quadword is\n    begin\n@@ -451,11 +451,11 @@ package body System.Aux_DEC is\n    type IU is mod 2 ** Integer'Size;\n    type LU is mod 2 ** Long_Integer'Size;\n \n-   function To_IU   is new Unchecked_Conversion (Integer, IU);\n-   function From_IU is new Unchecked_Conversion (IU, Integer);\n+   function To_IU   is new Ada.Unchecked_Conversion (Integer, IU);\n+   function From_IU is new Ada.Unchecked_Conversion (IU, Integer);\n \n-   function To_LU   is new Unchecked_Conversion (Long_Integer, LU);\n-   function From_LU is new Unchecked_Conversion (LU, Long_Integer);\n+   function To_LU   is new Ada.Unchecked_Conversion (Long_Integer, LU);\n+   function From_LU is new Ada.Unchecked_Conversion (LU, Long_Integer);\n \n    procedure And_Atomic\n      (To   : in out Aligned_Integer;\n@@ -582,8 +582,8 @@ package body System.Aux_DEC is\n       Backward : QR_Ptr;\n    end record;\n \n-   function To_QR_Ptr   is new Unchecked_Conversion (Address, QR_Ptr);\n-   function From_QR_Ptr is new Unchecked_Conversion (QR_Ptr, Address);\n+   function To_QR_Ptr   is new Ada.Unchecked_Conversion (Address, QR_Ptr);\n+   function From_QR_Ptr is new Ada.Unchecked_Conversion (QR_Ptr, Address);\n \n    ------------\n    -- Insqhi --"}, {"sha": "1585eda15eed3c47742d8067eb160e5f84e954df", "filename": "gcc/ada/s-auxdec.ads", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-auxdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@\n --  These definitions can be used directly by withing this package, or merged\n --  with System using pragma Extend_System (Aux_DEC)\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Aux_DEC is\n    pragma Preelaborate;\n@@ -485,61 +485,61 @@ private\n    --  detectable by a program)\n \n    function To_Unsigned_Byte_A is new\n-     Unchecked_Conversion (Bit_Array_8, Unsigned_Byte);\n+     Ada.Unchecked_Conversion (Bit_Array_8, Unsigned_Byte);\n \n    function To_Unsigned_Byte (X : Bit_Array_8) return Unsigned_Byte\n      renames To_Unsigned_Byte_A;\n \n    function To_Bit_Array_8_A is new\n-     Unchecked_Conversion (Unsigned_Byte, Bit_Array_8);\n+     Ada.Unchecked_Conversion (Unsigned_Byte, Bit_Array_8);\n \n    function To_Bit_Array_8 (X : Unsigned_Byte) return Bit_Array_8\n      renames To_Bit_Array_8_A;\n \n    function To_Unsigned_Word_A is new\n-     Unchecked_Conversion (Bit_Array_16, Unsigned_Word);\n+     Ada.Unchecked_Conversion (Bit_Array_16, Unsigned_Word);\n \n    function To_Unsigned_Word (X : Bit_Array_16) return Unsigned_Word\n      renames To_Unsigned_Word_A;\n \n    function To_Bit_Array_16_A is new\n-     Unchecked_Conversion (Unsigned_Word, Bit_Array_16);\n+     Ada.Unchecked_Conversion (Unsigned_Word, Bit_Array_16);\n \n    function To_Bit_Array_16 (X : Unsigned_Word) return Bit_Array_16\n      renames To_Bit_Array_16_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (Bit_Array_32, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (Bit_Array_32, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : Bit_Array_32) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;\n \n    function To_Bit_Array_32_A is new\n-     Unchecked_Conversion (Unsigned_Longword, Bit_Array_32);\n+     Ada.Unchecked_Conversion (Unsigned_Longword, Bit_Array_32);\n \n    function To_Bit_Array_32 (X : Unsigned_Longword) return Bit_Array_32\n      renames To_Bit_Array_32_A;\n \n    function To_Unsigned_32_A is new\n-     Unchecked_Conversion (Bit_Array_32, Unsigned_32);\n+     Ada.Unchecked_Conversion (Bit_Array_32, Unsigned_32);\n \n    function To_Unsigned_32 (X : Bit_Array_32) return Unsigned_32\n      renames To_Unsigned_32_A;\n \n    function To_Bit_Array_32_A is new\n-     Unchecked_Conversion (Unsigned_32, Bit_Array_32);\n+     Ada.Unchecked_Conversion (Unsigned_32, Bit_Array_32);\n \n    function To_Bit_Array_32 (X : Unsigned_32) return Bit_Array_32\n      renames To_Bit_Array_32_A;\n \n    function To_Unsigned_Quadword_A is new\n-     Unchecked_Conversion (Bit_Array_64, Unsigned_Quadword);\n+     Ada.Unchecked_Conversion (Bit_Array_64, Unsigned_Quadword);\n \n    function To_Unsigned_Quadword (X : Bit_Array_64) return Unsigned_Quadword\n      renames To_Unsigned_Quadword_A;\n \n    function To_Bit_Array_64_A is new\n-     Unchecked_Conversion (Unsigned_Quadword, Bit_Array_64);\n+     Ada.Unchecked_Conversion (Unsigned_Quadword, Bit_Array_64);\n \n    function To_Bit_Array_64 (X : Unsigned_Quadword) return Bit_Array_64\n      renames To_Bit_Array_64_A;\n@@ -550,35 +550,35 @@ private\n    --  want warnings when we compile on such systems.\n \n    function To_Address_A is new\n-     Unchecked_Conversion (Integer, Address);\n+     Ada.Unchecked_Conversion (Integer, Address);\n    pragma Pure_Function (To_Address_A);\n \n    function To_Address (X : Integer) return Address\n      renames To_Address_A;\n    pragma Pure_Function (To_Address);\n \n    function To_Address_Long_A is new\n-     Unchecked_Conversion (Unsigned_Longword, Address);\n+     Ada.Unchecked_Conversion (Unsigned_Longword, Address);\n    pragma Pure_Function (To_Address_Long_A);\n \n    function To_Address_Long (X : Unsigned_Longword) return Address\n      renames To_Address_Long_A;\n    pragma Pure_Function (To_Address_Long);\n \n    function To_Integer_A is new\n-     Unchecked_Conversion (Address, Integer);\n+     Ada.Unchecked_Conversion (Address, Integer);\n \n    function To_Integer (X : Address) return Integer\n      renames To_Integer_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (Address, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (Address, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : Address) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;\n \n    function To_Unsigned_Longword_A is new\n-     Unchecked_Conversion (AST_Handler, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (AST_Handler, Unsigned_Longword);\n \n    function To_Unsigned_Longword (X : AST_Handler) return Unsigned_Longword\n      renames To_Unsigned_Longword_A;"}, {"sha": "4f41cdbc1b90fd62f534f06a69d22cc1c1ffda4a", "filename": "gcc/ada/s-carsi8.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-carsi8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-carsi8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carsi8.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Signed_8 is\n \n@@ -53,10 +53,10 @@ package body System.Compare_Array_Signed_8 is\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new\n-     Unchecked_Conversion (System.Address, Big_Words_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Words_Ptr);\n \n    function To_Big_Bytes is new\n-     Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n \n    ----------------------\n    -- Compare_Array_S8 --"}, {"sha": "36bd3be47eff4143acf99626a89de7c19086e12c", "filename": "gcc/ada/s-carun8.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-carun8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-carun8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carun8.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Unsigned_8 is\n \n@@ -52,10 +52,10 @@ package body System.Compare_Array_Unsigned_8 is\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new\n-     Unchecked_Conversion (System.Address, Big_Words_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Words_Ptr);\n \n    function To_Big_Bytes is new\n-     Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n \n    ----------------------\n    -- Compare_Array_U8 --"}, {"sha": "7647f6beeb6e59bacc503a44cac7a2904d6d171c", "filename": "gcc/ada/s-casi16.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi16.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Signed_16 is\n \n@@ -55,9 +55,9 @@ package body System.Compare_Array_Signed_16 is\n    type HP is access Half;\n    type UP is access Uhalf;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function H is new Unchecked_Conversion (Address, HP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function H is new Ada.Unchecked_Conversion (Address, HP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_S16 --"}, {"sha": "7ce89da47d72fb15a5e4806eb1ec895e5498e818", "filename": "gcc/ada/s-casi32.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi32.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Signed_32 is\n \n@@ -51,8 +51,8 @@ package body System.Compare_Array_Signed_32 is\n    type WP is access Word;\n    type UP is access Uword;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_S32 --"}, {"sha": "0cbae743b1ae0d5850871196bf5dcd8adcc5f332", "filename": "gcc/ada/s-casi64.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-casi64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-casi64.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Signed_64 is\n \n@@ -51,8 +51,8 @@ package body System.Compare_Array_Signed_64 is\n    type WP is access Word;\n    type UP is access Uword;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_S64 --"}, {"sha": "3f3d83e459b37bc642301b0d7b521a5b92c6eb0c", "filename": "gcc/ada/s-caun16.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun16.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun16.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun16.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Unsigned_16 is\n \n@@ -55,9 +55,9 @@ package body System.Compare_Array_Unsigned_16 is\n    type HP is access Half;\n    type UP is access Uhalf;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function H is new Unchecked_Conversion (Address, HP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function H is new Ada.Unchecked_Conversion (Address, HP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_U16 --"}, {"sha": "c0289395214bd834f42b1035dcf5a4d0d5d7e4af", "filename": "gcc/ada/s-caun32.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun32.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Unsigned_32 is\n \n@@ -51,8 +51,8 @@ package body System.Compare_Array_Unsigned_32 is\n    type WP is access Word;\n    type UP is access Uword;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_U32 --"}, {"sha": "10ff8176496d18e3cb590f345261ad87b6150837", "filename": "gcc/ada/s-caun64.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-caun64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-caun64.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Address_Operations; use System.Address_Operations;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Compare_Array_Unsigned_64 is\n \n@@ -50,8 +50,8 @@ package body System.Compare_Array_Unsigned_64 is\n    type WP is access Word;\n    type UP is access Uword;\n \n-   function W is new Unchecked_Conversion (Address, WP);\n-   function U is new Unchecked_Conversion (Address, UP);\n+   function W is new Ada.Unchecked_Conversion (Address, WP);\n+   function U is new Ada.Unchecked_Conversion (Address, UP);\n \n    -----------------------\n    -- Compare_Array_U64 --"}, {"sha": "2dac1b1a178c128c369c57d27c928a8dc156709d", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ with System;                 use System;\n with System.CRTL;\n with System.File_IO;\n with System.Soft_Links;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body System.Direct_IO is\n \n@@ -92,7 +92,7 @@ package body System.Direct_IO is\n       FT : FCB_Ptr := FCB_Ptr (File);\n \n       procedure Free is new\n-        Unchecked_Deallocation (Direct_AFCB, FCB_Ptr);\n+        Ada.Unchecked_Deallocation (Direct_AFCB, FCB_Ptr);\n \n    begin\n       Free (FT);"}, {"sha": "3ae5d3d51318bbe42fa28ea8d1b0eddfaec967ee", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,7 @@ with Ada.IO_Exceptions;           use Ada.IO_Exceptions;\n with Interfaces.C_Streams;        use Interfaces.C_Streams;\n with System.CRTL;\n with System.Soft_Links;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body System.File_IO is\n \n@@ -86,6 +86,7 @@ package body System.File_IO is\n    --  environment task is finalized.\n \n    text_translation_required : Boolean;\n+   for text_translation_required'Size use Character'Size;\n    pragma Import\n      (C, text_translation_required, \"__gnat_text_translation_required\");\n    --  If true, add appropriate suffix to control string for Open\n@@ -94,7 +95,7 @@ package body System.File_IO is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Free_String is new Unchecked_Deallocation (String, Pstring);\n+   procedure Free_String is new Ada.Unchecked_Deallocation (String, Pstring);\n \n    subtype Fopen_String is String (1 .. 4);\n    --  Holds open string (longest is \"w+b\" & nul)"}, {"sha": "5bd1be1f8fd1112f9e296eb206242a75fce52f7c", "filename": "gcc/ada/s-finimp.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-finimp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-finimp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -133,7 +133,7 @@ package System.Finalization_Implementation is\n    end record;\n \n    procedure Initialize (Object : in out Limited_Record_Controller);\n-   --  Does nothing currently.\n+   --  Does nothing currently\n \n    procedure Finalize (Object : in out Limited_Record_Controller);\n    --  Finalize the controlled components of the enclosing record by following"}, {"sha": "b7dc82baa00fb3abe1b512fafb0a57bca0f133a8", "filename": "gcc/ada/s-geveop.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-geveop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-geveop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-geveop.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with System;                    use System;\n with System.Address_Operations; use System.Address_Operations;\n with System.Storage_Elements;   use System.Storage_Elements;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Generic_Vector_Operations is\n \n@@ -65,8 +65,8 @@ package body System.Generic_Vector_Operations is\n       type Vector_Ptr is access all Vectors.Vector;\n       type Element_Ptr is access all Element;\n \n-      function VP is new Unchecked_Conversion (Address, Vector_Ptr);\n-      function EP is new Unchecked_Conversion (Address, Element_Ptr);\n+      function VP is new Ada.Unchecked_Conversion (Address, Vector_Ptr);\n+      function EP is new Ada.Unchecked_Conversion (Address, Element_Ptr);\n \n       SA : constant Address :=\n              AddA (XA, To_Address\n@@ -110,8 +110,8 @@ package body System.Generic_Vector_Operations is\n       type Vector_Ptr is access all Vectors.Vector;\n       type Element_Ptr is access all Element;\n \n-      function VP is new Unchecked_Conversion (Address, Vector_Ptr);\n-      function EP is new Unchecked_Conversion (Address, Element_Ptr);\n+      function VP is new Ada.Unchecked_Conversion (Address, Vector_Ptr);\n+      function EP is new Ada.Unchecked_Conversion (Address, Element_Ptr);\n \n       SA : constant Address :=\n              AddA (XA, To_Address"}, {"sha": "75e0677dc9c05ba778153f0916788812785e1fcd", "filename": "gcc/ada/s-imgenu.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-imgenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-imgenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgenu.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Img_Enum is\n \n@@ -50,7 +50,7 @@ package body System.Img_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -80,7 +80,7 @@ package body System.Img_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -110,7 +110,7 @@ package body System.Img_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n "}, {"sha": "ebd66950652752e42c75f929ccd090f3c352e39e", "filename": "gcc/ada/s-inmaop-vms.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-inmaop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-inmaop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-vms.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a OpenVMS/Alpha version of this package.\n+--  This is a OpenVMS/Alpha version of this package\n \n with System.OS_Interface;\n --  used for various type, constant, and operations\n@@ -49,7 +49,7 @@ with System.Task_Primitives.Operations;\n \n with System.Task_Primitives.Operations.DEC;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Interrupt_Management.Operations is\n \n@@ -58,7 +58,9 @@ package body System.Interrupt_Management.Operations is\n    use System.Tasking;\n    use type unsigned_short;\n \n-   function To_Address is new Unchecked_Conversion (Task_Id, System.Address);\n+   function To_Address is\n+     new Ada.Unchecked_Conversion (Task_Id, System.Address);\n+\n    package POP renames System.Task_Primitives.Operations;\n \n    ----------------------------\n@@ -116,7 +118,7 @@ package body System.Interrupt_Management.Operations is\n    --------------------\n \n    function To_unsigned_long is new\n-     Unchecked_Conversion (System.Aux_DEC.Short_Address, unsigned_long);\n+     Ada.Unchecked_Conversion (System.Aux_DEC.Short_Address, unsigned_long);\n \n    function Interrupt_Wait (Mask : access Interrupt_Mask)\n      return Interrupt_ID"}, {"sha": "fa6115719df0403b09a4f679a14e2901d9f56dd1", "filename": "gcc/ada/s-interr-sigaction.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-sigaction.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---             Copyright (C) 1998-2006, Free Software Fundation             --\n+--          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,7 +68,7 @@ with System.Parameters;\n with Interfaces.C;\n --  used for int\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Interrupts is\n \n@@ -83,7 +83,7 @@ package body System.Interrupts is\n \n    subtype int is Interfaces.C.int;\n \n-   function To_System is new Unchecked_Conversion\n+   function To_System is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, Task_Id);\n \n    type Handler_Kind is (Unknown, Task_Entry, Protected_Procedure);\n@@ -143,7 +143,7 @@ package body System.Interrupts is\n \n    type Handler_Ptr is access procedure (Sig : Interrupt_ID);\n \n-   function TISR is new Unchecked_Conversion (Handler_Ptr, isr_address);\n+   function TISR is new Ada.Unchecked_Conversion (Handler_Ptr, isr_address);\n \n    --------------------\n    -- Signal_Handler --\n@@ -502,7 +502,7 @@ package body System.Interrupts is\n          Handler_Addr : System.Address;\n       end record;\n \n-      function To_Fat_Ptr is new Unchecked_Conversion\n+      function To_Fat_Ptr is new Ada.Unchecked_Conversion\n         (Parameterless_Handler, Fat_Ptr);\n \n       Fat : Fat_Ptr;"}, {"sha": "c7d2b55d8b23e550e17f9a2e3f5bac06b233f031", "filename": "gcc/ada/s-interr-vms.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vms.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -113,7 +113,7 @@ with System.Tasking.Initialization;\n with System.Parameters;\n --  used for Single_Lock\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Interrupts is\n \n@@ -126,7 +126,7 @@ package body System.Interrupts is\n    package IMNG renames System.Interrupt_Management;\n    package IMOP renames System.Interrupt_Management.Operations;\n \n-   function To_System is new Unchecked_Conversion\n+   function To_System is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, Task_Id);\n \n    -----------------\n@@ -302,7 +302,7 @@ package body System.Interrupts is\n          Handler_Addr : System.Address;\n       end record;\n \n-      function To_Fat_Ptr is new Unchecked_Conversion\n+      function To_Fat_Ptr is new Ada.Unchecked_Conversion\n         (Parameterless_Handler, Fat_Ptr);\n \n       Ptr : R_Link;"}, {"sha": "740b5076b6cb618203c8e7b3ff909774af7228cc", "filename": "gcc/ada/s-interr-vxworks.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-interr-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vxworks.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,7 +65,7 @@\n --  This is the VxWorks version of this package, supporting vectored hardware\n --  interrupts.\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n with System.OS_Interface; use System.OS_Interface;\n \n@@ -107,10 +107,10 @@ package body System.Interrupts is\n \n    package POP renames System.Task_Primitives.Operations;\n \n-   function To_Ada is new Unchecked_Conversion\n+   function To_Ada is new Ada.Unchecked_Conversion\n      (System.Tasking.Task_Id, Ada.Task_Identification.Task_Id);\n \n-   function To_System is new Unchecked_Conversion\n+   function To_System is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, Task_Id);\n \n    -----------------\n@@ -598,7 +598,7 @@ package body System.Interrupts is\n          Handler_Addr : System.Address;\n       end record;\n \n-      function To_Fat_Ptr is new Unchecked_Conversion\n+      function To_Fat_Ptr is new Ada.Unchecked_Conversion\n         (Parameterless_Handler, Fat_Ptr);\n \n       Ptr : R_Link;"}, {"sha": "2e3d513bc66112fe17df214159048e6acdd81546", "filename": "gcc/ada/s-mastop-irix.adb", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-mastop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-mastop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-irix.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                         (Version for IRIX/MIPS)                          --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,7 @@\n with System.Machine_Code; use System.Machine_Code;\n with System.Memory;\n with System.Soft_Links; use System.Soft_Links;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Machine_State_Operations is\n \n@@ -92,16 +92,19 @@ package body System.Machine_State_Operations is\n    --  within the Sigcontext.\n \n    function To_Sigcontext_Ptr is\n-     new Unchecked_Conversion (Machine_State, Sigcontext_Ptr);\n+     new Ada.Unchecked_Conversion (Machine_State, Sigcontext_Ptr);\n \n    type Addr_Int is mod 2 ** Long_Integer'Size;\n    --  An unsigned integer type whose size is the same as System.Address.\n    --  We rely on the fact that Long_Integer'Size = System.Address'Size in\n    --  all ABIs.  Type Addr_Int can be converted to Uns64.\n \n-   function To_Code_Loc is new Unchecked_Conversion (Addr_Int, Code_Loc);\n-   function To_Addr_Int is new Unchecked_Conversion (System.Address, Addr_Int);\n-   function To_Uns32_Ptr is new Unchecked_Conversion (Addr_Int, Uns32_Ptr);\n+   function To_Code_Loc is\n+     new Ada.Unchecked_Conversion (Addr_Int, Code_Loc);\n+   function To_Addr_Int is\n+     new Ada.Unchecked_Conversion (System.Address, Addr_Int);\n+   function To_Uns32_Ptr is\n+     new Ada.Unchecked_Conversion (Addr_Int, Uns32_Ptr);\n \n    --------------------------------\n    -- ABI-Dependent Declarations --\n@@ -157,7 +160,7 @@ package body System.Machine_State_Operations is\n \n       type Address_Int is mod 2 ** Standard'Address_Size;\n       function To_I_Type_Ptr is new\n-        Unchecked_Conversion (Address_Int, I_Type_Ptr);\n+        Ada.Unchecked_Conversion (Address_Int, I_Type_Ptr);\n \n       Ret_Ins : constant I_Type_Ptr := To_I_Type_Ptr (Address_Int (Scp.SC_PC));\n       GP_Ptr  : Uns32_Ptr;"}, {"sha": "08773343ca6559a9f42fb31f1e4845621c10e2dc", "filename": "gcc/ada/s-mastop-vms.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-mastop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-mastop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop-vms.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                         (Version for Alpha/VMS)                          --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@\n \n with System.Memory;\n with System.Aux_DEC; use System.Aux_DEC;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Machine_State_Operations is\n \n@@ -131,10 +131,10 @@ package body System.Machine_State_Operations is\n \n    function Fetch is new Fetch_From_Address (Code_Loc);\n \n-   function To_Invo_Handle_Access is new Unchecked_Conversion\n+   function To_Invo_Handle_Access is new Ada.Unchecked_Conversion\n      (Machine_State, Invo_Handle_Access_Type);\n \n-   function To_Machine_State is new Unchecked_Conversion\n+   function To_Machine_State is new Ada.Unchecked_Conversion\n      (System.Address, Machine_State);\n \n    ----------------------------"}, {"sha": "716668939c10ffe6262030299e39e91d9ab04f7d", "filename": "gcc/ada/s-osinte-hpux-dce.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux-dce.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -240,7 +240,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;"}, {"sha": "ff635fb61f10930d468c01ac1012a54641a5dbe3", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --               Copyright (C) 1991-1994, Florida State University          --\n---            Copyright (C) 1995-2006, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1995-2007, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -229,7 +229,7 @@ package System.OS_Interface is\n \n    function To_Target_Priority\n      (Prio : System.Any_Priority) return Interfaces.C.int;\n-   --  Maps System.Any_Priority to a POSIX priority.\n+   --  Maps System.Any_Priority to a POSIX priority\n \n    -------------\n    -- Process --\n@@ -258,7 +258,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;\n@@ -280,7 +280,7 @@ package System.OS_Interface is\n    -----------\n \n    Stack_Base_Available : constant Boolean := False;\n-   --  Indicates wether the stack base is available on this target.\n+   --  Indicates wether the stack base is available on this target\n \n    function Get_Stack_Base (thread : pthread_t) return Address;\n    pragma Inline (Get_Stack_Base);"}, {"sha": "844e12c621af6f0d00396f94f520acb01c6883a4", "filename": "gcc/ada/s-osinte-interix.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-interix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-interix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-interix.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2005, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -241,7 +241,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;"}, {"sha": "2159bb7b7c9fa3a1b9c661084486d1697c28106b", "filename": "gcc/ada/s-osinte-irix.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n \n@@ -245,7 +245,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;"}, {"sha": "cab7f3e43d82957339549085d6d4edc504099a01", "filename": "gcc/ada/s-osinte-linux-hppa.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux-hppa.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -8,7 +8,7 @@\n --                          (GNU/Linux-HPPA Version)                        --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -277,12 +277,12 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t is new unsigned_long;\n    subtype Thread_Id        is pthread_t;\n \n-   function To_pthread_t is new Unchecked_Conversion\n+   function To_pthread_t is new Ada.Unchecked_Conversion\n      (unsigned_long, pthread_t);\n \n    type pthread_mutex_t     is limited private;"}, {"sha": "af5a8fc20c9ffa1b0fb4a362c0bb2da6ee12117a", "filename": "gcc/ada/s-osinte-mingw.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-mingw.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@\n \n with Interfaces.C;\n with Interfaces.C.Strings;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -189,7 +189,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    procedure SwitchToThread;\n    pragma Import (Stdcall, SwitchToThread, \"SwitchToThread\");\n@@ -226,7 +226,7 @@ package System.OS_Interface is\n    pragma Convention (Stdcall, PTHREAD_START_ROUTINE);\n \n    function To_PTHREAD_START_ROUTINE is new\n-     Unchecked_Conversion (System.Address, PTHREAD_START_ROUTINE);\n+     Ada.Unchecked_Conversion (System.Address, PTHREAD_START_ROUTINE);\n \n    type SECURITY_ATTRIBUTES is record\n       nLength              : DWORD;"}, {"sha": "6190b98183937e6af68ae4cc50855cdc54c937c0", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -249,7 +249,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;"}, {"sha": "0e5bbbdfd5cf39dbd6bfd52c37429c6a7b752733", "filename": "gcc/ada/s-osinte-solaris.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -301,7 +301,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    THR_DETACHED  : constant := 64;\n    THR_BOUND     : constant := 1;\n@@ -312,7 +312,7 @@ package System.OS_Interface is\n    subtype Thread_Id is thread_t;\n    --  These types should be commented ???\n \n-   function To_thread_t is new Unchecked_Conversion (Integer, thread_t);\n+   function To_thread_t is new Ada.Unchecked_Conversion (Integer, thread_t);\n \n    type mutex_t is limited private;\n "}, {"sha": "993a0d923d28488a5830d2e806ff66640bfbb031", "filename": "gcc/ada/s-osinte-vms.ads", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-osinte-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vms.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@\n --  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n \n with Interfaces.C;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.OS_Interface is\n    pragma Preelaborate;\n@@ -123,9 +123,9 @@ package System.OS_Interface is\n      (Status : out Cond_Value_Type;\n       Devnam : String;\n       Chan   : out unsigned_short;\n-      Acmode : in unsigned_short := 0;\n+      Acmode : unsigned_short := 0;\n       Mbxnam : String := String'Null_Parameter;\n-      Flags  : in unsigned_long := 0);\n+      Flags  : unsigned_long := 0);\n    pragma Interface (External, Sys_Assign);\n    pragma Import_Valued_Procedure\n      (Sys_Assign, \"SYS$ASSIGN\",\n@@ -148,7 +148,7 @@ package System.OS_Interface is\n    procedure Sys_Cantim\n      (Status : out Cond_Value_Type;\n       Reqidt : Address;\n-      Acmode : in unsigned);\n+      Acmode : unsigned);\n    pragma Interface (External, Sys_Cantim);\n    pragma Import_Valued_Procedure\n      (Sys_Cantim, \"SYS$CANTIM\",\n@@ -175,12 +175,12 @@ package System.OS_Interface is\n      (Status : out Cond_Value_Type;\n       Prmflg : Boolean;\n       Chan   : out unsigned_short;\n-      Maxmsg : in unsigned_long := 0;\n-      Bufquo : in unsigned_long := 0;\n-      Promsk : in unsigned_short := 0;\n-      Acmode : in unsigned_short := 0;\n+      Maxmsg : unsigned_long := 0;\n+      Bufquo : unsigned_long := 0;\n+      Promsk : unsigned_short := 0;\n+      Acmode : unsigned_short := 0;\n       Lognam : String;\n-      Flags  : in unsigned_long := 0);\n+      Flags  : unsigned_long := 0);\n    pragma Interface (External, Sys_Crembx);\n    pragma Import_Valued_Procedure\n      (Sys_Crembx, \"SYS$CREMBX\",\n@@ -208,33 +208,33 @@ package System.OS_Interface is\n \n    procedure Sys_QIO\n      (Status : out Cond_Value_Type;\n-      EFN    : in unsigned_long := 0;\n-      Chan   : in unsigned_short;\n-      Func   : in unsigned_long := 0;\n+      EFN    : unsigned_long := 0;\n+      Chan   : unsigned_short;\n+      Func   : unsigned_long := 0;\n       Iosb   : out IO_Status_Block_Type;\n       Astadr : AST_Handler := No_AST_Handler;\n       Astprm : Address := Null_Address;\n-      P1     : in  unsigned_long := 0;\n-      P2     : in  unsigned_long := 0;\n-      P3     : in  unsigned_long := 0;\n-      P4     : in  unsigned_long := 0;\n-      P5     : in  unsigned_long := 0;\n-      P6     : in  unsigned_long := 0);\n+      P1     : unsigned_long := 0;\n+      P2     : unsigned_long := 0;\n+      P3     : unsigned_long := 0;\n+      P4     : unsigned_long := 0;\n+      P5     : unsigned_long := 0;\n+      P6     : unsigned_long := 0);\n \n    procedure Sys_QIO\n      (Status : out Cond_Value_Type;\n-      EFN    : in unsigned_long := 0;\n-      Chan   : in unsigned_short;\n-      Func   : in unsigned_long := 0;\n+      EFN    : unsigned_long := 0;\n+      Chan   : unsigned_short;\n+      Func   : unsigned_long := 0;\n       Iosb   : Address := Null_Address;\n       Astadr : AST_Handler := No_AST_Handler;\n       Astprm : Address := Null_Address;\n-      P1     : in  unsigned_long := 0;\n-      P2     : in  unsigned_long := 0;\n-      P3     : in  unsigned_long := 0;\n-      P4     : in  unsigned_long := 0;\n-      P5     : in  unsigned_long := 0;\n-      P6     : in  unsigned_long := 0);\n+      P1     : unsigned_long := 0;\n+      P2     : unsigned_long := 0;\n+      P3     : unsigned_long := 0;\n+      P4     : unsigned_long := 0;\n+      P5     : unsigned_long := 0;\n+      P6     : unsigned_long := 0);\n \n    pragma Interface (External, Sys_QIO);\n    pragma Import_Valued_Procedure\n@@ -274,11 +274,11 @@ package System.OS_Interface is\n    --\n    procedure Sys_Setimr\n      (Status : out Cond_Value_Type;\n-      EFN    : in unsigned_long;\n+      EFN    : unsigned_long;\n       Tim    : Long_Integer;\n       AST    : AST_Handler;\n       Reqidt : Address;\n-      Flags  : in unsigned_long);\n+      Flags  : unsigned_long);\n    pragma Interface (External, Sys_Setimr);\n    pragma Import_Valued_Procedure\n      (Sys_Setimr, \"SYS$SETIMR\",\n@@ -362,7 +362,7 @@ package System.OS_Interface is\n      function (arg : System.Address) return System.Address;\n \n    function Thread_Body_Access is new\n-     Unchecked_Conversion (System.Address, Thread_Body);\n+     Ada.Unchecked_Conversion (System.Address, Thread_Body);\n \n    type pthread_t           is private;\n    subtype Thread_Id        is pthread_t;"}, {"sha": "6ffe85876d1d86e626131f7eb5a8f84b807af3fb", "filename": "gcc/ada/s-pack03.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack03.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack03.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack03.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_03 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_03 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_03 --"}, {"sha": "fd5b0604008c5d448c48acfaad6d2d5f4841098c", "filename": "gcc/ada/s-pack05.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack05.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack05.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack05.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_05 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_05 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_05 --"}, {"sha": "a4ab3b6b5a5428b9aca21341f004902c490e9967", "filename": "gcc/ada/s-pack06.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack06.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack06.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack06.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_06 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_06 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_06 or SetU_06 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_06 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_06 --"}, {"sha": "9e834d6384e417e6dcb89954403bd405f1258d69", "filename": "gcc/ada/s-pack07.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack07.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack07.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack07.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_07 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_07 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_07 --"}, {"sha": "8e429d65cb62b78b8deb86701fb7f8d629d6768a", "filename": "gcc/ada/s-pack09.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack09.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack09.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack09.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_09 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_09 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_09 --"}, {"sha": "a9fefa2fe58e6331a0a98c5f3e1263966a1930e2", "filename": "gcc/ada/s-pack10.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack10.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_10 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_10 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_10 or SetU_10 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_10 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_10 --"}, {"sha": "95006c96465d3c7d969abc97ec71dd76f95ea41c", "filename": "gcc/ada/s-pack11.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack11.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_11 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_11 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_11 --"}, {"sha": "d1b26e9a8801cfc42595de77c7cc267e25672c20", "filename": "gcc/ada/s-pack12.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack12.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_12 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_12 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_12 or SetU_12 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_12 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_12 --"}, {"sha": "19ad76d4beaba33c1442bdc918838f3937ca34f4", "filename": "gcc/ada/s-pack13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack13.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_13 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_13 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_13 --"}, {"sha": "c39df0150185321daf08c0099b67daeec59d3e14", "filename": "gcc/ada/s-pack14.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack14.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_14 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_14 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_14 or SetU_14 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_14 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_14 --"}, {"sha": "51d9ed4027e75be0d8c7a260b5bb957e980fab73", "filename": "gcc/ada/s-pack15.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack15.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_15 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_15 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_15 --"}, {"sha": "afa2a2f160721cea62315dc5cadbb941b0a78546", "filename": "gcc/ada/s-pack17.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack17.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_17 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_17 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_17 --"}, {"sha": "55513940484a044539c1d06e2281506aad8e459f", "filename": "gcc/ada/s-pack18.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack18.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack18.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack18.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_18 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_18 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_18 or SetU_18 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_18 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_18 --"}, {"sha": "8a87dc830e9cac00afbb2be5d8b21a49614b6cd0", "filename": "gcc/ada/s-pack19.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack19.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack19.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack19.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_19 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_19 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_19 --"}, {"sha": "fba366c7c783dcb39c459369ec2aa7282e573d5e", "filename": "gcc/ada/s-pack20.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack20.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack20.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack20.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_20 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_20 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_20 or SetU_20 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_20 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_20 --"}, {"sha": "877259ec9598d1cff871d49443c5c97145297afb", "filename": "gcc/ada/s-pack21.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack21.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack21.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack21.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_21 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_21 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_21 --"}, {"sha": "8abf97f2351ed02bcc8ee9383eb1a8926a0716fc", "filename": "gcc/ada/s-pack22.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack22.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack22.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack22.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_22 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_22 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_22 or SetU_22 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_22 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_22 --"}, {"sha": "be5bc1253a7507949fcf6820ce42eb2d3bce5f91", "filename": "gcc/ada/s-pack23.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack23.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack23.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack23.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_23 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_23 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_23 --"}, {"sha": "7678e602374b250e3b14a099d3bebe5a4f2b8861", "filename": "gcc/ada/s-pack24.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack24.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack24.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack24.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_24 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_24 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_24 or SetU_24 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_24 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_24 --"}, {"sha": "f5ae6a5d31b1730337b98b3b24210e0619b1f830", "filename": "gcc/ada/s-pack25.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack25.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack25.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack25.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_25 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_25 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_25 --"}, {"sha": "acf71a13a96f3321e0494cfffbabe444f9a0a605", "filename": "gcc/ada/s-pack26.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack26.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack26.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack26.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_26 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_26 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_26 or SetU_26 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_26 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_26 --"}, {"sha": "dd22f0653a18a0d0713e2c2e2a12e3589d7bb4be", "filename": "gcc/ada/s-pack27.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack27.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_27 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_27 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_27 --"}, {"sha": "27aa3a09b11d410a38e71edfaa2d485d4265cf82", "filename": "gcc/ada/s-pack28.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack28.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack28.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack28.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_28 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_28 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_28 or SetU_28 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_28 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_28 --"}, {"sha": "b4e14cd10cca0d21d53ac9331feb57b43e3d3826", "filename": "gcc/ada/s-pack29.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack29.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack29.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack29.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_29 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_29 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_29 --"}, {"sha": "331aeb7da9ca9ad2d0a32f9f011d4a322490b376", "filename": "gcc/ada/s-pack30.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack30.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack30.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack30.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_30 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_30 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_30 or SetU_30 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_30 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_30 --"}, {"sha": "9e18c4365ef5819065a4a8da837ec0e1b7404337", "filename": "gcc/ada/s-pack31.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack31.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack31.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack31.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_31 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_31 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_31 --"}, {"sha": "be061775a3fdd151cc7c98bb78074be5e7677311", "filename": "gcc/ada/s-pack33.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack33.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack33.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack33.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_33 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_33 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_33 --"}, {"sha": "0ba3dcb79288b28e7d21aa525231360312e55c37", "filename": "gcc/ada/s-pack34.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack34.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack34.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack34.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_34 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_34 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_34 or SetU_34 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_34 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_34 --"}, {"sha": "ebeb80125ad7d9d54cf7aedf291efb519d5284a7", "filename": "gcc/ada/s-pack35.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack35.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack35.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack35.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_35 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_35 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_35 --"}, {"sha": "2d8796dce09c11578d611b1e5c95bf95415290ea", "filename": "gcc/ada/s-pack36.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack36.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack36.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack36.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_36 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_36 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_36 or SetU_36 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_36 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_36 --"}, {"sha": "dfbce2a47fec17cecaa1f16aa239e91b0cca037e", "filename": "gcc/ada/s-pack37.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack37.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack37.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack37.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_37 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_37 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_37 --"}, {"sha": "00c136177934bea484a2e48703f7cf1ac0320a51", "filename": "gcc/ada/s-pack38.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack38.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack38.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack38.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_38 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_38 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_38 or SetU_38 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_38 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_38 --"}, {"sha": "76b72da6736cab9ebaae7cff16f9ed0c5181dc05", "filename": "gcc/ada/s-pack39.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack39.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack39.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack39.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_39 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_39 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_39 --"}, {"sha": "e56eeaa774e3baeba39becd347678034da88001d", "filename": "gcc/ada/s-pack40.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack40.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack40.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack40.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_40 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_40 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_40 or SetU_40 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_40 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_40 --"}, {"sha": "6c605adaea2f20f386721c325fd6df2f7e87aad3", "filename": "gcc/ada/s-pack41.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack41.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack41.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack41.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_41 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_41 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_41 --"}, {"sha": "aafd43f3443f3b0a49f445738ae3d5b074f63560", "filename": "gcc/ada/s-pack42.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack42.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack42.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack42.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_42 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_42 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_42 or SetU_42 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_42 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_42 --"}, {"sha": "5cf7cc359acfa5d07f53586c6dcd3f59d4a9a44f", "filename": "gcc/ada/s-pack43.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack43.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack43.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack43.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_43 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_43 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_43 --"}, {"sha": "6c8c0ae8db5ca0e3e342c8d06a0daa2ea8034e0f", "filename": "gcc/ada/s-pack44.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack44.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack44.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack44.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_44 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_44 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_44 or SetU_44 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_44 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_44 --"}, {"sha": "b5b61afb6d14675da4b633807888a4603c80a87e", "filename": "gcc/ada/s-pack45.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack45.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack45.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack45.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_45 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_45 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_45 --"}, {"sha": "7b3bab8a56bd5832c45eb1afe3913ed82888dbc6", "filename": "gcc/ada/s-pack46.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack46.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack46.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack46.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_46 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_46 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_46 or SetU_46 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_46 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_46 --"}, {"sha": "6c6682e3590caa0546a339fafd57527afedb134e", "filename": "gcc/ada/s-pack47.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack47.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack47.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack47.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_47 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_47 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_47 --"}, {"sha": "42d1b98a7795ad11862b41e59c28b8f02aacccf9", "filename": "gcc/ada/s-pack48.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack48.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack48.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack48.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_48 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_48 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_48 or SetU_48 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_48 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_48 --"}, {"sha": "6797e2660dab21993c1121cdb2fe5f3281793b15", "filename": "gcc/ada/s-pack49.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack49.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack49.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack49.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_49 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_49 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_49 --"}, {"sha": "4aa80a6eaaa876f46fcb5268c70288a89f475ff4", "filename": "gcc/ada/s-pack50.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack50.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack50.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack50.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_50 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_50 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_50 or SetU_50 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_50 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_50 --"}, {"sha": "c6d4ea74f5d869abb7aec624da838b608660090f", "filename": "gcc/ada/s-pack51.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack51.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack51.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack51.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_51 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_51 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_51 --"}, {"sha": "caa7da14281f1959e04be6d0d08f70f20d261111", "filename": "gcc/ada/s-pack52.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack52.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack52.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack52.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_52 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_52 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_52 or SetU_52 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_52 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_52 --"}, {"sha": "4fbdf3b189c1a2f2202eea22e799603f4d519128", "filename": "gcc/ada/s-pack53.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack53.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack53.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack53.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_53 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_53 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_53 --"}, {"sha": "cb98f4260d42c432c8b76c232382402e94a36eee", "filename": "gcc/ada/s-pack54.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack54.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack54.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack54.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_54 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_54 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_54 or SetU_54 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_54 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_54 --"}, {"sha": "18b6491f27c407c258235236a3ac625004817768", "filename": "gcc/ada/s-pack55.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack55.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack55.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack55.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_55 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_55 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_55 --"}, {"sha": "c168c86b8e4f6e8344364effb80cb9265c9d6aa4", "filename": "gcc/ada/s-pack56.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack56.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack56.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack56.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_56 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_56 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_56 or SetU_56 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_56 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_56 --"}, {"sha": "964d09241a6926c2d4b1c15dd9612155ea9f9d22", "filename": "gcc/ada/s-pack57.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack57.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack57.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack57.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_57 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_57 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_57 --"}, {"sha": "e187374b240c5097e9631f118d7221935b3e7529", "filename": "gcc/ada/s-pack58.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack58.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack58.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack58.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_58 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_58 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_58 or SetU_58 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_58 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_58 --"}, {"sha": "c331d40a306a7a9f596a684b6560cad0aa898a9b", "filename": "gcc/ada/s-pack59.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack59.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack59.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack59.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_59 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_59 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_59 --"}, {"sha": "b1668e2af8dd92c2bc472dae199109349ac8728d", "filename": "gcc/ada/s-pack60.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack60.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack60.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack60.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_60 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_60 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_60 or SetU_60 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_60 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_60 --"}, {"sha": "4a5585d90649d90722502cb9af6033112cbaaf75", "filename": "gcc/ada/s-pack61.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack61.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack61.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack61.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_61 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_61 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_61 --"}, {"sha": "0cec3d3737ed00c27c8a25409e64ebb7ac6c3f36", "filename": "gcc/ada/s-pack62.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack62.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack62.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack62.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_62 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_62 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    --  The following declarations are for the case where the address\n    --  passed to GetU_62 or SetU_62 is not guaranteed to be aligned.\n@@ -84,7 +84,7 @@ package body System.Pack_62 is\n    type ClusterU_Ref is access ClusterU;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+     Ada.Unchecked_Conversion (System.Address, ClusterU_Ref);\n \n    ------------\n    -- Get_62 --"}, {"sha": "7604a510f518081da2b4889fd33a25036e9ef122", "filename": "gcc/ada/s-pack63.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack63.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pack63.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack63.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Storage_Elements;\n with System.Unsigned_Types;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pack_63 is\n \n@@ -71,7 +71,7 @@ package body System.Pack_63 is\n    type Cluster_Ref is access Cluster;\n \n    function To_Ref is new\n-     Unchecked_Conversion (System.Address, Cluster_Ref);\n+     Ada.Unchecked_Conversion (System.Address, Cluster_Ref);\n \n    ------------\n    -- Get_63 --"}, {"sha": "372a482fccdedd3e1027c8b998043b867315c26b", "filename": "gcc/ada/s-pooloc.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pooloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-pooloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooloc.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Memory;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pool_Local is\n \n@@ -44,7 +44,8 @@ package body System.Pool_Local is\n    Pointers_Size : constant SSE.Storage_Offset := 2 * Pointer_Size;\n \n    type Acc_Address is access all Address;\n-   function To_Acc_Address is new Unchecked_Conversion (Address, Acc_Address);\n+   function To_Acc_Address is\n+     new Ada.Unchecked_Conversion (Address, Acc_Address);\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "278b935e17fabf64f0c96488253d8cfd3a4475cb", "filename": "gcc/ada/s-poosiz.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-poosiz.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-poosiz.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-poosiz.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with System.Soft_Links;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Pool_Size is\n \n@@ -52,7 +52,7 @@ package body System.Pool_Size is\n \n    type Storage_Count_Access is access SSE.Storage_Count;\n    function To_Storage_Count_Access is\n-     new Unchecked_Conversion (Address, Storage_Count_Access);\n+     new Ada.Unchecked_Conversion (Address, Storage_Count_Access);\n \n    SC_Size : constant :=  SSE.Storage_Count'Object_Size / System.Storage_Unit;\n "}, {"sha": "7e386a0375eb1958bc9a318b4938ba9131f00c29", "filename": "gcc/ada/s-scaval.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-scaval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-scaval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-scaval.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Scalar_Values is\n \n@@ -74,7 +74,7 @@ package body System.Scalar_Values is\n       --  values that are then converted to ByteLF.\n \n       pragma Warnings (Off);\n-      function To_ByteLF is new Unchecked_Conversion (Byte8, ByteLF);\n+      function To_ByteLF is new Ada.Unchecked_Conversion (Byte8, ByteLF);\n       pragma Warnings (On);\n \n       type ByteLLF is\n@@ -320,8 +320,9 @@ package body System.Scalar_Values is\n \n       if not EFloat then\n          declare\n-            pragma Warnings (Off);\n-            function To_ByteLLF is new Unchecked_Conversion (ByteLF, ByteLLF);\n+            pragma Warnings (Off);  -- why???\n+            function To_ByteLLF is\n+              new Ada.Unchecked_Conversion (ByteLF, ByteLLF);\n             pragma Warnings (On);\n          begin\n             IV_Ill := To_ByteLLF (IV_Ilf);"}, {"sha": "6acb22dc25132c7122ddb6afaa563decf350d80b", "filename": "gcc/ada/s-sequio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sequio.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,7 @@\n ------------------------------------------------------------------------------\n \n with System.File_IO;\n-with Unchecked_Deallocation;\n+with Ada.Unchecked_Deallocation;\n \n package body System.Sequential_IO is\n \n@@ -77,7 +77,7 @@ package body System.Sequential_IO is\n       FT : FCB_Ptr := FCB_Ptr (File);\n \n       procedure Free is new\n-        Unchecked_Deallocation (Sequential_AFCB, FCB_Ptr);\n+        Ada.Unchecked_Deallocation (Sequential_AFCB, FCB_Ptr);\n \n    begin\n       Free (FT);"}, {"sha": "85e47eda4282c47292e53175b1b5fae0e9531ca0", "filename": "gcc/ada/s-shasto.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-shasto.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-shasto.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,8 +43,8 @@ with System.File_Control_Block;\n with System.File_IO;\n with System.HTable;\n \n-with Unchecked_Deallocation;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Deallocation;\n+with Ada.Unchecked_Conversion;\n \n package body System.Shared_Storage is\n \n@@ -57,7 +57,7 @@ package body System.Shared_Storage is\n    package SFI renames System.File_IO;\n \n    type String_Access is access String;\n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Object => String, Name => String_Access);\n \n    Dir : String_Access;\n@@ -106,16 +106,16 @@ package body System.Shared_Storage is\n       --  Links for LRU chain\n    end record;\n \n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Object => Shared_Var_File_Entry,\n       Name   => Shared_Var_File_Entry_Ptr);\n \n-   procedure Free is new Unchecked_Deallocation\n+   procedure Free is new Ada.Unchecked_Deallocation\n      (Object => File_Stream_Type'Class,\n       Name   => File_Stream_Access);\n \n    function To_AFCB_Ptr is\n-     new Unchecked_Conversion (SIO.File_Type, FCB.AFCB_Ptr);\n+     new Ada.Unchecked_Conversion (SIO.File_Type, FCB.AFCB_Ptr);\n \n    LRU_Head : Shared_Var_File_Entry_Ptr;\n    LRU_Tail : Shared_Var_File_Entry_Ptr;"}, {"sha": "c52083bdd74af0706157c4f26181491aad99de26", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,7 @@ pragma Polling (Off);\n --  elaboration circularities with Ada.Exceptions if polling is on.\n \n with System;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Standard_Library is\n    pragma Warnings (Off);\n@@ -62,7 +62,7 @@ package System.Standard_Library is\n    --  A non-fat pointer type for null terminated strings\n \n    function To_Ptr is\n-     new Unchecked_Conversion (System.Address, Big_String_Ptr);\n+     new Ada.Unchecked_Conversion (System.Address, Big_String_Ptr);\n \n    ---------------------------------------------\n    -- Type For Enumeration Image Index Tables --"}, {"sha": "ebfd22cf3e0baee9837c82b875ec62e32e816e7f", "filename": "gcc/ada/s-stratt.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stratt.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n with Ada.IO_Exceptions;\n with Ada.Streams; use Ada.Streams;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Stream_Attributes is\n \n@@ -47,7 +47,7 @@ package body System.Stream_Attributes is\n    subtype SEA is Ada.Streams.Stream_Element_Array;\n    subtype SEO is Ada.Streams.Stream_Element_Offset;\n \n-   generic function UC renames Unchecked_Conversion;\n+   generic function UC renames Ada.Unchecked_Conversion;\n \n    --  Subtypes used to define Stream_Element_Array values that map\n    --  into the elementary types, using unchecked conversion."}, {"sha": "d729bd16f6a46a6bd46faa96cc06d65d7dc90a9d", "filename": "gcc/ada/s-strcom.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-strcom.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-strcom.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strcom.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.String_Compare is\n \n@@ -50,10 +50,10 @@ package body System.String_Compare is\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new\n-     Unchecked_Conversion (System.Address, Big_Words_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Words_Ptr);\n \n    function To_Big_Bytes is new\n-     Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n+     Ada.Unchecked_Conversion (System.Address, Big_Bytes_Ptr);\n \n    -----------------\n    -- Str_Compare --"}, {"sha": "f9bcabeeef128cce6104fc81537b576658aeedaa", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,7 +74,7 @@ with System.Parameters;\n with System.Traces.Tasking;\n --  used for Send_Trace_Info\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Tasking.Async_Delays is\n \n@@ -88,7 +88,7 @@ package body System.Tasking.Async_Delays is\n    use System.Traces;\n    use System.Traces.Tasking;\n \n-   function To_System is new Unchecked_Conversion\n+   function To_System is new Ada.Unchecked_Conversion\n      (Ada.Task_Identification.Task_Id, Task_Id);\n \n    Timer_Server_ID : ST.Task_Id;"}, {"sha": "8d6ffdf04aa216faa07c6095a79826a2ce0103b2", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,14 +41,14 @@\n \n with System.CRTL;\n with System.Task_Primitives.Operations;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Tasking.Debug is\n \n    package STPO renames System.Task_Primitives.Operations;\n \n    function To_Integer is new\n-     Unchecked_Conversion (Task_Id, System.Address);\n+     Ada.Unchecked_Conversion (Task_Id, System.Address);\n \n    type Trace_Flag_Set is array (Character) of Boolean;\n "}, {"sha": "3f4772bfc01ae865b411d6d798b2d276068b9910", "filename": "gcc/ada/s-taspri-solaris.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-taspri-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-taspri-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-solaris.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ with System.OS_Interface;\n --           cond_t\n --           thread_t\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Task_Primitives is\n    pragma Preelaborate;\n@@ -59,7 +59,8 @@ package System.Task_Primitives is\n    --  and the RTS_Lock is that the later one serves only as a semaphore so\n    --  that do not check for ceiling violations.\n \n-   function To_Lock_Ptr is new Unchecked_Conversion (RTS_Lock_Ptr, Lock_Ptr);\n+   function To_Lock_Ptr is\n+     new Ada.Unchecked_Conversion (RTS_Lock_Ptr, Lock_Ptr);\n \n    type Suspension_Object is limited private;\n    --  Should be used for the implementation of Ada.Synchronous_Task_Control\n@@ -86,7 +87,7 @@ private\n    type Owner_ID is access all Owner_Int;\n \n    function To_Owner_ID is\n-     new Unchecked_Conversion (System.Address, Owner_ID);\n+     new Ada.Unchecked_Conversion (System.Address, Owner_ID);\n \n    type Lock is record\n       L              : aliased Base_Lock;"}, {"sha": "286b5a0d70ca50a38958e2957fa9f044dbb336f3", "filename": "gcc/ada/s-tasuti.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tasuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tasuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,12 +34,12 @@\n --  This package provides RTS Internal Declarations.\n --  These declarations are not part of the GNARLI\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Tasking.Utilities is\n \n    function ATCB_To_Address is new\n-     Unchecked_Conversion (Task_Id, System.Address);\n+     Ada.Unchecked_Conversion (Task_Id, System.Address);\n \n    ---------------------------------\n    -- Task_Stage Related routines --"}, {"sha": "bcf3f0d4c18fccc64d154f69cf910cd13100449b", "filename": "gcc/ada/s-tataat.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tataat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tataat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2007, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,7 +50,7 @@ package System.Tasking.Task_Attributes is\n    type Access_Node is access all Node;\n    --  This needs comments ???\n \n-   function To_Access_Node is new Unchecked_Conversion\n+   function To_Access_Node is new Ada.Unchecked_Conversion\n      (Access_Address, Access_Node);\n    --  Used to fetch pointer to indirect attribute list. Declaration is in\n    --  spec to avoid any problems with aliasing assumptions."}, {"sha": "d1cc4e7d6f325a4d25dbbf15349b5dce99a80a96", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,7 +46,7 @@\n with Ada.Finalization;\n --  used for Limited_Controlled\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package System.Tasking.Protected_Objects.Entries is\n    pragma Elaborate_Body;\n@@ -148,9 +148,9 @@ package System.Tasking.Protected_Objects.Entries is\n    --  generated by this declaration.\n \n    function To_Address is\n-     new Unchecked_Conversion (Protection_Entries_Access, System.Address);\n+     new Ada.Unchecked_Conversion (Protection_Entries_Access, System.Address);\n    function To_Protection is\n-     new Unchecked_Conversion (System.Address, Protection_Entries_Access);\n+     new Ada.Unchecked_Conversion (System.Address, Protection_Entries_Access);\n \n    function Get_Ceiling\n      (Object : Protection_Entries_Access) return System.Any_Priority;\n@@ -181,7 +181,8 @@ package System.Tasking.Protected_Objects.Entries is\n    --  ceiling violation.\n \n    procedure Lock_Entries\n-     (Object : Protection_Entries_Access; Ceiling_Violation : out Boolean);\n+     (Object            : Protection_Entries_Access;\n+      Ceiling_Violation : out Boolean);\n    --  Same as above, but return the ceiling violation status instead of\n    --  raising Program_Error.\n "}, {"sha": "b26b274a39a72d84614a9b0b6e4e979f9e72fb15", "filename": "gcc/ada/s-tpopde-vms.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tpopde-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-tpopde-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopde-vms.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 2000-2005 Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@\n with System.OS_Interface;\n with System.Parameters;\n with System.Tasking;\n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n with System.Soft_Links;\n \n package body System.Task_Primitives.Operations.DEC is\n@@ -74,15 +74,15 @@ package body System.Task_Primitives.Operations.DEC is\n    --  Task_Id is 64 bits wide (but only 32 bits significant) on Integrity/VMS\n \n    function To_Unsigned_Longword is new\n-     Unchecked_Conversion (Task_Id, Unsigned_Longword);\n+     Ada.Unchecked_Conversion (Task_Id, Unsigned_Longword);\n \n    function To_Task_Id is new\n-     Unchecked_Conversion (Unsigned_Longword, Task_Id);\n+     Ada.Unchecked_Conversion (Unsigned_Longword, Task_Id);\n \n    pragma Warnings (On);\n \n    function To_FAB_RAB is new\n-     Unchecked_Conversion (Address, FAB_RAB_Access_Type);\n+     Ada.Unchecked_Conversion (Address, FAB_RAB_Access_Type);\n \n    ---------------------------\n    -- Interrupt_AST_Handler --"}, {"sha": "e93bdcc709d789c5622e302655bafd1e43b7ef39", "filename": "gcc/ada/s-valenu.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-valenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-valenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valenu.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2000, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n with System.Val_Util; use System.Val_Util;\n \n package body System.Val_Enum is\n@@ -56,7 +56,7 @@ package body System.Val_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -95,7 +95,7 @@ package body System.Val_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -134,7 +134,7 @@ package body System.Val_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n "}, {"sha": "e25865b9ecb45c55bd7f447094807c06fd2480ae", "filename": "gcc/ada/s-widenu.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-widenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-widenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-widenu.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.Wid_Enum is\n \n@@ -54,7 +54,7 @@ package body System.Wid_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -87,7 +87,7 @@ package body System.Wid_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -120,7 +120,7 @@ package body System.Wid_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n "}, {"sha": "f79b62b2524c3ee3236bb149a50cce8f21c54210", "filename": "gcc/ada/s-wwdenu.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-wwdenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecaf88a61b4a50d074990c29afb8cb1792b727e/gcc%2Fada%2Fs-wwdenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wwdenu.adb?ref=cecaf88a61b4a50d074990c29afb8cb1792b727e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,7 +34,7 @@\n with System.WCh_StW; use System.WCh_StW;\n with System.WCh_Con; use System.WCh_Con;\n \n-with Unchecked_Conversion;\n+with Ada.Unchecked_Conversion;\n \n package body System.WWd_Enum is\n \n@@ -55,7 +55,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -92,7 +92,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -129,7 +129,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -166,7 +166,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -203,7 +203,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n \n@@ -240,7 +240,7 @@ package body System.WWd_Enum is\n       type Index_Table_Ptr is access Index_Table;\n \n       function To_Index_Table_Ptr is\n-        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+        new Ada.Unchecked_Conversion (System.Address, Index_Table_Ptr);\n \n       IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n "}]}