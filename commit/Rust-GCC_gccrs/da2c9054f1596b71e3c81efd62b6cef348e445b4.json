{"sha": "da2c9054f1596b71e3c81efd62b6cef348e445b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEyYzkwNTRmMTU5NmI3MWUzYzgxZWZkNjJiNmNlZjM0OGU0NDViNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-16T04:20:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-17T19:08:42Z"}, "message": "c++: Treat in-class default/delete as definitions.\n\nWe were complaining about a constrained defaulted non-template friend in a\ntemplate class because funcdef_flag wasn't set.  grokdeclarator would set it\nfor default/delete, but grokfield wasn't passing the 'initialized' values\nneeded.  Fixing that revealed some errors in existing tests that we weren't\ndiagnosing.  Since we accepted them for so long, I'm reducing the error to a\npedwarn to ease compiler upgrade.\n\ngcc/cp/ChangeLog:\n\n\t* decl2.c (grokfield): Pass SD_DEFAULTED and SD_DELETED.\n\t* decl.c (duplicate_decls): Reduce error for delete\n\tafter earlier declaration to pedwarn.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/pr62101.C: Expect error.\n\t* g++.dg/cpp0x/pr80259.C: Expect error.\n\t* g++.dg/cpp2a/concepts-friend8.C: New test.", "tree": {"sha": "59b9bf926db8129c48e0f022ac5217fd6e932596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b9bf926db8129c48e0f022ac5217fd6e932596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da2c9054f1596b71e3c81efd62b6cef348e445b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2c9054f1596b71e3c81efd62b6cef348e445b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2c9054f1596b71e3c81efd62b6cef348e445b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2c9054f1596b71e3c81efd62b6cef348e445b4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2384b7b24f8557b66f6958a05ea99ff4307e75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2384b7b24f8557b66f6958a05ea99ff4307e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2384b7b24f8557b66f6958a05ea99ff4307e75c"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "1d960be1ee688238c063528cae71f73915b90c9f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=da2c9054f1596b71e3c81efd62b6cef348e445b4", "patch": "@@ -2067,13 +2067,19 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t    \"previous declaration of %qD\", olddecl);\n \t}\n \n+      /* [dcl.fct.def.delete] A deleted definition of a function shall be the\n+\t first declaration of the function or, for an explicit specialization\n+\t of a function template, the first declaration of that\n+\t specialization.  */\n       if (!(DECL_TEMPLATE_INSTANTIATION (olddecl)\n \t    && DECL_TEMPLATE_SPECIALIZATION (newdecl)))\n \t{\n \t  if (DECL_DELETED_FN (newdecl))\n \t    {\n \t      auto_diagnostic_group d;\n-\t      error_at (newdecl_loc, \"deleted definition of %qD\", newdecl);\n+\t      pedwarn (newdecl_loc, OPT_Wpedantic,\n+\t\t       \"deleted definition of %qD is not first declaration\",\n+\t\t       newdecl);\n \t      inform (olddecl_loc,\n \t\t      \"previous declaration of %qD\", olddecl);\n \t    }"}, {"sha": "93e3034045404b5453805957f45214d4151bb061", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=da2c9054f1596b71e3c81efd62b6cef348e445b4", "patch": "@@ -838,7 +838,17 @@ grokfield (const cp_declarator *declarator,\n       && TREE_CHAIN (init) == NULL_TREE)\n     init = NULL_TREE;\n \n-  value = grokdeclarator (declarator, declspecs, FIELD, init != 0, &attrlist);\n+  int initialized;\n+  if (init == ridpointers[(int)RID_DELETE])\n+    initialized = SD_DELETED;\n+  else if (init == ridpointers[(int)RID_DEFAULT])\n+    initialized = SD_DEFAULTED;\n+  else if (init)\n+    initialized = SD_INITIALIZED;\n+  else\n+    initialized = SD_UNINITIALIZED;\n+\n+  value = grokdeclarator (declarator, declspecs, FIELD, initialized, &attrlist);\n   if (! value || value == error_mark_node)\n     /* friend or constructor went bad.  */\n     return error_mark_node;\n@@ -916,18 +926,8 @@ grokfield (const cp_declarator *declarator,\n \t{\n \t  if (init == ridpointers[(int)RID_DELETE])\n \t    {\n-\t      if (friendp && decl_defined_p (value))\n-\t\t{\n-\t\t  error (\"redefinition of %q#D\", value);\n-\t\t  inform (DECL_SOURCE_LOCATION (value),\n-\t\t\t  \"%q#D previously defined here\", value);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  DECL_DELETED_FN (value) = 1;\n-\t\t  DECL_DECLARED_INLINE_P (value) = 1;\n-\t\t  DECL_INITIAL (value) = error_mark_node;\n-\t\t}\n+\t      DECL_DELETED_FN (value) = 1;\n+\t      DECL_DECLARED_INLINE_P (value) = 1;\n \t    }\n \t  else if (init == ridpointers[(int)RID_DEFAULT])\n \t    {\n@@ -936,6 +936,9 @@ grokfield (const cp_declarator *declarator,\n \t\t  DECL_DEFAULTED_FN (value) = 1;\n \t\t  DECL_INITIALIZED_IN_CLASS_P (value) = 1;\n \t\t  DECL_DECLARED_INLINE_P (value) = 1;\n+\t\t  /* grokfndecl set this to error_mark_node, but we want to\n+\t\t     leave it unset until synthesize_method.  */\n+\t\t  DECL_INITIAL (value) = NULL_TREE;\n \t\t}\n \t    }\n \t  else if (TREE_CODE (init) == DEFERRED_PARSE)"}, {"sha": "07ab1b76fbc02499d55b7831a2e5421c52aa63a6", "filename": "gcc/testsuite/g++.dg/cpp0x/pr62101.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr62101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr62101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr62101.C?ref=da2c9054f1596b71e3c81efd62b6cef348e445b4", "patch": "@@ -17,7 +17,7 @@ void g(Y, double);\n struct Y\n {\n   // { dg-prune-output \"note\" }\n-  friend void g(Y, int) = delete;\n+  friend void g(Y, int) = delete; // { dg-error \"not first declaration\" }\n   friend void g(Y, double) {}\n };\n "}, {"sha": "adb354b4ee82c154afeb28250951a39e21718b54", "filename": "gcc/testsuite/g++.dg/cpp0x/pr80259.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr80259.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr80259.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr80259.C?ref=da2c9054f1596b71e3c81efd62b6cef348e445b4", "patch": "@@ -7,7 +7,7 @@ void bar ();\n struct A\n {\n   friend void foo () = delete;\t// { dg-error \"redefinition of\" }\n-  friend void bar () = delete;\t// { dg-message \"previously defined here\" }\n+  friend void bar () = delete;\t// { dg-error \"not first declaration\" }\n };\n \n void bar () {}\t// { dg-error \"redefinition of\" }"}, {"sha": "e4930bbf80c183db14223ffb4875c6221d1f97fd", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend8.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2c9054f1596b71e3c81efd62b6cef348e445b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend8.C?ref=da2c9054f1596b71e3c81efd62b6cef348e445b4", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++20 } }\n+\n+template <class T>\n+struct A\n+{\n+  friend bool operator==(const A&, const A&) requires true = default;\n+};\n+\n+int main()\n+{\n+  A<int>() == A<int>();\n+}"}]}