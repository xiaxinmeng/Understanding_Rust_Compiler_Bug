{"sha": "65074f54c54e765f5e66ecee17c4ad16f66c3780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwNzRmNTRjNTRlNzY1ZjVlNjZlY2VlMTdjNGFkMTZmNjZjMzc4MA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2013-03-21T14:26:23Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-03-21T14:26:23Z"}, "message": "[ARM] Turning off 64bits ops in Neon\n\n2013-03-21  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm-protos.h (tune_params): Add\n\tprefer_neon_for_64bits field.\n\t* config/arm/arm.c (prefer_neon_for_64bits): New variable.\n\t(arm_slowmul_tune): Default prefer_neon_for_64bits to false.\n\t(arm_fastmul_tune, arm_strongarm_tune, arm_xscale_tune): Ditto.\n\t(arm_9e_tune, arm_v6t2_tune, arm_cortex_tune): Ditto.\n\t(arm_cortex_a15_tune, arm_cortex_a5_tune): Ditto.\n\t(arm_cortex_a9_tune, arm_v6m_tune, arm_fa726te_tune): Ditto.\n\t(arm_option_override): Handle -mneon-for-64bits new option.\n\t* config/arm/arm.h (TARGET_PREFER_NEON_64BITS): New macro.\n\t(prefer_neon_for_64bits): Declare new variable.\n\t* config/arm/arm.md (arch): Rename neon_onlya8 and neon_nota8 to\n\tavoid_neon_for_64bits and neon_for_64bits. Remove onlya8 and\n\tnota8.\n\t(arch_enabled): Handle new arch types. Remove support for onlya8\n\tand nota8.\n\t(one_cmpldi2): Use new arch names.\n\t* config/arm/arm.opt (mneon-for-64bits): Add option.\n\t* config/arm/neon.md (adddi3_neon, subdi3_neon, iordi3_neon)\n\t(anddi3_neon, xordi3_neon, ashldi3_neon, <shift>di3_neon): Use\n\tneon_for_64bits instead of nota8 and avoid_neon_for_64bits instead\n\tof onlya8.\n\t* doc/invoke.texi (-mneon-for-64bits): Document.\n\n\tgcc/testsuite:\n\t* gcc.target/arm/neon-for-64bits-1.c: New tests.\n\t* gcc.target/arm/neon-for-64bits-2.c: Likewise.\n\nFrom-SVN: r196876", "tree": {"sha": "b9768087119317b4802f80b8ca8770053b66d8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9768087119317b4802f80b8ca8770053b66d8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65074f54c54e765f5e66ecee17c4ad16f66c3780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65074f54c54e765f5e66ecee17c4ad16f66c3780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65074f54c54e765f5e66ecee17c4ad16f66c3780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65074f54c54e765f5e66ecee17c4ad16f66c3780/comments", "author": null, "committer": null, "parents": [{"sha": "5a2d2a7900124db247d16cae7a751f4b1f19bce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2d2a7900124db247d16cae7a751f4b1f19bce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2d2a7900124db247d16cae7a751f4b1f19bce4"}], "stats": {"total": 228, "additions": 201, "deletions": 27}, "files": [{"sha": "822e68dd3fd44b26ab0c3e55f820b41d2f5ca682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -1,3 +1,29 @@\n+2013-03-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm-protos.h (tune_params): Add\n+\tprefer_neon_for_64bits field.\n+\t* config/arm/arm.c (prefer_neon_for_64bits): New variable.\n+\t(arm_slowmul_tune): Default prefer_neon_for_64bits to false.\n+\t(arm_fastmul_tune, arm_strongarm_tune, arm_xscale_tune): Ditto.\n+\t(arm_9e_tune, arm_v6t2_tune, arm_cortex_tune): Ditto.\n+\t(arm_cortex_a15_tune, arm_cortex_a5_tune): Ditto.\n+\t(arm_cortex_a9_tune, arm_v6m_tune, arm_fa726te_tune): Ditto.\n+\t(arm_option_override): Handle -mneon-for-64bits new option.\n+\t* config/arm/arm.h (TARGET_PREFER_NEON_64BITS): New macro.\n+\t(prefer_neon_for_64bits): Declare new variable.\n+\t* config/arm/arm.md (arch): Rename neon_onlya8 and neon_nota8 to\n+\tavoid_neon_for_64bits and neon_for_64bits. Remove onlya8 and\n+\tnota8.\n+\t(arch_enabled): Handle new arch types. Remove support for onlya8\n+\tand nota8.\n+\t(one_cmpldi2): Use new arch names.\n+\t* config/arm/arm.opt (mneon-for-64bits): Add option.\n+\t* config/arm/neon.md (adddi3_neon, subdi3_neon, iordi3_neon)\n+\t(anddi3_neon, xordi3_neon, ashldi3_neon, <shift>di3_neon): Use\n+\tneon_for_64bits instead of nota8 and avoid_neon_for_64bits instead\n+\tof onlya8.\n+\t* doc/invoke.texi (-mneon-for-64bits): Document.\n+\n 2013-03-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/39326"}, {"sha": "694aa2802ae553328633b64cf738734106d5ce17", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -269,6 +269,8 @@ struct tune_params\n   bool logical_op_non_short_circuit[2];\n   /* Vectorizer costs.  */\n   const struct cpu_vec_costs* vec_costs;\n+  /* Prefer Neon for 64-bit bitops.  */\n+  bool prefer_neon_for_64bits;\n };\n \n extern const struct tune_params *current_tune;"}, {"sha": "0c48d6ee49c0c3d4f6bf723659970cdfba947318", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -839,6 +839,10 @@ int arm_arch_thumb2;\n int arm_arch_arm_hwdiv;\n int arm_arch_thumb_hwdiv;\n \n+/* Nonzero if we should use Neon to handle 64-bits operations rather\n+   than core registers.  */\n+int prefer_neon_for_64bits = 0;\n+\n /* In case of a PRE_INC, POST_INC, PRE_DEC, POST_DEC memory reference,\n    we must report the mode of the memory reference from\n    TARGET_PRINT_OPERAND to TARGET_PRINT_OPERAND_ADDRESS.  */\n@@ -936,6 +940,7 @@ const struct tune_params arm_slowmul_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_fastmul_tune =\n@@ -950,6 +955,7 @@ const struct tune_params arm_fastmul_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n /* StrongARM has early execution of branches, so a sequence that is worth\n@@ -967,6 +973,7 @@ const struct tune_params arm_strongarm_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_xscale_tune =\n@@ -981,6 +988,7 @@ const struct tune_params arm_xscale_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_9e_tune =\n@@ -995,6 +1003,7 @@ const struct tune_params arm_9e_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_v6t2_tune =\n@@ -1009,6 +1018,7 @@ const struct tune_params arm_v6t2_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n /* Generic Cortex tuning.  Use more specific tunings if appropriate.  */\n@@ -1024,6 +1034,7 @@ const struct tune_params arm_cortex_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_cortex_a15_tune =\n@@ -1038,6 +1049,7 @@ const struct tune_params arm_cortex_a15_tune =\n   true,\t\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n@@ -1055,6 +1067,7 @@ const struct tune_params arm_cortex_a5_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {false, false},\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_cortex_a9_tune =\n@@ -1069,6 +1082,7 @@ const struct tune_params arm_cortex_a9_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n /* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n@@ -1085,6 +1099,7 @@ const struct tune_params arm_v6m_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {false, false},\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n const struct tune_params arm_fa726te_tune =\n@@ -1099,6 +1114,7 @@ const struct tune_params arm_fa726te_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n+  false                                         /* Prefer Neon for 64-bits bitops.  */\n };\n \n \n@@ -2129,6 +2145,12 @@ arm_option_override (void)\n                            global_options.x_param_values,\n                            global_options_set.x_param_values);\n \n+  /* Use Neon to perform 64-bits operations rather than core\n+     registers.  */\n+  prefer_neon_for_64bits = current_tune->prefer_neon_for_64bits;\n+  if (use_neon_for_64bits == 1)\n+     prefer_neon_for_64bits = true;\n+\n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, 2,\n                          global_options.x_param_values,"}, {"sha": "04bff13368eda2a6f8ba582838f11c75e12fa868", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -354,6 +354,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_IDIV\t\t((TARGET_ARM && arm_arch_arm_hwdiv) \\\n \t\t\t\t || (TARGET_THUMB2 && arm_arch_thumb_hwdiv))\n \n+/* Should NEON be used for 64-bits bitops.  */\n+#define TARGET_PREFER_NEON_64BITS (prefer_neon_for_64bits)\n+\n /* True iff the full BPABI is being used.  If TARGET_BPABI is true,\n    then TARGET_AAPCS_BASED must be true -- but the converse does not\n    hold.  TARGET_BPABI implies the use of the BPABI runtime library,\n@@ -539,6 +542,10 @@ extern int arm_arch_arm_hwdiv;\n /* Nonzero if chip supports integer division instruction in Thumb mode.  */\n extern int arm_arch_thumb_hwdiv;\n \n+/* Nonzero if we should use Neon to handle 64-bits operations rather\n+   than core registers.  */\n+extern int prefer_neon_for_64bits;\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "d48bc8c01239b3c8c8e470b9220727535310cc14", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -94,7 +94,7 @@\n ; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n ; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n ; use type \"any\" to enable an alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,onlya8,neon_onlya8,nota8,neon_nota8,iwmmxt,iwmmxt2\"\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -129,22 +129,14 @@\n \t      (match_test \"TARGET_32BIT && !arm_arch6\"))\n \t (const_string \"yes\")\n \n-\t (and (eq_attr \"arch\" \"onlya8\")\n-\t      (eq_attr \"tune\" \"cortexa8\"))\n+\t (and (eq_attr \"arch\" \"avoid_neon_for_64bits\")\n+\t      (match_test \"TARGET_NEON\")\n+\t      (not (match_test \"TARGET_PREFER_NEON_64BITS\")))\n \t (const_string \"yes\")\n \n-\t (and (eq_attr \"arch\" \"neon_onlya8\")\n-\t      (eq_attr \"tune\" \"cortexa8\")\n-\t      (match_test \"TARGET_NEON\"))\n-\t (const_string \"yes\")\n-\n-\t (and (eq_attr \"arch\" \"nota8\")\n-\t      (not (eq_attr \"tune\" \"cortexa8\")))\n-\t (const_string \"yes\")\n-\n-\t (and (eq_attr \"arch\" \"neon_nota8\")\n-\t      (not (eq_attr \"tune\" \"cortexa8\"))\n-\t      (match_test \"TARGET_NEON\"))\n+\t (and (eq_attr \"arch\" \"neon_for_64bits\")\n+\t      (match_test \"TARGET_NEON\")\n+\t      (match_test \"TARGET_PREFER_NEON_64BITS\"))\n \t (const_string \"yes\")\n \n \t (and (eq_attr \"arch\" \"iwmmxt2\")\n@@ -4330,7 +4322,7 @@\n   [(set_attr \"length\" \"*,8,8,*\")\n    (set_attr \"predicable\" \"no,yes,yes,no\")\n    (set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n-   (set_attr \"arch\" \"neon_nota8,*,*,neon_onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits\")]\n )\n \n (define_expand \"one_cmplsi2\"\n@@ -4498,7 +4490,7 @@\n   \"TARGET_32BIT <qhs_zextenddi_cond>\"\n   \"#\"\n   [(set_attr \"length\" \"8,4,8,8\")\n-   (set_attr \"arch\" \"neon_nota8,*,*,neon_onlya8\")\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -4513,7 +4505,7 @@\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"neon_nota8,*,a,t,neon_onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,a,t,avoid_neon_for_64bits\")]\n )\n \n ;; Splits for all extensions to DImode"}, {"sha": "afb42421c0656b924592b8c9d4a7401e0fc45c4a", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -247,3 +247,7 @@ that may trigger Cortex-M3 errata.\n munaligned-access\n Target Report Var(unaligned_access) Init(2)\n Enable unaligned word and halfword accesses to packed data.\n+\n+mneon-for-64bits\n+Target Report RejectNegative Var(use_neon_for_64bits) Init(0)\n+Use Neon to perform 64-bits operations rather than core registers."}, {"sha": "153475202d6dd6e124fe59036144350cab6eabe8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -487,7 +487,7 @@\n   [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1,*,*,*\")\n    (set_attr \"conds\" \"*,clob,clob,*,clob,clob,clob\")\n    (set_attr \"length\" \"*,8,8,*,8,8,8\")\n-   (set_attr \"arch\" \"nota8,*,*,onlya8,*,*,*\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits,*,*,*\")]\n )\n \n (define_insn \"*sub<mode>3_neon\"\n@@ -524,7 +524,7 @@\n   [(set_attr \"neon_type\" \"neon_int_2,*,*,*,neon_int_2\")\n    (set_attr \"conds\" \"*,clob,clob,clob,*\")\n    (set_attr \"length\" \"*,8,8,8,*\")\n-   (set_attr \"arch\" \"nota8,*,*,*,onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,*,avoid_neon_for_64bits\")]\n )\n \n (define_insn \"*mul<mode>3_neon\"\n@@ -699,7 +699,7 @@\n }\n   [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n    (set_attr \"length\" \"*,*,8,8,*,*\")\n-   (set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n )\n \n ;; The concrete forms of the Neon immediate-logic instructions are vbic and\n@@ -744,7 +744,7 @@\n }\n   [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n    (set_attr \"length\" \"*,*,8,8,*,*\")\n-   (set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n )\n \n (define_insn \"orn<mode>3_neon\"\n@@ -840,7 +840,7 @@\n    veor\\t%P0, %P1, %P2\"\n   [(set_attr \"neon_type\" \"neon_int_1,*,*,neon_int_1\")\n    (set_attr \"length\" \"*,8,8,*\")\n-   (set_attr \"arch\" \"nota8,*,*,onlya8\")]\n+   (set_attr \"arch\" \"neon_for_64bits,*,*,avoid_neon_for_64bits\")]\n )\n \n (define_insn \"one_cmpl<mode>2\"\n@@ -1162,7 +1162,7 @@\n       }\n     DONE;\n   }\"\n-  [(set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")\n+  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n    (set_attr \"opt\" \"*,*,speed,speed,*,*\")]\n )\n \n@@ -1263,7 +1263,7 @@\n \n     DONE;\n   }\"\n-  [(set_attr \"arch\" \"nota8,nota8,*,*,onlya8,onlya8\")\n+  [(set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")\n    (set_attr \"opt\" \"*,*,speed,speed,*,*\")]\n )\n "}, {"sha": "9b8b36a52e3a386dc4cc28d758498d27c30aafe3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -510,7 +510,8 @@ Objective-C and Objective-C++ Dialects}.\n -mtp=@var{name} -mtls-dialect=@var{dialect} @gol\n -mword-relocations @gol\n -mfix-cortex-m3-ldrd @gol\n--munaligned-access}\n+-munaligned-access @gol\n+-mneon-for-64bits}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n@@ -11530,6 +11531,11 @@ setting of this option.  If unaligned access is enabled then the\n preprocessor symbol @code{__ARM_FEATURE_UNALIGNED} will also be\n defined.\n \n+@item -mneon-for-64bits\n+@opindex mneon-for-64bits\n+Enables using Neon to handle scalar 64-bits operations. This is\n+disabled by default since the cost of moving data from core registers\n+to Neon is high.\n @end table\n \n @node AVR Options"}, {"sha": "eaa6bdcf1a7e2059c15bffd91ea51046f9daaea4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -1,3 +1,8 @@\n+2013-03-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/neon-for-64bits-1.c: New tests.\n+\t* gcc.target/arm/neon-for-64bits-2.c: Likewise.\n+\n 2013-03-21  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/vect-outer-3a-big-array.c: Adjust.\n@@ -19,7 +24,6 @@\n 2013-03-20  Jeff Law  <law@redhat.com>\n \n \t* g++.dg/tree-ssa/ssa-dom.C: New test.\n-\t\n \n 2013-03-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n "}, {"sha": "a2a4103b9a2f2b4a036212f6a3bce0e51d1fd406", "filename": "gcc/testsuite/gcc.target/arm/neon-for-64bits-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-1.c?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -0,0 +1,54 @@\n+/* Check that Neon is *not* used by default to handle 64-bits scalar\n+   operations.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+typedef long long i64;\n+typedef unsigned long long u64;\n+typedef unsigned int u32;\n+typedef int i32;\n+\n+/* Unary operators */\n+#define UNARY_OP(name, op) \\\n+  void unary_##name(u64 *a, u64 *b) { *a = op (*b + 0x1234567812345678ULL) ; }\n+\n+/* Binary operators */\n+#define BINARY_OP(name, op) \\\n+  void binary_##name(u64 *a, u64 *b, u64 *c) { *a = *b op *c ; }\n+\n+/* Unsigned shift */\n+#define SHIFT_U(name, op, amount) \\\n+  void ushift_##name(u64 *a, u64 *b, int c) { *a = *b op amount; }\n+\n+/* Signed shift */\n+#define SHIFT_S(name, op, amount) \\\n+  void sshift_##name(i64 *a, i64 *b, int c) { *a = *b op amount; }\n+\n+UNARY_OP(not, ~)\n+\n+BINARY_OP(add, +)\n+BINARY_OP(sub, -)\n+BINARY_OP(and, &)\n+BINARY_OP(or, |)\n+BINARY_OP(xor, ^)\n+\n+SHIFT_U(right1, >>, 1)\n+SHIFT_U(right2, >>, 2)\n+SHIFT_U(right5, >>, 5)\n+SHIFT_U(rightn, >>, c)\n+\n+SHIFT_S(right1, >>, 1)\n+SHIFT_S(right2, >>, 2)\n+SHIFT_S(right5, >>, 5)\n+SHIFT_S(rightn, >>, c)\n+\n+/* { dg-final {scan-assembler-times \"vmvn\" 0} }  */\n+/* { dg-final {scan-assembler-times \"vadd\" 0} }  */\n+/* { dg-final {scan-assembler-times \"vsub\" 0} }  */\n+/* { dg-final {scan-assembler-times \"vand\" 0} }  */\n+/* { dg-final {scan-assembler-times \"vorr\" 0} }  */\n+/* { dg-final {scan-assembler-times \"veor\" 0} }  */\n+/* { dg-final {scan-assembler-times \"vshr\" 0} }  */"}, {"sha": "035bfb77a3730fae991b33b3828b46c673ad4c07", "filename": "gcc/testsuite/gcc.target/arm/neon-for-64bits-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65074f54c54e765f5e66ecee17c4ad16f66c3780/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-for-64bits-2.c?ref=65074f54c54e765f5e66ecee17c4ad16f66c3780", "patch": "@@ -0,0 +1,57 @@\n+/* Check that Neon is used to handle 64-bits scalar operations.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2 -mneon-for-64bits\" } */\n+/* { dg-add-options arm_neon } */\n+\n+typedef long long i64;\n+typedef unsigned long long u64;\n+typedef unsigned int u32;\n+typedef int i32;\n+\n+/* Unary operators */\n+#define UNARY_OP(name, op) \\\n+  void unary_##name(u64 *a, u64 *b) { *a = op (*b + 0x1234567812345678ULL) ; }\n+\n+/* Binary operators */\n+#define BINARY_OP(name, op) \\\n+  void binary_##name(u64 *a, u64 *b, u64 *c) { *a = *b op *c ; }\n+\n+/* Unsigned shift */\n+#define SHIFT_U(name, op, amount) \\\n+  void ushift_##name(u64 *a, u64 *b, int c) { *a = *b op amount; }\n+\n+/* Signed shift */\n+#define SHIFT_S(name, op, amount) \\\n+  void sshift_##name(i64 *a, i64 *b, int c) { *a = *b op amount; }\n+\n+UNARY_OP(not, ~)\n+\n+BINARY_OP(add, +)\n+BINARY_OP(sub, -)\n+BINARY_OP(and, &)\n+BINARY_OP(or, |)\n+BINARY_OP(xor, ^)\n+\n+SHIFT_U(right1, >>, 1)\n+SHIFT_U(right2, >>, 2)\n+SHIFT_U(right5, >>, 5)\n+SHIFT_U(rightn, >>, c)\n+\n+SHIFT_S(right1, >>, 1)\n+SHIFT_S(right2, >>, 2)\n+SHIFT_S(right5, >>, 5)\n+SHIFT_S(rightn, >>, c)\n+\n+/* { dg-final {scan-assembler-times \"vmvn\" 1} }  */\n+/* Two vadd: 1 in unary_not, 1 in binary_add */\n+/* { dg-final {scan-assembler-times \"vadd\" 2} }  */\n+/* { dg-final {scan-assembler-times \"vsub\" 1} }  */\n+/* { dg-final {scan-assembler-times \"vand\" 1} }  */\n+/* { dg-final {scan-assembler-times \"vorr\" 1} }  */\n+/* { dg-final {scan-assembler-times \"veor\" 1} }  */\n+/* 6 vshr for right shifts by constant, and variable right shift uses\n+   vshl with a negative amount in register.  */\n+/* { dg-final {scan-assembler-times \"vshr\" 6} }  */\n+/* { dg-final {scan-assembler-times \"vshl\" 2} }  */"}]}