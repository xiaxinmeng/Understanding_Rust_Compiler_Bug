{"sha": "8a580f915218bbda017c50582fe47af877d90777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1ODBmOTE1MjE4YmJkYTAxN2M1MDU4MmZlNDdhZjg3N2Q5MDc3Nw==", "commit": {"author": {"name": "Akshat Agarwal", "email": "humancalico@disroot.org", "date": "2021-02-17T09:34:44Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:31:39Z"}, "message": "Format all files in gcc/rust/ using clang-format\n\nSigned-off-by: Akshat Agarwal <humancalico@disroot.org>\n\nThis commit formats all files in gcc/rust using clang-format.", "tree": {"sha": "cb633e40d13c2c1afc53d136280234333693425a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb633e40d13c2c1afc53d136280234333693425a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a580f915218bbda017c50582fe47af877d90777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a580f915218bbda017c50582fe47af877d90777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a580f915218bbda017c50582fe47af877d90777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a580f915218bbda017c50582fe47af877d90777/comments", "author": {"login": "humancalico", "id": 51334444, "node_id": "MDQ6VXNlcjUxMzM0NDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/51334444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humancalico", "html_url": "https://github.com/humancalico", "followers_url": "https://api.github.com/users/humancalico/followers", "following_url": "https://api.github.com/users/humancalico/following{/other_user}", "gists_url": "https://api.github.com/users/humancalico/gists{/gist_id}", "starred_url": "https://api.github.com/users/humancalico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humancalico/subscriptions", "organizations_url": "https://api.github.com/users/humancalico/orgs", "repos_url": "https://api.github.com/users/humancalico/repos", "events_url": "https://api.github.com/users/humancalico/events{/privacy}", "received_events_url": "https://api.github.com/users/humancalico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5ef68888c43ebf19126bdad44c6966c73b70cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5ef68888c43ebf19126bdad44c6966c73b70cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5ef68888c43ebf19126bdad44c6966c73b70cc"}], "stats": {"total": 241, "additions": 122, "deletions": 119}, "files": [{"sha": "73168657379f6ad1edbd216af01d1167fe0f2423", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -144,7 +144,7 @@ class Token : public TokenTree, public MacroMatch\n   const_TokenPtr tok_ref;\n \n   /* new idea: wrapper around const_TokenPtr used for heterogeneuous storage in\n-   * token trees. rather than convert back and forth when parsing macros, just \n+   * token trees. rather than convert back and forth when parsing macros, just\n    * wrap it. */\n \n public:\n@@ -1218,7 +1218,7 @@ class GenericParam\n class LifetimeParam : public GenericParam\n {\n   Lifetime lifetime;\n-  std::vector<Lifetime> lifetime_bounds; \n+  std::vector<Lifetime> lifetime_bounds;\n   Attribute outer_attr;\n   Location locus;\n \n@@ -1232,15 +1232,15 @@ class LifetimeParam : public GenericParam\n   // Creates an error state lifetime param.\n   static LifetimeParam create_error ()\n   {\n-    return LifetimeParam (Lifetime::error (), {}, Attribute::create_empty (), Location ());\n+    return LifetimeParam (Lifetime::error (), {}, Attribute::create_empty (),\n+\t\t\t  Location ());\n   }\n \n   // Returns whether the lifetime param is in an error state.\n   bool is_error () const { return lifetime.is_error (); }\n \n   // Constructor\n-  LifetimeParam (Lifetime lifetime, \n-\t\t std::vector<Lifetime> lifetime_bounds,\n+  LifetimeParam (Lifetime lifetime, std::vector<Lifetime> lifetime_bounds,\n \t\t Attribute outer_attr, Location locus)\n     : lifetime (std::move (lifetime)),\n       lifetime_bounds (std::move (lifetime_bounds)),\n@@ -1262,7 +1262,8 @@ class LifetimeParam : public GenericParam\n \n // A macro item AST node - abstract base class\n class MacroItem : public Item\n-{};\n+{\n+};\n \n // Item used in trait declarations - abstract base class\n class TraitItem"}, {"sha": "d6f3c4277e6cb6b06bec7d341a93236a799df78b", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -359,14 +359,20 @@ class PathInExpression : public PathPattern, public PathExpr\n   void mark_for_strip () override { remove_all_segments (); }\n   bool is_marked_for_strip () const override { return is_error (); }\n \n-  bool opening_scope_resolution () const { return has_opening_scope_resolution; }\n+  bool opening_scope_resolution () const\n+  {\n+    return has_opening_scope_resolution;\n+  }\n \n   NodeId get_node_id () const override { return _node_id; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override { outer_attrs = std::move (new_attrs); }\n+  void set_outer_attrs (std::vector<Attribute> new_attrs) override\n+  {\n+    outer_attrs = std::move (new_attrs);\n+  }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -848,8 +854,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n \n   QualifiedPathInExpression (QualifiedPathType qual_path_type,\n \t\t\t     std::vector<PathExprSegment> path_segments,\n-\t\t\t     std::vector<Attribute> outer_attrs,\n-           Location locus)\n+\t\t\t     std::vector<Attribute> outer_attrs, Location locus)\n     : PathPattern (std::move (path_segments)),\n       outer_attrs (std::move (outer_attrs)),\n       path_type (std::move (qual_path_type)), locus (locus)\n@@ -864,8 +869,8 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n   // Creates an error qualified path in expression.\n   static QualifiedPathInExpression create_error ()\n   {\n-    return QualifiedPathInExpression (QualifiedPathType::create_error (),\n-\t\t\t\t      {}, {}, Location ());\n+    return QualifiedPathInExpression (QualifiedPathType::create_error (), {},\n+\t\t\t\t      {}, Location ());\n   }\n \n   Location get_locus () const { return locus; }\n@@ -890,7 +895,10 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override { outer_attrs = std::move (new_attrs); }\n+  void set_outer_attrs (std::vector<Attribute> new_attrs) override\n+  {\n+    outer_attrs = std::move (new_attrs);\n+  }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -902,12 +910,14 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n \n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n-  QualifiedPathInExpression *clone_expr_without_block_impl () const final override\n+  QualifiedPathInExpression *\n+  clone_expr_without_block_impl () const final override\n   {\n     return clone_qual_path_in_expression_impl ();\n   }\n \n-  /*virtual*/ QualifiedPathInExpression *clone_qual_path_in_expression_impl () const\n+  /*virtual*/ QualifiedPathInExpression *\n+  clone_qual_path_in_expression_impl () const\n   {\n     return new QualifiedPathInExpression (*this);\n   }"}, {"sha": "cb9a19783d46212f101838e4cc5b806efbb5df0a", "filename": "gcc/rust/lang-specs.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang-specs.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -20,6 +20,7 @@\n /* This is the contribution to the `default_compilers' array in gcc.c\n    for the Rust language.  */\n \n-{\".rs\",  \"@rs\", 0, 1, 0},\n-{\"@rs\",  \"rust1 %i %(cc1_options) %{I*} %{L*} %D %{!fsyntax-only:%(invoke_as)}\",\n-    0, 1, 0},\n+{\".rs\", \"@rs\", 0, 1, 0},\n+  {\"@rs\",\n+   \"rust1 %i %(cc1_options) %{I*} %{L*} %D %{!fsyntax-only:%(invoke_as)}\", 0, 1,\n+   0},"}, {"sha": "980f97bebf4aa143410d80510c110850132cd6e2", "filename": "gcc/rust/lex/rust-codepoint.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flex%2Frust-codepoint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flex%2Frust-codepoint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-codepoint.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -35,15 +35,9 @@ struct Codepoint\n   // Returns a C++ string containing string value of codepoint.\n   std::string as_string ();\n \n-  bool operator== (Codepoint other) const\n-  {\n-    return value == other.value;\n-  }\n-\n-  bool operator!= (Codepoint other) const\n-  {\n-    return !operator== (other);\n-  }\n+  bool operator== (Codepoint other) const { return value == other.value; }\n+\n+  bool operator!= (Codepoint other) const { return !operator== (other); }\n };\n } // namespace Rust\n "}, {"sha": "f8680cdd0d6a94ea3429b8fc79ad0a2200eb5627", "filename": "gcc/rust/lex/rust-token.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flex%2Frust-token.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Flex%2Frust-token.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-token.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -336,7 +336,8 @@ class Token\n   // Makes and returns a new TokenPtr of type STRING_LITERAL.\n   static TokenPtr make_string (Location locus, const std::string &str)\n   {\n-    // return std::make_shared<Token> (STRING_LITERAL, locus, str, CORETYPE_STR);\n+    // return std::make_shared<Token> (STRING_LITERAL, locus, str,\n+    // CORETYPE_STR);\n     return TokenPtr (new Token (STRING_LITERAL, locus, str, CORETYPE_STR));\n   }\n \n@@ -357,7 +358,7 @@ class Token\n   // Makes and returns a new TokenPtr of type BYTE_STRING_LITERAL (fix).\n   static TokenPtr make_byte_string (Location locus, const std::string &str)\n   {\n-    // return std::make_shared<Token> (BYTE_STRING_LITERAL, locus, str); \n+    // return std::make_shared<Token> (BYTE_STRING_LITERAL, locus, str);\n     return TokenPtr (new Token (BYTE_STRING_LITERAL, locus, str));\n   }\n "}, {"sha": "e2bcf3b89d1a45ee31c2555aeca507e7caeea6e6", "filename": "gcc/rust/operator.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Foperator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Foperator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Foperator.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -19,25 +19,25 @@ enum Operator\n   OPERATOR_ANDAND,   // &&\n   OPERATOR_EQEQ,     // ==\n   OPERATOR_NOTEQ,    // !=\n-  OPERATOR_LT,       // <\n-  OPERATOR_LE,       // <=\n-  OPERATOR_GT,       // >\n-  OPERATOR_GE,       // >=\n+  OPERATOR_LT,\t     // <\n+  OPERATOR_LE,\t     // <=\n+  OPERATOR_GT,\t     // >\n+  OPERATOR_GE,\t     // >=\n   OPERATOR_PLUS,     // +\n   OPERATOR_MINUS,    // -\n-  OPERATOR_OR,       // |\n-  OPERATOR_XOR,      // ^\n+  OPERATOR_OR,\t     // |\n+  OPERATOR_XOR,\t     // ^\n   OPERATOR_MULT,     // *\n-  OPERATOR_DIV,      // /\n-  OPERATOR_MOD,      // %\n+  OPERATOR_DIV,\t     // /\n+  OPERATOR_MOD,\t     // %\n   OPERATOR_LSHIFT,   // <<\n   OPERATOR_RSHIFT,   // >>\n-  OPERATOR_AND,      // &\n-  OPERATOR_NOT,      // !\n+  OPERATOR_AND,\t     // &\n+  OPERATOR_NOT,\t     // !\n   OPERATOR_BITCLEAR, // &^\n   OPERATOR_CHANOP,   // <-\n \n-  OPERATOR_EQ,\t // =\n+  OPERATOR_EQ,\t       // =\n   OPERATOR_PLUSEQ,     // +=\n   OPERATOR_MINUSEQ,    // -=\n   OPERATOR_OREQ,       // |=\n@@ -55,7 +55,7 @@ enum Operator\n   OPERATOR_COLON,     // :\n   OPERATOR_COLONEQ,   // :=\n   OPERATOR_SEMICOLON, // ;\n-  OPERATOR_DOT,       // .\n+  OPERATOR_DOT,\t      // .\n   OPERATOR_ELLIPSIS,  // ...\n   OPERATOR_COMMA,     // ,\n   OPERATOR_LPAREN,    // ("}, {"sha": "427fbe0c136491f7b4af2621617f4ffecfe5a184", "filename": "gcc/rust/rust-backend.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.c?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -28,7 +28,7 @@\n #include \"simple-object.h\"\n #include \"stor-layout.h\"\n #include \"intl.h\"\n-#include \"output.h\"     /* for assemble_string */\n+#include \"output.h\" /* for assemble_string */\n #include \"common/common-target.h\"\n //#include \"rust-c.h\" // import no longer exists, so hopefully not broken\n \n@@ -104,14 +104,13 @@ rust_imported_unsafe (void)\n void\n rust_write_export_data (const char *bytes, unsigned int size)\n {\n-  static section* sec;\n+  static section *sec;\n \n   if (sec == NULL)\n     {\n       gcc_assert (targetm_common.have_named_sections);\n       sec = get_section (RUST_EXPORT_SECTION_NAME,\n-                         TARGET_AIX ? SECTION_EXCLUDE : SECTION_DEBUG,\n-                         NULL);\n+\t\t\t TARGET_AIX ? SECTION_EXCLUDE : SECTION_DEBUG, NULL);\n     }\n \n   switch_to_section (sec);\n@@ -145,49 +144,48 @@ rust_read_export_data (int fd, off_t offset, char **pbuf, size_t *plen,\n   *plen = 0;\n \n   sobj = simple_object_start_read (fd, offset, RUST_EXPORT_SEGMENT_NAME,\n-                                   &errmsg, perr);\n+\t\t\t\t   &errmsg, perr);\n   if (sobj == NULL)\n     {\n       /* If we get an error here, just pretend that we didn't find any\n-         export data.  This is the right thing to do if the error is\n-         that the file was not recognized as an object file.  This\n-         will ignore file I/O errors, but it's not too big a deal\n-         because we will wind up giving some other error later.  */\n+\t export data.  This is the right thing to do if the error is\n+\t that the file was not recognized as an object file.  This\n+\t will ignore file I/O errors, but it's not too big a deal\n+\t because we will wind up giving some other error later.  */\n       return NULL;\n     }\n \n   found = simple_object_find_section (sobj, RUST_EXPORT_SECTION_NAME,\n-                                      &sec_offset, &sec_length,\n-                                      &errmsg, perr);\n+\t\t\t\t      &sec_offset, &sec_length, &errmsg, perr);\n   simple_object_release_read (sobj);\n   if (!found)\n     return errmsg;\n \n   if (lseek (fd, offset + sec_offset, SEEK_SET) < 0)\n     {\n       *perr = errno;\n-      return _(\"lseek failed while reading export data\");\n+      return _ (\"lseek failed while reading export data\");\n     }\n \n   buf = XNEWVEC (char, sec_length);\n   if (buf == NULL)\n     {\n       *perr = errno;\n-      return _(\"memory allocation failed while reading export data\");\n+      return _ (\"memory allocation failed while reading export data\");\n     }\n \n   c = read (fd, buf, sec_length);\n   if (c < 0)\n     {\n       *perr = errno;\n       free (buf);\n-      return _(\"read failed while reading export data\");\n+      return _ (\"read failed while reading export data\");\n     }\n \n   if (c < sec_length)\n     {\n       free (buf);\n-      return _(\"short read while reading export data\");\n+      return _ (\"short read while reading export data\");\n     }\n \n   *pbuf = buf;"}, {"sha": "ebea02f8cbdeb4881d6292b87e7440cf0e807a6c", "filename": "gcc/rust/rust-buffered-queue.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-buffered-queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-buffered-queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-buffered-queue.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -82,16 +82,18 @@ template <typename T, typename Source> class buffered_queue\n \t\t  std::swap (buffer, new_queue);\n \t    */\n \n-\t    // TODO: determine overhead of this approach vs copy. Should be lower.\n+\t    // TODO: determine overhead of this approach vs copy. Should be\n+\t    // lower.\n \t    std::vector<T> new_queue;\n \t    new_queue.reserve (new_size);\n \t    new_queue.insert (new_queue.begin (),\n \t\t\t      std::make_move_iterator (buffer.begin () + start),\n \t\t\t      std::make_move_iterator (buffer.begin () + end));\n \t    start = 0;\n \t    end = num_queued_items;\n-      // fill up rest of vector with junk so that indexing can work\n-      new_queue.insert (new_queue.begin () + end, new_size - new_queue.size(), T ());\n+\t    // fill up rest of vector with junk so that indexing can work\n+\t    new_queue.insert (new_queue.begin () + end,\n+\t\t\t      new_size - new_queue.size (), T ());\n \n \t    buffer = std::move (new_queue);\n \t    /* this should be best method - std::move(range) would have"}, {"sha": "0f82091270d051d5884fde9aea96867ae43f2cf8", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -45,33 +45,27 @@ expand_format (const char *fmt)\n       c++;\n       switch (*c)\n \t{\n-\tcase '\\0':\n-\t  {\n+\t  case '\\0': {\n \t    // malformed format string\n \t    rust_unreachable ();\n \t  }\n-\tcase '%':\n-\t  {\n+\t  case '%': {\n \t    ss << \"%\";\n \t    break;\n \t  }\n-\tcase 'm':\n-\t  {\n+\t  case 'm': {\n \t    ss << mformat_value ();\n \t    break;\n \t  }\n-\tcase '<':\n-\t  {\n+\t  case '<': {\n \t    ss << rust_open_quote ();\n \t    break;\n \t  }\n-\tcase '>':\n-\t  {\n+\t  case '>': {\n \t    ss << rust_close_quote ();\n \t    break;\n \t  }\n-\tcase 'q':\n-\t  {\n+\t  case 'q': {\n \t    ss << rust_open_quote ();\n \t    c++;\n \t    if (*c == 'm')\n@@ -85,8 +79,7 @@ expand_format (const char *fmt)\n \t    ss << rust_close_quote ();\n \t    break;\n \t  }\n-\tdefault:\n-\t  {\n+\t  default: {\n \t    ss << \"%\" << *c;\n \t  }\n \t}"}, {"sha": "37e5066001b875fb0e3330da5e4f9534a4048629", "filename": "gcc/rust/rust-gcc-diagnostics.cc", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-gcc-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-gcc-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc-diagnostics.cc?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -22,38 +22,36 @@\n #include \"rust-diagnostics.h\"\n \n void\n-rust_be_error_at(const Location location, const std::string& errmsg)\n+rust_be_error_at (const Location location, const std::string &errmsg)\n {\n-  location_t gcc_loc = location.gcc_location();\n-  error_at(gcc_loc, \"%s\", errmsg.c_str());\n+  location_t gcc_loc = location.gcc_location ();\n+  error_at (gcc_loc, \"%s\", errmsg.c_str ());\n }\n \n void\n-rust_be_warning_at(const Location location,\n-                   int opt, const std::string& warningmsg)\n+rust_be_warning_at (const Location location, int opt,\n+\t\t    const std::string &warningmsg)\n {\n-  location_t gcc_loc = location.gcc_location();\n-  warning_at(gcc_loc, opt, \"%s\", warningmsg.c_str());\n+  location_t gcc_loc = location.gcc_location ();\n+  warning_at (gcc_loc, opt, \"%s\", warningmsg.c_str ());\n }\n \n void\n-rust_be_fatal_error(const Location location,\n-                    const std::string& fatalmsg)\n+rust_be_fatal_error (const Location location, const std::string &fatalmsg)\n {\n-  location_t gcc_loc = location.gcc_location();\n-  fatal_error(gcc_loc, \"%s\", fatalmsg.c_str());\n+  location_t gcc_loc = location.gcc_location ();\n+  fatal_error (gcc_loc, \"%s\", fatalmsg.c_str ());\n }\n \n void\n-rust_be_inform(const Location location,\n-               const std::string& infomsg)\n+rust_be_inform (const Location location, const std::string &infomsg)\n {\n-  location_t gcc_loc = location.gcc_location();\n-  inform(gcc_loc, \"%s\", infomsg.c_str());\n+  location_t gcc_loc = location.gcc_location ();\n+  inform (gcc_loc, \"%s\", infomsg.c_str ());\n }\n \n void\n-rust_be_get_quotechars(const char** open_qu, const char** close_qu)\n+rust_be_get_quotechars (const char **open_qu, const char **close_qu)\n {\n   *open_qu = open_quote;\n   *close_qu = close_quote;"}, {"sha": "e95b5de4a700332fd291e795a22b644261925ea3", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -53,7 +53,8 @@\n \n /* General TODOs:\n  *  - convert all copies of expensive-to-copy (deep copy) AST objects into\n- * moves, if possible. Don't remove clone functionality - it may be required for e.g. HIR conversion.\n+ * moves, if possible. Don't remove clone functionality - it may be required for\n+ * e.g. HIR conversion.\n  */\n \n #include \"rust-system.h\"\n@@ -102,8 +103,10 @@ struct GTY (()) language_function\n static Rust::Session session;\n \n // has to be in same compilation unit as session, so here for now\n-void rust_add_target_info(const char* key, const char* value) {\n-    session.options.target_data.insert_key_value_pair(key, value);\n+void\n+rust_add_target_info (const char *key, const char *value)\n+{\n+  session.options.target_data.insert_key_value_pair (key, value);\n }\n \n /* Language hooks.  */"}, {"sha": "606e8069277f24249d3cc1013ce5a30520a79c90", "filename": "gcc/rust/rust-linemap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-linemap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-linemap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-linemap.cc?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -90,8 +90,8 @@ Gcc_linemap::to_string (Location location)\n \n   // Strip the source file down to the base file, to reduce clutter.\n   std::stringstream ss;\n-  ss << lbasename (path) << \":\" << SOURCE_LINE (lmo, location.gcc_location ()) \n-    << \":\" << SOURCE_COLUMN (lmo, location.gcc_location ());\n+  ss << lbasename (path) << \":\" << SOURCE_LINE (lmo, location.gcc_location ())\n+     << \":\" << SOURCE_COLUMN (lmo, location.gcc_location ());\n   return ss.str ();\n }\n "}, {"sha": "fb87d33720ec045c4becc1a5590c0aa85c2ef2e5", "filename": "gcc/rust/rust-object-export.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-object-export.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-object-export.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-object-export.c?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -17,7 +17,8 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-// FIXME: doesn't this duplicate lots of code from rust-backend.c? Is one meant to be a replacement?\n+// FIXME: doesn't this duplicate lots of code from rust-backend.c? Is one meant\n+// to be a replacement?\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -30,7 +31,7 @@\n #include \"simple-object.h\"\n #include \"stor-layout.h\"\n #include \"intl.h\"\n-#include \"output.h\"     /* for assemble_string */\n+#include \"output.h\" /* for assemble_string */\n #include \"common/common-target.h\"\n \n // satisfy intellisense\n@@ -105,14 +106,13 @@ rust_imported_unsafe (void)\n void\n rust_write_export_data (const char *bytes, unsigned int size)\n {\n-  static section* sec;\n+  static section *sec;\n \n   if (sec == NULL)\n     {\n       gcc_assert (targetm_common.have_named_sections);\n       sec = get_section (RUST_EXPORT_SECTION_NAME,\n-                         TARGET_AIX ? SECTION_EXCLUDE : SECTION_DEBUG,\n-                         NULL);\n+\t\t\t TARGET_AIX ? SECTION_EXCLUDE : SECTION_DEBUG, NULL);\n     }\n \n   switch_to_section (sec);\n@@ -146,49 +146,48 @@ rust_read_export_data (int fd, off_t offset, char **pbuf, size_t *plen,\n   *plen = 0;\n \n   sobj = simple_object_start_read (fd, offset, RUST_EXPORT_SEGMENT_NAME,\n-                                   &errmsg, perr);\n+\t\t\t\t   &errmsg, perr);\n   if (sobj == NULL)\n     {\n       /* If we get an error here, just pretend that we didn't find any\n-         export data.  This is the right thing to do if the error is\n-         that the file was not recognized as an object file.  This\n-         will ignore file I/O errors, but it's not too big a deal\n-         because we will wind up giving some other error later.  */\n+\t export data.  This is the right thing to do if the error is\n+\t that the file was not recognized as an object file.  This\n+\t will ignore file I/O errors, but it's not too big a deal\n+\t because we will wind up giving some other error later.  */\n       return NULL;\n     }\n \n   found = simple_object_find_section (sobj, RUST_EXPORT_SECTION_NAME,\n-                                      &sec_offset, &sec_length,\n-                                      &errmsg, perr);\n+\t\t\t\t      &sec_offset, &sec_length, &errmsg, perr);\n   simple_object_release_read (sobj);\n   if (!found)\n     return errmsg;\n \n   if (lseek (fd, offset + sec_offset, SEEK_SET) < 0)\n     {\n       *perr = errno;\n-      return _(\"lseek failed while reading export data\");\n+      return _ (\"lseek failed while reading export data\");\n     }\n \n   buf = XNEWVEC (char, sec_length);\n   if (buf == NULL)\n     {\n       *perr = errno;\n-      return _(\"memory allocation failed while reading export data\");\n+      return _ (\"memory allocation failed while reading export data\");\n     }\n \n   c = read (fd, buf, sec_length);\n   if (c < 0)\n     {\n       *perr = errno;\n       free (buf);\n-      return _(\"read failed while reading export data\");\n+      return _ (\"read failed while reading export data\");\n     }\n \n   if (c < sec_length)\n     {\n       free (buf);\n-      return _(\"short read while reading export data\");\n+      return _ (\"short read while reading export data\");\n     }\n \n   *pbuf = buf;"}, {"sha": "d4f0f55843056982f87d709f8f13b462b168b197", "filename": "gcc/rust/rust-object-export.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-object-export.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-object-export.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-object-export.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -19,11 +19,12 @@\n #ifndef RUST_OBJECT_EXPORT_H\n #define RUST_OBJECT_EXPORT_H\n \n-extern unsigned int rust_field_alignment (tree t);\n+extern unsigned int\n+rust_field_alignment (tree t);\n \n extern const char *\n rust_read_export_data (int fd, off_t offset, char **pbuf, size_t *plen,\n-                       int *perr);\n+\t\t       int *perr);\n extern void\n rust_write_export_data (const char *bytes, unsigned int size);\n "}, {"sha": "c5114bc7e084d17f39555908329d2786b0d20b79", "filename": "gcc/rust/rust-target.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a580f915218bbda017c50582fe47af877d90777/gcc%2Frust%2Frust-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.h?ref=8a580f915218bbda017c50582fe47af877d90777", "patch": "@@ -1,5 +1,5 @@\n-/* rust-target.h -- Data structure definitions for target-specific Rust behavior.\n-   Copyright (C) 2020 Free Software Foundation, Inc.\n+/* rust-target.h -- Data structure definitions for target-specific Rust\n+   behavior. Copyright (C) 2020 Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by the\n@@ -20,21 +20,23 @@\n \n // TODO: find out what this stuff actually does\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n-#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n+#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (*NAME) PARAMS;\n #define DEFHOOK_UNDOC DEFHOOK\n #define HOOKSTRUCT(FRAGMENT) FRAGMENT\n \n #include \"rust-target.def\"\n \n /* Each target can provide their own.  */\n extern struct gcc_targetrustm targetrustm;\n-/* Some kind of structure to store all rust hook macros (like the TARGET_RUST_CPU_INFO).\n- * This is required to store the function pointers for the target hooks so that the frontend can call them\n+/* Some kind of structure to store all rust hook macros (like the\n+ * TARGET_RUST_CPU_INFO). This is required to store the function pointers for\n+ * the target hooks so that the frontend can call them\n  * and it calls the correct target-specific function.  */\n \n /* Used by target to add predefined version idenditiers.  */\n-//extern void d_add_builtin_version (const char *);\n+// extern void d_add_builtin_version (const char *);\n /* Used by target to add target-related info.  */\n-extern void rust_add_target_info(const char* key, const char* value);\n+extern void\n+rust_add_target_info (const char *key, const char *value);\n \n #endif\n\\ No newline at end of file"}]}