{"sha": "253efaac2d5e97b09bc841d6f85ff908de5760df", "node_id": "C_kwDOANBUbNoAKDI1M2VmYWFjMmQ1ZTk3YjA5YmM4NDFkNmY4NWZmOTA4ZGU1NzYwZGY", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:24:14Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests for vfmasq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.", "tree": {"sha": "deb84f771abfa73f0a7194e9d919265643dcfae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb84f771abfa73f0a7194e9d919265643dcfae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253efaac2d5e97b09bc841d6f85ff908de5760df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253efaac2d5e97b09bc841d6f85ff908de5760df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253efaac2d5e97b09bc841d6f85ff908de5760df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253efaac2d5e97b09bc841d6f85ff908de5760df/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8dc6379d600706d3ed790d3ef4c6b25678d289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8dc6379d600706d3ed790d3ef4c6b25678d289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8dc6379d600706d3ed790d3ef4c6b25678d289"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "03b376c9bbe4a0ba3041a65158a6fc0e47414c0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253efaac2d5e97b09bc841d6f85ff908de5760df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253efaac2d5e97b09bc841d6f85ff908de5760df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c?ref=253efaac2d5e97b09bc841d6f85ff908de5760df", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n-foo (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+foo (float16x8_t m1, float16x8_t m2, float16_t add, mve_pred16_t p)\n {\n-  return vfmasq_m_n_f16 (a, b, c, p);\n+  return vfmasq_m_n_f16 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vfmast.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n-foo1 (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+foo1 (float16x8_t m1, float16x8_t m2, float16_t add, mve_pred16_t p)\n {\n-  return vfmasq_m (a, b, c, p);\n+  return vfmasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vfmast.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo2 (float16x8_t m1, float16x8_t m2, mve_pred16_t p)\n+{\n+  return vfmasq_m (m1, m2, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ecf30ba9826a1813a27f53ff0b6b381f445ff8e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253efaac2d5e97b09bc841d6f85ff908de5760df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253efaac2d5e97b09bc841d6f85ff908de5760df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c?ref=253efaac2d5e97b09bc841d6f85ff908de5760df", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n-foo (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+foo (float32x4_t m1, float32x4_t m2, float32_t add, mve_pred16_t p)\n {\n-  return vfmasq_m_n_f32 (a, b, c, p);\n+  return vfmasq_m_n_f32 (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vfmast.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n-foo1 (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+foo1 (float32x4_t m1, float32x4_t m2, float32_t add, mve_pred16_t p)\n {\n-  return vfmasq_m (a, b, c, p);\n+  return vfmasq_m (m1, m2, add, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vfmast.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvfmast.f32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo2 (float32x4_t m1, float32x4_t m2, mve_pred16_t p)\n+{\n+  return vfmasq_m (m1, m2, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}