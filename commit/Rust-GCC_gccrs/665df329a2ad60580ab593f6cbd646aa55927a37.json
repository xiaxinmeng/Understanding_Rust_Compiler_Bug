{"sha": "665df329a2ad60580ab593f6cbd646aa55927a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1ZGYzMjlhMmFkNjA1ODBhYjU5M2Y2Y2JkNjQ2YWE1NTkyN2EzNw==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-06-03T16:29:15Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-06-03T16:04:57Z"}, "message": "rust_debug: Replace fprintf (stderr) with rust_debug\n\nCo-authored-by: tschwinge <thomas@schwinge.name>", "tree": {"sha": "1d6adaae5665a813f771e96c163c6f2b6d112234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6adaae5665a813f771e96c163c6f2b6d112234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/665df329a2ad60580ab593f6cbd646aa55927a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665df329a2ad60580ab593f6cbd646aa55927a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665df329a2ad60580ab593f6cbd646aa55927a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665df329a2ad60580ab593f6cbd646aa55927a37/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cbf184f3bddec37011ed2970d0aff943d98ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51cbf184f3bddec37011ed2970d0aff943d98ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51cbf184f3bddec37011ed2970d0aff943d98ce0"}], "stats": {"total": 591, "additions": 258, "deletions": 333}, "files": [{"sha": "3d339ad1aeda53b5b41d4a373c30ebf17f69e0f5", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 57, "deletions": 83, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -169,7 +169,7 @@ unquote_string (std::string input)\n std::string\n Crate::as_string () const\n {\n-  fprintf (stderr, \"beginning crate recursive as-string\\n\");\n+  rust_debug (\"beginning crate recursive as-string\");\n \n   std::string str (\"Crate: \");\n   // add utf8bom and shebang\n@@ -195,8 +195,8 @@ Crate::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (stderr, \"something really terrible has gone wrong - \"\n-\t\t\t       \"null pointer item in crate.\");\n+\t      rust_debug (\"something really terrible has gone wrong - \"\n+\t\t\t  \"null pointer item in crate.\");\n \t      return \"NULL_POINTER_MARK\";\n \t    }\n \n@@ -261,8 +261,8 @@ DelimTokenTree::as_string () const\n       end_delim = \"}\";\n       break;\n     default:\n-      fprintf (stderr, \"Invalid delimiter type, \"\n-\t\t       \"Should be PARENS, SQUARE, or CURLY.\");\n+      rust_debug (\"Invalid delimiter type, \"\n+\t\t  \"Should be PARENS, SQUARE, or CURLY.\");\n       return \"Invalid delimiter type\";\n     }\n   std::string str = start_delim;\n@@ -273,8 +273,7 @@ DelimTokenTree::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (tree == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"token tree in delim token tree.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -334,11 +333,10 @@ SimplePath::as_string () const\n       // DEBUG: remove later. Checks for path error.\n       if (segment.is_error ())\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"segment in path is error - this should've been filtered \"\n-\t\t   \"out. first segment \"\n-\t\t   \"was '%s' \\n\",\n-\t\t   segments.at (0).as_string ().c_str ());\n+\t  rust_debug (\"segment in path is error - this should've been filtered \"\n+\t\t      \"out. first segment \"\n+\t\t      \"was '%s'\",\n+\t\t      segments.at (0).as_string ().c_str ());\n \t}\n     }\n \n@@ -414,8 +412,8 @@ ModuleBodied::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (stderr, \"something really terrible has gone wrong - \"\n-\t\t\t       \"null pointer item in crate.\");\n+\t      rust_debug (\"something really terrible has gone wrong - \"\n+\t\t\t  \"null pointer item in crate.\");\n \t      return \"NULL_POINTER_MARK\";\n \t    }\n \n@@ -451,17 +449,17 @@ StaticItem::as_string () const\n   // DEBUG: null pointer check\n   if (type == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer type in static item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer type in static item.\");\n       return \"NULL_POINTER_MARK\";\n     }\n   str += \"\\n\" + indent_spaces (stay) + \"Type: \" + type->as_string ();\n \n   // DEBUG: null pointer check\n   if (expr == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer expr in static item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer expr in static item.\");\n       return \"NULL_POINTER_MARK\";\n     }\n   str += \"\\n\" + indent_spaces (stay) + \"Expression: \" + expr->as_string ();\n@@ -502,8 +500,7 @@ TupleStruct::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -544,17 +541,17 @@ ConstantItem::as_string () const\n   // DEBUG: null pointer check\n   if (type == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer type in const item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer type in const item.\");\n       return \"NULL_POINTER_MARK\";\n     }\n   str += \"\\n  Type: \" + type->as_string ();\n \n   // DEBUG: null pointer check\n   if (const_expr == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer expr in const item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer expr in const item.\");\n       return \"NULL_POINTER_MARK\";\n     }\n   str += \"\\n  Expression: \" + const_expr->as_string ();\n@@ -582,8 +579,7 @@ InherentImpl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in inherent impl.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -641,8 +637,7 @@ Method::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in method.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -703,8 +698,7 @@ StructStruct::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -747,8 +741,7 @@ UseDeclaration::as_string () const\n   // DEBUG: null pointer check\n   if (use_tree == nullptr)\n     {\n-      fprintf (\n-\tstderr,\n+      rust_debug (\n \t\"something really terrible has gone wrong - null pointer use tree in \"\n \t\"use declaration.\");\n       return \"NULL_POINTER_MARK\";\n@@ -808,9 +801,8 @@ UseTreeList::as_string () const\n       // DEBUG: null pointer check\n       if (*i == nullptr)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"tree in use tree list.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"tree in use tree list.\");\n \t  return \"NULL_POINTER_MARK\";\n \t}\n \n@@ -872,8 +864,7 @@ Enum::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -902,8 +893,7 @@ Enum::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"enum item in enum.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -939,8 +929,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -962,8 +951,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (bound == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"type param bound in trait.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -991,8 +979,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"trait item in trait.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -1025,8 +1012,7 @@ Union::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in union.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -1070,8 +1056,7 @@ Function::as_string () const\n       // DEBUG: null pointer check\n       if (return_type == nullptr)\n \t{\n-\t  fprintf (\n-\t    stderr,\n+\t  rust_debug (\n \t    \"something really terrible has gone wrong - null pointer return \"\n \t    \"type in function.\");\n \t  return \"NULL_POINTER_MARK\";\n@@ -1096,9 +1081,8 @@ Function::as_string () const\n       // DEBUG: null pointer check\n       if (i == e)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"generic param in function item.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"generic param in function item.\");\n \t  return \"NULL_POINTER_MARK\";\n \t}\n \n@@ -1137,8 +1121,7 @@ Function::as_string () const\n   // DEBUG: null pointer check\n   if (function_body == nullptr)\n     {\n-      fprintf (\n-\tstderr,\n+      rust_debug (\n \t\"something really terrible has gone wrong - null pointer function \"\n \t\"body in function.\");\n       return \"NULL_POINTER_MARK\";\n@@ -1192,8 +1175,7 @@ BlockExpr::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (stmt == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"stmt in block expr.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -3581,8 +3563,7 @@ ExternalFunctionItem::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in external function item.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -3678,8 +3659,7 @@ TraitFunctionDecl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait function decl.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -3749,8 +3729,7 @@ TraitMethodDecl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait function decl.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -3821,8 +3800,7 @@ TraitItemType::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (bound == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"type param bound in trait item type.\");\n \t      return \"NULL_POINTER_MARK\";\n@@ -3961,9 +3939,8 @@ ArrayElemsValues::as_string () const\n       // DEBUG: null pointer check\n       if (expr == nullptr)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"expr in array elems values.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"expr in array elems values.\");\n \t  return \"NULL_POINTER_MARK\";\n \t}\n \n@@ -4333,8 +4310,7 @@ MacroParser::parse_meta_item_seq ()\n   if (stream_pos != 0)\n     {\n       // warning?\n-      fprintf (stderr,\n-\t       \"WARNING: stream pos for parse_meta_item_seq is not 0!\\n\");\n+      rust_debug (\"WARNING: stream pos for parse_meta_item_seq is not 0!\");\n     }\n \n   // int i = 0;\n@@ -4540,10 +4516,10 @@ AttrInputMetaItemContainer::check_cfg_predicate (const Session &session) const\n     return false;\n \n   // DEBUG\n-  fprintf (stderr,\n-\t   \"asked to check cfg of attrinputmetaitemcontainer - delegating to \"\n-\t   \"first item. container: '%s'\\n\",\n-\t   as_string ().c_str ());\n+  rust_debug (\n+    \"asked to check cfg of attrinputmetaitemcontainer - delegating to \"\n+    \"first item. container: '%s'\",\n+    as_string ().c_str ());\n \n   return items[0]->check_cfg_predicate (session);\n \n@@ -4735,12 +4711,10 @@ bool\n MetaNameValueStr::check_cfg_predicate (const Session &session) const\n {\n   // DEBUG\n-  fprintf (stderr,\n-\t   \"checked key-value pair for cfg: '%s', '%s' - is%s in target data\\n\",\n-\t   ident.c_str (), str.c_str (),\n-\t   session.options.target_data.has_key_value_pair (ident, str)\n-\t     ? \"\"\n-\t     : \" not\");\n+  rust_debug (\n+    \"checked key-value pair for cfg: '%s', '%s' - is%s in target data\",\n+    ident.c_str (), str.c_str (),\n+    session.options.target_data.has_key_value_pair (ident, str) ? \"\" : \" not\");\n \n   return session.options.target_data.has_key_value_pair (ident, str);\n }\n@@ -4875,10 +4849,10 @@ Attribute::check_cfg_predicate (const Session &session) const\n       || (path.as_string () != \"cfg\" && path.as_string () != \"cfg_attr\"))\n     {\n       // DEBUG message\n-      fprintf (stderr,\n-\t       \"tried to check cfg predicate on attr that either has no input \"\n-\t       \"or invalid path. attr: '%s'\\n\",\n-\t       as_string ().c_str ());\n+      rust_debug (\n+\t\"tried to check cfg predicate on attr that either has no input \"\n+\t\"or invalid path. attr: '%s'\",\n+\tas_string ().c_str ());\n \n       return false;\n     }"}, {"sha": "ad9f8034471ade69f5aa0f2167e9f1dc93650052", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -182,22 +182,22 @@ class Token : public TokenTree, public MacroMatch\n \tstr = lexer_token_ptr->get_str ();\n \n \t// DEBUG\n-\tfprintf (stderr, \"ast token created with str '%s'\\n\", str.c_str ());\n+\trust_debug (\"ast token created with str '%s'\", str.c_str ());\n       }\n     else\n       {\n \t// FIXME: is this returning correct thing?\n \tstr = lexer_token_ptr->get_token_description ();\n \n \t// DEBUG\n-\tfprintf (stderr, \"ast token created with string '%s'\\n\", str.c_str ());\n+\trust_debug (\"ast token created with string '%s'\", str.c_str ());\n       }\n \n     // DEBUG\n     if (lexer_token_ptr->should_have_str () && !lexer_token_ptr->has_str ())\n       {\n-\tfprintf (stderr,\n-\t\t \"BAD: for token '%s', should have string but does not!\\n\",\n+\trust_debug (\n+\t\t \"BAD: for token '%s', should have string but does not!\",\n \t\t lexer_token_ptr->get_token_description ());\n       }\n   }"}, {"sha": "28d14ba462cfb9c2a9bb48355a5576a02a25408d", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -3150,7 +3150,7 @@ MacroExpander::parse_macro_to_meta_item (AST::MacroInvocData &invoc)\n \n   if (converted_input == nullptr)\n     {\n-      fprintf (stderr, \"DEBUG: failed to parse macro to meta item\\n\");\n+      rust_debug (\"DEBUG: failed to parse macro to meta item\");\n       // TODO: do something now? is this an actual error?\n     }\n   else\n@@ -3298,29 +3298,27 @@ MacroExpander::fails_cfg_with_expand (AST::AttrVec &attrs) const\n \n \t  // DEBUG\n \t  if (!attr.is_parsed_to_meta_item ())\n-\t    fprintf (stderr, \"failed to parse attr to meta item, right before \"\n-\t\t\t     \"cfg predicate check\\n\");\n+\t    rust_debug (\"failed to parse attr to meta item, right before \"\n+\t\t\t\"cfg predicate check\");\n \t  else\n-\t    fprintf (stderr, \"attr has been successfully parsed to meta item, \"\n-\t\t\t     \"right before cfg predicate check\\n\");\n+\t    rust_debug (\"attr has been successfully parsed to meta item, \"\n+\t\t\t\"right before cfg predicate check\");\n \n \t  if (!attr.check_cfg_predicate (session))\n \t    {\n \t      // DEBUG\n-\t      fprintf (\n-\t\tstderr,\n-\t\t\"cfg predicate failed for attribute: \\033[0;31m'%s'\\033[0m\\n\",\n+\t      rust_debug (\n+\t\t\"cfg predicate failed for attribute: \\033[0;31m'%s'\\033[0m\",\n \t\tattr.as_string ().c_str ());\n \n \t      return true;\n \t    }\n \t  else\n \t    {\n \t      // DEBUG\n-\t      fprintf (stderr,\n-\t\t       \"cfg predicate succeeded for attribute: \"\n-\t\t       \"\\033[0;31m'%s'\\033[0m\\n\",\n-\t\t       attr.as_string ().c_str ());\n+\t      rust_debug (\"cfg predicate succeeded for attribute: \"\n+\t\t\t  \"\\033[0;31m'%s'\\033[0m\",\n+\t\t\t  attr.as_string ().c_str ());\n \t    }\n \t}\n     }"}, {"sha": "8ccd6fa363cb9c29504e423e4eb25dcb91b22e19", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 36, "deletions": 57, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -151,8 +151,8 @@ Crate::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (stderr, \"something really terrible has gone wrong - \"\n-\t\t\t       \"null pointer item in crate.\");\n+\t      rust_debug (\"something really terrible has gone wrong - \"\n+\t\t\t  \"null pointer item in crate.\");\n \t      return \"nullptr_POINTER_MARK\";\n \t    }\n \n@@ -270,8 +270,8 @@ ModuleBodied::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (stderr, \"something really terrible has gone wrong - \"\n-\t\t\t       \"null pointer item in crate.\");\n+\t      rust_debug (\"something really terrible has gone wrong - \"\n+\t\t\t  \"null pointer item in crate.\");\n \t      return \"nullptr_POINTER_MARK\";\n \t    }\n \n@@ -309,17 +309,17 @@ StaticItem::as_string () const\n   // DEBUG: null pointer check\n   if (type == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer type in static item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer type in static item.\");\n       return \"nullptr_POINTER_MARK\";\n     }\n   str += \"\\n\" + indent_spaces (stay) + \"Type: \" + type->as_string ();\n \n   // DEBUG: null pointer check\n   if (expr == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer expr in static item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer expr in static item.\");\n       return \"nullptr_POINTER_MARK\";\n     }\n   str += \"\\n\" + indent_spaces (stay) + \"Expression: \" + expr->as_string ();\n@@ -362,8 +362,7 @@ TupleStruct::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -410,17 +409,17 @@ ConstantItem::as_string () const\n   // DEBUG: null pointer check\n   if (type == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer type in const item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer type in const item.\");\n       return \"nullptr_POINTER_MARK\";\n     }\n   str += \"\\n  Type: \" + type->as_string ();\n \n   // DEBUG: null pointer check\n   if (const_expr == nullptr)\n     {\n-      fprintf (stderr, \"something really terrible has gone wrong - null \"\n-\t\t       \"pointer expr in const item.\");\n+      rust_debug (\"something really terrible has gone wrong - null \"\n+\t\t  \"pointer expr in const item.\");\n       return \"nullptr_POINTER_MARK\";\n     }\n   str += \"\\n  Expression: \" + const_expr->as_string ();\n@@ -448,8 +447,7 @@ InherentImpl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in inherent impl.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -526,8 +524,7 @@ Method::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in method.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -598,8 +595,7 @@ StructStruct::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -648,8 +644,7 @@ UseDeclaration::as_string () const\n   // DEBUG: null pointer check\n   if (use_tree == nullptr)\n     {\n-      fprintf (\n-\tstderr,\n+      rust_debug (\n \t\"something really terrible has gone wrong - null pointer use tree in \"\n \t\"use declaration.\");\n       return \"nullptr_POINTER_MARK\";\n@@ -709,9 +704,8 @@ UseTreeList::as_string () const\n       // DEBUG: null pointer check\n       if (*i == nullptr)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"tree in use tree list.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"tree in use tree list.\");\n \t  return \"nullptr_POINTER_MARK\";\n \t}\n \n@@ -773,8 +767,7 @@ Enum::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in enum.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -807,8 +800,7 @@ Enum::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"enum item in enum.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -846,8 +838,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -869,8 +860,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (bound == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"type param bound in trait.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -902,8 +892,7 @@ Trait::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (item == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"trait item in trait.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -936,8 +925,7 @@ Union::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in union.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -987,8 +975,7 @@ Function::as_string () const\n       // DEBUG: null pointer check\n       if (return_type == nullptr)\n \t{\n-\t  fprintf (\n-\t    stderr,\n+\t  rust_debug (\n \t    \"something really terrible has gone wrong - null pointer return \"\n \t    \"type in function.\");\n \t  return \"nullptr_POINTER_MARK\";\n@@ -1013,9 +1000,8 @@ Function::as_string () const\n       // DEBUG: null pointer check\n       if (i == e)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"generic param in function item.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"generic param in function item.\");\n \t  return \"nullptr_POINTER_MARK\";\n \t}\n \n@@ -1056,8 +1042,7 @@ Function::as_string () const\n   // DEBUG: null pointer check\n   if (function_body == nullptr)\n     {\n-      fprintf (\n-\tstderr,\n+      rust_debug (\n \t\"something really terrible has gone wrong - null pointer function \"\n \t\"body in function.\");\n       return \"nullptr_POINTER_MARK\";\n@@ -1124,8 +1109,7 @@ BlockExpr::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (stmt == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"stmt in block expr.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -3772,8 +3756,7 @@ ExternalFunctionItem::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in external function item.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -3894,8 +3877,7 @@ TraitFunctionDecl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait function decl.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -3992,8 +3974,7 @@ TraitMethodDecl::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (param == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"generic param in trait function decl.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -4101,8 +4082,7 @@ TraitItemType::as_string () const\n \t  // DEBUG: null pointer check\n \t  if (bound == nullptr)\n \t    {\n-\t      fprintf (\n-\t\tstderr,\n+\t      rust_debug (\n \t\t\"something really terrible has gone wrong - null pointer \"\n \t\t\"type param bound in trait item type.\");\n \t      return \"nullptr_POINTER_MARK\";\n@@ -4253,9 +4233,8 @@ ArrayElemsValues::as_string () const\n       // DEBUG: null pointer check\n       if (expr == nullptr)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"something really terrible has gone wrong - null pointer \"\n-\t\t   \"expr in array elems values.\");\n+\t  rust_debug (\"something really terrible has gone wrong - null pointer \"\n+\t\t      \"expr in array elems values.\");\n \t  return \"nullptr_POINTER_MARK\";\n \t}\n "}, {"sha": "896c2f57299a4e6af379fb474d200802c1053625", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-token.h\"\n #include \"rust-location.h\"\n #include \"rust-hir-map.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n typedef std::string Identifier;\n@@ -127,23 +128,22 @@ class Token : public TokenTree, public MacroMatch\n \tstr = lexer_token_ptr->get_str ();\n \n \t// DEBUG\n-\tfprintf (stderr, \"ast token created with str '%s'\\n\", str.c_str ());\n+\trust_debug (\"ast token created with str '%s'\", str.c_str ());\n       }\n     else\n       {\n \t// FIXME: is this returning correct thing?\n \tstr = lexer_token_ptr->get_token_description ();\n \n \t// DEBUG\n-\tfprintf (stderr, \"ast token created with string '%s'\\n\", str.c_str ());\n+\trust_debug (\"ast token created with string '%s'\", str.c_str ());\n       }\n \n     // DEBUG\n     if (lexer_token_ptr->should_have_str () && !lexer_token_ptr->has_str ())\n       {\n-\tfprintf (stderr,\n-\t\t \"BAD: for token '%s', should have string but does not!\\n\",\n-\t\t lexer_token_ptr->get_token_description ());\n+\trust_debug (\"BAD: for token '%s', should have string but does not!\",\n+\t\t    lexer_token_ptr->get_token_description ());\n       }\n   }\n "}, {"sha": "0090b0170f05186b56d2a10bb115c807d3ba68c4", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -55,8 +55,7 @@ operator+= (std::string &str, Codepoint char32)\n     }\n   else\n     {\n-      fprintf (stderr, \"Invalid unicode codepoint found: '%u' \\n\",\n-\t       char32.value);\n+      rust_debug (\"Invalid unicode codepoint found: '%u' \", char32.value);\n     }\n   return str;\n }\n@@ -185,7 +184,7 @@ Lexer::replace_current_token (TokenPtr replacement)\n {\n   token_queue.replace_current_value (replacement);\n \n-  fprintf (stderr, \"called 'replace_current_token' - this is deprecated\");\n+  rust_debug (\"called 'replace_current_token' - this is deprecated\");\n }\n \n /* shitty anonymous namespace that can only be accessed inside the compilation\n@@ -794,12 +793,12 @@ Lexer::build_token ()\n \n       // DEBUG: check for specific character problems:\n       if (current_char == '0')\n-\tfprintf (stderr, \"'0' uncaught before unexpected character\\n\");\n+\trust_debug (\"'0' uncaught before unexpected character\");\n       else if (current_char == ']')\n-\tfprintf (stderr, \"']' uncaught before unexpected character\\n\");\n+\trust_debug (\"']' uncaught before unexpected character\");\n       else if (current_char == 0x5d)\n-\tfprintf (stderr, \"whatever 0x5d is (not '0' or ']') uncaught before \"\n-\t\t\t \"unexpected character\\n\");\n+\trust_debug (\"whatever 0x5d is (not '0' or ']') uncaught before \"\n+\t\t    \"unexpected character\");\n \n       // didn't match anything so error\n       rust_error_at (loc, \"unexpected character %<%x%>\", current_char);"}, {"sha": "d86bfa91224be1a880d2c63aa875cf58b4b921cd", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 119, "deletions": 144, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -261,10 +261,9 @@ Parser<ManagedTokenSource>::left_binding_power (const_TokenPtr token)\n \t  return LBP_DOT;*/\n \n     case SCOPE_RESOLUTION:\n-      fprintf (\n-\tstderr,\n+      rust_debug (\n \t\"possible error - looked up LBP of scope resolution operator. should \"\n-\t\"be handled elsewhere. \\n\");\n+\t\"be handled elsewhere.\");\n       return LBP_PATH;\n \n     /* Resolved by lookahead HACK that should work with current code. If next\n@@ -609,10 +608,10 @@ Parser<ManagedTokenSource>::parse_simple_path ()\n     {\n       if (seg.is_error ())\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"when parsing simple path, somehow empty path segment was \"\n-\t\t   \"not filtered out. Path begins with '%s' \\n\",\n-\t\t   segments.at (0).as_string ().c_str ());\n+\t  rust_debug (\n+\t    \"when parsing simple path, somehow empty path segment was \"\n+\t    \"not filtered out. Path begins with '%s'\",\n+\t    segments.at (0).as_string ().c_str ());\n \t}\n     }\n \n@@ -917,11 +916,10 @@ Parser<ManagedTokenSource>::parse_delim_token_tree ()\n       lexer.skip_token ();\n \n       // DEBUG\n-      fprintf (stderr,\n-\t       \"finished parsing new delim token tree - peeked token is now \"\n-\t       \"'%s' while t is '%s'\\n\",\n-\t       lexer.peek_token ()->get_token_description (),\n-\t       t->get_token_description ());\n+      rust_debug (\"finished parsing new delim token tree - peeked token is now \"\n+\t\t  \"'%s' while t is '%s'\",\n+\t\t  lexer.peek_token ()->get_token_description (),\n+\t\t  t->get_token_description ());\n \n       return token_tree;\n     }\n@@ -1319,21 +1317,19 @@ Parser<ManagedTokenSource>::parse_macro_item (AST::AttrVec outer_attrs)\n   else\n     {\n       // DEBUG: TODO: remove\n-      fprintf (stderr,\n-\t       \"DEBUG - parse_macro_item called and token is not macro_rules\");\n+      rust_debug (\n+\t\"DEBUG - parse_macro_item called and token is not macro_rules\");\n       if (t->get_id () == IDENTIFIER)\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"just add to last error: token is not macro_rules and is \"\n-\t\t   \"instead '%s'\",\n-\t\t   t->get_str ().c_str ());\n+\t  rust_debug (\"just add to last error: token is not macro_rules and is \"\n+\t\t      \"instead '%s'\",\n+\t\t      t->get_str ().c_str ());\n \t}\n       else\n \t{\n-\t  fprintf (stderr,\n-\t\t   \"just add to last error: token is not macro_rules and is \"\n-\t\t   \"not an identifier either - it is '%s'\",\n-\t\t   t->get_token_description ());\n+\t  rust_debug (\"just add to last error: token is not macro_rules and is \"\n+\t\t      \"not an identifier either - it is '%s'\",\n+\t\t      t->get_token_description ());\n \t}\n \n       return parse_macro_invocation_semi (std::move (outer_attrs));\n@@ -1375,7 +1371,7 @@ Parser<ManagedTokenSource>::parse_macro_rules_def (AST::AttrVec outer_attrs)\n   Identifier rule_name = ident_tok->get_str ();\n \n   // DEBUG\n-  fprintf (stderr, \"in macro rules def, about to parse parens.\\n\");\n+  rust_debug (\"in macro rules def, about to parse parens.\");\n \n   // save delim type to ensure it is reused later\n   AST::DelimType delim_type = AST::PARENS;\n@@ -1421,7 +1417,7 @@ Parser<ManagedTokenSource>::parse_macro_rules_def (AST::AttrVec outer_attrs)\n   macro_rules.push_back (std::move (initial_rule));\n \n   // DEBUG\n-  fprintf (stderr, \"successfully pushed back initial macro rule\\n\");\n+  rust_debug (\"successfully pushed back initial macro rule\");\n \n   t = lexer.peek_token ();\n   // parse macro rules\n@@ -1434,9 +1430,8 @@ Parser<ManagedTokenSource>::parse_macro_rules_def (AST::AttrVec outer_attrs)\n       if (token_id_matches_delims (lexer.peek_token ()->get_id (), delim_type))\n \t{\n \t  // DEBUG\n-\t  fprintf (\n-\t    stderr,\n-\t    \"broke out of parsing macro rules loop due to finding delim\\n\");\n+\t  rust_debug (\n+\t    \"broke out of parsing macro rules loop due to finding delim\");\n \n \t  break;\n \t}\n@@ -1455,7 +1450,7 @@ Parser<ManagedTokenSource>::parse_macro_rules_def (AST::AttrVec outer_attrs)\n       macro_rules.push_back (std::move (rule));\n \n       // DEBUG\n-      fprintf (stderr, \"successfully pushed back another macro rule\\n\");\n+      rust_debug (\"successfully pushed back another macro rule\");\n \n       t = lexer.peek_token ();\n     }\n@@ -1595,10 +1590,9 @@ Parser<ManagedTokenSource>::parse_macro_invocation_semi (\n \t}\n \n       // DEBUG:\n-      fprintf (stderr,\n-\t       \"skipped token is '%s', next token (current peek) is '%s'\\n\",\n-\t       t->get_token_description (),\n-\t       lexer.peek_token ()->get_token_description ());\n+      rust_debug (\"skipped token is '%s', next token (current peek) is '%s'\",\n+\t\t  t->get_token_description (),\n+\t\t  lexer.peek_token ()->get_token_description ());\n \n       return std::unique_ptr<AST::MacroInvocationSemi> (\n \tnew AST::MacroInvocationSemi (std::move (invoc_data),\n@@ -1688,7 +1682,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n   AST::DelimType delim_type = AST::PARENS;\n \n   // DEBUG\n-  fprintf (stderr, \"begun parsing macro matcher\\n\");\n+  rust_debug (\"begun parsing macro matcher\");\n \n   // Map tokens to DelimType\n   const_TokenPtr t = lexer.peek_token ();\n@@ -1736,7 +1730,7 @@ Parser<ManagedTokenSource>::parse_macro_matcher ()\n       matches.push_back (std::move (match));\n \n       // DEBUG\n-      fprintf (stderr, \"pushed back a match in macro matcher\\n\");\n+      rust_debug (\"pushed back a match in macro matcher\");\n \n       t = lexer.peek_token ();\n     }\n@@ -2638,20 +2632,19 @@ Parser<ManagedTokenSource>::parse_generic_params_in_angles ()\n   lexer.skip_token ();\n \n   // DEBUG:\n-  fprintf (stderr, \"skipped left angle in generic param\\n\");\n+  rust_debug (\"skipped left angle in generic param\");\n \n   std::vector<std::unique_ptr<AST::GenericParam>> generic_params\n     = parse_generic_params (is_right_angle_tok);\n \n   // DEBUG:\n-  fprintf (stderr,\n-\t   \"finished parsing actual generic params (i.e. inside angles)\\n\");\n+  rust_debug (\"finished parsing actual generic params (i.e. inside angles)\");\n \n   if (!skip_generics_right_angle ())\n     {\n       // DEBUG\n-      fprintf (stderr, \"failed to skip generics right angle - returning empty \"\n-\t\t       \"generic params\\n\");\n+      rust_debug (\"failed to skip generics right angle - returning empty \"\n+\t\t  \"generic params\");\n \n       return std::vector<std::unique_ptr<AST::GenericParam>> ();\n     }\n@@ -2671,8 +2664,7 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n   // thus, parse them all here\n \n   // DEBUG\n-  fprintf (stderr,\n-\t   \"starting to parse generic params (inside angle brackets)\\n\");\n+  rust_debug (\"starting to parse generic params (inside angle brackets)\");\n \n   /* HACK: used to retain attribute data if a lifetime param is tentatively\n    * parsed but it turns out to be type param */\n@@ -2693,10 +2685,9 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n \t  parsed_outer_attr = std::move (outer_attr);\n \n \t  // DEBUG\n-\t  fprintf (\n-\t    stderr,\n+\t  rust_debug (\n \t    \"broke from parsing lifetime params as next token isn't lifetime - \"\n-\t    \"saved attribute\\n\");\n+\t    \"saved attribute\");\n \n \t  break;\n \t}\n@@ -2705,7 +2696,7 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n       AST::Lifetime lifetime = parse_lifetime ();\n \n       // DEBUG\n-      fprintf (stderr, \"parsed lifetime in lifetime params\\n\");\n+      rust_debug (\"parsed lifetime in lifetime params\");\n \n       // parse optional bounds\n       std::vector<AST::Lifetime> lifetime_bounds;\n@@ -2737,8 +2728,8 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n       && !parsed_outer_attr.is_empty ())\n     {\n       // DEBUG\n-      fprintf (stderr, \"as parsed outer attr isn't empty, started parsing type \"\n-\t\t       \"param reimpl\\n\");\n+      rust_debug (\"as parsed outer attr isn't empty, started parsing type \"\n+\t\t  \"param reimpl\");\n \n       // reimpl as type param definitely exists\n       const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n@@ -2796,9 +2787,8 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n     }\n \n   // DEBUG\n-  fprintf (\n-    stderr,\n-    \"about to start parsing normally-parsed type params in generic params\\n\");\n+  rust_debug (\n+    \"about to start parsing normally-parsed type params in generic params\");\n \n   // parse rest of type params - reimpl due to right angle tokens\n   t = lexer.peek_token ();\n@@ -2816,7 +2806,7 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n \t}\n \n       // DEBUG\n-      fprintf (stderr, \"successfully parsed type param\\n\");\n+      rust_debug (\"successfully parsed type param\");\n \n       generic_params.push_back (std::move (type_param));\n \n@@ -3625,8 +3615,8 @@ Parser<ManagedTokenSource>::parse_for_lifetimes ()\n   if (!skip_generics_right_angle ())\n     {\n       // DEBUG\n-      fprintf (stderr, \"failed to skip generics right angle after (supposedly) \"\n-\t\t       \"finished parsing where clause items\\n\");\n+      rust_debug (\"failed to skip generics right angle after (supposedly) \"\n+\t\t  \"finished parsing where clause items\");\n       // ok, well this gets called.\n \n       // skip after somewhere?\n@@ -5068,7 +5058,7 @@ Parser<ManagedTokenSource>::parse_impl (AST::Visibility vis,\n \t}\n \n       // DEBUG\n-      fprintf (stderr, \"successfully parsed inherent impl\\n\");\n+      rust_debug (\"successfully parsed inherent impl\");\n \n       impl_items.shrink_to_fit ();\n \n@@ -5135,10 +5125,10 @@ Parser<ManagedTokenSource>::parse_impl (AST::Visibility vis,\n \t  t = lexer.peek_token ();\n \n \t  // DEBUG\n-\t  fprintf (stderr, \"successfully parsed a trait impl item\\n\");\n+\t  rust_debug (\"successfully parsed a trait impl item\");\n \t}\n       // DEBUG\n-      fprintf (stderr, \"successfully finished trait impl items\\n\");\n+      rust_debug (\"successfully finished trait impl items\");\n \n       if (!skip_token (RIGHT_CURLY))\n \t{\n@@ -5147,7 +5137,7 @@ Parser<ManagedTokenSource>::parse_impl (AST::Visibility vis,\n \t}\n \n       // DEBUG\n-      fprintf (stderr, \"successfully parsed trait impl\\n\");\n+      rust_debug (\"successfully parsed trait impl\");\n \n       impl_items.shrink_to_fit ();\n \n@@ -5525,18 +5515,16 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n   Identifier ident = ident_tok->get_str ();\n \n   // DEBUG:\n-  fprintf (\n-    stderr,\n-    \"about to start parsing generic params in trait impl function or method\\n\");\n+  rust_debug (\n+    \"about to start parsing generic params in trait impl function or method\");\n \n   // parse generic params\n   std::vector<std::unique_ptr<AST::GenericParam>> generic_params\n     = parse_generic_params_in_angles ();\n \n   // DEBUG:\n-  fprintf (\n-    stderr,\n-    \"finished parsing generic params in trait impl function or method\\n\");\n+  rust_debug (\n+    \"finished parsing generic params in trait impl function or method\");\n \n   if (!skip_token (LEFT_PAREN))\n     {\n@@ -5561,14 +5549,12 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n \t}\n \n       // DEBUG\n-      fprintf (stderr,\n-\t       \"successfully parsed self param in method trait impl item\\n\");\n+      rust_debug (\"successfully parsed self param in method trait impl item\");\n     }\n \n   // DEBUG\n-  fprintf (\n-    stderr,\n-    \"started to parse function params in function or method trait impl item\\n\");\n+  rust_debug (\n+    \"started to parse function params in function or method trait impl item\");\n \n   // parse trait function params (only if next token isn't right paren)\n   std::vector<AST::FunctionParam> function_params;\n@@ -5591,8 +5577,8 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n     }\n \n   // DEBUG\n-  fprintf (stderr, \"successfully parsed function params in function or method \"\n-\t\t   \"trait impl item\\n\");\n+  rust_debug (\"successfully parsed function params in function or method \"\n+\t      \"trait impl item\");\n \n   if (!skip_token (RIGHT_PAREN))\n     {\n@@ -5604,17 +5590,15 @@ Parser<ManagedTokenSource>::parse_trait_impl_function_or_method (\n   std::unique_ptr<AST::Type> return_type = parse_function_return_type ();\n \n   // DEBUG\n-  fprintf (\n-    stderr,\n-    \"successfully parsed return type in function or method trait impl item\\n\");\n+  rust_debug (\n+    \"successfully parsed return type in function or method trait impl item\");\n \n   // parse where clause (optional)\n   AST::WhereClause where_clause = parse_where_clause ();\n \n   // DEBUG\n-  fprintf (\n-    stderr,\n-    \"successfully parsed where clause in function or method trait impl item\\n\");\n+  rust_debug (\n+    \"successfully parsed where clause in function or method trait impl item\");\n \n   // parse function definition (in block) - semicolon not allowed\n   if (lexer.peek_token ()->get_id () == SEMICOLON)\n@@ -8513,7 +8497,7 @@ Parser<ManagedTokenSource>::parse_match_arm ()\n   AST::AttrVec outer_attrs = parse_outer_attributes ();\n \n   // DEBUG\n-  fprintf (stderr, \"about to start parsing match arm patterns\\n\");\n+  rust_debug (\"about to start parsing match arm patterns\");\n \n   // break early if find right curly\n   if (lexer.peek_token ()->get_id () == RIGHT_CURLY)\n@@ -8536,7 +8520,7 @@ Parser<ManagedTokenSource>::parse_match_arm ()\n     }\n \n   // DEBUG\n-  fprintf (stderr, \"successfully parsed match arm patterns\\n\");\n+  rust_debug (\"successfully parsed match arm patterns\");\n \n   // parse match arm guard expr if it exists\n   std::unique_ptr<AST::Expr> guard_expr = nullptr;\n@@ -8557,7 +8541,7 @@ Parser<ManagedTokenSource>::parse_match_arm ()\n     }\n \n   // DEBUG\n-  fprintf (stderr, \"successfully parsed match arm\\n\");\n+  rust_debug (\"successfully parsed match arm\");\n \n   return AST::MatchArm (std::move (match_arm_patterns), std::move (guard_expr),\n \t\t\tstd::move (outer_attrs));\n@@ -8593,7 +8577,7 @@ Parser<ManagedTokenSource>::parse_match_arm_patterns (TokenId end_token_id)\n   patterns.push_back (std::move (initial_pattern));\n \n   // DEBUG\n-  fprintf (stderr, \"successfully parsed initial match arm pattern\\n\");\n+  rust_debug (\"successfully parsed initial match arm pattern\");\n \n   // parse new patterns as long as next char is '|'\n   const_TokenPtr t = lexer.peek_token ();\n@@ -10331,7 +10315,7 @@ Parser<ManagedTokenSource>::parse_range_pattern_bound ()\n \t  range_lower_locus));\n     case FLOAT_LITERAL:\n       lexer.skip_token ();\n-      fprintf (stderr, \"warning: used deprecated float range pattern bound\");\n+      rust_debug (\"warning: used deprecated float range pattern bound\");\n       return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \tnew AST::RangePatternBoundLiteral (\n \t  AST::Literal (range_lower->get_str (), AST::Literal::FLOAT,\n@@ -10351,8 +10335,7 @@ Parser<ManagedTokenSource>::parse_range_pattern_bound ()\n \t      range_lower_locus, true));\n \tcase FLOAT_LITERAL:\n \t  lexer.skip_token (1);\n-\t  fprintf (stderr,\n-\t\t   \"warning: used deprecated float range pattern bound\");\n+\t  rust_debug (\"warning: used deprecated float range pattern bound\");\n \t  return std::unique_ptr<AST::RangePatternBoundLiteral> (\n \t    new AST::RangePatternBoundLiteral (\n \t      AST::Literal (range_lower->get_str (), AST::Literal::FLOAT,\n@@ -10914,7 +10897,7 @@ Parser<ManagedTokenSource>::parse_identifier_pattern ()\n       lexer.skip_token ();\n \n       // DEBUG\n-      fprintf (stderr, \"parsed ref in identifier pattern\\n\");\n+      rust_debug (\"parsed ref in identifier pattern\");\n     }\n \n   bool has_mut = false;\n@@ -10934,7 +10917,7 @@ Parser<ManagedTokenSource>::parse_identifier_pattern ()\n   Identifier ident = ident_tok->get_str ();\n \n   // DEBUG\n-  fprintf (stderr, \"parsed identifier in identifier pattern\\n\");\n+  rust_debug (\"parsed identifier in identifier pattern\");\n \n   // parse optional pattern binding thing\n   std::unique_ptr<AST::Pattern> bind_pattern = nullptr;\n@@ -10955,7 +10938,7 @@ Parser<ManagedTokenSource>::parse_identifier_pattern ()\n     }\n \n   // DEBUG\n-  fprintf (stderr, \"about to return identifier pattern\\n\");\n+  rust_debug (\"about to return identifier pattern\");\n \n   return std::unique_ptr<AST::IdentifierPattern> (\n     new AST::IdentifierPattern (std::move (ident), locus, has_ref, has_mut,\n@@ -10993,7 +10976,7 @@ Parser<ManagedTokenSource>::parse_ident_leading_pattern ()\n \tlexer.skip_token ();\n \n \t// DEBUG\n-\tfprintf (stderr, \"parsing tuple struct pattern\\n\");\n+\trust_debug (\"parsing tuple struct pattern\");\n \n \t// check if empty tuple\n \tif (lexer.peek_token ()->get_id () == RIGHT_PAREN)\n@@ -11016,15 +10999,15 @@ Parser<ManagedTokenSource>::parse_ident_leading_pattern ()\n \t  }\n \n \t// DEBUG\n-\tfprintf (stderr, \"successfully parsed tuple struct items\\n\");\n+\trust_debug (\"successfully parsed tuple struct items\");\n \n \tif (!skip_token (RIGHT_PAREN))\n \t  {\n \t    return nullptr;\n \t  }\n \n \t// DEBUG\n-\tfprintf (stderr, \"successfully parsed tuple struct pattern\\n\");\n+\trust_debug (\"successfully parsed tuple struct pattern\");\n \n \treturn std::unique_ptr<AST::TupleStructPattern> (\n \t  new AST::TupleStructPattern (std::move (path), std::move (items)));\n@@ -11042,7 +11025,7 @@ Parser<ManagedTokenSource>::parse_ident_leading_pattern ()\n \t  }\n \n \t// DEBUG\n-\tfprintf (stderr, \"successfully parsed struct pattern\\n\");\n+\trust_debug (\"successfully parsed struct pattern\");\n \n \treturn std::unique_ptr<AST::StructPattern> (\n \t  new AST::StructPattern (std::move (path), std::move (elems)));\n@@ -11114,7 +11097,7 @@ Parser<ManagedTokenSource>::parse_tuple_struct_items ()\n   std::vector<std::unique_ptr<AST::Pattern>> lower_patterns;\n \n   // DEBUG\n-  fprintf (stderr, \"started parsing tuple struct items\\n\");\n+  rust_debug (\"started parsing tuple struct items\");\n \n   // check for '..' at front\n   if (lexer.peek_token ()->get_id () == DOT_DOT)\n@@ -11123,7 +11106,7 @@ Parser<ManagedTokenSource>::parse_tuple_struct_items ()\n       lexer.skip_token ();\n \n       // DEBUG\n-      fprintf (stderr, \"'..' at front in tuple struct items detected\\n\");\n+      rust_debug (\"'..' at front in tuple struct items detected\");\n \n       std::vector<std::unique_ptr<AST::Pattern>> upper_patterns;\n \n@@ -11152,9 +11135,8 @@ Parser<ManagedTokenSource>::parse_tuple_struct_items ()\n \t}\n \n       // DEBUG\n-      fprintf (\n-\tstderr,\n-\t\"finished parsing tuple struct items ranged (upper/none only)\\n\");\n+      rust_debug (\n+\t\"finished parsing tuple struct items ranged (upper/none only)\");\n \n       return std::unique_ptr<AST::TupleStructItemsRange> (\n \tnew AST::TupleStructItemsRange (std::move (lower_patterns),\n@@ -11166,7 +11148,7 @@ Parser<ManagedTokenSource>::parse_tuple_struct_items ()\n   while (t->get_id () != RIGHT_PAREN && t->get_id () != DOT_DOT)\n     {\n       // DEBUG\n-      fprintf (stderr, \"about to parse pattern in tuple struct items\\n\");\n+      rust_debug (\"about to parse pattern in tuple struct items\");\n \n       // parse pattern, which is required\n       std::unique_ptr<AST::Pattern> pattern = parse_pattern ();\n@@ -11181,13 +11163,13 @@ Parser<ManagedTokenSource>::parse_tuple_struct_items ()\n       lower_patterns.push_back (std::move (pattern));\n \n       // DEBUG\n-      fprintf (stderr, \"successfully parsed pattern in tuple struct items\\n\");\n+      rust_debug (\"successfully parsed pattern in tuple struct items\");\n \n       if (lexer.peek_token ()->get_id () != COMMA)\n \t{\n \t  // DEBUG\n-\t  fprintf (stderr, \"broke out of parsing patterns in tuple struct \"\n-\t\t\t   \"items as no comma \\n\");\n+\t  rust_debug (\"broke out of parsing patterns in tuple struct \"\n+\t\t      \"items as no comma\");\n \n \t  break;\n \t}\n@@ -12321,8 +12303,7 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n   if (expr == nullptr)\n     {\n       // DEBUG\n-      fprintf (stderr,\n-\t       \"null denotation is null; returning null for parse_expr\\n\");\n+      rust_debug (\"null denotation is null; returning null for parse_expr\");\n       return nullptr;\n     }\n \n@@ -12338,8 +12319,7 @@ Parser<ManagedTokenSource>::parse_expr (int right_binding_power,\n       if (expr == nullptr)\n \t{\n \t  // DEBUG\n-\t  fprintf (stderr,\n-\t\t   \"left denotation is null; returning null for parse_expr\\n\");\n+\t  rust_debug (\"left denotation is null; returning null for parse_expr\");\n \n \t  return nullptr;\n \t}\n@@ -12378,15 +12358,15 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n     {\n       case IDENTIFIER: {\n \t// DEBUG\n-\tfprintf (stderr, \"beginning null denotation identifier handling\\n\");\n+\trust_debug (\"beginning null denotation identifier handling\");\n \n \t/* best option: parse as path, then extract identifier, macro,\n \t * struct/enum, or just path info from it */\n \tAST::PathInExpression path = parse_path_in_expression_pratt (tok);\n \n \t// DEBUG:\n-\tfprintf (stderr, \"finished null denotation identifier path parsing - \"\n-\t\t\t \"next is branching \\n\");\n+\trust_debug (\"finished null denotation identifier path parsing - \"\n+\t\t    \"next is branching\");\n \n \t// branch on next token\n \tconst_TokenPtr t = lexer.peek_token ();\n@@ -12411,15 +12391,15 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t       *  path '{' ident ':' [not a type]\n \t       * otherwise, assume block expr and thus path */\n \t      // DEBUG\n-\t      fprintf (stderr, \"values of lookahead: '%s' '%s' '%s' '%s' \\n\",\n-\t\t       lexer.peek_token (1)->get_token_description (),\n-\t\t       lexer.peek_token (2)->get_token_description (),\n-\t\t       lexer.peek_token (3)->get_token_description (),\n-\t\t       lexer.peek_token (4)->get_token_description ());\n+\t      rust_debug (\"values of lookahead: '%s' '%s' '%s' '%s' \",\n+\t\t\t  lexer.peek_token (1)->get_token_description (),\n+\t\t\t  lexer.peek_token (2)->get_token_description (),\n+\t\t\t  lexer.peek_token (3)->get_token_description (),\n+\t\t\t  lexer.peek_token (4)->get_token_description ());\n \n-\t      fprintf (stderr, \"can be struct expr: '%s', not a block: '%s'\\n\",\n-\t\t       restrictions.can_be_struct_expr ? \"true\" : \"false\",\n-\t\t       not_a_block ? \"true\" : \"false\");\n+\t      rust_debug (\"can be struct expr: '%s', not a block: '%s'\",\n+\t\t\t  restrictions.can_be_struct_expr ? \"true\" : \"false\",\n+\t\t\t  not_a_block ? \"true\" : \"false\");\n \n \t      // struct/enum expr struct\n \t      if (!restrictions.can_be_struct_expr && !not_a_block)\n@@ -12668,18 +12648,18 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n     case CRATE:\n       case SUPER: {\n \t// DEBUG\n-\tfprintf (stderr, \"beginning null denotation \"\n-\t\t\t \"self/self-alias/dollar/crate/super handling\\n\");\n+\trust_debug (\"beginning null denotation \"\n+\t\t    \"self/self-alias/dollar/crate/super handling\");\n \n \t/* best option: parse as path, then extract identifier, macro,\n \t * struct/enum, or just path info from it */\n \tAST::PathInExpression path = parse_path_in_expression_pratt (tok);\n \n \t// DEBUG\n-\tfprintf (stderr,\n-\t\t \"just finished parsing path (going to disambiguate) - peeked \"\n-\t\t \"token is '%s'\\n\",\n-\t\t lexer.peek_token ()->get_token_description ());\n+\trust_debug (\n+\t  \"just finished parsing path (going to disambiguate) - peeked \"\n+\t  \"token is '%s'\",\n+\t  lexer.peek_token ()->get_token_description ());\n \n \t// HACK: always make \"self\" by itself a path (regardless of next tokens)\n \tif (tok->get_id () == SELF && path.is_single_segment ())\n@@ -12700,8 +12680,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t\t\t\t\t\t   std::move (outer_attrs));\n \t    case LEFT_CURLY: {\n \t      // struct/enum expr struct\n-\t      fprintf (stderr, \"can_be_struct_expr: %s\\n\",\n-\t\t       restrictions.can_be_struct_expr ? \"true\" : \"false\");\n+\t      rust_debug (\"can_be_struct_expr: %s\",\n+\t\t\t  restrictions.can_be_struct_expr ? \"true\" : \"false\");\n \n \t      bool not_a_block\n \t\t= lexer.peek_token (1)->get_id () == IDENTIFIER\n@@ -14288,7 +14268,7 @@ Parser<ManagedTokenSource>::parse_macro_invocation_partial (\n \n   AST::DelimTokenTree tok_tree = parse_delim_token_tree ();\n \n-  fprintf (stderr, \"successfully parsed macro invocation (via partial)\\n\");\n+  rust_debug (\"successfully parsed macro invocation (via partial)\");\n \n   Location macro_locus = converted_path.get_locus ();\n \n@@ -14351,31 +14331,30 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n \t      }\n \n \t    // DEBUG:\n-\t    fprintf (stderr,\n-\t\t     \"struct/enum expr field validated to not be null \\n\");\n+\t    rust_debug (\"struct/enum expr field validated to not be null\");\n \n \t    fields.push_back (std::move (field));\n \n \t    // DEBUG:\n-\t    fprintf (stderr, \"struct/enum expr field pushed back \\n\");\n+\t    rust_debug (\"struct/enum expr field pushed back\");\n \n \t    if (lexer.peek_token ()->get_id () != COMMA)\n \t      {\n \t\t// DEBUG:\n-\t\tfprintf (stderr, \"lack of comma detected in struct/enum expr \"\n-\t\t\t\t \"fields - break \\n\");\n+\t\trust_debug (\"lack of comma detected in struct/enum expr \"\n+\t\t\t    \"fields - break\");\n \t\tbreak;\n \t      }\n \t    lexer.skip_token ();\n \n \t    // DEBUG:\n-\t    fprintf (stderr, \"struct/enum expr fields comma skipped \\n\");\n+\t    rust_debug (\"struct/enum expr fields comma skipped \");\n \n \t    t = lexer.peek_token ();\n \t  }\n \n \t// DEBUG:\n-\tfprintf (stderr, \"struct/enum expr about to parse struct base \\n\");\n+\trust_debug (\"struct/enum expr about to parse struct base \");\n \n \t// parse struct base if it exists\n \tAST::StructBase struct_base = AST::StructBase::error ();\n@@ -14396,13 +14375,12 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n \t      }\n \n \t    // DEBUG:\n-\t    fprintf (stderr,\n-\t\t     \"struct/enum expr - parsed and validated base expr \\n\");\n+\t    rust_debug (\"struct/enum expr - parsed and validated base expr\");\n \n \t    struct_base = AST::StructBase (std::move (base_expr));\n \n \t    // DEBUG:\n-\t    fprintf (stderr, \"assigned struct base to new struct base \\n\");\n+\t    rust_debug (\"assigned struct base to new struct base \");\n \t  }\n \n \tif (!skip_token (RIGHT_CURLY))\n@@ -14411,9 +14389,8 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n \t  }\n \n \t// DEBUG:\n-\tfprintf (\n-\t  stderr,\n-\t  \"struct/enum expr skipped right curly - done and ready to return \\n\");\n+\trust_debug (\n+\t  \"struct/enum expr skipped right curly - done and ready to return\");\n \n \treturn std::unique_ptr<AST::StructExprStructFields> (\n \t  new AST::StructExprStructFields (std::move (path), std::move (fields),\n@@ -14500,8 +14477,8 @@ Parser<ManagedTokenSource>::parse_path_in_expression_pratt (const_TokenPtr tok)\n   // HACK-y way of making up for pratt-parsing consuming first token\n \n   // DEBUG\n-  fprintf (stderr, \"current peek token when starting path pratt parse: '%s'\\n\",\n-\t   lexer.peek_token ()->get_token_description ());\n+  rust_debug (\"current peek token when starting path pratt parse: '%s'\",\n+\t      lexer.peek_token ()->get_token_description ());\n \n   // create segment vector\n   std::vector<AST::PathExprSegment> segments;\n@@ -14562,7 +14539,7 @@ Parser<ManagedTokenSource>::parse_path_in_expression_pratt (const_TokenPtr tok)\n       // don't necessarily throw error but yeah\n \n       // DEBUG\n-      fprintf (stderr, \"initial segment is error - returning null\\n\");\n+      rust_debug (\"initial segment is error - returning null\");\n \n       return AST::PathInExpression::create_error ();\n     }\n@@ -14593,9 +14570,8 @@ Parser<ManagedTokenSource>::parse_path_in_expression_pratt (const_TokenPtr tok)\n     }\n \n   // DEBUG:\n-  fprintf (\n-    stderr,\n-    \"current token (just about to return path to null denotation): '%s'\\n\",\n+  rust_debug (\n+    \"current token (just about to return path to null denotation): '%s'\",\n     lexer.peek_token ()->get_token_description ());\n \n   return AST::PathInExpression (std::move (segments), {}, tok->get_locus (),\n@@ -14745,8 +14721,7 @@ Parser<ManagedTokenSource>::parse_tuple_index_expr_float (\n     return nullptr;\n \n   // DEBUG:\n-  fprintf (stderr, \"exact string form of float: '%s'\\n\",\n-\t   tok->get_str ().c_str ());\n+  rust_debug (\"exact string form of float: '%s'\", tok->get_str ().c_str ());\n \n   // get float string and remove dot and initial 0\n   std::string index_str = tok->get_str ();"}, {"sha": "4b139ef18f7d8e6a6c19e74f61e3095c65aa2dc3", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -31,6 +31,7 @@\n #include \"convert.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n+#include \"rust-diagnostics.h\"\n \n #include <mpfr.h>\n // note: header files must be in this order or else forward declarations don't\n@@ -165,7 +166,7 @@ grs_langhook_init_options_struct (struct gcc_options * /* opts */)\n static void\n grs_langhook_parse_file (void)\n {\n-  fprintf (stderr, \"Preparing to parse files. \\n\");\n+  rust_debug (\"Preparing to parse files. \");\n \n   session.parse_files (num_in_fnames, in_fnames);\n }"}, {"sha": "14ef9879061bdb23e58b2ee38fed5e8ca89bc589", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -142,9 +142,8 @@ Session::enable_features ()\n {\n   bool has_target_crt_static = false;\n \n-  fprintf (\n-    stderr,\n-    \"ERROR: Somewhere in call chain Session::enable_features is called.\\n\");\n+  rust_debug (\n+    \"ERROR: Somewhere in call chain Session::enable_features is called.\");\n \n   if (has_target_crt_static)\n     {\n@@ -456,7 +455,7 @@ Session::parse_files (int num_files, const char **files)\n \n   for (int i = 0; i < num_files; i++)\n     {\n-      fprintf (stderr, \"Attempting to parse file: %s\\n\", files[i]);\n+      rust_debug (\"Attempting to parse file: %s\", files[i]);\n       parse_file (files[i]);\n     }\n   /* TODO: should semantic analysis be dealed with here? or per file? for now,\n@@ -517,33 +516,33 @@ Session::parse_file (const char *filename)\n    * maybe buffered lints)\n    *  TODO not done */\n \n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY PARSED CRATE \\n\\033[0m\");\n+  rust_debug (\"\\033[0;31mSUCCESSFULLY PARSED CRATE \\033[0m\");\n \n   // register plugins pipeline stage\n   register_plugins (parsed_crate);\n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY REGISTERED PLUGINS \\n\\033[0m\");\n+  rust_debug (\"\\033[0;31mSUCCESSFULLY REGISTERED PLUGINS \\033[0m\");\n   if (options.dump_option_enabled (CompileOptions::REGISTER_PLUGINS_DUMP))\n     {\n       // TODO: what do I dump here?\n     }\n \n   // injection pipeline stage\n   injection (parsed_crate);\n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY FINISHED INJECTION \\n\\033[0m\");\n+  rust_debug (\"\\033[0;31mSUCCESSFULLY FINISHED INJECTION \\033[0m\");\n   if (options.dump_option_enabled (CompileOptions::INJECTION_DUMP))\n     {\n       // TODO: what do I dump here? injected crate names?\n     }\n \n   // expansion pipeline stage\n   expansion (parsed_crate);\n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY FINISHED EXPANSION \\n\\033[0m\");\n+  rust_debug (\"\\033[0;31mSUCCESSFULLY FINISHED EXPANSION \\033[0m\");\n   if (options.dump_option_enabled (CompileOptions::EXPANSION_DUMP))\n     {\n       // dump AST with expanded stuff\n-      fprintf (stderr, \"BEGIN POST-EXPANSION AST DUMP\\n\");\n+      rust_debug (\"BEGIN POST-EXPANSION AST DUMP\");\n       dump_ast_expanded (parser, parsed_crate);\n-      fprintf (stderr, \"END POST-EXPANSION AST DUMP\\n\");\n+      rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n \n   // resolution pipeline stage\n@@ -652,7 +651,7 @@ Session::debug_dump_load_crates (Parser<Lexer> &parser)\n void\n Session::register_plugins (AST::Crate &crate ATTRIBUTE_UNUSED)\n {\n-  fprintf (stderr, \"ran register_plugins (with no body)\\n\");\n+  rust_debug (\"ran register_plugins (with no body)\");\n }\n \n // TODO: move somewhere else\n@@ -671,7 +670,7 @@ contains_name (const AST::AttrVec &attrs, std::string name)\n void\n Session::injection (AST::Crate &crate)\n {\n-  fprintf (stderr, \"started injection\\n\");\n+  rust_debug (\"started injection\");\n \n   // lint checks in future maybe?\n \n@@ -792,13 +791,13 @@ Session::injection (AST::Crate &crate)\n    * type is not specified, so maybe just do that. Valid crate types: bin lib\n    * dylib staticlib cdylib rlib proc-macro */\n \n-  fprintf (stderr, \"finished injection\\n\");\n+  rust_debug (\"finished injection\");\n }\n \n void\n Session::expansion (AST::Crate &crate)\n {\n-  fprintf (stderr, \"started expansion\\n\");\n+  rust_debug (\"started expansion\");\n \n   /* rustc has a modification to windows PATH temporarily here, which may end up\n    * being required */\n@@ -821,7 +820,7 @@ Session::expansion (AST::Crate &crate)\n \n   // maybe create macro crate if not rustdoc\n \n-  fprintf (stderr, \"finished expansion\\n\");\n+  rust_debug (\"finished expansion\");\n }\n \n void\n@@ -997,8 +996,7 @@ TargetOptions::enable_implicit_feature_reqs (std::string feature)\n     {\n       insert_key_value_pair (\"target_feature\", feature);\n \n-      fprintf (stderr, \"had to implicitly enable feature '%s'!\",\n-\t       feature.c_str ());\n+      rust_debug (\"had to implicitly enable feature '%s'!\", feature.c_str ());\n     }\n }\n "}, {"sha": "dfab81d7564f82be0ecfe761d87b0934c318238e", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/665df329a2ad60580ab593f6cbd646aa55927a37/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=665df329a2ad60580ab593f6cbd646aa55927a37", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-backend.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n namespace TyTy {\n@@ -142,8 +143,8 @@ class BaseType\n \n   void debug () const\n   {\n-    fprintf (stderr, \"[%p] %s\\n\", static_cast<const void *> (this),\n-\t     debug_str ().c_str ());\n+    rust_debug (\"[%p] %s\", static_cast<const void *> (this),\n+\t\tdebug_str ().c_str ());\n   }\n \n protected:\n@@ -319,7 +320,7 @@ class StructFieldType\n \n   StructFieldType *clone () const;\n \n-  void debug () const { fprintf (stderr, \"%s\\n\", as_string ().c_str ()); }\n+  void debug () const { rust_debug (\"%s\", as_string ().c_str ()); }\n \n private:\n   HirId ref;"}]}