{"sha": "827f64135957ce21617cd0345508077439fa29d8", "node_id": "C_kwDOANBUbNoAKDgyN2Y2NDEzNTk1N2NlMjE2MTdjZDAzNDU1MDgwNzc0MzlmYTI5ZDg", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-18T11:03:42Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-22T14:05:52Z"}, "message": "jobserver: detect properly O_NONBLOCK\n\n\tPR lto/106700\n\ngcc/ChangeLog:\n\n\t* configure.ac: Detect O_NONBLOCK flag for open.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* opts-common.cc (jobserver_info::connect): Set is_connected\n\t  properly based on O_NONBLOCK.\n\t* opts-jobserver.h (struct jobserver_info): Add is_connected\n\t  member variable.\n\ngcc/lto/ChangeLog:\n\n\t* lto.cc (wait_for_child): Ask if we are connected to jobserver.\n\t(stream_out_partitions): Likewise.", "tree": {"sha": "a9945021eb1bd08ec7a4900d94462a9d4e3cb7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9945021eb1bd08ec7a4900d94462a9d4e3cb7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/827f64135957ce21617cd0345508077439fa29d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827f64135957ce21617cd0345508077439fa29d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827f64135957ce21617cd0345508077439fa29d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827f64135957ce21617cd0345508077439fa29d8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e7d87a901d45f0cb5e5510d22bfbdb0d0ac6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e7d87a901d45f0cb5e5510d22bfbdb0d0ac6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e7d87a901d45f0cb5e5510d22bfbdb0d0ac6a1"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "abab9bf5024e726392eb7be812ee129913569f9a", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -2148,6 +2148,12 @@\n #endif\n \n \n+/* Define if O_NONBLOCK supported by fcntl. */\n+#ifndef USED_FOR_TARGET\n+#undef HOST_HAS_O_NONBLOCK\n+#endif\n+\n+\n /* Define which stat syscall is able to handle 64bit indodes. */\n #ifndef USED_FOR_TARGET\n #undef HOST_STAT_FOR_64BIT_INODES"}, {"sha": "80498e68e36c7bd501d85990e1b180260183c50d", "filename": "gcc/configure", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -12460,6 +12460,31 @@ $as_echo \"#define HOST_HAS_O_CLOEXEC 1\" >>confdefs.h\n \n fi\n \n+# Check if O_NONBLOCK is defined by fcntl\n+for ac_header in fcntl.h\n+do :\n+  ac_fn_cxx_check_header_preproc \"$LINENO\" \"fcntl.h\" \"ac_cv_header_fcntl_h\"\n+if test \"x$ac_cv_header_fcntl_h\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_FCNTL_H 1\n+_ACEOF\n+\n+fi\n+done\n+\n+ac_fn_cxx_check_decl \"$LINENO\" \"O_NONBLOCK\" \"ac_cv_have_decl_O_NONBLOCK\" \"#include <fcntl.h>\n+\"\n+if test \"x$ac_cv_have_decl_O_NONBLOCK\" = xyes; then :\n+\n+fi\n+\n+if test $ac_cv_have_decl_O_NONBLOCK = yes; then\n+\n+$as_echo \"#define HOST_HAS_O_NONBLOCK 1\" >>confdefs.h\n+\n+fi\n+\n+\n # C++ Modules would like some networking features to provide the mapping\n # server.  You can still use modules without them though.\n # The following network-related checks could probably do with some\n@@ -19678,7 +19703,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19681 \"configure\"\n+#line 19706 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19784,7 +19809,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19787 \"configure\"\n+#line 19812 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "819b490d1b643189cf5f795ba090b7219369a0e0", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -1707,6 +1707,15 @@ if test $ac_cv_o_cloexec = yes; then\n   [Define if O_CLOEXEC supported by fcntl.])\n fi\n \n+# Check if O_NONBLOCK is defined by fcntl\n+AC_CHECK_HEADERS([fcntl.h])\n+AC_CHECK_DECL(O_NONBLOCK,,,[#include <fcntl.h>])\n+if test $ac_cv_have_decl_O_NONBLOCK = yes; then\n+  AC_DEFINE(HOST_HAS_O_NONBLOCK, 1,\n+  [Define if O_NONBLOCK supported by fcntl.])\n+fi\n+\n+\n # C++ Modules would like some networking features to provide the mapping\n # server.  You can still use modules without them though.\n # The following network-related checks could probably do with some"}, {"sha": "3a9147b01b54c8596df2bf4f22d0f52ac6eb30be", "filename": "gcc/lto/lto.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Flto%2Flto.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Flto%2Flto.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.cc?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -213,11 +213,11 @@ wait_for_child ()\n     }\n   while (!WIFEXITED (status) && !WIFSIGNALED (status));\n \n-    --nruns;\n+  --nruns;\n \n-    /* Return token to the jobserver if active.  */\n-    if (jinfo != NULL && jinfo->is_active)\n-      jinfo->return_token ();\n+  /* Return token to the jobserver if active.  */\n+  if (jinfo != NULL && jinfo->is_connected)\n+    jinfo->return_token ();\n }\n #endif\n \n@@ -254,7 +254,7 @@ stream_out_partitions (char *temp_filename, int blen, int min, int max,\n      streaming process.  */\n   if (!last)\n     {\n-      if (jinfo != NULL && jinfo->is_active)\n+      if (jinfo != NULL && jinfo->is_connected)\n \twhile (true)\n \t  {\n \t    if (jinfo->get_token ())\n@@ -291,7 +291,7 @@ stream_out_partitions (char *temp_filename, int blen, int min, int max,\n       while (nruns > 0)\n \twait_for_child ();\n \n-      if (jinfo != NULL && jinfo->is_active)\n+      if (jinfo != NULL && jinfo->is_connected)\n \tjinfo->disconnect ();\n     }\n   asm_nodes_output = true;"}, {"sha": "bff2be02d38bebcecaaca26eda1fb36e64f65a06", "filename": "gcc/opts-common.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fopts-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fopts-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.cc?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -2064,7 +2064,16 @@ void\n jobserver_info::connect ()\n {\n   if (!pipe_path.empty ())\n-    pipefd = open (pipe_path.c_str (), O_RDWR | O_NONBLOCK);\n+    {\n+#if HOST_HAS_O_NONBLOCK\n+      pipefd = open (pipe_path.c_str (), O_RDWR | O_NONBLOCK);\n+      is_connected = true;\n+#else\n+      is_connected = false;\n+#endif\n+    }\n+  else\n+    is_connected = true;\n }\n \n void"}, {"sha": "284b2417837c98db3763234a09f48d0fbf59c032", "filename": "gcc/opts-jobserver.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fopts-jobserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827f64135957ce21617cd0345508077439fa29d8/gcc%2Fopts-jobserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-jobserver.h?ref=827f64135957ce21617cd0345508077439fa29d8", "patch": "@@ -55,6 +55,8 @@ struct jobserver_info\n   int pipefd = -1;\n   /* Return true if jobserver is active.  */\n   bool is_active = false;\n+  /* Return true if communication with jobserver is working.  */\n+  bool is_connected = false;\n };\n \n #endif /* GCC_JOBSERVER_H */"}]}