{"sha": "a92ffb3e945608131f5edf3ec2d6d583e417083b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyZmZiM2U5NDU2MDgxMzFmNWVkZjNlYzJkNmQ1ODNlNDE3MDgzYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-01-11T14:39:00Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-01-11T14:39:00Z"}, "message": "[arm] Replace command-line option .def files with single definition file\n\nThe files arm-cores.def, arm-fpus.def and arm-arches.def are parsed and\nused in several places and the format is slightly awkward to maintain\nas they must be parsable in C and by certain scripts.  Furthermore,\nchanges to the content that affects every entry is particularly awkward for\ndealing with merges.\n\nThis patch replaces all three files with a single file that specifies all\nthe command-line related definitions in a new format that allows for better\nchecking for consistency as well as (hopefully) easier to merge changes.\n\nThe awk script used to parse it is relatively complicated, but should be\npretty portable.  It works by parsing in all the data and then operating\none of a number of possible sub-commands to generate the desired output.\n\nThe new method picked up one error.  The CPU descriptions referred to an\narchitecture ARMv5tej which was not supported by -march.  This has been\nfixed by adding the relevant entry to the architecture list.\n\ngcc:\n\t* config.gcc: Use new awk script to check CPU, FPU and architecture\n\tparameters for --with-... options.\n\t* config/arm/parsecpu.awk: New file\n\t* config/arm/arm-cpus.in: New file.\n\t* config/arm/arm-opts.h: Include arm-cpu.h instead of processing .def\n\tfiles.\n\t* config/arm/arm.c: Include arm-cpu-data.h instead of processing .def\n\tfiles.\n\t* config/arm/t-arm: Update dependency rules.\n\t* common/config/arm/arm-common.c: Include arm-cpu-cdata.h instead\n\tof processing .def files.\n\t* config/arm/genopt.sh: Deleted.\n\t* config/arm/gentune.sh: Deleted.\n\t* config/arm/arm-cores.def: Deleted.\n\t* config/arm/arm-arches.def: Deleted.\n\t* config/arm/arm-fpus.def: Deleted.\n\t* config/arm/arm-tune.md: Regenerated.\n\t* config/arm/arm-tables.opt: Regenerated.\n\t* config/arm/arm-cpu.h: New generated file.\n\t* config/arm/arm-cpu-data.h: New generated file.\n\t* config/arm/arm-cpu-cdata.h: New generated file.\n\nContrib:\n\t* gcc_update: Adjust touch list.\n\nFrom-SVN: r244316", "tree": {"sha": "5bbd0872a85c391ee212c559fe8febfa9e2fbc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbd0872a85c391ee212c559fe8febfa9e2fbc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a92ffb3e945608131f5edf3ec2d6d583e417083b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92ffb3e945608131f5edf3ec2d6d583e417083b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92ffb3e945608131f5edf3ec2d6d583e417083b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92ffb3e945608131f5edf3ec2d6d583e417083b/comments", "author": null, "committer": null, "parents": [{"sha": "ca280d38f95255a876fc56547d55ab3db50ea38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca280d38f95255a876fc56547d55ab3db50ea38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca280d38f95255a876fc56547d55ab3db50ea38f"}], "stats": {"total": 5306, "additions": 4702, "deletions": 604}, "files": [{"sha": "8706ee1ad6c05a80be2dbae7b210093de5b6bda3", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -1,3 +1,7 @@\n+2017-01-11  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc_update: Adjust touch list for ARM.\n+\n 2017-01-08  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* download_ecj: Remove."}, {"sha": "ab5b33d1bb6f3e03ea84b4f0e18871e77b48e505", "filename": "contrib/gcc_update", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -80,8 +80,11 @@ gcc/cstamp-h.in: gcc/configure.ac\n gcc/config.in: gcc/cstamp-h.in\n gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/aarch64/aarch64-tune.md: gcc/config/aarch64/aarch64-cores.def gcc/config/aarch64/gentune.sh\n-gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n-gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/arm-fpus.def gcc/config/arm/genopt.sh\n+gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecpu.awk\n+gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecpu.awk\n+gcc/config/arm/arm-cpu.h: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecpu.awk\n+gcc/config/arm/arm-cpu-data.h: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecpu.awk\n+gcc/config/arm/arm-cpu-cdata.h: gcc/config/arm/arm-cpus.in gcc/config/arm/parsecpu.awk\n gcc/config/avr/avr-tables.opt: gcc/config/avr/avr-mcus.def gcc/config/avr/genopt.sh\n gcc/config/avr/t-multilib: gcc/config/avr/avr-mcus.def gcc/config/avr/genmultilib.awk\n gcc/config/c6x/c6x-tables.opt: gcc/config/c6x/c6x-isas.def gcc/config/c6x/genopt.sh"}, {"sha": "35fff84af6c054651d1698116284f050e2d58ebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -1,3 +1,27 @@\n+2017-01-11  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.gcc: Use new awk script to check CPU, FPU and architecture\n+\tparameters for --with-... options.\n+\t* config/arm/parsecpu.awk: New file\n+\t* config/arm/arm-cpus.in: New file.\n+\t* config/arm/arm-opts.h: Include arm-cpu.h instead of processing .def\n+\tfiles.\n+\t* config/arm/arm.c: Include arm-cpu-data.h instead of processing .def\n+\tfiles.\n+\t* config/arm/t-arm: Update dependency rules.\n+\t* common/config/arm/arm-common.c: Include arm-cpu-cdata.h instead\n+\tof processing .def files.\n+\t* config/arm/genopt.sh: Deleted.\n+\t* config/arm/gentune.sh: Deleted.\n+\t* config/arm/arm-cores.def: Deleted.\n+\t* config/arm/arm-arches.def: Deleted.\n+\t* config/arm/arm-fpus.def: Deleted.\n+\t* config/arm/arm-tune.md: Regenerated.\n+\t* config/arm/arm-tables.opt: Regenerated.\n+\t* config/arm/arm-cpu.h: New generated file.\n+\t* config/arm/arm-cpu-data.h: New generated file.\n+\t* config/arm/arm-cpu-cdata.h: New generated file.\n+\n 2017-01-11  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR lto/79042"}, {"sha": "7ecc68d6757380edc54610dae46fe51a4feed462", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -104,19 +104,7 @@ struct arm_arch_core_flag\n   const enum isa_feature isa_bits[isa_num_bits];\n };\n \n-static const struct arm_arch_core_flag arm_arch_core_flags[] =\n-{\n-#undef ARM_CORE\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\t\\\n-  {NAME, {ISA isa_nobit}},\n-#include \"config/arm/arm-cores.def\"\n-#undef ARM_CORE\n-#undef ARM_ARCH\n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\t\\\n-  {NAME, {ISA isa_nobit}},\n-#include \"config/arm/arm-arches.def\"\n-#undef ARM_ARCH\n-};\n+#include \"config/arm/arm-cpu-cdata.h\"\n \n /* Scan over a raw feature array BITS checking for BIT being present.\n    This is slower than the normal bitmask checks, but we would spend longer"}, {"sha": "a826187ec527c867ed61a14ed83ed788315dd456", "filename": "gcc/config.gcc", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -3675,41 +3675,24 @@ case \"${target}\" in\n \n \tarm*-*-*)\n \t\tsupported_defaults=\"arch cpu float tune fpu abi mode tls\"\n-\t\tfor which in cpu tune; do\n-\t\t\t# See if it matches any of the entries in arm-cores.def\n+\t\tfor which in cpu tune arch; do\n+\t\t\t# See if it matches a supported value\n \t\t\teval \"val=\\$with_$which\"\n-\t\t\tif [ x\"$val\" = x ] \\\n-\t\t\t    || grep \"^ARM_CORE(\\\"$val\\\",\" \\\n-\t\t\t\t    ${srcdir}/config/arm/arm-cores.def \\\n-\t\t\t\t    > /dev/null; then\n-\t\t\t  # Ok\n-\t\t\t  new_val=`grep \"^ARM_CORE(\\\"$val\\\",\" \\\n-\t\t\t\t${srcdir}/config/arm/arm-cores.def | \\\n-\t\t\t\tsed -e 's/^[^,]*,[ \t]*//' | \\\n-\t\t\t\tsed -e 's/,.*$//'`\n-\t\t\t  if [ x\"$val\" != x ] ; then\n-\t\t\t\teval \"target_${which}_cname=$new_val\"\n-\t\t\t\techo \"For $val real value is $new_val\"\n+\t\t\tif [ x\"$val\" != x ]; then\n+\t\t\t  cpu=`awk -f ${srcdir}/config/arm/parsecpu.awk \\\n+\t\t\t\t-v cmd=\"chk$which $val\" \\\n+\t\t\t\t${srcdir}/config/arm/arm-cpus.in`\n+\t\t\t  if [ \"$cpu\" = \"error\" ]; then\n+\t\t\t    echo \"Unknown target in --with-$which=$val\" 1>&2\n+\t\t\t    exit 1\n+\t\t\t  else\n+\t\t\t    new_val=$cpu\n+\t\t\t    eval \"target_${which}_cname=$new_val\"\n+\t\t\t    echo \"For $val real value is $new_val\"\n \t\t\t  fi\n-\t\t\t  true\n-\t\t\telse\n-\t\t\t  echo \"Unknown CPU used in --with-$which=$val\" 1>&2\n-\t\t\t  exit 1\n \t\t\tfi\n \t\tdone\n \n-\t\t# See if it matches any of the entries in arm-arches.def\n-\t\tif [ x\"$with_arch\" = x ] \\\n-\t\t    || grep \"^ARM_ARCH(\\\"$with_arch\\\",\" \\\n-\t\t\t    ${srcdir}/config/arm/arm-arches.def \\\n-\t\t\t    > /dev/null; then\n-\t\t  # OK\n-\t\t  true\n-\t\telse\n-\t\t  echo \"Unknown arch used in --with-arch=$with_arch\" 1>&2\n-\t\t  exit 1\n-\t\tfi\n-\n \t\tcase \"$with_float\" in\n \t\t\"\" \\\n \t\t| soft | hard | softfp)\n@@ -3721,16 +3704,16 @@ case \"${target}\" in\n \t\t\t;;\n \t\tesac\n \n-\t\t# see if it matches any of the entries in arm-fpus.def\n-\t\tif [ x\"$with_fpu\" = x ] \\\n-\t\t    || grep \"^ARM_FPU(\\\"$with_fpu\\\",\" \\\n-\t\t\t    ${srcdir}/config/arm/arm-fpus.def \\\n-\t\t\t    > /dev/null; then\n-\t\t  # OK\n-\t\t  true\n-\t\telse\n-\t\t  echo \"Unknown fpu used in --with-fpu=$with_fpu\" 1>&2\n-\t\t  exit 1\n+\t\t# see if --with-fpu matches any of the supported FPUs\n+\t\tif [ x\"$with_fpu\" != x ] ; then\n+\t\t  fpu=`awk -f ${srcdir}/config/arm/parsecpu.awk \\\n+\t\t\t-v cmd=\"chkfpu $with_fpu\" \\\n+\t\t\t${srcdir}/config/arm/arm-cpus.in`\n+\t\t  if [ \"$fpu\" = \"error\"]\n+\t\t  then\n+\t\t    echo \"Unknown target in --with-$which=$val\" 1>&2\n+\t\t    exit 1\n+\t\t  fi\n \t\tfi\n \n \t\tcase \"$with_abi\" in"}, {"sha": "268de95e27b2a3b477509d51e50e60f379733416", "filename": "gcc/config/arm/arm-arches.def", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=ca280d38f95255a876fc56547d55ab3db50ea38f", "patch": "@@ -1,67 +0,0 @@\n-/* ARM CPU architectures.\n-   Copyright (C) 1991-2017 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* Before using #include to read this file, define a macro:\n-\n-      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\n-\n-   The NAME is the name of the architecture, represented as a string\n-   constant.  The CORE is the identifier for a core representative of\n-   this architecture.  ARCH is the architecture revision.  ISA is the\n-   detailed architectural capabilities of the core (see arm-isa.h).\n-\n-   genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n-\n-ARM_ARCH(\"armv2\",   arm2,\t(TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26))\n-ARM_ARCH(\"armv2a\",  arm2,\t(TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26))\n-ARM_ARCH(\"armv3\",   arm6,\tTF_CO_PROC,\t\t     3,\t\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26))\n-ARM_ARCH(\"armv3m\",  arm7m,\tTF_CO_PROC,\t\t     3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26))\n-ARM_ARCH(\"armv4\",   arm7tdmi,\tTF_CO_PROC,\t\t     4,\t\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26))\n-/* Strictly, isa_bit_mode26 is a permitted option for v4t, but there are no\n-   implementations that support it, so we will leave it out for now.  */\n-ARM_ARCH(\"armv4t\",  arm7tdmi,\tTF_CO_PROC,\t\t     4T,\tISA_FEAT(ISA_ARMv4t))\n-ARM_ARCH(\"armv5\",   arm10tdmi,\tTF_CO_PROC,\t\t     5,\t\tISA_FEAT(ISA_ARMv5))\n-ARM_ARCH(\"armv5t\",  arm10tdmi,\tTF_CO_PROC,\t\t     5T,\tISA_FEAT(ISA_ARMv5t))\n-ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC,\t\t     5E,\tISA_FEAT(ISA_ARMv5e))\n-ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC,\t\t     5TE,\tISA_FEAT(ISA_ARMv5te))\n-ARM_ARCH(\"armv6\",   arm1136js,\tTF_CO_PROC,\t\t     6,\t\tISA_FEAT(ISA_ARMv6))\n-ARM_ARCH(\"armv6j\",  arm1136js,\tTF_CO_PROC,\t\t     6J,\tISA_FEAT(ISA_ARMv6j))\n-ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC,\t\t     6K,\tISA_FEAT(ISA_ARMv6k))\n-ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC,\t\t     6Z,\tISA_FEAT(ISA_ARMv6z))\n-ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC,\t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz))\n-ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC,\t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz))\n-ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC,\t\t     6T2,\tISA_FEAT(ISA_ARMv6t2))\n-ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m))\n-ARM_ARCH(\"armv6s-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m))\n-ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC,\t\t     7,\t\tISA_FEAT(ISA_ARMv7))\n-ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7a))\n-ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7ve))\n-ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC,\t\t     7R,\tISA_FEAT(ISA_ARMv7r))\n-ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC,\t\t     7M,\tISA_FEAT(ISA_ARMv7m))\n-ARM_ARCH(\"armv7e-m\", cortexm4,\tTF_CO_PROC,\t\t     7EM,\tISA_FEAT(ISA_ARMv7em))\n-ARM_ARCH(\"armv8-a\", cortexa53,\tTF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a))\n-ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32))\n-ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_1a))\n-ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_2a))\n-ARM_ARCH (\"armv8.2-a+fp16\", cortexa53, TF_CO_PROC,\t     8A,\tISA_FEAT(ISA_ARMv8_2a) ISA_FEAT(isa_bit_fp16))\n-ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t\t\t     8M_BASE,\tISA_FEAT(ISA_ARMv8m_base))\n-ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC,\t\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main))\n-ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC,\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em))\n-ARM_ARCH(\"iwmmxt\",  iwmmxt, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt))\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2))"}, {"sha": "ef587df84ffbb497199310380d571c9f392e44a4", "filename": "gcc/config/arm/arm-cores.def", "status": "removed", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=ca280d38f95255a876fc56547d55ab3db50ea38f", "patch": "@@ -1,188 +0,0 @@\n-/* ARM CPU Cores\n-   Copyright (C) 2003-2017 Free Software Foundation, Inc.\n-   Written by CodeSourcery, LLC\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but\n-   WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-   General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* Before using #include to read this file, define a macro:\n-\n-      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\n-\n-   The CORE_NAME is the name of the core, represented as a string constant.\n-   The INTERNAL_IDENT is the name of the core represented as an identifier.\n-   This must be unique for each entry in this table.\n-   The TUNE_IDENT is the name of the core for which scheduling decisions\n-   should be made, represented as an identifier.\n-   TUNE_FLAGS is a set of flag bits that are used to affect tuning.\n-   ARCH is the architecture revision implemented by the chip.\n-   ISA is the detailed architectural capabilities of the core (see arm-isa.h).\n-   COSTS is the name of the rtx_costs routine to use.\n-\n-   If you update this table, you must update the \"tune\" attribute in\n-   arm.md.\n-   \n-   Some tools assume no whitespace up to the first \",\" in each entry.  */\n-\n-/* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), slowmul)\n-\n-/* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-/* Doesn't have an external co-proc, but does have embedded fpa (fpa no-longer supported). */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), slowmul)\n-\n-/* V3M Architecture Processors */\n-/* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n-   those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), fastmul)\n-\n-/* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",\t  arm8, arm8,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), fastmul)\n-ARM_CORE(\"arm810\",\t  arm810, arm810,\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), fastmul)\n-ARM_CORE(\"strongarm\",\t  strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), strongarm)\n-ARM_CORE(\"fa526\",\t  fa526, fa526,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4), fastmul)\n-ARM_CORE(\"fa626\",\t  fa626, fa626,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4), fastmul)\n-\n-/* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), fastmul)\n-\n-/* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), fastmul)\n-\n-/* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale), xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE),\t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), fa726te)\n-\n-/* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), 9e)\n-\n-/* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j), 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j) ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL), 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED,\t  6KZ,\tISA_FEAT(ISA_ARMv6kz), 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED,\t  6KZ,\tISA_FEAT(ISA_ARMv6kz) ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL), 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED,\t  6K,\tISA_FEAT(ISA_ARMv6k), 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED,\t  6K,\tISA_FEAT(ISA_ARMv6k) ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL), 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED,\t  6T2,\tISA_FEAT(ISA_ARMv6t2), v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED,\t  6T2,\tISA_FEAT(ISA_ARMv6t2) ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL), v6t2)\n-\n-/* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-\n-/* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tISA_FEAT(ISA_ARMv6m), v6m)\n-\n-/* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r), cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r), cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n-ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED,\t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED,\t  7EM,\tISA_FEAT(ISA_ARMv7em) ISA_FEAT(isa_quirk_no_volatile_ce), cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED,\t  7EM,\tISA_FEAT(ISA_ARMv7em), v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED,\t  7M,\tISA_FEAT(ISA_ARMv7m) ISA_FEAT(isa_quirk_cm3_ldrd), v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), marvell_pj4)\n-\n-/* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), cortex_a12)\n-\n-/* V8 A-profile Architecture Processors */\n-ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a35)\n-ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a35)\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n-ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), exynosm1)\n-ARM_CORE(\"falkor\",\tfalkor,\t   cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), qdf24xx)\n-ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), qdf24xx)\n-ARM_CORE(\"xgene1\",\txgene1,\t   xgene1,\tTF_LDSCHED,\t\t\t  8A,\tISA_FEAT(ISA_ARMv8a), xgene1)\n-\n-/* V8 A-profile big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a57)\n-ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n-ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), cortex_a73)\n-\n-/* V8 M-profile implementations.  */\n-ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED,\t\t\t  8M_BASE, ISA_FEAT(ISA_ARMv8m_base), v6m)\n-ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED,\t\t\t  8M_MAIN, ISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), v7m)"}, {"sha": "b3888120daa8494eb41bde0368122ad2f06d81af", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "added", "additions": 1058, "deletions": 0, "changes": 1058, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -0,0 +1,1058 @@\n+/* -*- buffer-read-only: t -*-\n+   Generated automatically by parsecpu.awk from arm-cpus.in.\n+   Do not edit.\n+\n+   Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 3,\n+   or (at your option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public\n+   License along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+static const struct arm_arch_core_flag arm_arch_core_flags[] =\n+{\n+  {\n+    \"arm2\",\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm250\",\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm3\",\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm6\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm60\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm600\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm610\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm620\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7d\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7di\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm70\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm700\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm700i\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm710\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm720\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm710c\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7100\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7500\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7500fe\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7m\",\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7dm\",\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7dmi\",\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm8\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm810\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"strongarm\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"strongarm110\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"strongarm1100\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"strongarm1110\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fa526\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fa626\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7tdmi\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm7tdmi-s\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm710t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm720t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm740t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm9\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm9tdmi\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm920\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm920t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm922t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm940t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"ep9312\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm10tdmi\",\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1020t\",\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm9e\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm946e-s\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm966e-s\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm968e-s\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm10e\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1020e\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1022e\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"xscale\",\n+    {\n+      ISA_ARMv5te,\n+      isa_bit_xscale,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"iwmmxt\",\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"iwmmxt2\",\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fa606te\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fa626te\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fmp626\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"fa726te\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm926ej-s\",\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1026ej-s\",\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1136j-s\",\n+    {\n+      ISA_ARMv6j,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1136jf-s\",\n+    {\n+      ISA_ARMv6j,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1176jz-s\",\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1176jzf-s\",\n+    {\n+      ISA_ARMv6kz,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"mpcorenovfp\",\n+    {\n+      ISA_ARMv6k,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"mpcore\",\n+    {\n+      ISA_ARMv6k,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1156t2-s\",\n+    {\n+      ISA_ARMv6t2,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"arm1156t2f-s\",\n+    {\n+      ISA_ARMv6t2,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m1\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m0\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m0plus\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m1.small-multiply\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m0.small-multiply\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m0plus.small-multiply\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"generic-armv7-a\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a5\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a7\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a8\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a9\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a12\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a15\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a17\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-r4\",\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-r4f\",\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-r5\",\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-r7\",\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-r8\",\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m7\",\n+    {\n+      ISA_ARMv7em,\n+      isa_quirk_no_volatile_ce,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m4\",\n+    {\n+      ISA_ARMv7em,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m3\",\n+    {\n+      ISA_ARMv7m,\n+      isa_quirk_cm3_ldrd,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"marvell-pj4\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a15.cortex-a7\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a17.cortex-a7\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a32\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a35\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a53\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a57\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a72\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a73\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"exynos-m1\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"falkor\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"qdf24xx\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"xgene1\",\n+    {\n+      ISA_ARMv8a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a57.cortex-a53\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a72.cortex-a53\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a73.cortex-a35\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-a73.cortex-a53\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m23\",\n+    {\n+      ISA_ARMv8m_base,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"cortex-m33\",\n+    {\n+      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv2\",\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv2a\",\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv3\",\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv3m\",\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv4\",\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv4t\",\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv5\",\n+    {\n+      ISA_ARMv5,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv5t\",\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv5e\",\n+    {\n+      ISA_ARMv5e,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv5te\",\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv5tej\",\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6\",\n+    {\n+      ISA_ARMv6,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6j\",\n+    {\n+      ISA_ARMv6j,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6k\",\n+    {\n+      ISA_ARMv6k,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6z\",\n+    {\n+      ISA_ARMv6z,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6kz\",\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6zk\",\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6t2\",\n+    {\n+      ISA_ARMv6t2,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6-m\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv6s-m\",\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7\",\n+    {\n+      ISA_ARMv7,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7-a\",\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7ve\",\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7-r\",\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7-m\",\n+    {\n+      ISA_ARMv7m,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv7e-m\",\n+    {\n+      ISA_ARMv7em,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8-a\",\n+    {\n+      ISA_ARMv8a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8-a+crc\",\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8.1-a\",\n+    {\n+      ISA_ARMv8_1a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8.2-a\",\n+    {\n+      ISA_ARMv8_2a,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8.2-a+fp16\",\n+    {\n+      ISA_ARMv8_2a,isa_bit_fp16,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8-m.base\",\n+    {\n+      ISA_ARMv8m_base,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8-m.main\",\n+    {\n+      ISA_ARMv8m_main,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"armv8-m.main+dsp\",\n+    {\n+      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"iwmmxt\",\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+      isa_nobit\n+    },\n+  },\n+  {\n+    \"iwmmxt2\",\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+      isa_nobit\n+    },\n+  },\n+};\n+"}, {"sha": "d6200f9bdc09a9d0c973853b0152a2800eaf2fe5", "filename": "gcc/config/arm/arm-cpu-data.h", "status": "added", "additions": 1652, "deletions": 0, "changes": 1652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-data.h?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -0,0 +1,1652 @@\n+/* -*- buffer-read-only: t -*-\n+   Generated automatically by parsecpu.awk from arm-cpus.in.\n+   Do not edit.\n+\n+   Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 3,\n+   or (at your option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public\n+   License along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+static const struct processors all_cores[] =\n+{\n+  {\n+    \"arm2\", TARGET_CPU_arm2,\n+    (TF_CO_PROC | TF_NO_MODE32),\n+    \"2\", BASE_ARCH_2,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm250\", TARGET_CPU_arm250,\n+    (TF_CO_PROC | TF_NO_MODE32),\n+    \"2\", BASE_ARCH_2,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm3\", TARGET_CPU_arm3,\n+    (TF_CO_PROC | TF_NO_MODE32),\n+    \"2\", BASE_ARCH_2,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm6\", TARGET_CPU_arm6,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm60\", TARGET_CPU_arm60,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm600\", TARGET_CPU_arm600,\n+    (TF_CO_PROC | TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm610\", TARGET_CPU_arm610,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm620\", TARGET_CPU_arm620,\n+    (TF_CO_PROC | TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7\", TARGET_CPU_arm7,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7d\", TARGET_CPU_arm7d,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7di\", TARGET_CPU_arm7di,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm70\", TARGET_CPU_arm70,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm700\", TARGET_CPU_arm700,\n+    (TF_CO_PROC | TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm700i\", TARGET_CPU_arm700i,\n+    (TF_CO_PROC | TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm710\", TARGET_CPU_arm710,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm720\", TARGET_CPU_arm720,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm710c\", TARGET_CPU_arm710c,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7100\", TARGET_CPU_arm7100,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7500\", TARGET_CPU_arm7500,\n+    (TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7500fe\", TARGET_CPU_arm7500fe,\n+    (TF_CO_PROC | TF_WBUF),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_slowmul_tune\n+  },\n+  {\n+    \"arm7m\", TARGET_CPU_arm7m,\n+    (TF_CO_PROC),\n+    \"3M\", BASE_ARCH_3M,\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm7dm\", TARGET_CPU_arm7dm,\n+    (TF_CO_PROC),\n+    \"3M\", BASE_ARCH_3M,\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm7dmi\", TARGET_CPU_arm7dmi,\n+    (TF_CO_PROC),\n+    \"3M\", BASE_ARCH_3M,\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm8\", TARGET_CPU_arm8,\n+    (TF_LDSCHED),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm810\", TARGET_CPU_arm810,\n+    (TF_LDSCHED),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"strongarm\", TARGET_CPU_strongarm,\n+    (TF_LDSCHED | TF_STRONG),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_strongarm_tune\n+  },\n+  {\n+    \"strongarm110\", TARGET_CPU_strongarm110,\n+    (TF_LDSCHED | TF_STRONG),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_strongarm_tune\n+  },\n+  {\n+    \"strongarm1100\", TARGET_CPU_strongarm1100,\n+    (TF_LDSCHED | TF_STRONG),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_strongarm_tune\n+  },\n+  {\n+    \"strongarm1110\", TARGET_CPU_strongarm1110,\n+    (TF_LDSCHED | TF_STRONG),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_strongarm_tune\n+  },\n+  {\n+    \"fa526\", TARGET_CPU_fa526,\n+    (TF_LDSCHED),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"fa626\", TARGET_CPU_fa626,\n+    (TF_LDSCHED),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm7tdmi\", TARGET_CPU_arm7tdmi,\n+    (TF_CO_PROC),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm7tdmi-s\", TARGET_CPU_arm7tdmis,\n+    (TF_CO_PROC),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm710t\", TARGET_CPU_arm710t,\n+    (TF_WBUF),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm720t\", TARGET_CPU_arm720t,\n+    (TF_WBUF),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm740t\", TARGET_CPU_arm740t,\n+    (TF_WBUF),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm9\", TARGET_CPU_arm9,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm9tdmi\", TARGET_CPU_arm9tdmi,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm920\", TARGET_CPU_arm920,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm920t\", TARGET_CPU_arm920t,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm922t\", TARGET_CPU_arm922t,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm940t\", TARGET_CPU_arm940t,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"ep9312\", TARGET_CPU_ep9312,\n+    (TF_LDSCHED),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm10tdmi\", TARGET_CPU_arm10tdmi,\n+    (TF_LDSCHED),\n+    \"5T\", BASE_ARCH_5T,\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm1020t\", TARGET_CPU_arm1020t,\n+    (TF_LDSCHED),\n+    \"5T\", BASE_ARCH_5T,\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm9e\", TARGET_CPU_arm9e,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm946e-s\", TARGET_CPU_arm946es,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm966e-s\", TARGET_CPU_arm966es,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm968e-s\", TARGET_CPU_arm968es,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm10e\", TARGET_CPU_arm10e,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm1020e\", TARGET_CPU_arm1020e,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"arm1022e\", TARGET_CPU_arm1022e,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_fastmul_tune\n+  },\n+  {\n+    \"xscale\", TARGET_CPU_xscale,\n+    (TF_LDSCHED | TF_XSCALE),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_bit_xscale,\n+      isa_nobit\n+    },\n+    &arm_xscale_tune\n+  },\n+  {\n+    \"iwmmxt\", TARGET_CPU_iwmmxt,\n+    (TF_LDSCHED | TF_XSCALE),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+      isa_nobit\n+    },\n+    &arm_xscale_tune\n+  },\n+  {\n+    \"iwmmxt2\", TARGET_CPU_iwmmxt2,\n+    (TF_LDSCHED | TF_XSCALE),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+      isa_nobit\n+    },\n+    &arm_xscale_tune\n+  },\n+  {\n+    \"fa606te\", TARGET_CPU_fa606te,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"fa626te\", TARGET_CPU_fa626te,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"fmp626\", TARGET_CPU_fmp626,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"fa726te\", TARGET_CPU_fa726te,\n+    (TF_LDSCHED),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    &arm_fa726te_tune\n+  },\n+  {\n+    \"arm926ej-s\", TARGET_CPU_arm926ejs,\n+    (TF_LDSCHED),\n+    \"5TEJ\", BASE_ARCH_5TEJ,\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1026ej-s\", TARGET_CPU_arm1026ejs,\n+    (TF_LDSCHED),\n+    \"5TEJ\", BASE_ARCH_5TEJ,\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1136j-s\", TARGET_CPU_arm1136js,\n+    (TF_LDSCHED),\n+    \"6J\", BASE_ARCH_6J,\n+    {\n+      ISA_ARMv6j,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1136jf-s\", TARGET_CPU_arm1136jfs,\n+    (TF_LDSCHED),\n+    \"6J\", BASE_ARCH_6J,\n+    {\n+      ISA_ARMv6j,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1176jz-s\", TARGET_CPU_arm1176jzs,\n+    (TF_LDSCHED),\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1176jzf-s\", TARGET_CPU_arm1176jzfs,\n+    (TF_LDSCHED),\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    {\n+      ISA_ARMv6kz,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"mpcorenovfp\", TARGET_CPU_mpcorenovfp,\n+    (TF_LDSCHED),\n+    \"6K\", BASE_ARCH_6K,\n+    {\n+      ISA_ARMv6k,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"mpcore\", TARGET_CPU_mpcore,\n+    (TF_LDSCHED),\n+    \"6K\", BASE_ARCH_6K,\n+    {\n+      ISA_ARMv6k,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+    &arm_9e_tune\n+  },\n+  {\n+    \"arm1156t2-s\", TARGET_CPU_arm1156t2s,\n+    (TF_LDSCHED),\n+    \"6T2\", BASE_ARCH_6T2,\n+    {\n+      ISA_ARMv6t2,\n+      isa_nobit\n+    },\n+    &arm_v6t2_tune\n+  },\n+  {\n+    \"arm1156t2f-s\", TARGET_CPU_arm1156t2fs,\n+    (TF_LDSCHED),\n+    \"6T2\", BASE_ARCH_6T2,\n+    {\n+      ISA_ARMv6t2,\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    },\n+    &arm_v6t2_tune\n+  },\n+  {\n+    \"cortex-m1\", TARGET_CPU_cortexm1,\n+    (TF_LDSCHED),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m0\", TARGET_CPU_cortexm0,\n+    (TF_LDSCHED),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m0plus\", TARGET_CPU_cortexm0plus,\n+    (TF_LDSCHED),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m1.small-multiply\", TARGET_CPU_cortexm1smallmultiply,\n+    (TF_LDSCHED | TF_SMALLMUL),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m0.small-multiply\", TARGET_CPU_cortexm0smallmultiply,\n+    (TF_LDSCHED | TF_SMALLMUL),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m0plus.small-multiply\", TARGET_CPU_cortexm0plussmallmultiply,\n+    (TF_LDSCHED | TF_SMALLMUL),\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"generic-armv7-a\", TARGET_CPU_genericv7a,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-a5\", TARGET_CPU_cortexa5,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    &arm_cortex_a5_tune\n+  },\n+  {\n+    \"cortex-a7\", TARGET_CPU_cortexa7,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a7_tune\n+  },\n+  {\n+    \"cortex-a8\", TARGET_CPU_cortexa8,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    &arm_cortex_a8_tune\n+  },\n+  {\n+    \"cortex-a9\", TARGET_CPU_cortexa9,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    &arm_cortex_a9_tune\n+  },\n+  {\n+    \"cortex-a12\", TARGET_CPU_cortexa12,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a12_tune\n+  },\n+  {\n+    \"cortex-a15\", TARGET_CPU_cortexa15,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a15_tune\n+  },\n+  {\n+    \"cortex-a17\", TARGET_CPU_cortexa17,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a12_tune\n+  },\n+  {\n+    \"cortex-r4\", TARGET_CPU_cortexr4,\n+    (TF_LDSCHED),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-r4f\", TARGET_CPU_cortexr4f,\n+    (TF_LDSCHED),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-r5\", TARGET_CPU_cortexr5,\n+    (TF_LDSCHED),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-r7\", TARGET_CPU_cortexr7,\n+    (TF_LDSCHED),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-r8\", TARGET_CPU_cortexr8,\n+    (TF_LDSCHED),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_bit_adiv,\n+      isa_nobit\n+    },\n+    &arm_cortex_tune\n+  },\n+  {\n+    \"cortex-m7\", TARGET_CPU_cortexm7,\n+    (TF_LDSCHED),\n+    \"7EM\", BASE_ARCH_7EM,\n+    {\n+      ISA_ARMv7em,\n+      isa_quirk_no_volatile_ce,\n+      isa_nobit\n+    },\n+    &arm_cortex_m7_tune\n+  },\n+  {\n+    \"cortex-m4\", TARGET_CPU_cortexm4,\n+    (TF_LDSCHED),\n+    \"7EM\", BASE_ARCH_7EM,\n+    {\n+      ISA_ARMv7em,\n+      isa_nobit\n+    },\n+    &arm_v7m_tune\n+  },\n+  {\n+    \"cortex-m3\", TARGET_CPU_cortexm3,\n+    (TF_LDSCHED),\n+    \"7M\", BASE_ARCH_7M,\n+    {\n+      ISA_ARMv7m,\n+      isa_quirk_cm3_ldrd,\n+      isa_nobit\n+    },\n+    &arm_v7m_tune\n+  },\n+  {\n+    \"marvell-pj4\", TARGET_CPU_marvell_pj4,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    &arm_marvell_pj4_tune\n+  },\n+  {\n+    \"cortex-a15.cortex-a7\", TARGET_CPU_cortexa15cortexa7,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a15_tune\n+  },\n+  {\n+    \"cortex-a17.cortex-a7\", TARGET_CPU_cortexa17cortexa7,\n+    (TF_LDSCHED),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    &arm_cortex_a12_tune\n+  },\n+  {\n+    \"cortex-a32\", TARGET_CPU_cortexa32,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a35_tune\n+  },\n+  {\n+    \"cortex-a35\", TARGET_CPU_cortexa35,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a35_tune\n+  },\n+  {\n+    \"cortex-a53\", TARGET_CPU_cortexa53,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a53_tune\n+  },\n+  {\n+    \"cortex-a57\", TARGET_CPU_cortexa57,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a57_tune\n+  },\n+  {\n+    \"cortex-a72\", TARGET_CPU_cortexa72,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a57_tune\n+  },\n+  {\n+    \"cortex-a73\", TARGET_CPU_cortexa73,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a73_tune\n+  },\n+  {\n+    \"exynos-m1\", TARGET_CPU_exynosm1,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_exynosm1_tune\n+  },\n+  {\n+    \"falkor\", TARGET_CPU_falkor,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_qdf24xx_tune\n+  },\n+  {\n+    \"qdf24xx\", TARGET_CPU_qdf24xx,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_qdf24xx_tune\n+  },\n+  {\n+    \"xgene1\", TARGET_CPU_xgene1,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,\n+      isa_nobit\n+    },\n+    &arm_xgene1_tune\n+  },\n+  {\n+    \"cortex-a57.cortex-a53\", TARGET_CPU_cortexa57cortexa53,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a57_tune\n+  },\n+  {\n+    \"cortex-a72.cortex-a53\", TARGET_CPU_cortexa72cortexa53,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a57_tune\n+  },\n+  {\n+    \"cortex-a73.cortex-a35\", TARGET_CPU_cortexa73cortexa35,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a73_tune\n+  },\n+  {\n+    \"cortex-a73.cortex-a53\", TARGET_CPU_cortexa73cortexa53,\n+    (TF_LDSCHED),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    &arm_cortex_a73_tune\n+  },\n+  {\n+    \"cortex-m23\", TARGET_CPU_cortexm23,\n+    (TF_LDSCHED),\n+    \"8M_BASE\", BASE_ARCH_8M_BASE,\n+    {\n+      ISA_ARMv8m_base,\n+      isa_nobit\n+    },\n+    &arm_v6m_tune\n+  },\n+  {\n+    \"cortex-m33\", TARGET_CPU_cortexm33,\n+    (TF_LDSCHED),\n+    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n+    {\n+      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      isa_nobit\n+    },\n+    &arm_v7m_tune\n+  },\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n+};\n+\n+static const struct processors all_architectures[] =\n+{\n+  {\n+    \"armv2\", TARGET_CPU_arm2,\n+    (TF_CO_PROC | TF_NO_MODE32),\n+    \"2\", BASE_ARCH_2,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv2a\", TARGET_CPU_arm2,\n+    (TF_CO_PROC | TF_NO_MODE32),\n+    \"2\", BASE_ARCH_2,\n+    {\n+      ISA_ARMv2,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv3\", TARGET_CPU_arm6,\n+    (TF_CO_PROC),\n+    \"3\", BASE_ARCH_3,\n+    {\n+      ISA_ARMv3,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv3m\", TARGET_CPU_arm7m,\n+    (TF_CO_PROC),\n+    \"3M\", BASE_ARCH_3M,\n+    {\n+      ISA_ARMv3m,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv4\", TARGET_CPU_arm7tdmi,\n+    (TF_CO_PROC),\n+    \"4\", BASE_ARCH_4,\n+    {\n+      ISA_ARMv4,isa_bit_mode26,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv4t\", TARGET_CPU_arm7tdmi,\n+    (TF_CO_PROC),\n+    \"4T\", BASE_ARCH_4T,\n+    {\n+      ISA_ARMv4t,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv5\", TARGET_CPU_arm10tdmi,\n+    (TF_CO_PROC),\n+    \"5\", BASE_ARCH_5,\n+    {\n+      ISA_ARMv5,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv5t\", TARGET_CPU_arm10tdmi,\n+    (TF_CO_PROC),\n+    \"5T\", BASE_ARCH_5T,\n+    {\n+      ISA_ARMv5t,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv5e\", TARGET_CPU_arm1026ejs,\n+    (TF_CO_PROC),\n+    \"5E\", BASE_ARCH_5E,\n+    {\n+      ISA_ARMv5e,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv5te\", TARGET_CPU_arm1026ejs,\n+    (TF_CO_PROC),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv5tej\", TARGET_CPU_arm1026ejs,\n+    (TF_CO_PROC),\n+    \"5TEJ\", BASE_ARCH_5TEJ,\n+    {\n+      ISA_ARMv5tej,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6\", TARGET_CPU_arm1136js,\n+    (TF_CO_PROC),\n+    \"6\", BASE_ARCH_6,\n+    {\n+      ISA_ARMv6,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6j\", TARGET_CPU_arm1136js,\n+    (TF_CO_PROC),\n+    \"6J\", BASE_ARCH_6J,\n+    {\n+      ISA_ARMv6j,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6k\", TARGET_CPU_mpcore,\n+    (TF_CO_PROC),\n+    \"6K\", BASE_ARCH_6K,\n+    {\n+      ISA_ARMv6k,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6z\", TARGET_CPU_arm1176jzs,\n+    (TF_CO_PROC),\n+    \"6Z\", BASE_ARCH_6Z,\n+    {\n+      ISA_ARMv6z,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6kz\", TARGET_CPU_arm1176jzs,\n+    (TF_CO_PROC),\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6zk\", TARGET_CPU_arm1176jzs,\n+    (TF_CO_PROC),\n+    \"6KZ\", BASE_ARCH_6KZ,\n+    {\n+      ISA_ARMv6kz,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6t2\", TARGET_CPU_arm1156t2s,\n+    (TF_CO_PROC),\n+    \"6T2\", BASE_ARCH_6T2,\n+    {\n+      ISA_ARMv6t2,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6-m\", TARGET_CPU_cortexm1,\n+    0,\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv6s-m\", TARGET_CPU_cortexm1,\n+    0,\n+    \"6M\", BASE_ARCH_6M,\n+    {\n+      ISA_ARMv6m,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7\", TARGET_CPU_cortexa8,\n+    (TF_CO_PROC),\n+    \"7\", BASE_ARCH_7,\n+    {\n+      ISA_ARMv7,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7-a\", TARGET_CPU_cortexa8,\n+    (TF_CO_PROC),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7a,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7ve\", TARGET_CPU_cortexa8,\n+    (TF_CO_PROC),\n+    \"7A\", BASE_ARCH_7A,\n+    {\n+      ISA_ARMv7ve,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7-r\", TARGET_CPU_cortexr4,\n+    (TF_CO_PROC),\n+    \"7R\", BASE_ARCH_7R,\n+    {\n+      ISA_ARMv7r,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7-m\", TARGET_CPU_cortexm3,\n+    (TF_CO_PROC),\n+    \"7M\", BASE_ARCH_7M,\n+    {\n+      ISA_ARMv7m,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv7e-m\", TARGET_CPU_cortexm4,\n+    (TF_CO_PROC),\n+    \"7EM\", BASE_ARCH_7EM,\n+    {\n+      ISA_ARMv7em,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8-a\", TARGET_CPU_cortexa53,\n+    (TF_CO_PROC),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8-a+crc\", TARGET_CPU_cortexa53,\n+    (TF_CO_PROC),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8a,isa_bit_crc32,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8.1-a\", TARGET_CPU_cortexa53,\n+    (TF_CO_PROC),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8_1a,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8.2-a\", TARGET_CPU_cortexa53,\n+    (TF_CO_PROC),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8_2a,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8.2-a+fp16\", TARGET_CPU_cortexa53,\n+    (TF_CO_PROC),\n+    \"8A\", BASE_ARCH_8A,\n+    {\n+      ISA_ARMv8_2a,isa_bit_fp16,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8-m.base\", TARGET_CPU_cortexm23,\n+    0,\n+    \"8M_BASE\", BASE_ARCH_8M_BASE,\n+    {\n+      ISA_ARMv8m_base,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8-m.main\", TARGET_CPU_cortexm7,\n+    (TF_CO_PROC),\n+    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n+    {\n+      ISA_ARMv8m_main,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"armv8-m.main+dsp\", TARGET_CPU_cortexm33,\n+    (TF_CO_PROC),\n+    \"8M_MAIN\", BASE_ARCH_8M_MAIN,\n+    {\n+      ISA_ARMv8m_main,isa_bit_ARMv7em,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"iwmmxt\", TARGET_CPU_iwmmxt,\n+    (TF_LDSCHED | TF_STRONG | TF_XSCALE),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {\n+    \"iwmmxt2\", TARGET_CPU_iwmmxt2,\n+    (TF_LDSCHED | TF_STRONG | TF_XSCALE),\n+    \"5TE\", BASE_ARCH_5TE,\n+    {\n+      ISA_ARMv5te,isa_bit_xscale,isa_bit_iwmmxt,isa_bit_iwmmxt2,\n+      isa_nobit\n+    },\n+    NULL\n+  },\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n+};\n+\n+const struct arm_fpu_desc all_fpus[] =\n+{\n+  {\n+    \"vfp\",\n+    {\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv2\",\n+    {\n+      ISA_VFPv2,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-fp16\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-d16\",\n+    {\n+      ISA_VFPv3,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\",\n+    {\n+      ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3xd\",\n+    {\n+      ISA_VFPv3,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv3xd-fp16\",\n+    {\n+      ISA_VFPv3,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon\",\n+    {\n+      ISA_VFPv3,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-vfpv3\",\n+    {\n+      ISA_VFPv3,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-fp16\",\n+    {\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv4\",\n+    {\n+      ISA_VFPv4,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-vfpv4\",\n+    {\n+      ISA_VFPv4,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfpv4-d16\",\n+    {\n+      ISA_VFPv4,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv4-sp-d16\",\n+    {\n+      ISA_VFPv4,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv5-sp-d16\",\n+    {\n+      ISA_FPv5,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fpv5-d16\",\n+    {\n+      ISA_FPv5,ISA_FP_DBL,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"neon-fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_NEON,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"crypto-neon-fp-armv8\",\n+    {\n+      ISA_FP_ARMv8,ISA_CRYPTO,\n+      isa_nobit\n+    }\n+  },\n+  {\n+    \"vfp3\",\n+    {\n+      ISA_VFPv3,ISA_FP_D32,\n+      isa_nobit\n+    }\n+  },\n+};"}, {"sha": "cd282db02f56f4416ff82eb3d8d569cd99fb0d41", "filename": "gcc/config/arm/arm-cpu.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu.h?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -0,0 +1,162 @@\n+/* -*- buffer-read-only: t -*-\n+   Generated automatically by parsecpu.awk from arm-cpus.in.\n+   Do not edit.\n+\n+   Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as\n+   published by the Free Software Foundation; either version 3,\n+   or (at your option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public\n+   License along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+enum processor_type\n+{\n+  TARGET_CPU_arm2,\n+  TARGET_CPU_arm250,\n+  TARGET_CPU_arm3,\n+  TARGET_CPU_arm6,\n+  TARGET_CPU_arm60,\n+  TARGET_CPU_arm600,\n+  TARGET_CPU_arm610,\n+  TARGET_CPU_arm620,\n+  TARGET_CPU_arm7,\n+  TARGET_CPU_arm7d,\n+  TARGET_CPU_arm7di,\n+  TARGET_CPU_arm70,\n+  TARGET_CPU_arm700,\n+  TARGET_CPU_arm700i,\n+  TARGET_CPU_arm710,\n+  TARGET_CPU_arm720,\n+  TARGET_CPU_arm710c,\n+  TARGET_CPU_arm7100,\n+  TARGET_CPU_arm7500,\n+  TARGET_CPU_arm7500fe,\n+  TARGET_CPU_arm7m,\n+  TARGET_CPU_arm7dm,\n+  TARGET_CPU_arm7dmi,\n+  TARGET_CPU_arm8,\n+  TARGET_CPU_arm810,\n+  TARGET_CPU_strongarm,\n+  TARGET_CPU_strongarm110,\n+  TARGET_CPU_strongarm1100,\n+  TARGET_CPU_strongarm1110,\n+  TARGET_CPU_fa526,\n+  TARGET_CPU_fa626,\n+  TARGET_CPU_arm7tdmi,\n+  TARGET_CPU_arm7tdmis,\n+  TARGET_CPU_arm710t,\n+  TARGET_CPU_arm720t,\n+  TARGET_CPU_arm740t,\n+  TARGET_CPU_arm9,\n+  TARGET_CPU_arm9tdmi,\n+  TARGET_CPU_arm920,\n+  TARGET_CPU_arm920t,\n+  TARGET_CPU_arm922t,\n+  TARGET_CPU_arm940t,\n+  TARGET_CPU_ep9312,\n+  TARGET_CPU_arm10tdmi,\n+  TARGET_CPU_arm1020t,\n+  TARGET_CPU_arm9e,\n+  TARGET_CPU_arm946es,\n+  TARGET_CPU_arm966es,\n+  TARGET_CPU_arm968es,\n+  TARGET_CPU_arm10e,\n+  TARGET_CPU_arm1020e,\n+  TARGET_CPU_arm1022e,\n+  TARGET_CPU_xscale,\n+  TARGET_CPU_iwmmxt,\n+  TARGET_CPU_iwmmxt2,\n+  TARGET_CPU_fa606te,\n+  TARGET_CPU_fa626te,\n+  TARGET_CPU_fmp626,\n+  TARGET_CPU_fa726te,\n+  TARGET_CPU_arm926ejs,\n+  TARGET_CPU_arm1026ejs,\n+  TARGET_CPU_arm1136js,\n+  TARGET_CPU_arm1136jfs,\n+  TARGET_CPU_arm1176jzs,\n+  TARGET_CPU_arm1176jzfs,\n+  TARGET_CPU_mpcorenovfp,\n+  TARGET_CPU_mpcore,\n+  TARGET_CPU_arm1156t2s,\n+  TARGET_CPU_arm1156t2fs,\n+  TARGET_CPU_cortexm1,\n+  TARGET_CPU_cortexm0,\n+  TARGET_CPU_cortexm0plus,\n+  TARGET_CPU_cortexm1smallmultiply,\n+  TARGET_CPU_cortexm0smallmultiply,\n+  TARGET_CPU_cortexm0plussmallmultiply,\n+  TARGET_CPU_genericv7a,\n+  TARGET_CPU_cortexa5,\n+  TARGET_CPU_cortexa7,\n+  TARGET_CPU_cortexa8,\n+  TARGET_CPU_cortexa9,\n+  TARGET_CPU_cortexa12,\n+  TARGET_CPU_cortexa15,\n+  TARGET_CPU_cortexa17,\n+  TARGET_CPU_cortexr4,\n+  TARGET_CPU_cortexr4f,\n+  TARGET_CPU_cortexr5,\n+  TARGET_CPU_cortexr7,\n+  TARGET_CPU_cortexr8,\n+  TARGET_CPU_cortexm7,\n+  TARGET_CPU_cortexm4,\n+  TARGET_CPU_cortexm3,\n+  TARGET_CPU_marvell_pj4,\n+  TARGET_CPU_cortexa15cortexa7,\n+  TARGET_CPU_cortexa17cortexa7,\n+  TARGET_CPU_cortexa32,\n+  TARGET_CPU_cortexa35,\n+  TARGET_CPU_cortexa53,\n+  TARGET_CPU_cortexa57,\n+  TARGET_CPU_cortexa72,\n+  TARGET_CPU_cortexa73,\n+  TARGET_CPU_exynosm1,\n+  TARGET_CPU_falkor,\n+  TARGET_CPU_qdf24xx,\n+  TARGET_CPU_xgene1,\n+  TARGET_CPU_cortexa57cortexa53,\n+  TARGET_CPU_cortexa72cortexa53,\n+  TARGET_CPU_cortexa73cortexa35,\n+  TARGET_CPU_cortexa73cortexa53,\n+  TARGET_CPU_cortexm23,\n+  TARGET_CPU_cortexm33,\n+  TARGET_CPU_arm_none\n+};\n+\n+enum fpu_type\n+{\n+  TARGET_FPU_vfp,\n+  TARGET_FPU_vfpv2,\n+  TARGET_FPU_vfpv3,\n+  TARGET_FPU_vfpv3_fp16,\n+  TARGET_FPU_vfpv3_d16,\n+  TARGET_FPU_vfpv3_d16_fp16,\n+  TARGET_FPU_vfpv3xd,\n+  TARGET_FPU_vfpv3xd_fp16,\n+  TARGET_FPU_neon,\n+  TARGET_FPU_neon_vfpv3,\n+  TARGET_FPU_neon_fp16,\n+  TARGET_FPU_vfpv4,\n+  TARGET_FPU_neon_vfpv4,\n+  TARGET_FPU_vfpv4_d16,\n+  TARGET_FPU_fpv4_sp_d16,\n+  TARGET_FPU_fpv5_sp_d16,\n+  TARGET_FPU_fpv5_d16,\n+  TARGET_FPU_fp_armv8,\n+  TARGET_FPU_neon_fp_armv8,\n+  TARGET_FPU_crypto_neon_fp_armv8,\n+  TARGET_FPU_vfp3,\n+  TARGET_FPU_auto\n+};"}, {"sha": "fc5d935182ba70de5ab2aefeec492318f42e95c5", "filename": "gcc/config/arm/arm-cpus.in", "status": "added", "additions": 1182, "deletions": 0, "changes": 1182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -0,0 +1,1182 @@\n+# CPU, FPU and architecture specifications for ARM.\n+#\n+# Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This file describes all the various CPUs, FPUs and architectures supported\n+# by the compiler.  It is pre-processed by parsecpu.awk for a number of\n+# purposes.\n+#\n+# The general form is a sequence of begin..end blocks with the following\n+# syntax:\n+# begin <object-type> <name>\n+#  attribute-statement*\n+# end <object-type> <name>\n+#\n+# where object type is one of \"cpu\" \"arch\" \"fpu\".  Each object type has\n+# a specific set of permitted attributes, some of which are optional; further\n+# details can be found below.\n+#\n+# Some objects cross-reference other objects by name.  Objects are permitted\n+# in any order and it is not necessary to place a cross-referenced object\n+# earlier in the file.\n+#\n+# The object names for cpu, arch and fpu objects are used for the public option\n+# names in the final compiler.  The order within each group is preserved and\n+# forms the order for the list within the compiler.\n+\n+# Architecture entries\n+# format:\n+# begin arch <name>\n+#   tune for <cpu>\n+#   [tune flags <list>]\n+#   base <name>\n+#   isa <isa-flags-list>\n+# end arch <name>\n+#\n+\n+begin arch armv2\n+ tune for arm2\n+ tune flags CO_PROC NO_MODE32\n+ base 2\n+ isa ARMv2 bit_mode26\n+end arch armv2\n+\n+begin arch armv2a\n+ tune for arm2\n+ tune flags CO_PROC NO_MODE32\n+ base 2\n+ isa ARMv2 bit_mode26\n+end arch armv2a\n+\n+begin arch armv3\n+ tune for arm6\n+ tune flags CO_PROC\n+ base 3\n+ isa ARMv3 bit_mode26\n+end arch armv3\n+\n+begin arch armv3m\n+ tune for arm7m\n+ tune flags CO_PROC\n+ base 3M\n+ isa ARMv3m bit_mode26\n+end arch armv3m\n+\n+begin arch armv4\n+ tune for arm7tdmi\n+ tune flags CO_PROC\n+ base 4\n+ isa ARMv4 bit_mode26\n+end arch armv4\n+\n+# Strictly, bit_mode26 is a permitted option for v4t, but there are no\n+# implementations that support it, so we will leave it out for now.\n+begin arch armv4t\n+ tune for arm7tdmi\n+ tune flags CO_PROC\n+ base 4T\n+ isa ARMv4t\n+end arch armv4t\n+\n+begin arch armv5\n+ tune for arm10tdmi\n+ tune flags CO_PROC\n+ base 5\n+ isa ARMv5\n+end arch armv5\n+\n+begin arch armv5t\n+ tune for arm10tdmi\n+ tune flags CO_PROC\n+ base 5T\n+ isa ARMv5t\n+end arch armv5t\n+\n+begin arch armv5e\n+ tune for arm1026ej-s\n+ tune flags CO_PROC\n+ base 5E\n+ isa ARMv5e\n+end arch armv5e\n+\n+begin arch armv5te\n+ tune for arm1026ej-s\n+ tune flags CO_PROC\n+ base 5TE\n+ isa ARMv5te\n+end arch armv5te\n+\n+begin arch armv5tej\n+ tune for arm1026ej-s\n+ tune flags CO_PROC\n+ base 5TEJ\n+ isa ARMv5tej\n+end arch armv5tej\n+\n+begin arch armv6\n+ tune for arm1136j-s\n+ tune flags CO_PROC\n+ base 6\n+ isa ARMv6\n+end arch armv6\n+\n+begin arch armv6j\n+ tune for arm1136j-s\n+ tune flags CO_PROC\n+ base 6J\n+ isa ARMv6j\n+end arch armv6j\n+\n+begin arch armv6k\n+ tune for mpcore\n+ tune flags CO_PROC\n+ base 6K\n+ isa ARMv6k\n+end arch armv6k\n+\n+begin arch armv6z\n+ tune for arm1176jz-s\n+ tune flags CO_PROC\n+ base 6Z\n+ isa ARMv6z\n+end arch armv6z\n+\n+begin arch armv6kz\n+ tune for arm1176jz-s\n+ tune flags CO_PROC\n+ base 6KZ\n+ isa ARMv6kz\n+end arch armv6kz\n+\n+begin arch armv6zk\n+ tune for arm1176jz-s\n+ tune flags CO_PROC\n+ base 6KZ\n+ isa ARMv6kz\n+end arch armv6zk\n+\n+begin arch armv6t2\n+ tune for arm1156t2-s\n+ tune flags CO_PROC\n+ base 6T2\n+ isa ARMv6t2\n+end arch armv6t2\n+\n+begin arch armv6-m\n+ tune for cortex-m1\n+ base 6M\n+ isa ARMv6m\n+end arch armv6-m\n+\n+begin arch armv6s-m\n+ tune for cortex-m1\n+ base 6M\n+ isa ARMv6m\n+end arch armv6s-m\n+\n+begin arch armv7\n+ tune for cortex-a8\n+ tune flags CO_PROC\n+ base 7\n+ isa ARMv7\n+end arch armv7\n+\n+begin arch armv7-a\n+ tune for cortex-a8\n+ tune flags CO_PROC\n+ base 7A\n+ isa ARMv7a\n+end arch armv7-a\n+\n+begin arch armv7ve\n+ tune for cortex-a8\n+ tune flags CO_PROC\n+ base 7A\n+ isa ARMv7ve\n+end arch armv7ve\n+\n+begin arch armv7-r\n+ tune for cortex-r4\n+ tune flags CO_PROC\n+ base 7R\n+ isa ARMv7r\n+end arch armv7-r\n+\n+begin arch armv7-m\n+ tune for cortex-m3\n+ tune flags CO_PROC\n+ base 7M\n+ isa ARMv7m\n+end arch armv7-m\n+\n+begin arch armv7e-m\n+ tune for cortex-m4\n+ tune flags CO_PROC\n+ base 7EM\n+ isa ARMv7em\n+end arch armv7e-m\n+\n+begin arch armv8-a\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ isa ARMv8a\n+end arch armv8-a\n+\n+begin arch armv8-a+crc\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ isa ARMv8a bit_crc32\n+end arch armv8-a+crc\n+\n+begin arch armv8.1-a\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ isa ARMv8_1a\n+end arch armv8.1-a\n+\n+begin arch armv8.2-a\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ isa ARMv8_2a\n+end arch armv8.2-a\n+\n+begin arch armv8.2-a+fp16\n+ tune for cortex-a53\n+ tune flags CO_PROC\n+ base 8A\n+ isa ARMv8_2a bit_fp16\n+end arch armv8.2-a+fp16\n+\n+begin arch armv8-m.base\n+ tune for cortex-m23\n+ base 8M_BASE\n+ isa ARMv8m_base\n+end arch armv8-m.base\n+\n+begin arch armv8-m.main\n+ tune for cortex-m7\n+ tune flags CO_PROC\n+ base 8M_MAIN\n+ isa ARMv8m_main\n+end arch armv8-m.main\n+\n+begin arch armv8-m.main+dsp\n+ tune for cortex-m33\n+ tune flags CO_PROC\n+ base 8M_MAIN\n+ isa ARMv8m_main bit_ARMv7em\n+end arch armv8-m.main+dsp\n+\n+begin arch iwmmxt\n+ tune for iwmmxt\n+ tune flags LDSCHED STRONG XSCALE\n+ base 5TE\n+ isa ARMv5te bit_xscale bit_iwmmxt\n+end arch iwmmxt\n+\n+begin arch iwmmxt2\n+ tune for iwmmxt2\n+ tune flags LDSCHED STRONG XSCALE\n+ base 5TE\n+ isa ARMv5te bit_xscale bit_iwmmxt bit_iwmmxt2\n+end arch iwmmxt2\n+\n+# CPU entries\n+# format:\n+# begin cpu <name>\n+#   [cname <c-compatible-name>]\n+#   [tune for <cpu-name>]\n+#   [tune flags <list>]\n+#   architecture <name>\n+#   [fpu <name>]\n+#   [isa <additional-isa-flags-list>]\n+#   [costs <name>]\n+# end cpu <name>\n+#\n+# If omitted, cname is formed from transforming the cpuname to convert\n+# non-valid punctuation characters to '_'.\n+# If specified, tune for specifies a CPU target to use for tuning this core.\n+# isa flags are appended to those defined by the architecture.\n+\n+\n+# V2/V2A Architecture Processors\n+begin cpu arm2\n+ tune flags CO_PROC NO_MODE32\n+ architecture armv2\n+ costs slowmul\n+end cpu arm2\n+\n+begin cpu arm250\n+ tune flags CO_PROC NO_MODE32\n+ architecture armv2\n+ costs slowmul\n+end cpu arm250\n+\n+begin cpu arm3\n+ tune flags CO_PROC NO_MODE32\n+ architecture armv2\n+ costs slowmul\n+end cpu arm3\n+\n+\n+# V3 Architecture Processors\n+begin cpu arm6\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm6\n+\n+begin cpu arm60\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm60\n+\n+begin cpu arm600\n+ tune flags CO_PROC WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm600\n+\n+begin cpu arm610\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm610\n+\n+begin cpu arm620\n+ tune flags CO_PROC WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm620\n+\n+begin cpu arm7\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7\n+\n+begin cpu arm7d\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7d\n+\n+begin cpu arm7di\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7di\n+\n+begin cpu arm70\n+ tune flags CO_PROC\n+ architecture armv3\n+ costs slowmul\n+end cpu arm70\n+\n+begin cpu arm700\n+ tune flags CO_PROC WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm700\n+\n+begin cpu arm700i\n+ tune flags CO_PROC WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm700i\n+\n+begin cpu arm710\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm710\n+\n+begin cpu arm720\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm720\n+\n+begin cpu arm710c\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm710c\n+\n+begin cpu arm7100\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7100\n+\n+begin cpu arm7500\n+ tune flags WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7500\n+\n+# Doesn't have an external co-proc, but does have embedded FPA\n+# (the FPA part is no-longer supported).\n+begin cpu arm7500fe\n+ tune flags CO_PROC WBUF\n+ architecture armv3\n+ costs slowmul\n+end cpu arm7500fe\n+\n+\n+# V3M Architecture Processors\n+# arm7m doesn't exist on its own, but only with \"D\", (and \"I\"), but\n+# those don't alter the code, so arm7m is sometimes used.\n+begin cpu arm7m\n+ tune flags CO_PROC\n+ architecture armv3m\n+ costs fastmul\n+end cpu arm7m\n+\n+begin cpu arm7dm\n+ tune flags CO_PROC\n+ architecture armv3m\n+ costs fastmul\n+end cpu arm7dm\n+\n+begin cpu arm7dmi\n+ tune flags CO_PROC\n+ architecture armv3m\n+ costs fastmul\n+end cpu arm7dmi\n+\n+\n+# V4 Architecture Processors\n+begin cpu arm8\n+ tune flags LDSCHED\n+ architecture armv4\n+ costs fastmul\n+end cpu arm8\n+\n+begin cpu arm810\n+ tune flags LDSCHED\n+ architecture armv4\n+ costs fastmul\n+end cpu arm810\n+\n+begin cpu strongarm\n+ tune flags LDSCHED STRONG\n+ architecture armv4\n+ costs strongarm\n+end cpu strongarm\n+\n+begin cpu strongarm110\n+ tune flags LDSCHED STRONG\n+ architecture armv4\n+ costs strongarm\n+end cpu strongarm110\n+\n+begin cpu strongarm1100\n+ tune flags LDSCHED STRONG\n+ architecture armv4\n+ costs strongarm\n+end cpu strongarm1100\n+\n+begin cpu strongarm1110\n+ tune flags LDSCHED STRONG\n+ architecture armv4\n+ costs strongarm\n+end cpu strongarm1110\n+\n+begin cpu fa526\n+ tune flags LDSCHED\n+ architecture armv4\n+ costs fastmul\n+end cpu fa526\n+\n+begin cpu fa626\n+ tune flags LDSCHED\n+ architecture armv4\n+ costs fastmul\n+end cpu fa626\n+\n+\n+# V4T Architecture Processors\n+begin cpu arm7tdmi\n+ tune flags CO_PROC\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm7tdmi\n+\n+begin cpu arm7tdmi-s\n+ cname arm7tdmis\n+ tune flags CO_PROC\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm7tdmi-s\n+\n+begin cpu arm710t\n+ tune flags WBUF\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm710t\n+\n+begin cpu arm720t\n+ tune flags WBUF\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm720t\n+\n+begin cpu arm740t\n+ tune flags WBUF\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm740t\n+\n+begin cpu arm9\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm9\n+\n+begin cpu arm9tdmi\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm9tdmi\n+\n+begin cpu arm920\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm920\n+\n+begin cpu arm920t\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm920t\n+\n+begin cpu arm922t\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm922t\n+\n+begin cpu arm940t\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu arm940t\n+\n+begin cpu ep9312\n+ tune flags LDSCHED\n+ architecture armv4t\n+ costs fastmul\n+end cpu ep9312\n+\n+\n+# V5T Architecture Processors\n+begin cpu arm10tdmi\n+ tune flags LDSCHED\n+ architecture armv5t\n+ costs fastmul\n+end cpu arm10tdmi\n+\n+begin cpu arm1020t\n+ tune flags LDSCHED\n+ architecture armv5t\n+ costs fastmul\n+end cpu arm1020t\n+\n+\n+# V5TE Architecture Processors\n+begin cpu arm9e\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu arm9e\n+\n+begin cpu arm946e-s\n+ cname arm946es\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu arm946e-s\n+\n+begin cpu arm966e-s\n+ cname arm966es\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu arm966e-s\n+\n+begin cpu arm968e-s\n+ cname arm968es\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu arm968e-s\n+\n+begin cpu arm10e\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs fastmul\n+end cpu arm10e\n+\n+begin cpu arm1020e\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs fastmul\n+end cpu arm1020e\n+\n+begin cpu arm1022e\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs fastmul\n+end cpu arm1022e\n+\n+begin cpu xscale\n+ tune flags LDSCHED XSCALE\n+ architecture armv5te\n+ isa bit_xscale\n+ costs xscale\n+end cpu xscale\n+\n+begin cpu iwmmxt\n+ tune flags LDSCHED XSCALE\n+ architecture iwmmxt\n+ costs xscale\n+end cpu iwmmxt\n+\n+begin cpu iwmmxt2\n+ tune flags LDSCHED XSCALE\n+ architecture iwmmxt2\n+ costs xscale\n+end cpu iwmmxt2\n+\n+begin cpu fa606te\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu fa606te\n+\n+begin cpu fa626te\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu fa626te\n+\n+begin cpu fmp626\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs 9e\n+end cpu fmp626\n+\n+begin cpu fa726te\n+ tune flags LDSCHED\n+ architecture armv5te\n+ costs fa726te\n+end cpu fa726te\n+\n+\n+# V5TEJ Architecture Processors\n+begin cpu arm926ej-s\n+ cname arm926ejs\n+ tune flags LDSCHED\n+ architecture armv5tej\n+ costs 9e\n+end cpu arm926ej-s\n+\n+begin cpu arm1026ej-s\n+ cname arm1026ejs\n+ tune flags LDSCHED\n+ architecture armv5tej\n+ costs 9e\n+end cpu arm1026ej-s\n+\n+\n+# V6 Architecture Processors\n+begin cpu arm1136j-s\n+ cname arm1136js\n+ tune flags LDSCHED\n+ architecture armv6j\n+ costs 9e\n+end cpu arm1136j-s\n+\n+begin cpu arm1136jf-s\n+ cname arm1136jfs\n+ tune flags LDSCHED\n+ architecture armv6j\n+ fpu vfpv2\n+ costs 9e\n+end cpu arm1136jf-s\n+\n+begin cpu arm1176jz-s\n+ cname arm1176jzs\n+ tune flags LDSCHED\n+ architecture armv6kz\n+ costs 9e\n+end cpu arm1176jz-s\n+\n+begin cpu arm1176jzf-s\n+ cname arm1176jzfs\n+ tune flags LDSCHED\n+ architecture armv6kz\n+ fpu vfpv2\n+ costs 9e\n+end cpu arm1176jzf-s\n+\n+begin cpu mpcorenovfp\n+ tune flags LDSCHED\n+ architecture armv6k\n+ costs 9e\n+end cpu mpcorenovfp\n+\n+begin cpu mpcore\n+ tune flags LDSCHED\n+ architecture armv6k\n+ fpu vfpv2\n+ costs 9e\n+end cpu mpcore\n+\n+begin cpu arm1156t2-s\n+ cname arm1156t2s\n+ tune flags LDSCHED\n+ architecture armv6t2\n+ costs v6t2\n+end cpu arm1156t2-s\n+\n+begin cpu arm1156t2f-s\n+ cname arm1156t2fs\n+ tune flags LDSCHED\n+ architecture armv6t2\n+ fpu vfpv2\n+ costs v6t2\n+end cpu arm1156t2f-s\n+\n+\n+# V6M Architecture Processors\n+begin cpu cortex-m1\n+ cname cortexm1\n+ tune flags LDSCHED\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m1\n+\n+begin cpu cortex-m0\n+ cname cortexm0\n+ tune flags LDSCHED\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m0\n+\n+begin cpu cortex-m0plus\n+ cname cortexm0plus\n+ tune flags LDSCHED\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m0plus\n+\n+\n+# V6M Architecture Processors for small-multiply implementations.\n+begin cpu cortex-m1.small-multiply\n+ cname cortexm1smallmultiply\n+ tune for cortex-m1\n+ tune flags LDSCHED SMALLMUL\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m1.small-multiply\n+\n+begin cpu cortex-m0.small-multiply\n+ cname cortexm0smallmultiply\n+ tune for cortex-m0\n+ tune flags LDSCHED SMALLMUL\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m0.small-multiply\n+\n+begin cpu cortex-m0plus.small-multiply\n+ cname cortexm0plussmallmultiply\n+ tune for cortexm0-plus\n+ tune flags LDSCHED SMALLMUL\n+ architecture armv6-m\n+ costs v6m\n+end cpu cortex-m0plus.small-multiply\n+\n+\n+# V7 Architecture Processors\n+begin cpu generic-armv7-a\n+ cname genericv7a\n+ tune flags LDSCHED\n+ architecture armv7-a\n+ costs cortex\n+end cpu generic-armv7-a\n+\n+begin cpu cortex-a5\n+ cname cortexa5\n+ tune flags LDSCHED\n+ architecture armv7-a\n+ costs cortex_a5\n+end cpu cortex-a5\n+\n+begin cpu cortex-a7\n+ cname cortexa7\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a7\n+end cpu cortex-a7\n+\n+begin cpu cortex-a8\n+ cname cortexa8\n+ tune flags LDSCHED\n+ architecture armv7-a\n+ costs cortex_a8\n+end cpu cortex-a8\n+\n+begin cpu cortex-a9\n+ cname cortexa9\n+ tune flags LDSCHED\n+ architecture armv7-a\n+ costs cortex_a9\n+end cpu cortex-a9\n+\n+begin cpu cortex-a12\n+ cname cortexa12\n+ tune for cortex-a17\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a12\n+end cpu cortex-a12\n+\n+begin cpu cortex-a15\n+ cname cortexa15\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a15\n+end cpu cortex-a15\n+\n+begin cpu cortex-a17\n+ cname cortexa17\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a12\n+end cpu cortex-a17\n+\n+begin cpu cortex-r4\n+ cname cortexr4\n+ tune flags LDSCHED\n+ architecture armv7-r\n+ costs cortex\n+end cpu cortex-r4\n+\n+begin cpu cortex-r4f\n+ cname cortexr4f\n+ tune flags LDSCHED\n+ architecture armv7-r\n+ costs cortex\n+end cpu cortex-r4f\n+\n+begin cpu cortex-r5\n+ cname cortexr5\n+ tune flags LDSCHED\n+ architecture armv7-r\n+ isa bit_adiv\n+ costs cortex\n+end cpu cortex-r5\n+\n+begin cpu cortex-r7\n+ cname cortexr7\n+ tune flags LDSCHED\n+ architecture armv7-r\n+ isa bit_adiv\n+ costs cortex\n+end cpu cortex-r7\n+\n+begin cpu cortex-r8\n+ cname cortexr8\n+ tune for cortex-r7\n+ tune flags LDSCHED\n+ architecture armv7-r\n+ isa bit_adiv\n+ costs cortex\n+end cpu cortex-r8\n+\n+begin cpu cortex-m7\n+ cname cortexm7\n+ tune flags LDSCHED\n+ architecture armv7e-m\n+ isa quirk_no_volatile_ce\n+ costs cortex_m7\n+end cpu cortex-m7\n+\n+begin cpu cortex-m4\n+ cname cortexm4\n+ tune flags LDSCHED\n+ architecture armv7e-m\n+ costs v7m\n+end cpu cortex-m4\n+\n+begin cpu cortex-m3\n+ cname cortexm3\n+ tune flags LDSCHED\n+ architecture armv7-m\n+ isa quirk_cm3_ldrd\n+ costs v7m\n+end cpu cortex-m3\n+\n+begin cpu marvell-pj4\n+ tune flags LDSCHED\n+ architecture armv7-a\n+ costs marvell_pj4\n+end cpu marvell-pj4\n+\n+\n+# V7 big.LITTLE implementations\n+begin cpu cortex-a15.cortex-a7\n+ cname cortexa15cortexa7\n+ tune for cortex-a7\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a15\n+end cpu cortex-a15.cortex-a7\n+\n+begin cpu cortex-a17.cortex-a7\n+ cname cortexa17cortexa7\n+ tune for cortex-a7\n+ tune flags LDSCHED\n+ architecture armv7ve\n+ costs cortex_a12\n+end cpu cortex-a17.cortex-a7\n+\n+\n+# V8 A-profile Architecture Processors\n+begin cpu cortex-a32\n+ cname cortexa32\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a35\n+end cpu cortex-a32\n+\n+begin cpu cortex-a35\n+ cname cortexa35\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a35\n+end cpu cortex-a35\n+\n+begin cpu cortex-a53\n+ cname cortexa53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a53\n+end cpu cortex-a53\n+\n+begin cpu cortex-a57\n+ cname cortexa57\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a57\n+end cpu cortex-a57\n+\n+begin cpu cortex-a72\n+ cname cortexa72\n+ tune for cortex-a57\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a57\n+end cpu cortex-a72\n+\n+begin cpu cortex-a73\n+ cname cortexa73\n+ tune for cortex-a57\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a73\n+end cpu cortex-a73\n+\n+begin cpu exynos-m1\n+ cname exynosm1\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs exynosm1\n+end cpu exynos-m1\n+\n+begin cpu falkor\n+ tune for cortex-a57\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs qdf24xx\n+end cpu falkor\n+\n+begin cpu qdf24xx\n+ tune for cortex-a57\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs qdf24xx\n+end cpu qdf24xx\n+\n+begin cpu xgene1\n+ tune flags LDSCHED\n+ architecture armv8-a\n+ costs xgene1\n+end cpu xgene1\n+\n+\n+# V8 A-profile big.LITTLE implementations\n+begin cpu cortex-a57.cortex-a53\n+ cname cortexa57cortexa53\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a57\n+end cpu cortex-a57.cortex-a53\n+\n+begin cpu cortex-a72.cortex-a53\n+ cname cortexa72cortexa53\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a57\n+end cpu cortex-a72.cortex-a53\n+\n+begin cpu cortex-a73.cortex-a35\n+ cname cortexa73cortexa35\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a73\n+end cpu cortex-a73.cortex-a35\n+\n+begin cpu cortex-a73.cortex-a53\n+ cname cortexa73cortexa53\n+ tune for cortex-a53\n+ tune flags LDSCHED\n+ architecture armv8-a+crc\n+ costs cortex_a73\n+end cpu cortex-a73.cortex-a53\n+\n+\n+# V8 M-profile implementations.\n+begin cpu cortex-m23\n+ cname cortexm23\n+ tune flags LDSCHED\n+ architecture armv8-m.base\n+ costs v6m\n+end cpu cortex-m23\n+\n+begin cpu cortex-m33\n+ cname cortexm33\n+ tune flags LDSCHED\n+ architecture armv8-m.main+dsp\n+ costs v7m\n+end cpu cortex-m33\n+\n+# FPU entries\n+# format:\n+# begin fpu <name>\n+#   isa <isa-flags-list>\n+# end fpu <name>\n+\n+begin fpu vfp\n+ isa VFPv2 FP_DBL\n+end fpu vfp\n+\n+begin fpu vfpv2\n+ isa VFPv2 FP_DBL\n+end fpu vfpv2\n+\n+begin fpu vfpv3\n+ isa VFPv3 FP_D32\n+end fpu vfpv3\n+\n+begin fpu vfpv3-fp16\n+ isa VFPv3 FP_D32 bit_fp16conv\n+end fpu vfpv3-fp16\n+\n+begin fpu vfpv3-d16\n+ isa VFPv3 FP_DBL\n+end fpu vfpv3-d16\n+\n+begin fpu vfpv3-d16-fp16\n+ isa VFPv3 FP_DBL bit_fp16conv\n+end fpu vfpv3-d16-fp16\n+\n+begin fpu vfpv3xd\n+ isa VFPv3\n+end fpu vfpv3xd\n+\n+begin fpu vfpv3xd-fp16\n+ isa VFPv3 bit_fp16conv\n+end fpu vfpv3xd-fp16\n+\n+begin fpu neon\n+ isa VFPv3 NEON\n+end fpu neon\n+\n+begin fpu neon-vfpv3\n+ isa VFPv3 NEON\n+end fpu neon-vfpv3\n+\n+begin fpu neon-fp16\n+ isa VFPv3 NEON bit_fp16conv\n+end fpu neon-fp16\n+\n+begin fpu vfpv4\n+ isa VFPv4 FP_D32\n+end fpu vfpv4\n+\n+begin fpu neon-vfpv4\n+ isa VFPv4 NEON\n+end fpu neon-vfpv4\n+\n+begin fpu vfpv4-d16\n+ isa VFPv4 FP_DBL\n+end fpu vfpv4-d16\n+\n+begin fpu fpv4-sp-d16\n+ isa VFPv4\n+end fpu fpv4-sp-d16\n+\n+begin fpu fpv5-sp-d16\n+ isa FPv5\n+end fpu fpv5-sp-d16\n+\n+begin fpu fpv5-d16\n+ isa FPv5 FP_DBL\n+end fpu fpv5-d16\n+\n+begin fpu fp-armv8\n+ isa FP_ARMv8 FP_D32\n+end fpu fp-armv8\n+\n+begin fpu neon-fp-armv8\n+ isa FP_ARMv8 NEON\n+end fpu neon-fp-armv8\n+\n+begin fpu crypto-neon-fp-armv8\n+ isa FP_ARMv8 CRYPTO\n+end fpu crypto-neon-fp-armv8\n+\n+# Compatibility aliases.\n+begin fpu vfp3\n+ isa VFPv3 FP_D32\n+end fpu vfp3"}, {"sha": "24f61c3593311ee6a792364672afd3f94907a26d", "filename": "gcc/config/arm/arm-fpus.def", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=ca280d38f95255a876fc56547d55ab3db50ea38f", "patch": "@@ -1,51 +0,0 @@\n-/* ARM FPU variants.\n-   Copyright (C) 1991-2017 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* Before using #include to read this file, define a macro:\n-\n-      ARM_FPU(NAME, CNAME, ISA)\n-\n-   NAME is the publicly visible option name.\n-   CNAME is a C-compatible variable name substring.\n-   ISA is the list of feature bits that this FPU provides.\n-\n-   genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n-\n-ARM_FPU(\"vfp\",\t\t\tvfp,\t\t      ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL))\n-ARM_FPU(\"vfpv2\",\t\tvfpv2,\t\t      ISA_FEAT(ISA_VFPv2) ISA_FEAT(ISA_FP_DBL))\n-ARM_FPU(\"vfpv3\",\t\tvfpv3,\t\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_FP_D32))\n-ARM_FPU(\"vfpv3-fp16\",\t\tvfpv3_fp16,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_FP_D32) ISA_FEAT(isa_bit_fp16conv))\n-ARM_FPU(\"vfpv3-d16\",\t\tvfpv3_d16,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_FP_DBL))\n-ARM_FPU(\"vfpv3-d16-fp16\",\tvfpv3_d16_fp16,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_FP_DBL) ISA_FEAT(isa_bit_fp16conv))\n-ARM_FPU(\"vfpv3xd\",\t\tvfpv3xd,\t      ISA_FEAT(ISA_VFPv3))\n-ARM_FPU(\"vfpv3xd-fp16\",\t\tvfpv3xd_fp16,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(isa_bit_fp16conv))\n-ARM_FPU(\"neon\",\t\t\tneon,\t\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_NEON))\n-ARM_FPU(\"neon-vfpv3\",\t\tneon_vfpv3,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_NEON))\n-ARM_FPU(\"neon-fp16\",\t\tneon_fp16,\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_NEON) ISA_FEAT(isa_bit_fp16conv))\n-ARM_FPU(\"vfpv4\",\t\tvfpv4,\t\t      ISA_FEAT(ISA_VFPv4) ISA_FEAT(ISA_FP_D32))\n-ARM_FPU(\"neon-vfpv4\",\t\tneon_vfpv4,\t      ISA_FEAT(ISA_VFPv4) ISA_FEAT(ISA_NEON))\n-ARM_FPU(\"vfpv4-d16\",\t\tvfpv4_d16,\t      ISA_FEAT(ISA_VFPv4) ISA_FEAT(ISA_FP_DBL))\n-ARM_FPU(\"fpv4-sp-d16\",\t\tfpv4_sp_d16,\t      ISA_FEAT(ISA_VFPv4))\n-ARM_FPU(\"fpv5-sp-d16\",\t\tfpv5_sp_d16,\t      ISA_FEAT(ISA_FPv5))\n-ARM_FPU(\"fpv5-d16\",\t\tfpv5_d16,\t      ISA_FEAT(ISA_FPv5) ISA_FEAT(ISA_FP_DBL))\n-ARM_FPU(\"fp-armv8\",\t\tfp_armv8,\t      ISA_FEAT(ISA_FP_ARMv8) ISA_FEAT(ISA_FP_D32))\n-ARM_FPU(\"neon-fp-armv8\",\tneon_fp_armv8,\t      ISA_FEAT(ISA_FP_ARMv8) ISA_FEAT(ISA_NEON))\n-ARM_FPU(\"crypto-neon-fp-armv8\", crypto_neon_fp_armv8, ISA_FEAT(ISA_FP_ARMv8) ISA_FEAT(ISA_CRYPTO))\n-/* Compatibility aliases.  */\n-ARM_FPU(\"vfp3\",\t\t\tvfp3,\t\t      ISA_FEAT(ISA_VFPv3) ISA_FEAT(ISA_FP_D32))"}, {"sha": "822958dbc743b6bc63220f892e372fdf5677dde2", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -27,28 +27,7 @@\n \n #include \"arm-flags.h\"\n #include \"arm-isa.h\"\n-\n-/* The various ARM cores.  */\n-enum processor_type\n-{\n-#undef ARM_CORE\n-#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS) \\\n-  TARGET_CPU_##INTERNAL_IDENT,\n-#include \"arm-cores.def\"\n-#undef ARM_CORE\n-  /* Used to indicate that no processor has been specified.  */\n-  TARGET_CPU_arm_none\n-};\n-\n-/* The various ARM FPUs.  */\n-enum fpu_type\n-{\n-#undef ARM_FPU\n-#define ARM_FPU(NAME, CNAME, ISA) TARGET_FPU_##CNAME,\n-#include \"arm-fpus.def\"\n-  TARGET_FPU_auto\n-#undef ARM_FPU\n-};\n+#include \"arm-cpu.h\"\n \n /* Which __fp16 format to use.\n    The enumeration values correspond to the numbering for the"}, {"sha": "cbcd85d9906d1fc797ab33b3d61969f32b9cc566", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -1,23 +1,23 @@\n ; -*- buffer-read-only: t -*-\n-; Generated automatically by genopt.sh from arm-cores.def, arm-arches.def\n-; and arm-fpus.def.\n+; Generated automatically by parsecpu.awk from arm-cpus.in.\n+; Do not edit.\n \n ; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n-;\n+\n ; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n+\n+; GCC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as\n+; published by the Free Software Foundation; either version 3,\n+; or (at your option) any later version.\n+\n+; GCC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+\n+; You should have received a copy of the GNU General Public\n+; License along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n Enum\n@@ -389,79 +389,82 @@ EnumValue\n Enum(arm_arch) String(armv5te) Value(9)\n \n EnumValue\n-Enum(arm_arch) String(armv6) Value(10)\n+Enum(arm_arch) String(armv5tej) Value(10)\n+\n+EnumValue\n+Enum(arm_arch) String(armv6) Value(11)\n \n EnumValue\n-Enum(arm_arch) String(armv6j) Value(11)\n+Enum(arm_arch) String(armv6j) Value(12)\n \n EnumValue\n-Enum(arm_arch) String(armv6k) Value(12)\n+Enum(arm_arch) String(armv6k) Value(13)\n \n EnumValue\n-Enum(arm_arch) String(armv6z) Value(13)\n+Enum(arm_arch) String(armv6z) Value(14)\n \n EnumValue\n-Enum(arm_arch) String(armv6kz) Value(14)\n+Enum(arm_arch) String(armv6kz) Value(15)\n \n EnumValue\n-Enum(arm_arch) String(armv6zk) Value(15)\n+Enum(arm_arch) String(armv6zk) Value(16)\n \n EnumValue\n-Enum(arm_arch) String(armv6t2) Value(16)\n+Enum(arm_arch) String(armv6t2) Value(17)\n \n EnumValue\n-Enum(arm_arch) String(armv6-m) Value(17)\n+Enum(arm_arch) String(armv6-m) Value(18)\n \n EnumValue\n-Enum(arm_arch) String(armv6s-m) Value(18)\n+Enum(arm_arch) String(armv6s-m) Value(19)\n \n EnumValue\n-Enum(arm_arch) String(armv7) Value(19)\n+Enum(arm_arch) String(armv7) Value(20)\n \n EnumValue\n-Enum(arm_arch) String(armv7-a) Value(20)\n+Enum(arm_arch) String(armv7-a) Value(21)\n \n EnumValue\n-Enum(arm_arch) String(armv7ve) Value(21)\n+Enum(arm_arch) String(armv7ve) Value(22)\n \n EnumValue\n-Enum(arm_arch) String(armv7-r) Value(22)\n+Enum(arm_arch) String(armv7-r) Value(23)\n \n EnumValue\n-Enum(arm_arch) String(armv7-m) Value(23)\n+Enum(arm_arch) String(armv7-m) Value(24)\n \n EnumValue\n-Enum(arm_arch) String(armv7e-m) Value(24)\n+Enum(arm_arch) String(armv7e-m) Value(25)\n \n EnumValue\n-Enum(arm_arch) String(armv8-a) Value(25)\n+Enum(arm_arch) String(armv8-a) Value(26)\n \n EnumValue\n-Enum(arm_arch) String(armv8-a+crc) Value(26)\n+Enum(arm_arch) String(armv8-a+crc) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(armv8.1-a) Value(27)\n+Enum(arm_arch) String(armv8.1-a) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a) Value(28)\n+Enum(arm_arch) String(armv8.2-a) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a+fp16) Value(29)\n+Enum(arm_arch) String(armv8.2-a+fp16) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(30)\n+Enum(arm_arch) String(armv8-m.base) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(31)\n+Enum(arm_arch) String(armv8-m.main) Value(32)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main+dsp) Value(32)\n+Enum(arm_arch) String(armv8-m.main+dsp) Value(33)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(33)\n+Enum(arm_arch) String(iwmmxt) Value(34)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(34)\n+Enum(arm_arch) String(iwmmxt2) Value(35)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "13db413459ff91ec7998b057ff2e0c994c2e59a9", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -1,5 +1,25 @@\n-;; -*- buffer-read-only: t -*-\n-;; Generated automatically by gentune.sh from arm-cores.def\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by parsecpu.awk from arm-cpus.in.\n+; Do not edit.\n+\n+; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n+\n+; This file is part of GCC.\n+\n+; GCC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as\n+; published by the Free Software Foundation; either version 3,\n+; or (at your option) any later version.\n+\n+; GCC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+\n+; You should have received a copy of the GNU General Public\n+; License along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n (define_attr \"tune\"\n \t\"arm2,arm250,arm3,\n \tarm6,arm60,arm600,"}, {"sha": "1fbeb56756f59fe50b081806cd8f4e5582c96ddc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -2293,51 +2293,15 @@ const struct tune_params arm_fa726te_tune =\n   tune_params::SCHED_AUTOPREF_OFF\n };\n \n-\n-/* Not all of these give usefully different compilation alternatives,\n-   but there is no simple way of generalizing them.  */\n-static const struct processors all_cores[] =\n-{\n-  /* ARM Cores */\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, COSTS)\t\\\n-  {NAME, TARGET_CPU_##IDENT, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, \\\n-   {ISA isa_nobit}, &arm_##COSTS##_tune},\n-#include \"arm-cores.def\"\n-#undef ARM_CORE\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n-};\n-\n-static const struct processors all_architectures[] =\n-{\n-  /* ARM Architectures */\n-  /* We don't specify tuning costs here as it will be figured out\n-     from the core.  */\n-\n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA)\t\t\t\\\n-  {NAME, TARGET_CPU_##CORE, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH,\t\\\n-  {ISA isa_nobit}, NULL},\n-#include \"arm-arches.def\"\n-#undef ARM_ARCH\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL}\n-};\n+/* Auto-generated CPU, FPU and architecture tables.  */\n+#include \"arm-cpu-data.h\"\n \n /* The name of the preprocessor macro to define for this architecture.  PROFILE\n    is replaced by the architecture name (eg. 8A) in arm_option_override () and\n    is thus chosen to be big enough to hold the longest architecture name.  */\n \n char arm_arch_name[] = \"__ARM_ARCH_PROFILE__\";\n \n-/* Available values for -mfpu=.  */\n-\n-const struct arm_fpu_desc all_fpus[] =\n-{\n-#undef ARM_FPU\n-#define ARM_FPU(NAME, CNAME, ISA)\t\\\n-  { NAME, {ISA isa_nobit} },\n-#include \"arm-fpus.def\"\n-#undef ARM_FPU\n-};\n-\n /* Supported TLS relocations.  */\n \n enum tls_reloc {"}, {"sha": "556501812ecee9a71af47ea4ce1e1567ee5b7444", "filename": "gcc/config/arm/genopt.sh", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgenopt.sh?ref=ca280d38f95255a876fc56547d55ab3db50ea38f", "patch": "@@ -1,98 +0,0 @@\n-#!/bin/sh\n-# Generate arm-tables.opt from the lists in *.def.\n-# Copyright (C) 2011-2017 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-cat <<EOF\n-; -*- buffer-read-only: t -*-\n-; Generated automatically by genopt.sh from arm-cores.def, arm-arches.def\n-; and arm-fpus.def.\n-\n-; Copyright (C) 2011-2017 Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-Enum\n-Name(processor_type) Type(enum processor_type)\n-Known ARM CPUs (for use with the -mcpu= and -mtune= options):\n-\n-EOF\n-\n-awk -F'[(, \t]+' '/^ARM_CORE/ {\n-    name = $2\n-    enum = $3\n-    gsub(\"\\\"\", \"\", name)\n-    print \"EnumValue\"\n-    print \"Enum(processor_type) String(\" name \") Value( TARGET_CPU_\" enum \")\"\n-    print \"\"\n-}' $1/arm-cores.def\n-\n-cat <<EOF\n-Enum\n-Name(arm_arch) Type(int)\n-Known ARM architectures (for use with the -march= option):\n-\n-EOF\n-\n-awk -F'[(, \t]+' 'BEGIN {\n-    value = 0\n-}\n-/^ARM_ARCH/ {\n-    name = $2\n-    gsub(\"\\\"\", \"\", name)\n-    print \"EnumValue\"\n-    print \"Enum(arm_arch) String(\" name \") Value(\" value \")\"\n-    print \"\"\n-    value++\n-}' $1/arm-arches.def\n-\n-cat <<EOF\n-Enum\n-Name(arm_fpu) Type(enum fpu_type)\n-Known ARM FPUs (for use with the -mfpu= option):\n-\n-EOF\n-\n-awk -F'[(, \t]+' '\n-/^ARM_FPU/ {\n-    name = $2\n-    enum = $3\n-    gsub(\"\\\"\", \"\", name)\n-    print \"EnumValue\"\n-    print \"Enum(arm_fpu) String(\" name \") Value(TARGET_FPU_\" enum \")\"\n-    print \"\"\n-}\n-END {\n-    print \"EnumValue\"\n-    print \"Enum(arm_fpu) String(auto) Value(TARGET_FPU_auto)\"\n-}' $1/arm-fpus.def\n-"}, {"sha": "16a094fdf0713972ea1a84c460a1f662eefae4cc", "filename": "gcc/config/arm/gentune.sh", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Fgentune.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca280d38f95255a876fc56547d55ab3db50ea38f/gcc%2Fconfig%2Farm%2Fgentune.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgentune.sh?ref=ca280d38f95255a876fc56547d55ab3db50ea38f", "patch": "@@ -1,29 +0,0 @@\n-#!/bin/sh\n-# Generate arm-tune.md, a file containing the tune attribute from the list of \n-# CPUs in arm-cores.def\n-# Copyright (C) 2004-2017 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-echo \";; -*- buffer-read-only: t -*-\"\n-echo \";; Generated automatically by gentune.sh from arm-cores.def\"\n-\n-allcores=`awk -F'[(, \t]+' '/^ARM_CORE/ { cores = cores$3\",\" } END { print cores } ' $1`\n-\n-echo \"(define_attr \\\"tune\\\"\"\n-echo \"\t\\\"$allcores\\\"\" | sed -e 's/,\"$/\"/' | sed -e 's/\\([a-z0-9_]\\+,[a-z0-9_]\\+,[a-z0-9_]\\+,\\)/\\1\\n\\t/g'\n-echo \"\t(const (symbol_ref \\\"((enum attr_tune) arm_tune)\\\")))\""}, {"sha": "c7f3e12752113e26d65a90fd87d003746800f2cb", "filename": "gcc/config/arm/parsecpu.awk", "status": "added", "additions": 491, "deletions": 0, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -0,0 +1,491 @@\n+# Manipulate the CPU, FPU and architecture descriptions for ARM.\n+# Copyright (C) 2017 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Invoke this with '-v cmd=<cmd>\"\n+# where <cmd> is one of:\n+#\tdata: Print the standard 'C' data tables for the CPUs\n+#\tcommon-data: Print the 'C' data for shared driver/compiler files\n+#\theaders: Print the standard 'C' headers for the CPUs\n+#\tmd: Print the machine description fragment\n+#\topt: Print the option tables fragment\n+#\tchkcpu <name>: Checks that <name> is a valid CPU\n+#\tchktune <name>: Checks that <name> is a valid CPU\n+#\tchkfpu <name>: Checks that <name> is a valid FPU\n+#\tchkarch <name>: Checks that <arch> is a valid architecture\n+\n+function fatal (m) {\n+    print \"error (\"lineno\"): \" m > \"/dev/stderr\"\n+    exit 1\n+}\n+\n+function toplevel () {\n+    if (cpu_name != \"\") fatal(\"missing \\\"end cpu\\\"\")\n+    if (arch_name != \"\") fatal(\"missing \\\"end arch\\\"\")\n+    if (fpu_name != \"\") fatal(\"missing \\\"end fpu\\\"\")\n+}\n+\n+function boilerplate (style) {\n+    ce = \"\"\n+    if (style == \"C\" ) {\n+\tcs = \"/* \"\n+\tcc = \"   \"\n+\tce = \"  */\"\n+    } else if (style == \"md\") {\n+\tcc = \"; \"\n+\tcs = cc\n+    } else if (style == \"sh\") {\n+\tcc = \"# \"\n+\tcs = cc\n+    } else fatal(\"Unknown comment style: \"style)\n+\n+    print cs \"-*- buffer-read-only: t -*-\"\n+\n+    print cc \"Generated automatically by parsecpu.awk from arm-cpus.in.\"\n+    print cc \"Do not edit.\"\n+    print \"\"\n+    print cc \"Copyright (C) 2011-2017 Free Software Foundation, Inc.\"\n+    print \"\"\n+    print cc \"This file is part of GCC.\"\n+    print \"\"\n+    print cc \"GCC is free software; you can redistribute it and/or modify\"\n+    print cc \"it under the terms of the GNU General Public License as\"\n+    print cc \"published by the Free Software Foundation; either version 3,\"\n+    print cc \"or (at your option) any later version.\"\n+    print \"\"\n+    print cc \"GCC is distributed in the hope that it will be useful,\"\n+    print cc \"but WITHOUT ANY WARRANTY; without even the implied warranty of\"\n+    print cc \"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\n+    print cc \"GNU General Public License for more details.\"\n+    print \"\"\n+    print cc \"You should have received a copy of the GNU General Public\"\n+    print cc \"License along with GCC; see the file COPYING3.  If not see\"\n+    print cc \"<http://www.gnu.org/licenses/>.\" ce\n+    print \"\"\n+}\n+\n+function tune_flag_pfx (f) {\n+    return \"TF_\" f\n+}\n+\n+function isa_pfx (f) {\n+    if (f ~ /^(bit|quirk)_.*/) return \"isa_\" f\n+    return \"ISA_\" f\n+}\n+\n+function gen_headers () {\n+    boilerplate(\"C\")\n+\n+    print \"enum processor_type\"\n+    print \"{\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tprint \"  TARGET_CPU_\"cpu_cnames[cpus[n]]\",\"\n+    }\n+    print \"  TARGET_CPU_arm_none\"\n+    print \"};\\n\"\n+\n+    print \"enum fpu_type\"\n+    print \"{\"\n+\n+    nfpus = split (fpu_list, fpus)\n+\n+    for (n = 1; n <= nfpus; n++) {\n+\tprint \"  TARGET_FPU_\"fpu_cnames[fpus[n]]\",\"\n+    }\n+    print \"  TARGET_FPU_auto\"\n+    print \"};\"\n+}\n+\n+function gen_data () {\n+    boilerplate(\"C\")\n+\n+    print \"static const struct processors all_cores[] =\"\n+    print \"{\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tprint \"  {\"\n+\tprint \"    \\\"\" cpus[n] \"\\\", TARGET_CPU_\" cpu_cnames[cpus[n]] \",\"\n+\tif (cpus[n] in cpu_tune_flags) {\n+\t    print \"    (\" cpu_tune_flags[cpus[n]] \"),\"\n+\t} else print \"    0,\"\n+\tif (! (cpu_arch[cpus[n]] in arch_isa)) {\n+\t    fatal(\"unknown arch \" cpu_arch[cpus[n]] \" for cpu \" cpus[n])\n+\t}\n+\tprint \"    \\\"\" arch_base[cpu_arch[cpus[n]]] \"\\\", BASE_ARCH_\" \\\n+\t    arch_base[cpu_arch[cpus[n]]] \",\"\n+\tprint \"    {\"\n+\tprint \"      \" arch_isa[cpu_arch[cpus[n]]] \",\"\n+\tif (cpus[n] in cpu_fpu) print \"      \" fpu_isa[cpu_fpu[cpus[n]]] \",\"\n+\tif (cpus[n] in cpu_isa) print \"      \" cpu_isa[cpus[n]] \",\"\n+\tprint \"      isa_nobit\"\n+\tprint \"    },\"\n+\tprint \"    &arm_\" cpu_cost[cpus[n]] \"_tune\"\n+\tprint \"  },\"\n+    }\n+\n+    print \"  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0,\" \\\n+\t\" {isa_nobit}, NULL}\"\n+    print \"};\\n\"\n+\n+    print \"static const struct processors all_architectures[] =\"\n+    print \"{\"\n+\n+    narchs = split (arch_list, archs)\n+\n+    for (n = 1; n <= narchs; n++) {\n+\tprint \"  {\"\n+\tif (! (arch_tune_for[archs[n]] in cpu_cnames)) {\n+\t    fatal(\"unknown \\\"tune for\\\" target \" arch_tune_for[archs[n]] \\\n+\t\t  \"for architecture \" archs[n])\n+\t}\n+\tprint \"    \\\"\" archs[n] \\\n+\t    \"\\\", TARGET_CPU_\" cpu_cnames[arch_tune_for[archs[n]]] \",\"\n+\tif (archs[n] in arch_tune_flags) {\n+\t    print \"    (\" arch_tune_flags[archs[n]] \"),\"\n+\t} else print \"    0,\"\n+\tprint \"    \\\"\" arch_base[archs[n]] \"\\\", BASE_ARCH_\" \\\n+\t    arch_base[archs[n]] \",\"\n+\tprint \"    {\"\n+\tprint \"      \" arch_isa[archs[n]] \",\"\n+\tprint \"      isa_nobit\"\n+\tprint \"    },\"\n+\tprint \"    NULL\"\n+\tprint \"  },\"\n+    }\n+\n+    print \"  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0,\" \\\n+\t\" {isa_nobit}, NULL}\"\n+    print \"};\\n\"\n+\n+    print \"const struct arm_fpu_desc all_fpus[] =\"\n+    print \"{\"\n+\n+    nfpus = split (fpu_list, fpus)\n+\n+    for (n = 1; n <= nfpus; n++) {\n+\tprint \"  {\"\n+\tprint \"    \\\"\" fpus[n] \"\\\",\"\n+\tprint \"    {\"\n+\tprint \"      \" fpu_isa[fpus[n]] \",\"\n+\tprint \"      isa_nobit\"\n+\tprint \"    }\"\n+\tprint \"  },\"\n+    }\n+\n+    print \"};\"\n+}\n+\n+function gen_comm_data () {\n+    boilerplate(\"C\")\n+\n+    print \"static const struct arm_arch_core_flag arm_arch_core_flags[] =\"\n+    print \"{\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tprint \"  {\"\n+\tprint \"    \\\"\" cpus[n] \"\\\",\"\n+\tif (! (cpu_arch[cpus[n]] in arch_isa)) {\n+\t    fatal(\"unknown arch \" cpu_arch[cpus[n]] \" for cpu \" cpus[n])\n+\t}\n+\tprint \"    {\"\n+\tprint \"      \" arch_isa[cpu_arch[cpus[n]]] \",\"\n+\tif (cpus[n] in cpu_fpu)\tprint \"      \" fpu_isa[cpu_fpu[cpus[n]]] \",\"\n+\tif (cpus[n] in cpu_isa)\tprint \"      \" cpu_isa[cpus[n]] \",\"\n+\tprint \"      isa_nobit\"\n+\tprint \"    },\"\n+\tprint \"  },\"\n+    }\n+\n+    narchs = split (arch_list, archs)\n+\n+    for (n = 1; n <= narchs; n++) {\n+\tprint \"  {\"\n+\tprint \"    \\\"\" archs[n] \"\\\",\"\n+\tprint \"    {\"\n+\tprint \"      \" arch_isa[archs[n]] \",\"\n+\tprint \"      isa_nobit\"\n+\tprint \"    },\"\n+\tprint \"  },\"\n+    }\n+\n+    print \"};\\n\"\n+}\n+\n+function gen_md () {\n+    boilerplate(\"md\")\n+\n+    z = ORS\n+    ORS = \"\"\n+    print \"(define_attr \\\"tune\\\"\\n\\t\\\"\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n < ncpus; n++) {\n+\tif ((n % 3) != 0) {\n+\t    ORS = \",\"\n+\t} else ORS = \",\\n\\t\"\n+\tprint cpu_cnames[cpus[n]]\n+    }\n+    ORS = z\n+    print cpu_cnames[cpus[ncpus]]\"\\\"\"\n+    print \"\\t(const (symbol_ref \\\"((enum attr_tune) arm_tune)\\\")))\"\n+}\n+\n+function gen_opt () {\n+    boilerplate(\"md\")\n+\n+    print \"Enum\"\n+    print \"Name(processor_type) Type(enum processor_type)\"\n+    print \"Known ARM CPUs (for use with the -mcpu= and -mtune= options):\\n\"\n+\n+    ncpus = split (cpu_list, cpus)\n+\n+    for (n = 1; n <= ncpus; n++) {\n+\tprint \"EnumValue\"\n+\tprint \"Enum(processor_type) String(\" cpus[n] \\\n+\t    \") Value( TARGET_CPU_\"cpu_cnames[cpus[n]]\")\"\n+\tprint \"\"\n+    }\n+\n+    print \"Enum\"\n+    print \"Name(arm_arch) Type(int)\"\n+    print \"Known ARM architectures (for use with the -march= option):\\n\"\n+\n+    narchs = split (arch_list, archs)\n+\n+    for (n = 1; n <= narchs; n++) {\n+\tprint \"EnumValue\"\n+\tprint \"Enum(arm_arch) String(\" archs[n] \\\n+\t    \") Value(\"n - 1\")\"\n+\tprint \"\"\n+    }\n+\n+    print \"Enum\"\n+    print \"Name(arm_fpu) Type(enum fpu_type)\"\n+    print \"Known ARM FPUs (for use with the -mfpu= option):\\n\"\n+\n+    nfpus = split (fpu_list, fpus)\n+\n+    for (n = 1; n <= nfpus; n++) {\n+\tprint \"EnumValue\"\n+\tprint \"Enum(arm_fpu) String(\" fpus[n] \\\n+\t    \") Value(TARGET_FPU_\"fpu_cnames[fpus[n]]\")\"\n+\tprint \"\"\n+    }\n+\n+    print \"EnumValue\"\n+    print \"Enum(arm_fpu) String(auto) Value(TARGET_FPU_auto)\"\n+}\n+\n+function check_cpu (name) {\n+    if (name in cpu_cnames) {\n+\tprint cpu_cnames[name]\n+    } else print \"error\"\n+}\n+\n+function check_fpu (name) {\n+    if (name in fpu_cnames) {\n+\tprint fpu_cnames[name]\n+    } else print \"error\"\n+}\n+\n+function check_arch (name) {\n+    if (name in arch_isa) {\n+\tprint name\n+    } else print \"error\"\n+}\n+\n+BEGIN {\n+    cpu_name = \"\"\n+    arch_name = \"\"\n+    fpu_name = \"\"\n+    lineno = 0\n+    if (cmd == \"\") fatal(\"Usage parsecpu.awk -v cmd=<xyz>\")\n+}\n+\n+// {\n+    lineno++\n+    parse_ok = 0\n+}\n+\n+/^#/ {\n+    parse_ok = 1\n+}\n+\n+/^begin fpu / {\n+    toplevel()\n+    fpu_name = $3\n+    parse_ok = 1\n+}\n+\n+/^end fpu / {\n+    if (fpu_name != $3) fatal(\"mimatched end fpu\")\n+    if (! (fpu_name in fpu_isa)) {\n+\tfatal(\"fpu definition \\\"\" fpu_name \"\\\" lacks an \\\"isa\\\" statement\")\n+    }\n+    fpu_cnames[fpu_name] = fpu_name\n+    gsub(/[-+.]/, \"_\", fpu_cnames[fpu_name])\n+    fpu_list = fpu_list \" \" fpu_name\n+    fpu_name = \"\"\n+    parse_ok = 1\n+}\n+\n+/^begin arch / {\n+    toplevel()\n+    arch_name = $3\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*base / {\n+    if (arch_name == \"\") fatal(\"\\\"base\\\" statement outside of arch block\")\n+    arch_base[arch_name] = $2\n+    parse_ok = 1\n+}\n+\n+/^end arch / {\n+    if (arch_name != $3) fatal(\"mimatched end arch\")\n+    if (! arch_name in arch_tune_for) {\n+\tfatal(\"arch definition lacks a \\\"tune for\\\" statement\")\n+    }\n+    if (! arch_name in arch_isa) {\n+\tfatal(\"arch definition lacks an \\\"isa\\\" statement\")\n+    }\n+    arch_list = arch_list \" \" arch_name\n+    arch_name = \"\"\n+    parse_ok = 1\n+}\n+\n+/^begin cpu / {\n+    toplevel()\n+    cpu_name = $3\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*cname / {\n+    if (cpu_name == \"\") fatal(\"\\\"cname\\\" outside of cpu block\")\n+    cpu_cnames[cpu_name] = $2\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*tune for / {\n+    if (cpu_name != \"\") {\n+\tcpu_tune_for[cpu_name] = $3\n+    } else if (arch_name != \"\") {\n+\tarch_tune_for[arch_name] = $3\n+    } else fatal(\"\\\"tune for\\\" outside of cpu or arch block\")\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*tune flags / {\n+    flags=\"\"\n+    flag_count = NF\n+    for (n = 3; n <= flag_count; n++) {\n+\tif (n == 3) {\n+\t    flags = tune_flag_pfx($n)\n+\t} else flags = flags \" | \" tune_flag_pfx($n)\n+    }\n+    if (cpu_name != \"\") {\n+\tcpu_tune_flags[cpu_name] = flags\n+    } else if (arch_name != \"\") {\n+\tarch_tune_flags[arch_name] = flags\n+    } else fatal(\"\\\"tune flags\\\" outside of cpu or arch block\")\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*architecture / {\n+    if (cpu_name == \"\") fatal(\"\\\"architecture\\\" outside of cpu block\")\n+    cpu_arch[cpu_name] = $2\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*fpu / {\n+    if (cpu_name == \"\") fatal(\"\\\"fpu\\\" outside of cpu block\")\n+    cpu_fpu[cpu_name] = $2\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*isa / {\n+    flags=\"\"\n+    flag_count = NF\n+    for (n = 2; n <= flag_count; n++) {\n+\tif (n == 2) {\n+\t    flags = isa_pfx($n)\n+\t} else flags = flags \",\" isa_pfx($n)\n+    }\n+    if (cpu_name != \"\") {\n+\tcpu_isa[cpu_name] = flags\n+    } else if (arch_name != \"\") {\n+\tarch_isa[arch_name] = flags\n+    } else  if (fpu_name != \"\") {\n+\tfpu_isa[fpu_name] = flags\n+    } else fatal(\"\\\"isa\\\" outside of cpu, fpu or arch block\")\n+    parse_ok = 1\n+}\n+\n+/^[ \t]*costs / {\n+    if (cpu_name == \"\") fatal(\"\\\"costs\\\" outside of cpu block\")\n+    cpu_cost[cpu_name] = $2\n+    parse_ok = 1\n+}\n+\n+/^end cpu / {\n+    if (cpu_name != $3) fatal(\"mimatched end cpu\")\n+    if (! (cpu_name in cpu_cnames)) {\n+\tcpu_cnames[cpu_name] = cpu_name\n+\tgsub(/[-+.]/, \"_\", cpu_cnames[cpu_name])\n+    }\n+    if (! cpu_name in cpu_arch) fatal(\"cpu definition lacks an architecture\")\n+    cpu_list = cpu_list \" \" cpu_name\n+    cpu_name = \"\"\n+    parse_ok = 1\n+}\n+\n+/[^\\s]/ {\n+    if (! parse_ok) fatal(\"Unrecognized statement: \" $0)\n+}\n+\n+END {\n+    toplevel()\n+    if (cmd == \"data\") {\n+\tgen_data()\n+    } else if (cmd == \"common-data\") {\n+\tgen_comm_data()\n+    } else if (cmd == \"headers\") {\n+\tgen_headers()\n+    } else if (cmd == \"md\") {\n+\tgen_md()\n+    } else if (cmd == \"opt\") {\n+\tgen_opt()\n+    } else if (cmd ~ /^chk(cpu|tune) /) {\n+\tsplit (cmd, target)\n+\tcheck_cpu(target[2])\n+    } else if (cmd ~ /^chkarch /) {\n+\tsplit (cmd, target)\n+\tcheck_arch(target[2])\n+    } else if (cmd ~ /^chkfpu /) {\n+\tsplit (cmd, target)\n+\tcheck_fpu(target[2])\n+    } else fatal(\"unrecognized command: \"cmd)\n+}"}, {"sha": "b6a3cb40c5d881ac92c5d4423cd5ac45ede94c95", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92ffb3e945608131f5edf3ec2d6d583e417083b/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=a92ffb3e945608131f5edf3ec2d6d583e417083b", "patch": "@@ -18,8 +18,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-TM_H += $(srcdir)/config/arm/arm-cores.def\n-OPTIONS_H_EXTRA += $(srcdir)/config/arm/arm-cores.def\n+TM_H += $(srcdir)/config/arm/arm-cpu.h\n \n # All md files - except for arm.md.\n # This list should be kept in alphabetical order and updated whenever an md\n@@ -67,18 +66,36 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n s-config s-conditions s-flags s-codes s-constants s-emit s-recog s-preds \\\n \ts-opinit s-extract s-peep s-attr s-attrtab s-output: $(MD_INCLUDES)\n \n-$(srcdir)/config/arm/arm-tune.md: $(srcdir)/config/arm/gentune.sh \\\n-\t$(srcdir)/config/arm/arm-cores.def\n-\t$(SHELL) $(srcdir)/config/arm/gentune.sh \\\n-\t\t$(srcdir)/config/arm/arm-cores.def > \\\n-\t\t$(srcdir)/config/arm/arm-tune.md\n+$(srcdir)/config/arm/arm-tune.md: $(srcdir)/config/arm/parsecpu.awk \\\n+\t$(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=md \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > arm-tune.new\n+\tmv arm-tune.new $(srcdir)/config/arm/arm-tune.md\n \n-$(srcdir)/config/arm/arm-tables.opt: $(srcdir)/config/arm/genopt.sh \\\n-  $(srcdir)/config/arm/arm-cores.def $(srcdir)/config/arm/arm-arches.def \\\n-  $(srcdir)/config/arm/arm-fpus.def\n-\t$(SHELL) $(srcdir)/config/arm/genopt.sh $(srcdir)/config/arm > \\\n+$(srcdir)/config/arm/arm-tables.opt: $(srcdir)/config/arm/parsecpu.awk \\\n+  $(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=opt \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > \\\n \t\t$(srcdir)/config/arm/arm-tables.opt\n \n+$(srcdir)/config/arm/arm-cpu.h: $(srcdir)/config/arm/parsecpu.awk \\\n+  $(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=headers \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > arm-cpu.new\n+\tmv arm-cpu.new $(srcdir)/config/arm/arm-cpu.h\n+\n+$(srcdir)/config/arm/arm-cpu-data.h: $(srcdir)/config/arm/parsecpu.awk \\\n+  $(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=data \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > arm-cpu-data.new\n+\tmv arm-cpu-data.new $(srcdir)/config/arm/arm-cpu-data.h\n+\n+$(srcdir)/config/arm/arm-cpu-cdata.h: $(srcdir)/config/arm/parsecpu.awk \\\n+  $(srcdir)/config/arm/arm-cpus.in\n+\t$(AWK) -f $(srcdir)/config/arm/parsecpu.awk -v cmd=common-data \\\n+\t\t$(srcdir)/config/arm/arm-cpus.in > arm-cpu-cdata.new\n+\tmv arm-cpu-cdata.new $(srcdir)/config/arm/arm-cpu-cdata.h\n+\n aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n@@ -92,8 +109,7 @@ arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(GGC_H) except.h $(C_PRAGMA_H) $(TM_P_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H) sched-int.h \\\n-  $(srcdir)/config/arm/arm-cores.def \\\n-  $(srcdir)/config/arm/arm-arches.def $(srcdir)/config/arm/arm-fpus.def \\\n+  $(srcdir)/config/arm/arm-cpu-data.h \\\n   $(srcdir)/config/arm/arm-protos.h \\\n   $(srcdir)/config/arm/arm_neon_builtins.def \\\n   $(srcdir)/config/arm/arm_vfp_builtins.def\n@@ -113,3 +129,5 @@ arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/arm-c.c\n+\n+arm-common.o: $(srcdir)/config/arm/arm-cpu-cdata.h"}]}