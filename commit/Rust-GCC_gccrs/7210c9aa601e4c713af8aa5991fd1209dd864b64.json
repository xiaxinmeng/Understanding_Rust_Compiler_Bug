{"sha": "7210c9aa601e4c713af8aa5991fd1209dd864b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxMGM5YWE2MDFlNGM3MTNhZjhhYTU5OTFmZDEyMDlkZDg2NGI2NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-06-04T02:25:48Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-06-04T02:25:48Z"}, "message": "main.c (f_setarg, f_setsig): Prototype.\n\n\t* libF77/main.c (f_setarg, f_setsig): Prototype.\n\t* libI77/lread.c (quad_read): Delete.\n\t* libI77/uio.c: Include config.h.\n\t* libI77/wref.c (wrt_E): Cast isdigit arg to unsigned char.\n\t* libU77/dtime_.c (clk_tck): Move to the scope where it is used.\n\t* libU77/etime_.c (clk_tck): Likewise.\n\nFrom-SVN: r54224", "tree": {"sha": "38947b5d8e852471651d7c417c25445933e1bd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38947b5d8e852471651d7c417c25445933e1bd2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7210c9aa601e4c713af8aa5991fd1209dd864b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7210c9aa601e4c713af8aa5991fd1209dd864b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7210c9aa601e4c713af8aa5991fd1209dd864b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7210c9aa601e4c713af8aa5991fd1209dd864b64/comments", "author": null, "committer": null, "parents": [{"sha": "ac1db652a0f9c208904e5dc831ffee202a9929e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1db652a0f9c208904e5dc831ffee202a9929e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1db652a0f9c208904e5dc831ffee202a9929e0"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "b3582a17ad4e4565aa492688d63d7545c3f51b6d", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -1,3 +1,12 @@\n+Mon Jun  3 22:24:48 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libF77/main.c (f_setarg, f_setsig): Prototype.\n+\t* libI77/lread.c (quad_read): Delete.\n+\t* libI77/uio.c: Include config.h.\n+\t* libI77/wref.c (wrt_E): Cast isdigit arg to unsigned char.\n+\t* libU77/dtime_.c (clk_tck): Move to the scope where it is used.\n+\t* libU77/etime_.c (clk_tck): Likewise.\n+\n Mon Jun  3 22:23:03 2002  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libF77/lbitbits.c (lbit_cshift): disambiguate expressions"}, {"sha": "a3955cbc1a764f76efd41f803250bee5238493ef", "filename": "libf2c/libF77/main.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibF77%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibF77%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fmain.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -13,6 +13,8 @@ extern int atexit (void (*)(void));\n \n extern void f_init (void);\n extern int MAIN__ (void);\n+extern void f_setarg (int, char **);\n+extern void f_setsig (void);\n \n int\n main (int argc, char **argv)"}, {"sha": "b926367b930828f1855bb219bd39457a385ce4bc", "filename": "libf2c/libI77/lread.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Flread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Flread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Flread.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -13,7 +13,6 @@ extern int f__fmtlen;\n \n #ifdef Allow_TYQUAD\n static longint f__llx;\n-static int quad_read;\n #endif\n \n #undef abs"}, {"sha": "706b5dd3d9c231df7e1c9f7aa43294a2c53b268a", "filename": "libf2c/libI77/uio.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Fuio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Fuio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fuio.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -1,3 +1,4 @@\n+#include \"config.h\"\n #include \"f2c.h\"\n #include \"fio.h\"\n #include <sys/types.h>"}, {"sha": "0dc30919da4c0c3f9894e35a884187f48ad59b04", "filename": "libf2c/libI77/wref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Fwref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibI77%2Fwref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fwref.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -82,7 +82,7 @@ wrt_E (ufloat * p, int w, int d, int e, ftnlen len)\n   sprintf (buf, \"%#.*E\", d, dd);\n #ifndef VAX\n   /* check for NaN, Infinity */\n-  if (!isdigit (buf[0]))\n+  if (!isdigit ((unsigned char) buf[0]))\n     {\n       switch (buf[0])\n \t{"}, {"sha": "dc9a8639df2386549111e0bf58196b03eaa51e23", "filename": "libf2c/libU77/dtime_.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibU77%2Fdtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibU77%2Fdtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdtime_.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -44,13 +44,6 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-/* For dtime, etime we store the clock tick parameter (clk_tck) the\n-   first time either of them is invoked rather than each time.  This\n-   approach probably speeds up each invocation by avoiding a system\n-   call each time, but means that the overhead of the first call is\n-   different to all others. */\n-static long clk_tck = 0;\n-\n double\n G77_dtime_0 (real tarray[2])\n {\n@@ -136,6 +129,12 @@ G77_dtime_0 (real tarray[2])\n     (float) (rbuff.ru_stime).tv_usec / 1000000.0;\n   tarray[1] = stime - old_stime;\n #else /* HAVE_GETRUSAGE */\n+  /* For dtime, etime we store the clock tick parameter (clk_tck) the\n+     first time either of them is invoked rather than each time.  This\n+     approach probably speeds up each invocation by avoiding a system\n+     call each time, but means that the overhead of the first call is\n+     different to all others. */\n+  static long clk_tck = 0;\n   time_t utime, stime;\n   static time_t old_utime = 0, old_stime = 0;\n   struct tms buffer;"}, {"sha": "d0edb2fbcd3eb41a00c5823e688bb0a5f73fbb04", "filename": "libf2c/libU77/etime_.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibU77%2Fetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7210c9aa601e4c713af8aa5991fd1209dd864b64/libf2c%2FlibU77%2Fetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fetime_.c?ref=7210c9aa601e4c713af8aa5991fd1209dd864b64", "patch": "@@ -44,13 +44,6 @@ Boston, MA 02111-1307, USA.  */\n #include <errno.h>\t\t/* for ENOSYS */\n #include \"f2c.h\"\n \n-/* For dtime, etime we store the clock tick parameter (clk_tck) the\n-   first time either of them is invoked rather than each time.  This\n-   approach probably speeds up each invocation by avoiding a system\n-   call each time, but means that the overhead of the first call is\n-   different to all others. */\n-static long clk_tck = 0;\n-\n double\n G77_etime_0 (real tarray[2])\n {\n@@ -131,6 +124,12 @@ G77_etime_0 (real tarray[2])\n   tarray[1] = ((float) (rbuff.ru_stime).tv_sec +\n \t       (float) (rbuff.ru_stime).tv_usec / 1000000.0);\n #else /* HAVE_GETRUSAGE */\n+  /* For dtime, etime we store the clock tick parameter (clk_tck) the\n+     first time either of them is invoked rather than each time.  This\n+     approach probably speeds up each invocation by avoiding a system\n+     call each time, but means that the overhead of the first call is\n+     different to all others. */\n+  static long clk_tck = 0;\n   struct tms buffer;\n \n /* NeXTStep seems to define _SC_CLK_TCK but not to have sysconf;"}]}