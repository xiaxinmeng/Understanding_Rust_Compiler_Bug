{"sha": "d340e53fc39cdfc88b89ec4a420719dc31aadca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0MGU1M2ZjMzljZGZjODhiODllYzRhNDIwNzE5ZGMzMWFhZGNhOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-01T09:16:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-01T09:16:09Z"}, "message": "typeck.c (build_compound_expr): If RHS is a TARGET_EXPR, put the compound expr inside the target's initializer.\n\ncp:\n\t* typeck.c (build_compound_expr): If RHS is a TARGET_EXPR, put the\n\tcompound expr inside the target's initializer.\ntestsuite:\n\t* g++.dg/opt/tmp1.C: New test.\n\nFrom-SVN: r70042", "tree": {"sha": "456f8e4d840ad08e52a2de88fef46b631c51a1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/456f8e4d840ad08e52a2de88fef46b631c51a1dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d340e53fc39cdfc88b89ec4a420719dc31aadca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d340e53fc39cdfc88b89ec4a420719dc31aadca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d340e53fc39cdfc88b89ec4a420719dc31aadca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d340e53fc39cdfc88b89ec4a420719dc31aadca8/comments", "author": null, "committer": null, "parents": [{"sha": "f21e6028bf127c16c109bbfe9135334077522ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21e6028bf127c16c109bbfe9135334077522ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21e6028bf127c16c109bbfe9135334077522ee5"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "d999173926d8af23ff09a5364fc6d841130a4bb4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d340e53fc39cdfc88b89ec4a420719dc31aadca8", "patch": "@@ -1,5 +1,8 @@\n 2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* typeck.c (build_compound_expr): If RHS is a TARGET_EXPR, put the\n+\tcompound expr inside the target's initializer.\n+\t\n \tPR c++/11525\n \t* parser.c (cp_parser_primary_expression): Do not set\n \tnon-constant-p merely because it is a dependent scope."}, {"sha": "dd7e0af8084bd827d722894b5cfcdb3220296eea", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d340e53fc39cdfc88b89ec4a420719dc31aadca8", "patch": "@@ -4322,6 +4322,19 @@ build_compound_expr (tree lhs, tree rhs)\n   lhs = convert_to_void (lhs, \"left-hand operand of comma\");\n   if (lhs == error_mark_node || rhs == error_mark_node)\n     return error_mark_node;\n+\n+  if (TREE_CODE (rhs) == TARGET_EXPR)\n+    {\n+      /* If the rhs is a TARGET_EXPR, then build the compound\n+         expression inside the target_expr's initializer. This\n+\t helps the compiler to eliminate unncessary temporaries.  */\n+      tree init = TREE_OPERAND (rhs, 1);\n+\n+      init = build (COMPOUND_EXPR, TREE_TYPE (init), lhs, init);\n+      TREE_OPERAND (rhs, 1) = init;\n+      \n+      return rhs;\n+    }\n   \n   return build (COMPOUND_EXPR, TREE_TYPE (rhs), lhs, rhs);\n }"}, {"sha": "eb64af8c6c805e633c4d4d0e1f4cb5fd88afe4de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d340e53fc39cdfc88b89ec4a420719dc31aadca8", "patch": "@@ -1,5 +1,7 @@\n 2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/opt/tmp1.C: New test.\n+\n \tPR c++/11525\n \t* g++.dg/parse/constant4.C: New test.\n "}, {"sha": "21665335e7234e8990e64b41ecce8b9ff38ba0b5", "filename": "gcc/testsuite/g++.dg/opt/tmp1.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftmp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d340e53fc39cdfc88b89ec4a420719dc31aadca8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftmp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ftmp1.C?ref=d340e53fc39cdfc88b89ec4a420719dc31aadca8", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run }\n+\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Jul 2003 <nathan@codesourcery.com>\n+\n+// compound exprs were causing additional temporaries.\n+\n+extern \"C\" int printf (char const *, ...);\n+extern \"C\" void abort ();\n+\n+\n+static unsigned order[] = \n+{\n+  1, 2, 502, 102, 101,\n+  0\n+};\n+\n+static unsigned point;\n+\n+static void Check (unsigned t, unsigned i, void const *ptr, char const *name)\n+{\n+  printf (\"%d %d %p %s\\n\", t, i, ptr, name);\n+  \n+  if (order[point++] != i + t)\n+    abort ();\n+  \n+}\n+\n+template <int I> struct A \n+{\n+  A () { Check (0, I, this, __PRETTY_FUNCTION__); }\n+  ~A () { Check (100, I, this, __PRETTY_FUNCTION__); }\n+  A (A const &) { Check (200, I, this, __PRETTY_FUNCTION__); }\n+  A &operator= (A const &) { Check (300, I, this, __PRETTY_FUNCTION__); }\n+  void Foo () const { Check (400, I, this, __PRETTY_FUNCTION__); }\n+};\n+\n+template <int I> void Foo (A<I> a)\n+{\n+  Check (500, I, &a, __PRETTY_FUNCTION__);\n+}\n+\n+int main ()\n+{\n+  Foo ((A<1> (), A<2> ()));\n+  Check (0, 0, 0, \"end\");\n+}"}]}