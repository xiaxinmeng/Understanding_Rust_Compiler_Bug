{"sha": "00b1324f9285f49a6f9516f408f6be5bc6545219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiMTMyNGY5Mjg1ZjQ5YTZmOTUxNmY0MDhmNmJlNWJjNjU0NTIxOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-17T15:20:51Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-17T15:20:51Z"}, "message": "Fortran: Use _Float128 rather than __float128 for c_float128 kind.\n\nThe GNU Fortran manual documents that the c_float128 kind corresponds\nto __float128, but in fact the implementation uses float128_type_node,\nwhich is _Float128.  Both refer to the 128-bit IEEE/ISO encoding, but\nsome targets including aarch64 only define _Float128 and not __float128,\nand do not provide quadmath.h.  This caused errors in some test cases\nreferring to __float128.\n\nThis patch changes the documentation (including code comments) and\ntest cases to use _Float128 to match the implementation.\n\n2021-09-16  Sandra Loosemore  <sandra@codesourcery.com>\n\ngcc/fortran/\n\n\t* intrinsic.texi (ISO_C_BINDING): Change C_FLOAT128 to correspond\n\tto _Float128 rather than __float128.\n\t* iso-c-binding.def (c_float128): Update comments.\n\t* trans-intrinsic.c (gfc_builtin_decl_for_float_kind): Likewise.\n\t(build_round_expr): Likewise.\n\t(gfc_build_intrinsic_lib_fndcecls): Likewise.\n\t* trans-types.h (gfc_real16_is_float128): Likewise.\n\ngcc/testsuite/\n\t* gfortran.dg/PR100914.c: Do not include quadmath.h.  Use\n\t_Float128 _Complex instead of __complex128.\n\t* gfortran.dg/PR100914.f90: Add -Wno-pedantic to suppress error\n\tabout use of _Float128.\n\t* gfortran.dg/c-interop/typecodes-array-float128-c.c: Use\n\t_Float128 instead of __float128.\n\t* gfortran.dg/c-interop/typecodes-sanity-c.c: Likewise.\n\t* gfortran.dg/c-interop/typecodes-scalar-float128-c.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_fortran_real_c_float128): Update comments.\n\nlibgfortran/\n\t* ISO_Fortran_binding.h: Update comments.\n\t* runtime/ISO_Fortran_binding.c: Likewise.", "tree": {"sha": "781ce4ee84126469035a921f890f347d3fb663b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781ce4ee84126469035a921f890f347d3fb663b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b1324f9285f49a6f9516f408f6be5bc6545219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b1324f9285f49a6f9516f408f6be5bc6545219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b1324f9285f49a6f9516f408f6be5bc6545219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b1324f9285f49a6f9516f408f6be5bc6545219/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2578a3870ef849dc77e98796600181b64ae4fd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2578a3870ef849dc77e98796600181b64ae4fd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2578a3870ef849dc77e98796600181b64ae4fd61"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "1b9a89dcd9a3d9c00a8462a0b6417b8a494ef800", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -15193,8 +15193,8 @@ In addition to the integer named constants required by the Fortran 2003\n standard and @code{C_PTRDIFF_T} of TS 29113, GNU Fortran provides as an\n extension named constants for the 128-bit integer types supported by the\n C compiler: @code{C_INT128_T, C_INT_LEAST128_T, C_INT_FAST128_T}.\n-Furthermore, if @code{__float128} is supported in C, the named constants\n-@code{C_FLOAT128, C_FLOAT128_COMPLEX} are defined.\n+Furthermore, if @code{_Float128} is supported in C, the named constants\n+@code{C_FLOAT128} and @code{C_FLOAT128_COMPLEX} are defined.\n \n @multitable @columnfractions .15 .35 .35 .35\n @headitem Fortran Type  @tab Named constant         @tab C type                                @tab Extension\n@@ -15225,11 +15225,11 @@ Furthermore, if @code{__float128} is supported in C, the named constants\n @item @code{REAL}   @tab @code{C_FLOAT}         @tab @code{float}\n @item @code{REAL}   @tab @code{C_DOUBLE}        @tab @code{double}\n @item @code{REAL}   @tab @code{C_LONG_DOUBLE}   @tab @code{long double}\n-@item @code{REAL}   @tab @code{C_FLOAT128}      @tab @code{__float128}                    @tab Ext.\n+@item @code{REAL}   @tab @code{C_FLOAT128}      @tab @code{_Float128}                    @tab Ext.\n @item @code{COMPLEX}@tab @code{C_FLOAT_COMPLEX} @tab @code{float _Complex}\n @item @code{COMPLEX}@tab @code{C_DOUBLE_COMPLEX}@tab @code{double _Complex}\n @item @code{COMPLEX}@tab @code{C_LONG_DOUBLE_COMPLEX}@tab @code{long double _Complex}\n-@item @code{REAL}   @tab @code{C_FLOAT128_COMPLEX}   @tab @code{__float128 _Complex}      @tab Ext.\n+@item @code{COMPLEX}@tab @code{C_FLOAT128_COMPLEX}   @tab @code{_Float128 _Complex}      @tab Ext.\n @item @code{LOGICAL}@tab @code{C_BOOL}          @tab @code{_Bool}\n @item @code{CHARACTER}@tab @code{C_CHAR}        @tab @code{char}\n @end multitable"}, {"sha": "50256fe862098f81869e982c9fd02d193edeac15", "filename": "gcc/fortran/iso-c-binding.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Fiso-c-binding.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Fiso-c-binding.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-c-binding.def?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -116,7 +116,7 @@ NAMED_REALCST (ISOCBINDING_LONG_DOUBLE, \"c_long_double\", \\\n                get_real_kind_from_node (long_double_type_node), GFC_STD_F2003)\n \n /* GNU Extension.  Note that the equivalence here is specifically to\n-   the IEEE 128-bit type __float128; if that does not map onto a type\n+   the IEEE 128-bit type _Float128; if that does not map onto a type\n    otherwise supported by the Fortran front end, get_real_kind_from_node\n    will reject it as unsupported.  */\n NAMED_REALCST (ISOCBINDING_FLOAT128, \"c_float128\", \\"}, {"sha": "42a995be3483bd019f6cff7b2b047a62df3b7256", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -175,7 +175,7 @@ gfc_builtin_decl_for_float_kind (enum built_in_function double_built_in,\n \n   if (gfc_real_kinds[i].c_float128)\n     {\n-      /* For __float128, the story is a bit different, because we return\n+      /* For _Float128, the story is a bit different, because we return\n \t a decl to a library function rather than a built-in.  */\n       gfc_intrinsic_map_t *m;\n       for (m = gfc_intrinsic_map; m->double_built_in != double_built_in ; m++)\n@@ -387,7 +387,7 @@ build_round_expr (tree arg, tree restype)\n   resprec = TYPE_PRECISION (restype);\n \n   /* Depending on the type of the result, choose the int intrinsic (iround,\n-     available only as a builtin, therefore cannot use it for __float128), long\n+     available only as a builtin, therefore cannot use it for _Float128), long\n      int intrinsic (lround family) or long long intrinsic (llround).  If we\n      don't have an appropriate function that converts directly to the integer\n      type (such as kind == 16), just use ROUND, and then convert the result to\n@@ -689,7 +689,7 @@ gfc_build_intrinsic_lib_fndecls (void)\n   if (gfc_real16_is_float128)\n   {\n     /* If we have soft-float types, we create the decls for their\n-       C99-like library functions.  For now, we only handle __float128\n+       C99-like library functions.  For now, we only handle _Float128\n        q-suffixed functions.  */\n \n     tree type, complex_type, func_1, func_2, func_cabs, func_frexp;"}, {"sha": "6804bfe9edb11dcbc91acae6460dc570557bd83d", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -55,7 +55,7 @@ extern GTY(()) tree gfc_charlen_type_node;\n \n /* The following flags give us information on the correspondence of\n    real (and complex) kinds with C floating-point types long double\n-   and __float128.  */\n+   and _Float128.  */\n extern bool gfc_real16_is_float128;\n \n enum gfc_packed {"}, {"sha": "ea339e724b754d64d0002da0b37a12ba5f9bbb2d", "filename": "gcc/testsuite/gfortran.dg/PR100914.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -5,7 +5,6 @@\n #include <stdbool.h>\n #include <stdio.h>\n #include <math.h>\n-#include <quadmath.h>\n \n #include <ISO_Fortran_binding.h>\n \n@@ -29,15 +28,15 @@\n #define CMPLXL(x, y) ((long double complex)((long double)(x) + (long double complex)I * (long double)(y)))\n \n #undef CMPLX\n-#define CMPLX(x, y) ((__complex128 )((double)(x) + (double complex)I * (double)(y)))\n+#define CMPLX(x, y) ((_Float128 _Complex )((double)(x) + (double complex)I * (double)(y)))\n \n #define N 11\n #define M 7\n \n typedef float _Complex c_float_complex;\n typedef double _Complex c_double_complex;\n typedef long double _Complex c_long_double_complex;\n-typedef __complex128 c_float128_complex;\n+typedef _Float128 _Complex c_float128_complex;\n \n bool c_vrfy_c_float_complex (const CFI_cdesc_t *restrict);\n "}, {"sha": "d8057fd617cc7843a06b31a7a542a4f4b8d1ee05", "filename": "gcc/testsuite/gfortran.dg/PR100914.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100914.f90?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -2,6 +2,7 @@\n ! { dg-do run { xfail { { x86_64*-*-* i?86*-*-* } && longdouble128 } } }\n ! { dg-additional-sources PR100914.c }\n ! { dg-require-effective-target fortran_real_c_float128 }\n+! { dg-additional-options \"-Wno-pedantic\" }\n !\n ! Test the fix for PR100914\n ! "}, {"sha": "4fcb6e2dbbd0ee4cd7d1405f39991638da725d0f", "filename": "gcc/testsuite/gfortran.dg/c-interop/typecodes-array-float128-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-array-float128-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-array-float128-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-array-float128-c.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -32,7 +32,7 @@ void\n ctest (CFI_cdesc_t *arg_float128,\n        CFI_cdesc_t *arg_complex128)\n {\n-  check (arg_float128, sizeof (__float128), CFI_type_float128);\n-  check (arg_complex128, sizeof (__float128) * 2,\n+  check (arg_float128, sizeof (_Float128), CFI_type_float128);\n+  check (arg_complex128, sizeof (_Float128) * 2,\n \t CFI_type_float128_Complex);\n }"}, {"sha": "90f0b20fa457efe3009ffd88afd4e3d201a817f0", "filename": "gcc/testsuite/gfortran.dg/c-interop/typecodes-sanity-c.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-sanity-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-sanity-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-sanity-c.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -23,8 +23,7 @@ static struct tc_info tc_table[] =\n {\n   /* Extension types.\n      Note there is no portable C equivalent type for CFI_type_ucs4_char type\n-     (4-byte Unicode characters), and GCC rejects \"__float128 _Complex\",\n-     so this is kind of hacky...  */\n+     (4-byte Unicode characters), so this is kind of hacky...  */\n #if CFI_type_int128_t > 0\n   { CFI_type_int128_t, \"CFI_type_int128_t\",\n     sizeof (__int128), 1 },\n@@ -38,9 +37,9 @@ static struct tc_info tc_table[] =\n #endif\n #if CFI_type_float128 > 0  \n   { CFI_type_float128, \"CFI_type_float128\",\n-    sizeof (__float128), 1 },\n+    sizeof (_Float128), 1 },\n   { CFI_type_float128_Complex, \"CFI_type_float128_Complex\",\n-    sizeof (__float128) * 2, 1 },\n+    sizeof (_Float128 _Complex), 1 },\n #endif\n #if CFI_type_cfunptr > 0  \n   { CFI_type_cfunptr, \"CFI_type_cfunptr\","}, {"sha": "7eafa93d82582cdbb07b194ccd67473e63c9065b", "filename": "gcc/testsuite/gfortran.dg/c-interop/typecodes-scalar-float128-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-scalar-float128-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-scalar-float128-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftypecodes-scalar-float128-c.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -31,8 +31,8 @@ void\n ctest (CFI_cdesc_t *arg_float128,\n        CFI_cdesc_t *arg_complex128)\n {\n-  check (arg_float128, sizeof (__float128), CFI_type_float128);\n-  check (arg_complex128, sizeof (__float128) * 2,\n+  check (arg_float128, sizeof (_Float128), CFI_type_float128);\n+  check (arg_complex128, sizeof (_Float128) * 2,\n \t CFI_type_float128_Complex);\n }\n "}, {"sha": "f11c4e60a6e028618223ff55c7081995159eb4e1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -1578,8 +1578,8 @@ proc check_effective_target_fortran_real_10 { } {\n \n # Return 1 if the target supports Fortran real kind C_FLOAT128,\n # 0 otherwise.  This differs from check_effective_target_fortran_real_16\n-# because __float128 has the additional requirement that it be the\n-# 128-bit IEEE encoding; even if __float128 is available in C, it may not\n+# because _Float128 has the additional requirement that it be the\n+# 128-bit IEEE encoding; even if _Float128 is available in C, it may not\n # have a corresponding Fortran kind on targets (PowerPC) that use some \n # other encoding for long double/TFmode/real(16).\n proc check_effective_target_fortran_real_c_float128 { } {"}, {"sha": "d431d09e61ba9f297b812df7d359d6bca35668cd", "filename": "libgfortran/ISO_Fortran_binding.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/libgfortran%2FISO_Fortran_binding.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/libgfortran%2FISO_Fortran_binding.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FISO_Fortran_binding.h?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -281,7 +281,7 @@ extern int CFI_setpointer (CFI_cdesc_t *, CFI_cdesc_t *, const CFI_index_t []);\n #define CFI_type_long_double (CFI_type_Real + (10 << CFI_type_kind_shift))\n #define CFI_type_long_double_Complex (CFI_type_Complex + (10 << CFI_type_kind_shift))\n \n-/* This is the IEEE 128-bit encoding, same as float128.  */\n+/* This is the IEEE 128-bit encoding, same as _Float128.  */\n #elif (__CFI_LDBL_MANT_DIG__ == 113 \\\n        && __CFI_LDBL_MIN_EXP__ == -16381 \\\n        && __CFI_LDBL_MAX_EXP__ == 16384)\n@@ -303,7 +303,7 @@ extern int CFI_setpointer (CFI_cdesc_t *, CFI_cdesc_t *, const CFI_index_t []);\n #error \"Can't determine kind of long double\"\n #endif\n \n-/* Similarly for __float128.  This always refers to the IEEE encoding\n+/* Similarly for _Float128.  This always refers to the IEEE encoding\n    and not some other 128-bit representation, so if we already used\n    kind 16 for a non-IEEE representation, this one must be unsupported\n    in Fortran even if it's available in C.  */"}, {"sha": "e01cc650e90eea779a15dd81bc9ee2c34f8ee0d9", "filename": "libgfortran/runtime/ISO_Fortran_binding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b1324f9285f49a6f9516f408f6be5bc6545219/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b1324f9285f49a6f9516f408f6be5bc6545219/libgfortran%2Fruntime%2FISO_Fortran_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2FISO_Fortran_binding.c?ref=00b1324f9285f49a6f9516f408f6be5bc6545219", "patch": "@@ -222,7 +222,7 @@ gfc_desc_to_cfi_desc (CFI_cdesc_t **d_ptr, const gfc_array_void *s)\n      elem_len and not the kind, we get into trouble with long double kinds\n      that do not correspond directly to the elem_len, specifically the\n      kind 10 80-bit long double on x86 targets.  On x86_64, this has size\n-     16 and cannot be differentiated from true __float128.  Prefer the\n+     16 and cannot be differentiated from true _Float128.  Prefer the\n      standard long double type over the GNU extension in that case.  */\n   if (d->type == CFI_type_Real && kind == sizeof (long double))\n     d->type = CFI_type_long_double;"}]}