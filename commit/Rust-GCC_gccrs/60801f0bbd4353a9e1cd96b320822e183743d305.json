{"sha": "60801f0bbd4353a9e1cd96b320822e183743d305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4MDFmMGJiZDQzNTNhOWUxY2Q5NmIzMjA4MjJlMTgzNzQzZDMwNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-03T12:17:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-03T12:17:26Z"}, "message": "(call): Mask unimp operand to 12 bits, just like Sun.\n\nFrom-SVN: r12143", "tree": {"sha": "bdc4acae878fcc5c2fbc888e80612fba2314ec98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdc4acae878fcc5c2fbc888e80612fba2314ec98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60801f0bbd4353a9e1cd96b320822e183743d305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60801f0bbd4353a9e1cd96b320822e183743d305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60801f0bbd4353a9e1cd96b320822e183743d305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60801f0bbd4353a9e1cd96b320822e183743d305/comments", "author": null, "committer": null, "parents": [{"sha": "0086427caf98bd635e404706d54aab851e4fac41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0086427caf98bd635e404706d54aab851e4fac41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0086427caf98bd635e404706d54aab851e4fac41"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "b72f6051b4726d43fdcb1ed7da962ed0eb665687", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60801f0bbd4353a9e1cd96b320822e183743d305/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60801f0bbd4353a9e1cd96b320822e183743d305/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=60801f0bbd4353a9e1cd96b320822e183743d305", "patch": "@@ -5067,7 +5067,7 @@\n    if (GET_MODE (operands[0]) != FUNCTION_MODE)\n     abort ();\n \n- if (GET_CODE (XEXP (operands[0], 0)) == LABEL_REF)\n+  if (GET_CODE (XEXP (operands[0], 0)) == LABEL_REF)\n     {\n       /* This is really a PIC sequence.  We want to represent\n \t it as a funny jump so it's delay slots can be filled. \n@@ -5077,18 +5077,22 @@\n \t Why cannot we have delay slots filled if it were a CALL?  */\n \n       if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n-\temit_jump_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (3,\n-\t\t\t\t gen_rtx (SET, VOIDmode, pc_rtx,\n-\t\t\t\t\t  XEXP (operands[0], 0)),\n-\t\t\t\t operands[3],\n-\t\t\t\t gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\t  gen_rtx (REG, Pmode, 15)))));\n+\temit_jump_insn\n+\t  (gen_rtx (PARALLEL, VOIDmode,\n+\t\t    gen_rtvec (3,\n+\t\t\t       gen_rtx (SET, VOIDmode, pc_rtx,\n+\t\t\t\t\tXEXP (operands[0], 0)),\n+\t\t\t       GEN_INT (INTVAL (operands[3]) & 0xfff),\n+\t\t\t       gen_rtx (CLOBBER, VOIDmode,\n+\t\t\t\t\tgen_rtx (REG, Pmode, 15)))));\n       else\n-\temit_jump_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\t\t gen_rtx (SET, VOIDmode, pc_rtx,\n-\t\t\t\t\t  XEXP (operands[0], 0)),\n-\t\t\t\t gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\t  gen_rtx (REG, Pmode, 15)))));\n+\temit_jump_insn\n+\t  (gen_rtx (PARALLEL, VOIDmode,\n+\t\t    gen_rtvec (2,\n+\t\t\t       gen_rtx (SET, VOIDmode, pc_rtx,\n+\t\t\t\t\tXEXP (operands[0], 0)),\n+\t\t\t       gen_rtx (CLOBBER, VOIDmode,\n+\t\t\t\t\tgen_rtx (REG, Pmode, 15)))));\n       goto finish_call;\n     }\n \n@@ -5107,16 +5111,18 @@\n #endif\n \n   if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n-    emit_call_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (3,\n-\t\t\t     gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n-\t\t\t     operands[3],\n-\t\t\t     gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\t       gen_rtx (REG, Pmode, 15)))));\n+    emit_call_insn\n+      (gen_rtx (PARALLEL, VOIDmode,\n+\t\tgen_rtvec (3, gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n+\t\t\t   GEN_INT (INTVAL (operands[3]) & 0xfff),\n+\t\t\t   gen_rtx (CLOBBER, VOIDmode,\n+\t\t\t\t    gen_rtx (REG, Pmode, 15)))));\n   else\n-    emit_call_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\t     gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n-\t\t\t     gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\t       gen_rtx (REG, Pmode, 15)))));\n+    emit_call_insn\n+      (gen_rtx (PARALLEL, VOIDmode,\n+\t\tgen_rtvec (2, gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n+\t\t\t   gen_rtx (CLOBBER, VOIDmode,\n+\t\t\t\t    gen_rtx (REG, Pmode, 15)))));\n \n  finish_call:\n #if 0"}]}