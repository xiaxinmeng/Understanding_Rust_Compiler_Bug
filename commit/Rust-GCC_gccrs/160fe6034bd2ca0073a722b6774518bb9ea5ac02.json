{"sha": "160fe6034bd2ca0073a722b6774518bb9ea5ac02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwZmU2MDM0YmQyY2EwMDczYTcyMmI2Nzc0NTE4YmI5ZWE1YWMwMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-01T15:48:30Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-03T14:39:33Z"}, "message": "Use known global ranges in export_global_ranges\n\nThis patch modifies export_global_ranges to take into account current\nglobal ranges.  It also handles enhances said function to export pointer\nglobal ranges as well.\n\ngcc/ChangeLog:\n\n\t* gimple-range.cc (gimple_ranger::export_global_ranges): Call\n\t  update_global_range.\n\t* value-query.cc (update_global_range): New.\n\t* value-query.h (update_global_range): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr80776-1.c: XFAIL and document the reason why.", "tree": {"sha": "b46dacb9e3bdf98c420ca1956e85f3daeb35458d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46dacb9e3bdf98c420ca1956e85f3daeb35458d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/160fe6034bd2ca0073a722b6774518bb9ea5ac02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160fe6034bd2ca0073a722b6774518bb9ea5ac02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160fe6034bd2ca0073a722b6774518bb9ea5ac02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160fe6034bd2ca0073a722b6774518bb9ea5ac02/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "981d98b883ed521c88c295ed82227c605d82add4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981d98b883ed521c88c295ed82227c605d82add4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981d98b883ed521c88c295ed82227c605d82add4"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "af4262070926219729c94decf727927fa17fd519", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=160fe6034bd2ca0073a722b6774518bb9ea5ac02", "patch": "@@ -1115,7 +1115,7 @@ gimple_ranger::range_of_stmt (irange &r, gimple *s, tree name)\n }\n \n // This routine will export whatever global ranges are known to GCC\n-// SSA_RANGE_NAME_INFO fields.\n+// SSA_RANGE_NAME_INFO and SSA_NAME_PTR_INFO fields.\n \n void\n gimple_ranger::export_global_ranges ()\n@@ -1136,24 +1136,18 @@ gimple_ranger::export_global_ranges ()\n \t  && m_cache.get_global_range (r, name)\n \t  && !r.varying_p())\n \t{\n-\t  // Make sure the new range is a subset of the old range.\n-\t  int_range_max old_range;\n-\t  old_range = gimple_range_global (name);\n-\t  old_range.intersect (r);\n-\t  /* Disable this while we fix tree-ssa/pr61743-2.c.  */\n-\t  //gcc_checking_assert (old_range == r);\n-\n-\t  // WTF? Can't write non-null pointer ranges?? stupid set_range_info!\n-\t  if (!POINTER_TYPE_P (TREE_TYPE (name)) && !r.undefined_p ())\n+\t  bool updated = update_global_range (r, name);\n+\n+\t  if (updated && dump_file)\n \t    {\n \t      value_range vr = r;\n-\t      set_range_info (name, vr);\n-\t      if (dump_file)\n+\t      print_generic_expr (dump_file, name , TDF_SLIM);\n+\t      fprintf (dump_file, \" --> \");\n+\t      vr.dump (dump_file);\n+\t      fprintf (dump_file, \"\\n\");\n+\t      int_range_max same = vr;\n+\t      if (same != r)\n \t\t{\n-\t\t  print_generic_expr (dump_file, name , TDF_SLIM);\n-\t\t  fprintf (dump_file, \" --> \");\n-\t\t  vr.dump (dump_file);\n-\t\t  fprintf (dump_file, \"\\n\");\n \t\t  fprintf (dump_file, \"         irange : \");\n \t\t  r.dump (dump_file);\n \t\t  fprintf (dump_file, \"\\n\");"}, {"sha": "eca5e805ae2805d6afb791755bb755b770059112", "filename": "gcc/testsuite/gcc.dg/pr80776-1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c?ref=160fe6034bd2ca0073a722b6774518bb9ea5ac02", "patch": "@@ -17,5 +17,15 @@ Foo (void)\n     __builtin_unreachable ();\n   if (! (0 <= i && i <= 999999))\n     __builtin_unreachable ();\n-  sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" \"\" } */\n+\n+  /* Legacy evrp sets the range of i to [0, MAX] *before* the first conditional,\n+     and to [0,999999] *before* the second conditional.  This is because both\n+     evrp and VRP use trickery to set global ranges when this particular use of\n+     a __builtin_unreachable is in play (see uses of\n+     assert_unreachable_fallthru_edge_p).\n+\n+     Setting these ranges at the definition site, causes VRP to remove the\n+     unreachable code altogether, leaving the following sprintf unguarded.  This\n+     causes the bogus warning below.  */\n+  sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" \"\" { xfail *-*-* } } */\n }"}, {"sha": "070d706166ee12d60d8ac32ee5411edbaa9f29e9", "filename": "gcc/value-query.cc", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=160fe6034bd2ca0073a722b6774518bb9ea5ac02", "patch": "@@ -224,6 +224,45 @@ get_ssa_name_ptr_info_nonnull (const_tree name)\n   return !pi->pt.null;\n }\n \n+// Update the global range for NAME into the SSA_RANGE_NAME_INFO and\n+// SSA_NAME_PTR_INFO fields.  Return TRUE if the range for NAME was\n+// updated.\n+\n+bool\n+update_global_range (irange &r, tree name)\n+{\n+  tree type = TREE_TYPE (name);\n+\n+  if (r.undefined_p () || r.varying_p ())\n+    return false;\n+\n+  if (INTEGRAL_TYPE_P (type))\n+    {\n+      // If a global range already exists, incorporate it.\n+      if (SSA_NAME_RANGE_INFO (name))\n+\t{\n+\t  value_range glob;\n+\t  get_ssa_name_range_info (glob, name);\n+\t  r.intersect (glob);\n+\t}\n+      if (r.undefined_p ())\n+\treturn false;\n+\n+      value_range vr = r;\n+      set_range_info (name, vr);\n+      return true;\n+    }\n+  else if (POINTER_TYPE_P (type))\n+    {\n+      if (r.nonzero_p ())\n+\t{\n+\t  set_ptr_nonnull (name);\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n // Return the legacy global range for NAME if it has one, otherwise\n // return VARYING.\n "}, {"sha": "d0512e40c5a54773fd7d5d91891e36256c6ca9ef", "filename": "gcc/value-query.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fvalue-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160fe6034bd2ca0073a722b6774518bb9ea5ac02/gcc%2Fvalue-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.h?ref=160fe6034bd2ca0073a722b6774518bb9ea5ac02", "patch": "@@ -115,5 +115,6 @@ class global_range_query : public range_query\n \n extern global_range_query global_ranges;\n extern value_range gimple_range_global (tree name);\n+extern bool update_global_range (irange &r, tree name);\n \n #endif // GCC_QUERY_H"}]}