{"sha": "c8bf6646ed17bfb7e2350152935e9cba829bf929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiZjY2NDZlZDE3YmZiN2UyMzUwMTUyOTM1ZTljYmE4MjliZjkyOQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-11T21:11:15Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-11T21:11:15Z"}, "message": "libphobos: Merge upstream phobos cf95639ff\n\nBackports ports committed to upstream phobos since the last sync.\n\nReviewed-on: https://github.com/dlang/phobos/pull/6947\n\nFrom-SVN: r270296", "tree": {"sha": "0b6fe88eb99fe62d847652c87a20c1237ca06ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b6fe88eb99fe62d847652c87a20c1237ca06ec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8bf6646ed17bfb7e2350152935e9cba829bf929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf6646ed17bfb7e2350152935e9cba829bf929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bf6646ed17bfb7e2350152935e9cba829bf929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf6646ed17bfb7e2350152935e9cba829bf929/comments", "author": null, "committer": null, "parents": [{"sha": "9607e404a5853c68bcfb8d1bab823736597409bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9607e404a5853c68bcfb8d1bab823736597409bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9607e404a5853c68bcfb8d1bab823736597409bc"}], "stats": {"total": 140, "additions": 128, "deletions": 12}, "files": [{"sha": "b4d44b55624a2a70b4760680c19e4493da66182a", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -1,4 +1,4 @@\n-ef07932811de50a1d5810ea23462d127a60574a6\n+cf95639ffd9ed6f3b9d10d98461b2fbd31615757\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "326b54417244f8edf562d489c2fd8cb2cfcbf5a0", "filename": "libphobos/src/std/datetime/systime.d", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -214,6 +214,22 @@ public:\n                            hnsecsToUnixEpoch;\n                 }\n             }\n+            else version (DragonFlyBSD)\n+            {\n+                import core.sys.dragonflybsd.time : clock_gettime, CLOCK_REALTIME,\n+                    CLOCK_REALTIME_FAST, CLOCK_REALTIME_PRECISE, CLOCK_SECOND;\n+                static if (clockType == ClockType.coarse)       alias clockArg = CLOCK_REALTIME_FAST;\n+                else static if (clockType == ClockType.normal)  alias clockArg = CLOCK_REALTIME;\n+                else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME_PRECISE;\n+                else static if (clockType == ClockType.second)  alias clockArg = CLOCK_SECOND;\n+                else static assert(0, \"Previous static if is wrong.\");\n+                timespec ts;\n+                if (clock_gettime(clockArg, &ts) != 0)\n+                    throw new TimeException(\"Call to clock_gettime() failed\");\n+                return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n+                       ts.tv_nsec / 100 +\n+                       hnsecsToUnixEpoch;\n+            }\n             else version (Solaris)\n             {\n                 static if (clockType == ClockType.second)"}, {"sha": "7ae1902024359114407f227b11f418e05d8a9b3c", "filename": "libphobos/src/std/datetime/timezone.d", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -292,10 +292,12 @@ public:\n \n         version (Posix)\n         {\n-            version (FreeBSD)      enum utcZone = \"Etc/UTC\";\n-            else version (NetBSD)  enum utcZone = \"UTC\";\n-            else version (linux)   enum utcZone = \"UTC\";\n-            else version (OSX)     enum utcZone = \"UTC\";\n+            version (FreeBSD)            enum utcZone = \"Etc/UTC\";\n+            else version (NetBSD)        enum utcZone = \"UTC\";\n+            else version (DragonFlyBSD)  enum utcZone = \"UTC\";\n+            else version (linux)         enum utcZone = \"UTC\";\n+            else version (OSX)           enum utcZone = \"UTC\";\n+            else version (Solaris)       enum utcZone = \"UTC\";\n             else static assert(0, \"The location of the UTC timezone file on this Posix platform must be set.\");\n \n             auto tzs = [testTZ(\"America/Los_Angeles\", \"PST\", \"PDT\", dur!\"hours\"(-8), dur!\"hours\"(1)),\n@@ -1891,6 +1893,14 @@ public:\n         // Android concatenates all time zone data into a single file and stores it here.\n         enum defaultTZDatabaseDir = \"/system/usr/share/zoneinfo/\";\n     }\n+    else version (Solaris)\n+    {\n+        /++\n+            The default directory where the TZ Database files are. It's empty\n+            for Windows, since Windows doesn't have them.\n+          +/\n+        enum defaultTZDatabaseDir = \"/usr/share/lib/zoneinfo/\";\n+    }\n     else version (Posix)\n     {\n         /++"}, {"sha": "3d8431c23ca84aac12bfff3dbac2cbaacb1972d4", "filename": "libphobos/src/std/experimental/allocator/building_blocks/region.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -392,6 +392,8 @@ struct InSituRegion(size_t size, size_t minAlign = platformAlignment)\n     else version (PPC64) enum growDownwards = Yes.growDownwards;\n     else version (MIPS32) enum growDownwards = Yes.growDownwards;\n     else version (MIPS64) enum growDownwards = Yes.growDownwards;\n+    else version (RISCV32) enum growDownwards = Yes.growDownwards;\n+    else version (RISCV64) enum growDownwards = Yes.growDownwards;\n     else version (SPARC) enum growDownwards = Yes.growDownwards;\n     else version (SystemZ) enum growDownwards = Yes.growDownwards;\n     else static assert(0, \"Dunno how the stack grows on this architecture.\");"}, {"sha": "9ba992944ebdb3ad5b66604c6c6445d705c70e2b", "filename": "libphobos/src/std/file.d", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffile.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -1488,6 +1488,7 @@ if (isInputRange!R && !isInfinite!R && isSomeChar!(ElementEncodingType!R))\n // - OS X, where the native filesystem (HFS+) stores filesystem\n //   timestamps with 1-second precision.\n version (FreeBSD) {} else\n+version (DragonFlyBSD) {} else\n version (OSX) {} else\n @system unittest\n {\n@@ -2779,6 +2780,10 @@ else version (NetBSD)\n     {\n         return readLink(\"/proc/self/exe\");\n     }\n+    else version (DragonFlyBSD)\n+    {\n+        return readLink(\"/proc/curproc/file\");\n+    }\n     else version (Solaris)\n     {\n         import core.sys.posix.unistd : getpid;\n@@ -3092,8 +3097,12 @@ else version (Posix)\n         {\n             import std.path : buildPath;\n \n-            immutable len = core.stdc.string.strlen(fd.d_name.ptr);\n-            _name = buildPath(path, fd.d_name[0 .. len]);\n+            static if (is(typeof(fd.d_namlen)))\n+                immutable len = fd.d_namlen;\n+            else\n+                immutable len = (() @trusted => core.stdc.string.strlen(fd.d_name.ptr))();\n+\n+            _name = buildPath(path, (() @trusted => fd.d_name.ptr[0 .. len])());\n \n             _didLStat = false;\n             _didStat = false;"}, {"sha": "e5bc7f744bc4f6c1dada02d8b310f01d240361eb", "filename": "libphobos/src/std/internal/cstring.d", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Finternal%2Fcstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Finternal%2Fcstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Finternal%2Fcstring.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -131,17 +131,20 @@ if (isSomeChar!To && (isInputRange!From || isSomeString!From) &&\n     private:\n         To* _ptr;\n         size_t _length;        // length of the string\n+\n+        // the 'small string optimization'\n         version (unittest)\n         {\n-            enum buffLength = 16 / To.sizeof;   // smaller size to trigger reallocations\n+            // smaller size to trigger reallocations. Padding is to account for\n+            // unittest/non-unittest cross-compilation (to avoid corruption)\n+            To[16 / To.sizeof] _buff;\n+            To[(256 - 16) / To.sizeof] _unittest_pad;\n         }\n         else\n         {\n-            enum buffLength = 256 / To.sizeof;   // production size\n+            To[256 / To.sizeof] _buff; // production size\n         }\n \n-        To[buffLength] _buff;  // the 'small string optimization'\n-\n         static Res trustedVoidInit() { Res res = void; return res; }\n     }\n "}, {"sha": "daee6ec3c33a0e0b6eba383434d3dd6853110938", "filename": "libphobos/src/std/math.d", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -162,6 +162,8 @@ version (AArch64)   version = ARM_Any;\n version (ARM)       version = ARM_Any;\n version (SPARC)     version = SPARC_Any;\n version (SPARC64)   version = SPARC_Any;\n+version (RISCV32)   version = RISCV_Any;\n+version (RISCV64)   version = RISCV_Any;\n \n version (D_InlineAsm_X86)\n {\n@@ -4683,6 +4685,7 @@ private:\n     // The Pentium SSE2 status register is 32 bits.\n     // The ARM and PowerPC FPSCR is a 32-bit register.\n     // The SPARC FSR is a 32bit register (64 bits for SPARC 7 & 8, but high bits are uninteresting).\n+    // The RISC-V (32 & 64 bit) fcsr is 32-bit register.\n     uint flags;\n \n     version (CRuntime_Microsoft)\n@@ -4987,6 +4990,10 @@ else version (PPC_Any)\n {\n     version = IeeeFlagsSupport;\n }\n+else version (RISCV_Any)\n+{\n+    version = IeeeFlagsSupport;\n+}\n else version (MIPS_Any)\n {\n     version = IeeeFlagsSupport;\n@@ -5226,6 +5233,21 @@ struct FloatingPointControl\n                                  | inexactException,\n         }\n     }\n+    else version (RISCV_Any)\n+    {\n+        enum : ExceptionMask\n+        {\n+            inexactException      = 0x01,\n+            divByZeroException    = 0x02,\n+            underflowException    = 0x04,\n+            overflowException     = 0x08,\n+            invalidException      = 0x10,\n+            severeExceptions   = overflowException | divByZeroException\n+                                 | invalidException,\n+            allExceptions      = severeExceptions | underflowException\n+                                 | inexactException,\n+        }\n+    }\n     else version (X86_Any)\n     {\n         enum : ExceptionMask\n@@ -5338,6 +5360,10 @@ private:\n     {\n         alias ControlState = uint;\n     }\n+    else version (RISCV_Any)\n+    {\n+        alias ControlState = uint;\n+    }\n     else version (X86_Any)\n     {\n         alias ControlState = ushort;\n@@ -7595,6 +7621,34 @@ private real polyImpl(real x, in real[] A) @trusted pure nothrow @nogc\n                 ;\n             }\n         }\n+        else version (DragonFlyBSD)\n+        {\n+            asm pure nothrow @nogc // assembler by W. Bright\n+            {\n+                // EDX = (A.length - 1) * real.sizeof\n+                mov     ECX,A[EBP]              ; // ECX = A.length\n+                dec     ECX                     ;\n+                lea     EDX,[ECX*8]             ;\n+                lea     EDX,[EDX][ECX*4]        ;\n+                add     EDX,A+4[EBP]            ;\n+                fld     real ptr [EDX]          ; // ST0 = coeff[ECX]\n+                jecxz   return_ST               ;\n+                fld     x[EBP]                  ; // ST0 = x\n+                fxch    ST(1)                   ; // ST1 = x, ST0 = r\n+                align   4                       ;\n+        L2:     fmul    ST,ST(1)                ; // r *= x\n+                fld     real ptr -12[EDX]       ;\n+                sub     EDX,12                  ; // deg--\n+                faddp   ST(1),ST                ;\n+                dec     ECX                     ;\n+                jne     L2                      ;\n+                fxch    ST(1)                   ; // ST1 = r, ST0 = x\n+                fstp    ST(0)                   ; // dump x\n+                align   4                       ;\n+        return_ST:                              ;\n+                ;\n+            }\n+        }\n         else\n         {\n             static assert(0);"}, {"sha": "64fa2f93c7ed619417907f9af90f4e4de73cdb3f", "filename": "libphobos/src/std/parallelism.d", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fparallelism.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -94,6 +94,10 @@ else version (FreeBSD)\n {\n     version = useSysctlbyname;\n }\n+else version (DragonFlyBSD)\n+{\n+    version = useSysctlbyname;\n+}\n else version (NetBSD)\n {\n     version = useSysctlbyname;\n@@ -146,6 +150,10 @@ else version (useSysctlbyname)\n         {\n             auto nameStr = \"hw.ncpu\\0\".ptr;\n         }\n+        else version (DragonFlyBSD)\n+        {\n+            auto nameStr = \"hw.ncpu\\0\".ptr;\n+        }\n         else version (NetBSD)\n         {\n             auto nameStr = \"hw.ncpu\\0\".ptr;"}, {"sha": "4a435efba6c20c00dbbb05a7e9aaab470a50e717", "filename": "libphobos/src/std/path.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fpath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fpath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fpath.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -3970,7 +3970,7 @@ string expandTilde(string inputPath) nothrow\n                     }\n \n                     if (errno != ERANGE &&\n-                        // On FreeBSD and OSX, errno can be left at 0 instead of set to ERANGE\n+                        // On BSD and OSX, errno can be left at 0 instead of set to ERANGE\n                         errno != 0)\n                         onOutOfMemoryError();\n "}, {"sha": "2853dbde0c62f5960bd5338c742681beebad60bb", "filename": "libphobos/src/std/socket.d", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsocket.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -187,6 +187,14 @@ string formatSocketError(int err) @trusted\n             else\n                 return \"Socket error \" ~ to!string(err);\n         }\n+        else version (DragonFlyBSD)\n+        {\n+            auto errs = strerror_r(err, buf.ptr, buf.length);\n+            if (errs == 0)\n+                cs = buf.ptr;\n+            else\n+                return \"Socket error \" ~ to!string(err);\n+        }\n         else version (Solaris)\n         {\n             auto errs = strerror_r(err, buf.ptr, buf.length);"}, {"sha": "63bc32e9694642f67afc1b6fd2cff293b8972818", "filename": "libphobos/src/std/stdio.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf6646ed17bfb7e2350152935e9cba829bf929/libphobos%2Fsrc%2Fstd%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstdio.d?ref=c8bf6646ed17bfb7e2350152935e9cba829bf929", "patch": "@@ -63,6 +63,12 @@ version (NetBSD)\n     version = HAS_GETDELIM;\n }\n \n+version (DragonFlyBSD)\n+{\n+    version = GENERIC_IO;\n+    version = HAS_GETDELIM;\n+}\n+\n version (Solaris)\n {\n     version = GENERIC_IO;"}]}