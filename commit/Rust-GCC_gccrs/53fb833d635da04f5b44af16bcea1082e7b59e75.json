{"sha": "53fb833d635da04f5b44af16bcea1082e7b59e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmYjgzM2Q2MzVkYTA0ZjViNDRhZjE2YmNlYTEwODJlN2I1OWU3NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-21T12:16:20Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-21T14:27:37Z"}, "message": "Elide expand_constructor if move by pieces is preferred\n\nElide expand_constructor when the constructor is static storage and not\nmostly zeros and we can move it by pieces prefer to do so since that's\nusually more efficient than performing a series of stores from immediates.\n\n2021-05-21  Richard Biener  <rguenther@suse.de>\n\t    H.J. Lu  <hjl.tools@gmail.com>\n\ngcc/\n\n\tPR middle-end/90773\n\t* expr.c (expand_constructor): Elide expand_constructor if\n\tmove by pieces is preferred.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/pr90773-24.c: New test.\n\t* gcc.target/i386/pr90773-25.c: Likewise.", "tree": {"sha": "6166e9128634ef8eb9e93e10f6e77b405d0c2921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6166e9128634ef8eb9e93e10f6e77b405d0c2921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53fb833d635da04f5b44af16bcea1082e7b59e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fb833d635da04f5b44af16bcea1082e7b59e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fb833d635da04f5b44af16bcea1082e7b59e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fb833d635da04f5b44af16bcea1082e7b59e75/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d42db533324e80a7382b20b94cace5b202d41ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d42db533324e80a7382b20b94cace5b202d41ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d42db533324e80a7382b20b94cace5b202d41ea"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "ba61eb98b3bb6205cd9960068cd45441f6df18ed", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=53fb833d635da04f5b44af16bcea1082e7b59e75", "patch": "@@ -8523,6 +8523,19 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n       return constructor;\n     }\n \n+  /* If the CTOR is available in static storage and not mostly\n+     zeros and we can move it by pieces prefer to do so since\n+     that's usually more efficient than performing a series of\n+     stores from immediates.  */\n+  if (avoid_temp_mem\n+      && TREE_STATIC (exp)\n+      && TREE_CONSTANT (exp)\n+      && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n+      && can_move_by_pieces (tree_to_uhwi (TYPE_SIZE_UNIT (type)),\n+\t\t\t     TYPE_ALIGN (type))\n+      && ! mostly_zeros_p (exp))\n+    return NULL_RTX;\n+\n   /* Handle calls that pass values in multiple non-contiguous\n      locations.  The Irix 6 ABI has examples of this.  */\n   if (target == 0 || ! safe_from_p (target, exp, 1)"}, {"sha": "7b2ea66dcfc260e87a9bf6884d3bdb494a2d220a", "filename": "gcc/testsuite/gcc.target/i386/pr90773-24.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-24.c?ref=53fb833d635da04f5b44af16bcea1082e7b59e75", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+struct S\n+{\n+  long long s1 __attribute__ ((aligned (8)));\n+  unsigned s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n+};\n+\n+const struct S array[] = {\n+  { 0, 60, 640, 2112543726, 39682, 48, 16, 33, 10, 96, 2, 0, 0, 4 }\n+};\n+\n+void\n+foo (struct S *x)\n+{\n+  x[0] = array[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 48\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}, {"sha": "57642ea8d2dab0e6c600b7842399daa054191455", "filename": "gcc/testsuite/gcc.target/i386/pr90773-25.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fb833d635da04f5b44af16bcea1082e7b59e75/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90773-25.c?ref=53fb833d635da04f5b44af16bcea1082e7b59e75", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+struct S\n+{\n+  long long s1 __attribute__ ((aligned (8)));\n+  unsigned s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n+};\n+\n+const struct S array[] = {\n+  { 0, }\n+};\n+\n+void\n+foo (struct S *x)\n+{\n+  x[0] = array[0];\n+}\n+\n+/* { dg-final { scan-assembler-not \"movdqa\" } } */\n+/* { dg-final { scan-assembler-times \"pxor\\[\\\\t \\]%xmm\\[0-9\\]+, %xmm\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, \\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 16\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 32\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[\\\\t \\]%xmm\\[0-9\\]+, 48\\\\(%\\[\\^,\\]+\\\\)\" 1 } } */"}]}