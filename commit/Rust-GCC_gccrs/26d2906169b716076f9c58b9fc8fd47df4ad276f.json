{"sha": "26d2906169b716076f9c58b9fc8fd47df4ad276f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkMjkwNjE2OWI3MTYwNzZmOWM1OGI5ZmM4ZmQ0N2RmNGFkMjc2Zg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2006-10-15T06:32:42Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-10-15T06:32:42Z"}, "message": "gfortran.texi: Add link to GFortran apps\n\n2006-10-14  Tobias Burnus  <burnus@net-b.de>\n\t* gfortran.texi: Add link to GFortran apps\n\t* intrinsic.texi: Updated documentation of ACCESS and CHMOD\n\nFrom-SVN: r117740", "tree": {"sha": "22516fb1e243573e9e193a5fa35c93ab65cd7c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22516fb1e243573e9e193a5fa35c93ab65cd7c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d2906169b716076f9c58b9fc8fd47df4ad276f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d2906169b716076f9c58b9fc8fd47df4ad276f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d2906169b716076f9c58b9fc8fd47df4ad276f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d2906169b716076f9c58b9fc8fd47df4ad276f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a1109bf89780434f84f34811c3ac0619d09be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1109bf89780434f84f34811c3ac0619d09be16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1109bf89780434f84f34811c3ac0619d09be16"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "0cef54db2489099bc8177d423b9e7ddf1ed7354c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26d2906169b716076f9c58b9fc8fd47df4ad276f", "patch": "@@ -1,3 +1,8 @@\n+2006-10-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi: Add link to GFortran apps\n+\t* intrinsic.texi: Updated documentation of ACCESS and CHMOD\n+\n 2006-10-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/19261"}, {"sha": "9847cbf441526bf6b06d0d04f2d845f660595d04", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=26d2906169b716076f9c58b9fc8fd47df4ad276f", "patch": "@@ -161,7 +161,7 @@ it will do everything you expect from any decent compiler:\n @item\n Read a user's program,\n stored in a file and containing instructions written\n-in Fortran 77, Fortran 90 or Fortran 95.\n+in Fortran 77, Fortran 90, Fortran 95 or Fortran 2003.\n This file contains @dfn{source code}.\n \n @item\n@@ -404,7 +404,8 @@ large real-world programs, including\n @uref{http://mysite.verizon.net/serveall/moene.pdf, the HIRLAM\n weather-forecasting code} and\n @uref{http://www.theochem.uwa.edu.au/tonto/, the Tonto quantum \n-chemistry package}.\n+chemistry package}; see @url{http://gcc.gnu.org/wiki/GfortranApps} for an\n+extended list.\n \n Among other things, the GNU Fortran compiler is intended as a replacement\n for G77.  At this point, nearly all programs that could be compiled with"}, {"sha": "63453e72ced5cef1ef13a075ad0cf00fc3f12125", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 64, "deletions": 7, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d2906169b716076f9c58b9fc8fd47df4ad276f/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=26d2906169b716076f9c58b9fc8fd47df4ad276f", "patch": "@@ -52,7 +52,7 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * Introduction:         Introduction\n * @code{ABORT}:         ABORT,     Abort the program     \n * @code{ABS}:           ABS,       Absolute value     \n-* @code{ACCESS}:        ACCESS,    Checks file access method\n+* @code{ACCESS}:        ACCESS,    Checks file access modes\n * @code{ACHAR}:         ACHAR,     Character in @acronym{ASCII} collating sequence\n * @code{ACOS}:          ACOS,      Arccosine function\n * @code{ACOSH}:         ACOSH,     Hyperbolic arccosine function\n@@ -389,23 +389,56 @@ end program test_abs\n \n \n @node ACCESS\n-@section @code{ACCESS} --- Checks file access method\n+@section @code{ACCESS} --- Checks file access modes\n @findex @code{ACCESS} \n @cindex file system functions\n \n-Not yet implemented in GNU Fortran.\n-\n @table @asis\n @item @emph{Description}:\n+@code{ACCESS(NAME, MODE)} checks whether the file @var{NAME} \n+exists, is readable, writable or executable. Except for the\n+executable check, @code{ACCESS} can be replaced by\n+Fortran 95's @code{INQUIRE}.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Inquiry function\n+\n @item @emph{Syntax}:\n+@code{I = ACCESS(NAME, MODE)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{NAME} @tab Scalar @code{CHARACTER} with the file name.\n+Tailing blank are ignored unless the character @code{achar(0)} is\n+present, then all characters up to and excluding @code{achar(0)} are\n+used as file name.\n+@item @var{MODE} @tab Scalar @code{CHARACTER} with the file access mode,\n+may be any concatenation of @code{\"r\"} (readable), @code{\"w\"} (writable)\n+and @code{\"x\"} (executable), or @code{\" \"} to check for existance.\n+@end multitable\n+\n @item @emph{Return value}:\n+Returns a scalar @code{INTEGER}, which is @code{0} if the file is\n+accessable in the given mode; otherwise or if an invalid argument\n+has been given for @code{MODE} the value @code{1} is returned.\n+\n @item @emph{Example}:\n+@smallexample\n+program access_test\n+  implicit none\n+  character(len=*), parameter :: file  = 'test.dat'\n+  character(len=*), parameter :: file2 = 'test.dat  '//achar(0)\n+  if(access(file,' ') == 0) print *, trim(file),' is exists'\n+  if(access(file,'r') == 0) print *, trim(file),' is readable'\n+  if(access(file,'w') == 0) print *, trim(file),' is writable'\n+  if(access(file,'x') == 0) print *, trim(file),' is executable'\n+  if(access(file2,'rwx') == 0) &\n+    print *, trim(file2),' is readable, writable and executable'\n+end program access_test\n+@end smallexample\n @item @emph{Specific names}:\n @item @emph{See also}:\n \n@@ -1873,10 +1906,11 @@ END PROGRAM\n @findex @code{CHMOD} \n @cindex file system functions\n \n-Not yet implemented in GNU Fortran.\n-\n @table @asis\n @item @emph{Description}:\n+@code{CHMOD} changes the permissions of a file. This function invokes\n+@code{/bin/chmod} and might therefore not work on all platforms.\n+@code{CHMOD} as an intrinsic function is not implemented in GNU Fortran.\n \n @item @emph{Standard}:\n GNU extension\n@@ -1885,9 +1919,32 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CHMOD(NAME, MODE[, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .80\n+@item @var{NAME} @tab Scalar @code{CHARACTER} with the file name.\n+Trailing blanks are ignored unless the character @code{achar(0)} is\n+present, then all characters up to and excluding @code{achar(0)} are\n+used as the file name.\n+\n+@item @var{MODE} @tab Scalar @code{CHARACTER} giving the file permission.\n+@var{MODE} uses the same syntax as the @var{MODE} argument of\n+@code{/bin/chmod}.\n+\n+@item @var{STATUS} @tab (optional) scalar @code{INTEGER}, which is\n+@code{0} on success and non-zero otherwise.\n+@end multitable\n+\n @item @emph{Example}:\n+@smallexample\n+program chmod_test\n+  implicit none\n+  integer :: status\n+  call chmod('test.dat','u+x',status)\n+  print *, 'Status: ', status\n+end program chmod_test\n+@end smallexample\n @item @emph{Specific names}:\n @item @emph{See also}:\n "}]}