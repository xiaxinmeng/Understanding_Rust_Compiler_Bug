{"sha": "63715e5e78532916b334027d72fb59931798a5f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3MTVlNWU3ODUzMjkxNmIzMzQwMjdkNzJmYjU5OTMxNzk4YTVmNw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-07-28T14:34:41Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-07-28T14:34:41Z"}, "message": "On AArch64 the UXTB and UXTH instructions are aliases of UBFM,\n\nwhich does a shift as part of its operation. An AND immediate is a\nsimpler operation, and might be faster on some implementations, so\nit is better to emit this this instead of UBFM.\n\nBenchmarking showed no difference on implementations where UBFM has\nthe same performance as AND, and minor speedups across several\nbenchmarks on an implementation where UBFM is slower than AND.\n\nBootstrapped and tested on aarch64-none-elf.\n\n    gcc/\n\t* config/aarch64/aarch64.md\n\t(zero_extend<SHORT:mode><GPI:mode>2_aarch64): Change output\n\tstatement and type.\n\t(<optab>qihi2_aarch64): Likewise, and split into two.\n\t(extendqihi2_aarch64): New.\n\t(zero_extendqihi2_aarch64): New.\n\t* config/aarch64/iterators.md (ldrxt): Remove.\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Change cost of\n\tuxtb/uxth.\n\nFrom-SVN: r238821", "tree": {"sha": "b4e6979e9b9496ff2dcd879e250d4ca26ddc2176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e6979e9b9496ff2dcd879e250d4ca26ddc2176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63715e5e78532916b334027d72fb59931798a5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63715e5e78532916b334027d72fb59931798a5f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63715e5e78532916b334027d72fb59931798a5f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63715e5e78532916b334027d72fb59931798a5f7/comments", "author": null, "committer": null, "parents": [{"sha": "dde23f43f9b80286ebed873431d7707a800f9043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde23f43f9b80286ebed873431d7707a800f9043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde23f43f9b80286ebed873431d7707a800f9043"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "cad90e6c92fe7209ce02f4d068d2da175d63aabb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63715e5e78532916b334027d72fb59931798a5f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63715e5e78532916b334027d72fb59931798a5f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63715e5e78532916b334027d72fb59931798a5f7", "patch": "@@ -1,3 +1,16 @@\n+2016-07-28  Kristina Martsenko  <kristina.martsenko@arm.com>\n+2016-07-28  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t * config/aarch64/aarch64.md\n+\t(zero_extend<SHORT:mode><GPI:mode>2_aarch64): Change output\n+\tstatement and type.\n+\t(<optab>qihi2_aarch64): Likewise, and split into two.\n+\t(extendqihi2_aarch64): New.\n+\t(zero_extendqihi2_aarch64): New.\n+\t* config/aarch64/iterators.md (ldrxt): Remove.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Change cost of\n+\tuxtb/uxth.\n+\n 2016-07-28  Kristina Martsenko  <kristina.martsenko@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs): Fix cost of zero extend."}, {"sha": "e56398a3e3554f20170389a255da8f4369eacd16", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=63715e5e78532916b334027d72fb59931798a5f7", "patch": "@@ -6838,8 +6838,8 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t    }\n \t  else\n \t    {\n-\t      /* UXTB/UXTH.  */\n-\t      *cost += extra_cost->alu.extend;\n+\t      /* We generate an AND instead of UXTB/UXTH.  */\n+\t      *cost += extra_cost->alu.logical;\n \t    }\n \t}\n       return false;"}, {"sha": "9e87a0d532e6e21c038af1301c659c85e4e38483", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=63715e5e78532916b334027d72fb59931798a5f7", "patch": "@@ -1577,10 +1577,10 @@\n         (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m,m\")))]\n   \"\"\n   \"@\n-   uxt<SHORT:size>\\t%<GPI:w>0, %w1\n+   and\\t%<GPI:w>0, %<GPI:w>1, <SHORT:short_mask>\n    ldr<SHORT:size>\\t%w0, %1\n    ldr\\t%<SHORT:size>0, %1\"\n-  [(set_attr \"type\" \"extend,load1,load1\")]\n+  [(set_attr \"type\" \"logic_imm,load1,load1\")]\n )\n \n (define_expand \"<optab>qihi2\"\n@@ -1589,16 +1589,26 @@\n   \"\"\n )\n \n-(define_insn \"*<optab>qihi2_aarch64\"\n+(define_insn \"*extendqihi2_aarch64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-        (ANY_EXTEND:HI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t(sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"@\n-   <su>xtb\\t%w0, %w1\n-   <ldrxt>b\\t%w0, %1\"\n+   sxtb\\t%w0, %w1\n+   ldrsb\\t%w0, %1\"\n   [(set_attr \"type\" \"extend,load1\")]\n )\n \n+(define_insn \"*zero_extendqihi2_aarch64\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"\"\n+  \"@\n+   and\\t%w0, %w1, 255\n+   ldrb\\t%w0, %1\"\n+  [(set_attr \"type\" \"logic_imm,load1\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Simple arithmetic\n ;; -------------------------------------------------------------------"}, {"sha": "5e8b0ad9cee713835604718780bea6f681f38cf7", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63715e5e78532916b334027d72fb59931798a5f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=63715e5e78532916b334027d72fb59931798a5f7", "patch": "@@ -942,9 +942,6 @@\n ;; Similar, but when not(op)\n (define_code_attr nlogical [(and \"bic\") (ior \"orn\") (xor \"eon\")])\n \n-;; Sign- or zero-extending load\n-(define_code_attr ldrxt [(sign_extend \"ldrs\") (zero_extend \"ldr\")])\n-\n ;; Sign- or zero-extending data-op\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")\n \t\t      (sign_extract \"s\") (zero_extract \"u\")"}]}