{"sha": "dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiZWQzOTc4NjBlZGFlYjAxMTY5NTZjYzNjZGY5ZDlmNjBjZmYzZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@montsouris.artheist.org", "date": "2007-10-09T20:48:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-09T20:48:38Z"}, "message": "PR libstdc++/33489 continued.\n\n2007-10-09  Benjamin Kosnik  <bkoz@montsouris.artheist.org>\n\n\tPR libstdc++/33489 continued.\t\t\n\t* include/parallel/features.h (_GLIBCXX_LOSER_TREE): Set to zero.\n\t(_GLIBCXX_LOSER_TREE_POINTER): Set to one.\n\t(_GLIBCXX_LOSER_TREE_UNGUARDED): Set to zero.\n\t(_GLIBCXX_LOSER_TREE_POINTER_UNGUARDED): Set to one.\n\t* include/parallel/multiway_merge.h (parallel_multiway_merge):\n\tChange array of value_type to array of value_type pointers.\n \t(multiway_merge_bubble): Same.\n\t(multiway_merge_loser_tree): Same.\n\t* include/parallel/merge.h (merge_advance_movc): Change to avoid\n\tdefault construction.\n\t* include/parallel/multiseq_selection.h (multiseq_partition):\n\tReplace value_type, bool pair with value_type*, null-initialized.\n\t* include/parallel/multiway_mergesort.h (parallel_sort_mwms):\n\tDon't use array form of operator new for value_types.\n\t(parallel_sort_mwms_pu): Same.\n\t* include/parallel/quicksort.h (parallel_sort_qs_divide): Don't\n\tuse array form to construct pointer to value_type on stack,\n\tinstead use __builtin_alloca.\t\n\t* include/parallel/random_shuffle.h (sequential_random_shuffle): Same,\n\tbut use operator new.\n\t(parallel_random_shuffle_drs_pu): Same.\n\t* include/parallel/partial_sum.h ( parallel_partial_sum_linear): Same.\n\n\t* include/parallel/losertree.h: Format.\n\t* include/parallel/settings.h: Format.\n\n\t* include/parallel/multiway_merge.h: Move traits to....\n\t* include/parallel/losertree.h: ... here.\n\nFrom-SVN: r129179", "tree": {"sha": "8f68ccf134a3987bca19b620318ed934b74ac3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f68ccf134a3987bca19b620318ed934b74ac3ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/comments", "author": null, "committer": null, "parents": [{"sha": "afd428f812ea77aac8574629bdc1e779c7d050d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd428f812ea77aac8574629bdc1e779c7d050d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd428f812ea77aac8574629bdc1e779c7d050d4"}], "stats": {"total": 273, "additions": 147, "deletions": 126}, "files": [{"sha": "f851d394a0a11a70c7bf6e1352e618dada1a836a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -1,3 +1,35 @@\n+2007-10-09  Benjamin Kosnik  <bkoz@montsouris.artheist.org>\n+\n+\tPR libstdc++/33489 continued.\t\t\n+\t* include/parallel/features.h (_GLIBCXX_LOSER_TREE): Set to zero.\n+\t(_GLIBCXX_LOSER_TREE_POINTER): Set to one.\n+\t(_GLIBCXX_LOSER_TREE_UNGUARDED): Set to zero.\n+\t(_GLIBCXX_LOSER_TREE_POINTER_UNGUARDED): Set to one.\n+\t* include/parallel/multiway_merge.h (parallel_multiway_merge):\n+\tChange array of value_type to array of value_type pointers.\n+ \t(multiway_merge_bubble): Same.\n+\t(multiway_merge_loser_tree): Same.\n+\t* include/parallel/merge.h (merge_advance_movc): Change to avoid\n+\tdefault construction.\n+\t* include/parallel/multiseq_selection.h (multiseq_partition):\n+\tReplace value_type, bool pair with value_type*, null-initialized.\n+\t* include/parallel/multiway_mergesort.h (parallel_sort_mwms):\n+\tDon't use array form of operator new for value_types.\n+\t(parallel_sort_mwms_pu): Same.\n+\t* include/parallel/quicksort.h (parallel_sort_qs_divide): Don't\n+\tuse array form to construct pointer to value_type on stack,\n+\tinstead use __builtin_alloca.\t\n+\t* include/parallel/random_shuffle.h (sequential_random_shuffle): Same,\n+\tbut use operator new.\n+\t(parallel_random_shuffle_drs_pu): Same.\n+\t* include/parallel/partial_sum.h ( parallel_partial_sum_linear): Same.\n+\n+\t* include/parallel/losertree.h: Format.\n+\t* include/parallel/settings.h: Format.\n+\n+\t* include/parallel/multiway_merge.h: Move traits to....\n+\t* include/parallel/losertree.h: ... here.\t\n+\t\n 2007-10-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1_impl/type_traitsfwd.h (add_reference): Remove."}, {"sha": "c67ffb550e96e4604c8ddebc9d064f831a7a663c", "filename": "libstdc++-v3/include/parallel/features.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffeatures.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffeatures.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffeatures.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -66,7 +66,7 @@\n  *  @brief Include guarded (sequences may run empty) loser tree,\n  *  moving objects.\n  *  @see __gnu_parallel::Settings multiway_merge_algorithm */\n-#define _GLIBCXX_LOSER_TREE 1\n+#define _GLIBCXX_LOSER_TREE 0\n #endif\n \n #ifndef _GLIBCXX_LOSER_TREE_EXPLICIT\n@@ -88,22 +88,22 @@\n /** @def _GLIBCXX_LOSER_TREE_POINTER\n  *  @brief Include some loser tree variant.\n  *  @see __gnu_parallel::Settings multiway_merge_algorithm */\n-#define _GLIBCXX_LOSER_TREE_POINTER 0\n+#define _GLIBCXX_LOSER_TREE_POINTER 1\n #endif\n \n #ifndef _GLIBCXX_LOSER_TREE_UNGUARDED\n /** @def _GLIBCXX_LOSER_TREE_UNGUARDED\n  *  @brief Include unguarded (sequences must not run empty) loser\n  *  tree, moving objects.\n  *  @see __gnu_parallel::Settings multiway_merge_algorithm */\n-#define _GLIBCXX_LOSER_TREE_UNGUARDED 1\n+#define _GLIBCXX_LOSER_TREE_UNGUARDED 0\n #endif\n \n #ifndef _GLIBCXX_LOSER_TREE_POINTER_UNGUARDED\n /** @def _GLIBCXX_LOSER_TREE_POINTER_UNGUARDED\n  *  @brief Include some loser tree variant.\n  *  @see __gnu_parallel::Settings multiway_merge_algorithm */\n-#define _GLIBCXX_LOSER_TREE_POINTER_UNGUARDED 0\n+#define _GLIBCXX_LOSER_TREE_POINTER_UNGUARDED 1\n #endif\n \n #ifndef _GLIBCXX_LOSER_TREE_COMBINED"}, {"sha": "8117995e34aed759b895fb6f791854e71916cd7f", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -36,7 +36,7 @@\n // Written by Johannes Singler.\n \n #ifndef _GLIBCXX_PARALLEL_LOSERTREE_H\n-#define _GLIBCXX_PARALLEL_LOSERTREE_H\n+#define _GLIBCXX_PARALLEL_LOSERTREE_H 1\n \n #include <functional>\n \n@@ -133,7 +133,8 @@ namespace __gnu_parallel\n       for (unsigned int pos = (offset + source) / 2; pos > 0; pos /= 2)\n \t{\n \t  // The smaller one gets promoted.\n-\t  if ((!inf && !losers[pos].inf && !sup && !losers[pos].sup && comp(losers[pos].key, key))\n+\t  if ((!inf && !losers[pos].inf && !sup && !losers[pos].sup \n+\t       && comp(losers[pos].key, key))\n \t      || losers[pos].inf || sup)\n \t    {\n \t      // The other one is smaller.\n@@ -251,7 +252,8 @@ namespace __gnu_parallel\n     print()\n     {\n       for (unsigned int i = 0; i < (k * 2); i++)\n-\tprintf(\"%d    %d from %d,  %d\\n\", i, losers[i].key, losers[i].source, losers[i].sup);\n+\tprintf(\"%d    %d from %d,  %d\\n\", i, losers[i].key, \n+\t       losers[i].source, losers[i].sup);\n     }\n \n     inline int\n@@ -682,7 +684,8 @@ namespace __gnu_parallel\n     init()\n     { losers[0] = losers[init_winner(1)]; }\n \n-    inline void delete_min_insert(const T& key, bool sup)\n+    inline void \n+    delete_min_insert(const T& key, bool sup)\n     {\n       const T* keyp = &key;\n       int source = losers[0].source;\n@@ -708,7 +711,7 @@ namespace __gnu_parallel\n     { return insert_start(key, source, sup); }\n \n     unsigned int\n-    init_winner_stable (unsigned int root)\n+    init_winner_stable(unsigned int root)\n     {\n       if (root >= k)\n \t{\n@@ -719,7 +722,8 @@ namespace __gnu_parallel\n \t  unsigned int left = init_winner (2 * root);\n \t  unsigned int right = init_winner (2 * root + 1);\n \t  if (losers[right].sup\n-\t      || (!losers[left].sup && !comp(*losers[right].keyp, *losers[left].keyp)))\n+\t      || (!losers[left].sup && !comp(*losers[right].keyp, \n+\t\t\t\t\t     *losers[left].keyp)))\n \t    {\n \t      // Left one is less or equal.\n \t      losers[root] = losers[right];\n@@ -749,7 +753,8 @@ namespace __gnu_parallel\n \t  if (\t(sup && (!losers[pos].sup || losers[pos].source < source)) ||\n \t\t(!sup && !losers[pos].sup &&\n \t\t ((comp(*losers[pos].keyp, *keyp)) ||\n-\t\t  (!comp(*keyp, *losers[pos].keyp) && losers[pos].source < source))))\n+\t\t  (!comp(*keyp, *losers[pos].keyp) \n+\t\t   && losers[pos].source < source))))\n \t    {\n \t      // The other one is smaller.\n \t      std::swap(losers[pos].sup, sup);\n@@ -1061,7 +1066,8 @@ namespace __gnu_parallel\n \t{\n \t  // The smaller one gets promoted, ties are broken by source.\n \t  if (comp(*losers[pos].keyp, *keyp)\n-\t      || (!comp(*keyp, *losers[pos].keyp) && losers[pos].source < source))\n+\t      || (!comp(*keyp, *losers[pos].keyp) \n+\t\t  && losers[pos].source < source))\n \t    {\n \t      // The other one is smaller.\n \t      std::swap(losers[pos].source, source);\n@@ -1072,6 +1078,35 @@ namespace __gnu_parallel\n     }\n   };\n #endif\n+\n+  template<typename _ValueTp, class Comparator>\n+  struct loser_tree_traits\n+  {\n+#if _GLIBCXX_LOSER_TREE\n+    typedef LoserTree<_ValueTp, Comparator> LT;\n+#else\n+#  if _GLIBCXX_LOSER_TREE_POINTER\n+    typedef LoserTreePointer<_ValueTp, Comparator> LT;\n+#  else\n+#    error Must define some type in losertree.h.\n+#  endif\n+#endif\n+  };\n+\n+  template<typename _ValueTp, class Comparator>\n+  struct loser_tree_traits_unguarded\n+  {\n+#if _GLIBCXX_LOSER_TREE_UNGUARDED\n+    typedef LoserTreeUnguarded<_ValueTp, Comparator> LT;\n+#else\n+#  if _GLIBCXX_LOSER_TREE_POINTER_UNGUARDED\n+    typedef LoserTreePointerUnguarded<_ValueTp, Comparator> LT;\n+#  else\n+#    error Must define some type in losertree.h.\n+#  endif\n+#endif\n+  };\n+\n }\n \n #endif"}, {"sha": "bbac9b9fdc507d7da184a4e282b55b2ae77e7b69", "filename": "libstdc++-v3/include/parallel/merge.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmerge.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -113,15 +113,10 @@ namespace __gnu_parallel\n \n     while (begin1 != end1 && begin2 != end2 && max_length > 0)\n       {\n-\tvalue_type1 element1;\n-\tvalue_type2 element2;\n-\tRandomAccessIterator1 next1;\n-\tRandomAccessIterator2 next2;\n-\n-\tnext1 = begin1 + 1;\n-\tnext2 = begin2 + 1;\n-\telement1 = *begin1;\n-\telement2 = *begin2;\n+\tRandomAccessIterator1 next1 = begin1 + 1;\n+\tRandomAccessIterator2 next2 = begin2 + 1;\n+\tvalue_type1 element1 = *begin1;\n+\tvalue_type2 element2 = *begin2;\n \n \tif (comp(element2, element1))\n \t  {"}, {"sha": "10f4c73929dd2cbee1fd742d56364625485e6059", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -132,10 +132,10 @@ namespace __gnu_parallel\n \n     typedef typename std::iterator_traits<RanSeqs>::value_type::first_type It;\n     typedef typename std::iterator_traits<It>::difference_type difference_type;\n-    typedef typename std::iterator_traits<It>::value_type T;\n+    typedef typename std::iterator_traits<It>::value_type value_type;\n \n-    lexicographic<T, int, Comparator> lcomp(comp);\n-    lexicographic_reverse<T, int, Comparator> lrcomp(comp);\n+    lexicographic<value_type, int, Comparator> lcomp(comp);\n+    lexicographic_reverse<value_type, int, Comparator> lrcomp(comp);\n \n     // Number of sequences, number of elements in total (possibly\n     // including padding).\n@@ -188,7 +188,7 @@ namespace __gnu_parallel\n #define S(i) (begin_seqs[i].first)\n \n     // Initial partition.\n-    std::vector<std::pair<T, int> > sample;\n+    std::vector<std::pair<value_type, int> > sample;\n \n     for (int i = 0; i < m; i++)\n       if (n < ns[i])\t//sequence long enough\n@@ -213,7 +213,7 @@ namespace __gnu_parallel\n \tn /= 2;\n \n \tint lmax_seq = -1;\t// to avoid warning\n-\tconst T* lmax = NULL;\t// impossible to avoid the warning?\n+\tconst value_type* lmax = NULL;\t// impossible to avoid the warning?\n \tfor (int i = 0; i < m; i++)\n \t  {\n \t    if (a[i] > 0)\n@@ -258,7 +258,7 @@ namespace __gnu_parallel\n \tif (skew > 0)\n \t  {\n \t    // Move to the left, find smallest.\n-\t    std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int> >, lexicographic_reverse<T, int, Comparator> > pq(lrcomp);\n+\t    std::priority_queue<std::pair<value_type, int>, std::vector<std::pair<value_type, int> >, lexicographic_reverse<value_type, int, Comparator> > pq(lrcomp);\n \n \t    for (int i = 0; i < m; i++)\n \t      if (b[i] < ns[i])\n@@ -279,7 +279,7 @@ namespace __gnu_parallel\n \telse if (skew < 0)\n \t  {\n \t    // Move to the right, find greatest.\n-\t    std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int> >, lexicographic<T, int, Comparator> > pq(lcomp);\n+\t    std::priority_queue<std::pair<value_type, int>, std::vector<std::pair<value_type, int> >, lexicographic<value_type, int, Comparator> > pq(lcomp);\n \n \t    for (int i = 0; i < m; i++)\n \t      if (a[i] > 0)\n@@ -308,36 +308,30 @@ namespace __gnu_parallel\n     // Compare the keys on both edges of the border.\n \n     // Maximum of left edge, minimum of right edge.\n-    bool maxleftset = false, minrightset = false;\n-    T maxleft, minright;\t// Impossible to avoid the warning?\n+    value_type* maxleft = NULL;\n+    value_type* minright = NULL;\n     for (int i = 0; i < m; i++)\n       {\n \tif (a[i] > 0)\n \t  {\n-\t    if (!maxleftset)\n-\t      {\n-\t\tmaxleft = S(i)[a[i] - 1];\n-\t\tmaxleftset = true;\n-\t      }\n+\t    if (!maxleft)\n+\t      maxleft = &(S(i)[a[i] - 1]);\n \t    else\n \t      {\n \t\t// Max, favor rear sequences.\n-\t\tif (!comp(S(i)[a[i] - 1], maxleft))\n-\t\t  maxleft = S(i)[a[i] - 1];\n+\t\tif (!comp(S(i)[a[i] - 1], *maxleft))\n+\t\t  maxleft = &(S(i)[a[i] - 1]);\n \t      }\n \t  }\n \tif (b[i] < ns[i])\n \t  {\n-\t    if (!minrightset)\n-\t      {\n-\t\tminright = S(i)[b[i]];\n-\t\tminrightset = true;\n-\t      }\n+\t    if (!minright)\n+\t      minright = &(S(i)[b[i]]);\n \t    else\n \t      {\n \t\t// Min, favor fore sequences.\n-\t\tif (comp(S(i)[b[i]], minright))\n-\t\t  minright = S(i)[b[i]];\n+\t\tif (comp(S(i)[b[i]], *minright))\n+\t\t  minright = &(S(i)[b[i]]);\n \t      }\n \t  }\n       }\n@@ -352,7 +346,6 @@ namespace __gnu_parallel\n   }\n \n \n-\n   /** \n    *  @brief Selects the element at a certain global rank from several\n    *  sorted sequences."}, {"sha": "b72321547955c75177859c29cc6141c317920b07", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 16, "deletions": 69, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -265,7 +265,7 @@ namespace __gnu_parallel\n   {\n     _GLIBCXX_CALL(seqs_end - seqs_begin)\n \n-      typedef typename std::iterator_traits<RandomAccessIteratorIterator>::value_type::first_type\n+    typedef typename std::iterator_traits<RandomAccessIteratorIterator>::value_type::first_type\n       RandomAccessIterator1;\n     typedef typename std::iterator_traits<RandomAccessIterator1>::value_type\n       value_type;\n@@ -346,8 +346,7 @@ namespace __gnu_parallel\n       difference_type;\n \n     // Last element in sequence.\n-    value_type max;\n-    bool max_found = false;\n+    value_type* max = NULL;\n     for (RandomAccessIteratorIterator s = seqs_begin; s != seqs_end; s++)\n       {\n \tif ((*s).first == (*s).second)\n@@ -357,20 +356,19 @@ namespace __gnu_parallel\n \tvalue_type& v = *((*s).second - 1);\n \n \t// Strictly greater.\n-\tif (!max_found || comp(max, v))\n-\t  max = v;\n-\tmax_found = true;\n+\tif (!max || comp(*max, v))\n+\t  max = &v;\n       }\n \n     difference_type overhang_size = 0;\n-\n     for (RandomAccessIteratorIterator s = seqs_begin; s != seqs_end; s++)\n       {\n-\tRandomAccessIterator1 split = std::lower_bound((*s).first, (*s).second, max, comp);\n+\tRandomAccessIterator1 split = std::lower_bound((*s).first, (*s).second,\n+\t\t\t\t\t\t       *max, comp);\n \toverhang_size += (*s).second - split;\n \n \t// Set sentinel.\n-\t*((*s).second) = max;\n+\t*((*s).second) = *max;\n       }\n \n     // So many elements will be left over afterwards.\n@@ -722,7 +720,7 @@ namespace __gnu_parallel\n     // Num remaining pieces.\n     int k = static_cast<int>(seqs_end - seqs_begin), nrp;\n \n-    value_type* pl = new value_type[k];\n+    value_type* pl = static_cast<value_type*>(::operator new(sizeof(value_type) * k));\n     int* source = new int[k];\n     difference_type total_length = 0;\n \n@@ -890,7 +888,7 @@ namespace __gnu_parallel\n   {\n     _GLIBCXX_CALL(length)\n \n-      typedef _DifferenceTp difference_type;\n+    typedef _DifferenceTp difference_type;\n     typedef typename std::iterator_traits<RandomAccessIteratorIterator>::value_type::first_type\n       RandomAccessIterator1;\n     typedef typename std::iterator_traits<RandomAccessIterator1>::value_type\n@@ -902,19 +900,21 @@ namespace __gnu_parallel\n \n     difference_type total_length = 0;\n \n+    // Default value for potentially non-default-constructible types.\n+    value_type* defaultcons = NULL; \n     for (int t = 0; t < k; t++)\n       {\n \tif (stable)\n \t  {\n \t    if (seqs_begin[t].first == seqs_begin[t].second)\n-\t      lt.insert_start_stable(value_type(), t, true);\n+\t      lt.insert_start_stable(*defaultcons, t, true);\n \t    else\n \t      lt.insert_start_stable(*seqs_begin[t].first, t, false);\n \t  }\n \telse\n \t  {\n \t    if (seqs_begin[t].first == seqs_begin[t].second)\n-\t      lt.insert_start(value_type(), t, true);\n+\t      lt.insert_start(*defaultcons, t, true);\n \t    else\n \t      lt.insert_start(*seqs_begin[t].first, t, false);\n \t  }\n@@ -942,7 +942,7 @@ namespace __gnu_parallel\n \n \t    // Feed.\n \t    if (seqs_begin[source].first == seqs_begin[source].second)\n-\t      lt.delete_min_insert_stable(value_type(), true);\n+\t      lt.delete_min_insert_stable(*defaultcons, true);\n \t    else\n \t      // Replace from same source.\n \t      lt.delete_min_insert_stable(*seqs_begin[source].first, false);\n@@ -960,7 +960,7 @@ namespace __gnu_parallel\n \n \t    // Feed.\n \t    if (seqs_begin[source].first == seqs_begin[source].second)\n-\t      lt.delete_min_insert(value_type(), true);\n+\t      lt.delete_min_insert(*defaultcons, true);\n \t    else\n \t      // Replace from same source.\n \t      lt.delete_min_insert(*seqs_begin[source].first, false);\n@@ -1083,59 +1083,6 @@ namespace __gnu_parallel\n     return target;\n   }\n \n-  template<typename _ValueTp, class Comparator>\n-  struct loser_tree_traits\n-  {\n-    typedef LoserTree/*Pointer*/<_ValueTp, Comparator> LT;\n-  };\n-\n-\n-  /*#define NO_POINTER(T) \\\n-    template<typename Comparator> \\\n-    struct loser_tree_traits<T, Comparator> \\\n-    { \\\n-    typedef LoserTreePointer<T, Comparator> LT; \\\n-    };*/\n-  //\n-  // NO_POINTER(unsigned char)\n-  // NO_POINTER(char)\n-  // NO_POINTER(unsigned short)\n-  // NO_POINTER(short)\n-  // NO_POINTER(unsigned int)\n-  // NO_POINTER(int)\n-  // NO_POINTER(unsigned long)\n-  // NO_POINTER(long)\n-  // NO_POINTER(unsigned long long)\n-  // NO_POINTER(long long)\n-  //\n-  // #undef NO_POINTER\n-\n-  template<typename _ValueTp, class Comparator>\n-  struct loser_tree_traits_unguarded\n-  {\n-    typedef LoserTreeUnguarded<_ValueTp, Comparator> LT;\n-  };\n-\n-  /*#define NO_POINTER_UNGUARDED(T) \\\n-    template<typename Comparator> \\\n-    struct loser_tree_traits_unguarded<T, Comparator> \\\n-    { \\\n-    typedef LoserTreePointerUnguarded<T, Comparator> LT; \\\n-    };*/\n-  //\n-  // NO_POINTER_UNGUARDED(unsigned char)\n-  // NO_POINTER_UNGUARDED(char)\n-  // NO_POINTER_UNGUARDED(unsigned short)\n-  // NO_POINTER_UNGUARDED(short)\n-  // NO_POINTER_UNGUARDED(unsigned int)\n-  // NO_POINTER_UNGUARDED(int)\n-  // NO_POINTER_UNGUARDED(unsigned long)\n-  // NO_POINTER_UNGUARDED(long)\n-  // NO_POINTER_UNGUARDED(unsigned long long)\n-  // NO_POINTER_UNGUARDED(long long)\n-  //\n-  // #undef NO_POINTER_UNGUARDED\n-\n   template<typename RandomAccessIteratorIterator, typename RandomAccessIterator3, typename _DifferenceTp, typename Comparator>\n   RandomAccessIterator3\n   multiway_merge_loser_tree_combined(RandomAccessIteratorIterator seqs_begin, RandomAccessIteratorIterator seqs_end, RandomAccessIterator3 target, Comparator comp, _DifferenceTp length, bool stable)\n@@ -1423,7 +1370,7 @@ namespace __gnu_parallel\n \n     if (Settings::multiway_merge_splitting == Settings::SAMPLING)\n       {\n-\tvalue_type* samples = new value_type[k * num_samples];\n+\tvalue_type* samples = static_cast<value_type*>(::operator new(sizeof(value_type) * k * num_samples));\n \t// Sample.\n \tfor (int s = 0; s < k; s++)\n \t  for (int i = 0; (difference_type)i < num_samples; i++)"}, {"sha": "9cc04052f5ef8bd4d9c147911baac75dd3050611", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -160,7 +160,6 @@ namespace __gnu_parallel\n     typedef typename traits_type::difference_type difference_type;\n \n     Timing<sequential_tag> t;\n-\n     t.tic();\n \n     PMWMSSortingData<RandomAccessIterator>* sd = d->sd;\n@@ -178,7 +177,7 @@ namespace __gnu_parallel\n     typedef value_type* SortingPlacesIterator;\n \n     // Sort in temporary storage, leave space for sentinel.\n-    sd->sorting_places[iam] = sd->temporaries[iam] = static_cast<value_type*>(::operator new(sizeof(value_type) *(length_local + 1)));\n+    sd->sorting_places[iam] = sd->temporaries[iam] = static_cast<value_type*>(::operator new(sizeof(value_type) * (length_local + 1)));\n \n     // Copy there.\n     std::uninitialized_copy(sd->source + sd->starts[iam], sd->source + sd->starts[iam] + length_local, sd->sorting_places[iam]);\n@@ -208,7 +207,9 @@ namespace __gnu_parallel\n \tt.tic(\"sample/wait\");\n \n #pragma omp single\n-\t__gnu_sequential::sort(sd->samples, sd->samples + (num_samples * d->num_threads), comp);\n+\t__gnu_sequential::sort(sd->samples, \n+\t\t\t       sd->samples + (num_samples * d->num_threads), \n+\t\t\t       comp);\n \n #pragma omp barrier\n \n@@ -288,7 +289,7 @@ namespace __gnu_parallel\n     // Merge to temporary storage, uninitialized creation not possible\n     // since there is no multiway_merge calling the placement new\n     // instead of the assignment operator.\n-    sd->merging_places[iam] = sd->temporaries[iam] = new value_type[length_am];\n+    sd->merging_places[iam] = sd->temporaries[iam] = static_cast<value_type*>(::operator new(sizeof(value_type) * length_am));\n #else\n     // Merge directly to target.\n     sd->merging_places[iam] = sd->source + offset;\n@@ -337,7 +338,10 @@ namespace __gnu_parallel\n    */\n   template<typename RandomAccessIterator, typename Comparator>\n   inline void\n-  parallel_sort_mwms(RandomAccessIterator begin, RandomAccessIterator end, Comparator comp, typename std::iterator_traits<RandomAccessIterator>::difference_type n, int num_threads, bool stable)\n+  parallel_sort_mwms(RandomAccessIterator begin, RandomAccessIterator end, \n+\t\t     Comparator comp, \n+       typename std::iterator_traits<RandomAccessIterator>::difference_type n, \n+\t\t     int num_threads, bool stable)\n   {\n     _GLIBCXX_CALL(n)\n       \n@@ -366,7 +370,14 @@ namespace __gnu_parallel\n #endif\n \n     if (Settings::sort_splitting == Settings::SAMPLING)\n-      sd.samples = new value_type[num_threads * (Settings::sort_mwms_oversampling * num_threads - 1)];\n+      {\n+\tunsigned int sz = Settings::sort_mwms_oversampling * num_threads - 1;\n+\tsz *= num_threads;\n+\t\n+\t// Equivalent to value_type[sz], without need of default construction.\n+\tsz *= sizeof(value_type);\n+\tsd.samples = static_cast<value_type*>(::operator new(sz));\n+      }\n     else\n       sd.samples = NULL;\n \n@@ -377,7 +388,9 @@ namespace __gnu_parallel\n     PMWMSSorterPU<RandomAccessIterator>* pus = new PMWMSSorterPU<RandomAccessIterator>[num_threads];\n     difference_type* starts = sd.starts = new difference_type[num_threads + 1];\n \n-    difference_type chunk_length = n / num_threads, split = n % num_threads, start = 0;\n+    difference_type chunk_length = n / num_threads;\n+    difference_type split = n % num_threads;\n+    difference_type start = 0;\n     for (int i = 0; i < num_threads; i++)\n       {\n \tstarts[i] = start;"}, {"sha": "e7652c07cd99822140c90f27932ebbe48450268c", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -119,7 +119,7 @@ namespace __gnu_parallel\n \tborders[num_threads + 1] = n;\n       }\n \n-    value_type* sums = new value_type[num_threads];\n+    value_type* sums = static_cast<value_type*>(::operator new(sizeof(value_type) * num_threads));\n     OutputIterator target_end;\n \n #pragma omp parallel num_threads(num_threads)"}, {"sha": "a9ceab4a5555b13bb2ce8d2c56a6ea7812d29a98", "filename": "libstdc++-v3/include/parallel/quicksort.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -65,10 +65,14 @@ namespace __gnu_parallel\n \n     difference_type n = end - begin;\n     num_samples = std::min(num_samples, n);\n-    value_type samples[num_samples];\n+    value_type* samples = static_cast<value_type*>(__builtin_alloca(sizeof(value_type) * num_samples));\n \n     for (difference_type s = 0; s < num_samples; s++)\n-      samples[s] = begin[(unsigned long long)s * n / num_samples];\n+      {\n+\tconst unsigned long long index = static_cast<unsigned long long>(s) \n+\t  \t\t\t\t * n / num_samples;\n+\tsamples[s] = begin[index];\n+      }\n \n     __gnu_sequential::sort(samples, samples + num_samples, comp);\n "}, {"sha": "bb174e10b00f1942d59abb84986fded6bcfcc8dc", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -203,7 +203,7 @@ namespace __gnu_parallel\n \toffset = sd->dist[s + 1][d->num_threads];\n       }\n \n-    sd->temporaries[iam] = new value_type[offset];\n+    sd->temporaries[iam] = static_cast<value_type*>(::operator new(sizeof(value_type) * offset));\n \n     t.tic();\n \n@@ -446,7 +446,7 @@ namespace __gnu_parallel\n \n     if (num_bins > 1)\n       {\n-\tvalue_type* target = new value_type[n];\n+\tvalue_type* target = static_cast<value_type*>(::operator new(sizeof(value_type) * n));\n \tbin_index* oracles = new bin_index[n];\n \tdifference_type* dist0 = new difference_type[num_bins + 1], * dist1 = new difference_type[num_bins + 1];\n "}, {"sha": "5cfc6a05c47f38771f7d2955cea26dd88e7951a0", "filename": "libstdc++-v3/include/parallel/settings.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbed397860edaeb0116956cc3cdf9d9f60cff3d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h?ref=dfbed397860edaeb0116956cc3cdf9d9f60cff3d", "patch": "@@ -165,8 +165,10 @@ namespace\n \n     /** @brief Minimal input size for parallel sorting. */\n     static volatile sequence_index_t sort_minimal_n;\n+\n     /** @brief Oversampling factor for parallel std::sort (MWMS). */\n     static volatile unsigned int sort_mwms_oversampling;\n+\n     /** @brief Such many samples to take to find a good pivot\n \t(quicksort). */\n     static volatile unsigned int sort_qs_num_samples_preset;"}]}