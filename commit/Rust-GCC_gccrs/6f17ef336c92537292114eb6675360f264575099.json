{"sha": "6f17ef336c92537292114eb6675360f264575099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxN2VmMzM2YzkyNTM3MjkyMTE0ZWI2Njc1MzYwZjI2NDU3NTA5OQ==", "commit": {"author": {"name": "Daniel Krugler", "email": "daniel.kruegler@googlemail.com", "date": "2011-06-20T11:05:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-20T11:05:45Z"}, "message": "tuple (__conv_types, [...]): Add.\n\n2011-06-20  Daniel Krugler  <daniel.kruegler@googlemail.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (__conv_types, __one_by_one_convertible,\n\t__all_convertible): Add.\n\t(tuple): Use the latter.\n\t(tuple<_T1>): Remove.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r175204", "tree": {"sha": "258c72c7959591c168c3cdebd7276ab017093506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/258c72c7959591c168c3cdebd7276ab017093506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f17ef336c92537292114eb6675360f264575099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f17ef336c92537292114eb6675360f264575099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f17ef336c92537292114eb6675360f264575099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f17ef336c92537292114eb6675360f264575099/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49a30d001c710d593d15458390d4139fc5232ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a30d001c710d593d15458390d4139fc5232ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a30d001c710d593d15458390d4139fc5232ef6"}], "stats": {"total": 164, "additions": 51, "deletions": 113}, "files": [{"sha": "42f951478e7c4ea35e177ff23015b1e29f639cf8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f17ef336c92537292114eb6675360f264575099", "patch": "@@ -1,3 +1,14 @@\n+2011-06-20  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (__conv_types, __one_by_one_convertible,\n+\t__all_convertible): Add.\n+\t(tuple): Use the latter.\n+\t(tuple<_T1>): Remove.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Likewise.\n+\n 2011-06-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/ptr_traits.h (pointer_traits<T*>::pointer_to): Use"}, {"sha": "d058c676be67fdae35785c86925540d1608e043d", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 38, "deletions": 111, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=6f17ef336c92537292114eb6675360f264575099", "patch": "@@ -69,6 +69,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __add_r_ref<_Tp&>\n     { typedef _Tp& type; };\n \n+  // To work around c++/49225 aka c++/48322.\n+  template<typename...>\n+    struct __conv_types { };\n+\n+  template<typename _Tuple1, typename _Tuple2>\n+    struct __one_by_one_convertible\n+    : public false_type { };\n+\n+  template<typename _Tp, typename _Up>\n+    struct __one_by_one_convertible<__conv_types<_Tp>, __conv_types<_Up>>\n+    : public is_convertible<_Tp, _Up>::type { };\n+\n+  template<typename _T1, typename... _TR, typename _U1, typename... _UR>\n+    struct __one_by_one_convertible<__conv_types<_T1, _TR...>,\n+                                    __conv_types<_U1, _UR...>>\n+    : public __and_<is_convertible<_T1, _U1>,\n+                    __one_by_one_convertible<__conv_types<_TR...>,\n+                                             __conv_types<_UR...>>>::type\n+    { };\n+\n+  template<typename _Tuple1, typename _Tuple2>\n+    struct __all_convertible;\n+\n+  template<typename... _TTypes, typename... _UTypes>\n+    struct __all_convertible<__conv_types<_TTypes...>,\n+                             __conv_types<_UTypes...>>\n+    : public __one_by_one_convertible<__conv_types<_TTypes...>,\n+                                      __conv_types<_UTypes...>>::type { };\n+\n   template<std::size_t _Idx, typename _Head, bool _IsEmpty>\n     struct _Head_base;\n \n@@ -359,8 +388,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename... _UElements, typename = typename\n \tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n \t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __and_<is_convertible<_UElements,\n-\t\t\t\t\t       _Elements>...>>::value>::type>\n+\t\t\t __all_convertible<__conv_types<_UElements...>,\n+\t\t\t\t\t   __conv_types<_Elements...>>\n+\t\t\t >::value>::type>\n \texplicit\n         tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n@@ -371,17 +401,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename... _UElements, typename = typename\n \tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n \t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __and_<is_convertible<const _UElements&,\n-\t\t\t\t\t       _Elements>...>>::value>::type>\n+\t\t\t __all_convertible<__conv_types<const _UElements&...>,\n+\t\t\t\t\t   __conv_types<_Elements...>>\n+                         >::value>::type>\n         tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n       template<typename... _UElements, typename = typename\n \tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n \t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __and_<is_convertible<_UElements,\n-\t\t\t\t\t       _Elements>...>>::value>::type>\n+\t\t\t __all_convertible<__conv_types<_UElements...>,\n+\t\t\t\t\t   __conv_types<_Elements...>>\n+\t\t\t >::value>::type>\n         tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n@@ -628,111 +660,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _Inherited::_M_swap(__in); }\n     };\n \n-  /// tuple (1-element).\n-  // TODO: Should be simply removed when c++/49225 is fixed, worst case\n-  //       together with a different way to constrain the constructors\n-  //       of the primary template.\n-  template<typename _T1>\n-    class tuple<_T1> : public _Tuple_impl<0, _T1>\n-    {\n-      typedef _Tuple_impl<0, _T1> _Inherited;\n-\n-    public:\n-      constexpr tuple()\n-      : _Inherited() { }\n-\n-      explicit\n-      constexpr tuple(const _T1& __a1)\n-      : _Inherited(__a1) { }\n-\n-      template<typename _U1, typename = typename\n-\t       enable_if<is_convertible<_U1, _T1>::value>::type>\n-        explicit\n-        tuple(_U1&& __a1)\n-\t: _Inherited(std::forward<_U1>(__a1)) { }\n-\n-      constexpr tuple(const tuple&) = default;\n-      tuple(tuple&&) = default;\n-\n-      template<typename _U1, typename = typename\n-\t       enable_if<is_convertible<const _U1&, _T1>::value>::type>\n-        tuple(const tuple<_U1>& __in)\n-\t: _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }\n-\n-      template<typename _U1, typename = typename\n-\t       enable_if<is_convertible<_U1, _T1>::value>::type>\n-        tuple(tuple<_U1>&& __in)\n-\t: _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }\n-\n-      // allocator-extended constructors\n-\n-      template<typename _Alloc>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a)\n-\t: _Inherited(__tag, __a) { }\n-\n-      template<typename _Alloc>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, const _T1& __a1)\n-\t: _Inherited(__tag, __a, __a1) { }\n-\n-      // TODO: constrain for is_uses_allocator_constructible<_T1, _U1&&, _Alloc>\n-      template<typename _Alloc, typename _U1>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1)\n-\t: _Inherited(__tag, __a, std::forward<_U1>(__a1)) { }\n-\n-      template<typename _Alloc>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)\n-\t: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }\n-\n-      template<typename _Alloc>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)\n-\t: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }\n-\n-      template<typename _Alloc, typename _U1>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, const tuple<_U1>& __in)\n-\t: _Inherited(__tag, __a, static_cast<const _Tuple_impl<0, _U1>&>(__in))\n-       \t{ }\n-\n-      template<typename _Alloc, typename _U1>\n-\ttuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1>&& __in)\n-\t: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }\n-\n-      tuple&\n-      operator=(const tuple& __in)\n-      {\n-\tstatic_cast<_Inherited&>(*this) = __in;\n-\treturn *this;\n-      }\n-\n-      tuple&\n-      operator=(tuple&& __in)\n-      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n-      {\n-\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n-\treturn *this;\n-      }\n-\n-      template<typename _U1>\n-        tuple&\n-        operator=(const tuple<_U1>& __in)\n-        {\n-\t  static_cast<_Inherited&>(*this) = __in;\n-\t  return *this;\n-\t}\n-\n-      template<typename _U1>\n-        tuple&\n-        operator=(tuple<_U1>&& __in)\n-        {\n-\t  static_cast<_Inherited&>(*this) = std::move(__in);\n-\t  return *this;\n-\t}\n-\n-      void\n-      swap(tuple& __in)\n-      noexcept(noexcept(__in._M_swap(__in)))\n-      { _Inherited::_M_swap(__in); }\n-    };\n-\n \n   /// Gives the type of the ith element of a given tuple type.\n   template<std::size_t __i, typename _Tp>"}, {"sha": "ad998356c83ea176f90416a4f331fb7e5cf01486", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=6f17ef336c92537292114eb6675360f264575099", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 112 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 141 }"}, {"sha": "df18712f73b5ba38592423aa1ced86e0a727ba46", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f17ef336c92537292114eb6675360f264575099/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=6f17ef336c92537292114eb6675360f264575099", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 887 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 814 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}]}