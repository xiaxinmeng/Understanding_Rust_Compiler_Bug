{"sha": "3af07c22a1f0342064cb34594c133e35496f4862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmMDdjMjJhMWYwMzQyMDY0Y2IzNDU5NGMxMzNlMzU0OTZmNDg2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-30T17:47:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-30T17:47:40Z"}, "message": "cp-tree.h (TREE_NEGATED_INT): Remove.\n\n\t* cp-tree.h (TREE_NEGATED_INT): Remove.\n\t* semantics.c (finish_unary_op_expr): Don't set it.\n\nFrom-SVN: r179400", "tree": {"sha": "83ec9420e3c9176f019328a5ca3066797f384eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ec9420e3c9176f019328a5ca3066797f384eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af07c22a1f0342064cb34594c133e35496f4862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af07c22a1f0342064cb34594c133e35496f4862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af07c22a1f0342064cb34594c133e35496f4862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af07c22a1f0342064cb34594c133e35496f4862/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "a1f7ebef4006b9af305360f12cc93c723fdb8bf4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3af07c22a1f0342064cb34594c133e35496f4862", "patch": "@@ -43,8 +43,7 @@ never after.\n #include \"diagnostic-core.h\"\n \n /* Usage of TREE_LANG_FLAG_?:\n-   0: TREE_NEGATED_INT (in INTEGER_CST).\n-      IDENTIFIER_MARKED (used by search routines).\n+   0: IDENTIFIER_MARKED (used by search routines).\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       C_MAYBE_CONST_EXPR_INT_OPERANDS (in C_MAYBE_CONST_EXPR, for C)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)"}, {"sha": "e9173050249c413681711116b6adf7483e68261c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3af07c22a1f0342064cb34594c133e35496f4862", "patch": "@@ -1,3 +1,8 @@\n+2011-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (TREE_NEGATED_INT): Remove.\n+\t* semantics.c (finish_unary_op_expr): Don't set it.\n+\n 2011-09-30  Janis Johnson  <janisjo@codesourcery.com>\n \n \tPR c++/44473"}, {"sha": "7e5aac750f3d3028f17bf235da944a4ad3e65542", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3af07c22a1f0342064cb34594c133e35496f4862", "patch": "@@ -2989,10 +2989,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define TYPENAME_IS_RESOLVING_P(NODE) \\\n   (TREE_LANG_FLAG_2 (TYPENAME_TYPE_CHECK (NODE)))\n \n-/* Nonzero in INTEGER_CST means that this int is negative by dint of\n-   using a twos-complement negated operand.  */\n-#define TREE_NEGATED_INT(NODE) TREE_LANG_FLAG_0 (INTEGER_CST_CHECK (NODE))\n-\n /* [class.virtual]\n \n    A class that declares or inherits a virtual function is called a"}, {"sha": "7ad1e8d5ebd170ad99d48c990250e84a41df4814", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af07c22a1f0342064cb34594c133e35496f4862/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3af07c22a1f0342064cb34594c133e35496f4862", "patch": "@@ -2312,19 +2312,6 @@ tree\n finish_unary_op_expr (enum tree_code code, tree expr)\n {\n   tree result = build_x_unary_op (code, expr, tf_warning_or_error);\n-  /* Inside a template, build_x_unary_op does not fold the\n-     expression. So check whether the result is folded before\n-     setting TREE_NEGATED_INT.  */\n-  if (code == NEGATE_EXPR && TREE_CODE (expr) == INTEGER_CST\n-      && TREE_CODE (result) == INTEGER_CST\n-      && !TYPE_UNSIGNED (TREE_TYPE (result))\n-      && INT_CST_LT (result, integer_zero_node))\n-    {\n-      /* RESULT may be a cached INTEGER_CST, so we must copy it before\n-\t setting TREE_NEGATED_INT.  */\n-      result = copy_node (result);\n-      TREE_NEGATED_INT (result) = 1;\n-    }\n   if (TREE_OVERFLOW_P (result) && !TREE_OVERFLOW_P (expr))\n     overflow_warning (input_location, result);\n "}]}