{"sha": "d7f21d631f9250504b35e3873598ca5c34dd3a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmMjFkNjMxZjkyNTA1MDRiMzVlMzg3MzU5OGNhNWMzNGRkM2E3Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T18:35:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T18:35:10Z"}, "message": "(expand_builtin, case BUILTIN_MEMSET): Open code memset where val == 0.\n\nFrom-SVN: r12363", "tree": {"sha": "f4903329b5407b3096e2800d0a33826234154e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4903329b5407b3096e2800d0a33826234154e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f21d631f9250504b35e3873598ca5c34dd3a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f21d631f9250504b35e3873598ca5c34dd3a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f21d631f9250504b35e3873598ca5c34dd3a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f21d631f9250504b35e3873598ca5c34dd3a76/comments", "author": null, "committer": null, "parents": [{"sha": "b71e9de07c8ce5245b6489470d389b042c6aee69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71e9de07c8ce5245b6489470d389b042c6aee69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71e9de07c8ce5245b6489470d389b042c6aee69"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "5dd6700caa6816285c4dc45e5d9bfb665963f679", "filename": "gcc/expr.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f21d631f9250504b35e3873598ca5c34dd3a76/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f21d631f9250504b35e3873598ca5c34dd3a76/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d7f21d631f9250504b35e3873598ca5c34dd3a76", "patch": "@@ -8531,6 +8531,58 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  return force_operand (dest_rtx, NULL_RTX);\n \t}\n \n+    case BUILT_IN_MEMSET:\n+      /* If not optimizing, call the library function.  */\n+      if (!optimize && ! CALLED_AS_BUILT_IN (fndecl))\n+\tbreak;\n+\n+      if (arglist == 0\n+\t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+\t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+\t  || TREE_CHAIN (arglist) == 0\n+\t  || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t      != INTEGER_TYPE)\n+\t  || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n+\t  || (INTEGER_CST\n+\t      != (TREE_CODE (TREE_TYPE\n+\t\t\t     (TREE_VALUE\n+\t\t\t      (TREE_CHAIN (TREE_CHAIN (arglist))))))))\n+\tbreak;\n+      else\n+\t{\n+\t  tree dest = TREE_VALUE (arglist);\n+\t  tree val = TREE_VALUE (TREE_CHAIN (arglist));\n+\t  tree len = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\t  tree type;\n+\n+\t  int dest_align\n+\t    = get_pointer_alignment (dest, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n+\t  rtx dest_rtx, dest_mem;\n+\n+\t  /* If DEST is not a pointer type, don't do this \n+\t     operation in-line.  */\n+\t  if (dest_align == 0)\n+\t    break;\n+\n+\t  /* If VAL is not 0, don't do this operation in-line. */\n+\t  if (expand_expr (val, NULL_RTX, VOIDmode, 0) != const0_rtx)\n+\t    break;\n+\n+\t  dest_rtx = expand_expr (dest, NULL_RTX, ptr_mode, EXPAND_SUM);\n+\t  dest_mem = gen_rtx (MEM, BLKmode,\n+\t\t\t      memory_address (BLKmode, dest_rtx));\n+\t  /* There could be a void* cast on top of the object.  */\n+\t  while (TREE_CODE (dest) == NOP_EXPR)\n+\t    dest = TREE_OPERAND (dest, 0);\n+\t  type = TREE_TYPE (TREE_TYPE (dest));\n+\t  MEM_IN_STRUCT_P (dest_mem) = AGGREGATE_TYPE_P (type);\n+\n+\t  clear_storage (dest_mem, expand_expr (len, NULL_RTX, VOIDmode, 0),\n+                           dest_align);\n+\n+\t  return force_operand (dest_rtx, NULL_RTX);\n+\t}\n+\n /* These comparison functions need an instruction that returns an actual\n    index.  An ordinary compare that just sets the condition codes\n    is not enough.  */"}]}