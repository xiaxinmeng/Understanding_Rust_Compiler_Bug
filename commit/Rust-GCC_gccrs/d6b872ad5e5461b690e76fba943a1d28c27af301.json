{"sha": "d6b872ad5e5461b690e76fba943a1d28c27af301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiODcyYWQ1ZTU0NjFiNjkwZTc2ZmJhOTQzYTFkMjhjMjdhZjMwMQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-05-05T01:19:30Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-05-05T01:19:30Z"}, "message": "re PR libfortran/48787 (Invalid UP/DOWN rounding with F editing)\n\n2011-05-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/48787\n\t* io/write_float.def (output_float): Adjust up and down rounding for\n\tcases where 'd' = 0. Gather common code to one location.\n\nFrom-SVN: r173408", "tree": {"sha": "236b42840d3e2743ad9a751a7e8f9b567fd5a53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236b42840d3e2743ad9a751a7e8f9b567fd5a53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b872ad5e5461b690e76fba943a1d28c27af301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b872ad5e5461b690e76fba943a1d28c27af301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b872ad5e5461b690e76fba943a1d28c27af301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b872ad5e5461b690e76fba943a1d28c27af301/comments", "author": null, "committer": null, "parents": [{"sha": "c5c04a8fd89112435221124534214530d9121cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c04a8fd89112435221124534214530d9121cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c04a8fd89112435221124534214530d9121cc3"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "7e081ccf83b6a2be8d0d131cc9038849a9fe5fe6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b872ad5e5461b690e76fba943a1d28c27af301/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b872ad5e5461b690e76fba943a1d28c27af301/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d6b872ad5e5461b690e76fba943a1d28c27af301", "patch": "@@ -1,3 +1,9 @@\n+2011-05-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/48787\n+\t* io/write_float.def (output_float): Adjust up and down rounding for\n+\tcases where 'd' = 0. Gather common code to one location.\n+\n 2011-05-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48787"}, {"sha": "7ab70d28200d81743b201a16b4d83ee7f08fae56", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b872ad5e5461b690e76fba943a1d28c27af301/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b872ad5e5461b690e76fba943a1d28c27af301/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=d6b872ad5e5461b690e76fba943a1d28c27af301", "patch": "@@ -221,6 +221,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \n   if (zero_flag)\n     goto skip;\n+\n   /* Round the value.  The value being rounded is an unsigned magnitude.\n      The ROUND_COMPATIBLE is rounding away from zero when there is a tie.  */\n   switch (dtp->u.p.current_unit->round_status)\n@@ -230,19 +231,11 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n       case ROUND_UP:\n \tif (sign_bit)\n \t  goto skip;\n-\trchar = '0';\n-\t/* Scan for trailing zeros to see if we really need to round it.  */\n-\tfor(i = nbefore + nafter; i < ndigits; i++)\n-\t  {\n-\t    if (digits[i] != '0')\n-\t      goto do_rnd;\n-\t  }\n-\tgoto skip;\n+\tgoto updown;\n       case ROUND_DOWN:\n \tif (!sign_bit)\n \t  goto skip;\n-\trchar = '0';\n-\tbreak;\n+\tgoto updown;\n       case ROUND_NEAREST:\n \t/* Round compatible unless there is a tie. A tie is a 5 with\n \t   all trailing zero's.  */\n@@ -254,7 +247,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t\tif (digits[i] != '0')\n \t\t  goto do_rnd;\n \t      }\n-\t    /* It is a  tie so round to even.  */\n+\t    /* It is a tie so round to even.  */\n \t    switch (digits[nafter + nbefore - 1])\n \t      {\n \t\tcase '1':\n@@ -274,8 +267,21 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n       case ROUND_UNSPECIFIED:\n       case ROUND_COMPATIBLE:\n \trchar = '5';\n-\t/* Just fall through and do the actual rounding.  */\n+\tgoto do_rnd;\n+    }\n+\n+  updown:\n+\n+  rchar = '0';\n+  if (w > 0 && d == 0 && p == 0)\n+    nbefore = 1;\n+  /* Scan for trailing zeros to see if we really need to round it.  */\n+  for(i = nbefore + nafter; i < ndigits; i++)\n+    {\n+      if (digits[i] != '0')\n+\tgoto do_rnd;\n     }\n+  goto skip;\n     \n   do_rnd:\n  "}]}