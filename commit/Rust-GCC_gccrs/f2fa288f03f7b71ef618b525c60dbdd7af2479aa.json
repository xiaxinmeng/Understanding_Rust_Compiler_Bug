{"sha": "f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmYTI4OGYwM2Y3YjcxZWY2MThiNTI1YzYwZGJkZDdhZjI0NzlhYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-29T23:22:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-29T23:22:20Z"}, "message": "cse.c (notreg_cost): New argument outer.\n\n        * cse.c (notreg_cost): New argument outer.\n        (COST): Pass in SET to notreg_cost\n        (COST_IN): New.\n        (fold_rtx): Use COST_IN.  Prefer constants when costs\n        are the same.\n\nFrom-SVN: r36671", "tree": {"sha": "fbcf16eb59004adabd9c098309f28a57393b0c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbcf16eb59004adabd9c098309f28a57393b0c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2fa288f03f7b71ef618b525c60dbdd7af2479aa/comments", "author": null, "committer": null, "parents": [{"sha": "99eaf8d457598be158a5d4f79fe8e9655e74b6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99eaf8d457598be158a5d4f79fe8e9655e74b6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99eaf8d457598be158a5d4f79fe8e9655e74b6b8"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "79733ff82a62b692fca98acea25d23e4ac883d68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fa288f03f7b71ef618b525c60dbdd7af2479aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fa288f03f7b71ef618b525c60dbdd7af2479aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "patch": "@@ -1,3 +1,11 @@\n+2000-09-29  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cse.c (notreg_cost): New argument outer.\n+\t(COST): Pass in SET to notreg_cost\n+\t(COST_IN): New.\n+\t(fold_rtx): Use COST_IN.  Prefer constants when costs\n+\tare the same.\n+\n 2000-09-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* fixinc/inclhack.def (broken_cabs): Generalize regex."}, {"sha": "79622a49407ad614cc1902fc5bfdb0cc6abd09ac", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2fa288f03f7b71ef618b525c60dbdd7af2479aa/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2fa288f03f7b71ef618b525c60dbdd7af2479aa/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f2fa288f03f7b71ef618b525c60dbdd7af2479aa", "patch": "@@ -502,7 +502,8 @@ struct table_elt\n    || ((N) < FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n        && FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n \n-#define COST(X) (GET_CODE (X) == REG ? 0 : notreg_cost (X))\n+#define COST(X) (GET_CODE (X) == REG ? 0 : notreg_cost (X, SET))\n+#define COST_IN(X,OUTER) (GET_CODE (X) == REG ? 0 : notreg_cost (X, OUTER))\n \n /* Get the info associated with register N.  */\n \n@@ -636,7 +637,7 @@ struct cse_basic_block_data\n \t   || XEXP (X, 0) == virtual_outgoing_args_rtx))\t\\\n    || GET_CODE (X) == ADDRESSOF)\n \n-static int notreg_cost\t\tPARAMS ((rtx));\n+static int notreg_cost\t\tPARAMS ((rtx, enum rtx_code));\n static int approx_reg_cost_1\tPARAMS ((rtx *, void *));\n static int approx_reg_cost\tPARAMS ((rtx));\n static int preferrable\t\tPARAMS ((int, int, int, int));\n@@ -800,8 +801,9 @@ preferrable (cost_a, regcost_a, cost_b, regcost_b)\n    from COST macro to keep it simple.  */\n \n static int\n-notreg_cost (x)\n+notreg_cost (x, outer)\n      rtx x;\n+     enum rtx_code outer;\n {\n   return ((GET_CODE (x) == SUBREG\n \t   && GET_CODE (SUBREG_REG (x)) == REG\n@@ -813,7 +815,7 @@ notreg_cost (x)\n \t   && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (x)),\n \t\t\t\t     GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x)))))\n \t  ? 0\n-\t  : rtx_cost (x, SET) * 2);\n+\t  : rtx_cost (x, outer) * 2);\n }\n \n /* Return an estimate of the cost of computing rtx X.\n@@ -3752,7 +3754,7 @@ fold_rtx (x, insn)\n \t/* Pick the least expensive of the folded argument and an\n \t   equivalent constant argument.  */\n \tif (const_arg == 0 || const_arg == folded_arg\n-\t    || COST (const_arg) > COST (folded_arg))\n+\t    || COST_IN (const_arg, code) > COST_IN (folded_arg, code))\n \t  cheap_arg = folded_arg, expensive_arg = const_arg;\n \telse\n \t  cheap_arg = const_arg, expensive_arg = folded_arg;\n@@ -3772,12 +3774,21 @@ fold_rtx (x, insn)\n \t    copied = 1;\n \t  }\n \n-\treplacements[0] = cheap_arg, replacements[1] = expensive_arg;\n-\tfor (j = 0;\n-\t     j < 2 && replacements[j]\n-\t     && COST (replacements[j]) < COST (XEXP (x, i));\n-\t     j++)\n+\t/* Order the replacements from cheapest to most expensive.  */\n+\treplacements[0] = cheap_arg;\n+\treplacements[1] = expensive_arg;\n+\n+\tfor (j = 0; j < 2 && replacements[j];  j++)\n \t  {\n+\t    int old_cost = COST_IN (XEXP (x, i), code);\n+\t    int new_cost = COST_IN (replacements[j], code);\n+\n+\t    /* Stop if what existed before was cheaper.  Prefer constants\n+\t       in the case of a tie.  */\n+\t    if (new_cost > old_cost\n+\t\t|| (new_cost == old_cost && CONSTANT_P (XEXP (x, i))))\n+\t      break;\n+\n \t    if (validate_change (insn, &XEXP (x, i), replacements[j], 0))\n \t      break;\n "}]}