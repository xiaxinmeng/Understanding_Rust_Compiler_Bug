{"sha": "167aa8cd3f425aad14b6a3f355cca77311be1ca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3YWE4Y2QzZjQyNWFhZDE0YjZhM2YzNTVjY2E3NzMxMWJlMWNhOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-15T19:11:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-09-15T19:11:45Z"}, "message": "i386.c (output_fp_compare): Return %v prefixed instruction mnemonics for TARGET_AVX.\n\n\t* config/i386/i386.c (output_fp_compare): Return %v prefixed\n\tinstruction mnemonics for TARGET_AVX.\n\n\t* config/i386/i386.md (*movdf_internal_rex64): use cond RTX in\n\t\"type\" attribute calculation.\n\t(*movdf_internal): Ditto.\n\t(*movsf_internal): Ditto.\n\nFrom-SVN: r178891", "tree": {"sha": "888a1cd363413a404df6e5eff9e4723f0e634fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/888a1cd363413a404df6e5eff9e4723f0e634fed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167aa8cd3f425aad14b6a3f355cca77311be1ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167aa8cd3f425aad14b6a3f355cca77311be1ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167aa8cd3f425aad14b6a3f355cca77311be1ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167aa8cd3f425aad14b6a3f355cca77311be1ca9/comments", "author": null, "committer": null, "parents": [{"sha": "f2ce74d1578c3a5c6be5fddeb842c5115eb002c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ce74d1578c3a5c6be5fddeb842c5115eb002c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ce74d1578c3a5c6be5fddeb842c5115eb002c8"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "17080c9dec003dc45a64a37a5338fd65ced63777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=167aa8cd3f425aad14b6a3f355cca77311be1ca9", "patch": "@@ -1,3 +1,13 @@\n+2011-09-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (output_fp_compare): Return %v prefixed\n+\tinstruction mnemonics for TARGET_AVX.\n+\n+\t* config/i386/i386.md (*movdf_internal_rex64): use cond RTX in\n+\t\"type\" attribute calculation.\n+\t(*movdf_internal): Ditto.\n+\t(*movsf_internal): Ditto.\n+\n 2011-09-15  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): New builtin macro.\n@@ -67,8 +77,7 @@\n \n \t* config/arm/arm.c (arm_override_options): Add unaligned_access\n \tsupport.\n-\t(arm_file_start): Emit attribute for unaligned access as\n-\tappropriate.\n+\t(arm_file_start): Emit attribute for unaligned access as appropriate.\n \t* config/arm/arm.md (UNSPEC_UNALIGNED_LOAD)\n \t(UNSPEC_UNALIGNED_STORE): Add constants for unspecs.\n \t(insv, extzv): Add unaligned-access support.\n@@ -156,7 +165,7 @@\n \t* ipa-inline-transform.c (can_remove_node_now_p): Fix thunkos.\n \n 2011-09-13  Paul Brook  <paul@codesourcery.com>\n- \n+\n \t* config/arm/arm.h (ASM_PREFERRED_EH_DATA_FORMAT): Define.\n \t(ARM_TARGET2_DWARF_FORMAT): Provide default definition.\n \t* config/arm/linux-eabi.h (ARM_TARGET2_DWARF_FORMAT): Define.\n@@ -175,7 +184,7 @@\n \t* ginclude/unwind-arm-common.h: New file.\n \n 2011-09-13  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/50358\n \t* config/avr/predicates.md (const_1_to_6_operand): New predicate.\n \t* config/avr/avr.md: (extend_s): New code attribute.\n@@ -279,8 +288,7 @@\n \n \tPR tree-optimization/50343\n \t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Check\n-\tthat the reduction is over an SSA name before checking its\n-\tdefinition.\n+\tthat the reduction is over an SSA name before checking its definition.\n \n 2011-09-11  Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "97580df9ad7d3fe9da8a7773c971c6e4bf163ddb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=167aa8cd3f425aad14b6a3f355cca77311be1ca9", "patch": "@@ -14900,21 +14900,16 @@ output_fp_compare (rtx insn, rtx *operands, bool eflags_p, bool unordered_p)\n \n   if (is_sse)\n     {\n-      static const char ucomiss[] = \"vucomiss\\t{%1, %0|%0, %1}\";\n-      static const char ucomisd[] = \"vucomisd\\t{%1, %0|%0, %1}\";\n-      static const char comiss[] = \"vcomiss\\t{%1, %0|%0, %1}\";\n-      static const char comisd[] = \"vcomisd\\t{%1, %0|%0, %1}\";\n-\n       if (GET_MODE (operands[0]) == SFmode)\n \tif (unordered_p)\n-\t  return &ucomiss[TARGET_AVX ? 0 : 1];\n+\t  return \"%vucomiss\\t{%1, %0|%0, %1}\";\n \telse\n-\t  return &comiss[TARGET_AVX ? 0 : 1];\n+\t  return \"%vcomiss\\t{%1, %0|%0, %1}\";\n       else\n \tif (unordered_p)\n-\t  return &ucomisd[TARGET_AVX ? 0 : 1];\n+\t  return \"%vucomisd\\t{%1, %0|%0, %1}\";\n \telse\n-\t  return &comisd[TARGET_AVX ? 0 : 1];\n+\t  return \"%vcomisd\\t{%1, %0|%0, %1}\";\n     }\n \n   gcc_assert (STACK_TOP_P (cmp_op0));"}, {"sha": "017ab09acbf5e4c7f2cbac71b2b09f47a9bbd6cc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=167aa8cd3f425aad14b6a3f355cca77311be1ca9", "patch": "@@ -1483,7 +1483,8 @@\n \t(unspec:HI [(reg:CCFP FPSR_REG)] UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n   \"fnstsw\\t%0\"\n-  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n+  [(set (attr \"length\")\n+\t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"unit\" \"i387\")])\n \n@@ -1510,7 +1511,8 @@\n    (set_attr \"mode\" \"SI\")])\n \n ;; Pentium Pro can do steps 1 through 3 in one go.\n-;; comi*, ucomi*, fcomi*, ficomi*,fucomi* (i387 instructions set condition codes)\n+;; comi*, ucomi*, fcomi*, ficomi*, fucomi*\n+;; (these i387 instructions set flags directly)\n (define_insn \"*cmpfp_i_mixed\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP (match_operand 0 \"register_operand\" \"f,x\")\n@@ -3028,7 +3030,17 @@\n       gcc_unreachable();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,imov,multi,sselog1,ssemov,ssemov,ssemov,ssemov,ssemov\")\n+  [(set (attr \"type\")\n+\t(cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"fmov\")\n+\t       (eq_attr \"alternative\" \"3,4,5\")\n+\t\t (const_string \"imov\")\n+\t       (eq_attr \"alternative\" \"6\")\n+\t\t (const_string \"multi\")\n+\t       (eq_attr \"alternative\" \"7\")\n+\t\t (const_string \"sselog1\")\n+\t      ]\n+\t      (const_string \"ssemov\")))\n    (set (attr \"modrm\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"5\") (eq_attr \"type\" \"imov\"))\n@@ -3158,7 +3170,15 @@\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n        (const_string \"sse2\")\n        (const_string \"*\")))\n-   (set_attr \"type\" \"fmov,fmov,fmov,multi,multi,sselog1,ssemov,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov\")\n+   (set (attr \"type\")\n+\t(cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"fmov\")\n+\t       (eq_attr \"alternative\" \"3,4\")\n+\t\t (const_string \"multi\")\n+\t       (eq_attr \"alternative\" \"5,9\")\n+\t\t (const_string \"sselog1\")\n+\t      ]\n+\t      (const_string \"ssemov\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n        (const_string \"orig\")\n@@ -3272,7 +3292,17 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,sselog1,ssemov,ssemov,ssemov,mmxmov,mmxmov,mmxmov,ssemov,ssemov,mmxmov,mmxmov\")\n+  [(set (attr \"type\")\n+\t(cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t\t (const_string \"fmov\")\n+\t       (eq_attr \"alternative\" \"3,4\")\n+\t\t (const_string \"multi\")\n+\t       (eq_attr \"alternative\" \"5\")\n+\t\t (const_string \"sselog1\")\n+\t       (eq_attr \"alternative\" \"9,10,11,14,15\")\n+\t\t (const_string \"mmxmov\")\n+\t      ]\n+\t      (const_string \"ssemov\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"alternative\" \"5,6,7,8,12,13\")\n        (const_string \"maybe_vex\")"}, {"sha": "3f23eab39c74ee306746bdb710dc7b88065f13e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167aa8cd3f425aad14b6a3f355cca77311be1ca9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=167aa8cd3f425aad14b6a3f355cca77311be1ca9", "patch": "@@ -78,7 +78,7 @@\n 2011-09-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/50327\n-\t* gfortran.dg/do_while_1.f90:  New test.\n+\t* gfortran.dg/do_while_1.f90: New test.\n \n 2011-09-11  Janus Weil  <janus@gcc.gnu.org>\n "}]}