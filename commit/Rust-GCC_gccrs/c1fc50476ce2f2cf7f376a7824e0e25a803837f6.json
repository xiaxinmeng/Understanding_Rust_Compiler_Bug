{"sha": "c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYzUwNDc2Y2UyZjJjZjdmMzc2YTc4MjRlMGUyNWE4MDM4MzdmNg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2005-04-21T17:08:27Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2005-04-21T17:08:27Z"}, "message": "re PR preprocessor/20907 (long comments throw off line numbers)\n\n\n\tPR preprocessor/20907\n\t* line-map.c (linemap_line_start): Fix bug when we need to increse\n\tcolumn_bits but can re-use the current line_map.\n\nFrom-SVN: r98515", "tree": {"sha": "b15d8e7557f1913eb0160b3519aa2094cc02bc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15d8e7557f1913eb0160b3519aa2094cc02bc47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fc50476ce2f2cf7f376a7824e0e25a803837f6/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c280337076ea8ca822821ea96469fee81dd5f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c280337076ea8ca822821ea96469fee81dd5f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c280337076ea8ca822821ea96469fee81dd5f97"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "1a8fccf5ce1105c8eb6ce93f526d09801b92e5be", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc50476ce2f2cf7f376a7824e0e25a803837f6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc50476ce2f2cf7f376a7824e0e25a803837f6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "patch": "@@ -1,3 +1,9 @@\n+2005-04-19  Per Bothner  <per@bothner.com>\n+\n+\tPR preprocessor/20907\n+\t* line-map.c (linemap_line_start): Fix bug when we need to increse\n+\tcolumn_bits but can re-use the current line_map.\n+\n 2005-04-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h (fopen, fdopen, freopen): Define these to the unlocked"}, {"sha": "1ace4c9585d160d0c11c4a02fea6ebb4ae792454", "filename": "libcpp/line-map.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fc50476ce2f2cf7f376a7824e0e25a803837f6/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fc50476ce2f2cf7f376a7824e0e25a803837f6/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=c1fc50476ce2f2cf7f376a7824e0e25a803837f6", "patch": "@@ -199,6 +199,8 @@ linemap_line_start (struct line_maps *set, unsigned int to_line,\n       int column_bits;\n       if (max_column_hint > 100000 || highest > 0xC0000000)\n \t{\n+\t  /* If the column number is ridiculous or we've allocated a huge\n+\t     number of source_locations, give up on column numbers. */\n \t  max_column_hint = 0;\n \t  if (highest >0xF0000000)\n \t    return 0;\n@@ -211,13 +213,15 @@ linemap_line_start (struct line_maps *set, unsigned int to_line,\n \t    column_bits++;\n \t  max_column_hint = 1U << column_bits;\n \t}\n+      /* Allocate the new line_map.  However, if the current map only has a\n+\t single line we can sometimes just increase its column_bits instead. */\n       if (line_delta < 0\n \t  || last_line != map->to_line\n \t  || SOURCE_COLUMN (map, highest) >= (1U << column_bits))\n \tmap = (struct line_map*) linemap_add (set, LC_RENAME, map->sysp,\n \t\t\t\t      map->to_file, to_line);\n       map->column_bits = column_bits;\n-      r = map->start_location;\n+      r = map->start_location + ((to_line - map->to_line) << column_bits);\n     }\n   else\n     r = highest - SOURCE_COLUMN (map, highest)"}]}