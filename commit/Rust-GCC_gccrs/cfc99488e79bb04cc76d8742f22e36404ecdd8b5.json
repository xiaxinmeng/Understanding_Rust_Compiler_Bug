{"sha": "cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjOTk0ODhlNzliYjA0Y2M3NmQ4NzQyZjIyZTM2NDA0ZWNkZDhiNQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2011-04-20T16:39:37Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-04-20T16:39:37Z"}, "message": "vect-shift-3.c, [...]: New.\n\n2011-04-20  Daniel Jacobowitz  <dan@codesourcery.com>\n\n\tgcc/testsuite/\n\t* gcc.dg/vect/vect-shift-3.c, gcc.dg/vect/vect-shift-4.c: New.\n\t* lib/target-supports.exp (check_effective_target_vect_shift_char): New\n\tfunction.\n\nFrom-SVN: r172778", "tree": {"sha": "a81b045747c8f685da18bfbcaea94d70cbbf9a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81b045747c8f685da18bfbcaea94d70cbbf9a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/comments", "author": null, "committer": null, "parents": [{"sha": "bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "3528f3e43c2559a0decec3ea94b6c0a25497ed95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "patch": "@@ -1,3 +1,9 @@\n+2011-04-20  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* gcc.dg/vect/vect-shift-3.c, gcc.dg/vect/vect-shift-4.c: New.\n+\t* lib/target-supports.exp (check_effective_target_vect_shift_char): New\n+\tfunction.\n+\n 2011-04-20  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/binio-xor1.c: New test."}, {"sha": "78ed935ae593ef5942f0c0f074818194717ccc4d", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-3.c?ref=cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-require-effective-target vect_shift } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+unsigned short dst[N] __attribute__((aligned(N)));\n+unsigned short src[N] __attribute__((aligned(N)));\n+\n+__attribute__ ((noinline))\n+void array_shift(void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    dst[i] = src[i] >> 3;\n+}\n+\n+int main()\n+{\n+  volatile int i;\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    src[i] = i << 3;\n+\n+  array_shift ();\n+\n+  for (i = 0; i < N; i++)\n+    if (dst[i] != i)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e705feadde0c5e858f47d86e22d773280a955005", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-4.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-4.c?ref=cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-require-effective-target vect_shift_char } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+unsigned char dst[N] __attribute__((aligned(N)));\n+unsigned char src[N] __attribute__((aligned(N)));\n+\n+__attribute__ ((noinline))\n+void array_shift(void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    dst[i] = src[i] >> 3;\n+}\n+\n+int main()\n+{\n+  volatile int i;\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    src[i] = i << 3;\n+\n+  array_shift ();\n+\n+  for (i = 0; i < N; i++)\n+    if (dst[i] != i)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c7e1280e782c850ab078247bdfe50717c1049681", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc99488e79bb04cc76d8742f22e36404ecdd8b5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=cfc99488e79bb04cc76d8742f22e36404ecdd8b5", "patch": "@@ -2310,6 +2310,26 @@ proc check_effective_target_vect_shift_scalar { } {\n }\n \n \n+# Return 1 if the target supports hardware vector shift operation for char.\n+\n+proc check_effective_target_vect_shift_char { } {\n+    global et_vect_shift_char_saved\n+\n+    if [info exists et_vect_shift_char_saved] {\n+\tverbose \"check_effective_target_vect_shift_char: using cached result\" 2\n+    } else {\n+\tset et_vect_shift_char_saved 0\n+\tif { ([istarget powerpc*-*-*]\n+             && ![istarget powerpc-*-linux*paired*])\n+\t     || [check_effective_target_arm32] } {\n+\t   set et_vect_shift_char_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_shift_char: returning $et_vect_shift_char_saved\" 2\n+    return $et_vect_shift_char_saved\n+}\n+\n # Return 1 if the target supports hardware vectors of long, 0 otherwise.\n #\n # This can change for different subtargets so do not cache the result."}]}