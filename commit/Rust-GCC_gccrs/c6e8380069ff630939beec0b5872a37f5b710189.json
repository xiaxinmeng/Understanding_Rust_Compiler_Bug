{"sha": "c6e8380069ff630939beec0b5872a37f5b710189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlODM4MDA2OWZmNjMwOTM5YmVlYzBiNTg3MmEzN2Y1YjcxMDE4OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-06-05T20:58:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-06-05T20:58:06Z"}, "message": "Makefile.am: Add makedepend.\n\nlibcpp:\n\t* Makefile.am: Add makedepend.\n\t* Makefile.in, aclocal.m4: Regenerate.\n\t* charset.c: Insert a space to avoid a warning.\n\t* directives.c: Include mkdeps.h.\n\t(_cpp_handle_directive): Reenable macro expander if appropriate.\n\t(undefine_macros): Inline body of _cpp_free_definition for speed.\n\tDo not call undef callback or _cpp_warn_if_unused_macro.\n\t(cpp_get_deps): New interface.\n\t* files.c (search_cache): Add pfile argument.  Check for file\n\tthat would be found by \"\" or <> search here...\n\t(_cpp_find_file): ...not here.  Correct recorded start_dir of\n\tfiles found by directory-of-current-file search that would be\n\tfound by \"\" or <> search.\n\t* init.c (cpp_add_dependency_target): Delete.\n\t* internal.h (struct lexer_state): Add discarding_output flag.\n\t* lex.c (lex_identifier): Compute hash function while scanning.\n\t* macro.c (cpp_scan_nooutput): Disable macro expansion outside\n\tdirectives.\n\t* makedepend.c: New file.\n\t* mkdeps.c (struct deps): Add vpath vector.\n\t(apply_vpath, deps_add_vpath): New function.\n\t(deps_free): Free vpath vector.\n\t(deps_add_dep, deps_add_target): Use apply_vpath.\n\t* symtab.c (calc_hash): Use HT_HASHSTEP and HT_FINISH.\n\t(ht_lookup_with_hash): New function.\n\t* cpplib.h, mkdeps.h: Update prototypes.\n\t* symtab.h: Update prototypes.\n\t(HT_HASHSTEP, HT_FINISH): New macros.\n\ngcc:\n\t* Makefile.in (MKDEPS_H): New shorthand.\n\t(c-opts.o): Update dependencies.\n\t* c-opts.c: Include mkdeps.h.\n\t(handle_deferred_opts): Use cpp_get_deps and deps_add_target,\n\tnot cpp_add_dependency_target.\n\nFrom-SVN: r82654", "tree": {"sha": "f9776b653c83d7c1faa17b330fe162333d109cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9776b653c83d7c1faa17b330fe162333d109cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e8380069ff630939beec0b5872a37f5b710189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e8380069ff630939beec0b5872a37f5b710189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e8380069ff630939beec0b5872a37f5b710189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e8380069ff630939beec0b5872a37f5b710189/comments", "author": null, "committer": null, "parents": [{"sha": "dbeff3e56d566719bb3f0c1ba29362d61fe3ff85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbeff3e56d566719bb3f0c1ba29362d61fe3ff85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbeff3e56d566719bb3f0c1ba29362d61fe3ff85"}], "stats": {"total": 651, "additions": 531, "deletions": 120}, "files": [{"sha": "1ad247de598aca0f850a1e7d380dbf219bda60b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1,3 +1,11 @@\n+2004-06-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (MKDEPS_H): New shorthand.\n+\t(c-opts.o): Update dependencies.\n+\t* c-opts.c: Include mkdeps.h.\n+\t(handle_deferred_opts): Use cpp_get_deps and deps_add_target,\n+\tnot cpp_add_dependency_target.\n+\n 2004-06-05  Steven Bosscher  <stevenb@suse.de>\n \n \t* config/v850/v850.c (v850_use_dfa_pipeline_interface): New.\n@@ -9,7 +17,7 @@\n \t* doc/install.texi: Document GMP as prerequisite. Document\n \t--with-gmp and --with-gmp-dir configure options.\n \t* fortran/gfortran.texi: Remove section \"Compiling and testing\",\n-\tremove TOC reference to it. \n+\tremove TOC reference to it.\n \n 2004-06-05  Graham Stott  <graham.stott@btinternet.com>\n \n@@ -19,15 +27,15 @@\n 2004-06-05  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* toplev.c (init_asm_output): Add explicit 'b' to mode when\n-\topening asm_out_file. \n+\topening asm_out_file.\n \t* c-pch.c (c_common_write_pch): Remove unnecessary fflush before\n \treading asm_out_file. Replace fflush after reading asm_out_file\n \twith fseek.\n \t* hosthooks-def.h (HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY): Define\n-\tdefault and add to HOST_HOOKS_INITIALIZER. \n+\tdefault and add to HOST_HOOKS_INITIALIZER.\n \t* hosthooks.h (gt_pch_alloc_granularity): Declare hook function.\n \t* ggc-common.c (default_gt_pch_alloc_granularity): New function.\n-\t(gt_pch_save): Use host_hooks.gt_pch_alloc_granularity \n+\t(gt_pch_save): Use host_hooks.gt_pch_alloc_granularity\n \tto set mmi.offset padding.\n \t * config.gcc (i[34567]86-*-mingw32*): Set target_gtfiles to\n \t$(srcdir)/config/i386/winnt.c.\n@@ -109,9 +117,9 @@\n \tfor TARGET_EXPLICIT_INSTANTIATIONS_ONE_ONLY, with reversed sense.\n \t* config/darwin.h (TARGET_WEAK_NOT_IN_ARCHIVE_TOC): Likewise.\n \t* doc/tm.texi (TARGET_WEAK_NOT_IN_ARCHIVE_TOC): Rewrite\n-\tdocumentation to reflect the new macro name and to clarify its \n+\tdocumentation to reflect the new macro name and to clarify its\n \tmeaning.\n-\t\n+\n 2004-06-03  Steven Bosscher  <stevenb@suse.de>\n \n \t* rtl.def (VAR_LOCATION): Make RTX_EXTRA.\n@@ -182,7 +190,7 @@\n \tUpdate callers.\n \tUse new worklist.\n \t(process_ssa_edge_worklist): New function.\n-\t(tree_ssa_ccp): Move worklist processing core to \n+\t(tree_ssa_ccp): Move worklist processing core to\n \tprocess_ssa_edge_worklist, and just call that for the two worklists.\n \n 2004-06-03  Steven Bosscher  <stevenb@suse.de>"}, {"sha": "2fa566aeea1cd8a5450867c90157ae66405ace2f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -714,6 +714,7 @@ SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h\n PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/cpplib.h \\\n \t$(srcdir)/../libcpp/include/line-map.h\n+MKDEPS_H = $(srcdir)/../libcpp/include/mkdeps.h\n SYMTAB_H = $(srcdir)/../libcpp/include/symtab.h\n TREE_DUMP_H = tree-dump.h $(SPLAY_TREE_H)\n TREE_GIMPLE_H = tree-gimple.h tree-iterator.h\n@@ -1416,7 +1417,7 @@ c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n         $(TREE_H) c-pragma.h flags.h toplev.h langhooks.h\t\t\\\n         tree-inline.h $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n-        opts.h options.h $(PARAMS_H)\n+        opts.h options.h $(PARAMS_H) $(MKDEPS_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n "}, {"sha": "b9c462a1230dd24df7e369718c20ed1fd4c6913b", "filename": "gcc/c-opts.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"debug.h\"\t\t/* For debug_hooks.  */\n #include \"opts.h\"\n #include \"options.h\"\n+#include \"mkdeps.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -1322,13 +1323,22 @@ static void\n handle_deferred_opts (void)\n {\n   size_t i;\n+  struct deps *deps;\n+\n+  /* Avoid allocating the deps buffer if we don't need it.\n+     (This flag may be true without there having been -MT or -MQ\n+     options, but we'll still need the deps buffer.)  */\n+  if (!deps_seen)\n+    return;\n+\n+  deps = cpp_get_deps (parse_in);\n \n   for (i = 0; i < deferred_count; i++)\n     {\n       struct deferred_opt *opt = &deferred_opts[i];\n \n       if (opt->code == OPT_MT || opt->code == OPT_MQ)\n-\tcpp_add_dependency_target (parse_in, opt->arg, opt->code == OPT_MQ);\n+\tdeps_add_target (deps, opt->arg, opt->code == OPT_MQ);\n     }\n }\n "}, {"sha": "4cd511b6ce070d5bd9ff438bd771635df906643c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1,3 +1,34 @@\n+2004-06-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.am: Add makedepend.\n+\t* Makefile.in, aclocal.m4: Regenerate.\n+\t* charset.c: Insert a space to avoid a warning.\n+\t* directives.c: Include mkdeps.h.\n+\t(_cpp_handle_directive): Reenable macro expander if appropriate.\n+\t(undefine_macros): Inline body of _cpp_free_definition for speed.\n+\tDo not call undef callback or _cpp_warn_if_unused_macro.\n+\t(cpp_get_deps): New interface.\n+\t* files.c (search_cache): Add pfile argument.  Check for file\n+\tthat would be found by \"\" or <> search here...\n+\t(_cpp_find_file): ...not here.  Correct recorded start_dir of\n+\tfiles found by directory-of-current-file search that would be\n+\tfound by \"\" or <> search.\n+\t* init.c (cpp_add_dependency_target): Delete.\n+\t* internal.h (struct lexer_state): Add discarding_output flag.\n+\t* lex.c (lex_identifier): Compute hash function while scanning.\n+\t* macro.c (cpp_scan_nooutput): Disable macro expansion outside\n+\tdirectives.\n+\t* makedepend.c: New file.\n+\t* mkdeps.c (struct deps): Add vpath vector.\n+\t(apply_vpath, deps_add_vpath): New function.\n+\t(deps_free): Free vpath vector.\n+\t(deps_add_dep, deps_add_target): Use apply_vpath.\n+\t* symtab.c (calc_hash): Use HT_HASHSTEP and HT_FINISH.\n+\t(ht_lookup_with_hash): New function.\n+\t* cpplib.h, mkdeps.h: Update prototypes.\n+\t* symtab.h: Update prototypes.\n+\t(HT_HASHSTEP, HT_FINISH): New macros.\n+\n 2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n \n \t* symtab.c (ht_create): Set entries_owned."}, {"sha": "57103bf2ef7b96ec45ea9cb4f7ac77d77384cce0", "filename": "libcpp/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.am?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -13,6 +13,9 @@ noinst_HEADERS = \\\n \tinclude/cpplib.h include/line-map.h include/mkdeps.h \\\n \tinclude/symtab.h internal.h system.h ucnid.h\n \n+noinst_PROGRAMS = makedepend\n+makedepend_LDADD = libcpp.a ../libiberty/libiberty.a\n+\n XGETTEXT = @XGETTEXT@\n GMSGFMT = @GMSGFMT@\n MSGMERGE = msgmerge"}, {"sha": "3820a1b02ac54244a482a322f8c621074ba3659e", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.8.4 from Makefile.am.\n+# Makefile.in generated by automake 1.8.5 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -15,7 +15,8 @@\n @SET_MAKE@\n \n \n-SOURCES = $(libcpp_a_SOURCES)\n+\n+SOURCES = $(libcpp_a_SOURCES) makedepend.c\n \n srcdir = @srcdir@\n top_srcdir = @top_srcdir@\n@@ -40,6 +41,7 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n+noinst_PROGRAMS = makedepend$(EXEEXT)\n DIST_COMMON = $(am__configure_deps) $(noinst_HEADERS) \\\n \t$(srcdir)/../config.guess $(srcdir)/../config.sub \\\n \t$(srcdir)/../depcomp $(srcdir)/../install-sh \\\n@@ -57,9 +59,9 @@ am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = config.h\n CONFIG_CLEAN_FILES =\n+LIBRARIES = $(noinst_LIBRARIES)\n AR = ar\n ARFLAGS = cru\n-LIBRARIES = $(noinst_LIBRARIES)\n libcpp_a_AR = $(AR) $(ARFLAGS)\n libcpp_a_LIBADD =\n am_libcpp_a_OBJECTS = charset.$(OBJEXT) directives.$(OBJEXT) \\\n@@ -68,6 +70,10 @@ am_libcpp_a_OBJECTS = charset.$(OBJEXT) directives.$(OBJEXT) \\\n \tline-map.$(OBJEXT) macro.$(OBJEXT) mkdeps.$(OBJEXT) \\\n \tpch.$(OBJEXT) symtab.$(OBJEXT) traditional.$(OBJEXT)\n libcpp_a_OBJECTS = $(am_libcpp_a_OBJECTS)\n+PROGRAMS = $(noinst_PROGRAMS)\n+makedepend_SOURCES = makedepend.c\n+makedepend_OBJECTS = makedepend.$(OBJEXT)\n+makedepend_DEPENDENCIES = libcpp.a ../libiberty/libiberty.a\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I.\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n am__depfiles_maybe = depfiles\n@@ -76,15 +82,15 @@ am__depfiles_maybe = depfiles\n @AMDEP_TRUE@\t./$(DEPDIR)/expr.Po ./$(DEPDIR)/files.Po \\\n @AMDEP_TRUE@\t./$(DEPDIR)/identifiers.Po ./$(DEPDIR)/init.Po \\\n @AMDEP_TRUE@\t./$(DEPDIR)/lex.Po ./$(DEPDIR)/line-map.Po \\\n-@AMDEP_TRUE@\t./$(DEPDIR)/macro.Po ./$(DEPDIR)/mkdeps.Po \\\n-@AMDEP_TRUE@\t./$(DEPDIR)/pch.Po ./$(DEPDIR)/symtab.Po \\\n-@AMDEP_TRUE@\t./$(DEPDIR)/traditional.Po\n+@AMDEP_TRUE@\t./$(DEPDIR)/macro.Po ./$(DEPDIR)/makedepend.Po \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/mkdeps.Po ./$(DEPDIR)/pch.Po \\\n+@AMDEP_TRUE@\t./$(DEPDIR)/symtab.Po ./$(DEPDIR)/traditional.Po\n COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n CCLD = $(CC)\n LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n-SOURCES = $(libcpp_a_SOURCES)\n-DIST_SOURCES = $(libcpp_a_SOURCES)\n+SOURCES = $(libcpp_a_SOURCES) makedepend.c\n+DIST_SOURCES = $(libcpp_a_SOURCES) makedepend.c\n HEADERS = $(noinst_HEADERS)\n ETAGS = etags\n CTAGS = ctags\n@@ -213,6 +219,7 @@ noinst_HEADERS = \\\n \tinclude/cpplib.h include/line-map.h include/mkdeps.h \\\n \tinclude/symtab.h internal.h system.h ucnid.h\n \n+makedepend_LDADD = libcpp.a ../libiberty/libiberty.a\n MSGMERGE = msgmerge\n all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-am\n@@ -277,6 +284,12 @@ libcpp.a: $(libcpp_a_OBJECTS) $(libcpp_a_DEPENDENCIES)\n \t$(libcpp_a_AR) libcpp.a $(libcpp_a_OBJECTS) $(libcpp_a_LIBADD)\n \t$(RANLIB) libcpp.a\n \n+clean-noinstPROGRAMS:\n+\t-test -z \"$(noinst_PROGRAMS)\" || rm -f $(noinst_PROGRAMS)\n+makedepend$(EXEEXT): $(makedepend_OBJECTS) $(makedepend_DEPENDENCIES) \n+\t@rm -f makedepend$(EXEEXT)\n+\t$(LINK) $(makedepend_LDFLAGS) $(makedepend_OBJECTS) $(makedepend_LDADD) $(LIBS)\n+\n mostlyclean-compile:\n \t-rm -f *.$(OBJEXT)\n \n@@ -293,6 +306,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lex.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/line-map.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/macro.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/makedepend.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mkdeps.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pch.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/symtab.Po@am__quote@\n@@ -336,7 +350,7 @@ TAGS:  $(HEADERS) $(SOURCES) config.in $(TAGS_DEPENDENCIES) \\\n \t  $(AWK) '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \tif test -z \"$(ETAGS_ARGS)$$tags$$unique\"; then :; else \\\n-\t  test -z \"$$unique\" && unique=$$empty_fix; \\\n+\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n \t  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n \t    $$tags $$unique; \\\n \tfi\n@@ -492,7 +506,7 @@ distcleancheck: distclean\n \t       exit 1; } >&2\n check-am: all-am\n check: check-am\n-all-am: Makefile $(LIBRARIES) $(HEADERS) config.h\n+all-am: Makefile $(LIBRARIES) $(PROGRAMS) $(HEADERS) config.h\n installdirs:\n install: install-am\n install-exec: install-exec-am\n@@ -520,7 +534,8 @@ maintainer-clean-generic:\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n clean: clean-am\n \n-clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am\n+clean-am: clean-generic clean-noinstLIBRARIES clean-noinstPROGRAMS \\\n+\tmostlyclean-am\n \n distclean: distclean-am\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n@@ -571,17 +586,18 @@ ps-am:\n uninstall-am: uninstall-info-am\n \n .PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \\\n-\tclean-generic clean-noinstLIBRARIES ctags dist dist-all \\\n-\tdist-bzip2 dist-gzip dist-shar dist-tarZ dist-zip distcheck \\\n-\tdistclean distclean-compile distclean-generic distclean-hdr \\\n-\tdistclean-tags distcleancheck distdir distuninstallcheck dvi \\\n-\tdvi-am html html-am info info-am install install-am \\\n-\tinstall-data install-data-am install-data-local install-exec \\\n-\tinstall-exec-am install-info install-info-am install-man \\\n-\tinstall-strip installcheck installcheck-am installdirs \\\n-\tmaintainer-clean maintainer-clean-generic mostlyclean \\\n-\tmostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \\\n-\ttags uninstall uninstall-am uninstall-info-am\n+\tclean-generic clean-noinstLIBRARIES clean-noinstPROGRAMS ctags \\\n+\tdist dist-all dist-bzip2 dist-gzip dist-shar dist-tarZ \\\n+\tdist-zip distcheck distclean distclean-compile \\\n+\tdistclean-generic distclean-hdr distclean-tags distcleancheck \\\n+\tdistdir distuninstallcheck dvi dvi-am html html-am info \\\n+\tinfo-am install install-am install-data install-data-am \\\n+\tinstall-data-local install-exec install-exec-am install-info \\\n+\tinstall-info-am install-man install-strip installcheck \\\n+\tinstallcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-compile \\\n+\tmostlyclean-generic pdf pdf-am ps ps-am tags uninstall \\\n+\tuninstall-am uninstall-info-am\n \n \n @ENABLE_NLS_TRUE@build-po: $(CATALOGS)"}, {"sha": "049133928b33e9f3d1b4726425757d39725776a5", "filename": "libcpp/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Faclocal.m4?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1,4 +1,4 @@\n-# generated automatically by aclocal 1.8.4 -*- Autoconf -*-\n+# generated automatically by aclocal 1.8.5 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n # Free Software Foundation, Inc.\n@@ -989,7 +989,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version=\"1.8\"])\n # Call AM_AUTOMAKE_VERSION so it can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.8.4])])\n+\t [AM_AUTOMAKE_VERSION([1.8.5])])\n \n # AM_AUX_DIR_EXPAND\n "}, {"sha": "4de858a1b547f2b87d68f6ef609e90e1b93b8814", "filename": "libcpp/charset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1409,7 +1409,7 @@ _cpp_default_encoding (void)\n      - the appropriate Unicode byte-order mark (FE FF) to recognize\n        UTF16 and UCS4 (in both big-endian and little-endian flavors)\n        and UTF8\n-     - a \"#i\", \"#d\", \"/*\", \"//\", \" #p\" or \"#p\" (for #pragma) to\n+     - a \"#i\", \"#d\", \"/ *\", \"//\", \" #p\" or \"#p\" (for #pragma) to\n        distinguish ASCII and EBCDIC.\n      - now we can parse something like \"#pragma GCC encoding <xyz>\n        on the first line, or even Emacs/VIM's mode line tags (there's"}, {"sha": "5a6a342bea5b0b63e5803ffbc96d7eccb10a3447", "filename": "libcpp/directives.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -23,6 +23,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"cpplib.h\"\n #include \"internal.h\"\n+#include \"mkdeps.h\"\n #include \"obstack.h\"\n \n /* Chained list of answers to an assertion.  */\n@@ -336,8 +337,12 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n   const directive *dir = 0;\n   const cpp_token *dname;\n   bool was_parsing_args = pfile->state.parsing_args;\n+  bool was_discarding_output = pfile->state.discarding_output;\n   int skip = 1;\n \n+  if (was_discarding_output)\n+    pfile->state.prevent_expansion = 0;\n+\n   if (was_parsing_args)\n     {\n       if (CPP_OPTION (pfile, pedantic))\n@@ -432,6 +437,8 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n       pfile->state.parsing_args = 2;\n       pfile->state.prevent_expansion = 1;\n     }\n+  if (was_discarding_output)\n+    pfile->state.prevent_expansion = 1;\n   return skip;\n }\n \n@@ -549,30 +556,13 @@ do_undef (cpp_reader *pfile)\n /* Undefine a single macro/assertion/whatever.  */\n \n static int\n-undefine_macros (cpp_reader *pfile, cpp_hashnode *h,\n+undefine_macros (cpp_reader *pfile ATTRIBUTE_UNUSED, cpp_hashnode *h,\n \t\t void *data_p ATTRIBUTE_UNUSED)\n {\n-  switch (h->type)\n-    {\n-    case NT_VOID:\n-      break;\n-\n-    case NT_MACRO:\n-      if (pfile->cb.undef)\n-        (*pfile->cb.undef) (pfile, pfile->directive_line, h);\n-\n-      if (CPP_OPTION (pfile, warn_unused_macros))\n-        _cpp_warn_if_unused_macro (pfile, h, NULL);\n-\n-      /* And fall through....  */\n-    case NT_ASSERTION:\n-      _cpp_free_definition (h);\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-  h->flags &= ~NODE_POISONED;\n+  /* Body of _cpp_free_definition inlined here for speed.\n+     Macros and assertions no longer have anything to free.  */\n+  h->type = NT_VOID;\n+  h->flags &= ~(NODE_POISONED|NODE_BUILTIN|NODE_DISABLED);\n   return 1;\n }\n \n@@ -1913,6 +1903,15 @@ cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)\n   pfile->cb = *cb;\n }\n \n+/* The dependencies structure.  (Creates one if it hasn't already been.)  */\n+struct deps *\n+cpp_get_deps (cpp_reader *pfile)\n+{\n+  if (!pfile->deps)\n+    pfile->deps = deps_init ();\n+  return pfile->deps;\n+}\n+\n /* Push a new buffer on the buffer stack.  Returns the new buffer; it\n    doesn't fail.  It does not generate a file change call back; that\n    is the responsibility of the caller.  */"}, {"sha": "6a18d71a896631d32376d568a34f1b0f14a76a94", "filename": "libcpp/files.c", "status": "modified", "additions": 62, "deletions": 17, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -158,7 +158,8 @@ static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n static const char *dir_name_of_file (_cpp_file *file);\n static void open_file_failed (cpp_reader *pfile, _cpp_file *file);\n-static struct file_hash_entry *search_cache (struct file_hash_entry *head,\n+static struct file_hash_entry *search_cache (cpp_reader *pfile,\n+\t\t\t\t\t     struct file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n@@ -406,7 +407,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t\t\t      INSERT);\n \n   /* First check the cache before we resort to memory allocation.  */\n-  entry = search_cache (*hash_slot, start_dir);\n+  entry = search_cache (pfile, *hash_slot, start_dir);\n   if (entry)\n     return entry->u.file;\n \n@@ -435,17 +436,6 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t    }\n \t  break;\n \t}\n-\n-      /* Only check the cache for the starting location (done above)\n-\t and the quote and bracket chain heads because there are no\n-\t other possible starting points for searches.  */\n-      if (file->dir != pfile->bracket_include\n-\t  && file->dir != pfile->quote_include)\n-\tcontinue;\n-\n-      entry = search_cache (*hash_slot, file->dir);\n-      if (entry)\n-\tbreak;\n     }\n \n   if (entry)\n@@ -462,6 +452,33 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n       pfile->all_files = file;\n     }\n \n+  /* If this file was found in the directory-of-the-current-file,\n+     check whether that directory is reachable via one of the normal\n+     search paths.  If so, we must record this entry as being\n+     reachable that way, otherwise we will mistakenly reprocess this\n+     file if it is included later from the normal search path.  */\n+  if (file->dir && start_dir->next == pfile->quote_include)\n+    {\n+      cpp_dir *d;\n+      cpp_dir *proper_start_dir = pfile->quote_include;\n+\n+      for (d = proper_start_dir;; d = d->next)\n+\t{\n+\t  if (d == pfile->bracket_include)\n+\t    proper_start_dir = d;\n+\t  if (d == 0)\n+\t    {\n+\t      proper_start_dir = 0;\n+\t      break;\n+\t    }\n+\t  /* file->dir->name will have a trailing slash.  */\n+\t  if (!strncmp (d->name, file->dir->name, file->dir->len - 1))\n+\t    break;\n+\t}\n+      if (proper_start_dir)\n+\tstart_dir = proper_start_dir;\n+    }\n+\n   /* Store this new result in the hash table.  */\n   entry = new_file_hash_entry (pfile);\n   entry->next = *hash_slot;\n@@ -821,12 +838,40 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file)\n /* Search in the chain beginning at HEAD for a file whose search path\n    started at START_DIR != NULL.  */\n static struct file_hash_entry *\n-search_cache (struct file_hash_entry *head, const cpp_dir *start_dir)\n+search_cache (cpp_reader *pfile, struct file_hash_entry *head,\n+\t      const cpp_dir *start_dir)\n {\n-  while (head && head->start_dir != start_dir)\n-    head = head->next;\n+  struct file_hash_entry *p;\n+\n+  /* Look for a file that was found from a search starting at the\n+     given location.  */\n+  for (p = head; p; p = p->next)\n+    if (p->start_dir == start_dir)\n+      return p;\n+\n+  /* If the given location is for a search of the directory containing\n+     the current file, check for a match starting at the base of the\n+     quoted include chain.  */\n+  if (start_dir->next == pfile->quote_include)\n+    {\n+      start_dir = pfile->quote_include;\n+      for (p = head; p; p = p->next)\n+\tif (p->start_dir == start_dir)\n+\t  return p;\n+    }\n \n-  return head;\n+  /* If the given location is for a search from the base of the quoted\n+     include chain, check for a match starting at the base of the\n+     bracket include chain.  */\n+  if (start_dir == pfile->quote_include)\n+    {\n+      start_dir = pfile->bracket_include;\n+      for (p = head; p; p = p->next)\n+\tif (p->start_dir == start_dir)\n+\t  return p;\n+    }\n+\n+  return 0;\n }\n \n /* Allocate a new _cpp_file structure.  */"}, {"sha": "cf701b5e861661894110ada7748b977c250017e4", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -538,23 +538,18 @@ extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,\n    command line options).  */\n extern void cpp_set_lang (cpp_reader *, enum c_lang);\n \n-/* Add a dependency TARGET.  Quote it for \"make\" if QUOTE.  Can be\n-   called any number of times before cpp_read_main_file().  If no\n-   targets have been added before cpp_read_main_file(), then the\n-   default target is used.  */\n-extern void cpp_add_dependency_target (cpp_reader *, const char *, int);\n-\n /* Set the include paths.  */\n extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);\n \n-/* Call these to get pointers to the options and callback structures\n-   for a given reader.  These pointers are good until you call\n-   cpp_finish on that reader.  You can either edit the callbacks\n+/* Call these to get pointers to the options, callback, and deps\n+   structures for a given reader.  These pointers are good until you\n+   call cpp_finish on that reader.  You can either edit the callbacks\n    through the pointer returned from cpp_get_callbacks, or set them\n    with cpp_set_callbacks.  */\n extern cpp_options *cpp_get_options (cpp_reader *);\n extern cpp_callbacks *cpp_get_callbacks (cpp_reader *);\n extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n+extern struct deps *cpp_get_deps (cpp_reader *);\n \n /* This function reads the file, but does not start preprocessing.  It\n    returns the name of the original file; this is the same as the"}, {"sha": "56ffdaf56637f885dea766f887c0cd37ed89755b", "filename": "libcpp/include/mkdeps.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fmkdeps.h?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -34,6 +34,13 @@ extern struct deps *deps_init (void);\n /* Destroy a deps buffer.  */\n extern void deps_free (struct deps *);\n \n+/* Add a set of \"vpath\" directories. The second argument is a colon-\n+   separated list of pathnames, like you would set Make's VPATH\n+   variable to.  If a dependency or target name begins with any of\n+   these pathnames (and the next path element is not \"..\") that\n+   pathname is stripped off.  */\n+extern void deps_add_vpath (struct deps *, const char *);\n+\n /* Add a target (appears on left side of the colon) to the deps list.  Takes\n    a boolean indicating whether to quote the target for MAKE.  */\n extern void deps_add_target (struct deps *, const char *, int);"}, {"sha": "d11e4efe6dcf971f5f38399c723cc1315614cfb3", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -71,6 +71,11 @@ extern void ht_destroy (hash_table *);\n \n extern hashnode ht_lookup (hash_table *, const unsigned char *,\n \t\t\t   size_t, enum ht_lookup_option);\n+extern hashnode ht_lookup_with_hash (hash_table *, const unsigned char *,\n+                                     size_t, unsigned int,\n+                                     enum ht_lookup_option);\n+#define HT_HASHSTEP(r, c) ((r) * 67 + ((c) - 113));\n+#define HT_HASHFINISH(r, len) ((r) + (len))\n \n /* For all nodes in TABLE, make a callback.  The callback takes\n    TABLE->PFILE, the node, and a PTR, and the callback sequence stops"}, {"sha": "65cca9b2bab57d4a8987b107d4dc01e5c5d1b6ef", "filename": "libcpp/init.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -429,18 +429,6 @@ static void sanity_checks (cpp_reader *pfile)\n # define sanity_checks(PFILE)\n #endif\n \n-/* Add a dependency target.  Can be called any number of times before\n-   cpp_read_main_file().  If no targets have been added before\n-   cpp_read_main_file(), then the default target is used.  */\n-void\n-cpp_add_dependency_target (cpp_reader *pfile, const char *target, int quote)\n-{\n-  if (!pfile->deps)\n-    pfile->deps = deps_init ();\n-\n-  deps_add_target (pfile->deps, target, quote);\n-}\n-\n /* This is called after options have been parsed, and partially\n    processed.  */\n void"}, {"sha": "3608201d560ecebea8e514a4e93701c2c9863e81", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -246,6 +246,10 @@ struct lexer_state\n   /* Nonzero when parsing arguments to a function-like macro.  */\n   unsigned char parsing_args;\n \n+  /* Nonzero if prevent_expansion is true only because output is\n+     being discarded.  */\n+  unsigned char discarding_output;\n+\n   /* Nonzero to skip evaluating part of an expression.  */\n   unsigned int skip_eval;\n };"}, {"sha": "37df6efc0b718eed4b391b96e6cbcd407e3c354b", "filename": "libcpp/lex.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -470,22 +470,36 @@ static cpp_hashnode *\n lex_identifier (cpp_reader *pfile, const uchar *base)\n {\n   cpp_hashnode *result;\n-  const uchar *cur;\n+  const uchar *cur, *limit;\n+  unsigned int len;\n+  unsigned int hash = HT_HASHSTEP (0, *base);\n \n-  do\n+  cur = pfile->buffer->cur;\n+  for (;;)\n     {\n-      cur = pfile->buffer->cur;\n-\n       /* N.B. ISIDNUM does not include $.  */\n       while (ISIDNUM (*cur))\n-\tcur++;\n+\t{\n+\t  hash = HT_HASHSTEP (hash, *cur);\n+\t  cur++;\n+\t}\n \n       pfile->buffer->cur = cur;\n+      if (!forms_identifier_p (pfile, false))\n+\tbreak;\n+\n+      limit = pfile->buffer->cur;\n+      while (cur < limit)\n+\t{\n+\t  hash = HT_HASHSTEP (hash, *cur);\n+\t  cur++;\n+\t}\n     }\n-  while (forms_identifier_p (pfile, false));\n+  len = cur - base;\n+  hash = HT_HASHFINISH (hash, len);\n \n   result = (cpp_hashnode *)\n-    ht_lookup (pfile->hash_table, base, cur - base, HT_ALLOC);\n+    ht_lookup_with_hash (pfile->hash_table, base, len, hash, HT_ALLOC);\n \n   /* Rarely, identifiers require diagnostics when lexed.  */\n   if (__builtin_expect ((result->flags & NODE_DIAGNOSTIC)"}, {"sha": "cfc42b4050fcd52cd627b6156a45bb6bdd4014ff", "filename": "libcpp/macro.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -1142,12 +1142,18 @@ cpp_scan_nooutput (cpp_reader *pfile)\n      transparently continuing with the including file.  */\n   pfile->buffer->return_at_eof = true;\n \n+  pfile->state.discarding_output++;\n+  pfile->state.prevent_expansion++;\n+\n   if (CPP_OPTION (pfile, traditional))\n     while (_cpp_read_logical_line_trad (pfile))\n       ;\n   else\n     while (cpp_get_token (pfile)->type != CPP_EOF)\n       ;\n+\n+  pfile->state.discarding_output--;\n+  pfile->state.prevent_expansion--;\n }\n \n /* Step back one (or more) tokens.  Can only step mack more than 1 if"}, {"sha": "df4a2939c141db4754e7de1a48a70018a72a589e", "filename": "libcpp/makedepend.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmakedepend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmakedepend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmakedepend.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -0,0 +1,205 @@\n+/* Dependency generator utility.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Zack Weinberg, May 2004\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+ In other words, you are welcome to use, share and improve this program.\n+ You are forbidden to forbid anyone else to use, share and improve\n+ what you give them.   Help stamp out software-hoarding!  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"line-map.h\"\n+#include \"cpplib.h\"\n+#include \"getopt.h\"\n+\n+const char *progname;\n+const char *vpath;\n+\n+static const char *output_file;\n+static bool had_errors;\n+\n+/* Option lists, to give to cpplib before each input file.  */\n+struct cmd_line_macro\n+{\n+  struct cmd_line_macro *next;\n+  bool is_undef;\n+  const char *macro;\n+};\n+\n+static struct cmd_line_macro *cmd_line_macros;\n+static cpp_dir *cmd_line_searchpath;\n+\n+static void\n+add_clm (const char *macro, bool is_undef)\n+{\n+  struct cmd_line_macro *clm = xmalloc (sizeof (struct cmd_line_macro));\n+  clm->next = cmd_line_macros;\n+  clm->is_undef = is_undef;\n+  clm->macro = macro;\n+  cmd_line_macros = clm;\n+}\n+\n+static void\n+add_dir (char *name, bool sysp)\n+{\n+  cpp_dir *dir = xmalloc (sizeof (cpp_dir));\n+  dir->next = cmd_line_searchpath;\n+  dir->name = name;\n+  dir->sysp = sysp;\n+  dir->construct = 0;\n+  dir->user_supplied_p = 1;\n+  cmd_line_searchpath = dir;\n+}\n+\n+/* Command line processing.  */\n+\n+static void ATTRIBUTE_NORETURN\n+usage (int errcode)\n+{\n+  fprintf (stderr,\n+\"usage: %s [-vh] [-V vpath] [-Dname[=def]...] [-Uname] [-Idir...] [-o file] sources...\\n\",\n+\t   progname);\n+  exit (errcode);\n+}\n+\n+static int\n+parse_options (int argc, char **argv)\n+{\n+  static const struct option longopts[] = {\n+    { \"--help\", no_argument, 0, 'h' },\n+    { 0, 0, 0, 0 }\n+  };\n+\n+  for (;;)\n+    switch (getopt_long (argc, argv, \"hD:U:I:J:o:V:\", longopts, 0))\n+      {\n+      case 'h': usage (0);\n+      case 'D': add_clm (optarg, false); break;\n+      case 'U': add_clm (optarg, true);  break;\n+      case 'I': add_dir (optarg, false); break;\n+      case 'J': add_dir (optarg, true);  break;\n+      case 'o':\n+\tif (output_file)\n+\t  {\n+\t    fprintf (stderr, \"%s: too many output files\\n\", progname);\n+\t    usage (2);\n+\t  }\n+\toutput_file = optarg;\n+\tbreak;\n+      case 'V':\n+\tif (vpath)\n+\t  {\n+\t    fprintf (stderr, \"%s: too many vpaths\\n\", progname);\n+\t    usage (2);\n+\t  }\n+\tvpath = optarg;\n+\tbreak;\n+      case '?':\n+\tusage (2);  /* getopt has issued the error message.  */\n+\n+      case -1: /* end of options */\n+\tif (optind == argc)\n+\t  {\n+\t    fprintf (stderr, \"%s: no input files\\n\", progname);\n+\t    usage (2);\n+\t  }\n+\treturn optind;\n+\t\n+      default:\n+\tabort ();\n+      }\n+}\n+\n+/* Set up cpplib from command line options.  */\n+static cpp_reader *\n+reader_init (struct line_maps *line_table)\n+{\n+  cpp_reader *reader;\n+  cpp_options *options;\n+\n+  linemap_init (line_table);\n+  reader = cpp_create_reader (CLK_GNUC89, 0, line_table);\n+\n+  /* Ignore warnings and errors (we don't have access to system\n+     headers).  Request dependency output.  */\n+  options = cpp_get_options (reader);\n+  options->inhibit_warnings = 1;\n+  options->inhibit_errors = 1;\n+  options->deps.style = DEPS_USER;\n+\n+  /* Further initialization.  */\n+  cpp_post_options (reader);\n+  cpp_init_iconv (reader);\n+  cpp_set_include_chains (reader, cmd_line_searchpath, cmd_line_searchpath,\n+\t\t\t  false);\n+  if (vpath)\n+    {\n+      struct deps *deps = cpp_get_deps (reader);\n+      deps_add_vpath (deps, vpath);\n+    }\n+\n+  return reader;\n+}\n+\n+/* Process one input source file.  */\n+static void\n+process_file (const char *file)\n+{\n+  struct line_maps line_table;\n+  cpp_reader *reader = reader_init (&line_table);\n+\n+  if (!cpp_read_main_file (reader, file))\n+    had_errors = true;\n+  else\n+    {\n+      struct cmd_line_macro *clm;\n+\n+      cpp_init_builtins (reader, true);\n+      for (clm = cmd_line_macros; clm; clm = clm->next)\n+\t(clm->is_undef ? cpp_undef : cpp_define) (reader, clm->macro);\n+\n+      cpp_scan_nooutput (reader);\n+      if (cpp_finish (reader, stdout))\n+\thad_errors = true;\n+    }\n+  cpp_destroy (reader);\n+  linemap_free (&line_table);\n+}\n+\n+/* Master control.  */\n+\n+int\n+main(int argc, char **argv)\n+{\n+  int first_input, i;\n+\n+  progname = argv[0];\n+  xmalloc_set_program_name (progname);\n+\n+  first_input = parse_options (argc, argv);\n+  if (output_file)\n+    if (!freopen (output_file, \"w\", stdout))\n+      {\n+\tperror (output_file);\n+\treturn 1;\n+      }\n+\n+  for (i = first_input; i < argc; i++)\n+    process_file (argv[i]);\n+\n+  return had_errors;\n+}"}, {"sha": "5ab881380016af321dcf4368cd64c030a874f7b6", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 82, "deletions": 14, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -35,6 +35,11 @@ struct deps\n   const char **depv;\n   unsigned int ndeps;\n   unsigned int deps_size;\n+\n+  const char **vpathv;\n+  size_t *vpathlv;\n+  unsigned int nvpaths;\n+  unsigned int vpaths_size;\n };\n \n static const char *munge (const char *);\n@@ -105,24 +110,48 @@ munge (const char *filename)\n   return buffer;\n }\n \n-/* Public routines.  */\n-\n-struct deps *\n-deps_init (void)\n+/* If T begins with any of the partial pathnames listed in d->vpathv,\n+   then advance T to point beyond that pathname.  */\n+static const char *\n+apply_vpath (struct deps *d, const char *t)\n {\n-  struct deps *d = xmalloc (sizeof (struct deps));\n+  if (d->vpathv)\n+    {\n+      unsigned int i;\n+      for (i = 0; i < d->nvpaths; i++)\n+\t{\n+\t  if (!strncmp (d->vpathv[i], t, d->vpathlv[i]))\n+\t    {\n+\t      const char *p = t + d->vpathlv[i];\n+\t      if (!IS_DIR_SEPARATOR (*p))\n+\t\tgoto not_this_one;\n+\n+\t      /* Do not simplify $(vpath)/../whatever.  ??? Might not\n+\t\t be necessary. */\n+\t      if (p[1] == '.' && p[2] == '.' && IS_DIR_SEPARATOR (p[3]))\n+\t\tgoto not_this_one;\n+\n+\t      /* found a match */\n+\t      t = t + d->vpathlv[i] + 1;\n+\t      break;\n+\t    }\n+\tnot_this_one:;\n+\t}\n+    }\n \n-  /* Allocate space for the vectors only if we need it.  */\n+  /* Remove leading ./ in any case.  */\n+  while (t[0] == '.' && IS_DIR_SEPARATOR (t[1]))\n+    t += 2;\n \n-  d->targetv = 0;\n-  d->depv = 0;\n+  return t;\n+}\n \n-  d->ntargets = 0;\n-  d->targets_size = 0;\n-  d->ndeps = 0;\n-  d->deps_size = 0;\n+/* Public routines.  */\n \n-  return d;\n+struct deps *\n+deps_init (void)\n+{\n+  return xcalloc (sizeof (struct deps), 1);\n }\n \n void\n@@ -144,6 +173,14 @@ deps_free (struct deps *d)\n       free (d->depv);\n     }\n \n+  if (d->vpathv)\n+    {\n+      for (i = 0; i < d->nvpaths; i++)\n+\tfree ((void *) d->vpathv[i]);\n+      free (d->vpathv);\n+      free (d->vpathlv);\n+    }\n+\n   free (d);\n }\n \n@@ -159,6 +196,7 @@ deps_add_target (struct deps *d, const char *t, int quote)\n \t\t\t     d->targets_size * sizeof (const char *));\n     }\n \n+  t = apply_vpath (d, t);\n   if (quote)\n     t = munge (t);  /* Also makes permanent copy.  */\n   else\n@@ -202,7 +240,7 @@ deps_add_default_target (struct deps *d, const char *tgt)\n void\n deps_add_dep (struct deps *d, const char *t)\n {\n-  t = munge (t);  /* Also makes permanent copy.  */\n+  t = munge (apply_vpath (d, t));  /* Also makes permanent copy.  */\n \n   if (d->ndeps == d->deps_size)\n     {\n@@ -212,6 +250,36 @@ deps_add_dep (struct deps *d, const char *t)\n   d->depv[d->ndeps++] = t;\n }\n \n+void\n+deps_add_vpath (struct deps *d, const char *vpath)\n+{\n+  const char *elem, *p;\n+  char *copy;\n+  size_t len;\n+\n+  for (elem = vpath; *elem; elem = p)\n+    {\n+      for (p = elem; *p && *p != ':'; p++);\n+      len = p - elem;\n+      copy = xmalloc (len + 1);\n+      memcpy (copy, elem, len);\n+      copy[len] = '\\0';\n+      if (*p == ':')\n+\tp++;\n+\n+      if (d->nvpaths == d->vpaths_size)\n+\t{\n+\t  d->vpaths_size = d->vpaths_size * 2 + 8;\n+\t  d->vpathv = xrealloc (d->vpathv,\n+\t\t\t\td->vpaths_size * sizeof (const char *));\n+\t  d->vpathlv = xrealloc (d->vpathlv, d->vpaths_size * sizeof (size_t));\n+\t}\n+      d->vpathv[d->nvpaths] = copy;\n+      d->vpathlv[d->nvpaths] = len;\n+      d->nvpaths++;\n+    }\n+}\n+\n void\n deps_write (const struct deps *d, FILE *fp, unsigned int colmax)\n {"}, {"sha": "9b2e0f1821115f97a050d9b2937f414b8fca2ecd", "filename": "libcpp/symtab.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8380069ff630939beec0b5872a37f5b710189/libcpp%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsymtab.c?ref=c6e8380069ff630939beec0b5872a37f5b710189", "patch": "@@ -41,13 +41,11 @@ calc_hash (const unsigned char *str, size_t len)\n {\n   size_t n = len;\n   unsigned int r = 0;\n-#define HASHSTEP(r, c) ((r) * 67 + ((c) - 113));\n \n   while (n--)\n-    r = HASHSTEP (r, *str++);\n+    r = HT_HASHSTEP (r, *str++);\n \n-  return r + len;\n-#undef HASHSTEP\n+  return HT_HASHFINISH (r, len);\n }\n \n /* Initialize an identifier hashtable.  */\n@@ -96,7 +94,15 @@ hashnode\n ht_lookup (hash_table *table, const unsigned char *str, size_t len,\n \t   enum ht_lookup_option insert)\n {\n-  unsigned int hash = calc_hash (str, len);\n+  return ht_lookup_with_hash (table, str, len, calc_hash (str, len),\n+\t\t\t      insert);\n+}\n+\n+hashnode\n+ht_lookup_with_hash (hash_table *table, const unsigned char *str,\n+\t\t     size_t len, unsigned int hash,\n+\t\t     enum ht_lookup_option insert)\n+{\n   unsigned int hash2;\n   unsigned int index;\n   size_t sizemask;"}]}