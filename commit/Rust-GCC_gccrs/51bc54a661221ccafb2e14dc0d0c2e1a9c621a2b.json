{"sha": "51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiYzU0YTY2MTIyMWNjYWZiMmUxNGRjMGQwYzJlMWE5YzYyMWEyYg==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2007-05-25T21:18:15Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-05-25T21:18:15Z"}, "message": "extend.texi (alloc_size): New attribute.\n\n2007-05-25  Dirk Mueller  <dmueller@suse.de>\n            Marcus Meissner <meissner@suse.de>\n\n        * doc/extend.texi (alloc_size): New attribute.\n        * c-common.c (handle_alloc_size_attribute): New.\n        * tree-object-size.c (alloc_object_size): Use alloc_size\n        attribute, if available.\n\n        * testsuite/gcc.dg/attr-alloc_size.c: New.\n\n\nCo-Authored-By: Marcus Meissner <meissner@suse.de>\n\nFrom-SVN: r125073", "tree": {"sha": "f9fc57995ca9957ad153664eb76e3a1d3b7c3a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9fc57995ca9957ad153664eb76e3a1d3b7c3a41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/comments", "author": null, "committer": null, "parents": [{"sha": "1094da913be99ab5768f3a37bb955ae60f85006d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1094da913be99ab5768f3a37bb955ae60f85006d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1094da913be99ab5768f3a37bb955ae60f85006d"}], "stats": {"total": 178, "additions": 150, "deletions": 28}, "files": [{"sha": "b659e780df078f47ed051619bed5c2fd4d5ca7b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -1,3 +1,11 @@\n+2007-05-25  Dirk Mueller  <dmueller@suse.de>\n+\t    Marcus Meissner <meissner@suse.de>\n+\n+\t* doc/extend.texi (alloc_size): New attribute.\n+\t* c-common.c (handle_alloc_size_attribute): New.\n+\t* tree-object-size.c (alloc_object_size): Use alloc_size\n+\tattribute, if available.\n+\n 2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (__builtin_ia32_vec_ext_v2df): Mark it"}, {"sha": "2edf807e91dabc41eed0d6dc2256c4686e3f8eae", "filename": "gcc/c-common.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -556,6 +556,7 @@ static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_alloc_size_attribute (tree *, tree, tree, int, bool *);\n \n static void check_function_nonnull (tree, int, tree *);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -650,6 +651,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_warn_unused_result_attribute },\n   { \"sentinel\",               0, 1, false, true, true,\n \t\t\t      handle_sentinel_attribute },\n+  { \"alloc_size\",\t      1, 2, false, true, true,\n+\t\t\t      handle_alloc_size_attribute },\n   { \"cold\",                   0, 0, true,  false, false,\n \t\t\t      handle_cold_attribute },\n   { \"hot\",                    0, 0, true,  false, false,\n@@ -5579,6 +5582,37 @@ handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"alloc_size\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_alloc_size_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n+\t\t\t     int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  tree params = TYPE_ARG_TYPES (*node);\n+  unsigned arg_count = 0;\n+\n+  for (; TREE_CHAIN (params); params = TREE_CHAIN (params))\n+    arg_count ++;\n+\n+  for (; args; args = TREE_CHAIN (args))\n+    {\n+      tree position = TREE_VALUE (args);\n+\n+      if (TREE_CODE (position) != INTEGER_CST\n+\t  || TREE_INT_CST_HIGH (position) \n+\t  || TREE_INT_CST_LOW (position) < 1\n+\t  || TREE_INT_CST_LOW (position) > arg_count )\n+\t{\n+\t  warning (OPT_Wattributes, \n+\t           \"alloc_size parameter outside range\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"returns_twice\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "5ebee3dcc51ce7a6d750d1e22024f4f29a47d661", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -1572,13 +1572,14 @@ The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n-@code{noreturn}, @code{returns_twice}, @code{noinline}, @code{always_inline},\n-@code{flatten}, @code{pure}, @code{const}, @code{nothrow}, @code{sentinel},\n-@code{format}, @code{format_arg}, @code{no_instrument_function},\n-@code{section}, @code{constructor}, @code{destructor}, @code{used},\n-@code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n-@code{alias}, @code{warn_unused_result}, @code{nonnull},\n-@code{gnu_inline} and @code{externally_visible}, @code{hot}, @code{cold}.\n+@code{alloc_size}, @code{noreturn}, @code{returns_twice}, @code{noinline},\n+@code{always_inline}, @code{flatten}, @code{pure}, @code{const},\n+@code{nothrow}, @code{sentinel}, @code{format}, @code{format_arg},\n+@code{no_instrument_function}, @code{section}, @code{constructor},\n+@code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n+@code{weak}, @code{malloc}, @code{alias}, @code{warn_unused_result},\n+@code{nonnull}, @code{gnu_inline} and @code{externally_visible},\n+@code{hot}, @code{cold}.\n Several other attributes are defined for functions on particular target\n systems.  Other attributes, including @code{section} are supported for\n variables declarations (@pxref{Variable Attributes}) and for types (@pxref{Type\n@@ -1611,6 +1612,30 @@ is not defined in the same translation unit.\n \n Not all target machines support this attribute.\n \n+@item alloc_size\n+@cindex @code{alloc_size} attribute\n+The @code{alloc_size} attribute is used to tell the compiler that the\n+function return value points to memory, where the size is given by\n+one or two of the functions parameters.  GCC uses this \n+information to improve the correctness of @code{__builtin_object_size}.\n+\n+The function parameter(s) denoting the allocated size are specified by\n+one or two integer arguments supplied to the attribute.  The allocated size\n+is either the value of the single function argument specified or the product\n+of the two function arguments specified.  Argument numbering starts at\n+one.\n+\n+For instance, \n+\n+@smallexample\n+void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))\n+void my_realloc(void* size_t) __attribute__((alloc_size(2)))\n+@end smallexample\n+\n+declares that my_calloc will return memory of the size given by\n+the product of parameter 1 and 2 and that my_realloc will return memory\n+of the size given by parameter 2.\n+\n @item always_inline\n @cindex @code{always_inline} function attribute\n Generally, functions are not inlined unless optimization is specified."}, {"sha": "ed0ee7f797963dbed19519bfeae0645ff1b94fb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -1,3 +1,8 @@\n+2007-05-25  Dirk Mueller  <dmueller@suse.de>\n+\t    Marcus Meissner <meissner@suse.de>\n+\n+\t* testsuite/gcc.dg/attr-alloc_size.c: New.\n+\n 2007-05-25  Simon Martin  <simartin@users.sourceforge.net>\n \t    Lee Millward  <lee.millward@gmail.com>\n "}, {"sha": "e646e5e3f7f6e007bb072664716d920a385916e6", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+extern void abort (void);\n+\n+#include \"../gcc.c-torture/execute/builtins/chk.h\"\n+\n+extern char *mallocminus1(int size) __attribute__((alloc_size(-1))); /* { dg-warning \"parameter outside range\" } */\n+extern char *malloc0(int size) __attribute__((alloc_size(0))); /* { dg-warning \"parameter outside range\" } */\n+extern char *malloc1(int size) __attribute__((alloc_size(1)));\n+extern char *malloc2(int empty, int size) __attribute__((alloc_size(2)));\n+extern char *calloc1(int size, int elements) __attribute__((alloc_size(1,2)));\n+extern char *calloc2(int size, int empty, int elements) __attribute__((alloc_size(1,3)));\n+extern char *balloc1(void *size) __attribute__((alloc_size(1)));\n+\n+void\n+test (void)\n+{\n+  char *p;\n+\n+  p = malloc0 (6);\n+  strcpy (p, \"Hello\");\n+  p = malloc1 (6);\n+  strcpy (p, \"Hello\");\n+  strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n+  p = malloc2 (424242, 6);\n+  strcpy (p, \"World\");\n+  strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n+  p = calloc1 (2, 5);\n+  strcpy (p, \"World\");\n+  strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n+  p = calloc2 (2, 424242, 5);\n+  strcpy (p, \"World\");\n+  strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n+}\n+"}, {"sha": "fee75a8e72af38985dc8425d68dadfd3e8b1d30c", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=51bc54a661221ccafb2e14dc0d0c2e1a9c621a2b", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"toplev.h\"\n #include \"diagnostic.h\"\n #include \"tree-flow.h\"\n #include \"tree-pass.h\"\n@@ -229,39 +230,52 @@ static unsigned HOST_WIDE_INT\n alloc_object_size (tree call, int object_size_type)\n {\n   tree callee, bytes = NULL_TREE;\n+  tree alloc_size;\n+  int arg1 = -1, arg2 = -1;\n \n   gcc_assert (TREE_CODE (call) == CALL_EXPR);\n \n   callee = get_callee_fndecl (call);\n-  if (callee\n-      && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n+  if (!callee)\n+    return unknown[object_size_type];\n+\n+  alloc_size = lookup_attribute (\"alloc_size\", TYPE_ATTRIBUTES (TREE_TYPE(callee)));\n+  if (alloc_size && TREE_VALUE (alloc_size))\n+    {\n+      tree p = TREE_VALUE (alloc_size);\n+\n+      arg1 = TREE_INT_CST_LOW (TREE_VALUE (p))-1;\n+      if (TREE_CHAIN (p))\n+\t  arg2 = TREE_INT_CST_LOW (TREE_VALUE (TREE_CHAIN (p)))-1;\n+    }\n+ \n+  if (DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n     switch (DECL_FUNCTION_CODE (callee))\n       {\n+      case BUILT_IN_CALLOC:\n+\targ2 = 1;\n+\t/* fall through */\n       case BUILT_IN_MALLOC:\n       case BUILT_IN_ALLOCA:\n-\tif (call_expr_nargs (call) == 1\n-\t    && TREE_CODE (CALL_EXPR_ARG (call, 0)) == INTEGER_CST)\n-\t  bytes = fold_convert (sizetype, CALL_EXPR_ARG (call, 0));\n-\tbreak;\n-      /*\n-      case BUILT_IN_REALLOC:\n-\tif (call_expr_nargs (call) == 2\n-\t    && TREE_CODE (CALL_EXPR_ARG (call, 1)) == INTEGER_CST)\n-\t  bytes = fold_convert (sizetype, CALL_EXPR_ARG (call, 1));\n-\tbreak;\n-\t*/\n-      case BUILT_IN_CALLOC:\n-\tif (call_expr_nargs (call) == 2\n-\t    && TREE_CODE (CALL_EXPR_ARG (call, 0)) == INTEGER_CST\n-\t    && TREE_CODE (CALL_EXPR_ARG (call, 1)) == INTEGER_CST)\n-\t  bytes = size_binop (MULT_EXPR,\n-\t\t\t      fold_convert (sizetype, CALL_EXPR_ARG (call, 0)),\n-\t\t\t      fold_convert (sizetype, CALL_EXPR_ARG (call, 1)));\n-\tbreak;\n+\targ1 = 0;\n       default:\n \tbreak;\n       }\n \n+  if (arg1 < 0 || arg1 >= call_expr_nargs (call)\n+      || TREE_CODE (CALL_EXPR_ARG (call, arg1)) != INTEGER_CST\n+      || (arg2 >= 0 \n+\t  && (arg2 >= call_expr_nargs (call)\n+\t      || TREE_CODE (CALL_EXPR_ARG (call, arg2)) != INTEGER_CST)))\n+    return unknown[object_size_type];\t  \n+\n+  if (arg2 >= 0)\n+    bytes = size_binop (MULT_EXPR,\n+\tfold_convert (sizetype, CALL_EXPR_ARG (call, arg1)),\n+\tfold_convert (sizetype, CALL_EXPR_ARG (call, arg2)));\n+  else if (arg1 >= 0)\n+    bytes = fold_convert (sizetype, CALL_EXPR_ARG (call, arg1));\n+\n   if (bytes && host_integerp (bytes, 1))\n     return tree_low_cst (bytes, 1);\n "}]}