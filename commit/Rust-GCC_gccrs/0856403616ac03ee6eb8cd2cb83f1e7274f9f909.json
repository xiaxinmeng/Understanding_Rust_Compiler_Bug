{"sha": "0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1NjQwMzYxNmFjMDNlZTZlYjhjZDJjYjgzZjFlNzI3NGY5ZjkwOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T13:48:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T13:48:24Z"}, "message": "[multiple changes]\n\n2010-09-10  Jose Ruiz  <ruiz@adacore.com>\n\n\t* exp_cg.adb (Is_Predefined_Dispatching_Operation): Add the \"__\" scope\n\tseparator when trying the pattern matching to detect predefined\n\tprimitive operations.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* bindgen.adb, atree.adb: Minor reformatting.\n\n2010-09-10  Ben Brosgol  <brosgol@adacore.com>\n\n\t* ug_words, gnat_ugn.texi: Revised \"Transitioning to 64-Bit GNAT for\n\tOpenVMS\" section.\n\nFrom-SVN: r164175", "tree": {"sha": "d05ec157509a93c044dd5ded989eb1c39b6b7136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05ec157509a93c044dd5ded989eb1c39b6b7136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/comments", "author": null, "committer": null, "parents": [{"sha": "8c4353b7c50bc8855a0abdd9d9514477de715a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4353b7c50bc8855a0abdd9d9514477de715a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4353b7c50bc8855a0abdd9d9514477de715a33"}], "stats": {"total": 241, "additions": 158, "deletions": 83}, "files": [{"sha": "c86e6235c8a446b7c2cbef71f994932ee29df903", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -1,3 +1,18 @@\n+2010-09-10  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* exp_cg.adb (Is_Predefined_Dispatching_Operation): Add the \"__\" scope\n+\tseparator when trying the pattern matching to detect predefined\n+\tprimitive operations.\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* bindgen.adb, atree.adb: Minor reformatting.\n+\n+2010-09-10  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* ug_words, gnat_ugn.texi: Revised \"Transitioning to 64-Bit GNAT for\n+\tOpenVMS\" section.\n+\n 2010-09-10  Doug Rupp  <rupp@adacore.com>\n \n \t* bindgen.adb: Minor comment fix for -H switch."}, {"sha": "6e01d7ed42e564eef37dfc494ef63b06e6b92f42", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -1261,7 +1261,7 @@ package body Atree is\n    -- New_Node_Breakpoint --\n    -------------------------\n \n-   procedure nn is -- New_Node_Breakpoint\n+   procedure nn is\n    begin\n       Write_Str (\"Watched node \");\n       Write_Int (Int (Watch_Node));\n@@ -1273,7 +1273,7 @@ package body Atree is\n    -- New_Node_Debugging_Output --\n    -------------------------------\n \n-   procedure nnd (N : Node_Id) is -- New_Node_Debugging_Output\n+   procedure nnd (N : Node_Id) is\n       Node_Is_Watched : constant Boolean := N = Watch_Node;\n \n    begin\n@@ -1666,7 +1666,7 @@ package body Atree is\n    -- Rewrite_Breakpoint --\n    -------------------------\n \n-   procedure rr is -- Rewrite_Breakpoint\n+   procedure rr is\n    begin\n       Write_Str (\"Watched node \");\n       Write_Int (Int (Watch_Node));\n@@ -1678,7 +1678,7 @@ package body Atree is\n    -- Rewrite_Debugging_Output --\n    ------------------------------\n \n-   procedure rrd (Old_Node, New_Node : Node_Id) is -- Rewrite_Debugging_Output\n+   procedure rrd (Old_Node, New_Node : Node_Id) is\n       Node_Is_Watched : constant Boolean := Old_Node = Watch_Node;\n \n    begin"}, {"sha": "cbcc96bbd65dcead67937bb842030b8fb4036d53", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -792,8 +792,9 @@ package body Bindgen is\n          Write_Statement_Buffer;\n \n          --  Generate call to Install_Handler\n-         --  In .NET, when binding with -z, we don't install the signal\n-         --  handler to let the caller handle the last exception handler.\n+\n+         --  In .NET, when binding with -z, we don't install the signal handler\n+         --  to let the caller handle the last exception handler.\n \n          if VM_Target /= CLI_Target\n            or else Bind_Main_Program"}, {"sha": "14d13908292d71addaa6168fc55b45e548e675db", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -271,12 +271,21 @@ package body Exp_CG is\n                for J in Predef_Names_95'Range loop\n                   Get_Name_String (Predef_Names_95 (J));\n \n-                  if Full_Name'Last - Suffix_Length > Name_Len\n+                  --  The predefined primitive operations are identified by the\n+                  --  names \"_size\", \"_alignment\", etc. If we try a pattern\n+                  --  matching against this string, we can wrongly match other\n+                  --  primitive operations like \"get_size\". To avoid this, we\n+                  --  add the \"__\" scope separator, which can only prepend\n+                  --  predefined primitive operations because other primitive\n+                  --  operations can neither start with an underline nor\n+                  --  contain two consecutive underlines in its name.\n+\n+                  if Full_Name'Last - Suffix_Length > Name_Len + 2\n                     and then\n                       Full_Name\n-                        (Full_Name'Last - Name_Len - Suffix_Length + 1\n+                        (Full_Name'Last - Name_Len - 2 - Suffix_Length + 1\n                            .. Full_Name'Last - Suffix_Length) =\n-                                                  Name_Buffer (1 .. Name_Len)\n+                      \"__\" & Name_Buffer (1 .. Name_Len)\n                   then\n                      --  For the equality operator the type of the two operands\n                      --  must also match.\n@@ -291,12 +300,12 @@ package body Exp_CG is\n                   for J in Predef_Names_05'Range loop\n                      Get_Name_String (Predef_Names_05 (J));\n \n-                     if Full_Name'Last - Suffix_Length > Name_Len\n+                     if Full_Name'Last - Suffix_Length > Name_Len + 2\n                        and then\n                          Full_Name\n-                           (Full_Name'Last - Name_Len - Suffix_Length + 1\n+                           (Full_Name'Last - Name_Len - 2 - Suffix_Length + 1\n                               .. Full_Name'Last - Suffix_Length) =\n-                                                 Name_Buffer (1 .. Name_Len)\n+                         \"__\" & Name_Buffer (1 .. Name_Len)\n                      then\n                         return True;\n                      end if;"}, {"sha": "e22ac66ef48ef704bace0c9f8f4b2b89b8e11e87", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 119, "deletions": 71, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -8057,6 +8057,7 @@ be presented in subsequent sections.\n * Binder Error Message Control::\n * Elaboration Control::\n * Output Control::\n+* Dynamic Allocation Control::\n * Binding with Non-Ada Main Programs::\n * Binding Programs with No Main Subprogram::\n @end menu\n@@ -8168,6 +8169,17 @@ flag checks are generated.\n @cindex @option{^-h^/HELP^} (@command{gnatbind})\n Output usage (help) information\n \n+@item ^-H32^/32_MALLOC^\n+@cindex @option{^-H32^/32_MALLOC^} (@command{gnatbind})\n+Use 32-bit allocations for @code{__gnat_malloc} (and thus for access types).\n+For further details see @ref{Dynamic Allocation Control}.\n+\n+@item ^-H64^/64_MALLOC^\n+@cindex @option{^-H32^/32_MALLOC^} (@command{gnatbind})\n+Use 64-bit allocations for @code{__gnat_malloc} (and thus for access types).\n+@cindex @code{__gnat_malloc}\n+For further details see @ref{Dynamic Allocation Control}.\n+\n @item ^-I^/SEARCH^\n @cindex @option{^-I^/SEARCH^} (@command{gnatbind})\n Specify directory to be searched for source and ALI files.\n@@ -8596,6 +8608,35 @@ be used to improve code generation in some cases.\n \n @end table\n \n+@node Dynamic Allocation Control\n+@subsection Dynamic Allocation Control\n+\n+@noindent\n+The heap control switches -- @option{-H32} and @option{-H64} --\n+determine whether dynamic allocation uses 32-bit or 64-bit memory.\n+They only affect compiler-generated allocations via @code{__gnat_malloc};\n+explicit calls to @code{malloc} and related functions from the C\n+run-time library are unaffected.\n+\n+@table @option\n+@item -H32\n+Allocate memory on 32-bit heap\n+\n+@item -H64\n+Allocate memory on 64-bit heap.  This is the default\n+unless explicitly overridden by a @code{'Size} clause on the access type.\n+@end table\n+\n+@ifset vms\n+@noindent\n+See also @ref{Access types and 32/64-bit allocation}.\n+@end ifset\n+@ifclear vms\n+@noindent\n+These switches are only effective on VMS platforms.\n+@end ifclear\n+\n+\n @node Binding with Non-Ada Main Programs\n @subsection Binding with Non-Ada Main Programs\n \n@@ -26509,10 +26550,11 @@ Such code will be referred to below as @emph{64-bit code}.\n \n @menu\n * Address types::\n-* Access types::\n+* Access types and 32/64-bit allocation::\n * Unchecked conversions::\n * Predefined constants::\n * Interfacing with C::\n+* 32/64-bit descriptors::\n * Experience with source compatibility::\n @end menu\n \n@@ -26527,9 +26569,13 @@ approach has been taken:\n @itemize @bullet\n @item\n @code{System.Address} always has a size of 64 bits\n+@cindex @code{System.Address} size\n+@cindex @code{Address} size\n \n @item\n @code{System.Short_Address} is a 32-bit subtype of @code{System.Address}\n+@cindex @code{System.Short_Address} size\n+@cindex @code{Short_Address} size\n @end itemize\n \n @noindent\n@@ -26568,31 +26614,64 @@ required in any code setting or accessing the field; the compiler will\n automatically perform any needed conversions between address\n formats.\n \n-@node Access types\n-@subsubsection Access types\n+@node Access types and 32/64-bit allocation\n+@subsubsection Access types and 32/64-bit allocation\n+@cindex 32-bit allocation\n+@cindex 64-bit allocation\n \n @noindent\n-By default, objects designated by access values are always\n-allocated in the 32-bit\n-address space. Thus legacy code will never contain\n-any objects that are not addressable with 32-bit addresses, and\n-the compiler will never raise exceptions as result of mixing\n-32-bit and 64-bit addresses.\n+By default, objects designated by access values are always allocated in\n+the 64-bit address space, and access values themselves are represented\n+in 64 bits.  If these defaults are not appropriate, and 32-bit allocation\n+is required (for example if the address of an allocated object is assigned\n+to a @code{Short_Address} variable), then several alternatives are available:\n \n-However, the access values themselves are represented in 64 bits, for optimum\n-performance and future compatibility with 64-bit code. As was\n-the case with @code{System.Address}, the compiler will give an error message\n-if an object or record component has a representation clause that\n-requires the access value to fit in 32 bits. In such a situation,\n-an explicit size clause for the access type, specifying 32 bits,\n-will have the desired effect.\n+@itemize @bullet\n+@item\n+A pool-specific access type (ie, an @w{Ada 83} access type, whose\n+definition is @code{access T} versus @code{access all T} or\n+@code{access constant T}), may be declared with a @code{'Size} representation\n+clause that establishes the size as 32 bits.\n+In such circumstances allocations for that type will\n+be from the 32-bit heap.  Such a clause is not permitted\n+for a general access type (declared with @code{access all} or\n+@code{access constant}) as values of such types must be able to refer\n+to any object of the designated type, including objects residing outside\n+the 32-bit address range.  Existing @w{Ada 83} code will not contain such\n+type definitions, however, since general access types were introduced\n+in @w{Ada 95}.\n+\n+@item\n+Switches for @command{GNAT BIND} control whether the internal GNAT\n+allocation routine @code{__gnat_malloc} uses 64-bit or 32-bit allocations.\n+@cindex @code{__gnat_malloc}\n+The switches are respectively @option{-H64} (the default) and\n+@option{-H32}.\n+@cindex @option{-H32} (@command{gnatbind})\n+@cindex @option{-H64} (@command{gnatbind})\n+\n+@item\n+The environment variable (logical name) @code{GNAT$NO_MALLOC_64}\n+@cindex @code{GNAT$NO_MALLOC_64} environment variable\n+may be used to force @code{__gnat_malloc} to use 32-bit allocation.\n+If this variable is left\n+undefined, or defined as @code{\"DISABLE\"}, @code{\"FALSE\"}, or @code{\"0\"},\n+then the default (64-bit) allocation is used.\n+If defined as @code{\"ENABLE\"}, @code{\"TRUE\"}, or @code{\"1\"},\n+then 32-bit allocation is used.  The gnatbind qualifiers described above\n+override this logical name.\n+\n+@item\n+A ^gcc switch^gcc switch^ for OpenVMS, @option{-mno-malloc64}, operates\n+@cindex @option{-mno-malloc64} (^gcc^gcc^)\n+at a low level to convert explicit calls to @code{malloc} and related\n+functions from the C run-time library so that they perform allocations\n+in the 32-bit heap.\n+Since all internal allocations from GNAT use @code{__gnat_malloc},\n+this switch is not required unless the program makes explicit calls on\n+@code{malloc} (or related functions) from interfaced C code.\n+@end itemize\n \n-General access types (declared with @code{access all}) can never be\n-32 bits, as values of such types must be able to refer to any object\n-of the  designated type,\n-including objects residing outside the 32-bit address range.\n-Existing Ada 83 code will not contain such type definitions,\n-however, since general access types were introduced in Ada 95.\n \n @node Unchecked conversions\n @subsubsection Unchecked conversions\n@@ -26665,6 +26744,20 @@ pragma Convention(C, int_star);\n for int_star'Size use 64;  -- Necessary to get 64 and not 32 bits\n @end smallexample\n \n+@node 32/64-bit descriptors\n+@subsubsection 32/64-bit descriptors\n+\n+@noindent\n+By default, GNAT uses a 64-bit descriptor mechanism.  For an imported\n+subprogram (i.e., a subprogram identified by pragma @code{Import_Function},\n+@code{Import_Procedure}, or @code{Import_Valued_Procedure}) that specifies\n+@code{Short_Descriptor} as its mechanism, a 32-bit descriptor is used.\n+@cindex @code{Short_Descriptor} mechanism for imported subprograms\n+\n+If the configuration pragma @code{Short_Descriptors} is supplied, then\n+all descriptors will be 32 bits.\n+@cindex pragma @code{Short_Descriptors}\n+\n @node Experience with source compatibility\n @subsubsection Experience with source compatibility\n \n@@ -26697,8 +26790,6 @@ these sorts of potential source code porting problems.\n * Making code 64 bit clean::\n * Allocating memory from the 64 bit storage pool::\n * Restrictions on use of 64 bit objects::\n-* Using 64 bit storage pools by default::\n-* General access types::\n * STARLET and other predefined libraries::\n @end menu\n \n@@ -26742,13 +26833,10 @@ Any attempt to do this will raise @code{Constraint_Error}.\n @subsubsection Allocating memory from the 64-bit storage pool\n \n @noindent\n-For any access type @code{T} that potentially requires memory allocations\n-beyond the 32-bit address space,\n-use the following representation clause:\n-\n-@smallexample @c ada\n-   for T'Storage_Pool use System.Pool_64;\n-@end smallexample\n+By default, all allocations -- for both pool-specific and general\n+access types -- use the 64-bit storage pool.  To override\n+this default, for an individual access type or globally, see\n+@ref{Access types and 32/64-bit allocation}.\n \n @node Restrictions on use of 64 bit objects\n @subsubsection Restrictions on use of 64-bit objects\n@@ -26763,46 +26851,6 @@ or assigning it to a variable of type @code{Short_Address}, will cause\n no exception is raised and execution\n will become erroneous.\n \n-@node Using 64 bit storage pools by default\n-@subsubsection Using 64-bit storage pools by default\n-\n-@noindent\n-In some cases it may be desirable to have the compiler allocate\n-from 64-bit storage pools by default. This may be the case for\n-libraries that are 64-bit clean, but may be used in both 32-bit\n-and 64-bit contexts. For these cases the following configuration\n-pragma may be specified:\n-\n-@smallexample @c ada\n-  pragma Pool_64_Default;\n-@end smallexample\n-\n-@noindent\n-Any code compiled in the context of this pragma will by default\n-use the @code{System.Pool_64} storage pool. This default may be overridden\n-for a specific access type @code{T} by the representation clause:\n-\n-@smallexample @c ada\n-   for T'Storage_Pool use System.Pool_32;\n-@end smallexample\n-\n-@noindent\n-Any object whose address may be passed to a subprogram with a\n-@code{Short_Address} argument, or assigned to a variable of type\n-@code{Short_Address}, needs to be allocated from this pool.\n-\n-@node General access types\n-@subsubsection General access types\n-\n-@noindent\n-Objects designated by access values from a\n-general access type (declared with @code{access all}) are never allocated\n-from a 64-bit storage pool. Code that uses general access types will\n-accept objects allocated in either 32-bit or 64-bit address spaces,\n-but never allocate objects outside the 32-bit address space.\n-Using general access types ensures maximum compatibility with both\n-32-bit and 64-bit code.\n-\n @node STARLET and other predefined libraries\n @subsubsection STARLET and other predefined libraries\n "}, {"sha": "5f694b9db847aa0831e9d88d5c95c76a7af96211", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0856403616ac03ee6eb8cd2cb83f1e7274f9f909/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=0856403616ac03ee6eb8cd2cb83f1e7274f9f909", "patch": "@@ -218,3 +218,5 @@ stderr          ^ SYS$ERROR\n -O1             ^ /OPTIMIZE=SOME\n -O2             ^ /OPTIMIZE=ALL\n -O3             ^ /OPTIMIZE=INLINING\n+-H32            ^ /32_MALLOC\n+-H64            ^ /64_MALLOC"}]}