{"sha": "6c8875e595d6b48b29291126488915277aeafbbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4ODc1ZTU5NWQ2YjQ4YjI5MjkxMTI2NDg4OTE1Mjc3YWVhZmJiYg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-25T02:27:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-25T02:27:55Z"}, "message": "eabi.h: Define TARGET_SPE_ABI, TARGET_SPE, TARGET_ISEL, and TARGET_FPRS.\n\n2002-07-24  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/rs6000/eabi.h: Define TARGET_SPE_ABI, TARGET_SPE,\n\tTARGET_ISEL, and TARGET_FPRS.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document\n\t-mabi=spe, -mabi=no-spe, and -misel=.\n\n\t* config/rs6000/rs6000-protos.h: Add output_isel.\n\tMove vrsave_operation prototype here.\n\n\t* config/rs6000/rs6000.md (sminsi3): Allow pattern for TARGET_ISEL.\n\t(smaxsi3): Same.\n\t(uminsi3): Same.\n\t(umaxsi3): Same.\n\t(abssi2_nopower): Disallow when TARGET_ISEL.\n\t(*ne0): Same.\n\t(negsf2): Change to expand and rename old pattern to *negsf2.\n\t(abssf2): Change to expand and rename old pattern to *abssf2.\n\n\tNew expanders: fix_truncsfsi2, floatunssisf2, floatsisf2,\n\tfixunssfsi2.\n\n\tChange patterns that check for TARGET_HARD_FLOAT or\n\tTARGET_SOFT_FLOAT to also check TARGET_FPRS.\n\n\t* config/rs6000/rs6000.c: New globals: rs6000_spe_abi,\n\trs6000_isel, rs6000_fprs, rs6000_isel_string.\n\t(rs6000_override_options): Add 8540 case to\n\tprocessor_target_table.\n\tSet rs6000_isel for the 8540.\n\tCall rs6000_parse_isel_option.\n\t(enable_mask_for_builtins): New.\n\t(rs6000_parse_isel_option): New.\n\t(rs6000_parse_abi_options): Add spe and no-spe.\n\t(easy_fp_constant): Treat !TARGET_FPRS as soft-float.\n\t(rs6000_legitimize_address): Check for TARGET_FPRS when checking\n\tfor TARGET_HARD_FLOAT.\n\tAdd case for SPE_VECTOR_MODE.\n\t(rs6000_legitimize_reload_address): Handle SPE vector modes.\n\t(rs6000_legitimate_address): Disallow PRE_INC/PRE_DEC for SPE\n\tvector modes.\n\tCheck for TARGET_FPRS when checking for TARGET_HARD_FLOAT.\n\t(rs6000_emit_move): Check for TARGET_FPRS.\n\tAdd cases for SPE vector modes.\n\t(function_arg_boundary): Return 64 for SPE vector modes.\n\t(function_arg_advance): Check for TARGET_FPRS and\n\tHandle SPE vectors.\n\t(function_arg): Same.\n\t(setup_incoming_varargs): Check for TARGET_FPRS.\n\t(rs6000_va_arg): Same.\n\t(struct builtin_description): Un-constify mask field.  Move up in\n\tfile.\n\t(bdesc_2arg): Un-constify and add SPE builtins.\n\t(bdesc_1arg): Same.\n\t(bdesc_spe_predicates): New.\n\t(bdesc_spe_evsel): New.\n\t(rs6000_expand_unop_builtin): Add SPE 5-bit literal builtins.\n\t(rs6000_expand_binop_builtin): Same.\n\t(bdesc_2arg_spe): New.\n\t(spe_expand_builtin): New.\n\t(spe_expand_predicate_builtin): New.\n\t(spe_expand_evsel_builtin): New.\n\t(rs6000_expand_builtin): Call spe_expand_builtin for SPE.\n\t(rs6000_init_builtins): Initialize SPE builtins.  Call\n\trs6000_common_init_builtins.\n\t(altivec_init_builtins): Move all non-altivec builtin code to...\n\t(rs6000_common_init_builtins): ...here.  New function.\n\t(branch_positive_comparison_operator): Allow NE code for SPE.\n\t(ccr_bit): Return correct ccr bit for SPE fp.\n\t(print_operand): Emit crnor in 'D' case for SPE.\n\tNew case 't'.\n\tAdd SPE code for 'y' case.\n\t(rs6000_generate_compare): Generate rtl for SPE fp.\n\t(output_cbranch): Handle SPE hard floats.\n\t(rs6000_emit_cmove): Handle isel.\n\t(rs6000_emit_int_cmove): New.\n\t(output_isel): New.\n\t(rs6000_stack_info): Adjust stack frame so GPRs are saved in\n\t64-bits for SPE.\n\t(debug_stack_info): Add SPE info.\n\t(gen_frame_mem_offset): New.\n\t(rs6000_emit_prologue): Save GPRs in 64-bits for SPE abi.\n\tChange mode of frame pointer, when saving it, to Pmode.\n\t(rs6000_emit_epilogue): Restore GPRs in 64-bits for SPE abi.\n\tMisc cleanups and use gen_frame_mem_offset when appropriate.\n\n\t* config/rs6000/rs6000.h (processor_type): Add PROCESSOR_PPC8540.\n\t(TARGET_SPE_ABI): New.\n\t(TARGET_SPE): New.\n\t(TARGET_ISEL): New.\n\t(TARGET_FPRS): New.\n\t(FIXED_SCRATCH): New.\n\t(RTX_COSTS): Add PROCESSOR_PPC8540.\n\t(ASM_CPU_SPEC): Add case for 8540.\n\t(TARGET_OPTIONS): Add isel= case.\n\t(rs6000_spe_abi): New.\n\t(rs6000_isel): New.\n\t(rs6000_fprs): New.\n\t(rs6000_isel_string): New.\n\t(UNITS_PER_SPE_WORD): New.\n\t(LOCAL_ALIGNMENT): Adjust for SPE.\n\t(HARD_REGNO_MODE_OK): Same.\n\t(DATA_ALIGNMENT): Same.\n\t(MEMBER_TYPE_FORCES_BLK): New.\n\t(FIRST_PSEUDO_REGISTER): Set to 113.\n\t(FIXED_REGISTERS): Add SPE registers.\n\t(reg_class): Same.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(REGISTER_NAMES): Same.\n\t(DEBUG_REGISTER_NAMES): Same.\n\t(ADDITIONAL_REGISTER_NAMES): Same.\n\t(CALL_USED_REGISTERS): Same.\n\t(CALL_REALLY_USED_REGISTERS): Same.\n\t(SPE_ACC_REGNO): New.\n\t(SPEFSCR_REGNO): New.\n\t(SPE_SIMD_REGNO_P): New.\n\t(HARD_REGNO_NREGS): Adjust for SPE.\n\t(VECTOR_MODE_SUPPORTED_P): Same.\n\t(REGNO_REG_CLASS): Same.\n\t(FUNCTION_VALUE): Same.\n\t(LIBCALL_VALUE): Same.\n\t(LEGITIMATE_OFFSET_ADDRESS_P): Same.\n\t(SPE_VECTOR_MODE): New.\n\t(CONDITIONAL_REGISTER_USAGE): Disable FPRs when target does FP on\n\tthe GPRs.  Set FIXED_SCRATCH fixed in SPE case.\n\t(rs6000_stack): Add spe_gp_size, spe_padding_size,\n\tspe_gp_save_offset.\n\t(USE_FP_FOR_ARG_P): Check for TARGET_FPRS.\n\t(LEGITIMATE_LO_SUM_ADDRESS_P): Same.\n\t(SPE_CONST_OFFSET_OK): New.\n\t(rs6000_builtins): Add SPE builtins.\n\n\t* testsuite/gcc.dg/ppc-spe.c: New.\n\n\t* config/rs6000/eabispe.h: New.\n\n\t* config/rs6000/spe.h: New.\n\n\t* config/rs600/spe.md: New.\n\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n\t__SIMD__ for TARGET_SPE.\n\n\t* config.gcc: Add powerpc-*-eabispe* case.\n\tAdd spe.h to user headers for powerpc.\n\nFrom-SVN: r55732", "tree": {"sha": "cc7b821b535509c423d1a6028516019a6e45c2a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7b821b535509c423d1a6028516019a6e45c2a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c8875e595d6b48b29291126488915277aeafbbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8875e595d6b48b29291126488915277aeafbbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8875e595d6b48b29291126488915277aeafbbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8875e595d6b48b29291126488915277aeafbbb/comments", "author": null, "committer": null, "parents": [{"sha": "a3170dc629df017415b0ec157bedb7e7c1aeb440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3170dc629df017415b0ec157bedb7e7c1aeb440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3170dc629df017415b0ec157bedb7e7c1aeb440"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "f5e0febc5b0557770afa63b32b13274beebe66b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8875e595d6b48b29291126488915277aeafbbb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8875e595d6b48b29291126488915277aeafbbb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6c8875e595d6b48b29291126488915277aeafbbb", "patch": "@@ -449,6 +449,8 @@ in the following sections.\n -mcall-aix -mcall-sysv -mcall-netbsd @gol\n -maix-struct-return -msvr4-struct-return\n -mabi=altivec -mabi=no-altivec @gol\n+-mabi=spe -mabi=no-spe @gol\n+-misel=yes -misel=no @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb -msdata @gol\n -msdata=@var{opt}  -mvxworks -mwindiss -G @var{num} -pthread}\n@@ -6493,6 +6495,21 @@ allow access to the AltiVec instruction set.  You may also need to set\n @option{-mabi=altivec} to adjust the current ABI with AltiVec ABI\n enhancements.\n \n+@item -mabi=spe\n+@opindex mabi=spe\n+Extend the current ABI with SPE ABI extensions.  This does not change\n+the default ABI, instead it adds the SPE ABI extensions to the current\n+ABI@.\n+\n+@item -mabi=no-spe\n+@opindex mabi=no-spe\n+Disable Booke SPE ABI extensions for the current ABI.\n+\n+@item -misel=@var{yes/no}\n+@itemx -misel\n+@opindex misel\n+This switch enables or disables the generation of ISEL instructions.\n+\n @item -mfull-toc\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc"}]}