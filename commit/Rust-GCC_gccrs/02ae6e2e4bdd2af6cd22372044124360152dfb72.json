{"sha": "02ae6e2e4bdd2af6cd22372044124360152dfb72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhZTZlMmU0YmRkMmFmNmNkMjIzNzIwNDQxMjQzNjAxNTJkZmI3Mg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-10-19T07:51:54Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-10-19T07:51:54Z"}, "message": "parse.y (process_imports): Consider that one might be trying to import an innerclass.\n\n2000-07-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * parse.y (process_imports): Consider that one might be trying to\n        import an innerclass. Fixes gcj/254\n\n(http://gcc.gnu.org/ml/gcc-patches/2000-10/msg00631.html)\n\nFrom-SVN: r36948", "tree": {"sha": "19ef220b02fc75ecf8472a6d3f89cfd6d0633415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ef220b02fc75ecf8472a6d3f89cfd6d0633415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ae6e2e4bdd2af6cd22372044124360152dfb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ae6e2e4bdd2af6cd22372044124360152dfb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ae6e2e4bdd2af6cd22372044124360152dfb72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ae6e2e4bdd2af6cd22372044124360152dfb72/comments", "author": null, "committer": null, "parents": [{"sha": "cc3f7b54c99342c8c8b22c8571c99cd982d25a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3f7b54c99342c8c8b22c8571c99cd982d25a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3f7b54c99342c8c8b22c8571c99cd982d25a7f"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "191b20930e865e3fd0b7f373e32ea7ea447523d2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ae6e2e4bdd2af6cd22372044124360152dfb72/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ae6e2e4bdd2af6cd22372044124360152dfb72/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=02ae6e2e4bdd2af6cd22372044124360152dfb72", "patch": "@@ -669,6 +669,11 @@ Sun Aug  6 00:47:24 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \t* parse.h (SET_TYPE_FOR_RESOLUTION): Use GET_CPC.\n \t* parse.y (method_header): Likewise.\n \n+2000-07-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (process_imports): Consider that one might be trying to\n+\timport an innerclass. Fixes gcj/254\n+\n 2000-07-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (find_as_inner_class): Handle the case where the"}, {"sha": "15426246734bb05ed516eb20340548c943d43ff0", "filename": "gcc/java/parse.y", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ae6e2e4bdd2af6cd22372044124360152dfb72/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ae6e2e4bdd2af6cd22372044124360152dfb72/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=02ae6e2e4bdd2af6cd22372044124360152dfb72", "patch": "@@ -6492,10 +6492,29 @@ process_imports ()\n       /* Don't load twice something already defined. */\n       if (IDENTIFIER_CLASS_VALUE (to_be_found))\n \tcontinue;\n-      QUALIFIED_P (to_be_found) = 1;\n-      load_class (to_be_found, 0);\n-      error_found =\n-\tcheck_pkg_class_access (to_be_found, TREE_PURPOSE (import));\n+      \n+      while (1)\n+\t{\n+\t  tree left;\n+\n+\t  QUALIFIED_P (to_be_found) = 1;\n+\t  load_class (to_be_found, 0);\n+\t  error_found =\n+\t    check_pkg_class_access (to_be_found, TREE_PURPOSE (import));\n+\t  \n+\t  /* We found it, we can bail out */\n+\t  if (IDENTIFIER_CLASS_VALUE (to_be_found))\n+\t    break;\n+\n+\t  /* We haven't found it. Maybe we're trying to access an\n+\t     inner class.  The only way for us to know is to try again\n+\t     after having dropped a qualifier. If we can't break it further,\n+\t     we have an error. */\n+\t  if (breakdown_qualified (&left, NULL, to_be_found))\n+\t    break;\n+\n+\t  to_be_found = left;\n+\t}\n       if (!IDENTIFIER_CLASS_VALUE (to_be_found))\n \t{\n \t  parse_error_context (TREE_PURPOSE (import),"}]}