{"sha": "acf4fe96f12341da253fa9a932947581690122a4", "node_id": "C_kwDOANBUbNoAKGFjZjRmZTk2ZjEyMzQxZGEyNTNmYTlhOTMyOTQ3NTgxNjkwMTIyYTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-02T11:53:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-02T16:53:13Z"}, "message": "libstdc++: Allow exception classes to move fully-dynamic strings\n\nThe move constructor for the fully-dynamic std::basic_string was not\nnoexcept until recently, so the std::logic_error and std::runtime_error\nmove constructors were defined to make non-throwing copies of their\nstring members, instead of potentially-throwing moves.\n\nNow that move construction is always noexecpt, the exception classes can\nalways move the string. The fully-dynamic string move assignment was\nalways noexcept, so I don't know why I special-cased the move assignment\noperators of the exception classes. That can be changed too.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/cow-stdexcept.cc [_GLIBCXX_FULY_DYNAMIC_STRING]\n\t(logic_error, runtime_error): Remove custom definitions.", "tree": {"sha": "6c2d5451325ac05788edbd12aaf06bf8b39e588f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c2d5451325ac05788edbd12aaf06bf8b39e588f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acf4fe96f12341da253fa9a932947581690122a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf4fe96f12341da253fa9a932947581690122a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf4fe96f12341da253fa9a932947581690122a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf4fe96f12341da253fa9a932947581690122a4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e98f524fdb80c16e3395f20fee930fbcad5562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e98f524fdb80c16e3395f20fee930fbcad5562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e98f524fdb80c16e3395f20fee930fbcad5562"}], "stats": {"total": 20, "additions": 0, "deletions": 20}, "files": [{"sha": "2d47acb55b205744fde3c1638087dde91261455b", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acf4fe96f12341da253fa9a932947581690122a4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acf4fe96f12341da253fa9a932947581690122a4/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=acf4fe96f12341da253fa9a932947581690122a4", "patch": "@@ -57,28 +57,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // These operations are noexcept even though copying a COW string is not,\n   // but we know that the string member in an exception has not been \"leaked\"\n   // so copying is a simple reference count increment.\n-  // For the fully dynamic string moves are not noexcept (due to needing to\n-  // allocate an empty string) so we just define the moves as copies here.\n \n   logic_error::logic_error(const logic_error& e) noexcept\n   : exception(e), _M_msg(e._M_msg) { }\n \n   logic_error& logic_error::operator=(const logic_error& e) noexcept\n   { _M_msg = e._M_msg; return *this; }\n \n-#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n   logic_error::logic_error(logic_error&& e) noexcept = default;\n \n   logic_error&\n   logic_error::operator=(logic_error&& e) noexcept = default;\n-#else\n-  logic_error::logic_error(logic_error&& e) noexcept\n-  : exception(e), _M_msg(e._M_msg) { }\n-\n-  logic_error&\n-  logic_error::operator=(logic_error&& e) noexcept\n-  { _M_msg = e._M_msg; return *this; }\n-#endif\n \n   runtime_error::runtime_error(const runtime_error& e) noexcept\n   : exception(e), _M_msg(e._M_msg) { }\n@@ -87,19 +76,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   runtime_error::operator=(const runtime_error& e) noexcept\n   { _M_msg = e._M_msg; return *this; }\n \n-#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n   runtime_error::runtime_error(runtime_error&& e) noexcept = default;\n \n   runtime_error&\n   runtime_error::operator=(runtime_error&& e) noexcept = default;\n-#else\n-  runtime_error::runtime_error(runtime_error&& e) noexcept\n-  : exception(e), _M_msg(e._M_msg) { }\n-\n-  runtime_error&\n-  runtime_error::operator=(runtime_error&& e) noexcept\n-  { _M_msg = e._M_msg; return *this; }\n-#endif\n \n   // New C++11 constructors:\n "}]}