{"sha": "15c8ad00d81bf015d73de01696e5a28ee3aac003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjOGFkMDBkODFiZjAxNWQ3M2RlMDE2OTZlNWEyOGVlM2FhYzAwMw==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-06T22:35:45Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-30T21:53:40Z"}, "message": "rs6000: Add tests for SSE4.1 \"floor\" intrinsics\n\nAdd the tests for _mm_floor_pd, _mm_floor_ps, _mm_floor_sd, _mm_floor_ss.\nThese are modelled after (and depend upon parts of) the tests for\n_mm_ceil intrinsics, recently posted.\n\nCopy a test for _mm_floor_sd from gcc/testsuite/gcc.target/i386.\n\n2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-floorpd.c: New.\n\t* gcc.target/powerpc/sse4_1-floorps.c: New.\n\t* gcc.target/powerpc/sse4_1-floorsd.c: New.\n\t* gcc.target/powerpc/sse4_1-floorss.c: New.\n\t* gcc.target/powerpc/sse4_1-roundpd-2.c: Copy from\n\tgcc/testsuite/gcc.target/i386 and adjust dg directives to suit.", "tree": {"sha": "e11bdd8c5ffd4caac65505ddd3eeb3f967ba8bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11bdd8c5ffd4caac65505ddd3eeb3f967ba8bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c8ad00d81bf015d73de01696e5a28ee3aac003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c8ad00d81bf015d73de01696e5a28ee3aac003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c8ad00d81bf015d73de01696e5a28ee3aac003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c8ad00d81bf015d73de01696e5a28ee3aac003/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f500715438761f59de5fb992267748c5d4dc4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f500715438761f59de5fb992267748c5d4dc4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f500715438761f59de5fb992267748c5d4dc4b6"}], "stats": {"total": 342, "additions": 342, "deletions": 0}, "files": [{"sha": "ad21644f50c46071471ea09017ef8a737365f9b5", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-floorpd.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorpd.c?ref=15c8ad00d81bf015d73de01696e5a28ee3aac003", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_pd (x)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data data[] = {\n+  { .value = { .f = {  0.00,  0.25 } }, .answer = {  0.0,  0.0 } },\n+  { .value = { .f = {  0.50,  0.75 } }, .answer = {  0.0,  0.0 } },\n+\n+  { { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffdp+50 } },\n+           {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { { .f = {  0x1.ffffffffffffep+50,  0x1.0000000000000p+51 } },\n+           {  0x1.ffffffffffffcp+50,  0x1.0000000000000p+51 } },\n+  { { .f = {  0x1.0000000000000p+51,  0x1.0000000000001p+51 } },\n+           {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { { .f = {  0x1.0000000000002p+51,  0x1.0000000000003p+51 } },\n+           {  0x1.0000000000002p+51,  0x1.0000000000002p+51 } },\n+\n+  { { .f = {  0x1.ffffffffffffep+51,  0x1.fffffffffffffp+51 } },\n+           {  0x1.ffffffffffffep+51,  0x1.ffffffffffffep+51 } },\n+  { { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+           {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+           { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { { .f = { -0x1.fffffffffffffp+51, -0x1.ffffffffffffep+52 } },\n+           { -0x1.0000000000000p+52, -0x1.ffffffffffffep+52 } },\n+\n+  { { .f = { -0x1.0000000000003p+51, -0x1.0000000000002p+51 } },\n+           { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } },\n+  { { .f = { -0x1.0000000000001p+51, -0x1.0000000000000p+51 } },\n+           { -0x1.0000000000002p+51, -0x1.0000000000000p+51 } },\n+  { { .f = { -0x1.fffffffffffffp+50, -0x1.ffffffffffffep+50 } },\n+           { -0x1.0000000000000p+51, -0x1.0000000000000p+51 } },\n+  { { .f = { -0x1.ffffffffffffdp+50, -0x1.ffffffffffffcp+50 } },\n+           { -0x1.0000000000000p+51, -0x1.ffffffffffffcp+50 } },\n+\n+  { { .f = { -1.00, -0.75 } }, { -1.0, -1.0 } },\n+  { { .f = { -0.50, -0.25 } }, { -1.0, -1.0 } }\n+};\n+\n+#include \"sse4_1-round.h\""}, {"sha": "a53ef9aa9e8b26d22244252548637553bef6e670", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-floorps.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorps.c?ref=15c8ad00d81bf015d73de01696e5a28ee3aac003", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, mode) _mm_floor_ps (x)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data data[] = {\n+  { { .f = {  0.00,  0.25,  0.50,  0.75 } }, {  0.0,  0.0,  0.0,  0.0 } },\n+\n+  { { .f = {  0x1.fffff8p+21,  0x1.fffffap+21,\n+\t      0x1.fffffcp+21,  0x1.fffffep+21 } },\n+           {  0x1.fffff8p+21,  0x1.fffff8p+21,\n+\t      0x1.fffff8p+21,  0x1.fffff8p+21 } },\n+\n+  { { .f = {  0x1.fffffap+22,  0x1.fffffcp+22,\n+\t      0x1.fffffep+22,  0x1.fffffep+23 } },\n+           {  0x1.fffff8p+22,  0x1.fffffcp+22,\n+\t      0x1.fffffcp+22,  0x1.fffffep+23 } },\n+\n+  { { .f = { -0x1.fffffep+23, -0x1.fffffep+22,\n+\t     -0x1.fffffcp+22, -0x1.fffffap+22 } },\n+           { -0x1.fffffep+23, -0x1.000000p+23,\n+\t     -0x1.fffffcp+22, -0x1.fffffcp+22 } },\n+\n+  { { .f = { -0x1.fffffep+21, -0x1.fffffcp+21,\n+\t     -0x1.fffffap+21, -0x1.fffff8p+21 } },\n+           { -0x1.000000p+22, -0x1.000000p+22,\n+\t     -0x1.000000p+22, -0x1.fffff8p+21 } },\n+\n+  { { .f = { -1.00, -0.75, -0.50, -0.25 } }, { -1.0, -1.0, -1.0, -1.0 } }\n+};\n+\n+#include \"sse4_1-round.h\""}, {"sha": "e4ebc550556fdaacdc43fbf850b64d5dfc57bc6e", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-floorsd.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorsd.c?ref=15c8ad00d81bf015d73de01696e5a28ee3aac003", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, y) _mm_floor_sd (x, y)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffdp+50, IGNORED } },\n+    .answer = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+50, IGNORED } },\n+    .answer = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+50, IGNORED } },\n+    .answer = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+51, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+51, IGNORED } },\n+    .answer = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000002p+51, IGNORED } },\n+    .answer = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000003p+51, IGNORED } },\n+    .answer = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+51, IGNORED } },\n+    .answer = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+51, IGNORED } },\n+    .answer = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+52, IGNORED } },\n+    .answer = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+52, IGNORED } },\n+    .answer = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+52, IGNORED } },\n+    .answer = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+52, IGNORED } },\n+    .answer = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffffffffffp+51, IGNORED } },\n+    .answer = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+51, IGNORED } },\n+    .answer = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000003p+51, IGNORED } },\n+    .answer = { -0x1.0000000000004p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000002p+51, IGNORED } },\n+    .answer = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+51, IGNORED } },\n+    .answer = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+51, IGNORED } },\n+    .answer = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+50, IGNORED } },\n+    .answer = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffdp+50, IGNORED } },\n+    .answer = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } },\n+    .answer = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH } }\n+};\n+\n+#include \"sse4_1-round2.h\""}, {"sha": "cfbfe2b1eba78b8482a0c744d73312f8d6ee534c", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-floorss.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorss.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorss.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-floorss.c?ref=15c8ad00d81bf015d73de01696e5a28ee3aac003", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, y) _mm_floor_ss (x, y)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00,  IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+23, IGNORED, IGNORED, IGNORED } },\n+    .answer = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+23, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+22, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED, IGNORED, IGNORED } },\n+    .answer = { -1.0, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+#include \"sse4_1-round2.h\""}, {"sha": "cec16175473f33ea71d0e00e69883b93fddb086b", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundpd-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c8ad00d81bf015d73de01696e5a28ee3aac003/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd-2.c?ref=15c8ad00d81bf015d73de01696e5a28ee3aac003", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s;\n+  double e[2] = {0.0};\n+  int i;\n+\n+  s.x = _mm_set_pd (1.1234, -2.3478);\n+  u.x = _mm_floor_pd (s.x);\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      __m128d tmp = _mm_load_sd (&s.a[i]);\n+      tmp = _mm_floor_sd (tmp, tmp);\n+      _mm_store_sd (&e[i], tmp);\n+    }\n+  \n+  if (check_union128d (u, e))\n+    abort ();\n+} "}]}