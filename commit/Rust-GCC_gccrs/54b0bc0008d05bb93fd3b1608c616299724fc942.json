{"sha": "54b0bc0008d05bb93fd3b1608c616299724fc942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRiMGJjMDAwOGQwNWJiOTNmZDNiMTYwOGM2MTYyOTk3MjRmYzk0Mg==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gnu_andrew@member.fsf.org", "date": "2007-08-30T19:57:30Z"}, "committer": {"name": "Andrew John Hughes", "email": "gandalf@gcc.gnu.org", "date": "2007-08-30T19:57:30Z"}, "message": "EnumSet.java: Documented.\n\n2007-08-22  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* java/util/EnumSet.java:\n\tDocumented.\n\t(complementOf(EnumSet)): Fixed to flip only\n\tthe bits used by the enumset.\n\nFrom-SVN: r127938", "tree": {"sha": "d07ed5e076d1f8c0f386d31a16641369b86c4753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07ed5e076d1f8c0f386d31a16641369b86c4753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54b0bc0008d05bb93fd3b1608c616299724fc942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b0bc0008d05bb93fd3b1608c616299724fc942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b0bc0008d05bb93fd3b1608c616299724fc942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b0bc0008d05bb93fd3b1608c616299724fc942/comments", "author": {"login": "gnu-andrew", "id": 962817, "node_id": "MDQ6VXNlcjk2MjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/962817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-andrew", "html_url": "https://github.com/gnu-andrew", "followers_url": "https://api.github.com/users/gnu-andrew/followers", "following_url": "https://api.github.com/users/gnu-andrew/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-andrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-andrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-andrew/subscriptions", "organizations_url": "https://api.github.com/users/gnu-andrew/orgs", "repos_url": "https://api.github.com/users/gnu-andrew/repos", "events_url": "https://api.github.com/users/gnu-andrew/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-andrew/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "039874df9e35a8100d386e40cb799968824a2139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039874df9e35a8100d386e40cb799968824a2139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039874df9e35a8100d386e40cb799968824a2139"}], "stats": {"total": 177, "additions": 175, "deletions": 2}, "files": [{"sha": "15342acd2b8884e9d24fa28031824da2caaee3f4", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b0bc0008d05bb93fd3b1608c616299724fc942/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b0bc0008d05bb93fd3b1608c616299724fc942/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=54b0bc0008d05bb93fd3b1608c616299724fc942", "patch": "@@ -1,3 +1,10 @@\n+2007-08-22  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/util/EnumSet.java:\n+\tDocumented.\n+\t(complementOf(EnumSet)): Fixed to flip only\n+\tthe bits used by the enumset.\n+\n 2007-07-31  Dalibor Topic  <robilad@kaffe.org>\n \n \tPR 32844"}, {"sha": "31b03684ab69b18f8a79913f103ea0d00025b0d2", "filename": "libjava/classpath/java/util/EnumSet.java", "status": "modified", "additions": 168, "deletions": 2, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b0bc0008d05bb93fd3b1608c616299724fc942/libjava%2Fclasspath%2Fjava%2Futil%2FEnumSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b0bc0008d05bb93fd3b1608c616299724fc942/libjava%2Fclasspath%2Fjava%2Futil%2FEnumSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Futil%2FEnumSet.java?ref=54b0bc0008d05bb93fd3b1608c616299724fc942", "patch": "@@ -41,6 +41,38 @@\n import java.io.Serializable;\n \n /**\n+ * <p>\n+ * Provides an efficient mechanism for recording a set of enumeration\n+ * constants.  As enumerations have a known set of possible values, certain\n+ * assumptions can be made when creating a set of constants.  The maximum\n+ * size of the set will always be equal to the number of constants, and each\n+ * value will always be one of these constants.  As a result, the set only needs\n+ * to store whether a particular constant is present or not rather than the\n+ * values themselves.  Each constant can thus be represented by a single bit.\n+ * </p>\n+ * <p>\n+ * This class is designed to provide an alternative to using integer bit flags\n+ * by providing a typesafe {@link Collection} interface with an underlying \n+ * implementation that utilises the assumptions above to give an equivalent level\n+ * of efficiency.  The values in a {@link EnumSet} must all be from the same\n+ * {@link Enum} type, which allows the contents to be packed into a bit vector.\n+ * A containment test is then simply a matter of inspecting the appropriate bit, while\n+ * addition involves setting the same.  Such basic operations take place in constant\n+ * time.\n+ * </p>\n+ * <p>\n+ * The {@link Iterator} implementation traverses the values in the natural order\n+ * of the enumeration provided by each constant's {@link Enum#ordinal()}.  It is\n+ * <emph>weakly consistent</emph> and will not throw a {@link ConcurrentModificationException}.\n+ * This means that concurrent changes to the set may or may not be noticeable during\n+ * traversal.\n+ * </p>\n+ * <p>\n+ * As is usual with most collections, the set is not synchronized by default.  This\n+ * can be remedied by using the {@link Collections#synchronizedSet(Set)} method.  Null\n+ * elements are not supported and attempts to add one will throw a {@link NullPointerException}.\n+ * </p>\n+ *\n  * @author Tom Tromey (tromey@redhat.com)\n  * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n  * @author Dalibor Topic (robilad@kaffe.org)\n@@ -57,14 +89,35 @@\n \n   // These fields could go into the anonymous inner class in of(E),\n   // complementOf would need to be refactored then, though.\n+  /**\n+   * The store which maintains the bits used to represent\n+   * the enumeration constants.\n+   */\n   BitSet store;\n+\n+  /**\n+   * The cardinality of the set (the current number\n+   * of bits set).\n+   */\n   int cardinality;\n+\n+  /**\n+   * The enumeration used by this set.\n+   */\n   Class<T> enumClass;\n \n+  /**\n+   * Empty package-private constructor\n+   */\n   EnumSet()\n   {\n   }\n \n+  /**\n+   * Returns a clone of the set.\n+   * \n+   * @return a clone of the set.\n+   */\n   public EnumSet<T> clone()\n   {\n     EnumSet<T> r;\n@@ -82,22 +135,56 @@ public EnumSet<T> clone()\n     return r;\n   }\n \n+  /**\n+   * Returns a set for the given enumeration type where\n+   * all the constants are present.\n+   *\n+   * @param eltType the type of enumeration to use for the set.\n+   * @return an {@link EnumSet} with all the bits set.\n+   * @throws NullPointerException if the element type is <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> allOf(Class<T> eltType)\n   {\n     // create an EnumSet from the list of values of the type\n     return copyOf(Arrays.asList(eltType.getEnumConstants()));\n   }\n \n+  /**\n+   * Returns a set for the given enumeration type where\n+   * none of the constants are present.\n+   *\n+   * @param eltType the type of enumeration to use for the set.\n+   * @return an {@link EnumSet} with none of the bits set.\n+   * @throws NullPointerException if the element type is <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> noneOf(Class<T> eltType)\n   {\n     return complementOf(allOf(eltType));\n   }\n \n+  /**\n+   * Returns a clone of the given set.\n+   *\n+   * @param other the set to clone.\n+   * @return an {@link EnumSet} that is a clone of the given set.\n+   * @throws NullPointerException if <code>other</code> is <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> copyOf(EnumSet<T> other)\n   {\n     return other.clone();\n   }\n \n+  /**\n+   * Creates an {@link EnumSet} using the contents of the given collection.\n+   * If the collection is also an {@link EnumSet}, this method works the\n+   * same as {@link #copyOf(EnumSet)}.  Otherwise, the elements of the collection\n+   * are inspected and used to populate the new set.\n+   *\n+   * @param other the collection to use to populate the new set.\n+   * @return an {@link EnumSet} containing elements from the given collection.\n+   * @throws NullPointerException if <code>other</code> is <code>null</code>.\n+   * @throws IllegalArgumentException if the collection is empty.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> copyOf(Collection<T> other)\n   {\n     if (other instanceof EnumSet)\n@@ -118,14 +205,31 @@ public static <T extends Enum<T>> EnumSet<T> copyOf(Collection<T> other)\n     return r;\n   }\n \n+  /**\n+   * Returns a set which is the inverse of the supplied set.\n+   * If a constant is present in the current set, it will not be\n+   * present in the new set and vice versa.\n+   *\n+   * @param other the set to provide the complement of.\n+   * @return an {@link EnumSet} which is the inverse of the current one.\n+   * @throws NullPointerException if <code>other</code> is <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> complementOf(EnumSet<T> other)\n   {\n     EnumSet<T> r = other.clone();\n-    r.store.flip(0, r.store.size());\n-    r.cardinality = r.store.size() - other.cardinality;\n+    int numConstants = r.enumClass.getEnumConstants().length;\n+    r.store.flip(0, numConstants);\n+    r.cardinality = numConstants - other.cardinality;\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given element.\n+   * \n+   * @param first the element to use to populate the new set.\n+   * @return an {@link EnumSet} containing the element.\n+   * @throws NullPointerException if <code>first</code> is <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first)\n   {\n     EnumSet<T> r = new EnumSet<T>()\n@@ -286,20 +390,47 @@ public int size()\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given two elements.\n+   * \n+   * @param first the first element to use to populate the new set.\n+   * @param second the second element to use.\n+   * @return an {@link EnumSet} containing the elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first, T second)\n   {\n     EnumSet<T> r = of(first);\n     r.add(second);\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given three elements.\n+   * \n+   * @param first the first element to use to populate the new set.\n+   * @param second the second element to use.\n+   * @param third the third element to use.\n+   * @return an {@link EnumSet} containing the elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first, T second, T third)\n   {\n     EnumSet<T> r = of(first, second);\n     r.add(third);\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given four elements.\n+   * \n+   * @param first the first element to use to populate the new set.\n+   * @param second the second element to use.\n+   * @param third the third element to use.\n+   * @param fourth the fourth element to use.\n+   * @return an {@link EnumSet} containing the elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first, T second, T third,\n \t\t\t\t\t\t  T fourth)\n   {\n@@ -308,6 +439,17 @@ public static <T extends Enum<T>> EnumSet<T> of(T first, T second, T third,\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given five elements.\n+   * \n+   * @param first the first element to use to populate the new set.\n+   * @param second the second element to use.\n+   * @param third the third element to use.\n+   * @param fourth the fourth element to use.\n+   * @param fifth the fifth element to use.\n+   * @return an {@link EnumSet} containing the elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first, T second, T third,\n \t\t\t\t\t\t  T fourth, T fifth)\n   {\n@@ -316,6 +458,14 @@ public static <T extends Enum<T>> EnumSet<T> of(T first, T second, T third,\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} populated with the given elements.\n+   * \n+   * @param first the first element to use to populate the new set.\n+   * @param rest the other elements to use.\n+   * @return an {@link EnumSet} containing the elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> of(T first, T... rest)\n   {\n     EnumSet<T> r = noneOf(first.getDeclaringClass());\n@@ -325,6 +475,22 @@ public static <T extends Enum<T>> EnumSet<T> of(T first, T... rest)\n     return r;\n   }\n \n+  /**\n+   * Creates a new {@link EnumSet} using the enumeration constants\n+   * starting from {@code from} and ending at {@code to} inclusive.\n+   * The two may be the same, but they must be in the correct order.\n+   * So giving the first constant twice would give a set with just that\n+   * constant set, while supplying the first and second constant will give\n+   * a set with those two elements.  However, specifying the second as\n+   * the {@code from} element followed by an earlier element as the\n+   * {@code to} element will result in an error.\n+   *\n+   * @param from the element to start from.\n+   * @param to the element to end at (may be the same as {@code from}.\n+   * @return an {@link EnumSet} containing the specified range of elements.\n+   * @throws NullPointerException if any of the parameters are <code>null</code>.\n+   * @throws IllegalArgumentException if {@code first.compareTo(last) > 0}.\n+   */\n   public static <T extends Enum<T>> EnumSet<T> range(T from, T to)\n   {\n     if (from.compareTo(to) > 0)"}]}