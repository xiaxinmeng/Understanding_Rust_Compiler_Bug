{"sha": "2aa6673eef65accd43735a55910d701e70ab06c0", "node_id": "C_kwDOANBUbNoAKDJhYTY2NzNlZWY2NWFjY2Q0MzczNWE1NTkxMGQ3MDFlNzBhYjA2YzA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-04T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-04T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "518a38fc597c24c8f78bbc4a9aff518494a6e51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/518a38fc597c24c8f78bbc4a9aff518494a6e51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa6673eef65accd43735a55910d701e70ab06c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa6673eef65accd43735a55910d701e70ab06c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa6673eef65accd43735a55910d701e70ab06c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa6673eef65accd43735a55910d701e70ab06c0/comments", "author": null, "committer": null, "parents": [{"sha": "df0184906a7b86a497c038766366904a20b5601e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0184906a7b86a497c038766366904a20b5601e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0184906a7b86a497c038766366904a20b5601e"}], "stats": {"total": 320, "additions": 319, "deletions": 1}, "files": [{"sha": "f488e5f3e31282e3d34d12130219117af8e9d837", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,93 @@\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gimple-ssa-warn-access.cc\n+\t(pass_waccess::check_dangling_stores): Skip non-stores.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/arm/vfp.md (*thumb2_movsi_vfp): Drop blank after tab\n+\tafter vmsr and vmrs, and lower the case of P0.\n+\n+2023-03-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR middle-end/109006\n+\t* gdbhooks.py (VecPrinter): Handle vec<T> as well as vec<T>*.\n+\n+2023-03-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR middle-end/109006\n+\t* gdbhooks.py (VecPrinter): Adjust for new vec layout.\n+\n+2023-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108986\n+\t* gimple-ssa-warn-access.cc (pass_waccess::maybe_check_access_sizes):\n+\tReturn immediately if OPT_Wnonnull or OPT_Wstringop_overflow_ is\n+\tsuppressed on stmt.  For [static %E] warning, print access_nelts\n+\trather than access_size.  Fix up comment wording.\n+\n+2023-03-03  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/driver-native.cc (s390_host_detect_local_cpu): Use\n+\tarch14 instead of z16.\n+\n+2023-03-03  Anthony Green  <green@moxielogic.com>\n+\n+\t* config/moxie/moxie.cc (TARGET_LRA_P): Remove.\n+\n+2023-03-03  Anthony Green  <green@moxielogic.com>\n+\n+\t* config/moxie/constraints.md (A, B, W): Change\n+\tdefine_constraint to define_memory_constraint.\n+\n+2023-03-03  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* toplev.cc (process_options): Fix the spelling of\n+\t\"-fstack-clash-protection\".\n+\n+2023-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109002\n+\t* tree-ssa-pre.cc (compute_partial_antic_aux): Properly\n+\tPHI-translate ANTIC_IN.\n+\n+2023-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108988\n+\t* gimple-fold.cc (gimple_fold_builtin_fputs): Fold len to\n+\tsize_type_node before passing it as argument to fwrite.  Formatting\n+\tfixes.\n+\n+2023-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/108738\n+\t* config/i386/i386.opt (--param x86-stv-max-visits): New param.\n+\t* doc/invoke.texi (--param x86-stv-max-visits): Document it.\n+\t* config/i386/i386-features.h (scalar_chain::max_visits): New.\n+\t(scalar_chain::build): Add bitmap parameter, return boolean.\n+\t(scalar_chain::add_insn): Likewise.\n+\t(scalar_chain::analyze_register_chain): Likewise.\n+\t* config/i386/i386-features.cc (scalar_chain::scalar_chain):\n+\tInitialize max_visits.\n+\t(scalar_chain::analyze_register_chain): When we exhaust\n+\tmax_visits, abort.  Also abort when running into any\n+\tdisallowed insn.\n+\t(scalar_chain::add_insn): Propagate abort.\n+\t(scalar_chain::build): Likewise.  When aborting amend\n+\tthe set of disallowed insn with the insns set.\n+\t(convert_scalars_to_vector): Adjust.  Do not convert aborted\n+\tchains.\n+\n+2023-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/108772\n+\t* dwarf2out.cc (dwarf2out_late_global_decl): Do not\n+\tgenerate a DIE for a function scope static.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/vx-common.h (WINT_TYPE): Alias to \"wchar_t\".\n+\n 2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/108883"}, {"sha": "887270c73229d4f934cda5c0a06a90a5b0eeada5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1 +1 @@\n-20230303\n+20230304"}, {"sha": "958087b6e643790d0247e175aabe070a35f10a4f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,8 @@\n+2023-03-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* kf.cc (class kf_sprintf): New.\n+\t(register_known_functions): Register it.\n+\n 2023-03-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108968"}, {"sha": "1c840921a902d355cf545e0a17c65ab857c2e847", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,12 @@\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* c-common.cc (c_common_nodes_and_builtins): Take\n+\twchar_type_node for wint_type_node when aliased.\n+\t(c_stddef_cpp_builtins): Define __WINT_TYPE__, when aliased to\n+\twchar_t, to the underlying type rather than wchar_t in\n+\tnon-C++.\n+\t* c-cppbuiltin.cc (type_suffix): Handle wchar_type_node.\n+\n 2023-02-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107938"}, {"sha": "789c0330cc80035348d8eb8291d7cd0281f95fa4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,17 @@\n+2023-03-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108998\n+\t* pt.cc (el_data::skipped_trees): New data member.\n+\t(extract_locals_r): Push to skipped_trees any unevaluated\n+\tcontexts that we skipped over.\n+\t(extract_local_specs): For the second walk, start from each\n+\ttree in skipped_trees.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* typeck.cc (cp_build_binary_op): Suppress redundant warning\n+\tfor pfn null test in pmfn test with vbit-in-delta.\n+\n 2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/108883"}, {"sha": "52859ea73ff74e4aad296cabf885c499af554195", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,30 @@\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108763\n+\t* implement-d.texi (Missing Features): Document that TypeInfo-based\n+\tva_arg is not implemented.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108946\n+\t* d-target.cc (Target::isVectorOpSupported): Allow identity ops.\n+\t* expr.cc (ExprVisitor::visit (IdentityExp *)): Handle vector identity\n+\tcomparisons.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108877\n+\t* imports.cc (ImportVisitor::visit (EnumDeclaration *)): Call\n+\tmake_import on TYPE_MAIN_VARIANT.\n+\t(ImportVisitor::visit (AggregateDeclaration *)): Likewise.\n+\t(ImportVisitor::visit (ClassDeclaration *)): Likewise.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108945\n+\t* d-codegen.cc (build_boolop): Evaluate vector comparison as\n+\tthe truth_type_for vector type.\n+\n 2023-02-23  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n \n \t* implement-d.texi: Reorder index entries around @items."}, {"sha": "63a22d183363fbb7522dc199dd71c1b25158b46d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,132 @@\n+2023-03-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109016\n+\t* gcc.dg/analyzer/omp-parallel-for-1.c: New test.\n+\t* gcc.dg/analyzer/omp-parallel-for-get-min.c: New test.\n+\n+2023-03-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/doom-d_main-IdentifyVersion.c: New test.\n+\t* gcc.dg/analyzer/sprintf-1.c: New test.\n+\t* gcc.dg/analyzer/sprintf-concat.c: New test.\n+\n+2023-03-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/108988\n+\t* gcc.dg/analyzer/pr99716-1.c (test_2): Remove xfail.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* g++.dg/warn/Wdangling-pointer.C (warn_init_ref_member): Add\n+\ttwo new variants, one fixed, one xfailed.\n+\t* c-c++-common/Wdangling-pointer-5.c\n+\t(nowarn_store_arg_store_arg): Add now-expected warnings.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/arm/acle/cde-errors.c: Adjust messages for quote\n+\taround +cdecp<N>.\n+\t* gcc.target/arm/acle/cde-mve-error-2.c: Likewise.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/arm/armv8_2-fp16-move-1.c: Combine vcmp and vcmpe\n+\texpected counts into a single pattern.\n+\t* gcc.target/arm/armv8_2-fp16-move-2.c: Accept conditional\n+\treturn and reversed conditions.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/51534\n+\t* gcc.target/arm/pr51534.c: Split softfp variant into...\n+\t* gcc.target/arm/pr51534s.c: ... this, and support ARM too.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/arm/acle/cde-mve-full-assembly.c: Drop blank\n+\tafter tab after vmsr, and lower the case of P0.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/104882\n+\t* gcc.target/arm/simd/pr104882.c: Require mve hardware.\n+\n+2023-03-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108998\n+\t* g++.dg/cpp2a/lambda-generic11.C: New test.\n+\n+2023-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/108986\n+\t* gcc.dg/Wnonnull-8.c: New test.\n+\n+2023-03-03  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/ifcvt-two-insns-bool.c: Allow \"high\" and\n+\t\"not low or equal\" load on condition variant.\n+\t* gcc.target/s390/ifcvt-two-insns-int.c: Dito.\n+\t* gcc.target/s390/ifcvt-two-insns-long.c: Dito.\n+\n+2023-03-03  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.dg/vect/slp-3.c: Adapt test expectation.\n+\t* gcc.dg/vect/slp-multitypes-11.c: Likewise.\n+\t* gcc.dg/vect/slp-perm-8.c: Likewise.\n+\n+2023-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109002\n+\t* gcc.dg/torture/pr109002.c: New testcase.\n+\n+2023-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/108772\n+\t* g++.dg/lto/pr108772_0.C: New testcase.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR c++/100127\n+\t* g++.dg/coroutines/pr100127.C: Test for header rather than\n+\tcompiler macro.\n+\t* g++.dg/coroutines/pr100772-a.C: Likewise.\n+\t* g++.dg/coroutines/pr100772-b.C: Likewise.\n+\n+2023-03-03  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/attr-aligned.c: Adjust comment for ALIGN_MAX_STATIC.\n+\t(ALIGN_MAX_STATIC): Set to 512 for CRIS.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108946\n+\t* gdc.dg/simd2a.d: Update test.\n+\t* gdc.dg/simd2b.d: Likewise.\n+\t* gdc.dg/simd2c.d: Likewise.\n+\t* gdc.dg/simd2d.d: Likewise.\n+\t* gdc.dg/simd2e.d: Likewise.\n+\t* gdc.dg/simd2f.d: Likewise.\n+\t* gdc.dg/simd2g.d: Likewise.\n+\t* gdc.dg/simd2h.d: Likewise.\n+\t* gdc.dg/simd2i.d: Likewise.\n+\t* gdc.dg/simd2j.d: Likewise.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108877\n+\t* gdc.dg/imports/pr108877a.d: New test.\n+\t* gdc.dg/pr108877.d: New test.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108167\n+\t* gdc.dg/pr108167.d: New test.\n+\n+2023-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108945\n+\t* gdc.dg/pr108945.d: New test.\n+\n 2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/108991"}, {"sha": "694360672a4bfcb325641e46184555a59b65877a", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,9 @@\n+2023-03-03  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/cas_n.c: New file.\n+\t* config/s390/load_n.c: New file.\n+\t* config/s390/store_n.c: New file.\n+\n 2023-01-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* configure.tgt (config_path) [target_thread_file=single]:"}, {"sha": "adc232c22eed67acd3d92a862fed0ed763ef2bdd", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,9 @@\n+2023-03-03  Costas Argyris  <costas.argyris@gmail.com>\n+\n+\t* pex-win32.c (win32_spawn): Fix memory leak of cmdline\n+\tbuffer and refactor to have cleanup code appear once\n+\tfor all exit cases.\n+\n 2023-02-11  niXman  <i.nixman@autistici.org>\n \n \t* lrealpath.c (lrealpath): try to resolve symlink and"}, {"sha": "229fbbe97d72939e093db1b97bcd5193da662390", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa6673eef65accd43735a55910d701e70ab06c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa6673eef65accd43735a55910d701e70ab06c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2aa6673eef65accd43735a55910d701e70ab06c0", "patch": "@@ -1,3 +1,35 @@\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/30_threads/async/async.cc (test04): Initialize\n+\tsteady_start, renamed from steady_begin, next to slow_start.\n+\tIncrease tolerance for final wait.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/libstdc++-prettyprinters/80276.cc: Add\n+\tstd::string to debug info.\n+\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.\n+\n+2023-03-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR libstdc++/104852\n+\tPR libstdc++/95989\n+\tPR libstdc++/52590\n+\t* include/bits/std_thread.h (thread::_M_thread_deps): New\n+\tstatic implicitly-inline member function.\n+\t(std::thread template ctor): Pass it to _M_start_thread.\n+\t* src/c++11/thread.cc (thread::_M_start_thread): Name depend\n+\tparameter, force it live on entry.\n+\n+2023-03-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/abi/post/i386-solaris/baseline_symbols.txt: Regenerate.\n+\t* config/abi/post/i386-solaris/amd64/baseline_symbols.txt:\n+\tLikewise.\n+\t* config/abi/post/sparc-solaris/baseline_symbols.txt: Likewise.\n+\t* config/abi/post/sparc-solaris/sparcv9/baseline_symbols.txt:\n+\tLikewise.\n+\n 2023-03-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/cow_string.h: Fix typo in comment."}]}