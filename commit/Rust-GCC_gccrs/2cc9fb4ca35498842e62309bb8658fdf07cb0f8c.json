{"sha": "2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjOWZiNGNhMzU0OTg4NDJlNjIzMDliYjg2NThmZGYwN2NiMGY4Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-09-04T01:56:12Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-09-04T01:56:12Z"}, "message": "varasm.c (default_section_type_flags): Append _1 to name with shlib parameter.\n\n        * varasm.c (default_section_type_flags): Append _1 to name with\n        shlib parameter.  Use original name to call new function with\n        implicit flag_pic.\n        (decl_readonly_section): Likewise.\n        (default_elf_select_section): Likewise.\n        (default_unique_section): Likewise.\n        (default_bind_local_p): Likewise.\n        (categorize_decl_for_section): Add shlib parameter to use in place\n        of implicit flag_pic.\n        * output.h: Declare new functions with _1 and shlib argument.\n\nFrom-SVN: r56780", "tree": {"sha": "7ed0cb8380f2dcaa2166c1420cbbe9f9f8f3eeb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ed0cb8380f2dcaa2166c1420cbbe9f9f8f3eeb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/comments", "author": null, "committer": null, "parents": [{"sha": "8c085f6ff45e41bf947f5c9ce1f47bf43f27950a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c085f6ff45e41bf947f5c9ce1f47bf43f27950a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c085f6ff45e41bf947f5c9ce1f47bf43f27950a"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "81db01b1e231f03dff0a825220b2636bdf1a51d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "patch": "@@ -1,3 +1,16 @@\n+2002-09-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* varasm.c (default_section_type_flags): Append _1 to name with\n+\tshlib parameter.  Use original name to call new function with\n+\timplicit flag_pic.\n+\t(decl_readonly_section): Likewise.\n+\t(default_elf_select_section): Likewise.\n+\t(default_unique_section): Likewise.\n+\t(default_bind_local_p): Likewise.\n+\t(categorize_decl_for_section): Add shlib parameter to use in place\n+\tof implicit flag_pic.\n+\t* output.h: Declare new functions with _1 and shlib argument.\n+\n 2002-09-03  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/install.texi: Fix typos, formatting problems, and obvious"}, {"sha": "bbacd3104562450fb1d28b53fce68993c9c9ed7f", "filename": "gcc/output.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "patch": "@@ -468,6 +468,7 @@ extern rtx this_is_asm_operands;\n /* Decide whether DECL needs to be in a writable section.\n    RELOC is the same as for SELECT_SECTION.  */\n extern bool decl_readonly_section PARAMS ((tree, int));\n+extern bool decl_readonly_section_1 PARAMS ((tree, int, int));\n \n /* User label prefix in effect for this compilation.  */\n extern const char *user_label_prefix;\n@@ -508,6 +509,9 @@ extern bool named_section_first_declaration PARAMS((const char *));\n union tree_node;\n extern unsigned int default_section_type_flags PARAMS ((union tree_node *,\n \t\t\t\t\t\t\tconst char *, int));\n+extern unsigned int default_section_type_flags_1 PARAMS ((union tree_node *,\n+\t\t\t\t\t\t\t  const char *,\n+\t\t\t\t\t\t\t  int, int));\n \n extern void default_no_named_section PARAMS ((const char *, unsigned int));\n extern void default_elf_asm_named_section PARAMS ((const char *, unsigned int));\n@@ -530,13 +534,17 @@ extern void default_select_section PARAMS ((tree, int,\n \t\t\t\t\t    unsigned HOST_WIDE_INT));\n extern void default_elf_select_section PARAMS ((tree, int,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n+extern void default_elf_select_section_1 PARAMS ((tree, int,\n+\t\t\t\t\t\t  unsigned HOST_WIDE_INT, int));\n extern void default_unique_section PARAMS ((tree, int));\n+extern void default_unique_section_1 PARAMS ((tree, int, int));\n extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n extern const char *default_strip_name_encoding PARAMS ((const char *));\n extern bool default_binds_local_p PARAMS ((tree));\n+extern bool default_binds_local_p_1 PARAMS ((tree, int));\n extern void default_globalize_label PARAMS ((FILE *, const char *));\n \n /* Emit data for vtable gc for GNU binutils.  */"}, {"sha": "e84a2891153a4b33d67a9c5effe347afff44d2a2", "filename": "gcc/varasm.c", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc9fb4ca35498842e62309bb8658fdf07cb0f8c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2cc9fb4ca35498842e62309bb8658fdf07cb0f8c", "patch": "@@ -4690,12 +4690,22 @@ default_section_type_flags (decl, name, reloc)\n      tree decl;\n      const char *name;\n      int reloc;\n+{\n+  return default_section_type_flags_1 (decl, name, reloc, flag_pic);\n+}\n+\n+unsigned int\n+default_section_type_flags_1 (decl, name, reloc, shlib)\n+     tree decl;\n+     const char *name;\n+     int reloc;\n+     int shlib;\n {\n   unsigned int flags;\n \n   if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n     flags = SECTION_CODE;\n-  else if (decl && decl_readonly_section (decl, reloc))\n+  else if (decl && decl_readonly_section_1 (decl, reloc, shlib))\n     flags = 0;\n   else\n     flags = SECTION_WRITE;\n@@ -4913,12 +4923,14 @@ enum section_category\n   SECCAT_TBSS\n };\n \n-static enum section_category categorize_decl_for_section PARAMS ((tree, int));\n+static enum section_category\n+categorize_decl_for_section PARAMS ((tree, int, int));\n \n static enum section_category\n-categorize_decl_for_section (decl, reloc)\n+categorize_decl_for_section (decl, reloc, shlib)\n      tree decl;\n      int reloc;\n+     int shlib;\n {\n   enum section_category ret;\n \n@@ -4940,16 +4952,16 @@ categorize_decl_for_section (decl, reloc)\n \t       || TREE_SIDE_EFFECTS (decl)\n \t       || ! TREE_CONSTANT (DECL_INITIAL (decl)))\n \t{\n-\t  if (flag_pic && (reloc & 2))\n+\t  if (shlib && (reloc & 2))\n \t    ret = SECCAT_DATA_REL;\n-\t  else if (flag_pic && reloc)\n+\t  else if (shlib && reloc)\n \t    ret = SECCAT_DATA_REL_LOCAL;\n \t  else\n \t    ret = SECCAT_DATA;\n \t}\n-      else if (flag_pic && (reloc & 2))\n+      else if (shlib && (reloc & 2))\n \tret = SECCAT_DATA_REL_RO;\n-      else if (flag_pic && reloc)\n+      else if (shlib && reloc)\n \tret = SECCAT_DATA_REL_RO_LOCAL;\n       else if (flag_merge_constants < 2)\n \t/* C and C++ don't allow different variables to share the same\n@@ -4963,7 +4975,7 @@ categorize_decl_for_section (decl, reloc)\n     }\n   else if (TREE_CODE (decl) == CONSTRUCTOR)\n     {\n-      if ((flag_pic && reloc)\n+      if ((shlib && reloc)\n \t  || TREE_SIDE_EFFECTS (decl)\n \t  || ! TREE_CONSTANT (decl))\n \tret = SECCAT_DATA;\n@@ -4999,7 +5011,16 @@ decl_readonly_section (decl, reloc)\n      tree decl;\n      int reloc;\n {\n-  switch (categorize_decl_for_section (decl, reloc))\n+  return decl_readonly_section_1 (decl, reloc, flag_pic);\n+}\n+\n+bool\n+decl_readonly_section_1 (decl, reloc, shlib)\n+     tree decl;\n+     int reloc;\n+     int shlib;\n+{\n+  switch (categorize_decl_for_section (decl, reloc, shlib))\n     {\n     case SECCAT_RODATA:\n     case SECCAT_RODATA_MERGE_STR:\n@@ -5021,7 +5042,17 @@ default_elf_select_section (decl, reloc, align)\n      int reloc;\n      unsigned HOST_WIDE_INT align;\n {\n-  switch (categorize_decl_for_section (decl, reloc))\n+  default_elf_select_section_1 (decl, reloc, align, flag_pic);\n+}\n+\n+void\n+default_elf_select_section_1 (decl, reloc, align, shlib)\n+     tree decl;\n+     int reloc;\n+     unsigned HOST_WIDE_INT align;\n+     int shlib;\n+{\n+  switch (categorize_decl_for_section (decl, reloc, shlib))\n     {\n     case SECCAT_TEXT:\n       /* We're not supposed to be called on FUNCTION_DECLs.  */\n@@ -5084,13 +5115,22 @@ void\n default_unique_section (decl, reloc)\n      tree decl;\n      int reloc;\n+{\n+  default_unique_section_1 (decl, reloc, flag_pic);\n+}\n+\n+void\n+default_unique_section_1 (decl, reloc, shlib)\n+     tree decl;\n+     int reloc;\n+     int shlib;\n {\n   bool one_only = DECL_ONE_ONLY (decl);\n   const char *prefix, *name;\n   size_t nlen, plen;\n   char *string;\n \n-  switch (categorize_decl_for_section (decl, reloc))\n+  switch (categorize_decl_for_section (decl, reloc, shlib))\n     {\n     case SECCAT_TEXT:\n       prefix = one_only ? \".gnu.linkonce.t.\" : \".text.\";\n@@ -5204,6 +5244,14 @@ default_strip_name_encoding (str)\n bool\n default_binds_local_p (exp)\n      tree exp;\n+{\n+  return default_binds_local_p_1 (exp, flag_pic);\n+}\n+\n+bool\n+default_binds_local_p_1 (exp, shlib)\n+     tree exp;\n+     int shlib;\n {\n   bool local_p;\n \n@@ -5224,7 +5272,7 @@ default_binds_local_p (exp)\n     local_p = false;\n   /* If PIC, then assume that any global name can be overridden by\n      symbols resolved from other modules.  */\n-  else if (flag_pic)\n+  else if (shlib)\n     local_p = false;\n   /* Uninitialized COMMON variable may be unified with symbols\n      resolved from other modules.  */"}]}