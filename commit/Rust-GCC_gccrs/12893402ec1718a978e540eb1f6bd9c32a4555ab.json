{"sha": "12893402ec1718a978e540eb1f6bd9c32a4555ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4OTM0MDJlYzE3MThhOTc4ZTU0MGViMWY2YmQ5YzMyYTQ1NTVhYg==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-12-11T18:23:27Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-12-11T18:23:27Z"}, "message": "Added Compiler Support for _Cilk_spawn and _Cilk_sync for C++.\n\ngcc/c-family/ChangeLog\n2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n        * cilk.c (cilk_outline): Made this function non-static.\n\t(gimplify_cilk_spawn): Removed pre_p and post_p arguments.\n\t(create_cilk_wrapper): Added a new parameter: a function pointer.\n\t(c_install_body_w_frame_cleanup): Remove\n\t(extract_free_variables): Added VEC_INIT_EXPR and CONSTRUCTOR case.\n        * c-common.h (cilk_outline): New prototype.\n\t(gimplify_cilk_spawn): Removed two parameters.\n        (cilk_install_body_with_frame_cleanup): New prototype.\n\t* c-gimplify.c (c_gimplify_expr): Added MODIFY_EXPR, CALL_EXPR and\n\tCILK_SPAWN_STMT case.\n\ngcc/c/ChangeLog\n2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\t\n\t* c-objc-common.h (LANG_HOOKS_CILKPLUS_FRAME_CLEANUP): Remove.\n\t(LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP): Likewise.\n\t(LANG_HOOKS_CILKPLUS_CILKPLUS_GIMPLIFY_SPAWN): Likewise.\n\t* c-typeck.c (cilk_install_body_with_frame_cleanup): New function.\n\ngcc/ChangeLog\n2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n        * langhooks.h (lang_hooks_for_decls): Remove lang_hooks_for_cilkplus.\n\t(lang_hooks_for_cilkplus): Remove.\n\t* langhooks.c (lhd_cilk_detect_spawn): Likewise.\n\t(lhd_install_body_with_frame_cleanup): Likewise.\n\t* langhooks-def.h (LANG_HOOKS_CILKPLUS_FRAME_CLEANUP): Likewise.\n\t(LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP): Likewise.\n\t(LANG_HOOKS_CILKPLUS_CILKPLUS_GIMPLIFY_SPAWN): Likewise.\n\t(LANG_HOOKS_CILKPLUS): Likewise.\n\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_CILKPLUS.\n\t* gimplify.c (gimplify_expr): Removed CILK_SPAWN_STMT case.\n\t(gimplify_modify_expr): Removed handling of _Cilk_spawn in expr.\n\t(gimplify_call_expr): Likewise.\n \ngcc/cp/ChangeLog\n2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n        * cp-tree.h (cilk_valid_spawn): New prototype.\n        (gimplify_cilk_spawn): Likewise.\n        (create_try_catch_expr): Likewise.\n        * decl.c (finish_function): Insert Cilk function-calls when a\n        _Cilk_spawn is used in a function.\n        * parser.c (cp_parser_postfix_expression): Added RID_CILK_SPAWN and\n        RID_CILK_SYNC cases.\n        * cp-cilkplus.c (set_cilk_except_flag): New function.\n        (set_cilk_except_data): Likewise.\n        (cilk_install_body_with_frame_cleanup): Likewise.\n        * except.c (create_try_catch_expr): Likewise.\n        * parser.h (IN_CILK_SPAWN): New #define.\n        * pt.c (tsubst_expr): Added CILK_SPAWN_STMT and CILK_SYNC_STMT cases.\n        * semantics.c (potential_constant_expression_1): Likewise.\n        * typeck.c (cp_build_compound_expr): Reject a spawned function in a\n        compound expression.\n        (check_return_expr): Reject a spawned function in a return expression.\n\t* cp-gimplify.c (cp_gimplify_expr): Added a CILK_SPAWN_STMT and\n\tCALL_EXPR case.  Added handling of spawned function in MODIFY_EXPR\n\tand INIT_EXPR.\n\ngcc/testsuite/ChangeLog\n2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n        * g++.dg/cilk-plus/CK/catch_exc.cc: New test case.\n        * g++.dg/cilk-plus/CK/const_spawn.cc: Likewise.\n        * g++.dg/cilk-plus/CK/fib-opr-overload.cc: Likewise.\n        * g++.dg/cilk-plus/CK/fib-tplt.cc: Likewise.\n        * g++.dg/cilk-plus/CK/lambda_spawns.cc: Likewise.\n        * g++.dg/cilk-plus/CK/lambda_spawns_tplt.cc: Likewise.\n        * g++.dg/cilk-plus/cilk-plus.exp: Added support to run Cilk Keywords\n        test stored in c-c++-common.  Also, added the Cilk runtime's library\n        to the ld_library_path.\n\nFrom-SVN: r205902", "tree": {"sha": "9072ab2966c9b71528a27a7a515b6a3bd19545b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9072ab2966c9b71528a27a7a515b6a3bd19545b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12893402ec1718a978e540eb1f6bd9c32a4555ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12893402ec1718a978e540eb1f6bd9c32a4555ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12893402ec1718a978e540eb1f6bd9c32a4555ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12893402ec1718a978e540eb1f6bd9c32a4555ab/comments", "author": null, "committer": null, "parents": [{"sha": "996947e67d449d87376e12b389485c5f1cc76f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996947e67d449d87376e12b389485c5f1cc76f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996947e67d449d87376e12b389485c5f1cc76f48"}], "stats": {"total": 1200, "additions": 1078, "deletions": 122}, "files": [{"sha": "3e414018621e0056e78f6404bf01cd18032300a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1,3 +1,18 @@\n+2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* langhooks.h (lang_hooks_for_decls): Remove lang_hooks_for_cilkplus.\n+\t(lang_hooks_for_cilkplus): Remove.\n+\t* langhooks.c (lhd_cilk_detect_spawn): Likewise.\n+\t(lhd_install_body_with_frame_cleanup): Likewise.\n+\t* langhooks-def.h (LANG_HOOKS_CILKPLUS_FRAME_CLEANUP): Likewise.\n+\t(LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP): Likewise.\n+\t(LANG_HOOKS_CILKPLUS_CILKPLUS_GIMPLIFY_SPAWN): Likewise.\n+\t(LANG_HOOKS_CILKPLUS): Likewise.\n+\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_CILKPLUS.\n+\t* gimplify.c (gimplify_expr): Removed CILK_SPAWN_STMT case.\n+\t(gimplify_modify_expr): Removed handling of _Cilk_spawn in expr.\n+\t(gimplify_call_expr): Likewise.\n+\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* expr.c (expand_assignment): Remove dependency on"}, {"sha": "462b4b18dd00ca9aeb85ebe180bd06bc96efb9fc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1,3 +1,16 @@\n+2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* cilk.c (cilk_outline): Made this function non-static.\n+\t(gimplify_cilk_spawn): Removed pre_p and post_p arguments.\n+\t(create_cilk_wrapper): Added a new parameter: a function pointer.\n+\t(c_install_body_w_frame_cleanup): Remove\n+\t(extract_free_variables): Added VEC_INIT_EXPR and CONSTRUCTOR case.\n+\t* c-common.h (cilk_outline): New prototype.\n+\t(gimplify_cilk_spawn): Removed two parameters.\n+\t(cilk_install_body_with_frame_cleanup): New prototype.\n+\t* c-gimplify.c (c_gimplify_expr): Added MODIFY_EXPR, CALL_EXPR and\n+\tCILK_SPAWN_STMT case.\n+\n 2013-12-11  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* c-common.c (c_fully_fold_internal): Handle ADDR_SPACE_CONVERT_EXPR."}, {"sha": "4357d1fab935801b4c46866d5382cd28b186cecf", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1376,14 +1376,14 @@ extern vec <tree, va_gc> *fix_sec_implicit_args\n /* In cilk.c.  */\n extern tree insert_cilk_frame (tree);\n extern void cilk_init_builtins (void);\n-extern int gimplify_cilk_spawn (tree *, gimple_seq *, gimple_seq *);\n-extern void c_cilk_install_body_w_frame_cleanup (tree, tree);\n+extern int gimplify_cilk_spawn (tree *);\n+extern void cilk_install_body_with_frame_cleanup (tree, tree, void *);\n extern bool cilk_detect_spawn_and_unwrap (tree *);\n extern bool cilk_set_spawn_marker (location_t, tree);\n extern tree build_cilk_sync (void);\n extern tree build_cilk_spawn (location_t, tree);\n extern tree make_cilk_frame (tree);\n extern tree create_cilk_function_exit (tree, bool, bool);\n extern tree cilk_install_body_pedigree_operations (tree);\n-\n+extern void cilk_outline (tree, tree *, void *);\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "b919737b8eeebf0f95391b303c473540a98b7086", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -44,7 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"c-pretty-print.h\"\n #include \"cgraph.h\"\n-\n+#include \"cilk.h\"\n \n /*  The gimplification pass converts the language-dependent trees\n     (ld-trees) emitted by the parser into language-independent trees\n@@ -207,6 +207,26 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \t  }\n \tbreak;\n       }\n+      \n+    case CILK_SPAWN_STMT:\n+      gcc_assert \n+\t(fn_contains_cilk_spawn_p (cfun) \n+\t && cilk_detect_spawn_and_unwrap (expr_p));\n+      \n+      /* If errors are seen, then just process it as a CALL_EXPR.  */\n+      if (!seen_error ())\n+\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+      \n+    case MODIFY_EXPR:\n+    case INIT_EXPR:\n+    case CALL_EXPR:\n+      if (fn_contains_cilk_spawn_p (cfun)\n+\t  && cilk_detect_spawn_and_unwrap (expr_p)\n+\t  /* If an error is found, the spawn wrapper is removed and the\n+\t     original expression (MODIFY/INIT/CALL_EXPR) is processes as\n+\t     it is supposed to be.  */\n+\t  && !seen_error ())\n+\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \n     default:;\n     }"}, {"sha": "1b45172384775d8f10af8013badeed15b38f7663", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -477,9 +477,10 @@ wrapper_local_cb (const void *k_v, void **vp, void *data)\n \n /* Alter a tree STMT from OUTER_FN to form the body of INNER_FN.  */\n \n-static void\n-cilk_outline (tree inner_fn, tree *stmt_p, struct wrapper_data *wd)\n+void\n+cilk_outline (tree inner_fn, tree *stmt_p, void *w)\n {\n+  struct wrapper_data *wd = (struct wrapper_data *) w;\n   const tree outer_fn = wd->context;\t      \n   const bool nested = (wd->type == CILK_BLOCK_FOR);\n   copy_body_data id;\n@@ -512,8 +513,7 @@ cilk_outline (tree inner_fn, tree *stmt_p, struct wrapper_data *wd)\n   /* We don't want the private variables any more.  */\n   pointer_map_traverse (wd->decl_map, nested ? for_local_cb : wrapper_local_cb,\n \t\t\t&id);\n-\n-  walk_tree (stmt_p, copy_tree_body_r, &id, NULL);\n+  walk_tree (stmt_p, copy_tree_body_r, (void *) &id, NULL);\n \n   /* See if this function can throw or calls something that should\n      not be spawned.  The exception part is only necessary if\n@@ -554,10 +554,8 @@ create_cilk_wrapper_body (tree stmt, struct wrapper_data *wd)\n   for (p = wd->parms; p; p = TREE_CHAIN (p))\n     DECL_CONTEXT (p) = fndecl;\n \n-  cilk_outline (fndecl, &stmt, wd);\n-  stmt = fold_build_cleanup_point_expr (void_type_node, stmt);\n   gcc_assert (!DECL_SAVED_TREE (fndecl));\n-  lang_hooks.cilkplus.install_body_with_frame_cleanup (fndecl, stmt);\n+  cilk_install_body_with_frame_cleanup (fndecl, stmt, (void *) wd);\n   gcc_assert (DECL_SAVED_TREE (fndecl));\n \n   pop_cfun_to (outer);\n@@ -733,8 +731,7 @@ create_cilk_wrapper (tree exp, tree *args_out)\n    and GS_UNHANDLED, otherwise.  */\n \n int\n-gimplify_cilk_spawn (tree *spawn_p, gimple_seq *before ATTRIBUTE_UNUSED,\n-\t\t     gimple_seq *after ATTRIBUTE_UNUSED)\n+gimplify_cilk_spawn (tree *spawn_p)\n {\n   tree expr = *spawn_p;\n   tree function, call1, call2, new_args;\n@@ -878,30 +875,6 @@ cilk_install_body_pedigree_operations (tree frame_ptr)\n   return body_list;\n }\n \n-/* Inserts \"cleanup\" functions after the function-body of FNDECL.  FNDECL is a \n-   spawn-helper and BODY is the newly created body for FNDECL.  */\n-\n-void\n-c_cilk_install_body_w_frame_cleanup (tree fndecl, tree body)\n-{\n-  tree list = alloc_stmt_list ();\n-  tree frame = make_cilk_frame (fndecl);\n-  tree dtor = create_cilk_function_exit (frame, false, true);\n-  add_local_decl (cfun, frame);\n-  \n-  DECL_SAVED_TREE (fndecl) = list;\n-  tree frame_ptr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (frame)), \n-\t\t\t   frame);\n-  tree body_list = cilk_install_body_pedigree_operations (frame_ptr);\n-  gcc_assert (TREE_CODE (body_list) == STATEMENT_LIST);\n-  \n-  tree detach_expr = build_call_expr (cilk_detach_fndecl, 1, frame_ptr); \n-  append_to_statement_list (detach_expr, &body_list);\n-  append_to_statement_list (body, &body_list);\n-  append_to_statement_list (build_stmt (EXPR_LOCATION (body), TRY_FINALLY_EXPR,\n-\t\t\t\t       \tbody_list, dtor), &list);\n-}\n-\n /* Add a new variable, VAR to a variable list in WD->DECL_MAP.  HOW indicates\n    whether the variable is previously defined, currently defined, or a variable \n    that is being written to.  */\n@@ -1062,6 +1035,7 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n       extract_free_variables (TREE_OPERAND (t, 0), wd, ADD_READ);\n       return;\n \n+    case VEC_INIT_EXPR:\n     case INIT_EXPR:\n       extract_free_variables (TREE_OPERAND (t, 0), wd, ADD_BIND);\n       extract_free_variables (TREE_OPERAND (t, 1), wd, ADD_READ);\n@@ -1222,6 +1196,15 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n \tbreak;\n       }\n \n+    case CONSTRUCTOR:\n+      {\n+\tunsigned HOST_WIDE_INT idx = 0;\n+\tconstructor_elt *ce;\n+\tfor (idx = 0; vec_safe_iterate (CONSTRUCTOR_ELTS (t), idx, &ce); idx++)\n+\t  extract_free_variables (ce->value, wd, ADD_READ);\n+\tbreak;\n+      }\n+\n     default:\n       if (is_expr)\n \t{\n@@ -1238,7 +1221,6 @@ extract_free_variables (tree t, struct wrapper_data *wd,\n     }\n }\n \n-\n /* Add appropriate frames needed for a Cilk spawned function call, FNDECL. \n    Returns the __cilkrts_stack_frame * variable.  */\n "}, {"sha": "17ca2c5d8dd0371aaa5d432bf8aefc7b7ea75b8a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1,3 +1,10 @@\n+2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-objc-common.h (LANG_HOOKS_CILKPLUS_FRAME_CLEANUP): Remove.\n+\t(LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP): Likewise.\n+\t(LANG_HOOKS_CILKPLUS_CILKPLUS_GIMPLIFY_SPAWN): Likewise.\n+\t* c-typeck.c (cilk_install_body_with_frame_cleanup): New function.\n+\n 2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/52023"}, {"sha": "4b7987d0d2b07634e292ca698195d382eed39b3a", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -104,14 +104,4 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P c_vla_unspec_p\n-\n-#undef  LANG_HOOKS_CILKPLUS_GIMPLIFY_SPAWN\n-#define LANG_HOOKS_CILKPLUS_GIMPLIFY_SPAWN gimplify_cilk_spawn\n-\n-#undef  LANG_HOOKS_CILKPLUS_FRAME_CLEANUP\n-#define LANG_HOOKS_CILKPLUS_FRAME_CLEANUP c_cilk_install_body_w_frame_cleanup\n-\n-#undef  LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP\n-#define LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP  \\\n-  cilk_detect_spawn_and_unwrap\n #endif /* GCC_C_OBJC_COMMON */"}, {"sha": "5674ac3c1a172ac59f8eef05698c42e0f5522c83", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-objc.h\"\n #include \"c-family/c-common.h\"\n #include \"c-family/c-ubsan.h\"\n+#include \"cilk.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select\n    diagnostic messages in convert_for_assignment.  */\n@@ -12438,3 +12439,31 @@ c_tree_equal (tree t1, tree t2)\n   /* We can get here with --disable-checking.  */\n   return false;\n }\n+\n+/* Inserts \"cleanup\" functions after the function-body of FNDECL.  FNDECL is a \n+   spawn-helper and BODY is the newly created body for FNDECL.  */\n+\n+void\n+cilk_install_body_with_frame_cleanup (tree fndecl, tree body, void *w)\n+{\n+  tree list = alloc_stmt_list ();\n+  tree frame = make_cilk_frame (fndecl);\n+  tree dtor = create_cilk_function_exit (frame, false, true);\n+  add_local_decl (cfun, frame);\n+  \n+  DECL_SAVED_TREE (fndecl) = list;\n+  tree frame_ptr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (frame)), \n+\t\t\t   frame);\n+  tree body_list = cilk_install_body_pedigree_operations (frame_ptr);\n+  gcc_assert (TREE_CODE (body_list) == STATEMENT_LIST);\n+  \n+  tree detach_expr = build_call_expr (cilk_detach_fndecl, 1, frame_ptr); \n+  append_to_statement_list (detach_expr, &body_list);\n+\n+  cilk_outline (fndecl, &body, (struct wrapper_data *) w);\n+  body = fold_build_cleanup_point_expr (void_type_node, body);\n+\n+  append_to_statement_list (body, &body_list);\n+  append_to_statement_list (build_stmt (EXPR_LOCATION (body), TRY_FINALLY_EXPR,\n+\t\t\t\t       \tbody_list, dtor), &list);\n+}"}, {"sha": "e990992cf273778f43d2cbb6cd620a81e78d9546", "filename": "gcc/cilk.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcilk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcilk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -90,6 +90,7 @@ extern tree cilk_dot (tree, int, bool);\n extern void cilk_init_builtins (void);\n extern void gimplify_cilk_sync (tree *, gimple_seq *);\n extern tree cilk_call_setjmp (tree);\n+\n /* Returns true if Cilk Plus is enabled and if F->cilk_frame_decl is not\n    NULL_TREE.  */\n \n@@ -99,4 +100,5 @@ fn_contains_cilk_spawn_p (function *f)\n   return (flag_enable_cilkplus \n \t  && (f->calls_cilk_spawn || f->cilk_frame_decl != NULL_TREE));\n }\n+\n #endif"}, {"sha": "fd5d4b72880bff5c4e27aeeadc084c3dfb0e202f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1,3 +1,26 @@\n+2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* cp-tree.h (cilk_valid_spawn): New prototype.\n+\t(gimplify_cilk_spawn): Likewise.\n+\t(create_try_catch_expr): Likewise.\n+\t* decl.c (finish_function): Insert Cilk function-calls when a\n+\t_Cilk_spawn is used in a function.\n+\t* parser.c (cp_parser_postfix_expression): Added RID_CILK_SPAWN and\n+\tRID_CILK_SYNC cases.\n+\t* cp-cilkplus.c (set_cilk_except_flag): New function.\n+\t(set_cilk_except_data): Likewise.\n+\t(cilk_install_body_with_frame_cleanup): Likewise.\n+\t* except.c (create_try_catch_expr): Likewise.\n+\t* parser.h (IN_CILK_SPAWN): New #define.\n+\t* pt.c (tsubst_expr): Added CILK_SPAWN_STMT and CILK_SYNC_STMT cases.\n+\t* semantics.c (potential_constant_expression_1): Likewise.\n+\t* typeck.c (cp_build_compound_expr): Reject a spawned function in a\n+\tcompound expression.\n+\t(check_return_expr): Reject a spawned function in a return expression.\n+\t* cp-gimplify.c (cp_gimplify_expr): Added a CILK_SPAWN_STMT and\n+\tCALL_EXPR case.  Added handling of spawned function in MODIFY_EXPR\n+\tand INIT_EXPR.\n+\t\n 2013-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59435"}, {"sha": "d3f3323721e4dc44a28cb3d22ded7d906f2ead3e", "filename": "gcc/cp/cp-cilkplus.c", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -25,7 +25,10 @@\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n #include \"diagnostic-core.h\"\n-\n+#include \"tree-iterator.h\"\n+#include \"tree-inline.h\"  /* for copy_tree_body_r.  */\n+#include \"ggc.h\"\n+#include \"cilk.h\"\n \n /* Callback for cp_walk_tree to validate the body of a pragma simd loop\n    or _cilk_for loop.\n@@ -75,3 +78,68 @@ cpp_validate_cilk_plus_loop (tree body)\n \t\t(void *) &valid, NULL);\n   return valid;\n }\n+\n+/* Sets the EXCEPTION bit (0x10) in the FRAME.flags field.  */\n+\n+static tree\n+set_cilk_except_flag (tree frame)\n+{\n+  tree flags = cilk_dot (frame, CILK_TI_FRAME_FLAGS, 0);\n+\n+  flags = build2 (MODIFY_EXPR, void_type_node, flags,\n+\t\t  build2 (BIT_IOR_EXPR, TREE_TYPE (flags), flags,\n+\t\t\t  build_int_cst (TREE_TYPE (flags),\n+\t\t\t\t\t CILK_FRAME_EXCEPTING)));\n+  return flags;\n+}\n+\n+/* Sets the frame.EXCEPT_DATA field to the head of the exception pointer.  */\n+\n+static tree\n+set_cilk_except_data (tree frame)\n+{\n+  tree except_data = cilk_dot (frame, CILK_TI_FRAME_EXCEPTION, 0);\n+  tree uresume_fn = builtin_decl_implicit (BUILT_IN_EH_POINTER);\n+  tree ret_expr;\n+  uresume_fn  = build_call_expr (uresume_fn, 1,\n+\t\t\t\t build_int_cst (integer_type_node, 0));\n+  ret_expr = build2 (MODIFY_EXPR, void_type_node, except_data, uresume_fn);\n+  return ret_expr;\n+}\n+\n+/* Installs BODY into function FNDECL with appropriate exception handling\n+   code.  WD holds information of wrapper function used to pass into the\n+   outlining function, cilk_outline.  */\n+\n+void\n+cilk_install_body_with_frame_cleanup (tree fndecl, tree orig_body, void *wd)\n+{\n+  tree frame = make_cilk_frame (fndecl);\n+  tree dtor = create_cilk_function_exit (frame, false, false);\n+  add_local_decl (cfun, frame);\n+\n+  cfun->language = ggc_alloc_cleared_language_function ();\n+  \n+  location_t loc = EXPR_LOCATION (orig_body);\n+  tree list = alloc_stmt_list ();\n+  DECL_SAVED_TREE (fndecl) = list;\n+  tree fptr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (frame)), frame);\n+  tree body = cilk_install_body_pedigree_operations (fptr);\n+  gcc_assert (TREE_CODE (body) == STATEMENT_LIST);\n+  tree detach_expr = build_call_expr (cilk_detach_fndecl, 1, fptr);\n+  append_to_statement_list (detach_expr, &body);\n+  cilk_outline (fndecl, &orig_body, (struct wrapper_data *) wd);\n+  append_to_statement_list (orig_body, &body);\n+  if (flag_exceptions)\n+    {\n+      tree except_flag = set_cilk_except_flag (frame);\n+      tree except_data = set_cilk_except_data (frame);\n+      tree catch_list = alloc_stmt_list ();\n+      append_to_statement_list (except_flag, &catch_list);\n+      append_to_statement_list (except_data, &catch_list);\n+      body = create_try_catch_expr (body, catch_list);\n+    }\n+  append_to_statement_list (build_stmt (loc, TRY_FINALLY_EXPR, body, dtor),\n+\t\t\t    &list);\n+}\n+"}, {"sha": "5fa564c57d1b7142dab4fc14df1656d9156e0609", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"target.h\"\n #include \"c-family/c-ubsan.h\"\n+#include \"cilk.h\"\n \n /* Forward declarations.  */\n \n@@ -584,12 +585,21 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t LHS of an assignment might also be involved in the RHS, as in bug\n \t 25979.  */\n     case INIT_EXPR:\n+      if (fn_contains_cilk_spawn_p (cfun)\n+\t  && cilk_detect_spawn_and_unwrap (expr_p)\n+\t  && !seen_error ())\n+\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n       cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n       /* Otherwise fall through.  */\n     case MODIFY_EXPR:\n       {\n+\tif (fn_contains_cilk_spawn_p (cfun)\n+\t    && cilk_detect_spawn_and_unwrap (expr_p)\n+\t    && !seen_error ())\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\n \t/* If the back end isn't clever enough to know that the lhs and rhs\n \t   types are the same, add an explicit conversion.  */\n \ttree op0 = TREE_OPERAND (*expr_p, 0);\n@@ -698,6 +708,21 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       }\n       break;\n \n+    case CILK_SPAWN_STMT:\n+      gcc_assert \n+\t(fn_contains_cilk_spawn_p (cfun) \n+\t && cilk_detect_spawn_and_unwrap (expr_p));\n+\n+      /* If errors are seen, then just process it as a CALL_EXPR.  */\n+      if (!seen_error ())\n+\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+      \n+    case CALL_EXPR:\n+      if (fn_contains_cilk_spawn_p (cfun)\n+\t  && cilk_detect_spawn_and_unwrap (expr_p)\n+\t  && !seen_error ())\n+\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\n     default:\n       ret = (enum gimplify_status) c_gimplify_expr (expr_p, pre_p, post_p);\n       break;"}, {"sha": "0a8fdeea2fc210cb3a7a55594aac9d09769c09c1", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -153,5 +153,4 @@ extern void cp_common_init_ts (void);\n \n #undef LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS\n #define LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS cp_protect_cleanup_actions\n-\n #endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "06868250a95b32c81e5dd1749494095ba19d05eb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -5356,6 +5356,7 @@ extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n extern tree build_eh_type_type\t\t\t(tree);\n extern tree cp_protect_cleanup_actions\t\t(void);\n+extern tree create_try_catch_expr               (tree, tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);\n@@ -6185,6 +6186,9 @@ extern bool cpp_validate_cilk_plus_loop\t\t(tree);\n extern tree expand_array_notation_exprs         (tree);\n bool cilkplus_an_triplet_types_ok_p             (location_t, tree, tree, tree,\n \t\t\t\t\t\t tree);\n+/* In c-family/cilk.c */\n+extern bool cilk_valid_spawn                    (tree);\n+\n /* -- end of C++ */\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "5d06b371865c3ca8f21c68598c7ebb48208651e1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"plugin.h\"\n #include \"cgraph.h\"\n+#include \"cilk.h\"\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -13889,6 +13890,9 @@ finish_function (int flags)\n   /* If we're saving up tree structure, tie off the function now.  */\n   DECL_SAVED_TREE (fndecl) = pop_stmt_list (DECL_SAVED_TREE (fndecl));\n \n+  if (fn_contains_cilk_spawn_p (cfun) && !processing_template_decl)\n+    cfun->cilk_frame_decl = insert_cilk_frame (fndecl);\n+\n   finish_fname_decls ();\n \n   /* If this function can't throw any exceptions, remember that.  */"}, {"sha": "be487cd8ae89ee8296a351969ce6528e58c01cc1", "filename": "gcc/cp/except.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1342,4 +1342,22 @@ build_noexcept_spec (tree expr, int complain)\n     }\n }\n \n+/* Returns a TRY_CATCH_EXPR that will put TRY_LIST and CATCH_LIST in the\n+   TRY and CATCH locations.  CATCH_LIST must be a STATEMENT_LIST */\n+\n+tree\n+create_try_catch_expr (tree try_expr, tree catch_list)\n+{\n+  location_t loc = EXPR_LOCATION (try_expr);\n+ \n+  append_to_statement_list (do_begin_catch (), &catch_list);\n+  append_to_statement_list (build_throw (NULL_TREE), &catch_list);\n+  tree catch_tf_expr = build_stmt (loc, TRY_FINALLY_EXPR, catch_list, \n+\t\t\t\t   do_end_catch (NULL_TREE));\n+  catch_list = build2 (CATCH_EXPR, void_type_node, NULL_TREE,\n+\t\t       catch_tf_expr);\n+  tree try_catch_expr = build_stmt (loc, TRY_CATCH_EXPR, try_expr, catch_list);\n+  return try_catch_expr;\n+}\n+\n #include \"gt-cp-except.h\""}, {"sha": "dd02734217875bb0eb4a05d85a621c27b7a44e8c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -5627,6 +5627,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n   cp_id_kind idk = CP_ID_KIND_NONE;\n   tree postfix_expression = NULL_TREE;\n   bool is_member_access = false;\n+  int saved_in_statement = -1;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -5771,6 +5772,66 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n       }\n       break;\n \n+    case RID_CILK_SPAWN:\n+      {\n+\tcp_lexer_consume_token (parser->lexer);\n+\ttoken = cp_lexer_peek_token (parser->lexer);\n+\tif (token->type == CPP_SEMICOLON)\n+\t  {\n+\t    error_at (token->location, \"%<_Cilk_spawn%> must be followed by \"\n+\t\t      \"an expression\");\n+\t    postfix_expression = error_mark_node;\n+\t    break;\n+\t  }\n+\telse if (!current_function_decl)\n+\t  {\n+\t    error_at (token->location, \"%<_Cilk_spawn%> may only be used \"\n+\t\t      \"inside a function\");\n+\t    postfix_expression = error_mark_node;\n+\t    break;\n+\t  }\n+\telse\n+\t  {\n+\t    /* Consecutive _Cilk_spawns are not allowed in a statement.  */\n+\t    saved_in_statement = parser->in_statement;\n+\t    parser->in_statement |= IN_CILK_SPAWN;\n+\t  }\n+\tcfun->calls_cilk_spawn = 1;\n+\tpostfix_expression = \n+\t  cp_parser_postfix_expression (parser, false, false, \n+\t\t\t\t\tfalse, false, &idk);\n+\tif (saved_in_statement & IN_CILK_SPAWN)\n+\t  {\n+\t    error_at (token->location, \"consecutive %<_Cilk_spawn%> keywords \"\n+\t\t      \"are not permitted\");\n+\t    postfix_expression = error_mark_node;\n+\t    cfun->calls_cilk_spawn = 0; \n+\t  }\n+\telse\n+\t  {\n+\t    postfix_expression = build_cilk_spawn (token->location, \n+\t\t\t\t\t\t   postfix_expression);\n+\t    if (postfix_expression != error_mark_node) \n+\t      SET_EXPR_LOCATION (postfix_expression, input_location);\n+\t    parser->in_statement = parser->in_statement & ~IN_CILK_SPAWN;\n+\t  }\n+\tbreak;\n+      }\n+      \n+    case RID_CILK_SYNC:\n+      if (flag_enable_cilkplus)\n+\t{ \n+\t  tree sync_expr = build_cilk_sync ();\n+\t  SET_EXPR_LOCATION (sync_expr, \n+\t\t\t     cp_lexer_peek_token (parser->lexer)->location);\n+\t  finish_expr_stmt (sync_expr);\n+\t}\n+      else\n+\terror_at (input_location, \"_Cilk_sync cannot be used without enabling \"\n+\t\t  \"Cilk Plus\");\n+      cp_lexer_consume_token (parser->lexer);\n+      break;\n+\n     case RID_BUILTIN_SHUFFLE:\n       {\n \tvec<tree, va_gc> *vec;"}, {"sha": "e26e350cd990619cd810af32b0bc7f83f8167530", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -301,6 +301,7 @@ typedef struct GTY(()) cp_parser {\n #define IN_OMP_FOR\t\t8\n #define IN_IF_STMT             16\n #define IN_CILK_SIMD_FOR       32\n+#define IN_CILK_SPAWN          64\n   unsigned char in_statement;\n \n   /* TRUE if we are presently parsing the body of a switch statement."}, {"sha": "2c64a71ec0eec16d3229f60205b9994de96e9f9e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -13762,6 +13762,13 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       error (\"use %<...%> to expand argument pack\");\n       RETURN (error_mark_node);\n \n+    case CILK_SPAWN_STMT:\n+      cfun->calls_cilk_spawn = 1;\n+      RETURN (build_cilk_spawn (EXPR_LOCATION (t), RECUR (CILK_SPAWN_FN (t))));\n+\n+    case CILK_SYNC_STMT:\n+      RETURN (build_cilk_sync ());\n+\n     case COMPOUND_EXPR:\n       tmp = RECUR (TREE_OPERAND (t, 0));\n       if (tmp == NULL_TREE)"}, {"sha": "63f50fb47052886ef1267d6150d6cfffe340ae64", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -10429,6 +10429,8 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \t  return false;\n       return true;\n \n+    case CILK_SYNC_STMT:\n+    case CILK_SPAWN_STMT:\n     case ARRAY_NOTATION_REF:\n       return false;\n "}, {"sha": "01afbac7350c5894d64b2745c029b68a4dba3c06", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -6166,6 +6166,17 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n   if (lhs == error_mark_node || rhs == error_mark_node)\n     return error_mark_node;\n \n+  if (flag_enable_cilkplus\n+      && (TREE_CODE (lhs) == CILK_SPAWN_STMT\n+\t  || TREE_CODE (rhs) == CILK_SPAWN_STMT))\n+    {\n+      location_t loc = (EXPR_HAS_LOCATION (lhs) ? EXPR_LOCATION (lhs)\n+\t\t\t: EXPR_LOCATION (rhs));\n+      error_at (loc,\n+\t\t\"spawned function call cannot be part of a comma expression\");\n+      return error_mark_node;\n+    }\n+\n   if (TREE_CODE (rhs) == TARGET_EXPR)\n     {\n       /* If the rhs is a TARGET_EXPR, then build the compound\n@@ -8290,6 +8301,13 @@ check_return_expr (tree retval, bool *no_warning)\n \n   *no_warning = false;\n \n+  if (flag_enable_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n+    {\n+      error_at (EXPR_LOCATION (retval), \"use of %<_Cilk_spawn%> in a return \"\n+\t\t\"statement is not allowed\");\n+      return NULL_TREE;\n+    }\n+\n   /* A `volatile' function is one that isn't supposed to return, ever.\n      (This is a G++ extension, used to get better code for functions\n      that call the `volatile' function.)  */"}, {"sha": "8bcce22a93850df5fa5fc42899625c462133c4d5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -2204,12 +2204,6 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n   if (! EXPR_HAS_LOCATION (*expr_p))\n     SET_EXPR_LOCATION (*expr_p, input_location);\n \n-  if (fn_contains_cilk_spawn_p (cfun)\n-      && lang_hooks.cilkplus.cilk_detect_spawn_and_unwrap (expr_p) \n-      && !seen_error ())\n-    return (enum gimplify_status) \n-      lang_hooks.cilkplus.gimplify_cilk_spawn (expr_p, pre_p, NULL);\n-\n   /* This may be a call to a builtin function.\n \n      Builtin function calls may be transformed into different\n@@ -4427,12 +4421,6 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n   gcc_assert (TREE_CODE (*expr_p) == MODIFY_EXPR\n \t      || TREE_CODE (*expr_p) == INIT_EXPR);\n-  \n-  if (fn_contains_cilk_spawn_p (cfun)\n-      && lang_hooks.cilkplus.cilk_detect_spawn_and_unwrap (expr_p) \n-      && !seen_error ())\n-    return (enum gimplify_status) \n-      lang_hooks.cilkplus.gimplify_cilk_spawn (expr_p, pre_p, post_p);\n \n   /* Trying to simplify a clobber using normal logic doesn't work,\n      so handle it here.  */\n@@ -7383,19 +7371,6 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    }\n \t  break;\n \n-\tcase CILK_SPAWN_STMT:\n-\t  gcc_assert \n-\t    (fn_contains_cilk_spawn_p (cfun) \n-\t     && lang_hooks.cilkplus.cilk_detect_spawn_and_unwrap (expr_p));\n-\t  if (!seen_error ())\n-\t    {\n-\t      ret = (enum gimplify_status)\n-\t\tlang_hooks.cilkplus.gimplify_cilk_spawn (expr_p, pre_p,\n-\t\t\t\t\t\t\t post_p);\n-\t      break;\n-\t    }\n-\t  /* If errors are seen, then just process it as a CALL_EXPR.  */\n-\n \tcase CALL_EXPR:\n \t  ret = gimplify_call_expr (expr_p, pre_p, fallback != fb_none);\n "}, {"sha": "b7be47200a824658ac9751fead3a90ada6c54ad5", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -214,18 +214,6 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_OMP_CLAUSE_DTOR hook_tree_tree_tree_null\n #define LANG_HOOKS_OMP_FINISH_CLAUSE hook_void_tree\n \n-extern void lhd_install_body_with_frame_cleanup (tree, tree);\n-extern bool lhd_cilk_detect_spawn (tree *);\n-#define LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP lhd_cilk_detect_spawn\n-#define LANG_HOOKS_CILKPLUS_FRAME_CLEANUP lhd_install_body_with_frame_cleanup\n-#define LANG_HOOKS_CILKPLUS_GIMPLIFY_SPAWN lhd_gimplify_expr\n-\n-#define LANG_HOOKS_CILKPLUS {\t\t\t\\\n-  LANG_HOOKS_CILKPLUS_DETECT_SPAWN_AND_UNWRAP,\t\\\n-  LANG_HOOKS_CILKPLUS_FRAME_CLEANUP,\t\t\\\n-  LANG_HOOKS_CILKPLUS_GIMPLIFY_SPAWN            \\\n-}\n-\n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n   LANG_HOOKS_PUSHDECL, \\\n@@ -303,7 +291,6 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_TREE_DUMP_INITIALIZER, \\\n   LANG_HOOKS_DECLS, \\\n   LANG_HOOKS_FOR_TYPES_INITIALIZER, \\\n-  LANG_HOOKS_CILKPLUS, \\\n   LANG_HOOKS_LTO, \\\n   LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS, \\\n   LANG_HOOKS_GET_INNERMOST_GENERIC_ARGS, \\"}, {"sha": "6766ee5c022abdba63f62570e234dbbf46fe35b5", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -676,18 +676,3 @@ lhd_end_section (void)\n       saved_section = NULL;\n     }\n }\n-\n-/* Empty function that is replaced with appropriate language dependent\n-   frame cleanup function for _Cilk_spawn.  */\n-\n-void\n-lhd_install_body_with_frame_cleanup (tree, tree)\n-{\n-}\n-\n-/* Empty function to handle cilk_valid_spawn.  */\n-bool\n-lhd_cilk_detect_spawn (tree *)\n-{\n-  return false;\n-}"}, {"sha": "5a5c8b6c3a725c36ef2296c58bd1e23038a87915", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -139,23 +139,6 @@ struct lang_hooks_for_types\n   tree (*reconstruct_complex_type) (tree, tree);\n };\n \n-/* Language hooks related to Cilk Plus.  */\n-\n-struct lang_hooks_for_cilkplus\n-{\n-  /* Returns true if the expression passed in has a spawned function call.  */\n-  bool (*cilk_detect_spawn_and_unwrap) (tree *);\n-\n-  /* Function to add the clean up functions after spawn.  The reason why it is\n-     language dependent is because in C++, it must handle exceptions.  */\n-  void (*install_body_with_frame_cleanup) (tree, tree);\n-\n-  /* Function to gimplify a spawned function call.  Returns enum gimplify\n-     status, but as mentioned in a previous comment, we can't see that type \n-     here, so just return an int.  */\n-  int (*gimplify_cilk_spawn) (tree *, gimple_seq *, gimple_seq *);\n-};\n-\n /* Language hooks related to decls and the symbol table.  */\n \n struct lang_hooks_for_decls\n@@ -424,8 +407,6 @@ struct lang_hooks\n   struct lang_hooks_for_decls decls;\n \n   struct lang_hooks_for_types types;\n-\n-  struct lang_hooks_for_cilkplus cilkplus;\n   \n   struct lang_hooks_for_lto lto;\n "}, {"sha": "e57eaf0a163be36dee8723181b12f4b4b83c963a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -1,3 +1,15 @@\n+2013-12-11  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* g++.dg/cilk-plus/CK/catch_exc.cc: New test case.\n+\t* g++.dg/cilk-plus/CK/const_spawn.cc: Likewise.\n+\t* g++.dg/cilk-plus/CK/fib-opr-overload.cc: Likewise.\n+\t* g++.dg/cilk-plus/CK/fib-tplt.cc: Likewise.\n+\t* g++.dg/cilk-plus/CK/lambda_spawns.cc: Likewise.\n+\t* g++.dg/cilk-plus/CK/lambda_spawns_tplt.cc: Likewise.\n+\t* g++.dg/cilk-plus/cilk-plus.exp: Added support to run Cilk Keywords\n+\ttest stored in c-c++-common.  Also, added the Cilk runtime's library\n+\tto the ld_library_path.\n+\t\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR middle-end/59134"}, {"sha": "0633d19030ce2ae48db56acb7ca4eec6090f4ed1", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/catch_exc.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fcatch_exc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fcatch_exc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fcatch_exc.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+\n+#include <assert.h>\n+#include <unistd.h>\n+#if HAVE_IO\n+#include <cstdio>\n+#include <cilk/cilk_api.h>\n+#endif\n+#include <cstdlib>\n+\n+\n+void func(int volatile* steal_me) \n+{\n+  while (! (*steal_me)) \n+    {\n+      usleep(2000);\n+    }\n+#if HAVE_IO\n+  printf(\"Foo executing on %d\\n\", __cilkrts_get_worker_number());\n+#endif\n+  throw 5;\n+}\n+\n+void my_test() \n+{\n+  volatile int steal_me = 0;\n+\n+  try \n+    {\n+      _Cilk_spawn func(&steal_me);\n+#if HAVE_IO\n+      printf(\"Continuation executing on %d\\n\",\n+\t     __cilkrts_get_worker_number());\n+#endif\n+      steal_me = 1;\n+      _Cilk_sync;\n+      goto bad;\n+    }\n+\n+  catch (int x) \n+    {\n+#if HAVE_IO\n+      printf(\"We caught x = %d\\n\", x);\n+#endif\n+      assert(x == 5);\n+    }\n+  if (0) \n+    {\n+    bad:\n+#if HAVE_IO\n+      printf(\"We should not be here!\\n\");\n+#endif\n+      __builtin_abort ();\n+    }\n+}\n+\n+\n+int main() \n+{\n+  my_test();\n+#if HAVE_IO\n+  printf(\"PASSED\\n\");\n+#endif\n+  return 0;\n+}"}, {"sha": "1ea473f1d57f256479ea2a99252fffd40773ae17", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/const_spawn.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fconst_spawn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fconst_spawn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fconst_spawn.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+\n+class Rectangle\n+{\n+  int area_val, h, w;\n+  public:\n+    Rectangle (int, int);\n+    Rectangle (int, int, int);\n+    ~Rectangle ();\n+    int area ();\n+};\n+Rectangle::~Rectangle ()\n+{\n+  h = 0;\n+  w = 0;\n+  area_val = 0;\n+}\n+Rectangle::Rectangle (int height, int width)\n+{\n+  h = height;\n+  w = width;\n+  area_val = 0;\n+}\n+\n+Rectangle::Rectangle (int height, int width, int area_orig)\n+{\n+  h = height;\n+  w = width;\n+  area_val = area_orig;\n+}\n+\n+int Rectangle::area()\n+{\n+  return (area_val += (h*w));\n+}\n+\n+/* Spawning constructor.  */\n+int main1 (void)\n+{\n+  Rectangle r = _Cilk_spawn Rectangle (4, 3);\n+  return r.area();\n+}\n+ \n+/* Spawning constructor 2.  */\n+int main2 (void)\n+{\n+  Rectangle r (_Cilk_spawn Rectangle (4, 3));\n+  return r.area();\n+}\n+\n+/* Spawning copy constructor.  */\n+int main3 (void)\n+{\n+  Rectangle r = _Cilk_spawn Rectangle (4, 3, 2);\n+  return r.area ();\n+}\n+\n+/* Spawning copy constructor 2.  */\n+int main4 (void)\n+{\n+  Rectangle r ( _Cilk_spawn Rectangle (4, 3, 2));\n+  return r.area();\n+}\n+\n+int main (void)\n+{\n+  if (main1 () != 12)\n+    __builtin_abort ();\n+  if (main2 () != 12)\n+    __builtin_abort ();\n+  if (main3 () != 14)\n+    __builtin_abort ();\n+  if (main4() != 14)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6af4a367b7d6881fd5e68f05ed51b732b0674874", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/fib-opr-overload.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-opr-overload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-opr-overload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-opr-overload.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+\n+#if HAVE_IO\n+#include <iostream>\n+#endif\n+\n+class Some_Struct\n+{\n+  int calculated_value;\n+  short some_unused_value;\n+public:\n+  Some_Struct () {\n+      this->calculated_value = 0;\n+  }\n+  Some_Struct (int value) {\n+      this->calculated_value = value;\n+  }\n+  Some_Struct operator=(Some_Struct f) {\n+      this->calculated_value = f.calculated_value;\n+      return *this;\n+  }\n+  bool operator!=(Some_Struct f) {\n+      return (this->calculated_value != f.calculated_value);\n+  }\n+  Some_Struct operator+(Some_Struct &f) {\n+    Some_Struct z;\n+    z.calculated_value = this->calculated_value + f.calculated_value;\n+      return z;\n+  }\n+  Some_Struct operator-(int x) {\n+    Some_Struct z;\n+    z.calculated_value = this->calculated_value - x;\n+    return z;\n+  }\n+  bool operator<(int x) {\n+      return (this->calculated_value < x);\n+  }\n+  int get_calculated_value () {\n+      return this->calculated_value;\n+  }\n+};\n+\n+\n+template <class T>\n+T fibonacci_serial (T f)\n+{\n+  if (f < 2)\n+    return f;\n+  T a = fibonacci_serial (f-1);\n+  T b = fibonacci_serial (f-2);\n+  return (a+b);\n+}\n+\n+template <class T>\n+T fibonacci (T f)\n+{\n+  if (f < 2)\n+    return f;\n+  T a = _Cilk_spawn fibonacci (f-1);\n+  T b = fibonacci (f-2);\n+  _Cilk_sync; \n+  return (a+b);\n+}\n+\n+int main (void)\n+{\n+  Some_Struct f (40), f_serial(40);\n+  f = fibonacci (f);\n+  f_serial = fibonacci_serial (f_serial);\n+  \n+  if (f != f_serial)\n+    __builtin_abort ();\n+  \n+  int t = 40, t_serial = 40;\n+  t = fibonacci (t);\n+  t_serial = fibonacci_serial (t_serial);\n+  if (t != t_serial)\n+    __builtin_abort ();\n+\n+  short s = 20, s_serial = 20;\n+  s = fibonacci (s);\n+  s_serial = fibonacci_serial (s_serial);\n+  if (s != s_serial)\n+    __builtin_abort ();\n+\n+#if HAVE_IO\n+  std::cout << \"Fib_Parallel (40) = \" << f.get_calculated_value() << std::endl;\n+  std::cout << \"Fib_Serial   (40) = \" << f_serial.get_calculated_value() \n+    << std::endl;\n+#endif\n+  return 0;\n+}"}, {"sha": "dbc2da881a9e04ffe17486779a049e08ef573114", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/fib-tplt.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-tplt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-tplt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Ffib-tplt.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-*-* } } } */\n+\n+struct fib_struct\n+{\n+  int x;\n+  int *y;\n+  int z[3];\n+  struct fib_struct *ptr_next;\n+  struct fib_struct operator+(struct fib_struct &other) {\n+    struct fib_struct z ;\n+     z.x = (*this).x + (other.x);\n+    return z; \n+  }\n+  struct fib_struct operator-(int other) {\n+    struct fib_struct z ;\n+    z.x = this->x - other;\n+    return z;\n+  }\n+  bool operator<(int number) {\n+   return (this->x < number);\n+  }\n+    \n+};\n+\n+template <typename T>\n+T fib (T z) {\n+    if (z < 2) return z;\n+    T a = _Cilk_spawn fib<T>(z - 1);\n+    T b = fib<T>(z - 2);\n+    T c = a + b;\n+    return (a+b);\n+}\n+\n+\n+int sfib(int x)\n+{\n+  if (x < 2) return x;\n+  int a = sfib(x-1);\n+  int b = sfib(x-2);\n+  return (a+b);\n+}\n+\n+int main () {\n+     int z = 30;\n+     int parallel_fib = fib<int>(z);\n+     int serial_fib = sfib(z);\n+    if (serial_fib != parallel_fib) \n+      __builtin_abort ();\n+    \n+    return 0;\n+}"}, {"sha": "7448d1a8a30b0d1426e8e2185fdf1a511432fd94", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/lambda_spawns.cc", "status": "added", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,236 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-std=c++11 -fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+#define FIRST_NUMBER 5\n+#define SECOND_NUMBER 3\n+#define HAVE_IO 0\n+#if HAVE_IO\n+#include <stdio.h>\n+#endif\n+\n+#include <stdlib.h>\n+\n+int global_var;\n+\n+void foo1(int *array, int size)\n+{\n+#if HAVE_IO\n+  for (int ii = 0; ii < size; ii++) \n+    printf(\"%2d\\t\", array[ii]);\n+  printf(\"\\n\");\n+  fflush (stdout);\n+#else\n+  if (size != 2)\n+    __builtin_abort ();\n+  if (array[0] != FIRST_NUMBER)\n+    __builtin_abort ();\n+  if (array[1] != SECOND_NUMBER)\n+    __builtin_abort ();\n+#endif\n+  global_var++;\n+}\n+void foo1_c(const int *array, int size)\n+{\n+#if HAVE_IO\n+  for (int ii = 0; ii < size; ii++) \n+    printf(\"%2d\\t\", array[ii]);\n+  printf(\"\\n\");\n+  fflush (stdout);\n+#else\n+  if (size != 2)\n+    __builtin_abort ();\n+  if (array[0] != FIRST_NUMBER)\n+    __builtin_abort ();\n+  if (array[1] != SECOND_NUMBER)\n+    __builtin_abort ();\n+#endif\n+  global_var++;\n+}\n+\n+\n+int main2 (int argc) {\n+  int A[2] = {FIRST_NUMBER, SECOND_NUMBER};\n+  int B[2] = {FIRST_NUMBER, SECOND_NUMBER};\n+  int main_size = argc+1; /* We know argc is 1, and so 1+1 = 2.  */\n+  int q = 0;\n+\n+  global_var = 0;\n+  auto func0 = [=](){ foo1_c(A, 2); };\n+  _Cilk_spawn func0();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func1 = [=](int *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func1 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func2 = [=](int *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func2 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func3 = [=](int *Aa, int size){ int new_size = (size % 2 + 2); \n+\t\t\t\t       foo1(Aa, size); };\n+  _Cilk_spawn func3 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func4 = [](int *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func4 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func5 = [](int *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func5 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func6 = [&](int *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func6 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func7 = [&](int *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func7 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func8 = [&](){ foo1(A, 2); };\n+  _Cilk_spawn func8 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  /* We ignore the first param here and pass in A from the outer fn.  */\n+  auto func9 = [&](int *Aa, int size){ foo1(A, size); };\n+  _Cilk_spawn func9 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func10 = [=](){ foo1_c(A, main_size); };\n+  _Cilk_spawn func10 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  auto func11 = [&](){ foo1(A, main_size); };\n+  _Cilk_spawn func11 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  /* We ignore the first & second param here and pass in A from the \n+     outer fn.  */\n+  auto func12 = [&](int *Aa, int size){ foo1(A, main_size); };\n+  _Cilk_spawn func12 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [&](int *Aa){ foo1(Aa, 2); }(A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [&](int *Aa, int size){ foo1(Aa, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [=](int *Aa){ foo1(Aa, 2); }(A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [=](int *Aa, int size){ foo1(Aa, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  /* We ignore the first param here.  */\n+  _Cilk_spawn [=](int *Aa, int size){ foo1_c(A, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  /* We ignore the first and second param here.  */\n+  _Cilk_spawn [=](int *Aa, int size){ foo1_c(A, size); }(B, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [&](){ foo1(A, 2); }();\n+  [&](){ foo1(A, 2); }();\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [=](){ foo1_c (A, main_size); }();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  global_var = 0;\n+  _Cilk_spawn [&](){ foo1(A, main_size); }();\n+  [&](){ foo1(A, 2); }();\n+  _Cilk_sync;\n+  if (global_var != 2)\n+    return (++q);\n+\n+  return q;\n+}\n+\n+int main (void)\n+{\n+  return main2 (1);\n+}"}, {"sha": "2667f5a999269ce4c0f723fb0aae358acf369249", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/lambda_spawns_tplt.cc", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns_tplt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns_tplt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Flambda_spawns_tplt.cc?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -0,0 +1,173 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-std=c++11 -fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+\n+#define FIRST_NUMBER 5\n+#define SECOND_NUMBER 3\n+#define HAVE_IO 0\n+#if HAVE_IO\n+#include <stdio.h>\n+#endif\n+\n+#include <stdlib.h>\n+\n+template <class T>\n+void foo1(T *array, int size)\n+{\n+#if HAVE_IO\n+  for (int ii = 0; ii < size; ii++) \n+    printf(\"%2d\\t\", (int)array[ii]);\n+  printf(\"\\n\");\n+  fflush (stdout);\n+#else\n+  if (size != 2)\n+    __builtin_abort ();\n+  if (array[0] != FIRST_NUMBER)\n+    __builtin_abort ();\n+  if (array[1] != SECOND_NUMBER)\n+    __builtin_abort ();\n+#endif\n+}\n+template <class T>\n+void foo1_c(const T *array, int size)\n+{\n+#if HAVE_IO\n+  for (int ii = 0; ii < size; ii++) \n+    printf(\"%2d\\t\", (int)array[ii]);\n+  printf(\"\\n\");\n+  fflush (stdout);\n+#else\n+  if (size != 2)\n+    __builtin_abort ();\n+  if (array[0] != FIRST_NUMBER)\n+    __builtin_abort ();\n+  if (array[1] != SECOND_NUMBER)\n+    __builtin_abort ();\n+#endif\n+}\n+template <class T>\n+int main2 (int argc, char **argv) {\n+  T A[2] = {FIRST_NUMBER, SECOND_NUMBER};\n+  int main_size = argc+1; /* We know argc is 1, and so 1+1 = 2.  */\n+  auto func0 = [=](){ foo1_c(A, 2); };\n+  _Cilk_spawn func0();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func1 = [=](T *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func1 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func2 = [=](T *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func2 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func3 = [=](T *Aa, int size){ int new_size = (size % 2 + 2); \n+\t\t\t\t       foo1(Aa, size); };\n+  _Cilk_spawn func3 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func4 = [](T *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func4 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func5 = [](T *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func5 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func6 = [&](T *Aa){ foo1(Aa, 2); };\n+  _Cilk_spawn func6 (A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func7 = [&](T *Aa, int size){ foo1(Aa, size); };\n+  _Cilk_spawn func7 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func8 = [&](){ foo1(A, 2); };\n+  _Cilk_spawn func8 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  /* We ignore the first param here and pass in A from the outer fn.  */\n+  auto func9 = [&](T *Aa, int size){ foo1(A, size); };\n+  _Cilk_spawn func9 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func10 = [=](){ foo1_c(A, main_size); };\n+  _Cilk_spawn func10 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  auto func11 = [&](){ foo1(A, main_size); };\n+  _Cilk_spawn func11 ();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  /* We ignore the first & second param here and pass in A from the \n+     outer fn.  */\n+  auto func12 = [&](T *Aa, int size){ foo1(A, main_size); };\n+  _Cilk_spawn func12 (A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [&](T *Aa){ foo1(Aa, 2); }(A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [&](T *Aa, int size){ foo1(Aa, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [=](T *Aa){ foo1(Aa, 2); }(A);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [=](T *Aa, int size){ foo1(Aa, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  /* We ignore the first param here.  */\n+  _Cilk_spawn [=](T *Aa, int size){ foo1_c(A, size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  /* We ignore the first and second param here.  */\n+  _Cilk_spawn [=](T *Aa, int size){ foo1_c(A, main_size); }(A, 2);\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [&](){ foo1(A, 2); }();\n+  [&](){ foo1(A, 2); }();\n+  _Cilk_sync;\n+\n+  _Cilk_spawn [=](){ foo1_c(A, main_size); }();\n+  foo1 (A, 2);\n+  _Cilk_sync;\n+\t\n+  _Cilk_spawn [&](){ foo1(A, main_size); }();\n+  [&](){ foo1(A, 2); }();\n+  _Cilk_sync;\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int argc = 1;\n+  char **argv = NULL;\n+  int x = 1, y = 1, z = 1, q = 1, p = 1;\n+  x = main2<char>(argc,argv);\n+  y = main2<short>(argc,argv);\n+  z = main2<int>(argc,argv);\n+  p = main2<long>(argc,argv);\n+  q = main2<long long>(argc,argv);\n+  return (x+y+z+p+q);\n+}"}, {"sha": "36c811125859b114ba49d1e6fe1e3e7ae6156347", "filename": "gcc/testsuite/g++.dg/cilk-plus/cilk-plus.exp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12893402ec1718a978e540eb1f6bd9c32a4555ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2Fcilk-plus.exp?ref=12893402ec1718a978e540eb1f6bd9c32a4555ab", "patch": "@@ -22,6 +22,14 @@ if { ![check_effective_target_cilkplus] } {\n     return;\n }\n \n+verbose \"$tool $libdir\" 1\n+set library_var \"[get_multilibs]\"\n+# Pointing the ld_library_path to the Cilk Runtime library binaries.\n+set ld_library_path \"$[get_multilibs]/libcilkrts/.libs\"\n+\n+set ALWAYS_CFLAGS \"\"\n+lappend ALWAYS_CFLAGS \"-L${library_var}/libcilkrts/.libs\"\n+\n dg-init\n # Run the tests that are shared with C.\n g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/PS/*.c]] \"\"\n@@ -63,4 +71,23 @@ dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -g -O3\n dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/AN/*.cc]] \" -O3 -ftree-vectorize -fcilkplus -g\" \" \"\n dg-finish\n \n+dg-init\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O1 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O2 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -O3 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -O2 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/g++.dg/cilk-plus/CK/*.cc]] \" -g -O3 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-finish\n+\n+dg-init\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O1 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O2 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -O3 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -fcilkplus\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O2 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cilk-plus/CK/*.c]] \" -g -O3 -fcilkplus $ALWAYS_CFLAGS\" \" \"\n+dg-finish\n unset TEST_EXTRA_LIBS"}]}