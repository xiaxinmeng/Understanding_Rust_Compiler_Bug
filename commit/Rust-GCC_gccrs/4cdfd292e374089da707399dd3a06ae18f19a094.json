{"sha": "4cdfd292e374089da707399dd3a06ae18f19a094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkZmQyOTJlMzc0MDg5ZGE3MDczOTlkZDNhMDZhZTE4ZjE5YTA5NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-17T20:44:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-17T20:44:03Z"}, "message": "CollationKey.java: Implement Comparable.\n\n\t* java/text/CollationKey.java: Implement Comparable.\n\t(compareTo(Object)): New method.\n\t* java/text/Collator.java (compare(Object,Object)): New method.\n\tImplement Comparator.\n\n\t* java/util/zip/InflaterInputStream.java (available): New method.\n\t(close): New method.\n\t(read, available, skip, fill): Throw exception if stream closed.\n\t* java/util/zip/ZipInputStream.java (read, skip, readFully, fill,\n\tgetNextEntry): Throw exception if closed.\n\nFrom-SVN: r37525", "tree": {"sha": "0ca710082c0fee778050b7a6372e10201f7c22aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca710082c0fee778050b7a6372e10201f7c22aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cdfd292e374089da707399dd3a06ae18f19a094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdfd292e374089da707399dd3a06ae18f19a094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdfd292e374089da707399dd3a06ae18f19a094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdfd292e374089da707399dd3a06ae18f19a094/comments", "author": null, "committer": null, "parents": [{"sha": "6414587c8b13a4a0a45788f411c9fe5fd87466ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6414587c8b13a4a0a45788f411c9fe5fd87466ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6414587c8b13a4a0a45788f411c9fe5fd87466ce"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "bf5b81a7d0b9af7dcbf33adbe26746d528814283", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4cdfd292e374089da707399dd3a06ae18f19a094", "patch": "@@ -1,3 +1,32 @@\n+2000-11-17  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/text/CollationKey.java: Implement Comparable.\n+\t(compareTo(Object)): New method.\n+\t* java/text/Collator.java (compare(Object,Object)): New method.\n+\tImplement Comparator.\n+\n+\t* java/util/zip/InflaterInputStream.java (available): New method.\n+\t(close): New method.\n+\t(read, available, skip, fill): Throw exception if stream closed.\n+\t* java/util/zip/ZipInputStream.java (read, skip, readFully, fill,\n+\tgetNextEntry): Throw exception if closed.\n+\n+2000-11-16  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/io/PushbackReader.java: Merged with Classpath.\n+\t* java/util/Arrays.java: Updated from Classpath.\n+\n+\t* scripts/blocks.pl: New file.\n+\t* java/lang/Character.java (Subset): New class.\n+\t(UnicodeBlock): New class.\n+\n+\t* java/lang/Math.java (toDegrees, toRadians): New methods.\n+\n+\t* java/lang/Float.java: Implement Comparable.\n+\t(compareTo): New methods.\n+\t* java/lang/Double.java: Implement Comparable.\n+\t(compareTo): New methods.\n+\n 2000-11-16  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/beans/PropertyChangeSupport.java (propertyListeners): Made"}, {"sha": "966c64d1c3f0dff4755803294ca564d7462a442b", "filename": "libjava/java/text/CollationKey.java", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Ftext%2FCollationKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Ftext%2FCollationKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationKey.java?ref=4cdfd292e374089da707399dd3a06ae18f19a094", "patch": "@@ -1,6 +1,6 @@\n // CollationKey.java - Sort key for locale-sensitive String.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -19,7 +19,7 @@\n  * Status: Believed complete and correct.\n  */\n \n-public final class CollationKey\n+public final class CollationKey implements Comparable\n {\n   public int compareTo (CollationKey target)\n   {\n@@ -34,6 +34,11 @@ public int compareTo (CollationKey target)\n     return key.length - target.key.length;\n   }\n \n+  public int compareTo (Object o)\n+  {\n+    return compareTo ((CollationKey) o);\n+  }\n+\n   public boolean equals (Object obj)\n   {\n     if (! (obj instanceof CollationKey))"}, {"sha": "60da5312b4f539b2d18a375b70c8bad8905b766e", "filename": "libjava/java/text/Collator.java", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Ftext%2FCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Ftext%2FCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollator.java?ref=4cdfd292e374089da707399dd3a06ae18f19a094", "patch": "@@ -13,6 +13,7 @@\n import java.util.Locale;\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n+import java.util.Comparator;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -23,7 +24,7 @@\n  * Status: Mostly complete, but parts stubbed out.  Look for FIXME.\n  */\n \n-public abstract class Collator implements Cloneable\n+public abstract class Collator implements Comparator, Cloneable\n {\n   public static final int NO_DECOMPOSITION = 0;\n   public static final int CANONICAL_DECOMPOSITION = 1;\n@@ -42,6 +43,11 @@ protected Collator ()\n \n   public abstract int compare (String source, String target);\n \n+  public int compare (Object o1, Object o2)\n+  {\n+    return compare ((String) o1, (String) o2);\n+  }\n+\n   public boolean equals (Object obj)\n   {\n     if (! (obj instanceof Collator))"}, {"sha": "3db1b2a1eb3289748ca0a712ad469221ac53dd02", "filename": "libjava/java/util/zip/InflaterInputStream.java", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java?ref=4cdfd292e374089da707399dd3a06ae18f19a094", "patch": "@@ -1,6 +1,6 @@\n // InflaterInputStream.java - Input stream filter for decompressing.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -28,6 +28,8 @@ public class InflaterInputStream extends FilterInputStream\n {\n   protected void fill () throws IOException\n   {\n+    if (inf == null)\n+      throw new IOException (\"stream closed\");\n     len = in.read(buf, 0, buf.length);\n     if (len != -1)\n       inf.setInput(buf, 0, len);\n@@ -61,6 +63,8 @@ public int read () throws IOException\n \n   public int read (byte[] buf, int off, int len) throws IOException\n   {\n+    if (inf == null)\n+      throw new IOException (\"stream closed\");\n     if (inf.finished())\n       return -1;\n     if (inf.needsInput())\n@@ -79,8 +83,26 @@ public int read (byte[] buf, int off, int len) throws IOException\n       }\n   }\n \n+  public void close () throws IOException\n+  {\n+    inf = null;\n+    super.close ();\n+  }\n+\n+  public int available () throws IOException\n+  {\n+    // According to the JDK 1.2 docs, this should only ever return 0\n+    // or 1 and should not be relied upon by Java programs.\n+    if (inf == null)\n+      throw new IOException (\"stream closed\");\n+    return inf.finished () ? 0 : 1;\n+  }\n+\n   public long skip (long n) throws IOException\n   {\n+    if (inf == null)\n+      throw new IOException (\"stream closed\");\n+\n     if (n == 0)\n       return 0;\n "}, {"sha": "b50cc7be5927bb0250c435f1f92acc5a27067939", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cdfd292e374089da707399dd3a06ae18f19a094/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=4cdfd292e374089da707399dd3a06ae18f19a094", "patch": "@@ -35,6 +35,8 @@ public ZipInputStream (InputStream in)\n \n   public ZipEntry getNextEntry () throws IOException\n   {\n+    if (closed)\n+      throw new IOException (\"stream closed\");\n     if (current != null)\n       closeEntry();\n     if (in.read() != 'P'\n@@ -112,6 +114,8 @@ public ZipEntry getNextEntry () throws IOException\n   // back data.\n   protected void fill () throws IOException\n   {\n+    if (closed)\n+      throw new IOException (\"stream closed\");\n     int count = buf.length;\n     if (count > compressed_bytes)\n       count = compressed_bytes;\n@@ -127,9 +131,11 @@ protected ZipEntry createZipEntry (String name)\n   {\n     return new ZipEntry (name);\n   }\n-  \n+\n   public int read (byte[] b, int off, int len)  throws IOException\n   {\n+    if (closed)\n+      throw new IOException (\"stream closed\");\n     if (len > avail)\n       len = avail;\n     int count;\n@@ -149,6 +155,8 @@ public int read (byte[] b, int off, int len)  throws IOException\n \n   public long skip (long n)  throws IOException\n   {\n+    if (closed)\n+      throw new IOException (\"stream closed\");\n     if (n > avail)\n       n = avail;\n     long count;\n@@ -160,11 +168,9 @@ public long skip (long n)  throws IOException\n     return count;\n   }\n \n-  public int available() {\n-    if (closed)\n-      return 0;\n-    else\n-      return 1;\n+  public int available()\n+  {\n+    return closed ? 0 : 1;\n   }\n \n   private void readFully (byte[] b)  throws IOException"}]}