{"sha": "07231d4f834e1286c28f28bd18065fdde30912ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyMzFkNGY4MzRlMTI4NmMyOGYyOGJkMTgwNjVmZGRlMzA5MTJiYQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-16T23:32:12Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-16T23:32:12Z"}, "message": "invoke.texi (-Wconversion): Document warnings specific to C++.\n\n2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* doc/invoke.texi (-Wconversion): Document warnings specific to C++.\n\t* c-common.c (convert_and_check): Move warning logic to...\n\t(warnings_for_convert_and_check): ...here. Define.\n\t* c-common.h (warnings_for_convert_and_check): Declare.\ncp/\n\t* cvt.c (cp_convert_and_check) : Define.\n\t* cp-tree.h (cp_convert_and_check): Declare.\n\t* call.c (convert_conversion_warnings): Rename to\n\tconversion_null_warnings.  The warning for floating-point to\n\tinteger is handled by convert_and_check in convert_like_real.\n\t(convert_like_real): convert_conversion_warnings was renamed as\n\tconversion_null_warnings.\n\t* typeck.c (build_binary_op): Use cp_convert_and_check to warn for\n\toverflow and changes of value during conversion.\ntestsuite/\n\t* g++.dg/warn/Wconversion-integer.C: New\n\t* g++.dg/warn/Wconversion-real.C: New.\n\t* g++.dg/warn/Wconversion-real-integer.C: New.\n\t* g++.dg/warn/conv2.C: Updated.\n\nFrom-SVN: r123005", "tree": {"sha": "5a95c9649676f7d06f094cc2fa3481529f14eef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a95c9649676f7d06f094cc2fa3481529f14eef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07231d4f834e1286c28f28bd18065fdde30912ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07231d4f834e1286c28f28bd18065fdde30912ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07231d4f834e1286c28f28bd18065fdde30912ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07231d4f834e1286c28f28bd18065fdde30912ba/comments", "author": null, "committer": null, "parents": [{"sha": "aefd26064caa4f8e041540679169265d74e8f3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aefd26064caa4f8e041540679169265d74e8f3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aefd26064caa4f8e041540679169265d74e8f3fd"}], "stats": {"total": 380, "additions": 345, "deletions": 35}, "files": [{"sha": "008e18cc010a2c246166cda5b2aed78b1fcbf252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -1,3 +1,10 @@\n+2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* doc/invoke.texi (-Wconversion): Document warnings specific to C++.\n+\t* c-common.c (convert_and_check): Move warning logic to...\n+\t(warnings_for_convert_and_check): ...here. Define.\n+\t* c-common.h (warnings_for_convert_and_check): Declare.\n+\t\n 2007-03-16  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (attr_length_call): Partially revert change of 2007-03-09."}, {"sha": "8f71e6916ed7ce0c879bdd1979bb18523f04fd36", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -1168,7 +1168,7 @@ vector_types_convertible_p (tree t1, tree t2, bool emit_lax_note)\n }\n \n /* Warns if the conversion of EXPR to TYPE may alter a value.\n-   This function is called from convert_and_check.  */\n+   This is a helper function for warnings_for_convert_and_check.  */\n \n static void\n conversion_warning (tree type, tree expr)\n@@ -1276,23 +1276,13 @@ conversion_warning (tree type, tree expr)\n     }\n }\n \n-/* Convert EXPR to TYPE, warning about conversion problems with constants.\n-   Invoke this function on every expression that is converted implicitly,\n-   i.e. because of language rules and not because of an explicit cast.  */\n+/* Produce warnings after a conversion. RESULT is the result of\n+   converting EXPR to TYPE.  This is a helper function for\n+   convert_and_check and cp_convert_and_check.  */\n \n-tree\n-convert_and_check (tree type, tree expr)\n+void\n+warnings_for_convert_and_check (tree type, tree expr, tree result)\n {\n-  tree result;\n-\n-  if (TREE_TYPE (expr) == type)\n-    return expr;\n-  \n-  result = convert (type, expr);\n-\n-  if (skip_evaluation || TREE_OVERFLOW_P (expr))\n-    return result;\n-\n   if (TREE_CODE (expr) == INTEGER_CST\n       && (TREE_CODE (type) == INTEGER_TYPE\n           || TREE_CODE (type) == ENUMERAL_TYPE)\n@@ -1332,7 +1322,26 @@ convert_and_check (tree type, tree expr)\n              \"overflow in implicit constant conversion\");\n   else if (warn_conversion)\n     conversion_warning (type, expr);\n+}\n+\n+\n+/* Convert EXPR to TYPE, warning about conversion problems with constants.\n+   Invoke this function on every expression that is converted implicitly,\n+   i.e. because of language rules and not because of an explicit cast.  */\n+\n+tree\n+convert_and_check (tree type, tree expr)\n+{\n+  tree result;\n+\n+  if (TREE_TYPE (expr) == type)\n+    return expr;\n   \n+  result = convert (type, expr);\n+\n+  if (!skip_evaluation && !TREE_OVERFLOW_P (expr))\n+    warnings_for_convert_and_check (type, expr, result);\n+\n   return result;\n }\n \f"}, {"sha": "b16a02d6b13b598b109ff77fb1e61eff6749db6e", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -671,6 +671,7 @@ struct varray_head_tag;\n extern void constant_expression_warning (tree);\n extern void strict_aliasing_warning (tree, tree, tree);\n extern void empty_if_body_warning (tree, tree);\n+extern void warnings_for_convert_and_check (tree, tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void warn_logical_operator (enum tree_code, tree, tree);"}, {"sha": "f5d26c01974a149895157b1fa949ce087295676b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -1,3 +1,15 @@\n+2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* cvt.c (cp_convert_and_check) : Define.\n+\t* cp-tree.h (cp_convert_and_check): Declare.\n+\t* call.c (convert_conversion_warnings): Rename to\n+\tconversion_null_warnings.  The warning for floating-point to\n+\tinteger is handled by convert_and_check in convert_like_real.\n+\t(convert_like_real): convert_conversion_warnings was renamed as\n+\tconversion_null_warnings.\n+\t* typeck.c (build_binary_op): Use cp_convert_and_check to warn for\n+\toverflow and changes of value during conversion.\n+\n 2007-03-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/30891"}, {"sha": "8218ed44e4249eabfe93cf61c5e5f9d40a7236c4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -4245,11 +4245,12 @@ build_temp (tree expr, tree type, int flags,\n   return expr;\n }\n \n-/* Perform warnings about conversion of EXPR to type TOTYPE.\n+/* Perform warnings about peculiar, but valid, conversions from/to NULL.\n+   EXPR is implicitly converted to type TOTYPE.\n    FN and ARGNUM are used for diagnostics.  */\n \n static void\n-convert_conversion_warnings (tree totype, tree expr, tree fn, int argnum)\n+conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n {\n   tree t = non_reference (totype);\n \n@@ -4263,19 +4264,8 @@ convert_conversion_warnings (tree totype, tree expr, tree fn, int argnum)\n \twarning (OPT_Wconversion, \"converting to non-pointer type %qT from NULL\", t);\n     }\n \n-  /* Warn about assigning a floating-point type to an integer type.  */\n-  if (TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n-      && TREE_CODE (t) == INTEGER_TYPE)\n-    {\n-      if (fn)\n-\twarning (OPT_Wconversion, \"passing %qT for argument %P to %qD\",\n-\t\t TREE_TYPE (expr), argnum, fn);\n-      else\n-\twarning (OPT_Wconversion, \"converting to %qT from %qT\", t, TREE_TYPE (expr));\n-    }\n-\n   /* Issue warnings if \"false\" is converted to a NULL pointer */\n-  if (expr == boolean_false_node && fn && POINTER_TYPE_P (t))\n+  else if (expr == boolean_false_node && fn && POINTER_TYPE_P (t))\n     warning (OPT_Wconversion,\n \t     \"converting %<false%> to pointer type for argument %P of %qD\",\n \t     argnum, fn);\n@@ -4328,7 +4318,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     }\n \n   if (issue_conversion_warnings)\n-    convert_conversion_warnings (totype, expr, fn, argnum);\n+    conversion_null_warnings (totype, expr, fn, argnum);\n \n   switch (convs->kind)\n     {\n@@ -4415,7 +4405,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n   expr = convert_like_real (convs->u.next, expr, fn, argnum,\n \t\t\t    convs->kind == ck_ref_bind ? -1 : 1,\n-\t\t\t    /*issue_conversion_warnings=*/false,\n+\t\t\t    convs->kind == ck_ref_bind ? issue_conversion_warnings : false, \n \t\t\t    c_cast_p);\n   if (expr == error_mark_node)\n     return error_mark_node;"}, {"sha": "b9b35006643ecdec45fccf2c07b9bab480954c31", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -4049,6 +4049,7 @@ extern tree convert_from_reference\t\t(tree);\n extern tree force_rvalue\t\t\t(tree);\n extern tree ocp_convert\t\t\t\t(tree, tree, int, int);\n extern tree cp_convert\t\t\t\t(tree, tree);\n+extern tree cp_convert_and_check                (tree, tree);\n extern tree convert_to_void\t(tree, const char */*implicit context*/);\n extern tree convert_force\t\t\t(tree, tree, int);\n extern tree build_expr_type_conversion\t\t(int, tree, bool);"}, {"sha": "947f1f22ca1ca32a779e41bcda1ff5cf4c6bcc4b", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -593,6 +593,29 @@ cp_convert (tree type, tree expr)\n   return ocp_convert (type, expr, CONV_OLD_CONVERT, LOOKUP_NORMAL);\n }\n \n+/* C++ equivalent of convert_and_check but using cp_convert as the\n+   conversion function.\n+\n+   Convert EXPR to TYPE, warning about conversion problems with constants.\n+   Invoke this function on every expression that is converted implicitly,\n+   i.e. because of language rules and not because of an explicit cast.  */\n+\n+tree\n+cp_convert_and_check (tree type, tree expr)\n+{\n+  tree result;\n+\n+  if (TREE_TYPE (expr) == type)\n+    return expr;\n+  \n+  result = cp_convert (type, expr);\n+\n+  if (!skip_evaluation && !TREE_OVERFLOW_P (expr))\n+    warnings_for_convert_and_check (type, expr, result);\n+\n+  return result;\n+}\n+\n /* Conversion...\n \n    FLAGS indicates how we should behave.  */"}, {"sha": "6478b3725bd5949443e4d9882272a962319beaf5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -3837,9 +3837,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n   if (! converted)\n     {\n       if (TREE_TYPE (op0) != result_type)\n-\top0 = cp_convert (result_type, op0);\n+\top0 = cp_convert_and_check (result_type, op0);\n       if (TREE_TYPE (op1) != result_type)\n-\top1 = cp_convert (result_type, op1);\n+\top1 = cp_convert_and_check (result_type, op1);\n \n       if (op0 == error_mark_node || op1 == error_mark_node)\n \treturn error_mark_node;"}, {"sha": "b3fe7529f42b213e6753cf33ac0325b1c41461ad", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -3396,6 +3396,12 @@ like @code{unsigned ui = -1}; and conversions to smaller types, like\n ((int) x)} and @code{ui = (unsigned) -1}, or if the value is not\n changed by the conversion like in @code{abs (2.0)}.\n \n+For C++, also warn for conversions between @code{NULL} and non-pointer\n+types; confusing overload resolution for user-defined conversions; and\n+conversions that will never use a type conversion operator:\n+conversions to @code{void}, the same type, a base class or a reference\n+to them.\n+\n @item -Wempty-body\n @opindex Wempty-body\n An empty body occurs in an @samp{if}, @samp{else} or @samp{do while}"}, {"sha": "560fab9262dda743156b01d2f8ca24b8b92682e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -1,3 +1,10 @@\n+2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* g++.dg/warn/Wconversion-integer.C: New\n+\t* g++.dg/warn/Wconversion-real.C: New.\n+\t* g++.dg/warn/Wconversion-real-integer.C: New.\n+\t* g++.dg/warn/conv2.C: Updated.\n+\t\n 2007-03-16  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.dg/intmax_t-1.c: Restrict XFAIL to VxWorks kernels;"}, {"sha": "93f05cde4022c752396080cf289529f79e05179a", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-integer.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -0,0 +1,95 @@\n+/* Test for diagnostics for implicit conversions between integer types\n+   C++ equivalent of gcc/testsuite/gcc.dg/Wconversion-integer.c  */\n+\n+// { dg-do compile } \n+// { dg-options \"-fsigned-char -Wconversion\" } \n+\n+#include <limits.h>\n+\n+void fsc (signed char sc);\n+void fuc (unsigned char uc);\n+unsigned fui (unsigned int  ui);\n+void fsi (signed int ui);\n+\n+void h (int x)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char   sc = 3;\n+\n+  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 25 } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 27 } */\n+\n+  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+\n+  fuc ('A');\n+  uc = 'A';\n+  uc = (unsigned char) -1;\n+\n+  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n+\n+  fsc (uc); /* { dg-warning \"conversion\" } */\n+  sc = uc;  /* { dg-warning \"conversion\" } */\n+  fuc (sc); /* { dg-warning \"conversion\" } */\n+  uc = sc;  /* { dg-warning \"conversion\" } */\n+  fsi (ui); /* { dg-warning \"conversion\" } */\n+  si = ui;  /* { dg-warning \"conversion\" } */\n+  fui (si); /* { dg-warning \"conversion\" } */ \n+  ui = si;  /* { dg-warning \"conversion\" } */ \n+  fui (sc); /* { dg-warning \"conversion\" } */\n+  ui = sc;  /* { dg-warning \"conversion\" } */\n+\n+  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+\n+  fsi (si);\n+  fui (ui);\n+  fsi (uc);\n+  si = uc;\n+  fui (uc);\n+  ui = uc;\n+  fui ('A');\n+  ui = 'A';\n+  fsi ('A');\n+  si = 'A';\n+  \n+\n+  fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1;   /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX - 1U); /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1U;  /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX/3U);\n+  si = UINT_MAX/3U;\n+  fsi (UINT_MAX/3);\n+  si = UINT_MAX/3;\n+  fui (UINT_MAX - 1);\n+  ui = UINT_MAX - 1;\n+\n+  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n+  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n+}\n+\n+\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+\n+"}, {"sha": "64d5199bcd54b9b3cb4d9723b03879dd70720965", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -0,0 +1,73 @@\n+/* Test for diagnostics for Wconversion between floating-point and\n+   integers. C++ equivalent of\n+   gcc/testsuite/gcc.dg/Wconversion-real-integer.c */\n+\n+/* { dg-do compile }\n+/* { dg-options \"-Wconversion\" } */\n+\n+#include <limits.h>\n+\n+void fsi (signed int x);\n+void fui (unsigned int x);\n+void ffloat (float x);\n+void fdouble (double x);\n+\n+float  vfloat;\n+double vdouble;\n+\n+void h (void)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char sc = 3;\n+  float  f = 3;\n+  double d = 3;\n+\n+  fsi (3.1f); /* { dg-warning \"conversion\" } */\n+  si = 3.1f; /* { dg-warning \"conversion\" } */\n+  fsi (3.1);  /* { dg-warning \"conversion\" } */\n+  si = 3.1;  /* { dg-warning \"conversion\" } */\n+  fsi (d);    /* { dg-warning \"conversion\" } */\n+  si = d;    /* { dg-warning \"conversion\" } */\n+  fui (-1.0); /* { dg-warning \"overflow\" } */\n+  ui = -1.0;   /* { dg-warning \"overflow\" } */\n+  ffloat (INT_MAX);  /* { dg-warning \"conversion\" } */\n+  vfloat = INT_MAX;  /* { dg-warning \"conversion\" } */\n+  ffloat (16777217); /* { dg-warning \"conversion\" } */\n+  vfloat = 16777217; /* { dg-warning \"conversion\" } */\n+  ffloat (si); /* { dg-warning \"conversion\" } */\n+  vfloat = si; /* { dg-warning \"conversion\" } */\n+  ffloat (ui); /* { dg-warning \"conversion\" } */\n+  vfloat = ui; /* { dg-warning \"conversion\" } */\n+\n+  fsi (3);\n+  si = 3;\n+  fsi (3.0f);\n+  si = 3.0f;\n+  fsi (3.0);\n+  si = 3.0;\n+  fsi (16777217.0f);\n+  si = 16777217.0f;\n+  fsi ((int) 3.1);\n+  si = (int) 3.1;\n+  ffloat (3U);\n+  vfloat = 3U;\n+  ffloat (3);\n+  vfloat = 3;\n+  ffloat (INT_MIN);\n+  vfloat = INT_MIN;\n+  ffloat (uc);\n+  vfloat = uc;\n+  ffloat (sc);\n+  vfloat = sc;\n+\n+  fdouble (UINT_MAX);\n+  vdouble = UINT_MAX;\n+  fdouble (ui);\n+  vdouble = ui;\n+  fdouble (si);\n+  vdouble = si;\n+}\n+\n+"}, {"sha": "f769bacdd4cf57fb65b7ec41f78dca24afa4c24d", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real.C", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real.C?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -0,0 +1,85 @@\n+/* Test for diagnostics for Wconversion for floating-point.  \n+   C++ equivalent of gcc/testsuite/gcc.dg/Wconversion-real.c */\n+\n+/* { dg-do compile }\n+/* { dg-options \"-Wconversion\" } */\n+\n+float  vfloat;\n+double vdouble;\n+long double vlongdouble;\n+\n+void ffloat (float f);\n+void fdouble (double d);\n+void flongdouble (long double ld);\n+\n+void h (void)\n+{\n+  float f = 0;\n+  double d = 0;\n+  long double ld = 0;\n+\n+  ffloat (3.1); /* { dg-warning \"conversion\" } */\n+  vfloat = 3.1; /* { dg-warning \"conversion\" } */\n+  ffloat (3.1L); /* { dg-warning \"conversion\" } */\n+  vfloat = 3.1L;  /* { dg-warning \"conversion\" } */\n+  fdouble (3.1L); /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+  vdouble = 3.1L; /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+  ffloat (vdouble); /* { dg-warning \"conversion\" } */\n+  vfloat = vdouble; /* { dg-warning \"conversion\" } */\n+  ffloat (vlongdouble); /* { dg-warning \"conversion\" } */\n+  vfloat = vlongdouble; /* { dg-warning \"conversion\" } */\n+  fdouble (vlongdouble); /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+  vdouble = vlongdouble; /* { dg-warning \"conversion\" \"\" { target large_long_double } } */\n+\n+\n+  ffloat ((float) 3.1); \n+  vfloat = (float) 3.1;\n+  ffloat ((float) 3.1L);\n+  vfloat = (float) 3.1L; \n+  fdouble ((double) 3.1L); \n+  vdouble = (double) 3.1L; \n+  ffloat ((float) vdouble); \n+  vfloat = (float) vdouble; \n+  ffloat ((float) vlongdouble); \n+  vfloat = (float) vlongdouble;\n+  fdouble ((double) vlongdouble);\n+  vdouble = (double) vlongdouble;\n+\n+\n+  ffloat (3.0);\n+  vfloat = 3.0;\n+  ffloat (3.1f);\n+  vfloat = 3.1f;\n+  ffloat (0.25L);\n+  vfloat = 0.25L;\n+\n+\n+  fdouble (3.0);\n+  vdouble = 3.0;\n+  fdouble (3.1f);\n+  vdouble = 3.1f;\n+  fdouble (0.25L);\n+  vdouble = 0.25L;\n+\n+  flongdouble (3.0);\n+  vlongdouble = 3.0;\n+  flongdouble (3.1f);\n+  vlongdouble = 3.1f;\n+  flongdouble (0.25L);\n+  vlongdouble = 0.25L;\n+\n+  ffloat (f);\n+  vfloat = f;\n+  fdouble (f);\n+  vdouble = f;\n+  fdouble (d);\n+  vdouble = d;\n+  flongdouble (f);\n+  vlongdouble = f;\n+  flongdouble (d);\n+  vlongdouble = d;\n+  flongdouble (ld);\n+  vlongdouble = ld;\n+}\n+\n+"}, {"sha": "45f518346956cbc45fe9389bbb943a6becde2eb1", "filename": "gcc/testsuite/g++.dg/warn/conv2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07231d4f834e1286c28f28bd18065fdde30912ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconv2.C?ref=07231d4f834e1286c28f28bd18065fdde30912ba", "patch": "@@ -1,4 +1,5 @@\n // PR c++/13932\n // { dg-options \"-Wconversion\" }\n \n-int i = 1.; // { dg-warning \"converting\" }\n+int i = 1.;\n+int j = 1.1; // { dg-warning \"conversion\" }"}]}