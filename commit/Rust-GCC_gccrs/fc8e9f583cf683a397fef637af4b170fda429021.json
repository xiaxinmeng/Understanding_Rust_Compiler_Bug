{"sha": "fc8e9f583cf683a397fef637af4b170fda429021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4ZTlmNTgzY2Y2ODNhMzk3ZmVmNjM3YWY0YjE3MGZkYTQyOTAyMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-15T07:32:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-15T07:32:54Z"}, "message": "df.h (FOR_EACH_INSN_INFO_MW): New macro.\n\ngcc/\n\t* df.h (FOR_EACH_INSN_INFO_MW): New macro.\n\t* df-problems.c (df_note_bb_compute): Use it.\n\t* regstat.c (regstat_bb_compute_ri): Likewise.\n\nFrom-SVN: r211680", "tree": {"sha": "b6c4e39bde41278d890cc3b12c57dc3a8880be25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c4e39bde41278d890cc3b12c57dc3a8880be25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8e9f583cf683a397fef637af4b170fda429021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8e9f583cf683a397fef637af4b170fda429021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8e9f583cf683a397fef637af4b170fda429021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8e9f583cf683a397fef637af4b170fda429021/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4"}], "stats": {"total": 109, "additions": 49, "deletions": 60}, "files": [{"sha": "2fcde0c8f9b327324a32637f39e4b0c66fb16f6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc8e9f583cf683a397fef637af4b170fda429021", "patch": "@@ -1,3 +1,9 @@\n+2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* df.h (FOR_EACH_INSN_INFO_MW): New macro.\n+\t* df-problems.c (df_note_bb_compute): Use it.\n+\t* regstat.c (regstat_bb_compute_ri): Likewise.\n+\n 2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df.h (FOR_EACH_ARTIFICIAL_USE, FOR_EACH_ARTIFICIAL_DEF): New macros."}, {"sha": "d97e2870aeaacc722871ca274f450e900889abd8", "filename": "gcc/df-problems.c", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=fc8e9f583cf683a397fef637af4b170fda429021", "patch": "@@ -3114,7 +3114,7 @@ df_note_bb_compute (unsigned int bb_index,\n   FOR_BB_INSNS_REVERSE (bb, insn)\n     {\n       df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n-      struct df_mw_hardreg **mws_rec;\n+      df_mw_hardreg *mw;\n       int debug_insn;\n \n       if (!INSN_P (insn))\n@@ -3137,17 +3137,11 @@ df_note_bb_compute (unsigned int bb_index,\n \n \t  /* We only care about real sets for calls.  Clobbers cannot\n \t     be depended on to really die.  */\n-\t  mws_rec = DF_INSN_INFO_MWS (insn_info);\n-\t  while (*mws_rec)\n-\t    {\n-\t      struct df_mw_hardreg *mws = *mws_rec;\n-\t      if ((DF_MWS_REG_DEF_P (mws))\n-\t\t  && !df_ignore_stack_reg (mws->start_regno))\n-\t      df_set_unused_notes_for_mw (insn,\n-\t\t\t\t\t  mws, live, do_not_gen,\n+\t  FOR_EACH_INSN_INFO_MW (mw, insn_info)\n+\t    if ((DF_MWS_REG_DEF_P (mw))\n+\t\t&& !df_ignore_stack_reg (mw->start_regno))\n+\t      df_set_unused_notes_for_mw (insn, mw, live, do_not_gen,\n \t\t\t\t\t  artificial_uses, &debug);\n-\t      mws_rec++;\n-\t    }\n \n \t  /* All of the defs except the return value are some sort of\n \t     clobber.  This code is for the return.  */\n@@ -3168,16 +3162,10 @@ df_note_bb_compute (unsigned int bb_index,\n       else\n \t{\n \t  /* Regular insn.  */\n-\t  mws_rec = DF_INSN_INFO_MWS (insn_info);\n-\t  while (*mws_rec)\n-\t    {\n-\t      struct df_mw_hardreg *mws = *mws_rec;\n-\t      if (DF_MWS_REG_DEF_P (mws))\n-\t\tdf_set_unused_notes_for_mw (insn,\n-\t\t\t\t\t    mws, live, do_not_gen,\n-\t\t\t\t\t    artificial_uses, &debug);\n-\t      mws_rec++;\n-\t    }\n+\t  FOR_EACH_INSN_INFO_MW (mw, insn_info)\n+\t    if (DF_MWS_REG_DEF_P (mw))\n+\t      df_set_unused_notes_for_mw (insn, mw, live, do_not_gen,\n+\t\t\t\t\t  artificial_uses, &debug);\n \n \t  FOR_EACH_INSN_INFO_DEF (def, insn_info)\n \t    {\n@@ -3194,25 +3182,19 @@ df_note_bb_compute (unsigned int bb_index,\n \t}\n \n       /* Process the uses.  */\n-      mws_rec = DF_INSN_INFO_MWS (insn_info);\n-      while (*mws_rec)\n-\t{\n-\t  struct df_mw_hardreg *mws = *mws_rec;\n-\t  if (DF_MWS_REG_USE_P (mws)\n-\t      && !df_ignore_stack_reg (mws->start_regno))\n-\t    {\n-\t      bool really_add_notes = debug_insn != 0;\n+      FOR_EACH_INSN_INFO_MW (mw, insn_info)\n+\tif (DF_MWS_REG_USE_P (mw)\n+\t    && !df_ignore_stack_reg (mw->start_regno))\n+\t  {\n+\t    bool really_add_notes = debug_insn != 0;\n \n-\t      df_set_dead_notes_for_mw (insn,\n-\t\t\t\t\tmws, live, do_not_gen,\n-\t\t\t\t\tartificial_uses,\n-\t\t\t\t\t&really_add_notes);\n+\t    df_set_dead_notes_for_mw (insn, mw, live, do_not_gen,\n+\t\t\t\t      artificial_uses,\n+\t\t\t\t      &really_add_notes);\n \n-\t      if (really_add_notes)\n-\t\tdebug_insn = -1;\n-\t    }\n-\t  mws_rec++;\n-\t}\n+\t    if (really_add_notes)\n+\t      debug_insn = -1;\n+\t  }\n \n       FOR_EACH_INSN_INFO_USE (use, insn_info)\n \t{"}, {"sha": "9ec8ae1fd5d2beeea99dc939c0b6f4ece835b2db", "filename": "gcc/df.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=fc8e9f583cf683a397fef637af4b170fda429021", "patch": "@@ -766,6 +766,10 @@ struct df_d\n   for (df_ref *ITER##_ = DF_INSN_INFO_EQ_USES (INSN); (ITER = *ITER##_); \\\n        ++ITER##_)\n \n+#define FOR_EACH_INSN_INFO_MW(ITER, INSN) \\\n+  for (df_mw_hardreg **ITER##_ = DF_INSN_INFO_MWS (INSN); (ITER = *ITER##_); \\\n+       ++ITER##_)\n+\n #define FOR_EACH_INSN_DEF(ITER, INSN) \\\n   FOR_EACH_INSN_INFO_DEF(ITER, DF_INSN_INFO_GET (INSN))\n "}, {"sha": "9dff2680c46b32db05e8db44cefd73201637494b", "filename": "gcc/regstat.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8e9f583cf683a397fef637af4b170fda429021/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=fc8e9f583cf683a397fef637af4b170fda429021", "patch": "@@ -153,7 +153,7 @@ regstat_bb_compute_ri (unsigned int bb_index,\n     {\n       struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n       bitmap_iterator bi;\n-      struct df_mw_hardreg **mws_rec;\n+      df_mw_hardreg *mw;\n       rtx link;\n \n       if (!NONDEBUG_INSN_P (insn))\n@@ -202,29 +202,26 @@ regstat_bb_compute_ri (unsigned int bb_index,\n       /* We only care about real sets for calls.  Clobbers cannot\n \t be depended on.\n \t Only do this if the value is totally dead.  */\n-      for (mws_rec = DF_INSN_INFO_MWS (insn_info); *mws_rec; mws_rec++)\n-\t{\n-\t  struct df_mw_hardreg *mws = *mws_rec;\n-\t  if (DF_MWS_REG_DEF_P (mws))\n-\t    {\n-\t      bool all_dead = true;\n-\t      unsigned int r;\n-\n-\t      for (r = mws->start_regno; r <= mws->end_regno; r++)\n-\t\tif (bitmap_bit_p (artificial_uses, r)\n-\t\t    || bitmap_bit_p (live, r))\n-\t\t  {\n-\t\t    all_dead = false;\n-\t\t    break;\n-\t\t  }\n-\n-\t      if (all_dead)\n+      FOR_EACH_INSN_INFO_MW (mw, insn_info)\n+\tif (DF_MWS_REG_DEF_P (mw))\n+\t  {\n+\t    bool all_dead = true;\n+\t    unsigned int r;\n+\n+\t    for (r = mw->start_regno; r <= mw->end_regno; r++)\n+\t      if (bitmap_bit_p (artificial_uses, r)\n+\t\t  || bitmap_bit_p (live, r))\n \t\t{\n-\t\t  regno = mws->start_regno;\n-\t\t  REG_LIVE_LENGTH (regno)++;\n+\t\t  all_dead = false;\n+\t\t  break;\n \t\t}\n-\t    }\n-\t}\n+\n+\t    if (all_dead)\n+\t      {\n+\t\tregno = mw->start_regno;\n+\t\tREG_LIVE_LENGTH (regno)++;\n+\t      }\n+\t  }\n \n       /* All of the defs except the return value are some sort of\n \t clobber.  This code is for the return.  */"}]}