{"sha": "21c7361e4047bdf15f384ae2bd9c9868063f8025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjNzM2MWU0MDQ3YmRmMTVmMzg0YWUyYmQ5Yzk4NjgwNjNmODAyNQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-02T07:00:49Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-02T07:00:49Z"}, "message": "c-decl.c (c_decode_option): Remove support of -Wmissing-noreturn.\n\n\t* c-decl.c (c_decode_option): Remove support of\n\t-Wmissing-noreturn.\n\n\t* toplev.c (documented_lang_options): Remove -Wmissing-noreturn.\n\t(W_options): Add -Wmissing-noreturn here.\n\n\t* flow.c: Define lang_missing_noreturn_ok_p.\n\t(check_function_return_warnings): Use it.\n\n\t* c-common.h: Declare lang_missing_noreturn_ok_p.\n\n\t* c-lang.c (c_missing_noreturn_ok_p): New function.\n\t(lang_init): Set lang_missing_noreturn_ok_p.\n\n\t* invoke.texi (Warning Options): Document this.\n\nFrom-SVN: r38612", "tree": {"sha": "12f18ebddad6ed8db942da5167b01fafd5c86da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f18ebddad6ed8db942da5167b01fafd5c86da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c7361e4047bdf15f384ae2bd9c9868063f8025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7361e4047bdf15f384ae2bd9c9868063f8025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c7361e4047bdf15f384ae2bd9c9868063f8025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7361e4047bdf15f384ae2bd9c9868063f8025/comments", "author": null, "committer": null, "parents": [{"sha": "42ded877b0b8ed0213bce5e01a70ecc443c8a5d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ded877b0b8ed0213bce5e01a70ecc443c8a5d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ded877b0b8ed0213bce5e01a70ecc443c8a5d2"}], "stats": {"total": 263, "additions": 150, "deletions": 113}, "files": [{"sha": "317a469bfe96df65740b21e6ab4dddbf3b07a0ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 35, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,3 +1,21 @@\n+2001-01-02  Andreas Jaeger  <aj@suse.de>\n+\n+\t* c-decl.c (c_decode_option): Remove support of\n+\t-Wmissing-noreturn.\n+\n+\t* toplev.c (documented_lang_options): Remove -Wmissing-noreturn.\n+\t(W_options): Add -Wmissing-noreturn here.\n+\n+\t* flow.c: Define lang_missing_noreturn_ok_p.\n+\t(check_function_return_warnings): Use it.\n+\n+\t* c-common.h: Declare lang_missing_noreturn_ok_p.\n+\n+\t* c-lang.c (c_missing_noreturn_ok_p): New function.\n+\t(lang_init): Set lang_missing_noreturn_ok_p.\n+\n+\t* invoke.texi (Warning Options): Document this.\n+\n 2000-12-27  Phil Edwards  <pme@sources.redhat.com>\n \n \t* extend.texi (C++ Extensions):  New node for C++ attributes;\n@@ -113,13 +131,13 @@ Mon Jan  1 07:38:33 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* unroll.c (copy_loop_body, loop_iterations): Likewise.\n \t(remap_split_bivs): Likewise.\n \n-2001-01-01  Michael Hayes  <mhayes@redhat.com>\t\n+2001-01-01  Michael Hayes  <mhayes@redhat.com>\n \n \t* loop.c (loop_ivs_free): New function.\n \t(strength_reduce): Break out from...\n \n 2001-01-01  Michael Hayes  <mhayes@redhat.com>\n-\t\n+\n \t* loop.h (struct iv): New.\n \t(REG_IV_TYPE, REG_IV_CLASS, REG_INFO): Modify to use 'struct iv'.\n \t(struct loop_ivs): Replace 'reg_iv_type', 'reg_iv_info',\n@@ -139,7 +157,7 @@ Mon Jan  1 07:38:33 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* loop.h (REG_IV_CLASS): New accessor macro.\n \t* loop.c (REG_IV_CLASS): Use it instead of reg_iv_class array.\n \t* unroll.c (REG_IV_CLASS): Likewise.\n-\t\n+\n Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* dwarf2out.c (loc_descriptor_from_tree, case WITH_RECORD_EXPR): New.\n@@ -152,14 +170,14 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(prescan_loop): Set pre_header_has_call in loop_info.\n \t* loop.h (struct_iv_class): Add `final_value' and `all_reduced'.\n \t(struct loop_info): Add `pre_header_has_call'.\n-\t\n+\n \t* loop.c (loop_bivs_find): Break out from strength_reduce.\n \t(loop_bivs_init_find, loop_bivs_check, loop_givs_find): Likewise.\n \t(loop_givs_check, loop_biv_eliminable_p): Likewise.\n-\t\n+\n \t* loop.c (LOOP_REG_LIFETIME, LOOP_REG_GLOBAL_P): Define.\n \t(scan_loop, record_giv): Use LOOP_REG_LIFETIME and LOOP_REG_GLOBAL_P.\n-\t\n+\n \t* loop.h (REGNO_FIRST_LUID, REGNO_LAST_LUID): Define.\n \t* loop.c (REGNO_FIRST_LUID, REGNO_LAST_LUID): Use in place of\n \tdirect access to uid_luid array.\n@@ -198,7 +216,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-12-30  Philip Blundell  <philb@gnu.org>\n \n-\t* config/arm/arm.c (arm_expand_prologue): Fix typos in error \n+\t* config/arm/arm.c (arm_expand_prologue): Fix typos in error\n \tmessage and comment.  Note location of testcase for an unhandled\n \tsituation.\n \n@@ -236,7 +254,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* stmt.c (expand_decl): Don't use assign_stack_temp in error case.\n \t(add_case_node): No need to copy nodes anymore.\n-\t\n+\n 2000-12-30  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.c (split_branches): Don't dereference re-computed\n@@ -391,7 +409,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* calls.c (store_one_arg):  If parm is passed both in stack and in\n         register and offset is greater than reg_parm_stack_space, split\n-        the offset and call emit_push_insn(). \n+        the offset and call emit_push_insn().\n \n 2000-12-27  Nick Clifton  <nickc@redhat.com>\n \n@@ -417,7 +435,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tbetween conditionally executed insns.\n \t(sched_analyze_1, sched_analyze_2, sched_analyze_insn): Don't free\n \tdependency lists if current insn is a COND_EXEC.\n- \n+\n 2000-12-27  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config/rs6000/rs6000.md (define_attr \"length\"): Correct\n@@ -478,7 +496,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(arm_expand_prologue): If the link register has not been saved set\n \tlr_save_eliminated and emit a USE to prevent later passes from\n \tscavenging it.\n-\t\n+\n \t* dwarf2out_frame_debug_expr: Allow the (scratch) frame\n \tpointer to be initialised from the stack pointer plus a\n \tconstant.\n@@ -513,7 +531,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* dwarf2out.c (file_info_cmp): Prototype.\n \t(dwarf2out_line): Hide variable `old_in_use'.\n-\t\n+\n \t* objc-act.c (objc_fatal): Delete.\n \n \t* sched-vis.c (visualize_stall_cycles): Remove unused variable.\n@@ -615,7 +633,7 @@ Sun Dec 31 19:20:51 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(nop_m, nop_i, nop_f, nop_b, nop_x, cycle_display, cycle_display_1,\n \tbundle_selector): New patterns.\n \t(insn_group_barrier): Now has an operand.\n-\t\n+\n 2000-12-21  DJ Delorie  <dj@redhat.com>\n \n \t* dwarf2out.c (simple_decl_align_in_bits): new\n@@ -958,9 +976,9 @@ Sun Dec 17 12:41:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/c4x/c4x-protos.h (c4x_init_builtins): Add tree argument.\n \n-\t* config/c4x/c4x.c (c4x_init_builtins): Add tree argument.\t\n+\t* config/c4x/c4x.c (c4x_init_builtins): Add tree argument.\n \t(c4x_output_ascii):  Fix.\n-\t\n+\n 2000-12-17  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n             Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n@@ -979,7 +997,7 @@ Sun Dec 17 12:41:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(*toieee_movqf_clobber, *frieee_movqf_clobber): Likewise.\n \n 2000-12-17  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n-\t\n+\n \t* libgcc2.h: Use Wtype for SItype and DWtype for DItype in prototypes.\n \t* libgcc2.c (__absvsi2): Use Wtype and DWtype.\n \t(__absvdi2, __addvsi3, __addvdi3, __subvsi3): Likewise.\n@@ -1021,8 +1039,8 @@ Sat Dec 16 10:41:11 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n         (do_warning): New function.\n         (finclude): Skip past the newline and increase the line number\n         before calling output_line_command.\n-        (do_line): Skip the new line after output_line_command.  Don't  \n-        pre-decrement the line number.   \n+        (do_line): Skip the new line after output_line_command.  Don't\n+        pre-decrement the line number.\n \n 2000-12-15  Diego Novillo  <dnovillo@redhat.com>\n \n@@ -1087,7 +1105,7 @@ Fri Dec 15 03:37:51 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t* alias.c (get_alias_set): Call record_component_aliases for\n \tCOMPLEX_TYPE.\n \t(record_component_aliases): Handle COMPLEX_TYPE.\n-\t\n+\n 2000-12-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fixinc/gnu-regex.c: Disable NLS.\n@@ -1109,7 +1127,7 @@ Fri Dec 15 03:37:51 2000  J\"orn Rennecke <amylaar@redhat.com>\n        * gcc.c (cpp_options): Update to use '&'.\n        (struct switchstr): Change type of validated to save space.\n        New member 'ordering'.\n-       (handle_braces, validate_switches): Update to handle '&'.       \n+       (handle_braces, validate_switches): Update to handle '&'.\n \n 2000-12-13  Laurynas Biveinis  <lauras@softhome.net>\n \n@@ -1153,7 +1171,7 @@ Fri Dec 15 03:37:51 2000  J\"orn Rennecke <amylaar@redhat.com>\n         * tradcpp.c (special_symbol): Improve test for definedness,\n         though it is still not perfect.\n         (do_define): Don't define illegal macro names.\n-\t\n+\n 2000-12-07  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/mips/elf.h (ASM_OUTPUT_SECTION_NAME): emit @nobits\n@@ -1262,7 +1280,7 @@ Mon Dec 11 13:51:09 2000  Jeffrey A Law  (law@cygnus.com)\n \t* cppfiles.c (stack_include_file): Update.\n \t(_cpp_pop_file_buffer): Update.\n \t* cpphash.h (struct cpp_buffer): New members\n-\tinclude_stack_listed and type.\t \n+\tinclude_stack_listed and type.\n \t* cpplib.c (_cpp_handle_directive): Buffer->inc is not null.\n \t(run_directive): Take buffer type.  cpp_push_buffer cannot fail.\n \t(_cpp_do__Pragma, cpp_define, _cpp_define_builtin, cpp_undef,\n@@ -1296,7 +1314,7 @@ Mon Dec 11 13:51:09 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-12-09  Richard Henderson  <rth@redhat.com>\n \n-\t* genrecog.c (validate_pattern): Verify that ZERO_EXTRACT and \n+\t* genrecog.c (validate_pattern): Verify that ZERO_EXTRACT and\n \tSTRICT_LOW_PART as SET_DEST have in-out constraints.\n \n 2000-12-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n@@ -2065,8 +2083,8 @@ Tue Dec  5 20:09:14 2000  Jeffrey A Law  (law@cygnus.com)\n 2000-12-02  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* c-common.c (combine_strings): When the ISO C standard specifies\n- \tthe maximum length of a string, it doesn't include the trailing\n- \tzero byte.\n+\tthe maximum length of a string, it doesn't include the trailing\n+\tzero byte.\n \n \t* cpplib.c (do_ifdef): Add check_eol() call.\n \t(do_ifndef): Likewise.\n@@ -2188,13 +2206,13 @@ Tue Dec  5 20:09:14 2000  Jeffrey A Law  (law@cygnus.com)\n 2000-12-01  Jim Blandy  <jimb@redhat.com>\n \n \t* dbxout.c (dbxout_parms): Correctly describe parameters passed by\n- \tinvisible reference in registers, but then spilled to the stack.\n-  \tRemove code to emit a second stab for such parameters; it attempts\n- \tto describe the value's location by introducing a synthetic C++\n- \t`reference' type, and then saying the stack slot has that\n- \treference type.  This loses type information (breaking GDB's\n- \t`ptype' command, among other things) just to describe a location\n- \twhich stabs can represent correctly in other ways.\n+\tinvisible reference in registers, but then spilled to the stack.\n+\tRemove code to emit a second stab for such parameters; it attempts\n+\tto describe the value's location by introducing a synthetic C++\n+\t`reference' type, and then saying the stack slot has that\n+\treference type.  This loses type information (breaking GDB's\n+\t`ptype' command, among other things) just to describe a location\n+\twhich stabs can represent correctly in other ways.\n \n 2000-12-01  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -2749,7 +2767,7 @@ Mon Nov 27 17:29:44 2000  kaz Kojima <kkojima@rr.iij4u.or.jp>\n \tcanonicalizes conditional compares.\n \t(arm_select_cc_mode): Likewise.\n \t* arm.md: Garbage collect some dead code.\n- \t(cmp_and, cmp_ior): New patterns.\n+\t(cmp_and, cmp_ior): New patterns.\n \t(splitter for conditional move with inverted false): Use cond_exec\n \tand handle unordered comparisons.\n \n@@ -2766,7 +2784,7 @@ Mon Nov 27 17:22:56 MET 2000  Jan Hubicka  <jh@suse.cz>\n \tarm_subsi3_insn, anddi_zesidi_di, arm_andsi3_insn, anddi_notdi_di,\n \tanddi_notzesidi_di, anddi_notsesidi_di, arm_iorsi3,\n \tone_cmpldi2): Merge with splitters to create define_insn_and_split\n- \tpatterns.  Remove redundant splits.\n+\tpatterns.  Remove redundant splits.\n \t(peephole2 for add:SI of invalid immediate): New.\n \t(peephole2 for minus:SI of invalid immediate): New.\n \t(peephole2 for ior:SI of invalid immediate): New.\n@@ -7486,7 +7504,7 @@ Mon 25-Sep-2000 23:31:45 BST  Neil Booth  <neilb@earthling.net>\n \t* dwarf2out.c (UNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,\n \tUNALIGNED_DOUBLE_INT_ASM_OP, SECTION_ASM_OP, ASM_BYTE_OP): Here.\n \t* dwarfout.c (FILE_ASM_OP, VERSION_ASM_OP,\n- \tUNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP, ASM_BYTE_OP,\n+\tUNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP, ASM_BYTE_OP,\n \tPUSHSECTION_ASM_OP, POPSECTION_ASM_OP): Here.\n \t* defaults.h (ASM_STABD_OP, EH_FRAME_SECTION_ASM_OP): Here.\n \t* varasm.c (ASM_STABS_OP): Here."}, {"sha": "77c54f37fbe15b09d5238b47f8bf167947d3eb0b", "filename": "gcc/c-common.h", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for c-common.c.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -222,7 +222,7 @@ typedef enum c_language_kind\n \t\t       etc. */\n   clk_cplusplus,   /* ANSI/ISO C++ */\n   clk_objective_c  /* Objective C */\n-} \n+}\n c_language_kind;\n \n /* Information about a statement tree.  */\n@@ -244,10 +244,10 @@ struct stmt_tree_s {\n      However, in order to represent aggregate initialization code as\n      tree structure, we use statement-expressions.  The statements\n      within the statement expression should not result in cleanups\n-     being run until the entire enclosing statement is complete.  \n+     being run until the entire enclosing statement is complete.\n \n      This flag has no effect in C.  */\n-  int stmts_are_full_exprs_p; \n+  int stmts_are_full_exprs_p;\n };\n \n typedef struct stmt_tree_s *stmt_tree;\n@@ -294,10 +294,15 @@ extern void (*lang_expand_stmt)                 PARAMS ((tree));\n extern void (*lang_expand_decl_stmt)            PARAMS ((tree));\n extern void (*lang_expand_function_end)         PARAMS ((void));\n \n+/* Callback that determines if it's ok for a function to have no\n+   noreturn attribute.  */\n+extern int (*lang_missing_noreturn_ok_p)\tPARAMS ((tree));\n+\n+\n /* The type of a function that walks over tree structure.  */\n \n-typedef tree (*walk_tree_fn)                    PARAMS ((tree *, \n-\t\t\t\t\t\t\t int *, \n+typedef tree (*walk_tree_fn)                    PARAMS ((tree *,\n+\t\t\t\t\t\t\t int *,\n \t\t\t\t\t\t\t void *));\n \n extern stmt_tree current_stmt_tree              PARAMS ((void));\n@@ -436,7 +441,7 @@ extern int warn_long_long;\n    descending through array types.  Note that this macro evaluates its\n    arguments mor than once.  */\n #define C_TYPE_QUALS(TYPE)\t\t\t\t\\\n-  (TYPE_QUALS ((TREE_CODE (TYPE) == ARRAY_TYPE \t\t\\\n+  (TYPE_QUALS ((TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n \t\t&& c_language == clk_cplusplus)\t\t\\\n \t       ? strip_array_types (TYPE) : TYPE))\n \n@@ -595,7 +600,7 @@ extern tree strip_array_types                   PARAMS ((tree));\n #define ASM_CLOBBERS(NODE)      TREE_OPERAND (ASM_STMT_CHECK (NODE), 4)\n \n /* DECL_STMT accessor. This gives access to the DECL associated with\n-   the given declaration statement. */ \n+   the given declaration statement. */\n #define DECL_STMT_DECL(NODE)    TREE_OPERAND (DECL_STMT_CHECK (NODE), 0)\n \n /* STMT_EXPR accessor. */\n@@ -607,7 +612,7 @@ extern tree strip_array_types                   PARAMS ((tree));\n \n /* Nonzero if this SCOPE_STMT is for the beginning of a scope.  */\n #define SCOPE_BEGIN_P(NODE) \\\n-  (TREE_LANG_FLAG_0 (SCOPE_STMT_CHECK (NODE))) \n+  (TREE_LANG_FLAG_0 (SCOPE_STMT_CHECK (NODE)))\n \n /* Nonzero if this SCOPE_STMT is for the end of a scope.  */\n #define SCOPE_END_P(NODE) \\\n@@ -629,7 +634,7 @@ extern tree strip_array_types                   PARAMS ((tree));\n \n /* Nonzero for a SCOPE_STMT if this statement is for a partial scope.\n    For example, in:\n-  \n+\n      S s;\n      l:\n      S s2;\n@@ -654,12 +659,12 @@ extern tree strip_array_types                   PARAMS ((tree));\n \n /* If non-zero, the STMT_LINENO for NODE is the line at which the\n    function ended.  */\n-#define STMT_LINENO_FOR_FN_P(NODE) \t\t\\\n+#define STMT_LINENO_FOR_FN_P(NODE)\t\t\\\n   (TREE_LANG_FLAG_2 ((NODE)))\n \n /* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n    initialization variables. */\n-#define NEW_FOR_SCOPE_P(NODE) (TREE_LANG_FLAG_0 (NODE)) \n+#define NEW_FOR_SCOPE_P(NODE) (TREE_LANG_FLAG_0 (NODE))\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n \n@@ -754,7 +759,7 @@ extern void extract_interface_info\t\tPARAMS ((void));\n \n extern void mark_c_language_function            PARAMS ((struct language_function *));\n \n-extern int case_compare                         PARAMS ((splay_tree_key, \n+extern int case_compare                         PARAMS ((splay_tree_key,\n \t\t\t\t\t\t\t splay_tree_key));\n \n extern tree c_add_case_label                    PARAMS ((splay_tree,\n@@ -807,5 +812,3 @@ struct c_fileinfo *get_fileinfo\t\t\tPARAMS ((const char *));\n extern void dump_time_statistics\t\tPARAMS ((void));\n \n #endif\n-\n-"}, {"sha": "d4b3a2a62a97103b4321ea3b5fa1655b4ea22ef7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -665,8 +665,6 @@ c_decode_option (argc, argv)\n     warn_bad_function_cast = 1;\n   else if (!strcmp (p, \"-Wno-bad-function-cast\"))\n     warn_bad_function_cast = 0;\n-  else if (!strcmp (p, \"-Wmissing-noreturn\"))\n-    warn_missing_noreturn = 1;\n   else if (!strcmp (p, \"-Wno-missing-noreturn\"))\n     warn_missing_noreturn = 0;\n   else if (!strcmp (p, \"-Wmissing-format-attribute\"))\n@@ -4487,7 +4485,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  else if (decl_context == FIELD)\n \t    {\n \t      /* ??? Need to check somewhere that this is a structure\n-\t\t and not a union, that this field is last, and that \n+\t\t and not a union, that this field is last, and that\n \t\t this structure has at least one other named member.  */\n \n \t      if (pedantic && !flag_isoc99 && !in_system_header)\n@@ -6515,7 +6513,7 @@ store_parm_decls ()\n   init_function_start (fndecl, input_filename, lineno);\n \n   /* Begin the statement tree for this function.  */\n-  DECL_LANG_SPECIFIC (current_function_decl) \n+  DECL_LANG_SPECIFIC (current_function_decl)\n     =((struct lang_decl *) ggc_alloc (sizeof (struct lang_decl)));\n   begin_stmt_tree (&DECL_SAVED_TREE (current_function_decl));\n \n@@ -6903,7 +6901,7 @@ c_expand_body (fndecl, nested_p)\n \t  pop_function_context ();\n \t}\n     }\n-      \n+\n }\n \f\n /* Check the declarations given in a for-loop for satisfying the C99\n@@ -6979,7 +6977,7 @@ push_c_function_context (f)\n      struct function *f;\n {\n   struct c_language_function *p;\n-  p = ((struct c_language_function *) \n+  p = ((struct c_language_function *)\n        xmalloc (sizeof (struct c_language_function)));\n   f->language = (struct language_function *) p;\n \n@@ -7001,7 +6999,7 @@ void\n pop_c_function_context (f)\n      struct function *f;\n {\n-  struct c_language_function *p \n+  struct c_language_function *p\n     = (struct c_language_function *) f->language;\n   tree link;\n \n@@ -7042,7 +7040,7 @@ void\n mark_c_function_context (f)\n      struct function *f;\n {\n-  struct c_language_function *p \n+  struct c_language_function *p\n     = (struct c_language_function *) f->language;\n \n   if (p == 0)\n@@ -7158,12 +7156,12 @@ c_begin_compound_stmt ()\n   stmt = add_stmt (build_stmt (COMPOUND_STMT, NULL_TREE));\n   /* If we haven't already declared __FUNCTION__ and its ilk then this\n      is the opening curly brace of the function.  Declare them now.  */\n-  if (!c_function_name_declared_p) \n+  if (!c_function_name_declared_p)\n     {\n       c_function_name_declared_p = 1;\n       declare_function_name ();\n     }\n-  \n+\n   return stmt;\n }\n \n@@ -7175,7 +7173,7 @@ c_expand_decl_stmt (t)\n      tree t;\n {\n   tree decl = DECL_STMT_DECL (t);\n-  \n+\n   /* Expand nested functions.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_CONTEXT (decl) == current_function_decl"}, {"sha": "52173917448b2321b6aed0c4f0d2afb4d0db2932", "filename": "gcc/c-lang.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,6 +1,6 @@\n /* Language-specific hook definitions for C front end.\n    Copyright (C) 1991, 1995, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -37,10 +37,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n \n static int c_tree_printer PARAMS ((output_buffer *));\n+static int c_missing_noreturn_ok_p PARAMS ((tree));\n \n /* Each of the functions defined here\n    is an alternative to a function in objc-actions.c.  */\n-   \n+\n int\n lang_decode_option (argc, argv)\n      int argc;\n@@ -81,6 +82,7 @@ lang_init ()\n   lang_safe_from_p = &c_safe_from_p;\n   lang_printer = &c_tree_printer;\n   lang_expand_decl_stmt = &c_expand_decl_stmt;\n+  lang_missing_noreturn_ok_p = &c_missing_noreturn_ok_p;\n \n   c_parse_init ();\n }\n@@ -186,8 +188,8 @@ start_cdtor (method_type)\n   tree body;\n \n   start_function (void_list_node_1,\n-\t\t  build_parse_node (CALL_EXPR, fnname, \n-\t\t\t\t    tree_cons (NULL_TREE, NULL_TREE, \n+\t\t  build_parse_node (CALL_EXPR, fnname,\n+\t\t\t\t    tree_cons (NULL_TREE, NULL_TREE,\n \t\t\t\t\t       void_list_node_1),\n \t\t\t\t    NULL_TREE),\n \t\t  NULL_TREE, NULL_TREE);\n@@ -213,11 +215,11 @@ finish_cdtor (body)\n   tree block;\n \n   scope = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-  block = poplevel (0, 0, 0); \n+  block = poplevel (0, 0, 0);\n   SCOPE_STMT_BLOCK (TREE_PURPOSE (scope)) = block;\n   SCOPE_STMT_BLOCK (TREE_VALUE (scope)) = block;\n \n-  RECHAIN_STMTS (body, COMPOUND_BODY (body)); \n+  RECHAIN_STMTS (body, COMPOUND_BODY (body));\n \n   finish_function (0);\n }\n@@ -252,7 +254,7 @@ finish_file ()\n       finish_cdtor (body);\n     }\n #endif\n-  \n+\n   if (back_end_hook)\n     (*back_end_hook) (getdecls ());\n \n@@ -294,3 +296,12 @@ c_tree_printer (buffer)\n       return 0;\n     }\n }\n+\n+static int\n+c_missing_noreturn_ok_p (decl)\n+     tree decl;\n+{\n+  /* A missing noreturn is not ok for freestanding implementations and\n+     ok for the `main' function in hosted implementations.  */\n+  return flag_hosted && MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl));\n+}"}, {"sha": "5eaf116238fdfd06b549286f4b9c523ebeaa9434", "filename": "gcc/flow.c", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,6 +1,6 @@\n /* Data flow analysis for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -251,6 +251,10 @@ regset regs_live_at_setjmp;\n    are another pair, etc.  */\n rtx regs_may_share;\n \n+/* Callback that determines if it's ok for a function to have no\n+   noreturn attribute.  */\n+int (*lang_missing_noreturn_ok_p) PARAMS ((tree));\n+\n /* Set of registers that may be eliminable.  These are handled specially\n    in updating regs_ever_live.  */\n \n@@ -424,15 +428,15 @@ static void invalidate_mems_from_autoinc PARAMS ((struct propagate_block_info *,\n static void invalidate_mems_from_set\tPARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t rtx));\n static void remove_fake_successors\tPARAMS ((basic_block));\n-static void flow_nodes_print\t\tPARAMS ((const char *, const sbitmap, \n+static void flow_nodes_print\t\tPARAMS ((const char *, const sbitmap,\n \t\t\t\t\t\t FILE *));\n static void flow_edge_list_print\tPARAMS ((const char *, const edge *,\n \t\t\t\t\t\t int, FILE *));\n static void flow_loops_cfg_dump\t\tPARAMS ((const struct loops *,\n \t\t\t\t\t\t FILE *));\n-static int flow_loop_nested_p\t\tPARAMS ((struct loop *, \n+static int flow_loop_nested_p\t\tPARAMS ((struct loop *,\n \t\t\t\t\t\t struct loop *));\n-static int flow_loop_entry_edges_find\tPARAMS ((basic_block, const sbitmap, \n+static int flow_loop_entry_edges_find\tPARAMS ((basic_block, const sbitmap,\n \t\t\t\t\t\t edge **));\n static int flow_loop_exit_edges_find\tPARAMS ((const sbitmap, edge **));\n static int flow_loop_nodes_find\tPARAMS ((basic_block, basic_block, sbitmap));\n@@ -530,7 +534,9 @@ check_function_return_warnings ()\n {\n   if (warn_missing_noreturn\n       && !TREE_THIS_VOLATILE (cfun->decl)\n-      && EXIT_BLOCK_PTR->pred == NULL)\n+      && EXIT_BLOCK_PTR->pred == NULL\n+      && (lang_missing_noreturn_ok_p\n+\t  && !lang_missing_noreturn_ok_p (cfun->decl)))\n     warning (\"function might be possible candidate for attribute `noreturn'\");\n \n   /* If we have a path to EXIT, then we do return.  */\n@@ -1537,7 +1543,7 @@ split_block (bb, insn)\n   /* Redirect the src of the successor edges of bb to point to new_bb.  */\n   for (e = new_bb->succ; e; e = e->succ_next)\n     e->src = new_bb;\n-  \n+\n   /* Place the new block just after the block being split.  */\n   VARRAY_GROW (basic_block_info, ++n_basic_blocks);\n \n@@ -1576,7 +1582,7 @@ split_block (bb, insn)\n \t propagate_block to determine which registers are live.  */\n       COPY_REG_SET (new_bb->global_live_at_start, bb->global_live_at_end);\n       propagate_block (new_bb, new_bb->global_live_at_start, NULL, NULL, 0);\n-      COPY_REG_SET (bb->global_live_at_end, \n+      COPY_REG_SET (bb->global_live_at_end,\n \t\t    new_bb->global_live_at_start);\n     }\n \n@@ -3382,7 +3388,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n       SET_REGNO_REG_SET (new_live_at_end, STACK_POINTER_REGNUM);\n \n       /* Before reload, there are a few registers that must be forced\n-\t live everywhere -- which might not already be the case for \n+\t live everywhere -- which might not already be the case for\n \t blocks within infinite loops.  */\n       if (! reload_completed)\n \t{\n@@ -4200,7 +4206,7 @@ insn_dead_p (pbi, x, call_ok, notes)\n #ifdef AUTO_INC_DEC\n \t      /* Check if memory reference matches an auto increment. Only\n \t\t post increment/decrement or modify are valid.  */\n-      \t      if (GET_MODE (mem) == GET_MODE (r)\n+\t      if (GET_MODE (mem) == GET_MODE (r)\n \t          && (GET_CODE (XEXP (mem, 0)) == POST_DEC\n \t              || GET_CODE (XEXP (mem, 0)) == POST_INC\n \t              || GET_CODE (XEXP (mem, 0)) == POST_MODIFY)\n@@ -4978,7 +4984,7 @@ flush_reg_cond_reg_1 (node, data)\n      the in-order traversal.  */\n   if (xdata[1] >= (int) node->key)\n     return 0;\n-  \n+\n   /* Splice out portions of the expression that refer to regno.  */\n   rcli = (struct reg_cond_life_info *) node->value;\n   rcli->condition = elim_reg_cond (rcli->condition, regno);\n@@ -6599,7 +6605,7 @@ count_or_remove_death_notes (blocks, kill)\n \n /* Update insns block within BB.  */\n \n-void \n+void\n update_bb_for_insn (bb)\n      basic_block bb;\n {\n@@ -7089,7 +7095,7 @@ verify_edge_list (f, elist)\n \tif (EDGE_INDEX (elist, BASIC_BLOCK (pred), BASIC_BLOCK (succ))\n \t    != EDGE_INDEX_NO_EDGE && found_edge == 0)\n \t  fprintf (f, \"*** Edge (%d, %d) has index %d, but there is no edge\\n\",\n-\t  \t   pred, succ, EDGE_INDEX (elist, BASIC_BLOCK (pred),\n+\t\t   pred, succ, EDGE_INDEX (elist, BASIC_BLOCK (pred),\n \t\t\t\t\t   BASIC_BLOCK (succ)));\n       }\n   for (succ = 0; succ < n_basic_blocks; succ++)\n@@ -7334,7 +7340,7 @@ redirect_edge_pred (e, new_pred)\n \f\n /* Dump the list of basic blocks in the bitmap NODES.  */\n \n-static void \n+static void\n flow_nodes_print (str, nodes, file)\n      const char *str;\n      const sbitmap nodes;\n@@ -7353,7 +7359,7 @@ flow_nodes_print (str, nodes, file)\n \n /* Dump the list of edges in the array EDGE_LIST.  */\n \n-static void \n+static void\n flow_edge_list_print (str, edge_list, num_edges, file)\n      const char *str;\n      const edge *edge_list;\n@@ -7467,7 +7473,7 @@ flow_loop_dump (loop, file, loop_dump_aux, verbose)\n \n /* Dump the loop information specified by LOOPS to the stream FILE,\n    using auxiliary dump callback function LOOP_DUMP_AUX if non null.  */\n-void \n+void\n flow_loops_dump (loops, file, loop_dump_aux, verbose)\n      const struct loops *loops;\n      FILE *file;\n@@ -7481,7 +7487,7 @@ flow_loops_dump (loops, file, loop_dump_aux, verbose)\n   if (! num_loops || ! file)\n     return;\n \n-  fprintf (file, \";; %d loops found, %d levels\\n\", \n+  fprintf (file, \";; %d loops found, %d levels\\n\",\n \t   num_loops, loops->levels);\n \n   for (i = 0; i < num_loops; i++)\n@@ -7510,7 +7516,7 @@ flow_loops_dump (loops, file, loop_dump_aux, verbose)\n \t\t     must be disjoint.  */\n \t\t  disjoint = ! flow_loop_nested_p (smaller ? loop : oloop,\n \t\t\t\t\t\t   smaller ? oloop : loop);\n-\t\t  fprintf (file, \n+\t\t  fprintf (file,\n \t\t\t   \";; loop header %d shared by loops %d, %d %s\\n\",\n \t\t\t   loop->header->index, i, j,\n \t\t\t   disjoint ? \"disjoint\" : \"nested\");\n@@ -7586,7 +7592,7 @@ flow_loop_entry_edges_find (header, nodes, entry_edges)\n   for (e = header->pred; e; e = e->pred_next)\n     {\n       basic_block src = e->src;\n-      \n+\n       if (src == ENTRY_BLOCK_PTR || ! TEST_BIT (nodes, src->index))\n \tnum_entries++;\n     }\n@@ -7600,7 +7606,7 @@ flow_loop_entry_edges_find (header, nodes, entry_edges)\n   for (e = header->pred; e; e = e->pred_next)\n     {\n       basic_block src = e->src;\n-      \n+\n       if (src == ENTRY_BLOCK_PTR || ! TEST_BIT (nodes, src->index))\n \t(*entry_edges)[num_entries++] = e;\n     }\n@@ -7632,7 +7638,7 @@ flow_loop_exit_edges_find (nodes, exit_edges)\n   EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, node, {\n     for (e = BASIC_BLOCK (node)->succ; e; e = e->succ_next)\n       {\n-\tbasic_block dest = e->dest;\t  \n+\tbasic_block dest = e->dest;\n \n \tif (dest == EXIT_BLOCK_PTR || ! TEST_BIT (nodes, dest->index))\n \t    num_exits++;\n@@ -7649,7 +7655,7 @@ flow_loop_exit_edges_find (nodes, exit_edges)\n   EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, node, {\n     for (e = BASIC_BLOCK (node)->succ; e; e = e->succ_next)\n       {\n-\tbasic_block dest = e->dest;\t  \n+\tbasic_block dest = e->dest;\n \n \tif (dest == EXIT_BLOCK_PTR || ! TEST_BIT (nodes, dest->index))\n \t  (*exit_edges)[num_exits++] = e;\n@@ -8143,7 +8149,7 @@ flow_loops_find (loops, flags)\n      must always be built if this function is called.  */\n   if (! (flags & LOOP_TREE))\n     abort ();\n-    \n+\n   memset (loops, 0, sizeof (*loops));\n \n   /* Taking care of this degenerate case makes the rest of\n@@ -8258,7 +8264,7 @@ flow_loops_find (loops, flags)\n \t  loop->nodes = sbitmap_alloc (n_basic_blocks);\n \t  loop->num_nodes\n \t    = flow_loop_nodes_find (loop->header, loop->latch, loop->nodes);\n-\t  \n+\n \t  /* Compute first and last blocks within the loop.\n \t     These are often the same as the loop header and\n \t     loop latch respectively, but this is not always\n@@ -8267,7 +8273,7 @@ flow_loops_find (loops, flags)\n \t    = BASIC_BLOCK (sbitmap_first_set_bit (loop->nodes));\n \t  loop->last\n \t    = BASIC_BLOCK (sbitmap_last_set_bit (loop->nodes));\n-\t  \n+\n \t  if (flags & LOOP_EDGES)\n \t    {\n \t      /* Find edges which enter the loop header.\n@@ -8277,30 +8283,30 @@ flow_loops_find (loops, flags)\n \t\t= flow_loop_entry_edges_find (loop->header,\n \t\t\t\t\t      loop->nodes,\n \t\t\t\t\t      &loop->entry_edges);\n-\t      \n+\n \t      /* Find edges which exit the loop.  */\n \t      loop->num_exits\n \t\t= flow_loop_exit_edges_find (loop->nodes,\n \t\t\t\t\t     &loop->exit_edges);\n-\t      \n+\n \t      /* Determine which loop nodes dominate all the exits\n \t\t of the loop.  */\n \t      loop->exits_doms = sbitmap_alloc (n_basic_blocks);\n \t      sbitmap_copy (loop->exits_doms, loop->nodes);\n \t      for (j = 0; j < loop->num_exits; j++)\n \t\tsbitmap_a_and_b (loop->exits_doms, loop->exits_doms,\n \t\t\t\t dom[loop->exit_edges[j]->src->index]);\n-\t      \n+\n \t      /* The header of a natural loop must dominate\n \t\t all exits.  */\n \t      if (! TEST_BIT (loop->exits_doms, loop->header->index))\n \t\tabort ();\n \t    }\n-\t  \n+\n \t  if (flags & LOOP_PRE_HEADER)\n \t    {\n \t      /* Look to see if the loop has a pre-header node.  */\n-\t      loop->pre_header \n+\t      loop->pre_header\n \t\t= flow_loop_pre_header_find (loop->header, dom);\n \n \t      flow_loop_pre_header_scan (loop);\n@@ -8347,7 +8353,7 @@ flow_loops_update (loops, flags)\n      throw away the old stuff and rebuild what we need.  */\n   if (loops->array)\n     flow_loops_free (loops);\n-  \n+\n   return flow_loops_find (loops, flags);\n }\n "}, {"sha": "4d379928c91968f62f7b73cb034c7632ed721c2b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -5,7 +5,7 @@\n @ignore\n @c man begin COPYRIGHT\n Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-1998, 1999, 2000 Free Software Foundation, Inc.\n+1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of this\n manual provided the copyright notice and this permission notice are\n@@ -2170,7 +2170,8 @@ Warn about functions which might be candidates for attribute @code{noreturn}.\n Note these are only possible candidates, not absolute ones.  Care should\n be taken to manually verify functions actually do not ever return before\n adding the @code{noreturn} attribute, otherwise subtle code generation\n-bugs could be introduced.\n+bugs could be introduced.  You will not get a warning for @code{main} in\n+hosted C environments.\n \n @item -Wmissing-format-attribute\n If @samp{-Wformat} is enabled, also warn about functions which might be"}, {"sha": "4f38dc1f432e93f3d8e7be1b048cc63b4c5bdacb", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c7361e4047bdf15f384ae2bd9c9868063f8025/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=21c7361e4047bdf15f384ae2bd9c9868063f8025", "patch": "@@ -1,6 +1,6 @@\n /* Top level of GNU C compiler\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -969,7 +969,7 @@ const char *user_label_prefix;\n \n lang_independent_options f_options[] =\n {\n-  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1, \n+  {\"eliminate-dwarf2-dups\", &flag_eliminate_dwarf2_dups, 1,\n    \"Perform DWARF2 duplicate elimination\"},\n   {\"float-store\", &flag_float_store, 1,\n    \"Do not store floats in registers\" },\n@@ -1210,8 +1210,6 @@ documented_lang_options[] =\n   { \"-Wbad-function-cast\",\n     \"Warn about casting functions to incompatible types\" },\n   { \"-Wno-bad-function-cast\", \"\" },\n-  { \"-Wmissing-noreturn\",\n-    \"Warn about functions which might be candidates for attribute noreturn\" },\n   { \"-Wno-missing-noreturn\", \"\" },\n   { \"-Wmissing-format-attribute\",\n     \"Warn about functions which might be candidates for format attributes\" },\n@@ -1461,7 +1459,9 @@ lang_independent_options W_options[] =\n   {\"padded\", &warn_padded, 1,\n    \"Warn when padding is required to align struct members\"},\n   {\"disabled-optimization\", &warn_disabled_optimization, 1,\n-   \"Warn when an optimization pass is disabled\"}\n+   \"Warn when an optimization pass is disabled\"},\n+  {\"missing-noreturn\", &warn_missing_noreturn, 1,\n+   \"Warn about functions which might be candidates for attribute noreturn\"}\n };\n \f\n /* Output files for assembler code (real compiler output)\n@@ -1576,16 +1576,16 @@ approx_sqrt (x)\n   double s, d;\n \n   if (x < 0)\n-    abort ();   \n+    abort ();\n   if (x == 0)\n     return 0;\n \n   s = x;\n   do\n     {\n       d = (s * s - x) / (2 * s);\n-      s -= d;                   \n-    }        \n+      s -= d;\n+    }\n   while (d > .0001);\n   return s;\n }\n@@ -1962,7 +1962,7 @@ wrapup_global_declarations (vec, len)\n \t  if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n \t      && (! TREE_READONLY (decl)\n \t\t  || TREE_PUBLIC (decl)\n-\t\t  || (!optimize \n+\t\t  || (!optimize\n \t\t      && flag_keep_static_consts\n \t\t      && !DECL_ARTIFICIAL (decl))\n \t\t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n@@ -2878,7 +2878,7 @@ rest_of_compilation (decl)\n      integrate.*/\n   rtx_equal_function_value_matters = 0;\n   purge_hard_subreg_sets (get_insns ());\n-  \n+\n   /* Don't return yet if -Wreturn-type; we need to do jump_optimize.  */\n   if ((rtl_dump_and_exit || flag_syntax_only) && !warn_return_type)\n     goto exit_rest_of_compilation;\n@@ -3075,7 +3075,7 @@ rest_of_compilation (decl)\n \n \t  insns = get_insns ();\n \t  eliminate_dead_code();\n-  \n+\n \t  close_dump_file (DFI_dce, print_rtl_with_bb, insns);\n \t  timevar_pop (TV_DEAD_CODE_ELIM);\n \t}"}]}