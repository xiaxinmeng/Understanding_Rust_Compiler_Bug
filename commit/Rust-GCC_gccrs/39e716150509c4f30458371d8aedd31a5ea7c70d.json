{"sha": "39e716150509c4f30458371d8aedd31a5ea7c70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzllNzE2MTUwNTA5YzRmMzA0NTgzNzFkOGFlZGQzMWE1ZWE3YzcwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-29T21:49:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-29T21:49:53Z"}, "message": "(expand_shift): Open-code rotate even if by a variable.\n\nFrom-SVN: r8579", "tree": {"sha": "907bd6ed7ca613bf2d54f47b032209ebe8f67404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/907bd6ed7ca613bf2d54f47b032209ebe8f67404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39e716150509c4f30458371d8aedd31a5ea7c70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e716150509c4f30458371d8aedd31a5ea7c70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e716150509c4f30458371d8aedd31a5ea7c70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e716150509c4f30458371d8aedd31a5ea7c70d/comments", "author": null, "committer": null, "parents": [{"sha": "e1a4071f3ad63741e3e8616e8e0507de15b47b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a4071f3ad63741e3e8616e8e0507de15b47b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a4071f3ad63741e3e8616e8e0507de15b47b62"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "92ac24c9ac75d1e013fd9715abd55ae317e2fac7", "filename": "gcc/expmed.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39e716150509c4f30458371d8aedd31a5ea7c70d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39e716150509c4f30458371d8aedd31a5ea7c70d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=39e716150509c4f30458371d8aedd31a5ea7c70d", "patch": "@@ -1682,8 +1682,7 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t    continue;\n \t  else if (methods == OPTAB_LIB_WIDEN)\n \t    {\n-\t      /* If we are rotating by a constant that is valid and\n-\t\t we have been unable to open-code this by a rotation,\n+\t      /* If we have been unable to open-code this by a rotation,\n \t\t do it as the IOR of two shifts.  I.e., to rotate A\n \t\t by N bits, compute (A << N) | ((unsigned) A >> (C - N))\n \t\t where C is the bitsize of A.\n@@ -1695,25 +1694,25 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t\t this extremely unlikely lossage to avoid complicating the\n \t\t code below.  */\n \n-\t      if (GET_CODE (op1) == CONST_INT && INTVAL (op1) > 0\n-\t\t  && INTVAL (op1) < GET_MODE_BITSIZE (mode))\n-\t\t{\n-\t\t  rtx subtarget = target == shifted ? 0 : target;\n-\t\t  rtx temp1;\n-\t\t  tree other_amount\n-\t\t    = build_int_2 (GET_MODE_BITSIZE (mode) - INTVAL (op1), 0);\n-\n-\t\t  shifted = force_reg (mode, shifted);\n-\n-\t\t  temp = expand_shift (left ? LSHIFT_EXPR : RSHIFT_EXPR,\n-\t\t\t\t       mode, shifted, amount, subtarget, 1);\n-\t\t  temp1 = expand_shift (left ? RSHIFT_EXPR : LSHIFT_EXPR,\n-\t\t\t\t\tmode, shifted, other_amount, 0, 1);\n-\t\t  return expand_binop (mode, ior_optab, temp, temp1, target,\n-\t\t\t\t       unsignedp, methods);\n-\t\t}\n-\t      else\n-\t\tmethods = OPTAB_LIB;\n+\t      rtx subtarget = target == shifted ? 0 : target;\n+\t      rtx temp1;\n+\t      tree type = TREE_TYPE (amount);\n+\t      tree new_amount = make_tree (type, op1);\n+\t      tree other_amount\n+\t\t= fold (build (MINUS_EXPR, type,\n+\t\t\t       convert (type,\n+\t\t\t\t\tbuild_int_2 (GET_MODE_BITSIZE (mode),\n+\t\t\t\t\t\t     0)),\n+\t\t\t       amount));\n+\n+\t      shifted = force_reg (mode, shifted);\n+\n+\t      temp = expand_shift (left ? LSHIFT_EXPR : RSHIFT_EXPR,\n+\t\t\t\t   mode, shifted, new_amount, subtarget, 1);\n+\t      temp1 = expand_shift (left ? RSHIFT_EXPR : LSHIFT_EXPR,\n+\t\t\t\t    mode, shifted, other_amount, 0, 1);\n+\t      return expand_binop (mode, ior_optab, temp, temp1, target,\n+\t\t\t\t   unsignedp, methods);\n \t    }\n \n \t  temp = expand_binop (mode,"}]}