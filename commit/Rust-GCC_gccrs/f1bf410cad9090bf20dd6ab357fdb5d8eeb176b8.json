{"sha": "f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiZjQxMGNhZDkwOTBiZjIwZGQ2YWIzNTdmZGI1ZDhlZWIxNzZiOA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2009-07-18T03:22:16Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2009-07-18T03:22:16Z"}, "message": "directives.c (do_linemarker, do_line): Use CPP_STRING for ignored enum value.\n\n2009-07-17  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* directives.c (do_linemarker, do_line): Use CPP_STRING for\n\tignored enum value.\n\t* files.c (find_file_in_dir): Add cast from void* to char*.\n\t* symtab.c (ht_lookup_with_hash): Add cast from void* to char*.\n\t* Makefile.in: (WARN_CFLAGS): Use general and C-specific\n\twarnings.\n\t(CXX, CXXFLAGS, WARN_CXXFLAGS, ALL_CXXFLAGS,\n\tENABLE_BUILD_WITH_CXX, CCDEPMODE, CXXDEPMODE, COMPILER,\n\tCOMPILER_FLAGS): New.\n\t(DEPMODE): Set from CCDEPMODE or CXXDEPMODE.\n\t(COMPILE.base): Use COMPILER instead of CC.  Use COMPILER_FLAGS\n\tinstead of ALL_CFLAGS.\n\t* configure.ac: Invoke AC_PROG_CXX.  Separate C-specific warnings\n\tfrom other warnings.  Add -Wc++-compat to C-specific warnings.\n\tCheck for --enable-build-with-cxx.  Set and substitute\n\tENABLE_BUILD_WITH_CXX.  Invoke ZW_PROG_COMPILER_DEPENDENCIES\n\taccording to ENABLE_BUILD_WITH_CXX.  Invoke AC_LANG before\n\tAC_CHECK_HEADERS.\n\t* configure: Rebuild.\n\t* include/cpp-id-data.h: Remove extern \"C\".\n\t* include/line-map.h: Likewise.\n\t* include/mkdeps.h: Likewise.\n\t* include/symtab.h: Likewise.\n\t* internal.h: Likewise.\n\nFrom-SVN: r149763", "tree": {"sha": "5a308f9f5ea576441818080da2b096c0cfbed2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a308f9f5ea576441818080da2b096c0cfbed2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f5897513da6e33198c48124349d506ede991bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5897513da6e33198c48124349d506ede991bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5897513da6e33198c48124349d506ede991bde"}], "stats": {"total": 2551, "additions": 1775, "deletions": 776}, "files": [{"sha": "57ba6779feb1d2f30139d7727ecbe53dd3f0572e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -1,3 +1,30 @@\n+2009-07-17  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* directives.c (do_linemarker, do_line): Use CPP_STRING for\n+\tignored enum value.\n+\t* files.c (find_file_in_dir): Add cast from void* to char*.\n+\t* symtab.c (ht_lookup_with_hash): Add cast from void* to char*.\n+\t* Makefile.in: (WARN_CFLAGS): Use general and C-specific\n+\twarnings.\n+\t(CXX, CXXFLAGS, WARN_CXXFLAGS, ALL_CXXFLAGS,\n+\tENABLE_BUILD_WITH_CXX, CCDEPMODE, CXXDEPMODE, COMPILER,\n+\tCOMPILER_FLAGS): New.\n+\t(DEPMODE): Set from CCDEPMODE or CXXDEPMODE.\n+\t(COMPILE.base): Use COMPILER instead of CC.  Use COMPILER_FLAGS\n+\tinstead of ALL_CFLAGS.\n+\t* configure.ac: Invoke AC_PROG_CXX.  Separate C-specific warnings\n+\tfrom other warnings.  Add -Wc++-compat to C-specific warnings.\n+\tCheck for --enable-build-with-cxx.  Set and substitute\n+\tENABLE_BUILD_WITH_CXX.  Invoke ZW_PROG_COMPILER_DEPENDENCIES\n+\taccording to ENABLE_BUILD_WITH_CXX.  Invoke AC_LANG before\n+\tAC_CHECK_HEADERS.\n+\t* configure: Rebuild.\n+\t* include/cpp-id-data.h: Remove extern \"C\".\n+\t* include/line-map.h: Likewise.\n+\t* include/mkdeps.h: Likewise.\n+\t* include/symtab.h: Likewise.\n+\t* internal.h: Likewise.\n+\n 2009-06-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* directives.c (parse_include): Add location argument. Update all"}, {"sha": "268d1baaca2954ff3f0b4af72e835cf7d0c42664", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -33,7 +33,10 @@ AUTOHEADER = @AUTOHEADER@\n CATALOGS = $(patsubst %,po/%,@CATALOGS@)\n CC = @CC@\n CFLAGS = @CFLAGS@\n-WARN_CFLAGS = @WARN_CFLAGS@ @WARN_PEDANTIC@ @WERROR@\n+WARN_CFLAGS = @warn@ @c_warn@ @WARN_PEDANTIC@ @WERROR@\n+CXX = @CXX@\n+CXXFLAGS = @CXXFLAGS@\n+WARN_CXXFLAGS = @warn@ @WARN_PEDANTIC@ @WERROR@\n CPP = @CPP@\n CPPFLAGS = @CPPFLAGS@\n EXEEXT = @EXEEXT@\n@@ -50,7 +53,8 @@ RANLIB = @RANLIB@\n SHELL = @SHELL@\n USED_CATALOGS = @USED_CATALOGS@\n XGETTEXT = @XGETTEXT@\n-DEPMODE = @CCDEPMODE@\n+CCDEPMODE = @CCDEPMODE@\n+CXXDEPMODE = @CXXDEPMODE@\n DEPDIR = @DEPDIR@\n \n datarootdir = @datarootdir@\n@@ -68,6 +72,20 @@ INCLUDES = -I$(srcdir) -I. -I$(srcdir)/../include @INCINTL@ \\\n \t-I$(srcdir)/include\n \n ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(INCLUDES) $(CPPFLAGS)\n+ALL_CXXFLAGS = $(CXXFLAGS) $(WARN_CXXFLAGS) $(INCLUDES) $(CPPFLAGS)\n+\n+# The name of the compiler to use.\n+ENABLE_BUILD_WITH_CXX = @ENABLE_BUILD_WITH_CXX@\n+ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n+COMPILER = $(CC)\n+COMPILER_FLAGS = $(ALL_CFLAGS)\n+DEPMODE = $(CCDEPMODE)\n+else\n+COMPILER = $(CXX)\n+COMPILER_FLAGS = $(ALL_CXXFLAGS)\n+DEPMODE = $(CXXDEPMODE)\n+endif\n+\n \n libcpp_a_OBJS = charset.o directives.o directives-only.o errors.o \\\n \texpr.o files.o identifiers.o init.o lex.o line-map.o macro.o \\\n@@ -189,7 +207,7 @@ update-po: $(CATALOGS:.gmo=.pox)\n   install-man update-po install-html\n \n # Dependency rule.\n-COMPILE.base = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(ALL_CFLAGS) -c\n+COMPILE.base = $(COMPILER) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(COMPILER_FLAGS) -c\n ifeq ($(DEPMODE),depmode=gcc3)\n # Note that we put the dependencies into a .Tpo file, then move them\n # into place if the compile succeeds.  We need this because gcc does"}, {"sha": "35fb663bf8761d9888fa0d8cc167624446ba4a59", "filename": "libcpp/configure", "status": "modified", "additions": 1692, "deletions": 723, "changes": 2415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8"}, {"sha": "a3ab8f551c370a6d81875bf4da2e8ecf2b12f2f8", "filename": "libcpp/configure.ac", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -11,8 +11,17 @@ AC_CANONICAL_SYSTEM\n AC_PROG_MAKE_SET\n AC_PROG_INSTALL\n AC_PROG_CC\n+AC_PROG_CXX\n AC_PROG_RANLIB\n \n+# See if we are building gcc with C++.\n+# Do this early so setting lang to C++ affects following tests\n+AC_ARG_ENABLE(build-with-cxx,\n+[  --enable-build-with-cxx build with C++ compiler instead of C compiler],\n+ENABLE_BUILD_WITH_CXX=$enableval,\n+ENABLE_BUILD_WITH_CXX=no)\n+AC_SUBST(ENABLE_BUILD_WITH_CXX)\n+\n MISSING=`cd $ac_aux_dir && ${PWDCMD-pwd}`/missing\n AC_CHECK_PROGS([ACLOCAL], [aclocal], [$MISSING aclocal])\n AC_CHECK_PROGS([AUTOCONF], [autoconf], [$MISSING autoconf])\n@@ -21,9 +30,10 @@ AC_CHECK_PROGS([AUTOHEADER], [autoheader], [$MISSING autoheader])\n # Figure out what compiler warnings we can enable.\n # See config/warnings.m4 for details.\n \n-ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wwrite-strings -Wstrict-prototypes \\\n-\t\t\t  -Wmissing-prototypes -Wold-style-definition \\\n-\t\t\t  -Wmissing-format-attribute])\n+ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wwrite-strings \\\n+\t\t\t  -Wmissing-format-attribute], [warn])\n+ACX_PROG_CC_WARNING_OPTS([-Wstrict-prototypes -Wmissing-prototypes \\\n+\t\t\t  -Wold-style-definition -Wc++-compat], [c_warn])\n ACX_PROG_CC_WARNING_ALMOST_PEDANTIC([-Wno-long-long])\n \n # Only enable with --enable-werror-always until existing warnings are\n@@ -32,13 +42,28 @@ ACX_PROG_CC_WARNINGS_ARE_ERRORS([manual])\n \n # Dependency checking.\n ZW_CREATE_DEPDIR\n+if test \"$ENABLE_BUILD_WITH_CXX\" == \"no\"; then\n ZW_PROG_COMPILER_DEPENDENCIES([CC])\n+else\n+ZW_PROG_COMPILER_DEPENDENCIES([CXX])\n+fi\n \n # Checks for header files.\n AC_HEADER_TIME\n ACX_HEADER_STRING\n-AC_CHECK_HEADERS(locale.h fcntl.h limits.h stddef.h \\\n+\n+# AC_CHECK_HEADERS is repeated to work around apparent autoconf 2.59 bug.  If\n+# AC_CHECK_HEADERS comes after the if clause, the last AC_LANG call gets used,\n+# no matter which branch is taken.\n+if test \"$ENABLE_BUILD_WITH_CXX\" == \"no\"; then\n+   AC_LANG(C)\n+   AC_CHECK_HEADERS(locale.h fcntl.h limits.h stddef.h \\\n \tstdlib.h strings.h string.h sys/file.h unistd.h)\n+else\n+   AC_LANG(C++)\n+   AC_CHECK_HEADERS(locale.h fcntl.h limits.h stddef.h \\\n+\tstdlib.h strings.h string.h sys/file.h unistd.h)\n+fi\n \n # Checks for typedefs, structures, and compiler characteristics.\n AC_C_CONST"}, {"sha": "9c988dfa1365ea8c6617f7fbc80c3ae2c6029cc7", "filename": "libcpp/directives.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -918,7 +918,7 @@ do_line (cpp_reader *pfile)\n     {\n       cpp_string s = { 0, 0 };\n       if (cpp_interpret_string_notranslate (pfile, &token->val.str, 1,\n-\t\t\t\t\t    &s, false))\n+\t\t\t\t\t    &s, CPP_STRING))\n \tnew_file = (const char *)s.text;\n       check_eol (pfile, true);\n     }\n@@ -974,7 +974,7 @@ do_linemarker (cpp_reader *pfile)\n     {\n       cpp_string s = { 0, 0 };\n       if (cpp_interpret_string_notranslate (pfile, &token->val.str,\n-\t\t\t\t\t    1, &s, false))\n+\t\t\t\t\t    1, &s, CPP_STRING))\n \tnew_file = (const char *)s.text;\n \n       new_sysp = 0;"}, {"sha": "69aa7895361ee6b8b2b072b83f3ca6e380e8a287", "filename": "libcpp/files.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -381,8 +381,8 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n       /* We copy the path name onto an obstack partly so that we don't\n \t leak the memory, but mostly so that we don't fragment the\n \t heap.  */\n-      copy = obstack_copy0 (&pfile->nonexistent_file_ob, path,\n-\t\t\t    strlen (path));\n+      copy = (char *) obstack_copy0 (&pfile->nonexistent_file_ob, path,\n+\t\t\t\t     strlen (path));\n       free (path);\n       pp = htab_find_slot_with_hash (pfile->nonexistent_file_hash,\n \t\t\t\t     copy, hv, INSERT);\n@@ -1144,7 +1144,7 @@ file_hash_eq (const void *p, const void *q)\n static int\n nonexistent_file_hash_eq (const void *p, const void *q)\n {\n-  return strcmp (p, q) == 0;\n+  return strcmp ((const char *) p, (const char *) q) == 0;\n }\n \n /* Initialize everything in this source file.  */"}, {"sha": "a57edad521d5769ae3e6f53f5e5341ea7d3d07fc", "filename": "libcpp/include/cpp-id-data.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fcpp-id-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fcpp-id-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpp-id-data.h?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -18,10 +18,6 @@ along with this program; see the file COPYING3.  If not see\n \n #include \"cpplib.h\"\n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n #if !defined (HAVE_UCHAR) && !defined (IN_GCC)\n typedef unsigned char uchar;\n #endif\n@@ -83,7 +79,3 @@ struct GTY(()) cpp_macro {\n      tokens.  */\n   unsigned int extra_tokens : 1;\n };\n-\n-#ifdef __cplusplus\n-}\n-#endif"}, {"sha": "71c7ef26351cef15816b6837a803cac23218779c", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -28,10 +28,6 @@ along with this program; see the file COPYING3.  If not see\n #include \"symtab.h\"\n #include \"line-map.h\"\n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n typedef struct cpp_reader cpp_reader;\n typedef struct cpp_buffer cpp_buffer;\n typedef struct cpp_options cpp_options;\n@@ -933,8 +929,4 @@ extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);\n extern int cpp_read_state (cpp_reader *, const char *, FILE *,\n \t\t\t   struct save_macro_data *);\n \n-#ifdef __cplusplus\n-}\n-#endif\n-\n #endif /* ! LIBCPP_CPPLIB_H */"}, {"sha": "31ac8e5d4c3b8332adc49a08b58dd3e922194d8f", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -23,10 +23,6 @@ along with this program; see the file COPYING3.  If not see\n #ifndef LIBCPP_LINE_MAP_H\n #define LIBCPP_LINE_MAP_H\n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n #ifndef GTY\n #define GTY(x) /* nothing */\n #endif\n@@ -191,8 +187,4 @@ extern const struct line_map *linemap_lookup\n extern source_location\n linemap_position_for_column (struct line_maps *set, unsigned int to_column);\n \n-#ifdef __cplusplus\n-}\n-#endif\n-\n #endif /* !LIBCPP_LINE_MAP_H  */"}, {"sha": "50bcee40726fc6e6650867c86edcd96303e4a4c2", "filename": "libcpp/include/mkdeps.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fmkdeps.h?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -23,10 +23,6 @@ along with this program; see the file COPYING3.  If not see\n #ifndef LIBCPP_MKDEPS_H\n #define LIBCPP_MKDEPS_H\n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n /* This is the data structure used by all the functions in mkdeps.c.\n    It's quite straightforward, but should be treated as opaque.  */\n \n@@ -80,8 +76,4 @@ extern int deps_restore (struct deps *, FILE *, const char *);\n    automatic dependency schemes.  */\n extern void deps_phony_targets (const struct deps *, FILE *);\n \n-#ifdef __cplusplus\n-}\n-#endif\n-\n #endif /* ! LIBCPP_MKDEPS_H */"}, {"sha": "ebb56007a03c598b191ef5364eb612a76680b2dc", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -21,10 +21,6 @@ along with this program; see the file COPYING3.  If not see\n \n #include \"obstack.h\"\n \n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n #ifndef GTY\n #define GTY(x) /* nothing */\n #endif\n@@ -104,8 +100,4 @@ extern void ht_load (hash_table *ht, hashnode *entries,\n /* Dump allocation statistics to stderr.  */\n extern void ht_dump_statistics (hash_table *);\n \n-#ifdef __cplusplus\n-}\n-#endif\n-\n #endif /* LIBCPP_SYMTAB_H */"}, {"sha": "48a5338b1f865d6a26b8d67fd7c009bdb96d49b6", "filename": "libcpp/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8/libcpp%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsymtab.c?ref=f1bf410cad9090bf20dd6ab357fdb5d8eeb176b8", "patch": "@@ -163,7 +163,7 @@ ht_lookup_with_hash (hash_table *table, const unsigned char *str,\n \n   if (table->alloc_subobject)\n     {\n-      char *chars = table->alloc_subobject (len + 1);\n+      char *chars = (char *) table->alloc_subobject (len + 1);\n       memcpy (chars, str, len);\n       chars[len] = '\\0';\n       HT_STR (node) = (const unsigned char *) chars;"}]}