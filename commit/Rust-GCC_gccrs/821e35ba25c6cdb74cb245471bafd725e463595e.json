{"sha": "821e35ba25c6cdb74cb245471bafd725e463595e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxZTM1YmEyNWM2Y2RiNzRjYjI0NTQ3MWJhZmQ3MjVlNDYzNTk1ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T21:32:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T21:32:14Z"}, "message": "genemit.c (gen_insn): Print file:lineno comment before function.\n\n        * genemit.c (gen_insn): Print file:lineno comment before function.\n        (main): likewise.\n        * gensupport.c (struct queue_elem): Add filename member.\n        (queue_pattern): Initialize it; update all callers.\n        (process_include): Don't free filename.\n        (read_md_rtx): Set read_rtx_filename.\n\nFrom-SVN: r53811", "tree": {"sha": "c10c82f09103920b50de749e53f260bc07584040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c10c82f09103920b50de749e53f260bc07584040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821e35ba25c6cdb74cb245471bafd725e463595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821e35ba25c6cdb74cb245471bafd725e463595e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821e35ba25c6cdb74cb245471bafd725e463595e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821e35ba25c6cdb74cb245471bafd725e463595e/comments", "author": null, "committer": null, "parents": [{"sha": "0f1ffa2331fb215f9f7875c7d31ccf2dd42bf6ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f1ffa2331fb215f9f7875c7d31ccf2dd42bf6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f1ffa2331fb215f9f7875c7d31ccf2dd42bf6ee"}], "stats": {"total": 91, "additions": 57, "deletions": 34}, "files": [{"sha": "7eef475a7ae36ec6d9ee1b3dff03f8d0f07fa097", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=821e35ba25c6cdb74cb245471bafd725e463595e", "patch": "@@ -1,6 +1,15 @@\n+2002-05-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* genemit.c (gen_insn): Print file:lineno comment before function.\n+\t(main): likewise.\n+\t* gensupport.c (struct queue_elem): Add filename member.\n+\t(queue_pattern): Initialize it; update all callers.\n+\t(process_include): Don't free filename.\n+\t(read_md_rtx): Set read_rtx_filename.\n+\n 2002-05-23  Hans Boehm  <Hans_Boehm@hp.com>\n-\t* config/ia64/linux.h (IA64_GATE_AREA_END): Adjust for 64K\n-\tpages.\n+\n+\t* config/ia64/linux.h (IA64_GATE_AREA_END): Adjust for 64K pages.\n \n 2002-05-23  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "302bda1e2140d73bc5a385d51486afcb7d11873d", "filename": "gcc/genemit.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=821e35ba25c6cdb74cb245471bafd725e463595e", "patch": "@@ -59,7 +59,7 @@ static void max_operand_1\t\tPARAMS ((rtx));\n static int max_operand_vec\t\tPARAMS ((rtx, int));\n static void print_code\t\t\tPARAMS ((RTX_CODE));\n static void gen_exp\t\t\tPARAMS ((rtx, enum rtx_code, char *));\n-static void gen_insn\t\t\tPARAMS ((rtx));\n+static void gen_insn\t\t\tPARAMS ((rtx, int));\n static void gen_expand\t\t\tPARAMS ((rtx));\n static void gen_split\t\t\tPARAMS ((rtx));\n static void output_add_clobbers\t\tPARAMS ((void));\n@@ -297,8 +297,9 @@ gen_exp (x, subroutine_type, used)\n /* Generate the `gen_...' function for a DEFINE_INSN.  */\n \n static void\n-gen_insn (insn)\n+gen_insn (insn, lineno)\n      rtx insn;\n+     int lineno;\n {\n   int operands;\n   int i;\n@@ -383,6 +384,8 @@ gen_insn (insn)\n   if (XSTR (insn, 0)[0] == 0 || XSTR (insn, 0)[0] == '*')\n     return;\n \n+  printf (\"/* %s:%d */\\n\", read_rtx_filename, lineno);\n+\n   /* Find out how many operands this function has,\n      and also whether any of them have register constraints.  */\n   register_constraints = 0;\n@@ -838,7 +841,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"toplev.h\\\"\\n\");\n   printf (\"#include \\\"ggc.h\\\"\\n\\n\");\n   printf (\"#define FAIL return (end_sequence (), _val)\\n\");\n-  printf (\"#define DONE return (_val = gen_sequence (), end_sequence (), _val)\\n\");\n+  printf (\"#define DONE return (_val = gen_sequence (), end_sequence (), _val)\\n\\n\");\n \n   /* Read the machine description.  */\n \n@@ -852,25 +855,28 @@ from the machine description file `md'.  */\\n\\n\");\n \n       switch (GET_CODE (desc))\n \t{\n-\t  case DEFINE_INSN:\n-\t      gen_insn (desc);\n-\t      break;\n-\n-\t  case DEFINE_EXPAND:\n-\t      gen_expand (desc);\n-\t      break;\n-\n-\t  case DEFINE_SPLIT:\n-\t      gen_split (desc);\n-\t      break;\n-\n-\t  case DEFINE_PEEPHOLE2:\n-\t      gen_split (desc);\n-\t      break;\n-\n-\t  default:\n-\t      break;\n-\t }\n+\tcase DEFINE_INSN:\n+\t  gen_insn (desc, line_no);\n+\t  break;\n+\n+\tcase DEFINE_EXPAND:\n+\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  gen_expand (desc);\n+\t  break;\n+\n+\tcase DEFINE_SPLIT:\n+\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  gen_split (desc);\n+\t  break;\n+\n+\tcase DEFINE_PEEPHOLE2:\n+\t  printf (\"/* %s:%d */\\n\", read_rtx_filename, line_no);\n+\t  gen_split (desc);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n       ++insn_index_number;\n     }\n "}, {"sha": "251cce995a5ab0316ff256cc6f6c77beb35f0ff6", "filename": "gcc/gensupport.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821e35ba25c6cdb74cb245471bafd725e463595e/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=821e35ba25c6cdb74cb245471bafd725e463595e", "patch": "@@ -50,6 +50,7 @@ static char *base_dir = NULL;\n struct queue_elem\n {\n   rtx data;\n+  const char *filename;\n   int lineno;\n   struct queue_elem *next;\n };\n@@ -63,7 +64,8 @@ static struct queue_elem **define_cond_exec_tail = &define_cond_exec_queue;\n static struct queue_elem *other_queue;\n static struct queue_elem **other_tail = &other_queue;\n \n-static void queue_pattern PARAMS ((rtx, struct queue_elem ***, int));\n+static void queue_pattern PARAMS ((rtx, struct queue_elem ***,\n+\t\t\t\t   const char *, int));\n \n /* Current maximum length of directory names in the search path\n    for include files.  (Altered as we get more of them.)  */\n@@ -131,13 +133,15 @@ gen_rtx_CONST_INT (mode, arg)\n /* Queue PATTERN on LIST_TAIL.  */\n \n static void\n-queue_pattern (pattern, list_tail, lineno)\n+queue_pattern (pattern, list_tail, filename, lineno)\n      rtx pattern;\n      struct queue_elem ***list_tail;\n+     const char *filename;\n      int lineno;\n {\n   struct queue_elem *e = (struct queue_elem *) xmalloc (sizeof (*e));\n   e->data = pattern;\n+  e->filename = filename;\n   e->lineno = lineno;\n   e->next = NULL;\n   **list_tail = e;\n@@ -248,11 +252,13 @@ process_include (desc, lineno)\n       process_rtx (desc, lineno);\n     }\n \n+  /* Do not free pathname.  It is attached to the various rtx queue\n+     elements.  */\n+\n   read_rtx_filename = old_filename;\n   read_rtx_lineno = old_lineno;\n \n   fclose (input_file);\n-  free (pathname);\n }\n \n /* Process a top level rtx in some way, queueing as appropriate.  */\n@@ -265,15 +271,15 @@ process_rtx (desc, lineno)\n   switch (GET_CODE (desc))\n     {\n     case DEFINE_INSN:\n-      queue_pattern (desc, &define_insn_tail, lineno);\n+      queue_pattern (desc, &define_insn_tail, read_rtx_filename, lineno);\n       break;\n \n     case DEFINE_COND_EXEC:\n-      queue_pattern (desc, &define_cond_exec_tail, lineno);\n+      queue_pattern (desc, &define_cond_exec_tail, read_rtx_filename, lineno);\n       break;\n \n     case DEFINE_ATTR:\n-      queue_pattern (desc, &define_attr_tail, lineno);\n+      queue_pattern (desc, &define_attr_tail, read_rtx_filename, lineno);\n       break;\n \n     case INCLUDE:\n@@ -324,13 +330,13 @@ process_rtx (desc, lineno)\n \tXVEC (desc, 4) = attr;\n \n \t/* Queue them.  */\n-\tqueue_pattern (desc, &define_insn_tail, lineno);\n-\tqueue_pattern (split, &other_tail, lineno);\n+\tqueue_pattern (desc, &define_insn_tail, read_rtx_filename, lineno);\n+\tqueue_pattern (split, &other_tail, read_rtx_filename, lineno);\n \tbreak;\n       }\n \n     default:\n-      queue_pattern (desc, &other_tail, lineno);\n+      queue_pattern (desc, &other_tail, read_rtx_filename, lineno);\n       break;\n     }\n }\n@@ -850,7 +856,8 @@ process_one_cond_exec (ce_elem)\n \t patterns into the define_insn chain just after their generator\n \t is something we'll have to experiment with.  */\n \n-      queue_pattern (insn, &other_tail, insn_elem->lineno);\n+      queue_pattern (insn, &other_tail, insn_elem->filename,\n+\t\t     insn_elem->lineno);\n     }\n }\n \n@@ -1011,6 +1018,7 @@ read_md_rtx (lineno, seqnr)\n   elem = *queue;\n   *queue = elem->next;\n   desc = elem->data;\n+  read_rtx_filename = elem->filename;\n   *lineno = elem->lineno;\n   *seqnr = sequence_num;\n "}]}