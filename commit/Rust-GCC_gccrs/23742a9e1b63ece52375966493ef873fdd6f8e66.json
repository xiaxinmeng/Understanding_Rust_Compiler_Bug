{"sha": "23742a9e1b63ece52375966493ef873fdd6f8e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3NDJhOWUxYjYzZWNlNTIzNzU5NjY0OTNlZjg3M2ZkZDZmOGU2Ng==", "commit": {"author": {"name": "Rohit Arul Raj", "email": "rohitarulraj@freescale.com", "date": "2014-08-04T16:34:34Z"}, "committer": {"name": "Edmar Wienskoski", "email": "edmarwjr@gcc.gnu.org", "date": "2014-08-04T16:34:34Z"}, "message": "re PR middle-end/60102 (powerpc fp-bit ices at dwf_regno)\n\n\tPR target/60102\n\n[libgcc]\n2014-07-31  Rohit  <rohitarulraj@freescale.com>\n\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Update\n\t  based on change in SPE high register numbers and 3 HTM registers.\n\n[gcc]\n2014-07-31  Rohit  <rohitarulraj@freescale.com>\n\t* config/rs6000/rs6000.c\n\t  (rs6000_reg_names) : Add SPE high register names.\n\t  (alt_reg_names) : Likewise.\n\t  (rs6000_dwarf_register_span) : For SPE high registers, replace\n\t  dwarf register numbers with GCC hard register numbers.\n\t  (rs6000_init_dwarf_reg_sizes_extra) : Likewise.\n\t  (rs6000_dbx_register_number): For SPE high registers, return dwarf\n\t  register number for the corresponding GCC hard register number.\n\n\t* config/rs6000/rs6000.h\n\t  (FIRST_PSEUDO_REGISTER) : Update based on 32 newly added GCC hard\n\t  register numbers for SPE high registers.\n\t  (DWARF_FRAME_REGISTERS) :  Likewise.\n\t  (DWARF_REG_TO_UNWIND_COLUMN) : Likewise.\n\t  (DWARF_FRAME_REGNUM) : Likewise.\n\t  (FIXED_REGISTERS) : Likewise.\n\t  (CALL_USED_REGISTERS) : Likewise.\n\t  (CALL_REALLY_USED_REGISTERS) : Likewise.\n\t  (REG_ALLOC_ORDER) : Likewise.\n\t  (enum reg_class) : Likewise.\n\t  (REG_CLASS_NAMES) : Likewise.\n\t  (REG_CLASS_CONTENTS) : Likewise.\n\t  (SPE_HIGH_REGNO_P) : New macro to identify SPE high registers.\t\n\n\t* gcc.target/powerpc/pr60102.c: New testcase.\n\nFrom-SVN: r213596", "tree": {"sha": "e4299107c6282932832fbec9375f9df265f5fbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4299107c6282932832fbec9375f9df265f5fbe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23742a9e1b63ece52375966493ef873fdd6f8e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23742a9e1b63ece52375966493ef873fdd6f8e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23742a9e1b63ece52375966493ef873fdd6f8e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23742a9e1b63ece52375966493ef873fdd6f8e66/comments", "author": null, "committer": null, "parents": [{"sha": "62c986afde031d141961d2619a860def836c8e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c986afde031d141961d2619a860def836c8e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c986afde031d141961d2619a860def836c8e9b"}], "stats": {"total": 240, "additions": 183, "deletions": 57}, "files": [{"sha": "e058622c54ce7e3477785e08aceef3bea3eb87c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -1,3 +1,30 @@\n+2014-08-04  Rohit  <rohitarulraj@freescale.com>\n+\n+\tPR target/60102\n+\t* config/rs6000/rs6000.c\n+\t  (rs6000_reg_names) : Add SPE high register names.\n+\t  (alt_reg_names) : Likewise.\n+\t  (rs6000_dwarf_register_span) : For SPE high registers, replace\n+\t  dwarf register numbers with GCC hard register numbers.\n+\t  (rs6000_init_dwarf_reg_sizes_extra) : Likewise.\n+\t  (rs6000_dbx_register_number): For SPE high registers, return dwarf\n+\t  register number for the corresponding GCC hard register number.\n+\t* config/rs6000/rs6000.h\n+\t  (FIRST_PSEUDO_REGISTER) : Update based on 32 newly added GCC hard\n+\t  register numbers for SPE high registers.\n+\t  (DWARF_FRAME_REGISTERS) :  Likewise.\n+\t  (DWARF_REG_TO_UNWIND_COLUMN) : Likewise.\n+\t  (DWARF_FRAME_REGNUM) : Likewise.\n+\t  (FIXED_REGISTERS) : Likewise.\n+\t  (CALL_USED_REGISTERS) : Likewise.\n+\t  (CALL_REALLY_USED_REGISTERS) : Likewise.\n+\t  (REG_ALLOC_ORDER) : Likewise.\n+\t  (enum reg_class) : Likewise.\n+\t  (REG_CLASS_NAMES) : Likewise.\n+\t  (REG_CLASS_CONTENTS) : Likewise.\n+\t  (SPE_HIGH_REGNO_P) : New macro to identify SPE high registers.\n+\t* gcc.target/powerpc/pr60102.c: New testcase.\n+\n 2014-08-04  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.h (gimple_fold_builtin): Remove."}, {"sha": "d088ff6acd289e793916de1e70283f3601ed697c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -1221,7 +1221,12 @@ char rs6000_reg_names[][8] =\n       /* Soft frame pointer.  */\n       \"sfp\",\n       /* HTM SPR registers.  */\n-      \"tfhar\", \"tfiar\", \"texasr\"\n+      \"tfhar\", \"tfiar\", \"texasr\",\n+      /* SPE High registers.  */\n+      \"0\",  \"1\",  \"2\",  \"3\",  \"4\",  \"5\",  \"6\",  \"7\",\n+      \"8\",  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\n+     \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\",\n+     \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n };\n \n #ifdef TARGET_REGNAMES\n@@ -1249,7 +1254,12 @@ static const char alt_reg_names[][8] =\n   /* Soft frame pointer.  */\n   \"sfp\",\n   /* HTM SPR registers.  */\n-  \"tfhar\", \"tfiar\", \"texasr\"\n+  \"tfhar\", \"tfiar\", \"texasr\",\n+  /* SPE High registers.  */\n+  \"%rh0\",  \"%rh1\",  \"%rh2\",  \"%rh3\",  \"%rh4\",  \"%rh5\",  \"%rh6\",   \"%rh7\",\n+  \"%rh8\",  \"%rh9\",  \"%rh10\", \"%r11\",  \"%rh12\", \"%rh13\", \"%rh14\", \"%rh15\",\n+  \"%rh16\", \"%rh17\", \"%rh18\", \"%rh19\", \"%rh20\", \"%rh21\", \"%rh22\", \"%rh23\",\n+  \"%rh24\", \"%rh25\", \"%rh26\", \"%rh27\", \"%rh28\", \"%rh29\", \"%rh30\", \"%rh31\"\n };\n #endif\n \n@@ -31411,13 +31421,13 @@ rs6000_dwarf_register_span (rtx reg)\n     {\n       if (BYTES_BIG_ENDIAN)\n \t{\n-\t  parts[2 * i] = gen_rtx_REG (SImode, regno + 1200);\n+\t  parts[2 * i] = gen_rtx_REG (SImode, regno + FIRST_SPE_HIGH_REGNO);\n \t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno);\n \t}\n       else\n \t{\n \t  parts[2 * i] = gen_rtx_REG (SImode, regno);\n-\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno + 1200);\n+\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno + FIRST_SPE_HIGH_REGNO);\n \t}\n     }\n \n@@ -31437,11 +31447,11 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n       rtx mem = gen_rtx_MEM (BLKmode, addr);\n       rtx value = gen_int_mode (4, mode);\n \n-      for (i = 1201; i < 1232; i++)\n+      for (i = FIRST_SPE_HIGH_REGNO; i < LAST_SPE_HIGH_REGNO+1; i++)\n \t{\n-\t  int column = DWARF_REG_TO_UNWIND_COLUMN (i);\n-\t  HOST_WIDE_INT offset\n-\t    = DWARF_FRAME_REGNUM (column) * GET_MODE_SIZE (mode);\n+\t  int column = DWARF_REG_TO_UNWIND_COLUMN\n+\t\t(DWARF2_FRAME_REG_OUT (DWARF_FRAME_REGNUM (i), true));\n+\t  HOST_WIDE_INT offset = column * GET_MODE_SIZE (mode);\n \n \t  emit_move_insn (adjust_address (mem, mode, offset), value);\n \t}\n@@ -31460,9 +31470,9 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n \n       for (i = FIRST_ALTIVEC_REGNO; i < LAST_ALTIVEC_REGNO+1; i++)\n \t{\n-\t  int column = DWARF_REG_TO_UNWIND_COLUMN (i);\n-\t  HOST_WIDE_INT offset\n-\t    = DWARF_FRAME_REGNUM (column) * GET_MODE_SIZE (mode);\n+\t  int column = DWARF_REG_TO_UNWIND_COLUMN\n+\t\t(DWARF2_FRAME_REG_OUT (DWARF_FRAME_REGNUM (i), true));\n+\t  HOST_WIDE_INT offset = column * GET_MODE_SIZE (mode);\n \n \t  emit_move_insn (adjust_address (mem, mode, offset), value);\n \t}\n@@ -31494,9 +31504,8 @@ rs6000_dbx_register_number (unsigned int regno)\n     return 99;\n   if (regno == SPEFSCR_REGNO)\n     return 612;\n-  /* SPE high reg number.  We get these values of regno from\n-     rs6000_dwarf_register_span.  */\n-  gcc_assert (regno >= 1200 && regno < 1232);\n+  if (SPE_HIGH_REGNO_P (regno))\n+    return regno - FIRST_SPE_HIGH_REGNO + 1200;\n   return regno;\n }\n "}, {"sha": "d8a68ba3d91d69f6ad0c0a8eefe705d4e816b79c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 123, "deletions": 41, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -930,35 +930,36 @@ enum data_align { align_abi, align_opt, align_both };\n \n    The 3 HTM registers aren't also included in DWARF_FRAME_REGISTERS.  */\n \n-#define FIRST_PSEUDO_REGISTER 117\n+#define FIRST_PSEUDO_REGISTER 149\n \n /* This must be included for pre gcc 3.0 glibc compatibility.  */\n #define PRE_GCC3_DWARF_FRAME_REGISTERS 77\n \n-/* Add 32 dwarf columns for synthetic SPE registers.  */\n-#define DWARF_FRAME_REGISTERS ((FIRST_PSEUDO_REGISTER - 4) + 32)\n+/* True if register is an SPE High register.  */\n+#define SPE_HIGH_REGNO_P(N) \\\n+  ((N) >= FIRST_SPE_HIGH_REGNO && (N) <= LAST_SPE_HIGH_REGNO)\n+\n+/* SPE high registers added as hard regs.\n+   The sfp register and 3 HTM registers\n+   aren't included in DWARF_FRAME_REGISTERS.  */\n+#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 4)\n \n /* The SPE has an additional 32 synthetic registers, with DWARF debug\n    info numbering for these registers starting at 1200.  While eh_frame\n    register numbering need not be the same as the debug info numbering,\n-   we choose to number these regs for eh_frame at 1200 too.  This allows\n-   future versions of the rs6000 backend to add hard registers and\n-   continue to use the gcc hard register numbering for eh_frame.  If the\n-   extra SPE registers in eh_frame were numbered starting from the\n-   current value of FIRST_PSEUDO_REGISTER, then if FIRST_PSEUDO_REGISTER\n-   changed we'd need to introduce a mapping in DWARF_FRAME_REGNUM to\n-   avoid invalidating older SPE eh_frame info.\n+   we choose to number these regs for eh_frame at 1200 too.\n \n    We must map them here to avoid huge unwinder tables mostly consisting\n    of unused space.  */\n #define DWARF_REG_TO_UNWIND_COLUMN(r) \\\n-  ((r) > 1200 ? ((r) - 1200 + (DWARF_FRAME_REGISTERS - 32)) : (r))\n+  ((r) >= 1200 ? ((r) - 1200 + (DWARF_FRAME_REGISTERS - 32)) : (r))\n \n /* Use standard DWARF numbering for DWARF debugging information.  */\n #define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n \n /* Use gcc hard register numbering for eh_frame.  */\n-#define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n+#define DWARF_FRAME_REGNUM(REGNO) \\\n+  (SPE_HIGH_REGNO_P (REGNO) ? ((REGNO) - FIRST_SPE_HIGH_REGNO + 1200) : (REGNO))\n \n /* Map register numbers held in the call frame info that gcc has\n    collected using DWARF_FRAME_REGNUM to those that should be output in\n@@ -990,7 +991,10 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1, 1, 1, 1, 1\t\t\t\t   \\\n+   , 1, 1, 1, 1, 1, 1,\t\t\t\t   \\\n+   /* SPE High registers.  */\t\t\t   \\\n+   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  \\\n }\n \n /* 1 for registers not available across function calls.\n@@ -1010,7 +1014,10 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1, 1, 1, 1, 1\t\t\t\t   \\\n+   , 1, 1, 1, 1, 1, 1,\t\t\t\t   \\\n+   /* SPE High registers.  */\t\t\t   \\\n+   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  \\\n }\n \n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n@@ -1029,7 +1036,10 @@ enum data_align { align_abi, align_opt, align_both };\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0\t\t\t\t\t\t   \\\n-   , 0, 0, 0, 0, 0, 0\t\t\t\t   \\\n+   , 0, 0, 0, 0, 0, 0,\t\t\t\t   \\\n+   /* SPE High registers.  */\t\t\t   \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  \\\n }\n \n #define TOTAL_ALTIVEC_REGS\t(LAST_ALTIVEC_REGNO - FIRST_ALTIVEC_REGNO + 1)\n@@ -1113,7 +1123,10 @@ enum data_align { align_abi, align_opt, align_both };\n    96, 95, 94, 93, 92, 91,\t\t\t\t\t\\\n    108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97,\t\\\n    109, 110,\t\t\t\t\t\t\t\\\n-   111, 112, 113, 114, 115, 116\t\t\t\t\t\\\n+   111, 112, 113, 114, 115, 116,\t\t\t\t\\\n+   117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,  \\\n+   129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,  \\\n+   141, 142, 143, 144, 145, 146, 147, 148\t\t\t\\\n }\n \n /* True if register is floating-point.  */\n@@ -1348,6 +1361,7 @@ enum reg_class\n   CR_REGS,\n   NON_FLOAT_REGS,\n   CA_REGS,\n+  SPE_HIGH_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -1379,37 +1393,62 @@ enum reg_class\n   \"CR_REGS\",\t\t\t\t\t\t\t\t\\\n   \"NON_FLOAT_REGS\",\t\t\t\t\t\t\t\\\n   \"CA_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"SPE_HIGH_REGS\",\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS\t\t\t\t\t\t     \\\n-{\t\t\t\t\t\t\t\t\t     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }, /* NO_REGS */\t     \\\n-  { 0xfffffffe, 0x00000000, 0x00000008, 0x00020000 }, /* BASE_REGS */\t     \\\n-  { 0xffffffff, 0x00000000, 0x00000008, 0x00020000 }, /* GENERAL_REGS */     \\\n-  { 0x00000000, 0xffffffff, 0x00000000, 0x00000000 }, /* FLOAT_REGS */       \\\n-  { 0x00000000, 0x00000000, 0xffffe000, 0x00001fff }, /* ALTIVEC_REGS */     \\\n-  { 0x00000000, 0xffffffff, 0xffffe000, 0x00001fff }, /* VSX_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00002000 }, /* VRSAVE_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00004000 }, /* VSCR_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00008000 }, /* SPE_ACC_REGS */     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00010000 }, /* SPEFSCR_REGS */     \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00040000 }, /* SPR_REGS */     \\\n-  { 0xffffffff, 0xffffffff, 0x00000008, 0x00020000 }, /* NON_SPECIAL_REGS */ \\\n-  { 0x00000000, 0x00000000, 0x00000002, 0x00000000 }, /* LINK_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000004, 0x00000000 }, /* CTR_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000006, 0x00000000 }, /* LINK_OR_CTR_REGS */ \\\n-  { 0x00000000, 0x00000000, 0x00000006, 0x00002000 }, /* SPECIAL_REGS */     \\\n-  { 0xffffffff, 0x00000000, 0x0000000e, 0x00022000 }, /* SPEC_OR_GEN_REGS */ \\\n-  { 0x00000000, 0x00000000, 0x00000010, 0x00000000 }, /* CR0_REGS */\t     \\\n-  { 0x00000000, 0x00000000, 0x00000ff0, 0x00000000 }, /* CR_REGS */\t     \\\n-  { 0xffffffff, 0x00000000, 0x00000ffe, 0x00020000 }, /* NON_FLOAT_REGS */   \\\n-  { 0x00000000, 0x00000000, 0x00001000, 0x00000000 }, /* CA_REGS */\t     \\\n-  { 0xffffffff, 0xffffffff, 0xfffffffe, 0x0007ffff }  /* ALL_REGS */\t     \\\n+#define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  /* NO_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t\\\n+  /* BASE_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0xfffffffe, 0x00000000, 0x00000008, 0x00020000, 0x00000000 },\t\\\n+  /* GENERAL_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0xffffffff, 0x00000000, 0x00000008, 0x00020000, 0x00000000 },\t\\\n+  /* FLOAT_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000 },\t\\\n+  /* ALTIVEC_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0xffffe000, 0x00001fff, 0x00000000 },\t\\\n+  /* VSX_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0xffffffff, 0xffffe000, 0x00001fff, 0x00000000 },\t\\\n+  /* VRSAVE_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00002000, 0x00000000 },\t\\\n+  /* VSCR_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00004000, 0x00000000 },\t\\\n+  /* SPE_ACC_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00008000, 0x00000000 },\t\\\n+  /* SPEFSCR_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000000 },\t\\\n+  /* SPR_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000 },\t\\\n+  /* NON_SPECIAL_REGS.  */\t\t\t\t\t\t\\\n+  { 0xffffffff, 0xffffffff, 0x00000008, 0x00020000, 0x00000000 },\t\\\n+  /* LINK_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000 },\t\\\n+  /* CTR_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000004, 0x00000000, 0x00000000 },\t\\\n+  /* LINK_OR_CTR_REGS.  */\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000006, 0x00000000, 0x00000000 },\t\\\n+  /* SPECIAL_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000006, 0x00002000, 0x00000000 },\t\\\n+  /* SPEC_OR_GEN_REGS.  */\t\t\t\t\t\t\\\n+  { 0xffffffff, 0x00000000, 0x0000000e, 0x00022000, 0x00000000 },\t\\\n+  /* CR0_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000010, 0x00000000, 0x00000000 },\t\\\n+  /* CR_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000ff0, 0x00000000, 0x00000000 },\t\\\n+  /* NON_FLOAT_REGS.  */\t\t\t\t\t\t\\\n+  { 0xffffffff, 0x00000000, 0x00000ffe, 0x00020000, 0x00000000 },\t\\\n+  /* CA_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00001000, 0x00000000, 0x00000000 },\t\\\n+  /* SPE_HIGH_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0xffe00000, 0x001fffff },\t\\\n+  /* ALL_REGS.  */\t\t\t\t\t\t\t\\\n+  { 0xffffffff, 0xffffffff, 0xfffffffe, 0xffe7ffff, 0x001fffff }\t\\\n }\n \n /* The same information, inverted:\n@@ -2348,6 +2387,39 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   &rs6000_reg_names[114][0],\t/* tfhar  */\t\t\t\t\\\n   &rs6000_reg_names[115][0],\t/* tfiar  */\t\t\t\t\\\n   &rs6000_reg_names[116][0],\t/* texasr  */\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  &rs6000_reg_names[117][0],\t/* SPE rh0.  */\t\t\t\t\\\n+  &rs6000_reg_names[118][0],\t/* SPE rh1.  */\t\t\t\t\\\n+  &rs6000_reg_names[119][0],\t/* SPE rh2.  */\t\t\t\t\\\n+  &rs6000_reg_names[120][0],\t/* SPE rh3.  */\t\t\t\t\\\n+  &rs6000_reg_names[121][0],\t/* SPE rh4.  */\t\t\t\t\\\n+  &rs6000_reg_names[122][0],\t/* SPE rh5.  */\t\t\t\t\\\n+  &rs6000_reg_names[123][0],\t/* SPE rh6.  */\t\t\t\t\\\n+  &rs6000_reg_names[124][0],\t/* SPE rh7.  */\t\t\t\t\\\n+  &rs6000_reg_names[125][0],\t/* SPE rh8.  */\t\t\t\t\\\n+  &rs6000_reg_names[126][0],\t/* SPE rh9.  */\t\t\t\t\\\n+  &rs6000_reg_names[127][0],\t/* SPE rh10.  */\t\t\t\\\n+  &rs6000_reg_names[128][0],\t/* SPE rh11.  */\t\t\t\\\n+  &rs6000_reg_names[129][0],\t/* SPE rh12.  */\t\t\t\\\n+  &rs6000_reg_names[130][0],\t/* SPE rh13.  */\t\t\t\\\n+  &rs6000_reg_names[131][0],\t/* SPE rh14.  */\t\t\t\\\n+  &rs6000_reg_names[132][0],\t/* SPE rh15.  */\t\t\t\\\n+  &rs6000_reg_names[133][0],\t/* SPE rh16.  */\t\t\t\\\n+  &rs6000_reg_names[134][0],\t/* SPE rh17.  */\t\t\t\\\n+  &rs6000_reg_names[135][0],\t/* SPE rh18.  */\t\t\t\\\n+  &rs6000_reg_names[136][0],\t/* SPE rh19.  */\t\t\t\\\n+  &rs6000_reg_names[137][0],\t/* SPE rh20.  */\t\t\t\\\n+  &rs6000_reg_names[138][0],\t/* SPE rh21.  */\t\t\t\\\n+  &rs6000_reg_names[139][0],\t/* SPE rh22.  */\t\t\t\\\n+  &rs6000_reg_names[140][0],\t/* SPE rh22.  */\t\t\t\\\n+  &rs6000_reg_names[141][0],\t/* SPE rh24.  */\t\t\t\\\n+  &rs6000_reg_names[142][0],\t/* SPE rh25.  */\t\t\t\\\n+  &rs6000_reg_names[143][0],\t/* SPE rh26.  */\t\t\t\\\n+  &rs6000_reg_names[144][0],\t/* SPE rh27.  */\t\t\t\\\n+  &rs6000_reg_names[145][0],\t/* SPE rh28.  */\t\t\t\\\n+  &rs6000_reg_names[146][0],\t/* SPE rh29.  */\t\t\t\\\n+  &rs6000_reg_names[147][0],\t/* SPE rh30.  */\t\t\t\\\n+  &rs6000_reg_names[148][0],\t/* SPE rh31.  */\t\t\t\\\n }\n \n /* Table of additional register names to use in user input.  */\n@@ -2403,7 +2475,17 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"vs56\", 101},{\"vs57\", 102},{\"vs58\", 103},{\"vs59\", 104},      \\\n   {\"vs60\", 105},{\"vs61\", 106},{\"vs62\", 107},{\"vs63\", 108},\t\\\n   /* Transactional Memory Facility (HTM) Registers.  */\t\t\\\n-  {\"tfhar\",  114}, {\"tfiar\",  115}, {\"texasr\",  116} }\n+  {\"tfhar\",  114}, {\"tfiar\",  115}, {\"texasr\",  116},\t\t\\\n+  /* SPE high registers.  */\t\t\t\t\t\\\n+  {\"rh0\",  117}, {\"rh1\",  118}, {\"rh2\",  119}, {\"rh3\",  120},\t\\\n+  {\"rh4\",  121}, {\"rh5\",  122}, {\"rh6\",  123}, {\"rh7\",  124},\t\\\n+  {\"rh8\",  125}, {\"rh9\",  126}, {\"rh10\", 127}, {\"rh11\", 128},\t\\\n+  {\"rh12\", 129}, {\"rh13\", 130}, {\"rh14\", 131}, {\"rh15\", 132},\t\\\n+  {\"rh16\", 133}, {\"rh17\", 134}, {\"rh18\", 135}, {\"rh19\", 136},\t\\\n+  {\"rh20\", 137}, {\"rh21\", 138}, {\"rh22\", 139}, {\"rh23\", 140},\t\\\n+  {\"rh24\", 141}, {\"rh25\", 142}, {\"rh26\", 143}, {\"rh27\", 144},\t\\\n+  {\"rh28\", 145}, {\"rh29\", 146}, {\"rh30\", 147}, {\"rh31\", 148},\t\\\n+}\n \n /* This is how to output an element of a case-vector that is relative.  */\n "}, {"sha": "a577d356296bfa0b62e26acf9ccfe5a8a99fc878", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -56,6 +56,8 @@\n    (TFHAR_REGNO\t\t\t114)\n    (TFIAR_REGNO\t\t\t115)\n    (TEXASR_REGNO\t\t116)\n+   (FIRST_SPE_HIGH_REGNO\t117)\n+   (LAST_SPE_HIGH_REGNO\t\t148)\n   ])\n \n ;;"}, {"sha": "9a3184e6cc12a63c8510d96cd0f21eefd3469553", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -1,3 +1,9 @@\n+2014-08-04  Rohit  <rohitarulraj@freescale.com>\n+\n+\tPR target/60102\n+\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Update\n+\t  based on change in SPE high register numbers and 3 HTM registers.\n+\n 2014-08-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* Makefile.in (LIBGCOV_MERGE, LIBGCOV_PROFILER,"}, {"sha": "ffb4f07eeb63402ea3d95e103c5293482379a300", "filename": "libgcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23742a9e1b63ece52375966493ef873fdd6f8e66/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23742a9e1b63ece52375966493ef873fdd6f8e66/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=23742a9e1b63ece52375966493ef873fdd6f8e66", "patch": "@@ -274,8 +274,8 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n #ifdef __SPE__\n   for (i = 14; i < 32; i++)\n     {\n-      fs->regs.reg[i + FIRST_PSEUDO_REGISTER - 1].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[i + FIRST_PSEUDO_REGISTER - 1].loc.offset\n+      fs->regs.reg[i + FIRST_SPE_HIGH_REGNO - 4].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i + FIRST_SPE_HIGH_REGNO - 4].loc.offset\n \t= (long) &regs->vregs - new_cfa + 4 * i;\n     }\n #endif"}]}