{"sha": "eaa80f646433fccf28ef3258a55ccaf8396cacc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhODBmNjQ2NDMzZmNjZjI4ZWYzMjU4YTU1Y2NhZjgzOTZjYWNjMg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-27T15:44:26Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-27T15:44:26Z"}, "message": "[ARM] PR/63870 Add qualifier to check lane bounds in expand\n\n\t* config/arm/arm-builtins.c (enum arm_type_qualifiers):\n\tAdd qualifier_lane_index.\n\t(arm_binop_imm_qualifiers, BINOP_IMM_QUALIFIERS): New.\n\t(arm_getlane_qualifiers): Use qualifier_lane_index.\n\t(arm_lanemac_qualifiers): Rename to...\n\t(arm_mac_n_qualifiers): ...this.\n\t(LANEMAC_QUALIFIERS): Rename to...\n\t(MAC_N_QUALIFIERS): ...this.\n\t(arm_mac_lane_qualifiers, MAC_LANE_QUALIFIERS): New.\n\t(arm_setlane_qualifiers): Use qualifier_lane_index.\n\t(arm_ternop_imm_qualifiers, TERNOP_IMM_QUALIFIERS): New.\n\t(enum builtin_arg): Add NEON_ARG_LANE_INDEX.\n\t(arm_expand_neon_args): Handle NEON_ARG_LANE_INDEX.\n\t(arm_expand_neon_builtin): Handle qualifier_lane_index.\n\n\t* config/arm/arm-protos.h (neon_lane_bounds): Add const_tree parameter.\n\t* config/arm/arm.c (bounds_check): Likewise, improve error message.\n\t(neon_lane_bounds, neon_const_bounds): Add arguments to bounds_check.\n\t* config/arm/arm_neon_builtins.def (vshrs_n, vshru_n, vrshrs_n,\n\tvrshru_n, vshrn_n, vrshrn_n, vqshrns_n, vqshrnu_n, vqrshrns_n,\n\tvqrshrnu_n, vqshrun_n, vqrshrun_n, vshl_n, vqshl_s_n, vqshl_u_n,\n\tvqshlu_n, vshlls_n, vshllu_n): Change qualifiers to BINOP_IMM.\n\t(vsras_n, vsrau_n, vrsras_n, vrsrau_n, vsri_n, vsli_n): Change\n\tqualifiers to TERNOP_IMM.\n\t(vdup_lane): Change qualifiers to GETLANE.\n\t(vmla_lane, vmlals_lane, vmlalu_lane, vqdmlal_lane, vmls_lane,\n\tvmlsls_lane, vmlslu_lane, vqdmlsl_lane): Change qualifiers to MAC_LANE.\n\t(vmla_n, vmlals_n, vmlalu_n, vqdmlal_n, vmls_n, vmlsls_n, vmlslu_n,\n\tvqdmlsl_n): Change qualifiers to MAC_N.\n\n\t* config/arm/neon.md (neon_vget_lane<mode>, neon_vget_laneu<mode>,\n\tneon_vget_lanedi, neon_vget_lanev2di, neon_vset_lane<mode>,\n\tneon_vset_lanedi, neon_vdup_lane<mode>, neon_vdup_lanedi,\n\tneon_vdup_lanev2di, neon_vmul_lane<mode>, neon_vmul_lane<mode>,\n\tneon_vmull<sup>_lane<mode>, neon_vqdmull_lane<mode>,\n\tneon_vq<r>dmulh_lane<mode>, neon_vq<r>dmulh_lane<mode>,\n\tneon_vmla_lane<mode>, neon_vmla_lane<mode>, neon_vmlal<sup>_lane<mode>,\n\tneon_vqdmlal_lane<mode>, neon_vmls_lane<mode>, neon_vmls_lane<mode>,\n\tneon_vmlsl<sup>_lane<mode>, neon_vqdmlsl_lane<mode>):\n\tRemove call to neon_lane_bounds.\n\nFrom-SVN: r226251", "tree": {"sha": "3e9895d9228d32ac950dc70de940a71b330ae659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9895d9228d32ac950dc70de940a71b330ae659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaa80f646433fccf28ef3258a55ccaf8396cacc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa80f646433fccf28ef3258a55ccaf8396cacc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa80f646433fccf28ef3258a55ccaf8396cacc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa80f646433fccf28ef3258a55ccaf8396cacc2/comments", "author": null, "committer": null, "parents": [{"sha": "d99dacc9484b29b9223526264bc055905c31b08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99dacc9484b29b9223526264bc055905c31b08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99dacc9484b29b9223526264bc055905c31b08c"}], "stats": {"total": 236, "additions": 145, "deletions": 91}, "files": [{"sha": "82e139de0c246778319e768f9357ad19f066f171", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -1,3 +1,47 @@\n+2015-07-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR/63870\n+\t* config/arm/arm-builtins.c (enum arm_type_qualifiers):\n+\tAdd qualifier_lane_index.\n+\t(arm_binop_imm_qualifiers, BINOP_IMM_QUALIFIERS): New.\n+\t(arm_getlane_qualifiers): Use qualifier_lane_index.\n+\t(arm_lanemac_qualifiers): Rename to...\n+\t(arm_mac_n_qualifiers): ...this.\n+\t(LANEMAC_QUALIFIERS): Rename to...\n+\t(MAC_N_QUALIFIERS): ...this.\n+\t(arm_mac_lane_qualifiers, MAC_LANE_QUALIFIERS): New.\n+\t(arm_setlane_qualifiers): Use qualifier_lane_index.\n+\t(arm_ternop_imm_qualifiers, TERNOP_IMM_QUALIFIERS): New.\n+\t(enum builtin_arg): Add NEON_ARG_LANE_INDEX.\n+\t(arm_expand_neon_args): Handle NEON_ARG_LANE_INDEX.\n+\t(arm_expand_neon_builtin): Handle qualifier_lane_index.\n+\n+\t* config/arm/arm-protos.h (neon_lane_bounds): Add const_tree parameter.\n+\t* config/arm/arm.c (bounds_check): Likewise, improve error message.\n+\t(neon_lane_bounds, neon_const_bounds): Add arguments to bounds_check.\n+\t* config/arm/arm_neon_builtins.def (vshrs_n, vshru_n, vrshrs_n,\n+\tvrshru_n, vshrn_n, vrshrn_n, vqshrns_n, vqshrnu_n, vqrshrns_n,\n+\tvqrshrnu_n, vqshrun_n, vqrshrun_n, vshl_n, vqshl_s_n, vqshl_u_n,\n+\tvqshlu_n, vshlls_n, vshllu_n): Change qualifiers to BINOP_IMM.\n+\t(vsras_n, vsrau_n, vrsras_n, vrsrau_n, vsri_n, vsli_n): Change\n+\tqualifiers to TERNOP_IMM.\n+\t(vdup_lane): Change qualifiers to GETLANE.\n+\t(vmla_lane, vmlals_lane, vmlalu_lane, vqdmlal_lane, vmls_lane,\n+\tvmlsls_lane, vmlslu_lane, vqdmlsl_lane): Change qualifiers to MAC_LANE.\n+\t(vmla_n, vmlals_n, vmlalu_n, vqdmlal_n, vmls_n, vmlsls_n, vmlslu_n,\n+\tvqdmlsl_n): Change qualifiers to MAC_N.\n+\n+\t* config/arm/neon.md (neon_vget_lane<mode>, neon_vget_laneu<mode>,\n+\tneon_vget_lanedi, neon_vget_lanev2di, neon_vset_lane<mode>,\n+\tneon_vset_lanedi, neon_vdup_lane<mode>, neon_vdup_lanedi,\n+\tneon_vdup_lanev2di, neon_vmul_lane<mode>, neon_vmul_lane<mode>,\n+\tneon_vmull<sup>_lane<mode>, neon_vqdmull_lane<mode>,\n+\tneon_vq<r>dmulh_lane<mode>, neon_vq<r>dmulh_lane<mode>,\n+\tneon_vmla_lane<mode>, neon_vmla_lane<mode>, neon_vmlal<sup>_lane<mode>,\n+\tneon_vqdmlal_lane<mode>, neon_vmls_lane<mode>, neon_vmls_lane<mode>,\n+\tneon_vmlsl<sup>_lane<mode>, neon_vqdmlsl_lane<mode>):\n+\tRemove call to neon_lane_bounds.\n+\n 2015-07-27  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.md (aarch64_ashl_sisd_or_int_<mode>3):"}, {"sha": "7f711a84c75c8f20e8f2343f91484fda264ea5fd", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -75,7 +75,9 @@ enum arm_type_qualifiers\n   /* qualifier_const_pointer | qualifier_map_mode  */\n   qualifier_const_pointer_map_mode = 0x86,\n   /* Polynomial types.  */\n-  qualifier_poly = 0x100\n+  qualifier_poly = 0x100,\n+  /* Lane indices - must be within range of previous argument = a vector.  */\n+  qualifier_lane_index = 0x200\n };\n \n /*  The qualifier_internal allows generation of a unary builtin from\n@@ -106,21 +108,40 @@ arm_ternop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n \n /* T (T, immediate).  */\n static enum arm_type_qualifiers\n-arm_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+arm_binop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_immediate };\n+#define BINOP_IMM_QUALIFIERS (arm_binop_imm_qualifiers)\n+\n+/* T (T, lane index).  */\n+static enum arm_type_qualifiers\n+arm_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_lane_index };\n #define GETLANE_QUALIFIERS (arm_getlane_qualifiers)\n \n /* T (T, T, T, immediate).  */\n static enum arm_type_qualifiers\n-arm_lanemac_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+arm_mac_n_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none,\n       qualifier_none, qualifier_immediate };\n-#define LANEMAC_QUALIFIERS (arm_lanemac_qualifiers)\n+#define MAC_N_QUALIFIERS (arm_mac_n_qualifiers)\n+\n+/* T (T, T, T, lane index).  */\n+static enum arm_type_qualifiers\n+arm_mac_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none,\n+      qualifier_none, qualifier_lane_index };\n+#define MAC_LANE_QUALIFIERS (arm_mac_lane_qualifiers)\n \n /* T (T, T, immediate).  */\n static enum arm_type_qualifiers\n-arm_setlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+arm_ternop_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate };\n+#define TERNOP_IMM_QUALIFIERS (arm_ternop_imm_qualifiers)\n+\n+/* T (T, T, lane index).  */\n+static enum arm_type_qualifiers\n+arm_setlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_lane_index };\n #define SETLANE_QUALIFIERS (arm_setlane_qualifiers)\n \n /* T (T, T).  */\n@@ -1925,6 +1946,7 @@ arm_expand_unop_builtin (enum insn_code icode,\n typedef enum {\n   NEON_ARG_COPY_TO_REG,\n   NEON_ARG_CONSTANT,\n+  NEON_ARG_LANE_INDEX,\n   NEON_ARG_MEMORY,\n   NEON_ARG_STOP\n } builtin_arg;\n@@ -2041,6 +2063,16 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n \t\top[argc] = copy_to_mode_reg (mode[argc], op[argc]);\n \t      break;\n \n+\t    case NEON_ARG_LANE_INDEX:\n+\t      /* Previous argument must be a vector, which this indexes.  */\n+\t      gcc_assert (argc > 0);\n+\t      if (CONST_INT_P (op[argc]))\n+\t\t{\n+\t\t  enum machine_mode vmode = mode[argc - 1];\n+\t\t  neon_lane_bounds (op[argc], 0, GET_MODE_NUNITS (vmode), exp);\n+\t\t}\n+\t      /* Fall through - if the lane index isn't a constant then\n+\t\t the next case will error.  */\n \t    case NEON_ARG_CONSTANT:\n \t      if (!(*insn_data[icode].operand[opno].predicate)\n \t\t  (op[argc], mode[argc]))\n@@ -2168,7 +2200,9 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n       int operands_k = k - is_void;\n       int expr_args_k = k - 1;\n \n-      if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n+      if (d->qualifiers[qualifiers_k] & qualifier_lane_index)\n+\targs[k] = NEON_ARG_LANE_INDEX;\n+      else if (d->qualifiers[qualifiers_k] & qualifier_immediate)\n \targs[k] = NEON_ARG_CONSTANT;\n       else if (d->qualifiers[qualifiers_k] & qualifier_maybe_immediate)\n \t{"}, {"sha": "cef9eec277d3e799f333d0a3704afb2189c7cd23", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -86,7 +86,7 @@ extern void neon_pairwise_reduce (rtx, rtx, machine_mode,\n extern rtx neon_make_constant (rtx);\n extern tree arm_builtin_vectorized_function (tree, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n-extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n extern void neon_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern HOST_WIDE_INT neon_element_bits (machine_mode);\n extern void neon_reinterpret (rtx, rtx);"}, {"sha": "6da6f6882baa38e8be53be8c0cbe4691c5e915a9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -12789,12 +12789,12 @@ neon_expand_vector_init (rtx target, rtx vals)\n }\n \n /* Ensure OPERAND lies between LOW (inclusive) and HIGH (exclusive).  Raise\n-   ERR if it doesn't.  FIXME: NEON bounds checks occur late in compilation, so\n-   reported source locations are bogus.  */\n+   ERR if it doesn't.  EXP indicates the source location, which includes the\n+   inlining history for intrinsics.  */\n \n static void\n bounds_check (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n-\t      const char *err)\n+\t      const_tree exp, const char *desc)\n {\n   HOST_WIDE_INT lane;\n \n@@ -12803,23 +12803,30 @@ bounds_check (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n   lane = INTVAL (operand);\n \n   if (lane < low || lane >= high)\n-    error (err);\n+    {\n+      if (exp)\n+\terror (\"%K%s %lld out of range %lld - %lld\",\n+\t       exp, desc, lane, low, high - 1);\n+      else\n+\terror (\"%s %lld out of range %lld - %lld\", desc, lane, low, high - 1);\n+    }\n }\n \n /* Bounds-check lanes.  */\n \n void\n-neon_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n+neon_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n+\t\t  const_tree exp)\n {\n-  bounds_check (operand, low, high, \"lane out of range\");\n+  bounds_check (operand, low, high, exp, \"lane\");\n }\n \n /* Bounds-check constants.  */\n \n void\n neon_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n {\n-  bounds_check (operand, low, high, \"constant out of range\");\n+  bounds_check (operand, low, high, NULL_TREE, \"constant\");\n }\n \n HOST_WIDE_INT"}, {"sha": "f150b98b8096e94c6b39bbe477e5052b15f0313f", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -67,28 +67,28 @@ VAR8 (BINOP, vqshls, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n VAR8 (BINOP, vqshlu, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n VAR8 (BINOP, vqrshls, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n VAR8 (BINOP, vqrshlu, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vshrs_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vshru_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vrshrs_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vrshru_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vshrn_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vrshrn_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqshrns_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqshrnu_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqrshrns_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqrshrnu_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqshrun_n, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vqrshrun_n, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vqshl_s_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vqshl_u_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (GETLANE, vqshlu_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR3 (GETLANE, vshlls_n, v8qi, v4hi, v2si)\n-VAR3 (GETLANE, vshllu_n, v8qi, v4hi, v2si)\n-VAR8 (SETLANE, vsras_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (SETLANE, vsrau_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (SETLANE, vrsras_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (SETLANE, vrsrau_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vshrs_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vshru_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vrshrs_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vrshru_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vshrn_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vrshrn_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqshrns_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqshrnu_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqrshrns_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqrshrnu_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqshrun_n, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vqrshrun_n, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vshl_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vqshl_s_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vqshl_u_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (BINOP_IMM, vqshlu_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR3 (BINOP_IMM, vshlls_n, v8qi, v4hi, v2si)\n+VAR3 (BINOP_IMM, vshllu_n, v8qi, v4hi, v2si)\n+VAR8 (TERNOP_IMM, vsras_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (TERNOP_IMM, vsrau_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (TERNOP_IMM, vrsras_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (TERNOP_IMM, vrsrau_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n VAR2 (BINOP, vsub, v2sf, v4sf)\n VAR3 (BINOP, vsubls, v8qi, v4hi, v2si)\n VAR3 (BINOP, vsublu, v8qi, v4hi, v2si)\n@@ -140,8 +140,8 @@ VAR6 (BINOP, vpadals, v8qi, v4hi, v2si, v16qi, v8hi, v4si)\n VAR6 (BINOP, vpadalu, v8qi, v4hi, v2si, v16qi, v8hi, v4si)\n VAR2 (BINOP, vrecps, v2sf, v4sf)\n VAR2 (BINOP, vrsqrts, v2sf, v4sf)\n-VAR8 (SETLANE, vsri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n-VAR8 (SETLANE, vsli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (TERNOP_IMM, vsri_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n+VAR8 (TERNOP_IMM, vsli_n, v8qi, v4hi, v2si, di, v16qi, v8hi, v4si, v2di)\n VAR8 (UNOP, vabs, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf)\n VAR6 (UNOP, vqabs, v8qi, v4hi, v2si, v16qi, v8hi, v4si)\n VAR8 (UNOP, vneg, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf)\n@@ -162,7 +162,7 @@ VAR10 (SETLANE, vset_lane,\n VAR5 (UNOP, vcreate, v8qi, v4hi, v2si, v2sf, di)\n VAR10 (UNOP, vdup_n,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n-VAR10 (BINOP, vdup_lane,\n+VAR10 (GETLANE, vdup_lane,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n VAR5 (COMBINE, vcombine, v8qi, v4hi, v2si, v2sf, di)\n VAR5 (UNOP, vget_high, v16qi, v8hi, v4si, v4sf, v2di)\n@@ -174,23 +174,23 @@ VAR3 (UNOP, vqmovun, v8hi, v4si, v2di)\n VAR3 (UNOP, vmovls, v8qi, v4hi, v2si)\n VAR3 (UNOP, vmovlu, v8qi, v4hi, v2si)\n VAR6 (SETLANE, vmul_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR6 (LANEMAC, vmla_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR2 (LANEMAC, vmlals_lane, v4hi, v2si)\n-VAR2 (LANEMAC, vmlalu_lane, v4hi, v2si)\n-VAR2 (LANEMAC, vqdmlal_lane, v4hi, v2si)\n-VAR6 (LANEMAC, vmls_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR2 (LANEMAC, vmlsls_lane, v4hi, v2si)\n-VAR2 (LANEMAC, vmlslu_lane, v4hi, v2si)\n-VAR2 (LANEMAC, vqdmlsl_lane, v4hi, v2si)\n+VAR6 (MAC_LANE, vmla_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n+VAR2 (MAC_LANE, vmlals_lane, v4hi, v2si)\n+VAR2 (MAC_LANE, vmlalu_lane, v4hi, v2si)\n+VAR2 (MAC_LANE, vqdmlal_lane, v4hi, v2si)\n+VAR6 (MAC_LANE, vmls_lane, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n+VAR2 (MAC_LANE, vmlsls_lane, v4hi, v2si)\n+VAR2 (MAC_LANE, vmlslu_lane, v4hi, v2si)\n+VAR2 (MAC_LANE, vqdmlsl_lane, v4hi, v2si)\n VAR6 (BINOP, vmul_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR6 (LANEMAC, vmla_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR2 (LANEMAC, vmlals_n, v4hi, v2si)\n-VAR2 (LANEMAC, vmlalu_n, v4hi, v2si)\n-VAR2 (LANEMAC, vqdmlal_n, v4hi, v2si)\n-VAR6 (LANEMAC, vmls_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n-VAR2 (LANEMAC, vmlsls_n, v4hi, v2si)\n-VAR2 (LANEMAC, vmlslu_n, v4hi, v2si)\n-VAR2 (LANEMAC, vqdmlsl_n, v4hi, v2si)\n+VAR6 (MAC_N, vmla_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n+VAR2 (MAC_N, vmlals_n, v4hi, v2si)\n+VAR2 (MAC_N, vmlalu_n, v4hi, v2si)\n+VAR2 (MAC_N, vqdmlal_n, v4hi, v2si)\n+VAR6 (MAC_N, vmls_n, v4hi, v2si, v2sf, v8hi, v4si, v4sf)\n+VAR2 (MAC_N, vmlsls_n, v4hi, v2si)\n+VAR2 (MAC_N, vmlslu_n, v4hi, v2si)\n+VAR2 (MAC_N, vqdmlsl_n, v4hi, v2si)\n VAR10 (SETLANE, vext,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di)\n VAR8 (UNOP, vrev64, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf)"}, {"sha": "4af74ce96ede0f7dbbea1ba95f938b5facdf3570", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa80f646433fccf28ef3258a55ccaf8396cacc2/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=eaa80f646433fccf28ef3258a55ccaf8396cacc2", "patch": "@@ -2663,8 +2663,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<MODE>mode));\n-\n   if (BYTES_BIG_ENDIAN)\n     {\n       /* The intrinsics are defined in terms of a model where the\n@@ -2694,8 +2692,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<MODE>mode));\n-\n   if (BYTES_BIG_ENDIAN)\n     {\n       /* The intrinsics are defined in terms of a model where the\n@@ -2725,7 +2721,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, 1);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n@@ -2736,18 +2731,11 @@\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  switch (INTVAL (operands[2]))\n-    {\n-    case 0:\n-      emit_move_insn (operands[0], gen_lowpart (DImode, operands[1]));\n-      break;\n-    case 1:\n-      emit_move_insn (operands[0], gen_highpart (DImode, operands[1]));\n-      break;\n-    default:\n-      neon_lane_bounds (operands[2], 0, 1);\n-      FAIL;\n-    }\n+  int lane = INTVAL (operands[2]);\n+  gcc_assert ((lane ==0) || (lane == 1));\n+  emit_move_insn (operands[0], lane == 0\n+\t\t\t\t? gen_lowpart (DImode, operands[1])\n+\t\t\t\t: gen_highpart (DImode, operands[1]));\n   DONE;\n })\n \n@@ -2759,7 +2747,6 @@\n   \"TARGET_NEON\"\n {\n   unsigned int elt = INTVAL (operands[3]);\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n \n   if (BYTES_BIG_ENDIAN)\n     {\n@@ -2782,7 +2769,6 @@\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, 1);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n@@ -2864,7 +2850,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<V_double_vector_mode>mode));\n   if (BYTES_BIG_ENDIAN)\n     {\n       unsigned int elt = INTVAL (operands[2]);\n@@ -2885,7 +2870,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, 1);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n@@ -2897,7 +2881,6 @@\n    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, 1);\n   emit_insn (gen_neon_vdup_nv2di (operands[0], operands[1]));\n   DONE;\n })\n@@ -3097,7 +3080,6 @@\n                     UNSPEC_VMUL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmul.<V_if_elem>\\t%P0, %P1, %P2[%c3]\";\n }\n   [(set (attr \"type\")\n@@ -3115,7 +3097,6 @@\n                     UNSPEC_VMUL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<V_HALF>mode));\n   return \"vmul.<V_if_elem>\\t%q0, %q1, %P2[%c3]\";\n }\n   [(set (attr \"type\")\n@@ -3133,7 +3114,6 @@\n                           VMULL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmull.<sup>%#<V_sz_elem>\\t%q0, %P1, %P2[%c3]\";\n }\n   [(set_attr \"type\" \"neon_mul_<V_elem_ch>_scalar_long\")]\n@@ -3148,7 +3128,6 @@\n                           UNSPEC_VQDMULL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vqdmull.<V_s_elem>\\t%q0, %P1, %P2[%c3]\";\n }\n   [(set_attr \"type\" \"neon_sat_mul_<V_elem_ch>_scalar_long\")]\n@@ -3163,7 +3142,6 @@\n                       VQDMULH_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vq<r>dmulh.<V_s_elem>\\t%q0, %q1, %P2[%c3]\";\n }\n   [(set_attr \"type\" \"neon_sat_mul_<V_elem_ch>_scalar_q\")]\n@@ -3178,7 +3156,6 @@\n                       VQDMULH_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vq<r>dmulh.<V_s_elem>\\t%P0, %P1, %P2[%c3]\";\n }\n   [(set_attr \"type\" \"neon_sat_mul_<V_elem_ch>_scalar_q\")]\n@@ -3194,7 +3171,6 @@\n                      UNSPEC_VMLA_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmla.<V_if_elem>\\t%P0, %P2, %P3[%c4]\";\n }\n   [(set (attr \"type\")\n@@ -3213,7 +3189,6 @@\n                      UNSPEC_VMLA_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmla.<V_if_elem>\\t%q0, %q2, %P3[%c4]\";\n }\n   [(set (attr \"type\")\n@@ -3232,7 +3207,6 @@\n                           VMLAL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmlal.<sup>%#<V_sz_elem>\\t%q0, %P2, %P3[%c4]\";\n }\n   [(set_attr \"type\" \"neon_mla_<V_elem_ch>_scalar_long\")]\n@@ -3248,7 +3222,6 @@\n                           UNSPEC_VQDMLAL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vqdmlal.<V_s_elem>\\t%q0, %P2, %P3[%c4]\";\n }\n   [(set_attr \"type\" \"neon_sat_mla_<V_elem_ch>_scalar_long\")]\n@@ -3264,7 +3237,6 @@\n                     UNSPEC_VMLS_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmls.<V_if_elem>\\t%P0, %P2, %P3[%c4]\";\n }\n   [(set (attr \"type\")\n@@ -3283,7 +3255,6 @@\n                     UNSPEC_VMLS_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmls.<V_if_elem>\\t%q0, %q2, %P3[%c4]\";\n }\n   [(set (attr \"type\")\n@@ -3302,7 +3273,6 @@\n                           VMLSL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vmlsl.<sup>%#<V_sz_elem>\\t%q0, %P2, %P3[%c4]\";\n }\n   [(set_attr \"type\" \"neon_mla_<V_elem_ch>_scalar_long\")]\n@@ -3318,7 +3288,6 @@\n                           UNSPEC_VQDMLSL_LANE))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n   return \"vqdmlsl.<V_s_elem>\\t%q0, %P2, %P3[%c4]\";\n }\n   [(set_attr \"type\" \"neon_sat_mla_<V_elem_ch>_scalar_long\")]"}]}