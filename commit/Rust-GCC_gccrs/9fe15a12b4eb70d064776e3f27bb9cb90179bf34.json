{"sha": "9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlMTVhMTJiNGViNzBkMDY0Nzc2ZTNmMjdiYjljYjkwMTc5YmYzNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-11T21:50:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-11T21:50:06Z"}, "message": "gcse.c (gmalloc): Argument is a size_t.\n\n\t* gcse.c (gmalloc): Argument is a size_t.  Add ATTRIBUTE_MALLOC.\n\t(grealloc): Size argument is a size_t.\n\t(gcalloc): New function.  Use throughout in lieu of\n\tgmalloc/memset.\n\nFrom-SVN: r70338", "tree": {"sha": "ed747a969cd89ad24c3eb6752bede07e6a121bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed747a969cd89ad24c3eb6752bede07e6a121bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe15a12b4eb70d064776e3f27bb9cb90179bf34/comments", "author": null, "committer": null, "parents": [{"sha": "29da5c928805b6d8ea99294dc9a46af15edc5256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29da5c928805b6d8ea99294dc9a46af15edc5256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29da5c928805b6d8ea99294dc9a46af15edc5256"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "f26963e179b766650d1bf0d5a7c2ff98da2be10b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe15a12b4eb70d064776e3f27bb9cb90179bf34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe15a12b4eb70d064776e3f27bb9cb90179bf34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "patch": "@@ -1,5 +1,10 @@\n 2003-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcse.c (gmalloc): Argument is a size_t.  Add ATTRIBUTE_MALLOC.\n+\t(grealloc): Size argument is a size_t.\n+\t(gcalloc): New function.  Use throughout in lieu of\n+\tgmalloc/memset.\n+\n \t* config/avr/avr.c (avr_init_once): Use xcalloc in lieu of\n \txmalloc/memset.\n \t* config/ia64/ia64.c (ia64_reorg): Likewise."}, {"sha": "066747b3c3a8d83f2c91485157ded4d98ba991d1", "filename": "gcc/gcse.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe15a12b4eb70d064776e3f27bb9cb90179bf34/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe15a12b4eb70d064776e3f27bb9cb90179bf34/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=9fe15a12b4eb70d064776e3f27bb9cb90179bf34", "patch": "@@ -549,8 +549,9 @@ struct null_pointer_info\n };\n \f\n static void compute_can_copy (void);\n-static void *gmalloc (unsigned int);\n-static void *grealloc (void *, unsigned int);\n+static void *gmalloc (size_t) ATTRIBUTE_MALLOC;\n+static void *gcalloc (size_t, size_t) ATTRIBUTE_MALLOC;\n+static void *grealloc (void *, size_t);\n static void *gcse_alloc (unsigned long);\n static void alloc_gcse_mem (rtx);\n static void free_gcse_mem (void);\n@@ -821,11 +822,8 @@ gcse_main (rtx f, FILE *file)\n \t  if (changed)\n \t    {\n \t      free_modify_mem_tables ();\n-\t      modify_mem_list = gmalloc (last_basic_block * sizeof (rtx));\n-\t      canon_modify_mem_list\n-\t\t= gmalloc (last_basic_block * sizeof (rtx));\n-\t      memset (modify_mem_list, 0, last_basic_block * sizeof (rtx));\n-\t      memset (canon_modify_mem_list, 0, last_basic_block * sizeof (rtx));\n+\t      modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n+\t      canon_modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n \t    }\n \t  free_reg_set_mem ();\n \t  alloc_reg_set_mem (max_reg_num ());\n@@ -960,12 +958,21 @@ gmalloc (unsigned int size)\n   return xmalloc (size);\n }\n \n+/* Cover function to xcalloc to record bytes allocated.  */\n+\n+static void *\n+gcalloc (size_t nelem, size_t elsize)\n+{\n+  bytes_used += nelem * elsize;\n+  return xcalloc (nelem, elsize);\n+}\n+\n /* Cover function to xrealloc.\n    We don't record the additional size since we don't know it.\n    It won't affect memory usage stats much anyway.  */\n \n static void *\n-grealloc (void *ptr, unsigned int size)\n+grealloc (void *ptr, size_t size)\n {\n   return xrealloc (ptr, size);\n }\n@@ -987,17 +994,15 @@ gcse_alloc (unsigned long size)\n static void\n alloc_gcse_mem (rtx f)\n {\n-  int i, n;\n+  int i;\n   rtx insn;\n \n   /* Find the largest UID and create a mapping from UIDs to CUIDs.\n      CUIDs are like UIDs except they increase monotonically, have no gaps,\n      and only apply to real insns.  */\n \n   max_uid = get_max_uid ();\n-  n = (max_uid + 1) * sizeof (int);\n-  uid_cuid = gmalloc (n);\n-  memset (uid_cuid, 0, n);\n+  uid_cuid = gcalloc (max_uid + 1, sizeof (int));\n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n     {\n       if (INSN_P (insn))\n@@ -1009,9 +1014,7 @@ alloc_gcse_mem (rtx f)\n   /* Create a table mapping cuids to insns.  */\n \n   max_cuid = i;\n-  n = (max_cuid + 1) * sizeof (rtx);\n-  cuid_insn = gmalloc (n);\n-  memset (cuid_insn, 0, n);\n+  cuid_insn = gcalloc (max_cuid + 1, sizeof (rtx));\n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn))\n       CUID_INSN (i++) = insn;\n@@ -1023,10 +1026,8 @@ alloc_gcse_mem (rtx f)\n   reg_set_in_block = sbitmap_vector_alloc (last_basic_block, max_gcse_regno);\n   /* Allocate array to keep a list of insns which modify memory in each\n      basic block.  */\n-  modify_mem_list = gmalloc (last_basic_block * sizeof (rtx));\n-  canon_modify_mem_list = gmalloc (last_basic_block * sizeof (rtx));\n-  memset (modify_mem_list, 0, last_basic_block * sizeof (rtx));\n-  memset (canon_modify_mem_list, 0, last_basic_block * sizeof (rtx));\n+  modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n+  canon_modify_mem_list = gcalloc (last_basic_block, sizeof (rtx));\n   modify_mem_list_set = BITMAP_XMALLOC ();\n   canon_modify_mem_list_set = BITMAP_XMALLOC ();\n }\n@@ -1189,12 +1190,8 @@ static struct obstack reg_set_obstack;\n static void\n alloc_reg_set_mem (int n_regs)\n {\n-  unsigned int n;\n-\n   reg_set_table_size = n_regs + REG_SET_TABLE_SLOP;\n-  n = reg_set_table_size * sizeof (struct reg_set *);\n-  reg_set_table = gmalloc (n);\n-  memset (reg_set_table, 0, n);\n+  reg_set_table = gcalloc (reg_set_table_size, sizeof (struct reg_set *));\n \n   gcc_obstack_init (&reg_set_obstack);\n }"}]}