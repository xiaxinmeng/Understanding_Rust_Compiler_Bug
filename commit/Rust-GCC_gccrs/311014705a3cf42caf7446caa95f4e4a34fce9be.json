{"sha": "311014705a3cf42caf7446caa95f4e4a34fce9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExMDE0NzA1YTNjZjQyY2FmNzQ0NmNhYTk1ZjRlNGEzNGZjZTliZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:38:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:38:28Z"}, "message": "[multiple changes]\n\n2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, exp_util.ads, inline.adb, freeze.adb,\n\tsem_util.adb, sem_util.ads, par-ch6.adb, sem_elab.adb: Minor\n\treformatting and a typo fix.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Preanalyze_Actuals): Add guard on use of\n\tIncomplete_Actuals, which are only stored for a package\n\tinstantiation, in order to place the instance in the body of\n\tthe enclosing unit.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_intr.adb: Add legality checks on calls to a\n\tGeneric_Dispatching_Constructor: the given tag must be defined,\n\tit cannot be the tag of an abstract type, and its accessibility\n\tlevel must not be greater than that of the constructor.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Try_Container_Indexing, Constant_Indexing_OK):\tIf\n\tthe context is an overloaded call, assume that Constant_Indexing\n\tis not OK if an interpretation has an assignable parameter\n\tcorresponding to the indexing expression.\n\n2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* init.c (__gnat_error_handler): Force the SPE bit of the MSR\n\twhen executing on e500v2 CPU.\n\n2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Constituent): Stop the\n\tanalysis after detecting a misplaced constituent as this is a\n\tcritical error.\n\nFrom-SVN: r230239", "tree": {"sha": "fa339846e5282acd562105c9ad0be87609fa21cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa339846e5282acd562105c9ad0be87609fa21cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/311014705a3cf42caf7446caa95f4e4a34fce9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311014705a3cf42caf7446caa95f4e4a34fce9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311014705a3cf42caf7446caa95f4e4a34fce9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311014705a3cf42caf7446caa95f4e4a34fce9be/comments", "author": null, "committer": null, "parents": [{"sha": "3095f7c6ebd5863450d82f11a5ca25c7b06581fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3095f7c6ebd5863450d82f11a5ca25c7b06581fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3095f7c6ebd5863450d82f11a5ca25c7b06581fe"}], "stats": {"total": 180, "additions": 154, "deletions": 26}, "files": [{"sha": "646d8d15acf0f0c5e71bbc01afd3005a95442f48", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -1,3 +1,41 @@\n+2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, exp_util.ads, inline.adb, freeze.adb,\n+\tsem_util.adb, sem_util.ads, par-ch6.adb, sem_elab.adb: Minor\n+\treformatting and a typo fix.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Preanalyze_Actuals): Add guard on use of\n+\tIncomplete_Actuals, which are only stored for a package\n+\tinstantiation, in order to place the instance in the body of\n+\tthe enclosing unit.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_intr.adb: Add legality checks on calls to a\n+\tGeneric_Dispatching_Constructor: the given tag must be defined,\n+\tit cannot be the tag of an abstract type, and its accessibility\n+\tlevel must not be greater than that of the constructor.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing, Constant_Indexing_OK):\tIf\n+\tthe context is an overloaded call, assume that Constant_Indexing\n+\tis not OK if an interpretation has an assignable parameter\n+\tcorresponding to the indexing expression.\n+\n+2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* init.c (__gnat_error_handler): Force the SPE bit of the MSR\n+\twhen executing on e500v2 CPU.\n+\n+2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Constituent): Stop the\n+\tanalysis after detecting a misplaced constituent as this is a\n+\tcritical error.\n+\n 2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch10.adb, atree.adb: Minor reformatting."}, {"sha": "f7433225f3bda6e776350170848d1614c8972bfa", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -4285,7 +4285,7 @@ package body Exp_Ch5 is\n          --  with element iterators, where debug information must be generated\n          --  for the temporary that holds the element value. These temporaries\n          --  are created within a transient block whose local declarations are\n-         --  transferred to the loop, which now has non-trivial local objects.\n+         --  transferred to the loop, which now has nontrivial local objects.\n \n          if Nkind (N) = N_Loop_Statement\n            and then Present (Identifier (N))"}, {"sha": "a76486b4432f354731e32878317104c5527e7d5c", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -311,6 +311,31 @@ package body Exp_Intr is\n \n       Remove_Side_Effects (Tag_Arg);\n \n+      --  Check that we have a proper tag\n+\n+      Insert_Action (N,\n+        Make_Implicit_If_Statement (N,\n+          Condition       => Make_Op_Eq (Loc,\n+            Left_Opnd  => New_Copy_Tree (Tag_Arg),\n+            Right_Opnd => New_Occurrence_Of (RTE (RE_No_Tag), Loc)),\n+\n+          Then_Statements => New_List (\n+            Make_Raise_Statement (Loc,\n+              New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+\n+      --  Check that it is not the tag of an abstract type\n+\n+      Insert_Action (N,\n+        Make_Implicit_If_Statement (N,\n+          Condition       => Make_Function_Call (Loc,\n+             Name                   =>\n+               New_Occurrence_Of (RTE (RE_Type_Is_Abstract), Loc),\n+             Parameter_Associations => New_List (New_Copy_Tree (Tag_Arg))),\n+\n+          Then_Statements => New_List (\n+            Make_Raise_Statement (Loc,\n+              New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+\n       --  The subprogram is the third actual in the instantiation, and is\n       --  retrieved from the corresponding renaming declaration. However,\n       --  freeze nodes may appear before, so we retrieve the declaration\n@@ -324,6 +349,22 @@ package body Exp_Intr is\n       Act_Constr := Entity (Name (Act_Rename));\n       Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n \n+      --  Check that the accessibility level of the tag is no deeper than that\n+      --  of the constructor function.\n+\n+      Insert_Action (N,\n+        Make_Implicit_If_Statement (N,\n+          Condition       =>\n+            Make_Op_Gt (Loc,\n+              Left_Opnd  =>\n+                Build_Get_Access_Level (Loc, New_Copy_Tree (Tag_Arg)),\n+              Right_Opnd =>\n+                Make_Integer_Literal (Loc, Scope_Depth (Act_Constr))),\n+\n+          Then_Statements => New_List (\n+            Make_Raise_Statement (Loc,\n+              New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n+\n       if Is_Interface (Etype (Act_Constr)) then\n \n          --  If the result type is not known to be a parent of Tag_Arg then we\n@@ -390,7 +431,6 @@ package body Exp_Intr is\n       --  conversion of the call to the actual constructor.\n \n       Rewrite (N, Convert_To (Result_Typ, Cnstr_Call));\n-      Analyze_And_Resolve (N, Etype (Act_Constr));\n \n       --  Do not generate a run-time check on the built object if tag\n       --  checks are suppressed for the result type or tagged type expansion\n@@ -458,6 +498,8 @@ package body Exp_Intr is\n                  Make_Raise_Statement (Loc,\n                    Name => New_Occurrence_Of (RTE (RE_Tag_Error), Loc)))));\n       end if;\n+\n+      Analyze_And_Resolve (N, Etype (Act_Constr));\n    end Expand_Dispatching_Constructor_Call;\n \n    ---------------------------"}, {"sha": "41503c6c82fdfd1154c5649af74d84504a1f0c0c", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -806,7 +806,7 @@ package Exp_Util is\n      (Decl : Node_Id;\n       Typ  : Entity_Id) return Boolean;\n    --  Check whether the expression in an address clause is restricted to\n-   --  consist of constants, when the object has a non-trivial initialization\n+   --  consist of constants, when the object has a nontrivial initialization\n    --  or is controlled.\n \n    function Needs_Finalization (T : Entity_Id) return Boolean;"}, {"sha": "93fd53cc377349a0bec0eddc9de4435a58c7d234", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -1452,7 +1452,7 @@ package body Freeze is\n          return;\n       end if;\n \n-      --  The situation that is non trivial is something like\n+      --  The situation that is nontrivial is something like:\n \n       --     subtype x1 is integer range -10 .. +10;\n       --     subtype x2 is x1 range 0 .. V1;"}, {"sha": "0ce64235b51b7244957170caa561b37190d25690", "filename": "gcc/ada/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -1919,11 +1919,11 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n {\n   sigset_t mask;\n \n-  /* VxWorks 7 on e500v2 clears the SPE bit of the MSR when entering CPU\n+  /* VxWorks on e500v2 clears the SPE bit of the MSR when entering CPU\n      exception state. To allow the handler and exception to work properly\n      when they contain SPE instructions, we need to set it back before doing\n      anything else. */\n-#if (CPU == PPCE500V2) && (_WRS_VXWORKS_MAJOR == 7)\n+#if (CPU == PPCE500V2) || (CPU == PPC85XX)\n   register unsigned msr;\n   /* Read the MSR value */\n   asm volatile (\"mfmsr %0\" : \"=r\" (msr));"}, {"sha": "bc7bc32416dd7771d42748558ce49ff8956f6636", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -193,7 +193,7 @@ package body Inline is\n \n    function Has_Initialized_Type (E : Entity_Id) return Boolean;\n    --  If a candidate for inlining contains type declarations for types with\n-   --  non-trivial initialization procedures, they are not worth inlining.\n+   --  nontrivial initialization procedures, they are not worth inlining.\n \n    function Has_Single_Return (N : Node_Id) return Boolean;\n    --  In general we cannot inline functions that return unconstrained type."}, {"sha": "73a0066c0a120520c00a7e7be4a0ae88ca60dd7d", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -1878,7 +1878,7 @@ package body Ch6 is\n          Scan; -- past ;\n          Ret_Node := New_Node (N_Simple_Return_Statement, Ret_Sloc);\n \n-      --  Non-trivial case\n+      --  Nontrivial case\n \n       else\n          --  Simple_return_statement with expression"}, {"sha": "1d8cd89cc4ca670bd4da165dc02bef5846ede168", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -640,6 +640,7 @@ package Rtsfind is\n      RE_Max_Predef_Prims,                -- Ada.Tags\n      RE_Needs_Finalization,              -- Ada.Tags\n      RE_No_Dispatch_Table_Wrapper,       -- Ada.Tags\n+     RE_No_Tag,                          -- Ada.Tags\n      RE_NDT_Prims_Ptr,                   -- Ada.Tags\n      RE_NDT_TSD,                         -- Ada.Tags\n      RE_Num_Prims,                       -- Ada.Tags\n@@ -1871,6 +1872,7 @@ package Rtsfind is\n      RE_Max_Predef_Prims                 => Ada_Tags,\n      RE_Needs_Finalization               => Ada_Tags,\n      RE_No_Dispatch_Table_Wrapper        => Ada_Tags,\n+     RE_No_Tag                           => Ada_Tags,\n      RE_NDT_Prims_Ptr                    => Ada_Tags,\n      RE_NDT_TSD                          => Ada_Tags,\n      RE_Num_Prims                        => Ada_Tags,"}, {"sha": "4dfdac958bb85815d23c7caaf01495d6d7599ae9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -13434,9 +13434,14 @@ package body Sem_Ch12 is\n             elsif Nkind (Act) /= N_Operator_Symbol then\n                Analyze (Act);\n \n+               --  Within a package instance, mark actuals that are limited\n+               --  views, so their use can be moved to the body of the\n+               --  enclosing unit.\n+\n                if Is_Entity_Name (Act)\n                  and then Is_Type (Entity (Act))\n                  and then From_Limited_With (Entity (Act))\n+                 and then Present (Inst)\n                then\n                   Append_Elmt (Entity (Act), Incomplete_Actuals (Inst));\n                end if;"}, {"sha": "a82385e45fcf828874c52768f8d1e3d9589b00dc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -3051,9 +3051,9 @@ package body Sem_Ch3 is\n          End_Scope;\n       end if;\n \n-      --  If the type has discriminants, non-trivial subtypes may be\n-      --  declared before the full view of the type. The full views of those\n-      --  subtypes will be built after the full view of the type.\n+      --  If the type has discriminants, nontrivial subtypes may be declared\n+      --  before the full view of the type. The full views of those subtypes\n+      --  will be built after the full view of the type.\n \n       Set_Private_Dependents (T, New_Elmt_List);\n       Set_Is_Pure            (T, F);"}, {"sha": "55a41f1c156d8b806d3e9a5b57455ae2d446d73e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -7190,10 +7190,43 @@ package body Sem_Ch4 is\n                begin\n                   --  We should look for an interpretation with the proper\n                   --  number of formals, and determine whether it is an\n-                  --  In_Parameter, but for now assume that in the overloaded\n-                  --  case constant indexing is legal. To be improved ???\n+                  --  In_Parameter, but for now we examine the formal that\n+                  --  corresponds to the indexing, and assume that variable\n+                  --  indexing is required if some interpretation has an\n+                  --  assignable formal at that position.  Still does not\n+                  --  cover the most complex cases ???\n \n                   if Is_Overloaded (Name (Parent (Par))) then\n+                     declare\n+                        Proc : constant Node_Id := Name (Parent (Par));\n+                        A    : Node_Id;\n+                        F    : Entity_Id;\n+                        I    : Interp_Index;\n+                        It   : Interp;\n+\n+                     begin\n+                        Get_First_Interp (Proc, I, It);\n+                        while Present (It.Nam) loop\n+                           F := First_Formal (It.Nam);\n+                           A := First (Parameter_Associations (Parent (Par)));\n+\n+                           while Present (F) and then Present (A) loop\n+                              if A = Par then\n+                                 if Ekind (F) /= E_In_Parameter then\n+                                    return False;\n+                                 else\n+                                    exit;  --  interpretation is safe\n+                                 end if;\n+                              end if;\n+\n+                              Next_Formal (F);\n+                              Next_Actual (A);\n+                           end loop;\n+\n+                           Get_Next_Interp (I, It);\n+                        end loop;\n+                     end;\n+\n                      return True;\n \n                   else"}, {"sha": "cd9d5b6a2f63c902f1d99d81c6af73e7b8bd402f", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -599,7 +599,7 @@ package body Sem_Elab is\n \n       Is_DIC_Proc : Boolean := False;\n       --  Flag set when the call denotes the Default_Initial_Condition\n-      --  procedure of a private type which wraps a non-trivila assertion\n+      --  procedure of a private type that wraps a nontrivial assertion\n       --  expression.\n \n       Issue_In_SPARK : Boolean;\n@@ -971,13 +971,13 @@ package body Sem_Elab is\n          return;\n       end if;\n \n-      Is_DIC_Proc := Is_Non_Trivial_Default_Init_Cond_Procedure (Ent);\n+      Is_DIC_Proc := Is_Nontrivial_Default_Init_Cond_Procedure (Ent);\n \n       --  Elaboration issues in SPARK are reported only for source constructs\n-      --  and for non-trivial Default_Initial_Condition procedures. The latter\n+      --  and for nontrivial Default_Initial_Condition procedures. The latter\n       --  must be checked because the default initialization of an object of a\n       --  private type triggers the evaluation of the Default_Initial_Condition\n-      --  expression which in turn may have side effects.\n+      --  expression, which in turn may have side effects.\n \n       Issue_In_SPARK :=\n         SPARK_Mode = On and (Comes_From_Source (Ent) or Is_DIC_Proc);"}, {"sha": "a2b4442db8d054ee3d96a0e809120e76eabeeb6d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -25408,6 +25408,14 @@ package body Sem_Prag is\n                         SPARK_Msg_N\n                           (\"\\all constituents must be declared before body #\",\n                            N);\n+\n+                        --  A misplaced constituent is a critical error because\n+                        --  pragma Refined_Depends or Refined_Global depends on\n+                        --  the proper link between a state and a constituent.\n+                        --  Stop the compilation, as this leads to a multitude\n+                        --  of misleading cascaded errors.\n+\n+                        raise Program_Error;\n                      end if;\n \n                   --  The constituent is a valid state or object"}, {"sha": "3512a0a9e3bbab448d99ec419924183575b7a583", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -12362,11 +12362,11 @@ package body Sem_Util is\n       end if;\n    end Is_Local_Variable_Reference;\n \n-   ------------------------------------------------\n-   -- Is_Non_Trivial_Default_Init_Cond_Procedure --\n-   ------------------------------------------------\n+   -----------------------------------------------\n+   -- Is_Nontrivial_Default_Init_Cond_Procedure --\n+   -----------------------------------------------\n \n-   function Is_Non_Trivial_Default_Init_Cond_Procedure\n+   function Is_Nontrivial_Default_Init_Cond_Procedure\n      (Id : Entity_Id) return Boolean\n    is\n       Body_Decl : Node_Id;\n@@ -12386,7 +12386,7 @@ package body Sem_Util is\n \n          pragma Assert (Present (Handled_Statement_Sequence (Body_Decl)));\n \n-         --  To qualify as non-trivial, the first statement of the procedure\n+         --  To qualify as nontrivial, the first statement of the procedure\n          --  must be a check in the form of an if statement. If the original\n          --  Default_Initial_Condition expression was folded, then the first\n          --  statement is not a check.\n@@ -12399,7 +12399,7 @@ package body Sem_Util is\n       end if;\n \n       return False;\n-   end Is_Non_Trivial_Default_Init_Cond_Procedure;\n+   end Is_Nontrivial_Default_Init_Cond_Procedure;\n \n    -------------------------\n    -- Is_Object_Reference --"}, {"sha": "838546b91dcf3793a7c910c5d611e5e3a456eb42", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311014705a3cf42caf7446caa95f4e4a34fce9be/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=311014705a3cf42caf7446caa95f4e4a34fce9be", "patch": "@@ -1433,11 +1433,11 @@ package Sem_Util is\n    --  parameter of the current enclosing subprogram.\n    --  Why are OUT parameters not considered here ???\n \n-   function Is_Non_Trivial_Default_Init_Cond_Procedure\n+   function Is_Nontrivial_Default_Init_Cond_Procedure\n      (Id : Entity_Id) return Boolean;\n-   --  Determine whether entity Id denotes the procedure which verifies the\n+   --  Determine whether entity Id denotes the procedure that verifies the\n    --  assertion expression of pragma Default_Initial_Condition and if it does,\n-   --  the encapsulated expression is non-trivial.\n+   --  the encapsulated expression is nontrivial.\n \n    function Is_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object. Both"}]}