{"sha": "17e1dfa27c9434162c63d83bffbd70b627897282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlMWRmYTI3Yzk0MzQxNjJjNjNkODNiZmZiZDcwYjYyNzg5NzI4Mg==", "commit": {"author": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-08-06T17:09:55Z"}, "committer": {"name": "Timothy Moore", "email": "moore@gnu.org", "date": "1992-08-06T17:09:55Z"}, "message": "(hppa_builtin_saveregs): Rewrite.\n\n        (secondary_reload_class): Bug fix.\n        (arith32_operand): New function.\n\nFrom-SVN: r1774", "tree": {"sha": "db6c869959966feaf8a889c921100418da7a85ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db6c869959966feaf8a889c921100418da7a85ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e1dfa27c9434162c63d83bffbd70b627897282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e1dfa27c9434162c63d83bffbd70b627897282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e1dfa27c9434162c63d83bffbd70b627897282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e1dfa27c9434162c63d83bffbd70b627897282/comments", "author": null, "committer": null, "parents": [{"sha": "70f0c7e91eb014dea536eccb9ac358bf7b756170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f0c7e91eb014dea536eccb9ac358bf7b756170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f0c7e91eb014dea536eccb9ac358bf7b756170"}], "stats": {"total": 109, "additions": 18, "deletions": 91}, "files": [{"sha": "1bb7104eed991fbe288078109f0ce11507a88481", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 18, "deletions": 91, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e1dfa27c9434162c63d83bffbd70b627897282/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e1dfa27c9434162c63d83bffbd70b627897282/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=17e1dfa27c9434162c63d83bffbd70b627897282", "patch": "@@ -334,6 +334,14 @@ zdepi_operand (op, mode)\n   return ((t & (t - 1)) == 0);\n }\n \n+int\n+arith32_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) || GET_CODE (op) == CONST_INT;\n+}\n+\n /* Return truth value of statement that OP is a call-clobbered register.  */\n int\n clobbered_register (op, mode)\n@@ -2281,15 +2289,12 @@ secondary_reload_class (class, mode, in)\n {\n   int regno = true_regnum (in);\n \n-  if (regno >= FIRST_PSEUDO_REGISTER)\n-    regno = -1;\n-\n-  if (class == FP_REGS || class == SNAKE_FP_REGS || class == HI_SNAKE_FP_REGS)\n-    {\n-      if (regno == -1 || !REGNO_OK_FOR_FP_P (regno))\n-\treturn GENERAL_REGS;\n-    }\n-  return NO_REGS;\n+  if ((regno >= FIRST_PSEUDO_REGISTER || regno == -1)\n+      && (class == FP_REGS || class == SNAKE_FP_REGS\n+\t  || class == HI_SNAKE_FP_REGS))\n+    return GENERAL_REGS;\n+  else\n+    return NO_REGS;\n }\n \n enum direction\n@@ -2348,92 +2353,14 @@ hppa_builtin_saveregs (arglist)\n     offset = plus_constant (current_function_arg_offset_rtx, argadj);\n   else\n     offset = current_function_arg_offset_rtx;\n-  /* Allocate the va_list structure. */\n-  block = assign_stack_local (BLKmode, 4 * UNITS_PER_WORD, BITS_PER_UNIT);\n-  RTX_UNCHANGING_P (block) = 1;\n-  RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n-  /* \n-   * Store a pointer to where arguments should begin on the stack in \n-   * __va_stack_start. \n-   */\n-  emit_move_insn (change_address (block, Pmode, XEXP (block, 0)),\n-\t\t  copy_to_reg\n-\t\t  (plus_constant (current_function_internal_arg_pointer,\n-\t\t\t\t  -16)));\n-  /* Store where to start getting args from in the __va_int member. */\n-  emit_move_insn (change_address (block, Pmode,\n-\t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t UNITS_PER_WORD)),\n-\t\t  copy_to_reg (expand_binop (Pmode, add_optab,\n-\t\t\t\t\t     current_function_internal_arg_pointer,\n-\t\t\t\t\t     offset,\n-\t\t\t\t\t     0, 0, OPTAB_LIB_WIDEN)));\n+\n   /* Store general registers on the stack. */\n   move_block_from_reg (23,\n \t\t       gen_rtx (MEM, BLKmode,\n \t\t\t\tplus_constant\n \t\t\t\t(current_function_internal_arg_pointer, -16)),\n \t\t       4); \n-  /* \n-   * Allocate space for the float args, and store it in the \n-   * __va_float member.\n-   */\n-  float_addr = copy_to_reg (XEXP (float_mem =\n-\t\t\t\t  assign_stack_local (BLKmode,\n-\t\t\t\t\t\t      4 * UNITS_PER_WORD, -1),\n-\t\t\t\t  0));\n-  MEM_IN_STRUCT_P (float_mem) = 1;\n-  RTX_UNCHANGING_P (float_mem) = 1;\n-  RTX_UNCHANGING_P (XEXP (float_mem, 0)) = 1;\n-  emit_move_insn (change_address (block, Pmode,\n-\t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t 2 * UNITS_PER_WORD)),\n-\t\t  copy_to_reg (expand_binop (Pmode, add_optab,\n-\t\t\t\t\t     float_addr,\n-\t\t\t\t\t     plus_constant (offset, 4 *\n-\t\t\t\t\t\t\t    UNITS_PER_WORD),\n-\t\t\t\t\t     0, 0, OPTAB_LIB_WIDEN)));\n-  /* Store fp registers. */\n-  emit_move_insn (gen_rtx (MEM, SFmode, float_addr),\n-\t\t  gen_rtx (REG, SFmode, TARGET_SNAKE ? 60 : 39));\n-  emit_move_insn (gen_rtx (MEM, SFmode, gen_rtx (PLUS, Pmode, float_addr,\n-\t\t\t\t\t\t gen_rtx (CONST_INT,\n-\t\t\t\t\t\t\t  Pmode, 4))),\n-\t\t  gen_rtx (REG, SFmode, TARGET_SNAKE ? 58 : 38));\n-  emit_move_insn (gen_rtx (MEM, SFmode, gen_rtx (PLUS, Pmode, float_addr,\n-\t\t\t\t\t\t gen_rtx (CONST_INT,\n-\t\t\t\t\t\t\t  Pmode, 8))),\n-\t\t  gen_rtx (REG, SFmode, TARGET_SNAKE ? 56 : 37));\n-  emit_move_insn (gen_rtx (MEM, SFmode, gen_rtx (PLUS, Pmode, float_addr,\n-\t\t\t\t\t\t gen_rtx (CONST_INT,\n-\t\t\t\t\t\t\t  Pmode, 12))),\n-\t\t  gen_rtx (REG, SFmode, TARGET_SNAKE ? 54 : 36));\n-  /* \n-   * Allocate space for the double args, and store it in the \n-   * __va_double member.\n-   */\n-  float_addr = copy_to_reg (XEXP (float_mem =\n-\t\t\t\t  assign_stack_local (BLKmode,\n-\t\t\t\t\t\t      4 * UNITS_PER_WORD, -1),\n-\t\t\t\t  0));\n-  MEM_IN_STRUCT_P (float_mem) = 1;\n-  RTX_UNCHANGING_P (float_mem) = 1;\n-  RTX_UNCHANGING_P (XEXP (float_mem, 0)) = 1;\n-  emit_move_insn (change_address (block, Pmode,\n-\t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t 3 * UNITS_PER_WORD)),\n-\t\t  copy_to_reg (expand_binop (Pmode, add_optab,\n-\t\t\t\t\t     float_addr,\n-\t\t\t\t\t     plus_constant (offset, 4 *\n-\t\t\t\t\t\t\t    UNITS_PER_WORD),\n-\t\t\t\t\t     0, 0, OPTAB_LIB_WIDEN)));\n-  /* Store fp registers as doubles. */\n-\n-  emit_move_insn (gen_rtx (MEM, DFmode, float_addr),\n-\t\t  (gen_rtx (REG, DFmode, TARGET_SNAKE ? 60 : 39)));\n-  emit_move_insn (gen_rtx (MEM, DFmode, gen_rtx (PLUS, Pmode, float_addr,\n-\t\t\t\t\t\t gen_rtx (CONST_INT,\n-\t\t\t\t\t\t\t  Pmode, 8))),\n-\t\t  gen_rtx (REG, DFmode, TARGET_SNAKE ? 56 : 37));\n-  return copy_to_reg (XEXP (block, 0));\n+  return copy_to_reg (expand_binop (Pmode, add_optab,\n+\t\t\t\t    current_function_internal_arg_pointer,\n+\t\t\t\t    offset, 0, 0, OPTAB_LIB_WIDEN));\n }"}]}