{"sha": "6153cfd7a342f131d347de1aea87f352f3ccd4e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE1M2NmZDdhMzQyZjEzMWQzNDdkZTFhZWE4N2YzNTJmM2NjZDRlNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-07-02T08:26:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-07-02T08:29:34Z"}, "message": "Reject components in extensions overlapping with the parent\n\nSuch problematic components can be specified by means of a component\nclause but they cannot be fully supported by the type system.  They\nhad initially been forbidden, then we decided to accept them by working\naround the type system, but this is very fragile and, for example, any\nstatic aggregate is guaranteed to trigger an ICE with the current\nimplementation.\n\nWe now reject them again, except if the -gnatd.K switch is passed.\n\ngcc/ada/ChangeLog:\n\t* debug.adb (d.K): Document new usage.\n\t* fe.h (Debug_Flag_Dot_KK): Declare.\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Give an error when the\n\tcomponent overlaps with the parent subtype, except with -gnatd.K.", "tree": {"sha": "9c095d99c19e7bf2cd573a9ada4be774d39422c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c095d99c19e7bf2cd573a9ada4be774d39422c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6153cfd7a342f131d347de1aea87f352f3ccd4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6153cfd7a342f131d347de1aea87f352f3ccd4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6153cfd7a342f131d347de1aea87f352f3ccd4e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6153cfd7a342f131d347de1aea87f352f3ccd4e7/comments", "author": null, "committer": null, "parents": [{"sha": "ece21ff6ea9d969d3b6aae82136622a7126eefc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece21ff6ea9d969d3b6aae82136622a7126eefc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece21ff6ea9d969d3b6aae82136622a7126eefc1"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "0f73c2a17ae95e82ab2b96180e89574347fcf148", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=6153cfd7a342f131d347de1aea87f352f3ccd4e7", "patch": "@@ -128,7 +128,7 @@ package body Debug is\n    --  d.H\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Relaxed rules for pragma No_Return\n-   --  d.K\n+   --  d.K  Do not reject components in extensions overlapping with parent\n    --  d.L  Depend on back end for limited types in if and case expressions\n    --  d.M  Relaxed RM semantics\n    --  d.N  Add node to all entities\n@@ -898,6 +898,11 @@ package body Debug is\n    --       for that. If the procedure does in fact return normally, execution\n    --       is erroneous, and therefore unpredictable.\n \n+   --  d.K  Do not reject components in extensions overlapping with the parent\n+   --       component. Such components can be specified by means of a component\n+   --       clause but they cannot be fully supported by the GCC type system.\n+   --       This switch nevertheless allows them for the sake of compatibility.\n+\n    --  d.L  Normally the front end generates special expansion for conditional\n    --       expressions of a limited type. This debug flag removes this special\n    --       case expansion, leaving it up to the back end to handle conditional"}, {"sha": "463a89c5fdb768f69e92eb3280c3331f30214045", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=6153cfd7a342f131d347de1aea87f352f3ccd4e7", "patch": "@@ -59,9 +59,11 @@ extern int Compiler_Abort (String_Pointer, String_Pointer, Boolean) ATTRIBUTE_NO\n \n /* debug: */\n \n+#define Debug_Flag_Dot_KK\tdebug__debug_flag_dot_kk\n #define Debug_Flag_Dot_R\tdebug__debug_flag_dot_r\n #define Debug_Flag_NN\t\tdebug__debug_flag_nn\n \n+extern Boolean Debug_Flag_Dot_KK;\n extern Boolean Debug_Flag_Dot_R;\n extern Boolean Debug_Flag_NN;\n "}, {"sha": "025714bd33946262de44ebefdff3532234f88c79", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6153cfd7a342f131d347de1aea87f352f3ccd4e7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6153cfd7a342f131d347de1aea87f352f3ccd4e7", "patch": "@@ -7234,12 +7234,12 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n     {\n       Entity_Id gnat_parent = Parent_Subtype (gnat_record_type);\n \n-      /* Ensure the position does not overlap with the parent subtype, if there\n-\t is one.  This test is omitted if the parent of the tagged type has a\n-\t full rep clause since, in this case, component clauses are allowed to\n-\t overlay the space allocated for the parent type and the front-end has\n-\t checked that there are no overlapping components.  */\n-      if (Present (gnat_parent) && !Is_Fully_Repped_Tagged_Type (gnat_parent))\n+      /* Ensure the position doesn't overlap with the parent subtype if there\n+\t is one.  It would be impossible to build CONSTRUCTORs and accessing\n+\t the parent could clobber the component in the extension if directly\n+\t done.  We accept it with -gnatd.K for the sake of compatibility.  */\n+      if (Present (gnat_parent)\n+\t  && !(Debug_Flag_Dot_KK && Is_Fully_Repped_Tagged_Type (gnat_parent)))\n \t{\n \t  tree gnu_parent = gnat_to_gnu_type (gnat_parent);\n "}]}