{"sha": "a53e14c093434c3829a60dd450db4741205b10eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzZTE0YzA5MzQzNGMzODI5YTYwZGQ0NTBkYjQ3NDEyMDViMTBlYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T22:18:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-27T22:18:33Z"}, "message": "(assign_parms): If PROMOTE_FUNCTION_ARGS is defined, see if the incoming register should be used in a wider mode.\n\n(assign_parms): If PROMOTE_FUNCTION_ARGS is defined, see if the incoming\nregister should be used in a wider mode.\n(expand_function_start): Likewise for return value if PROMOTE_FUNCTION_RETURN\nis defined.\n\nFrom-SVN: r2263", "tree": {"sha": "7b1f12b7c6f5f67a737f33acfacb34f115eb0543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1f12b7c6f5f67a737f33acfacb34f115eb0543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53e14c093434c3829a60dd450db4741205b10eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53e14c093434c3829a60dd450db4741205b10eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53e14c093434c3829a60dd450db4741205b10eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53e14c093434c3829a60dd450db4741205b10eb/comments", "author": null, "committer": null, "parents": [{"sha": "01def76468d36fe7524eca8b54feef5482eacb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01def76468d36fe7524eca8b54feef5482eacb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01def76468d36fe7524eca8b54feef5482eacb3e"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "6cde316d273931186565620af89cc73f3a98106d", "filename": "gcc/function.c", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53e14c093434c3829a60dd450db4741205b10eb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53e14c093434c3829a60dd450db4741205b10eb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a53e14c093434c3829a60dd450db4741205b10eb", "patch": "@@ -2556,7 +2556,7 @@ assign_parms (fndecl, second_time)\n   register rtx entry_parm = 0;\n   register rtx stack_parm = 0;\n   CUMULATIVE_ARGS args_so_far;\n-  enum machine_mode passed_mode, nominal_mode;\n+  enum machine_mode promoted_mode, passed_mode, nominal_mode;\n   int unsignedp;\n   /* Total space needed so far for args on the stack,\n      given as a constant and a tree-expression.  */\n@@ -2692,16 +2692,36 @@ assign_parms (fndecl, second_time)\n \t}\n #endif\n \n+      promoted_mode = passed_mode;\n+\n+#ifdef PROMOTE_FUNCTION_ARGS\n+      /* Compute the mode in which the arg is actually extended to.  */\n+      if (TREE_CODE (passed_type) == INTEGER_TYPE\n+\t  || TREE_CODE (passed_type) == ENUMERAL_TYPE\n+\t  || TREE_CODE (passed_type) == BOOLEAN_TYPE\n+\t  || TREE_CODE (passed_type) == CHAR_TYPE\n+\t  || TREE_CODE (passed_type) == REAL_TYPE\n+\t  || TREE_CODE (passed_type) == POINTER_TYPE\n+\t  || TREE_CODE (passed_type) == OFFSET_TYPE)\n+\t{\n+\t  unsignedp = TREE_UNSIGNED (passed_type);\n+\t  PROMOTE_MODE (promoted_mode, unsignedp, passed_type);\n+\t}\n+#endif\n+\n       /* Let machine desc say which reg (if any) the parm arrives in.\n \t 0 means it arrives on the stack.  */\n #ifdef FUNCTION_INCOMING_ARG\n-      entry_parm = FUNCTION_INCOMING_ARG (args_so_far, passed_mode,\n+      entry_parm = FUNCTION_INCOMING_ARG (args_so_far, promoted_mode,\n \t\t\t\t\t  passed_type, ! last_named);\n #else\n-      entry_parm = FUNCTION_ARG (args_so_far, passed_mode,\n+      entry_parm = FUNCTION_ARG (args_so_far, promoted_mode,\n \t\t\t\t passed_type, ! last_named);\n #endif\n \n+      if (entry_parm)\n+\tpassed_mode = promoted_mode;\n+\n #ifdef SETUP_INCOMING_VARARGS\n       /* If this is the last named parameter, do any required setup for\n \t varargs or stdargs.  We need to know about the case of this being an\n@@ -3069,7 +3089,8 @@ assign_parms (fndecl, second_time)\n \t\t  && ! HARD_REGNO_MODE_OK (REGNO (entry_parm), passed_mode))\n \t\tentry_parm = copy_to_reg (entry_parm);\n \n-\t      entry_parm = convert_to_mode (nominal_mode, entry_parm, 0);\n+\t      entry_parm = convert_to_mode (nominal_mode, entry_parm,\n+\t\t\t\t\t    TREE_UNSIGNED (TREE_TYPE (parm)));\n \t    }\n \n \t  if (entry_parm != stack_parm)\n@@ -4079,12 +4100,28 @@ expand_function_start (subr, parms_have_cleanups)\n     /* If return mode is void, this decl rtl should not be used.  */\n     DECL_RTL (DECL_RESULT (subr)) = 0;\n   else if (parms_have_cleanups)\n-    /* If function will end with cleanup code for parms,\n-       compute the return values into a pseudo reg,\n-       which we will copy into the true return register\n-       after the cleanups are done.  */\n-    DECL_RTL (DECL_RESULT (subr))\n-      = gen_reg_rtx (DECL_MODE (DECL_RESULT (subr)));\n+    {\n+      /* If function will end with cleanup code for parms,\n+\t compute the return values into a pseudo reg,\n+\t which we will copy into the true return register\n+\t after the cleanups are done.  */\n+\n+      enum machine_mode mode = DECL_MODE (DECL_RESULT (subr));\n+#ifdef PROMOTE_FUNCTION_RETURN\n+      tree type = TREE_TYPE (DECL_RESULT (subr));\n+      int unsignedp = TREE_UNSIGNED (type);\n+\n+      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n+\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n+\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n+\t  || TREE_CODE (type) == OFFSET_TYPE)\n+\t{\n+\t  PROMOTE_MODE (mode, unsignedp, type);\n+\t}\n+#endif\n+\n+      DECL_RTL (DECL_RESULT (subr)) = gen_reg_rtx (mode);\n+    }\n   else\n     /* Scalar, returned in a register.  */\n     {"}]}