{"sha": "9ece379a8a290603ecbafcd30dac259fc7c880a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjZTM3OWE4YTI5MDYwM2VjYmFmY2QzMGRhYzI1OWZjN2M4ODBhNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-17T08:25:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-17T08:25:08Z"}, "message": "Shadow headers would work if libsupc++ was strict about namespaces.\n\n\n2000-10-16  Benjamin Kosnik  <bkoz@gnu.org>\n\n\tShadow headers would work if libsupc++ was strict about namespaces.\n\tThis only possible if g++ maps std::size_t -> size_t. (Hint hint.)\n\t* include/c_std/assert.h: Add guards.\n\t* include/c_std/bits/std_climits.h: Correct typo.\n\t* include/c_std/ctype.h: Remove #error.\n\n\t* libio/libioP.h: Break up extern \"C\" bits around includes.\n\t* libio/libio.h: Only include C headers, or else _C_legacy namespaces\n\twill be nested.\n\t* libio/libioP.h: Same here.\n\nFrom-SVN: r36900", "tree": {"sha": "ca758d85d8aa5ae51afe442a86f12910b08488c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca758d85d8aa5ae51afe442a86f12910b08488c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ece379a8a290603ecbafcd30dac259fc7c880a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ece379a8a290603ecbafcd30dac259fc7c880a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ece379a8a290603ecbafcd30dac259fc7c880a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ece379a8a290603ecbafcd30dac259fc7c880a4/comments", "author": null, "committer": null, "parents": [{"sha": "030d2f3414de32f736a23b39fa182548441a862f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030d2f3414de32f736a23b39fa182548441a862f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/030d2f3414de32f736a23b39fa182548441a862f"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "95320e43efa2b67a52ed8bd2f2170f215976bb99", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -1,3 +1,24 @@\n+2000-10-16  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\tShadow headers would work if libsupc++ was strict about namespaces.\n+\tThis only possible if g++ maps std::size_t -> size_t. (Hint hint.)\n+\t* include/c_std/assert.h: Add guards.\n+\t* include/c_std/bits/std_climits.h: Correct typo.\n+\t* include/c_std/ctype.h: Remove #error.\n+\n+\t* libio/libioP.h: Break up extern \"C\" bits around includes.\n+\t* libio/libio.h: Only include C headers, or else _C_legacy namespaces\n+\twill be nested.\n+\t* libio/libioP.h: Same here.\n+\n+2000-10-15 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+\t* include/c_std/unistd.h: Define some types only when defined in\n+\tthe original unistd.h.\n+    \t* include/c_std/bits/std_cstddef.h: Explicitly ask for the\n+\tdefinition of size_t, ptrdiff_t and NULL.\n+    \t* include/c_std/bits/wrap_unistd.h: Blank lines removal.\n+\n 2000-10-15  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/configopts.html:  Remove libgcc-rebuild; HTML formatting."}, {"sha": "0c5c09f2b549a51af3a58962895f9ee2a79e8d2c", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -121,4 +121,4 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n\\ No newline at end of file\n+\t\"WERROR=$(WERROR)\" "}, {"sha": "f4f8d6ebdca1407b4dc4ff5ad3a236760c792094", "filename": "libstdc++-v3/include/c_std/assert.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fassert.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -28,7 +28,9 @@\n // the GNU General Public License.\n \n \n-// no include guard here.\n+#ifndef  _INCLUDED_CPP_ASSERT_H_\n+# define _INCLUDED_CPP_ASSERT_H_ 1\n+\n #ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n       // get out of the \"legacy\"\n     } // close extern \"C\"\n@@ -49,3 +51,5 @@\n # define _IN_C_LEGACY_\n # undef _ASSERT_NEED_C_LEGACY_\n #endif /* _ASSERT_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_ASSERT_H_ */\n+"}, {"sha": "13d30065ab5860bfc470bcb82150c8cc85701f67", "filename": "libstdc++-v3/include/c_std/bits/std_climits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -32,7 +32,7 @@\n //\n \n #ifndef _CPP_CLIMITS\n-#define _CPP_CLIMTIS 1\n+#define _CPP_CLIMITS 1\n \n namespace _C_legacy {\n   extern \"C\" {"}, {"sha": "588566499b38dd338396d6f7b82429b2a766ad8e", "filename": "libstdc++-v3/include/c_std/bits/std_cstddef.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -38,7 +38,11 @@ namespace _C_legacy {\n   extern \"C\" {\n #     define _IN_C_LEGACY_\n #     pragma GCC system_header\n-#     include_next <stddef.h>\n+// XXX\n+#   define __need_size_t\n+#   define __need_ptrdiff_t\n+#   define __need_NULL\n+#   include_next <stddef.h>\n   }\n } // namespace _C_legacy\n \n@@ -53,8 +57,3 @@ namespace std {\n # undef _IN_C_LEGACY_\n \n #endif\n-\n-\n-\n-\n-"}, {"sha": "8e28b698c7218f6fed57ab5d20745c2a769be150", "filename": "libstdc++-v3/include/c_std/bits/wrap_unistd.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_unistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_unistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_unistd.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -45,35 +45,3 @@ namespace _C_legacy {\n # undef _IN_C_LEGACY_\n \n #endif\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "199089c594cc7b5160cc7de2b12774eeb28b6df3", "filename": "libstdc++-v3/include/c_std/ctype.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctype.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -33,7 +33,6 @@\n \n # ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n       // get out of the \"legacy\"\n-#error ctype.h\n     } // close extern \"C\"\n   }   // close namespace _C_legacy::\n #  undef _IN_C_LEGACY_"}, {"sha": "e05efe72f57dfd69097c6dc5af5211a1c0430539", "filename": "libstdc++-v3/include/c_std/unistd.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Funistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Funistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Funistd.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -43,14 +43,28 @@\n  \n   // Expose global C names, including non-standard ones, but shadow\n   // some names and types with the std:: C++ version.\n+#ifdef __gid_t_defined\n   using _C_legacy::gid_t;\n+#endif\n+#ifdef __uid_t_defined\n   using _C_legacy::uid_t;\n+#endif\n+#ifdef __off_t_defined\n   using _C_legacy::off_t;\n+#endif\n+#ifdef __off64_t_defined\n   using _C_legacy::off64_t;\n+#endif\n+#ifdef __useconds_t_defined\n   using _C_legacy::useconds_t;\n+#endif\n+#ifdef __pid_t_defined\n   using _C_legacy::pid_t;\n+#endif\n   using _C_legacy::intptr_t;\n+#ifdef __socklen_t_defined\n   using _C_legacy::socklen_t;\n+#endif\n \n   using _C_legacy::access;\n   using _C_legacy::euidaccess;"}, {"sha": "9736beb09d5b2a9eb4efb08b314e199a6ca098f8", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -1,3 +1,10 @@\n+2000-10-17  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* libioP.h: Break up extern \"C\" bits around includes.\n+\t* libio.h: Only include C headers, or else _C_legacy namespaces\n+\twill be nested.\n+\t* libioP.h: Same here.\n+\t\n 2000-10-11  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am: Add includes from GLIBCPP_EXPORT_INCLUDES."}, {"sha": "598949d8988297a5d6205605679b87b9c0559a1c", "filename": "libstdc++-v3/libio/libioP.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Flibio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ece379a8a290603ecbafcd30dac259fc7c880a4/libstdc%2B%2B-v3%2Flibio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FlibioP.h?ref=9ece379a8a290603ecbafcd30dac259fc7c880a4", "patch": "@@ -23,11 +23,7 @@\n    other reasons why the executable file might be covered by the GNU\n    General Public License.  */\n \n-#ifdef __cplusplus\n-# include <cerrno>\n-#else \n # include <errno.h>\n-#endif\n \n #ifndef __set_errno\n # define __set_errno(Val) errno = (Val)\n@@ -620,11 +616,19 @@ extern void (*_IO_cleanup_registration_needed) __PMT ((void));\n \n #if _G_HAVE_MMAP\n \n+#ifdef __cplusplus\n+} \n+#endif\n+\n # include <unistd.h>\n # include <fcntl.h>\n # include <sys/mman.h>\n # include <sys/param.h>\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n # if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)\n #  define MAP_ANONYMOUS MAP_ANON\n # endif"}]}