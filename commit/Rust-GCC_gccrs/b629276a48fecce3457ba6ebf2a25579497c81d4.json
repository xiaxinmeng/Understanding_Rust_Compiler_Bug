{"sha": "b629276a48fecce3457ba6ebf2a25579497c81d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyOTI3NmE0OGZlY2NlMzQ1N2JhNmViZjJhMjU1Nzk0OTdjODFkNA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-01-04T02:03:19Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-01-04T02:03:19Z"}, "message": "dominance.c: Add comment about why we use DFS numbering of dominance tree.\n\n2006-01-03  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* dominance.c: Add comment about why we use DFS numbering\n\tof dominance tree.\n\nFrom-SVN: r109308", "tree": {"sha": "42fb071fbd9913c7dfae0cf9c28f77202b084cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42fb071fbd9913c7dfae0cf9c28f77202b084cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b629276a48fecce3457ba6ebf2a25579497c81d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b629276a48fecce3457ba6ebf2a25579497c81d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b629276a48fecce3457ba6ebf2a25579497c81d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b629276a48fecce3457ba6ebf2a25579497c81d4/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862e1e62fcf86a05434abd3b83a7ad89c39c6f44"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "eb0cd80f422b3c75ce1c7c2096e642ec5d83970c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b629276a48fecce3457ba6ebf2a25579497c81d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b629276a48fecce3457ba6ebf2a25579497c81d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b629276a48fecce3457ba6ebf2a25579497c81d4", "patch": "@@ -1,3 +1,8 @@\n+2006-01-03  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* dominance.c: Add comment about why we use DFS numbering\n+\tof dominance tree.\n+\n 2006-01-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "c7e39b50ca5b4fb808966a1c298bf932671e86f0", "filename": "gcc/dominance.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b629276a48fecce3457ba6ebf2a25579497c81d4/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b629276a48fecce3457ba6ebf2a25579497c81d4/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=b629276a48fecce3457ba6ebf2a25579497c81d4", "patch": "@@ -814,6 +814,80 @@ nearest_common_dominator_for_set (enum cdi_direction dir, bitmap blocks)\n   return dom;\n }\n \n+/*  Given a dominator tree, we can determine whether one thing\n+    dominates another in constant time by using two DFS numbers:\n+\n+    1. The number for when we visit a node on the way down the tree\n+    2. The number for when we visit a node on the way back up the tree\n+\n+    You can view these as bounds for the range of dfs numbers the\n+    nodes in the subtree of the dominator tree rooted at that node\n+    will contain.\n+    \n+    The dominator tree is always a simple acyclic tree, so there are\n+    only three possible relations two nodes in the dominator tree have\n+    to each other:\n+    \n+    1. Node A is above Node B (and thus, Node A dominates node B)\n+\n+     A\n+     |\n+     C\n+    / \\\n+   B   D\n+\n+\n+   In the above case, DFS_Number_In of A will be <= DFS_Number_In of\n+   B, and DFS_Number_Out of A will be >= DFS_Number_Out of B.  This is\n+   because we must hit A in the dominator tree *before* B on the walk\n+   down, and we will hit A *after* B on the walk back up\n+   \n+   2. Node A is below node B (and thus, node B dominates node B)\n+   \n+   \n+     B\n+     |\n+     A\n+    / \\\n+   C   D\n+\n+   In the above case, DFS_Number_In of A will be >= DFS_Number_In of\n+   B, and DFS_Number_Out of A will be <= DFS_Number_Out of B.\n+   \n+   This is because we must hit A in the dominator tree *after* B on\n+   the walk down, and we will hit A *before* B on the walk back up\n+   \n+   3. Node A and B are siblings (and thus, neither dominates the other)\n+\n+     C\n+     |\n+     D\n+    / \\\n+   A   B\n+\n+   In the above case, DFS_Number_In of A will *always* be <=\n+   DFS_Number_In of B, and DFS_Number_Out of A will *always* be <=\n+   DFS_Number_Out of B.  This is because we will always finish the dfs\n+   walk of one of the subtrees before the other, and thus, the dfs\n+   numbers for one subtree can't intersect with the range of dfs\n+   numbers for the other subtree.  If you swap A and B's position in\n+   the dominator tree, the comparison changes direction, but the point\n+   is that both comparisons will always go the same way if there is no\n+   dominance relationship.\n+\n+   Thus, it is sufficient to write\n+\n+   A_Dominates_B (node A, node B)\n+   {\n+     return DFS_Number_In(A) <= DFS_Number_In(B) \n+            && DFS_Number_Out (A) >= DFS_Number_Out(B);\n+   }\n+\n+   A_Dominated_by_B (node A, node B)\n+   {\n+     return DFS_Number_In(A) >= DFS_Number_In(A)\n+            && DFS_Number_Out (A) <= DFS_Number_Out(B);\n+   }  */\n \n /* Return TRUE in case BB1 is dominated by BB2.  */\n bool"}]}