{"sha": "45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "node_id": "C_kwDOANBUbNoAKDQ1ZjgwYTJkODZjM2NiNjIxMGYwMDU0N2VlZTNlOWFmNTlhNjJmZGY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-31T09:15:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T09:15:27Z"}, "message": "Merge #1514\n\n1514: Fix SEGV in transcribe_type when compiling libcore 1.29 r=CohenArthur a=CohenArthur\n\nNeeds #1513, Skip reviewing the first commit\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "1d032370d7b397f787fc001b239550a5d7ac98d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d032370d7b397f787fc001b239550a5d7ac98d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDyavCRBK7hj4Ov3rIwAAkRsIAFmZ/qOY4+vASfDnO0PasMtx\nYhwbyxYwyiloAEZ7cP5o3JrY1iDwqq3MstRjRDPUQlCX8ez2hE7BS6tGRF+Hq/WP\nAwYVycvwKSl/mEtX6LBhLNbPR5wXY8vSCUP5LroM1ndCeKMSWsVxkulEA5e0WexB\nDpqzh4wwkSUpViFUFeWYlffBimOSSNob80MFFyzIc3QrtB0uttCcRdtT9sD9RVHm\ntzh9x5WQP6A7+kHt2G4UvTTMyTRiAWdNeoaadWSn8L2YAOvxf9L9hXYIbZqZP/HZ\nxNky4FKRrrECLryp/4nGfQk3EWD4Gztwnfs60emViuRdMkY+CvqM7xYQaLE1AQA=\n=7LqO\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d032370d7b397f787fc001b239550a5d7ac98d2\nparent 017be6aeb8f3803a26cf11ef633ce24fca7749b8\nparent fcf6fea382f65930cd4f32f7661bc5d64d1559b4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1661937327 +0000\ncommitter GitHub <noreply@github.com> 1661937327 +0000\n\nMerge #1514\n\n1514: Fix SEGV in transcribe_type when compiling libcore 1.29 r=CohenArthur a=CohenArthur\n\nNeeds #1513, Skip reviewing the first commit\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017be6aeb8f3803a26cf11ef633ce24fca7749b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017be6aeb8f3803a26cf11ef633ce24fca7749b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017be6aeb8f3803a26cf11ef633ce24fca7749b8"}, {"sha": "fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf6fea382f65930cd4f32f7661bc5d64d1559b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf6fea382f65930cd4f32f7661bc5d64d1559b4"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "a72bd4d1ff585d5fc59102fa984e7ab573e23586", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "patch": "@@ -52,6 +52,22 @@ class Dump : public ASTVisitor\n   void go (AST::Crate &crate);\n   void go (AST::Item &item);\n \n+  /**\n+   * Use the AST Dump as a debugging tool\n+   */\n+  template <typename T> static void debug (T &instance)\n+  {\n+    auto dump = Dump (std::cerr);\n+\n+    std::cerr << '\\n';\n+    instance.accept_vis (dump);\n+    std::cerr << '\\n';\n+  }\n+  template <typename T> static void debug (std::unique_ptr<T> &instance)\n+  {\n+    debug (*instance);\n+  }\n+\n private:\n   std::ostream &stream;\n   Indent indentation;"}, {"sha": "e9e16e77f65d8175c5e05d38f6c3a342d20672cf", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-map.h\"\n #include \"rust-token.h\"\n #include \"rust-location.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n // TODO: remove typedefs and make actual types for these\n@@ -1818,7 +1819,7 @@ class SingleASTNode\n     return true;\n   }\n \n-  std::string as_string ()\n+  std::string as_string () const\n   {\n     switch (kind)\n       {\n@@ -1869,9 +1870,44 @@ class ASTFragment\n \n   bool is_single_fragment () const { return nodes.size () == 1; }\n \n-  bool is_single_fragment_kind (SingleASTNode::NodeType kind) const\n+  bool is_single_fragment_of_kind (SingleASTNode::NodeType expected) const\n   {\n-    return is_single_fragment () && nodes[0].get_kind () == kind;\n+    return is_single_fragment () && nodes[0].get_kind () == expected;\n+  }\n+\n+  void assert_single_fragment (SingleASTNode::NodeType expected) const\n+  {\n+    static const std::map<SingleASTNode::NodeType, const char *> str_map = {\n+      {SingleASTNode::NodeType::IMPL, \"impl\"},\n+      {SingleASTNode::NodeType::ITEM, \"item\"},\n+      {SingleASTNode::NodeType::TYPE, \"type\"},\n+      {SingleASTNode::NodeType::EXPRESSION, \"expr\"},\n+      {SingleASTNode::NodeType::STMT, \"stmt\"},\n+      {SingleASTNode::NodeType::EXTERN, \"extern\"},\n+      {SingleASTNode::NodeType::TRAIT, \"trait\"},\n+      {SingleASTNode::NodeType::TRAIT_IMPL, \"trait impl\"},\n+    };\n+\n+    auto actual = nodes[0].get_kind ();\n+    auto fail = false;\n+\n+    if (!is_single_fragment ())\n+      {\n+\trust_error_at (Location (), \"fragment is not single\");\n+\tfail = true;\n+      }\n+\n+    if (actual != expected)\n+      {\n+\trust_error_at (\n+\t  Location (),\n+\t  \"invalid fragment operation: expected %qs node, got %qs node\",\n+\t  str_map.find (expected)->second,\n+\t  str_map.find (nodes[0].get_kind ())->second);\n+\tfail = true;\n+      }\n+\n+    rust_assert (!fail);\n   }\n \n public:\n@@ -1913,15 +1949,25 @@ class ASTFragment\n \n   bool should_expand () const { return !is_error (); }\n \n+  bool is_expression_fragment () const\n+  {\n+    return is_single_fragment_of_kind (SingleASTNode::NodeType::EXPRESSION);\n+  }\n+\n+  bool is_type_fragment () const\n+  {\n+    return is_single_fragment_of_kind (SingleASTNode::NodeType::TYPE);\n+  }\n+\n   std::unique_ptr<Expr> take_expression_fragment ()\n   {\n-    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::EXPRESSION));\n+    assert_single_fragment (SingleASTNode::NodeType::EXPRESSION);\n     return nodes[0].take_expr ();\n   }\n \n   std::unique_ptr<Type> take_type_fragment ()\n   {\n-    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::TYPE));\n+    assert_single_fragment (SingleASTNode::NodeType::TYPE);\n     return nodes[0].take_type ();\n   }\n "}, {"sha": "12b8cec5d09dbe985dfd5dc3bd0dc6c5fa806bad", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "patch": "@@ -2662,7 +2662,7 @@ AttrVisitor::visit (AST::InherentImpl &impl)\n   for (auto &param : impl.get_generic_params ())\n     param->accept_vis (*this);\n \n-  expander.push_context (MacroExpander::ContextType::TYPE);\n+  expander.push_context (MacroExpander::ContextType::ITEM);\n \n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n@@ -2706,7 +2706,7 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n   for (auto &param : impl.get_generic_params ())\n     param->accept_vis (*this);\n \n-  expander.push_context (MacroExpander::ContextType::TYPE);\n+  expander.push_context (MacroExpander::ContextType::ITEM);\n \n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n@@ -3427,19 +3427,22 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n \n   // no where clause, apparently\n }\n+\n void\n AttrVisitor::maybe_expand_expr (std::unique_ptr<AST::Expr> &expr)\n {\n   auto final_fragment = expand_macro_fragment_recursive ();\n-  if (final_fragment.should_expand ())\n+  if (final_fragment.should_expand ()\n+      && final_fragment.is_expression_fragment ())\n     expr = final_fragment.take_expression_fragment ();\n }\n \n void\n AttrVisitor::maybe_expand_type (std::unique_ptr<AST::Type> &type)\n {\n   auto final_fragment = expand_macro_fragment_recursive ();\n-  if (final_fragment.should_expand ())\n+  if (final_fragment.should_expand () && final_fragment.is_type_fragment ())\n     type = final_fragment.take_type_fragment ();\n }\n+\n } // namespace Rust"}, {"sha": "dd8d468aad1d3dc589e8bf9c4ea66c3c2e2bb98c", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f80a2d86c3cb6210f00547eee3e9af59a62fdf/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=45f80a2d86c3cb6210f00547eee3e9af59a62fdf", "patch": "@@ -864,7 +864,9 @@ transcribe_expression (Parser<MacroInvocLexer> &parser)\n static AST::ASTFragment\n transcribe_type (Parser<MacroInvocLexer> &parser)\n {\n-  auto type = parser.parse_type ();\n+  auto type = parser.parse_type (true);\n+  for (auto err : parser.get_errors ())\n+    err.emit_error ();\n \n   return AST::ASTFragment ({std::move (type)});\n }"}]}