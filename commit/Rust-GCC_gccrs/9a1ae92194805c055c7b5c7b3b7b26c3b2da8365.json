{"sha": "9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "node_id": "C_kwDOANBUbNoAKDlhMWFlOTIxOTQ4MDVjMDU1YzdiNWM3YjNiN2IyNmMzYjJkYTgzNjU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-30T09:05:14Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-30T09:05:14Z"}, "message": "ast: Dump: Add pretty printing of functions", "tree": {"sha": "b034c14ab3141ec63c71697e938c2b04641568e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b034c14ab3141ec63c71697e938c2b04641568e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c26f0499b5faece247c21e3bad7d5d5f5cb31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c26f0499b5faece247c21e3bad7d5d5f5cb31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c26f0499b5faece247c21e3bad7d5d5f5cb31a"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "1afb988b6749c314665618d6343cd873637a0a9f", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "patch": "@@ -23,10 +23,10 @@ namespace AST {\n \n Indent::Indent () : tabs (0) {}\n \n-std::ofstream &\n-Indent::operator<< (std::ofstream &stream)\n+std::ostream &\n+operator<< (std::ostream &stream, const Indent &indent)\n {\n-  for (size_t i = 0; i < tabs; i++)\n+  for (size_t i = 0; i < indent.tabs; i++)\n     stream << '\\t';\n \n   return stream;\n@@ -45,7 +45,7 @@ Indent::decrement ()\n   tabs--;\n }\n \n-Dump::Dump (std::ofstream &stream) : stream (stream), indentation (Indent ()) {}\n+Dump::Dump (std::ostream &stream) : stream (stream), indentation (Indent ()) {}\n \n void\n Dump::go (AST::Crate &crate)\n@@ -54,6 +54,14 @@ Dump::go (AST::Crate &crate)\n     item->accept_vis (*this);\n }\n \n+void\n+Dump::format_function_param (FunctionParam &param)\n+{\n+  param.get_pattern ()->accept_vis (*this);\n+  stream << \": \";\n+  param.get_type ()->accept_vis (*this);\n+}\n+\n void\n Dump::visit (Token &tok)\n {}\n@@ -234,7 +242,23 @@ Dump::visit (ClosureExprInner &expr)\n \n void\n Dump::visit (BlockExpr &expr)\n-{}\n+{\n+  stream << \"{\\n\";\n+  indentation.increment ();\n+\n+  for (auto &stmt : expr.get_statements ())\n+    {\n+      stream << indentation;\n+      stmt->accept_vis (*this);\n+      stream << \";\\n\";\n+    }\n+\n+  if (expr.has_tail_expr ())\n+    expr.get_tail_expr ()->accept_vis (*this);\n+\n+  stream << \"\\n}\\n\";\n+  indentation.increment ();\n+}\n \n void\n Dump::visit (ClosureExprInnerTyped &expr)\n@@ -383,7 +407,36 @@ Dump::visit (UseDeclaration &use_decl)\n \n void\n Dump::visit (Function &function)\n-{}\n+{\n+  stream << \"fn \" << function.get_function_name () << '(';\n+\n+  auto &params = function.get_function_params ();\n+  if (params.size () >= 1)\n+    {\n+      format_function_param (params[0]);\n+      for (size_t i = 1; i < params.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_function_param (params[i]);\n+\t}\n+    }\n+\n+  stream << \") \";\n+\n+  if (function.has_return_type ())\n+    {\n+      stream << \"-> \";\n+      function.get_return_type ()->accept_vis (*this);\n+    }\n+\n+  auto &block = function.get_definition ();\n+  if (!block)\n+    stream << ';';\n+  else\n+    block->accept_vis (*this);\n+\n+  stream << '\\n';\n+}\n \n void\n Dump::visit (TypeAlias &type_alias)\n@@ -521,7 +574,9 @@ Dump::visit (LiteralPattern &pattern)\n \n void\n Dump::visit (IdentifierPattern &pattern)\n-{}\n+{\n+  stream << pattern.get_ident ();\n+}\n \n void\n Dump::visit (WildcardPattern &pattern)\n@@ -610,7 +665,24 @@ Dump::visit (EmptyStmt &stmt)\n \n void\n Dump::visit (LetStmt &stmt)\n-{}\n+{\n+  stream << \"let \";\n+  auto &pattern = stmt.get_pattern ();\n+  if (pattern)\n+    pattern->accept_vis (*this);\n+\n+  if (stmt.has_type ())\n+    {\n+      stream << \": \";\n+      stmt.get_type ()->accept_vis (*this);\n+    }\n+\n+  if (stmt.has_init_expr ())\n+    {\n+      stream << \" = \";\n+      stmt.get_init_expr ()->accept_vis (*this);\n+    }\n+}\n \n void\n Dump::visit (ExprStmtWithoutBlock &stmt)"}, {"sha": "436c2b523dda4f3c63e930277b357572a33b7d11", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1ae92194805c055c7b5c7b3b7b26c3b2da8365/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=9a1ae92194805c055c7b5c7b3b7b26c3b2da8365", "patch": "@@ -18,6 +18,7 @@\n \n #include \"rust-ast-visitor.h\"\n #include \"rust-ast.h\"\n+#include \"rust-ast-full.h\"\n \n #ifndef RUST_AST_DUMP_H\n #define RUST_AST_DUMP_H\n@@ -31,7 +32,7 @@ class Indent\n public:\n   Indent ();\n \n-  std::ofstream &operator<< (std::ofstream &stream);\n+  friend std::ostream &operator<< (std::ostream &stream, const Indent &indent);\n \n   void increment ();\n   void decrement ();\n@@ -43,17 +44,22 @@ class Indent\n class Dump : public ASTVisitor\n {\n public:\n-  Dump (std::ofstream &stream);\n+  Dump (std::ostream &stream);\n \n   /**\n    * Run the visitor on an entire crate and its items\n    */\n   void go (AST::Crate &crate);\n \n private:\n-  std::ofstream &stream;\n+  std::ostream &stream;\n   Indent indentation;\n \n+  /**\n+   * Format a function's definition parameter\n+   */\n+  void format_function_param (FunctionParam &param);\n+\n   // rust-ast.h\n   void visit (Token &tok);\n   void visit (DelimTokenTree &delim_tok_tree);"}]}