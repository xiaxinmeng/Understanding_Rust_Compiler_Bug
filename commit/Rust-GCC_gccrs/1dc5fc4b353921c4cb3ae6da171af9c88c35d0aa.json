{"sha": "1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjNWZjNGIzNTM5MjFjNGNiM2FlNmRhMTcxYWY5Yzg4YzM1ZDBhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-13T00:12:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-13T00:12:17Z"}, "message": "update\n\nFrom-SVN: r22398", "tree": {"sha": "ea2e14fdadbb36f2f74c4485195c4bfb6d246c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea2e14fdadbb36f2f74c4485195c4bfb6d246c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa/comments", "author": null, "committer": null, "parents": [{"sha": "b91d2c10412615798729eac7c9cba5912c093544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91d2c10412615798729eac7c9cba5912c093544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91d2c10412615798729eac7c9cba5912c093544"}], "stats": {"total": 207, "additions": 64, "deletions": 143}, "files": [{"sha": "7b2bd1fe7ae508a23a353b25e6777cb0851f2117", "filename": "gcc/invoke.texi", "status": "modified", "additions": 64, "deletions": 143, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=1dc5fc4b353921c4cb3ae6da171af9c88c35d0aa", "patch": "@@ -102,13 +102,14 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @smallexample\n--fall-virtual  -fdollars-in-identifiers  -felide-constructors\n--fenum-int-equiv  -fexternal-templates  -ffor-scope  \n--fno-for-scope  -fhandle-signatures -fhonor-std -fmemoize-lookups  \n--fname-mangling-version-@var{n}  -fno-default-inline  \n--fno-gnu-keywords -fnonnull-objects -fguiding-decls\n--foperator-names  -fno-optional-diags -fstrict-prototype  -fthis-is-variable\n--ftemplate-depth-@var{n}  -nostdinc++  -traditional  +e@var{n}\n+-fno-access-control  -fcheck-new  -fconserve-space  -fdollars-in-identifiers\n+-fno-elide-constructors  -fexternal-templates  -ffor-scope  \n+-fno-for-scope  -fno-gnu-keywords  -fguiding-decls  -fhandle-signatures\n+-fhonor-std -fhuge-objects  -fno-implicit-templates  -finit-priority\n+-fno-implement-inlines -fname-mangling-version-@var{n}  -fno-default-inline  \n+-foperator-names  -fno-optional-diags  -frepo  -fstrict-prototype\n+-fsquangle  -ftemplate-depth-@var{n}  -fthis-is-variable  -fvtable-thunks\n+-nostdinc++\n @end smallexample\n \n @item Warning Options\n@@ -127,7 +128,7 @@ in the following sections.\n -Wno-non-template-friend -Wold-style-cast  -Woverloaded-virtual  \n -Wparentheses -Wpointer-arith  -Wredundant-decls  -Wreorder  \n -Wreturn-type -Wshadow  -Wsign-compare  -Wstrict-prototypes  \n--Wswitch -Wsynth  -Wtemplate-debugging  -Wtraditional  \n+-Wswitch -Wsynth  -Wtraditional  \n -Wtrigraphs -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n -Wunknown-pragmas\n @end smallexample\n@@ -404,7 +405,7 @@ in the following sections.\n -fpcc-struct-return  -fpic  -fPIC\n -freg-struct-return  -fshared-data  -fshort-enums\n -fshort-double  -fvolatile  -fvolatile-global\n--fverbose-asm -fpack-struct  -fstack-check  +e0  +e1\n+-fverbose-asm -fpack-struct  -fstack-check\n -fargument-alias  -fargument-noalias\n -fargument-noalias-global\n @end smallexample\n@@ -764,12 +765,6 @@ literal characters @samp{x} and @samp{a} respectively.  Without\n @w{@samp{-traditional}}, @samp{\\x} is a prefix for the hexadecimal\n representation of a character, and @samp{\\a} produces a bell.\n \n-@item\n-In C++ programs, assignment to @code{this} is permitted with\n-@samp{-traditional}.  (The option @samp{-fthis-is-variable} also has\n-this effect.)\n-@end itemize\n-\n You may wish to use @samp{-fno-builtin} as well as @samp{-traditional}\n if your program uses names that are normally GNU C builtin functions for\n other purposes of its own.\n@@ -908,11 +903,11 @@ regardless of what language your program is in.  For example, you\n might compile a file @code{firstClass.C} like this:\n \n @example\n-g++ -g -felide-constructors -O -c firstClass.C\n+g++ -g -frepo -O -c firstClass.C\n @end example\n \n @noindent\n-In this example, only @samp{-felide-constructors} is an option meant\n+In this example, only @samp{-frepo} is an option meant\n only for C++ programs; you can use the other options with any\n language supported by GNU CC.\n \n@@ -923,24 +918,17 @@ Here is a list of options that are @emph{only} for compiling C++ programs:\n Turn off all access checking.  This switch is mainly useful for working\n around bugs in the access control code.\n \n-@item -fall-virtual\n-Treat all possible member functions as virtual, implicitly.\n-All member functions (except for constructor functions and @code{new} or\n-@code{delete} member operators) are treated as virtual functions of the\n-class where they appear.\n-\n-This does not mean that all calls to these member functions will be made\n-through the internal table of virtual functions.  Under some\n-circumstances, the compiler can determine that a call to a given virtual\n-function can be made directly; in these cases the calls are direct in\n-any case.\n-\n @item -fcheck-new\n Check that the pointer returned by @code{operator new} is non-null\n before attempting to modify the storage allocated.  The current Working\n Paper requires that @code{operator new} never return a null pointer, so\n this check is normally unnecessary.\n \n+An alternative to using this option is to specify that your\n+@code{operator new} does not throw any exceptions; if you declare it\n+@samp{throw()}, g++ will check the return value.  See also @samp{new\n+(nothrow)}.\n+\n @item -fconserve-space\n Put uninitialized or runtime-initialized global variables into the\n common segment, as C does.  This saves space in the executable at the\n@@ -949,17 +937,21 @@ flag and your program mysteriously crashes after @code{main()} has\n completed, you may have an object that is being destroyed twice because\n two definitions were merged.\n \n+This option is no longer useful on most targets, now that support has\n+been added for putting variables into BSS without making them common.\n+\n @item -fdollars-in-identifiers\n Accept @samp{$} in identifiers.  You can also explicitly prohibit use of\n @samp{$} with the option @samp{-fno-dollars-in-identifiers}.  (GNU C allows\n @samp{$} by default on most target systems, but there are a few exceptions.)\n Traditional C allowed the character @samp{$} to form part of\n identifiers.  However, ANSI C and C++ forbid @samp{$} in identifiers.\n \n-@item -fenum-int-equiv\n-Anachronistically permit implicit conversion of @code{int} to\n-enumeration types.  Current C++ allows conversion of @code{enum} to\n-@code{int}, but not the other way around.\n+@item -fno-elide-constructors\n+The C++ standard allows an implementation to omit creating a temporary\n+which is only used to initialize another object of the same type.\n+Specifying this option disables that optimization, and forces g++ to\n+call the copy constructor in all cases.\n \n @item -fexternal-templates\n Cause template instantiations to obey @samp{#pragma interface} and\n@@ -1008,12 +1000,9 @@ be instantiated.  This behavior reflects the C++ language prior to\n September 1996, when guiding declarations were removed.\n \n This option implies @samp{-fname-mangling-version-0}, and will not work\n-with other name mangling versions.\n-\n-@item -fno-implicit-templates\n-Never emit code for templates which are instantiated implicitly (i.e. by\n-use); only emit code for explicit instantiations.  @xref{Template\n-Instantiation}, for more information.\n+with other name mangling versions.  Like all options that change the\n+ABI, all C++ code, @emph{including libgcc.a} must be built with the same\n+setting of this option.\n \n @item -fhandle-signatures\n Recognize the @code{signature} and @code{sigof} keywords for specifying\n@@ -1031,12 +1020,18 @@ by default, ignore @code{namespace-declarations},\n @item -fhuge-objects\n Support virtual function calls for objects that exceed the size\n representable by a @samp{short int}.  Users should not use this flag by\n-default; if you need to use it, the compiler will tell you so.  If you\n-compile any of your code with this flag, you must compile @emph{all} of\n-your code with this flag (including the C++ library, if you use it).\n+default; if you need to use it, the compiler will tell you so.\n \n This flag is not useful when compiling with -fvtable-thunks.\n \n+Like all options that change the ABI, all C++ code, @emph{including\n+libgcc} must be built with the same setting of this option.\n+\n+@item -fno-implicit-templates\n+Never emit code for templates which are instantiated implicitly (i.e. by\n+use); only emit code for explicit instantiations.  @xref{Template\n+Instantiation}, for more information.\n+\n @item -finit-priority\n Support @samp{__attribute__ ((init_priority (n)))} for controlling the\n order of initialization of file-scope objects.  On ELF targets, this\n@@ -1047,58 +1042,6 @@ To save space, do not emit out-of-line copies of inline functions\n controlled by @samp{#pragma implementation}.  This will cause linker\n errors if these functions are not inlined everywhere they are called.\n \n-@item -fmemoize-lookups\n-@itemx -fsave-memoized\n-Use heuristics to compile faster.  These heuristics are not enabled by\n-default, since they are only effective for certain input files.  Other\n-input files compile more slowly.\n-\n-The first time the compiler must build a call to a member function (or\n-reference to a data member), it must (1) determine whether the class\n-implements member functions of that name; (2) resolve which member\n-function to call (which involves figuring out what sorts of type\n-conversions need to be made); and (3) check the visibility of the member\n-function to the caller.  All of this adds up to slower compilation.\n-Normally, the second time a call is made to that member function (or\n-reference to that data member), it must go through the same lengthy\n-process again.  This means that code like this:\n-\n-@smallexample\n-cout << \"This \" << p << \" has \" << n << \" legs.\\n\";\n-@end smallexample\n-\n-@noindent\n-makes six passes through all three steps.  By using a software cache, a\n-``hit'' significantly reduces this cost.  Unfortunately, using the cache\n-introduces another layer of mechanisms which must be implemented, and so\n-incurs its own overhead.  @samp{-fmemoize-lookups} enables the software\n-cache.\n-\n-Because access privileges (visibility) to members and member functions\n-may differ from one function context to the next, G++ may need to flush\n-the cache.  With the @samp{-fmemoize-lookups} flag, the cache is flushed\n-after every function that is compiled.  The @samp{-fsave-memoized} flag\n-enables the same software cache, but when the compiler determines that\n-the context of the last function compiled would yield the same access\n-privileges of the next function to compile, it preserves the cache.\n-This is most helpful when defining many member functions for the same\n-class: with the exception of member functions which are friends of other\n-classes, each member function has exactly the same access privileges as\n-every other, and the cache need not be flushed.\n-\n-The code that implements these flags has rotted; you should probably\n-avoid using them.\n-\n-@item -fstrict-prototype\n-Within an @samp{extern \"C\"} linkage specification, treat a function\n-declaration with no arguments, such as @samp{int foo ();}, as declaring\n-the function to take no arguments.  Normally, such a declaration means\n-that the function @code{foo} can take any combination of arguments, as\n-in C.  @samp{-pedantic} implies @samp{-fstrict-prototype} unless\n-overridden with @samp{-fno-strict-prototype}.\n-\n-This flag no longer affects declarations with C++ linkage.\n-\n @item -fname-mangling-version-@var{n}\n Control the way in which names are mangled.  Version 0 is compatible\n with versions of g++ before 2.8.  Version 1 is the default.  Version 1\n@@ -1110,15 +1053,6 @@ given this declaration:\n template <class T, class U> void foo(T t);\n @end example\n \n-@item -fno-nonnull-objects\n-Don't assume that a reference is initialized to refer to a valid object.\n-Although the current C++ Working Paper prohibits null references, some\n-old code may rely on them, and you can use @samp{-fno-nonnull-objects}\n-to turn on checking.\n-\n-At the moment, the compiler only does this checking for conversions to\n-virtual base classes.\n-\n @item -foperator-names\n Recognize the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n@@ -1135,6 +1069,19 @@ Enable automatic template instantiation.  This option also implies\n @samp{-fno-implicit-templates}.  @xref{Template Instantiation}, for more\n information.\n \n+@item -fstrict-prototype\n+Within an @samp{extern \"C\"} linkage specification, treat a function\n+declaration with no arguments, such as @samp{int foo ();}, as declaring\n+the function to take no arguments.  Normally, such a declaration means\n+that the function @code{foo} can take any combination of arguments, as\n+in C.  @samp{-pedantic} implies @samp{-fstrict-prototype} unless\n+overridden with @samp{-fno-strict-prototype}.\n+\n+Specifying this option will also suppress implicit declarations of\n+functions.\n+\n+This flag no longer affects declarations with C++ linkage.\n+\n @item -fsquangle\n @itemx -fno-squangle\n @samp{-fsquangle} will enable a compressed form of name mangling for\n@@ -1144,6 +1091,15 @@ short ID codes.  This option also requires any C++ libraries being used to\n be compiled with this option as well.  The compiler has this disabled (the\n equivalent of @samp{-fno-squangle}) by default.\n \n+Like all options that change the ABI, all C++ code, @emph{including\n+libgcc.a} must be built with the same setting of this option.\n+\n+@item -ftemplate-depth-@var{n}\n+Set the maximum instantiation depth for template classes to @var{n}.\n+A limit on the template instantiation depth is needed to detect\n+endless recursions during template class instantiation. ANSI/ISO C++\n+conforming programs must not rely on a maximum depth greater than 17.\n+\n @item -fthis-is-variable\n Permit assignment to @code{this}.  The incorporation of user-defined\n free store management into C++ has made assignment to @samp{this} an\n@@ -1161,26 +1117,13 @@ offsets for adjusting the @samp{this} pointer at the call site.  Newer\n implementations store a single pointer to a @samp{thunk} function which\n does any necessary adjustment and then calls the target function.\n \n-This option also enables a heuristic for controlling emission of\n-vtables; if a class has any non-inline virtual functions, the vtable\n-will be emitted in the translation unit containing the first one of\n-those.\n-\n-@item -ftemplate-depth-@var{n}\n-Set the maximum instantiation depth for template classes to @var{n}.\n-A limit on the template instantiation depth is needed to detect\n-endless recursions during template class instantiation. ANSI/ISO C++\n-conforming programs must not rely on a maximum depth greater than 17.\n+Like all options that change the ABI, all C++ code, @emph{including\n+libgcc.a} must be built with the same setting of this option.\n \n @item -nostdinc++\n Do not search for header files in the standard directories specific to\n C++, but do still search the other standard directories.  (This option\n is used when building the C++ library.)\n-\n-@item -traditional\n-For C++ programs (in addition to the effects that apply to both C and\n-C++), this has the same effect as @samp{-fthis-is-variable}.\n-@xref{C Dialect Options,, Options Controlling C Dialect}.\n @end table\n \n In addition, these optimization, warning, and code generation options\n@@ -1189,23 +1132,19 @@ have meanings only for C++ programs:\n @table @code\n @item -fno-default-inline\n Do not assume @samp{inline} for functions defined inside a class scope.\n-@xref{Optimize Options,,Options That Control Optimization}.\n+@xref{Optimize Options,,Options That Control Optimization}.  Note that these\n+functions will have linkage like inline functions; they just won't be\n+inlined by default.\n \n @item -Wno-non-template-friend\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @item -Wold-style-cast\n @itemx -Woverloaded-virtual\n-@itemx -Wtemplate-debugging\n Warnings that apply only to C++ programs.  @xref{Warning\n Options,,Options to Request or Suppress Warnings}.\n \n @item -Weffc++\n Warn about violation of some style rules from Effective C++ by Scott Myers.\n-\n-@item +e@var{n}\n-Control how virtual function definitions are used, in a fashion\n-compatible with @code{cfront} 1.x.  @xref{Code Gen Options,,Options for\n-Code Generation Conventions}.\n @end table\n \n @node Warning Options\n@@ -5986,24 +5925,6 @@ significant data size overhead, though it does not affect execution.\n This option is on by default for languages that support exception\n handling (such as C++), and off for those that don't (such as C).\n \n-@item +e0\n-@itemx +e1\n-Control whether virtual function definitions in classes are used to\n-generate code, or only to define interfaces for their callers.  (C++\n-only).\n-\n-These options are provided for compatibility with @code{cfront} 1.x\n-usage; the recommended alternative GNU C++ usage is in flux.  @xref{C++\n-Interface,,Declarations and Definitions in One Header}.\n-\n-With @samp{+e0}, virtual function definitions in classes are declared\n-@code{extern}; the declaration is used only as an interface\n-specification, not to generate code for the virtual functions (in this\n-compilation).\n-\n-With @samp{+e1}, G++ actually generates the code implementing virtual\n-functions defined in the code, and makes them publicly visible.\n-\n @cindex aliasing of parameters\n @cindex parameters, aliased\n @item -fargument-alias"}]}