{"sha": "8b38916ad4fe0b878b12c9a42d6983ac09440485", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIzODkxNmFkNGZlMGI4NzhiMTJjOWE0MmQ2OTgzYWMwOTQ0MDQ4NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-03T18:48:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-03T18:48:18Z"}, "message": "predicates.md (x87nonimm_ssenomem_operand): Rename from nonimm_ssenomem_operand.\n\n\t* config/i386/predicates.md (x87nonimm_ssenomem_operand): Rename\n\tfrom nonimm_ssenomem_operand.\n\t(nonimm_ssenomem_operand): New predicate.\n\t* config/i386/i386.md (extendsfdf2): Use nonimm_ssenomem_operand\n\tas operand 0 predicate.\n\t(*extendsfdf2): Merge from *extendsfdf2_mixed and *extendsfdf2_i387.\n\tDisable unsupported alternatives using \"enabled\" attribute.\n\tUse register_ssemem_operand as operand 0 predicate.\n\t(*fop_<mode>_1): Use x87nonimm_ssenomem_operand as operand 1 predicate.\n\nFrom-SVN: r235837", "tree": {"sha": "e64859afb27dba27fc2a707f26fa5356a79edc5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e64859afb27dba27fc2a707f26fa5356a79edc5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b38916ad4fe0b878b12c9a42d6983ac09440485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b38916ad4fe0b878b12c9a42d6983ac09440485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b38916ad4fe0b878b12c9a42d6983ac09440485", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b38916ad4fe0b878b12c9a42d6983ac09440485/comments", "author": null, "committer": null, "parents": [{"sha": "79ce98bcefbcd42548dc596316c27b162cabb610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ce98bcefbcd42548dc596316c27b162cabb610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ce98bcefbcd42548dc596316c27b162cabb610"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "b73543cd35db71500adce618442d5245fa5e900b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b38916ad4fe0b878b12c9a42d6983ac09440485", "patch": "@@ -1,3 +1,15 @@\n+2016-05-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (x87nonimm_ssenomem_operand): Rename\n+\tfrom nonimm_ssenomem_operand.\n+\t(nonimm_ssenomem_operand): New predicate.\n+\t* config/i386/i386.md (extendsfdf2): Use nonimm_ssenomem_operand\n+\tas operand 0 predicate.\n+\t(*extendsfdf2): Merge from *extendsfdf2_mixed and *extendsfdf2_i387.\n+\tDisable unsupported alternatives using \"enabled\" attribute.\n+\tUse register_ssemem_operand as operand 0 predicate.\n+\t(*fop_<mode>_1): Use x87nonimm_ssenomem_operand as operand 1 predicate.\n+\n 2016-05-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70859\n@@ -48,15 +60,12 @@\n \tSSA names for the result false.\n \t(gimplify_call_expr): If the call may return twice do not\n \tgimplify parameters into SSA.\n-\t(prepare_gimple_addressable): Do not allow an SSA name as\n-\ttemporary.\n+\t(prepare_gimple_addressable): Do not allow an SSA name as temporary.\n \t(gimplify_modify_expr): Adjust assert.  For noreturn calls\n \twith a SSA name LHS adjust its def.\n-\t(gimplify_save_expr): Do not allow an SSA name as save-expr\n-\tresult.\n+\t(gimplify_save_expr): Do not allow an SSA name as save-expr result.\n \t(gimplify_one_sizepos): Do not allow an SSA name as a sizepos.\n-\t(gimplify_body): Init GIMPLE SSA data structures and gimplify\n-\tinto-SSA.\n+\t(gimplify_body): Init GIMPLE SSA data structures and gimplify into-SSA.\n \t(gimplify_scan_omp_clauses): Make sure OMP_CLAUSE_SIZE is not\n \tan SSA name.  Likewise for OMP_CLAUSE_REDUCTION operands.\n \t(gimplify_omp_for): Likewise for OMP_CLAUSE_DECL.  Likewise\n@@ -158,7 +167,7 @@\n \tof fixed_reg_set.\n \t* df-scan.c (df_insn_refs_collect): Asms may reference global regs.\n \n-2016-05-03  bin cheng  <bin.cheng@arm.com>\n+2016-05-03  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/56541\n \t* doc/invoke.texi (@item max-tree-if-conversion-phi-args): New item."}, {"sha": "ba1ff8be5da957e0938d0d045078e4451276653a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8b38916ad4fe0b878b12c9a42d6983ac09440485", "patch": "@@ -4203,15 +4203,15 @@\n   \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n \n (define_expand \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\")\n+  [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\")\n         (float_extend:DF (match_operand:SF 1 \"general_operand\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are TARGET_LEGITIMATE_CONSTANT_P.  */\n   if (CONST_DOUBLE_P (operands[1]))\n     {\n-      if ((!TARGET_SSE2 || TARGET_MIX_SSE_I387)\n+      if ((!SSE_FLOAT_MODE_P (DFmode) || TARGET_MIX_SSE_I387)\n \t  && standard_80387_constant_p (operands[1]) > 0)\n \t{\n \t  operands[1] = simplify_const_unary_operation\n@@ -4293,11 +4293,11 @@\n    (set (match_dup 0) (float_extend:DF (match_dup 2)))]\n   \"operands[2] = gen_rtx_REG (SFmode, REGNO (operands[0]));\")\n \n-(define_insn \"*extendsfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m,v\")\n+(define_insn \"*extendsfdf2\"\n+  [(set (match_operand:DF 0 \"nonimm_ssenomem_operand\" \"=f,m,v\")\n         (float_extend:DF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f,vm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n {\n   switch (which_alternative)\n     {\n@@ -4316,18 +4316,16 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_vex\")\n    (set_attr \"mode\" \"SF,XF,DF\")\n    (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\")\n-\t   ]\n-           (symbol_ref \"true\")))])\n-\n-(define_insn \"*extendsfdf2_i387\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n-        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF,XF\")])\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0,1\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t (symbol_ref \"true\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0,1\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))])\n \n (define_expand \"extend<mode>xf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\")\n@@ -4370,9 +4368,9 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\")\n \t(float_truncate:SF\n \t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n {\n-  if (TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n+  if (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n     ;\n   else if (flag_unsafe_math_optimizations)\n     ;\n@@ -4455,7 +4453,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,v\")\n         (float_truncate:SF\n           (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,vm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n+  \"SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\"\n {\n   switch (which_alternative)\n     {\n@@ -9258,8 +9256,7 @@\n \t  [(match_operand:MODEF 1 \"register_operand\" \"0,x,0,0\")]))\n    (use (match_operand:<ssevecmode> 2 \"nonimmediate_operand\" \"xm,0,X,X\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || TARGET_80387\"\n+  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"#\"\n   [(set (attr \"enabled\")\n      (if_then_else\n@@ -14063,9 +14060,9 @@\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n \t  [(match_operand:MODEF 1\n-\t     \"nonimm_ssenomem_operand\" \"0,fm,0,v\")\n+\t     \"x87nonimm_ssenomem_operand\" \"0,fm,0,v\")\n \t   (match_operand:MODEF 2\n-\t     \"nonimmediate_operand\"    \"fm,0,xm,vm\")]))]\n+\t     \"nonimmediate_operand\"\t  \"fm,0,xm,vm\")]))]\n   \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n     || (TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode)))\n    && !COMMUTATIVE_ARITH_P (operands[3])"}, {"sha": "dd9c5dca163812a27d4189619d409ba4aa06591f", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b38916ad4fe0b878b12c9a42d6983ac09440485/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=8b38916ad4fe0b878b12c9a42d6983ac09440485", "patch": "@@ -131,6 +131,14 @@\n ;; Match nonimmediate operands, but exclude memory operands\n ;; for TARGET_SSE_MATH if TARGET_MIX_SSE_I387 is not enabled.\n (define_predicate \"nonimm_ssenomem_operand\"\n+  (if_then_else\n+    (and (match_test \"SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH\")\n+\t (not (match_test \"TARGET_MIX_SSE_I387\")))\n+    (match_operand 0 \"register_operand\")\n+    (match_operand 0 \"nonimmediate_operand\")))\n+\n+;; The above predicate, suitable for x87 arithmetic operators.\n+(define_predicate \"x87nonimm_ssenomem_operand\"\n   (if_then_else\n     (and (match_test \"SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH\")\n \t (not (match_test \"TARGET_MIX_SSE_I387 && X87_ENABLE_ARITH (mode)\")))"}]}