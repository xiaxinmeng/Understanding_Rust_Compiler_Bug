{"sha": "0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkYzNjMTk3MTEwNjhhNWZjM2ExZjk3ZTdlNzdjYWM5ODYwNmFjNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-21T18:36:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-21T18:36:57Z"}, "message": "c-decl.c (finish_decl): Don't set DECL_C_HARD_REGISTER for non-register variables.\n\n\t* c-decl.c (finish_decl): Don't set DECL_C_HARD_REGISTER for\n\tnon-register variables.\n\t* extend.texi: Document that asm-specifications do not make sense\n\tfor non-static local variables.\n\nFrom-SVN: r42403", "tree": {"sha": "8b684034f0c2557f613f029cfbaf88270618a695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b684034f0c2557f613f029cfbaf88270618a695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/comments", "author": null, "committer": null, "parents": [{"sha": "01936f3a7d9389544a1c5f16c403ccbce75fdc2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01936f3a7d9389544a1c5f16c403ccbce75fdc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01936f3a7d9389544a1c5f16c403ccbce75fdc2e"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "569096215cc3f7798ce1bd1d6069951e1c154262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "patch": "@@ -1,3 +1,10 @@\n+2001-05-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-decl.c (finish_decl): Don't set DECL_C_HARD_REGISTER for\n+\tnon-register variables.\n+\t* extend.texi: Document that asm-specifications do not make sense\n+\tfor non-static local variables.\n+\n 2001-05-21  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* dbxout.c (MINIMAL_DEBUG, flag_minimal_debug): Lose."}, {"sha": "0c0866236e145b1a66e0e4bba2312485df9e4809", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "patch": "@@ -3616,11 +3616,30 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n       else\n \t{\n+\t  /* This is a local variable.  If there is an ASMSPEC, the\n+\t     user has requested that we handle it specially.  */\n \t  if (asmspec)\n \t    {\n-\t      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n-\t      DECL_C_HARD_REGISTER (decl) = 1;\n+\t      /* In conjunction with an ASMSPEC, the `register'\n+\t\t keyword indicates that we should place the variable\n+\t\t in a particular register.  */\n+\t      if (DECL_REGISTER (decl))\n+\t\tDECL_C_HARD_REGISTER (decl) = 1;\n+\n+\t      /* If this is not a static variable, issue a warning.\n+\t\t It doesn't make any sense to give an ASMSPEC for an\n+\t\t ordinary, non-register local variable.  Historically,\n+\t\t GCC has accepted -- but ignored -- the ASMSPEC in\n+\t\t this case.  */\n+\t      if (TREE_CODE (decl) == VAR_DECL \n+\t\t  && !DECL_REGISTER (decl)\n+\t\t  && !TREE_STATIC (decl))\n+\t\twarning_with_decl (decl,\n+\t\t\t\t   \"ignoring asm-specifier for non-static local variable `%s'\");\n+\t      else\n+\t\tSET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n \t    }\n+\n \t  add_decl_stmt (decl);\n \t}\n "}, {"sha": "48c6ea1afe0e16657872f086790418155817eb1f", "filename": "gcc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "patch": "@@ -3290,6 +3290,13 @@ On systems where an underscore is normally prepended to the name of a C\n function or variable, this feature allows you to define names for the\n linker that do not start with an underscore.\n \n+It does not make sense to use this feature with a non-static local\n+variable since such variables do not have assembler names.  If you are\n+trying to put the variable in a particular register, see @ref{Explicit\n+Reg Vars}.  GCC presently accepts such code with a warning, but will\n+probably be changed to issue an error, rather than a warning, in the\n+future.\n+\n You cannot use @code{asm} in this way in a function @emph{definition}; but\n you can get the same effect by writing a declaration for the function\n before its definition and putting @code{asm} there, like this:"}, {"sha": "c96dbc4eee5ae4380eba04abf456fbacf691fd9b", "filename": "gcc/testsuite/gcc.dg/20010520-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Ftestsuite%2Fgcc.dg%2F20010520-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adc3c19711068a5fc3a1f97e7e77cac98606ac4/gcc%2Ftestsuite%2Fgcc.dg%2F20010520-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20010520-1.c?ref=0adc3c19711068a5fc3a1f97e7e77cac98606ac4", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-w\" } */\n+\n+void f ()\n+{\n+  int i __asm__ (\"%eax\");\n+  __asm__ volatile (\"\" : \"=a\" (i));\n+}\n+\n+"}]}