{"sha": "a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5OTc0YTIzZTllYjJmNDQ0ODViNTIwYmRiMmIzYmZkMjhlZWU1MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-16T20:58:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-05-16T20:58:24Z"}, "message": "pa.c (output_move_double): Handle loading a general register from a scaled indexed memory address.\n\n        * pa.c (output_move_double): Handle loading a general register\n        from a scaled indexed memory address.\n        * pa.md (movdf, movdi): Allow scaled loads into general registers.\n\nFrom-SVN: r14073", "tree": {"sha": "2570b94a37a192003e61307ee5457d185b073b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2570b94a37a192003e61307ee5457d185b073b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89974a23e9eb2f44485b520bdb2b3bfd28eee51/comments", "author": null, "committer": null, "parents": [{"sha": "30ccf55d854f180ea57da7aaf4926fbba8225ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ccf55d854f180ea57da7aaf4926fbba8225ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ccf55d854f180ea57da7aaf4926fbba8225ce1"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "3515e22b312c9384e78112325aa7377579b276ac", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89974a23e9eb2f44485b520bdb2b3bfd28eee51/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89974a23e9eb2f44485b520bdb2b3bfd28eee51/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "patch": "@@ -1662,6 +1662,35 @@ output_move_double (operands)\n \t      return \"ldw -4(0,%1),%R0\\n\\tldws,mb -8(0,%1),%0\";\n \t    }\n \t}\n+      else if (GET_CODE (addr) == PLUS\n+\t       && GET_CODE (XEXP (addr, 0)) == MULT)\n+\t{\n+\t  rtx high_reg = gen_rtx (SUBREG, SImode, operands[0], 0);\n+\n+\t  if (!reg_overlap_mentioned_p (high_reg, addr))\n+\t    {\n+\t      rtx xoperands[3];\n+\n+\t      xoperands[0] = high_reg;\n+\t      xoperands[1] = XEXP (addr, 1);\n+\t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n+\t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n+\t      output_asm_insn (\"sh%O3addl %2,%1,%0\", xoperands);\n+\t      return \"ldw 4(0,%0),%R0\\n\\tldw 0(0,%0),%0\";\n+\t    }\n+\t  else\n+\t    {\n+\t      rtx xoperands[3];\n+\n+\t      xoperands[0] = high_reg;\n+\t      xoperands[1] = XEXP (addr, 1);\n+\t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n+\t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n+\t      output_asm_insn (\"sh%O3addl %2,%1,%R0\", xoperands);\n+\t      return \"ldw 0(0,%R0),%0\\n\\tldw 4(0,%R0),%R0\";\n+\t    }\n+\t   \n+\t}\n     }\n \n   /* If an operand is an unoffsettable memory ref, find a register"}, {"sha": "d39709fd87c0e220cbe1adb0a39534ecefe3a0f7", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89974a23e9eb2f44485b520bdb2b3bfd28eee51/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89974a23e9eb2f44485b520bdb2b3bfd28eee51/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=a89974a23e9eb2f44485b520bdb2b3bfd28eee51", "patch": "@@ -2234,7 +2234,7 @@\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=f,*r,RQ,?o,?Q,f,*r,*r\")\n \t(match_operand:DF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n-\t\t\t  \"fG,*rG,f,*r,*r,RQ,o,Q\"))]\n+\t\t\t  \"fG,*rG,f,*r,*r,RQ,o,RQ\"))]\n   \"(register_operand (operands[0], DFmode)\n     || reg_or_0_operand (operands[1], DFmode))\n    && ! (GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -2425,7 +2425,7 @@\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=r,o,Q,r,r,r,f,f,*TR\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t  \"rM,r,r,o,Q,i,fM,*TR,f\"))]\n+\t\t\t  \"rM,r,r,o*R,Q,i,fM,*TR,f\"))]\n   \"(register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\n    && ! TARGET_SOFT_FLOAT\""}]}