{"sha": "ca3e565395b8e49f90482409c7cb2da5fccb5b26", "node_id": "C_kwDOANBUbNoAKGNhM2U1NjUzOTViOGU0OWY5MDQ4MjQwOWM3Y2IyZGE1ZmNjYjViMjY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-17T18:05:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:45Z"}, "message": "[Ada] Fix bogus visibility error with partially parameterized formal package\n\nThe problem comes from the special instantiation (abbreviated instantiation\nin GNAT parlance) done to check conformance between a formal package and its\ncorresponding actual in a generic instantiation: the compiler instantiates\nthe formal package, in the context of the generic instantiation, so that it\ncan check the conformance of the actual with the result.\n\nMore precisely, it occurs with formal packages that are only partially\nparameterized, i.e. that have at least one parameter association and an\n(others => <>) choice. In this case, RM 12.7(10/2) says that the visible\npart of the formal package contains a copy of the formal parameters that\nare not explicitly associated.\n\nThe analysis of these copies for the abbreviated instantiation is not done\nin the correct context when the generic unit is a child generic unit.\n\ngcc/ada/\n\n\t* sem_ch12.ads (Is_Abbreviated_Instance): Declare.\n\t* sem_ch12.adb (Check_Abbreviated_Instance): Declare.\n\t(Requires_Conformance_Checking): Declare.\n\t(Analyze_Association.Process_Default): Fix subtype of parameter.\n\t(Analyze_Formal_Object_Declaration): Check whether it is in the\n\tvisible part of abbreviated instance.\n\t(Analyze_Formal_Subprogram_Declaration): Likewise.\n\t(Analyze_Formal_Type_Declaration): Likewise.\n\t(Analyze_Package_Instantiation): Do not check for a generic child\n\tunit in the case of an abbreviated instance.\n\t(Check_Abbreviated_Instance): New procedure.\n\t(Check_Formal_Packages): Tidy up.\n\t(Copy_Generic_Elist): Fix comment.\n\t(Instantiate_Formal_Package): Tidy up.  If the generic unit is a\n\tchild unit, copy the qualified name onto the abbreviated instance.\n\t(Is_Abbreviated_Instance): New function.\n\t(Collect_Previous_Instances): Call Is_Abbreviated_Instance.\n\t(Requires_Conformance_Checking): New function.\n\t* sem_ch7.adb (Analyze_Package_Specification): Do not install the\n\tprivate declarations of the parent for an abbreviated instance.", "tree": {"sha": "4134273059a469c41acd08bcd894eb1f69880f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4134273059a469c41acd08bcd894eb1f69880f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3e565395b8e49f90482409c7cb2da5fccb5b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e565395b8e49f90482409c7cb2da5fccb5b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3e565395b8e49f90482409c7cb2da5fccb5b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e565395b8e49f90482409c7cb2da5fccb5b26/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b2b83bd7c1a9dfdba4ef27ea120ae5e1ead0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b2b83bd7c1a9dfdba4ef27ea120ae5e1ead0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b2b83bd7c1a9dfdba4ef27ea120ae5e1ead0b0"}], "stats": {"total": 246, "additions": 167, "deletions": 79}, "files": [{"sha": "d0bafc6e06f0cfb3e8b37297fc275ab9b0ab2baa", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 157, "deletions": 77, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ca3e565395b8e49f90482409c7cb2da5fccb5b26", "patch": "@@ -516,6 +516,22 @@ package body Sem_Ch12 is\n    --  The body of the wrapper is a call to the actual, with the generated\n    --  pre/postconditon checks added.\n \n+   procedure Check_Abbreviated_Instance\n+     (N                : Node_Id;\n+      Parent_Installed : in out Boolean);\n+   --  If the name of the generic unit in an abbreviated instantiation is an\n+   --  expanded name, then the prefix may be an instance and the selector may\n+   --  designate a child unit. If the parent is installed as a result of this\n+   --  call, then Parent_Installed is set True, otherwise Parent_Installed is\n+   --  unchanged by the call.\n+\n+   --  This routine needs to be called for declaration nodes of formal objects,\n+   --  types and subprograms to check whether they are the copy, present in the\n+   --  visible part of the abbreviated instantiation of formal packages, of the\n+   --  declaration node of their corresponding formal parameter in the template\n+   --  of the formal package, as specified by RM 12.7(10/2), so as to establish\n+   --  the proper context for their analysis.\n+\n    procedure Check_Access_Definition (N : Node_Id);\n    --  Subsidiary routine to null exclusion processing. Perform an assertion\n    --  check on Ada version and the presence of an access definition in N.\n@@ -865,6 +881,10 @@ package body Sem_Ch12 is\n    procedure Remove_Parent (In_Body : Boolean := False);\n    --  Reverse effect after instantiation of child is complete\n \n+   function Requires_Conformance_Checking (N : Node_Id) return Boolean;\n+   --  Determine whether the formal package declaration N requires conformance\n+   --  checking with actuals in instantiations.\n+\n    procedure Restore_Hidden_Primitives (Prims_List : in out Elist_Id);\n    --  Restore suffix 'P' to primitives of Prims_List and leave Prims_List\n    --  set to No_Elist.\n@@ -1160,10 +1180,10 @@ package body Sem_Ch12 is\n       --  association for it includes a box, or whether the associations\n       --  include an Others clause.\n \n-      procedure Process_Default (F : Entity_Id);\n-      --  Add a copy of the declaration of generic formal F to the list of\n-      --  associations, and add an explicit box association for F if there\n-      --  is none yet, and the default comes from an Others_Choice.\n+      procedure Process_Default (Formal : Node_Id);\n+      --  Add a copy of the declaration of a generic formal to the list of\n+      --  associations, and add an explicit box association for its entity\n+      --  if there is none yet, and the default comes from an Others_Choice.\n \n       function Renames_Standard_Subprogram (Subp : Entity_Id) return Boolean;\n       --  Determine whether Subp renames one of the subprograms defined in the\n@@ -1517,9 +1537,9 @@ package body Sem_Ch12 is\n       -- Process_Default --\n       ---------------------\n \n-      procedure Process_Default (F : Entity_Id) is\n+      procedure Process_Default (Formal : Node_Id) is\n          Loc     : constant Source_Ptr := Sloc (I_Node);\n-         F_Id    : constant Entity_Id  := Defining_Entity (F);\n+         F_Id    : constant Entity_Id  := Defining_Entity (Formal);\n          Decl    : Node_Id;\n          Default : Node_Id;\n          Id      : Entity_Id;\n@@ -1528,10 +1548,10 @@ package body Sem_Ch12 is\n          --  Append copy of formal declaration to associations, and create new\n          --  defining identifier for it.\n \n-         Decl := New_Copy_Tree (F);\n+         Decl := New_Copy_Tree (Formal);\n          Id := Make_Defining_Identifier (Sloc (F_Id), Chars (F_Id));\n \n-         if Nkind (F) in N_Formal_Subprogram_Declaration then\n+         if Nkind (Formal) in N_Formal_Subprogram_Declaration then\n             Set_Defining_Unit_Name (Specification (Decl), Id);\n \n          else\n@@ -2612,12 +2632,16 @@ package body Sem_Ch12 is\n    procedure Analyze_Formal_Object_Declaration (N : Node_Id) is\n       E  : constant Node_Id := Default_Expression (N);\n       Id : constant Node_Id := Defining_Identifier (N);\n-      K  : Entity_Kind;\n-      T  : Node_Id;\n+\n+      K                : Entity_Kind;\n+      Parent_Installed : Boolean := False;\n+      T                : Node_Id;\n \n    begin\n       Enter_Name (Id);\n \n+      Check_Abbreviated_Instance (Parent (N), Parent_Installed);\n+\n       --  Determine the mode of the formal object\n \n       if Out_Present (N) then\n@@ -2740,6 +2764,10 @@ package body Sem_Ch12 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n+\n+      if Parent_Installed then\n+         Remove_Parent;\n+      end if;\n    end Analyze_Formal_Object_Declaration;\n \n    ----------------------------------------------\n@@ -3279,7 +3307,9 @@ package body Sem_Ch12 is\n       Def  : constant Node_Id   := Default_Name (N);\n       Expr : constant Node_Id   := Expression (N);\n       Nam  : constant Entity_Id := Defining_Unit_Name (Spec);\n-      Subp : Entity_Id;\n+\n+      Parent_Installed : Boolean := False;\n+      Subp             : Entity_Id;\n \n    begin\n       if Nam = Error then\n@@ -3291,6 +3321,8 @@ package body Sem_Ch12 is\n          goto Leave;\n       end if;\n \n+      Check_Abbreviated_Instance (Parent (N), Parent_Installed);\n+\n       Analyze_Subprogram_Declaration (N);\n       Set_Is_Formal_Subprogram (Nam);\n       Set_Has_Completion (Nam);\n@@ -3490,6 +3522,9 @@ package body Sem_Ch12 is\n          Analyze_Aspect_Specifications (N, Nam);\n       end if;\n \n+      if Parent_Installed then\n+         Remove_Parent;\n+      end if;\n    end Analyze_Formal_Subprogram_Declaration;\n \n    -------------------------------------\n@@ -3498,7 +3533,9 @@ package body Sem_Ch12 is\n \n    procedure Analyze_Formal_Type_Declaration (N : Node_Id) is\n       Def : constant Node_Id := Formal_Type_Definition (N);\n-      T   : Entity_Id;\n+\n+      Parent_Installed : Boolean := False;\n+      T                : Entity_Id;\n \n    begin\n       T := Defining_Identifier (N);\n@@ -3510,6 +3547,8 @@ package body Sem_Ch12 is\n            (\"discriminants not allowed for this formal type\", T);\n       end if;\n \n+      Check_Abbreviated_Instance (Parent (N), Parent_Installed);\n+\n       --  Enter the new name, and branch to specific routine\n \n       case Nkind (Def) is\n@@ -3578,6 +3617,10 @@ package body Sem_Ch12 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, T);\n       end if;\n+\n+      if Parent_Installed then\n+         Remove_Parent;\n+      end if;\n    end Analyze_Formal_Type_Declaration;\n \n    ------------------------------------\n@@ -4258,7 +4301,13 @@ package body Sem_Ch12 is\n       Generic_Renamings.Set_Last (0);\n       Generic_Renamings_HTable.Reset;\n \n-      Check_Generic_Child_Unit (Gen_Id, Parent_Installed);\n+      --  Except for an abbreviated instance created to check a formal package,\n+      --  install the parent if this is a generic child unit.\n+\n+      if not Is_Abbreviated_Instance (Inst_Id) then\n+         Check_Generic_Child_Unit (Gen_Id, Parent_Installed);\n+      end if;\n+\n       Gen_Unit := Entity (Gen_Id);\n \n       --  A package instantiation is Ghost when it is subject to pragma Ghost\n@@ -6289,6 +6338,25 @@ package body Sem_Ch12 is\n       Build_Elaboration_Entity (Decl_Cunit, New_Main);\n    end Build_Instance_Compilation_Unit_Nodes;\n \n+   --------------------------------\n+   -- Check_Abbreviated_Instance --\n+   --------------------------------\n+\n+   procedure Check_Abbreviated_Instance\n+     (N                : Node_Id;\n+      Parent_Installed : in out Boolean)\n+   is\n+      Inst_Node : Node_Id;\n+\n+   begin\n+      if Nkind (N) = N_Package_Specification\n+        and then Is_Abbreviated_Instance (Defining_Entity (N))\n+      then\n+         Inst_Node := Get_Unit_Instantiation_Node (Defining_Entity (N));\n+         Check_Generic_Child_Unit (Name (Inst_Node), Parent_Installed);\n+      end if;\n+   end Check_Abbreviated_Instance;\n+\n    -----------------------------\n    -- Check_Access_Definition --\n    -----------------------------\n@@ -6738,43 +6806,23 @@ package body Sem_Ch12 is\n       E           : Entity_Id;\n       Formal_P    : Entity_Id;\n       Formal_Decl : Node_Id;\n+\n    begin\n       --  Iterate through the declarations in the instance, looking for package\n-      --  renaming declarations that denote instances of formal packages. Stop\n-      --  when we find the renaming of the current package itself. The\n-      --  declaration for a formal package without a box is followed by an\n-      --  internal entity that repeats the instantiation.\n+      --  renaming declarations that denote instances of formal packages, until\n+      --  we find the renaming of the current package itself. The declaration\n+      --  of a formal package that requires conformance checking is followed by\n+      --  an internal entity that is the abbreviated instance.\n \n       E := First_Entity (P_Id);\n       while Present (E) loop\n          if Ekind (E) = E_Package then\n-            if Renamed_Entity (E) = P_Id then\n-               exit;\n-\n-            elsif Nkind (Parent (E)) /= N_Package_Renaming_Declaration then\n-               null;\n+            exit when Renamed_Entity (E) = P_Id;\n \n-            else\n+            if Nkind (Parent (E)) = N_Package_Renaming_Declaration then\n                Formal_Decl := Parent (Associated_Formal_Package (E));\n \n-               --  Nothing to check if the formal has a box or an others_clause\n-               --  (necessarily with a box), or no associations altogether\n-\n-               if Box_Present (Formal_Decl)\n-                 or else No (Generic_Associations (Formal_Decl))\n-               then\n-                  null;\n-\n-               elsif Nkind (First (Generic_Associations (Formal_Decl))) =\n-                       N_Others_Choice\n-               then\n-                  --  The internal validating package was generated but formal\n-                  --  and instance are known to be compatible.\n-\n-                  Formal_P := Next_Entity (E);\n-                  Remove (Unit_Declaration_Node (Formal_P));\n-\n-               else\n+               if Requires_Conformance_Checking (Formal_Decl) then\n                   Formal_P := Next_Entity (E);\n \n                   --  If the instance is within an enclosing instance body\n@@ -7708,7 +7756,7 @@ package body Sem_Ch12 is\n       function Copy_Generic_List\n         (L         : List_Id;\n          Parent_Id : Node_Id) return List_Id;\n-      --  Apply Copy_Node recursively to the members of a node list\n+      --  Apply Copy_Generic_Node recursively to the members of a node list\n \n       function In_Defining_Unit_Name (Nam : Node_Id) return Boolean;\n       --  True if an identifier is part of the defining program unit name of\n@@ -10247,12 +10295,13 @@ package body Sem_Ch12 is\n    is\n       Loc            : constant Source_Ptr := Sloc (Actual);\n       Hidden_Formals : constant Elist_Id   := New_Elmt_List;\n-      Actual_Pack    : Entity_Id;\n-      Formal_Pack    : Entity_Id;\n-      Gen_Parent     : Entity_Id;\n-      Decls          : List_Id;\n-      Nod            : Node_Id;\n-      Parent_Spec    : Node_Id;\n+\n+      Actual_Pack : Entity_Id;\n+      Formal_Pack : Entity_Id;\n+      Gen_Parent  : Entity_Id;\n+      Decls       : List_Id;\n+      Nod         : Node_Id;\n+      Parent_Spec : Node_Id;\n \n       procedure Find_Matching_Actual\n        (F    : Node_Id;\n@@ -10533,15 +10582,15 @@ package body Sem_Ch12 is\n             Actual_Pack := Renamed_Entity (Actual_Pack);\n          end if;\n \n-         if Nkind (Analyzed_Formal) = N_Formal_Package_Declaration then\n-            Gen_Parent  := Get_Instance_Of (Entity (Name (Analyzed_Formal)));\n-            Formal_Pack := Defining_Identifier (Analyzed_Formal);\n-         else\n-            Gen_Parent :=\n-              Generic_Parent (Specification (Analyzed_Formal));\n-            Formal_Pack :=\n-              Defining_Unit_Name (Specification (Analyzed_Formal));\n-         end if;\n+         --  The analyzed formal is expected to be the result of the rewriting\n+         --  of the formal package into a regular package by analysis.\n+\n+         pragma Assert (Nkind (Analyzed_Formal) = N_Package_Declaration\n+           and then Nkind (Original_Node (Analyzed_Formal)) =\n+                                                 N_Formal_Package_Declaration);\n+\n+         Gen_Parent := Generic_Parent (Specification (Analyzed_Formal));\n+         Formal_Pack := Defining_Unit_Name (Specification (Analyzed_Formal));\n \n          if Nkind (Parent (Actual_Pack)) = N_Defining_Program_Unit_Name then\n             Parent_Spec := Package_Specification (Actual_Pack);\n@@ -10708,20 +10757,9 @@ package body Sem_Ch12 is\n \n                Next_Entity (Actual_Ent);\n             end loop;\n-\n-            --  No conformance to check if the generic has no formal parameters\n-            --  and the formal package has no generic associations.\n-\n-            if Is_Empty_List (Formals)\n-              and then\n-                (Box_Present (Formal)\n-                   or else No (Generic_Associations (Formal)))\n-            then\n-               return Decls;\n-            end if;\n          end;\n \n-         --  If the formal is not declared with a box, reanalyze it as an\n+         --  If the formal requires conformance checking, reanalyze it as an\n          --  abbreviated instantiation, to verify the matching rules of 12.7.\n          --  The actual checks are performed after the generic associations\n          --  have been analyzed, to guarantee the same visibility for this\n@@ -10733,22 +10771,40 @@ package body Sem_Ch12 is\n          --  checking, because it contains formal declarations for those\n          --  defaulted parameters, and those should not reach the back-end.\n \n-         if not Box_Present (Formal) then\n+         if Requires_Conformance_Checking (Formal) then\n             declare\n-               I_Pack : constant Entity_Id :=\n-                          Make_Temporary (Sloc (Actual), 'P');\n+               I_Pack : constant Entity_Id := Make_Temporary (Loc, 'P');\n+\n+               I_Nam : Node_Id;\n \n             begin\n                Set_Is_Internal (I_Pack);\n                Mutate_Ekind (I_Pack, E_Package);\n+\n+               --  Insert the package into the list of its hidden entities so\n+               --  that the list is not empty for Is_Abbreviated_Instance.\n+\n+               Append_Elmt (I_Pack, Hidden_Formals);\n+\n                Set_Hidden_In_Formal_Instance (I_Pack, Hidden_Formals);\n \n+               --  If the generic is a child unit, Check_Generic_Child_Unit\n+               --  needs its original name in case it is qualified.\n+\n+               if Is_Child_Unit (Gen_Parent) then\n+                  I_Nam :=\n+                    New_Copy_Tree (Name (Original_Node (Analyzed_Formal)));\n+                  pragma Assert (Entity (I_Nam) = Gen_Parent);\n+\n+               else\n+                  I_Nam :=\n+                    New_Occurrence_Of (Get_Instance_Of (Gen_Parent), Loc);\n+               end if;\n+\n                Append_To (Decls,\n-                 Make_Package_Instantiation (Sloc (Actual),\n+                 Make_Package_Instantiation (Loc,\n                    Defining_Unit_Name   => I_Pack,\n-                   Name                 =>\n-                     New_Occurrence_Of\n-                       (Get_Instance_Of (Gen_Parent), Sloc (Actual)),\n+                   Name                 => I_Nam,\n                    Generic_Associations => Generic_Associations (Formal)));\n             end;\n          end if;\n@@ -14234,6 +14290,16 @@ package body Sem_Ch12 is\n       return Decl_Nodes;\n    end Instantiate_Type;\n \n+   -----------------------------\n+   -- Is_Abbreviated_Instance --\n+   -----------------------------\n+\n+   function Is_Abbreviated_Instance (E : Entity_Id) return Boolean is\n+   begin\n+      return Ekind (E) = E_Package\n+        and then Present (Hidden_In_Formal_Instance (E));\n+   end Is_Abbreviated_Instance;\n+\n    ---------------------\n    -- Is_In_Main_Unit --\n    ---------------------\n@@ -14323,7 +14389,7 @@ package body Sem_Ch12 is\n             --  not analyzed here either.\n \n             elsif Nkind (Decl) = N_Package_Instantiation\n-              and then not Is_Internal (Defining_Entity (Decl))\n+              and then not Is_Abbreviated_Instance (Defining_Entity (Decl))\n             then\n                Append_Elmt (Decl, Previous_Instances);\n \n@@ -15206,6 +15272,20 @@ package body Sem_Ch12 is\n       end if;\n    end Remove_Parent;\n \n+   -----------------------------------\n+   -- Requires_Conformance_Checking --\n+   -----------------------------------\n+\n+   function Requires_Conformance_Checking (N : Node_Id) return Boolean is\n+   begin\n+      --  No conformance checking required if the generic actual part is empty,\n+      --  or is a box or an others_clause (necessarily with a box).\n+\n+      return Present (Generic_Associations (N))\n+        and then not Box_Present (N)\n+        and then Nkind (First (Generic_Associations (N))) /= N_Others_Choice;\n+   end Requires_Conformance_Checking;\n+\n    -----------------\n    -- Restore_Env --\n    -----------------"}, {"sha": "58a94552991715fe89b45767d7c08fa457eec6f8", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=ca3e565395b8e49f90482409c7cb2da5fccb5b26", "patch": "@@ -110,6 +110,10 @@ package Sem_Ch12 is\n    --  function and procedure instances. The flag Body_Optional has the\n    --  same purpose as described for Instantiate_Package_Body.\n \n+   function Is_Abbreviated_Instance (E : Entity_Id) return Boolean;\n+   --  Return true if E is a package created for an abbreviated instantiation\n+   --  to check conformance between formal package and corresponding actual.\n+\n    function Need_Subprogram_Instance_Body\n      (N    : Node_Id;\n       Subp : Entity_Id) return Boolean;"}, {"sha": "2f09927c7ce6a6ccd65513557aa7614f3ce79fb5", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e565395b8e49f90482409c7cb2da5fccb5b26/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=ca3e565395b8e49f90482409c7cb2da5fccb5b26", "patch": "@@ -1813,9 +1813,13 @@ package body Sem_Ch7 is\n \n       --  If this is a package associated with a generic instance or formal\n       --  package, then the private declarations of each of the generic's\n-      --  parents must be installed at this point.\n+      --  parents must be installed at this point, but not if this is the\n+      --  abbreviated instance created to check a formal package, see the\n+      --  same condition in Analyze_Package_Instantiation.\n \n-      if Is_Generic_Instance (Id) then\n+      if Is_Generic_Instance (Id)\n+        and then not Is_Abbreviated_Instance (Id)\n+      then\n          Install_Parent_Private_Declarations (Id);\n       end if;\n "}]}