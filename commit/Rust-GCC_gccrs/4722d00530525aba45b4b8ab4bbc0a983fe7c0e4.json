{"sha": "4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyMmQwMDUzMDUyNWFiYTQ1YjRiOGFiNGJiYzBhOTgzZmU3YzBlNA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-05-15T19:39:18Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-05-15T19:39:18Z"}, "message": "printers.py (Tr1HashtableIterator): Fix rendering of std::tr1 unordered containers iterator.\n\n2013-05-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* python/libstdcxx/v6/printers.py (Tr1HashtableIterator): Fix\n\trendering of std::tr1 unordered containers iterator.\n\t(StdHashtableIterator): New, render std unordered containers iterator.\n\t* testsuite/libstdc++-prettyprinters/tr1.cc: New.\n\nFrom-SVN: r198947", "tree": {"sha": "d30dd906ec6223b52dc6ddcfc8daec3d80189322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30dd906ec6223b52dc6ddcfc8daec3d80189322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/comments", "author": null, "committer": null, "parents": [{"sha": "e299a383a9334fe71492e54ccfa9888434d69d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e299a383a9334fe71492e54ccfa9888434d69d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e299a383a9334fe71492e54ccfa9888434d69d05"}], "stats": {"total": 146, "additions": 141, "deletions": 5}, "files": [{"sha": "e22b63e8dee9b39f4f59bf86c177fb9bae8091fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "patch": "@@ -1,3 +1,10 @@\n+2013-05-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (Tr1HashtableIterator): Fix\n+\trendering of std::tr1 unordered containers iterator.\n+\t(StdHashtableIterator): New, render std unordered containers iterator.\n+\t* testsuite/libstdc++-prettyprinters/tr1.cc: New.\n+\n 2013-05-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/basic_string.h (getline): Fix doxygen comments."}, {"sha": "a3a8b1e2fd71c24496fad1bc8b54bb5b80f97c00", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "patch": "@@ -621,8 +621,16 @@ def display_hint (self):\n \n class Tr1HashtableIterator:\n     def __init__ (self, hash):\n-        self.node = hash['_M_bbegin']['_M_node']['_M_nxt']\n-        self.node_type = find_type(hash.type, '__node_type').pointer()\n+        self.buckets = hash['_M_buckets']\n+        self.bucket = 0\n+        self.bucket_count = hash['_M_bucket_count']\n+        self.node_type = find_type(hash.type, '_Node').pointer()\n+        self.node = 0\n+        while self.bucket != self.bucket_count:\n+            self.node = self.buckets[self.bucket]\n+            if self.node:\n+                break\n+            self.bucket = self.bucket + 1        \n \n     def __iter__ (self):\n         return self\n@@ -632,9 +640,33 @@ def next (self):\n             raise StopIteration\n         node = self.node.cast(self.node_type)\n         result = node.dereference()['_M_v']\n-        self.node = node.dereference()['_M_nxt']\n+        self.node = node.dereference()['_M_next'];\n+        if self.node == 0:\n+            self.bucket = self.bucket + 1\n+            while self.bucket != self.bucket_count:\n+                self.node = self.buckets[self.bucket]\n+                if self.node:\n+                    break\n+                self.bucket = self.bucket + 1\n         return result\n \n+class StdHashtableIterator:\n+    def __init__(self, hash):\n+        self.node = hash['_M_bbegin']['_M_node']['_M_nxt']\n+        self.node_type = find_type(hash.type, '__node_type').pointer()\n+\n+    def __iter__(self):\n+        return self\n+\n+    def next(self):\n+        if self.node == 0:\n+            raise StopIteration\n+        elt = self.node.cast(self.node_type).dereference()\n+        self.node = elt['_M_nxt']\n+        valptr = elt['_M_storage'].address\n+        valptr = valptr.cast(elt.type.template_argument(0).pointer())\n+        return valptr.dereference()\n+\n class Tr1UnorderedSetPrinter:\n     \"Print a tr1::unordered_set\"\n \n@@ -656,7 +688,9 @@ def format_count (i):\n \n     def children (self):\n         counter = itertools.imap (self.format_count, itertools.count())\n-        return itertools.izip (counter, Tr1HashtableIterator (self.hashtable()))\n+        if self.typename.startswith('std::tr1'):\n+            return itertools.izip (counter, Tr1HashtableIterator (self.hashtable()))\n+        return itertools.izip (counter, StdHashtableIterator (self.hashtable()))\n \n class Tr1UnorderedMapPrinter:\n     \"Print a tr1::unordered_map\"\n@@ -690,9 +724,14 @@ def format_count (i):\n     def children (self):\n         counter = itertools.imap (self.format_count, itertools.count())\n         # Map over the hash table and flatten the result.\n-        data = self.flatten (itertools.imap (self.format_one, Tr1HashtableIterator (self.hashtable())))\n+        if self.typename.startswith('std::tr1'):\n+            data = self.flatten (itertools.imap (self.format_one, Tr1HashtableIterator (self.hashtable())))\n+            # Zip the two iterators together.\n+            return itertools.izip (counter, data)\n+        data = self.flatten (itertools.imap (self.format_one, StdHashtableIterator (self.hashtable())))\n         # Zip the two iterators together.\n         return itertools.izip (counter, data)\n+        \n \n     def display_hint (self):\n         return 'map'"}, {"sha": "3fac36edd3cdb891d9de87f478373cc0fd2b1b6a", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/tr1.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4722d00530525aba45b4b8ab4bbc0a983fe7c0e4/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Ftr1.cc?ref=4722d00530525aba45b4b8ab4bbc0a983fe7c0e4", "patch": "@@ -0,0 +1,90 @@\n+// { dg-do run }\n+// { dg-options \"-g\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/unordered_map>\n+#include <tr1/unordered_set>\n+#include <string>\n+#include <iostream>\n+\n+template<class T>\n+void\n+placeholder(const T &s)\n+{\n+  std::cout << s;\n+}\n+\n+template<class T, class S>\n+void\n+placeholder(const std::pair<T,S> &s)\n+{\n+  std::cout << s.first;\n+}\n+\n+template<class T>\n+void\n+use(const T &container)\n+{\n+  for (typename T::const_iterator i = container.begin();\n+       i != container.end();\n+       ++i)\n+    placeholder(*i);\n+}\n+\n+int\n+main()\n+{\n+  std::tr1::unordered_map<int, std::string> eum;\n+// { dg-final { note-test eum \"std::tr1::unordered_map with 0 elements\" } }\n+  std::tr1::unordered_multimap<int, std::string> eumm;\n+// { dg-final { note-test eumm \"std::tr1::unordered_multimap with 0 elements\" } }\n+  std::tr1::unordered_set<int> eus;\n+// { dg-final { note-test eus \"std::tr1::unordered_set with 0 elements\" } }\n+  std::tr1::unordered_multiset<int> eums;\n+// { dg-final { note-test eums \"std::tr1::unordered_multiset with 0 elements\" } }\n+\n+  std::tr1::unordered_map<int, std::string> uom;\n+  uom[5] = \"three\";\n+  uom[3] = \"seven\";\n+// { dg-final { note-test uom {std::tr1::unordered_map with 2 elements = {[3] = \"seven\", [5] = \"three\"}} } }\n+\n+  std::tr1::unordered_multimap<int, std::string> uomm;\n+  uomm.insert(std::pair<int, std::string> (5, \"three\"));\n+  uomm.insert(std::pair<int, std::string> (5, \"seven\"));\n+// { dg-final { note-test uomm {std::tr1::unordered_multimap with 2 elements = {[5] = \"three\", [5] = \"seven\"}} } }\n+\n+  std::tr1::unordered_set<int> uos;\n+  uos.insert(5);\n+// { dg-final { note-test uos {std::tr1::unordered_set with 1 elements = {[0] = 5}} } }\n+\n+  std::tr1::unordered_multiset<int> uoms;\n+  uoms.insert(5);\n+// { dg-final { note-test uoms {std::tr1::unordered_multiset with 1 elements = {[0] = 5}} } }\n+\n+  placeholder(\"\"); // Mark SPOT\n+  use(eum);\n+  use(eumm);\n+  use(eus);\n+  use(eums);\n+  use(uoms);\n+\n+  return 0;\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}