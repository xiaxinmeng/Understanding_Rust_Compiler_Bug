{"sha": "d9f324226541553d4ac2852d1e467f9238304eba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmMzI0MjI2NTQxNTUzZDRhYzI4NTJkMWU0NjdmOTIzODMwNGViYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-16T16:08:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-03-16T16:08:35Z"}, "message": "i386.md (all HI and QI mode non-move patterns): Conditionize by TARGET_[HQ]IMODE_MATH.\n\n\t* i386.md (all HI and QI mode non-move patterns):  Conditionize\n\tby TARGET_[HQ]IMODE_MATH.\n\t* i386.h (x86_himode_math, x86_qimode_math, x86_promote_hi_regs,\n\tx86_promote_qi_regs): Declare.\n\t(TARGET_HIMODE_MATH, TARGET_QIMODE_MATH, TARGET_PROMOTE_HI_REGS,\n\tTARGET_PROMOTE_QI_REGS): New macros.\n\t(PROMOTE_MODE): New macro.\n\t* i386.c (x86_himode_math, x86_qimode_math, x86_promote_hi_regs,\n\tx86_promote_qi_regs): New global variables.\n\nFrom-SVN: r32588", "tree": {"sha": "7df2e7e4bc1d844567858eb4c81bbbda2d5b753a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df2e7e4bc1d844567858eb4c81bbbda2d5b753a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f324226541553d4ac2852d1e467f9238304eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f324226541553d4ac2852d1e467f9238304eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f324226541553d4ac2852d1e467f9238304eba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f324226541553d4ac2852d1e467f9238304eba/comments", "author": null, "committer": null, "parents": [{"sha": "43bc5f13ad0ca6b5de40a9881dd7f5989b6e1916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43bc5f13ad0ca6b5de40a9881dd7f5989b6e1916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43bc5f13ad0ca6b5de40a9881dd7f5989b6e1916"}], "stats": {"total": 106, "additions": 71, "deletions": 35}, "files": [{"sha": "37dc67e4c4d3c2631485bf824d671296214a8c37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9f324226541553d4ac2852d1e467f9238304eba", "patch": "@@ -1,3 +1,15 @@\n+Thu Mar 16 17:03:10 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (all HI and QI mode non-move patterns):  Conditionize\n+\tby TARGET_[HQ]IMODE_MATH.\n+\t* i386.h (x86_himode_math, x86_qimode_math, x86_promote_hi_regs,\n+\tx86_promote_qi_regs): Declare.\n+\t(TARGET_HIMODE_MATH, TARGET_QIMODE_MATH, TARGET_PROMOTE_HI_REGS,\n+\tTARGET_PROMOTE_QI_REGS): New macros.\n+\t(PROMOTE_MODE): New macro.\n+\t* i386.c (x86_himode_math, x86_qimode_math, x86_promote_hi_regs,\n+\tx86_promote_qi_regs): New global variables.\n+\n Thu Mar 16 16:50:44 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (emit_library_call_value_1): Break out from ...; handle"}, {"sha": "e78809fbdf2581429f5c734d059520703d18b8f6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d9f324226541553d4ac2852d1e467f9238304eba", "patch": "@@ -214,6 +214,10 @@ const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486;\n const int x86_single_stringop = m_386;\n+const int x86_qimode_math = ~(0);\n+const int x86_promote_qi_regs = 0;\n+const int x86_himode_math = ~(m_PPRO);\n+const int x86_promote_hi_regs = m_PPRO;\n \n #define AT_BP(mode) (gen_rtx_MEM ((mode), hard_frame_pointer_rtx))\n "}, {"sha": "afaa80d36b6bc0007b7a0d0d642472204042bb66", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d9f324226541553d4ac2852d1e467f9238304eba", "patch": "@@ -163,6 +163,8 @@ extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;\n extern const int x86_use_cltd, x86_read_modify_write;\n extern const int x86_read_modify, x86_split_long_moves;\n extern const int x86_promote_QImode, x86_single_stringop;\n+extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;\n+extern const int x86_promote_hi_regs;\n \n #define TARGET_USE_LEAVE (x86_use_leave & CPUMASK)\n #define TARGET_PUSH_MEMORY (x86_push_memory & CPUMASK)\n@@ -186,6 +188,10 @@ extern const int x86_promote_QImode, x86_single_stringop;\n #define TARGET_READ_MODIFY (x86_read_modify & CPUMASK)\n #define TARGET_PROMOTE_QImode (x86_promote_QImode & CPUMASK)\n #define TARGET_SINGLE_STRINGOP (x86_single_stringop & CPUMASK)\n+#define TARGET_QIMODE_MATH (x86_qimode_math & CPUMASK)\n+#define TARGET_HIMODE_MATH (x86_himode_math & CPUMASK)\n+#define TARGET_PROMOTE_QI_REGS (x86_promote_qi_regs & CPUMASK)\n+#define TARGET_PROMOTE_HI_REGS (x86_promote_hi_regs & CPUMASK)\n \n #define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n \n@@ -1740,6 +1746,19 @@ while (0)\n \n #define PROMOTE_PROTOTYPES 1\n \n+/* A macro to update M and UNSIGNEDP when an object whose type is\n+   TYPE and which has the specified mode and signedness is to be\n+   stored in a register.  This macro is only called when TYPE is a\n+   scalar type.\n+\n+   On i386 it is sometimes usefull to promote HImode and QImode\n+   quantities to SImode.  The choice depends on target type.  */\n+\n+#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE) \t\t\\\n+  if (((MODE) == HImode && TARGET_PROMOTE_HI_REGS)\t\\\n+      || ((MODE) == QImode && TARGET_PROMOTE_QI_REGS))\t\\\n+    (MODE) = SImode;\n+\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "7bac8ac0f36a51298b400b0dff9266149336cfbe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f324226541553d4ac2852d1e467f9238304eba/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d9f324226541553d4ac2852d1e467f9238304eba", "patch": "@@ -900,7 +900,7 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:QI 0 \"general_operand\" \"\")\n \t\t    (match_operand:QI 1 \"general_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"\n {\n   if ((GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -1400,7 +1400,7 @@\n   [(set (attr \"type\")\n      (cond [(and (eq_attr \"alternative\" \"0\")\n \t\t (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n-\t\t\t(const_int 0)))\n+\t\t     (const_int 0)))\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"1,2\")\n \t\t (match_operand:HI 1 \"aligned_operand\" \"\"))\n@@ -3412,7 +3412,7 @@\n \t\t   (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t\t    (match_operand:HI 2 \"general_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (PLUS, HImode, operands); DONE;\")\n \n ;; %%% After Dave's SUBREG_BYTE stuff goes in, re-enable incb %ah\n@@ -3514,7 +3514,7 @@\n \t\t   (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t\t    (match_operand:QI 2 \"general_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (PLUS, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n@@ -3812,7 +3812,7 @@\n \t\t   (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t\t     (match_operand:HI 2 \"general_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (MINUS, HImode, operands); DONE;\")\n \n (define_insn \"*subhi_1\"\n@@ -3853,7 +3853,7 @@\n \t\t   (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t\t     (match_operand:QI 2 \"general_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (MINUS, QImode, operands); DONE;\")\n \n (define_insn \"*subqi_1\"\n@@ -3952,7 +3952,7 @@\n \t\t   (mult:HI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t\t    (match_operand:HI 2 \"general_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"\")\n \n (define_insn \"*mulhi3_1\"\n@@ -3973,7 +3973,7 @@\n \t(mult:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"mul{b}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -3982,7 +3982,7 @@\n \t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"mul{b}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -3991,7 +3991,7 @@\n \t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"imul{b}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -4076,7 +4076,7 @@\n \t(div:QI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t(match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"idiv{b}\\\\t%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"ppro_uops\" \"few\")])\n@@ -4086,7 +4086,7 @@\n \t(udiv:QI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"div{b}\\\\t%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"ppro_uops\" \"few\")])\n@@ -4206,7 +4206,7 @@\n    (set (match_operand:HI 3 \"register_operand\" \"=&d\")\n \t(mod:HI (match_dup 1) (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"cwtd\\;idiv{w}\\\\t%2\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -4260,7 +4260,7 @@\n \t   \t   (umod:HI (match_dup 1) (match_dup 2)))\n \t      (use (match_dup 4))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"operands[4] = gen_reg_rtx (HImode);\")\n \n (define_insn \"*udivmodhi_noext\"\n@@ -4521,7 +4521,7 @@\n \t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (AND, HImode, operands); DONE;\")\n \n (define_insn \"*andhi_1\"\n@@ -4581,7 +4581,7 @@\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (AND, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n@@ -4729,7 +4729,7 @@\n \t(ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (IOR, HImode, operands); DONE;\")\n \n (define_insn \"*iorhi_1\"\n@@ -4757,7 +4757,7 @@\n \t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (IOR, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n@@ -4822,7 +4822,7 @@\n \t(xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (XOR, HImode, operands); DONE;\")\n \n (define_insn \"*xorhi_1\"\n@@ -4850,7 +4850,7 @@\n \t(xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t(match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (XOR, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n@@ -4977,7 +4977,7 @@\n   [(parallel [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_unary_operator (NEG, HImode, operands); DONE;\")\n \n (define_insn \"*neghi2_1\"\n@@ -5012,7 +5012,7 @@\n   [(parallel [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_unary_operator (NEG, QImode, operands); DONE;\")\n \n (define_insn \"*negqi2_1\"\n@@ -5442,7 +5442,7 @@\n (define_expand \"one_cmplhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_unary_operator (NOT, HImode, operands); DONE;\")\n \n (define_insn \"*one_cmplhi2_1\"\n@@ -5480,7 +5480,7 @@\n (define_expand \"one_cmplqi2\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_unary_operator (NOT, QImode, operands); DONE;\")\n \n (define_insn \"*one_cmplqi2_1\"\n@@ -5761,7 +5761,7 @@\n \t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFT, HImode, operands); DONE;\")\n \n (define_insn \"*ashlhi3_1\"\n@@ -5837,7 +5837,7 @@\n \t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFT, QImode, operands); DONE;\")\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n@@ -6075,7 +6075,7 @@\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFTRT, HImode, operands); DONE;\")\n \n (define_insn \"*ashrhi3_1\"\n@@ -6110,7 +6110,7 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFTRT, QImode, operands); DONE;\")\n \n (define_insn \"*ashrqi3_1\"\n@@ -6237,7 +6237,7 @@\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (LSHIFTRT, HImode, operands); DONE;\")\n \n (define_insn \"*lshrhi3_1\"\n@@ -6272,7 +6272,7 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (LSHIFTRT, QImode, operands); DONE;\")\n \n (define_insn \"*lshrqi3_1\"\n@@ -6328,7 +6328,7 @@\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATE, HImode, operands); DONE;\")\n \n (define_insn \"*rotlhi3_1\"\n@@ -6347,7 +6347,7 @@\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t   (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATE, QImode, operands); DONE;\")\n \n (define_insn \"*rotlqi3_1\"\n@@ -6385,7 +6385,7 @@\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATERT, HImode, operands); DONE;\")\n \n (define_insn \"*rotrhi3\"\n@@ -6404,7 +6404,7 @@\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATERT, QImode, operands); DONE;\")\n \n (define_insn \"*rotrqi3_1\"\n@@ -8605,6 +8605,7 @@\n      expanding unless TARGET_INLINE_ALL_STRINGOPS.  */\n \n   if (TARGET_UNROLL_STRLEN && eoschar == const0_rtx && optimize > 1\n+      && !TARGET_INLINE_ALL_STRINGOPS\n       && !optimize_size\n       && (GET_CODE (align) != CONST_INT || INTVAL (align) < 4))\n     FAIL;\n@@ -8730,7 +8731,7 @@\n \t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:HI 2 \"nonimmediate_operand\" \"\")\n \t\t\t (match_operand:HI 3 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE && TARGET_HIMODE_MATH\"\n   \"if (!ix86_expand_int_movcc (operands)) FAIL; DONE;\")\n \n (define_insn \"*movhicc_noc\""}]}