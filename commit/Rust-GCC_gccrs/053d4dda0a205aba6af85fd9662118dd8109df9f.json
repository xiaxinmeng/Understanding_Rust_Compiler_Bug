{"sha": "053d4dda0a205aba6af85fd9662118dd8109df9f", "node_id": "C_kwDOANBUbNoAKDA1M2Q0ZGRhMGEyMDVhYmE2YWY4NWZkOTY2MjExOGRkODEwOWRmOWY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-14T13:46:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-15T14:05:27Z"}, "message": "Speedup DF dataflow solver\n\nThe following makes sure to process blocks that follow the current\nblock in the iteration order in the same iteration and only postpone\nblocks that would be visited earlier to the next iteration.\n\nFor the all.i testcase in PR26854 at -O2 this shaves off 50% of\nthe time to solve the DF RD problem, other problems also improve\nbut not as drastically.\n\n\tPR middle-end/26854\n\t* df-core.cc (df_worklist_propagate_forward): Put later\n\tblocks on worklist and only earlier blocks on pending.\n\t(df_worklist_propagate_backward): Likewise.\n\t(df_worklist_dataflow_doublequeue): Change the iteration\n\tto process new blocks in the same iteration if that\n\tmaintains the iteration order.", "tree": {"sha": "b05b9fd8b225236fff2b03a5e186b1bfd6b62280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b05b9fd8b225236fff2b03a5e186b1bfd6b62280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053d4dda0a205aba6af85fd9662118dd8109df9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053d4dda0a205aba6af85fd9662118dd8109df9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053d4dda0a205aba6af85fd9662118dd8109df9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053d4dda0a205aba6af85fd9662118dd8109df9f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d482b20fd346482635a770281a164a09d608b058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d482b20fd346482635a770281a164a09d608b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d482b20fd346482635a770281a164a09d608b058"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "38f69ac57431381ac569b3761bb36a6ab84f3a74", "filename": "gcc/df-core.cc", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053d4dda0a205aba6af85fd9662118dd8109df9f/gcc%2Fdf-core.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053d4dda0a205aba6af85fd9662118dd8109df9f/gcc%2Fdf-core.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.cc?ref=053d4dda0a205aba6af85fd9662118dd8109df9f", "patch": "@@ -874,7 +874,8 @@ make_pass_df_finish (gcc::context *ctxt)\n /* Helper function for df_worklist_dataflow.\n    Propagate the dataflow forward.\n    Given a BB_INDEX, do the dataflow propagation\n-   and set bits on for successors in PENDING\n+   and set bits on for successors in PENDING for earlier\n+   and WORKLIST for later in bbindex_to_postorder\n    if the out set of the dataflow has changed.\n \n    AGE specify time when BB was visited last time.\n@@ -890,10 +891,11 @@ make_pass_df_finish (gcc::context *ctxt)\n \n static bool\n df_worklist_propagate_forward (struct dataflow *dataflow,\n-                               unsigned bb_index,\n-                               unsigned *bbindex_to_postorder,\n-                               bitmap pending,\n-                               sbitmap considered,\n+\t\t\t       unsigned bb_index,\n+\t\t\t       unsigned *bbindex_to_postorder,\n+\t\t\t       bitmap worklist,\n+\t\t\t       bitmap pending,\n+\t\t\t       sbitmap considered,\n \t\t\t       vec<int> &last_change_age,\n \t\t\t       int age)\n {\n@@ -924,7 +926,13 @@ df_worklist_propagate_forward (struct dataflow *dataflow,\n           unsigned ob_index = e->dest->index;\n \n           if (bitmap_bit_p (considered, ob_index))\n-            bitmap_set_bit (pending, bbindex_to_postorder[ob_index]);\n+\t    {\n+\t      if (bbindex_to_postorder[bb_index]\n+\t\t  < bbindex_to_postorder[ob_index])\n+\t\tbitmap_set_bit (worklist, bbindex_to_postorder[ob_index]);\n+\t      else\n+\t\tbitmap_set_bit (pending, bbindex_to_postorder[ob_index]);\n+\t    }\n         }\n       return true;\n     }\n@@ -937,10 +945,11 @@ df_worklist_propagate_forward (struct dataflow *dataflow,\n \n static bool\n df_worklist_propagate_backward (struct dataflow *dataflow,\n-                                unsigned bb_index,\n-                                unsigned *bbindex_to_postorder,\n-                                bitmap pending,\n-                                sbitmap considered,\n+\t\t\t\tunsigned bb_index,\n+\t\t\t\tunsigned *bbindex_to_postorder,\n+\t\t\t\tbitmap worklist,\n+\t\t\t\tbitmap pending,\n+\t\t\t\tsbitmap considered,\n \t\t\t\tvec<int> &last_change_age,\n \t\t\t\tint age)\n {\n@@ -971,7 +980,13 @@ df_worklist_propagate_backward (struct dataflow *dataflow,\n           unsigned ob_index = e->src->index;\n \n           if (bitmap_bit_p (considered, ob_index))\n-            bitmap_set_bit (pending, bbindex_to_postorder[ob_index]);\n+\t    {\n+\t      if (bbindex_to_postorder[bb_index]\n+\t\t  < bbindex_to_postorder[ob_index])\n+\t\tbitmap_set_bit (worklist, bbindex_to_postorder[ob_index]);\n+\t      else\n+\t\tbitmap_set_bit (pending, bbindex_to_postorder[ob_index]);\n+\t    }\n         }\n       return true;\n     }\n@@ -1021,36 +1036,37 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n      and pending is for the next. */\n   while (!bitmap_empty_p (pending))\n     {\n-      bitmap_iterator bi;\n-      unsigned int index;\n-\n       std::swap (pending, worklist);\n \n-      EXECUTE_IF_SET_IN_BITMAP (worklist, 0, index, bi)\n+      do\n \t{\n+\t  unsigned index = bitmap_first_set_bit (worklist);\n+\t  bitmap_clear_bit (worklist, index);\n+\n \t  unsigned bb_index;\n \t  dcount++;\n \n-\t  bitmap_clear_bit (pending, index);\n \t  bb_index = blocks_in_postorder[index];\n \t  prev_age = last_visit_age[index];\n \t  if (dir == DF_FORWARD)\n \t    changed = df_worklist_propagate_forward (dataflow, bb_index,\n \t\t\t\t\t\t     bbindex_to_postorder,\n-\t\t\t\t\t\t     pending, considered,\n+\t\t\t\t\t\t     worklist, pending,\n+\t\t\t\t\t\t     considered,\n \t\t\t\t\t\t     last_change_age,\n \t\t\t\t\t\t     prev_age);\n \t  else\n \t    changed = df_worklist_propagate_backward (dataflow, bb_index,\n \t\t\t\t\t\t      bbindex_to_postorder,\n-\t\t\t\t\t\t      pending, considered,\n+\t\t\t\t\t\t      worklist, pending,\n+\t\t\t\t\t\t      considered,\n \t\t\t\t\t\t      last_change_age,\n \t\t\t\t\t\t      prev_age);\n \t  last_visit_age[index] = ++age;\n \t  if (changed)\n \t    last_change_age[index] = age;\n \t}\n-      bitmap_clear (worklist);\n+      while (!bitmap_empty_p (worklist));\n     }\n \n   BITMAP_FREE (worklist);"}]}