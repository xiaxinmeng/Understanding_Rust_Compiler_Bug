{"sha": "69f5aa9bd559826bd0651f4a76af287a3ad90708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmNWFhOWJkNTU5ODI2YmQwNjUxZjRhNzZhZjI4N2EzYWQ5MDcwOA==", "commit": {"author": {"name": "Sandeep Kumar Singh", "email": "Sandeep.Singh2@kpitcummins.com", "date": "2013-05-29T16:29:15Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-05-29T16:29:15Z"}, "message": "rx.h (TARGET_CPU_CPP_BUILTINS): Add macros for RX100, RX200, and RX600.\n\n\t* rx/rx.h (TARGET_CPU_CPP_BUILTINS): Add macros for RX100, RX200,\n\tand RX600.\n\t* rx/rx.opt: Add macro for rx100 with string rx100 and value\n\tRX100.\n\t* rx/rx-opts.h (rx_cpu_types): Add new cpu type rx100.\n\t* rx/t-rx: Add rx100 under multi library matches option for nofpu\n\toption.\n\nFrom-SVN: r199417", "tree": {"sha": "90e286ce570607f264b04bdd31045ee5c131ef5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e286ce570607f264b04bdd31045ee5c131ef5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f5aa9bd559826bd0651f4a76af287a3ad90708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f5aa9bd559826bd0651f4a76af287a3ad90708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f5aa9bd559826bd0651f4a76af287a3ad90708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f5aa9bd559826bd0651f4a76af287a3ad90708/comments", "author": {"login": "Sandy007", "id": 2338996, "node_id": "MDQ6VXNlcjIzMzg5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2338996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sandy007", "html_url": "https://github.com/Sandy007", "followers_url": "https://api.github.com/users/Sandy007/followers", "following_url": "https://api.github.com/users/Sandy007/following{/other_user}", "gists_url": "https://api.github.com/users/Sandy007/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sandy007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sandy007/subscriptions", "organizations_url": "https://api.github.com/users/Sandy007/orgs", "repos_url": "https://api.github.com/users/Sandy007/repos", "events_url": "https://api.github.com/users/Sandy007/events{/privacy}", "received_events_url": "https://api.github.com/users/Sandy007/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b847da9ca10712f26b8d7c3e94fcde438964673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b847da9ca10712f26b8d7c3e94fcde438964673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b847da9ca10712f26b8d7c3e94fcde438964673"}], "stats": {"total": 108, "additions": 97, "deletions": 11}, "files": [{"sha": "13807be66ce8baf6e1be747455b366644a197ed0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -1,3 +1,13 @@\n+2013-05-29  Sandeep Kumar Singh  <Sandeep.Singh2@kpitcummins.com>\n+\n+\t* rx/rx.h (TARGET_CPU_CPP_BUILTINS): Add macros for RX100, RX200,\n+\tand RX600.\n+\t* rx/rx.opt: Add macro for rx100 with string rx100 and value\n+\tRX100.\n+\t* rx/rx-opts.h (rx_cpu_types): Add new cpu type rx100.\n+\t* rx/t-rx: Add rx100 under multi library matches option for nofpu\n+\toption.\n+\n 2013-05-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/57441"}, {"sha": "4d5455e8d8d179ac1136f632c9c104e73ac26aff", "filename": "gcc/config/rx/rx-opts.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-opts.h?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -24,7 +24,8 @@ enum rx_cpu_types\n {\n   RX600,\n   RX610,\n-  RX200\n+  RX200,\n+  RX100\n };\n \n #endif"}, {"sha": "d781bb73d287369b197b006572f0d7a2483a4157", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -975,6 +975,8 @@ rx_gen_move_template (rtx * operands, bool is_movu)\n \t   loading an immediate into a register.  */\n \textension = \".W\";\n       break;\n+    case DFmode:\n+    case DImode:\n     case SFmode:\n     case SImode:\n       extension = \".L\";\n@@ -988,19 +990,44 @@ rx_gen_move_template (rtx * operands, bool is_movu)\n     }\n \n   if (MEM_P (src) && rx_pid_data_operand (XEXP (src, 0)) == PID_UNENCODED)\n-    src_template = \"(%A1-__pid_base)[%P1]\";\n+    {\n+      gcc_assert (GET_MODE (src) != DImode);\n+      gcc_assert (GET_MODE (src) != DFmode);\n+      \n+      src_template = \"(%A1 - __pid_base)[%P1]\";\n+    }\n   else if (MEM_P (src) && rx_small_data_operand (XEXP (src, 0)))\n-    src_template = \"%%gp(%A1)[%G1]\";\n+    {\n+      gcc_assert (GET_MODE (src) != DImode);\n+      gcc_assert (GET_MODE (src) != DFmode);\n+      \n+      src_template = \"%%gp(%A1)[%G1]\";\n+    }\n   else\n     src_template = \"%1\";\n \n   if (MEM_P (dest) && rx_small_data_operand (XEXP (dest, 0)))\n-    dst_template = \"%%gp(%A0)[%G0]\";\n+    {\n+      gcc_assert (GET_MODE (dest) != DImode);\n+      gcc_assert (GET_MODE (dest) != DFmode);\n+      \n+      dst_template = \"%%gp(%A0)[%G0]\";\n+    }\n   else\n     dst_template = \"%0\";\n \n-  sprintf (out_template, \"%s%s\\t%s, %s\", is_movu ? \"movu\" : \"mov\",\n-\t   extension, src_template, dst_template);\n+  if (GET_MODE (dest) == DImode || GET_MODE (dest) == DFmode)\n+    {\n+      gcc_assert (! is_movu);\n+\n+      if (REG_P (src) && REG_P (dest) && (REGNO (dest) == REGNO (src) + 1))\n+\tsprintf (out_template, \"mov.L\\t%H1, %H0 | mov.L\\t%1, %0\");\n+      else\n+\tsprintf (out_template, \"mov.L\\t%1, %0 | mov.L\\t%H1, %H0\");\n+    }\n+  else\n+    sprintf (out_template, \"%s%s\\t%s, %s\", is_movu ? \"movu\" : \"mov\",\n+\t     extension, src_template, dst_template);\n   return out_template;\n }\n \f\n@@ -3240,6 +3267,12 @@ rx_ok_to_inline (tree caller, tree callee)\n     || lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (callee)) != NULL_TREE;\n }\n \n+static bool\n+rx_enable_lra (void)\n+{\n+  return TARGET_ENABLE_LRA || 1;\n+}\n+\n \f\n #undef  TARGET_NARROW_VOLATILE_BITFIELD\n #define TARGET_NARROW_VOLATILE_BITFIELD\t\trx_narrow_volatile_bitfield\n@@ -3391,6 +3424,9 @@ rx_ok_to_inline (tree caller, tree callee)\n #undef  TARGET_WARN_FUNC_RETURN\n #define TARGET_WARN_FUNC_RETURN \t\trx_warn_func_return\n \n+#undef  TARGET_LRA_P\n+#define TARGET_LRA_P \t\t\t\trx_enable_lra\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rx.h\""}, {"sha": "72aee2fe21406c7dab059d4cce7fdc7fec107b26", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -29,9 +29,22 @@\n           builtin_define (\"__RX610__\");\t\t\\\n           builtin_assert (\"machine=RX610\");\t\\\n \t}\t\t\t\t\t\\\n-     else\t\t\t\t\t\\\n-        builtin_assert (\"machine=RX600\");\t\\\n-      \t\t\t\t\t\t\\\n+      else if (rx_cpu_type == RX100)\t\t\\\n+\t{\t\t\t\t\t\\\n+          builtin_define (\"__RX100__\");\t\t\\\n+          builtin_assert (\"machine=RX100\");\t\\\n+\t}\t\t\t\t\t\\\n+      else if (rx_cpu_type == RX200)\t\t\\\n+\t{\t\t\t\t\t\\\n+          builtin_define (\"__RX200__\");\t\t\\\n+          builtin_assert (\"machine=RX200\");\t\\\n+        }\t\t\t\t\t\\\n+      else if (rx_cpu_type == RX600)\t\t\\\n+        {\t\t\t\t\t\\\n+          builtin_define (\"__RX600__\");\t\t\\\n+          builtin_assert (\"machine=RX600\");\t\\\n+        }\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n       if (TARGET_BIG_ENDIAN_DATA)\t\t\\\n \tbuiltin_define (\"__RX_BIG_ENDIAN__\");\t\\\n       else\t\t\t\t\t\\\n@@ -60,6 +73,7 @@\n #undef  CC1_SPEC\n #define CC1_SPEC \"\\\n   %{mas100-syntax:%{gdwarf*:%e-mas100-syntax is incompatible with -gdwarf}} \\\n+  %{mcpu=rx100:%{fpu:%erx100 cpu does not have FPU hardware}} \\\n   %{mcpu=rx200:%{fpu:%erx200 cpu does not have FPU hardware}}\"\n \n #undef  STARTFILE_SPEC"}, {"sha": "692b7d220a3558d81cc5521a4872622db8b1f4df", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -30,7 +30,7 @@\n ;; then all operations on doubles have to be handled by\n ;; library functions.\n (define_mode_iterator register_modes\n-  [(SF \"ALLOW_RX_FPU_INSNS\") (SI \"\") (HI \"\") (QI \"\")])\n+  [(SF \"\") (SI \"\") (HI \"\") (QI \"\")])\n \n (define_constants\n   [\n@@ -2621,3 +2621,21 @@\n   \"\"\n   \"\"\n )\n+\n+(define_insn \"movdi\"\n+  [(set:DI (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n+\t   (match_operand:DI 1 \"general_operand\"      \"rmi\"))]\n+  \"TARGET_ENABLE_LRA || 1\"\n+  { return rx_gen_move_template (operands, false); }\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"timings\" \"22\")]\n+)\n+\n+(define_insn \"movdf\"\n+  [(set:DF (match_operand:DF 0 \"nonimmediate_operand\" \"=rm\")\n+\t   (match_operand:DF 1 \"general_operand\"      \"rmi\"))]\n+  \"TARGET_ENABLE_LRA || 1\"\n+  { return rx_gen_move_template (operands, false); }\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"timings\" \"22\")]\n+)"}, {"sha": "12312cfef6be9e6deb47c2f086dc04a9266b0445", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -61,6 +61,9 @@ Enum(rx_cpu_types) String(rx200) Value(RX200)\n EnumValue\n Enum(rx_cpu_types) String(rx600) Value(RX600)\n \n+EnumValue\n+Enum(rx_cpu_types) String(rx100) Value(RX100)\n+\n ;---------------------------------------------------\n \n mbig-endian-data\n@@ -132,3 +135,7 @@ Enable the use of the old, broken, ABI where all stacked function arguments are\n mrx-abi\n Target RejectNegative Report InverseMask(GCC_ABI)\n Enable the use the standard RX ABI where all stacked function arguments are naturally aligned.  This is the default.\n+\n+mlra\n+Target Report Mask(ENABLE_LRA)\n+Enable the use of the LRA register allocator."}, {"sha": "41a3d3a98dc273d23929463723c765cca3d4466a", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f5aa9bd559826bd0651f4a76af287a3ad90708/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=69f5aa9bd559826bd0651f4a76af287a3ad90708", "patch": "@@ -28,7 +28,7 @@ MULTILIB_DIRNAMES   =  64-bit-double  no-fpu-libs   big-endian-data   pid\n # MULTILIB_OPTIONS    += mgcc-abi\n # MULTILIB_DIRNAMES   +=  gcc-abi\n \n-MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200\n+MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200  nofpu=mcpu?rx100\n \n MULTILIB_EXCEPTIONS =\n MULTILIB_EXTRA_OPTS = "}]}