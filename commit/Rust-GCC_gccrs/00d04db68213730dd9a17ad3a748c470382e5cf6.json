{"sha": "00d04db68213730dd9a17ad3a748c470382e5cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMDRkYjY4MjEzNzMwZGQ5YTE3YWQzYTc0OGM0NzAzODJlNWNmNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-27T20:56:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-27T20:56:46Z"}, "message": "atomicity.h: Include c++config.h to get defines.\n\n\n2004-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/cpu/hppa/atomicity.h: Include c++config.h to get defines.\n\n\t* src/misc-inst.cc (_S_atomicity_lock): Move to __gnu_cxx.\n\n\t* config/os/irix/irix5.2/atomicity.h: Merge..\n\t* config/os/irix/irix6.5/atomicity.h: Merge..\n\t* config/os/irix/atomicity.h: ...into this.\n\t* config/os/irix/atomic_word.h: New.\n\t* configure.host: Set atomic_word_dir for irix.\n\n\t* hppa/atomicity.h: Change __Atomicity_lock to _Atomicity_lock.\n\t* i386/atomicity.h: Same.\n\t* m68k/atomicity.h: Same.\n\t* sparc/atomicity.h: Same.\n\nFrom-SVN: r78577", "tree": {"sha": "cebcd004858b979fcd297bf6b2c14d865aa20a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cebcd004858b979fcd297bf6b2c14d865aa20a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d04db68213730dd9a17ad3a748c470382e5cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d04db68213730dd9a17ad3a748c470382e5cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d04db68213730dd9a17ad3a748c470382e5cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d04db68213730dd9a17ad3a748c470382e5cf6/comments", "author": null, "committer": null, "parents": [{"sha": "c284a1261d4c603c648231f9e98b700a3602682e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c284a1261d4c603c648231f9e98b700a3602682e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c284a1261d4c603c648231f9e98b700a3602682e"}], "stats": {"total": 154, "additions": 75, "deletions": 79}, "files": [{"sha": "c6fe7ae3f6caad09fb4b2a704a9cc662a87618f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -1,7 +1,24 @@\n+2004-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/cpu/hppa/atomicity.h: Include c++config.h to get defines.\n+\n+\t* src/misc-inst.cc (_S_atomicity_lock): Move to __gnu_cxx.\n+\n+\t* config/os/irix/irix5.2/atomicity.h: Merge..\n+\t* config/os/irix/irix6.5/atomicity.h: Merge..\n+\t* config/os/irix/atomicity.h: ...into this.\n+\t* config/os/irix/atomic_word.h: New.\n+\t* configure.host: Set atomic_word_dir for irix.\n+\n+\t* hppa/atomicity.h: Change __Atomicity_lock to _Atomicity_lock.\n+\t* i386/atomicity.h: Same.\n+\t* m68k/atomicity.h: Same.\n+\t* sparc/atomicity.h: Same.\n+\n 2004-02-27  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/os/aix/atomicity.h: Use __gnu_cxx namespace. Remove\n-\tstatic, and inline keyworks.\n+\tstatic, and inline keywords.\n \n 2004-02-27  Paolo Carlini  <pcarlini@suse.de>\n \n@@ -74,7 +91,7 @@\n \t(ios_base::Init::~Init): Same.\n \t* src/locale.cc (locale::id::_M_id): Same.\n \t* config/cpu/i486/atomicity.h: Use __gnu_cxx namespace. Remove\n-\tstatic, and inline keyworks.\n+\tstatic, and inline keywords.\n \t* config/cpu/alpha/atomicity.h: Same.\n \t* config/cpu/cris/atomicity.h: Same.\n \t* config/cpu/generic/atomicity.h: Same."}, {"sha": "2b1ce90de47f5ea79cee080bc6d29f77e2587561", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -27,26 +27,26 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+#include <bits/c++config.h>\n #include <bits/atomicity.h>\n \n namespace __gnu_cxx\n {\n-  template<int __inst>\n-    struct __Atomicity_lock\n+  template<int _Inst>\n+    struct _Atomicity_lock\n     {\n       static volatile int _S_atomicity_lock;\n     };\n   \n-  template<int __inst>\n+  template<int _Inst>\n   volatile int\n-  __Atomicity_lock<__inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n+  _Atomicity_lock<_Inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n \n-  /* Because of the lack of weak support when using the hpux\n-     som linker, we explicitly instantiate the atomicity lock\n-     in src/misc-inst.cc when _GLIBCXX_INST_ATOMICITY_LOCK\n-     is defined.  */\n+  // Because of the lack of weak support when using the hpux som\n+  // linker, we explicitly instantiate the atomicity lock in\n+  // src/misc-inst.cc when _GLIBCXX_INST_ATOMICITY_LOCK is defined.\n #ifndef _GLIBCXX_INST_ATOMICITY_LOCK\n-  template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n+  template volatile int _Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n \n   int\n@@ -55,7 +55,7 @@ namespace __gnu_cxx\n   {\n     _Atomic_word result;\n     int tmp;\n-    volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+    volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n     \n     __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n@@ -79,7 +79,7 @@ namespace __gnu_cxx\n   __atomic_add(_Atomic_word* __mem, int __val)\n   {\n     int tmp;\n-    volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+    volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n     \n     __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\""}, {"sha": "92c03d59ab3194ec01f04b51ef11d22006c79c75", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -32,15 +32,15 @@\n namespace __gnu_cxx\n {\n   template<int __inst>\n-    struct __Atomicity_lock\n+    struct _Atomicity_lock\n     {\n       static volatile _Atomic_word _S_atomicity_lock;\n     };\n \n   template<int __inst>\n-  volatile _Atomic_word __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+  volatile _Atomic_word _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n \n-  template volatile _Atomic_word __Atomicity_lock<0>::_S_atomicity_lock;\n+  template volatile _Atomic_word _Atomicity_lock<0>::_S_atomicity_lock;\n   \n   _Atomic_word \n   __attribute__ ((__unused__))\n@@ -52,17 +52,17 @@ namespace __gnu_cxx\n     do \n       {\n \t__asm__ __volatile__ (\"xchg{l} {%0,%1|%1,%0}\"\n-\t\t\t      : \"=m\" (__Atomicity_lock<0>::_S_atomicity_lock),\n+\t\t\t      : \"=m\" (_Atomicity_lock<0>::_S_atomicity_lock),\n \t\t\t      \"+r\" (__tmp)\n-\t\t\t      : \"m\" (__Atomicity_lock<0>::_S_atomicity_lock));\n+\t\t\t      : \"m\" (_Atomicity_lock<0>::_S_atomicity_lock));\n       } \n     while (__tmp);\n     \n     __result = *__mem;\n     *__mem += __val;\n     \n     // Release spin lock.\n-    __Atomicity_lock<0>::_S_atomicity_lock = 0;\n+    _Atomicity_lock<0>::_S_atomicity_lock = 0;\n     \n     return __result;\n   }"}, {"sha": "0e58f3c5f079bf7353112a80bc5a03a12e853fd3", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -72,15 +72,15 @@ namespace __gnu_cxx\n #else\n   \n   template<int __inst>\n-    struct __Atomicity_lock\n+    struct _Atomicity_lock\n     {\n       static volatile unsigned char _S_atomicity_lock;\n     };\n \n   template<int __inst>\n-  volatile unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+  volatile unsigned char _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n   \n-  template volatile unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n+  template volatile unsigned char _Atomicity_lock<0>::_S_atomicity_lock;\n   \n   _Atomic_word \n   __attribute__ ((__unused__))\n@@ -92,13 +92,13 @@ namespace __gnu_cxx\n #if defined(__mcf5200__) || defined(__mcf5300__)\n     __asm__ __volatile__(\"1: bset.b #7,%0@\\n\\tjbne 1b\"\n \t\t\t : /* no outputs */\n-\t\t\t : \"a\"(&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"a\"(&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"cc\", \"memory\");\n     \n     // CPU32 and MCF5400 support test-and-set (SMP-safe).\n #elif defined(__mcpu32__) || defined(__mcf5400__)\n     __asm__ __volatile__(\"1: tas %0\\n\\tjbne 1b\"\n-\t\t\t : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"+m\"(_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : /* none */\n \t\t\t : \"cc\");\n     \n@@ -107,15 +107,15 @@ namespace __gnu_cxx\n     // memory controllers.\n #else\n     __asm__ __volatile__(\"1: bset.b #7,%0\\n\\tjbne 1b\"\n-\t\t\t : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"+m\"(_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : /* none */\n \t\t\t : \"cc\");\n #endif\n     \n     __result = *__mem;\n     *__mem = __result + __val;\n     \n-    __Atomicity_lock<0>::_S_atomicity_lock = 0;\n+    _Atomicity_lock<0>::_S_atomicity_lock = 0;\n     \n     return __result;\n   }"}, {"sha": "a39153b7139c6ac2c6e78b1e58ddf58ea73f2909", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -70,15 +70,15 @@ namespace __gnu_cxx\n #else /* __arch32__ */\n \n   template<int __inst>\n-    struct __Atomicity_lock\n+    struct _Atomicity_lock\n     {\n       static unsigned char _S_atomicity_lock;\n     };\n \n   template<int __inst>\n-  unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+  unsigned char _Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n   \n-  template unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n+  template unsigned char _Atomicity_lock<0>::_S_atomicity_lock;\n   \n   _Atomic_word\n   __attribute__ ((__unused__))\n@@ -91,13 +91,13 @@ namespace __gnu_cxx\n \t\t\t \"\tbne\t1b\\n\\t\"\n \t\t\t \"\t nop\"\n \t\t\t : \"=&r\" (__tmp)\n-\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"r\" (&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"memory\");\n     __result = *__mem;\n     *__mem += __val;\n     __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n \t\t\t : /* no outputs */\n-\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"r\" (&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"memory\");\n     return __result;\n   }\n@@ -113,12 +113,12 @@ namespace __gnu_cxx\n \t\t\t \"\tbne\t1b\\n\\t\"\n \t\t\t \"\t nop\"\n \t\t\t : \"=&r\" (__tmp)\n-\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"r\" (&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"memory\");\n     *__mem += __val;\n     __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n \t\t\t : /* no outputs */\n-\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"r\" (&_Atomicity_lock<0>::_S_atomicity_lock)\n \t\t\t : \"memory\");\n   }  \n #endif /* __arch32__ */"}, {"sha": "68b8101c737ed026b47d27dff2c03210920ed41e", "filename": "libstdc++-v3/config/os/irix/atomic_word.h", "status": "renamed", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomic_word.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -1,6 +1,6 @@\n-// Low-level functions for atomic operations: IRIX version  -*- C++ -*-\n+// Low-level type for atomic operations -*- C++ -*-\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,24 +27,9 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n-\n-#include <mutex.h>\n+#ifndef _GLIBCXX_ATOMIC_WORD_H\n+#define _GLIBCXX_ATOMIC_WORD_H\t1\n \n typedef long _Atomic_word;\n \n-static inline _Atomic_word\n-__exchange_and_add (_Atomic_word* __mem, int __val)\n-{\n-  return (_Atomic_word) test_then_add ((unsigned long*) __mem, __val);\n-}\n-\n-\n-static inline void\n-__atomic_add (_Atomic_word* __mem, int __val)\n-{\n-  __exchange_and_add (__mem, __val);\n-}\n-\n-#endif /* atomicity.h */\n+#endif ", "previous_filename": "libstdc++-v3/config/os/irix/irix6.5/atomicity.h"}, {"sha": "83e9e029338d0db98fa1fb54fa7a0698eff12225", "filename": "libstdc++-v3/config/os/irix/atomicity.h", "status": "renamed", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fatomicity.h?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: IRIX version  -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,24 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n-\n #include <mutex.h>\n+#include <bits/atomicity.h>\n \n-typedef long _Atomic_word;\n-\n-static inline _Atomic_word\n-__exchange_and_add (_Atomic_word* __mem, int __val)\n-{\n-  return (_Atomic_word) test_then_add ((unsigned long*) __mem, __val);\n-}\n-\n-\n-static inline void\n-__atomic_add (_Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  __exchange_and_add (__mem, __val);\n-}\n-\n-#endif /* atomicity.h */\n+  _Atomic_word\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  { return (_Atomic_word) test_then_add((unsigned long*) const_cast<_Atomic_word*>(__mem), __val); }\n+\n+  void\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx", "previous_filename": "libstdc++-v3/config/os/irix/irix5.2/atomicity.h"}, {"sha": "747cf74099a9bee74eb4330daef506f8031f833b", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -170,11 +170,13 @@ case \"${host_os}\" in\n   irix[1-6] | irix[1-5].* | irix6.[0-4]*)\n     # This is known to work on at least IRIX 5.2 and 6.3.\n     os_include_dir=\"os/irix/irix5.2\"\n-    atomicity_dir=$os_include_dir\n+    atomicity_dir=os/irix\n+    atomic_word_dir=os/irix\n     ;;\n   irix6.5*)\n     os_include_dir=\"os/irix/irix6.5\"\n-    atomicity_dir=$os_include_dir\n+    atomicity_dir=os/irix\n+    atomic_word_dir=os/irix\n     ;;\n   mingw32*)\n     os_include_dir=\"os/mingw32\""}, {"sha": "c44965259287da257c1fdff7734908453c425b6c", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d04db68213730dd9a17ad3a748c470382e5cf6/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=00d04db68213730dd9a17ad3a748c470382e5cf6", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,10 +42,6 @@\n \n namespace std\n {\n-#ifdef _GLIBCXX_INST_ATOMICITY_LOCK\n-  template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n-#endif\n-\n   // string related to iostreams\n   template \n     basic_istream<char>& \n@@ -77,6 +73,10 @@ namespace std\n \n namespace __gnu_cxx\n {\n+#ifdef _GLIBCXX_INST_ATOMICITY_LOCK\n+  template volatile int _Atomicity_lock<0>::_S_atomicity_lock;\n+#endif\n+\n #ifdef _GLIBCXX_NEED_GENERIC_MUTEX\n #ifdef __GTHREAD_MUTEX_INIT\n   __gthread_mutex_t _Atomic_add_mutex = __GTHREAD_MUTEX_INIT;"}]}