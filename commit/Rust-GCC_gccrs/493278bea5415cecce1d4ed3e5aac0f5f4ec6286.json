{"sha": "493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzMjc4YmVhNTQxNWNlY2NlMWQ0ZWQzZTVhYWMwZjVmNGVjNjI4Ng==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2009-12-31T16:58:55Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2009-12-31T16:58:55Z"}, "message": "New test case.\n\nFrom-SVN: r155538", "tree": {"sha": "9b516d7e5eab4b96be08cc93fe70e5832cf5828a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b516d7e5eab4b96be08cc93fe70e5832cf5828a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493278bea5415cecce1d4ed3e5aac0f5f4ec6286/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b3d7a7e92671080395d91dc5f774cded578d7e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3d7a7e92671080395d91dc5f774cded578d7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3d7a7e92671080395d91dc5f774cded578d7e0"}], "stats": {"total": 348, "additions": 348, "deletions": 0}, "files": [{"sha": "10a74d550376b7c891a1f64a8f6bf3e8b5010552", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493278bea5415cecce1d4ed3e5aac0f5f4ec6286/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493278bea5415cecce1d4ed3e5aac0f5f4ec6286/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "patch": "@@ -1,3 +1,9 @@\n+2009-12-31  Anthony Green  <green@redhat.com>\n+\t    Blake Chaffin.\n+\n+\t* testsuite/libffi.call/huge_struct.c: New test case from Blake\n+\tChaffin @ Apple.\n+\n 2009-12-28  David Edelsohn  <edelsohn@gnu.org>\n \n \t* src/powerpc/ffi_darwin.c (ffi_prep_args): Copy abi and nargs to"}, {"sha": "9cffb718c985fbccdd1155877f9ce3bf620f231f", "filename": "libffi/testsuite/libffi.call/huge_struct.c", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493278bea5415cecce1d4ed3e5aac0f5f4ec6286/libffi%2Ftestsuite%2Flibffi.call%2Fhuge_struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493278bea5415cecce1d4ed3e5aac0f5f4ec6286/libffi%2Ftestsuite%2Flibffi.call%2Fhuge_struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fhuge_struct.c?ref=493278bea5415cecce1d4ed3e5aac0f5f4ec6286", "patch": "@@ -0,0 +1,342 @@\n+/*\tArea:\t\t\tffi_call, closure_call\n+\tPurpose:\t\tCheck large structure returns.\n+\tLimitations:\tnone.\n+\tPR:\t\t\t\tnone.\n+\tOriginator:\t\tBlake Chaffin\t6/18/2007\n+*/\n+\n+/* { dg-excess-errors \"\" { target x86_64-*-mingw* x86_64-*-cygwin* } } */\n+/* { dg-do run { xfail strongarm*-*-* xscale*-*-* } } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+/* { dg-output \"\" { xfail x86_64-*-mingw* x86_64-*-cygwin* } } */\n+\n+#include \"ffitest.h\"\n+\n+typedef\tstruct BigStruct{\n+\tuint8_t\t\ta;\n+\tint8_t\t\tb;\n+\tuint16_t\tc;\n+\tint16_t\t\td;\n+\tuint32_t\te;\n+\tint32_t\t\tf;\n+\tuint64_t\tg;\n+\tint64_t\t\th;\n+\tfloat\t\ti;\n+\tdouble\t\tj;\n+\tlong double\tk;\n+\tchar*\t\tl;\n+\tuint8_t\t\tm;\n+\tint8_t\t\tn;\n+\tuint16_t\to;\n+\tint16_t\t\tp;\n+\tuint32_t\tq;\n+\tint32_t\t\tr;\n+\tuint64_t\ts;\n+\tint64_t\t\tt;\n+\tfloat\t\tu;\n+\tdouble\t\tv;\n+\tlong double\tw;\n+\tchar*\t\tx;\n+\tuint8_t\t\ty;\n+\tint8_t\t\tz;\n+\tuint16_t\taa;\n+\tint16_t\t\tbb;\n+\tuint32_t\tcc;\n+\tint32_t\t\tdd;\n+\tuint64_t\tee;\n+\tint64_t\t\tff;\n+\tfloat\t\tgg;\n+\tdouble\t\thh;\n+\tlong double\tii;\n+\tchar*\t\tjj;\n+\tuint8_t\t\tkk;\n+\tint8_t\t\tll;\n+\tuint16_t\tmm;\n+\tint16_t\t\tnn;\n+\tuint32_t\too;\n+\tint32_t\t\tpp;\n+\tuint64_t\tqq;\n+\tint64_t\t\trr;\n+\tfloat\t\tss;\n+\tdouble\t\ttt;\n+\tlong double\tuu;\n+\tchar*\t\tvv;\n+\tuint8_t\t\tww;\n+\tint8_t\t\txx;\n+} BigStruct;\n+\n+BigStruct\n+test_large_fn(\n+\tuint8_t\t\tui8_1,\n+\tint8_t\t\tsi8_1,\n+\tuint16_t\tui16_1,\n+\tint16_t\t\tsi16_1,\n+\tuint32_t\tui32_1,\n+\tint32_t\t\tsi32_1,\n+\tuint64_t\tui64_1,\n+\tint64_t\t\tsi64_1,\n+\tfloat\t\tf_1,\n+\tdouble\t\td_1,\n+\tlong double\tld_1,\n+\tchar*\t\tp_1,\n+\tuint8_t\t\tui8_2,\n+\tint8_t\t\tsi8_2,\n+\tuint16_t\tui16_2,\n+\tint16_t\t\tsi16_2,\n+\tuint32_t\tui32_2,\n+\tint32_t\t\tsi32_2,\n+\tuint64_t\tui64_2,\n+\tint64_t\t\tsi64_2,\n+\tfloat\t\tf_2,\n+\tdouble\t\td_2,\n+\tlong double\tld_2,\n+\tchar*\t\tp_2,\n+\tuint8_t\t\tui8_3,\n+\tint8_t\t\tsi8_3,\n+\tuint16_t\tui16_3,\n+\tint16_t\t\tsi16_3,\n+\tuint32_t\tui32_3,\n+\tint32_t\t\tsi32_3,\n+\tuint64_t\tui64_3,\n+\tint64_t\t\tsi64_3,\n+\tfloat\t\tf_3,\n+\tdouble\t\td_3,\n+\tlong double\tld_3,\n+\tchar*\t\tp_3,\n+\tuint8_t\t\tui8_4,\n+\tint8_t\t\tsi8_4,\n+\tuint16_t\tui16_4,\n+\tint16_t\t\tsi16_4,\n+\tuint32_t\tui32_4,\n+\tint32_t\t\tsi32_4,\n+\tuint64_t\tui64_4,\n+\tint64_t\t\tsi64_4,\n+\tfloat\t\tf_4,\n+\tdouble\t\td_4,\n+\tlong double\tld_4,\n+\tchar*\t\tp_4,\n+\tuint8_t\t\tui8_5,\n+\tint8_t\t\tsi8_5)\n+{\n+\tBigStruct\tretVal\t= {\n+\t\tui8_1 + 1, si8_1 + 1, ui16_1 + 1, si16_1 + 1, ui32_1 + 1, si32_1 + 1,\n+\t\t\tui64_1 + 1, si64_1 + 1, f_1 + 1, d_1 + 1, ld_1 + 1, (char*)((intptr_t)p_1 + 1), \n+\t\tui8_2 + 2, si8_2 + 2, ui16_2 + 2, si16_2 + 2, ui32_2 + 2, si32_2 + 2,\n+\t\t\tui64_2 + 2, si64_2 + 2, f_2 + 2, d_2 + 2, ld_2 + 2, (char*)((intptr_t)p_2 + 2), \n+\t\tui8_3 + 3, si8_3 + 3, ui16_3 + 3, si16_3 + 3, ui32_3 + 3, si32_3 + 3,\n+\t\t\tui64_3 + 3, si64_3 + 3, f_3 + 3, d_3 + 3, ld_3 + 3, (char*)((intptr_t)p_3 + 3), \n+\t\tui8_4 + 4, si8_4 + 4, ui16_4 + 4, si16_4 + 4, ui32_4 + 4, si32_4 + 4,\n+\t\t\tui64_4 + 4, si64_4 + 4, f_4 + 4, d_4 + 4, ld_4 + 4, (char*)((intptr_t)p_4 + 4), \n+\t\tui8_5 + 5, si8_5 + 5};\n+\n+\tprintf(\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx %hhu %hhd: \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx %hhu %hhd\\n\",\n+\t       ui8_1, si8_1, ui16_1, si16_1, ui32_1, si32_1, ui64_1, si64_1, f_1, d_1, ld_1, (unsigned long)p_1,\n+\t\tui8_2, si8_2, ui16_2, si16_2, ui32_2, si32_2, ui64_2, si64_2, f_2, d_2, ld_2, (unsigned long)p_2,\n+\t\tui8_3, si8_3, ui16_3, si16_3, ui32_3, si32_3, ui64_3, si64_3, f_3, d_3, ld_3, (unsigned long)p_3,\n+\t\tui8_4, si8_4, ui16_4, si16_4, ui32_4, si32_4, ui64_4, si64_4, f_4, d_4, ld_4, (unsigned long)p_4, ui8_5, si8_5,\n+\t\tretVal.a, retVal.b, retVal.c, retVal.d, retVal.e, retVal.f,\n+\t       retVal.g, retVal.h, retVal.i, retVal.j, retVal.k, (unsigned long)retVal.l,\n+\t\tretVal.m, retVal.n, retVal.o, retVal.p, retVal.q, retVal.r,\n+\t       retVal.s, retVal.t, retVal.u, retVal.v, retVal.w, (unsigned long)retVal.x,\n+\t\tretVal.y, retVal.z, retVal.aa, retVal.bb, retVal.cc, retVal.dd,\n+\t       retVal.ee, retVal.ff, retVal.gg, retVal.hh, retVal.ii, (unsigned long)retVal.jj,\n+\t\tretVal.kk, retVal.ll, retVal.mm, retVal.nn, retVal.oo, retVal.pp,\n+\t       retVal.qq, retVal.rr, retVal.ss, retVal.tt, retVal.uu, (unsigned long)retVal.vv, retVal.ww, retVal.xx);\n+\n+\treturn\tretVal;\n+}\n+\n+static void\n+cls_large_fn(ffi_cif* cif __UNUSED__, void* resp, void** args, void* userdata __UNUSED__)\n+{\n+\tuint8_t\t\tui8_1\t= *(uint8_t*)args[0];\n+\tint8_t\t\tsi8_1\t= *(int8_t*)args[1];\n+\tuint16_t\tui16_1\t= *(uint16_t*)args[2];\n+\tint16_t\t\tsi16_1\t= *(int16_t*)args[3];\n+\tuint32_t\tui32_1\t= *(uint32_t*)args[4];\n+\tint32_t\t\tsi32_1\t= *(int32_t*)args[5];\n+\tuint64_t\tui64_1\t= *(uint64_t*)args[6];\n+\tint64_t\t\tsi64_1\t= *(int64_t*)args[7];\n+\tfloat\t\tf_1\t\t= *(float*)args[8];\n+\tdouble\t\td_1\t\t= *(double*)args[9];\n+\tlong double\tld_1\t= *(long double*)args[10];\n+\tchar*\t\tp_1\t\t= *(char**)args[11];\n+\tuint8_t\t\tui8_2\t= *(uint8_t*)args[12];\n+\tint8_t\t\tsi8_2\t= *(int8_t*)args[13];\n+\tuint16_t\tui16_2\t= *(uint16_t*)args[14];\n+\tint16_t\t\tsi16_2\t= *(int16_t*)args[15];\n+\tuint32_t\tui32_2\t= *(uint32_t*)args[16];\n+\tint32_t\t\tsi32_2\t= *(int32_t*)args[17];\n+\tuint64_t\tui64_2\t= *(uint64_t*)args[18];\n+\tint64_t\t\tsi64_2\t= *(int64_t*)args[19];\n+\tfloat\t\tf_2\t\t= *(float*)args[20];\n+\tdouble\t\td_2\t\t= *(double*)args[21];\n+\tlong double\tld_2\t= *(long double*)args[22];\n+\tchar*\t\tp_2\t\t= *(char**)args[23];\n+\tuint8_t\t\tui8_3\t= *(uint8_t*)args[24];\n+\tint8_t\t\tsi8_3\t= *(int8_t*)args[25];\n+\tuint16_t\tui16_3\t= *(uint16_t*)args[26];\n+\tint16_t\t\tsi16_3\t= *(int16_t*)args[27];\n+\tuint32_t\tui32_3\t= *(uint32_t*)args[28];\n+\tint32_t\t\tsi32_3\t= *(int32_t*)args[29];\n+\tuint64_t\tui64_3\t= *(uint64_t*)args[30];\n+\tint64_t\t\tsi64_3\t= *(int64_t*)args[31];\n+\tfloat\t\tf_3\t\t= *(float*)args[32];\n+\tdouble\t\td_3\t\t= *(double*)args[33];\n+\tlong double\tld_3\t= *(long double*)args[34];\n+\tchar*\t\tp_3\t\t= *(char**)args[35];\n+\tuint8_t\t\tui8_4\t= *(uint8_t*)args[36];\n+\tint8_t\t\tsi8_4\t= *(int8_t*)args[37];\n+\tuint16_t\tui16_4\t= *(uint16_t*)args[38];\n+\tint16_t\t\tsi16_4\t= *(int16_t*)args[39];\n+\tuint32_t\tui32_4\t= *(uint32_t*)args[40];\n+\tint32_t\t\tsi32_4\t= *(int32_t*)args[41];\n+\tuint64_t\tui64_4\t= *(uint64_t*)args[42];\n+\tint64_t\t\tsi64_4\t= *(int64_t*)args[43];\n+\tfloat\t\tf_4\t\t= *(float*)args[44];\n+\tdouble\t\td_4\t\t= *(double*)args[45];\n+\tlong double\tld_4\t= *(long double*)args[46];\n+\tchar*\t\tp_4\t\t= *(char**)args[47];\n+\tuint8_t\t\tui8_5\t= *(uint8_t*)args[48];\n+\tint8_t\t\tsi8_5\t= *(int8_t*)args[49];\n+\n+\t*(BigStruct*)resp = test_large_fn(\n+\t\tui8_1, si8_1, ui16_1, si16_1, ui32_1, si32_1, ui64_1, si64_1, f_1, d_1, ld_1, p_1,\n+\t\tui8_2, si8_2, ui16_2, si16_2, ui32_2, si32_2, ui64_2, si64_2, f_2, d_2, ld_2, p_2,\n+\t\tui8_3, si8_3, ui16_3, si16_3, ui32_3, si32_3, ui64_3, si64_3, f_3, d_3, ld_3, p_3,\n+\t\tui8_4, si8_4, ui16_4, si16_4, ui32_4, si32_4, ui64_4, si64_4, f_4, d_4, ld_4, p_4,\n+\t\tui8_5, si8_5);\n+}\n+\n+int\n+main(int argc __UNUSED__, const char** argv __UNUSED__)\n+{\n+        void *code;\n+\tffi_closure *pcl = ffi_closure_alloc(sizeof(ffi_closure), &code);\n+\n+\tffi_cif\t\tcif;\n+\tffi_type*\targTypes[51];\n+\tvoid*\t\targValues[51];\n+\n+\tffi_type\tret_struct_type;\n+\tffi_type*\tst_fields[51];\n+\tBigStruct\tretVal;\n+\n+\tmemset (&retVal, 0, sizeof(retVal));\n+\n+\tret_struct_type.size = 0;\n+\tret_struct_type.alignment = 0;\n+\tret_struct_type.type = FFI_TYPE_STRUCT;\n+\tret_struct_type.elements = st_fields;\n+\n+\tst_fields[0]\t= st_fields[12]\t= st_fields[24]\t= st_fields[36]\t= st_fields[48]\t= &ffi_type_uint8;\n+\tst_fields[1]\t= st_fields[13]\t= st_fields[25]\t= st_fields[37]\t= st_fields[49]\t= &ffi_type_sint8;\n+\tst_fields[2]\t= st_fields[14]\t= st_fields[26]\t= st_fields[38]\t= &ffi_type_uint16;\n+\tst_fields[3]\t= st_fields[15]\t= st_fields[27]\t= st_fields[39]\t= &ffi_type_sint16;\n+\tst_fields[4]\t= st_fields[16]\t= st_fields[28]\t= st_fields[40]\t= &ffi_type_uint32;\n+\tst_fields[5]\t= st_fields[17]\t= st_fields[29]\t= st_fields[41]\t= &ffi_type_sint32;\n+\tst_fields[6]\t= st_fields[18]\t= st_fields[30]\t= st_fields[42]\t= &ffi_type_uint64;\n+\tst_fields[7]\t= st_fields[19]\t= st_fields[31]\t= st_fields[43]\t= &ffi_type_sint64;\n+\tst_fields[8]\t= st_fields[20]\t= st_fields[32]\t= st_fields[44]\t= &ffi_type_float;\n+\tst_fields[9]\t= st_fields[21]\t= st_fields[33]\t= st_fields[45]\t= &ffi_type_double;\n+\tst_fields[10]\t= st_fields[22]\t= st_fields[34]\t= st_fields[46]\t= &ffi_type_longdouble;\n+\tst_fields[11]\t= st_fields[23]\t= st_fields[35]\t= st_fields[47]\t= &ffi_type_pointer;\n+\n+\tst_fields[50] = NULL;\n+\n+\tuint8_t\t\tui8\t\t= 1;\n+\tint8_t\t\tsi8\t\t= 2;\n+\tuint16_t\tui16\t= 3;\n+\tint16_t\t\tsi16\t= 4;\n+\tuint32_t\tui32\t= 5;\n+\tint32_t\t\tsi32\t= 6;\n+\tuint64_t\tui64\t= 7;\n+\tint64_t\t\tsi64\t= 8;\n+\tfloat\t\tf\t\t= 9;\n+\tdouble\t\td\t\t= 10;\n+\tlong double\tld\t\t= 11;\n+\tchar*\t\tp\t\t= (char*)0x12345678;\n+\n+\targTypes[0]\t\t= argTypes[12]\t= argTypes[24]\t= argTypes[36]\t= argTypes[48]\t= &ffi_type_uint8;\n+\targValues[0]\t= argValues[12]\t= argValues[24]\t= argValues[36]\t= argValues[48]\t= &ui8;\n+\targTypes[1]\t\t= argTypes[13]\t= argTypes[25]\t= argTypes[37]\t= argTypes[49]\t= &ffi_type_sint8;\n+\targValues[1]\t= argValues[13]\t= argValues[25]\t= argValues[37]\t= argValues[49]\t= &si8;\n+\targTypes[2]\t\t= argTypes[14]\t= argTypes[26]\t= argTypes[38]\t= &ffi_type_uint16;\n+\targValues[2]\t= argValues[14]\t= argValues[26]\t= argValues[38]\t= &ui16;\n+\targTypes[3]\t\t= argTypes[15]\t= argTypes[27]\t= argTypes[39]\t= &ffi_type_sint16;\n+\targValues[3]\t= argValues[15]\t= argValues[27]\t= argValues[39]\t= &si16;\n+\targTypes[4]\t\t= argTypes[16]\t= argTypes[28]\t= argTypes[40]\t= &ffi_type_uint32;\n+\targValues[4]\t= argValues[16]\t= argValues[28]\t= argValues[40]\t= &ui32;\n+\targTypes[5]\t\t= argTypes[17]\t= argTypes[29]\t= argTypes[41]\t= &ffi_type_sint32;\n+\targValues[5]\t= argValues[17]\t= argValues[29]\t= argValues[41]\t= &si32;\n+\targTypes[6]\t\t= argTypes[18]\t= argTypes[30]\t= argTypes[42]\t= &ffi_type_uint64;\n+\targValues[6]\t= argValues[18]\t= argValues[30]\t= argValues[42]\t= &ui64;\n+\targTypes[7]\t\t= argTypes[19]\t= argTypes[31]\t= argTypes[43]\t= &ffi_type_sint64;\n+\targValues[7]\t= argValues[19]\t= argValues[31]\t= argValues[43]\t= &si64;\n+\targTypes[8]\t\t= argTypes[20]\t= argTypes[32]\t= argTypes[44]\t= &ffi_type_float;\n+\targValues[8]\t= argValues[20]\t= argValues[32]\t= argValues[44]\t= &f;\n+\targTypes[9]\t\t= argTypes[21]\t= argTypes[33]\t= argTypes[45]\t= &ffi_type_double;\n+\targValues[9]\t= argValues[21]\t= argValues[33]\t= argValues[45]\t= &d;\n+\targTypes[10]\t= argTypes[22]\t= argTypes[34]\t= argTypes[46]\t= &ffi_type_longdouble;\n+\targValues[10]\t= argValues[22]\t= argValues[34]\t= argValues[46]\t= &ld;\n+\targTypes[11]\t= argTypes[23]\t= argTypes[35]\t= argTypes[47]\t= &ffi_type_pointer;\n+\targValues[11]\t= argValues[23]\t= argValues[35]\t= argValues[47]\t= &p;\n+\n+\targTypes[50]\t= NULL;\n+\targValues[50]\t= NULL;\n+\n+\tCHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 50, &ret_struct_type, argTypes) == FFI_OK);\n+\n+\tffi_call(&cif, FFI_FN(test_large_fn), &retVal, argValues);\n+\t// { dg-output \"1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2: 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7\" }\n+\tprintf(\"res: %hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx %hhu %hhd\\n\",\n+\t\tretVal.a, retVal.b, retVal.c, retVal.d, retVal.e, retVal.f,\n+\t       retVal.g, retVal.h, retVal.i, retVal.j, retVal.k, (unsigned long)retVal.l,\n+\t\tretVal.m, retVal.n, retVal.o, retVal.p, retVal.q, retVal.r,\n+\t       retVal.s, retVal.t, retVal.u, retVal.v, retVal.w, (unsigned long)retVal.x,\n+\t\tretVal.y, retVal.z, retVal.aa, retVal.bb, retVal.cc, retVal.dd,\n+\t       retVal.ee, retVal.ff, retVal.gg, retVal.hh, retVal.ii, (unsigned long)retVal.jj,\n+\t\tretVal.kk, retVal.ll, retVal.mm, retVal.nn, retVal.oo, retVal.pp,\n+\t       retVal.qq, retVal.rr, retVal.ss, retVal.tt, retVal.uu, (unsigned long)retVal.vv, retVal.ww, retVal.xx);\n+\t// { dg-output \"\\nres: 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7\" }\n+\n+\tCHECK(ffi_prep_closure_loc(pcl, &cif, cls_large_fn, NULL, code) == FFI_OK);\n+\n+\tretVal\t= ((BigStruct(*)(\n+\t\tuint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double, long double, char*,\n+\t\tuint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double, long double, char*,\n+\t\tuint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double, long double, char*,\n+\t\tuint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, float, double, long double, char*,\n+\t\tuint8_t, int8_t))(code))(\n+\t\tui8, si8, ui16, si16, ui32, si32, ui64, si64, f, d, ld, p,\n+\t\tui8, si8, ui16, si16, ui32, si32, ui64, si64, f, d, ld, p,\n+\t\tui8, si8, ui16, si16, ui32, si32, ui64, si64, f, d, ld, p,\n+\t\tui8, si8, ui16, si16, ui32, si32, ui64, si64, f, d, ld, p,\n+\t\tui8, si8);\n+\t// { dg-output \"\\n1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2: 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7\" }\n+\tprintf(\"res: %hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx \"\n+\t\t\"%hhu %hhd %hu %hd %u %d %\" PRIu64 \" %\" PRId64 \" %.0f %.0f %.0Lf %#lx %hhu %hhd\\n\",\n+\t\tretVal.a, retVal.b, retVal.c, retVal.d, retVal.e, retVal.f,\n+\t       retVal.g, retVal.h, retVal.i, retVal.j, retVal.k, (unsigned long)retVal.l,\n+\t\tretVal.m, retVal.n, retVal.o, retVal.p, retVal.q, retVal.r,\n+\t       retVal.s, retVal.t, retVal.u, retVal.v, retVal.w, (unsigned long)retVal.x,\n+\t\tretVal.y, retVal.z, retVal.aa, retVal.bb, retVal.cc, retVal.dd,\n+\t       retVal.ee, retVal.ff, retVal.gg, retVal.hh, retVal.ii, (unsigned long)retVal.jj,\n+\t\tretVal.kk, retVal.ll, retVal.mm, retVal.nn, retVal.oo, retVal.pp,\n+\t       retVal.qq, retVal.rr, retVal.ss, retVal.tt, retVal.uu, (unsigned long)retVal.vv, retVal.ww, retVal.xx);\n+\t// { dg-output \"\\nres: 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7\" }\n+\n+    return 0;\n+}"}]}