{"sha": "cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzZDU4MjQwYjU5ODFkZDNiNjFhNDYwNmI2MDE3ZDNhOWI3YzAyNQ==", "commit": {"author": {"name": "Sergey Grechanik", "email": "mouseentity@ispras.ru", "date": "2011-08-11T11:48:07Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-08-11T11:48:07Z"}, "message": "sel-sched-ir.h (register_unavailable_p): Declare.\n\n2011-08-11  Sergey Grechanik  <mouseentity@ispras.ru>\n\n\t* sel-sched-ir.h (register_unavailable_p): Declare.\n\t* sel-sched-ir.c (register_unavailable_p): New.  Use it...\n\t(set_unavailable_target_for_expr): ... here to properly test\n\tavailability of a register.\n\t(speculate_expr): Ditto.\n\t* sel-sched.c (substitute_reg_in_expr): Ditto.\n\t(av_set_could_be_blocked_by_bookkeeping_p): Ditto.\n\nFrom-SVN: r177654", "tree": {"sha": "9d57a3785185bcda20a54547abd30689a33358ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d57a3785185bcda20a54547abd30689a33358ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/comments", "author": null, "committer": null, "parents": [{"sha": "944499ed6b8eaf759db4f83654c3bfa3a521698c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944499ed6b8eaf759db4f83654c3bfa3a521698c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944499ed6b8eaf759db4f83654c3bfa3a521698c"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "69c655ee6d9de6888adc4dfc09ce072c28ae38b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "patch": "@@ -1,3 +1,13 @@\n+2011-08-11  Sergey Grechanik  <mouseentity@ispras.ru>\n+\n+\t* sel-sched-ir.h (register_unavailable_p): Declare.\n+\t* sel-sched-ir.c (register_unavailable_p): New.  Use it...\n+\t(set_unavailable_target_for_expr): ... here to properly test\n+\tavailability of a register.\n+\t(speculate_expr): Ditto.\n+\t* sel-sched.c (substitute_reg_in_expr): Ditto.\n+\t(av_set_could_be_blocked_by_bookkeeping_p): Ditto.\n+\n 2011-08-11  Sergey Grechanik  <mouseentity@ispras.ru>\n \n \t* sel-sched.c (verify_target_availability): Fix usage of"}, {"sha": "58aec1190f6e1307828278f266eecf239abe0b15", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "patch": "@@ -1883,7 +1883,7 @@ set_unavailable_target_for_expr (expr_t expr, regset lv_set)\n   if (EXPR_SEPARABLE_P (expr))\n     {\n       if (REG_P (EXPR_LHS (expr))\n-          && bitmap_bit_p (lv_set, REGNO (EXPR_LHS (expr))))\n+          && register_unavailable_p (lv_set, EXPR_LHS (expr)))\n \t{\n \t  /* If it's an insn like r1 = use (r1, ...), and it exists in\n \t     different forms in each of the av_sets being merged, we can't say\n@@ -1904,8 +1904,8 @@ set_unavailable_target_for_expr (expr_t expr, regset lv_set)\n \t     miss a unifying code motion along both branches using a renamed\n \t     register, but it won't affect a code correctness since upon\n \t     an actual code motion a bookkeeping code would be generated.  */\n-\t  if (bitmap_bit_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n-\t\t\t    REGNO (EXPR_LHS (expr))))\n+\t  if (register_unavailable_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n+\t\t\t\t      EXPR_LHS (expr)))\n \t    EXPR_TARGET_AVAILABLE (expr) = -1;\n \t  else\n \t    EXPR_TARGET_AVAILABLE (expr) = false;\n@@ -1971,8 +1971,8 @@ speculate_expr (expr_t expr, ds_t ds)\n \n         /* Do not allow clobbering the address register of speculative\n            insns.  */\n-        if (bitmap_bit_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n-                          expr_dest_regno (expr)))\n+        if (register_unavailable_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n+\t\t\t\t    expr_dest_reg (expr)))\n           {\n             EXPR_TARGET_AVAILABLE (expr) = false;\n             return 2;\n@@ -2026,6 +2026,25 @@ mark_unavailable_targets (av_set_t join_set, av_set_t av_set, regset lv_set)\n }\n \f\n \n+/* Returns true if REG (at least partially) is present in REGS.  */\n+bool\n+register_unavailable_p (regset regs, rtx reg)\n+{\n+  unsigned regno, end_regno;\n+\n+  regno = REGNO (reg);\n+  if (bitmap_bit_p (regs, regno))\n+    return true;\n+\n+  end_regno = END_REGNO (reg);\n+\n+  while (++regno < end_regno)\n+    if (bitmap_bit_p (regs, regno))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Av set functions.  */\n \n /* Add a new element to av set SETP."}, {"sha": "c8f8be6658d9a5b09ef4e48c55f9720affc412db", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "patch": "@@ -1573,6 +1573,7 @@ extern void sel_init_global_and_expr (bb_vec_t);\n extern void sel_finish_global_and_expr (void);\n \n extern regset compute_live (insn_t);\n+extern bool register_unavailable_p (regset, rtx);\n \n /* Dependence analysis functions.  */\n extern void sel_clear_has_dependence (void);"}, {"sha": "f11faca740aef7e9823c1764584f0d4a0ae4a479", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3d58240b5981dd3b61a4606b6017d3a9b7c025/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=cf3d58240b5981dd3b61a4606b6017d3a9b7c025", "patch": "@@ -794,8 +794,8 @@ substitute_reg_in_expr (expr_t expr, insn_t insn, bool undo)\n \t  /* Do not allow clobbering the address register of speculative\n              insns.  */\n \t  if ((EXPR_SPEC_DONE_DS (expr) & SPECULATIVE)\n-              && bitmap_bit_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n-\t\t\t       expr_dest_regno (expr)))\n+              && register_unavailable_p (VINSN_REG_USES (EXPR_VINSN (expr)),\n+\t\t\t\t\t expr_dest_reg (expr)))\n \t    EXPR_TARGET_AVAILABLE (expr) = false;\n \n \t  return true;\n@@ -3631,12 +3631,12 @@ av_set_could_be_blocked_by_bookkeeping_p (av_set_t orig_ops, void *static_params\n      renaming.  Check with the right register instead.  */\n   if (sparams->dest && REG_P (sparams->dest))\n     {\n-      unsigned regno = REGNO (sparams->dest);\n+      rtx reg = sparams->dest;\n       vinsn_t failed_vinsn = INSN_VINSN (sparams->failed_insn);\n \n-      if (bitmap_bit_p (VINSN_REG_SETS (failed_vinsn), regno)\n-\t  || bitmap_bit_p (VINSN_REG_USES (failed_vinsn), regno)\n-\t  || bitmap_bit_p (VINSN_REG_CLOBBERS (failed_vinsn), regno))\n+      if (register_unavailable_p (VINSN_REG_SETS (failed_vinsn), reg)\n+\t  || register_unavailable_p (VINSN_REG_USES (failed_vinsn), reg)\n+\t  || register_unavailable_p (VINSN_REG_CLOBBERS (failed_vinsn), reg))\n \treturn true;\n     }\n "}]}