{"sha": "6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmZWYyYWQyM2EzMDEyMWEyZDI5Yjk4OTNhNTc3NDNjN2M4NmQyYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-09-25T19:52:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-09-25T19:52:34Z"}, "message": "combine.c (make_compound_operation): Handle the 'E' format.\n\ngcc/\n\t* combine.c (make_compound_operation): Handle the 'E' format.\n\t(count_rtxs): Likewise.\n\t(update_table_tick): Likewise.\n\t(get_last_value_validate): Likewise.\n\nFrom-SVN: r140669", "tree": {"sha": "ef76d8f91c1258ab5176040288536b0289c1af26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef76d8f91c1258ab5176040288536b0289c1af26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffef2ad23a30121a2d29b9893a57743c7c86d2a/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ca37eb74b96a3ed2140831b356b01145f609fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca37eb74b96a3ed2140831b356b01145f609fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca37eb74b96a3ed2140831b356b01145f609fd1"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "051581985ff7710460fd796d49c1e44a8725260a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffef2ad23a30121a2d29b9893a57743c7c86d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffef2ad23a30121a2d29b9893a57743c7c86d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "patch": "@@ -1,3 +1,10 @@\n+2008-09-25  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* combine.c (make_compound_operation): Handle the 'E' format.\n+\t(count_rtxs): Likewise.\n+\t(update_table_tick): Likewise.\n+\t(get_last_value_validate): Likewise.\n+\n 2008-09-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dbxout.c (dbxout_parms): Fetch the inner REG inside a PARALLEL."}, {"sha": "5358cfb798005206864d28d6d8554deafa01efc9", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffef2ad23a30121a2d29b9893a57743c7c86d2a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffef2ad23a30121a2d29b9893a57743c7c86d2a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6ffef2ad23a30121a2d29b9893a57743c7c86d2a", "patch": "@@ -6834,7 +6834,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n   int mode_width = GET_MODE_BITSIZE (mode);\n   rtx rhs, lhs;\n   enum rtx_code next_code;\n-  int i;\n+  int i, j;\n   rtx new_rtx = 0;\n   rtx tem;\n   const char *fmt;\n@@ -7075,6 +7075,12 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \tnew_rtx = make_compound_operation (XEXP (x, i), next_code);\n \tSUBST (XEXP (x, i), new_rtx);\n       }\n+    else if (fmt[i] == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\t{\n+\t  new_rtx = make_compound_operation (XVECEXP (x, i, j), next_code);\n+\t  SUBST (XVECEXP (x, i, j), new_rtx);\n+\t}\n \n   /* If this is a commutative operation, the changes to the operands\n      may have made it noncanonical.  */\n@@ -11190,7 +11196,7 @@ count_rtxs (rtx x)\n {\n   enum rtx_code code = GET_CODE (x);\n   const char *fmt;\n-  int i, ret = 1;\n+  int i, j, ret = 1;\n \n   if (GET_RTX_CLASS (code) == '2'\n       || GET_RTX_CLASS (code) == 'c')\n@@ -11220,6 +11226,9 @@ count_rtxs (rtx x)\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     if (fmt[i] == 'e')\n       ret += count_rtxs (XEXP (x, i));\n+    else if (fmt[i] == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\tret += count_rtxs (XVECEXP (x, i, j));\n \n   return ret;\n }\n@@ -11233,7 +11242,7 @@ update_table_tick (rtx x)\n {\n   enum rtx_code code = GET_CODE (x);\n   const char *fmt = GET_RTX_FORMAT (code);\n-  int i;\n+  int i, j;\n \n   if (code == REG)\n     {\n@@ -11251,8 +11260,6 @@ update_table_tick (rtx x)\n     }\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    /* Note that we can't have an \"E\" in values stored; see\n-       get_last_value_validate.  */\n     if (fmt[i] == 'e')\n       {\n \t/* Check for identical subexpressions.  If x contains\n@@ -11289,6 +11296,9 @@ update_table_tick (rtx x)\n \n \tupdate_table_tick (XEXP (x, i));\n       }\n+    else if (fmt[i] == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\tupdate_table_tick (XVECEXP (x, i, j));\n }\n \n /* Record that REG is set to VALUE in insn INSN.  If VALUE is zero, we\n@@ -11696,7 +11706,7 @@ get_last_value_validate (rtx *loc, rtx insn, int tick, int replace)\n   rtx x = *loc;\n   const char *fmt = GET_RTX_FORMAT (GET_CODE (x));\n   int len = GET_RTX_LENGTH (GET_CODE (x));\n-  int i;\n+  int i, j;\n \n   if (REG_P (x))\n     {\n@@ -11774,9 +11784,11 @@ get_last_value_validate (rtx *loc, rtx insn, int tick, int replace)\n \t\t\t\t       replace) == 0)\n \t    return 0;\n \t}\n-      /* Don't bother with these.  They shouldn't occur anyway.  */\n       else if (fmt[i] == 'E')\n-\treturn 0;\n+\tfor (j = 0; j < XVECLEN (x, i); j++)\n+\t  if (get_last_value_validate (&XVECEXP (x, i, j),\n+\t\t\t\t       insn, tick, replace) == 0)\n+\t    return 0;\n     }\n \n   /* If we haven't found a reason for it to be invalid, it is valid.  */"}]}