{"sha": "6e82658607075193c2bc85041b045ab748b14600", "node_id": "C_kwDOANBUbNoAKDZlODI2NTg2MDcwNzUxOTNjMmJjODUwNDFiMDQ1YWI3NDhiMTQ2MDA", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-04T22:31:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:48Z"}, "message": "[Ada] Remove unnecessary block in code for expansion of allocators\n\ngcc/ada/\n\n\t* exp_ch4.adb (Size_In_Storage_Elements): Remove unnecessary\n\tDECLARE block; refill code and comments.", "tree": {"sha": "47537f7488b14bcbfc9e197fa7cad151bd5c8d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47537f7488b14bcbfc9e197fa7cad151bd5c8d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e82658607075193c2bc85041b045ab748b14600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e82658607075193c2bc85041b045ab748b14600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e82658607075193c2bc85041b045ab748b14600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e82658607075193c2bc85041b045ab748b14600/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4217466a87672372ec0d5e0affafd33c06a35574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4217466a87672372ec0d5e0affafd33c06a35574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4217466a87672372ec0d5e0affafd33c06a35574"}], "stats": {"total": 176, "additions": 85, "deletions": 91}, "files": [{"sha": "18f0f746cae8238842de2931bc916db1d9321e40", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 85, "deletions": 91, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e82658607075193c2bc85041b045ab748b14600/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e82658607075193c2bc85041b045ab748b14600/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6e82658607075193c2bc85041b045ab748b14600", "patch": "@@ -4345,116 +4345,110 @@ package body Exp_Ch4 is\n       ------------------------------\n \n       function Size_In_Storage_Elements (E : Entity_Id) return Node_Id is\n+         Idx : Node_Id := First_Index (E);\n+         Len : Node_Id;\n+         Res : Node_Id := Empty;\n+\n       begin\n          --  Logically this just returns E'Max_Size_In_Storage_Elements.\n-         --  However, the reason for the existence of this function is\n-         --  to construct a test for sizes too large, which means near the\n-         --  32-bit limit on a 32-bit machine, and precisely the trouble\n-         --  is that we get overflows when sizes are greater than 2**31.\n+         --  However, the reason for the existence of this function is to\n+         --  construct a test for sizes too large, which means near the 32-bit\n+         --  limit on a 32-bit machine, and precisely the trouble is that we\n+         --  get overflows when sizes are greater than 2**31.\n \n          --  So what we end up doing for array types is to use the expression:\n \n          --    number-of-elements * component_type'Max_Size_In_Storage_Elements\n \n          --  which avoids this problem. All this is a bit bogus, but it does\n-         --  mean we catch common cases of trying to allocate arrays that\n-         --  are too large, and which in the absence of a check results in\n+         --  mean we catch common cases of trying to allocate arrays that are\n+         --  too large, and which in the absence of a check results in\n          --  undetected chaos ???\n \n-         declare\n-            Idx : Node_Id := First_Index (E);\n-            Len : Node_Id;\n-            Res : Node_Id := Empty;\n+         for J in 1 .. Number_Dimensions (E) loop\n \n-         begin\n-            for J in 1 .. Number_Dimensions (E) loop\n+            if not Is_Modular_Integer_Type (Etype (Idx)) then\n+               Len :=\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => New_Occurrence_Of (E, Loc),\n+                   Attribute_Name => Name_Length,\n+                   Expressions    => New_List (Make_Integer_Literal (Loc, J)));\n \n-               if not Is_Modular_Integer_Type (Etype (Idx)) then\n-                  Len :=\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix         => New_Occurrence_Of (E, Loc),\n-                      Attribute_Name => Name_Length,\n-                      Expressions    => New_List\n-                                          (Make_Integer_Literal (Loc, J)));\n+            --  For indexes that are modular types we cannot generate code to\n+            --  compute 'Length since for large arrays 'Last -'First + 1 causes\n+            --  overflow; therefore we compute 'Last - 'First (which is not the\n+            --  exact number of components but it is valid for the purpose of\n+            --  this runtime check on 32-bit targets).\n \n-               --  For indexes that are modular types we cannot generate code\n-               --  to compute 'Length since for large arrays 'Last -'First + 1\n-               --  causes overflow; therefore we compute 'Last - 'First (which\n-               --  is not the exact number of components but it is valid for\n-               --  the purpose of this runtime check on 32-bit targets).\n+            else\n+               declare\n+                  Len_Minus_1_Expr : Node_Id;\n+                  Test_Gt          : Node_Id;\n \n-               else\n-                  declare\n-                     Len_Minus_1_Expr : Node_Id;\n-                     Test_Gt          : Node_Id;\n+               begin\n+                  Test_Gt :=\n+                    Make_Op_Gt (Loc,\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Occurrence_Of (E, Loc),\n+                        Attribute_Name => Name_Last,\n+                        Expressions    =>\n+                          New_List (Make_Integer_Literal (Loc, J))),\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Occurrence_Of (E, Loc),\n+                        Attribute_Name => Name_First,\n+                        Expressions    =>\n+                          New_List (Make_Integer_Literal (Loc, J))));\n \n-                  begin\n-                     Test_Gt :=\n-                       Make_Op_Gt (Loc,\n-                         Make_Attribute_Reference (Loc,\n-                           Prefix         => New_Occurrence_Of (E, Loc),\n-                           Attribute_Name => Name_Last,\n-                           Expressions    =>\n-                             New_List (Make_Integer_Literal (Loc, J))),\n-                         Make_Attribute_Reference (Loc,\n-                           Prefix         => New_Occurrence_Of (E, Loc),\n-                           Attribute_Name => Name_First,\n-                           Expressions    =>\n-                             New_List (Make_Integer_Literal (Loc, J))));\n-\n-                     Len_Minus_1_Expr :=\n-                       Convert_To (Standard_Unsigned,\n-                         Make_Op_Subtract (Loc,\n-                           Make_Attribute_Reference (Loc,\n-                             Prefix => New_Occurrence_Of (E, Loc),\n-                             Attribute_Name => Name_Last,\n-                             Expressions =>\n-                               New_List\n-                                 (Make_Integer_Literal (Loc, J))),\n-                           Make_Attribute_Reference (Loc,\n-                             Prefix => New_Occurrence_Of (E, Loc),\n-                             Attribute_Name => Name_First,\n-                             Expressions =>\n-                               New_List\n-                                 (Make_Integer_Literal (Loc, J)))));\n-\n-                     --  Handle superflat arrays, i.e. arrays with such bounds\n-                     --  as 4 .. 2, to ensure that the result is correct.\n-\n-                     --  Generate:\n-                     --    (if X'Last > X'First then X'Last - X'First else 0)\n-\n-                     Len :=\n-                       Make_If_Expression (Loc,\n-                         Expressions => New_List (\n-                           Test_Gt,\n-                           Len_Minus_1_Expr,\n-                           Make_Integer_Literal (Loc, Uint_0)));\n-                  end;\n-               end if;\n+                  Len_Minus_1_Expr :=\n+                    Convert_To (Standard_Unsigned,\n+                      Make_Op_Subtract (Loc,\n+                        Make_Attribute_Reference (Loc,\n+                          Prefix => New_Occurrence_Of (E, Loc),\n+                          Attribute_Name => Name_Last,\n+                          Expressions =>\n+                            New_List (Make_Integer_Literal (Loc, J))),\n+                        Make_Attribute_Reference (Loc,\n+                          Prefix => New_Occurrence_Of (E, Loc),\n+                          Attribute_Name => Name_First,\n+                          Expressions =>\n+                            New_List (Make_Integer_Literal (Loc, J)))));\n \n-               if J = 1 then\n-                  Res := Len;\n+                  --  Handle superflat arrays, i.e. arrays with such bounds as\n+                  --  4 .. 2, to ensure that the result is correct.\n \n-               else\n-                  pragma Assert (Present (Res));\n-                  Res :=\n-                    Make_Op_Multiply (Loc,\n-                      Left_Opnd  => Res,\n-                      Right_Opnd => Len);\n-               end if;\n+                  --  Generate:\n+                  --    (if X'Last > X'First then X'Last - X'First else 0)\n \n-               Next_Index (Idx);\n-            end loop;\n+                  Len :=\n+                    Make_If_Expression (Loc,\n+                      Expressions => New_List (\n+                        Test_Gt,\n+                        Len_Minus_1_Expr,\n+                        Make_Integer_Literal (Loc, Uint_0)));\n+               end;\n+            end if;\n \n-            return\n-              Make_Op_Multiply (Loc,\n-                Left_Opnd  => Len,\n-                Right_Opnd =>\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix => New_Occurrence_Of (Component_Type (E), Loc),\n-                    Attribute_Name => Name_Max_Size_In_Storage_Elements));\n-         end;\n+            if J = 1 then\n+               Res := Len;\n+\n+            else\n+               pragma Assert (Present (Res));\n+               Res :=\n+                 Make_Op_Multiply (Loc,\n+                   Left_Opnd  => Res,\n+                   Right_Opnd => Len);\n+            end if;\n+\n+            Next_Index (Idx);\n+         end loop;\n+\n+         return\n+           Make_Op_Multiply (Loc,\n+             Left_Opnd  => Len,\n+             Right_Opnd =>\n+               Make_Attribute_Reference (Loc,\n+                 Prefix => New_Occurrence_Of (Component_Type (E), Loc),\n+                 Attribute_Name => Name_Max_Size_In_Storage_Elements));\n       end Size_In_Storage_Elements;\n \n       --  Local variables"}]}