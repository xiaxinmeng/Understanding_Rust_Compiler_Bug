{"sha": "0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2ZTc5MmRkNWM5NmE0OGM4NzNiNzNjMmQ1YjFlZTRmYzRiNmI4ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-21T19:13:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-21T19:13:06Z"}, "message": "openmp: Fix up handling of implicit lastprivate on outer constructs for implicit linear and lastprivate IVs [PR99928]\n\nThis patch fixes the handling of lastprivate propagation to outer combined/composite\nleaf constructs from implicit linear or lastprivate clauses on simd IVs and adds missing\ntestsuite coverage for explicit and implicit lastprivate on simd IVs.\n\n2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99928\n\t* gimplify.c (omp_lastprivate_for_combined_outer_constructs): New\n\tfunction.\n\t(gimplify_scan_omp_clauses) <case OMP_CLAUSE_LASTPRIVATE>: Use it.\n\t(gimplify_omp_for): Likewise.\n\n\t* c-c++-common/gomp/pr99928-6.c: Remove all xfails.\n\t* c-c++-common/gomp/pr99928-13.c: New test.\n\t* c-c++-common/gomp/pr99928-14.c: New test.", "tree": {"sha": "ee7e53ab9316d9b7fd3bab117116b0f875442d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7e53ab9316d9b7fd3bab117116b0f875442d44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325aa13996bafce0c4927876c315d1fa706d9881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325aa13996bafce0c4927876c315d1fa706d9881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325aa13996bafce0c4927876c315d1fa706d9881"}], "stats": {"total": 628, "additions": 423, "deletions": 205}, "files": [{"sha": "28bf1b0ba25d2037b0a5e6c4fbcbd6841c98d4ab", "filename": "gcc/gimplify.c", "status": "modified", "additions": 73, "deletions": 197, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "patch": "@@ -8533,6 +8533,73 @@ omp_target_reorder_clauses (tree *list_p)\n       }\n }\n \n+/* DECL is supposed to have lastprivate semantics in the outer contexts\n+   of combined/composite constructs, starting with OCTX.\n+   Add needed lastprivate, shared or map clause if no data sharing or\n+   mapping clause are present.  IMPLICIT_P is true if it is an implicit\n+   clause (IV on simd), in which case the lastprivate will not be\n+   copied to some constructs.  */\n+\n+static void\n+omp_lastprivate_for_combined_outer_constructs (struct gimplify_omp_ctx *octx,\n+\t\t\t\t\t       tree decl, bool implicit_p)\n+{\n+  struct gimplify_omp_ctx *orig_octx = octx;\n+  for (; octx; octx = octx->outer_context)\n+    {\n+      if ((octx->region_type == ORT_COMBINED_PARALLEL\n+\t   || (octx->region_type & ORT_COMBINED_TEAMS) == ORT_COMBINED_TEAMS)\n+\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t{\n+\t  omp_add_variable (octx, decl, GOVD_SHARED | GOVD_SEEN);\n+\t  continue;\n+\t}\n+      if ((octx->region_type & ORT_TASK) != 0\n+\t  && octx->combined_loop\n+\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t{\n+\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t  continue;\n+\t}\n+      if (implicit_p\n+\t  && octx->region_type == ORT_WORKSHARE\n+\t  && octx->combined_loop\n+\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL\n+\t  && octx->outer_context\n+\t  && octx->outer_context->region_type == ORT_COMBINED_PARALLEL\n+\t  && splay_tree_lookup (octx->outer_context->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t{\n+\t  octx = octx->outer_context;\n+\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t  continue;\n+\t}\n+      if ((octx->region_type == ORT_WORKSHARE || octx->region_type == ORT_ACC)\n+\t  && octx->combined_loop\n+\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL\n+\t  && !omp_check_private (octx, decl, false))\n+\t{\n+\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n+\t  continue;\n+\t}\n+      if (octx->region_type == ORT_COMBINED_TARGET\n+\t  && splay_tree_lookup (octx->variables,\n+\t\t\t\t(splay_tree_key) decl) == NULL)\n+\t{\n+\t  omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n+\t  octx = octx->outer_context;\n+\t  break;\n+\t}\n+      break;\n+    }\n+  if (octx && (implicit_p || octx != orig_octx))\n+    omp_notice_variable (octx, decl, true);\n+}\n+\n /* Scan the OMP clauses in *LIST_P, installing mappings into a new\n    and previous omp contexts.  */\n \n@@ -8642,48 +8709,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    }\n \t  if (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n \t    flags |= GOVD_LASTPRIVATE_CONDITIONAL;\n-\t  struct gimplify_omp_ctx *octx;\n-\t  for (octx = outer_ctx; octx; octx = octx->outer_context)\n-\t    {\n-\t      if ((octx->region_type == ORT_COMBINED_PARALLEL\n-\t\t   || ((octx->region_type & ORT_COMBINED_TEAMS)\n-\t\t\t== ORT_COMBINED_TEAMS))\n-\t\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t\t(splay_tree_key) decl) == NULL)\n-\t\t{\n-\t\t  omp_add_variable (octx, decl, GOVD_SHARED | GOVD_SEEN);\n-\t\t  continue;\n-\t\t}\n-\t      if ((octx->region_type & ORT_TASK) != 0\n-\t\t  && octx->combined_loop\n-\t\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t\t(splay_tree_key) decl) == NULL)\n-\t\t{\n-\t\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t\t  continue;\n-\t\t}\n-\t      if ((octx->region_type == ORT_WORKSHARE\n-\t\t   || octx->region_type == ORT_ACC)\n-\t\t  && octx->combined_loop\n-\t\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t\t(splay_tree_key) decl) == NULL\n-\t\t  && !omp_check_private (octx, decl, false))\n-\t\t{\n-\t\t  omp_add_variable (octx, decl, GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t\t  continue;\n-\t\t}\n-\t      if (octx->region_type == ORT_COMBINED_TARGET\n-\t\t  && splay_tree_lookup (octx->variables,\n-\t\t\t\t\t(splay_tree_key) decl) == NULL)\n-\t\t{\n-\t\t  omp_add_variable (octx, decl, GOVD_MAP | GOVD_SEEN);\n-\t\t  octx = octx->outer_context;\n-\t\t  break;\n-\t\t}\n-\t      break;\n-\t    }\n-\t  if (octx && octx != outer_ctx)\n-\t    omp_notice_variable (octx, decl, true);\n+\t  omp_lastprivate_for_combined_outer_constructs (outer_ctx, decl,\n+\t\t\t\t\t\t\t false);\n \t  goto do_add;\n \tcase OMP_CLAUSE_REDUCTION:\n \t  if (OMP_CLAUSE_REDUCTION_TASK (c))\n@@ -11853,80 +11880,8 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      OMP_FOR_CLAUSES (for_stmt) = c;\n \t      omp_add_variable (gimplify_omp_ctxp, decl, flags);\n \t      if (outer && !OMP_CLAUSE_LINEAR_NO_COPYOUT (c))\n-\t\t{\n-\t\t  if (outer->region_type == ORT_WORKSHARE\n-\t\t      && outer->combined_loop)\n-\t\t    {\n-\t\t      if (outer->outer_context\n-\t\t\t  && (outer->outer_context->region_type\n-\t\t\t      == ORT_COMBINED_PARALLEL))\n-\t\t\touter = outer->outer_context;\n-\t\t      else if (omp_check_private (outer, decl, false))\n-\t\t\touter = NULL;\n-\t\t    }\n-\t\t  else if (((outer->region_type & ORT_TASKLOOP)\n-\t\t\t    == ORT_TASKLOOP)\n-\t\t\t   && outer->combined_loop\n-\t\t\t   && !omp_check_private (gimplify_omp_ctxp,\n-\t\t\t\t\t\t  decl, false))\n-\t\t    ;\n-\t\t  else if (outer->region_type != ORT_COMBINED_PARALLEL)\n-\t\t    {\n-\t\t      omp_notice_variable (outer, decl, true);\n-\t\t      outer = NULL;\n-\t\t    }\n-\t\t  if (outer)\n-\t\t    {\n-\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t      if (n == NULL || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n-\t\t\t{\n-\t\t\t  omp_add_variable (outer, decl,\n-\t\t\t\t\t    GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t\t\t  if (outer->region_type == ORT_COMBINED_PARALLEL\n-\t\t\t      && outer->outer_context\n-\t\t\t      && (outer->outer_context->region_type\n-\t\t\t\t  == ORT_WORKSHARE)\n-\t\t\t      && outer->outer_context->combined_loop)\n-\t\t\t    {\n-\t\t\t      outer = outer->outer_context;\n-\t\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t\t      if (omp_check_private (outer, decl, false))\n-\t\t\t\touter = NULL;\n-\t\t\t      else if (n == NULL\n-\t\t\t\t       || ((n->value & GOVD_DATA_SHARE_CLASS)\n-\t\t\t\t\t   == 0))\n-\t\t\t\tomp_add_variable (outer, decl,\n-\t\t\t\t\t\t  GOVD_LASTPRIVATE\n-\t\t\t\t\t\t  | GOVD_SEEN);\n-\t\t\t      else\n-\t\t\t\touter = NULL;\n-\t\t\t    }\n-\t\t\t  if (outer && outer->outer_context\n-\t\t\t      && ((outer->outer_context->region_type\n-\t\t\t\t   & ORT_COMBINED_TEAMS) == ORT_COMBINED_TEAMS\n-\t\t\t\t  || (((outer->region_type & ORT_TASKLOOP)\n-\t\t\t\t       == ORT_TASKLOOP)\n-\t\t\t\t      && (outer->outer_context->region_type\n-\t\t\t\t\t  == ORT_COMBINED_PARALLEL))))\n-\t\t\t    {\n-\t\t\t      outer = outer->outer_context;\n-\t\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t\t      if (n == NULL\n-\t\t\t\t  || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n-\t\t\t\tomp_add_variable (outer, decl,\n-\t\t\t\t\t\t  GOVD_SHARED | GOVD_SEEN);\n-\t\t\t      else\n-\t\t\t\touter = NULL;\n-\t\t\t    }\n-\t\t\t  if (outer && outer->outer_context)\n-\t\t\t    omp_notice_variable (outer->outer_context, decl,\n-\t\t\t\t\t\t true);\n-\t\t\t}\n-\t\t    }\n-\t\t}\n+\t\tomp_lastprivate_for_combined_outer_constructs (outer, decl,\n+\t\t\t\t\t\t\t       true);\n \t    }\n \t  else\n \t    {\n@@ -11945,87 +11900,8 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      struct gimplify_omp_ctx *outer\n \t\t= gimplify_omp_ctxp->outer_context;\n \t      if (outer && lastprivate)\n-\t\t{\n-\t\t  if (outer->region_type == ORT_WORKSHARE\n-\t\t      && outer->combined_loop)\n-\t\t    {\n-\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t      if (n != NULL && (n->value & GOVD_LOCAL) != 0)\n-\t\t\t{\n-\t\t\t  lastprivate = false;\n-\t\t\t  outer = NULL;\n-\t\t\t}\n-\t\t      else if (outer->outer_context\n-\t\t\t       && (outer->outer_context->region_type\n-\t\t\t\t   == ORT_COMBINED_PARALLEL))\n-\t\t\touter = outer->outer_context;\n-\t\t      else if (omp_check_private (outer, decl, false))\n-\t\t\touter = NULL;\n-\t\t    }\n-\t\t  else if (((outer->region_type & ORT_TASKLOOP)\n-\t\t\t    == ORT_TASKLOOP)\n-\t\t\t   && outer->combined_loop\n-\t\t\t   && !omp_check_private (gimplify_omp_ctxp,\n-\t\t\t\t\t\t  decl, false))\n-\t\t    ;\n-\t\t  else if (outer->region_type != ORT_COMBINED_PARALLEL)\n-\t\t    {\n-\t\t      omp_notice_variable (outer, decl, true);\n-\t\t      outer = NULL;\n-\t\t    }\n-\t\t  if (outer)\n-\t\t    {\n-\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t      if (n == NULL || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n-\t\t\t{\n-\t\t\t  omp_add_variable (outer, decl,\n-\t\t\t\t\t    GOVD_LASTPRIVATE | GOVD_SEEN);\n-\t\t\t  if (outer->region_type == ORT_COMBINED_PARALLEL\n-\t\t\t      && outer->outer_context\n-\t\t\t      && (outer->outer_context->region_type\n-\t\t\t\t  == ORT_WORKSHARE)\n-\t\t\t      && outer->outer_context->combined_loop)\n-\t\t\t    {\n-\t\t\t      outer = outer->outer_context;\n-\t\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t\t      if (omp_check_private (outer, decl, false))\n-\t\t\t\touter = NULL;\n-\t\t\t      else if (n == NULL\n-\t\t\t\t       || ((n->value & GOVD_DATA_SHARE_CLASS)\n-\t\t\t\t\t   == 0))\n-\t\t\t\tomp_add_variable (outer, decl,\n-\t\t\t\t\t\t  GOVD_LASTPRIVATE\n-\t\t\t\t\t\t  | GOVD_SEEN);\n-\t\t\t      else\n-\t\t\t\touter = NULL;\n-\t\t\t    }\n-\t\t\t  if (outer && outer->outer_context\n-\t\t\t      && ((outer->outer_context->region_type\n-\t\t\t\t   & ORT_COMBINED_TEAMS) == ORT_COMBINED_TEAMS\n-\t\t\t\t  || (((outer->region_type & ORT_TASKLOOP)\n-\t\t\t\t       == ORT_TASKLOOP)\n-\t\t\t\t      && (outer->outer_context->region_type\n-\t\t\t\t\t  == ORT_COMBINED_PARALLEL))))\n-\t\t\t    {\n-\t\t\t      outer = outer->outer_context;\n-\t\t\t      n = splay_tree_lookup (outer->variables,\n-\t\t\t\t\t\t     (splay_tree_key)decl);\n-\t\t\t      if (n == NULL\n-\t\t\t\t  || (n->value & GOVD_DATA_SHARE_CLASS) == 0)\n-\t\t\t\tomp_add_variable (outer, decl,\n-\t\t\t\t\t\t  GOVD_SHARED | GOVD_SEEN);\n-\t\t\t      else\n-\t\t\t\touter = NULL;\n-\t\t\t    }\n-\t\t\t  if (outer && outer->outer_context)\n-\t\t\t    omp_notice_variable (outer->outer_context, decl,\n-\t\t\t\t\t\t true);\n-\t\t\t}\n-\t\t    }\n-\t\t}\n+\t\tomp_lastprivate_for_combined_outer_constructs (outer, decl,\n+\t\t\t\t\t\t\t       true);\n \n \t      c = build_omp_clause (input_location,\n \t\t\t\t    lastprivate ? OMP_CLAUSE_LASTPRIVATE"}, {"sha": "d5d8d789adf73ed5526274a1dffcd17980e4462c", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-13.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-13.c?ref=0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "patch": "@@ -0,0 +1,171 @@\n+/* PR middle-end/99928 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple\" } */\n+\n+int j00a, j00b, j01a, j01b, j02a, j02b, j03a, j03b;\n+int j06a, j06b, j07a, j07b, j08a, j08b, j09a, j09b, j10a, j10b;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j00b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n+  #pragma omp distribute parallel for simd collapse(2) lastprivate (j00a, j00b)\n+  for (j00a = 0; j00a < 64; j00a++)\n+    for (j00b = 0; j00b < 4; j00b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01b\\\\)\" \"gimple\" } } */\n+  #pragma omp distribute simd collapse(2) lastprivate (j01a, j01b)\n+  for (j01a = 0; j01a < 64; j01a++)\n+    for (j01b = 0; j01b < 4; j01b++)\n+      ;\n+}\n+\n+void\n+bar (void)\n+{\n+  int j04a, j04b, j05a, j05b, j11a, j11b, j12a, j12b;\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02b\\\\)\" \"gimple\" } } */\n+  #pragma omp for simd collapse(2) lastprivate (j02a, j02b)\n+  for (j02a = 0; j02a < 64; j02a++)\n+    for (j02b = 0; j02b < 4; j02b++)\n+      ;\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  #pragma omp master taskloop simd collapse(2) lastprivate (j03a, j03b)\n+  for (j03a = 0; j03a < 64; j03a++)\n+    for (j03b = 0; j03b < 4; j03b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j04a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j04a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j04b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n+  #pragma omp parallel for simd collapse(2) lastprivate (j04a, j04b)\n+  for (j04a = 0; j04a < 64; j04a++)\n+    for (j04b = 0; j04b < 4; j04b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  #pragma omp parallel master taskloop simd collapse(2) lastprivate (j05a, j05b)\n+  for (j05a = 0; j05a < 64; j05a++)\n+    for (j05b = 0; j05b < 4; j05b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j06b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n+  #pragma omp target parallel for simd collapse(2) lastprivate (j06a, j06b)\n+  for (j06a = 0; j06a < 64; j06a++)\n+    for (j06b = 0; j06b < 4; j06b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n+  #pragma omp target simd collapse(2) lastprivate (j07a, j07b)\n+  for (j07a = 0; j07a < 64; j07a++)\n+    for (j07b = 0; j07b < 4; j07b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  #pragma omp target teams distribute parallel for simd collapse(2) lastprivate (j08a, j08b)\n+  for (j08a = 0; j08a < 64; j08a++)\n+    for (j08b = 0; j08b < 4; j08b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  #pragma omp target teams distribute simd collapse(2) lastprivate (j09a, j09b)\n+  for (j09a = 0; j09a < 64; j09a++)\n+    for (j09b = 0; j09b < 4; j09b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n+  #pragma omp taskloop simd collapse(2) lastprivate (j10a, j10b)\n+  for (j10a = 0; j10a < 64; j10a++)\n+    for (j10b = 0; j10b < 4; j10b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n+  #pragma omp teams distribute parallel for simd collapse(2) lastprivate (j11a, j11b)\n+  for (j11a = 0; j11a < 64; j11a++)\n+    for (j11b = 0; j11b < 4; j11b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n+  #pragma omp teams distribute simd collapse(2) lastprivate (j12a, j12b)\n+  for (j12a = 0; j12a < 64; j12a++)\n+    for (j12b = 0; j12b < 4; j12b++)\n+      ;\n+}"}, {"sha": "2d9e0be5d885bffece72791d2c0b0025f3d5ffb6", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-14.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-14.c?ref=0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "patch": "@@ -0,0 +1,171 @@\n+/* PR middle-end/99928 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple\" } */\n+\n+int j00a, j00b, j01a, j01b, j02a, j02b, j03a, j03b, j04a, j04b;\n+int j06a, j06b, j07a, j07b, j08a, j08b, j09a, j09b, j10a, j10b;\n+\n+void\n+foo (void)\n+{\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00b\\\\)\" \"gimple\" } } */\n+  #pragma omp distribute parallel for simd collapse(2)\n+  for (j00a = 0; j00a < 64; j00a++)\n+    for (j00b = 0; j00b < 4; j00b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01b\\\\)\" \"gimple\" } } */\n+  #pragma omp distribute simd collapse(2)\n+  for (j01a = 0; j01a < 64; j01a++)\n+    for (j01b = 0; j01b < 4; j01b++)\n+      ;\n+}\n+\n+void\n+bar (void)\n+{\n+  int j05a, j05b, j11a, j11b, j12a, j12b;\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02b\\\\)\" \"gimple\" } } */\n+  #pragma omp for simd collapse(2)\n+  for (j02a = 0; j02a < 64; j02a++)\n+    for (j02b = 0; j02b < 4; j02b++)\n+      ;\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03b\\\\)\" \"gimple\" } } */\n+  #pragma omp master taskloop simd collapse(2)\n+  for (j03a = 0; j03a < 64; j03a++)\n+    for (j03b = 0; j03b < 4; j03b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04a\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04a\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j04b\\\\)\" \"gimple\" } } */\n+  #pragma omp parallel for simd collapse(2)\n+  for (j04a = 0; j04a < 64; j04a++)\n+    for (j04b = 0; j04b < 4; j04b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j05b\\\\)\" \"gimple\" } } */\n+  #pragma omp parallel master taskloop simd collapse(2)\n+  for (j05a = 0; j05a < 64; j05a++)\n+    for (j05b = 0; j05b < 4; j05b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06a\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06a\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j06b\\\\)\" \"gimple\" } } */\n+  #pragma omp target parallel for simd collapse(2)\n+  for (j06a = 0; j06a < 64; j06a++)\n+    for (j06b = 0; j06b < 4; j06b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j07b\\\\)\" \"gimple\" } } */\n+  #pragma omp target simd collapse(2)\n+  for (j07a = 0; j07a < 64; j07a++)\n+    for (j07b = 0; j07b < 4; j07b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j08b\\\\)\" \"gimple\" } } */\n+  #pragma omp target teams distribute parallel for simd collapse(2)\n+  for (j08a = 0; j08a < 64; j08a++)\n+    for (j08b = 0; j08b < 4; j08b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09a\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09b\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j09b\\\\)\" \"gimple\" } } */\n+  #pragma omp target teams distribute simd collapse(2)\n+  for (j09a = 0; j09a < 64; j09a++)\n+    for (j09b = 0; j09b < 4; j09b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10a\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10b\\\\)\" \"gimple\" } } *//* NOTE: This is implementation detail.  */\n+  /* { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j10b\\\\)\" \"gimple\" } } */\n+  #pragma omp taskloop simd collapse(2)\n+  for (j10a = 0; j10a < 64; j10a++)\n+    for (j10b = 0; j10b < 4; j10b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n+  /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } *//* FIXME.  */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j11b\\\\)\" \"gimple\" } } */\n+  #pragma omp teams distribute parallel for simd collapse(2)\n+  for (j11a = 0; j11a < 64; j11a++)\n+    for (j11b = 0; j11b < 4; j11b++)\n+      ;\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12a\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j12b\\\\)\" \"gimple\" } } */\n+  #pragma omp teams distribute simd collapse(2)\n+  for (j12a = 0; j12a < 64; j12a++)\n+    for (j12b = 0; j12b < 4; j12b++)\n+      ;\n+}"}, {"sha": "918a97e8167f536f7ba6b9c642e031bbf515f889", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-6.c?ref=0c6e792dd5c96a48c873b73c2d5b1ee4fc4b6b8e", "patch": "@@ -52,22 +52,22 @@ bar (void)\n   #pragma omp parallel master taskloop simd\n   for (j05 = 0; j05 < 64; j05++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } } */\n   #pragma omp target parallel for simd\n   for (j06 = 0; j06 < 64; j06++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } } */\n   #pragma omp target simd\n   for (j07 = 0; j07 < 64; j07++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n@@ -76,8 +76,8 @@ bar (void)\n   #pragma omp target teams distribute parallel for simd\n   for (j08 = 0; j08 < 64; j08++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } } */"}]}