{"sha": "dadda6caba15b21a03e9522ca5cce41e2c2d270b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkZGE2Y2FiYTE1YjIxYTAzZTk1MjJjYTVjY2U0MWUyYzJkMjcwYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-18T20:22:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-18T20:22:32Z"}, "message": "re PR target/32641 (C99 fpclassify, isinf, isfinite, isnormal may raise FP exceptions)\n\nfixincludes:\n\tPR target/32641\n\n\t* inclhack.def (solaris_math_4, solaris_math_5, solaris_math_6,\n\tsolaris_math_7): Constify and make FP exception-safe.\n\t* tests/base/iso/math_c99.h: Update.\n\n\t* fixincl.x: Regenerate.\n\ngcc/testsuite:\n\t* gcc.dg/c99-math-double-1.c: Mark test variables as volatile.\n\tTest negative numbers also.\n\t* gcc.dg/c99-math-float-1.c: Likewise.\n\t* gcc.dg/c99-math-long-double-1.c: Likewise.\n\t* gcc.dg/c99-math.h: Check for FP exceptions.  Update for negative\n\ttest inputs.\n\nFrom-SVN: r126730", "tree": {"sha": "cbf2a3e15dd08f11a41d46289515a304aec79ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf2a3e15dd08f11a41d46289515a304aec79ed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dadda6caba15b21a03e9522ca5cce41e2c2d270b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadda6caba15b21a03e9522ca5cce41e2c2d270b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dadda6caba15b21a03e9522ca5cce41e2c2d270b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadda6caba15b21a03e9522ca5cce41e2c2d270b/comments", "author": null, "committer": null, "parents": [{"sha": "2a48b790b26895fd7fb56c9ce1d64f083dd278bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a48b790b26895fd7fb56c9ce1d64f083dd278bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a48b790b26895fd7fb56c9ce1d64f083dd278bb"}], "stats": {"total": 293, "additions": 226, "deletions": 67}, "files": [{"sha": "eb1e719baf2a1804396ff4abba9672509b27b592", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -1,3 +1,13 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR target/32641\n+\n+\t* inclhack.def (solaris_math_4, solaris_math_5, solaris_math_6,\n+\tsolaris_math_7): Constify and make FP exception-safe.\n+\t* tests/base/iso/math_c99.h: Update.\n+\n+\t* fixincl.x: Regenerate.\n+\n 2007-07-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR libgcj/28190"}, {"sha": "41818d5605a180427bb1afb73fd604a1891bc550", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday June 29, 2007 at 06:59:26 PM MEST\n+ * It has been AutoGen-ed  Saturday July  7, 2007 at 11:23:30 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Fri Jun 29 18:59:26 MEST 2007\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jul  7 23:23:30 EDT 2007\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -5629,7 +5629,7 @@ static tTestDesc aSolaris_Math_4Tests[] = {\n static const char* apzSolaris_Math_4Patch[] = {\n     \"format\",\n     \"#define\\tfpclassify(x) \\\\\\n\\\n-  __extension__ ({ __typeof(x) __x_fp = (x); \\\\\\n\\\n+  __extension__ ({ const __typeof(x) __x_fp = (x); \\\\\\n\\\n \\t\\t   isnan(__x_fp) \\\\\\n\\\n \\t\\t     ? FP_NAN \\\\\\n\\\n \\t\\t     : isinf(__x_fp) \\\\\\n\\\n@@ -5682,8 +5682,12 @@ static tTestDesc aSolaris_Math_5Tests[] = {\n static const char* apzSolaris_Math_5Patch[] = {\n     \"format\",\n     \"#define\\tisfinite(x) \\\\\\n\\\n-  __extension__ ({ __typeof (x) __x_f = (x); \\\\\\n\\\n-\\t\\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\",\n+  __extension__ ({ const __typeof (x) __x_f = (x); \\\\\\n\\\n+\\t\\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\\\\n\\\n+\\t\\t\\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\\\\n\\\n+\\t\\t\\t  : sizeof(__x_f) == sizeof(long double) \\\\\\n\\\n+\\t\\t\\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\\\\n\\\n+\\t\\t\\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\",\n     \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\",\n     (char*)NULL };\n \n@@ -5727,8 +5731,12 @@ static tTestDesc aSolaris_Math_6Tests[] = {\n static const char* apzSolaris_Math_6Patch[] = {\n     \"format\",\n     \"#define\\tisinf(x) \\\\\\n\\\n-  __extension__ ({ __typeof (x) __x_i = (x); \\\\\\n\\\n-\\t\\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\",\n+  __extension__ ({ const __typeof (x) __x_i = (x); \\\\\\n\\\n+\\t\\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\\\\n\\\n+\\t\\t\\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\\\\n\\\n+\\t\\t\\t  : sizeof(__x_i) == sizeof(long double) \\\\\\n\\\n+\\t\\t\\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\\\\n\\\n+\\t\\t\\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\",\n     \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\",\n     (char*)NULL };\n \n@@ -5772,14 +5780,13 @@ static tTestDesc aSolaris_Math_7Tests[] = {\n static const char* apzSolaris_Math_7Patch[] = {\n     \"format\",\n     \"#define\\tisnormal(x) \\\\\\n\\\n-  __extension__ ({ __typeof(x) __x_n = (x); \\\\\\n\\\n-\\t\\t   if (__x_n < 0.0) __x_n = -__x_n; \\\\\\n\\\n+  __extension__ ({ const __typeof(x) __x_n = (x); \\\\\\n\\\n \\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\\\n \\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\\\n-\\t\\t\\t\\t\\t  ? __x_n >= __FLT_MIN__ \\\\\\n\\\n+\\t\\t\\t\\t\\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\\\\n\\\n \\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\\\n-\\t\\t\\t\\t\\t    ? __x_n >= __LDBL_MIN__ \\\\\\n\\\n-\\t\\t\\t\\t\\t    : __x_n >= __DBL_MIN__), 1); })\",\n+\\t\\t\\t\\t\\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\\\\n\\\n+\\t\\t\\t\\t\\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\",\n     \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\",\n     (char*)NULL };\n "}, {"sha": "fbc1b2a62d42c82f1cbb1cf5810112b4eb02f3c9", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -3088,7 +3088,7 @@ fix = {\n     files = iso/math_c99.h;\n     c_fix = format;\n     c_fix_arg = \"#define\\tfpclassify(x) \\\\\\n\"\n-                \"  __extension__ ({ __typeof(x) __x_fp = (x); \\\\\\n\"\n+                \"  __extension__ ({ const __typeof(x) __x_fp = (x); \\\\\\n\"\n                 \"\\t\\t   isnan(__x_fp) \\\\\\n\"\n                 \"\\t\\t     ? FP_NAN \\\\\\n\"\n                 \"\\t\\t     : isinf(__x_fp) \\\\\\n\"\n@@ -3112,8 +3112,12 @@ fix = {\n     files = iso/math_c99.h;\n     c_fix = format;\n     c_fix_arg = \"#define\\tisfinite(x) \\\\\\n\"\n-                \"  __extension__ ({ __typeof (x) __x_f = (x); \\\\\\n\"\n-                \"\\t\\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\";\n+                \"  __extension__ ({ const __typeof (x) __x_f = (x); \\\\\\n\"\n+                \"\\t\\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\\\\n\"\n+                \"\\t\\t\\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\\\\n\"\n+                \"\\t\\t\\t  : sizeof(__x_f) == sizeof(long double) \\\\\\n\"\n+                \"\\t\\t\\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\\\\n\"\n+                \"\\t\\t\\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\";\n     c_fix_arg = \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\";\n     test_text =\n     '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n@@ -3128,8 +3132,12 @@ fix = {\n     files = iso/math_c99.h;\n     c_fix = format;\n     c_fix_arg = \"#define\\tisinf(x) \\\\\\n\"\n-                \"  __extension__ ({ __typeof (x) __x_i = (x); \\\\\\n\"\n-                \"\\t\\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\";\n+                \"  __extension__ ({ const __typeof (x) __x_i = (x); \\\\\\n\"\n+                \"\\t\\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\\\\n\"\n+                \"\\t\\t\\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\\\\n\"\n+                \"\\t\\t\\t  : sizeof(__x_i) == sizeof(long double) \\\\\\n\"\n+                \"\\t\\t\\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\\\\n\"\n+                \"\\t\\t\\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\";\n     c_fix_arg = \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\";\n     test_text =\n     '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n@@ -3144,14 +3152,13 @@ fix = {\n     files = iso/math_c99.h;\n     c_fix = format;\n     c_fix_arg = \"#define\\tisnormal(x) \\\\\\n\"\n-                \"  __extension__ ({ __typeof(x) __x_n = (x); \\\\\\n\"\n-                \"\\t\\t   if (__x_n < 0.0) __x_n = -__x_n; \\\\\\n\"\n+                \"  __extension__ ({ const __typeof(x) __x_n = (x); \\\\\\n\"\n                 \"\\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\"\n                 \"\\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t  ? __x_n >= __FLT_MIN__ \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\\\\n\"\n                 \"\\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t    ? __x_n >= __LDBL_MIN__ \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t    : __x_n >= __DBL_MIN__), 1); })\";\n+                \"\\t\\t\\t\\t\\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\";\n     c_fix_arg = \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\";\n     test_text =\n     '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\""}, {"sha": "bc2b653424d4db89e56e379b526822b059986ef9", "filename": "fixincludes/tests/base/iso/math_c99.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -38,7 +38,7 @@\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tfpclassify\n #define\tfpclassify(x) \\\n-  __extension__ ({ __typeof(x) __x_fp = (x); \\\n+  __extension__ ({ const __typeof(x) __x_fp = (x); \\\n \t\t   isnan(__x_fp) \\\n \t\t     ? FP_NAN \\\n \t\t     : isinf(__x_fp) \\\n@@ -55,32 +55,39 @@\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tisfinite\n #define\tisfinite(x) \\\n-  __extension__ ({ __typeof (x) __x_f = (x); \\\n-\t\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\n+  __extension__ ({ const __typeof (x) __x_f = (x); \\\n+\t\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\n+\t\t\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\n+\t\t\t  : sizeof(__x_f) == sizeof(long double) \\\n+\t\t\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\n+\t\t\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\n #endif  /* SOLARIS_MATH_5_CHECK */\n \n \n #if defined( SOLARIS_MATH_6_CHECK )\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tisinf\n #define\tisinf(x) \\\n-  __extension__ ({ __typeof (x) __x_i = (x); \\\n-\t\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\n+  __extension__ ({ const __typeof (x) __x_i = (x); \\\n+\t\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\n+\t\t\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\n+\t\t\t  : sizeof(__x_i) == sizeof(long double) \\\n+\t\t\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\n+\t\t\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\n #endif  /* SOLARIS_MATH_6_CHECK */\n \n \n #if defined( SOLARIS_MATH_7_CHECK )\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tisnormal\n #define\tisnormal(x) \\\n-  __extension__ ({ __typeof(x) __x_n = (x); \\\n-\t\t   if (__x_n < 0.0) __x_n = -__x_n; \\\n+  __extension__ ({ const __typeof(x) __x_n = (x); \\\n \t\t   __builtin_expect(isfinite(__x_n) \\\n \t\t\t\t    && (sizeof(__x_n) == sizeof(float) \\\n-\t\t\t\t\t  ? __x_n >= __FLT_MIN__ \\\n+\t\t\t\t\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\n \t\t\t\t\t  : sizeof(__x_n) == sizeof(long double) \\\n-\t\t\t\t\t    ? __x_n >= __LDBL_MIN__ \\\n-\t\t\t\t\t    : __x_n >= __DBL_MIN__), 1); })\n+\t\t\t\t\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\n+\t\t\t\t\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\n #endif  /* SOLARIS_MATH_7_CHECK */\n \n "}, {"sha": "1cac088530492051745bc84352acc96b021f26e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -1,3 +1,12 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/c99-math-double-1.c: Mark test variables as volatile.\n+\tTest negative numbers also.\n+\t* gcc.dg/c99-math-float-1.c: Likewise.\n+\t* gcc.dg/c99-math-long-double-1.c: Likewise.\n+\t* gcc.dg/c99-math.h: Check for FP exceptions.  Update for negative\n+\ttest inputs.\n+\n 2007-07-18  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* lib/target-supports.exp (check_effective_target_sync_int_long):"}, {"sha": "6441a59fe1c261b0b7ecf6c61e407343ef518554", "filename": "gcc/testsuite/gcc.dg/c99-math-double-1.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -6,14 +6,17 @@\n \n int main(void)\n {\n-  double nan = NAN;\n-  double inf = INFINITY;\n-  double huge = HUGE_VAL;\n-  double norm = __DBL_MIN__;\n-  double sub = __DBL_MIN__ / 2;\n-  double zero = 0.0;\n+  volatile double nan = NAN;\n+  volatile double inf = INFINITY;\n+  volatile double huge = HUGE_VAL;\n+  volatile double norm1 = __DBL_MIN__;\n+  volatile double norm2 = 1;\n+  volatile double norm3 = __DBL_MAX__;\n+  volatile double sub = __DBL_MIN__ / 2;\n+  volatile double zero = 0.0;\n \n-  C99_MATH_TESTS (nan, inf, huge, norm, sub, zero)\n+  C99_MATH_TESTS (nan, inf, huge, norm1, norm2, norm3, sub, zero, /*neg=*/0)\n+  C99_MATH_TESTS (-nan, -inf, -huge, -norm1, -norm2, -norm3, -sub, -zero, /*neg=*/1)\n \n   return 0;\n }"}, {"sha": "36a73960266eb6b881a73c976a1319c7cffce5c0", "filename": "gcc/testsuite/gcc.dg/c99-math-float-1.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -6,14 +6,17 @@\n \n int main(void)\n {\n-  float nan = NAN;\n-  float inf = INFINITY;\n-  float huge = HUGE_VALF;\n-  float norm = __FLT_MIN__;\n-  float sub = __FLT_MIN__ / 2;\n-  float zero = 0.0f;\n+  volatile float nan = NAN;\n+  volatile float inf = INFINITY;\n+  volatile float huge = HUGE_VALF;\n+  volatile float norm1 = __FLT_MIN__;\n+  volatile float norm2 = 1;\n+  volatile float norm3 = __FLT_MAX__;\n+  volatile float sub = __FLT_MIN__ / 2;\n+  volatile float zero = 0.0f;\n \n-  C99_MATH_TESTS (nan, inf, huge, norm, sub, zero)\n+  C99_MATH_TESTS (nan, inf, huge, norm1, norm2, norm3, sub, zero, /*neg=*/0)\n+  C99_MATH_TESTS (-nan, -inf, -huge, -norm1, -norm2, -norm3, -sub, -zero, /*neg=*/1)\n \n   return 0;\n }"}, {"sha": "d8146c28a5a2874b00f27e6b5dcf7d6059f325e5", "filename": "gcc/testsuite/gcc.dg/c99-math-long-double-1.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -6,14 +6,17 @@\n \n int main(void)\n {\n-  long double nan = NAN;\n-  long double inf = INFINITY;\n-  long double huge = HUGE_VALL;\n-  long double norm = __LDBL_MIN__;\n-  long double sub = __LDBL_MIN__ / 2;\n-  long double zero = 0.0l;\n+  volatile long double nan = NAN;\n+  volatile long double inf = INFINITY;\n+  volatile long double huge = HUGE_VALL;\n+  volatile long double norm1 = __LDBL_MIN__;\n+  volatile long double norm2 = 1;\n+  volatile long double norm3 = __LDBL_MAX__;\n+  volatile long double sub = __LDBL_MIN__ / 2;\n+  volatile long double zero = 0.0l;\n \n-  C99_MATH_TESTS (nan, inf, huge, norm, sub, zero)\n+  C99_MATH_TESTS (nan, inf, huge, norm1, norm2, norm3, sub, zero, /*neg=*/0)\n+  C99_MATH_TESTS (-nan, -inf, -huge, -norm1, -norm2, -norm3, -sub, -zero, /*neg=*/1)\n \n   return 0;\n }"}, {"sha": "81f2e6ddb433110a60af7dc21051546938ea5ab8", "filename": "gcc/testsuite/gcc.dg/c99-math.h", "status": "modified", "additions": 124, "deletions": 14, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadda6caba15b21a03e9522ca5cce41e2c2d270b/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h?ref=dadda6caba15b21a03e9522ca5cce41e2c2d270b", "patch": "@@ -1,9 +1,14 @@\n #include <math.h>\n+#include <fenv.h>\n \n extern void abort(void);\n \n-#define C99_MATH_TESTS(nan, inf, huge, norm, sub, zero)\t\\\n+#define C99_MATH_TESTS(nan, inf, huge, norm1, norm2, norm3, sub, zero, neg) \\\n {\t\t\t\t\t\t\t\\\n+  if (feclearexcept (FE_ALL_EXCEPT) != 0)\t\t\\\n+    abort();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n   if (fpclassify (nan) != FP_NAN)\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n@@ -13,7 +18,13 @@ extern void abort(void);\n   if (fpclassify (huge) != FP_INFINITE)\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (fpclassify (norm) != FP_NORMAL)\t\t\t\\\n+  if (fpclassify (norm1) != FP_NORMAL)\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (fpclassify (norm2) != FP_NORMAL)\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (fpclassify (norm3) != FP_NORMAL)\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   if (fpclassify (sub) != FP_SUBNORMAL)\t\t\t\\\n@@ -32,7 +43,13 @@ extern void abort(void);\n   if (isnan (huge))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (isnan (norm))\t\t\t\t\t\\\n+  if (isnan (norm1))\t\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (isnan (norm2))\t\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (isnan (norm3))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   if (isnan (sub))\t\t\t\t\t\\\n@@ -51,7 +68,13 @@ extern void abort(void);\n   if (!isinf (huge))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (isinf (norm))\t\t\t\t\t\\\n+  if (isinf (norm1))\t\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (isinf (norm2))\t\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (isinf (norm3))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   if (isinf (sub))\t\t\t\t\t\\\n@@ -70,7 +93,13 @@ extern void abort(void);\n   if (isfinite (huge))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isfinite (norm))\t\t\t\t\t\\\n+  if (!isfinite (norm1))\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isfinite (norm2))\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isfinite (norm3))\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   if (!isfinite (sub))\t\t\t\t\t\\\n@@ -89,7 +118,13 @@ extern void abort(void);\n   if (isnormal (huge))\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isnormal (norm))\t\t\t\t\t\\\n+  if (!isnormal (norm1))\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isnormal (norm2))\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isnormal (norm3))\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n   if (isnormal (sub))\t\t\t\t\t\\\n@@ -99,28 +134,103 @@ extern void abort(void);\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (signbit (norm))\t\t\t\t\t\\\n+  if (!!signbit (nan) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!signbit (-(norm)))\t\t\t\t\\\n+  if (!!signbit (inf) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n+  if (!!signbit (huge) != neg)\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isgreater ((inf), (norm)))\t\t\t\\\n+  if (!!signbit (norm1) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isgreaterequal ((inf), (huge)))\t\t\t\\\n+  if (!!signbit (norm2) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isless ((norm), (inf)))\t\t\t\t\\\n+  if (!!signbit (norm3) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!islessequal ((huge), (inf)))\t\t\t\\\n+  if (!!signbit (sub) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!islessgreater ((inf), (norm)))\t\t\t\\\n+  if (!!signbit (zero) != neg)\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  if (!isunordered ((nan), (norm)))\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (neg)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (!isless ((inf), (norm1)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isless ((inf), (norm2)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isless ((inf), (norm3)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!islessequal ((inf), (huge)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreater ((norm1), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreater ((norm2), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreater ((norm3), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreaterequal ((huge), (inf)))\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    if (!isgreater ((inf), (norm1)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreater ((inf), (norm2)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreater ((inf), (norm3)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isgreaterequal ((inf), (huge)))\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isless ((norm1), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isless ((norm2), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!isless ((norm3), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (!islessequal ((huge), (inf)))\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!islessgreater ((inf), (norm1)))\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!islessgreater ((inf), (norm2)))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!islessgreater ((inf), (norm3)))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isunordered ((nan), (norm1)))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isunordered ((nan), (norm2)))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (!isunordered ((nan), (norm3)))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  if (fetestexcept (FE_ALL_EXCEPT) != 0)\t\t\\\n+    abort();\t\t\t\t\t\t\\\n }"}]}