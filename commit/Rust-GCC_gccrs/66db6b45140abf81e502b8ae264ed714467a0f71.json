{"sha": "66db6b45140abf81e502b8ae264ed714467a0f71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkYjZiNDUxNDBhYmY4MWU1MDJiOGFlMjY0ZWQ3MTQ0NjdhMGY3MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-25T22:06:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-25T22:06:29Z"}, "message": "ia64.c (ia64_print_operand): Define 'e' as 64-n.\n\n        * config/ia64/ia64.c (ia64_print_operand): Define 'e' as 64-n.\n        * config/ia64/ia64.md (rotrsi3): Allow variable rotates; don't\n        split until after reload.\n        (rotlsi3, rotldi3): New.\n\nFrom-SVN: r36632", "tree": {"sha": "96632b47087883e0195dbceed7553c19b4bdf941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96632b47087883e0195dbceed7553c19b4bdf941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66db6b45140abf81e502b8ae264ed714467a0f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66db6b45140abf81e502b8ae264ed714467a0f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66db6b45140abf81e502b8ae264ed714467a0f71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66db6b45140abf81e502b8ae264ed714467a0f71/comments", "author": null, "committer": null, "parents": [{"sha": "a5e3fe86a231394328a57ac1d3c157cca884602c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e3fe86a231394328a57ac1d3c157cca884602c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e3fe86a231394328a57ac1d3c157cca884602c"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "d80a03c65b61086f9e821056b3a8074b1d246e64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66db6b45140abf81e502b8ae264ed714467a0f71", "patch": "@@ -1,3 +1,10 @@\n+2000-09-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.c (ia64_print_operand): Define 'e' as 64-n.\n+\t* config/ia64/ia64.md (rotrsi3): Allow variable rotates; don't\n+\tsplit until after reload.\n+\t(rotlsi3, rotldi3): New.\n+\n 2000-09-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (output_last_position): Define."}, {"sha": "2d77d89dde0a04a054e8103224075c87428bb9ef", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=66db6b45140abf81e502b8ae264ed714467a0f71", "patch": "@@ -3090,6 +3090,7 @@ ia64_print_operand_address (stream, address)\n    C\tSwap and print a comparison operator.\n    D\tPrint an FP comparison operator.\n    E    Print 32 - constant, for SImode shifts as extract.\n+   e    Print 64 - constant, for DImode rotates.\n    F\tA floating point constant 0.0 emitted as f0, or 1.0 emitted as f1, or\n         a floating point register emitted normally.\n    I\tInvert a predicate register by adding 1.\n@@ -3154,6 +3155,10 @@ ia64_print_operand (file, x, code)\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC, 32 - INTVAL (x));\n       return;\n \n+    case 'e':\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, 64 - INTVAL (x));\n+      return;\n+\n     case 'F':\n       if (x == CONST0_RTX (GET_MODE (x)))\n \tstr = reg_names [FR_REG (0)];"}, {"sha": "52c1c7c464f8c9102c6de90ebdf565eba552638c", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66db6b45140abf81e502b8ae264ed714467a0f71/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=66db6b45140abf81e502b8ae264ed714467a0f71", "patch": "@@ -3858,24 +3858,68 @@\n }\")\n \n ;; Use mix4.r/shr to implement rotrsi3.  We only get 32 bits of valid result\n-;; here, instead of 64 like the patterns above.\n+;; here, instead of 64 like the patterns above.  Keep the pattern together\n+;; until after combine; otherwise it won't get matched often.\n \n (define_expand \"rotrsi3\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(rotatert:SI (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"gr_reg_or_5bit_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (GET_MODE (operands[2]) != VOIDmode)\n+    {\n+      rtx tmp = gen_reg_rtx (DImode);\n+      emit_insn (gen_zero_extendsidi2 (tmp, operands[2]));\n+      operands[2] = tmp;\n+    }\n+}\")\n+\n+(define_insn_and_split \"*rotrsi3_internal\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=&r\")\n+\t(rotatert:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"gr_reg_or_5bit_operand\" \"rM\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n   [(set (match_dup 3)\n-\t(ior:DI (zero_extend:DI (match_operand:SI 1 \"gr_register_operand\" \"\"))\n+\t(ior:DI (zero_extend:DI (match_dup 1))\n \t\t(ashift:DI (zero_extend:DI (match_dup 1)) (const_int 32))))\n    (set (match_dup 3)\n-\t(lshiftrt:DI (match_dup 3)\n-\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n-   (set (match_operand:SI 0 \"gr_register_operand\" \"\") (match_dup 4))]\n+\t(lshiftrt:DI (match_dup 3) (match_dup 2)))]\n+  \"operands[3] = gen_rtx_REG (DImode, REGNO (operands[0]));\")\n+\n+(define_expand \"rotlsi3\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(rotate:SI (match_operand:SI 1 \"gr_register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"gr_reg_or_5bit_operand\" \"\")))]\n   \"\"\n   \"\n {\n   if (! shift_32bit_count_operand (operands[2], SImode))\n-    FAIL;\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_lowpart (SImode, operands[3]);\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_subsi3 (tmp, GEN_INT (32), operands[2]));\n+      emit_insn (gen_rotrsi3 (operands[0], operands[1], tmp));\n+      DONE;\n+    }\n }\")\n+\n+(define_insn_and_split \"*rotlsi3_internal\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(rotate:SI (match_operand:SI 1 \"gr_register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"shift_32bit_count_operand\" \"n\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n+\t(ior:DI (zero_extend:DI (match_dup 1))\n+\t\t(ashift:DI (zero_extend:DI (match_dup 1)) (const_int 32))))\n+   (set (match_dup 3)\n+\t(lshiftrt:DI (match_dup 3) (match_dup 2)))]\n+  \"operands[3] = gen_rtx_REG (DImode, REGNO (operands[0]));\n+   operands[2] = GEN_INT (32 - INTVAL (operands[2]));\")\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -3967,6 +4011,24 @@\n   \"shrp %0 = %1, %1, %2\"\n   [(set_attr \"type\" \"I\")])\n \n+(define_expand \"rotldi3\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"\")\n+\t(rotate:DI (match_operand:DI 1 \"gr_register_operand\" \"\")\n+\t\t   (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  if (! shift_count_operand (operands[2], DImode))\n+    FAIL;\n+}\")\n+\n+(define_insn \"*rotldi3_internal\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(rotate:DI (match_operand:DI 1 \"gr_register_operand\" \"r\")\n+\t\t   (match_operand:DI 2 \"shift_count_operand\" \"M\")))]\n+  \"\"\n+  \"shrp %0 = %1, %1, %e2\"\n+  [(set_attr \"type\" \"I\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::"}]}