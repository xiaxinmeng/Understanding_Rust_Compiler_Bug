{"sha": "ba63ed560e46903b5cdb272f3aa265215936da59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2M2VkNTYwZTQ2OTAzYjVjZGIyNzJmM2FhMjY1MjE1OTM2ZGE1OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:12:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:12:29Z"}, "message": "If __STDC__, include gstdarg and use ANSI form of varargs.\n\nFrom-SVN: r6518", "tree": {"sha": "1193f134709946eb4d05b43f7a29517d1a140620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1193f134709946eb4d05b43f7a29517d1a140620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba63ed560e46903b5cdb272f3aa265215936da59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba63ed560e46903b5cdb272f3aa265215936da59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba63ed560e46903b5cdb272f3aa265215936da59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba63ed560e46903b5cdb272f3aa265215936da59/comments", "author": null, "committer": null, "parents": [{"sha": "e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e2a8dafa2fd8c11b717db8c4dbb949c05be515"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "952b086f42feb3b2fc854899aa8d54c1a65c7d93", "filename": "gcc/tree.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba63ed560e46903b5cdb272f3aa265215936da59/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba63ed560e46903b5cdb272f3aa265215936da59/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ba63ed560e46903b5cdb272f3aa265215936da59", "patch": "@@ -37,7 +37,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include <stdio.h>\n \n #define obstack_chunk_alloc xmalloc\n@@ -2386,21 +2390,27 @@ stabilize_reference_1 (e)\n    Constants, decls, types and misc nodes cannot be.  */\n \n tree\n-build (va_alist)\n-     va_dcl\n+build VPROTO((enum tree_code code, tree tt, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   enum tree_code code;\n+  tree tt;\n+#endif\n+  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  va_start (p);\n+  VA_START (p, tt);\n \n+#ifndef __STDC__\n   code = va_arg (p, enum tree_code);\n+  tt = va_arg (p, tree);\n+#endif\n+\n   t = make_node (code);\n   length = tree_code_length[(int) code];\n-  TREE_TYPE (t) = va_arg (p, tree);\n+  TREE_TYPE (t) = tt;\n \n   if (length == 2)\n     {\n@@ -2504,18 +2514,22 @@ build1 (code, type, node)\n    or even garbage if their values do not matter.  */\n \n tree\n-build_nt (va_alist)\n-     va_dcl\n+build_nt VPROTO((register enum tree_code code, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   register enum tree_code code;\n+#endif\n+  va_list p;\n   register tree t;\n   register int length;\n   register int i;\n \n-  va_start (p);\n+  VA_START (p, code);\n \n+#ifndef __STDC__\n   code = va_arg (p, enum tree_code);\n+#endif\n+\n   t = make_node (code);\n   length = tree_code_length[(int) code];\n \n@@ -2530,21 +2544,25 @@ build_nt (va_alist)\n    on the temp_decl_obstack, regardless.  */\n \n tree\n-build_parse_node (va_alist)\n-     va_dcl\n+build_parse_node VPROTO((register enum tree_code code, ...))\n {\n+#ifndef __STDC__\n+  register enum tree_code code;\n+#endif\n   register struct obstack *ambient_obstack = expression_obstack;\n   va_list p;\n-  register enum tree_code code;\n   register tree t;\n   register int length;\n   register int i;\n \n-  expression_obstack = &temp_decl_obstack;\n-\n-  va_start (p);\n+  VA_START (p, code);\n \n+#ifndef __STDC__\n   code = va_arg (p, enum tree_code);\n+#endif\n+\n+  expression_obstack = &temp_decl_obstack;\n+\n   t = make_node (code);\n   length = tree_code_length[(int) code];\n "}]}