{"sha": "486837a79c0b0c8ec9bdacacddf62ca20ff90507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2ODM3YTc5YzBiMGM4ZWM5YmRhY2FjZGRmNjJjYTIwZmY5MDUwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-12-11T19:02:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-12-11T19:02:10Z"}, "message": "class.c (get_vtable_name): Use a literal format string and VTABLE_NAME_PREFIX macro instead of...\n\n\t* class.c (get_vtable_name): Use a literal format string and\n\tVTABLE_NAME_PREFIX macro instead of VTABLE_NAME_FORMAT.\n\t(prepare_fresh_vtable): Likewise.\n\n\t* cp-tree.h (VTABLE_NAME_PREFIX): Define this instead of\n\tVTABLE_NAME_FORMAT.\n\n\t* decl.c (make_rtl_for_local_static): Remove unused variable `type'.\n\n\t* init.c (build_vec_init): Initialize variable `try_body'.\n\n\t* lex.c (yyerror): Don't call a variadic function with a\n\tnon-literal format string.\n\n\t* optimize.c (optimize_function): Call memset, not bzero.\n\n\t* pt.c (for_each_template_parm_r): Add static prototype.\n\nFrom-SVN: r30868", "tree": {"sha": "35c85a1721664f1de94cff9071d4a49818fff998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35c85a1721664f1de94cff9071d4a49818fff998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486837a79c0b0c8ec9bdacacddf62ca20ff90507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486837a79c0b0c8ec9bdacacddf62ca20ff90507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486837a79c0b0c8ec9bdacacddf62ca20ff90507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486837a79c0b0c8ec9bdacacddf62ca20ff90507/comments", "author": null, "committer": null, "parents": [{"sha": "509c1e9cf24a513738150f39f9359442c13261b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509c1e9cf24a513738150f39f9359442c13261b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509c1e9cf24a513738150f39f9359442c13261b8"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "640a164f7680f1241b0671b2105ae096fa260d38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -1,3 +1,23 @@\n+1999-12-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (get_vtable_name): Use a literal format string and\n+\tVTABLE_NAME_PREFIX macro instead of VTABLE_NAME_FORMAT.\n+\t(prepare_fresh_vtable): Likewise.\n+\n+\t* cp-tree.h (VTABLE_NAME_PREFIX): Define this instead of\n+\tVTABLE_NAME_FORMAT.\n+\n+\t* decl.c (make_rtl_for_local_static): Remove unused variable `type'.\n+\n+\t* init.c (build_vec_init): Initialize variable `try_body'.\n+\n+\t* lex.c (yyerror): Don't call a variadic function with a\n+\tnon-literal format string.\n+\n+\t* optimize.c (optimize_function): Call memset, not bzero.\n+\n+\t* pt.c (for_each_template_parm_r): Add static prototype.\n+\n 11999-12-09  Andreas Jaeger  <aj@suse.de>\n \n \t* except.c (expand_throw): Add static attribute to match"}, {"sha": "7d2965df6160d553af1e2a3c69f18de80b344f96", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -583,7 +583,7 @@ get_vtable_name (type)\n      tree type;\n {\n   tree type_id = build_typename_overload (type);\n-  char *buf = (char *) alloca (strlen (VTABLE_NAME_FORMAT)\n+  char *buf = (char *) alloca (strlen (VTABLE_NAME_PREFIX)\n \t\t\t       + IDENTIFIER_LENGTH (type_id) + 2);\n   const char *ptr = IDENTIFIER_POINTER (type_id);\n   int i;\n@@ -596,7 +596,7 @@ get_vtable_name (type)\n   while (ptr[i] >= '0' && ptr[i] <= '9')\n     i += 1;\n #endif\n-  sprintf (buf, VTABLE_NAME_FORMAT, ptr+i);\n+  sprintf (buf, \"%s%s\", VTABLE_NAME_PREFIX, ptr+i);\n   return get_identifier (buf);\n }\n \n@@ -796,8 +796,8 @@ prepare_fresh_vtable (binfo, for_type)\n \n       sprintf (buf1, \"%s%c%s\", TYPE_ASSEMBLER_NAME_STRING (for_type), joiner,\n \t       buf2);\n-      buf = (char *) alloca (strlen (VTABLE_NAME_FORMAT) + strlen (buf1) + 1);\n-      sprintf (buf, VTABLE_NAME_FORMAT, buf1);\n+      buf = (char *) alloca (strlen (VTABLE_NAME_PREFIX) + strlen (buf1) + 1);\n+      sprintf (buf, \"%s%s\", VTABLE_NAME_PREFIX, buf1);\n       name = get_identifier (buf);\n \n       /* If this name doesn't clash, then we can use it, otherwise\n@@ -827,9 +827,9 @@ prepare_fresh_vtable (binfo, for_type)\n \t    sprintf (buf1, \"%s%c%s%c%d\",\n \t\t     TYPE_ASSEMBLER_NAME_STRING (basetype), joiner,\n \t\t     buf2, joiner, j);\n-\t    buf = (char *) alloca (strlen (VTABLE_NAME_FORMAT)\n+\t    buf = (char *) alloca (strlen (VTABLE_NAME_PREFIX)\n \t\t\t\t   + strlen (buf1) + 1);\n-\t    sprintf (buf, VTABLE_NAME_FORMAT, buf1);\n+\t    sprintf (buf, \"%s%s\", VTABLE_NAME_PREFIX, buf1);\n \t    name = get_identifier (buf);\n \n \t    /* If this name doesn't clash, then we can use it,"}, {"sha": "90f652fae2550c2f1a65072a679af10191a25e06", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -2922,7 +2922,7 @@ extern tree global_base_init_list;\n #define AUTO_TEMP_NAME \"_$tmp_\"\n #define AUTO_TEMP_FORMAT \"_$tmp_%d\"\n #define VTABLE_BASE \"$vb\"\n-#define VTABLE_NAME_FORMAT (flag_vtable_thunks ? \"__vt_%s\" : \"_vt$%s\")\n+#define VTABLE_NAME_PREFIX (flag_vtable_thunks ? \"__vt_\" : \"_vt$\")\n #define VFIELD_BASE \"$vf\"\n #define VFIELD_NAME \"_vptr$\"\n #define VFIELD_NAME_FORMAT \"_vptr$%s\"\n@@ -2944,7 +2944,7 @@ extern tree global_base_init_list;\n #define AUTO_TEMP_NAME \"_.tmp_\"\n #define AUTO_TEMP_FORMAT \"_.tmp_%d\"\n #define VTABLE_BASE \".vb\"\n-#define VTABLE_NAME_FORMAT (flag_vtable_thunks ? \"__vt_%s\" : \"_vt.%s\")\n+#define VTABLE_NAME_PREFIX (flag_vtable_thunks ? \"__vt_\" : \"_vt.\")\n #define VFIELD_BASE \".vf\"\n #define VFIELD_NAME \"_vptr.\"\n #define VFIELD_NAME_FORMAT \"_vptr.%s\"\n@@ -2973,7 +2973,7 @@ extern tree global_base_init_list;\n #define AUTO_TEMP_FORMAT \"__tmp_%d\"\n #define VTABLE_BASE \"__vtb\"\n #define VTABLE_NAME \"__vt_\"\n-#define VTABLE_NAME_FORMAT (flag_vtable_thunks ? \"__vt_%s\" : \"_vt_%s\")\n+#define VTABLE_NAME_PREFIX (flag_vtable_thunks ? \"__vt_\" : \"_vt_\")\n #define VTABLE_NAME_P(ID_NODE) \\\n   (!strncmp (IDENTIFIER_POINTER (ID_NODE), VTABLE_NAME, \\\n \t     sizeof (VTABLE_NAME) - 1))"}, {"sha": "98498744ae5c3e05d230f9e97220da98de57fc1e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -7381,7 +7381,6 @@ void\n make_rtl_for_local_static (decl)\n      tree decl;\n {\n-  tree type = TREE_TYPE (decl);\n   const char *asmspec = NULL;\n \n   /* If we inlined this variable, we could see it's declaration"}, {"sha": "e5b9d7848adac8038bb423c6c3b4fc78bc73b5ea", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -2640,7 +2640,7 @@ build_vec_init (decl, base, maxindex, init, from_array)\n   tree compound_stmt;\n   int destroy_temps;\n   tree try_block = NULL_TREE;\n-  tree try_body;\n+  tree try_body = NULL_TREE;\n   int num_initialized_elts = 0;\n \n   maxindex = cp_convert (ptrdiff_type_node, maxindex);"}, {"sha": "8d212ce97e4ce29b82b3ca65f737c400535fa718", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -2936,29 +2936,26 @@ yyerror (string)\n      const char *string;\n {\n   extern int end_of_file;\n-  char buf[200];\n-\n-  strcpy (buf, string);\n \n   /* We can't print string and character constants well\n      because the token_buffer contains the result of processing escapes.  */\n   if (end_of_file)\n-    strcat (buf, input_redirected ()\n-\t    ? \" at end of saved text\"\n-\t    : \" at end of input\");\n+  {\n+    if (input_redirected ())\n+      error (\"%s at end of saved text\", string);\n+    else\n+      error (\"%s at end of input\", string);\n+  }\n   else if (token_buffer[0] == 0)\n-    strcat (buf, \" at null character\");\n+    error (\"%s at null character\", string);\n   else if (token_buffer[0] == '\"')\n-    strcat (buf, \" before string constant\");\n+    error (\"%s before string constant\", string);\n   else if (token_buffer[0] == '\\'')\n-    strcat (buf, \" before character constant\");\n+    error (\"%s before character constant\", string);\n   else if (!ISGRAPH ((unsigned char)token_buffer[0]))\n-    sprintf (buf + strlen (buf), \" before character 0%o\",\n-\t     (unsigned char) token_buffer[0]);\n+    error (\"%s before character 0%o\", string, (unsigned char) token_buffer[0]);\n   else\n-    strcat (buf, \" before `%s'\");\n-\n-  error (buf, token_buffer);\n+    error (\"%s before `%s'\", string, token_buffer);\n }\n \f\n /* Value is 1 (or 2) if we should try to make the next identifier look like"}, {"sha": "374e90b6e635c519cdff33c3769ac2b8c4fe3c87", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -695,7 +695,7 @@ optimize_function (fn)\n       struct saved_scope *s;\n \n       /* Clear out ID.  */\n-      bzero (&id, sizeof (id));\n+      memset (&id, 0, sizeof (id));\n \n       /* Don't allow recursion into FN.  */\n       VARRAY_TREE_INIT (id.fns, 32, \"fns\");"}, {"sha": "522045685dd72d5f9206cc833084fe9e4178cee2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486837a79c0b0c8ec9bdacacddf62ca20ff90507/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=486837a79c0b0c8ec9bdacacddf62ca20ff90507", "patch": "@@ -157,6 +157,7 @@ static tree determine_specialization PROTO((tree, tree, tree *, int));\n static int template_args_equal PROTO((tree, tree));\n static void print_template_context PROTO((int));\n static void tsubst_default_arguments PROTO((tree));\n+static tree for_each_template_parm_r PROTO((tree *, int *, void *));\n \n /* Called once to initialize pt.c.  */\n "}]}