{"sha": "4e07a9eadbf4c8bf943964c95a664494508cc28e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUwN2E5ZWFkYmY0YzhiZjk0Mzk2NGM5NWE2NjQ0OTQ1MDhjYzI4ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-07-30T23:19:57Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-07-30T23:19:57Z"}, "message": "Container.java (remove(int)): Wrote.\n\n\t* java/awt/Container.java (remove(int)): Wrote.\n\t(remove(Component)): Wrote.\n\t(add(Component)): Wrote.\n\t(add(Component,int)): Wrote.\n\t(removeAll): Wrote.\n\t(addNotify): Set our own peer.\n\t* java/awt/Scrollbar.java (listeners): Changed type.\n\t(Scrollbar): Don't initialize listeners.\n\t(addNotify): Wrote.\n\t(setValue): Call setValues.\n\t(setMinimum): Likewise.\n\t(setMaxPriority): Likewise.\n\t(setVisibleAmount): Likewise.\n\t(setValues): Wrote.\n\t(setUnitIncrement): Forward to peer.\n\t(setLineIncrement): Call setUnitIncrement.\n\t(setPageIncrement): Call setBlockIncrement.\n\t(setBlockIncrement): Forward to peer.\n\t(addAdjustmentListener): Rewrote.\n\t(removeAdjustmentListener): Rewrote.\n\t(processAdjustmentEvent): Rewrote.\n\t(paramString): Wrote.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added Button.java.\n\t* java/awt/Button.java: New file.\n\t* java/awt/Toolkit.java (createLabel): Declare.\n\t(createButton): Likewise.\n\t(createScrollbar): Likewise.\n\t(createContainer): Likewise.\n\t* java/awt/Label.java (addNotify): Wrote.\n\t(setAlignment): Call setAlignment in the peer.\n\t(setText): Call setText in the peer.\n\nFrom-SVN: r35354", "tree": {"sha": "5171363ed0ce09ef1ceb12e1a0d67aa47dd4bd2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5171363ed0ce09ef1ceb12e1a0d67aa47dd4bd2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e07a9eadbf4c8bf943964c95a664494508cc28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e07a9eadbf4c8bf943964c95a664494508cc28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e07a9eadbf4c8bf943964c95a664494508cc28e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e07a9eadbf4c8bf943964c95a664494508cc28e/comments", "author": null, "committer": null, "parents": [{"sha": "3a8c5c77d573036d25982d47366164bc05112f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8c5c77d573036d25982d47366164bc05112f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8c5c77d573036d25982d47366164bc05112f61"}], "stats": {"total": 284, "additions": 238, "deletions": 46}, "files": [{"sha": "4425fdb5637baa121079a927f0e12b4771144df1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -1,3 +1,38 @@\n+2000-07-30  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/awt/Container.java (remove(int)): Wrote.\n+\t(remove(Component)): Wrote.\n+\t(add(Component)): Wrote.\n+\t(add(Component,int)): Wrote.\n+\t(removeAll): Wrote.\n+\t(addNotify): Set our own peer.\n+\t* java/awt/Scrollbar.java (listeners): Changed type.\n+\t(Scrollbar): Don't initialize listeners.\n+\t(addNotify): Wrote.\n+\t(setValue): Call setValues.\n+\t(setMinimum): Likewise.\n+\t(setMaxPriority): Likewise.\n+\t(setVisibleAmount): Likewise.\n+\t(setValues): Wrote.\n+\t(setUnitIncrement): Forward to peer.\n+\t(setLineIncrement): Call setUnitIncrement.\n+\t(setPageIncrement): Call setBlockIncrement.\n+\t(setBlockIncrement): Forward to peer.\n+\t(addAdjustmentListener): Rewrote.\n+\t(removeAdjustmentListener): Rewrote.\n+\t(processAdjustmentEvent): Rewrote.\n+\t(paramString): Wrote.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added Button.java.\n+\t* java/awt/Button.java: New file.\n+\t* java/awt/Toolkit.java (createLabel): Declare.\n+\t(createButton): Likewise.\n+\t(createScrollbar): Likewise.\n+\t(createContainer): Likewise.\n+\t* java/awt/Label.java (addNotify): Wrote.\n+\t(setAlignment): Call setAlignment in the peer.\n+\t(setText): Call setText in the peer.\n+\n 2000-07-28  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/io/ObjectOutputStream.java (writeObject): Per spec, call"}, {"sha": "a582b96c11bd0705b7463694ca32c309c321c565", "filename": "libjava/java/awt/Button.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -0,0 +1,94 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+import java.awt.peer.ButtonPeer;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date July 30, 2000\n+ */\n+\n+public class Button extends Component\n+{\n+  public Button ()\n+  {\n+    this (null);\n+  }\n+\n+  public Button (String label)\n+  {\n+    this.label = label;\n+  }\n+\n+  public void addActionListener (ActionListener l)\n+  {\n+    listeners = AWTEventMulticaster.add (listeners, l);\n+  }\n+\n+  public void addNotify ()\n+  {\n+    peer = (ComponentPeer) getToolkit ().createButton (this);\n+  }\n+\n+  public String getActionCommand ()\n+  {\n+    return command;\n+  }\n+\n+  public String getLabel ()\n+  {\n+    return label;\n+  }\n+\n+  protected String paramString ()\n+  {\n+    return \"Button[\" + label + \"]\";\n+  }\n+\n+  protected void processActionEvent (ActionEvent e)\n+  {\n+    if (listeners != null)\n+      listeners.actionPerformed (e);\n+  }\n+\n+  protected void processEvent (AWTEvent e)\n+  {\n+    if (e instanceof ActionEvent)\n+      processActionEvent ((ActionEvent) e);\n+    else\n+      super.processEvent (e);\n+  }\n+\n+  public void removeActionListener (ActionListener l)\n+  {\n+    listeners = AWTEventMulticaster.remove (listeners, l);\n+  }\n+\n+  public void setActionCommand (String command)\n+  {\n+    this.command = (command == null) ? label : command;\n+  }\n+\n+  public void setLabel (String label)\n+  {\n+    this.label = label;\n+    if (peer != null)\n+      {\n+\tButtonPeer bp = (ButtonPeer) peer;\n+\tbp.setLabel (label);\n+      }\n+  }\n+\n+  private String label;\n+  private String command;\n+  private ActionListener listeners;\n+}"}, {"sha": "5c59ed626f1bdc3eb45511c6cbebf9da69c07d09", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -112,6 +112,7 @@ public Container getParent()\n   }\n   \n   /** @deprecated */\n+  // However, Classpath's Gtk peers rely on it.\n   public java.awt.peer.ComponentPeer getPeer()\n   {\n     return peer;"}, {"sha": "81a367b41994e89a142405f5a2ec606970e4da16", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -12,6 +12,8 @@\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.util.EventListener;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.peer.ContainerPeer;\n \n /* A very incomplete placeholder. */\n \n@@ -70,10 +72,9 @@ public Insets insets()\n     return getInsets();\n   }\n   \n-  public Component add(Component comp)\n+  public Component add (Component comp)\n   {\n-    // FIXME\n-    return null;\n+    return add (comp, -1);\n   }\n   \n   public Component add(String name, Component comp)\n@@ -84,8 +85,27 @@ public Component add(String name, Component comp)\n \n   public Component add(Component comp, int index)\n   {\n-    // FIXME\n-    return null;\n+    // This isn't the most efficient implementation.  We could do less\n+    // copying when growing the array.  It probably doesn't matter.\n+    if (ncomponents >= component.length)\n+      {\n+\tint nl = component.length * 2;\n+\tComponent[] c = new Component[nl];\n+\tSystem.arraycopy (component, 0, c, 0, ncomponents);\n+\tcomponent = c;\n+      }\n+\n+    if (index == -1)\n+      component[ncomponents++] = comp;\n+    else\n+      {\n+\tSystem.arraycopy (component, index, component, index + 1,\n+\t\t\t  ncomponents - index);\n+\tcomponent[index] = comp;\n+\t++ncomponents;\n+      }\n+\n+    return comp;\n   }\n \n   public void add(Component comp, Object constraints)\n@@ -103,19 +123,27 @@ protected void addImpl(Component comp, Object constraints, int index)\n     // FIXME\n   }\n \n-  public void remove(int index)\n+  public void remove (int index)\n   {\n-    // FIXME\n+    System.arraycopy (component, index + 1, component, index,\n+\t\t      ncomponents - index - 1);\n+    component[--ncomponents] = null;\n   }\n \n-  public void remove(Component comp)\n+  public void remove (Component comp)\n   {\n-    // FIXME\n+    for (int i = 0; i < ncomponents; ++i)\n+      if (component[i] == comp)\n+\t{\n+\t  remove (i);\n+\t  break;\n+\t}\n   }\n \n   public void removeAll()\n   {\n-    // FIXME\n+    while (ncomponents >= 0)\n+      component[--ncomponents] = null;\n   }\n \n   public LayoutManager getLayout()\n@@ -317,7 +345,8 @@ public void addNotify ()\n   {\n     for (int i = ncomponents;  --i >= 0; )\n       component[i].addNotify();\n-  }  \n+    peer = (ComponentPeer) getToolkit ().createContainer (this);\n+  }\n \n   public void removeNotify()\n   {"}, {"sha": "93d205378313fc3cc3b62c73604937784583fbd0", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -7,14 +7,14 @@\n details.  */\n \n package java.awt;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.peer.LabelPeer;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n  * @date April 12, 2000\n  */\n \n-/* Status: addNotify() not written.  */\n-\n public class Label extends Component\n {\n   public static final int CENTER = 1;\n@@ -41,7 +41,7 @@ public Label (String text, int alignment)\n \n   public void addNotify ()\n   {\n-    // FIXME\n+    peer = (ComponentPeer) getToolkit ().createLabel (this);\n   }\n \n   public int getAlignment ()\n@@ -64,11 +64,21 @@ public void setAlignment (int alignment)\n     if (alignment != CENTER && alignment != LEFT && alignment != RIGHT)\n       throw new IllegalArgumentException ();\n     this.alignment = alignment;\n+    if (peer != null)\n+      {\n+\tLabelPeer lp = (LabelPeer) peer;\n+\tlp.setAlignment (alignment);\n+      }\n   }\n \n   public void setText (String text)\n   {\n     this.text = text;\n+    if (peer != null)\n+      {\n+\tLabelPeer lp = (LabelPeer) peer;\n+\tlp.setText (text);\n+      }\n   }\n \n   private String text;"}, {"sha": "5406c0ccbb48012c10c774a7f1c868553d767466", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -8,8 +8,8 @@\n \n package java.awt;\n import java.awt.event.*;\n-import java.util.Vector;\n-import java.util.Enumeration;\n+import java.awt.peer.ScrollbarPeer;\n+import java.awt.peer.ComponentPeer;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -47,14 +47,13 @@ public Scrollbar (int orientation, int value, int visible,\n     this.minimum = minimum;\n     this.maximum = maximum;\n     this.unit = 1;\n-    this.listeners = new Vector ();\n \n     this.block = 0; // FIXME\n   }\n \n   public void addNotify ()\n   {\n-    // FIXME\n+    peer = (ComponentPeer) getToolkit ().createScrollbar (this);\n   }\n \n   public int getOrientation ()\n@@ -76,11 +75,7 @@ public int getValue ()\n \n   public void setValue (int value)\n   {\n-    if (value < minimum)\n-      value = minimum;\n-    else if (value > maximum)\n-      value = maximum;\n-    this.value = value;\n+    setValues (value, visible, minimum, maximum);\n   }\n \n   public int getMinimum ()\n@@ -90,8 +85,7 @@ public int getMinimum ()\n \n   public void setMinimum (int minimum)\n   {\n-    // FIXME: what if it is > max?\n-    this.minimum = minimum;\n+    setValues (value, visible, minimum, maximum);\n   }\n \n   public int getMaximum ()\n@@ -101,8 +95,7 @@ public int getMaximum ()\n \n   public void setMaximum (int maximum)\n   {\n-    // FIXME: what if it is < min?\n-    this.maximum = maximum;\n+    setValues (value, visible, minimum, maximum);\n   }\n \n   public int getVisibleAmount ()\n@@ -117,17 +110,23 @@ public int getVisible ()\n \n   public void setVisibleAmount (int visible)\n   {\n-    this.visible = visible;\n+    setValues (value, visible, minimum, maximum);\n   }\n \n   public void setUnitIncrement (int v)\n   {\n     unit = v;\n+    if (peer != null)\n+      {\n+\tScrollbarPeer sp = (ScrollbarPeer) peer;\n+\tsp.setLineIncrement (v);\n+      }\n   }\n \n+  /** @deprecated */\n   public void setLineIncrement (int v)\n   {\n-    unit = v;\n+    setUnitIncrement (v);\n   }\n \n   public int getUnitIncrement ()\n@@ -143,11 +142,16 @@ public int getLineIncrement ()\n   public void setBlockIncrement (int v)\n   {\n     block = v;\n+    if (peer != null)\n+      {\n+\tScrollbarPeer sp = (ScrollbarPeer) peer;\n+\tsp.setPageIncrement (v);\n+      }\n   }\n \n   public void setPageIncrement (int v)\n   {\n-    block = v;\n+    setBlockIncrement (v);\n   }\n \n   public int getBlockIncrement ()\n@@ -163,22 +167,33 @@ public int getPageIncrement ()\n   public synchronized void setValues (int value, int visible,\n \t\t\t\t      int minimum, int maximum)\n   {\n-    // fixme;\n+    if (maximum < minimum)\n+      maximum = minimum;\n+    if (value < minimum)\n+      value = minimum;\n+    if (value > maximum)\n+      value = maximum;\n+\n+    this.value = value;\n+    this.visible = visible;\n+    this.minimum = minimum;\n+    this.maximum = maximum;\n+\n+    if (peer != null)\n+      {\n+\tScrollbarPeer sp = (ScrollbarPeer) peer;\n+\tsp.setValues (value, visible, minimum, maximum);\n+      }\n   }\n \n   public void addAdjustmentListener (AdjustmentListener l)\n   {\n-    if (l != null)\n-      {\n-\tlisteners.addElement (l);\n-\tenableEvents (0);\t// FIXME\n-      }\n+    listeners = AWTEventMulticaster.add (listeners, l);\n   }\n \n   public void removeAdjustmentListener (AdjustmentListener l)\n   {\n-    if (l != null)\n-      listeners.remove (l);\n+    listeners = AWTEventMulticaster.add (listeners, l);\n   }\n \n   protected void processEvent (AWTEvent e)\n@@ -191,20 +206,23 @@ protected void processEvent (AWTEvent e)\n \n   protected void processAdjustmentEvent (AdjustmentEvent e)\n   {\n-    Enumeration en = listeners.elements ();\n-    while (en.hasMoreElements ())\n-      {\n-\tAdjustmentListener l = (AdjustmentListener) en.nextElement ();\n-\tl.adjustmentValueChanged (e);\n-      }\n+    if (listeners != null)\n+      listeners.adjustmentValueChanged (e);\n   }\n \n   protected String paramString ()\n   {\n-    return null;\t\t// FIXME\n+    return (\"Scrollbar[\"\n+\t    + ((orientation == VERTICAL) ? \"VERTICAL\" : \"HORIZONTAL\") + \",\"\n+\t    + value + \",\"\n+\t    + visible + \",\"\n+\t    + minimum + \",\"\n+\t    + maximum + \",\"\n+\t    + unit + \",\"\n+\t    + block + \"]\");\n   }\n \n-  private Vector listeners;\n+  private AdjustmentListener listeners;\n   private int orientation;\n   private int value;\n   private int visible;"}, {"sha": "2aea96d921582acd7c6702cc958ab0562610adff", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e07a9eadbf4c8bf943964c95a664494508cc28e/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=4e07a9eadbf4c8bf943964c95a664494508cc28e", "patch": "@@ -27,6 +27,11 @@ public static synchronized Toolkit getDefaultToolkit()\n   protected abstract FramePeer createFrame(Frame target);\n   public abstract Image getImage(URL url);\n \n+  protected abstract ButtonPeer createButton (Button target);\n+  protected abstract ContainerPeer createContainer (Container target);\n+  protected abstract LabelPeer createLabel (Label target);\n+  protected abstract ScrollbarPeer createScrollbar (Scrollbar target);\n+\n   public final EventQueue getSystemEventQueue()\n   {\n     return systemEventQueue;"}]}