{"sha": "1709ff9b5c53b13140819feae5e381fac22f6416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwOWZmOWI1YzUzYjEzMTQwODE5ZmVhZTVlMzgxZmFjMjJmNjQxNg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-29T10:54:32Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-29T10:54:32Z"}, "message": "[AArch64] Add vector int to float conversions.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_fold_builtin): Fold float conversions.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(floatv2si, floatv4si, floatv2di): New.\n\t(floatunsv2si, floatunsv4si, floatunsv2di): Likewise.\n\t* config/aarch64/aarch64-simd.md\n\t(<optab><fcvt_target><VDQF:mode>2): New, expands to float and floatuns.\n\t* config/aarch64/iterators.md (FLOATUORS): New.\n\t(optab): Add float, floatuns.\n\t(su_optab): Likewise.\n\nFrom-SVN: r198399", "tree": {"sha": "248a658f62189c70f42826531f9b262a7eca21b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/248a658f62189c70f42826531f9b262a7eca21b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1709ff9b5c53b13140819feae5e381fac22f6416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1709ff9b5c53b13140819feae5e381fac22f6416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1709ff9b5c53b13140819feae5e381fac22f6416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1709ff9b5c53b13140819feae5e381fac22f6416/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce9668243743907c0115948d8b080162620fc1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9668243743907c0115948d8b080162620fc1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9668243743907c0115948d8b080162620fc1a9"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "2e21471a6ec5dcf0294805e2c34aae1a306d5d48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1709ff9b5c53b13140819feae5e381fac22f6416", "patch": "@@ -1,3 +1,16 @@\n+2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_fold_builtin): Fold float conversions.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(floatv2si, floatv4si, floatv2di): New.\n+\t(floatunsv2si, floatunsv4si, floatunsv2di): Likewise.\n+\t* config/aarch64/aarch64-simd.md\n+\t(<optab><fcvt_target><VDQF:mode>2): New, expands to float and floatuns.\n+\t* config/aarch64/iterators.md (FLOATUORS): New.\n+\t(optab): Add float, floatuns.\n+\t(su_optab): Likewise.\n+\n 2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "d2e5136eb200ed66f8411152e427b01b9cd1f685", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=1709ff9b5c53b13140819feae5e381fac22f6416", "patch": "@@ -1296,6 +1296,11 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n       BUILTIN_VDQF (UNOP, abs, 2)\n \treturn fold_build1 (ABS_EXPR, type, args[0]);\n \tbreak;\n+      VAR1 (UNOP, floatv2si, 2, v2sf)\n+      VAR1 (UNOP, floatv4si, 2, v4sf)\n+      VAR1 (UNOP, floatv2di, 2, v2df)\n+\treturn fold_build1 (FLOAT_EXPR, type, args[0]);\n+\tbreak;\n       default:\n \tbreak;\n     }"}, {"sha": "8df3dac0af0ee73e7dd219d3a25346d636db8feb", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1709ff9b5c53b13140819feae5e381fac22f6416", "patch": "@@ -310,6 +310,15 @@\n   VAR1 (UNOP, lfrintnusf, 2, si)\n   VAR1 (UNOP, lfrintnudf, 2, di)\n \n+  /* Implemented by <optab><fcvt_target><VDQF:mode>2.  */\n+  VAR1 (UNOP, floatv2si, 2, v2sf)\n+  VAR1 (UNOP, floatv4si, 2, v4sf)\n+  VAR1 (UNOP, floatv2di, 2, v2df)\n+\n+  VAR1 (UNOP, floatunsv2si, 2, v2sf)\n+  VAR1 (UNOP, floatunsv4si, 2, v4sf)\n+  VAR1 (UNOP, floatunsv2di, 2, v2df)\n+\n   /* Implemented by\n      aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>.  */\n   BUILTIN_VALL (BINOP, zip1, 0)"}, {"sha": "067c8496573cdf9dd2cd5e47fc833881601a6f66", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1709ff9b5c53b13140819feae5e381fac22f6416", "patch": "@@ -1257,6 +1257,16 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+(define_insn \"<optab><fcvt_target><VDQF:mode>2\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+\t(FLOATUORS:VDQF\n+\t  (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"<su_optab>cvtf\\\\t%0.<Vtype>, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_icvtf\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n (define_insn \"aarch64_vmls<mode>\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n        (minus:VDQF (match_operand:VDQF 1 \"register_operand\" \"0\")"}, {"sha": "8668d3f631a7bd980d600c98436995c05ffef6fa", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1709ff9b5c53b13140819feae5e381fac22f6416/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=1709ff9b5c53b13140819feae5e381fac22f6416", "patch": "@@ -530,6 +530,9 @@\n ;; Iterator for integer conversions\n (define_code_iterator FIXUORS [fix unsigned_fix])\n \n+;; Iterator for float conversions\n+(define_code_iterator FLOATUORS [float unsigned_float])\n+\n ;; Code iterator for variants of vector max and min.\n (define_code_iterator MAXMIN [smax smin umax umin])\n \n@@ -557,6 +560,8 @@\n \t\t\t (zero_extend \"zero_extend\")\n \t\t\t (sign_extract \"extv\")\n \t\t\t (zero_extract \"extzv\")\n+\t\t\t (float \"float\")\n+\t\t\t (unsigned_float \"floatuns\")\n \t\t\t (and \"and\")\n \t\t\t (ior \"ior\")\n \t\t\t (xor \"xor\")\n@@ -579,6 +584,7 @@\n (define_code_attr su_optab [(sign_extend \"\") (zero_extend \"u\")\n \t\t\t    (div \"\") (udiv \"u\")\n \t\t\t    (fix \"\") (unsigned_fix \"u\")\n+\t\t\t    (float \"s\") (unsigned_float \"u\")\n \t\t\t    (ss_plus \"s\") (us_plus \"u\")\n \t\t\t    (ss_minus \"s\") (us_minus \"u\")])\n "}]}