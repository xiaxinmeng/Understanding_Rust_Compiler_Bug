{"sha": "270224592539fed425abfefd50114e6856345476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwMjI0NTkyNTM5ZmVkNDI1YWJmZWZkNTAxMTRlNjg1NjM0NTQ3Ng==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2015-06-11T20:46:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2015-06-11T20:46:46Z"}, "message": "re PR bootstrap/66448 (Bootstrap fails on darwin after r224161)\n\n\tPR bootstrap/66448\n\t* dwarf2out.c (check_die): Check for common duplicate attributes.\n\t(add_location_or_const_value_attribute): Do not add duplicate\n\tattributes.\n\t(gen_formal_parameter_die): Do not add DW_AT_artificial the second\n\ttime around.\n\t(gen_struct_or_union_type_die): Bail early if TREE_ASM_WRITTEN.\n\t(gen_type_die_with_usage): Call check_die.\n\t(dwarf2out_decl): Only call check_die() when ENABLE_CHECKING.\n\nFrom-SVN: r224393", "tree": {"sha": "3a5e490a971396b663772a52cf29442e66138599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5e490a971396b663772a52cf29442e66138599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/270224592539fed425abfefd50114e6856345476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270224592539fed425abfefd50114e6856345476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270224592539fed425abfefd50114e6856345476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270224592539fed425abfefd50114e6856345476/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1eb231ed3ffab639276f638d0687f5299281117a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb231ed3ffab639276f638d0687f5299281117a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb231ed3ffab639276f638d0687f5299281117a"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "fcfa033f18c448c1f4dc32e5155efe2e08074658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270224592539fed425abfefd50114e6856345476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270224592539fed425abfefd50114e6856345476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=270224592539fed425abfefd50114e6856345476", "patch": "@@ -1,3 +1,15 @@\n+2015-06-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR bootstrap/66448\n+\t* dwarf2out.c (check_die): Check for common duplicate attributes.\n+\t(add_location_or_const_value_attribute): Do not add duplicate\n+\tattributes.\n+\t(gen_formal_parameter_die): Do not add DW_AT_artificial the second\n+\ttime around.\n+\t(gen_struct_or_union_type_die): Bail early if TREE_ASM_WRITTEN.\n+\t(gen_type_die_with_usage): Call check_die.\n+\t(dwarf2out_decl): Only call check_die() when ENABLE_CHECKING.\n+\n 2015-06-11  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (prune_unused_types): Handle unused top-level limbo"}, {"sha": "92fa340a3721b707e5072d1bd38aded4e3222cde", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 66, "deletions": 19, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/270224592539fed425abfefd50114e6856345476/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/270224592539fed425abfefd50114e6856345476/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=270224592539fed425abfefd50114e6856345476", "patch": "@@ -5692,20 +5692,55 @@ debug_dwarf (void)\n static void\n check_die (dw_die_ref die)\n {\n-  /* A debugging information entry that is a member of an abstract\n-     instance tree [that has DW_AT_inline] should not contain any\n-     attributes which describe aspects of the subroutine which vary\n-     between distinct inlined expansions or distinct out-of-line\n-     expansions.  */\n   unsigned ix;\n   dw_attr_ref a;\n   bool inline_found = false;\n+  int n_location = 0, n_low_pc = 0, n_high_pc = 0, n_artificial = 0;\n+  int n_decl_line = 0, n_decl_file = 0;\n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n-    if (a->dw_attr == DW_AT_inline && a->dw_attr_val.v.val_unsigned)\n-      inline_found = true;\n+    {\n+      switch (a->dw_attr)\n+\t{\n+\tcase DW_AT_inline:\n+\t  if (a->dw_attr_val.v.val_unsigned)\n+\t    inline_found = true;\n+\t  break;\n+\tcase DW_AT_location:\n+\t  ++n_location;\n+\t  break;\n+\tcase DW_AT_low_pc:\n+\t  ++n_low_pc;\n+\t  break;\n+\tcase DW_AT_high_pc:\n+\t  ++n_high_pc;\n+\t  break;\n+\tcase DW_AT_artificial:\n+\t  ++n_artificial;\n+\t  break;\n+\tcase DW_AT_decl_line:\n+\t  ++n_decl_line;\n+\t  break;\n+\tcase DW_AT_decl_file:\n+\t  ++n_decl_file;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  if (n_location > 1 || n_low_pc > 1 || n_high_pc > 1 || n_artificial > 1\n+      || n_decl_line > 1 || n_decl_file > 1)\n+    {\n+      fprintf (stderr, \"Duplicate attributes in DIE:\\n\");\n+      debug_dwarf_die (die);\n+      gcc_unreachable ();\n+    }\n   if (inline_found)\n     {\n-      /* Catch the most common mistakes.  */\n+      /* A debugging information entry that is a member of an abstract\n+\t instance tree [that has DW_AT_inline] should not contain any\n+\t attributes which describe aspects of the subroutine which vary\n+\t between distinct inlined expansions or distinct out-of-line\n+\t expansions.  */\n       FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n \tgcc_assert (a->dw_attr != DW_AT_low_pc\n \t\t    && a->dw_attr != DW_AT_high_pc\n@@ -16097,6 +16132,9 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl, bool cache_p,\n   if (TREE_CODE (decl) == ERROR_MARK)\n     return false;\n \n+  if (get_AT (die, attr))\n+    return true;\n+\n   gcc_assert (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL\n \t      || TREE_CODE (decl) == RESULT_DECL);\n \n@@ -18057,10 +18095,9 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n \t\t\t\tdecl_quals (node_or_origin),\n \t\t\t\tcontext_die);\n \t}\n-    add_location:\n       if (origin == NULL && DECL_ARTIFICIAL (node))\n \tadd_AT_flag (parm_die, DW_AT_artificial, 1);\n-\n+    add_location:\n       if (node && node != origin)\n         equate_decl_number_to_die (node, parm_die);\n       if (! DECL_ABSTRACT_P (node_or_origin))\n@@ -20356,15 +20393,15 @@ static void\n gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n \t\t\t\tenum debug_info_usage usage)\n {\n-  /* Fill in the bound of variable-length fields in late dwarf if\n-     still incomplete.  */\n-  if (TREE_ASM_WRITTEN (type)\n-      && variably_modified_type_p (type, NULL)\n-      && !early_dwarf)\n+  if (TREE_ASM_WRITTEN (type))\n     {\n-      tree member;\n-      for (member = TYPE_FIELDS (type); member; member = DECL_CHAIN (member))\n-\tfill_variable_array_bounds (TREE_TYPE (member));\n+      /* Fill in the bound of variable-length fields in late dwarf if\n+\t still incomplete.  */\n+      if (!early_dwarf && variably_modified_type_p (type, NULL))\n+\tfor (tree member = TYPE_FIELDS (type);\n+\t     member;\n+\t     member = DECL_CHAIN (member))\n+\t  fill_variable_array_bounds (TREE_TYPE (member));\n       return;\n     }\n \n@@ -20844,7 +20881,15 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n static void\n gen_type_die (tree type, dw_die_ref context_die)\n {\n-  gen_type_die_with_usage (type, context_die, DINFO_USAGE_DIR_USE);\n+  if (type != error_mark_node)\n+    {\n+      gen_type_die_with_usage (type, context_die, DINFO_USAGE_DIR_USE);\n+#ifdef ENABLE_CHECKING\n+      dw_die_ref die = lookup_type_die (type);\n+      if (die)\n+\tcheck_die (die);\n+#endif\n+    }\n }\n \n /* Generate a DW_TAG_lexical_block DIE followed by DIEs to represent all of the\n@@ -21876,9 +21921,11 @@ dwarf2out_decl (tree decl)\n \n   gen_decl_die (decl, NULL, context_die);\n \n+#ifdef ENABLE_CHECKING\n   dw_die_ref die = lookup_decl_die (decl);\n   if (die)\n     check_die (die);\n+#endif\n }\n \n /* Write the debugging output for DECL.  */"}]}