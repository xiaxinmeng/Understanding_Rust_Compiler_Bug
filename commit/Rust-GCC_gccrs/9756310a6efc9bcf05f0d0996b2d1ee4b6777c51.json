{"sha": "9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1NjMxMGE2ZWZjOWJjZjA1ZjBkMDk5NmIyZDFlZTRiNjc3N2M1MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-28T06:18:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-28T06:18:10Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* opts.c: Include tm_p.h.\n\t(handle_options): Make static.\n\t(decode_options): Copied from toplev.c.\n\t* opts.h (decode_options): New.\n\t* toplev.c (parse_options_and_default_flags): Move most to opts.c,\n\tsome to...\n\t(general_init): ...here.\n\t(toplev_main): Use decode_options instead.\n\t* toplev.h (save_argc, save_argv): New.\n\nFrom-SVN: r68629", "tree": {"sha": "ac5ad4358cf1509d02037b019f635c885b68d262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5ad4358cf1509d02037b019f635c885b68d262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7400894d99e0482401d74affbd81ff1851423e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7400894d99e0482401d74affbd81ff1851423e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7400894d99e0482401d74affbd81ff1851423e1"}], "stats": {"total": 388, "additions": 200, "deletions": 188}, "files": [{"sha": "cc37c33198839ed0f050e2169af12e74cd4c76cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -1,3 +1,16 @@\n+2003-06-28  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Update.\n+\t* opts.c: Include tm_p.h.\n+\t(handle_options): Make static.\n+\t(decode_options): Copied from toplev.c.\n+\t* opts.h (decode_options): New.\n+\t* toplev.c (parse_options_and_default_flags): Move most to opts.c,\n+\tsome to...\n+\t(general_init): ...here.\n+\t(toplev_main): Use decode_options instead.\n+\t* toplev.h (save_argc, save_argv): New.\n+\n 2003-06-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* explow.c (find_next_ref): Remove."}, {"sha": "a558ffb96bc4dc2c3b0dcf37fcf640d8d298a75f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -1483,7 +1483,7 @@ diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H) $(GGC_H) $(RTL_H) \\\n-\toutput.h diagnostic.h\n+\toutput.h diagnostic.h $(TM_P_H)\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\"}, {"sha": "af9a896b06525bfb90bddf7ff5fdc0970c59e608", "filename": "gcc/opts.c", "status": "modified", "additions": 180, "deletions": 1, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"params.h\"\n #include \"diagnostic.h\"\n+#include \"tm_p.h\"\t\t/* For OPTIMIZATION_OPTIONS.  */\n \n /* Value of the -G xx switch, and whether it was passed or not.  */\n unsigned HOST_WIDE_INT g_switch_value;\n@@ -133,6 +134,7 @@ static unsigned int handle_option (char **argv, unsigned int lang_mask);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n+static void handle_options (unsigned int, char **, unsigned int lang_mask);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -404,7 +406,7 @@ handle_option (char **argv, unsigned int lang_mask)\n /* Decode and handle the vector of command line options.  LANG_MASK\n    contains has a single bit set representing the current\n    language.  */\n-void\n+static void\n handle_options (unsigned int argc, char **argv, unsigned int lang_mask)\n {\n   unsigned int n, i;\n@@ -421,6 +423,183 @@ handle_options (unsigned int argc, char **argv, unsigned int lang_mask)\n     }\n }\n \n+/* Parse command line options and set default flag values.  Do minimal\n+   options processing.  */\n+void\n+decode_options (int argc, char **argv)\n+{\n+  int i, lang_mask;\n+\n+  /* Save in case md file wants to emit args as a comment.  */\n+  save_argc = argc;\n+  save_argv = argv;\n+\n+  /* Perform language-specific options initialization.  */\n+  lang_mask = (*lang_hooks.init_options) ();\n+\n+  /* Scan to see what optimization level has been specified.  That will\n+     determine the default value of many flags.  */\n+  for (i = 1; i < argc; i++)\n+    {\n+      if (!strcmp (argv[i], \"-O\"))\n+\t{\n+\t  optimize = 1;\n+\t  optimize_size = 0;\n+\t}\n+      else if (argv[i][0] == '-' && argv[i][1] == 'O')\n+\t{\n+\t  /* Handle -Os, -O2, -O3, -O69, ...  */\n+\t  char *p = &argv[i][2];\n+\n+\t  if ((p[0] == 's') && (p[1] == 0))\n+\t    {\n+\t      optimize_size = 1;\n+\n+\t      /* Optimizing for size forces optimize to be 2.  */\n+\t      optimize = 2;\n+\t    }\n+\t  else\n+\t    {\n+\t      const int optimize_val = read_integral_parameter (p, p - 2, -1);\n+\t      if (optimize_val != -1)\n+\t\t{\n+\t\t  optimize = optimize_val;\n+\t\t  optimize_size = 0;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  if (!optimize)\n+    {\n+      flag_merge_constants = 0;\n+    }\n+\n+  if (optimize >= 1)\n+    {\n+      flag_defer_pop = 1;\n+      flag_thread_jumps = 1;\n+#ifdef DELAY_SLOTS\n+      flag_delayed_branch = 1;\n+#endif\n+#ifdef CAN_DEBUG_WITHOUT_FP\n+      flag_omit_frame_pointer = 1;\n+#endif\n+      flag_guess_branch_prob = 1;\n+      flag_cprop_registers = 1;\n+      flag_loop_optimize = 1;\n+      flag_crossjumping = 1;\n+      flag_if_conversion = 1;\n+      flag_if_conversion2 = 1;\n+    }\n+\n+  if (optimize >= 2)\n+    {\n+      flag_optimize_sibling_calls = 1;\n+      flag_cse_follow_jumps = 1;\n+      flag_cse_skip_blocks = 1;\n+      flag_gcse = 1;\n+      flag_expensive_optimizations = 1;\n+      flag_strength_reduce = 1;\n+      flag_rerun_cse_after_loop = 1;\n+      flag_rerun_loop_opt = 1;\n+      flag_caller_saves = 1;\n+      flag_force_mem = 1;\n+      flag_peephole2 = 1;\n+#ifdef INSN_SCHEDULING\n+      flag_schedule_insns = 1;\n+      flag_schedule_insns_after_reload = 1;\n+#endif\n+      flag_regmove = 1;\n+      flag_strict_aliasing = 1;\n+      flag_delete_null_pointer_checks = 1;\n+      flag_reorder_blocks = 1;\n+      flag_reorder_functions = 1;\n+    }\n+\n+  if (optimize >= 3)\n+    {\n+      flag_inline_functions = 1;\n+      flag_rename_registers = 1;\n+      flag_unswitch_loops = 1;\n+      flag_unit_at_a_time = 1;\n+    }\n+\n+  if (optimize < 2 || optimize_size)\n+    {\n+      align_loops = 1;\n+      align_jumps = 1;\n+      align_labels = 1;\n+      align_functions = 1;\n+\n+      /* Don't reorder blocks when optimizing for size because extra\n+\t jump insns may be created; also barrier may create extra padding.\n+\n+\t More correctly we should have a block reordering mode that tried\n+\t to minimize the combined size of all the jumps.  This would more\n+\t or less automatically remove extra jumps, but would also try to\n+\t use more short jumps instead of long jumps.  */\n+      flag_reorder_blocks = 0;\n+    }\n+\n+  /* Initialize whether `char' is signed.  */\n+  flag_signed_char = DEFAULT_SIGNED_CHAR;\n+#ifdef DEFAULT_SHORT_ENUMS\n+  /* Initialize how much space enums occupy, by default.  */\n+  flag_short_enums = DEFAULT_SHORT_ENUMS;\n+#endif\n+\n+  /* Initialize target_flags before OPTIMIZATION_OPTIONS so the latter can\n+     modify it.  */\n+  target_flags = 0;\n+  set_target_switch (\"\");\n+\n+  /* Unwind tables are always present in an ABI-conformant IA-64\n+     object file, so the default should be ON.  */\n+#ifdef IA64_UNWIND_INFO\n+  flag_unwind_tables = IA64_UNWIND_INFO;\n+#endif\n+\n+#ifdef OPTIMIZATION_OPTIONS\n+  /* Allow default optimizations to be specified on a per-machine basis.  */\n+  OPTIMIZATION_OPTIONS (optimize, optimize_size);\n+#endif\n+\n+  handle_options (argc, argv, lang_mask);\n+\n+  if (flag_pie)\n+    flag_pic = flag_pie;\n+  if (flag_pic && !flag_pie)\n+    flag_shlib = 1;\n+\n+  if (flag_no_inline == 2)\n+    flag_no_inline = 0;\n+  else\n+    flag_really_no_inline = flag_no_inline;\n+\n+  /* Set flag_no_inline before the post_options () hook.  The C front\n+     ends use it to determine tree inlining defaults.  FIXME: such\n+     code should be lang-independent when all front ends use tree\n+     inlining, in which case it, and this condition, should be moved\n+     to the top of process_options() instead.  */\n+  if (optimize == 0)\n+    {\n+      /* Inlining does not work if not optimizing,\n+\t so force it not to be done.  */\n+      flag_no_inline = 1;\n+      warn_inline = 0;\n+\n+      /* The c_decode_option function and decode_option hook set\n+\t this to `2' if -Wall is used, so we can avoid giving out\n+\t lots of errors for people who don't realize what -Wall does.  */\n+      if (warn_uninitialized == 1)\n+\twarning (\"-Wuninitialized is not supported without -O\");\n+    }\n+\n+  if (flag_really_no_inline == 2)\n+    flag_really_no_inline = flag_no_inline;\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  */\n static int"}, {"sha": "616ed71112b3ad71b098f666e49d33195860441e", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -21,8 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_OPTS_H\n #define GCC_OPTS_H\n \n-extern void handle_options (unsigned int argc, char **argv,\n-\t\t\t    unsigned int lang_mask);\n+extern void decode_options (int argc, char **argv);\n \n struct cl_option\n {"}, {"sha": "42b8c46cc115bf69a0e38c2fc73d9fe3195f886a", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 184, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -105,7 +105,6 @@ extern tree last_assemble_variable_decl;\n extern void reg_alloc (void);\n \n static void general_init (char *);\n-static void parse_options_and_default_flags (int, char **);\n static void do_compile (void);\n static void process_options (void);\n static void backend_init (void);\n@@ -4590,23 +4589,6 @@ general_init (char *argv0)\n   init_stringpool ();\n   init_ttree ();\n \n-}\n-\n-/* Parse command line options and set default flag values, called\n-   after language-independent option-independent initialization.  Do\n-   minimal options processing.  Outputting diagnostics is OK, but GC\n-   and identifier hashtables etc. are not initialized yet.\n-\n-   Return nonzero to suppress compiler back end initialization.  */\n-static void\n-parse_options_and_default_flags (int argc, char **argv)\n-{\n-  int i, lang_mask;\n-\n-  /* Save in case md file wants to emit args as a comment.  */\n-  save_argc = argc;\n-  save_argv = argv;\n-\n   /* Initialize register usage now so switches may override.  */\n   init_reg_sets ();\n \n@@ -4615,171 +4597,6 @@ parse_options_and_default_flags (int argc, char **argv)\n \n   /* This must be done after add_params but before argument processing.  */\n   init_ggc_heuristics();\n-\n-  /* Perform language-specific options initialization.  */\n-  lang_mask = (*lang_hooks.init_options) ();\n-\n-  /* Scan to see what optimization level has been specified.  That will\n-     determine the default value of many flags.  */\n-  for (i = 1; i < argc; i++)\n-    {\n-      if (!strcmp (argv[i], \"-O\"))\n-\t{\n-\t  optimize = 1;\n-\t  optimize_size = 0;\n-\t}\n-      else if (argv[i][0] == '-' && argv[i][1] == 'O')\n-\t{\n-\t  /* Handle -Os, -O2, -O3, -O69, ...  */\n-\t  char *p = &argv[i][2];\n-\n-\t  if ((p[0] == 's') && (p[1] == 0))\n-\t    {\n-\t      optimize_size = 1;\n-\n-\t      /* Optimizing for size forces optimize to be 2.  */\n-\t      optimize = 2;\n-\t    }\n-\t  else\n-\t    {\n-\t      const int optimize_val = read_integral_parameter (p, p - 2, -1);\n-\t      if (optimize_val != -1)\n-\t\t{\n-\t\t  optimize = optimize_val;\n-\t\t  optimize_size = 0;\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-  if (!optimize)\n-    {\n-      flag_merge_constants = 0;\n-    }\n-\n-  if (optimize >= 1)\n-    {\n-      flag_defer_pop = 1;\n-      flag_thread_jumps = 1;\n-#ifdef DELAY_SLOTS\n-      flag_delayed_branch = 1;\n-#endif\n-#ifdef CAN_DEBUG_WITHOUT_FP\n-      flag_omit_frame_pointer = 1;\n-#endif\n-      flag_guess_branch_prob = 1;\n-      flag_cprop_registers = 1;\n-      flag_loop_optimize = 1;\n-      flag_crossjumping = 1;\n-      flag_if_conversion = 1;\n-      flag_if_conversion2 = 1;\n-    }\n-\n-  if (optimize >= 2)\n-    {\n-      flag_optimize_sibling_calls = 1;\n-      flag_cse_follow_jumps = 1;\n-      flag_cse_skip_blocks = 1;\n-      flag_gcse = 1;\n-      flag_expensive_optimizations = 1;\n-      flag_strength_reduce = 1;\n-      flag_rerun_cse_after_loop = 1;\n-      flag_rerun_loop_opt = 1;\n-      flag_caller_saves = 1;\n-      flag_force_mem = 1;\n-      flag_peephole2 = 1;\n-#ifdef INSN_SCHEDULING\n-      flag_schedule_insns = 1;\n-      flag_schedule_insns_after_reload = 1;\n-#endif\n-      flag_regmove = 1;\n-      flag_strict_aliasing = 1;\n-      flag_delete_null_pointer_checks = 1;\n-      flag_reorder_blocks = 1;\n-      flag_reorder_functions = 1;\n-    }\n-\n-  if (optimize >= 3)\n-    {\n-      flag_inline_functions = 1;\n-      flag_rename_registers = 1;\n-      flag_unswitch_loops = 1;\n-      flag_unit_at_a_time = 1;\n-    }\n-\n-  if (optimize < 2 || optimize_size)\n-    {\n-      align_loops = 1;\n-      align_jumps = 1;\n-      align_labels = 1;\n-      align_functions = 1;\n-\n-      /* Don't reorder blocks when optimizing for size because extra\n-\t jump insns may be created; also barrier may create extra padding.\n-\n-\t More correctly we should have a block reordering mode that tried\n-\t to minimize the combined size of all the jumps.  This would more\n-\t or less automatically remove extra jumps, but would also try to\n-\t use more short jumps instead of long jumps.  */\n-      flag_reorder_blocks = 0;\n-    }\n-\n-  /* Initialize whether `char' is signed.  */\n-  flag_signed_char = DEFAULT_SIGNED_CHAR;\n-#ifdef DEFAULT_SHORT_ENUMS\n-  /* Initialize how much space enums occupy, by default.  */\n-  flag_short_enums = DEFAULT_SHORT_ENUMS;\n-#endif\n-\n-  /* Initialize target_flags before OPTIMIZATION_OPTIONS so the latter can\n-     modify it.  */\n-  target_flags = 0;\n-  set_target_switch (\"\");\n-\n-  /* Unwind tables are always present in an ABI-conformant IA-64\n-     object file, so the default should be ON.  */\n-#ifdef IA64_UNWIND_INFO\n-  flag_unwind_tables = IA64_UNWIND_INFO;\n-#endif\n-\n-#ifdef OPTIMIZATION_OPTIONS\n-  /* Allow default optimizations to be specified on a per-machine basis.  */\n-  OPTIMIZATION_OPTIONS (optimize, optimize_size);\n-#endif\n-\n-  handle_options (argc, argv, lang_mask);\n-\n-  if (flag_pie)\n-    flag_pic = flag_pie;\n-  if (flag_pic && !flag_pie)\n-    flag_shlib = 1;\n-\n-  if (flag_no_inline == 2)\n-    flag_no_inline = 0;\n-  else\n-    flag_really_no_inline = flag_no_inline;\n-\n-  /* Set flag_no_inline before the post_options () hook.  The C front\n-     ends use it to determine tree inlining defaults.  FIXME: such\n-     code should be lang-independent when all front ends use tree\n-     inlining, in which case it, and this condition, should be moved\n-     to the top of process_options() instead.  */\n-  if (optimize == 0)\n-    {\n-      /* Inlining does not work if not optimizing,\n-\t so force it not to be done.  */\n-      flag_no_inline = 1;\n-      warn_inline = 0;\n-\n-      /* The c_decode_option function and decode_option hook set\n-\t this to `2' if -Wall is used, so we can avoid giving out\n-\t lots of errors for people who don't realize what -Wall does.  */\n-      if (warn_uninitialized == 1)\n-\twarning (\"-Wuninitialized is not supported without -O\");\n-    }\n-\n-  if (flag_really_no_inline == 2)\n-    flag_really_no_inline = flag_no_inline;\n }\n \n /* Process the options that have been parsed.  */\n@@ -5169,7 +4986,7 @@ toplev_main (int argc, char **argv)\n \n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n-  parse_options_and_default_flags (argc, argv);\n+  decode_options (argc, argv);\n \n   /* Exit early if we can (e.g. -help).  */\n   if (!exit_after_options)"}, {"sha": "16cfacd4c3e1e9a5c0878a3d03ddb13eabdb8ec9", "filename": "gcc/toplev.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9756310a6efc9bcf05f0d0996b2d1ee4b6777c51/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=9756310a6efc9bcf05f0d0996b2d1ee4b6777c51", "patch": "@@ -102,6 +102,10 @@ extern const char *asm_file_name;\n extern bool exit_after_options;\n extern bool version_flag;\n \n+/* Copy of arguments to toplev_main.  */\n+extern int save_argc;\n+extern char **save_argv;\n+\n extern int target_flags_explicit;\n \n /* See toplev.c.  */"}]}