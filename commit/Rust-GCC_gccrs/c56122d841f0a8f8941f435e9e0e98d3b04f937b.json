{"sha": "c56122d841f0a8f8941f435e9e0e98d3b04f937b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2MTIyZDg0MWYwYThmODk0MWY0MzVlOWUwZTk4ZDNiMDRmOTM3Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-04-20T19:40:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-20T19:40:31Z"}, "message": "optabs.h (enum optab_index): Add new OTI_asin and OTI_acos.\n\n2004-04-20  Uros Bizjak  <uros@kss-loka.si>\n\n\t* optabs.h (enum optab_index): Add new OTI_asin and OTI_acos.\n\t(asin_optab, acos_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize asin_optab and acos_optab.\n\t* genopinit.c (optabs): Implement asin_optab and acos_optab\n\tusing asin?f2 and acos?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_ASIN{,F,L}\n\tusing asin_optab, and BUILT_IN_ACOS{,F,L} using acos_optab.\n\t(expand_builtin): Expand BUILT_IN_ASIN{,F,L} and BUILT_IN_ACOS{,F,L}\n\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (asindf2, asinsf2, asinxf2, acosdf2,\n\tacossf2, acosxf2): New expanders to implement asin, asinf, asinl,\n\tacos, acosf and acosl built-ins as inline x87 intrinsics.\n\n\t* gcc.dg/builtins-39.c: New test.\n\nFrom-SVN: r80921", "tree": {"sha": "b8cfb1f808f8cdf2784d4c395572ad76b0931623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8cfb1f808f8cdf2784d4c395572ad76b0931623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56122d841f0a8f8941f435e9e0e98d3b04f937b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56122d841f0a8f8941f435e9e0e98d3b04f937b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56122d841f0a8f8941f435e9e0e98d3b04f937b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56122d841f0a8f8941f435e9e0e98d3b04f937b/comments", "author": null, "committer": null, "parents": [{"sha": "7b1521e0f4d857eb9e533c2ef3ba731e7d521fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1521e0f4d857eb9e533c2ef3ba731e7d521fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1521e0f4d857eb9e533c2ef3ba731e7d521fab"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "fb0b0929be7d180fde086a9af2add0fe3dff4540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -1,3 +1,19 @@\n+2004-04-20  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_asin and OTI_acos.\n+\t(asin_optab, acos_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize asin_optab and acos_optab.\n+\t* genopinit.c (optabs): Implement asin_optab and acos_optab\n+\tusing asin?f2 and acos?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_ASIN{,F,L}\n+\tusing asin_optab, and BUILT_IN_ACOS{,F,L} using acos_optab.\n+\t(expand_builtin): Expand BUILT_IN_ASIN{,F,L} and BUILT_IN_ACOS{,F,L}\n+\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (asindf2, asinsf2, asinxf2, acosdf2,\n+\tacossf2, acosxf2): New expanders to implement asin, asinf, asinl,\n+\tacos, acosf and acosl built-ins as inline x87 intrinsics.\n+\n 2004-04-20  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (arm_legitimate_address_p): Use rtx_equal_p."}, {"sha": "c7627c053dac03aec9a3faca3c3c9036bf54161b", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -1585,6 +1585,14 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_LOG2F:\n     case BUILT_IN_LOG2L:\n       errno_set = true; builtin_optab = log2_optab; break;\n+    case BUILT_IN_ASIN:\n+    case BUILT_IN_ASINF:\n+    case BUILT_IN_ASINL:\n+      builtin_optab = asin_optab; break;\n+    case BUILT_IN_ACOS:\n+    case BUILT_IN_ACOSF:\n+    case BUILT_IN_ACOSL:\n+      builtin_optab = acos_optab; break;\n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n     case BUILT_IN_TANL:\n@@ -5204,6 +5212,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n     case BUILT_IN_TANL:\n+    case BUILT_IN_ASIN:\n+    case BUILT_IN_ASINF:\n+    case BUILT_IN_ASINL:\n+    case BUILT_IN_ACOS:\n+    case BUILT_IN_ACOSF:\n+    case BUILT_IN_ACOSL:\n     case BUILT_IN_ATAN:\n     case BUILT_IN_ATANF:\n     case BUILT_IN_ATANL:"}, {"sha": "c0a3ff4cfe5baa757178eda893c690e7548f52e6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -15284,6 +15284,140 @@\n   DONE;\n })\n \n+(define_expand \"asindf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (mult:XF (match_dup 2) (match_dup 2)))\n+   (set (match_dup 5) (minus:XF (match_dup 4) (match_dup 3)))\n+   (set (match_dup 6) (sqrt:XF (match_dup 5)))\n+   (parallel [(set (match_dup 7)\n+        \t   (unspec:XF [(match_dup 6) (match_dup 2)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 8 \"\"))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 7)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[4], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"asinsf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (mult:XF (match_dup 2) (match_dup 2)))\n+   (set (match_dup 5) (minus:XF (match_dup 4) (match_dup 3)))\n+   (set (match_dup 6) (sqrt:XF (match_dup 5)))\n+   (parallel [(set (match_dup 7)\n+        \t   (unspec:XF [(match_dup 6) (match_dup 2)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 8 \"\"))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 7)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[4], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"asinxf2\"\n+  [(set (match_dup 2)\n+\t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t (match_dup 1)))\n+   (set (match_dup 4) (minus:XF (match_dup 3) (match_dup 2)))\n+   (set (match_dup 5) (sqrt:XF (match_dup 4)))\n+   (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+        \t   (unspec:XF [(match_dup 5) (match_dup 1)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 6 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<6; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[3], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"acosdf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (mult:XF (match_dup 2) (match_dup 2)))\n+   (set (match_dup 5) (minus:XF (match_dup 4) (match_dup 3)))\n+   (set (match_dup 6) (sqrt:XF (match_dup 5)))\n+   (parallel [(set (match_dup 7)\n+        \t   (unspec:XF [(match_dup 2) (match_dup 6)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 8 \"\"))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 7)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[4], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"acossf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (mult:XF (match_dup 2) (match_dup 2)))\n+   (set (match_dup 5) (minus:XF (match_dup 4) (match_dup 3)))\n+   (set (match_dup 6) (sqrt:XF (match_dup 5)))\n+   (parallel [(set (match_dup 7)\n+        \t   (unspec:XF [(match_dup 2) (match_dup 6)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 8 \"\"))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 7)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[4], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"acosxf2\"\n+  [(set (match_dup 2)\n+\t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t (match_dup 1)))\n+   (set (match_dup 4) (minus:XF (match_dup 3) (match_dup 2)))\n+   (set (match_dup 5) (sqrt:XF (match_dup 4)))\n+   (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+        \t   (unspec:XF [(match_dup 1) (match_dup 5)]\n+\t\t\t      UNSPEC_FPATAN))\n+   \t      (clobber (match_scratch:XF 6 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<6; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+\n+  emit_move_insn (operands[3], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n (define_insn \"*fyl2x_sfxf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n          (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")"}, {"sha": "95d53107ae277f7fa943c8f012e1a7cf3d022dc8", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -124,7 +124,9 @@ static const char * const optabs[] =\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\",\n   \"sincos_optab->handlers[$A].insn_code = CODE_FOR_$(sincos$a3$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n+  \"asin_optab->handlers[$A].insn_code = CODE_FOR_$(asin$a2$)\",\n   \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n+  \"acos_optab->handlers[$A].insn_code = CODE_FOR_$(acos$a2$)\",\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n   \"exp10_optab->handlers[$A].insn_code = CODE_FOR_$(exp10$a2$)\",\n   \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\","}, {"sha": "b32315ba463ab39c3b07adcfe5d5cad5ee5e23b4", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -5380,7 +5380,9 @@ init_optabs (void)\n   nearbyint_optab = init_optab (UNKNOWN);\n   sincos_optab = init_optab (UNKNOWN);\n   sin_optab = init_optab (UNKNOWN);\n+  asin_optab = init_optab (UNKNOWN);\n   cos_optab = init_optab (UNKNOWN);\n+  acos_optab = init_optab (UNKNOWN);\n   exp_optab = init_optab (UNKNOWN);\n   exp10_optab = init_optab (UNKNOWN);\n   exp2_optab = init_optab (UNKNOWN);"}, {"sha": "2e0a47ab9e9411bf6758db745c9a650518ea84b2", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -152,8 +152,12 @@ enum optab_index\n   OTI_sincos,\n   /* Sine */\n   OTI_sin,\n+  /* Inverse sine */\n+  OTI_asin,\n   /* Cosine */\n   OTI_cos,\n+  /* Inverse cosine */\n+  OTI_acos,\n   /* Exponential */\n   OTI_exp,\n   /* Base-10 Exponential */\n@@ -271,7 +275,9 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define sqrt_optab (optab_table[OTI_sqrt])\n #define sincos_optab (optab_table[OTI_sincos])\n #define sin_optab (optab_table[OTI_sin])\n+#define asin_optab (optab_table[OTI_asin])\n #define cos_optab (optab_table[OTI_cos])\n+#define acos_optab (optab_table[OTI_acos])\n #define exp_optab (optab_table[OTI_exp])\n #define exp10_optab (optab_table[OTI_exp10])\n #define exp2_optab (optab_table[OTI_exp2])"}, {"sha": "c88423e1cbb96d5792b3d22590071403d5c600f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -1,3 +1,7 @@\n+2004-04-20  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-39.c: New test.\n+\n 2004-04-20  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.dg/vmx/vmx.exp: Change DEFAULT_CFLAGS to DEFAULT_VMXCFLAGS."}, {"sha": "6359be2b30ebb4d96a0a431eea90458f9d9666b6", "filename": "gcc/testsuite/gcc.dg/builtins-39.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56122d841f0a8f8941f435e9e0e98d3b04f937b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-39.c?ref=c56122d841f0a8f8941f435e9e0e98d3b04f937b", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that asin, asinf, asinl, acos, acosf\n+   and acosl built-in functions compile.\n+\n+   Written by Uros Bizjak, 20th April 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double asin(double);\n+extern double acos(double);\n+extern float asinf(float);\n+extern float acosf(float);\n+extern long double asinl(long double);\n+extern long double acosl(long double);\n+\n+\n+double test1(double x)\n+{\n+  return asin(x);\n+}\n+\n+double test2(double x)\n+{\n+  return acos(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return asinf(x);\n+}\n+\n+float test2f(float x)\n+{\n+  return acosf(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return asinl(x);\n+}\n+\n+long double test2l(long double x)\n+{\n+  return acosl(x);\n+}\n+"}]}