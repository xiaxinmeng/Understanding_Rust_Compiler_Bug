{"sha": "379be00f45f65e0e8de72a50553dd9d2bab6cc08", "node_id": "C_kwDOANBUbNoAKDM3OWJlMDBmNDVmNjVlMGU4ZGU3MmE1MDU1M2RkOWQyYmFiNmNjMDg", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-25T05:51:57Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-26T00:59:13Z"}, "message": "Fix typo in r12-5486.\n\ngcc/ChangeLog:\n\n\tPR middle-end/103419\n\t* match.pd: Fix typo, use the type of second parameter, not\n\tfirst one.", "tree": {"sha": "e3b116622e744244d8046588d967cf752cae441a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b116622e744244d8046588d967cf752cae441a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/379be00f45f65e0e8de72a50553dd9d2bab6cc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379be00f45f65e0e8de72a50553dd9d2bab6cc08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379be00f45f65e0e8de72a50553dd9d2bab6cc08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379be00f45f65e0e8de72a50553dd9d2bab6cc08/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091ccc066d24b0356374e4fdacb4613062289508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ccc066d24b0356374e4fdacb4613062289508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091ccc066d24b0356374e4fdacb4613062289508"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "e14f97ee1cda805f4e416a236de0d1770e9c933d", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379be00f45f65e0e8de72a50553dd9d2bab6cc08/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379be00f45f65e0e8de72a50553dd9d2bab6cc08/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=379be00f45f65e0e8de72a50553dd9d2bab6cc08", "patch": "@@ -4055,7 +4055,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        }\n   (if (ibit == ibit2\n       && ibit >= 0\n-      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0))))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n  (bit_and (convert?@3 (SYNC_FETCH_OR_XOR_N @2 INTEGER_CST@0))\n@@ -4066,21 +4066,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        }\n   (if (ibit == ibit2\n       && ibit >= 0\n-      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0))))))\n \n (match (nop_atomic_bit_test_and_p @0 @0 @4)\n  (bit_and:c\n   (convert1?@4\n    (ATOMIC_FETCH_OR_XOR_N @2 (nop_convert? (lshift@0 integer_onep@5 @6)) @3))\n   (convert2? @0))\n- (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0)))))\n \n (match (nop_atomic_bit_test_and_p @0 @0 @4)\n  (bit_and:c\n   (convert1?@4\n    (SYNC_FETCH_OR_XOR_N @2 (nop_convert? (lshift@0 integer_onep@3 @5))))\n   (convert2? @0))\n- (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0)))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n  (bit_and@4 (convert?@3 (ATOMIC_FETCH_AND_N @2 INTEGER_CST@0 @5))\n@@ -4092,7 +4092,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        }\n   (if (ibit == ibit2\n       && ibit >= 0\n-      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0))))))\n \n (match (nop_atomic_bit_test_and_p @0 @1 @3)\n  (bit_and@4\n@@ -4105,21 +4105,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        }\n   (if (ibit == ibit2\n       && ibit >= 0\n-      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2))))))\n+      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0))))))\n \n (match (nop_atomic_bit_test_and_p @4 @0 @3)\n  (bit_and:c\n   (convert1?@3\n    (ATOMIC_FETCH_AND_N @2 (nop_convert?@4 (bit_not (lshift@0 integer_onep@6 @7))) @5))\n   (convert2? @0))\n- (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n+ (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@4)))))\n \n (match (nop_atomic_bit_test_and_p @4 @0 @3)\n  (bit_and:c\n   (convert1?@3\n    (SYNC_FETCH_AND_AND_N @2 (nop_convert?@4 (bit_not (lshift@0 integer_onep@6 @7)))))\n   (convert2? @0))\n-  (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@2)))))\n+  (if (TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@4)))))\n \n #endif\n "}]}