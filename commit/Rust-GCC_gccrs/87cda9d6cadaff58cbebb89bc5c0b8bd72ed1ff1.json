{"sha": "87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjZGE5ZDZjYWRhZmY1OGNiZWJiODliYzVjMGI4YmQ3MmVkMWZmMQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@debian.org", "date": "2004-09-03T19:34:15Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-09-03T19:34:15Z"}, "message": "reload.c (find_reloads): Swap operand_loc pointers for find_dummy_reload if we have swapped two operands.\n\n\t* reload.c (find_reloads): Swap operand_loc pointers for\n\tfind_dummy_reload if we have swapped two operands.\n\nFrom-SVN: r87049", "tree": {"sha": "930ba0ca235564064b39ecb5d5edfec641f4b29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/930ba0ca235564064b39ecb5d5edfec641f4b29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1/comments", "author": null, "committer": null, "parents": [{"sha": "f671762a68bd712623a14d56e2c873798f1b8101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f671762a68bd712623a14d56e2c873798f1b8101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f671762a68bd712623a14d56e2c873798f1b8101"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "c20d4a9b5d3456bc1dd74d00d55090f47a1efc9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "patch": "@@ -1,3 +1,8 @@\n+2004-09-03  Daniel Jacobowitz  <dan@debian.org>\n+\n+\t* reload.c (find_reloads): Swap operand_loc pointers for\n+\tfind_dummy_reload if we have swapped two operands.\n+\n 2004-09-03  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.h (ASM_OUTPUT_CASE_END): Use prev_nonnote_insn"}, {"sha": "950d6fd30880371c52dcb3b1773362b6e148e001", "filename": "gcc/reload.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=87cda9d6cadaff58cbebb89bc5c0b8bd72ed1ff1", "patch": "@@ -3079,6 +3079,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t  {\n \t\t    /* Operands don't match.  */\n \t\t    rtx value;\n+\t\t    int loc1, loc2;\n \t\t    /* Retroactively mark the operand we had to match\n \t\t       as a loser, if it wasn't already.  */\n \t\t    if (this_alternative_win[m])\n@@ -3087,12 +3088,26 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t    if (this_alternative[m] == (int) NO_REGS)\n \t\t      bad = 1;\n \t\t    /* But count the pair only once in the total badness of\n-\t\t       this alternative, if the pair can be a dummy reload.  */\n+\t\t       this alternative, if the pair can be a dummy reload.\n+\t\t       The pointers in operand_loc are not swapped; swap\n+\t\t       them by hand if necessary.  */\n+\t\t    if (swapped && i == commutative)\n+\t\t      loc1 = commutative + 1;\n+\t\t    else if (swapped && i == commutative + 1)\n+\t\t      loc1 = commutative;\n+\t\t    else\n+\t\t      loc1 = i;\n+\t\t    if (swapped && m == commutative)\n+\t\t      loc2 = commutative + 1;\n+\t\t    else if (swapped && m == commutative + 1)\n+\t\t      loc2 = commutative;\n+\t\t    else\n+\t\t      loc2 = m;\n \t\t    value\n \t\t      = find_dummy_reload (recog_data.operand[i],\n \t\t\t\t\t   recog_data.operand[m],\n-\t\t\t\t\t   recog_data.operand_loc[i],\n-\t\t\t\t\t   recog_data.operand_loc[m],\n+\t\t\t\t\t   recog_data.operand_loc[loc1],\n+\t\t\t\t\t   recog_data.operand_loc[loc2],\n \t\t\t\t\t   operand_mode[i], operand_mode[m],\n \t\t\t\t\t   this_alternative[m], -1,\n \t\t\t\t\t   this_alternative_earlyclobber[m]);"}]}