{"sha": "a3ebc13492ff238873f2c6a7a3e51abefec1d052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlYmMxMzQ5MmZmMjM4ODczZjJjNmE3YTNlNTFhYmVmZWMxZDA1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T15:24:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-26T15:24:07Z"}, "message": "match.pd: Use ranges to optimize some x * y / y to x [PR97997]\n\nFor signed integers with undefined overflow we already optimize x * y / y\ninto x, but for signed integers with -fwrapv or unsigned integers we don't.\nThe following patch allows optimizing that into just x if value ranges\nprove that x * y will never overflow.\nIt uses the global SSA_NAME_RANGE_INFO only, because like mentioned\nin another PR we don't currently have a way to tell the ranger from match.pd\nthe use stmt (and we'd need in that case to tell ranger to only follow\nSSA_NAME_DEF_STMTs + SSA_NAME_RANGE_INFO and never go in the other\ndirection, as following immediate uses seems forbidden in match.pd).\nAnother possibility would be to optimize this during vrp, but on the\nother side the optimization itself is match.pd-ish.\n\n2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97997\n\t* match.pd ((t * 2) / 2) -> t): Optimize even for defined\n\toverflow if ranges prove there is no overflow.\n\n\t* gcc.dg/tree-ssa/pr97997-1.c: New test.\n\t* gcc.dg/tree-ssa/pr97997-2.c: New test.", "tree": {"sha": "a1b090730fe8015726b131268147dafe149d07b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b090730fe8015726b131268147dafe149d07b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ebc13492ff238873f2c6a7a3e51abefec1d052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ebc13492ff238873f2c6a7a3e51abefec1d052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ebc13492ff238873f2c6a7a3e51abefec1d052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ebc13492ff238873f2c6a7a3e51abefec1d052/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c76b3f9e83353a4cd437ca137c1fb835c9b5c21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76b3f9e83353a4cd437ca137c1fb835c9b5c21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76b3f9e83353a4cd437ca137c1fb835c9b5c21f"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "b6dfc24af88be887e143f9eac4e61a3d4317279a", "filename": "gcc/match.pd", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a3ebc13492ff238873f2c6a7a3e51abefec1d052", "patch": "@@ -650,9 +650,48 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for div (trunc_div ceil_div floor_div round_div exact_div)\n  (simplify\n   (div (mult:c @0 @1) @1)\n-  (if (ANY_INTEGRAL_TYPE_P (type)\n-       && TYPE_OVERFLOW_UNDEFINED (type))\n-   @0)))\n+  (if (ANY_INTEGRAL_TYPE_P (type))\n+   (if (TYPE_OVERFLOW_UNDEFINED (type))\n+    @0\n+#if GIMPLE\n+    (if (TREE_CODE (@0) == SSA_NAME\n+\t && (TREE_CODE (@1) == SSA_NAME || TREE_CODE (@1) == INTEGER_CST))\n+     (with\n+      {\n+\tbool overflowed = true;\n+\twide_int wmin0, wmax0;\n+\tif (get_range_info (@0, &wmin0, &wmax0) == VR_RANGE)\n+\t  {\n+\t    /* If the multiplication can't overflow/wrap around, then\n+\t       it can be optimized too.  */\n+\t    wide_int wmin1, wmax1;\n+\t    wi::overflow_type min_ovf, max_ovf;\n+\t    if (TREE_CODE (@1) == INTEGER_CST)\n+\t      {\n+\t\twmin1 = wi::to_wide (@1);\n+\t\twi::mul (wmin0, wmin1, TYPE_SIGN (type), &min_ovf);\n+\t\twi::mul (wmax0, wmin1, TYPE_SIGN (type), &max_ovf);\n+\t\tif (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+\t\t  overflowed = false;\n+\t      }\n+\t    else if (get_range_info (@1, &wmin1, &wmax1) == VR_RANGE)\n+\t      {\n+\t\twi::mul (wmin0, wmin1, TYPE_SIGN (type), &min_ovf);\n+\t\twi::mul (wmax0, wmax1, TYPE_SIGN (type), &max_ovf);\n+\t\tif (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+\t\t  {\n+\t\t    wi::mul (wmin0, wmax1, TYPE_SIGN (type), &min_ovf);\n+\t\t    wi::mul (wmax0, wmin1, TYPE_SIGN (type), &max_ovf);\n+\t\t    if (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+\t\t      overflowed = false;\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n+     (if (!overflowed)\n+      @0)))\n+#endif\n+   ))))\n \n (for op (negate abs)\n  /* Simplify cos(-x) and cos(|x|) -> cos(x).  Similarly for cosh.  */"}, {"sha": "3c4b468b88b9094a28de5dfeba1438d0531e0693", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97997-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-1.c?ref=a3ebc13492ff238873f2c6a7a3e51abefec1d052", "patch": "@@ -0,0 +1,52 @@\n+/* PR tree-optimization/97997 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return x_\\[0-9]*\\\\\\(D\\\\\\);\" 6 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" / \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\* \" \"optimized\" } } */\n+\n+unsigned short\n+f1 (unsigned short x)\n+{\n+  return x * 10 / 10;\n+}\n+\n+unsigned short\n+f2 (unsigned short x)\n+{\n+  int a = x;\n+  int b = 10;\n+  int c = 10;\n+  return a * b / c;\n+}\n+\n+unsigned short\n+f3 (unsigned short x)\n+{\n+  return x * 10U / 10;\n+}\n+\n+unsigned short\n+f4 (unsigned short x)\n+{\n+  unsigned a = x;\n+  unsigned b = 10;\n+  unsigned c = 10;\n+  return a * b / c;\n+}\n+\n+unsigned short\n+f5 (unsigned short x, unsigned short y)\n+{\n+  return (unsigned) x * y / y;\n+}\n+\n+unsigned int\n+f6 (unsigned int x, unsigned int y)\n+{\n+  if (x >= 30000)\n+    __builtin_unreachable ();\n+  if (y >= ~0U / 30000)\n+    __builtin_unreachable ();\n+  return x * y / y;\n+}"}, {"sha": "a9d5075f3ab627ecbaf9242aed55c33fd75cdf90", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97997-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ebc13492ff238873f2c6a7a3e51abefec1d052/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97997-2.c?ref=a3ebc13492ff238873f2c6a7a3e51abefec1d052", "patch": "@@ -0,0 +1,41 @@\n+/* PR tree-optimization/97997 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fwrapv\" } */\n+/* { dg-final { scan-tree-dump-times \"return x_\\[0-9]*\\\\\\(D\\\\\\);\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" / \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\* \" \"optimized\" } } */\n+\n+unsigned short\n+f1 (unsigned short x)\n+{\n+  return x * 10 / 10;\n+}\n+\n+unsigned short\n+f2 (unsigned short x)\n+{\n+  int a = x;\n+  int b = 10;\n+  int c = 10;\n+  return a * b / c;\n+}\n+\n+short\n+f3 (short x, short y)\n+{\n+  return x * y / y;\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  if (x >= 30000)\n+    __builtin_unreachable ();\n+  if (x <= -30000)\n+    __builtin_unreachable ();\n+  if (y >= __INT_MAX__ / 30000)\n+    __builtin_unreachable ();\n+  if (y <= -__INT_MAX__ / 30000)\n+    __builtin_unreachable ();\n+  return x * y / y;\n+}"}]}