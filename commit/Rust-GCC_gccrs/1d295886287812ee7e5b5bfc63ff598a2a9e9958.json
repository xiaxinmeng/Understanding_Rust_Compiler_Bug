{"sha": "1d295886287812ee7e5b5bfc63ff598a2a9e9958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQyOTU4ODYyODc4MTJlZTdlNWI1YmZjNjNmZjU5OGEyYTllOTk1OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-18T15:27:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-18T15:27:21Z"}, "message": "re PR tree-optimization/37258 (ice in simplify_subreg, at simplify-rtx.c:4957)\n\n2008-09-18  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37258\n\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Include the precision\n\tand signedness for integral types.\n\t(vn_phi_eq): Require compatible types.\n\n\t* gcc.c-torture/compile/pr37258.c: New testcase.\n\nFrom-SVN: r140460", "tree": {"sha": "d5d3ac4757be317024a8c7493c7dd505ed3ca0bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d3ac4757be317024a8c7493c7dd505ed3ca0bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d295886287812ee7e5b5bfc63ff598a2a9e9958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d295886287812ee7e5b5bfc63ff598a2a9e9958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d295886287812ee7e5b5bfc63ff598a2a9e9958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d295886287812ee7e5b5bfc63ff598a2a9e9958/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802e9f8e7ccb805437419eef74a9a1cbe75a68ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802e9f8e7ccb805437419eef74a9a1cbe75a68ed"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "9f9ddde9d9c46c452da5e8b7b803a658ffe8fd5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d295886287812ee7e5b5bfc63ff598a2a9e9958", "patch": "@@ -1,3 +1,10 @@\n+2008-09-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37258\n+\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Include the precision\n+\tand signedness for integral types.\n+\t(vn_phi_eq): Require compatible types.\n+\n 2008-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/34037"}, {"sha": "e8d98466b8fb2442554fb70ac34355ca76b483b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d295886287812ee7e5b5bfc63ff598a2a9e9958", "patch": "@@ -1,3 +1,8 @@\n+2008-09-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37258\n+\t* gcc.c-torture/compile/pr37258.c: New testcase.\n+\n 2008-09-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/37102"}, {"sha": "5091d980bfd909a471594ca1df2d009d3b5e8994", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37258.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37258.c?ref=1d295886287812ee7e5b5bfc63ff598a2a9e9958", "patch": "@@ -0,0 +1,58 @@\n+typedef signed char int8_t;\n+typedef short int int16_t;\n+typedef int int32_t;\n+__extension__ typedef long long int int64_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+static inline unsigned int\n+lshift_u_s (unsigned int left, int right)\n+{\n+  if ((right) || (right >= sizeof (unsigned int) * 8)\n+      || (left > (4294967295U >> right)))\n+    return left;\n+}\n+static inline unsigned long int\n+div_rhs (long int rhs)\n+{\n+  if (rhs == 0)\n+    return 1;\n+  return rhs;\n+}\n+\n+uint32_t g_230;\n+int8_t g_294;\n+uint16_t g_316;\n+uint32_t g_334;\n+int32_t g_375;\n+int64_t g_380;\n+int32_t func_99 (int16_t p_100, int32_t p_101, int32_t p_102, int32_t p_103,\n+                 int64_t p_105, int32_t p_106, int32_t p_107, int16_t p_108,\n+                 int16_t p_109);\n+int32_t\n+func_77 (int64_t p_79)\n+{\n+  int16_t l_397;\n+  if (mod_rhs (p_79))\n+    p_79 = 1;\n+  else\n+    for (p_79 = 0; 0; p_79 += 1)\n+      {\n+      }\n+  if (lshift_s_s (1, func_112 (2L, (lshift_u_s (g_334, p_79)))))\n+    {\n+      int8_t l_384;\n+      int64_t l_414;\n+      if (lshift_u_s (g_375, 1))\n+        {\n+          func_23 (func_99 (1, 1, 1, 1, g_230, p_79, 1, g_334, 1), 1);\n+          for (p_79 = 0; 0; ++p_79)\n+            {\n+            }\n+        }\n+      if (div_rhs (func_82 (1, 1, g_380, 1, l_397, 1, 1)))\n+        func_99 ((func_82\n+                  (1, g_334, g_294, func_112 (1, (p_79 & 1)), g_316, 1, 1)),\n+                 1, (0xFBA25CA382A8CA74LL), l_384, l_414, 0L, 1, 1, 1);\n+    }\n+}\n+"}, {"sha": "dbffff5aa2b3d3176a6bc16fb9340dcea9447cd4", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d295886287812ee7e5b5bfc63ff598a2a9e9958/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1d295886287812ee7e5b5bfc63ff598a2a9e9958", "patch": "@@ -1402,9 +1402,17 @@ vn_phi_compute_hash (vn_phi_t vp1)\n   hashval_t result = 0;\n   int i;\n   tree phi1op;\n+  tree type;\n \n   result = vp1->block->index;\n \n+  /* If all PHI arguments are constants we need to distinguish\n+     the PHI node via its type.  */\n+  type = TREE_TYPE (VEC_index (tree, vp1->phiargs, 0));\n+  result += (INTEGRAL_TYPE_P (type)\n+\t     + (INTEGRAL_TYPE_P (type)\n+\t\t? TYPE_PRECISION (type) + TYPE_UNSIGNED (type) : 0));\n+\n   for (i = 0; VEC_iterate (tree, vp1->phiargs, i, phi1op); i++)\n     {\n       if (phi1op == VN_TOP)\n@@ -1437,6 +1445,12 @@ vn_phi_eq (const void *p1, const void *p2)\n       int i;\n       tree phi1op;\n \n+      /* If the PHI nodes do not have compatible types\n+\t they are not the same.  */\n+      if (!types_compatible_p (TREE_TYPE (VEC_index (tree, vp1->phiargs, 0)),\n+\t\t\t       TREE_TYPE (VEC_index (tree, vp2->phiargs, 0))))\n+\treturn false;\n+\n       /* Any phi in the same block will have it's arguments in the\n \t same edge order, because of how we store phi nodes.  */\n       for (i = 0; VEC_iterate (tree, vp1->phiargs, i, phi1op); i++)"}]}