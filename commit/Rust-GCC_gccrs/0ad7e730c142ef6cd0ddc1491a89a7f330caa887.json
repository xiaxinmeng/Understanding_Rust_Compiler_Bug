{"sha": "0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkN2U3MzBjMTQyZWY2Y2QwZGRjMTQ5MWE4OWE3ZjMzMGNhYTg4Nw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-13T18:40:39Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-08-13T18:42:21Z"}, "message": "rs6000: ICE when using an MMA type as a function param or return value [PR96506]\n\nPR96506 shows a problem where we ICE on illegal usage, namely using MMA\ntypes for function arguments and return values.  The solution is to flag\nthese illegal usages as errors early, before we ICE.\n\n2020-08-13  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/96506\n\t* config/rs6000/rs6000-call.c (rs6000_promote_function_mode): Disallow\n\tMMA types as return values.\n\t(rs6000_function_arg): Disallow MMA types as function arguments.\n\ngcc/testsuite/\n\tPR target/96506\n\t* gcc.target/powerpc/pr96506.c: New test.", "tree": {"sha": "dc95064b9d890b099feab5f84f1c059363c0f8d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc95064b9d890b099feab5f84f1c059363c0f8d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad7e730c142ef6cd0ddc1491a89a7f330caa887/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5f6bbfe2ec7c3d6425fee43c53948a3652f738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5f6bbfe2ec7c3d6425fee43c53948a3652f738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5f6bbfe2ec7c3d6425fee43c53948a3652f738"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "e39cfcf672b5f785b6b45586a95861be5128d28c", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad7e730c142ef6cd0ddc1491a89a7f330caa887/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad7e730c142ef6cd0ddc1491a89a7f330caa887/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "patch": "@@ -6444,8 +6444,30 @@ machine_mode\n rs6000_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n \t\t\t      machine_mode mode,\n \t\t\t      int *punsignedp ATTRIBUTE_UNUSED,\n-\t\t\t      const_tree, int)\n+\t\t\t      const_tree, int for_return)\n {\n+  /* Warning: this is a static local variable and not always NULL!\n+     This function is called multiple times for the same function\n+     and return value.  PREV_FUNC is used to keep track of the\n+     first time we encounter a function's return value in order\n+     to not report an error with that return value multiple times.  */\n+  static struct function *prev_func = NULL;\n+\n+  /* We do not allow MMA types being used as return values.  Only report\n+     the invalid return value usage the first time we encounter it.  */\n+  if (for_return\n+      && prev_func != cfun\n+      && (mode == POImode || mode == PXImode))\n+    {\n+      /* Record we have now handled function CFUN, so the next time we\n+\t are called, we do not re-report the same error.  */\n+      prev_func = cfun;\n+      if (TYPE_CANONICAL (type) != NULL_TREE)\n+\ttype = TYPE_CANONICAL (type);\n+      error (\"invalid use of MMA type %qs as a function return value\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))));\n+    }\n+\n   PROMOTE_MODE (mode, *punsignedp, type);\n \n   return mode;\n@@ -7396,6 +7418,16 @@ rs6000_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n   machine_mode elt_mode;\n   int n_elts;\n \n+  /* We do not allow MMA types being used as function arguments.  */\n+  if (mode == POImode || mode == PXImode)\n+    {\n+      if (TYPE_CANONICAL (type) != NULL_TREE)\n+\ttype = TYPE_CANONICAL (type);\n+      error (\"invalid use of MMA operand of type %qs as a function parameter\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))));\n+      return NULL_RTX;\n+    }\n+\n   /* Return a marker to indicate whether CR1 needs to set or clear the\n      bit that V.4 uses to say fp args were passed in registers.\n      Assume that we don't need the marker for software floating point,"}, {"sha": "b1b40c5a5c8082101135bc9d4743bfef43ae0a5c", "filename": "gcc/testsuite/gcc.target/powerpc/pr96506.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad7e730c142ef6cd0ddc1491a89a7f330caa887/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96506.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad7e730c142ef6cd0ddc1491a89a7f330caa887/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96506.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96506.c?ref=0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "patch": "@@ -0,0 +1,66 @@\n+/* PR target/96506 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+extern void bar0();\n+extern void bar1();\n+extern void bar2();\n+extern void bar3();\n+\n+typedef __vector_pair vpair_t;\n+typedef __vector_quad vquad_t;\n+\n+/* Verify we flag errors on the following.  */\n+\n+void\n+foo0 (void)\n+{\n+  __vector_pair v;\n+  bar0 (v); /* { dg-error \"invalid use of MMA operand of type .__vector_pair. as a function parameter\" } */\n+}\n+\n+void\n+foo1 (void)\n+{\n+  vpair_t v;\n+  bar1 (v); /* { dg-error \"invalid use of MMA operand of type .__vector_pair. as a function parameter\" } */\n+}\n+\n+void\n+foo2 (void)\n+{\n+  __vector_quad v;\n+  bar2 (v); /* { dg-error \"invalid use of MMA operand of type .__vector_quad. as a function parameter\" } */\n+}\n+\n+void\n+foo3 (void)\n+{\n+  vquad_t v;\n+  bar3 (v); /* { dg-error \"invalid use of MMA operand of type .__vector_quad. as a function parameter\" } */\n+}\n+\n+__vector_pair\n+foo4 (__vector_pair *src) /* { dg-error \"invalid use of MMA type .__vector_pair. as a function return value\" } */\n+{\n+  return *src;\n+}\n+\n+vpair_t\n+foo5 (vpair_t *src) /* { dg-error \"invalid use of MMA type .__vector_pair. as a function return value\" } */\n+{\n+  return *src;\n+}\n+\n+__vector_quad\n+foo6 (__vector_quad *src) /* { dg-error \"invalid use of MMA type .__vector_quad. as a function return value\" } */\n+{\n+  return *src;\n+}\n+\n+vquad_t\n+foo7 (vquad_t *src) /* { dg-error \"invalid use of MMA type .__vector_quad. as a function return value\" } */\n+{\n+  return *src;\n+}"}]}