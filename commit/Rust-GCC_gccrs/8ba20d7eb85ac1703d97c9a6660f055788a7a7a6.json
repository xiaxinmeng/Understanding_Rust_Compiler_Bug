{"sha": "8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhMjBkN2ViODVhYzE3MDNkOTdjOWE2NjYwZjA1NTc4OGE3YTdhNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:53:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:53:43Z"}, "message": "cmd/go: skip tests that do not work with gccgo\n    \n    These tests fail for various reasons, most commonly because gccgo\n    doesn't really have GOROOT, so things like `go build errors` fail.\n    \n    Reviewed-on: https://go-review.googlesource.com/45696\n\nFrom-SVN: r249197", "tree": {"sha": "93489d662530195a450fe77362203a6eeb84c215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93489d662530195a450fe77362203a6eeb84c215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/comments", "author": null, "committer": null, "parents": [{"sha": "b205ec303fc93ba64c0991f64a44e7773f68c38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b205ec303fc93ba64c0991f64a44e7773f68c38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b205ec303fc93ba64c0991f64a44e7773f68c38a"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "0c1a5cfca69bb76395eba34b5fb9a2fb59d05d3c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "patch": "@@ -1,4 +1,4 @@\n-a790c5fec06ced726c7f0f597186883ce61d0a45\n+6b08348d905bf84a91b8d693ee01b30e8bf18ccf\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "eaa8685e31e5deba85a854b6ac775e547a667fc8", "filename": "libgo/go/cmd/go/go_test.go", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go?ref=8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "patch": "@@ -100,7 +100,7 @@ func TestMain(m *testing.M) {\n \n \t\tswitch runtime.GOOS {\n \t\tcase \"linux\", \"darwin\", \"freebsd\", \"windows\":\n-\t\t\tcanRace = canCgo && runtime.GOARCH == \"amd64\"\n+\t\t\tcanRace = canCgo && runtime.GOARCH == \"amd64\" && runtime.Compiler != \"gccgo\"\n \t\t}\n \t}\n \n@@ -143,6 +143,13 @@ type testgoData struct {\n \tstdout, stderr bytes.Buffer\n }\n \n+// skipIfGccgo skips the test if using gccgo.\n+func skipIfGccgo(t *testing.T, msg string) {\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tt.Skipf(\"skipping test not supported on gccgo: %s\", msg)\n+\t}\n+}\n+\n // testgo sets up for a test that runs testgo.\n func testgo(t *testing.T) *testgoData {\n \ttestenv.MustHaveGoBuild(t)\n@@ -632,6 +639,7 @@ func TestFileLineInErrorMessages(t *testing.T) {\n }\n \n func TestProgramNameInCrashMessages(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not use cmd/link\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -757,6 +765,7 @@ func TestNewReleaseRebuildsStalePackagesInGOPATH(t *testing.T) {\n }\n \n func TestGoListStandard(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not GOROOT\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \t// TODO: tg.parallel()\n@@ -854,6 +863,7 @@ func TestGoInstallRebuildsStalePackagesInOtherGOPATH(t *testing.T) {\n }\n \n func TestGoInstallDetectsRemovedFiles(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not yet support package build IDs\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -923,6 +933,7 @@ func TestGoInstallErrorOnCrossCompileToBin(t *testing.T) {\n }\n \n func TestGoInstallDetectsRemovedFilesInPackageMain(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not yet support package build IDs\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -1060,6 +1071,7 @@ func TestBadImportsGoInstallShouldFail(t *testing.T) {\n }\n \n func TestInternalPackagesInGOROOTAreRespected(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not have GOROOT\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.runFail(\"build\", \"-v\", \"./testdata/testinternal\")\n@@ -1397,6 +1409,7 @@ var isGoRelease = strings.HasPrefix(runtime.Version(), \"go1\")\n \n // Issue 12690\n func TestPackageNotStaleWithTrailingSlash(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not have GOROOT\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \n@@ -1587,6 +1600,7 @@ func TestGoListStdDoesNotIncludeCommands(t *testing.T) {\n }\n \n func TestGoListCmdOnlyShowsCommands(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no GOROOT\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -1791,6 +1805,7 @@ func TestGoGetIntoGOROOT(t *testing.T) {\n }\n \n func TestLdflagsArgumentsWithSpacesIssue3941(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not support -ldflags -X\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -1804,6 +1819,7 @@ func TestLdflagsArgumentsWithSpacesIssue3941(t *testing.T) {\n }\n \n func TestGoTestCpuprofileLeavesBinaryBehind(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \t// TODO: tg.parallel()\n@@ -1814,6 +1830,7 @@ func TestGoTestCpuprofileLeavesBinaryBehind(t *testing.T) {\n }\n \n func TestGoTestCpuprofileDashOControlsBinaryLocation(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \t// TODO: tg.parallel()\n@@ -1824,6 +1841,7 @@ func TestGoTestCpuprofileDashOControlsBinaryLocation(t *testing.T) {\n }\n \n func TestGoTestMutexprofileLeavesBinaryBehind(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \t// TODO: tg.parallel()\n@@ -1834,6 +1852,7 @@ func TestGoTestMutexprofileLeavesBinaryBehind(t *testing.T) {\n }\n \n func TestGoTestMutexprofileDashOControlsBinaryLocation(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \t// TODO: tg.parallel()\n@@ -1844,6 +1863,7 @@ func TestGoTestMutexprofileDashOControlsBinaryLocation(t *testing.T) {\n }\n \n func TestGoTestDashCDashOControlsBinaryLocation(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -1853,6 +1873,7 @@ func TestGoTestDashCDashOControlsBinaryLocation(t *testing.T) {\n }\n \n func TestGoTestDashOWritesBinary(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -1862,6 +1883,7 @@ func TestGoTestDashOWritesBinary(t *testing.T) {\n }\n \n func TestGoTestDashIDashOWritesBinary(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -2057,6 +2079,7 @@ func TestIssue11307(t *testing.T) {\n }\n \n func TestShadowingLogic(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \tpwd := tg.pwd()\n@@ -2267,6 +2290,7 @@ func main() {\n }\n \n func TestCoverageWithCgo(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no cover tool\")\n \tif !canCgo {\n \t\tt.Skip(\"skipping because cgo not enabled\")\n \t}\n@@ -3009,6 +3033,7 @@ func TestGoRunDirs(t *testing.T) {\n }\n \n func TestGoInstallPkgdir(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \ttg.parallel()\n \tdefer tg.cleanup()\n@@ -3022,6 +3047,8 @@ func TestGoInstallPkgdir(t *testing.T) {\n }\n \n func TestGoTestRaceInstallCgo(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no race detector\")\n+\n \tswitch sys := runtime.GOOS + \"/\" + runtime.GOARCH; sys {\n \tcase \"darwin/amd64\", \"freebsd/amd64\", \"linux/amd64\", \"windows/amd64\":\n \t\t// ok\n@@ -3244,6 +3271,7 @@ func TestIssue12096(t *testing.T) {\n }\n \n func TestGoBuildOutput(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \n@@ -3323,6 +3351,7 @@ func TestGoBuildARM(t *testing.T) {\n }\n \n func TestIssue13655(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo has no standard packages\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \tfor _, pkg := range []string{\"runtime\", \"runtime/internal/atomic\"} {\n@@ -3709,6 +3738,7 @@ func TestBenchTimeout(t *testing.T) {\n \n func TestLinkXImportPathEscape(t *testing.T) {\n \t// golang.org/issue/16710\n+\tskipIfGccgo(t, \"gccgo does not support -ldflags -X\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()\n@@ -3738,6 +3768,7 @@ func TestLdBindNow(t *testing.T) {\n // Issue 18225.\n // This is really a cmd/asm issue but this is a convenient place to test it.\n func TestConcurrentAsm(t *testing.T) {\n+\tskipIfGccgo(t, \"gccgo does not use cmd/asm\")\n \ttg := testgo(t)\n \tdefer tg.cleanup()\n \ttg.parallel()"}, {"sha": "7b5568f2b71ff49e258b1a061498c1981af78e57", "filename": "libgo/go/cmd/go/note_test.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/libgo%2Fgo%2Fcmd%2Fgo%2Fnote_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6/libgo%2Fgo%2Fcmd%2Fgo%2Fnote_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fnote_test.go?ref=8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build gc\n+\n package main_test\n \n import ("}]}