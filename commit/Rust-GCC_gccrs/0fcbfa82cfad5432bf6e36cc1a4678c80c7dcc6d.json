{"sha": "0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjYmZhODJjZmFkNTQzMmJmNmUzNmNjMWE0Njc4YzgwYzdkY2M2ZA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-08-17T21:56:29Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-08-17T21:56:29Z"}, "message": "natClass.cc (finit_name): Initialized with `finit$'.\n\n2000-08-15  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * java/lang/natClass.cc (finit_name): Initialized with `finit$'.\n        (finit_leg_name): New global.\n        (java::lang::Class::getDeclaredMethods): Test for `finit$' or\n        `$finit$'. This is a backward compatibility hack.\n        (java::lang::Class::_getMethods): Likewise.\n\n(http://sources.redhat.com/ml/java-discuss/2000-08/msg00031.html\n See also the matching compiler patch:\n http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00664.html)\n\nFrom-SVN: r35769", "tree": {"sha": "fe99c57fde3a57124643d4b29f688584f4266b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe99c57fde3a57124643d4b29f688584f4266b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d/comments", "author": null, "committer": null, "parents": [{"sha": "25bdcbc5242faed11b2f58c72c64cb2b0165d681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bdcbc5242faed11b2f58c72c64cb2b0165d681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bdcbc5242faed11b2f58c72c64cb2b0165d681"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "5dbcdddd9bd362a5e1e0900280eb2b41dedf2299", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "patch": "@@ -143,6 +143,14 @@\n \t* Makefile.am: Added new files.\n \t* Makefile.in: Rebuilt.\n \n+2000-08-15  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* java/lang/natClass.cc (finit_name): Initialized with `finit$'.\n+\t(finit_leg_name): New global.\n+\t(java::lang::Class::getDeclaredMethods): Test for `finit$' or\n+\t`$finit$'. This is a backward compatibility hack.\n+\t(java::lang::Class::_getMethods): Likewise.\n+\n 2000-08-15  Andrew Haley  <aph@cygnus.com>\n \n \t* include/jvm.h (_Jv_HashCode): New hash code."}, {"sha": "1b4037338210a7b7a7345068d1c3c38da68f3284", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=0fcbfa82cfad5432bf6e36cc1a4678c80c7dcc6d", "patch": "@@ -70,7 +70,10 @@ extern java::lang::Class ConstructorClass;\n static _Jv_Utf8Const *void_signature = _Jv_makeUtf8Const (\"()V\", 3);\n static _Jv_Utf8Const *clinit_name = _Jv_makeUtf8Const (\"<clinit>\", 8);\n static _Jv_Utf8Const *init_name = _Jv_makeUtf8Const (\"<init>\", 6);\n-static _Jv_Utf8Const *finit_name = _Jv_makeUtf8Const (\"$finit$\", 7);\n+static _Jv_Utf8Const *finit_name = _Jv_makeUtf8Const (\"finit$\", 6);\n+// The legacy `$finit$' method name, which still needs to be\n+// recognized as equivalent to the now prefered `finit$' name.\n+static _Jv_Utf8Const *finit_leg_name = _Jv_makeUtf8Const (\"$finit$\", 7);\n \n \f\n \n@@ -331,7 +334,9 @@ java::lang::Class::getDeclaredMethods (void)\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n+\t  // Backward compatibility hack: match the legacy `$finit$' name\n+\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n \tcontinue;\n       numMethods++;\n     }\n@@ -345,7 +350,9 @@ java::lang::Class::getDeclaredMethods (void)\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n+\t  // Backward compatibility hack: match the legacy `$finit$' name\n+\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n \tcontinue;\n       java::lang::reflect::Method* rmethod\n \t= new java::lang::reflect::Method ();\n@@ -508,7 +515,9 @@ java::lang::Class::_getMethods (JArray<java::lang::reflect::Method *> *result,\n       if (method->name == NULL\n \t  || _Jv_equalUtf8Consts (method->name, clinit_name)\n \t  || _Jv_equalUtf8Consts (method->name, init_name)\n-\t  || _Jv_equalUtf8Consts (method->name, finit_name))\n+\t  || _Jv_equalUtf8Consts (method->name, finit_name)\n+\t  // Backward compatibility hack: match the legacy `$finit$' name\n+\t  || _Jv_equalUtf8Consts (method->name, finit_leg_name))\n \tcontinue;\n       // Only want public methods.\n       if (! java::lang::reflect::Modifier::isPublic (method->accflags))"}]}