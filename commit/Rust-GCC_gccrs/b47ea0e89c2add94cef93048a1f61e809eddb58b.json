{"sha": "b47ea0e89c2add94cef93048a1f61e809eddb58b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3ZWEwZTg5YzJhZGQ5NGNlZjkzMDQ4YTFmNjFlODA5ZWRkYjU4Yg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-29T11:53:23Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-29T11:53:23Z"}, "message": "2003-09-29  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/InetAddress.java:\n\t(isMulticastAddress): Dont use local variable to store address length.\n\tLet the compiler optimize this.\n\t(getHostName): Merged dcoumentation from classpath.\n\t(getAddress): Likewise.\n\t(getHostAddress): Likewise.\n\t(hashCode): Likewise.\n\t(equals): Likewise.\n\t(toString): Likewise.\n\t(getByName): Likewise.\n\t(getAllByName): Likewise.\n\nFrom-SVN: r71899", "tree": {"sha": "f45ddd0482577d00dfe8f9fa1c78cc781ec7e1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f45ddd0482577d00dfe8f9fa1c78cc781ec7e1ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47ea0e89c2add94cef93048a1f61e809eddb58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47ea0e89c2add94cef93048a1f61e809eddb58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47ea0e89c2add94cef93048a1f61e809eddb58b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47ea0e89c2add94cef93048a1f61e809eddb58b/comments", "author": null, "committer": null, "parents": [{"sha": "388781954235a5c9d9aae5974f48edf153a7e7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388781954235a5c9d9aae5974f48edf153a7e7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/388781954235a5c9d9aae5974f48edf153a7e7f1"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "1e9525aecf9466528c471a12645dfd4a85c5ca4f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47ea0e89c2add94cef93048a1f61e809eddb58b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47ea0e89c2add94cef93048a1f61e809eddb58b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b47ea0e89c2add94cef93048a1f61e809eddb58b", "patch": "@@ -1,3 +1,17 @@\n+2003-09-29  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/InetAddress.java:\n+\t(isMulticastAddress): Dont use local variable to store address length.\n+\tLet the compiler optimize this.\n+\t(getHostName): Merged dcoumentation from classpath.\n+\t(getAddress): Likewise.\n+\t(getHostAddress): Likewise.\n+\t(hashCode): Likewise.\n+\t(equals): Likewise.\n+\t(toString): Likewise.\n+\t(getByName): Likewise.\n+\t(getAllByName): Likewise.\n+\n 2003-09-29  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/image/IndexColorModel.java: Reformated."}, {"sha": "b01b2917912891e54f5fcfa32c69fd2c73018452", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47ea0e89c2add94cef93048a1f61e809eddb58b/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47ea0e89c2add94cef93048a1f61e809eddb58b/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=b47ea0e89c2add94cef93048a1f61e809eddb58b", "patch": "@@ -140,12 +140,12 @@ public class InetAddress implements Serializable\n    */\n   public boolean isMulticastAddress()\n   {\n-    int len = addr.length;\n-    \n-    if (len == 4)\n+    // Mask against high order bits of 1110\n+    if (addr.length == 4)\n       return (addr [0] & 0xF0) == 0xE0;\n     \n-    if (len == 16)\n+    // Mask against high order bits of 11111111\n+    if (addr.lenth == 16)\n       return addr [0] == (byte) 0xFF;\n     \n     return false;\n@@ -297,7 +297,10 @@ public boolean isMCOrgLocal()\n   }\n \n   /**\n-   * Returns the hostname represented by this InetAddress\n+   * Returns the hostname for this address.  This will return the IP address\n+   * as a String if there is no hostname available for this address\n+   *\n+   * @return The hostname for this address\n    */\n   public String getHostName()\n   {\n@@ -333,7 +336,9 @@ public String getCanonicalHostName()\n   }\n \n   /**\n-   * Returns the IP address of this InetAddress as array of bytes\n+   * Returns the IP address of this object as a byte array.\n+   *\n+   * @return IP address\n    */\n   public byte[] getAddress()\n   {\n@@ -368,7 +373,10 @@ private static SecurityException checkConnect (String hostname)\n   }\n \n   /**\n-   * Returns the IP address as string\n+   * Returns the IP address of this object as a String.  The address is in \n+   * the dotted octet notation, for example, \"127.0.0.1\".\n+   *\n+   * @return The IP address of this object in String form\n    *\n    * @since 1.0.2\n    */\n@@ -426,7 +434,10 @@ else if (i > 0)\n   }\n \n   /**\n-   * Returns a hashcode of the InetAddress\n+   * Returns a hash value for this address.  Useful for creating hash\n+   * tables.  Overrides Object.hashCode()\n+   *\n+   * @return A hash value for this address.\n    */\n   public int hashCode()\n   {\n@@ -443,7 +454,14 @@ public int hashCode()\n   }\n \n   /**\n-   * Compares the InetAddress object with another one.\n+   * Tests this address for equality against another InetAddress.  The two\n+   * addresses are considered equal if they contain the exact same octets.\n+   * This implementation overrides Object.equals()\n+   *\n+   * @param obj The address to test for equality\n+   *\n+   * @return true if the passed in object's address is equal to this one's,\n+   * false otherwise\n    */\n   public boolean equals (Object obj)\n   {\n@@ -471,7 +489,11 @@ public boolean equals (Object obj)\n   }\n \n   /**\n-   * Returns then <code>InetAddress</code> as string\n+   * Converts this address to a String.  This string contains the IP in\n+   * dotted decimal form. For example: \"127.0.0.1\"  This method is equivalent\n+   * to getHostAddress() and overrides Object.toString()\n+   *\n+   * @return This address in String form\n    */\n   public String toString()\n   {\n@@ -539,7 +561,16 @@ private static native InetAddress[] lookup (String hostname,\n   private static native int getFamily (byte[] address);\n \n   /**\n-   * Determines the IP address of a host, given the host's name.\n+   * Returns an InetAddress object representing the IP address of the given\n+   * hostname.  This name can be either a hostname such as \"www.urbanophile.com\"\n+   * or an IP address in dotted decimal format such as \"127.0.0.1\".  If the\n+   * hostname is null, the hostname of the local machine is supplied by\n+   * default.  This method is equivalent to returning the first element in\n+   * the InetAddress array returned from GetAllByName.\n+   *\n+   * @param hostname The name of the desired host, or null for the local machine.\n+   * \n+   * @return The address of the host as an InetAddress object.\n    *\n    * @exception UnknownHostException If no IP address for the host could\n    * be found\n@@ -586,9 +617,17 @@ else if (address.length == 16)\n   }\n \n   /**\n-   * Given the name of a host, returns an array of its IP addresses,\n-   * based on the configured name service on the system.\n+   * Returns an array of InetAddress objects representing all the host/ip\n+   * addresses of a given host, given the host's name.  This name can be\n+   * either a hostname such as \"www.urbanophile.com\" or an IP address in\n+   * dotted decimal format such as \"127.0.0.1\".  If the value is null, the\n+   * hostname of the local machine is supplied by default.\n+   *\n+   * @param @param hostname The name of the desired host, or null for the\n+   * local machine.\n    *\n+   * @return All addresses of the host as an array of InetAddress objects.\n+   * \n    * @exception UnknownHostException If no IP address for the host could\n    * be found\n    * @exception SecurityException If a security manager exists and its"}]}