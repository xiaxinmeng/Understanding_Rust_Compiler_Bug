{"sha": "2fc3c9a59b046f462fe13232768f5efc023928ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjM2M5YTU5YjA0NmY0NjJmZTEzMjMyNzY4ZjVlZmMwMjM5MjhlYQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@hotmail.com", "date": "2015-04-30T05:42:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-04-30T05:42:54Z"}, "message": "tree-vectorizer.c (set_uid_loop_bbs): New.\n\n2015-04-29  Aditya Kumar  <hiraditya@hotmail.com>\n\n        * tree-vectorizer.c (set_uid_loop_bbs): New.  Factored out of\n        vectorize_loops.\n        (vectorize_loops): Use it.\n\nFrom-SVN: r222610", "tree": {"sha": "179840964ac81acb579c6e66e00da11d2f2b1a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179840964ac81acb579c6e66e00da11d2f2b1a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fc3c9a59b046f462fe13232768f5efc023928ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc3c9a59b046f462fe13232768f5efc023928ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc3c9a59b046f462fe13232768f5efc023928ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc3c9a59b046f462fe13232768f5efc023928ea/comments", "author": null, "committer": null, "parents": [{"sha": "32496fdde11abfeda4bd911c489fdda5f3e141e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32496fdde11abfeda4bd911c489fdda5f3e141e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32496fdde11abfeda4bd911c489fdda5f3e141e6"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "854ae4161a900df1a3348d1f02879e9296c778ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc3c9a59b046f462fe13232768f5efc023928ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc3c9a59b046f462fe13232768f5efc023928ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fc3c9a59b046f462fe13232768f5efc023928ea", "patch": "@@ -1,3 +1,9 @@\n+2015-04-29  Aditya Kumar  <hiraditya@hotmail.com>\n+\n+\t* tree-vectorizer.c (set_uid_loop_bbs): New.  Factored out of\n+\tvectorize_loops.\n+\t(vectorize_loops): Use it.\n+\n 2015-04-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (odr_subtypes_equivalent_p): Compare TYPE_NAME only"}, {"sha": "e216114fb608f53e4e775ad159aab8077f15f579", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc3c9a59b046f462fe13232768f5efc023928ea/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc3c9a59b046f462fe13232768f5efc023928ea/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=2fc3c9a59b046f462fe13232768f5efc023928ea", "patch": "@@ -398,6 +398,39 @@ fold_loop_vectorized_call (gimple g, tree value)\n       update_stmt (use_stmt);\n     }\n }\n+/* Set the uids of all the statements in basic blocks inside loop\n+   represented by LOOP_VINFO. LOOP_VECTORIZED_CALL is the internal\n+   call guarding the loop which has been if converted.  */\n+static void\n+set_uid_loop_bbs (loop_vec_info loop_vinfo, gimple loop_vectorized_call)\n+{\n+  tree arg = gimple_call_arg (loop_vectorized_call, 1);\n+  basic_block *bbs;\n+  unsigned int i;\n+  struct loop *scalar_loop = get_loop (cfun, tree_to_shwi (arg));\n+\n+  LOOP_VINFO_SCALAR_LOOP (loop_vinfo) = scalar_loop;\n+  gcc_checking_assert (vect_loop_vectorized_call\n+\t\t       (LOOP_VINFO_SCALAR_LOOP (loop_vinfo))\n+\t\t       == loop_vectorized_call);\n+  bbs = get_loop_body (scalar_loop);\n+  for (i = 0; i < scalar_loop->num_nodes; i++)\n+    {\n+      basic_block bb = bbs[i];\n+      gimple_stmt_iterator gsi;\n+      for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple phi = gsi_stmt (gsi);\n+\t  gimple_set_uid (phi, 0);\n+\t}\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  gimple_set_uid (stmt, 0);\n+\t}\n+    }\n+  free (bbs);\n+}\n \n /* Function vectorize_loops.\n \n@@ -461,37 +494,7 @@ vectorize_loops (void)\n \n \tgimple loop_vectorized_call = vect_loop_vectorized_call (loop);\n \tif (loop_vectorized_call)\n-\t  {\n-\t    tree arg = gimple_call_arg (loop_vectorized_call, 1);\n-\t    basic_block *bbs;\n-\t    unsigned int i;\n-\t    struct loop *scalar_loop = get_loop (cfun, tree_to_shwi (arg));\n-\n-\t    LOOP_VINFO_SCALAR_LOOP (loop_vinfo) = scalar_loop;\n-\t    gcc_checking_assert (vect_loop_vectorized_call\n-\t\t\t\t\t(LOOP_VINFO_SCALAR_LOOP (loop_vinfo))\n-\t\t\t\t == loop_vectorized_call);\n-\t    bbs = get_loop_body (scalar_loop);\n-\t    for (i = 0; i < scalar_loop->num_nodes; i++)\n-\t      {\n-\t\tbasic_block bb = bbs[i];\n-\t\tgimple_stmt_iterator gsi;\n-\t\tfor (gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n-\t\t     gsi_next (&gsi))\n-\t\t  {\n-\t\t    gimple phi = gsi_stmt (gsi);\n-\t\t    gimple_set_uid (phi, 0);\n-\t\t  }\n-\t\tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n-\t\t     gsi_next (&gsi))\n-\t\t  {\n-\t\t    gimple stmt = gsi_stmt (gsi);\n-\t\t    gimple_set_uid (stmt, 0);\n-\t\t  }\n-\t      }\n-\t    free (bbs);\n-\t  }\n-\n+\t  set_uid_loop_bbs (loop_vinfo, loop_vectorized_call);\n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION\n \t    && dump_enabled_p ())\n           dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,"}]}