{"sha": "83042fcaec9b5763ddc895a57c6618afbfc4c897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwNDJmY2FlYzliNTc2M2RkYzg5NWE1N2M2NjE4YWZiZmM0Yzg5Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-03T17:59:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-03T17:59:05Z"}, "message": "stl_iterator_base_funcs.h: Minor formatting and indentation tweaks.\n\n2004-02-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_iterator_base_funcs.h: Minor formatting\n\tand indentation tweaks.\n\t* include/bits/stl_iterator_base_types.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_tempbuf.h: Likewise.\n\nFrom-SVN: r77182", "tree": {"sha": "1f4f17dba2c56dfd39a7a0de8f223999c40c45da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f4f17dba2c56dfd39a7a0de8f223999c40c45da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83042fcaec9b5763ddc895a57c6618afbfc4c897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83042fcaec9b5763ddc895a57c6618afbfc4c897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83042fcaec9b5763ddc895a57c6618afbfc4c897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83042fcaec9b5763ddc895a57c6618afbfc4c897/comments", "author": null, "committer": null, "parents": [{"sha": "e621b5885a6108a671b093bcb4770e5020e92f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e621b5885a6108a671b093bcb4770e5020e92f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e621b5885a6108a671b093bcb4770e5020e92f4a"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "c073ca735a79dce49f4b5b0aaeae8cce257088cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -1,3 +1,12 @@\n+2004-02-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_iterator_base_funcs.h: Minor formatting\n+\tand indentation tweaks.\n+\t* include/bits/stl_iterator_base_types.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_tempbuf.h: Likewise.\n+\n 2004-02-02  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/gslice.h, include/bits/gslice_array.h,"}, {"sha": "b7626d9355b1969c5e0283030e07ae5fa5ddef9c", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -137,9 +137,11 @@ namespace std\n       __glibcxx_function_requires(_BidirectionalIteratorConcept<\n \t\t\t\t  _BidirectionalIterator>)\n       if (__n > 0)\n-        while (__n--) ++__i;\n+        while (__n--)\n+\t  ++__i;\n       else\n-        while (__n++) --__i;\n+        while (__n++)\n+\t  --__i;\n     }\n   \n   template<typename _RandomAccessIterator, typename _Distance>"}, {"sha": "c3bb1c55727daf3de200f9ef307c907ae2676c12", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -124,7 +124,8 @@ namespace std\n    *  provide tighter, more correct semantics.\n   */\n   template<typename _Iterator>\n-    struct iterator_traits {\n+    struct iterator_traits\n+    {\n       typedef typename _Iterator::iterator_category iterator_category;\n       typedef typename _Iterator::value_type        value_type;\n       typedef typename _Iterator::difference_type   difference_type;\n@@ -133,7 +134,8 @@ namespace std\n     };\n \n   template<typename _Tp>\n-    struct iterator_traits<_Tp*> {\n+    struct iterator_traits<_Tp*>\n+    {\n       typedef random_access_iterator_tag iterator_category;\n       typedef _Tp                         value_type;\n       typedef ptrdiff_t                   difference_type;\n@@ -142,7 +144,8 @@ namespace std\n     };\n \n   template<typename _Tp>\n-    struct iterator_traits<const _Tp*> {\n+    struct iterator_traits<const _Tp*>\n+    {\n       typedef random_access_iterator_tag iterator_category;\n       typedef _Tp                         value_type;\n       typedef ptrdiff_t                   difference_type;"}, {"sha": "2c6504a710a29fef14378d8c42993fbfb5f14216", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -76,15 +76,21 @@ namespace __gnu_norm\n     _List_node_base* _M_next;   ///< Self-explanatory\n     _List_node_base* _M_prev;   ///< Self-explanatory\n \n-    static void swap(_List_node_base& __x,\n-                     _List_node_base& __y);\n+    static void\n+    swap(_List_node_base& __x, _List_node_base& __y);\n \n-    void transfer(_List_node_base * const __first,\n-                  _List_node_base * const __last);\n+    void\n+    transfer(_List_node_base * const __first,\n+\t     _List_node_base * const __last);\n \n-    void reverse();\n-    void hook(_List_node_base * const __position);\n-    void unhook();\n+    void\n+    reverse();\n+\n+    void\n+    hook(_List_node_base * const __position);\n+    \n+    void\n+    unhook();\n   };\n   \n   /// @if maint An actual node in the %list.  @endif\n@@ -286,6 +292,7 @@ namespace __gnu_norm\n       // allocator_type and _Node_Alloc_type. The conversion is\n       // required by table 32 in [20.1.5].\n       typedef typename _Alloc::template rebind<_List_node<_Tp> >::other\n+\n       _Node_Alloc_type;\n \n       _List_node_base _M_node;"}, {"sha": "04876ba7c997ab8829aad9c69ab0075cd16fa6f0", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -336,7 +336,7 @@ namespace __gnu_norm\n \titerator __i = lower_bound(__k);\n \t// __i->first is greater than or equivalent to __k.\n \tif (__i == end() || key_comp()(__k, (*__i).first))\n-        __i = insert(__i, value_type(__k, mapped_type()));\n+          __i = insert(__i, value_type(__k, mapped_type()));\n \treturn (*__i).second;\n       }\n       "}, {"sha": "96f909787bbbc6849a4a533de4338bea94aff042", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83042fcaec9b5763ddc895a57c6618afbfc4c897/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=83042fcaec9b5763ddc895a57c6618afbfc4c897", "patch": "@@ -132,35 +132,38 @@ namespace std\n     private:\n       // Disable copy constructor and assignment operator.\n       _Temporary_buffer(const _Temporary_buffer&);\n-      void operator=(const _Temporary_buffer&);\n+\n+      void\n+      operator=(const _Temporary_buffer&);\n     };\n   \n \n   template<typename _ForwardIterator, typename _Tp>\n     _Temporary_buffer<_ForwardIterator, _Tp>::\n     _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n     : _M_original_len(std::distance(__first, __last)), \n-      _M_len(0) , _M_buffer(0)\n+      _M_len(0), _M_buffer(0)\n     {\n       // Workaround for a __type_traits bug in the pre-7.3 compiler.\n       typedef typename __type_traits<_Tp>::has_trivial_default_constructor\n \t      _Trivial;\n \n       try\n-      {\n-\tpair<pointer, size_type> __p(get_temporary_buffer<value_type>(_M_original_len));\n-\t_M_buffer = __p.first;\n-\t_M_len = __p.second;\n-\tif (_M_len > 0)\n-\t  _M_initialize_buffer(*__first, _Trivial());\n-      }\n+\t{\n+\t  pair<pointer, size_type> __p(get_temporary_buffer<\n+\t\t\t\t       value_type>(_M_original_len));\n+\t  _M_buffer = __p.first;\n+\t  _M_len = __p.second;\n+\t  if (_M_len > 0)\n+\t    _M_initialize_buffer(*__first, _Trivial());\n+\t}\n       catch(...)\n-      { \n-\tstd::return_temporary_buffer(_M_buffer);\n-\t_M_buffer = 0; \n-\t_M_len = 0;\n-\t__throw_exception_again; \n-      }\n+\t{ \n+\t  std::return_temporary_buffer(_M_buffer);\n+\t  _M_buffer = 0; \n+\t  _M_len = 0;\n+\t  __throw_exception_again; \n+\t}\n     }\n } // namespace std\n "}]}