{"sha": "65cee9bdb7b5975151802bd805ba720f540dec8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjZWU5YmRiN2I1OTc1MTUxODAyYmQ4MDViYTcyMGY1NDBkZWM4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-19T00:10:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-19T00:10:53Z"}, "message": "type_traits (is_nothrow_default_constructible, [...]): Add.\n\n2011-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (is_nothrow_default_constructible,\n\tis_nothrow_copy_constructible, is_nothrow_move_constructible,\n\tis_copy_constructible, is_move_constructible): Add.\n\t(has_nothrow_default_constructor, has_nothrow_copy_constructor):\n\tRemove.\n\t(is_nothrow_constructible): Adjust.\n\n\t* testsuite/util/testsuite_tr1.h (ThrowDefaultClass,\n\tThrowCopyConsClass, ThrowMoveConsClass, NoexceptDefaultClass,\n\tExceptDefaultClass, NoexceptCopyConsClass, ExceptCopyConsClass,\n\tNoexceptMoveConsClass, ExceptMoveConsClass): Add in C++0x mode.\n\n\t* testsuite/20_util/has_nothrow_default_constructor: Remove.\n\t* testsuite/20_util/has_nothrow_copy_constructor: Likewise.\n\n\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_move_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_copy_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_default_constructible/value.cc:\n\tLikewise.\n\t* testsuite/20_util/is_nothrow_default_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_default_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_move_constructible/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_move_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_copy_constructible/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_copy_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\n\t* testsuite/20_util/is_default_constructible/value.cc: Add tests.\n\t* testsuite/20_util/is_nothrow_constructible/value.cc: Likewise.\n\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\nFrom-SVN: r172684", "tree": {"sha": "facddf3c84a29435c4341358f41cf948bd528d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facddf3c84a29435c4341358f41cf948bd528d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65cee9bdb7b5975151802bd805ba720f540dec8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cee9bdb7b5975151802bd805ba720f540dec8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65cee9bdb7b5975151802bd805ba720f540dec8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cee9bdb7b5975151802bd805ba720f540dec8d/comments", "author": null, "committer": null, "parents": [{"sha": "1c13f168fd22cab61279e25df480b91f44a08b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c13f168fd22cab61279e25df480b91f44a08b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c13f168fd22cab61279e25df480b91f44a08b5e"}], "stats": {"total": 975, "additions": 804, "deletions": 171}, "files": [{"sha": "6eaa0264669c7b8eae31de336205fdfac32f9235", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -1,3 +1,56 @@\n+2011-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (is_nothrow_default_constructible,\n+\tis_nothrow_copy_constructible, is_nothrow_move_constructible,\n+\tis_copy_constructible, is_move_constructible): Add.\n+\t(has_nothrow_default_constructor, has_nothrow_copy_constructor):\n+\tRemove.\n+\t(is_nothrow_constructible): Adjust.\n+\n+\t* testsuite/util/testsuite_tr1.h (ThrowDefaultClass,\n+\tThrowCopyConsClass, ThrowMoveConsClass, NoexceptDefaultClass,\n+\tExceptDefaultClass, NoexceptCopyConsClass, ExceptCopyConsClass,\n+\tNoexceptMoveConsClass, ExceptMoveConsClass): Add in C++0x mode.\n+\n+\t* testsuite/20_util/has_nothrow_default_constructor: Remove.\n+\t* testsuite/20_util/has_nothrow_copy_constructor: Likewise.\n+\n+\t* testsuite/20_util/is_nothrow_move_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_move_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_copy_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_default_constructible/value.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_default_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_default_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_move_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_move_constructible/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_move_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_copy_constructible/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_copy_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\n+\t* testsuite/20_util/is_default_constructible/value.cc: Add tests.\n+\t* testsuite/20_util/is_nothrow_constructible/value.cc: Likewise.\n+\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\n 2011-04-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/25_algorithms/partition/moveable.cc: Actually run"}, {"sha": "ef622988aa47be7890e414b42c45411d7fa62e73", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 117, "deletions": 30, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -854,27 +854,132 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      _Args...>::value)>\n     { };\n \n+  template<typename _Tp, bool = is_void<_Tp>::value>\n+    struct __is_copy_constructible_impl;\n \n-  template<bool, typename _Tp, typename... _Args>\n-    struct __is_nt_constructible_helper\n-    { static const bool __value = false; };\n+  template<typename _Tp>\n+    struct __is_copy_constructible_impl<_Tp, true>\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_copy_constructible_impl<_Tp, false>\n+    : public is_constructible<_Tp, const _Tp&>\n+    { };\n+\n+  /// is_copy_constructible\n+  template<typename _Tp>\n+    struct is_copy_constructible\n+    : public __is_copy_constructible_impl<_Tp>\n+    { };\n+\n+  template<typename _Tp, bool = is_void<_Tp>::value>\n+    struct __is_move_constructible_impl;\n+\n+  template<typename _Tp>\n+    struct __is_move_constructible_impl<_Tp, true>\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_move_constructible_impl<_Tp, false>\n+    : public is_constructible<_Tp, _Tp&&>\n+    { };\n+\n+  /// is_move_constructible\n+  template<typename _Tp>\n+    struct is_move_constructible\n+    : public __is_move_constructible_impl<_Tp>\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_nt_default_constructible_atom\n+    : public integral_constant<bool, noexcept(_Tp())>\n+    { };\n+\n+  template<typename _Tp, bool = is_array<_Tp>::value>\n+    struct __is_nt_default_constructible_impl;\n+\n+  template<typename _Tp>\n+    struct __is_nt_default_constructible_impl<_Tp, true>\n+    : public __and_<__is_array_known_bounds<_Tp>,\n+\t\t    __is_nt_default_constructible_atom<typename\n+                      remove_all_extents<_Tp>::type>>::type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_nt_default_constructible_impl<_Tp, false>\n+    : public __is_nt_default_constructible_atom<_Tp>\n+    { };\n+\n+  /// is_nothrow_default_constructible\n+  template<typename _Tp>\n+    struct is_nothrow_default_constructible\n+    : public __and_<is_default_constructible<_Tp>,\n+                    __is_nt_default_constructible_impl<_Tp>>::type\n+    { };\n \n   template<typename _Tp, typename... _Args>\n-    struct __is_nt_constructible_helper<true, _Tp, _Args...>\n-    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };\n+    struct __is_nt_constructible_impl\n+    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>\n+    { };\n \n   template<typename _Tp, typename _Arg>\n-    struct __is_nt_constructible_helper<true, _Tp, _Arg>\n-    {\n-      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));\n-    };\n+    struct __is_nt_constructible_impl<_Tp, _Arg>\n+    : public integral_constant<bool,\n+                               noexcept(static_cast<_Tp>(declval<_Arg>()))>\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_nt_constructible_impl<_Tp>\n+    : public is_nothrow_default_constructible<_Tp>\n+    { };\n \n   /// is_nothrow_constructible\n   template<typename _Tp, typename... _Args>\n     struct is_nothrow_constructible\n-    : public integral_constant<bool,\n-\t  __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,\n-\t\t\t\t       _Tp, _Args...>::__value>\n+    : public __and_<is_constructible<_Tp, _Args...>,\n+\t\t    __is_nt_constructible_impl<_Tp, _Args...>>::type\n+    { };\n+\n+  template<typename _Tp, bool = is_void<_Tp>::value>\n+    struct __is_nothrow_copy_constructible_impl;\n+\n+  template<typename _Tp>\n+    struct __is_nothrow_copy_constructible_impl<_Tp, true>\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_nothrow_copy_constructible_impl<_Tp, false>\n+    : public is_nothrow_constructible<_Tp, const _Tp&>\n+    { };\n+\n+  /// is_nothrow_copy_constructible\n+  template<typename _Tp>\n+    struct is_nothrow_copy_constructible\n+    : public __is_nothrow_copy_constructible_impl<_Tp>\n+    { };\n+\n+  template<typename _Tp, bool = is_void<_Tp>::value>\n+    struct __is_nothrow_move_constructible_impl;\n+\n+  template<typename _Tp>\n+    struct __is_nothrow_move_constructible_impl<_Tp, true>\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_nothrow_move_constructible_impl<_Tp, false>\n+    : public is_nothrow_constructible<_Tp, _Tp&&>\n+    { };\n+\n+  /// is_nothrow_move_constructible\n+  template<typename _Tp>\n+    struct is_nothrow_move_constructible\n+    : public __is_nothrow_move_constructible_impl<_Tp>\n+    { };\n+\n+  /// has_nothrow_copy_assign\n+  template<typename _Tp>\n+    struct has_nothrow_copy_assign\n+    : public integral_constant<bool, __has_nothrow_assign(_Tp)>\n     { };\n \n   /// has_trivial_default_constructor\n@@ -901,24 +1006,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, __has_trivial_destructor(_Tp)>\n     { };\n \n-  /// has_nothrow_default_constructor\n-  template<typename _Tp>\n-    struct has_nothrow_default_constructor\n-    : public integral_constant<bool, __has_nothrow_constructor(_Tp)>\n-    { };\n-\n-  /// has_nothrow_copy_constructor\n-  template<typename _Tp>\n-    struct has_nothrow_copy_constructor\n-    : public integral_constant<bool, __has_nothrow_copy(_Tp)>\n-    { };\n-\n-  /// has_nothrow_copy_assign\n-  template<typename _Tp>\n-    struct has_nothrow_copy_assign\n-    : public integral_constant<bool, __has_nothrow_assign(_Tp)>\n-    { };\n-\n   /// has_virtual_destructor\n   template<typename _Tp>\n     struct has_virtual_destructor"}, {"sha": "6aee07a3dee4c701497e740fb64e59ace7e779a7", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1523 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1610 }\n \n #include <utility>\n "}, {"sha": "963c7bd57a5f2a75e230cc26d70769058a236154", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/value.cc", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c13f168fd22cab61279e25df480b91f44a08b5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c13f168fd22cab61279e25df480b91f44a08b5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_copy_constructor%2Fvalue.cc?ref=1c13f168fd22cab61279e25df480b91f44a08b5e", "patch": "@@ -1,56 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n-//\n-// Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <type_traits>\n-#include <testsuite_hooks.h>\n-#include <testsuite_tr1.h>\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using std::has_nothrow_copy_constructor;\n-  using namespace __gnu_test;\n-\n-  // Positive tests.\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, float>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, EnumType>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int*>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int(*)(int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int[2]>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, float[][3]>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int*[3]>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor, int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<has_nothrow_copy_constructor,\n-\t   int (ClassType::*[][2][3]) (int)>(true)) );\n-\n-  // Negative tests.\n-  VERIFY( (test_category<has_nothrow_copy_constructor, void>(false)) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "01548211c405d6bc5689e23421c13ab26a20d730", "filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/value.cc", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c13f168fd22cab61279e25df480b91f44a08b5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c13f168fd22cab61279e25df480b91f44a08b5e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhas_nothrow_default_constructor%2Fvalue.cc?ref=1c13f168fd22cab61279e25df480b91f44a08b5e", "patch": "@@ -1,61 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n-//\n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 4.5.3 Type properties\n-\n-#include <type_traits>\n-#include <testsuite_hooks.h>\n-#include <testsuite_tr1.h>\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-  using std::has_nothrow_default_constructor;\n-  using namespace __gnu_test;\n-\n-  // Positive tests.  \n-  VERIFY( (test_category<has_nothrow_default_constructor, int>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, float>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, EnumType>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int*>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int(*)(int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int (ClassType::*)>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int[2]>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, float[][3]>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int*[3]>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor,\n-\t   int (ClassType::*[][2][3]) (int)>(true)) );\n-  VERIFY( (test_category<has_nothrow_default_constructor, ClassType>(true)) );\n-\n-  // Negative tests.\n-  VERIFY( (test_category<has_nothrow_default_constructor, void>(false)) );  \n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "4ff9d10251dd1d3f2020b0ebe5786a87fe519bc0", "filename": "libstdc++-v3/testsuite/20_util/is_copy_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_copy_constructible<test_type>;\n+}"}, {"sha": "840a9f156dab4daf2572651ee9dfc3ae212463d2", "filename": "libstdc++-v3/testsuite/20_util/is_copy_constructible/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Frequirements%2Ftypedefs.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_copy_constructible<int>  test_type;\n+  typedef test_type::value_type            value_type;\n+  typedef test_type::type                  type;\n+  typedef test_type::type::value_type      type_value_type;\n+  typedef test_type::type::type            type_type;\n+}"}, {"sha": "d1c2ea6425d8d2ccd3d77dfa6a598220ea5dcfab", "filename": "libstdc++-v3/testsuite/20_util/is_copy_constructible/value.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_copy_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_copy_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_copy_constructible, int>(true)) );\n+  VERIFY( (test_category<is_copy_constructible, float>(true)) );\n+  VERIFY( (test_category<is_copy_constructible, EnumType>(true)) );\n+  VERIFY( (test_category<is_copy_constructible, int*>(true)) );\n+  VERIFY( (test_category<is_copy_constructible, int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   int (ClassType::*) (int)>(true)) );\n+\n+  VERIFY( (test_property<is_copy_constructible,\n+\t   NoexceptCopyConsClass>(true)) );\n+  VERIFY( (test_property<is_copy_constructible,\n+\t   const NoexceptCopyConsClass>(true)) );\n+  VERIFY( (test_property<is_copy_constructible,\n+\t   ThrowCopyConsClass>(true)) );\n+  VERIFY( (test_property<is_copy_constructible,\n+\t   ExceptCopyConsClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_copy_constructible, void>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, int[2]>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, int[]>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, float[][3]>(false)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   EnumType[2][3][4]>(false)) );\n+  VERIFY( (test_category<is_copy_constructible, int*[3]>(false)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   int (ClassType::*[2][3])>(false)) );\n+  VERIFY( (test_category<is_copy_constructible,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+\n+  VERIFY( (test_property<is_copy_constructible,\n+\t   volatile NoexceptCopyConsClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6461cb7d5fef5e31bfed65ad0f592bb2edca44d9", "filename": "libstdc++-v3/testsuite/20_util/is_default_constructible/value.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_default_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -93,6 +93,13 @@ static_assert(std::is_default_constructible<\n static_assert(std::is_default_constructible<const\n \t      std::initializer_list<int>[1]>::value, \"Error\");\n \n+static_assert(std::is_default_constructible\n+\t      <__gnu_test::NoexceptDefaultClass>::value, \"Error\");\n+static_assert(std::is_default_constructible\n+\t      <__gnu_test::ThrowDefaultClass>::value, \"Error\");\n+static_assert(std::is_default_constructible\n+\t      <__gnu_test::ExceptDefaultClass>::value, \"Error\");\n+\n static_assert(!std::is_default_constructible<void>::value, \"Error\");\n static_assert(!std::is_default_constructible<const void>::value, \"Error\");\n static_assert(!std::is_default_constructible<Abstract>::value, \"Error\");"}, {"sha": "2d67b20767d91930e5d5beff4533230928200c52", "filename": "libstdc++-v3/testsuite/20_util/is_move_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_move_constructible<test_type>;\n+}"}, {"sha": "76208d8ba10aabbf748e026318bfc774ff01147c", "filename": "libstdc++-v3/testsuite/20_util/is_move_constructible/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Frequirements%2Ftypedefs.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_move_constructible<int>  test_type;\n+  typedef test_type::value_type            value_type;\n+  typedef test_type::type                  type;\n+  typedef test_type::type::value_type      type_value_type;\n+  typedef test_type::type::type            type_type;\n+}"}, {"sha": "623359a461e3d3fab3ff662c25b05fa57b39348e", "filename": "libstdc++-v3/testsuite/20_util/is_move_constructible/value.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_move_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_move_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_move_constructible, int>(true)) );\n+  VERIFY( (test_category<is_move_constructible, float>(true)) );\n+  VERIFY( (test_category<is_move_constructible, EnumType>(true)) );\n+  VERIFY( (test_category<is_move_constructible, int*>(true)) );\n+  VERIFY( (test_category<is_move_constructible, int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   int (ClassType::*) (int)>(true)) );\n+\n+  VERIFY( (test_property<is_move_constructible,\n+\t   NoexceptMoveConsClass>(true)) );\n+  VERIFY( (test_property<is_move_constructible,\n+\t   ThrowMoveConsClass>(true)) );\n+  VERIFY( (test_property<is_move_constructible,\n+\t   ExceptMoveConsClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_move_constructible, void>(false)) );\n+  VERIFY( (test_category<is_move_constructible, int[2]>(false)) );\n+  VERIFY( (test_category<is_move_constructible, int[]>(false)) );\n+  VERIFY( (test_category<is_move_constructible, float[][3]>(false)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   EnumType[2][3][4]>(false)) );\n+  VERIFY( (test_category<is_move_constructible, int*[3]>(false)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   int (ClassType::*[2][3])>(false)) );\n+  VERIFY( (test_category<is_move_constructible,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+\n+  VERIFY( (test_property<is_move_constructible,\n+\t   const NoexceptMoveConsClass>(false)) );\n+  VERIFY( (test_property<is_move_constructible,\n+\t   volatile NoexceptMoveConsClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a77fa6c8b9972083318830115d858bab76fd96b1", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/value.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -2,7 +2,7 @@\n \n // 2010-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,6 +43,8 @@ void test01()\n   VERIFY( (test_property<is_nothrow_constructible, NothrowExplicitClass,\n \t   double&, int&, double&>(true)) );\n \n+  VERIFY( (test_property<is_nothrow_constructible, int[1]>(true)) );\n+\n   // Negative tests.\n   VERIFY( (test_property<is_nothrow_constructible, NoexceptExplicitClass,\n \t   void*>(false)) );\n@@ -69,6 +71,8 @@ void test01()\n \t   int&>(false)) );\n   VERIFY( (test_property<is_nothrow_constructible, ThrowExplicitClass,\n \t   double&, int&, double&>(false)) );\n+\n+  VERIFY( (test_property<is_nothrow_constructible, int[]>(false)) );\n }\n \n int main()"}, {"sha": "39ab86b664121a8694ab1273c05374e089fef753", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_constructible/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n // 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,13 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // NB: This file is for testing type_traits with NO OTHER INCLUDES.\n \n #include <type_traits>\n \n namespace std\n {\n   typedef short test_type;\n-  template struct has_nothrow_copy_constructor<test_type>;\n+  template struct is_nothrow_copy_constructible<test_type>;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/requirements/explicit_instantiation.cc"}, {"sha": "320010b1c48c07ae11667cc4899705c25a399845", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_constructible/requirements/typedefs.cc", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Frequirements%2Ftypedefs.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,9 +28,9 @@\n void test01()\n {\n   // Check for required typedefs\n-  typedef std::has_nothrow_copy_constructor<int>     test_type;\n-  typedef test_type::value_type               value_type;\n-  typedef test_type::type                     type;\n-  typedef test_type::type::value_type         type_value_type;\n-  typedef test_type::type::type               type_type;\n+  typedef std::is_nothrow_copy_constructible<int>  test_type;\n+  typedef test_type::value_type                    value_type;\n+  typedef test_type::type                          type;\n+  typedef test_type::type::value_type              type_value_type;\n+  typedef test_type::type::type                    type_type;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/has_nothrow_copy_constructor/requirements/typedefs.cc"}, {"sha": "2c279967cc1eff3c1e503ddd9184968a1bab97bc", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_copy_constructible/value.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_copy_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_nothrow_copy_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, float>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, EnumType>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int*>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   int (ClassType::*) (int)>(true)) );\n+\n+  VERIFY( (test_property<is_nothrow_copy_constructible,\n+\t   NoexceptCopyConsClass>(true)) );\n+  VERIFY( (test_property<is_nothrow_copy_constructible,\n+\t   const NoexceptCopyConsClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_nothrow_copy_constructible, void>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int[2]>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int[]>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, float[][3]>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   EnumType[2][3][4]>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible, int*[3]>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   int (ClassType::*[2][3])>(false)) );\n+  VERIFY( (test_category<is_nothrow_copy_constructible,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+\n+  VERIFY( (test_property<is_nothrow_copy_constructible,\n+\t   volatile NoexceptCopyConsClass>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_constructible,\n+\t   ThrowCopyConsClass>(false)) );\n+  VERIFY( (test_property<is_nothrow_copy_constructible,\n+\t   ExceptCopyConsClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2c7e2df5e5e69e748d710db3e238ed4aee0bcf0c", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_default_constructible/requirements/explicit_instantiation.cc", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -2,7 +2,7 @@\n // { dg-do compile }\n // 2007-04-30 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,13 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // NB: This file is for testing type_traits with NO OTHER INCLUDES.\n \n #include <type_traits>\n \n namespace std\n {\n   typedef short test_type;\n-  template struct has_nothrow_default_constructor<test_type>;\n+  template struct is_nothrow_default_constructible<test_type>;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/requirements/explicit_instantiation.cc"}, {"sha": "0c0fd6426d04f57ff1bc9a945d480b9fcddd280c", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_default_constructible/requirements/typedefs.cc", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Frequirements%2Ftypedefs.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,9 +28,9 @@\n void test01()\n {\n   // Check for required typedefs\n-  typedef std::has_nothrow_default_constructor<int>    test_type;\n-  typedef test_type::value_type               value_type;\n-  typedef test_type::type                     type;\n-  typedef test_type::type::value_type         type_value_type;\n-  typedef test_type::type::type               type_type;\n+  typedef std::is_nothrow_default_constructible<int>  test_type;\n+  typedef test_type::value_type                       value_type;\n+  typedef test_type::type                             type;\n+  typedef test_type::type::value_type                 type_value_type;\n+  typedef test_type::type::type                       type_type;\n }", "previous_filename": "libstdc++-v3/testsuite/20_util/has_nothrow_default_constructor/requirements/typedefs.cc"}, {"sha": "d806cf1cf03844c1801bdc93d2dbbf070f06aced", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_default_constructible/value.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_default_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2004-12-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2011\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_nothrow_default_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.  \n+  VERIFY( (test_category<is_nothrow_default_constructible, int>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, float>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, EnumType>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, int*>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, int[2]>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, int*[3]>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, ClassType>(true)) );\n+\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   NoexceptDefaultClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_nothrow_default_constructible, void>(false)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible, int[]>(false)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   float[][3]>(false)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   ThrowDefaultClass>(false)) );\n+  VERIFY( (test_category<is_nothrow_default_constructible,\n+\t   ExceptDefaultClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bca081b2302ebd43a43d8be89a674dfb5fe3f93b", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_nothrow_move_constructible<test_type>;\n+}"}, {"sha": "13a0e3ee8d40bd2976443c82cca673edb4822d03", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_constructible/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Frequirements%2Ftypedefs.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_nothrow_move_constructible<int>  test_type;\n+  typedef test_type::value_type                    value_type;\n+  typedef test_type::type                          type;\n+  typedef test_type::type::value_type              type_value_type;\n+  typedef test_type::type::type                    type_type;\n+}"}, {"sha": "b154f787a3b0033938a85e299475b3074f0e4900", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_move_constructible/value.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_move_constructible%2Fvalue.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_nothrow_move_constructible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_nothrow_move_constructible, int>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, float>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, EnumType>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, int*>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   int (ClassType::*) (int)>(true)) );\n+\n+  VERIFY( (test_property<is_nothrow_move_constructible,\n+\t   NoexceptMoveConsClass>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_nothrow_move_constructible, void>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, int[2]>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, int[]>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, float[][3]>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   EnumType[2][3][4]>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible, int*[3]>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   int (ClassType::*[2][3])>(false)) );\n+  VERIFY( (test_category<is_nothrow_move_constructible,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+\n+  VERIFY( (test_property<is_nothrow_move_constructible,\n+\t   const NoexceptMoveConsClass>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_constructible,\n+\t   volatile NoexceptMoveConsClass>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_constructible,\n+\t   ThrowMoveConsClass>(false)) );\n+  VERIFY( (test_property<is_nothrow_move_constructible,\n+\t   ExceptMoveConsClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "871bbe571e7df8c92db6e7f30f366068ee028ee0", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1302 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1266 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1389 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1353 }"}, {"sha": "edcce7cf0f52a475a91b17b4764701e5c33a9268", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1226 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1190 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1313 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1277 }"}, {"sha": "9265bc412164b87a6cfb5b3dcb2a5c0b9f248641", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cee9bdb7b5975151802bd805ba720f540dec8d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=65cee9bdb7b5975151802bd805ba720f540dec8d", "patch": "@@ -145,7 +145,22 @@ namespace __gnu_test\n     ThrowExplicitClass(double&, int&, double&) throw(int);\n   };\n \n+  struct ThrowDefaultClass\n+  {\n+    ThrowDefaultClass() throw(int);\n+  };\n+\n+  struct ThrowCopyConsClass\n+  {\n+    ThrowCopyConsClass(const ThrowCopyConsClass&) throw(int);\n+  };\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  struct ThrowMoveConsClass\n+  {\n+    ThrowMoveConsClass(ThrowMoveConsClass&&) throw(int);\n+  };\n+\n   struct NoexceptExplicitClass\n   {\n     NoexceptExplicitClass(double&) noexcept(true);\n@@ -159,6 +174,36 @@ namespace __gnu_test\n     explicit ExceptExplicitClass(int&) noexcept(false);\n     ExceptExplicitClass(double&, int&, double&) noexcept(false);\n   };\n+\n+  struct NoexceptDefaultClass\n+  {\n+    NoexceptDefaultClass() noexcept(true);\n+  };\n+\n+  struct ExceptDefaultClass\n+  {\n+    ExceptDefaultClass() noexcept(false);\n+  };\n+\n+  struct NoexceptCopyConsClass\n+  {\n+    NoexceptCopyConsClass(const NoexceptCopyConsClass&) noexcept(true);\n+  };\n+\n+  struct ExceptCopyConsClass\n+  {\n+    ExceptCopyConsClass(const ExceptCopyConsClass&) noexcept(false);\n+  };\n+\n+  struct NoexceptMoveConsClass\n+  {\n+    NoexceptMoveConsClass(NoexceptMoveConsClass&&) noexcept(true);\n+  };\n+\n+  struct ExceptMoveConsClass\n+  {\n+    ExceptMoveConsClass(ExceptMoveConsClass&&) noexcept(false);\n+  };\n #endif\n \n   struct NType   // neither trivial nor standard-layout"}]}