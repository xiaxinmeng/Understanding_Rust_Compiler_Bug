{"sha": "ece3f6639db4f74c38080858ff7629695635c284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlM2Y2NjM5ZGI0Zjc0YzM4MDgwODU4ZmY3NjI5Njk1NjM1YzI4NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-06-20T06:03:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-06-20T06:03:16Z"}, "message": "arith.c (hollerith2representation): Fix for -Wc++-compat.\n\n\t* arith.c (hollerith2representation): Fix for -Wc++-compat.\n\t* array.c (gfc_get_constructor): Likewise.\n\t* decl.c (gfc_get_data_variable, gfc_get_data_value, gfc_get_data,\n\tcreate_enum_history, gfc_match_final_decl): Likewise.\n\t* error.c (error_char): Likewise.\n\t* expr.c (gfc_get_expr, gfc_copy_expr): Likewise.\n\t* gfortran.h (gfc_get_charlen, gfc_get_array_spec,\n\tgfc_get_component, gfc_get_formal_arglist, gfc_get_actual_arglist,\n\tgfc_get_namelist, gfc_get_omp_clauses, gfc_get_interface,\n\tgfc_get_common_head, gfc_get_dt_list, gfc_get_array_ref,\n\tgfc_get_ref, gfc_get_equiv, gfc_get_case, gfc_get_iterator,\n\tgfc_get_alloc, gfc_get_wide_string): Likewise.\n\t* interface.c (count_types_test): Likewise.\n\t* intrinsic.c (add_char_conversions, gfc_intrinsic_init_1):\n\tLikewise.\n\t* io.c (gfc_match_open, gfc_match_close, match_filepos, match_io,\n\tgfc_match_inquire, gfc_match_wait): Likewise.\n\t* match.c (gfc_match, match_forall_iterator): Likewise.\n\t* module.c (gfc_get_pointer_info, gfc_get_use_rename, add_fixup,\n\tadd_true_name, parse_string, write_atom, quote_string,\n\tmio_symtree_ref, mio_gmp_real, write_common_0): Likewise.\n\t* options.c (gfc_post_options): Likewise.\n\t* primary.c (match_integer_constant, match_hollerith_constant,\n\tmatch_boz_constant, match_real_constant,\n\tgfc_get_structure_ctor_component, gfc_match_structure_constructor): Likewise.\n\t* scanner.c (gfc_widechar_to_char, add_path_to_list,\n\tadd_file_change, load_line, get_file, preprocessor_line,\n\tload_file, unescape_filename, gfc_read_orig_filename): Likewise.\n\t* simplify.c (gfc_simplify_ibits, gfc_simplify_ishft,\n\tgfc_simplify_ishftc): Likewise.\n\t* symbol.c (gfc_get_st_label, gfc_get_namespace, gfc_new_symtree,\n\tgfc_get_uop, gfc_new_symbol, save_symbol_data, gfc_get_gsymbol):\n\tLikewise.\n\t* target-memory.c (gfc_target_interpret_expr): Likewise.\n\t* trans-const.c (gfc_build_wide_string_const): Likewise.\n\t* trans-expr.c (gfc_add_interface_mapping): Likewise.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_conversion,\n\tgfc_conv_intrinsic_int, gfc_conv_intrinsic_lib_function,\n\tgfc_conv_intrinsic_cmplx, gfc_conv_intrinsic_ctime,\n\tgfc_conv_intrinsic_fdate, gfc_conv_intrinsic_ttynam,\n\tgfc_conv_intrinsic_minmax, gfc_conv_intrinsic_minmax_char,\n\tgfc_conv_intrinsic_ishftc, gfc_conv_intrinsic_index_scan_verify,\n\tgfc_conv_intrinsic_merge, gfc_conv_intrinsic_trim): Likewise.\n\t* trans.c (gfc_get_backend_locus): Likewise.\n\t* trans.h (gfc_get_ss): Likewise.\n\nFrom-SVN: r136982", "tree": {"sha": "e527f2cb222809ccd66862b763928d39fe46824c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e527f2cb222809ccd66862b763928d39fe46824c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece3f6639db4f74c38080858ff7629695635c284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece3f6639db4f74c38080858ff7629695635c284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece3f6639db4f74c38080858ff7629695635c284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece3f6639db4f74c38080858ff7629695635c284/comments", "author": null, "committer": null, "parents": [{"sha": "2d31e498bf5baf0ad8f3cc1dcea8a1f8a042b2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d31e498bf5baf0ad8f3cc1dcea8a1f8a042b2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d31e498bf5baf0ad8f3cc1dcea8a1f8a042b2cb"}], "stats": {"total": 263, "additions": 154, "deletions": 109}, "files": [{"sha": "bc069651d5bc674a397237750bab3c6692b116d8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1,3 +1,51 @@\n+2008-06-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arith.c (hollerith2representation): Fix for -Wc++-compat.\n+\t* array.c (gfc_get_constructor): Likewise.\n+\t* decl.c (gfc_get_data_variable, gfc_get_data_value, gfc_get_data,\n+\tcreate_enum_history, gfc_match_final_decl): Likewise.\n+\t* error.c (error_char): Likewise.\n+\t* expr.c (gfc_get_expr, gfc_copy_expr): Likewise.\n+\t* gfortran.h (gfc_get_charlen, gfc_get_array_spec,\n+\tgfc_get_component, gfc_get_formal_arglist, gfc_get_actual_arglist,\n+\tgfc_get_namelist, gfc_get_omp_clauses, gfc_get_interface,\n+\tgfc_get_common_head, gfc_get_dt_list, gfc_get_array_ref,\n+\tgfc_get_ref, gfc_get_equiv, gfc_get_case, gfc_get_iterator,\n+\tgfc_get_alloc, gfc_get_wide_string): Likewise.\n+\t* interface.c (count_types_test): Likewise.\n+\t* intrinsic.c (add_char_conversions, gfc_intrinsic_init_1):\n+\tLikewise.\n+\t* io.c (gfc_match_open, gfc_match_close, match_filepos, match_io,\n+\tgfc_match_inquire, gfc_match_wait): Likewise.\n+\t* match.c (gfc_match, match_forall_iterator): Likewise.\n+\t* module.c (gfc_get_pointer_info, gfc_get_use_rename, add_fixup,\n+\tadd_true_name, parse_string, write_atom, quote_string,\n+\tmio_symtree_ref, mio_gmp_real, write_common_0): Likewise.\n+\t* options.c (gfc_post_options): Likewise.\n+\t* primary.c (match_integer_constant, match_hollerith_constant,\n+\tmatch_boz_constant, match_real_constant,\n+\tgfc_get_structure_ctor_component, gfc_match_structure_constructor): Likewise.\n+\t* scanner.c (gfc_widechar_to_char, add_path_to_list,\n+\tadd_file_change, load_line, get_file, preprocessor_line,\n+\tload_file, unescape_filename, gfc_read_orig_filename): Likewise.\n+\t* simplify.c (gfc_simplify_ibits, gfc_simplify_ishft,\n+\tgfc_simplify_ishftc): Likewise.\n+\t* symbol.c (gfc_get_st_label, gfc_get_namespace, gfc_new_symtree,\n+\tgfc_get_uop, gfc_new_symbol, save_symbol_data, gfc_get_gsymbol):\n+\tLikewise.\n+\t* target-memory.c (gfc_target_interpret_expr): Likewise.\n+\t* trans-const.c (gfc_build_wide_string_const): Likewise.\n+\t* trans-expr.c (gfc_add_interface_mapping): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_conversion,\n+\tgfc_conv_intrinsic_int, gfc_conv_intrinsic_lib_function,\n+\tgfc_conv_intrinsic_cmplx, gfc_conv_intrinsic_ctime,\n+\tgfc_conv_intrinsic_fdate, gfc_conv_intrinsic_ttynam,\n+\tgfc_conv_intrinsic_minmax, gfc_conv_intrinsic_minmax_char,\n+\tgfc_conv_intrinsic_ishftc, gfc_conv_intrinsic_index_scan_verify,\n+\tgfc_conv_intrinsic_merge, gfc_conv_intrinsic_trim): Likewise.\n+\t* trans.c (gfc_get_backend_locus): Likewise.\n+\t* trans.h (gfc_get_ss): Likewise.\n+\n 2008-06-18  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/36517, fortran/36492"}, {"sha": "bd3214584ddf8b0ad66dd177367e8a6d8fa60b9e", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -2413,7 +2413,7 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n \t\t   &src->where, gfc_typename(&result->ts));\n     }\n \n-  result->representation.string = gfc_getmem (result_len + 1);\n+  result->representation.string = XCNEWVEC (char, result_len + 1);\n   memcpy (result->representation.string, src->representation.string,\n \t  MIN (result_len, src_len));\n "}, {"sha": "c6bb5e857b9ae69f73772784a308c03bb1a8af3c", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -678,7 +678,7 @@ gfc_get_constructor (void)\n {\n   gfc_constructor *c;\n \n-  c = gfc_getmem (sizeof(gfc_constructor));\n+  c = XCNEW (gfc_constructor);\n   c->expr = NULL;\n   c->iterator = NULL;\n   c->next = NULL;"}, {"sha": "869ece6c3f67a239b07386a2d366033b311fba29", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -28,9 +28,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Macros to access allocate memory for gfc_data_variable,\n    gfc_data_value and gfc_data.  */\n-#define gfc_get_data_variable() gfc_getmem (sizeof (gfc_data_variable))\n-#define gfc_get_data_value() gfc_getmem (sizeof (gfc_data_value))\n-#define gfc_get_data() gfc_getmem( sizeof (gfc_data))\n+#define gfc_get_data_variable() XCNEW (gfc_data_variable)\n+#define gfc_get_data_value() XCNEW (gfc_data_value)\n+#define gfc_get_data() XCNEW (gfc_data)\n \n \n /* This flag is set if an old-style length selector is matched\n@@ -1140,7 +1140,7 @@ create_enum_history (gfc_symbol *sym, gfc_expr *init)\n   enumerator_history *new_enum_history;\n   gcc_assert (sym != NULL && init != NULL);\n \n-  new_enum_history = gfc_getmem (sizeof (enumerator_history));\n+  new_enum_history = XCNEW (enumerator_history);\n \n   new_enum_history->sym = sym;\n   new_enum_history->initializer = init;\n@@ -6625,7 +6625,7 @@ gfc_match_final_decl (void)\n       /* Add this symbol to the list of finalizers.  */\n       gcc_assert (gfc_current_block ()->f2k_derived);\n       ++sym->refs;\n-      f = gfc_getmem (sizeof (gfc_finalizer));     \n+      f = XCNEW (gfc_finalizer);\n       f->procedure = sym;\n       f->where = gfc_current_locus;\n       f->next = gfc_current_block ()->f2k_derived->finalizers;"}, {"sha": "4ef22d0cbc27440642852f7e8dd72c37081c9e52", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -70,8 +70,8 @@ error_char (char c)\n \t{\n \t  cur_error_buffer->allocated = cur_error_buffer->allocated\n \t\t\t\t      ? cur_error_buffer->allocated * 2 : 1000;\n-\t  cur_error_buffer->message = xrealloc (cur_error_buffer->message,\n-\t\t\t\t\t\tcur_error_buffer->allocated);\n+\t  cur_error_buffer->message = XRESIZEVEC (char, cur_error_buffer->message,\n+\t\t\t\t\t\t  cur_error_buffer->allocated);\n \t}\n       cur_error_buffer->message[cur_error_buffer->index++] = c;\n     }\n@@ -87,7 +87,7 @@ error_char (char c)\n \t  if (index + 1 >= allocated)\n \t    {\n \t      allocated = allocated ? allocated * 2 : 1000;\n-\t      line = xrealloc (line, allocated);\n+\t      line = XRESIZEVEC (char, line, allocated);\n \t    }\n \t  line[index++] = c;\n \t  if (c == '\\n')"}, {"sha": "ace09de434753caf3579e1ee17d1a99ed39bacb1", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -33,7 +33,7 @@ gfc_get_expr (void)\n {\n   gfc_expr *e;\n \n-  e = gfc_getmem (sizeof (gfc_expr));\n+  e = XCNEW (gfc_expr);\n   gfc_clear_ts (&e->ts);\n   e->shape = NULL;\n   e->ref = NULL;\n@@ -414,7 +414,7 @@ gfc_copy_expr (gfc_expr *p)\n       /* Copy target representation, if it exists.  */\n       if (p->representation.string)\n \t{\n-\t  c = gfc_getmem (p->representation.length + 1);\n+\t  c = XCNEWVEC (char, p->representation.length + 1);\n \t  q->representation.string = c;\n \t  memcpy (c, p->representation.string, (p->representation.length + 1));\n \t}"}, {"sha": "5d025db869b6c6d3c402d301862ea01c0d400a26", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -792,7 +792,7 @@ typedef struct gfc_charlen\n }\n gfc_charlen;\n \n-#define gfc_get_charlen() gfc_getmem(sizeof(gfc_charlen))\n+#define gfc_get_charlen() XCNEW (gfc_charlen)\n \n /* Type specification structure.  FIXME: derived and cl could be union???  */\n typedef struct\n@@ -824,7 +824,7 @@ typedef struct\n }\n gfc_array_spec;\n \n-#define gfc_get_array_spec() gfc_getmem(sizeof(gfc_array_spec))\n+#define gfc_get_array_spec() XCNEW (gfc_array_spec)\n \n \n /* Components of derived types.  */\n@@ -844,7 +844,7 @@ typedef struct gfc_component\n }\n gfc_component;\n \n-#define gfc_get_component() gfc_getmem(sizeof(gfc_component))\n+#define gfc_get_component() XCNEW (gfc_component)\n \n /* Formal argument lists are lists of symbols.  */\n typedef struct gfc_formal_arglist\n@@ -856,7 +856,7 @@ typedef struct gfc_formal_arglist\n }\n gfc_formal_arglist;\n \n-#define gfc_get_formal_arglist() gfc_getmem(sizeof(gfc_formal_arglist))\n+#define gfc_get_formal_arglist() XCNEW (gfc_formal_arglist)\n \n \n /* The gfc_actual_arglist structure is for actual arguments.  */\n@@ -876,7 +876,7 @@ typedef struct gfc_actual_arglist\n }\n gfc_actual_arglist;\n \n-#define gfc_get_actual_arglist() gfc_getmem(sizeof(gfc_actual_arglist))\n+#define gfc_get_actual_arglist() XCNEW (gfc_actual_arglist)\n \n \n /* Because a symbol can belong to multiple namelists, they must be\n@@ -888,7 +888,7 @@ typedef struct gfc_namelist\n }\n gfc_namelist;\n \n-#define gfc_get_namelist() gfc_getmem(sizeof(gfc_namelist))\n+#define gfc_get_namelist() XCNEW (gfc_namelist)\n \n enum\n {\n@@ -945,7 +945,7 @@ typedef struct gfc_omp_clauses\n }\n gfc_omp_clauses;\n \n-#define gfc_get_omp_clauses() gfc_getmem(sizeof(gfc_omp_clauses))\n+#define gfc_get_omp_clauses() XCNEW (gfc_omp_clauses)\n \n \n /* The gfc_st_label structure is a doubly linked list attached to a\n@@ -978,7 +978,7 @@ typedef struct gfc_interface\n }\n gfc_interface;\n \n-#define gfc_get_interface() gfc_getmem(sizeof(gfc_interface))\n+#define gfc_get_interface() XCNEW (gfc_interface)\n \n \n /* User operator nodes.  These are like stripped down symbols.  */\n@@ -1092,7 +1092,7 @@ typedef struct gfc_common_head\n }\n gfc_common_head;\n \n-#define gfc_get_common_head() gfc_getmem(sizeof(gfc_common_head))\n+#define gfc_get_common_head() XCNEW (gfc_common_head)\n \n \n /* A list of all the alternate entry points for a procedure.  */\n@@ -1142,7 +1142,7 @@ typedef struct gfc_dt_list\n }\n gfc_dt_list;\n \n-#define gfc_get_dt_list() gfc_getmem(sizeof(gfc_dt_list))\n+#define gfc_get_dt_list() XCNEW (gfc_dt_list)\n \n   /* A list of all derived types.  */\n   extern gfc_dt_list *gfc_derived_types;\n@@ -1277,7 +1277,7 @@ typedef struct gfc_array_ref\n }\n gfc_array_ref;\n \n-#define gfc_get_array_ref() gfc_getmem(sizeof(gfc_array_ref))\n+#define gfc_get_array_ref() XCNEW (gfc_array_ref)\n \n \n /* Component reference nodes.  A variable is stored as an expression\n@@ -1319,7 +1319,7 @@ typedef struct gfc_ref\n }\n gfc_ref;\n \n-#define gfc_get_ref() gfc_getmem(sizeof(gfc_ref))\n+#define gfc_get_ref() XCNEW (gfc_ref)\n \n \n /* Structures representing intrinsic symbols and their arguments lists.  */\n@@ -1599,7 +1599,7 @@ typedef struct gfc_equiv\n }\n gfc_equiv;\n \n-#define gfc_get_equiv() gfc_getmem(sizeof(gfc_equiv))\n+#define gfc_get_equiv() XCNEW (gfc_equiv)\n \n /* Holds a single equivalence member after processing.  */\n typedef struct gfc_equiv_info\n@@ -1651,7 +1651,7 @@ typedef struct gfc_case\n }\n gfc_case;\n \n-#define gfc_get_case() gfc_getmem(sizeof(gfc_case))\n+#define gfc_get_case() XCNEW (gfc_case)\n \n \n typedef struct\n@@ -1660,7 +1660,7 @@ typedef struct\n }\n gfc_iterator;\n \n-#define gfc_get_iterator() gfc_getmem(sizeof(gfc_iterator))\n+#define gfc_get_iterator() XCNEW (gfc_iterator)\n \n \n /* Allocation structure for ALLOCATE, DEALLOCATE and NULLIFY statements.  */\n@@ -1672,7 +1672,7 @@ typedef struct gfc_alloc\n }\n gfc_alloc;\n \n-#define gfc_get_alloc() gfc_getmem(sizeof(gfc_alloc))\n+#define gfc_get_alloc() XCNEW (gfc_alloc)\n \n \n typedef struct\n@@ -1997,7 +1997,7 @@ gfc_char_t *gfc_wide_memset (gfc_char_t *, gfc_char_t, size_t);\n char *gfc_widechar_to_char (const gfc_char_t *, int);\n gfc_char_t *gfc_char_to_widechar (const char *);\n \n-#define gfc_get_wide_string(n) gfc_getmem((n) * sizeof(gfc_char_t))\n+#define gfc_get_wide_string(n) XCNEWVEC (gfc_char_t, n)\n \n void gfc_skip_comments (void);\n gfc_char_t gfc_next_char_literal (int);"}, {"sha": "724d662aaa814f140bc3b8e224e9fd4e9fa3b82c", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -795,7 +795,7 @@ count_types_test (gfc_formal_arglist *f1, gfc_formal_arglist *f2)\n \n   /* Build an array of integers that gives the same integer to\n      arguments of the same type/rank.  */\n-  arg = gfc_getmem (n1 * sizeof (arginfo));\n+  arg = XCNEWVEC (arginfo, n1);\n \n   f = f1;\n   for (i = 0; i < n1; i++, f = f->next)"}, {"sha": "df412757823e3f82a46cdb5fc9ed2f391871b6ef", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -2853,7 +2853,7 @@ add_char_conversions (void)\n \tncharconv++;\n \n   /* Allocate memory.  */\n-  char_conversions = gfc_getmem (sizeof (gfc_intrinsic_sym) * ncharconv);\n+  char_conversions = XCNEWVEC (gfc_intrinsic_sym, ncharconv);\n \n   /* Add the conversions themselves.  */\n   n = 0;\n@@ -2905,13 +2905,14 @@ gfc_intrinsic_init_1 (void)\n   sizing = SZ_CONVS;\n   add_conversions ();\n \n-  functions = gfc_getmem (sizeof (gfc_intrinsic_sym) * (nfunc + nsub)\n-\t\t\t  + sizeof (gfc_intrinsic_arg) * nargs);\n+  functions = XCNEWVAR (struct gfc_intrinsic_sym,\n+\t\t\tsizeof (gfc_intrinsic_sym) * (nfunc + nsub)\n+\t\t\t+ sizeof (gfc_intrinsic_arg) * nargs);\n \n   next_sym = functions;\n   subroutines = functions + nfunc;\n \n-  conversion = gfc_getmem (sizeof (gfc_intrinsic_sym) * nconv);\n+  conversion = XCNEWVEC (gfc_intrinsic_sym, nconv);\n \n   next_arg = ((gfc_intrinsic_arg *) (subroutines + nsub)) - 1;\n "}, {"sha": "3494e8e863fc2c016ce99a557fea7a262c822315", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1537,7 +1537,7 @@ gfc_match_open (void)\n   if (m == MATCH_NO)\n     return m;\n \n-  open = gfc_getmem (sizeof (gfc_open));\n+  open = XCNEW (gfc_open);\n \n   m = match_open_element (open);\n \n@@ -1927,7 +1927,7 @@ gfc_match_close (void)\n   if (m == MATCH_NO)\n     return m;\n \n-  close = gfc_getmem (sizeof (gfc_close));\n+  close = XCNEW (gfc_close);\n \n   m = match_close_element (close);\n \n@@ -2053,7 +2053,7 @@ match_filepos (gfc_statement st, gfc_exec_op op)\n   gfc_filepos *fp;\n   match m;\n \n-  fp = gfc_getmem (sizeof (gfc_filepos));\n+  fp = XCNEW (gfc_filepos);\n \n   if (gfc_match_char ('(') == MATCH_NO)\n     {\n@@ -3218,7 +3218,7 @@ match_io (io_kind k)\n \n   where = gfc_current_locus;\n   comma_flag = 0;\n-  current_dt = dt = gfc_getmem (sizeof (gfc_dt));\n+  current_dt = dt = XCNEW (gfc_dt);\n   m = gfc_match_char ('(');\n   if (m == MATCH_NO)\n     {\n@@ -3569,7 +3569,7 @@ gfc_match_inquire (void)\n   if (m == MATCH_NO)\n     return m;\n \n-  inquire = gfc_getmem (sizeof (gfc_inquire));\n+  inquire = XCNEW (gfc_inquire);\n \n   loc = gfc_current_locus;\n \n@@ -3790,7 +3790,7 @@ gfc_match_wait (void)\n   if (m == MATCH_NO)\n     return m;\n \n-  wait = gfc_getmem (sizeof (gfc_wait));\n+  wait = XCNEW (gfc_wait);\n \n   loc = gfc_current_locus;\n "}, {"sha": "6f5765f1784c9653ecfbada5a592a13f9511bde3", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1222,7 +1222,7 @@ gfc_match (const char *target, ...)\n \t    case 'e':\n \t    case 'v':\n \t      vp = va_arg (argp, void **);\n-\t      gfc_free_expr (*vp);\n+\t      gfc_free_expr ((struct gfc_expr *)*vp);\n \t      *vp = NULL;\n \t      break;\n \t    }\n@@ -3770,7 +3770,7 @@ match_forall_iterator (gfc_forall_iterator **result)\n   match m;\n \n   where = gfc_current_locus;\n-  iter = gfc_getmem (sizeof (gfc_forall_iterator));\n+  iter = XCNEW (gfc_forall_iterator);\n \n   m = gfc_match_expr (&iter->var);\n   if (m != MATCH_YES)"}, {"sha": "67b09c767e9ac8fc4ba24c2c4ffcc4b89376e69e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -159,7 +159,7 @@ typedef struct pointer_info\n }\n pointer_info;\n \n-#define gfc_get_pointer_info() gfc_getmem(sizeof(pointer_info))\n+#define gfc_get_pointer_info() XCNEW (pointer_info)\n \n \n /* Lists of rename info for the USE statement.  */\n@@ -174,7 +174,7 @@ typedef struct gfc_use_rename\n }\n gfc_use_rename;\n \n-#define gfc_get_use_rename() gfc_getmem(sizeof(gfc_use_rename))\n+#define gfc_get_use_rename() XCNEW (gfc_use_rename);\n \n /* Local variables */\n \n@@ -460,17 +460,17 @@ add_fixup (int integer, void *gp)\n \n   if (p->integer == 0 || p->u.pointer != NULL)\n     {\n-      cp = gp;\n-      *cp = p->u.pointer;\n+      cp = (char **) gp;\n+      *cp = (char *) p->u.pointer;\n     }\n   else\n     {\n-      f = gfc_getmem (sizeof (fixup_t));\n+      f = XCNEW (fixup_t);\n \n       f->next = p->fixup;\n       p->fixup = f;\n \n-      f->pointer = gp;\n+      f->pointer = (void **) gp;\n     }\n \n   return p;\n@@ -839,7 +839,7 @@ add_true_name (gfc_symbol *sym)\n {\n   true_name *t;\n \n-  t = gfc_getmem (sizeof (true_name));\n+  t = XCNEW (true_name);\n   t->sym = sym;\n \n   gfc_insert_bbt (&true_name_root, t, compare_true_names);\n@@ -1028,7 +1028,7 @@ parse_string (void)\n \n   set_module_locus (&start);\n \n-  atom_string = p = gfc_getmem (len + 1);\n+  atom_string = p = XCNEWVEC (char, len + 1);\n \n   for (; len > 0; len--)\n     {\n@@ -1324,7 +1324,7 @@ write_atom (atom_type atom, const void *v)\n     {\n     case ATOM_STRING:\n     case ATOM_NAME:\n-      p = v;\n+      p = (const char *) v;\n       break;\n \n     case ATOM_LPAREN:\n@@ -1496,7 +1496,7 @@ quote_string (const gfc_char_t *s, const size_t slength)\n \tlen++;\n     }\n \n-  q = res = gfc_getmem (len + 1);\n+  q = res = XCNEWVEC (char, len + 1);\n   for (p = s, i = 0; i < slength; p++, i++)\n     {\n       if (*p == '\\\\')\n@@ -2455,7 +2455,7 @@ mio_symtree_ref (gfc_symtree **stp)\n \t}\n       else\n \t{\n-\t  f = gfc_getmem (sizeof (fixup_t));\n+\t  f = XCNEW (fixup_t);\n \n \t  f->next = p->u.rsym.stfixup;\n \t  p->u.rsym.stfixup = f;\n@@ -2674,7 +2674,7 @@ mio_gmp_real (mpfr_t *real)\n \t  return;\n \t}\n \n-      atom_string = gfc_getmem (strlen (p) + 20);\n+      atom_string = XCNEWVEC (char, strlen (p) + 20);\n \n       sprintf (atom_string, \"0.%s@%ld\", p, exponent);\n \n@@ -4126,7 +4126,7 @@ write_common_0 (gfc_symtree *st)\n       mio_rparen ();\n \n       /* Record that we have written this common.  */\n-      w = gfc_getmem (sizeof (struct written_common));\n+      w = XCNEW (struct written_common);\n       w->name = p->name;\n       w->label = label;\n       gfc_insert_bbt (&written_commons, w, compare_written_commons);"}, {"sha": "8480364bc52eca8da1d30345446c0caaa9594bc5", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -254,7 +254,7 @@ gfc_post_options (const char **pfilename)\n \n   if (i != 0)\n     {\n-      source_path = alloca (i + 1);\n+      source_path = (char *) alloca (i + 1);\n       memcpy (source_path, canon_source_file, i);\n       source_path[i] = 0;\n       gfc_add_include_path (source_path, true);"}, {"sha": "d7236e1be01202160080e642bd2af83604a76706", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -196,7 +196,7 @@ match_integer_constant (gfc_expr **result, int signflag)\n   if (length == -1)\n     return MATCH_NO;\n \n-  buffer = alloca (length + 1);\n+  buffer = (char *) alloca (length + 1);\n   memset (buffer, '\\0', length + 1);\n \n   gfc_gobble_whitespace ();\n@@ -276,7 +276,7 @@ match_hollerith_constant (gfc_expr **result)\n \t  e = gfc_constant_result (BT_HOLLERITH, gfc_default_character_kind,\n \t\t\t\t   &gfc_current_locus);\n \n-\t  e->representation.string = gfc_getmem (num + 1);\n+\t  e->representation.string = XCNEWVEC (char, num + 1);\n \n \t  for (i = 0; i < num; i++)\n \t    {\n@@ -411,7 +411,7 @@ match_boz_constant (gfc_expr **result)\n \n   gfc_current_locus = old_loc;\n \n-  buffer = alloca (length + 1);\n+  buffer = (char *) alloca (length + 1);\n   memset (buffer, '\\0', length + 1);\n \n   match_digits (0, radix, buffer);\n@@ -562,7 +562,7 @@ match_real_constant (gfc_expr **result, int signflag)\n   gfc_current_locus = old_loc;\n   gfc_gobble_whitespace ();\n \n-  buffer = alloca (count + 1);\n+  buffer = (char *) alloca (count + 1);\n   memset (buffer, '\\0', count + 1);\n \n   p = buffer;\n@@ -1975,8 +1975,7 @@ typedef struct gfc_structure_ctor_component\n }\n gfc_structure_ctor_component;\n \n-#define gfc_get_structure_ctor_component() \\\n-  gfc_getmem(sizeof(gfc_structure_ctor_component))\n+#define gfc_get_structure_ctor_component() XCNEW (gfc_structure_ctor_component)\n \n static void\n gfc_free_structure_ctor_component (gfc_structure_ctor_component *comp)\n@@ -2023,7 +2022,7 @@ gfc_match_structure_constructor (gfc_symbol *sym, gfc_expr **result)\n \t      comp_tail->next = gfc_get_structure_ctor_component ();\n \t      comp_tail = comp_tail->next;\n \t    }\n-\t  comp_tail->name = gfc_getmem(GFC_MAX_SYMBOL_LEN + 1);\n+\t  comp_tail->name = XCNEWVEC (char, GFC_MAX_SYMBOL_LEN + 1);\n \t  comp_tail->val = NULL;\n \t  comp_tail->where = gfc_current_locus;\n "}, {"sha": "44e6d86bd4f669dbbfbb8ac855718ff67525ac9a", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -196,7 +196,7 @@ gfc_widechar_to_char (const gfc_char_t *s, int length)\n   /* Passing a negative length is used to indicate that length should be\n      calculated using gfc_wide_strlen().  */\n   len = (length >= 0 ? (size_t) length : gfc_wide_strlen (s));\n-  res = gfc_getmem (len + 1);\n+  res = XNEWVEC (char, len + 1);\n \n   for (i = 0; i < len; i++)\n     {\n@@ -319,19 +319,19 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n \n   dir = *list;\n   if (!dir)\n-    dir = *list = gfc_getmem (sizeof (gfc_directorylist));\n+    dir = *list = XCNEW (gfc_directorylist);\n   else\n     {\n       while (dir->next)\n \tdir = dir->next;\n \n-      dir->next = gfc_getmem (sizeof (gfc_directorylist));\n+      dir->next = XCNEW (gfc_directorylist);\n       dir = dir->next;\n     }\n \n   dir->next = NULL;\n   dir->use_for_modules = use_for_modules;\n-  dir->path = gfc_getmem (strlen (p) + 2);\n+  dir->path = XCNEWVEC (char, strlen (p) + 2);\n   strcpy (dir->path, p);\n   strcat (dir->path, \"/\");\t/* make '/' last character */\n }\n@@ -495,9 +495,8 @@ add_file_change (const char *filename, int line)\n \tfile_changes_allocated *= 2;\n       else\n \tfile_changes_allocated = 16;\n-      file_changes\n-\t= xrealloc (file_changes,\n-\t\t    file_changes_allocated * sizeof (*file_changes));\n+      file_changes = XRESIZEVEC (struct gfc_file_change, file_changes,\n+\t\t\t\t file_changes_allocated);\n     }\n   file_changes[file_changes_count].filename = filename;\n   file_changes[file_changes_count].lb = NULL;\n@@ -1451,7 +1450,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t      /* Reallocate line buffer to double size to hold the\n \t\toverlong line.  */\n \t      buflen = buflen * 2;\n-\t      *pbuf = xrealloc (*pbuf, (buflen + 1) * sizeof (gfc_char_t));\n+\t      *pbuf = XRESIZEVEC (gfc_char_t, *pbuf, (buflen + 1));\n \t      buffer = (*pbuf) + i;\n \t    }\n \t}\n@@ -1501,10 +1500,9 @@ get_file (const char *name, enum lc_reason reason ATTRIBUTE_UNUSED)\n {\n   gfc_file *f;\n \n-  f = gfc_getmem (sizeof (gfc_file));\n+  f = XCNEW (gfc_file);\n \n-  f->filename = gfc_getmem (strlen (name) + 1);\n-  strcpy (f->filename, name);\n+  f->filename = xstrdup (name);\n \n   f->next = file_head;\n   file_head = f;\n@@ -1655,8 +1653,7 @@ preprocessor_line (gfc_char_t *c)\n   if (strcmp (current_file->filename, filename) != 0)\n     {\n       gfc_free (current_file->filename);\n-      current_file->filename = gfc_getmem (strlen (filename) + 1);\n-      strcpy (current_file->filename, filename);\n+      current_file->filename = xstrdup (filename);\n     }\n \n   /* Set new line number.  */\n@@ -1881,8 +1878,8 @@ load_file (const char *filename, bool initial)\n \n       /* Add line.  */\n \n-      b = gfc_getmem (gfc_linebuf_header_size\n-\t\t      + (len + 1) * sizeof (gfc_char_t));\n+      b = (gfc_linebuf *) gfc_getmem (gfc_linebuf_header_size\n+\t\t\t\t      + (len + 1) * sizeof (gfc_char_t));\n \n       b->location\n \t= linemap_line_start (line_table, current_file->line++, 120);\n@@ -1973,7 +1970,7 @@ unescape_filename (const char *ptr)\n \n   /* Undo effects of cpp_quote_string.  */\n   s = ptr;\n-  d = gfc_getmem (p + 1 - ptr - unescape);\n+  d = XCNEWVEC (char, p + 1 - ptr - unescape);\n   ret = d;\n \n   while (s != p)\n@@ -2046,7 +2043,7 @@ gfc_read_orig_filename (const char *filename, const char **canon_source_file)\n \n   if (! IS_ABSOLUTE_PATH (filename))\n     {\n-      char *p = gfc_getmem (len + strlen (filename));\n+      char *p = XCNEWVEC (char, len + strlen (filename));\n \n       memcpy (p, dirname, len - 2);\n       p[len - 2] = '/';"}, {"sha": "c889dae14fa363068b36fd510c30ec0ef3578f13", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1595,7 +1595,7 @@ gfc_simplify_ibits (gfc_expr *x, gfc_expr *y, gfc_expr *z)\n   convert_mpz_to_unsigned (result->value.integer,\n \t\t\t   gfc_integer_kinds[k].bit_size);\n \n-  bits = gfc_getmem (bitsize * sizeof (int));\n+  bits = XCNEWVEC (int, bitsize);\n \n   for (i = 0; i < bitsize; i++)\n     bits[i] = 0;\n@@ -2030,7 +2030,7 @@ gfc_simplify_ishft (gfc_expr *e, gfc_expr *s)\n       return range_check (result, \"ISHFT\");\n     }\n   \n-  bits = gfc_getmem (isize * sizeof (int));\n+  bits = XCNEWVEC (int, isize);\n \n   for (i = 0; i < isize; i++)\n     bits[i] = mpz_tstbit (e->value.integer, i);\n@@ -2134,7 +2134,7 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n \n   convert_mpz_to_unsigned (result->value.integer, isize);\n \n-  bits = gfc_getmem (ssize * sizeof (int));\n+  bits = XCNEWVEC (int, ssize);\n \n   for (i = 0; i < ssize; i++)\n     bits[i] = mpz_tstbit (e->value.integer, i);"}, {"sha": "ba5656b24d553475b23a09c01ed43cffe98230f6", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -48,7 +48,7 @@ gfc_get_code (void)\n {\n   gfc_code *c;\n \n-  c = gfc_getmem (sizeof (gfc_code));\n+  c = XCNEW (gfc_code);\n   c->loc = gfc_current_locus;\n   return c;\n }"}, {"sha": "cd181d4f0f1f5b3f40ae057f0c6eb6b8fb9a3df1", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1950,7 +1950,7 @@ gfc_get_st_label (int labelno)\n \tlp = lp->right;\n     }\n \n-  lp = gfc_getmem (sizeof (gfc_st_label));\n+  lp = XCNEW (gfc_st_label);\n \n   lp->value = labelno;\n   lp->defined = ST_LABEL_UNKNOWN;\n@@ -2116,7 +2116,7 @@ gfc_get_namespace (gfc_namespace *parent, int parent_types)\n   gfc_intrinsic_op in;\n   int i;\n \n-  ns = gfc_getmem (sizeof (gfc_namespace));\n+  ns = XCNEW (gfc_namespace);\n   ns->sym_root = NULL;\n   ns->uop_root = NULL;\n   ns->finalizers = NULL;\n@@ -2184,7 +2184,7 @@ gfc_new_symtree (gfc_symtree **root, const char *name)\n {\n   gfc_symtree *st;\n \n-  st = gfc_getmem (sizeof (gfc_symtree));\n+  st = XCNEW (gfc_symtree);\n   st->name = gfc_get_string (name);\n \n   gfc_insert_bbt (root, st, compare_symtree);\n@@ -2259,7 +2259,7 @@ gfc_get_uop (const char *name)\n \n   st = gfc_new_symtree (&gfc_current_ns->uop_root, name);\n \n-  uop = st->n.uop = gfc_getmem (sizeof (gfc_user_op));\n+  uop = st->n.uop = XCNEW (gfc_user_op);\n   uop->name = gfc_get_string (name);\n   uop->access = ACCESS_UNKNOWN;\n   uop->ns = gfc_current_ns;\n@@ -2321,7 +2321,7 @@ gfc_new_symbol (const char *name, gfc_namespace *ns)\n {\n   gfc_symbol *p;\n \n-  p = gfc_getmem (sizeof (gfc_symbol));\n+  p = XCNEW (gfc_symbol);\n \n   gfc_clear_ts (&p->ts);\n   gfc_clear_attr (&p->attr);\n@@ -2434,7 +2434,7 @@ save_symbol_data (gfc_symbol *sym)\n   if (sym->new || sym->old_symbol != NULL)\n     return;\n \n-  sym->old_symbol = gfc_getmem (sizeof (gfc_symbol));\n+  sym->old_symbol = XCNEW (gfc_symbol);\n   *(sym->old_symbol) = *sym;\n \n   sym->tlink = changed_syms;\n@@ -3197,7 +3197,7 @@ gfc_get_gsymbol (const char *name)\n   if (s != NULL)\n     return s;\n \n-  s = gfc_getmem (sizeof (gfc_gsymbol));\n+  s = XCNEW (gfc_gsymbol);\n   s->type = GSYM_UNKNOWN;\n   s->name = gfc_get_string (name);\n "}, {"sha": "40e595ba4043973143cd9e5ad6f2c443be443d29", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -527,7 +527,7 @@ gfc_target_interpret_expr (unsigned char *buffer, size_t buffer_size,\n   else\n     {\n       result->representation.string =\n-        gfc_getmem (result->representation.length + 1);\n+        (char *) gfc_getmem (result->representation.length + 1);\n       memcpy (result->representation.string, buffer,\n \t      result->representation.length);\n       result->representation.string[result->representation.length] = '\\0';"}, {"sha": "fd3d58f56b319c768cdcc60085f8dfa12e845f92", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -99,7 +99,7 @@ gfc_build_wide_string_const (int kind, int length, const gfc_char_t *string)\n   i = gfc_validate_kind (BT_CHARACTER, kind, false);\n   size = length * gfc_character_kinds[i].bit_size / 8;\n \n-  s = gfc_getmem (size);\n+  s = XCNEWVAR (char, size);\n   gfc_encode_character (kind, length, string, (unsigned char *) s, size);\n \n   str = build_string (size, s);"}, {"sha": "59a0a2d8eb78e27236b8a5e3ed28c2d30def5944", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -1593,7 +1593,7 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n   gcc_assert (new_symtree == root);\n \n   /* Create a dummy->actual mapping.  */\n-  sm = gfc_getmem (sizeof (*sm));\n+  sm = XCNEW (gfc_interface_sym_mapping);\n   sm->next = mapping->syms;\n   sm->old = sym;\n   sm->new = new_symtree;"}, {"sha": "31780240cd233437cf5005d21d4db38498007840", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -241,7 +241,7 @@ gfc_conv_intrinsic_conversion (gfc_se * se, gfc_expr * expr)\n   int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * nargs);\n+  args = (tree *) alloca (sizeof (tree) * nargs);\n \n   /* Evaluate all the arguments passed. Whilst we're only interested in the \n      first one here, there are other parts of the front-end that assume this \n@@ -514,7 +514,7 @@ gfc_conv_intrinsic_int (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n   int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * nargs);\n+  args = (tree *) alloca (sizeof (tree) * nargs);\n \n   /* Evaluate the argument, we process all arguments even though we only \n      use the first one for code generation purposes.  */\n@@ -736,7 +736,7 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n \n   /* Get the decl and generate the call.  */\n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n   fndecl = gfc_get_intrinsic_lib_fndecl (m, expr);\n@@ -1037,7 +1037,7 @@ gfc_conv_intrinsic_cmplx (gfc_se * se, gfc_expr * expr, int both)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n@@ -1333,7 +1333,7 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_get_int_type (8), \"len\");\n@@ -1371,7 +1371,7 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_get_int_type (4), \"len\");\n@@ -1411,7 +1411,7 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   var = gfc_create_var (pchar_type_node, \"pstr\");\n   len = gfc_create_var (gfc_get_int_type (4), \"len\");\n@@ -1465,7 +1465,7 @@ gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, int op)\n   unsigned int i, nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * nargs);\n+  args = (tree *) alloca (sizeof (tree) * nargs);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, nargs);\n   type = gfc_typenode_for_spec (&expr->ts);\n@@ -1536,7 +1536,7 @@ gfc_conv_intrinsic_minmax_char (gfc_se * se, gfc_expr * expr, int op)\n   unsigned int nargs;\n \n   nargs = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * (nargs + 4));\n+  args = (tree *) alloca (sizeof (tree) * (nargs + 4));\n   gfc_conv_intrinsic_function_args (se, expr, &args[4], nargs);\n \n   /* Create the result variables.  */\n@@ -2586,7 +2586,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n \n@@ -2751,7 +2751,7 @@ gfc_conv_intrinsic_index_scan_verify (gfc_se * se, gfc_expr * expr,\n   tree *args;\n   unsigned int num_args;\n \n-  args = alloca (sizeof (tree) * 5);\n+  args = (tree *) alloca (sizeof (tree) * 5);\n \n   /* Get number of arguments; characters count double due to the\n      string length argument. Kind= is not passed to the libary\n@@ -2836,7 +2836,7 @@ gfc_conv_intrinsic_merge (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr);\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n   if (expr->ts.type != BT_CHARACTER)\n@@ -3894,7 +3894,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   unsigned int num_args;\n \n   num_args = gfc_intrinsic_argument_list_length (expr) + 2;\n-  args = alloca (sizeof (tree) * num_args);\n+  args = (tree *) alloca (sizeof (tree) * num_args);\n \n   var = gfc_create_var (gfc_get_pchar_type (expr->ts.kind), \"pstr\");\n   addr = gfc_build_addr_expr (ppvoid_type_node, var);"}, {"sha": "5bd3005a2b335b86a05cf8b5f26449a1546c548c", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -933,7 +933,7 @@ gfc_add_block_to_block (stmtblock_t * block, stmtblock_t * append)\n void\n gfc_get_backend_locus (locus * loc)\n {\n-  loc->lb = gfc_getmem (sizeof (gfc_linebuf));    \n+  loc->lb = XCNEW (gfc_linebuf);\n   loc->lb->location = input_location;\n   loc->lb->file = gfc_current_backend_file;\n }"}, {"sha": "81c449e91a556ebc0e970e598279fcff07b8368f", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3f6639db4f74c38080858ff7629695635c284/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=ece3f6639db4f74c38080858ff7629695635c284", "patch": "@@ -206,7 +206,7 @@ typedef struct gfc_ss\n   unsigned useflags:2, where:1;\n }\n gfc_ss;\n-#define gfc_get_ss() gfc_getmem(sizeof(gfc_ss))\n+#define gfc_get_ss() XCNEW (gfc_ss)\n \n /* The contents of this aren't actually used.  A NULL SS chain indicates a\n    scalar expression, so this pointer is used to terminate SS chains.  */"}]}