{"sha": "a79683d5f0104b9da2d6104d4910bbfcb0c63604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5NjgzZDVmMDEwNGI5ZGEyZDYxMDRkNDkxMGJiZmNiMGM2MzYwNA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2015-08-19T02:48:48Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-08-19T02:48:48Z"}, "message": "remove more useless typedefs\n\ngcc/c-family/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* c-ada-spec.h, c-common.c, c-common.h, c-format.c, c-format.h,\n\tc-objc.h, c-ppoutput.c, c-pragma.c, c-pragma.h: Remove useless\n typedefs.\n\ngcc/c/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* c-aux-info.c, c-parser.c, c-tree.h: Remove useless typedefs.\n\ngcc/cp/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* call.c, class.c, cp-tree.h, decl.c, except.c, mangle.c,\n\tmethod.c, name-lookup.h, parser.c, parser.h, rtti.c,\n\tsemantics.c, typeck2.c: Remove useless typedefs.\n\ngcc/fortran/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* dependency.c, dependency.h, gfortran.h, io.c, module.c,\n\tparse.h, resolve.c, trans-types.h, trans.h: remove useless\ntypedefs.\n\ngcc/lto/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* lto.h: Remove useless typedefs.\n\ngcc/objc/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* objc-act.h, objc-next-runtime-abi-02.c, objc-runtime-hooks.h:\n\tRemove useless typedefs.\n\ngcc/ChangeLog:\n\n2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* bb-reorder.c, cfgloop.h, collect2.c, combine.c, dse.c,\n\tdwarf2cfi.c, gcse-common.h, genopinit.c, ggc-page.c, machmode.h,\n\tmcf.c, modulo-sched.c, omp-low.c, read-rtl.c, sched-rgn.c,\n\tsignop.h, tree-call-cdce.c, tree-dfa.c, tree-diagnostic.c,\n\ttree-inline.h, tree-scalar-evolution.c, tree-ssa-address.c,\n\ttree-ssa-loop-niter.c, tree-ssa-loop.h, tree-ssa-pre.c,\n\ttree-ssa-reassoc.c, tree-ssa-sccvn.h, tree-ssa-structalias.c,\n\ttree-ssa-uninit.c, tree-ssa.h, tree-vect-loop-manip.c,\n\ttree-vectorizer.h, tree-vrp.c, var-tracking.c: Remove useless\ntypedefs.\n\nFrom-SVN: r227001", "tree": {"sha": "f2dab2e9a051a54be5232b46ee4f1452e6db714b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2dab2e9a051a54be5232b46ee4f1452e6db714b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a79683d5f0104b9da2d6104d4910bbfcb0c63604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79683d5f0104b9da2d6104d4910bbfcb0c63604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79683d5f0104b9da2d6104d4910bbfcb0c63604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79683d5f0104b9da2d6104d4910bbfcb0c63604/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "506868500a53b9181d45596cc7e138dce2f97d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506868500a53b9181d45596cc7e138dce2f97d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506868500a53b9181d45596cc7e138dce2f97d9e"}], "stats": {"total": 870, "additions": 420, "deletions": 450}, "files": [{"sha": "32421c5dd30275673930e8615f0dc190456092cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,15 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* bb-reorder.c, cfgloop.h, collect2.c, combine.c, dse.c,\n+\tdwarf2cfi.c, gcse-common.h, genopinit.c, ggc-page.c, machmode.h,\n+\tmcf.c, modulo-sched.c, omp-low.c, read-rtl.c, sched-rgn.c,\n+\tsignop.h, tree-call-cdce.c, tree-dfa.c, tree-diagnostic.c,\n+\ttree-inline.h, tree-scalar-evolution.c, tree-ssa-address.c,\n+\ttree-ssa-loop-niter.c, tree-ssa-loop.h, tree-ssa-pre.c,\n+\ttree-ssa-reassoc.c, tree-ssa-sccvn.h, tree-ssa-structalias.c,\n+\ttree-ssa-uninit.c, tree-ssa.h, tree-vect-loop-manip.c,\n+\ttree-vectorizer.h, tree-vrp.c, var-tracking.c: Remove useless\n+\n 2015-08-18  trevor Saunders  <tbsaunde@tbsaunde.org>\n \n \t* bt-load.c, cgraph.h, dwarf2out.c, dwarf2out.h, final.c,"}, {"sha": "2110bd2e0d814c39fc0b792437ee76df33425a42", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -142,7 +142,7 @@ typedef fibonacci_heap <long, basic_block_def> bb_heap_t;\n typedef fibonacci_node <long, basic_block_def> bb_heap_node_t;\n \n /* Structure to hold needed information for each basic block.  */\n-typedef struct bbro_basic_block_data_def\n+struct bbro_basic_block_data\n {\n   /* Which trace is the bb start of (-1 means it is not a start of any).  */\n   int start_of_trace;\n@@ -161,7 +161,7 @@ typedef struct bbro_basic_block_data_def\n \n   /* Which heap node is BB in (if any)?  */\n   bb_heap_node_t *node;\n-} bbro_basic_block_data;\n+};\n \n /* The current size of the following dynamic array.  */\n static int array_size;"}, {"sha": "eb717a03878fb52274e718db80102675b627a973", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,8 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* c-ada-spec.h, c-common.c, c-common.h, c-format.c, c-format.h,\n+\tc-objc.h, c-ppoutput.c, c-pragma.c, c-pragma.h: Remove useless\n+\n 2015-08-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR middle-end/36757"}, {"sha": "8eed0e27b1769a669f396a9040c593cdc4ed02fe", "filename": "gcc/c-family/c-ada-spec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-ada-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-ada-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* In c-ada-spec.c  */\n \n-typedef enum {\n+enum cpp_operation {\n   HAS_DEPENDENT_TEMPLATE_ARGS,\n   IS_ABSTRACT,\n   IS_CONSTRUCTOR,\n@@ -33,7 +33,7 @@ typedef enum {\n   IS_MOVE_CONSTRUCTOR,\n   IS_TEMPLATE,\n   IS_TRIVIAL\n-} cpp_operation;\n+};\n \n extern location_t decl_sloc (const_tree, bool);\n extern void collect_ada_nodes (tree, const char *);"}, {"sha": "ff502e56dbb82db1444094303528358b9284dcfa", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -6311,11 +6311,11 @@ build_va_arg (location_t loc, tree expr, tree type)\n \n /* Linked list of disabled built-in functions.  */\n \n-typedef struct disabled_builtin\n+struct disabled_builtin\n {\n   const char *name;\n   struct disabled_builtin *next;\n-} disabled_builtin;\n+};\n static disabled_builtin *disabled_builtins = NULL;\n \n static bool builtin_function_disabled_p (const char *);"}, {"sha": "be63cd203d59c9087eaa621fabdb4c4e818627d3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -474,14 +474,13 @@ struct GTY(()) sorted_fields_type {\n    These may be shadowed, and may be referenced from nested functions.  */\n #define C_DECLARED_LABEL_FLAG(label) TREE_LANG_FLAG_1 (label)\n \n-typedef enum c_language_kind\n+enum c_language_kind\n {\n   clk_c\t\t= 0,\t\t/* C90, C94, C99 or C11 */\n   clk_objc\t= 1,\t\t/* clk_c with ObjC features.  */\n   clk_cxx\t= 2,\t\t/* ANSI/ISO C++ */\n   clk_objcxx\t= 3\t\t/* clk_cxx with ObjC features.  */\n-}\n-c_language_kind;\n+};\n \n /* To test for a specific language use c_language, defined by each\n    front end.  For \"ObjC features\" or \"not C++\" use the macros.  */\n@@ -491,7 +490,7 @@ extern c_language_kind c_language;\n #define c_dialect_objc()\t((c_language & clk_objc) != 0)\n \n /* The various name of operator that appears in error messages. */\n-typedef enum ref_operator {\n+enum ref_operator {\n   /* NULL */\n   RO_NULL,\n   /* array indexing */\n@@ -504,7 +503,7 @@ typedef enum ref_operator {\n   RO_IMPLICIT_CONVERSION,\n   /* ->* */\n   RO_ARROW_STAR\n-} ref_operator;\n+};\n \n /* Information about a statement tree.  */\n "}, {"sha": "2940f92d7d88581d8991f367f2f790c9238af168", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -46,12 +46,12 @@ enum format_type { printf_format_type, asm_fprintf_format_type,\n \t\t   gcc_objc_string_format_type,\n \t\t   format_type_error = -1};\n \n-typedef struct function_format_info\n+struct function_format_info\n {\n   int format_type;\t\t\t/* type of format (printf, scanf, etc.) */\n   unsigned HOST_WIDE_INT format_num;\t/* number of format argument */\n   unsigned HOST_WIDE_INT first_arg_num;\t/* number of first arg (zero for varargs) */\n-} function_format_info;\n+};\n \n static bool decode_format_attr (tree, function_format_info *, int);\n static int decode_format_type (const char *);\n@@ -425,7 +425,7 @@ static const char *kind_descriptions[] = {\n \n /* Structure describing details of a type expected in format checking,\n    and the type to check against it.  */\n-typedef struct format_wanted_type\n+struct format_wanted_type\n {\n   /* The type wanted.  */\n   tree wanted_type;\n@@ -460,7 +460,7 @@ typedef struct format_wanted_type\n   unsigned int offset_loc;\n   /* The next type to check for this format conversion, or NULL if none.  */\n   struct format_wanted_type *next;\n-} format_wanted_type;\n+};\n \n /* Convenience macro for format_length_info meaning unused.  */\n #define NO_FMT NULL, FMT_LEN_none, STD_C89\n@@ -965,7 +965,7 @@ static int n_format_types = ARRAY_SIZE (format_types_orig);\n /* Structure detailing the results of checking a format function call\n    where the format expression may be a conditional expression with\n    many leaves resulting from nested conditional expressions.  */\n-typedef struct\n+struct format_check_results\n {\n   /* Number of leaves of the format argument that could not be checked\n      as they were not string literals.  */\n@@ -990,14 +990,14 @@ typedef struct\n   int number_other;\n   /* Location of the format string.  */\n   location_t format_string_loc;\n-} format_check_results;\n+};\n \n-typedef struct\n+struct format_check_context\n {\n   format_check_results *res;\n   function_format_info *info;\n   tree params;\n-} format_check_context;\n+};\n \n /* Return the format name (as specified in the original table) for the format\n    type indicated by format_num.  */"}, {"sha": "c458791359aaac8e887d725c395644b770798200", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -84,7 +84,7 @@ enum\n \n /* Structure describing a length modifier supported in format checking, and\n    possibly a doubled version such as \"hh\".  */\n-typedef struct\n+struct format_length_info\n {\n   /* Name of the single-character length modifier. If prefixed by\n      a zero character, it describes a multi character length\n@@ -102,12 +102,12 @@ typedef struct\n   /* If this flag is set, just scalar width identity is checked, and\n      not the type identity itself.  */\n   int scalar_identity_flag;\n-} format_length_info;\n+};\n \n \n /* Structure describing the combination of a conversion specifier\n    (or a set of specifiers which act identically) and a length modifier.  */\n-typedef struct\n+struct format_type_detail\n {\n   /* The standard version this combination of length and type appeared in.\n      This is only relevant if greater than those for length and type\n@@ -118,7 +118,7 @@ typedef struct\n   const char *name;\n   /* The type itself.  */\n   tree *type;\n-} format_type_detail;\n+};\n \n \n /* Macros to fill out tables of these.  */\n@@ -129,7 +129,7 @@ typedef struct\n \n /* Structure describing a format conversion specifier (or a set of specifiers\n    which act identically), and the length modifiers used with it.  */\n-typedef struct format_char_info\n+struct format_char_info\n {\n   const char *format_chars;\n   int pointer_count;\n@@ -158,11 +158,11 @@ typedef struct format_char_info\n      arguments, only POINTER_COUNT, TYPES, and the \"c\", \"R\", and \"W\" flags\n      in FLAGS2 are used.  */\n   const struct format_char_info *chain;\n-} format_char_info;\n+};\n \n \n /* Structure describing a flag accepted by some kind of format.  */\n-typedef struct\n+struct format_flag_spec\n {\n   /* The flag character in question (0 for end of array).  */\n   int flag_char;\n@@ -186,12 +186,12 @@ typedef struct\n   const char *long_name;\n   /* The standard version in which it appeared.  */\n   enum format_std_version std;\n-} format_flag_spec;\n+};\n \n \n /* Structure describing a combination of flags that is bad for some kind\n    of format.  */\n-typedef struct\n+struct format_flag_pair\n {\n   /* The first flag character in question (0 for end of array).  */\n   int flag_char1;\n@@ -204,11 +204,11 @@ typedef struct\n      a nonzero character from flags2 if it only applies in some\n      circumstances (e.g. 'i' for printf formats ignoring 0 with precision).  */\n   int predicate;\n-} format_flag_pair;\n+};\n \n \n /* Structure describing a particular kind of format processed by GCC.  */\n-typedef struct\n+struct format_kind_info\n {\n   /* The name of this kind of format, for use in diagnostics.  Also\n      the name of the attribute (without preceding and following __).  */\n@@ -251,7 +251,7 @@ typedef struct\n   /* Pointer to type of argument expected if '*' is used for a precision,\n      or NULL if '*' not used for precisions.  */\n   tree *precision_type;\n-} format_kind_info;\n+};\n \n #define T_I\t&integer_type_node\n #define T89_I\t{ STD_C89, NULL, T_I }\n@@ -317,12 +317,12 @@ typedef struct\n    interpreted as \"gnu_printf\" or \"ms_printf\" on a particular system.\n    TARGET_OVERRIDES_FORMAT_ATTRIBUTES is used to specify target-specific\n    defaults.  */\n-typedef struct\n+struct target_ovr_attr\n {\n   /* The name of the to be copied format attribute. */\n   const char *named_attr_src;\n   /* The name of the to be overridden format attribute. */\n   const char *named_attr_dst;\n-} target_ovr_attr;\n+};\n \n #endif /* GCC_C_FORMAT_H */"}, {"sha": "e9ec8f894a8f9307c1b1f18c625c5db8166c4968", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -21,12 +21,12 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_C_COMMON_OBJC_H\n \n /* ObjC ivar visibility types.  */\n-typedef enum objc_ivar_visibility_kind {\n+enum GTY(()) objc_ivar_visibility_kind {\n   OBJC_IVAR_VIS_PROTECTED = 0,\n   OBJC_IVAR_VIS_PUBLIC    = 1,\n   OBJC_IVAR_VIS_PRIVATE   = 2,\n   OBJC_IVAR_VIS_PACKAGE   = 3\n-} objc_ivar_visibility_kind;\n+};\n \n /* Objective-C / Objective-C++ entry points.  */\n "}, {"sha": "085555459eb71048fc1e2db448e9dca6f01af783", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -44,13 +44,13 @@ static struct\n \n /* Defined and undefined macros being queued for output with -dU at\n    the next newline.  */\n-typedef struct macro_queue\n+struct macro_queue\n {\n   struct macro_queue *next;\t/* Next macro in the list.  */\n   char *macro;\t\t\t/* The name of the macro if not\n \t\t\t\t   defined, the full definition if\n \t\t\t\t   defined.  */\n-} macro_queue;\n+};\n static macro_queue *define_queue, *undef_queue;\n \n /* General output routines.  */"}, {"sha": "5fb1fc270ebf3947b72ad4fe75da2f61e8e5f326", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -48,11 +48,11 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_BAD2(gmsgid, arg) \\\n   do { warning (OPT_Wpragmas, gmsgid, arg); return; } while (0)\n \n-typedef struct GTY(()) align_stack {\n+struct GTY(()) align_stack {\n   int\t\t       alignment;\n   tree\t\t       id;\n   struct align_stack * prev;\n-} align_stack;\n+};\n \n static GTY(()) struct align_stack * alignment_stack;\n \n@@ -236,11 +236,11 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     }\n }\n \n-typedef struct GTY(()) pending_weak_d\n+struct GTY(()) pending_weak\n {\n   tree name;\n   tree value;\n-} pending_weak;\n+};\n \n \n static GTY(()) vec<pending_weak, va_gc> *pending_weaks;\n@@ -426,10 +426,10 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n       if it appears afterward, we have no way of knowing whether a modified\n       DECL_ASSEMBLER_NAME is due to #pragma extern_prefix.)  */\n \n-typedef struct GTY(()) pending_redefinition_d {\n+struct GTY(()) pending_redefinition {\n   tree oldname;\n   tree newname;\n-} pending_redefinition;\n+};\n \n \n static GTY(()) vec<pending_redefinition, va_gc> *pending_redefine_extname;\n@@ -894,13 +894,13 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n /* Stack of the #pragma GCC options created with #pragma GCC push_option.  Save\n    both the binary representation of the options and the TREE_LIST of\n    strings that will be added to the function's attribute list.  */\n-typedef struct GTY(()) opt_stack {\n+struct GTY(()) opt_stack {\n   struct opt_stack *prev;\n   tree target_binary;\n   tree target_strings;\n   tree optimize_binary;\n   tree optimize_strings;\n-} opt_stack;\n+};\n \n static GTY(()) struct opt_stack * options_stack;\n \n@@ -1165,11 +1165,11 @@ handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n \n static vec<internal_pragma_handler> registered_pragmas;\n \n-typedef struct\n+struct pragma_ns_name\n {\n   const char *space;\n   const char *name;\n-} pragma_ns_name;\n+};\n \n \n static vec<pragma_ns_name> registered_pp_pragmas;"}, {"sha": "aa2b471757235c649920f01b986e2f687e80ad80", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Pragma identifiers built in to the front end parsers.  Identifiers\n    for ancillary handlers will follow these.  */\n-typedef enum pragma_kind {\n+enum pragma_kind {\n   PRAGMA_NONE = 0,\n \n   PRAGMA_OACC_CACHE,\n@@ -71,12 +71,12 @@ typedef enum pragma_kind {\n   PRAGMA_IVDEP,\n \n   PRAGMA_FIRST_EXTERNAL\n-} pragma_kind;\n+};\n \n \n /* All clauses defined by OpenACC 2.0, and OpenMP 2.5, 3.0, 3.1, and 4.0.\n    Used internally by both C and C++ parsers.  */\n-typedef enum pragma_omp_clause {\n+enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_NONE = 0,\n \n   PRAGMA_OMP_CLAUSE_ALIGNED,\n@@ -159,7 +159,7 @@ typedef enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_IF = PRAGMA_OMP_CLAUSE_IF,\n   PRAGMA_OACC_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,\n   PRAGMA_OACC_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION\n-} pragma_omp_clause;\n+};\n \n extern struct cpp_reader* parse_in;\n \n@@ -183,15 +183,14 @@ union gen_pragma_handler {\n   pragma_handler_2arg handler_2arg;\n };\n /* Internally used to keep the data of the handler.  */\n-struct internal_pragma_handler_d {\n+struct internal_pragma_handler {\n   union gen_pragma_handler handler;\n   /* Permits to know if handler is a pragma_handler_1arg (extra_data is false)\n      or a pragma_handler_2arg (extra_data is true).  */\n   bool extra_data;\n   /* A data field which can be used when extra_data is true.  */\n   void * data;\n };\n-typedef struct internal_pragma_handler_d internal_pragma_handler;\n \n extern void c_register_pragma (const char *space, const char *name,\n                                pragma_handler_1arg handler);"}, {"sha": "1536b1bb872d38e5770557b4fad6020f0d0b6aa6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,7 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* c-aux-info.c, c-parser.c, c-tree.h: Remove useless typedefs.\n+\n 2015-08-12  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c (grokdeclarator): Call error_at instead of error and pass"}, {"sha": "d983e2ccf431d27a7bab07537697ee2f9ec8ce9a", "filename": "gcc/c/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-aux-info.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -29,12 +29,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alias.h\"\n #include \"c-tree.h\"\n \n-enum formals_style_enum {\n+enum formals_style {\n   ansi,\n   k_and_r_names,\n   k_and_r_decls\n };\n-typedef enum formals_style_enum formals_style;\n \n \n static const char *data_type;"}, {"sha": "1a587986427f1fa4b56b5ce73f75c86534f2f439", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -141,7 +141,7 @@ c_parse_init (void)\n    lexer code, if desired.  */\n \n /* More information about the type of a CPP_NAME token.  */\n-typedef enum c_id_kind {\n+enum c_id_kind {\n   /* An ordinary identifier.  */\n   C_ID_ID,\n   /* An identifier declared as a typedef name.  */\n@@ -152,11 +152,11 @@ typedef enum c_id_kind {\n   C_ID_ADDRSPACE,\n   /* Not an identifier.  */\n   C_ID_NONE\n-} c_id_kind;\n+};\n \n /* A single C token after string literal concatenation and conversion\n    of preprocessing tokens to tokens.  */\n-typedef struct GTY (()) c_token {\n+struct GTY (()) c_token {\n   /* The kind of token.  */\n   ENUM_BITFIELD (cpp_ttype) type : 8;\n   /* If this token is a CPP_NAME, this value indicates whether also\n@@ -172,12 +172,12 @@ typedef struct GTY (()) c_token {\n   location_t location;\n   /* The value associated with this token, if any.  */\n   tree value;\n-} c_token;\n+};\n \n /* A parser structure recording information about the state and\n    context of parsing.  Includes lexer information with up to two\n    tokens of look-ahead; more are not needed for C.  */\n-typedef struct GTY(()) c_parser {\n+struct GTY(()) c_parser {\n   /* The look-ahead tokens.  */\n   c_token * GTY((skip)) tokens;\n   /* Buffer for look-ahead tokens.  */\n@@ -224,7 +224,7 @@ typedef struct GTY(()) c_parser {\n   /* Buffer to hold all the tokens from parsing the vector attribute for the\n      SIMD-enabled functions (formerly known as elemental functions).  */\n   vec <c_token, va_gc> *cilk_simd_fn_tokens;\n-} c_parser;\n+};\n \n \n /* The actual parser and external interface.  ??? Does this need to be\n@@ -1127,7 +1127,7 @@ restore_extension_diagnostics (int flags)\n }\n \n /* Possibly kinds of declarator to parse.  */\n-typedef enum c_dtr_syn {\n+enum c_dtr_syn {\n   /* A normal declarator with an identifier.  */\n   C_DTR_NORMAL,\n   /* An abstract declarator (maybe empty).  */\n@@ -1143,7 +1143,7 @@ typedef enum c_dtr_syn {\n      the same applies with attributes inside the parentheses before\n      \"T\".  */\n   C_DTR_PARM\n-} c_dtr_syn;\n+};\n \n /* The binary operation precedence levels, where 0 is a dummy lowest level\n    used for the bottom of the stack.  */"}, {"sha": "a3979dd9f3758069157d0d1ef51833ca592b0f62", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -355,12 +355,12 @@ enum c_declarator_kind {\n   cdk_attrs\n };\n \n-typedef struct c_arg_tag_d {\n+struct c_arg_tag {\n   /* The argument name.  */\n   tree id;\n   /* The type of the argument.  */\n   tree type;\n-} c_arg_tag;\n+};\n \n \n /* Information about the parameters in a function declarator.  */"}, {"sha": "dd610d8b3dc9facbc684088cecffcc40580ecdf9", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -275,7 +275,7 @@ extern bool flow_loop_nested_p\t(const struct loop *, const struct loop *);\n extern bool flow_bb_inside_loop_p (const struct loop *, const_basic_block);\n extern struct loop * find_common_loop (struct loop *, struct loop *);\n struct loop *superloop_at_depth (struct loop *, unsigned);\n-struct eni_weights_d;\n+struct eni_weights;\n extern int num_loop_insns (const struct loop *);\n extern int average_num_loop_insns (const struct loop *);\n extern unsigned get_loop_level (const struct loop *);"}, {"sha": "5a7e874707538ed9bcdf535c1a0cc726d3878e54", "filename": "gcc/collect2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -282,7 +282,7 @@ static struct lto_object_list lto_objects;\n \n /* Special kinds of symbols that a name may denote.  */\n \n-typedef enum {\n+enum symkind {\n   SYM_REGULAR = 0,  /* nothing special  */\n \n   SYM_CTOR = 1,  /* constructor */\n@@ -292,7 +292,7 @@ typedef enum {\n   SYM_DWEH = 5,  /* DWARF exception handling table  */\n   SYM_AIXI = 6,\n   SYM_AIXD = 7\n-} symkind;\n+};\n \n const char tool_name[] = \"collect2\";\n \n@@ -333,13 +333,13 @@ static void process_args (int *argcp, char **argv);\n /* Enumerations describing which pass this is for scanning the\n    program file ...  */\n \n-typedef enum {\n+enum scanpass {\n   PASS_FIRST,\t\t\t\t/* without constructors */\n   PASS_OBJ,\t\t\t\t/* individual objects */\n   PASS_LIB,\t\t\t\t/* looking for shared libraries */\n   PASS_SECOND,\t\t\t\t/* with constructors linked in */\n   PASS_LTOINFO\t\t\t\t/* looking for objects with LTO info */\n-} scanpass;\n+};\n \n /* ... and which kinds of symbols are to be considered.  */\n "}, {"sha": "fd3e19c1f408e010b6c529006c71ebb290a21b9c", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -154,7 +154,7 @@ static rtx i2mod_old_rhs;\n \n static rtx i2mod_new_rhs;\n \f\n-typedef struct reg_stat_struct {\n+struct reg_stat_type {\n   /* Record last point of death of (hard or pseudo) register n.  */\n   rtx_insn\t\t\t*last_death;\n \n@@ -261,7 +261,7 @@ typedef struct reg_stat_struct {\n      value.  */\n \n   ENUM_BITFIELD(machine_mode)\ttruncated_to_mode : 8;\n-} reg_stat_type;\n+};\n \n \n static vec<reg_stat_type> reg_stat;"}, {"sha": "e313e64106119decaff571178c398d04cd1b8666", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,9 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* call.c, class.c, cp-tree.h, decl.c, except.c, mangle.c,\n+\tmethod.c, name-lookup.h, parser.c, parser.h, rtti.c,\n+\tsemantics.c, typeck2.c: Remove useless typedefs.\n+\n 2015-08-18  Jason Merrill  <jason@redhat.com>\n \n \tDR 1155"}, {"sha": "8d4a9e23a0a51ba95dacaaaa285d6ecb9969b412", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The various kinds of conversion.  */\n \n-typedef enum conversion_kind {\n+enum conversion_kind {\n   ck_identity,\n   ck_lvalue,\n   ck_qual,\n@@ -62,12 +62,12 @@ typedef enum conversion_kind {\n   ck_list,\n   ck_aggr,\n   ck_rvalue\n-} conversion_kind;\n+};\n \n /* The rank of the conversion.  Order of the enumerals matters; better\n    conversions should come earlier in the list.  */\n \n-typedef enum conversion_rank {\n+enum conversion_rank {\n   cr_identity,\n   cr_exact,\n   cr_promotion,\n@@ -76,13 +76,12 @@ typedef enum conversion_rank {\n   cr_user,\n   cr_ellipsis,\n   cr_bad\n-} conversion_rank;\n+};\n \n /* An implicit conversion sequence, in the sense of [over.best.ics].\n    The first conversion to be performed is at the end of the chain.\n    That conversion is always a cr_identity conversion.  */\n \n-typedef struct conversion conversion;\n struct conversion {\n   /* The kind of conversion represented by this step.  */\n   conversion_kind kind;\n@@ -407,9 +406,8 @@ build_call_a (tree function, int n, tree *argarray)\n \n /* New overloading code.  */\n \n-typedef struct z_candidate z_candidate;\n+struct z_candidate;\n \n-typedef struct candidate_warning candidate_warning;\n struct candidate_warning {\n   z_candidate *loser;\n   candidate_warning *next;"}, {"sha": "f8ba795ddcb6af206344f58acc9e22bcf0c4bc86", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -71,7 +71,7 @@ typedef struct class_stack_node {\n   size_t hidden;\n }* class_stack_node_t;\n \n-typedef struct vtbl_init_data_s\n+struct vtbl_init_data\n {\n   /* The base for which we're building initializers.  */\n   tree binfo;\n@@ -100,7 +100,7 @@ typedef struct vtbl_init_data_s\n   /* True when adding vcall offset entries to the vtable.  False when\n      merely computing the indices.  */\n   bool generate_vcall_entries;\n-} vtbl_init_data;\n+};\n \n /* The type of a function passed to walk_subobject_offsets.  */\n typedef int (*subobject_offset_fn) (tree, tree, splay_tree);\n@@ -2377,7 +2377,7 @@ base_derived_from (tree derived, tree base)\n   return false;\n }\n \n-typedef struct find_final_overrider_data_s {\n+struct find_final_overrider_data {\n   /* The function for which we are trying to find a final overrider.  */\n   tree fn;\n   /* The base class in which the function was declared.  */\n@@ -2386,7 +2386,7 @@ typedef struct find_final_overrider_data_s {\n   tree candidates;\n   /* Path to most derived.  */\n   vec<tree> path;\n-} find_final_overrider_data;\n+};\n \n /* Add the overrider along the current path to FFOD->CANDIDATES.\n    Returns true if an overrider was found; false otherwise.  */\n@@ -8556,7 +8556,7 @@ binfo_ctor_vtable (tree binfo)\n }\n \n /* Data for secondary VTT initialization.  */\n-typedef struct secondary_vptr_vtt_init_data_s\n+struct secondary_vptr_vtt_init_data\n {\n   /* Is this the primary VTT? */\n   bool top_level_p;\n@@ -8569,7 +8569,7 @@ typedef struct secondary_vptr_vtt_init_data_s\n \n   /* The type being constructed by this secondary VTT.  */\n   tree type_being_constructed;\n-} secondary_vptr_vtt_init_data;\n+};\n \n /* Recursively build the VTT-initializer for BINFO (which is in the\n    hierarchy dominated by T).  INITS points to the end of the initializer"}, {"sha": "7cf5278f04a5954f51aa238db641c50a50b8b680", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -283,14 +283,13 @@ identifier_p (tree t)\n #define LANG_IDENTIFIER_CAST(NODE) \\\n \t((struct lang_identifier*)IDENTIFIER_NODE_CHECK (NODE))\n \n-struct GTY(()) template_parm_index_s {\n+struct GTY(()) template_parm_index {\n   struct tree_common common;\n   int index;\n   int level;\n   int orig_level;\n   tree decl;\n };\n-typedef struct template_parm_index_s template_parm_index;\n \n struct GTY(()) ptrmem_cst {\n   struct tree_common common;\n@@ -417,7 +416,7 @@ struct GTY(()) tree_baselink {\n \n /* The different kinds of ids that we encounter.  */\n \n-typedef enum cp_id_kind\n+enum cp_id_kind\n {\n   /* Not an id at all.  */\n   CP_ID_KIND_NONE,\n@@ -429,12 +428,12 @@ typedef enum cp_id_kind\n   CP_ID_KIND_TEMPLATE_ID,\n   /* A qualified-id.  */\n   CP_ID_KIND_QUALIFIED\n-} cp_id_kind;\n+};\n \n \n /* The various kinds of C++0x warnings we encounter. */\n \n-typedef enum cpp0x_warn_str\n+enum cpp0x_warn_str\n {\n   /* extended initializer lists */\n   CPP0X_INITIALIZER_LISTS,\n@@ -466,51 +465,51 @@ typedef enum cpp0x_warn_str\n   CPP0X_ATTRIBUTES,\n   /* ref-qualified member functions */\n   CPP0X_REF_QUALIFIER\n-} cpp0x_warn_str;\n+};\n \n /* The various kinds of operation used by composite_pointer_type. */\n \n-typedef enum composite_pointer_operation\n+enum composite_pointer_operation\n {\n   /* comparison */\n   CPO_COMPARISON,\n   /* conversion */\n   CPO_CONVERSION,\n   /* conditional expression */\n   CPO_CONDITIONAL_EXPR\n-} composite_pointer_operation;\n+};\n \n /* Possible cases of expression list used by build_x_compound_expr_from_list. */\n-typedef enum expr_list_kind {\n+enum expr_list_kind {\n   ELK_INIT,\t\t/* initializer */\n   ELK_MEM_INIT,\t\t/* member initializer */\n   ELK_FUNC_CAST\t\t/* functional cast */\n-} expr_list_kind; \n+};\n \n /* Possible cases of implicit bad rhs conversions. */\n-typedef enum impl_conv_rhs {\n+enum impl_conv_rhs {\n   ICR_DEFAULT_ARGUMENT, /* default argument */\n   ICR_CONVERTING,       /* converting */\n   ICR_INIT,             /* initialization */\n   ICR_ARGPASS,          /* argument passing */\n   ICR_RETURN,           /* return */\n   ICR_ASSIGN            /* assignment */\n-} impl_conv_rhs;\n+};\n \n /* Possible cases of implicit or explicit bad conversions to void. */\n-typedef enum impl_conv_void {\n+enum impl_conv_void {\n   ICV_CAST,            /* (explicit) conversion to void */\n   ICV_SECOND_OF_COND,  /* second operand of conditional expression */\n   ICV_THIRD_OF_COND,   /* third operand of conditional expression */\n   ICV_RIGHT_OF_COMMA,  /* right operand of comma operator */\n   ICV_LEFT_OF_COMMA,   /* left operand of comma operator */\n   ICV_STATEMENT,       /* statement */\n   ICV_THIRD_IN_FOR     /* for increment expression */\n-} impl_conv_void;\n+};\n \n /* Possible invalid uses of an abstract class that might not have a\n    specific associated declaration.  */\n-typedef enum abstract_class_use {\n+enum GTY(()) abstract_class_use {\n   ACU_UNKNOWN,\t\t\t/* unknown or decl provided */\n   ACU_CAST,\t\t\t/* cast to abstract class */\n   ACU_NEW,\t\t\t/* new-expression of abstract class */\n@@ -519,7 +518,7 @@ typedef enum abstract_class_use {\n   ACU_ARRAY,\t\t\t/* array of abstract class */\n   ACU_RETURN,\t\t\t/* return type of abstract class */\n   ACU_PARM\t\t\t/* parameter type of abstract class */\n-} abstract_class_use;\n+};\n \n /* Macros for access to language-specific slots in an identifier.  */\n \n@@ -642,7 +641,7 @@ struct GTY (()) tree_argument_pack_select {\n \n /* The different kinds of traits that we encounter.  */\n \n-typedef enum cp_trait_kind\n+enum cp_trait_kind\n {\n   CPTK_BASES,\n   CPTK_DIRECT_BASES,\n@@ -671,7 +670,7 @@ typedef enum cp_trait_kind\n   CPTK_IS_TRIVIALLY_COPYABLE,\n   CPTK_IS_UNION,\n   CPTK_UNDERLYING_TYPE\n-} cp_trait_kind;\n+};\n \n /* The types that we are processing.  */\n #define TRAIT_EXPR_TYPE1(NODE) \\\n@@ -991,7 +990,7 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n        chain_next (\"(union lang_tree_node *) c_tree_chain_next (&%h.generic)\"))) lang_tree_node {\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;\n-  struct template_parm_index_s GTY ((tag (\"TS_CP_TPI\"))) tpi;\n+  struct template_parm_index GTY ((tag (\"TS_CP_TPI\"))) tpi;\n   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n@@ -1584,10 +1583,10 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define CLASSTYPE_VISIBILITY_SPECIFIED(TYPE)\t\\\n \tDECL_VISIBILITY_SPECIFIED (TYPE_MAIN_DECL (TYPE))\n \n-typedef struct GTY (()) tree_pair_s {\n+struct GTY (()) tree_pair_s {\n   tree purpose;\n   tree value;\n-} tree_pair_s;\n+};\n typedef tree_pair_s *tree_pair_p;\n \n /* This is a few header flags for 'struct lang_type'.  Actually,\n@@ -3333,11 +3332,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n /* Abstract iterators for AGGR_INIT_EXPRs.  */\n \n /* Structure containing iterator state.  */\n-typedef struct aggr_init_expr_arg_iterator_d {\n+struct aggr_init_expr_arg_iterator {\n   tree t;\t/* the aggr_init_expr */\n   int n;\t/* argument count */\n   int i;\t/* next argument index */\n-} aggr_init_expr_arg_iterator;\n+};\n \n /* Initialize the abstract argument list iterator object ITER with the\n    arguments from AGGR_INIT_EXPR node EXP.  */\n@@ -4502,7 +4501,7 @@ enum cp_lvalue_kind_flags {\n typedef int cp_lvalue_kind;\n \n /* Various kinds of template specialization, instantiation, etc.  */\n-typedef enum tmpl_spec_kind {\n+enum tmpl_spec_kind {\n   tsk_none,\t\t   /* Not a template at all.  */\n   tsk_invalid_member_spec, /* An explicit member template\n \t\t\t      specialization, but the enclosing\n@@ -4517,22 +4516,22 @@ typedef enum tmpl_spec_kind {\n   tsk_template,\t\t   /* A template declaration.  */\n   tsk_expl_spec,\t   /* An explicit specialization.  */\n   tsk_expl_inst\t\t   /* An explicit instantiation.  */\n-} tmpl_spec_kind;\n+};\n \n /* The various kinds of access.  BINFO_ACCESS depends on these being\n    two bit quantities.  The numerical values are important; they are\n    used to initialize RTTI data structures, so changing them changes\n    the ABI.  */\n-typedef enum access_kind {\n+enum access_kind {\n   ak_none = 0,\t\t   /* Inaccessible.  */\n   ak_public = 1,\t   /* Accessible, as a `public' thing.  */\n   ak_protected = 2,\t   /* Accessible, as a `protected' thing.  */\n   ak_private = 3\t   /* Accessible, as a `private' thing.  */\n-} access_kind;\n+};\n \n /* The various kinds of special functions.  If you add to this list,\n    you should update special_function_p as well.  */\n-typedef enum special_function_kind {\n+enum special_function_kind {\n   sfk_none = 0,\t\t   /* Not a special function.  This enumeral\n \t\t\t      must have value zero; see\n \t\t\t      special_function_p.  */\n@@ -4549,7 +4548,7 @@ typedef enum special_function_kind {\n \t\t\t      destroyed.  */\n   sfk_conversion,\t   /* A conversion operator.  */\n   sfk_inheriting_constructor /* An inheriting constructor */\n-} special_function_kind;\n+};\n \n /* The various kinds of linkage.  From [basic.link],\n \n@@ -4568,18 +4567,18 @@ typedef enum special_function_kind {\n       -- When a name has no linkage, the entity it denotes cannot be\n \t referred to by names from other scopes.  */\n \n-typedef enum linkage_kind {\n+enum linkage_kind {\n   lk_none,\t\t\t/* No linkage.  */\n   lk_internal,\t\t\t/* Internal linkage.  */\n   lk_external\t\t\t/* External linkage.  */\n-} linkage_kind;\n+};\n \n-typedef enum duration_kind {\n+enum duration_kind {\n   dk_static,\n   dk_thread,\n   dk_auto,\n   dk_dynamic\n-} duration_kind;\n+};\n \n /* Bitmask flags to control type substitution.  */\n enum tsubst_flags {\n@@ -4625,15 +4624,15 @@ enum base_access_flags {\n typedef int base_access;\n \n /* The various kinds of access check during parsing.  */\n-typedef enum deferring_kind {\n+enum deferring_kind {\n   dk_no_deferred = 0, /* Check access immediately */\n   dk_deferred = 1,    /* Deferred check */\n   dk_no_check = 2     /* No access check */\n-} deferring_kind;\n+};\n \n /* The kind of base we can find, looking in a class hierarchy.\n    Values <0 indicate we failed.  */\n-typedef enum base_kind {\n+enum base_kind {\n   bk_inaccessible = -3,   /* The base is inaccessible */\n   bk_ambig = -2,\t  /* The base is ambiguous */\n   bk_not_base = -1,\t  /* It is not a base */\n@@ -4642,7 +4641,7 @@ typedef enum base_kind {\n   bk_via_virtual = 2\t  /* It is a proper base, but via a virtual\n \t\t\t     path. This might not be the canonical\n \t\t\t     binfo.  */\n-} base_kind;\n+};\n \n /* Node for \"pointer to (virtual) function\".\n    This may be distinct from ptr_type_node so gdb can distinguish them.  */\n@@ -4684,11 +4683,11 @@ struct cp_unevaluated\n    fn_type_unification.  Their meanings are described with the\n    documentation for fn_type_unification.  */\n \n-typedef enum unification_kind_t {\n+enum unification_kind_t {\n   DEDUCE_CALL,\n   DEDUCE_CONV,\n   DEDUCE_EXACT\n-} unification_kind_t;\n+};\n \n // An RAII class used to create a new pointer map for local\n // specializations. When the stack goes out of scope, the\n@@ -5121,7 +5120,7 @@ enum cp_ref_qualifier {\n \n /* A storage class.  */\n \n-typedef enum cp_storage_class {\n+enum cp_storage_class {\n   /* sc_none must be zero so that zeroing a cp_decl_specifier_seq\n      sets the storage_class field to sc_none.  */\n   sc_none = 0,\n@@ -5130,13 +5129,13 @@ typedef enum cp_storage_class {\n   sc_static,\n   sc_extern,\n   sc_mutable\n-} cp_storage_class;\n+};\n \n /* An individual decl-specifier.  This is used to index the array of\n    locations for the declspecs in struct cp_decl_specifier_seq\n    below.  */\n \n-typedef enum cp_decl_spec {\n+enum cp_decl_spec {\n   ds_first,\n   ds_signed = ds_first,\n   ds_unsigned,\n@@ -5162,11 +5161,11 @@ typedef enum cp_decl_spec {\n   ds_long_long,\n   ds_concept,\n   ds_last /* This enumerator must always be the last one.  */\n-} cp_decl_spec;\n+};\n \n /* A decl-specifier-seq.  */\n \n-typedef struct cp_decl_specifier_seq {\n+struct cp_decl_specifier_seq {\n   /* An array of locations for the declaration sepecifiers, indexed by\n      enum cp_decl_spec_word.  */\n   source_location locations[ds_last];\n@@ -5210,19 +5209,19 @@ typedef struct cp_decl_specifier_seq {\n   BOOL_BITFIELD gnu_thread_keyword_p : 1;\n   /* True iff the type is a decltype.  */\n   BOOL_BITFIELD decltype_p : 1;\n-} cp_decl_specifier_seq;\n+};\n \n /* The various kinds of declarators.  */\n \n-typedef enum cp_declarator_kind {\n+enum cp_declarator_kind {\n   cdk_id,\n   cdk_function,\n   cdk_array,\n   cdk_pointer,\n   cdk_reference,\n   cdk_ptrmem,\n   cdk_error\n-} cp_declarator_kind;\n+};\n \n /* A declarator.  */\n \n@@ -6096,7 +6095,7 @@ extern int shared_member_p\t\t\t(tree);\n \n /* The representation of a deferred access check.  */\n \n-typedef struct GTY(()) deferred_access_check {\n+struct GTY(()) deferred_access_check {\n   /* The base class in which the declaration is referenced. */\n   tree binfo;\n   /* The declaration whose access must be checked.  */\n@@ -6105,7 +6104,7 @@ typedef struct GTY(()) deferred_access_check {\n   tree diag_decl;\n   /* The location of this access.  */\n   location_t loc;\n-} deferred_access_check;\n+};\n \n /* in semantics.c */\n extern void push_deferring_access_checks\t(deferring_kind);"}, {"sha": "5c75972136a78b9e788b218ee85d30c53ddb882c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -254,10 +254,10 @@ enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n /* A list of VAR_DECLs whose type was incomplete at the time the\n    variable was declared.  */\n \n-typedef struct GTY(()) incomplete_var_d {\n+struct GTY(()) incomplete_var {\n   tree decl;\n   tree incomplete_type;\n-} incomplete_var;\n+};\n \n \n static GTY(()) vec<incomplete_var, va_gc> *incomplete_vars;\n@@ -3827,15 +3827,15 @@ record_unknown_type (tree type, const char* name)\n /* A string for which we should create an IDENTIFIER_NODE at\n    startup.  */\n \n-typedef struct predefined_identifier\n+struct predefined_identifier\n {\n   /* The name of the identifier.  */\n   const char *const name;\n   /* The place where the IDENTIFIER_NODE should be stored.  */\n   tree *const node;\n   /* Nonzero if this is the name of a constructor or destructor.  */\n   const int ctor_or_dtor_p;\n-} predefined_identifier;\n+};\n \n /* Create all the predefined identifiers.  */\n \n@@ -5369,11 +5369,11 @@ check_for_uninitialized_const_var (tree decl)\n /* Structure holding the current initializer being processed by reshape_init.\n    CUR is a pointer to the current element being processed, END is a pointer\n    after the last element present in the initializer.  */\n-typedef struct reshape_iterator_t\n+struct reshape_iter\n {\n   constructor_elt *cur;\n   constructor_elt *end;\n-} reshape_iter;\n+};\n \n static tree reshape_init_r (tree, reshape_iter *, bool, tsubst_flags_t);\n "}, {"sha": "d2d1531e4c2ce6e5831e15325a2098e9a175c026", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1186,10 +1186,10 @@ check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n /* If a function that causes a noexcept-expression to be false isn't\n    defined yet, remember it and check it for TREE_NOTHROW again at EOF.  */\n \n-typedef struct GTY(()) pending_noexcept {\n+struct GTY(()) pending_noexcept {\n   tree fn;\n   location_t loc;\n-} pending_noexcept;\n+};\n static GTY(()) vec<pending_noexcept, va_gc> *pending_noexcept_checks;\n \n /* FN is a FUNCTION_DECL that caused a noexcept-expr to be false.  Warn if"}, {"sha": "342cb93e68b3ae9197024ce24221268cf4c1ff71", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -95,7 +95,7 @@ along with GCC; see the file COPYING3.  If not see\n \t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n \n /* Things we only need one of.  This module is not reentrant.  */\n-typedef struct GTY(()) globals {\n+struct GTY(()) globals {\n   /* An array of the current substitution candidates, in the order\n      we've seen them.  */\n   vec<tree, va_gc> *substitutions;\n@@ -109,7 +109,7 @@ typedef struct GTY(()) globals {\n   /* True if the mangling will be different in a future version of the\n      ABI.  */\n   bool need_abi_warning;\n-} globals;\n+};\n \n static GTY (()) globals G;\n "}, {"sha": "b3e247c5b1f719c964ee57aa68a098399829fe18", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -56,8 +56,6 @@ enum mangling_flags\n   mf_use_underscores_around_value = 2\n };\n \n-typedef enum mangling_flags mangling_flags;\n-\n static void do_build_copy_assign (tree);\n static void do_build_copy_constructor (tree);\n static tree make_alias_for_thunk (tree);"}, {"sha": "4b9419282d15037112cbde12268534a636dc30d0", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -77,13 +77,13 @@ struct GTY(()) cxx_binding {\n \n /* Datatype used to temporarily save C++ bindings (for implicit\n    instantiations purposes and like).  Implemented in decl.c.  */\n-typedef struct GTY(()) cxx_saved_binding {\n+struct GTY(()) cxx_saved_binding {\n   /* The name of the current binding.  */\n   tree identifier;\n   /* The binding we're saving.  */\n   cxx_binding *binding;\n   tree real_type_value;\n-} cxx_saved_binding;\n+};\n \n \n extern tree identifier_type_value (tree);\n@@ -94,7 +94,7 @@ extern tree constructor_name (tree);\n extern bool constructor_name_p (tree, tree);\n \f\n /* The kinds of scopes we recognize.  */\n-typedef enum scope_kind {\n+enum scope_kind {\n   sk_block = 0,      /* An ordinary block scope.  This enumerator must\n \t\t\thave the value zero because \"cp_binding_level\"\n \t\t\tis initialized by using \"memset\" to set the\n@@ -121,10 +121,10 @@ typedef enum scope_kind {\n \t\t\texplicit specialization is introduced by\n \t\t\t\"template <>\", this scope is always empty.  */\n   sk_omp\t     /* An OpenMP structured block.  */\n-} scope_kind;\n+};\n \n /* The scope where the class/struct/union/enum tag applies.  */\n-typedef enum tag_scope {\n+enum tag_scope {\n   ts_current = 0,\t/* Current scope only.  This is for the\n \t\t\t     class-key identifier;\n \t\t\t   case mentioned in [basic.lookup.elab]/2,\n@@ -138,21 +138,21 @@ typedef enum tag_scope {\n \t\t\t\t\t   according to [namespace.memdef]/3\n \t\t\t\t\t   and [class.friend]/9.  */\n   ts_lambda = 3\t\t\t/* Declaring a lambda closure.  */\n-} tag_scope;\n+};\n \n-typedef struct GTY(()) cp_class_binding {\n+struct GTY(()) cp_class_binding {\n   cxx_binding *base;\n   /* The bound name.  */\n   tree identifier;\n-} cp_class_binding;\n+};\n \n \n-typedef struct GTY(()) cp_label_binding {\n+struct GTY(()) cp_label_binding {\n   /* The bound LABEL_DECL.  */\n   tree label;\n   /* The previous IDENTIFIER_LABEL_VALUE.  */\n   tree prev_value;\n-} cp_label_binding;\n+};\n \n \n /* For each binding contour we allocate a binding_level structure"}, {"sha": "67fbcda442651b770ae0035f7509939945bf58de", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -62,7 +62,7 @@ static cp_token eof_token =\n };\n \n /* The various kinds of non integral constant we encounter. */\n-typedef enum non_integral_constant {\n+enum non_integral_constant {\n   NIC_NONE,\n   /* floating-point literal */\n   NIC_FLOAT,\n@@ -118,10 +118,10 @@ typedef enum non_integral_constant {\n   NIC_CONSTRUCTOR,\n   /* a transaction expression */\n   NIC_TRANSACTION\n-} non_integral_constant;\n+};\n \n /* The various kinds of errors about name-lookup failing. */\n-typedef enum name_lookup_error {\n+enum name_lookup_error {\n   /* NULL */\n   NLE_NULL,\n   /* is not a type */\n@@ -130,10 +130,10 @@ typedef enum name_lookup_error {\n   NLE_CXX98,\n   /* is not a class, namespace, or enumeration */\n   NLE_NOT_CXX98\n-} name_lookup_error;\n+};\n \n /* The various kinds of required token */\n-typedef enum required_token {\n+enum required_token {\n   RT_NONE,\n   RT_SEMICOLON,  /* ';' */\n   RT_OPEN_PAREN, /* '(' */\n@@ -186,7 +186,7 @@ typedef enum required_token {\n   RT_TRANSACTION_ATOMIC, /* __transaction_atomic */\n   RT_TRANSACTION_RELAXED, /* __transaction_relaxed */\n   RT_TRANSACTION_CANCEL /* __transaction_cancel */\n-} required_token;\n+};\n \n /* Prototypes.  */\n \n@@ -1733,15 +1733,15 @@ typedef int cp_parser_flags;\n \n /* The different kinds of declarators we want to parse.  */\n \n-typedef enum cp_parser_declarator_kind\n+enum cp_parser_declarator_kind\n {\n   /* We want an abstract declarator.  */\n   CP_PARSER_DECLARATOR_ABSTRACT,\n   /* We want a named declarator.  */\n   CP_PARSER_DECLARATOR_NAMED,\n   /* We don't mind, but the name must be an unqualified-id.  */\n   CP_PARSER_DECLARATOR_EITHER\n-} cp_parser_declarator_kind;\n+};\n \n /* The precedence values used to parse binary expressions.  The minimum value\n    of PREC must be 1, because zero is reserved to quickly discriminate\n@@ -1767,17 +1767,17 @@ enum cp_parser_prec\n /* A mapping from a token type to a corresponding tree node type, with a\n    precedence value.  */\n \n-typedef struct cp_parser_binary_operations_map_node\n+struct cp_parser_binary_operations_map_node\n {\n   /* The token type.  */\n   enum cpp_ttype token_type;\n   /* The corresponding tree code.  */\n   enum tree_code tree_type;\n   /* The precedence of this operator.  */\n   enum cp_parser_prec prec;\n-} cp_parser_binary_operations_map_node;\n+};\n \n-typedef struct cp_parser_expression_stack_entry\n+struct cp_parser_expression_stack_entry\n {\n   /* Left hand side of the binary operation we are currently\n      parsing.  */\n@@ -1791,7 +1791,7 @@ typedef struct cp_parser_expression_stack_entry\n   enum cp_parser_prec prec;\n   /* Location of the binary operation we are parsing.  */\n   location_t loc;\n-} cp_parser_expression_stack_entry;\n+};\n \n /* The stack for storing partial expressions.  We only need NUM_PREC_VALUES\n    entries because precedence levels on the stack are monotonically\n@@ -9003,11 +9003,11 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n    use the count for function and namespace scopes as well.  */\n static GTY(()) tree lambda_scope;\n static GTY(()) int lambda_count;\n-typedef struct GTY(()) tree_int\n+struct GTY(()) tree_int\n {\n   tree t;\n   int i;\n-} tree_int;\n+};\n static GTY(()) vec<tree_int, va_gc> *lambda_scope_stack;\n \n static void"}, {"sha": "760467c2eb03134a05bd3070e793564f0da3a77a", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -39,7 +39,7 @@ struct GTY(()) tree_check {\n \n /* A C++ token.  */\n \n-typedef struct GTY (()) cp_token {\n+struct GTY (()) cp_token {\n   /* The kind of token.  */\n   ENUM_BITFIELD (cpp_ttype) type : 8;\n   /* If this token is a keyword, this value indicates which keyword.\n@@ -68,7 +68,7 @@ typedef struct GTY (()) cp_token {\n     /* Use for all other tokens.  */\n     tree GTY((tag (\"0\"))) value;\n   } GTY((desc (\"(%1.type == CPP_TEMPLATE_ID) || (%1.type == CPP_NESTED_NAME_SPECIFIER)\"))) u;\n-} cp_token;\n+};\n \n \n /* We use a stack of token pointer for saving token sets.  */\n@@ -79,7 +79,7 @@ typedef struct cp_token *cp_token_position;\n    it to the parser.  Tokens are never added to the cp_lexer after\n    it is created.  */\n \n-typedef struct GTY (()) cp_lexer {\n+struct GTY (()) cp_lexer {\n   /* The memory allocated for the buffer.  NULL if this lexer does not\n      own the token buffer.  */\n   vec<cp_token, va_gc> *buffer;\n@@ -107,7 +107,7 @@ typedef struct GTY (()) cp_lexer {\n   /* True if we're in the context of parsing a pragma, and should not\n      increment past the end-of-line marker.  */\n   bool in_pragma;\n-} cp_lexer;\n+};\n \n \n /* cp_token_cache is a range of tokens.  There is no need to represent\n@@ -116,17 +116,17 @@ typedef struct GTY (()) cp_lexer {\n    a cp_token_cache, since everything in here is referenced through\n    a lexer.  */\n \n-typedef struct GTY(()) cp_token_cache {\n+struct GTY(()) cp_token_cache {\n   /* The beginning of the token range.  */\n   cp_token * GTY((skip)) first;\n \n   /* Points immediately after the last token in the range.  */\n   cp_token * GTY ((skip)) last;\n-} cp_token_cache;\n+};\n \n typedef cp_token_cache *cp_token_cache_ptr;\n \n-struct cp_token_ident_d\n+struct cp_token_ident\n {\n   unsigned int ident_len;\n   const char *ident_str;\n@@ -136,22 +136,20 @@ struct cp_token_ident_d\n   const char *after_str;\n };\n \n-typedef struct cp_token_ident_d cp_token_ident;\n-\n /* An entry in a queue of function arguments that require post-processing.  */\n \n-typedef struct GTY(()) cp_default_arg_entry_d {\n+struct GTY(()) cp_default_arg_entry {\n   /* The current_class_type when we parsed this arg.  */\n   tree class_type;\n \n   /* The function decl itself.  */\n   tree decl;\n-} cp_default_arg_entry;\n+};\n \n \n /* An entry in a stack for member functions defined within their classes.  */\n \n-typedef struct GTY(()) cp_unparsed_functions_entry_d {\n+struct GTY(()) cp_unparsed_functions_entry {\n   /* Functions with default arguments that require post-processing.\n      Functions appear in this list in declaration order.  */\n   vec<cp_default_arg_entry, va_gc> *funs_with_default_args;\n@@ -167,12 +165,12 @@ typedef struct GTY(()) cp_unparsed_functions_entry_d {\n   /* Nested classes go in this vector, so that we can do some final\n      processing after parsing any NSDMIs.  */\n   vec<tree, va_gc> *classes;\n-} cp_unparsed_functions_entry;\n+};\n \n \n /* The status of a tentative parse.  */\n \n-typedef enum cp_parser_status_kind\n+enum cp_parser_status_kind\n {\n   /* No errors have occurred.  */\n   CP_PARSER_STATUS_KIND_NO_ERROR,\n@@ -181,11 +179,11 @@ typedef enum cp_parser_status_kind\n   /* We are committed to this tentative parse, whether or not an error\n      has occurred.  */\n   CP_PARSER_STATUS_KIND_COMMITTED\n-} cp_parser_status_kind;\n+};\n \n \n /* Context that is saved and restored when parsing tentatively.  */\n-typedef struct GTY (()) cp_parser_context {\n+struct GTY (()) cp_parser_context {\n   /* If this is a tentative parsing context, the status of the\n      tentative parse.  */\n   enum cp_parser_status_kind status;\n@@ -197,7 +195,7 @@ typedef struct GTY (()) cp_parser_context {\n \n   /* The next parsing context in the stack.  */\n   struct cp_parser_context *next;\n-} cp_parser_context;\n+};\n \n \n /* Control structure for #pragma omp declare simd parsing.  */\n@@ -210,7 +208,7 @@ struct cp_omp_declare_simd_data {\n \n /* The cp_parser structure represents the C++ parser.  */\n \n-typedef struct GTY(()) cp_parser {\n+struct GTY(()) cp_parser {\n   /* The lexer from which we are obtaining tokens.  */\n   cp_lexer *lexer;\n \n@@ -406,7 +404,7 @@ typedef struct GTY(()) cp_parser {\n      context e.g., because they could never be deduced.  */\n   int prevent_constrained_type_specifiers;\n \n-} cp_parser;\n+};\n \n /* In parser.c  */\n extern void debug (cp_token &ref);"}, {"sha": "e4b6e00e3b8b8a3e69b2cfe7c792cd5cf1daa990", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -64,18 +64,18 @@ along with GCC; see the file COPYING3.  If not see\n    translation, when we are emitting the type info objects.  */\n \n /* Auxiliary data we hold for each type_info derived object we need.  */\n-typedef struct GTY (()) tinfo_s {\n+struct GTY (()) tinfo_s {\n   tree type;  /* The RECORD_TYPE for this type_info object */\n \n   tree vtable; /* The VAR_DECL of the vtable.  Only filled at end of\n \t\t  translation.  */\n \n   tree name;  /* IDENTIFIER_NODE for the ABI specified name of\n \t\t the type_info derived type.  */\n-} tinfo_s;\n+};\n \n \n-typedef enum tinfo_kind\n+enum tinfo_kind\n {\n   TK_TYPE_INFO_TYPE,    /* abi::__type_info_pseudo */\n   TK_BASE_TYPE,\t\t/* abi::__base_class_type_info */\n@@ -89,7 +89,7 @@ typedef enum tinfo_kind\n   TK_SI_CLASS_TYPE,\t/* abi::__si_class_type_info */\n   TK_FIXED\t\t/* end of fixed descriptors. */\n   /* ...\t\t   abi::__vmi_type_info<I> */\n-} tinfo_kind;\n+};\n \n /* Helper macro to get maximum scalar-width of pointer or of the 'long'-type.\n    This of interest for llp64 targets.  */"}, {"sha": "2a69ab0863fa882d87bc27dfce38946d8b59e7c3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -115,7 +115,7 @@ static tree capture_decltype (tree);\n       In case of parsing error, we simply call `pop_deferring_access_checks'\n       without `perform_deferred_access_checks'.  */\n \n-typedef struct GTY(()) deferred_access {\n+struct GTY(()) deferred_access {\n   /* A vector representing name-lookups for which we have deferred\n      checking access controls.  We cannot check the accessibility of\n      names used in a decl-specifier-seq until we know what is being\n@@ -134,7 +134,7 @@ typedef struct GTY(()) deferred_access {\n   /* The current mode of access checks.  */\n   enum deferring_kind deferring_access_checks_kind;\n \n-} deferred_access;\n+};\n \n /* Data for deferred access checking.  */\n static GTY(()) vec<deferred_access, va_gc> *deferred_access_stack;"}, {"sha": "1d106c74995b06ee75965026959d8a37bbda7522", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -145,7 +145,7 @@ struct GTY((chain_next (\"%h.next\"), for_user)) pending_abstract_type {\n   tree type;\n \n   /* Kind of use in an unnamed declarator.  */\n-  abstract_class_use use;\n+  enum abstract_class_use use;\n \n   /* Position of the declaration. This is only needed for IDENTIFIER_NODEs,\n      because DECLs already carry locus information.  */"}, {"sha": "780379a81757126ea1ad785826057013b85ab103", "filename": "gcc/dse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -808,12 +808,12 @@ free_store_info (insn_info_t insn_info)\n   insn_info->store_rec = NULL;\n }\n \n-typedef struct\n+struct note_add_store_info\n {\n   rtx_insn *first, *current;\n   regset fixed_regs_live;\n   bool failure;\n-} note_add_store_info;\n+};\n \n /* Callback for emit_inc_dec_insn_before via note_stores.\n    Check if a register is clobbered which is live afterwards.  */"}, {"sha": "ab18062852b9e6d274eb8496d8bdc58a3111f6a9", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -68,7 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n \f\n /* A collected description of an entire row of the abstract CFI table.  */\n-typedef struct GTY(()) dw_cfi_row_struct\n+struct GTY(()) dw_cfi_row\n {\n   /* The expression that computes the CFA, expressed in two different ways.\n      The CFA member for the simple cases, and the full CFI expression for\n@@ -78,13 +78,13 @@ typedef struct GTY(()) dw_cfi_row_struct\n \n   /* The expressions for any register column that is saved.  */\n   cfi_vec reg_save;\n-} dw_cfi_row;\n+};\n \n /* The caller's ORIG_REG is saved in SAVED_IN_REG.  */\n-typedef struct GTY(()) reg_saved_in_data_struct {\n+struct GTY(()) reg_saved_in_data {\n   rtx orig_reg;\n   rtx saved_in_reg;\n-} reg_saved_in_data;\n+};\n \n \n /* Since we no longer have a proper CFG, we're going to create a facsimile\n@@ -104,7 +104,7 @@ typedef struct GTY(()) reg_saved_in_data_struct {\n    All save points are present in the TRACE_INDEX hash, mapping the insn\n    starting a trace to the dw_trace_info describing the trace.  */\n \n-typedef struct\n+struct dw_trace_info\n {\n   /* The insn that begins the trace.  */\n   rtx_insn *head;\n@@ -157,7 +157,7 @@ typedef struct\n \n   /* True if we've seen different values incoming to beg_true_args_size.  */\n   bool args_size_undefined;\n-} dw_trace_info;\n+};\n \n \n typedef dw_trace_info *dw_trace_info_ref;\n@@ -220,11 +220,11 @@ static dw_cfa_location *cur_cfa;\n    of the prologue or (b) the register is clobbered.  This clusters\n    register saves so that there are fewer pc advances.  */\n \n-typedef struct {\n+struct queued_reg_save {\n   rtx reg;\n   rtx saved_reg;\n   HOST_WIDE_INT cfa_offset;\n-} queued_reg_save;\n+};\n \n \n static vec<queued_reg_save> queued_reg_saves;\n@@ -261,7 +261,7 @@ init_return_column_size (machine_mode mode, rtx mem, unsigned int c)\n    init_one_dwarf_reg_size to communicate on what has been done by the\n    latter.  */\n \n-typedef struct\n+struct init_one_dwarf_reg_state\n {\n   /* Whether the dwarf return column was initialized.  */\n   bool wrote_return_column;\n@@ -270,7 +270,7 @@ typedef struct\n      was given REGNO to process already.  */\n   bool processed_regno [FIRST_PSEUDO_REGISTER];\n \n-} init_one_dwarf_reg_state;\n+};\n \n /* Helper for expand_builtin_init_dwarf_reg_sizes.  Generate code to\n    initialize the dwarf register size table entry corresponding to register"}, {"sha": "9cbaf6c6c0b8dacb051144436e7ae7d1114b6124", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,8 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* dependency.c, dependency.h, gfortran.h, io.c, module.c,\n+\tparse.h, resolve.c, trans-types.h, trans.h: remove useless\n+\n 2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/54656"}, {"sha": "ca37c1a216e0a817eeb423fdc2cef238cc630f01", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -36,16 +36,15 @@ along with GCC; see the file COPYING3.  If not see\n enum range {LHS, RHS, MID};\n \n /* Dependency types.  These must be in reverse order of priority.  */\n-typedef enum\n+enum gfc_dependency\n {\n   GFC_DEP_ERROR,\n   GFC_DEP_EQUAL,\t/* Identical Ranges.  */\n   GFC_DEP_FORWARD,\t/* e.g., a(1:3) = a(2:4).  */\n   GFC_DEP_BACKWARD,\t/* e.g. a(2:4) = a(1:3).  */\n   GFC_DEP_OVERLAP,\t/* May overlap in some other way.  */\n   GFC_DEP_NODEP\t\t/* Distinct ranges.  */\n-}\n-gfc_dependency;\n+};\n \n /* Macros */\n #define IS_ARRAY_EXPLICIT(as) ((as->type == AS_EXPLICIT ? 1 : 0))"}, {"sha": "08792edc254db13d32ed9bd9cb39ec881289890b", "filename": "gcc/fortran/dependency.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fdependency.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fdependency.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -19,14 +19,13 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /****************************** Enums *********************************/\n-typedef enum\n+enum gfc_dep_check\n {\n   NOT_ELEMENTAL,        /* Not elemental case: normal dependency check.  */\n   ELEM_CHECK_VARIABLE,  /* Test whether variables overlap.  */\n   ELEM_DONT_CHECK_VARIABLE  /* Test whether variables overlap only if used \n \t\t\t       in an expression.  */\n-}\n-gfc_dep_check;\n+};\n \n /*********************** Functions prototypes **************************/\n "}, {"sha": "9c0084be77c63e7e7c817544297d3fe5425181f6", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 64, "deletions": 97, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -102,70 +102,61 @@ mstring;\n \n /* Used when matching and resolving data I/O transfer statements.  */\n \n-typedef enum\n-{ M_READ, M_WRITE, M_PRINT, M_INQUIRE }\n-io_kind;\n+enum io_kind\n+{ M_READ, M_WRITE, M_PRINT, M_INQUIRE };\n \n \n /* These are flags for identifying whether we are reading a character literal\n    between quotes or normal source code.  */\n \n-typedef enum\n-{ NONSTRING = 0, INSTRING_WARN, INSTRING_NOWARN }\n-gfc_instring;\n+enum gfc_instring\n+{ NONSTRING = 0, INSTRING_WARN, INSTRING_NOWARN };\n \n /* This is returned by gfc_notification_std to know if, given the flags\n    that were given (-std=, -pedantic) we should issue an error, a warning\n    or nothing.  */\n \n-typedef enum\n-{ SILENT, WARNING, ERROR }\n-notification;\n+enum notification\n+{ SILENT, WARNING, ERROR };\n \n /* Matchers return one of these three values.  The difference between\n    MATCH_NO and MATCH_ERROR is that MATCH_ERROR means that a match was\n    successful, but that something non-syntactic is wrong and an error\n    has already been issued.  */\n \n-typedef enum\n-{ MATCH_NO = 1, MATCH_YES, MATCH_ERROR }\n-match;\n+enum match\n+{ MATCH_NO = 1, MATCH_YES, MATCH_ERROR };\n \n /* Used for different Fortran source forms in places like scanner.c.  */\n-typedef enum\n-{ FORM_FREE, FORM_FIXED, FORM_UNKNOWN }\n-gfc_source_form;\n+enum gfc_source_form\n+{ FORM_FREE, FORM_FIXED, FORM_UNKNOWN };\n \n /* Expression node types.  */\n-typedef enum\n+enum expr_t\n { EXPR_OP = 1, EXPR_FUNCTION, EXPR_CONSTANT, EXPR_VARIABLE,\n   EXPR_SUBSTRING, EXPR_STRUCTURE, EXPR_ARRAY, EXPR_NULL, EXPR_COMPCALL, EXPR_PPC\n-}\n-expr_t;\n+};\n \n /* Array types.  */\n-typedef enum\n+enum array_type\n { AS_EXPLICIT = 1, AS_ASSUMED_SHAPE, AS_DEFERRED,\n   AS_ASSUMED_SIZE, AS_IMPLIED_SHAPE, AS_ASSUMED_RANK,\n   AS_UNKNOWN\n-}\n-array_type;\n+};\n \n-typedef enum\n-{ AR_FULL = 1, AR_ELEMENT, AR_SECTION, AR_UNKNOWN }\n-ar_type;\n+enum ar_type\n+{ AR_FULL = 1, AR_ELEMENT, AR_SECTION, AR_UNKNOWN };\n \n /* Statement label types. ST_LABEL_DO_TARGET is used for obsolescent warnings\n    related to shared DO terminations and DO targets which are neither END DO\n    nor CONTINUE; otherwise it is identical to ST_LABEL_TARGET.  */\n-typedef enum\n+enum gfc_sl_type\n { ST_LABEL_UNKNOWN = 1, ST_LABEL_TARGET, ST_LABEL_DO_TARGET,\n   ST_LABEL_BAD_TARGET, ST_LABEL_FORMAT\n-}\n-gfc_sl_type;\n+};\n \n /* Intrinsic operators.  */\n-typedef enum\n+enum gfc_intrinsic_op\n { GFC_INTRINSIC_BEGIN = 0,\n   INTRINSIC_NONE = -1, INTRINSIC_UPLUS = GFC_INTRINSIC_BEGIN,\n   INTRINSIC_UMINUS, INTRINSIC_PLUS, INTRINSIC_MINUS, INTRINSIC_TIMES,\n@@ -179,22 +170,20 @@ typedef enum\n   INTRINSIC_LT_OS, INTRINSIC_LE_OS,\n   INTRINSIC_NOT, INTRINSIC_USER, INTRINSIC_ASSIGN,\n   INTRINSIC_PARENTHESES, GFC_INTRINSIC_END /* Sentinel */\n-}\n-gfc_intrinsic_op;\n+};\n \n /* This macro is the number of intrinsic operators that exist.\n    Assumptions are made about the numbering of the interface_op enums.  */\n #define GFC_INTRINSIC_OPS GFC_INTRINSIC_END\n \n /* Arithmetic results.  */\n-typedef enum\n+enum arith\n { ARITH_OK = 1, ARITH_OVERFLOW, ARITH_UNDERFLOW, ARITH_NAN,\n   ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT\n-}\n-arith;\n+};\n \n /* Statements.  */\n-typedef enum\n+enum gfc_statement\n {\n   ST_ARITHMETIC_IF, ST_ALLOCATE, ST_ATTR_DECL, ST_ASSOCIATE,\n   ST_BACKSPACE, ST_BLOCK, ST_BLOCK_DATA,\n@@ -252,62 +241,54 @@ typedef enum\n   ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n   ST_PROCEDURE, ST_GENERIC, ST_CRITICAL, ST_END_CRITICAL,\n   ST_GET_FCN_CHARACTERISTICS, ST_LOCK, ST_UNLOCK, ST_NONE\n-}\n-gfc_statement;\n+};\n \n /* Types of interfaces that we can have.  Assignment interfaces are\n    considered to be intrinsic operators.  */\n-typedef enum\n+enum interface_type\n {\n   INTERFACE_NAMELESS = 1, INTERFACE_GENERIC,\n   INTERFACE_INTRINSIC_OP, INTERFACE_USER_OP, INTERFACE_ABSTRACT\n-}\n-interface_type;\n+};\n \n /* Symbol flavors: these are all mutually exclusive.\n    10 elements = 4 bits.  */\n-typedef enum sym_flavor\n+enum sym_flavor\n {\n   FL_UNKNOWN = 0, FL_PROGRAM, FL_BLOCK_DATA, FL_MODULE, FL_VARIABLE,\n   FL_PARAMETER, FL_LABEL, FL_PROCEDURE, FL_DERIVED, FL_NAMELIST,\n   FL_VOID\n-}\n-sym_flavor;\n+};\n \n /* Procedure types.  7 elements = 3 bits.  */\n-typedef enum procedure_type\n+enum procedure_type\n { PROC_UNKNOWN, PROC_MODULE, PROC_INTERNAL, PROC_DUMMY,\n   PROC_INTRINSIC, PROC_ST_FUNCTION, PROC_EXTERNAL\n-}\n-procedure_type;\n+};\n \n /* Intent types.  */\n-typedef enum sym_intent\n+enum sym_intent\n { INTENT_UNKNOWN = 0, INTENT_IN, INTENT_OUT, INTENT_INOUT\n-}\n-sym_intent;\n+};\n \n /* Access types.  */\n-typedef enum gfc_access\n+enum gfc_access\n { ACCESS_UNKNOWN = 0, ACCESS_PUBLIC, ACCESS_PRIVATE\n-}\n-gfc_access;\n+};\n \n /* Flags to keep track of where an interface came from.\n    3 elements = 2 bits.  */\n-typedef enum ifsrc\n+enum ifsrc\n { IFSRC_UNKNOWN = 0,\t/* Interface unknown, only return type may be known.  */\n   IFSRC_DECL,\t\t/* FUNCTION or SUBROUTINE declaration.  */\n   IFSRC_IFBODY\t\t/* INTERFACE statement or PROCEDURE statement\n \t\t\t   with explicit interface.  */\n-}\n-ifsrc;\n+};\n \n /* Whether a SAVE attribute was set explicitly or implicitly.  */\n-typedef enum save_state\n+enum save_state\n { SAVE_NONE = 0, SAVE_EXPLICIT, SAVE_IMPLICIT\n-}\n-save_state;\n+};\n \n /* Strings for all symbol attributes.  We use these for dumping the\n    parse tree, in error messages, and also when reading and writing\n@@ -602,38 +583,33 @@ enum gfc_isym_id\n   GFC_ISYM_YN,\n   GFC_ISYM_YN2\n };\n-typedef enum gfc_isym_id gfc_isym_id;\n \n-typedef enum\n+enum init_local_logical\n {\n   GFC_INIT_LOGICAL_OFF = 0,\n   GFC_INIT_LOGICAL_FALSE,\n   GFC_INIT_LOGICAL_TRUE\n-}\n-init_local_logical;\n+};\n \n-typedef enum\n+enum init_local_character\n {\n   GFC_INIT_CHARACTER_OFF = 0,\n   GFC_INIT_CHARACTER_ON\n-}\n-init_local_character;\n+};\n \n-typedef enum\n+enum init_local_integer\n {\n   GFC_INIT_INTEGER_OFF = 0,\n   GFC_INIT_INTEGER_ON\n-}\n-init_local_integer;\n+};\n \n-typedef enum\n+enum gfc_reverse\n {\n   GFC_ENABLE_REVERSE,\n   GFC_FORWARD_SET,\n   GFC_REVERSE_SET,\n   GFC_INHIBIT_REVERSE\n-}\n-gfc_reverse;\n+};\n \n /************************* Structures *****************************/\n \n@@ -645,13 +621,12 @@ gfc_reverse;\n #define NAMED_FUNCTION(a,b,c,d) a,\n #define NAMED_SUBROUTINE(a,b,c,d) a,\n #define NAMED_DERIVED_TYPE(a,b,c,d) a,\n-typedef enum\n+enum iso_fortran_env_symbol\n {\n   ISOFORTRANENV_INVALID = -1,\n #include \"iso-fortran-env.def\"\n   ISOFORTRANENV_LAST, ISOFORTRANENV_NUMBER = ISOFORTRANENV_LAST\n-}\n-iso_fortran_env_symbol;\n+};\n #undef NAMED_INTCST\n #undef NAMED_KINDARRAY\n #undef NAMED_FUNCTION\n@@ -667,14 +642,13 @@ iso_fortran_env_symbol;\n #define DERIVED_TYPE(a,b,c) a,\n #define NAMED_FUNCTION(a,b,c,d) a,\n #define NAMED_SUBROUTINE(a,b,c,d) a,\n-typedef enum\n+enum iso_c_binding_symbol\n {\n   ISOCBINDING_INVALID = -1,\n #include \"iso-c-binding.def\"\n   ISOCBINDING_LAST,\n   ISOCBINDING_NUMBER = ISOCBINDING_LAST\n-}\n-iso_c_binding_symbol;\n+};\n #undef NAMED_INTCST\n #undef NAMED_REALCST\n #undef NAMED_CMPXCST\n@@ -685,12 +659,11 @@ iso_c_binding_symbol;\n #undef NAMED_FUNCTION\n #undef NAMED_SUBROUTINE\n \n-typedef enum\n+enum intmod_id\n {\n   INTMOD_NONE = 0, INTMOD_ISO_FORTRAN_ENV, INTMOD_ISO_C_BINDING,\n   INTMOD_IEEE_FEATURES, INTMOD_IEEE_EXCEPTIONS, INTMOD_IEEE_ARITHMETIC\n-}\n-intmod_id;\n+};\n \n typedef struct\n {\n@@ -1095,7 +1068,7 @@ gfc_expr_list;\n \n #define gfc_get_expr_list() XCNEW (gfc_expr_list)\n \n-typedef enum\n+enum gfc_omp_reduction_op\n {\n   OMP_REDUCTION_NONE = -1,\n   OMP_REDUCTION_PLUS = INTRINSIC_PLUS,\n@@ -1111,18 +1084,16 @@ typedef enum\n   OMP_REDUCTION_IOR,\n   OMP_REDUCTION_IEOR,\n   OMP_REDUCTION_USER\n-}\n-gfc_omp_reduction_op;\n+};\n \n-typedef enum\n+enum gfc_omp_depend_op\n {\n   OMP_DEPEND_IN,\n   OMP_DEPEND_OUT,\n   OMP_DEPEND_INOUT\n-}\n-gfc_omp_depend_op;\n+};\n \n-typedef enum\n+enum gfc_omp_map_op\n {\n   OMP_MAP_ALLOC,\n   OMP_MAP_TO,\n@@ -1135,8 +1106,7 @@ typedef enum\n   OMP_MAP_FORCE_TOFROM,\n   OMP_MAP_FORCE_PRESENT,\n   OMP_MAP_FORCE_DEVICEPTR\n-}\n-gfc_omp_map_op;\n+};\n \n /* For use in OpenMP clauses in case we need extra information\n    (aligned clause alignment, linear clause step, etc.).  */\n@@ -1796,9 +1766,8 @@ gfc_array_ref;\n    resolution.  The array_ref component may be present and comes\n    before the component component.  */\n \n-typedef enum\n-  { REF_ARRAY, REF_COMPONENT, REF_SUBSTRING }\n-ref_type;\n+enum ref_type\n+  { REF_ARRAY, REF_COMPONENT, REF_SUBSTRING };\n \n typedef struct gfc_ref\n {\n@@ -2329,7 +2298,7 @@ gfc_association_list;\n \n \n /* Executable statements that fill gfc_code structures.  */\n-typedef enum\n+enum gfc_exec_op\n {\n   EXEC_NOP = 1, EXEC_END_NESTED_BLOCK, EXEC_END_BLOCK, EXEC_ASSIGN,\n   EXEC_LABEL_ASSIGN, EXEC_POINTER_ASSIGN, EXEC_CRITICAL, EXEC_ERROR_STOP,\n@@ -2366,10 +2335,9 @@ typedef enum\n   EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n   EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,\n   EXEC_OMP_TARGET_UPDATE\n-}\n-gfc_exec_op;\n+};\n \n-typedef enum\n+enum gfc_omp_atomic_op\n {\n   GFC_OMP_ATOMIC_UPDATE = 0,\n   GFC_OMP_ATOMIC_READ = 1,\n@@ -2378,8 +2346,7 @@ typedef enum\n   GFC_OMP_ATOMIC_MASK = 3,\n   GFC_OMP_ATOMIC_SEQ_CST = 4,\n   GFC_OMP_ATOMIC_SWAP = 8\n-}\n-gfc_omp_atomic_op;\n+};\n \n typedef struct gfc_code\n {"}, {"sha": "cff2b689786726dd50845ac944c7ef814e5c7b43", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -106,16 +106,15 @@ static gfc_dt *current_dt;\n /**************** Fortran 95 FORMAT parser  *****************/\n \n /* FORMAT tokens returned by format_lex().  */\n-typedef enum\n+enum format_token\n {\n   FMT_NONE, FMT_UNKNOWN, FMT_SIGNED_INT, FMT_ZERO, FMT_POSINT, FMT_PERIOD,\n   FMT_COMMA, FMT_COLON, FMT_SLASH, FMT_DOLLAR, FMT_LPAREN,\n   FMT_RPAREN, FMT_X, FMT_SIGN, FMT_BLANK, FMT_CHAR, FMT_P, FMT_IBOZ, FMT_F,\n   FMT_E, FMT_EN, FMT_ES, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END,\n   FMT_ERROR, FMT_DC, FMT_DP, FMT_T, FMT_TR, FMT_TL, FMT_STAR, FMT_RC,\n   FMT_RD, FMT_RN, FMT_RP, FMT_RU, FMT_RZ\n-}\n-format_token;\n+};\n \n /* Local variables for checking format strings.  The saved_token is\n    used to back up by a single format token during the parsing"}, {"sha": "621ef36d170299547bd01a7f70dfb497ec3a1a1e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1117,11 +1117,10 @@ gzopen_intrinsic_module (const char* name)\n }\n \n \n-typedef enum\n+enum atom_type\n {\n   ATOM_NAME, ATOM_LPAREN, ATOM_RPAREN, ATOM_INTEGER, ATOM_STRING\n-}\n-atom_type;\n+};\n \n static atom_type last_atom;\n \n@@ -1971,7 +1970,7 @@ mio_internal_string (char *string)\n }\n \n \n-typedef enum\n+enum ab_attribute\n { AB_ALLOCATABLE, AB_DIMENSION, AB_EXTERNAL, AB_INTRINSIC, AB_OPTIONAL,\n   AB_POINTER, AB_TARGET, AB_DUMMY, AB_RESULT, AB_DATA,\n   AB_IN_NAMELIST, AB_IN_COMMON, AB_FUNCTION, AB_SUBROUTINE, AB_SEQUENCE,\n@@ -1984,8 +1983,7 @@ typedef enum\n   AB_COARRAY_COMP, AB_VTYPE, AB_VTAB, AB_CONTIGUOUS, AB_CLASS_POINTER,\n   AB_IMPLICIT_PURE, AB_ARTIFICIAL, AB_UNLIMITED_POLY, AB_OMP_DECLARE_TARGET,\n   AB_ARRAY_OUTER_DEPENDENCY, AB_MODULE_PROCEDURE\n-}\n-ab_attribute;\n+};\n \n static const mstring attr_bits[] =\n {"}, {"sha": "bcd714d3bd2176db1b8bee8120fd15d9fa7af3c4", "filename": "gcc/fortran/parse.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -23,15 +23,14 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_PARSE_H\n \n /* Enum for what the compiler is currently doing.  */\n-typedef enum\n+enum gfc_compile_state\n {\n   COMP_NONE, COMP_PROGRAM, COMP_MODULE, COMP_SUBMODULE, COMP_SUBROUTINE,\n   COMP_FUNCTION, COMP_BLOCK_DATA, COMP_INTERFACE, COMP_DERIVED,\n   COMP_DERIVED_CONTAINS, COMP_BLOCK, COMP_ASSOCIATE, COMP_IF,\n   COMP_DO, COMP_SELECT, COMP_FORALL, COMP_WHERE, COMP_CONTAINS, COMP_ENUM,\n   COMP_SELECT_TYPE, COMP_OMP_STRUCTURED_BLOCK, COMP_CRITICAL, COMP_DO_CONCURRENT\n-}\n-gfc_compile_state;\n+};\n \n /* Stack element for the current compilation state.  These structures\n    are allocated as automatic variables.  */"}, {"sha": "a3041589df94c3d1caf54ff873808cc4268ef59d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -33,11 +33,10 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Types used in equivalence statements.  */\n \n-typedef enum seq_type\n+enum seq_type\n {\n   SEQ_NONDEFAULT, SEQ_NUMERIC, SEQ_CHARACTER, SEQ_MIXED\n-}\n-seq_type;\n+};\n \n /* Stack to keep track of the nesting of blocks as we move through the\n    code.  See resolve_branch() and gfc_resolve_code().  */\n@@ -1438,9 +1437,8 @@ specific_sym (gfc_symbol *sym)\n \n /* Figure out if the procedure is specific, generic or unknown.  */\n \n-typedef enum\n-{ PTYPE_GENERIC = 1, PTYPE_SPECIFIC, PTYPE_UNKNOWN }\n-proc_type;\n+enum proc_type\n+{ PTYPE_GENERIC = 1, PTYPE_SPECIFIC, PTYPE_UNKNOWN };\n \n static proc_type\n procedure_kind (gfc_symbol *sym)\n@@ -3850,9 +3848,8 @@ resolve_operator (gfc_expr *e)\n \n /************** Array resolution subroutines **************/\n \n-typedef enum\n-{ CMP_LT, CMP_EQ, CMP_GT, CMP_UNKNOWN }\n-compare_result;\n+enum compare_result\n+{ CMP_LT, CMP_EQ, CMP_GT, CMP_UNKNOWN };\n \n /* Compare two integer expressions.  */\n "}, {"sha": "c1ea5542bf6a0ed7877fef9f2ba52f38f627106c", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -44,12 +44,12 @@ extern GTY(()) tree gfc_charlen_type_node;\n    and __float128.  */\n extern bool gfc_real16_is_float128;\n \n-typedef enum {\n+enum gfc_packed {\n   PACKED_NO = 0,\n   PACKED_PARTIAL,\n   PACKED_FULL,\n   PACKED_STATIC\n-} gfc_packed;\n+};\n \n /* be-function.c */\n void gfc_convert_function_code (gfc_namespace *);"}, {"sha": "541640d1c037e0f66e2f97472039da95b42f443f", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -107,15 +107,14 @@ gfc_se;\n \n /* Denotes different types of coarray.\n    Please keep in sync with libgfortran/caf/libcaf.h.  */\n-typedef enum\n+enum gfc_coarray_type\n {\n   GFC_CAF_COARRAY_STATIC,\n   GFC_CAF_COARRAY_ALLOC,\n   GFC_CAF_LOCK_STATIC,\n   GFC_CAF_LOCK_ALLOC,\n   GFC_CAF_CRITICAL\n-}\n-gfc_coarray_type;\n+};\n \n \n /* The array-specific scalarization information.  The array members of\n@@ -148,7 +147,7 @@ typedef struct gfc_array_info\n }\n gfc_array_info;\n \n-typedef enum\n+enum gfc_ss_type\n {\n   /* A scalar value.  This will be evaluated before entering the\n      scalarization loop.  */\n@@ -190,8 +189,7 @@ typedef enum\n \n   /* A component of a derived type.  */\n   GFC_SS_COMPONENT\n-}\n-gfc_ss_type;\n+};\n \n \n typedef struct gfc_ss_info"}, {"sha": "43f762baa6647ee6ede1dd140c19d7ef16f0a244", "filename": "gcc/gcse-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fgcse-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fgcse-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse-common.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -22,11 +22,11 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_GCSE_COMMON_H\n \n typedef vec<rtx_insn *> vec_rtx_heap;\n-typedef struct modify_pair_s\n+struct modify_pair\n {\n   rtx dest;                     /* A MEM.  */\n   rtx dest_addr;                /* The canonical address of `dest'.  */\n-} modify_pair;\n+};\n \n typedef vec<modify_pair> vec_modify_pair_heap;\n "}, {"sha": "77e81f5e4fbaae5df1934d0976aa81a4ab4530ad", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -104,7 +104,7 @@ typedef enum optab_tag {\n #define OPTAB_DC(o, p, c)          { #o, p, NS, ZS, NS, o, c, c, 4 },\n #define OPTAB_D(o, p)  { #o, p, NS, ZS, NS, o, UNKNOWN, UNKNOWN, 4 },\n \n-typedef struct optab_def_d\n+struct optab_def\n {\n   const char *name;\n   const char *pattern;\n@@ -115,7 +115,7 @@ typedef struct optab_def_d\n   enum rtx_code fcode;\n   enum rtx_code rcode;\n   unsigned int kind;\n-} optab_def;\n+};\n \n static optab_def optabs[] = {\n   { \"unknown_optab\", NULL, NS, ZS, NS, unknown_optab, UNKNOWN, UNKNOWN, 0 },\n@@ -136,13 +136,13 @@ static optab_def optabs[] = {\n \n /* Vector in which to collect insns that match.  */\n \n-typedef struct pattern_d\n+struct pattern\n {\n   const char *name;\n   unsigned int op;\n   unsigned int m1, m2;\n   unsigned int sort_num;\n-} pattern;\n+};\n \n \n static vec<pattern> patterns;"}, {"sha": "58f19c0d24e7e31b76c0b496c7c69b2cfc8b7e87", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -245,7 +245,7 @@ inverse_table[NUM_ORDERS];\n \n /* A page_entry records the status of an allocation page.  This\n    structure is dynamically sized to fit the bitmap in_use_p.  */\n-typedef struct page_entry\n+struct page_entry\n {\n   /* The next page-entry with objects of the same size, or NULL if\n      this is the last page-entry.  */\n@@ -292,12 +292,12 @@ typedef struct page_entry\n      Nth bit is one if the Nth object on this page is allocated.  This\n      array is dynamically sized.  */\n   unsigned long in_use_p[1];\n-} page_entry;\n+};\n \n #ifdef USING_MALLOC_PAGE_GROUPS\n /* A page_group describes a large allocation from malloc, from which\n    we parcel out aligned pages.  */\n-typedef struct page_group\n+struct page_group\n {\n   /* A linked list of all extant page groups.  */\n   struct page_group *next;\n@@ -310,7 +310,7 @@ typedef struct page_group\n \n   /* A bitmask of pages in use.  */\n   unsigned int in_use;\n-} page_group;\n+};\n #endif\n \n #if HOST_BITS_PER_PTR <= 32"}, {"sha": "6f5ab78ca45d50c65a3d9b1b83d75ead89a29e0b", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,7 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* lto.h: Remove useless typedefs.\n+\n 2015-07-15  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* lto.c: Remove redundant includes."}, {"sha": "7b9f4f341f156cb4b201f954c93bebb48194cf5c", "filename": "gcc/lto/lto.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Flto%2Flto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Flto%2Flto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -23,13 +23,13 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* A file.  */\n-typedef struct lto_file_struct\n+struct lto_file\n {\n   /* The name of the file.  */\n   const char *filename;\n   /* The offset for the object inside an ar archive file (or zero).  */\n   off_t offset;\n-} lto_file;\n+};\n \n /* In lto-lang.c  */\n extern const char *resolution_file_name;"}, {"sha": "66ac7c0539d8afa9612cbe45c06a2c681507b76a", "filename": "gcc/machmode.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -340,12 +340,12 @@ extern void init_adjust_machine_modes (void);\n   (SCALAR_INT_MODE_P (MODE) \\\n    && GET_MODE_PRECISION (MODE) <= HOST_BITS_PER_WIDE_INT)\n \n-typedef struct {\n+struct int_n_data_t {\n   /* These parts are initailized by genmodes output */\n   unsigned int bitsize;\n   machine_mode m;\n   /* RID_* is RID_INTN_BASE + index into this array */\n-} int_n_data_t;\n+};\n \n /* This is also in tree.h.  genmodes.c guarantees the're sorted from\n    smallest bitsize to largest bitsize. */"}, {"sha": "121a334b02666ae3ebc1e16b734b93de9eef8894", "filename": "gcc/mcf.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -61,7 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Limit the number of iterations for cancel_negative_cycles() to ensure\n    reasonable compile time.  */\n #define MAX_ITER(n, e)  10 + (1000000 / ((n) * (e)))\n-typedef enum\n+enum edge_type\n {\n   INVALID_EDGE,\n   VERTEX_SPLIT_EDGE,\t    /* Edge to represent vertex with w(e) = w(v).  */\n@@ -72,10 +72,10 @@ typedef enum\n   BALANCE_EDGE,\t\t    /* Edge connecting with source/sink: cp(e) = 0.  */\n   REDIRECT_NORMALIZED_EDGE, /* Normalized edge for a redirect edge.  */\n   REVERSE_NORMALIZED_EDGE   /* Normalized edge for a reverse edge.  */\n-} edge_type;\n+};\n \n /* Structure to represent an edge in the fixup graph.  */\n-typedef struct fixup_edge_d\n+struct fixup_edge_type\n {\n   int src;\n   int dest;\n@@ -91,21 +91,21 @@ typedef struct fixup_edge_d\n   gcov_type weight;\n   gcov_type cost;\n   gcov_type max_capacity;\n-} fixup_edge_type;\n+};\n \n typedef fixup_edge_type *fixup_edge_p;\n \n \n /* Structure to represent a vertex in the fixup graph.  */\n-typedef struct fixup_vertex_d\n+struct fixup_vertex_type\n {\n   vec<fixup_edge_p> succ_edges;\n-} fixup_vertex_type;\n+};\n \n typedef fixup_vertex_type *fixup_vertex_p;\n \n /* Fixup graph used in the MCF algorithm.  */\n-typedef struct fixup_graph_d\n+struct fixup_graph_type\n {\n   /* Current number of vertices for the graph.  */\n   int num_vertices;\n@@ -119,26 +119,26 @@ typedef struct fixup_graph_d\n   fixup_vertex_p vertex_list;\n   /* Fixup edge list.  */\n   fixup_edge_p edge_list;\n-} fixup_graph_type;\n+};\n \n-typedef struct queue_d\n+struct queue_type\n {\n   int *queue;\n   int head;\n   int tail;\n   int size;\n-} queue_type;\n+};\n \n /* Structure used in the maximal flow routines to find augmenting path.  */\n-typedef struct augmenting_path_d\n+struct augmenting_path_type\n {\n   /* Queue used to hold vertex indices.  */\n   queue_type queue_list;\n   /* Vector to hold chain of pred vertex indices in augmenting path.  */\n   int *bb_pred;\n   /* Vector that indicates if basic block i has been visited.  */\n   int *is_visited;\n-} augmenting_path_type;\n+};\n \n \n /* Function definitions.  */"}, {"sha": "5604ddefc18f3cbb9cfd8771bffbc9be37aa7672", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -171,8 +171,6 @@ struct ps_reg_move_info\n   rtx_insn *insn;\n };\n \n-typedef struct ps_reg_move_info ps_reg_move_info;\n-\n /* Holds the partial schedule as an array of II rows.  Each entry of the\n    array points to a linked list of PS_INSNs, which represents the\n    instructions that are scheduled for that row.  */\n@@ -257,8 +255,6 @@ typedef struct node_sched_params\n      u will precede v if column (u) < column (v).  */\n   int column;\n } *node_sched_params_ptr;\n-\n-typedef struct node_sched_params node_sched_params;\n \f\n /* The following three functions are copied from the current scheduler\n    code in order to use sched_analyze() for computing the dependencies."}, {"sha": "e1c730ebeac6bb2256e7171ebef0a3101d6b17d5", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1,3 +1,8 @@\n+2015-08-18  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* objc-act.h, objc-next-runtime-abi-02.c, objc-runtime-hooks.h:\n+\tRemove useless typedefs.\n+\n 2015-07-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* objc-map.h: Fix double word typos."}, {"sha": "55afba417d42ace19a4cc2c122f755bc01324642", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -95,11 +95,11 @@ void objc_common_init_ts (void);\n #define PROPERTY_NONATOMIC(DECL) \\\n    DECL_LANG_FLAG_1 (PROPERTY_DECL_CHECK (DECL))\n \n-typedef enum objc_property_assign_semantics {\n+enum objc_property_assign_semantics {\n   OBJC_PROPERTY_ASSIGN = 1,\n   OBJC_PROPERTY_RETAIN = 2,\n   OBJC_PROPERTY_COPY = 3\n-} objc_property_assign_semantics;\n+};\n \n /* PROPERTY_ASSIGN_SEMANTICS can be OBJC_PROPERTY_ASSIGN,\n    OBJC_PROPERTY_RETAIN or OBJC_PROPERTY_COPY.  We need an integer to\n@@ -291,7 +291,7 @@ extern GTY(()) struct imp_entry *imp_list;\n extern GTY(()) int imp_count;\t/* `@implementation' */\n extern GTY(()) int cat_count;\t/* `@category' */\n \n-extern GTY(()) objc_ivar_visibility_kind objc_ivar_visibility;\n+extern GTY(()) enum objc_ivar_visibility_kind objc_ivar_visibility;\n \n /* Objective-C/Objective-C++ global tree enumeration.  */\n \n@@ -645,13 +645,13 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define TAG_ENUMERATION_MUTATION        \"objc_enumerationMutation\"\n #define TAG_FAST_ENUMERATION_STATE      \"__objcFastEnumerationState\"\n \n-typedef enum string_section\n+enum string_section\n {\n   class_names,\t\t/* class, category, protocol, module names */\n   meth_var_names,\t/* method and variable names */\n   meth_var_types,\t/* method and variable type descriptors */\n   prop_names_attr\t/* property names and their attributes. */\n-} string_section;\n+};\n \n #define METHOD_DEF\t\t\t0\n #define METHOD_REF\t\t\t1"}, {"sha": "73b591e830c34327e0469b994e82750873a9bb41", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -1014,10 +1014,10 @@ next_runtime_abi_02_string_decl (tree type, const char *name,  string_section wh\n \n /* NOTE --- entry --- */\n \n-typedef struct GTY(()) ident_data_tuple {\n+struct GTY(()) ident_data_tuple {\n   tree ident;\n   tree data;\n-} ident_data_tuple ;\n+};\n \n /* This routine creates a file scope static variable of type 'Class'\n    to hold the address of a class.  */\n@@ -1198,11 +1198,11 @@ build_v2_message_reference_decl (tree sel_name, tree message_func_ident)\n   return decl;\n }\n \n-typedef struct GTY(()) msgref_entry {\n+struct GTY(()) msgref_entry {\n   tree func;\n   tree selname;\n   tree refdecl;\n-} msgref_entry;\n+};\n \n static GTY (()) vec<msgref_entry, va_gc> *msgrefs;\n \n@@ -1254,10 +1254,10 @@ build_v2_protocollist_ref_decl (tree protocol)\n   return decl;\n }\n \n-typedef struct GTY(()) prot_list_entry {\n+struct GTY(()) prot_list_entry {\n   tree id;\n   tree refdecl;\n-} prot_list_entry;\n+};\n static GTY (()) vec<prot_list_entry, va_gc> *protrefs;\n \n static tree\n@@ -2758,11 +2758,11 @@ generate_v2_category (struct imp_entry *impent)\n /* This routine declares a variable to hold the offset for ivar\n    FIELD_DECL.  Variable name is .objc_ivar.ClassName.IvarName.  */\n \n-typedef struct GTY(()) ivarref_entry\n+struct GTY(()) ivarref_entry\n {\n   tree decl;\n   tree offset;\n-} ivarref_entry;\n+};\n \n static GTY (()) vec<ivarref_entry, va_gc> *ivar_offset_refs;\n "}, {"sha": "a97aa016666f620183571149124152ddd4df7fe2", "filename": "gcc/objc/objc-runtime-hooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-runtime-hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fobjc%2Fobjc-runtime-hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-runtime-hooks.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n    differences from the parser's perspective.  */\n \n /* TODO: Do we want the initial underscore ? */\n-typedef struct _objc_runtime_hooks_r\n+struct objc_runtime_hooks\n {\n   /* TODO: Expand comments in this file.  */\n \n@@ -97,7 +97,7 @@ typedef struct _objc_runtime_hooks_r\n      during parsing.  */\n   void (*generate_metadata) (void);\n \n-} objc_runtime_hooks;\n+};\n \n /* For shared support that needs to access these.  */\n extern objc_runtime_hooks runtime;"}, {"sha": "7cf51b3faded26df6901e02e1a20c8a6db520fd1", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -142,7 +142,7 @@ struct omp_region\n /* Context structure.  Used to store information about each parallel\n    directive in the code.  */\n \n-typedef struct omp_context\n+struct omp_context\n {\n   /* This field must be at the beginning, as we do \"inheritance\": Some\n      callback functions for tree-inline.c (e.g., omp_copy_decl)\n@@ -204,7 +204,7 @@ typedef struct omp_context\n      this level and above.  For parallel and kernels clauses, a mask\n      indicating which of num_gangs/num_workers/num_vectors was used.  */\n   int gwv_this;\n-} omp_context;\n+};\n \n /* A structure holding the elements of:\n    for (V = N1; V cond N2; V += STEP) [...] */"}, {"sha": "ff08505badc4011b49ee4dff34f43c6a6c1919b5", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -80,9 +80,6 @@ struct iterator_use {\n   void *ptr;\n };\n \n-/* Vector definitions for the above.  */\n-typedef struct iterator_use iterator_use;\n-\n /* Records one use of an attribute (the \"<[iterator:]attribute>\" syntax)\n    in a non-string rtx field.  */\n struct attribute_use {\n@@ -96,9 +93,6 @@ struct attribute_use {\n   void *ptr;\n };\n \n-/* Vector definitions for the above.  */\n-typedef struct attribute_use attribute_use;\n-\n /* This struct is used to link subst_attr named ATTR_NAME with\n    corresponding define_subst named ITER_NAME.  */\n struct subst_attr_to_iter_mapping"}, {"sha": "2ebb63567fef349f6c8df170241acfbcae725d3c", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -140,22 +140,20 @@ static state_t *bb_state = NULL;\n    while other blocks in the region from which insns can be moved to the\n    target are called \"source\" blocks.  The candidate structure holds info\n    about such sources: are they valid?  Speculative?  Etc.  */\n-typedef struct\n+struct bblst\n {\n   basic_block *first_member;\n   int nr_members;\n-}\n-bblst;\n+};\n \n-typedef struct\n+struct candidate\n {\n   char is_valid;\n   char is_speculative;\n   int src_prob;\n   bblst split_bbs;\n   bblst update_bbs;\n-}\n-candidate;\n+};\n \n static candidate *candidate_table;\n #define IS_VALID(src) (candidate_table[src].is_valid)\n@@ -168,12 +166,11 @@ static candidate *candidate_table;\n int target_bb;\n \n /* List of edges.  */\n-typedef struct\n+struct edgelst\n {\n   edge *first_member;\n   int nr_members;\n-}\n-edgelst;\n+};\n \n static edge *edgelst_table;\n static int edgelst_last;"}, {"sha": "94024d1039514d5a3dde7d6d27bb615e42781e26", "filename": "gcc/signop.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fsignop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fsignop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsignop.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -25,11 +25,9 @@ along with GCC; see the file COPYING3.  If not see\n    unsigned types.  The signedness of a tree type can be found by\n    using the TYPE_SIGN macro.  */\n \n-enum signop_e {\n+enum signop {\n   SIGNED,\n   UNSIGNED\n };\n \n-typedef enum signop_e signop;\n-\n #endif"}, {"sha": "874d853d92271f51b4eb0e797cac6018d772a2a7", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -86,15 +86,15 @@ along with GCC; see the file COPYING3.  If not see\n    to indicate if lb and ub value are inclusive\n    respectively.  */\n \n-typedef struct input_domain\n+struct inp_domain\n {\n   int lb;\n   int ub;\n   bool has_lb;\n   bool has_ub;\n   bool is_lb_inclusive;\n   bool is_ub_inclusive;\n-} inp_domain;\n+};\n \n /* A helper function to construct and return an input\n    domain object.  LB is the lower bound, HAS_LB is"}, {"sha": "229fb2ff051e38c3d89158f936c14a99953be67f", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -830,12 +830,11 @@ stmt_references_abnormal_ssa_name (gimple stmt)\n }\n \n /* Pair of tree and a sorting index, for dump_enumerated_decls.  */\n-struct GTY(()) numbered_tree_d\n+struct GTY(()) numbered_tree\n {\n   tree t;\n   int num;\n };\n-typedef struct numbered_tree_d numbered_tree;\n \n \n /* Compare two declarations references by their DECL_UID / sequence number."}, {"sha": "135f142d9ee4882ebaa35ae0c3fb51d28c449205", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -56,11 +56,11 @@ default_tree_diagnostic_starter (diagnostic_context *context,\n /* This is a pair made of a location and the line map it originated\n    from.  It's used in the maybe_unwind_expanded_macro_loc function\n    below.  */\n-typedef struct\n+struct loc_map_pair\n {\n   const line_map_macro *map;\n   source_location where;\n-} loc_map_pair;\n+};\n \n \n /* Unwind the different macro expansions that lead to the token which"}, {"sha": "3c53190c73f2dcc31328f013f3718aa8ecf94056", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -152,7 +152,7 @@ struct copy_body_data\n \n /* Weights of constructions for estimate_num_insns.  */\n \n-typedef struct eni_weights_d\n+struct eni_weights\n {\n   /* Cost per call.  */\n   unsigned call_cost;\n@@ -179,7 +179,7 @@ typedef struct eni_weights_d\n      cost of a switch statement is logarithmic rather than linear in number\n      of cases.  */\n   bool time_based;\n-} eni_weights;\n+};\n \n /* Weights that estimate_num_insns uses for heuristics in inlining.  */\n "}, {"sha": "54fe223cf0de78442001b2221cdd1ead87f59014", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -895,11 +895,11 @@ get_loop_exit_condition (const struct loop *loop)\n \f\n /* Depth first search algorithm.  */\n \n-typedef enum t_bool {\n+enum t_bool {\n   t_false,\n   t_true,\n   t_dont_know\n-} t_bool;\n+};\n \n \n static t_bool follow_ssa_edge (struct loop *loop, gimple, gphi *,"}, {"sha": "042f9c9923bcc18eca0b4920541590ac6c8a297e", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -85,13 +85,13 @@ along with GCC; see the file COPYING3.  If not see\n /* A \"template\" for memory address, used to determine whether the address is\n    valid for mode.  */\n \n-typedef struct GTY (()) mem_addr_template {\n+struct GTY (()) mem_addr_template {\n   rtx ref;\t\t\t/* The template.  */\n   rtx * GTY ((skip)) step_p;\t/* The point in template where the step should be\n \t\t\t\t   filled in.  */\n   rtx * GTY ((skip)) off_p;\t/* The point in template where the offset should\n \t\t\t\t   be filled in.  */\n-} mem_addr_template;\n+};\n \n \n /* The templates.  Each of the low five bits of the index corresponds to one"}, {"sha": "4e9a2acb19d0987d8d0337fcab027ab3eb5c6890", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -73,10 +73,10 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Bounds on some value, BELOW <= X <= UP.  */\n \n-typedef struct\n+struct bounds\n {\n   mpz_t below, up;\n-} bounds;\n+};\n \n \n /* Splits expression EXPR to a variable part VAR and constant OFFSET.  */"}, {"sha": "fc7e67b89b3afccddc62cf7cdef9a321942bd21d", "filename": "gcc/tree-ssa-loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -65,7 +65,7 @@ struct tree_niter_desc\n \n extern bool for_each_index (tree *, bool (*) (tree, tree *, void *), void *);\n extern char *get_lsm_tmp_name (tree ref, unsigned n, const char *suffix = NULL);\n-extern unsigned tree_num_loop_insns (struct loop *, struct eni_weights_d *);\n+extern unsigned tree_num_loop_insns (struct loop *, struct eni_weights *);\n \n /* Returns the loop of the statement STMT.  */\n "}, {"sha": "1bf8558a03daab7e74636f172604863d84b3a0d5", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -184,13 +184,13 @@ enum pre_expr_kind\n     CONSTANT\n };\n \n-typedef union pre_expr_union_d\n+union pre_expr_union\n {\n   tree name;\n   tree constant;\n   vn_nary_op_t nary;\n   vn_reference_t reference;\n-} pre_expr_union;\n+};\n \n typedef struct pre_expr_d : nofree_ptr_hash <pre_expr_d>\n {"}, {"sha": "45e7b611fa1ca67601f1a2ffb0da1383f914280a", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -991,12 +991,12 @@ static void linearize_expr_tree (vec<operand_entry_t> *, gimple,\n \t\t\t\t bool, bool);\n \n /* Structure for tracking and counting operands.  */\n-typedef struct oecount_s {\n+struct oecount {\n   int cnt;\n   int id;\n   enum tree_code oecode;\n   tree op;\n-} oecount;\n+};\n \n \n /* The heap for the oecount hashtable and the sorted list of operands.  */"}, {"sha": "41d14afdcbaa2adb1bfe4bb4a10f5d3d5816cca0", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -188,7 +188,7 @@ typedef struct vn_ssa_aux\n   unsigned needs_insertion : 1;\n } *vn_ssa_aux_t;\n \n-typedef enum { VN_NOWALK, VN_WALK, VN_WALKREWRITE } vn_lookup_kind;\n+enum vn_lookup_kind { VN_NOWALK, VN_WALK, VN_WALKREWRITE };\n \n /* Return the value numbering info for an SSA_NAME.  */\n extern vn_ssa_aux_t VN_INFO (tree);"}, {"sha": "44979193ca9344a1f5d97f54051ca80a6e5039ef", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -479,7 +479,7 @@ get_call_clobber_vi (gcall *call)\n }\n \n \n-typedef enum {SCALAR, DEREF, ADDRESSOF} constraint_expr_type;\n+enum constraint_expr_type {SCALAR, DEREF, ADDRESSOF};\n \n /* An expression that appears in a constraint.  */\n "}, {"sha": "ec6d6f5a747e3356ab1cdf99509fba159433589b", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -483,13 +483,13 @@ compute_control_dep_chain (basic_block bb, basic_block dep_bb,\n \n /* The type to represent a simple predicate  */\n \n-typedef struct use_def_pred_info\n+struct pred_info\n {\n   tree pred_lhs;\n   tree pred_rhs;\n   enum tree_code cond_code;\n   bool invert;\n-} pred_info;\n+};\n \n /* The type to represent a sequence of predicates grouped\n   with .AND. operation.  */"}, {"sha": "d00db6a1b4341dfaa7ad6e0fa4209420ad641d34", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -21,12 +21,11 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_SSA_H\n \n /* Mapping for redirected edges.  */\n-struct _edge_var_map {\n+struct edge_var_map {\n   tree result;\t\t\t/* PHI result.  */\n   tree def;\t\t\t/* PHI arg definition.  */\n   source_location locus;        /* PHI arg location.  */\n };\n-typedef struct _edge_var_map edge_var_map;\n \n /* A vector of var maps.  */\n typedef vec<edge_var_map, va_heap, vl_embed> edge_var_map_vector;"}, {"sha": "4feab782bd29bdb704a00b7bf2e8e0b77b52cd0d", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -118,11 +118,11 @@ rename_variables_in_bb (basic_block bb, bool rename_from_outer_loop)\n }\n \n \n-typedef struct\n+struct adjust_info\n {\n   tree from, to;\n   basic_block bb;\n-} adjust_info;\n+};\n \n /* A stack of values to be adjusted in debug stmts.  We have to\n    process them LIFO, so that the closest substitution applies.  If we"}, {"sha": "58e8f10a722392944469a67926d1c7f94724cfa8", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -66,12 +66,12 @@ enum vect_def_type {\n \n /* Structure to encapsulate information about a group of like\n    instructions to be presented to the target cost model.  */\n-typedef struct _stmt_info_for_cost {\n+struct stmt_info_for_cost {\n   int count;\n   enum vect_cost_for_stmt kind;\n   gimple stmt;\n   int misalign;\n-} stmt_info_for_cost;\n+};\n \n \n typedef vec<stmt_info_for_cost> stmt_vector_for_cost;"}, {"sha": "21fbed0811520ab6bc33c9a406f4ad2bb1026573", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -173,10 +173,10 @@ static bool values_propagated;\n    node.  */\n static int *vr_phi_edge_counts;\n \n-typedef struct {\n+struct switch_update {\n   gswitch *stmt;\n   tree vec;\n-} switch_update;\n+};\n \n static vec<edge> to_remove_edges;\n static vec<switch_update> to_update_switch_stmts;"}, {"sha": "cd394a0c8ac3263bb4450821ca729d74a1fc3754", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a79683d5f0104b9da2d6104d4910bbfcb0c63604/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=a79683d5f0104b9da2d6104d4910bbfcb0c63604", "patch": "@@ -175,7 +175,7 @@ enum emit_note_where\n };\n \n /* Structure holding information about micro operation.  */\n-typedef struct micro_operation_def\n+struct micro_operation\n {\n   /* Type of micro operation.  */\n   enum micro_operation_type type;\n@@ -199,7 +199,7 @@ typedef struct micro_operation_def\n     /* Stack adjustment.  */\n     HOST_WIDE_INT adjust;\n   } u;\n-} micro_operation;\n+};\n \n \n /* A declaration of a variable, or an RTL value being handled like a\n@@ -283,23 +283,23 @@ typedef struct location_chain_def\n    DV on VALUEs, i.e., the VALUEs expanded so as to form the current\n    location of DV.  Each entry is also part of VALUE' s linked-list of\n    backlinks back to DV.  */\n-typedef struct loc_exp_dep_s\n+struct loc_exp_dep\n {\n   /* The dependent DV.  */\n   decl_or_value dv;\n   /* The dependency VALUE or DECL_DEBUG.  */\n   rtx value;\n   /* The next entry in VALUE's backlinks list.  */\n-  struct loc_exp_dep_s *next;\n+  struct loc_exp_dep *next;\n   /* A pointer to the pointer to this entry (head or prev's next) in\n      the doubly-linked list.  */\n-  struct loc_exp_dep_s **pprev;\n-} loc_exp_dep;\n+  struct loc_exp_dep **pprev;\n+};\n \n \n /* This data structure holds information about the depth of a variable\n    expansion.  */\n-typedef struct expand_depth_struct\n+struct expand_depth\n {\n   /* This measures the complexity of the expanded expression.  It\n      grows by one for each level of expansion that adds more than one\n@@ -308,7 +308,7 @@ typedef struct expand_depth_struct\n   /* This counts the number of ENTRY_VALUE expressions in an\n      expansion.  We want to minimize their use.  */\n   int entryvals;\n-} expand_depth;\n+};\n \n /* This data structure is allocated for one-part variables at the time\n    of emitting notes.  */\n@@ -334,7 +334,7 @@ struct onepart_aux\n };\n \n /* Structure describing one part of variable.  */\n-typedef struct variable_part_def\n+struct variable_part\n {\n   /* Chain of locations of the part.  */\n   location_chain loc_chain;\n@@ -350,7 +350,7 @@ typedef struct variable_part_def\n     /* Pointer to auxiliary data, if var->onepart and emit_notes.  */\n     struct onepart_aux *onepaux;\n   } aux;\n-} variable_part;\n+};\n \n /* Maximum number of location parts.  */\n #define MAX_VAR_PARTS 16\n@@ -511,7 +511,7 @@ typedef variable_table_type::iterator variable_iterator_type;\n \n /* Structure for passing some other parameters to function\n    emit_note_insn_var_location.  */\n-typedef struct emit_note_data_def\n+struct emit_note_data\n {\n   /* The instruction which the note will be emitted before/after.  */\n   rtx_insn *insn;\n@@ -521,7 +521,7 @@ typedef struct emit_note_data_def\n \n   /* The variables and values active at this point.  */\n   variable_table_type *vars;\n-} emit_note_data;\n+};\n \n /* Structure holding a refcounted hash table.  If refcount > 1,\n    it must be first unshared before modified.  */\n@@ -535,7 +535,7 @@ typedef struct shared_hash_def\n } *shared_hash;\n \n /* Structure holding the IN or OUT set for a basic block.  */\n-typedef struct dataflow_set_def\n+struct dataflow_set\n {\n   /* Adjustment of stack offset.  */\n   HOST_WIDE_INT stack_adjust;\n@@ -548,7 +548,7 @@ typedef struct dataflow_set_def\n \n   /* Vars that is being traversed.  */\n   shared_hash traversed_vars;\n-} dataflow_set;\n+};\n \n /* The structure (one for each basic block) containing the information\n    needed for variable tracking.  */"}]}