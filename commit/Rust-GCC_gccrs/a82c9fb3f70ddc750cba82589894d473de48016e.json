{"sha": "a82c9fb3f70ddc750cba82589894d473de48016e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyYzlmYjNmNzBkZGM3NTBjYmE4MjU4OTg5NGQ0NzNkZTQ4MDE2ZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-01-30T07:34:31Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T01:54:10Z"}, "message": "cris: Enable *movsi_internal to set condition codes.\n\nCompletion of, and first use of, the CRIS-specific parts of the\ncondition-code-setting framework, making use of the define_subst\nmachinery and the cmpelim optimization pass.  This round, just\nmoves in SImode.  Note the re-use of the cc0 era \"cc\" attribute\n(tweaks needed).\n\ngcc:\n\t* config/cris/cris.md (\"cc\"): Comment on new use.\n\t(\"cc_enabled\"): New attribute.\n\t(\"enabled\"): Make default fall back to cc_enabled.\n\t(\"setnz\", \"ccnz\", \"setnzvc\", \"ccnzvc\", \"setcc\", \"cccc\"): New\n\tdefault_subst_attrs.\n\t(\"setnz_subst\", \"setnzvc_subst\", \"setcc_subst\"): New default_subst.\n\t(\"*movsi_internal<setcc><setnz><setnzvc>\"): Rename from\n\t\"*movsi_internal\".  Correct contents of, and rename attribute\n\t\"cc\" to \"cc<cccc><ccnz><ccnzvc>\".", "tree": {"sha": "9164052b4ced5c75ef39935677e943b829a1dd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9164052b4ced5c75ef39935677e943b829a1dd50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a82c9fb3f70ddc750cba82589894d473de48016e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c9fb3f70ddc750cba82589894d473de48016e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82c9fb3f70ddc750cba82589894d473de48016e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c9fb3f70ddc750cba82589894d473de48016e/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e01c3d1b61ecc903b577920ca43804a2cb5497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e01c3d1b61ecc903b577920ca43804a2cb5497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e01c3d1b61ecc903b577920ca43804a2cb5497"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "3fa24c7dd8b05f3dcc8bc4db735541927ab88fd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c9fb3f70ddc750cba82589894d473de48016e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c9fb3f70ddc750cba82589894d473de48016e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a82c9fb3f70ddc750cba82589894d473de48016e", "patch": "@@ -102,6 +102,15 @@\n \tdepending on CC_NZmode vs. CCmode.\n \t(\"*s<nzvccond:code><mode>\"): Simlar from \"*s<ocond:code>\", over\n \tNZVCUSE.  Remove FIXME.\n+\t(\"cc\"): Comment on new use.\n+\t(\"cc_enabled\"): New attribute.\n+\t(\"enabled\"): Make default fall back to cc_enabled.\n+\t(\"setnz\", \"ccnz\", \"setnzvc\", \"ccnzvc\", \"setcc\", \"cccc\"): New\n+\tdefault_subst_attrs.\n+\t(\"setnz_subst\", \"setnzvc_subst\", \"setcc_subst\"): New default_subst.\n+\t(\"*movsi_internal<setcc><setnz><setnzvc>\"): Rename from\n+\t\"*movsi_internal\".  Correct contents of, and rename attribute\n+\t\"cc\" to \"cc<cccc><ccnz><ccnzvc>\".\n \n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "bee9e9735d02d9c6cb1905a23df9266bfcd3674f", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82c9fb3f70ddc750cba82589894d473de48016e/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82c9fb3f70ddc750cba82589894d473de48016e/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=a82c9fb3f70ddc750cba82589894d473de48016e", "patch": "@@ -117,10 +117,16 @@\n   (const_string \"no\"))\n \n ;; We also need attributes to sanely determine the condition code\n-;; state.\n-\n+;; state.  This attribute isn't used as-is, just as a template,\n+;; effectively a dummy except in a substitution setting CRIS_CC0_REGNUM\n+;; to a specific value.\n (define_attr \"cc\" \"none,clobber,normal\" (const_string \"normal\"))\n \n+;; The attribute \"_enabled\" is appended to \"cc\", forming \"cc_enabled\" to\n+;; pick out certain alternatives when generating a useful\n+;; condition-code-setting.  See the \"enabled\" attribute.\n+(define_attr \"cc_enabled\" \"none,clobber,normal\" (const_string \"normal\"))\n+\n ;; At the moment, this attribute is just used to help bb-reorder do its\n ;; work; the default 0 doesn't help it.  Many insns have other lengths,\n ;; though none are shorter.\n@@ -147,7 +153,11 @@\n \t(not (match_test \"dead_or_set_regno_p (insn, CRIS_SRP_REGNUM)\")))\n    (nil) (nil)])\n \n-(define_attr \"enabled\" \"no,yes\" (const_string \"yes\"))\n+(define_attr \"enabled\" \"no,yes\"\n+  (if_then_else\n+   (eq_attr \"cc_enabled\" \"normal\")\n+   (const_string \"yes\")\n+   (const_string \"no\")))\n \f\n ;; Iterator definitions.\n \n@@ -225,6 +235,44 @@\n \t\t       (geu \"CC_NZVC\") (leu \"CC\") (lt \"CC\") (ge \"CC\")\n \t\t       (gt \"CC_NZVC\") (le \"CC_NZVC\")])\n \n+;; Substitutions to describe condition-code settings.\n+\n+(define_subst_attr \"setnz\" \"setnz_subst\" \"\" \"_setnz\")\n+(define_subst_attr \"ccnz\" \"setnz_subst\" \"\" \"_enabled\")\n+\n+(define_subst \"setnz_subst\"\n+  [(set (match_operand 0)\n+\t(match_operand 1))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"reload_completed\"\n+  [(set (reg:CC_NZ CRIS_CC0_REGNUM)\n+\t(compare:CC_NZ (match_dup 1) (const_int 0)))\n+   (set (match_operand 0) (match_operand 1))])\n+\n+(define_subst_attr \"setnzvc\" \"setnzvc_subst\" \"\" \"_setnzvc\")\n+(define_subst_attr \"ccnzvc\" \"setnzvc_subst\" \"\" \"_enabled\")\n+\n+(define_subst \"setnzvc_subst\"\n+  [(set (match_operand 0)\n+\t(match_operand 1))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"reload_completed\"\n+  [(set (reg:CC_NZVC CRIS_CC0_REGNUM)\n+\t(compare:CC_NZVC (match_dup 1) (const_int 0)))\n+   (set (match_operand 0) (match_operand 1))])\n+\n+(define_subst_attr \"setcc\" \"setcc_subst\" \"\" \"_setcc\")\n+(define_subst_attr \"cccc\" \"setcc_subst\" \"\" \"_enabled\")\n+\n+(define_subst \"setcc_subst\"\n+  [(set (match_operand 0)\n+\t(match_operand 1))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"reload_completed\"\n+  [(set (reg:CC CRIS_CC0_REGNUM)\n+\t(compare:CC (match_dup 1) (const_int 0)))\n+   (set (match_operand 0) (match_operand 1))])\n+\n ;; Operand and operator predicates.\n \n (include \"predicates.md\")\n@@ -495,7 +543,9 @@\n      }\n })\n \n-(define_insn \"*movsi_internal\"\n+;; We provide CC, CC_NZ and CC_NZVC variants, as moves clear V and C\n+;; and the result is thus usable in a compare against 0.\n+(define_insn \"*movsi_internal<setcc><setnz><setnzvc>\"\n   [(set\n     (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t      \"=r,r, r,Q>,r,Q>,g,r,r,g,rQ>,x,  m,x\")\n@@ -554,7 +604,8 @@\n     }\n }\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,yes,no,no,no,no,yes,yes,no,no\")\n-   (set_attr \"cc\" \"*,*,*,*,*,*,*,*,*,*,none,none,none,none\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"*,*,none,none,*,none,none,*,*,none,none,none,none,none\")])\n \f\n ;; FIXME: See movsi.\n "}]}