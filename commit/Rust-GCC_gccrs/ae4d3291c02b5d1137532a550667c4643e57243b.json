{"sha": "ae4d3291c02b5d1137532a550667c4643e57243b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0ZDMyOTFjMDJiNWQxMTM3NTMyYTU1MDY2N2M0NjQzZTU3MjQzYg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-07-07T00:20:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-07-07T00:20:49Z"}, "message": "Fix ia64-hpux ABI bug with varargs __float80 argument.\n\n* config/ia64/ia64.c (ia64_expand_movxf_movrf): Don't word swap when\nreading/writing general registers.\n(ia64_function_arg): Revert 2005-06-18 change.\n\nFrom-SVN: r101679", "tree": {"sha": "7152eaafb9fb86bddd804e20e65c3c3b65d7823b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7152eaafb9fb86bddd804e20e65c3c3b65d7823b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae4d3291c02b5d1137532a550667c4643e57243b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4d3291c02b5d1137532a550667c4643e57243b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4d3291c02b5d1137532a550667c4643e57243b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4d3291c02b5d1137532a550667c4643e57243b/comments", "author": null, "committer": null, "parents": [{"sha": "5840193b82809841cc8c384ae3bcc24ad62a97c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5840193b82809841cc8c384ae3bcc24ad62a97c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5840193b82809841cc8c384ae3bcc24ad62a97c3"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "e19f26fe1f282e886ed7729d9bc408b1ace61b24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4d3291c02b5d1137532a550667c4643e57243b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4d3291c02b5d1137532a550667c4643e57243b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae4d3291c02b5d1137532a550667c4643e57243b", "patch": "@@ -1,6 +1,11 @@\n 2005-07-06  James E. Wilson  <wilson@specifixinc.com>\n \n-\t* ia64.c (ia64_reorg): Check optimize before ia64_flag_schedule_isns2.\n+\t* config/ia64/ia64.c (ia64_reorg): Check optimize before\n+\tia64_flag_schedule_isns2.\n+\n+\t* config/ia64/ia64.c (ia64_expand_movxf_movrf): Don't word swap when\n+\treading/writing general registers.\n+\t(ia64_function_arg): Revert 2005-06-18 change.\n \n 2005-07-06  John David Anglin  <dave.anglin@nrc-crnc.gc.ca>\n "}, {"sha": "1eb81069d0f28bd05972da3d1b8af353645269db", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4d3291c02b5d1137532a550667c4643e57243b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4d3291c02b5d1137532a550667c4643e57243b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ae4d3291c02b5d1137532a550667c4643e57243b", "patch": "@@ -1363,10 +1363,13 @@ ia64_expand_movxf_movrf (enum machine_mode mode, rtx operands[])\n \n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t{\n+\t  /* Don't word-swap when reading in the constant.  */\n \t  emit_move_insn (gen_rtx_REG (DImode, REGNO (op0)),\n-\t\t\t  operand_subword (operands[1], 0, 0, mode));\n+\t\t\t  operand_subword (operands[1], WORDS_BIG_ENDIAN,\n+\t\t\t\t\t   0, mode));\n \t  emit_move_insn (gen_rtx_REG (DImode, REGNO (op0) + 1),\n-\t\t\t  operand_subword (operands[1], 1, 0, mode));\n+\t\t\t  operand_subword (operands[1], !WORDS_BIG_ENDIAN,\n+\t\t\t\t\t   0, mode));\n \t  return true;\n \t}\n \n@@ -1376,8 +1379,9 @@ ia64_expand_movxf_movrf (enum machine_mode mode, rtx operands[])\n \n       gcc_assert (GET_CODE (operands[1]) == MEM);\n \n-      out[WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (op0));\n-      out[!WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (op0) + 1);\n+      /* Don't word-swap when reading in the value.  */\n+      out[0] = gen_rtx_REG (DImode, REGNO (op0));\n+      out[1] = gen_rtx_REG (DImode, REGNO (op0) + 1);\n \n       emit_move_insn (out[0], adjust_address (operands[1], DImode, 0));\n       emit_move_insn (out[1], adjust_address (operands[1], DImode, 8));\n@@ -1405,9 +1409,11 @@ ia64_expand_movxf_movrf (enum machine_mode mode, rtx operands[])\n \t{\n \t  rtx in[2];\n \n-          gcc_assert (GET_CODE (operands[0]) == MEM);\n-\t  in[WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (operands[1]));\n-\t  in[!WORDS_BIG_ENDIAN] = gen_rtx_REG (DImode, REGNO (operands[1]) + 1);\n+\t  gcc_assert (GET_CODE (operands[0]) == MEM);\n+\n+\t  /* Don't word-swap when writing out the value.  */\n+\t  in[0] = gen_rtx_REG (DImode, REGNO (operands[1]));\n+\t  in[1] = gen_rtx_REG (DImode, REGNO (operands[1]) + 1);\n \n \t  emit_move_insn (adjust_address (operands[0], DImode, 0), in[0]);\n \t  emit_move_insn (adjust_address (operands[0], DImode, 8), in[1]);\n@@ -3917,19 +3923,6 @@ ia64_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n                    gen_rtx_EXPR_LIST (VOIDmode,\n \t\t     gen_rtx_REG (DImode, basereg + cum->words + offset),\n \t\t\t\t      const0_rtx)));\n-      /* Similarly, an anonymous XFmode or RFmode value must be split\n-\t into two registers and padded appropriately.  */\n-      else if (BYTES_BIG_ENDIAN && (mode == XFmode || mode == RFmode))\n-\t{\n-\t  rtx loc[2];\n-\t  loc[0] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t     gen_rtx_REG (DImode, basereg + cum->words + offset),\n-\t\t\t\t      const0_rtx);\n-\t  loc[1] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t     gen_rtx_REG (DImode, basereg + cum->words + offset + 1),\n-\t\t\t\t      GEN_INT (UNITS_PER_WORD));\n-\t  return gen_rtx_PARALLEL (mode, gen_rtvec_v (2, loc));\n-\t}\n       else\n \treturn gen_rtx_REG (mode, basereg + cum->words + offset);\n     }"}]}