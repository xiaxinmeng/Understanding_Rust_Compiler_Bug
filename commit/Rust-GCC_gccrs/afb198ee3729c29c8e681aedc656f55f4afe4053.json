{"sha": "afb198ee3729c29c8e681aedc656f55f4afe4053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiMTk4ZWUzNzI5YzI5YzhlNjgxYWVkYzY1NmY1NWY0YWZlNDA1Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-10-05T13:11:07Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-10-08T11:12:13Z"}, "message": "arm: [MVE[ Add vqdmlashq intrinsics (PR target/96914)\n\nThis patch adds:\nvqdmlashq_m_n_s16\nvqdmlashq_m_n_s32\nvqdmlashq_m_n_s8\nvqdmlashq_n_s16\nvqdmlashq_n_s32\nvqdmlashq_n_s8\n\n2020-10-08  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\tPR target/96914\n\t* config/arm/arm_mve.h (vqdmlashq, vqdmlashq_m): Define.\n\t* config/arm/arm_mve_builtins.def (vqdmlashq_n_s)\n\t(vqdmlashq_m_n_s,): New.\n\t* config/arm/unspecs.md (VQDMLASHQ_N_S, VQDMLASHQ_M_N_S): New\n\tunspecs.\n\t* config/arm/iterators.md (VQDMLASHQ_N_S, VQDMLASHQ_M_N_S): New\n\tattributes.\n\t(VQDMLASHQ_N): New iterator.\n\t* config/arm/mve.md (mve_vqdmlashq_n_, mve_vqdmlashq_m_n_s): New\n\tpatterns.\n\n\tgcc/testsuite/\n\tPR target/96914\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: New test.", "tree": {"sha": "7beea1a18836f43d5dec502ea59785e6c6f5f560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7beea1a18836f43d5dec502ea59785e6c6f5f560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb198ee3729c29c8e681aedc656f55f4afe4053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb198ee3729c29c8e681aedc656f55f4afe4053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb198ee3729c29c8e681aedc656f55f4afe4053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb198ee3729c29c8e681aedc656f55f4afe4053/comments", "author": null, "committer": null, "parents": [{"sha": "f18eeb6b958acd5e1590ca4a73231486b749be9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18eeb6b958acd5e1590ca4a73231486b749be9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18eeb6b958acd5e1590ca4a73231486b749be9b"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "55580a5ee1f2c98ab15952e41e23504707cb3f2f", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -141,6 +141,7 @@\n #define vrev64q_m(__inactive, __a, __p) __arm_vrev64q_m(__inactive, __a, __p)\n #define vqrdmlashq(__a, __b, __c) __arm_vqrdmlashq(__a, __b, __c)\n #define vqrdmlahq(__a, __b, __c) __arm_vqrdmlahq(__a, __b, __c)\n+#define vqdmlashq(__a, __b, __c) __arm_vqdmlashq(__a, __b, __c)\n #define vqdmlahq(__a, __b, __c) __arm_vqdmlahq(__a, __b, __c)\n #define vmvnq_m(__inactive, __a, __p) __arm_vmvnq_m(__inactive, __a, __p)\n #define vmlasq(__a, __b, __c) __arm_vmlasq(__a, __b, __c)\n@@ -260,6 +261,7 @@\n #define vorrq_m(__inactive, __a, __b, __p) __arm_vorrq_m(__inactive, __a, __b, __p)\n #define vqaddq_m(__inactive, __a, __b, __p) __arm_vqaddq_m(__inactive, __a, __b, __p)\n #define vqdmladhq_m(__inactive, __a, __b, __p) __arm_vqdmladhq_m(__inactive, __a, __b, __p)\n+#define vqdmlashq_m(__a, __b, __c, __p) __arm_vqdmlashq_m(__a, __b, __c, __p)\n #define vqdmladhxq_m(__inactive, __a, __b, __p) __arm_vqdmladhxq_m(__inactive, __a, __b, __p)\n #define vqdmlahq_m(__a, __b, __c, __p) __arm_vqdmlahq_m(__a, __b, __c, __p)\n #define vqdmlsdhq_m(__inactive, __a, __b, __p) __arm_vqdmlsdhq_m(__inactive, __a, __b, __p)\n@@ -1306,6 +1308,7 @@\n #define vqdmlsdhxq_s8(__inactive, __a, __b) __arm_vqdmlsdhxq_s8(__inactive, __a, __b)\n #define vqdmlsdhq_s8(__inactive, __a, __b) __arm_vqdmlsdhq_s8(__inactive, __a, __b)\n #define vqdmlahq_n_s8(__a, __b, __c) __arm_vqdmlahq_n_s8(__a, __b, __c)\n+#define vqdmlashq_n_s8(__a, __b, __c) __arm_vqdmlashq_n_s8(__a, __b, __c)\n #define vqdmladhxq_s8(__inactive, __a, __b) __arm_vqdmladhxq_s8(__inactive, __a, __b)\n #define vqdmladhq_s8(__inactive, __a, __b) __arm_vqdmladhq_s8(__inactive, __a, __b)\n #define vmlsdavaxq_s8(__a, __b, __c) __arm_vmlsdavaxq_s8(__a, __b, __c)\n@@ -1390,6 +1393,7 @@\n #define vqrdmladhq_s16(__inactive, __a, __b) __arm_vqrdmladhq_s16(__inactive, __a, __b)\n #define vqdmlsdhxq_s16(__inactive, __a, __b) __arm_vqdmlsdhxq_s16(__inactive, __a, __b)\n #define vqdmlsdhq_s16(__inactive, __a, __b) __arm_vqdmlsdhq_s16(__inactive, __a, __b)\n+#define vqdmlashq_n_s16(__a, __b, __c) __arm_vqdmlashq_n_s16(__a, __b, __c)\n #define vqdmlahq_n_s16(__a, __b, __c) __arm_vqdmlahq_n_s16(__a, __b, __c)\n #define vqdmladhxq_s16(__inactive, __a, __b) __arm_vqdmladhxq_s16(__inactive, __a, __b)\n #define vqdmladhq_s16(__inactive, __a, __b) __arm_vqdmladhq_s16(__inactive, __a, __b)\n@@ -1475,6 +1479,7 @@\n #define vqrdmladhq_s32(__inactive, __a, __b) __arm_vqrdmladhq_s32(__inactive, __a, __b)\n #define vqdmlsdhxq_s32(__inactive, __a, __b) __arm_vqdmlsdhxq_s32(__inactive, __a, __b)\n #define vqdmlsdhq_s32(__inactive, __a, __b) __arm_vqdmlsdhq_s32(__inactive, __a, __b)\n+#define vqdmlashq_n_s32(__a, __b, __c) __arm_vqdmlashq_n_s32(__a, __b, __c)\n #define vqdmlahq_n_s32(__a, __b, __c) __arm_vqdmlahq_n_s32(__a, __b, __c)\n #define vqdmladhxq_s32(__inactive, __a, __b) __arm_vqdmladhxq_s32(__inactive, __a, __b)\n #define vqdmladhq_s32(__inactive, __a, __b) __arm_vqdmladhq_s32(__inactive, __a, __b)\n@@ -1901,6 +1906,9 @@\n #define vqdmladhxq_m_s8(__inactive, __a, __b, __p) __arm_vqdmladhxq_m_s8(__inactive, __a, __b, __p)\n #define vqdmladhxq_m_s32(__inactive, __a, __b, __p) __arm_vqdmladhxq_m_s32(__inactive, __a, __b, __p)\n #define vqdmladhxq_m_s16(__inactive, __a, __b, __p) __arm_vqdmladhxq_m_s16(__inactive, __a, __b, __p)\n+#define vqdmlashq_m_n_s8(__a, __b, __c, __p) __arm_vqdmlashq_m_n_s8(__a, __b, __c, __p)\n+#define vqdmlashq_m_n_s32(__a, __b, __c, __p) __arm_vqdmlashq_m_n_s32(__a, __b, __c, __p)\n+#define vqdmlashq_m_n_s16(__a, __b, __c, __p) __arm_vqdmlashq_m_n_s16(__a, __b, __c, __p)\n #define vqdmlahq_m_n_s8(__a, __b, __c, __p) __arm_vqdmlahq_m_n_s8(__a, __b, __c, __p)\n #define vqdmlahq_m_n_s32(__a, __b, __c, __p) __arm_vqdmlahq_m_n_s32(__a, __b, __c, __p)\n #define vqdmlahq_m_n_s16(__a, __b, __c, __p) __arm_vqdmlahq_m_n_s16(__a, __b, __c, __p)\n@@ -7422,6 +7430,13 @@ __arm_vqrdmlashq_n_s8 (int8x16_t __a, int8x16_t __b, int8_t __c)\n   return __builtin_mve_vqrdmlashq_n_sv16qi (__a, __b, __c);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_n_s8 (int8x16_t __a, int8x16_t __b, int8_t __c)\n+{\n+  return __builtin_mve_vqdmlashq_n_sv16qi (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq_n_s8 (int8x16_t __a, int8x16_t __b, int8_t __c)\n@@ -8017,6 +8032,13 @@ __arm_vqrdmlashq_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c)\n   return __builtin_mve_vqrdmlashq_n_sv8hi (__a, __b, __c);\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c)\n+{\n+  return __builtin_mve_vqdmlashq_n_sv8hi (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c)\n@@ -8612,6 +8634,13 @@ __arm_vqrdmlashq_n_s32 (int32x4_t __a, int32x4_t __b, int32_t __c)\n   return __builtin_mve_vqrdmlashq_n_sv4si (__a, __b, __c);\n }\n \n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_n_s32 (int32x4_t __a, int32x4_t __b, int32_t __c)\n+{\n+  return __builtin_mve_vqdmlashq_n_sv4si (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq_n_s32 (int32x4_t __a, int32x4_t __b, int32_t __c)\n@@ -11139,6 +11168,27 @@ __arm_vqrdmlashq_m_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c, mve_pred16_\n   return __builtin_mve_vqrdmlashq_m_n_sv8hi (__a, __b, __c, __p);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m_n_s8 (int8x16_t __a, int8x16_t __b, int8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmlashq_m_n_sv16qi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m_n_s16 (int16x8_t __a, int16x8_t __b, int16_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmlashq_m_n_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m_n_s32 (int32x4_t __a, int32x4_t __b, int32_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmlashq_m_n_sv4si (__a, __b, __c, __p);\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlsdhq_m_s8 (int8x16_t __inactive, int8x16_t __a, int8x16_t __b, mve_pred16_t __p)\n@@ -24202,6 +24252,13 @@ __arm_vqrdmlashq (int8x16_t __a, int8x16_t __b, int8_t __c)\n  return __arm_vqrdmlashq_n_s8 (__a, __b, __c);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq (int8x16_t __a, int8x16_t __b, int8_t __c)\n+{\n+ return __arm_vqdmlashq_n_s8 (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq (int8x16_t __a, int8x16_t __b, int8_t __c)\n@@ -24797,6 +24854,13 @@ __arm_vqrdmlashq (int16x8_t __a, int16x8_t __b, int16_t __c)\n  return __arm_vqrdmlashq_n_s16 (__a, __b, __c);\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq (int16x8_t __a, int16x8_t __b, int16_t __c)\n+{\n+ return __arm_vqdmlashq_n_s16 (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq (int16x8_t __a, int16x8_t __b, int16_t __c)\n@@ -25392,6 +25456,13 @@ __arm_vqrdmlashq (int32x4_t __a, int32x4_t __b, int32_t __c)\n  return __arm_vqrdmlashq_n_s32 (__a, __b, __c);\n }\n \n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq (int32x4_t __a, int32x4_t __b, int32_t __c)\n+{\n+ return __arm_vqdmlashq_n_s32 (__a, __b, __c);\n+}\n+\n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlahq (int32x4_t __a, int32x4_t __b, int32_t __c)\n@@ -27919,6 +27990,27 @@ __arm_vqrdmlashq_m (int16x8_t __a, int16x8_t __b, int16_t __c, mve_pred16_t __p)\n  return __arm_vqrdmlashq_m_n_s16 (__a, __b, __c, __p);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m (int8x16_t __a, int8x16_t __b, int8_t __c, mve_pred16_t __p)\n+{\n+ return __arm_vqdmlashq_m_n_s8 (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m (int16x8_t __a, int16x8_t __b, int16_t __c, mve_pred16_t __p)\n+{\n+ return __arm_vqdmlashq_m_n_s16 (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmlashq_m (int32x4_t __a, int32x4_t __b, int32_t __c, mve_pred16_t __p)\n+{\n+ return __arm_vqdmlashq_m_n_s32 (__a, __b, __c, __p);\n+}\n+\n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vqrdmlsdhq_m (int8x16_t __inactive, int8x16_t __a, int8x16_t __b, mve_pred16_t __p)\n@@ -36790,6 +36882,14 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n \n+#define __arm_vqdmlashq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n+\t    int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n+\n #define __arm_vqrdmlahq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -39262,6 +39362,14 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t)));})\n \n+#define __arm_vqdmlashq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t)));})\n+\n #define __arm_vqrdmlahq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -40803,6 +40911,14 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t), p3), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqrdmlashq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t), p3));})\n \n+#define __arm_vqdmlashq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8_t), p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vqdmlashq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t), p3));})\n+\n #define __arm_vqrshlq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\"}, {"sha": "9f3ecfec835f042212ae8472706d562e9c8075d3", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -384,6 +384,7 @@ VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqrdmladhq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlsdhxq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlsdhq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlahq_n_s, v16qi, v8hi, v4si)\n+VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmlashq_n_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmladhxq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vqdmladhq_s, v16qi, v8hi, v4si)\n VAR3 (TERNOP_NONE_NONE_NONE_NONE, vmlsdavaxq_s, v16qi, v8hi, v4si)\n@@ -574,6 +575,7 @@ VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmulhq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlsdhxq_m_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlsdhq_m_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlahq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmlashq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmladhxq_m_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmladhq_m_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqaddq_m_s, v16qi, v8hi, v4si)"}, {"sha": "0dbf1b20d05d9a0477d596b6bc0ca5d2554b2c1f", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -1285,6 +1285,7 @@\n \t\t       (VMLAQ_N_U \"u\") (VMLASQ_N_S \"s\") (VMLASQ_N_U \"u\")\n \t\t       (VMVNQ_M_S \"s\") (VMVNQ_M_U \"u\") (VPSELQ_S \"s\")\n \t\t       (VPSELQ_U \"u\") (VQDMLAHQ_N_S \"s\") (VQDMLAHQ_N_U \"u\")\n+\t\t       (VQDMLASHQ_N_S \"s\")\n \t\t       (VQRDMLAHQ_N_S \"s\") (VQRDMLAHQ_N_U \"u\")\n \t\t       (VQRDMLASHQ_N_S \"s\") (VQRDMLASHQ_N_U \"u\")\n \t\t       (VQRSHLQ_M_N_S \"s\") (VQRSHLQ_M_N_U \"u\")\n@@ -1326,6 +1327,7 @@\n \t\t       (VMULQ_M_S \"s\") (VQSHLQ_M_N_U \"u\") (VSLIQ_M_N_U \"u\")\n \t\t       (VMLADAVAQ_P_S \"s\") (VQRSHLQ_M_U \"u\")\n \t\t       (VMULLBQ_INT_M_U \"u\") (VSHLQ_M_N_U \"u\") (VQSUBQ_M_U \"u\")\n+\t\t       (VQDMLASHQ_M_N_S \"s\")\n \t\t       (VQRDMLASHQ_M_N_U \"u\") (VRSHRQ_M_N_S \"s\")\n \t\t       (VORNQ_M_S \"s\") (VCADDQ_ROT270_M_S \"s\") (VRHADDQ_M_U \"u\")\n \t\t       (VRSHRQ_M_N_U \"u\") (VMLASQ_M_N_U \"u\") (VHSUBQ_M_U \"u\")\n@@ -1577,6 +1579,7 @@\n (define_int_iterator VMVNQ_M [VMVNQ_M_S VMVNQ_M_U])\n (define_int_iterator VPSELQ [VPSELQ_S VPSELQ_U])\n (define_int_iterator VQDMLAHQ_N [VQDMLAHQ_N_S VQDMLAHQ_N_U])\n+(define_int_iterator VQDMLASHQ_N [VQDMLASHQ_N_S])\n (define_int_iterator VQRDMLAHQ_N [VQRDMLAHQ_N_S VQRDMLAHQ_N_U])\n (define_int_iterator VQRDMLASHQ_N [VQRDMLASHQ_N_S VQRDMLASHQ_N_U])\n (define_int_iterator VQRSHLQ_M_N [VQRSHLQ_M_N_S VQRSHLQ_M_N_U])"}, {"sha": "d406ab1c41d0d7c4cda25ed0b5a158aae3496123", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -3677,6 +3677,22 @@\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n+;;\n+;; [vqdmlashq_n_s])\n+;;\n+(define_insn \"mve_vqdmlashq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")]\n+\t VQDMLASHQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vqdmlash.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n ;;\n ;; [vqnegq_m_s])\n ;;\n@@ -5903,6 +5919,23 @@\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n+;;\n+;; [vqdmlashq_m_n_s])\n+;;\n+(define_insn \"mve_vqdmlashq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMLASHQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmlasht.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n ;;\n ;; [vqrdmlahq_m_n_s])\n ;;"}, {"sha": "a98ac09c1afa3eaa9fb8ed75bc5c400232dc96a5", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -877,6 +877,7 @@\n   VQABSQ_M_S\n   VQDMLAHQ_N_S\n   VQDMLAHQ_N_U\n+  VQDMLASHQ_N_S\n   VQNEGQ_M_S\n   VQRDMLADHQ_S\n   VQRDMLADHXQ_S\n@@ -1069,6 +1070,7 @@\n   VRHADDQ_M_S\n   VMULQ_M_S\n   VMULQ_M_U\n+  VQDMLASHQ_M_N_S\n   VQRDMLASHQ_M_N_S\n   VRSHLQ_M_S\n   VRSHLQ_M_U"}, {"sha": "7c2e5cf89ddddcb9000caefb0805463819418e9e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m_n_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s16\"  }  } */"}, {"sha": "cea9d9b683fd5df855101e2dabd71b4714980052", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m_n_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s32\"  }  } */"}, {"sha": "83ee258876aa326df11b90df320aaf7aa7dab99a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_m_n_s8.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m_n_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c, mve_pred16_t p)\n+{\n+  return vqdmlashq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmlasht.s8\"  }  } */"}, {"sha": "c71a61c54f68b9f3b49abedefd8e9185f91f74cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s16.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqdmlashq_n_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, int16_t c)\n+{\n+  return vqdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s16\"  }  } */"}, {"sha": "61f6c6671ccfd113ae8fea1e693bc932533f1632", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s32.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqdmlashq_n_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, int32_t c)\n+{\n+  return vqdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s32\"  }  } */"}, {"sha": "a07892863c15ae8bf5b69b94cbf0781d1888303a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb198ee3729c29c8e681aedc656f55f4afe4053/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmlashq_n_s8.c?ref=afb198ee3729c29c8e681aedc656f55f4afe4053", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqdmlashq_n_s8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, int8_t c)\n+{\n+  return vqdmlashq (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler \"vqdmlash.s8\"  }  } */"}]}