{"sha": "c75d51aa81c517b616c2984251a4364d45fbd781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1ZDUxYWE4MWM1MTdiNjE2YzI5ODQyNTFhNDM2NGQ0NWZiZDc4MQ==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2013-12-24T15:34:30Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-12-24T15:34:30Z"}, "message": "arm-protos.h (vfp_const_double_for_bits): Declare.\n\ngcc/\n\n2013-12-24  Renlin Li  <Renlin.Li@arm.com>\n\n\t* config/arm/arm-protos.h (vfp_const_double_for_bits): Declare.\n\t* config/arm/constraints.md (Dp): Define new constraint.\n\t* config/arm/predicates.md (const_double_vcvt_power_of_two): Define\n\tnew predicate.\n\t* config/arm/arm.c (arm_print_operand): Add print for new fucntion.\n\t(vfp3_const_double_for_bits): New function.\n\t* config/arm/vfp.md (combine_vcvtf2i): Define new instruction.\n\ngcc/testsuite/\n\n2013-12-24  Renlin Li  <Renlin.Li@arm.com>\n\n\t* gcc.target/arm/fixed_float_conversion.c: New test case.\n\nFrom-SVN: r206195", "tree": {"sha": "efe8a2b5e3fb7d97580bd038c64633ea31bafe74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efe8a2b5e3fb7d97580bd038c64633ea31bafe74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75d51aa81c517b616c2984251a4364d45fbd781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75d51aa81c517b616c2984251a4364d45fbd781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75d51aa81c517b616c2984251a4364d45fbd781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75d51aa81c517b616c2984251a4364d45fbd781/comments", "author": null, "committer": null, "parents": [{"sha": "8bebb9532b4724afacf514dfe1f0d127cb7f6f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bebb9532b4724afacf514dfe1f0d127cb7f6f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bebb9532b4724afacf514dfe1f0d127cb7f6f07"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "3e9214a5f32af8722e3df4aecc33a3fc77966f46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -1,3 +1,13 @@\n+2013-12-24  Renlin Li  <Renlin.Li@arm.com>\n+\n+\t* config/arm/arm-protos.h (vfp_const_double_for_bits): Declare.\n+\t* config/arm/constraints.md (Dp): Define new constraint.\n+\t* config/arm/predicates.md (const_double_vcvt_power_of_two): Define\n+\tnew predicate.\n+\t* config/arm/arm.c (arm_print_operand): Add print for new fucntion.\n+\t(vfp3_const_double_for_bits): New function.\n+\t* config/arm/vfp.md (combine_vcvtf2i): Define new instruction.\n+\n 2013-12-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/59203"}, {"sha": "62741cbd1618ffb2922126e83337ca2c3c4e9666", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -276,6 +276,8 @@ struct tune_params\n \n extern const struct tune_params *current_tune;\n extern int vfp3_const_double_for_fract_bits (rtx);\n+/* return power of two from operand, otherwise 0.  */\n+extern int vfp3_const_double_for_bits (rtx);\n \n extern void arm_emit_coreregs_64bit_shift (enum rtx_code, rtx, rtx, rtx, rtx,\n \t\t\t\t\t   rtx);"}, {"sha": "39d23ccb25139af6b2e690633915ee6252021891", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -21594,7 +21594,11 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \n     case 'v':\n \tgcc_assert (CONST_DOUBLE_P (x));\n-\tfprintf (stream, \"#%d\", vfp3_const_double_for_fract_bits (x));\n+\tint result;\n+\tresult = vfp3_const_double_for_fract_bits (x);\n+\tif (result == 0)\n+\t  result = vfp3_const_double_for_bits (x);\n+\tfprintf (stream, \"#%d\", result);\n \treturn;\n \n     /* Register specifier for vld1.16/vst1.16.  Translate the S register\n@@ -29707,6 +29711,26 @@ vfp3_const_double_for_fract_bits (rtx operand)\n     }\n   return 0;\n }\n+\n+int\n+vfp3_const_double_for_bits (rtx operand)\n+{\n+  REAL_VALUE_TYPE r0;\n+\n+  if (!CONST_DOUBLE_P (operand))\n+    return 0;\n+\n+  REAL_VALUE_FROM_CONST_DOUBLE (r0, operand);\n+  if (exact_real_truncate (DFmode, &r0))\n+    {\n+      HOST_WIDE_INT value = real_to_integer (&r0);\n+      value = value & 0xffffffff;\n+      if ((value != 0) && ( (value & (value - 1)) == 0))\n+\treturn int_log2 (value);\n+    }\n+\n+  return 0;\n+}\n \f\n /* Emit a memory barrier around an atomic sequence according to MODEL.  */\n "}, {"sha": "59ca4b62440e8d4fa6d2a387d1a3f7b9cb8cdcb8", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -31,7 +31,7 @@\n ;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dz\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dp, Dz\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n \n@@ -328,12 +328,18 @@\n  (and (match_code \"const_double\")\n       (match_test \"TARGET_32BIT && TARGET_VFP_DOUBLE && vfp3_const_double_rtx (op)\")))\n \n-(define_constraint \"Dt\" \n+(define_constraint \"Dt\"\n  \"@internal\n   In ARM/ Thumb2 a const_double which can be used with a vcvt.f32.s32 with fract bits operation\"\n   (and (match_code \"const_double\")\n        (match_test \"TARGET_32BIT && TARGET_VFP && vfp3_const_double_for_fract_bits (op)\")))\n \n+(define_constraint \"Dp\"\n+ \"@internal\n+  In ARM/ Thumb2 a const_double which can be used with a vcvt.s32.f32 with bits operation\"\n+  (and (match_code \"const_double\")\n+       (match_test \"TARGET_32BIT && TARGET_VFP && vfp3_const_double_for_bits (op)\")))\n+\n (define_register_constraint \"Ts\" \"(arm_restrict_it) ? LO_REGS : GENERAL_REGS\"\n  \"For arm_restrict_it the core registers @code{r0}-@code{r7}.  GENERAL_REGS otherwise.\")\n "}, {"sha": "641228612f5857a88f7cdbedcb16ce147d438390", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -645,8 +645,13 @@\n \n (define_predicate \"const_double_vcvt_power_of_two_reciprocal\"\n   (and (match_code \"const_double\")\n-       (match_test \"TARGET_32BIT && TARGET_VFP \n-       \t\t   && vfp3_const_double_for_fract_bits (op)\")))\n+       (match_test \"TARGET_32BIT && TARGET_VFP\n+                   && vfp3_const_double_for_fract_bits (op)\")))\n+\n+(define_predicate \"const_double_vcvt_power_of_two\"\n+  (and (match_code \"const_double\")\n+       (match_test \"TARGET_32BIT && TARGET_VFP\n+                   && vfp3_const_double_for_bits (op)\")))\n \n (define_predicate \"neon_struct_operand\"\n   (and (match_code \"mem\")"}, {"sha": "8d755fc1dfef16e997d997138cd699f7be124994", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -1253,6 +1253,20 @@\n    (set_attr \"length\" \"8\")]\n )\n \n+(define_insn \"*combine_vcvtf2i\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(fix:SI (fix:SF (mult:SF (match_operand:SF 1 \"s_register_operand\" \"t\")\n+\t\t\t\t (match_operand 2\n+\t\t\t\t \"const_double_vcvt_power_of_two\" \"Dp\")))))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP3 && !flag_rounding_math\"\n+  \"vcvt%?.s32.f32\\\\t%1, %1, %v2\\;vmov%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"ce_count\" \"2\")\n+   (set_attr \"type\" \"f_cvtf2i\")\n+   (set_attr \"length\" \"8\")]\n+ )\n+\n ;; Store multiple insn used in function prologue.\n (define_insn \"*push_multi_vfp\"\n   [(match_parallel 2 \"multi_register_push\""}, {"sha": "b7437545132507c1da335b0275b9d68a9d2d1c29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -1,3 +1,7 @@\n+2013-12-24  Renlin Li  <Renlin.Li@arm.com>\n+\n+\t* gcc.target/arm/fixed_float_conversion.c: New test case.\n+\n 2013-12-23  Bingfeng Mei  <bmei@broadcom.com>\n \n \t* gcc.dg/vect/vect-neg-store-1.c: New test."}, {"sha": "a8befd0fba7f51fb890157fa96fb2a2968556b55", "filename": "gcc/testsuite/gcc.target/arm/fixed_float_conversion.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffixed_float_conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75d51aa81c517b616c2984251a4364d45fbd781/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffixed_float_conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Ffixed_float_conversion.c?ref=c75d51aa81c517b616c2984251a4364d45fbd781", "patch": "@@ -0,0 +1,19 @@\n+/* Check that vcvt is used for fixed and float data conversions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mfpu=vfp3\" } */\n+/* { dg-require-effective-target arm_vfp_ok } */\n+\n+float\n+fixed_to_float (int i)\n+{\n+  return ((float) i / (1 << 16));\n+}\n+\n+int\n+float_to_fixed (float f)\n+{\n+  return ((int) (f * (1 << 16)));\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.s32\" } } */\n+/* { dg-final { scan-assembler \"vcvt.s32.f32\" } } */"}]}