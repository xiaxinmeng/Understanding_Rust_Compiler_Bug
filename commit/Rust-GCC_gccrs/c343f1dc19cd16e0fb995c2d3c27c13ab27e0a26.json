{"sha": "c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0M2YxZGMxOWNkMTZlMGZiOTk1YzJkM2MyN2MxM2FiMjdlMGEyNg==", "commit": {"author": {"name": "Patrick Bernardi", "email": "bernardi@adacore.com", "date": "2018-07-17T08:11:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:11:37Z"}, "message": "[Ada] Use standard version of s-memory.adb for mingw32\n\nThis patch switches mingw32 targets to use the standard version of s-memory.adb\nas Windows now has the capability of limiting the amount of memory used by\nprocess.\n\n2018-07-17  Patrick Bernardi  <bernardi@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-memory__mingw.adb: Remove.\n\t* Makefile.rtl: Remove s-memory.adb target pair from the Cygwin/Mingw32\n\tsection.\n\ngcc/testsuite/\n\n\t* gnat.dg/memorytest.adb: New testcase.\n\nFrom-SVN: r262796", "tree": {"sha": "6e9c9bbfa7affd052fbd434fef437121ffb584bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9c9bbfa7affd052fbd434fef437121ffb584bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ffb58afe1ad318ccf289325e802d913bd8e0e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffb58afe1ad318ccf289325e802d913bd8e0e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffb58afe1ad318ccf289325e802d913bd8e0e15"}], "stats": {"total": 269, "additions": 41, "deletions": 228}, "files": [{"sha": "285d7e435fc991018383eb8732e21b761e58fe10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "patch": "@@ -1,3 +1,9 @@\n+2018-07-17  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/s-memory__mingw.adb: Remove.\n+\t* Makefile.rtl: Remove s-memory.adb target pair from the Cygwin/Mingw32\n+\tsection.\n+\n 2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* frontend.adb (Frontend): The removal of ignored Ghost code must be"}, {"sha": "7eaa9ba90cd151388e920b9bda8550f52799fd2e", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "patch": "@@ -1960,19 +1960,17 @@ endif\n # Cygwin/Mingw32\n ifeq ($(strip $(filter-out cygwin% mingw32% pe,$(target_os))),)\n   # Cygwin provides a full Posix environment, and so we use the default\n-  # versions of s-memory and g-socthi rather than the Windows-specific\n-  # MinGW versions.  Ideally we would use all the default versions for\n-  # Cygwin and none of the MinGW versions, but for historical reasons\n-  # the Cygwin port has always been a CygMing frankenhybrid and it is\n-  # a long-term project to disentangle them.\n+  # versions g-socthi rather than the Windows-specific MinGW version.\n+  # Ideally we would use all the default versions for Cygwin and none\n+  # of the MinGW versions, but for historical reasons the Cygwin port\n+  # has always been a CygMing frankenhybrid and it is a long-term project\n+  # to disentangle them.\n   ifeq ($(strip $(filter-out cygwin%,$(target_os))),)\n     LIBGNAT_TARGET_PAIRS = \\\n-    s-memory.adb<libgnat/s-memory.adb \\\n     g-socthi.ads<libgnat/g-socthi.ads \\\n     g-socthi.adb<libgnat/g-socthi.adb\n   else\n     LIBGNAT_TARGET_PAIRS = \\\n-    s-memory.adb<libgnat/s-memory__mingw.adb \\\n     g-socthi.ads<libgnat/g-socthi__mingw.ads \\\n     g-socthi.adb<libgnat/g-socthi__mingw.adb\n   endif"}, {"sha": "1fcad5bd0b05ef4670acc3cd394b02cb48679914", "filename": "gcc/ada/libgnat/s-memory__mingw.adb", "status": "removed", "additions": 0, "deletions": 221, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffb58afe1ad318ccf289325e802d913bd8e0e15/gcc%2Fada%2Flibgnat%2Fs-memory__mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffb58afe1ad318ccf289325e802d913bd8e0e15/gcc%2Fada%2Flibgnat%2Fs-memory__mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-memory__mingw.adb?ref=7ffb58afe1ad318ccf289325e802d913bd8e0e15", "patch": "@@ -1,221 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                         S Y S T E M . M E M O R Y                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---         Copyright (C) 2001-2018, Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version provides ways to limit the amount of used memory for systems\n---  that do not have OS support for that.\n-\n---  The amount of available memory available for dynamic allocation is limited\n---  by setting the environment variable GNAT_MEMORY_LIMIT to the number of\n---  kilobytes that can be used.\n---\n---  Windows is currently using this version.\n-\n-with Ada.Exceptions;\n-with System.Soft_Links;\n-\n-package body System.Memory is\n-\n-   use Ada.Exceptions;\n-   use System.Soft_Links;\n-\n-   function c_malloc (Size : size_t) return System.Address;\n-   pragma Import (C, c_malloc, \"malloc\");\n-\n-   procedure c_free (Ptr : System.Address);\n-   pragma Import (C, c_free, \"free\");\n-\n-   function c_realloc\n-     (Ptr : System.Address; Size : size_t) return System.Address;\n-   pragma Import (C, c_realloc, \"realloc\");\n-\n-   function msize (Ptr : System.Address) return size_t;\n-   pragma Import (C, msize, \"_msize\");\n-\n-   function getenv (Str : String) return System.Address;\n-   pragma Import (C, getenv);\n-\n-   function atoi (Str : System.Address) return Integer;\n-   pragma Import (C, atoi);\n-\n-   Available_Memory : size_t := 0;\n-   --  Amount of memory that is available for heap allocations.\n-   --  A value of 0 means that the amount is not yet initialized.\n-\n-   Msize_Accuracy   : constant := 4096;\n-   --  Defines the amount of memory to add to requested allocation sizes,\n-   --  because malloc may return a bigger block than requested. As msize\n-   --  is used when by Free, it must be used on allocation as well. To\n-   --  prevent underflow of available_memory we need to use a reserve.\n-\n-   procedure Check_Available_Memory (Size : size_t);\n-   --  This routine must be called while holding the task lock. When the\n-   --  memory limit is not yet initialized, it will be set to the value of\n-   --  the GNAT_MEMORY_LIMIT environment variable or to unlimited if that\n-   --  does not exist. If the size is larger than the amount of available\n-   --  memory, the task lock will be freed and a storage_error exception\n-   --  will be raised.\n-\n-   -----------\n-   -- Alloc --\n-   -----------\n-\n-   function Alloc (Size : size_t) return System.Address is\n-      Result      : System.Address;\n-      Actual_Size : size_t := Size;\n-\n-   begin\n-      if Size = size_t'Last then\n-         Raise_Exception (Storage_Error'Identity, \"object too large\");\n-      end if;\n-\n-      --  Change size from zero to non-zero. We still want a proper pointer\n-      --  for the zero case because pointers to zero length objects have to\n-      --  be distinct, but we can't just go ahead and allocate zero bytes,\n-      --  since some malloc's return zero for a zero argument.\n-\n-      if Size = 0 then\n-         Actual_Size := 1;\n-      end if;\n-\n-      Lock_Task.all;\n-\n-      if Actual_Size + Msize_Accuracy >= Available_Memory then\n-         Check_Available_Memory (Size + Msize_Accuracy);\n-      end if;\n-\n-      Result := c_malloc (Actual_Size);\n-\n-      if Result /= System.Null_Address then\n-         Available_Memory := Available_Memory - msize (Result);\n-      end if;\n-\n-      Unlock_Task.all;\n-\n-      if Result = System.Null_Address then\n-         Raise_Exception (Storage_Error'Identity, \"heap exhausted\");\n-      end if;\n-\n-      return Result;\n-   end Alloc;\n-\n-   ----------------------------\n-   -- Check_Available_Memory --\n-   ----------------------------\n-\n-   procedure Check_Available_Memory (Size : size_t) is\n-      Gnat_Memory_Limit : System.Address;\n-\n-   begin\n-      if Available_Memory = 0 then\n-\n-         --  The amount of available memory hasn't been initialized yet\n-\n-         Gnat_Memory_Limit := getenv (\"GNAT_MEMORY_LIMIT\" & ASCII.NUL);\n-\n-         if Gnat_Memory_Limit /= System.Null_Address then\n-            Available_Memory :=\n-              size_t (atoi (Gnat_Memory_Limit)) * 1024 + Msize_Accuracy;\n-         else\n-            Available_Memory := size_t'Last;\n-         end if;\n-      end if;\n-\n-      if Size >= Available_Memory then\n-\n-         --  There is a memory overflow\n-\n-         Unlock_Task.all;\n-         Raise_Exception\n-           (Storage_Error'Identity, \"heap memory limit exceeded\");\n-      end if;\n-   end Check_Available_Memory;\n-\n-   ----------\n-   -- Free --\n-   ----------\n-\n-   procedure Free (Ptr : System.Address) is\n-   begin\n-      Lock_Task.all;\n-\n-      if Ptr /= System.Null_Address then\n-         Available_Memory := Available_Memory + msize (Ptr);\n-      end if;\n-\n-      c_free (Ptr);\n-\n-      Unlock_Task.all;\n-   end Free;\n-\n-   -------------\n-   -- Realloc --\n-   -------------\n-\n-   function Realloc\n-     (Ptr  : System.Address;\n-      Size : size_t)\n-      return System.Address\n-   is\n-      Result      : System.Address;\n-      Actual_Size : constant size_t := Size;\n-      Old_Size    : size_t;\n-\n-   begin\n-      if Size = size_t'Last then\n-         Raise_Exception (Storage_Error'Identity, \"object too large\");\n-      end if;\n-\n-      Lock_Task.all;\n-\n-      Old_Size := msize (Ptr);\n-\n-      --  Conservative check - no need to try to be precise here\n-\n-      if Size + Msize_Accuracy >= Available_Memory then\n-         Check_Available_Memory (Size + Msize_Accuracy);\n-      end if;\n-\n-      Result := c_realloc (Ptr, Actual_Size);\n-\n-      if Result /= System.Null_Address then\n-         Available_Memory := Available_Memory + Old_Size - msize (Result);\n-      end if;\n-\n-      Unlock_Task.all;\n-\n-      if Result = System.Null_Address then\n-         Raise_Exception (Storage_Error'Identity, \"heap exhausted\");\n-      end if;\n-\n-      return Result;\n-   end Realloc;\n-\n-end System.Memory;"}, {"sha": "7c4189e84c8d2a7054cb9084f36a0f28c6e8d184", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "patch": "@@ -1,3 +1,7 @@\n+2018-07-17  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* gnat.dg/memorytest.adb: New testcase.\n+\n 2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/config_pragma1.adb, gnat.dg/config_pragma1_pkg.ads: New testcase."}, {"sha": "ffc33864e657aadfb4af68431f465c0906313693", "filename": "gcc/testsuite/gnat.dg/memorytest.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Ftestsuite%2Fgnat.dg%2Fmemorytest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26/gcc%2Ftestsuite%2Fgnat.dg%2Fmemorytest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmemorytest.adb?ref=c343f1dc19cd16e0fb995c2d3c27c13ab27e0a26", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-do run }\n+\n+with Interfaces.C; use Interfaces.C;\n+with Interfaces.C.Strings; use Interfaces.C.Strings;\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+\n+procedure memorytest is\n+\n+   function malloc (size: size_t) return chars_ptr;\n+   pragma Import (C, malloc);\n+\n+   C : chars_ptr;\n+\n+begin\n+   --  Allocate a string in C ...\n+   C := malloc (1000);\n+   -- ... and free it with the GNAT runtime\n+   Free (C);\n+\n+   --  now allocate something completely unrelated and free it\n+   declare\n+      A2 : Unbounded_String := To_Unbounded_String (\"hello\");\n+   begin\n+      null;\n+   end;\n+end;"}]}