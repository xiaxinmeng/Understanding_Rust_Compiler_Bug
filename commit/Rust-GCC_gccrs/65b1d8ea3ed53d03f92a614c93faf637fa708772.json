{"sha": "65b1d8ea3ed53d03f92a614c93faf637fa708772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViMWQ4ZWEzZWQ1M2QwM2Y5MmE2MTRjOTNmYWY2MzdmYTcwODc3Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-10-05T10:39:48Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-10-05T10:39:48Z"}, "message": "s390.c (z196_cost): New.\n\n2010-10-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n            Christian Borntraeger  <Christian.Borntraeger@de.ibm.com>\n\n\t* gcc/config/s390/s390.c (z196_cost): New.\n\t(s390_handle_arch_option): Add -march=z196.\n\t(s390_option_override): Use the new cost function and use the z10\n\tdefaults also for z196.\n\t(legitimate_reload_constant_p): Adjust comment.\n\t(legitimate_reload_fp_constant_p): New function.\n\t(s390_preferred_reload_class): Distingiush between FP and Int constants.\n\t(preferred_la_operand_p): Avoid la with index on z196.\n\t(s390_adjust_priority): Trigger also for z196.\n\t(s390_issue_rate): Issue rate for z196 is 3.\n\t(s390_z10_fix_long_loop_prediction): Rename to ...\n\t(s390_fix_long_loop_prediction): ... this.\n\t(s390_reorg): Apply the z10 adjustments also for z196.\n\t(s390_loop_unroll_adjust): Do this also for z196.\n\t* gcc/config/s390/s390.h (enum processor_type): Add PROCESSOR_2817_Z196.\n\t(enum processor_flags): Add PF_Z196.\n\t(TARGET_AVOID_CMP_AND_BRANCH): New macro.\n\t(TARGET_CPU_Z196, TARGET_Z196): New macros.\n\t* gcc/config.gcc: Enable z196 for --with-arch.\n\t* gcc/config/s390/2817.md: New file.\n\t* gcc/config/s390/2084.md: New type for multiply and add.\n\t* gcc/config/s390/2097.md: Likewise.\n\t* gcc/config/s390/s390.md (UNSPEC_POPCNT, UNSPEC_COPYSIGN)\n\t(UNSPECV_ATOMIC_OP): New constants.\n\t(fmadddf, fmaddsf): New values for type attribute.\n\t(z196prop): New insn attribute.\n\t(cpu, cpu_facility): Add z196.\n\t(ATOMIC_Z196): New code iterator.\n\t(noxa): New code attribute.\n\t(gk): New mode attribute.\n\t(*mov<mode>_64, *mov<mode>_31, *mov<mode>_64dfp, mov<mode>):\n\tSupport load zero for fp constants.\n\t(fixuns_truncdddi2, fixuns_trunctddi2)\n\t(fixuns_trunc<BFP:mode><GPR:mode>2): Use the standard rtx pattern\n\tfor z196.\n\t(fixuns_trunc<mode>si2, mov<mode>cc, popcountdi2, popcountsi2)\n\t(popcounthi2, popcountqi2): New expander.\n\t(*fixuns_trunc<FP:mode><GPR:mode>2_z196, floatsi<mode>2)\n\t(floatuns<GPR:mode><FP:mode>2, *mov<mode>cc, sync_<atomic><mode>)\n\t(sync_old_<atomic><mode>, *popcount<mode>, copysign<mode>3): New\n\tinsn definition.\n\t(add<mode>3, *add<mode>3_carry1_cc, *add<mode>3_carry1_cconly)\n\t(*add<mode>3_carry2_cc, *add<mode>3_carry2_cconly, *add<mode>3_cc)\n\t(*add<mode>3_cconly, *add<mode>3_cconly2, *add<mode>3_imm_cc, *sub<mode>3)\n\t(*sub<mode>3_borrow_cc, *sub<mode>3_borrow_cconly, *sub<mode>3_cc)\n\t(*sub<mode>3_cc2, *sub<mode>3_cconly, *sub<mode>3_cconly2)\n\t(*anddi3_cc, *anddi3_cconly, *anddi3, *andsi3_cc, *andsi3_cconly)\n\t(*andsi3_zarch, *andsi3_esa, *andhi3_zarch, *andqi3_zarch, *iordi3_cc)\n\t(*iordi3_cconly, *iordi3, *iorsi3_cc, *iorsi3_cconly, *iorsi3_zarch)\n\t(*iorhi3_zarch, *iorqi3_zarch, *xordi3_cc, *xordi3_cconly, *xordi3)\n\t(*xorsi3_cc, *xorsi3_cconly, *xorsi3, *xorhi3, *xorqi3, *<shift><mode>3)\n\t(*<shift><mode>3_and, *ashr<mode>3_cc, *ashr<mode>3_cconly, *ashr<mode>3)\n\t(*ashr<mode>3_cc_and, *ashr<mode>3_cconly_and, *ashr<mode>3_and):\n\tSupport new z196 instructions.\n\n\nCo-Authored-By: Christian Borntraeger <Christian.Borntraeger@de.ibm.com>\n\nFrom-SVN: r164985", "tree": {"sha": "f525e5ae1b824e7da9d37e83b5c4fb9c6e95b3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f525e5ae1b824e7da9d37e83b5c4fb9c6e95b3c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65b1d8ea3ed53d03f92a614c93faf637fa708772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b1d8ea3ed53d03f92a614c93faf637fa708772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b1d8ea3ed53d03f92a614c93faf637fa708772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b1d8ea3ed53d03f92a614c93faf637fa708772/comments", "author": null, "committer": null, "parents": [{"sha": "6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5723262255ea4d43d14d7c959e4dcc28cd01c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5723262255ea4d43d14d7c959e4dcc28cd01c3"}], "stats": {"total": 1822, "additions": 1336, "deletions": 486}, "files": [{"sha": "00c90b9690d5fd71a12272185828f7c76313cd6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -1,3 +1,61 @@\n+2010-10-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+            Christian Borntraeger  <Christian.Borntraeger@de.ibm.com>\n+\n+\t* gcc/config/s390/s390.c (z196_cost): New.\n+\t(s390_handle_arch_option): Add -march=z196.\n+\t(s390_option_override): Use the new cost function and use the z10\n+\tdefaults also for z196.\n+\t(legitimate_reload_constant_p): Adjust comment.\n+\t(legitimate_reload_fp_constant_p): New function.\n+\t(s390_preferred_reload_class): Distingiush between FP and Int constants.\n+\t(preferred_la_operand_p): Avoid la with index on z196.\n+\t(s390_adjust_priority): Trigger also for z196.\n+\t(s390_issue_rate): Issue rate for z196 is 3.\n+\t(s390_z10_fix_long_loop_prediction): Rename to ...\n+\t(s390_fix_long_loop_prediction): ... this.\n+\t(s390_reorg): Apply the z10 adjustments also for z196.\n+\t(s390_loop_unroll_adjust): Do this also for z196.\n+\t* gcc/config/s390/s390.h (enum processor_type): Add PROCESSOR_2817_Z196.\n+\t(enum processor_flags): Add PF_Z196.\n+\t(TARGET_AVOID_CMP_AND_BRANCH): New macro.\n+\t(TARGET_CPU_Z196, TARGET_Z196): New macros.\n+\t* gcc/config.gcc: Enable z196 for --with-arch.\n+\t* gcc/config/s390/2817.md: New file.\n+\t* gcc/config/s390/2084.md: New type for multiply and add.\n+\t* gcc/config/s390/2097.md: Likewise.\n+\t* gcc/config/s390/s390.md (UNSPEC_POPCNT, UNSPEC_COPYSIGN)\n+\t(UNSPECV_ATOMIC_OP): New constants.\n+\t(fmadddf, fmaddsf): New values for type attribute.\n+\t(z196prop): New insn attribute.\n+\t(cpu, cpu_facility): Add z196.\n+\t(ATOMIC_Z196): New code iterator.\n+\t(noxa): New code attribute.\n+\t(gk): New mode attribute.\n+\t(*mov<mode>_64, *mov<mode>_31, *mov<mode>_64dfp, mov<mode>):\n+\tSupport load zero for fp constants.\n+\t(fixuns_truncdddi2, fixuns_trunctddi2)\n+\t(fixuns_trunc<BFP:mode><GPR:mode>2): Use the standard rtx pattern\n+\tfor z196.\n+\t(fixuns_trunc<mode>si2, mov<mode>cc, popcountdi2, popcountsi2)\n+\t(popcounthi2, popcountqi2): New expander.\n+\t(*fixuns_trunc<FP:mode><GPR:mode>2_z196, floatsi<mode>2)\n+\t(floatuns<GPR:mode><FP:mode>2, *mov<mode>cc, sync_<atomic><mode>)\n+\t(sync_old_<atomic><mode>, *popcount<mode>, copysign<mode>3): New\n+\tinsn definition.\n+\t(add<mode>3, *add<mode>3_carry1_cc, *add<mode>3_carry1_cconly)\n+\t(*add<mode>3_carry2_cc, *add<mode>3_carry2_cconly, *add<mode>3_cc)\n+\t(*add<mode>3_cconly, *add<mode>3_cconly2, *add<mode>3_imm_cc, *sub<mode>3)\n+\t(*sub<mode>3_borrow_cc, *sub<mode>3_borrow_cconly, *sub<mode>3_cc)\n+\t(*sub<mode>3_cc2, *sub<mode>3_cconly, *sub<mode>3_cconly2)\n+\t(*anddi3_cc, *anddi3_cconly, *anddi3, *andsi3_cc, *andsi3_cconly)\n+\t(*andsi3_zarch, *andsi3_esa, *andhi3_zarch, *andqi3_zarch, *iordi3_cc)\n+\t(*iordi3_cconly, *iordi3, *iorsi3_cc, *iorsi3_cconly, *iorsi3_zarch)\n+\t(*iorhi3_zarch, *iorqi3_zarch, *xordi3_cc, *xordi3_cconly, *xordi3)\n+\t(*xorsi3_cc, *xorsi3_cconly, *xorsi3, *xorhi3, *xorqi3, *<shift><mode>3)\n+\t(*<shift><mode>3_and, *ashr<mode>3_cc, *ashr<mode>3_cconly, *ashr<mode>3)\n+\t(*ashr<mode>3_cc_and, *ashr<mode>3_cconly_and, *ashr<mode>3_and):\n+\tSupport new z196 instructions.\n+\n 2010-10-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45877"}, {"sha": "b813ca34be49f54c8acadfbb2da614997346cd4c", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -3374,7 +3374,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10)\n+\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "bd0e27194b57b7e2fd35ead527d92fec2a5a94f0", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -168,12 +168,12 @@\n \n (define_insn_reservation \"x_fsimpdf\" 6\n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"fsimpdf,fmuldf,fhex\"))\n+       (eq_attr \"type\" \"fsimpdf,fmuldf,fmadddf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_fsimpsf\" 6\n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"fsimpsf,fmulsf,fhex\"))\n+       (eq_attr \"type\" \"fsimpsf,fmulsf,fmaddsf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n "}, {"sha": "d138ebb4d3e7b4ba6552530d1838697f630465bc", "filename": "gcc/config/s390/2097.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2097.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2097.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2097.md?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -463,12 +463,12 @@\n \n (define_insn_reservation \"z10_fsimpdf\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n-       (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n+       (eq_attr \"type\" \"fsimpdf,fmuldf,fmadddf\"))\n   \"z10_e1_BOTH, z10_Gate_FP\")\n \n (define_insn_reservation \"z10_fsimpsf\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n-       (eq_attr \"type\" \"fsimpsf,fmulsf\"))\n+       (eq_attr \"type\" \"fsimpsf,fmulsf,fmaddsf\"))\n   \"z10_e1_BOTH, z10_Gate_FP\")\n \n (define_insn_reservation \"z10_fmultf\" 52"}, {"sha": "9bd4e1a449c0f88c2021d3518425ae6229bb0528", "filename": "gcc/config/s390/2817.md", "status": "added", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2817.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2F2817.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2817.md?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -0,0 +1,313 @@\n+;; Scheduling description for z196 (cpu 2817).\n+;;   Copyright (C) 2010\n+;;   Free Software Foundation, Inc.\n+;;   Contributed by Christian Borntraeger (Christian.Borntraeger@de.ibm.com)\n+;;                  Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3, or (at your option) any later\n+;; version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+;; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"z196_ipu\")\n+\n+;; Fetch + Decoder\n+(define_cpu_unit \"z196_g1\" \"z196_ipu\")\n+(define_cpu_unit \"z196_g2\" \"z196_ipu\")\n+(define_cpu_unit \"z196_g3\" \"z196_ipu\")\n+(define_cpu_unit \"z196_cr1\" \"z196_ipu\")\n+(define_cpu_unit \"z196_cr2\" \"z196_ipu\")\n+(define_cpu_unit \"z196_cr3\" \"z196_ipu\")\n+\n+(final_presence_set \"z196_g2\" \"z196_g1\")\n+(final_presence_set \"z196_g3\" \"z196_g2\")\n+(final_presence_set \"z196_cr2\" \"z196_cr1\")\n+(final_presence_set \"z196_cr3\" \"z196_cr2\")\n+(exclusion_set \"z196_g1\" \"z196_cr1\")\n+\n+;; Instructions can be groupable, end a group, or be alone in a group.\n+(define_reservation \"z196_simple\" \"( z196_g1 | z196_g2 | z196_g3 )\")\n+(define_reservation \"z196_ends\" \"( z196_g3 | ( z196_g2 + z196_g3 ) | ( z196_g1 + z196_g2 + z196_g3 ) )\")\n+\n+;; Try to keep cracked and alone ops together in a clump.\n+(define_reservation \"z196_crack\"  \"( z196_cr1 | z196_cr2 | z196_cr3 )\")\n+(define_reservation \"z196_alone\"  \"( z196_cr1 | z196_cr2 | z196_cr3 )\")\n+\n+;; Most simple instruction a fast enough to be handled by OOO even with\n+;; latency == 0.  This reduces life ranges and spilling. We want to increase\n+;; life range for longer running ops, though, thats why we do not use\n+;; -fno-schedule-insns.\n+(define_insn_reservation \"z196_simple_LSU\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"load,store,lr\")\n+            (eq_attr \"z196prop\" \"none\")))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_simple_FXU\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"integer,la,larl,other\")\n+            (and (eq_attr \"z196prop\" \"none\")\n+                 (eq_attr \"op_type\" \"RR\"))))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_simple_DUAL\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"integer,la,larl,other\")\n+            (and (eq_attr \"z196prop\" \"none\")\n+                 (eq_attr \"op_type\" \"!RR\"))))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_cracked\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"integer,la,larl,load,lr,store,other\")\n+            (eq_attr \"z196prop\" \"z196_cracked\")))\n+  \"z196_crack\")\n+\n+(define_insn_reservation \"z196_alone\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"integer,la,larl,load,lr,store,other\")\n+            (eq_attr \"z196prop\" \"z196_alone\")))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_ends\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (and (eq_attr \"type\" \"integer,la,larl,load,lr,store,other\")\n+            (eq_attr \"z196prop\" \"z196_ends\")))\n+  \"z196_ends\")\n+\n+(define_insn_reservation \"z196_branch\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"z196_ends\")\n+\n+(define_insn_reservation \"z196_call\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"jsr\"))\n+  \"z196_ends\")\n+\n+(define_insn_reservation \"z196_mul_hi\" 10\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"imulhi\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_mul_si\" 12\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"imulsi\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_mul_di\" 14\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"imuldi\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_div\" 73\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_sem\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"sem\"))\n+  \"z196_crack\")\n+\n+(define_insn_reservation \"z196_cs\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"cs\"))\n+  \"z196_crack\")\n+\n+(define_insn_reservation \"z196_vs\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"vs\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_lm_stm\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"stm,lm\"))\n+  \"z196_crack\")\n+\n+\n+;;\n+;; Binary Floating Point\n+;;\n+\n+(define_insn_reservation \"z196_fsimptf\" 18\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimptf,fhex\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_fmultf\" 47\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fmultf\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_fsimpdf\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimpdf,fmuldf,fhex\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_fmadddf\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fmadddf\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_fsimpsf\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimpsf,fmulsf,fhex\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_fmaddsf\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fmaddsf\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_fdivtf\" 108\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fdivtf,fsqrttf\"))\n+  \"z196_alone\")\n+\n+(define_insn_reservation \"z196_fdivdf\" 36\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fdivdf,fsqrtdf\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_fdivsf\" 29\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fdivsf,fsqrtsf\"))\n+  \"z196_simple\")\n+\n+\n+;; Loads and stores are cheap as well.\n+(define_insn_reservation \"z196_floaddf\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"floaddf\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_floadsf\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"floadsf\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_fstoredf\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fstoredf\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_fstoresf\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fstoresf\"))\n+  \"z196_simple\")\n+\n+\n+(define_insn_reservation \"z196_ftrunctf\" 9\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftrunctf\"))\n+  \"z196_simple\")\n+\n+(define_insn_reservation \"z196_ftruncdf\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftruncdf\"))\n+  \"z196_simple\")\n+\n+\n+(define_insn_reservation \"z196_ftoi\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftoi\"))\n+  \"z196_crack\")\n+\n+(define_insn_reservation \"z196_itof\" 7\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"itoftf,itofdf,itofsf\"))\n+  \"z196_crack\")\n+\n+;;\n+;; Decimal Floating Point\n+;;\n+\n+;; DDTR\n+(define_insn_reservation \"z196_fdivdd\" 33\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fdivdd\"))\n+  \"z196_simple\")\n+\n+;; DXTR\n+(define_insn_reservation \"z196_fdivtd\" 35\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fdivtd\"))\n+  \"z196_alone\")\n+\n+;; LEDTR\n+(define_insn_reservation \"z196_ftruncsd\" 34\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftruncsd\"))\n+  \"z196_simple\")\n+\n+;; LDXTR\n+(define_insn_reservation \"z196_ftruncdd\" 36\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftruncdd\"))\n+  \"z196_simple\")\n+\n+;; These are normal fp loads/stores - which are cheap.\n+(define_insn_reservation \"z196_floadsddd\" 0\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"floadsd,floaddd,fstoredd,fstoresd\"))\n+  \"z196_simple\")\n+\n+;; MDTR\n+(define_insn_reservation \"z196_fmuldd\" 23\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fmuldd\"))\n+  \"z196_simple\")\n+\n+;; MXTR\n+(define_insn_reservation \"z196_fmultd\" 25\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fmultd\"))\n+  \"z196_alone\")\n+\n+;; multiple different isns like add, sub etc.\n+;; Just use the same defaults as z10.\n+(define_insn_reservation \"z196_fsimpsd\" 17\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimpsd\"))\n+  \"z196_simple\")\n+(define_insn_reservation \"z196_fsimpdd\" 17\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimpdd\"))\n+  \"z196_simple\")\n+(define_insn_reservation \"z196_fsimptd\" 18\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"fsimptd\"))\n+  \"z196_alone\")\n+\n+;; CDGTR\n+(define_insn_reservation \"z196_itofdd\" 45\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"itofdd\"))\n+  \"z196_crack\")\n+\n+;; CXGTR\n+(define_insn_reservation \"z196_itoftd\" 33\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"itoftd\"))\n+  \"z196_crack\")\n+\n+;; CGXTR, CGDTR\n+(define_insn_reservation \"z196_ftoidfp\" 33\n+  (and (eq_attr \"cpu\" \"z196\")\n+       (eq_attr \"type\" \"ftoidfp\"))\n+  \"z196_crack\")\n+\n+\n+"}, {"sha": "7fec1b9bcc2ca8a746d25d222627021fa798385b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 93, "deletions": 27, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -223,6 +223,38 @@ struct processor_costs z10_cost =\n   COSTS_N_INSNS (71),    /* DSGR */\n };\n \n+static const\n+struct processor_costs z196_cost =\n+{\n+  COSTS_N_INSNS (7),     /* M     */\n+  COSTS_N_INSNS (5),     /* MGHI  */\n+  COSTS_N_INSNS (5),     /* MH    */\n+  COSTS_N_INSNS (5),     /* MHI   */\n+  COSTS_N_INSNS (7),     /* ML    */\n+  COSTS_N_INSNS (7),     /* MR    */\n+  COSTS_N_INSNS (6),     /* MS    */\n+  COSTS_N_INSNS (8),     /* MSG   */\n+  COSTS_N_INSNS (6),     /* MSGF  */\n+  COSTS_N_INSNS (6),     /* MSGFR */\n+  COSTS_N_INSNS (8),     /* MSGR  */\n+  COSTS_N_INSNS (6),     /* MSR   */\n+  COSTS_N_INSNS (1) ,    /* multiplication in DFmode */\n+  COSTS_N_INSNS (40),    /* MXBR B+40 */\n+  COSTS_N_INSNS (100),   /* SQXBR B+100 */\n+  COSTS_N_INSNS (42),    /* SQDBR B+42 */\n+  COSTS_N_INSNS (28),    /* SQEBR B+28 */\n+  COSTS_N_INSNS (1),     /* MADBR B */\n+  COSTS_N_INSNS (1),     /* MAEBR B */\n+  COSTS_N_INSNS (101),   /* DXBR B+101 */\n+  COSTS_N_INSNS (29),    /* DDBR */\n+  COSTS_N_INSNS (22),    /* DEBR */\n+  COSTS_N_INSNS (160),   /* DLGR cracked */\n+  COSTS_N_INSNS (160),   /* DLR cracked */\n+  COSTS_N_INSNS (160),   /* DR expanded */\n+  COSTS_N_INSNS (160),   /* DSGFR cracked */\n+  COSTS_N_INSNS (160),   /* DSGR cracked */\n+};\n+\n extern int reload_completed;\n \n /* Kept up to date using the SCHED_VARIABLE_ISSUE hook.  */\n@@ -350,8 +382,8 @@ struct GTY(()) machine_function\n   (HARD_REGNO_NREGS ((REGNO), (MODE)) == 1 || !((REGNO) & 1))\n \n /* That's the read ahead of the dynamic branch prediction unit in\n-   bytes on a z10 CPU.  */\n-#define Z10_PREDICT_DISTANCE 384\n+   bytes on a z10 (or higher) CPU.  */\n+#define PREDICT_DISTANCE (TARGET_Z10 ? 384 : 2048)\n \n static enum machine_mode\n s390_libgcc_cmp_return_mode (void)\n@@ -1506,7 +1538,9 @@ s390_handle_arch_option (const char *arg,\n       {\"z9-ec\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n                              | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP },\n       {\"z10\", PROCESSOR_2097_Z10, PF_IEEE_FLOAT | PF_ZARCH\n-                             | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10},\n+       | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10},\n+      {\"z196\", PROCESSOR_2817_Z196, PF_IEEE_FLOAT | PF_ZARCH\n+       | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 },\n     };\n   size_t i;\n \n@@ -1624,6 +1658,8 @@ s390_option_override (void)\n       break;\n     case PROCESSOR_2097_Z10:\n       s390_cost = &z10_cost;\n+    case PROCESSOR_2817_Z196:\n+      s390_cost = &z196_cost;\n       break;\n     default:\n       s390_cost = &z900_cost;\n@@ -1648,7 +1684,8 @@ s390_option_override (void)\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n \n-  if (s390_tune == PROCESSOR_2097_Z10)\n+  if (s390_tune == PROCESSOR_2097_Z10\n+      || s390_tune == PROCESSOR_2817_Z196)\n     {\n       if (!PARAM_SET_P (PARAM_MAX_UNROLLED_INSNS))\n \tset_param_value (\"max-unrolled-insns\", 100);\n@@ -2782,7 +2819,9 @@ s390_cannot_force_const_mem (rtx x)\n    operand during and after reload.  The difference to\n    legitimate_constant_p is that this function will not accept\n    a constant that would need to be forced to the literal pool\n-   before it can be used as operand.  */\n+   before it can be used as operand.\n+   This function accepts all constants which can be loaded directly\n+   into a GPR.  */\n \n bool\n legitimate_reload_constant_p (rtx op)\n@@ -2836,6 +2875,24 @@ legitimate_reload_constant_p (rtx op)\n   return false;\n }\n \n+/* Returns true if the constant value OP is a legitimate fp operand\n+   during and after reload.\n+   This function accepts all constants which can be loaded directly\n+   into an FPR.  */\n+\n+static bool\n+legitimate_reload_fp_constant_p (rtx op)\n+{\n+  /* Accept floating-point zero operands if the load zero instruction\n+     can be used.  */\n+  if (TARGET_Z196\n+      && GET_CODE (op) == CONST_DOUBLE\n+      && s390_float_const_zero_p (op))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Given an rtx OP being reloaded into a reg required to be in class RCLASS,\n    return the class of reg to actually use.  */\n \n@@ -2854,8 +2911,10 @@ s390_preferred_reload_class (rtx op, enum reg_class rclass)\n \telse if (reg_class_subset_p (ADDR_REGS, rclass)\n \t\t && legitimate_reload_constant_p (op))\n \t  return ADDR_REGS;\n-\telse\n-\t  return NO_REGS;\n+\telse if (reg_class_subset_p (FP_REGS, rclass)\n+\t\t && legitimate_reload_fp_constant_p (op))\n+\t  return FP_REGS;\n+\treturn NO_REGS;\n \n       /* If a symbolic constant or a PLUS is reloaded,\n \t it is most likely being used as an address, so\n@@ -3218,6 +3277,11 @@ preferred_la_operand_p (rtx op1, rtx op2)\n   if (addr.indx && !REGNO_OK_FOR_INDEX_P (REGNO (addr.indx)))\n     return false;\n \n+  /* Avoid LA instructions with index register on z196; it is\n+     preferable to use regular add instructions when possible.  */\n+  if (addr.indx && s390_tune == PROCESSOR_2817_Z196)\n+    return false;\n+\n   if (!TARGET_64BIT && !addr.pointer)\n     return false;\n \n@@ -5398,8 +5462,6 @@ s390_agen_dep_p (rtx dep_insn, rtx insn)\n \n    A STD instruction should be scheduled earlier,\n    in order to use the bypass.  */\n-\n-\n static int\n s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n {\n@@ -5408,7 +5470,8 @@ s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n \n   if (s390_tune != PROCESSOR_2084_Z990\n       && s390_tune != PROCESSOR_2094_Z9_109\n-      && s390_tune != PROCESSOR_2097_Z10)\n+      && s390_tune != PROCESSOR_2097_Z10\n+      && s390_tune != PROCESSOR_2817_Z196)\n     return priority;\n \n   switch (s390_safe_attr_type (insn))\n@@ -5437,6 +5500,7 @@ s390_issue_rate (void)\n     {\n     case PROCESSOR_2084_Z990:\n     case PROCESSOR_2094_Z9_109:\n+    case PROCESSOR_2817_Z196:\n       return 3;\n     case PROCESSOR_2097_Z10:\n       return 2;\n@@ -9859,13 +9923,13 @@ s390_optimize_prologue (void)\n     }\n }\n \n-/* On z10 the dynamic branch prediction must see the backward jump in\n-   a window of 384 bytes. If not it falls back to the static\n-   prediction.  This function rearranges the loop backward branch in a\n-   way which makes the static prediction always correct.  The function\n-   returns true if it added an instruction.  */\n+/* On z10 and later the dynamic branch prediction must see the\n+   backward jump within a certain windows.  If not it falls back to\n+   the static prediction.  This function rearranges the loop backward\n+   branch in a way which makes the static prediction always correct.\n+   The function returns true if it added an instruction.  */\n static bool\n-s390_z10_fix_long_loop_prediction (rtx insn)\n+s390_fix_long_loop_prediction (rtx insn)\n {\n   rtx set = single_set (insn);\n   rtx code_label, label_ref, new_label;\n@@ -9891,11 +9955,11 @@ s390_z10_fix_long_loop_prediction (rtx insn)\n   if (INSN_ADDRESSES (INSN_UID (code_label)) == -1\n       || INSN_ADDRESSES (INSN_UID (insn)) == -1\n       || (INSN_ADDRESSES (INSN_UID (insn))\n-\t  - INSN_ADDRESSES (INSN_UID (code_label)) < Z10_PREDICT_DISTANCE))\n+\t  - INSN_ADDRESSES (INSN_UID (code_label)) < PREDICT_DISTANCE))\n     return false;\n \n   for (distance = 0, cur_insn = PREV_INSN (insn);\n-       distance < Z10_PREDICT_DISTANCE - 6;\n+       distance < PREDICT_DISTANCE - 6;\n        distance += get_attr_length (cur_insn), cur_insn = PREV_INSN (cur_insn))\n     if (!cur_insn || JUMP_P (cur_insn) || LABEL_P (cur_insn))\n       return false;\n@@ -10195,8 +10259,9 @@ s390_reorg (void)\n   /* Try to optimize prologue and epilogue further.  */\n   s390_optimize_prologue ();\n \n-  /* Walk over the insns and do some z10 specific changes.  */\n-  if (s390_tune == PROCESSOR_2097_Z10)\n+  /* Walk over the insns and do some >=z10 specific changes.  */\n+  if (s390_tune == PROCESSOR_2097_Z10\n+      || s390_tune == PROCESSOR_2817_Z196)\n     {\n       rtx insn;\n       bool insn_added_p = false;\n@@ -10211,10 +10276,11 @@ s390_reorg (void)\n \t    continue;\n \n \t  if (JUMP_P (insn))\n-\t    insn_added_p |= s390_z10_fix_long_loop_prediction (insn);\n+\t    insn_added_p |= s390_fix_long_loop_prediction (insn);\n \n-\t  if (GET_CODE (PATTERN (insn)) == PARALLEL\n-\t      || GET_CODE (PATTERN (insn)) == SET)\n+\t  if ((GET_CODE (PATTERN (insn)) == PARALLEL\n+\t       || GET_CODE (PATTERN (insn)) == SET)\n+\t      && s390_tune == PROCESSOR_2097_Z10)\n \t    insn_added_p |= s390_z10_optimize_cmp (insn);\n \t}\n \n@@ -10360,8 +10426,9 @@ check_dpu (rtx *x, unsigned *mem_count)\n }\n \n /* This target hook implementation for TARGET_LOOP_UNROLL_ADJUST calculates\n-   a new number struct loop *loop should be unrolled if tuned for the z10\n-   cpu. The loop is analyzed for memory accesses by calling check_dpu for\n+   a new number struct loop *loop should be unrolled if tuned for cpus with\n+   a built-in stride prefetcher.\n+   The loop is analyzed for memory accesses by calling check_dpu for\n    each rtx of the loop. Depending on the loop_depth and the amount of\n    memory accesses a new number <=nunroll is returned to improve the\n    behaviour of the hardware prefetch unit.  */\n@@ -10373,8 +10440,7 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n   unsigned i;\n   unsigned mem_count = 0;\n \n-  /* Only z10 needs special handling.  */\n-  if (s390_tune != PROCESSOR_2097_Z10)\n+  if (s390_tune != PROCESSOR_2097_Z10 && s390_tune != PROCESSOR_2817_Z196)\n     return nunroll;\n \n   /* Count the number of memory references within the loop body.  */"}, {"sha": "ca04a7c55874b4f7fd662f5d86c7a150ea875f2e", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -36,6 +36,7 @@ enum processor_type\n   PROCESSOR_2084_Z990,\n   PROCESSOR_2094_Z9_109,\n   PROCESSOR_2097_Z10,\n+  PROCESSOR_2817_Z196,\n   PROCESSOR_max\n };\n \n@@ -48,7 +49,8 @@ enum processor_flags\n   PF_LONG_DISPLACEMENT = 4,\n   PF_EXTIMM = 8,\n   PF_DFP = 16,\n-  PF_Z10 = 32\n+  PF_Z10 = 32,\n+  PF_Z196 = 64\n };\n \n extern enum processor_type s390_tune;\n@@ -77,6 +79,8 @@ extern int s390_arch_flags;\n  \t(s390_arch_flags & PF_DFP)\n #define TARGET_CPU_Z10 \\\n  \t(s390_arch_flags & PF_Z10)\n+#define TARGET_CPU_Z196 \\\n+ \t(s390_arch_flags & PF_Z196)\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility when run in\n@@ -90,6 +94,11 @@ extern int s390_arch_flags;\n        (TARGET_ZARCH && TARGET_CPU_DFP && TARGET_HARD_FLOAT)\n #define TARGET_Z10 \\\n        (TARGET_ZARCH && TARGET_CPU_Z10)\n+#define TARGET_Z196 \\\n+       (TARGET_ZARCH && TARGET_CPU_Z196)\n+\n+\n+#define TARGET_AVOID_CMP_AND_BRANCH (s390_tune == PROCESSOR_2817_Z196)\n \n /* Run-time target specification.  */\n "}, {"sha": "6d03923a54254c2821e2fd6b56e31c79da593935", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 857, "deletions": 453, "changes": 1310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b1d8ea3ed53d03f92a614c93faf637fa708772/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=65b1d8ea3ed53d03f92a614c93faf637fa708772", "patch": "@@ -107,6 +107,10 @@\n \n    ; Test Data Class (TDC)\n    (UNSPEC_TDC_INSN\t\t800)\n+\n+   ; Population Count\n+   (UNSPEC_POPCNT               900)\n+   (UNSPEC_COPYSIGN             901)\n  ])\n \n ;;\n@@ -133,6 +137,7 @@\n \n    ; Atomic Support\n    (UNSPECV_CAS\t\t\t700)\n+   (UNSPECV_ATOMIC_OP           701)\n   ])\n \n ;;\n@@ -203,6 +208,7 @@\n \t\t     floadtf,floaddf,floadsf,fstoredf,fstoresf,\n \t\t     fmultf,fmuldf,fmulsf,fdivtf,fdivdf,fdivsf,\n \t\t     ftoi,fsqrttf,fsqrtdf,fsqrtsf,\n+\t\t     fmadddf,fmaddsf,\n                      ftrunctf,ftruncdf, ftruncsd, ftruncdd,\n                      itoftf, itofdf, itofsf, itofdd, itoftd,\n                      fdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd,\n@@ -244,6 +250,14 @@\n                         z10_c\"\n              (const_string \"none\"))\n \n+;; Properties concerning Z196 decoding\n+;; z196_alone: must group alone\n+;; z196_end: ends a group\n+;; z196_cracked: instruction is cracked or expanded\n+(define_attr \"z196prop\" \"none,\n+                         z196_alone, z196_ends,\n+                         z196_cracked\"\n+             (const_string \"none\"))\n \n ;; Length in bytes.\n \n@@ -258,10 +272,10 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z10\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z10,z196\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n-(define_attr \"cpu_facility\" \"standard,ieee,zarch,longdisp,extimm,dfp,z10\"\n+(define_attr \"cpu_facility\" \"standard,ieee,zarch,longdisp,extimm,dfp,z10,z196\"\n   (const_string \"standard\"))\n \n (define_attr \"enabled\" \"\"\n@@ -290,6 +304,10 @@\n \n          (and (eq_attr \"cpu_facility\" \"z10\")\n               (ne (symbol_ref \"TARGET_Z10\") (const_int 0)))\n+\t (const_int 1)\n+\n+         (and (eq_attr \"cpu_facility\" \"z196\")\n+              (ne (symbol_ref \"TARGET_Z196\") (const_int 0)))\n \t (const_int 1)]\n \t(const_int 0)))\n \n@@ -303,6 +321,9 @@\n ;; Pipeline description for z10\n (include \"2097.md\")\n \n+;; Pipeline description for z196\n+(include \"2817.md\")\n+\n ;; Predicates\n (include \"predicates.md\")\n \n@@ -361,8 +382,10 @@\n \n ;; This iterator and attribute allow to combine most atomic operations.\n (define_code_iterator ATOMIC [and ior xor plus minus mult])\n+(define_code_iterator ATOMIC_Z196 [and ior xor plus])\n (define_code_attr atomic [(and \"and\") (ior \"ior\") (xor \"xor\")\n \t\t\t  (plus \"add\") (minus \"sub\") (mult \"nand\")])\n+(define_code_attr noxa [(and \"n\") (ior \"o\") (xor \"x\") (plus \"a\")])\n \n ;; In FP templates, a string like \"lt<de>br\" will expand to \"ltxbr\" in\n ;; TF/TDmode, \"ltdbr\" in DF/DDmode, and \"ltebr\" in SF/SDmode.\n@@ -464,6 +487,11 @@\n ;; and \"cfdbr\" in SImode.\n (define_mode_attr gf [(DI \"g\") (SI \"f\")])\n \n+;; In GPR templates, a string like sll<gk> will expand to sllg for DI\n+;; and sllk for SI.  This way it is possible to merge the new z196 SI\n+;; 3 operands shift instructions into the existing patterns.\n+(define_mode_attr gk [(DI \"g\") (SI \"k\")])\n+\n ;; ICM mask required to load MODE value into the lowest subreg\n ;; of a SImode register.\n (define_mode_attr icm_lo [(HI \"3\") (QI \"1\")])\n@@ -775,15 +803,17 @@\n    chrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RX,RXY,RIL\")\n    (set_attr \"cpu_facility\" \"*,*,z10\")\n-   (set_attr \"type\"         \"*,*,larl\")])\n+   (set_attr \"type\"         \"*,*,larl\")\n+   (set_attr \"z196prop\" \"z196_cracked,z196_cracked,z196_cracked\")])\n \n (define_insn \"*cmphi_ccs_z10\"\n   [(set (reg CC_REGNUM)\n         (compare (match_operand:HI 0 \"s_operand\"         \"Q\")\n                  (match_operand:HI 1 \"immediate_operand\" \"K\")))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_Z10\"\n   \"chhsi\\t%0,%1\"\n-  [(set_attr \"op_type\" \"SIL\")])\n+  [(set_attr \"op_type\" \"SIL\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*cmpdi_ccs_signhi_rl\"\n   [(set (reg CC_REGNUM)\n@@ -1002,7 +1032,7 @@\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\"\n+  \"TARGET_Z10 && !TARGET_AVOID_CMP_AND_BRANCH\"\n {\n   if (get_attr_length (insn) == 6)\n     return which_alternative ?\n@@ -1030,7 +1060,7 @@\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\"\n+  \"TARGET_Z10 && !TARGET_AVOID_CMP_AND_BRANCH\"\n {\n   if (get_attr_length (insn) == 6)\n     return which_alternative ?\n@@ -1060,7 +1090,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 3 \"\" \"\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\"\n+  \"TARGET_Z10 && !TARGET_AVOID_CMP_AND_BRANCH\"\n {\n   if (get_attr_length (insn) == 6)\n     return which_alternative ?\n@@ -1088,7 +1118,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 3 \"\" \"\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\"\n+  \"TARGET_Z10 && !TARGET_AVOID_CMP_AND_BRANCH\"\n {\n   if (get_attr_length (insn) == 6)\n     return which_alternative ?\n@@ -1928,30 +1958,34 @@\n   \"\")\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,o, d,QS,  d,o\")\n-        (match_operand:TD_TF 1 \"general_operand\"      \" f,o,f,QS, d,dRT,d\"))]\n+  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o, d,QS,  d,o\")\n+        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f,QS, d,dRT,d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n+   lzxr\\t%0\n    lxr\\t%0,%1\n    #\n    #\n    lmg\\t%0,%N0,%S1\n    stmg\\t%1,%N1,%S0\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,*,*,RSY,RSY,*,*\")\n-   (set_attr \"type\"    \"fsimptf,*,*,lm,stm,*,*\")])\n+  [(set_attr \"op_type\"      \"RRE,RRE,*,*,RSY,RSY,*,*\")\n+   (set_attr \"type\"         \"fsimptf,fsimptf,*,*,lm,stm,*,*\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*\")])\n \n (define_insn \"*mov<mode>_31\"\n-  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,o\")\n-        (match_operand:TD_TF 1 \"general_operand\"      \" f,o,f\"))]\n+  [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o\")\n+        (match_operand:TD_TF 1 \"general_operand\"      \" G,f,o,f\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n+   lzxr\\t%0\n    lxr\\t%0,%1\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,*,*\")\n-   (set_attr \"type\"    \"fsimptf,*,*\")])\n+  [(set_attr \"op_type\"      \"RRE,RRE,*,*\")\n+   (set_attr \"type\"         \"fsimptf,fsimptf,*,*\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*\")])\n \n ; TFmode in GPRs splitters\n \n@@ -2042,11 +2076,12 @@\n \n (define_insn \"*mov<mode>_64dfp\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,d,f,f,R,T,d,d, d,RT\")\n+\t\t\t       \"=f,f,f,d,f,f,R,T,d,d, d,RT\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-\t\t\t       \" f,d,f,R,T,f,f,G,d,RT, d\"))]\n+\t\t\t       \" G,f,d,f,R,T,f,f,G,d,RT, d\"))]\n   \"TARGET_DFP\"\n   \"@\n+   lzdr\\t%0\n    ldr\\t%0,%1\n    ldgr\\t%0,%1\n    lgdr\\t%0,%1\n@@ -2058,17 +2093,18 @@\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RRE,RRE,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"floaddf,floaddf,floaddf,floaddf,floaddf,\n+  [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n+   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n                      fstoredf,fstoredf,*,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")\n-])\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d, d,RT\")\n-        (match_operand:DD_DF 1 \"general_operand\"       \"f,R,T,f,f,G,d,RT, d\"))]\n+  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d,d, d,RT\")\n+        (match_operand:DD_DF 1 \"general_operand\"      \" G,f,R,T,f,f,G,d,RT, d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n+   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -2078,18 +2114,20 @@\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n-                     fstore<mode>,fstore<mode>,*,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n+   (set_attr \"type\"    \"fsimpdf,fload<mode>,fload<mode>,fload<mode>,\n+                        fstore<mode>,fstore<mode>,*,lr,load,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-                               \"=f,f,f,R,T,d,d,Q,S,   d,o\")\n+                               \"=f,f,f,f,R,T,d,d,Q,S,   d,o\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-                               \" f,R,T,f,f,Q,S,d,d,dPRT,d\"))]\n+                               \" G,f,R,T,f,f,Q,S,d,d,dPRT,d\"))]\n   \"!TARGET_ZARCH\"\n   \"@\n+   lzdr\\t%0\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n@@ -2101,9 +2139,10 @@\n    stmy\\t%1,%N1,%S0\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n-   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n-                     fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n+   (set_attr \"type\"    \"fsimpdf,fload<mode>,fload<mode>,fload<mode>,\n+                        fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_split\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"\")\n@@ -2152,11 +2191,12 @@\n \n (define_insn \"mov<mode>\"\n   [(set (match_operand:SD_SF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,R,T,d,d,d,d,R,T\")\n+\t\t\t       \"=f,f,f,f,R,T,d,d,d,d,R,T\")\n         (match_operand:SD_SF 1 \"general_operand\"\n-\t\t\t       \" f,R,T,f,f,G,d,R,T,d,d\"))]\n+\t\t\t       \" G,f,R,T,f,f,G,d,R,T,d,d\"))]\n   \"\"\n   \"@\n+   lzer\\t%0\n    ler\\t%0,%1\n    le\\t%0,%1\n    ley\\t%0,%1\n@@ -2168,10 +2208,11 @@\n    ly\\t%0,%1\n    st\\t%1,%0\n    sty\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RI,RR,RX,RXY,RX,RXY\")\n-   (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n-                     fstore<mode>,fstore<mode>,*,lr,load,load,store,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")])\n+  [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RI,RR,RX,RXY,RX,RXY\")\n+   (set_attr \"type\"    \"fsimpsf,fload<mode>,fload<mode>,fload<mode>,\n+                        fstore<mode>,fstore<mode>,*,lr,load,load,store,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")\n+   (set_attr \"cpu_facility\" \"z196,*,*,*,*,*,*,*,*,*,*,*\")])\n \n ;\n ; movcc instruction pattern\n@@ -2191,7 +2232,8 @@\n    ly\\t%1,%0\"\n   [(set_attr \"op_type\" \"RR,RI,RRE,RX,RXY,RX,RXY\")\n    (set_attr \"type\" \"lr,*,*,store,store,load,load\")\n-   (set_attr \"z10prop\" \"z10_fr_E1,z10_super,*,z10_rec,z10_rec,z10_fwd_A3,z10_fwd_A3\")])\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_super,*,z10_rec,z10_rec,z10_fwd_A3,z10_fwd_A3\")\n+   (set_attr \"z196prop\" \"*,*,z196_ends,*,*,*,*\")])\n \n ;\n ; Block move (MVC) patterns.\n@@ -3846,100 +3888,141 @@\n   [(parallel\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t  (unsigned_fix:DI (match_operand:DD 1 \"register_operand\" \"\")))\n-     (clobber (match_scratch:TD 2 \"=f\"))])]\n+     (unspec:DI [(const_int 5)] UNSPEC_ROUND)\n+     (clobber (reg:CC CC_REGNUM))])]\n \n   \"TARGET_HARD_DFP\"\n {\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n-  rtx temp = gen_reg_rtx (TDmode);\n-  REAL_VALUE_TYPE cmp, sub;\n-\n-  decimal_real_from_string (&cmp, \"9223372036854775808.0\");  /* 2^63 */\n-  decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n-\n-  /* 2^63 can't be represented as 64bit DFP number with full precision.  The\n-     solution is doing the check and the subtraction in TD mode and using a\n-     TD -> DI convert afterwards.  */\n-  emit_insn (gen_extendddtd2 (temp, operands[1]));\n-  temp = force_reg (TDmode, temp);\n-  emit_cmp_and_jump_insns (temp,\n-\tCONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n-\tLT, NULL_RTX, VOIDmode, 0, label1);\n-  emit_insn (gen_subtd3 (temp, temp,\n-\tCONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n-  emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n-  emit_jump (label2);\n-\n-  emit_label (label1);\n-  emit_insn (gen_fix_truncdddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n-  emit_label (label2);\n-  DONE;\n+  if (!TARGET_Z196)\n+    {\n+      rtx label1 = gen_label_rtx ();\n+      rtx label2 = gen_label_rtx ();\n+      rtx temp = gen_reg_rtx (TDmode);\n+      REAL_VALUE_TYPE cmp, sub;\n+\n+      decimal_real_from_string (&cmp, \"9223372036854775808.0\");  /* 2^63 */\n+      decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n+\n+      /* 2^63 can't be represented as 64bit DFP number with full precision.  The\n+         solution is doing the check and the subtraction in TD mode and using a\n+         TD -> DI convert afterwards.  */\n+      emit_insn (gen_extendddtd2 (temp, operands[1]));\n+      temp = force_reg (TDmode, temp);\n+      emit_cmp_and_jump_insns (temp,\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n+\t    LT, NULL_RTX, VOIDmode, 0, label1);\n+      emit_insn (gen_subtd3 (temp, temp,\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n+      emit_jump (label2);\n+\n+      emit_label (label1);\n+      emit_insn (gen_fix_truncdddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n+      emit_label (label2);\n+      DONE;\n+    }\n })\n \n (define_expand \"fixuns_trunctddi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (unsigned_fix:DI (match_operand:TD 1 \"register_operand\" \"\")))]\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t  (unsigned_fix:DI (match_operand:TD 1 \"register_operand\" \"\")))\n+     (unspec:DI [(const_int 5)] UNSPEC_ROUND)\n+     (clobber (reg:CC CC_REGNUM))])]\n+\n   \"TARGET_HARD_DFP\"\n {\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n-  rtx temp = gen_reg_rtx (TDmode);\n-  REAL_VALUE_TYPE cmp, sub;\n-\n-  operands[1] = force_reg (TDmode, operands[1]);\n-  decimal_real_from_string (&cmp, \"9223372036854775808.0\");  /* 2^63 */\n-  decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n-\n-  emit_cmp_and_jump_insns (operands[1],\n-\tCONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n-\tLT, NULL_RTX, VOIDmode, 0, label1);\n-  emit_insn (gen_subtd3 (temp, operands[1],\n-\tCONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n-  emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n-  emit_jump (label2);\n-\n-  emit_label (label1);\n-  emit_insn (gen_fix_trunctddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n-  emit_label (label2);\n-  DONE;\n+  if (!TARGET_Z196)\n+    {\n+      rtx label1 = gen_label_rtx ();\n+      rtx label2 = gen_label_rtx ();\n+      rtx temp = gen_reg_rtx (TDmode);\n+      REAL_VALUE_TYPE cmp, sub;\n+\n+      operands[1] = force_reg (TDmode, operands[1]);\n+      decimal_real_from_string (&cmp, \"9223372036854775808.0\");  /* 2^63 */\n+      decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n+\n+      emit_cmp_and_jump_insns (operands[1],\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n+\t    LT, NULL_RTX, VOIDmode, 0, label1);\n+      emit_insn (gen_subtd3 (temp, operands[1],\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n+      emit_jump (label2);\n+\n+      emit_label (label1);\n+      emit_insn (gen_fix_trunctddi2_dfp (operands[0], operands[1], GEN_INT (9)));\n+      emit_label (label2);\n+      DONE;\n+    }\n })\n \n ;\n-; fixuns_trunc(sf|df)(si|di)2 and fix_trunc(sf|df)(si|di)2\n+; fixuns_trunc(sf|df|tf)(si|di)2 and fix_trunc(sf|df|tf)(si|di)2\n ; instruction pattern(s).\n ;\n \n (define_expand \"fixuns_trunc<BFP:mode><GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"\")\n-        (unsigned_fix:GPR (match_operand:BFP 1 \"register_operand\" \"\")))]\n+  [(parallel\n+    [(set (match_operand:GPR 0 \"register_operand\" \"\")\n+\t  (unsigned_fix:GPR (match_operand:BFP 1 \"register_operand\" \"\")))\n+     (unspec:GPR [(const_int 5)] UNSPEC_ROUND)\n+     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_HARD_FLOAT\"\n {\n-  rtx label1 = gen_label_rtx ();\n-  rtx label2 = gen_label_rtx ();\n-  rtx temp = gen_reg_rtx (<BFP:MODE>mode);\n-  REAL_VALUE_TYPE cmp, sub;\n-\n-  operands[1] = force_reg (<BFP:MODE>mode, operands[1]);\n-  real_2expN (&cmp, GET_MODE_BITSIZE(<GPR:MODE>mode) - 1, <BFP:MODE>mode);\n-  real_2expN (&sub, GET_MODE_BITSIZE(<GPR:MODE>mode), <BFP:MODE>mode);\n-\n-  emit_cmp_and_jump_insns (operands[1],\n-\tCONST_DOUBLE_FROM_REAL_VALUE (cmp, <BFP:MODE>mode),\n-\tLT, NULL_RTX, VOIDmode, 0, label1);\n-  emit_insn (gen_sub<BFP:mode>3 (temp, operands[1],\n-\tCONST_DOUBLE_FROM_REAL_VALUE (sub, <BFP:MODE>mode)));\n-  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0], temp,\n-\tGEN_INT (7)));\n-  emit_jump (label2);\n-\n-  emit_label (label1);\n-  emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0],\n-\toperands[1], GEN_INT (5)));\n-  emit_label (label2);\n-  DONE;\n+  if (!TARGET_Z196)\n+    {\n+      rtx label1 = gen_label_rtx ();\n+      rtx label2 = gen_label_rtx ();\n+      rtx temp = gen_reg_rtx (<BFP:MODE>mode);\n+      REAL_VALUE_TYPE cmp, sub;\n+\n+      operands[1] = force_reg (<BFP:MODE>mode, operands[1]);\n+      real_2expN (&cmp, GET_MODE_BITSIZE(<GPR:MODE>mode) - 1, <BFP:MODE>mode);\n+      real_2expN (&sub, GET_MODE_BITSIZE(<GPR:MODE>mode), <BFP:MODE>mode);\n+\n+      emit_cmp_and_jump_insns (operands[1],\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, <BFP:MODE>mode),\n+\t    LT, NULL_RTX, VOIDmode, 0, label1);\n+      emit_insn (gen_sub<BFP:mode>3 (temp, operands[1],\n+\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, <BFP:MODE>mode)));\n+      emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0], temp,\n+\t    GEN_INT (7)));\n+      emit_jump (label2);\n+\n+      emit_label (label1);\n+      emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0],\n+\t    operands[1], GEN_INT (5)));\n+      emit_label (label2);\n+      DONE;\n+    }\n })\n \n+; fixuns_trunc(td|dd)si2 expander\n+(define_expand \"fixuns_trunc<mode>si2\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (unsigned_fix:SI (match_operand:DFP 1 \"register_operand\" \"\")))\n+     (unspec:SI [(const_int 5)] UNSPEC_ROUND)\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z196 && TARGET_HARD_FLOAT\"\n+  \"\")\n+\n+; fixuns_trunc(tf|df|sf|td|dd)(di|si)2 instruction patterns.\n+\n+; clfebr, clfdbr, clfxbr, clgebr, clgdbr, clgxbr\n+;         clfdtr, clfxtr,         clgdtr, clgxtr\n+(define_insn \"*fixuns_trunc<FP:mode><GPR:mode>2_z196\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:GPR (match_operand:FP 1 \"register_operand\" \"f\")))\n+   (unspec:GPR [(match_operand:GPR 2 \"immediate_operand\" \"K\")] UNSPEC_ROUND)\n+   (clobber (reg:CC CC_REGNUM))]\n+   \"TARGET_Z196\"\n+   \"cl<GPR:gf><FP:xde><FP:bt>r\\t%0,%h2,%1,0\"\n+   [(set_attr \"op_type\" \"RRF\")\n+    (set_attr \"type\"    \"ftoi\")])\n+\n (define_expand \"fix_trunc<DSF:mode><GPR:mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"\")\n         (fix:GPR (match_operand:DSF 1 \"register_operand\" \"\")))]\n@@ -4024,6 +4107,28 @@\n   [(set_attr \"op_type\" \"RRE\")\n    (set_attr \"type\"   \"itof<mode>\" )])\n \n+; cxftr, cdftr\n+(define_insn \"floatsi<mode>2\"\n+  [(set (match_operand:DFP 0 \"register_operand\" \"=f\")\n+        (float:DFP (match_operand:SI 1 \"register_operand\" \"d\")))]\n+  \"TARGET_Z196 && TARGET_HARD_FLOAT\"\n+  \"c<xde>ftr\\t%0,0,%1,0\"\n+  [(set_attr \"op_type\" \"RRE\")\n+   (set_attr \"type\"   \"itof<mode>\" )])\n+\n+;\n+; floatuns(si|di)(tf|df|sf|td|dd)2 instruction pattern(s).\n+;\n+\n+; cxlgbr, cdlgbr, celgbr, cxlgtr, cdlgtr\n+; cxlfbr, cdlfbr, celfbr, cxlftr, cdlftr\n+(define_insn \"floatuns<GPR:mode><FP:mode>2\"\n+  [(set (match_operand:FP 0 \"register_operand\" \"=f\")\n+        (unsigned_float:FP (match_operand:GPR 1 \"register_operand\" \"d\")))]\n+  \"TARGET_Z196 && TARGET_HARD_FLOAT\"\n+  \"c<FP:xde>l<GPR:gf><FP:bt>r\\t%0,0,%1,0\"\n+  [(set_attr \"op_type\" \"RRE\")\n+   (set_attr \"type\"    \"itof<FP:mode>\" )])\n \n ;\n ; truncdfsf2 instruction pattern(s).\n@@ -4294,7 +4399,8 @@\n   \"@\n    agfr\\t%0,%2\n    agf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z196prop\" \"z196_cracked,z196_cracked\")])\n \n (define_insn \"*adddi3_zero_cc\"\n   [(set (reg CC_REGNUM)\n@@ -4414,178 +4520,178 @@\n   \"@\n    ah\\t%0,%2\n    ahy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"z196prop\" \"z196_cracked,z196_cracked\")])\n \n ;\n ; add(di|si)3 instruction pattern(s).\n ;\n \n-; ar, ahi, alfi, slfi, a, ay, agr, aghi, algfi, slgfi, ag, asi, agsi\n+; ark, agrk, ar, ahi, ahik, aghik, alfi, slfi, a, ay, agr, aghi, algfi, slgfi, ag, asi, agsi\n (define_insn \"*add<mode>3\"\n-  [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,QS\")\n-        (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0\")\n-\t\t  (match_operand:GPR 2 \"general_operand\" \"d,K,Op,On,R,T,C\") ) )\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\"           \"=d,d,d,d, d, d,d,d,QS\")\n+        (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,d, 0, 0,0,0, 0\")\n+\t\t  (match_operand:GPR 2 \"general_operand\"      \" d,d,K,K,Op,On,R,T, C\") ) )\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n    a<g>r\\t%0,%2\n+   a<g>rk\\t%0,%1,%2\n    a<g>hi\\t%0,%h2\n+   a<g>hik\\t%0,%1,%h2\n    al<g>fi\\t%0,%2\n    sl<g>fi\\t%0,%n2\n    a<g>\\t%0,%2\n    a<y>\\t%0,%2\n    a<g>si\\t%0,%c2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RI,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,*,extimm,extimm,*,*,z10\")\n-   (set_attr \"z10prop\" \"z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RI,RIE,RIL,RIL,RX<Y>,RXY,SIY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,z196,extimm,extimm,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,*,z10_super_E1,z10_super_E1,\n+                        z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n-; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n+; alr, alfi, slfi, al, aly, alrk, alhsik, algr, algfi, slgfi, alg, alsi, algsi, algrk, alghsik\n (define_insn \"*add<mode>3_carry1_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,Op,On,R,T,C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T,C\"))\n                  (match_dup 1)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,d\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>fi\\t%0,%2\n    sl<g>fi\\t%0,%n2\n+   al<g>hsik\\t%0,%1,%h2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n-  [(set_attr \"op_type\"      \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n-   (set_attr \"z10prop\" \"z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1\")])\n+  [(set_attr \"op_type\"      \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n-; alr, al, aly, algr, alg\n+; alr, al, aly, algr, alg, alrk, algrk\n (define_insn \"*add<mode>3_carry1_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"       \"d,d,R,T\"))\n                  (match_dup 1)))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:GPR 0                                       \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n+; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi, alrk, algrk, alhsik, alghsik\n (define_insn \"*add<mode>3_carry2_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,Op,On,R,T,C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0, 0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T, C\"))\n                  (match_dup 2)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d,d,d,d,d,RS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,RS\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>fi\\t%0,%2\n    sl<g>fi\\t%0,%n2\n+   al<g>hsik\\t%0,%1,%h2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n-   (set_attr \"z10prop\" \"z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n-; alr, al, aly, algr, alg\n+; alr, al, aly, algr, alg, alrk, algrk\n (define_insn \"*add<mode>3_carry2_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"       \"d,d,R,T\"))\n                  (match_dup 2)))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:GPR 0                                       \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCL1mode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n+; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi, alrk, algrk, alhsik, alghsik\n (define_insn \"*add<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,Op,On,R,T,C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d, 0, 0,d,0,0, 0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"      \" d,d,Op,On,K,R,T, C\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d,d,d,d,d,RS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d,d, d, d,d,d,d,RS\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>fi\\t%0,%2\n    sl<g>fi\\t%0,%n2\n+   al<g>hsik\\t%0,%1,%h2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n-   (set_attr \"z10prop\" \"z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1,\n-                        z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RIL,RIL,RIE,RX<Y>,RXY,SIY\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,extimm,z196,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1,\n+                        *,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n-; alr, al, aly, algr, alg\n+; alr, al, aly, algr, alg, alrk, algrk\n (define_insn \"*add<mode>3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,d,0,0\")\n+\t\t\t   (match_operand:GPR 2 \"general_operand\"       \"d,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:GPR 0                                       \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; alr, al, aly, algr, alg\n+; alr, al, aly, algr, alg, alrk, algrk\n (define_insn \"*add<mode>3_cconly2\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:GPR 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                 (neg:GPR (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+        (compare (match_operand:GPR 1 \"nonimmediate_operand\"    \"%0,d,0,0\")\n+                 (neg:GPR (match_operand:GPR 2 \"general_operand\" \"d,d,R,T\"))))\n+   (clobber (match_scratch:GPR 0                                \"=d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCLmode)\"\n   \"@\n    al<g>r\\t%0,%2\n+   al<g>rk\\t%0,%1,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ; ahi, afi, aghi, agfi, asi, agsi\n (define_insn \"*add<mode>3_imm_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"0,0,0\")\n-\t\t\t   (match_operand:GPR 2 \"const_int_operand\" \"K,Os,C\"))\n+        (compare (plus:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \" 0, d,0, 0\")\n+\t\t\t   (match_operand:GPR 2 \"const_int_operand\"    \" K, K,Os, C\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d,d,QS\")\n+   (set (match_operand:GPR 0 \"nonimmediate_operand\"                    \"=d, d,d,QS\")\n         (plus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCAmode)\n    && (CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'K', \\\"K\\\")\n@@ -4594,11 +4700,12 @@\n    && INTVAL (operands[2]) != -((HOST_WIDE_INT)1 << (GET_MODE_BITSIZE(<MODE>mode) - 1))\"\n   \"@\n    a<g>hi\\t%0,%h2\n+   a<g>hik\\t%0,%1,%h2\n    a<g>fi\\t%0,%2\n    a<g>si\\t%0,%c2\"\n-  [(set_attr \"op_type\"      \"RI,RIL,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,z10\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"      \"RI,RIE,RIL,SIY\")\n+   (set_attr \"cpu_facility\" \"*,z196,extimm,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n ;\n ; add(tf|df|sf|td|dd)3 instruction pattern(s).\n@@ -4702,7 +4809,8 @@\n    sgfr\\t%0,%2\n    sgf\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_c,*\")])\n+   (set_attr \"z10prop\" \"z10_c,*\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*subdi3_zero_cc\"\n   [(set (reg CC_REGNUM)\n@@ -4821,117 +4929,132 @@\n   \"@\n    sh\\t%0,%2\n    shy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"z196prop\" \"z196_cracked,z196_cracked\")])\n \n ;\n ; sub(di|si)3 instruction pattern(s).\n ;\n \n-; sr, s, sy, sgr, sg\n+; sr, s, sy, sgr, sg, srk, sgrk\n (define_insn \"*sub<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n-        (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-\t\t   (match_operand:GPR 2 \"general_operand\" \"d,R,T\") ) )\n+  [(set (match_operand:GPR 0 \"register_operand\"           \"=d,d,d,d\")\n+        (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+\t\t   (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\") ) )\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"@\n    s<g>r\\t%0,%2\n+   s<g>rk\\t%0,%1,%2\n    s<g>\\t%0,%2\n    s<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_borrow_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-\t\t\t    (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+\t\t\t    (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\"))\n                  (match_dup 1)))\n-   (set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:GPR 0 \"register_operand\"                    \"=d,d,d,d\")\n         (minus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL2mode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_borrow_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-\t\t\t    (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+\t\t\t    (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\"))\n                  (match_dup 1)))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:GPR 0                                   \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCL2mode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-\t\t\t    (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+\t\t\t    (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n+   (set (match_operand:GPR 0 \"register_operand\"                    \"=d,d,d,d\")\n         (minus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_cc2\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-                 (match_operand:GPR 2 \"general_operand\" \"d,R,T\")))\n-   (set (match_operand:GPR 0 \"register_operand\" \"=d,d,d\")\n+        (compare (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+                 (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\")))\n+   (set (match_operand:GPR 0 \"register_operand\"         \"=d,d,d,d\")\n         (minus:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode (insn, CCL3mode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-\t\t\t    (match_operand:GPR 2 \"general_operand\" \"d,R,T\"))\n+        (compare (minus:GPR (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+\t\t\t    (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+   (clobber (match_scratch:GPR 0                                   \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCLmode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n \n-; slr, sl, sly, slgr, slg\n+; slr, sl, sly, slgr, slg, slrk, slgrk\n (define_insn \"*sub<mode>3_cconly2\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:GPR 1 \"register_operand\" \"0,0,0\")\n-                 (match_operand:GPR 2 \"general_operand\" \"d,R,T\")))\n-   (clobber (match_scratch:GPR 0 \"=d,d,d\"))]\n+        (compare (match_operand:GPR 1 \"register_operand\" \"0,d,0,0\")\n+                 (match_operand:GPR 2 \"general_operand\"  \"d,d,R,T\")))\n+   (clobber (match_scratch:GPR 0                        \"=d,d,d,d\"))]\n   \"s390_match_ccmode (insn, CCL3mode)\"\n   \"@\n    sl<g>r\\t%0,%2\n+   sl<g>rk\\t%0,%1,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RRF,RX<Y>,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,*,z10_super_E1,z10_super_E1\")])\n \n \n ;\n@@ -5008,7 +5131,8 @@\n   \"@\n    alc<g>r\\t%0,%2\n    alc<g>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z196prop\" \"z196_alone,z196_alone\")])\n \n ; alcr, alc, alcgr, alcg\n (define_insn \"*add<mode>3_alc_carry1_cconly\"\n@@ -5023,7 +5147,8 @@\n   \"@\n    alc<g>r\\t%0,%2\n    alc<g>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z196prop\" \"z196_alone,z196_alone\")])\n \n ; op1 + op2 + c < op2\n \n@@ -5200,6 +5325,52 @@\n      (clobber (reg:CC CC_REGNUM))])])\n \n \n+;;\n+;; - Conditional move instructions (introduced with z196)\n+;;\n+\n+(define_expand \"mov<mode>cc\"\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"\")\n+\t(if_then_else:GPR (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t  (match_operand:GPR 2 \"nonimmediate_operand\" \"\")\n+\t\t\t  (match_operand:GPR 3 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_Z196\"\n+  \"operands[1] = s390_emit_compare (GET_CODE (operands[1]),\n+                                    XEXP (operands[1], 0), XEXP (operands[1], 1));\")\n+\n+; locr, loc, stoc, locgr, lgoc, stgoc\n+(define_insn_and_split \"*mov<mode>cc\"\n+  [(set (match_operand:GPR 0 \"nonimmediate_operand\"   \"=d,d, d, d,QS,QS,&d\")\n+\t(if_then_else:GPR\n+\t  (match_operator 1 \"s390_comparison\"\n+\t    [(match_operand 2 \"cc_reg_operand\"        \" c,c, c, c, c, c, c\")\n+\t     (const_int 0)])\n+\t  (match_operand:GPR 3 \"nonimmediate_operand\" \" d,0,QS, 0, d, 0,QS\")\n+\t  (match_operand:GPR 4 \"nonimmediate_operand\" \" 0,d, 0,QS, 0, d,QS\")))]\n+  \"TARGET_Z196\"\n+  \"@\n+   loc<g>r%C1\\t%0,%3\n+   loc<g>r%D1\\t%0,%4\n+   l<g>oc%C1\\t%0,%3\n+   l<g>oc%D1\\t%0,%4\n+   st<g>oc%C1\\t%3,%0\n+   st<g>oc%D1\\t%4,%0\n+   #\"\n+  \"&& reload_completed\n+   && MEM_P (operands[3]) && MEM_P (operands[4])\"\n+  [(set (match_dup 0)\n+\t(if_then_else:GPR\n+\t (match_op_dup 1 [(match_dup 2) (const_int 0)])\n+\t (match_dup 3)\n+\t (match_dup 0)))\n+   (set (match_dup 0)\n+\t(if_then_else:GPR\n+\t (match_op_dup 1 [(match_dup 2) (const_int 0)])\n+\t (match_dup 0)\n+\t (match_dup 4)))]\n+  \"\"\n+  [(set_attr \"op_type\" \"RRF,RRF,RSY,RSY,RSY,RSY,*\")])\n+\n ;;\n ;;- Multiply instructions.\n ;;\n@@ -5327,7 +5498,7 @@\n    ma<xde>br\\t%0,%1,%2\n    ma<xde>b\\t%0,%1,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"     \"fmul<mode>\")])\n+   (set_attr \"type\"     \"fmadd<mode>\")])\n \n ; msxbr, msdbr, msebr, msxb, msdb, mseb\n (define_insn \"*fmsub<mode>\"\n@@ -5340,7 +5511,7 @@\n    ms<xde>br\\t%0,%1,%2\n    ms<xde>b\\t%0,%1,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXE\")\n-   (set_attr \"type\"     \"fmul<mode>\")])\n+   (set_attr \"type\"     \"fmadd<mode>\")])\n \n ;;\n ;;- Divide and modulo instructions.\n@@ -5795,39 +5966,44 @@\n \n (define_insn \"*anddi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d, d\")\n         (and:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    ngr\\t%0,%2\n+   ngrk\\t%0,%1,%2\n    ng\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RRE,RRF,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*anddi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+   (clobber (match_scratch:DI 0                                     \"=d,d, d\"))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\n    /* Do not steal TM patterns.  */\n    && s390_single_part (operands[2], DImode, HImode, 0) < 0\"\n   \"@\n    ngr\\t%0,%2\n+   ngrk\\t%0,%1,%2\n    ng\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1, z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RRE,RRF,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*anddi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,d,d,AQ,Q\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+                            \"=d,d,    d,    d,    d,    d,    d,    d,d,d, d,   AQ,Q\")\n         (and:DI (match_operand:DI 1 \"nonimmediate_operand\"\n-                                    \"%d,o,0,0,0,0,0,0,0,0,0,0\")\n+                            \"%d,o,    0,    0,    0,    0,    0,    0,0,d, 0,    0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n-                                    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,N0SDF,N1SDF,d,RT,NxQDF,Q\")))\n+                            \"M, M,N0HDF,N1HDF,N2HDF,N3HDF,N0SDF,N1SDF,d,d,RT,NxQDF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5840,11 +6016,12 @@\n    nihf\\t%0,%m2\n    nilf\\t%0,%m2\n    ngr\\t%0,%2\n+   ngrk\\t%0,%1,%2\n    ng\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,extimm,extimm,*,*,*,*\")\n+  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RIL,RIL,RRE,RRF,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,extimm,extimm,*,z196,*,*,*\")\n    (set_attr \"z10prop\" \"*,\n                         *,\n                         z10_super_E1,\n@@ -5854,6 +6031,7 @@\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n+                        *,\n                         z10_super_E1,\n                         *,\n                         *\")])\n@@ -5875,43 +6053,49 @@\n \n (define_insn \"*andsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\"                      \"=d,d,d,d,d\")\n         (and:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n    nilf\\t%0,%o2\n    nr\\t%0,%2\n+   nrk\\t%0,%1,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*andsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n+   (clobber (match_scratch:SI 0                                     \"=d,d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\n    /* Do not steal TM patterns.  */\n    && s390_single_part (operands[2], SImode, HImode, 0) < 0\"\n   \"@\n    nilf\\t%0,%o2\n    nr\\t%0,%2\n+   nrk\\t%0,%1,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*andsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"\n+                            \"=d,d,    d,    d, d,d,d,d,d,   AQ,Q\")\n         (and:SI (match_operand:SI 1 \"nonimmediate_operand\"\n-\t\t\t\t    \"%d,o,0,0,0,0,0,0,0,0\")\n+\t\t\t    \"%d,o,    0,    0, 0,0,d,0,0,    0,0\")\n                 (match_operand:SI 2 \"general_operand\"\n-\t\t\t\t    \"M,M,N0HSF,N1HSF,Os,d,R,T,NxQSF,Q\")))\n+\t\t\t    \" M,M,N0HSF,N1HSF,Os,d,d,R,T,NxQSF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5921,26 +6105,29 @@\n    nill\\t%0,%j2\n    nilf\\t%0,%o2\n    nr\\t%0,%2\n+   nrk\\t%0,%1,%2\n    n\\t%0,%2\n    ny\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RX,RXY,SI,SS\")\n+  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RRF,RX,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,z196,*,*,*,*\")\n    (set_attr \"z10prop\" \"*,\n                         *,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n+                        *,\n                         z10_super_E1,\n                         z10_super_E1,\n                         *,\n                         *\")])\n \n (define_insn \"*andsi3_esa\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,NxQSF,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=d,d,   AQ,Q\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,    0,0\")\n+                (match_operand:SI 2 \"general_operand\"      \" d,R,NxQSF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -5967,18 +6154,20 @@\n ;\n \n (define_insn \"*andhi3_zarch\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n-        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,n,NxQHF,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\"         \"=d,d,d,   AQ,Q\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,d,0,    0,0\")\n+                (match_operand:HI 2 \"general_operand\"      \" d,d,n,NxQHF,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n+   nrk\\t%0,%1,%2\n    nill\\t%0,%x2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")\n+  [(set_attr \"op_type\"  \"RR,RRF,RI,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,*,*\")\n ])\n \n (define_insn \"*andhi3_esa\"\n@@ -6010,19 +6199,21 @@\n ;\n \n (define_insn \"*andqi3_zarch\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n-        (and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n-                (match_operand:QI 2 \"general_operand\" \"d,n,n,n,Q\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\"         \"=d,d,d,Q,S,Q\")\n+        (and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,d,0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\"      \" d,d,n,n,n,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n+   nrk\\t%0,%1,%2\n    nill\\t%0,%b2\n    ni\\t%S0,%b2\n    niy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n+  [(set_attr \"op_type\"  \"RR,RRF,RI,SI,SIY,SS\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,z10_super,z10_super,*\")])\n \n (define_insn \"*andqi3_esa\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n@@ -6049,7 +6240,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 256\"\n   \"nc\\t%O0(%2,%R0),%S1\"\n-  [(set_attr \"op_type\" \"SS\")])\n+  [(set_attr \"op_type\" \"SS\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_split\n   [(set (match_operand 0 \"memory_operand\" \"\")\n@@ -6114,36 +6306,42 @@\n \n (define_insn \"*iordi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d, d\")\n         (ior:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    ogr\\t%0,%2\n+   ogrk\\t%0,%1,%2\n    og\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RRE,RRF,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*iordi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d,0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+   (clobber (match_scratch:DI 0                                     \"=d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    ogr\\t%0,%2\n+   ogrk\\t%0,%1,%2\n    og\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RRE,RRF,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*iordi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n-        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0,0,0,0\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n+                               \"=d,    d,    d,    d,    d,    d,d,d, d,   AQ,Q\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\"\n+                            \"   %0,    0,    0,    0,    0,    0,0,d, 0,    0,0\")\n                 (match_operand:DI 2 \"general_operand\"\n-                                    \"N0HD0,N1HD0,N2HD0,N3HD0,N0SD0,N1SD0,d,RT,NxQD0,Q\")))\n+                            \"N0HD0,N1HD0,N2HD0,N3HD0,N0SD0,N1SD0,d,d,RT,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n@@ -6154,18 +6352,20 @@\n    oihf\\t%0,%k2\n    oilf\\t%0,%k2\n    ogr\\t%0,%2\n+   ogrk\\t%0,%1,%2\n    og\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,extimm,extimm,*,*,*,*\")\n+  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RIL,RIL,RRE,RRF,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,extimm,extimm,*,z196,*,*,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n+                        *,\n                         z10_super_E1,\n                         *,\n                         *\")])\n@@ -6186,55 +6386,62 @@\n \n (define_insn \"*iorsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\"                      \"=d,d,d,d,d\")\n         (ior:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n    oilf\\t%0,%o2\n    or\\t%0,%2\n+   ork\\t%0,%1,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n+   (clobber (match_scratch:SI 0                                     \"=d,d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n    oilf\\t%0,%o2\n    or\\t%0,%2\n+   ork\\t%0,%1,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_zarch\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,AQ,Q\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,Os,d,R,T,NxQS0,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=d,    d, d,d,d,d,d,   AQ,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,    0, 0,0,d,0,0,    0,0\")\n+                (match_operand:SI 2 \"general_operand\"   \"N0HS0,N1HS0,Os,d,d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    oilh\\t%0,%i2\n    oill\\t%0,%i2\n    oilf\\t%0,%o2\n    or\\t%0,%2\n+   ork\\t%0,%1,%2\n    o\\t%0,%2\n    oy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RX,RXY,SI,SS\")\n+  [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RRF,RX,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,*,*,z196,*,*,*,*\")\n    (set_attr \"z10prop\" \"z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n                         z10_super_E1,\n+                        *,\n                         z10_super_E1,\n                         z10_super_E1,\n                         *,\n@@ -6269,18 +6476,20 @@\n ;\n \n (define_insn \"*iorhi3_zarch\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n-        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"d,n,NxQH0,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\"         \"=d,d,d,   AQ,Q\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,d,0,    0,0\")\n+                (match_operand:HI 2 \"general_operand\"      \" d,d,n,NxQH0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n+   ork\\t%0,%1,%2\n    oill\\t%0,%x2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n+  [(set_attr \"op_type\"  \"RR,RRF,RI,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,*,*\")])\n \n (define_insn \"*iorhi3_esa\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n@@ -6310,19 +6519,22 @@\n ;\n \n (define_insn \"*iorqi3_zarch\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n-        (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n-                (match_operand:QI 2 \"general_operand\" \"d,n,n,n,Q\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\"         \"=d,d,d,Q,S,Q\")\n+        (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,d,0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\"      \" d,d,n,n,n,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n+   ork\\t%0,%1,%2\n    oill\\t%0,%b2\n    oi\\t%S0,%b2\n    oiy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n+  [(set_attr \"op_type\" \"RR,RRF,RI,SI,SIY,SS\")\n+   (set_attr \"cpu_facility\" \"*,z196,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1,\n+                        z10_super,z10_super,*\")])\n \n (define_insn \"*iorqi3_esa\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n@@ -6349,7 +6561,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"INTVAL (operands[2]) >= 1 && INTVAL (operands[2]) <= 256\"\n   \"oc\\t%O0(%2,%R0),%S1\"\n-  [(set_attr \"op_type\" \"SS\")])\n+  [(set_attr \"op_type\" \"SS\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_split\n   [(set (match_operand 0 \"memory_operand\" \"\")\n@@ -6414,47 +6627,52 @@\n \n (define_insn \"*xordi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+   (set (match_operand:DI 0 \"register_operand\"                      \"=d,d, d\")\n         (xor:DI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    xgr\\t%0,%2\n+   xgrk\\t%0,%1,%2\n    xg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\" \"RRE,RRF,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*xordi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                         (match_operand:DI 2 \"general_operand\" \"d,RT\"))\n+        (compare (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,d, 0\")\n+                         (match_operand:DI 2 \"general_operand\"      \" d,d,RT\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:DI 0 \"=d,d\"))]\n+   (clobber (match_scratch:DI 0                                     \"=d,d, d\"))]\n   \"s390_match_ccmode(insn, CCTmode) && TARGET_ZARCH\"\n   \"@\n    xgr\\t%0,%2\n+   xgrk\\t%0,%1,%2\n    xg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\" \"RRE,RRF,RXY\")\n+   (set_attr \"cpu_facility\" \"*,z196,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,z10_super_E1\")])\n \n (define_insn \"*xordi3\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n-        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n-                (match_operand:DI 2 \"general_operand\" \"N0SD0,N1SD0,d,RT,NxQD0,Q\")))\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"         \"=d,    d,d,d, d,   AQ,Q\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,    0,0,d, 0,    0,0\")\n+                (match_operand:DI 2 \"general_operand\"   \"N0SD0,N1SD0,d,d,RT,NxQD0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    xihf\\t%0,%k2\n    xilf\\t%0,%k2\n    xgr\\t%0,%2\n+   xgrk\\t%0,%1,%2\n    xg\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"extimm,extimm,*,*,*,*\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1,*,*\")])\n+  [(set_attr \"op_type\"  \"RIL,RIL,RRE,RRF,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"extimm,extimm,*,z196,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,\n+                        *,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"s_operand\" \"\")\n@@ -6472,50 +6690,59 @@\n \n (define_insn \"*xorsi3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+   (set (match_operand:SI 0 \"register_operand\"                      \"=d,d,d,d,d\")\n         (xor:SI (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n    xilf\\t%0,%o2\n    xr\\t%0,%2\n+   xrk\\t%0,%1,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\" \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                         (match_operand:SI 2 \"general_operand\" \"Os,d,R,T\"))\n+        (compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0\")\n+                         (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=d,d,d,d\"))]\n+   (clobber (match_scratch:SI 0                                     \"=d,d,d,d,d\"))]\n   \"s390_match_ccmode(insn, CCTmode)\"\n   \"@\n    xilf\\t%0,%o2\n    xr\\t%0,%2\n+   xrk\\t%0,%1,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n+  [(set_attr \"op_type\" \"RIL,RR,RRF,RX,RXY\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xorsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n-        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"Os,d,R,T,NxQS0,Q\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=d,d,d,d,d,   AQ,Q\")\n+        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,d,0,0,    0,0\")\n+                (match_operand:SI 2 \"general_operand\"      \"Os,d,d,R,T,NxQS0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xilf\\t%0,%o2\n    xr\\t%0,%2\n+   xrk\\t%0,%1,%2\n    x\\t%0,%2\n    xy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY,SI,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1,*,*\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,RX,RXY,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,\n+                        z10_super_E1,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_operand\" \"\")\n@@ -6532,18 +6759,20 @@\n ;\n \n (define_insn \"*xorhi3\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n-        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n-                (match_operand:HI 2 \"general_operand\" \"Os,d,NxQH0,Q\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\"         \"=d,d,d,   AQ,Q\")\n+        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,d,    0,0\")\n+                (match_operand:HI 2 \"general_operand\"      \"Os,d,d,NxQH0,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xilf\\t%0,%x2\n    xr\\t%0,%2\n+   xrk\\t%0,%1,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,SI,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,SI,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*,*\")])\n \n (define_split\n   [(set (match_operand:HI 0 \"s_operand\" \"\")\n@@ -6560,19 +6789,21 @@\n ;\n \n (define_insn \"*xorqi3\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n-        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n-                (match_operand:QI 2 \"general_operand\" \"Os,d,n,n,Q\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\"         \"=d,d,d,Q,S,Q\")\n+        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,d,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\"      \"Os,d,d,n,n,Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xilf\\t%0,%b2\n    xr\\t%0,%2\n+   xrk\\t%0,%1,%2\n    xi\\t%S0,%b2\n    xiy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,SI,SIY,SS\")\n-   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RRF,SI,SIY,SS\")\n+   (set_attr \"cpu_facility\" \"*,*,z196,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,z10_super,z10_super,*\")])\n \n \n ;\n@@ -6644,7 +6875,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"INTVAL (operands[1]) >= 1 && INTVAL (operands[1]) <= 256\"\n   \"xc\\t%O0(%1,%R0),%S0\"\n-  [(set_attr \"op_type\" \"SS\")])\n+  [(set_attr \"op_type\" \"SS\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_peephole2\n   [(parallel\n@@ -7167,7 +7399,7 @@\n \n ;\n ; (ashl|lshr)(di|si)3 instruction pattern(s).\n-;\n+; Left shifts and logical right shifts\n \n (define_expand \"<shift><mode>3\"\n   [(set (match_operand:DSI 0 \"register_operand\" \"\")\n@@ -7184,18 +7416,22 @@\n   \"!TARGET_ZARCH\"\n   \"s<lr>dl\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n-; sll, srl, sllg, srlg\n+; sll, srl, sllg, srlg, sllk, srlk\n (define_insn \"*<shift><mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                   (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\"                          \"=d,d\")\n+        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\"             \"<d0>,d\")\n+                   (match_operand:SI 2 \"shift_count_or_setmem_operand\"    \"Y,Y\")))]\n   \"\"\n-  \"s<lr>l<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   s<lr>l<g>\\t%0,<1>%Y2\n+   s<lr>l<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n ; sldl, srdl\n (define_insn \"*<shift>di3_31_and\"\n@@ -7208,21 +7444,24 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-; sll, srl, sllg, srlg\n+; sll, srl, sllg, srlg, sllk, srlk\n (define_insn \"*<shift><mode>3_and\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                   (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t   (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  [(set (match_operand:GPR 0 \"register_operand\"                                 \"=d,d\")\n+        (SHIFT:GPR (match_operand:GPR 1 \"register_operand\"                    \"<d0>,d\")\n+                   (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\"   \"Y,Y\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\"               \"n,n\"))))]\n   \"(INTVAL (operands[3]) & 63) == 63\"\n-  \"s<lr>l<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   s<lr>l<g>\\t%0,<1>%Y2\n+   s<lr>l<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n ;\n ; ashr(di|si)3 instruction pattern(s).\n-;\n+; Arithmetic right shifts\n \n (define_expand \"ashr<mode>3\"\n   [(parallel\n@@ -7266,44 +7505,53 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-; sra, srag\n+; sra, srag, srak\n (define_insn \"*ashr<mode>3_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n+                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\"))\n                  (const_int 0)))\n-   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+   (set (match_operand:GPR 0 \"register_operand\"                                   \"=d,d\")\n         (ashiftrt:GPR (match_dup 1) (match_dup 2)))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n-; sra, srag\n+; sra, srag, srak\n (define_insn \"*ashr<mode>3_cconly\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n+                               (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\"))\n                  (const_int 0)))\n-   (clobber (match_scratch:GPR 0 \"=d\"))]\n+   (clobber (match_scratch:GPR 0                                                  \"=d,d\"))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n ; sra, srag\n (define_insn \"*ashr<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n+  [(set (match_operand:GPR 0 \"register_operand\"                          \"=d,d\")\n+        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"          \"<d0>,d\")\n+                      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n \n ; shift pattern with implicit ANDs\n@@ -7346,47 +7594,55 @@\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n-; sra, srag\n+; sra, srag, srak\n (define_insn \"*ashr<mode>3_cc_and\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n+                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n+\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"             \"n,n\")))\n \t\t (const_int 0)))\n-   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+   (set (match_operand:GPR 0 \"register_operand\"                                           \"=d,d\")\n         (ashiftrt:GPR (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n-; sra, srag\n+; sra, srag, srak\n (define_insn \"*ashr<mode>3_cconly_and\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+        (compare (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n+                               (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n+\t\t\t\t       (match_operand:SI 3 \"const_int_operand\"             \"n,n\")))\n                  (const_int 0)))\n-   (clobber (match_scratch:GPR 0 \"=d\"))]\n+   (clobber (match_scratch:GPR 0                                                          \"=d,d\"))]\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"cpu_facility\" \"*,z196\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n-; sra, srag\n+; sra, srag, srak\n (define_insn \"*ashr<mode>3_and\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\" \"<d0>\")\n-                      (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n+  [(set (match_operand:GPR 0 \"register_operand\"                                  \"=d,d\")\n+        (ashiftrt:GPR (match_operand:GPR 1 \"register_operand\"                  \"<d0>,d\")\n+                      (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y,Y\")\n+\t\t\t      (match_operand:SI 3 \"const_int_operand\"             \"n,n\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"(INTVAL (operands[3]) & 63) == 63\"\n-  \"sra<g>\\t%0,<1>%Y2\"\n-  [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"@\n+   sra<g>\\t%0,<1>%Y2\n+   sra<gk>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RS<E>,RSY\")\n+   (set_attr \"atype\"    \"reg,reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*\")])\n \n \n ;;\n@@ -7941,7 +8197,8 @@\n                       (const_string \"RR\") (const_string \"RX\")))\n    (set_attr \"type\"  \"branch\")\n    (set_attr \"atype\" \"agen\")\n-   (set_attr \"z10prop\"  \"z10_c\")])\n+   (set_attr \"z10prop\"  \"z10_c\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn_and_split \"doloop_di\"\n   [(set (pc)\n@@ -8261,7 +8518,8 @@\n    && GET_MODE (operands[2]) == Pmode\"\n   \"bras\\t%2,%0\"\n   [(set_attr \"op_type\" \"RI\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*brasl\"\n   [(call (mem:QI (match_operand 0 \"bras_sym_operand\" \"X\"))\n@@ -8272,7 +8530,8 @@\n    && GET_MODE (operands[2]) == Pmode\"\n   \"brasl\\t%2,%0\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*basr\"\n   [(call (mem:QI (match_operand 0 \"address_operand\" \"ZQZR\"))\n@@ -8289,7 +8548,8 @@\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n    (set_attr \"type\"  \"jsr\")\n-   (set_attr \"atype\" \"agen\")])\n+   (set_attr \"atype\" \"agen\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n ;\n ; call_value instruction pattern(s).\n@@ -8317,7 +8577,8 @@\n    && GET_MODE (operands[3]) == Pmode\"\n   \"bras\\t%3,%1\"\n   [(set_attr \"op_type\" \"RI\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*brasl_r\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8329,7 +8590,8 @@\n    && GET_MODE (operands[3]) == Pmode\"\n   \"brasl\\t%3,%1\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*basr_r\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8347,7 +8609,8 @@\n         (if_then_else (match_operand 1 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n    (set_attr \"type\"  \"jsr\")\n-   (set_attr \"atype\" \"agen\")])\n+   (set_attr \"atype\" \"agen\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n ;;\n ;;- Thread-local storage support.\n@@ -8416,7 +8679,8 @@\n    && GET_MODE (operands[3]) == Pmode\"\n   \"bras\\t%3,%1%J4\"\n   [(set_attr \"op_type\" \"RI\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*brasl_tls\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8429,7 +8693,8 @@\n    && GET_MODE (operands[3]) == Pmode\"\n   \"brasl\\t%3,%1%J4\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"jsr\")])\n+   (set_attr \"type\"    \"jsr\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"*basr_tls\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8448,7 +8713,8 @@\n         (if_then_else (match_operand 1 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n    (set_attr \"type\"  \"jsr\")\n-   (set_attr \"atype\" \"agen\")])\n+   (set_attr \"atype\" \"agen\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n ;;\n ;;- Atomic operations\n@@ -8557,6 +8823,36 @@\n   \"s390_expand_atomic (<MODE>mode, SET, operands[0], operands[1],\n \t\t       operands[2], false); DONE;\")\n \n+; z196 load and add, xor, or and and instructions\n+\n+; lan, lang, lao, laog, lax, laxg, laa, laag\n+(define_insn \"sync_<atomic><mode>\"\n+  [(parallel\n+    [(set (match_operand:GPR 0 \"memory_operand\" \"+QS\")\n+\t  (unspec_volatile:GPR\n+\t   [(ATOMIC_Z196:GPR (match_dup 0)\n+\t\t\t     (match_operand:GPR 1 \"general_operand\" \"d\"))]\n+\t   UNSPECV_ATOMIC_OP))\n+     (clobber (match_scratch:GPR 2 \"=d\"))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z196\"\n+  \"la<noxa><g>\\t%2,%1,%0\")\n+\n+; lan, lang, lao, laog, lax, laxg, laa, laag\n+(define_insn \"sync_old_<atomic><mode>\"\n+  [(parallel\n+    [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t  (match_operand:GPR 1 \"memory_operand\"   \"+QS\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile\n+\t   [(ATOMIC_Z196:GPR (match_dup 1)\n+\t\t\t     (match_operand:GPR 2 \"general_operand\" \"d\"))]\n+\t   UNSPECV_ATOMIC_OP))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z196\"\n+  \"la<noxa><g>\\t%0,%2,%1\")\n+\n+\n (define_expand \"sync_<atomic><mode>\"\n   [(set (match_operand:HQI 0 \"memory_operand\")\n \t(ATOMIC:HQI (match_dup 0)\n@@ -8775,15 +9071,17 @@\n   \"!TARGET_CPU_ZARCH && GET_MODE (operands[0]) == Pmode\"\n   \"basr\\t%0,0\"\n   [(set_attr \"op_type\" \"RR\")\n-   (set_attr \"type\"    \"la\")])\n+   (set_attr \"type\"    \"la\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"main_base_31_large\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n         (unspec [(label_ref (match_operand 1 \"\" \"\"))] UNSPEC_MAIN_BASE))\n    (set (pc) (label_ref (match_operand 2 \"\" \"\")))]\n   \"!TARGET_CPU_ZARCH && GET_MODE (operands[0]) == Pmode\"\n   \"bras\\t%0,%2\"\n-  [(set_attr \"op_type\" \"RI\")])\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"main_base_64\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n@@ -8811,7 +9109,8 @@\n   \"!TARGET_CPU_ZARCH && GET_MODE (operands[0]) == Pmode\"\n   \"basr\\t%0,0\\;la\\t%0,%1-.(%0)\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"type\" \"la\")])\n+   (set_attr \"type\" \"la\")\n+   (set_attr \"z196prop\" \"z196_cracked\")])\n \n (define_insn \"reload_base_64\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n@@ -8984,7 +9283,8 @@\n }\n   [(set_attr \"type\" \"load,larl\")\n    (set_attr \"op_type\" \"RXY,RIL\")\n-   (set_attr \"z10prop\" \"z10_super\")])\n+   (set_attr \"z10prop\" \"z10_super\")\n+   (set_attr \"z196prop\" \"z196_alone\")])\n \n \n ;\n@@ -9001,3 +9301,107 @@\n   [(set_attr \"type\" \"*,load\")\n    (set_attr \"op_type\" \"RRE,RXY\")\n    (set_attr \"z10prop\" \"z10_super\")])\n+\n+\n+;\n+; Population count instruction\n+;\n+\n+; The S/390 popcount instruction counts the bits of op1 in 8 byte\n+; portions and stores the result in the corresponding bytes in op0.\n+(define_insn \"*popcount<mode>\"\n+  [(set (match_operand:INT 0 \"register_operand\" \"=d\")\n+\t(unspec:INT [(match_operand:INT 1 \"register_operand\" \"d\")] UNSPEC_POPCNT))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z196\"\n+  \"popcnt\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE\")])\n+\n+(define_expand \"popcountdi2\"\n+  [; popcnt op0, op1\n+   (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (unspec:DI [(match_operand:DI 1 \"register_operand\")]\n+\t\t\t      UNSPEC_POPCNT))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllg op2, op0, 32\n+   (set (match_dup 2) (ashift:DI (match_dup 0) (const_int 32)))\n+   ; agr op0, op2\n+   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllg op2, op0, 16\n+   (set (match_operand:DI 2 \"register_operand\" \"\")\n+\t(ashift:DI (match_dup 0) (const_int 16)))\n+   ; agr op0, op2\n+   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllg op2, op0, 8\n+   (set (match_dup 2) (ashift:DI (match_dup 0) (const_int 8)))\n+   ; agr op0, op2\n+   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; srlg op0, op0, 56\n+   (set (match_dup 0) (lshiftrt:DI (match_dup 0) (const_int 56)))]\n+  \"TARGET_Z196 && TARGET_64BIT\"\n+  \"operands[2] = gen_reg_rtx (DImode);\")\n+\n+(define_expand \"popcountsi2\"\n+  [; popcnt op0, op1\n+   (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (unspec:SI [(match_operand:SI 1 \"register_operand\")]\n+\t\t\t      UNSPEC_POPCNT))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllk op2, op0, 16\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(ashift:SI (match_dup 0) (const_int 16)))\n+   ; ar op0, op2\n+   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllk op2, op0, 8\n+   (set (match_dup 2) (ashift:SI (match_dup 0) (const_int 8)))\n+   ; ar op0, op2\n+   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; srl op0, op0, 24\n+   (set (match_dup 0) (lshiftrt:SI (match_dup 0) (const_int 24)))]\n+  \"TARGET_Z196\"\n+  \"operands[2] = gen_reg_rtx (SImode);\")\n+\n+(define_expand \"popcounthi2\"\n+  [; popcnt op0, op1\n+   (parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t   (unspec:HI [(match_operand:HI 1 \"register_operand\")]\n+\t\t\t      UNSPEC_POPCNT))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; sllk op2, op0, 8\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(ashift:SI (match_dup 0) (const_int 8)))\n+   ; ar op0, op2\n+   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])\n+   ; srl op0, op0, 8\n+   (set (match_dup 0) (lshiftrt:HI (match_dup 0) (const_int 8)))]\n+  \"TARGET_Z196\"\n+  \"operands[2] = gen_reg_rtx (SImode);\")\n+\n+(define_expand \"popcountqi2\"\n+  [; popcnt op0, op1\n+   (parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t   (unspec:QI [(match_operand:QI 1 \"register_operand\")]\n+\t\t\t      UNSPEC_POPCNT))\n+\t      (clobber (reg:CC CC_REGNUM))])]\n+  \"TARGET_Z196\"\n+  \"\")\n+\n+;;\n+;;- Copy sign instructions\n+;;\n+\n+(define_insn \"copysign<mode>3\"\n+  [(set (match_operand:FP 0 \"register_operand\" \"=f\")\n+      (unspec:FP [(match_operand:FP 1 \"register_operand\" \"<fT0>\")\n+                  (match_operand:FP 2 \"register_operand\" \"f\")]\n+                  UNSPEC_COPYSIGN))]\n+  \"TARGET_Z196\"\n+  \"cpsdr\\t%0,%2,%1\"\n+  [(set_attr \"op_type\"  \"RRF\")\n+   (set_attr \"type\"     \"fsimp<mode>\")])"}]}