{"sha": "01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiNGNmMmI3YTFmZTlhM2Y2ZjA3MDIxN2JlNWY5Mzg1NGM1NDU0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-27T01:14:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-27T01:14:29Z"}, "message": "rs6000.c (input_operand): Don't expect CONST around CONSTANT_P_RTX.\n\n        * rs6000.c (input_operand): Don't expect CONST around CONSTANT_P_RTX.\n        * rs6000.md (movsi, movdi): Likewise.\n\nFrom-SVN: r24877", "tree": {"sha": "f1f83ee50d08bce5b6bea9051108b6a140904305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f83ee50d08bce5b6bea9051108b6a140904305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/comments", "author": null, "committer": null, "parents": [{"sha": "bdae211ac8927e07608b34ca80337436ebd2b96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdae211ac8927e07608b34ca80337436ebd2b96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdae211ac8927e07608b34ca80337436ebd2b96c"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "daedd2e6f7926cca23ca5d6b6cf72afb4c5457d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "patch": "@@ -1,3 +1,8 @@\n+Wed Jan 27 01:13:42 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rs6000.c (input_operand): Don't expect CONST around CONSTANT_P_RTX.\n+\t* rs6000.md (movsi, movdi): Likewise.\n+\n Tue Jan 26 13:31:38 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* function.c (expand_function_end): Pass arg_pointer_save_area to"}, {"sha": "a2bfcca9f27b004723e470fdd24b6d74cadfb91c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "patch": "@@ -1132,7 +1132,7 @@ input_operand (op, mode)\n     return 1;\n \n   /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n-  if (GET_CODE (op) == CONST && GET_CODE (XEXP (op, 0)) == CONSTANT_P_RTX)\n+  if (GET_CODE (op) == CONSTANT_P_RTX)\n     return 1;\n \n   /* For floating-point, easy constants are valid.  */"}, {"sha": "4dc968691066394bd7166d571dbe1bd40cc1e4e4", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b4cf2b7a1fe9a3f6f070217be5f93854c54545/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=01b4cf2b7a1fe9a3f6f070217be5f93854c54545", "patch": "@@ -8246,8 +8246,7 @@\n     operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \n   /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n-  if (GET_CODE (operands[1]) == CONST\n-      && GET_CODE (XEXP (operands[1], 0)) == CONSTANT_P_RTX)\n+  if (GET_CODE (operands[1]) == CONSTANT_P_RTX)\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n       DONE;\n@@ -8892,8 +8891,7 @@\n     operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n \n   /* Only a tiny bit of handling for CONSTANT_P_RTX is necessary.  */\n-  if (GET_CODE (operands[1]) == CONST\n-      && GET_CODE (XEXP (operands[1], 0)) == CONSTANT_P_RTX)\n+  if (GET_CODE (operands[1]) == CONSTANT_P_RTX)\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n       DONE;"}]}