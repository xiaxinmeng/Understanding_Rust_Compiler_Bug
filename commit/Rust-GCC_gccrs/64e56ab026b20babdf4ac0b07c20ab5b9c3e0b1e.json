{"sha": "64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlNTZhYjAyNmIyMGJhYmRmNGFjMGIwN2MyMGFiNWI5YzNlMGIxZQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-08-08T09:49:37Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-08-08T09:49:37Z"}, "message": "re PR fortran/72698 (ICE in lhd_incomplete_type_error, at langhooks.c:205)\n\ngcc/testsuite/ChangeLog:\n\n2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72698\n\t* gfortran.dg/allocate_with_source_20.f03: New test.\n\n\ngcc/fortran/ChangeLog:\n\n2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72698\n\t* trans-stmt.c (gfc_trans_allocate): Prevent generating code for\n\tcopy of zero sized string and with it an ICE.\n\nFrom-SVN: r239236", "tree": {"sha": "7107616be3f158b50330ffd672fb7b3c5663b752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7107616be3f158b50330ffd672fb7b3c5663b752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/comments", "author": null, "committer": null, "parents": [{"sha": "0476487d4916e62bf7e52d06501ef8837ba47cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0476487d4916e62bf7e52d06501ef8837ba47cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0476487d4916e62bf7e52d06501ef8837ba47cf8"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "3b54ee38c7ede27cda7060def953bcc57c6b0004", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "patch": "@@ -1,3 +1,9 @@\n+2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72698\n+\t* trans-stmt.c (gfc_trans_allocate): Prevent generating code for\n+\tcopy of zero sized string and with it an ICE.\n+\n 2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/70524"}, {"sha": "5884e7a4e24358ec1124f5728b085e18cf488f08", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "patch": "@@ -5448,9 +5448,19 @@ gfc_trans_allocate (gfc_code * code)\n \t}\n       gfc_add_block_to_block (&block, &se.pre);\n       gfc_add_block_to_block (&post, &se.post);\n+\n+      /* Special case when string in expr3 is zero.  */\n+      if (code->expr3->ts.type == BT_CHARACTER\n+\t  && integer_zerop (se.string_length))\n+\t{\n+\t  gfc_init_se (&se, NULL);\n+\t  temp_var_needed = false;\n+\t  expr3_len = integer_zero_node;\n+\t  e3_is = E3_MOLD;\n+\t}\n       /* Prevent aliasing, i.e., se.expr may be already a\n \t     variable declaration.  */\n-      if (se.expr != NULL_TREE && temp_var_needed)\n+      else if (se.expr != NULL_TREE && temp_var_needed)\n \t{\n \t  tree var, desc;\n \t  tmp = GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (se.expr)) || is_coarray ?\n@@ -5679,11 +5689,8 @@ gfc_trans_allocate (gfc_code * code)\n       gcc_assert (expr3_esize);\n       expr3_esize = fold_convert (sizetype, expr3_esize);\n       if (e3_is == E3_MOLD)\n-\t{\n-\t  /* The expr3 is no longer valid after this point.  */\n-\t  expr3 = NULL_TREE;\n-\t  e3_is = E3_UNSET;\n-\t}\n+\t/* The expr3 is no longer valid after this point.  */\n+\texpr3 = NULL_TREE;\n     }\n   else if (code->ext.alloc.ts.type != BT_UNKNOWN)\n     {\n@@ -6012,7 +6019,7 @@ gfc_trans_allocate (gfc_code * code)\n \t\t\t    fold_convert (TREE_TYPE (al_len),\n \t\t\t\t\t  integer_zero_node));\n \t}\n-      if (code->expr3 && !code->expr3->mold)\n+      if (code->expr3 && !code->expr3->mold && e3_is != E3_MOLD)\n \t{\n \t  /* Initialization via SOURCE block (or static default initializer).\n \t     Classes need some special handling, so catch them first.  */"}, {"sha": "6b7135cfecaad05cef842fb0593f1b83a410637b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "patch": "@@ -1,3 +1,8 @@\n+2016-08-08  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72698\n+\t* gfortran.dg/allocate_with_source_20.f03: New test.\n+\n 2016-08-08  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.c-torture/compile/pr72802.c: New."}, {"sha": "67b50ec0d85efdee880753ea94cc6d240755e0da", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_20.f03", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03?ref=64e56ab026b20babdf4ac0b07c20ab5b9c3e0b1e", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+\n+! Check that PR72698 is fixed.\n+! Contributed by Gerhard Steinmetz\n+\n+module m\n+contains\n+   integer function f()\n+      f = 4\n+   end\n+end\n+program p\n+   use m\n+   character(3), parameter :: c = 'abc'\n+   character(:), allocatable :: z\n+   allocate (z, source=repeat(c(2:1), f()))\n+   if (len(z) /= 0) call abort()\n+   if (z /= \"\") call abort()\n+end\n+\n+"}]}