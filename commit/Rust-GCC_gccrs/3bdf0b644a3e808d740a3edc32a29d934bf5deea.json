{"sha": "3bdf0b644a3e808d740a3edc32a29d934bf5deea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkZjBiNjQ0YTNlODA4ZDc0MGEzZWRjMzJhMjlkOTM0YmY1ZGVlYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-02-08T11:07:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-02-08T11:07:08Z"}, "message": "trans.c (Regular_Loop_to_gnu): Replace tests on individual flag_unswitch_loops and flag_tree_loop_vectorize...\n\n\t* gcc-interface/trans.c (Regular_Loop_to_gnu): Replace tests on\n\tindividual flag_unswitch_loops and flag_tree_loop_vectorize switches\n\twith test on global optimize switch.\n\t(Raise_Error_to_gnu): Likewise.\n\nFrom-SVN: r268671", "tree": {"sha": "83c7e613fd17d9ce6323caf6b90e3e6456b567dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c7e613fd17d9ce6323caf6b90e3e6456b567dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bdf0b644a3e808d740a3edc32a29d934bf5deea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf0b644a3e808d740a3edc32a29d934bf5deea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdf0b644a3e808d740a3edc32a29d934bf5deea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf0b644a3e808d740a3edc32a29d934bf5deea/comments", "author": null, "committer": null, "parents": [{"sha": "89cfdb7e5ba6f5e00e13473790ef787189c59c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cfdb7e5ba6f5e00e13473790ef787189c59c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89cfdb7e5ba6f5e00e13473790ef787189c59c01"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "7594e9e919f1d759232ad5dcdc832f67dd26f178", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf0b644a3e808d740a3edc32a29d934bf5deea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf0b644a3e808d740a3edc32a29d934bf5deea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3bdf0b644a3e808d740a3edc32a29d934bf5deea", "patch": "@@ -1,3 +1,10 @@\n+2019-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Regular_Loop_to_gnu): Replace tests on\n+\tindividual flag_unswitch_loops and flag_tree_loop_vectorize switches\n+\twith test on global optimize switch.\n+\t(Raise_Error_to_gnu): Likewise.\n+\n 2019-02-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* libgnarl/s-linux__sparc.ads (ETIMEDOUT): Set to correct value."}, {"sha": "3ea79648e5ddf5a66404d82c1f998145f3a3b287", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf0b644a3e808d740a3edc32a29d934bf5deea/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf0b644a3e808d740a3edc32a29d934bf5deea/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3bdf0b644a3e808d740a3edc32a29d934bf5deea", "patch": "@@ -3787,7 +3787,7 @@ Regular_Loop_to_gnu (Node_Id gnat_node, tree *gnu_cond_expr_p)\n \t unswitching is enabled, do not require the loop bounds to be also\n \t invariant, as their evaluation will still be ahead of the loop.  */\n       if (vec_safe_length (gnu_loop_info->checks) > 0\n-\t && (make_invariant (&gnu_low, &gnu_high) || flag_unswitch_loops))\n+\t && (make_invariant (&gnu_low, &gnu_high) || optimize >= 3))\n \t{\n \t  struct range_check_info_d *rci;\n \t  unsigned int i, n_remaining_checks = 0;\n@@ -3840,22 +3840,21 @@ Regular_Loop_to_gnu (Node_Id gnat_node, tree *gnu_cond_expr_p)\n \t  /* Note that loop unswitching can only be applied a small number of\n \t     times to a given loop (PARAM_MAX_UNSWITCH_LEVEL default to 3).  */\n \t  if (IN_RANGE (n_remaining_checks, 1, 3)\n-\t      && optimize > 1\n+\t      && optimize >= 2\n \t      && !optimize_size)\n \t    FOR_EACH_VEC_ELT (*gnu_loop_info->checks, i, rci)\n \t      if (rci->invariant_cond != boolean_false_node)\n \t\t{\n \t\t  TREE_OPERAND (rci->inserted_cond, 0) = rci->invariant_cond;\n \n-\t\t  if (flag_unswitch_loops)\n+\t\t  if (optimize >= 3)\n \t\t    add_stmt_with_node_force (rci->inserted_cond, gnat_node);\n \t\t}\n \t}\n \n       /* Second, if loop vectorization is enabled and the iterations of the\n \t loop can easily be proved as independent, mark the loop.  */\n-      if (optimize\n-\t  && flag_tree_loop_vectorize\n+      if (optimize >= 3\n \t  && independent_iterations_p (LOOP_STMT_BODY (gnu_loop_stmt)))\n \tLOOP_STMT_IVDEP (gnu_loop_stmt) = 1;\n \n@@ -6478,7 +6477,7 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t= build1 (SAVE_EXPR, boolean_type_node, boolean_true_node);\n \t      vec_safe_push (loop->checks, rci);\n \t      gnu_cond = build_noreturn_cond (gnat_to_gnu (gnat_cond));\n-\t      if (flag_unswitch_loops)\n+\t      if (optimize >= 3)\n \t\tgnu_cond = build_binary_op (TRUTH_ANDIF_EXPR,\n \t\t\t\t\t    boolean_type_node,\n \t\t\t\t\t    rci->inserted_cond,"}]}