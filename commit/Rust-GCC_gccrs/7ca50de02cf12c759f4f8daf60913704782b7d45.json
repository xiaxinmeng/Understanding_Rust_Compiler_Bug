{"sha": "7ca50de02cf12c759f4f8daf60913704782b7d45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NhNTBkZTAyY2YxMmM3NTlmNGY4ZGFmNjA5MTM3MDQ3ODJiN2Q0NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-11T02:18:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-14T17:44:04Z"}, "message": "hash-table.h: support non-zero empty values in empty_slow (v2)\n\ngcc/cp/ChangeLog:\n\t* cp-gimplify.c (source_location_table_entry_hash::empty_zero_p):\n\tNew static constant.\n\t* cp-tree.h (named_decl_hash::empty_zero_p): Likewise.\n\t(struct named_label_hash::empty_zero_p): Likewise.\n\t* decl2.c (mangled_decl_hash::empty_zero_p): Likewise.\n\ngcc/ChangeLog:\n\t* attribs.c (excl_hash_traits::empty_zero_p): New static constant.\n\t* gcov.c (function_start_pair_hash::empty_zero_p): Likewise.\n\t* graphite.c (struct sese_scev_hash::empty_zero_p): Likewise.\n\t* hash-map-tests.c (selftest::test_nonzero_empty_key): New selftest.\n\t(selftest::hash_map_tests_c_tests): Call it.\n\t* hash-map-traits.h (simple_hashmap_traits::empty_zero_p):\n\tNew static constant, using the value of = H::empty_zero_p.\n\t(unbounded_hashmap_traits::empty_zero_p): Likewise, using the value\n\tfrom default_hash_traits <Value>.\n\t* hash-map.h (hash_map::empty_zero_p): Likewise, using the value\n\tfrom Traits.\n\t* hash-set-tests.c (value_hash_traits::empty_zero_p): Likewise.\n\t* hash-table.h (hash_table::alloc_entries): Guard the loop of\n\tcalls to mark_empty with !Descriptor::empty_zero_p.\n\t(hash_table::empty_slow): Conditionalize the memset call with a\n\tcheck that Descriptor::empty_zero_p; otherwise, loop through the\n\tentries calling mark_empty on them.\n\t* hash-traits.h (int_hash::empty_zero_p): New static constant.\n\t(pointer_hash::empty_zero_p): Likewise.\n\t(pair_hash::empty_zero_p): Likewise.\n\t* ipa-devirt.c (default_hash_traits <type_pair>::empty_zero_p):\n\tLikewise.\n\t* ipa-prop.c (ipa_bit_ggc_hash_traits::empty_zero_p): Likewise.\n\t(ipa_vr_ggc_hash_traits::empty_zero_p): Likewise.\n\t* profile.c (location_triplet_hash::empty_zero_p): Likewise.\n\t* sanopt.c (sanopt_tree_triplet_hash::empty_zero_p): Likewise.\n\t(sanopt_tree_couple_hash::empty_zero_p): Likewise.\n\t* tree-hasher.h (int_tree_hasher::empty_zero_p): Likewise.\n\t* tree-ssa-sccvn.c (vn_ssa_aux_hasher::empty_zero_p): Likewise.\n\t* tree-vect-slp.c (bst_traits::empty_zero_p): Likewise.\n\t* tree-vectorizer.h\n\t(default_hash_traits<scalar_cond_masked_key>::empty_zero_p):\n\tLikewise.", "tree": {"sha": "ca8340987edc24222001b551b1eda85777104e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca8340987edc24222001b551b1eda85777104e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ca50de02cf12c759f4f8daf60913704782b7d45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca50de02cf12c759f4f8daf60913704782b7d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca50de02cf12c759f4f8daf60913704782b7d45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca50de02cf12c759f4f8daf60913704782b7d45/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8982b5535c2762f566fd15e5862acf4702a78690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8982b5535c2762f566fd15e5862acf4702a78690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8982b5535c2762f566fd15e5862acf4702a78690"}], "stats": {"total": 108, "additions": 105, "deletions": 3}, "files": [{"sha": "4f586fee17c4a10509a46340fe8e8dbf851e51b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -1,3 +1,39 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* attribs.c (excl_hash_traits::empty_zero_p): New static constant.\n+\t* gcov.c (function_start_pair_hash::empty_zero_p): Likewise.\n+\t* graphite.c (struct sese_scev_hash::empty_zero_p): Likewise.\n+\t* hash-map-tests.c (selftest::test_nonzero_empty_key): New selftest.\n+\t(selftest::hash_map_tests_c_tests): Call it.\n+\t* hash-map-traits.h (simple_hashmap_traits::empty_zero_p):\n+\tNew static constant, using the value of = H::empty_zero_p.\n+\t(unbounded_hashmap_traits::empty_zero_p): Likewise, using the value\n+\tfrom default_hash_traits <Value>.\n+\t* hash-map.h (hash_map::empty_zero_p): Likewise, using the value\n+\tfrom Traits.\n+\t* hash-set-tests.c (value_hash_traits::empty_zero_p): Likewise.\n+\t* hash-table.h (hash_table::alloc_entries): Guard the loop of\n+\tcalls to mark_empty with !Descriptor::empty_zero_p.\n+\t(hash_table::empty_slow): Conditionalize the memset call with a\n+\tcheck that Descriptor::empty_zero_p; otherwise, loop through the\n+\tentries calling mark_empty on them.\n+\t* hash-traits.h (int_hash::empty_zero_p): New static constant.\n+\t(pointer_hash::empty_zero_p): Likewise.\n+\t(pair_hash::empty_zero_p): Likewise.\n+\t* ipa-devirt.c (default_hash_traits <type_pair>::empty_zero_p):\n+\tLikewise.\n+\t* ipa-prop.c (ipa_bit_ggc_hash_traits::empty_zero_p): Likewise.\n+\t(ipa_vr_ggc_hash_traits::empty_zero_p): Likewise.\n+\t* profile.c (location_triplet_hash::empty_zero_p): Likewise.\n+\t* sanopt.c (sanopt_tree_triplet_hash::empty_zero_p): Likewise.\n+\t(sanopt_tree_couple_hash::empty_zero_p): Likewise.\n+\t* tree-hasher.h (int_tree_hasher::empty_zero_p): Likewise.\n+\t* tree-ssa-sccvn.c (vn_ssa_aux_hasher::empty_zero_p): Likewise.\n+\t* tree-vect-slp.c (bst_traits::empty_zero_p): Likewise.\n+\t* tree-vectorizer.h\n+\t(default_hash_traits<scalar_cond_masked_key>::empty_zero_p):\n+\tLikewise.\n+\n 2020-01-14  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* cfgloopanal.c (average_num_loop_insns): Free bbs when early return,"}, {"sha": "c66d4ae2c066652239c4f3fddc6362df87ba6c75", "filename": "gcc/attribs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -2048,6 +2048,8 @@ struct excl_hash_traits: typed_noop_remove<excl_pair>\n     x = value_type (NULL, NULL);\n   }\n \n+  static const bool empty_zero_p = false;\n+\n   static void mark_empty (value_type &x)\n   {\n     x = value_type (\"\", \"\");"}, {"sha": "004ce0fdcdf1eafae742552b52b21429e4bbcb30", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -1,3 +1,11 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cp-gimplify.c (source_location_table_entry_hash::empty_zero_p):\n+\tNew static constant.\n+\t* cp-tree.h (named_decl_hash::empty_zero_p): Likewise.\n+\t(struct named_label_hash::empty_zero_p): Likewise.\n+\t* decl2.c (mangled_decl_hash::empty_zero_p): Likewise.\n+\n 2020-01-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92594 - ICE with inherited trivial default ctor."}, {"sha": "f3aeb7475da51baf539b3eda37e1a14567087b64", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -3045,6 +3045,8 @@ struct source_location_table_entry_hash\n     ref.var = NULL_TREE;\n   }\n \n+  static const bool empty_zero_p = true;\n+\n   static void\n   mark_empty (source_location_table_entry &ref)\n   {"}, {"sha": "4e26acc22a5d899266bd978bbd3617b8e6778ee7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -900,6 +900,7 @@ struct named_decl_hash : ggc_remove <tree>\n   inline static hashval_t hash (const value_type decl);\n   inline static bool equal (const value_type existing, compare_type candidate);\n \n+  static const bool empty_zero_p = true;\n   static inline void mark_empty (value_type &p) {p = NULL_TREE;}\n   static inline bool is_empty (value_type p) {return !p;}\n \n@@ -1870,6 +1871,7 @@ struct named_label_hash : ggc_remove <named_label_entry *>\n   inline static hashval_t hash (value_type);\n   inline static bool equal (const value_type, compare_type);\n \n+  static const bool empty_zero_p = true;\n   inline static void mark_empty (value_type &p) {p = NULL;}\n   inline static bool is_empty (value_type p) {return !p;}\n "}, {"sha": "042d6fa12df2866ab20d31bb6d3183604d6c3649", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -120,6 +120,7 @@ struct mangled_decl_hash : ggc_remove <tree>\n     return candidate == name;\n   }\n \n+  static const bool empty_zero_p = true;\n   static inline void mark_empty (value_type &p) {p = NULL_TREE;}\n   static inline bool is_empty (value_type p) {return !p;}\n "}, {"sha": "a291bac3e9ea49ac0ae3e7609435471939569ec7", "filename": "gcc/gcov.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -1225,6 +1225,8 @@ struct function_start_pair_hash : typed_noop_remove <function_start>\n     ref.start_line = ~1U;\n   }\n \n+  static const bool empty_zero_p = false;\n+\n   static void\n   mark_empty (function_start &ref)\n   {"}, {"sha": "27f1e486e1fc7c0c680515a7fec865eeffa73057", "filename": "gcc/graphite.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -233,6 +233,7 @@ struct sese_scev_hash : typed_noop_remove <seir_cache_key>\n \t    && operand_equal_p (key1.expr, key2.expr, 0));\n   }\n   static void mark_deleted (seir_cache_key &key) { key.expr = NULL_TREE; }\n+  static const bool empty_zero_p = false;\n   static void mark_empty (seir_cache_key &key) { key.entry_dest = 0; }\n   static bool is_deleted (const seir_cache_key &key) { return !key.expr; }\n   static bool is_empty (const seir_cache_key &key) { return key.entry_dest == 0; }"}, {"sha": "635740290658d9109cafd90b929b067beb229433", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -280,6 +280,27 @@ test_map_of_type_with_ctor_and_dtor ()\n   }\n }\n \n+/* Test calling empty on a hash_map that has a key type with non-zero\n+   \"empty\" value.  */\n+\n+static void\n+test_nonzero_empty_key ()\n+{\n+  typedef int_hash<int, INT_MIN, INT_MAX> IntHash;\n+  hash_map<int, int, simple_hashmap_traits<IntHash, int> > x;\n+\n+  for (int i = 1; i != 32; ++i)\n+    x.put (i, i);\n+\n+  ASSERT_EQ (x.get (0), NULL);\n+  ASSERT_EQ (*x.get (1), 1);\n+\n+  x.empty ();\n+\n+  ASSERT_EQ (x.get (0), NULL);\n+  ASSERT_EQ (x.get (1), NULL);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -288,6 +309,7 @@ hash_map_tests_c_tests ()\n   test_map_of_strings_to_int ();\n   test_map_of_int_to_strings ();\n   test_map_of_type_with_ctor_and_dtor ();\n+  test_nonzero_empty_key ();\n }\n \n } // namespace selftest"}, {"sha": "3b16be35f7ddec871fc88d0790a9675428817b39", "filename": "gcc/hash-map-traits.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-traits.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -36,6 +36,7 @@ struct simple_hashmap_traits\n   static inline hashval_t hash (const key_type &);\n   static inline bool equal_keys (const key_type &, const key_type &);\n   template <typename T> static inline void remove (T &);\n+  static const bool empty_zero_p = H::empty_zero_p;\n   template <typename T> static inline bool is_empty (const T &);\n   template <typename T> static inline bool is_deleted (const T &);\n   template <typename T> static inline void mark_empty (T &);\n@@ -113,6 +114,7 @@ template <typename Value>\n struct unbounded_hashmap_traits\n {\n   template <typename T> static inline void remove (T &);\n+  static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;\n   template <typename T> static inline bool is_empty (const T &);\n   template <typename T> static inline bool is_deleted (const T &);\n   template <typename T> static inline void mark_empty (T &);"}, {"sha": "5b8fd184e32c26507206ecfd7d02fb5bf7bb8362", "filename": "gcc/hash-map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -66,6 +66,7 @@ class GTY((user)) hash_map\n        \treturn Traits::is_deleted (e);\n       }\n \n+    static const bool empty_zero_p = Traits::empty_zero_p;\n     static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }\n     static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }\n "}, {"sha": "bb32094be20b1c908248e0060c79d39f6f3bcbc7", "filename": "gcc/hash-set-tests.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-set-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-set-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set-tests.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -199,6 +199,8 @@ struct value_hash_traits: int_hash<int, -1, -2>\n     base_type::mark_deleted (v.val);\n   }\n \n+  static const bool empty_zero_p = false;\n+\n   static void mark_empty (value_type &v)\n   {\n     base_type::mark_empty (v.val);"}, {"sha": "a1423c781125fedef803a4083771cd5c5b081f19", "filename": "gcc/hash-table.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -713,8 +713,9 @@ hash_table<Descriptor, Lazy,\n     nentries = ::ggc_cleared_vec_alloc<value_type> (n PASS_MEM_STAT);\n \n   gcc_assert (nentries != NULL);\n-  for (size_t i = 0; i < n; i++)\n-    mark_empty (nentries[i]);\n+  if (!Descriptor::empty_zero_p)\n+    for (size_t i = 0; i < n; i++)\n+      mark_empty (nentries[i]);\n \n   return nentries;\n }\n@@ -867,8 +868,11 @@ hash_table<Descriptor, Lazy, Allocator>::empty_slow ()\n       m_size = nsize;\n       m_size_prime_index = nindex;\n     }\n-  else\n+  else if (Descriptor::empty_zero_p)\n     memset ((void *) entries, 0, size * sizeof (value_type));\n+  else\n+    for (size_t i = 0; i < size; i++)\n+      mark_empty (entries[i]);\n \n   m_n_deleted = 0;\n   m_n_elements = 0;"}, {"sha": "3bca74c56ea87aefe01aa3a60dde8080e0da8f4d", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -88,6 +88,7 @@ struct int_hash : typed_noop_remove <Type>\n   static inline hashval_t hash (value_type);\n   static inline bool equal (value_type existing, value_type candidate);\n   static inline void mark_deleted (Type &);\n+  static const bool empty_zero_p = Empty == 0;\n   static inline void mark_empty (Type &);\n   static inline bool is_deleted (Type);\n   static inline bool is_empty (Type);\n@@ -150,6 +151,7 @@ struct pointer_hash\n   static inline bool equal (const value_type &existing,\n \t\t\t    const compare_type &candidate);\n   static inline void mark_deleted (Type *&);\n+  static const bool empty_zero_p = true;\n   static inline void mark_empty (Type *&);\n   static inline bool is_deleted (Type *);\n   static inline bool is_empty (Type *);\n@@ -323,6 +325,7 @@ struct pair_hash\n   static inline bool equal (const value_type &, const compare_type &);\n   static inline void remove (value_type &);\n   static inline void mark_deleted (value_type &);\n+  static const bool empty_zero_p = T1::empty_zero_p;\n   static inline void mark_empty (value_type &);\n   static inline bool is_deleted (const value_type &);\n   static inline bool is_empty (const value_type &);"}, {"sha": "f0031957375e508e648b1a7a6d8127ceb986ac08", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -150,6 +150,7 @@ struct default_hash_traits <type_pair>\n   {\n     return TYPE_UID (p.first) ^ TYPE_UID (p.second);\n   }\n+  static const bool empty_zero_p = true;\n   static bool\n   is_empty (type_pair p)\n   {"}, {"sha": "12cdb95cf2ab7bea181b774af6b2213ec1c76bc8", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -78,6 +78,7 @@ struct ipa_bit_ggc_hash_traits : public ggc_cache_remove <ipa_bits *>\n     {\n       return a->value == b->value && a->mask == b->mask;\n     }\n+  static const bool empty_zero_p = true;\n   static void\n   mark_empty (ipa_bits *&p)\n     {\n@@ -123,6 +124,7 @@ struct ipa_vr_ggc_hash_traits : public ggc_cache_remove <value_range *>\n     {\n       return a->equal_p (*b);\n     }\n+  static const bool empty_zero_p = true;\n   static void\n   mark_empty (value_range *&p)\n     {"}, {"sha": "6a2de21c3bd951c5b94235288b821a9bf8b9bf83", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -932,6 +932,8 @@ struct location_triplet_hash : typed_noop_remove <location_triplet>\n     ref.lineno = -1;\n   }\n \n+  static const bool empty_zero_p = false;\n+\n   static void\n   mark_empty (location_triplet &ref)\n   {"}, {"sha": "619aae45a15e360a57ce24e13b63bcc0d6da872d", "filename": "gcc/sanopt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -129,6 +129,8 @@ struct sanopt_tree_triplet_hash : typed_noop_remove <sanopt_tree_triplet>\n     ref.t1 = reinterpret_cast<tree> (1);\n   }\n \n+  static const bool empty_zero_p = true;\n+\n   static void\n   mark_empty (sanopt_tree_triplet &ref)\n   {\n@@ -184,6 +186,8 @@ struct sanopt_tree_couple_hash : typed_noop_remove <sanopt_tree_couple>\n     ref.ptr = reinterpret_cast<tree> (1);\n   }\n \n+  static const bool empty_zero_p = true;\n+\n   static void\n   mark_empty (sanopt_tree_couple &ref)\n   {"}, {"sha": "9194d6227a20d89bc588b9e4bdc90b6393f68b0d", "filename": "gcc/tree-hasher.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-hasher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-hasher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-hasher.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -40,6 +40,7 @@ struct int_tree_hasher\n     }\n   static void mark_deleted (value_type &v) { v.to = reinterpret_cast<tree> (0x1); }\n   static bool is_empty (const value_type &v) { return v.to == NULL; }\n+  static const bool empty_zero_p = true;\n   static void mark_empty (value_type &v) { v.to = NULL; }\n   static void remove (value_type &) {}\n };"}, {"sha": "3b27c50ef7546f703ff877fe9e9c2855ca294296", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -335,6 +335,7 @@ struct vn_ssa_aux_hasher : typed_noop_remove <vn_ssa_aux_t>\n   static inline hashval_t hash (const value_type &);\n   static inline bool equal (const value_type &, const compare_type &);\n   static inline void mark_deleted (value_type &) {}\n+  static const bool empty_zero_p = true;\n   static inline void mark_empty (value_type &e) { e = NULL; }\n   static inline bool is_deleted (value_type &) { return false; }\n   static inline bool is_empty (value_type &e) { return e == NULL; }"}, {"sha": "d164937b4b02409a7f72c8f0477ae7b84c406c01", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -1193,6 +1193,7 @@ struct bst_traits\n   static inline bool equal (value_type existing, value_type candidate);\n   static inline bool is_empty (value_type x) { return !x.exists (); }\n   static inline bool is_deleted (value_type x) { return !x.exists (); }\n+  static const bool empty_zero_p = true;\n   static inline void mark_empty (value_type &x) { x.release (); }\n   static inline void mark_deleted (value_type &x) { x.release (); }\n   static inline void remove (value_type &x) { x.release (); }"}, {"sha": "ed7fcb0b825aa78537fea3994183484fdbd66f62", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca50de02cf12c759f4f8daf60913704782b7d45/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=7ca50de02cf12c759f4f8daf60913704782b7d45", "patch": "@@ -232,6 +232,8 @@ struct default_hash_traits<scalar_cond_masked_key>\n            && operand_equal_p (existing.op1, candidate.op1, 0));\n   }\n \n+  static const bool empty_zero_p = true;\n+\n   static inline void\n   mark_empty (value_type &v)\n   {"}]}