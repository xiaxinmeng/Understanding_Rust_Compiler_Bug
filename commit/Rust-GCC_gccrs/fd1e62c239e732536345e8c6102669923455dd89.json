{"sha": "fd1e62c239e732536345e8c6102669923455dd89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQxZTYyYzIzOWU3MzI1MzYzNDVlOGM2MTAyNjY5OTIzNDU1ZGQ4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-21T11:23:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-21T11:23:11Z"}, "message": "limits.cc: Replace everywhere __int128_t -> __int128, and __uint128_t -> unsigned __int128.\n\n2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/limits.cc: Replace everywhere __int128_t -> __int128, and\n\t__uint128_t -> unsigned __int128.\n\t* include/std/type_traits: Likewise.\n\t* include/std/limits: Likewise.\n\t* testsuite/18_support/numeric_limits/dr559.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/40856.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n\t* testsuite/util/testsuite_common_types.h: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/is_signed/value.cc: Likewise.\n\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n\t* testsuite/20_util/is_integral/value.cc: Likewise.\n\t* config/abi/pre/gnu.ver: Likewise.\n\t* acinclude.m4: Likewise.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r179044", "tree": {"sha": "4d0de25de9610cc6e1ef712dfcefe8f734480477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0de25de9610cc6e1ef712dfcefe8f734480477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd1e62c239e732536345e8c6102669923455dd89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e62c239e732536345e8c6102669923455dd89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1e62c239e732536345e8c6102669923455dd89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e62c239e732536345e8c6102669923455dd89/comments", "author": null, "committer": null, "parents": [{"sha": "66d9474406bab72469beb3075dcad24c247d6905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d9474406bab72469beb3075dcad24c247d6905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d9474406bab72469beb3075dcad24c247d6905"}], "stats": {"total": 307, "additions": 164, "deletions": 143}, "files": [{"sha": "16f7d052135f07f640f37a50ae696efbfa3c7130", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -1,3 +1,27 @@\n+2011-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/limits.cc: Replace everywhere __int128_t -> __int128, and\n+\t__uint128_t -> unsigned __int128.\n+\t* include/std/type_traits: Likewise.\n+\t* include/std/limits: Likewise.\n+\t* testsuite/18_support/numeric_limits/dr559.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/lowest.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/40856.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/max_digits10.cc: Likewise.\n+\t* testsuite/util/testsuite_common_types.h: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/is_floating_point/value.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/is_signed/value.cc: Likewise.\n+\t* testsuite/20_util/is_unsigned/value.cc: Likewise.\n+\t* testsuite/20_util/is_integral/value.cc: Likewise.\n+\t* config/abi/pre/gnu.ver: Likewise.\n+\t* acinclude.m4: Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2011-09-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/40856"}, {"sha": "ccfb2ce5e30a376cb9f5627f4356df43f956669d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -2446,17 +2446,15 @@ template<typename T>\n \n int main()\n {\n-  typename same<long, __int128_t>::type                i1;\n-  typename same<unsigned long, __uint128_t>::type      u1;\n-  typename same<long long, __int128_t>::type           i2;\n-  typename same<unsigned long long, __uint128_t>::type u2;\n+  typename same<long, __int128>::type                i1;\n+  typename same<long long, __int128>::type           i2;\n }\n EOF\n \n-    AC_MSG_CHECKING([for __int128_t and __uint128_t])\n+    AC_MSG_CHECKING([for __int128])\n     if AC_TRY_EVAL(ac_compile); then\n       AC_DEFINE(_GLIBCXX_USE_INT128, 1,\n-      [Define if __int128_t and __uint128_t types are supported on this host.])\n+      [Define if __int128 is supported on this host.])\n       enable_int128=yes\n     else\n       enable_int128=no"}, {"sha": "82470c8cec9ef792014bb9a6d3944b829eea1b6f", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -816,7 +816,7 @@\n /* Define if get_nprocs is available in <sys/sysinfo.h>. */\n #undef _GLIBCXX_USE_GET_NPROCS\n \n-/* Define if __int128_t and __uint128_t types are supported on this host. */\n+/* Define if __int128 is supported on this host. */\n #undef _GLIBCXX_USE_INT128\n \n /* Define if LFS support is available. */"}, {"sha": "5e5aa6a581011d7b439762dcd3f07cf46ce940e6", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -1298,7 +1298,7 @@ GLIBCXX_3.4.17 {\n     # std::chrono::steady_clock::now()\n     _ZNSt6chrono12steady_clock3nowEv;\n \n-    # std::numeric_limits<__int128_t> and <__uint128_t>\n+    # std::numeric_limits<__int128> and <unsigned __int128>\n     _ZNSt14numeric_limitsInE*;\n     _ZNSt14numeric_limitsIoE*;\n "}, {"sha": "423d447040914208328ae76176d9031938847377", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -15561,15 +15561,13 @@ template<typename T>\n \n int main()\n {\n-  typename same<long, __int128_t>::type                i1;\n-  typename same<unsigned long, __uint128_t>::type      u1;\n-  typename same<long long, __int128_t>::type           i2;\n-  typename same<unsigned long long, __uint128_t>::type u2;\n+  typename same<long, __int128>::type                i1;\n+  typename same<long long, __int128>::type           i2;\n }\n EOF\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __int128_t and __uint128_t\" >&5\n-$as_echo_n \"checking for __int128_t and __uint128_t... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __int128\" >&5\n+$as_echo_n \"checking for __int128... \" >&6; }\n     if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -15587,7 +15585,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15590 \"configure\"\n+#line 15588 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "67a5af4d804a81a601e8f338252a05e9f1f91199", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -1400,27 +1400,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-  /// numeric_limits<__int128_t> specialization.\n+  /// numeric_limits<__int128> specialization.\n   template<>\n-    struct numeric_limits<__int128_t>\n+    struct numeric_limits<__int128>\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n-      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (__int128_t); }\n+      static _GLIBCXX_CONSTEXPR __int128\n+      min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (__int128); }\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n-      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__int128_t); }\n+      static _GLIBCXX_CONSTEXPR __int128\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__int128); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      static constexpr __int128_t\n+      static constexpr __int128\n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits\n-       = __glibcxx_digits (__int128_t);\n+       = __glibcxx_digits (__int128);\n       static _GLIBCXX_USE_CONSTEXPR int digits10\n-       = __glibcxx_digits10 (__int128_t);\n+       = __glibcxx_digits10 (__int128);\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr int max_digits10 = 0;\n #endif\n@@ -1429,10 +1429,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1447,21 +1447,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       infinity() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__int128_t>(0); }\n+      { return static_cast<__int128>(0); }\n \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__int128_t>(0); }\n+      { return static_cast<__int128>(0); }\n       \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__int128_t>(0); }\n+      { return static_cast<__int128>(0); }\n       \n-      static _GLIBCXX_CONSTEXPR __int128_t\n+      static _GLIBCXX_CONSTEXPR __int128\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__int128_t>(0); }\n+      { return static_cast<__int128>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;\n@@ -1474,27 +1474,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = round_toward_zero;\n     };\n \n-  /// numeric_limits<__uint128_t> specialization.\n+  /// numeric_limits<unsigned __int128> specialization.\n   template<>\n-    struct numeric_limits<__uint128_t>\n+    struct numeric_limits<unsigned __int128>\n     {\n       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       min() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n-      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (__uint128_t); }\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n+      max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (unsigned __int128); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      static constexpr __uint128_t\n+      static constexpr unsigned __int128\n       lowest() noexcept { return min(); }\n #endif\n \n       static _GLIBCXX_USE_CONSTEXPR int digits\n-       = __glibcxx_digits (__uint128_t);\n+       = __glibcxx_digits (unsigned __int128);\n       static _GLIBCXX_USE_CONSTEXPR int digits10\n-       = __glibcxx_digits10 (__uint128_t);\n+       = __glibcxx_digits10 (unsigned __int128);\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       static constexpr int max_digits10 = 0;\n #endif\n@@ -1503,10 +1503,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;\n       static _GLIBCXX_USE_CONSTEXPR int radix = 2;\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }\n \n       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;\n@@ -1521,21 +1521,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        = denorm_absent;\n       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       infinity() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__uint128_t>(0); }\n+      { return static_cast<unsigned __int128>(0); }\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__uint128_t>(0); }\n+      { return static_cast<unsigned __int128>(0); }\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__uint128_t>(0); }\n+      { return static_cast<unsigned __int128>(0); }\n \n-      static _GLIBCXX_CONSTEXPR __uint128_t\n+      static _GLIBCXX_CONSTEXPR unsigned __int128\n       denorm_min() _GLIBCXX_USE_NOEXCEPT\n-      { return static_cast<__uint128_t>(0); }\n+      { return static_cast<unsigned __int128>(0); }\n \n       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;"}, {"sha": "a0208590bb56777fff0312fe9899b134e83a0b7c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -215,11 +215,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n   template<>\n-    struct __is_integral_helper<__int128_t>\n+    struct __is_integral_helper<__int128>\n     : public true_type { };\n \n   template<>\n-    struct __is_integral_helper<__uint128_t>\n+    struct __is_integral_helper<unsigned __int128>\n     : public true_type { };\n #endif\n \n@@ -1416,8 +1416,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n   template<>\n-    struct __make_unsigned<__int128_t>\n-    { typedef __uint128_t __type; };\n+    struct __make_unsigned<__int128>\n+    { typedef unsigned __int128 __type; };\n #endif\n \n   // Select between integral and enum: not possible to be both.\n@@ -1498,8 +1498,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n   template<>\n-    struct __make_signed<__uint128_t>\n-    { typedef __int128_t __type; };\n+    struct __make_signed<unsigned __int128>\n+    { typedef __int128 __type; };\n #endif\n \n   // Select between integral and enum: not possible to be both."}, {"sha": "cc6acc21ea7427685054c4a8848045fd02406826", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -390,53 +390,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const float_round_style numeric_limits<unsigned long long>::round_style;\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-  const bool numeric_limits<__int128_t>::is_specialized;\n-  const int  numeric_limits<__int128_t>::digits;\n-  const int  numeric_limits<__int128_t>::digits10;\n-  const int  numeric_limits<__int128_t>::max_digits10;\n-  const bool numeric_limits<__int128_t>::is_signed;\n-  const bool numeric_limits<__int128_t>::is_integer;\n-  const bool numeric_limits<__int128_t>::is_exact;\n-  const int  numeric_limits<__int128_t>::radix;\n-  const int  numeric_limits<__int128_t>::min_exponent;\n-  const int  numeric_limits<__int128_t>::min_exponent10;\n-  const int  numeric_limits<__int128_t>::max_exponent;\n-  const int  numeric_limits<__int128_t>::max_exponent10;\n-  const bool numeric_limits<__int128_t>::has_infinity;\n-  const bool numeric_limits<__int128_t>::has_quiet_NaN;\n-  const bool numeric_limits<__int128_t>::has_signaling_NaN;\n-  const float_denorm_style numeric_limits<__int128_t>::has_denorm;\n-  const bool numeric_limits<__int128_t>::has_denorm_loss;\n-  const bool numeric_limits<__int128_t>::is_iec559;\n-  const bool numeric_limits<__int128_t>::is_bounded;\n-  const bool numeric_limits<__int128_t>::is_modulo;\n-  const bool numeric_limits<__int128_t>::traps;\n-  const bool numeric_limits<__int128_t>::tinyness_before;\n-  const float_round_style numeric_limits<__int128_t>::round_style;\n-\n-  const bool numeric_limits<__uint128_t>::is_specialized;\n-  const int  numeric_limits<__uint128_t>::digits;\n-  const int  numeric_limits<__uint128_t>::digits10;\n-  const int  numeric_limits<__uint128_t>::max_digits10;\n-  const bool numeric_limits<__uint128_t>::is_signed;\n-  const bool numeric_limits<__uint128_t>::is_integer;\n-  const bool numeric_limits<__uint128_t>::is_exact;\n-  const int  numeric_limits<__uint128_t>::radix;\n-  const int  numeric_limits<__uint128_t>::min_exponent;\n-  const int  numeric_limits<__uint128_t>::min_exponent10;\n-  const int  numeric_limits<__uint128_t>::max_exponent;\n-  const int  numeric_limits<__uint128_t>::max_exponent10;\n-  const bool numeric_limits<__uint128_t>::has_infinity;\n-  const bool numeric_limits<__uint128_t>::has_quiet_NaN;\n-  const bool numeric_limits<__uint128_t>::has_signaling_NaN;\n-  const float_denorm_style numeric_limits<__uint128_t>::has_denorm;\n-  const bool numeric_limits<__uint128_t>::has_denorm_loss;\n-  const bool numeric_limits<__uint128_t>::is_iec559;\n-  const bool numeric_limits<__uint128_t>::is_bounded;\n-  const bool numeric_limits<__uint128_t>::is_modulo;\n-  const bool numeric_limits<__uint128_t>::traps;\n-  const bool numeric_limits<__uint128_t>::tinyness_before;\n-  const float_round_style numeric_limits<__uint128_t>::round_style;\n+  const bool numeric_limits<__int128>::is_specialized;\n+  const int  numeric_limits<__int128>::digits;\n+  const int  numeric_limits<__int128>::digits10;\n+  const int  numeric_limits<__int128>::max_digits10;\n+  const bool numeric_limits<__int128>::is_signed;\n+  const bool numeric_limits<__int128>::is_integer;\n+  const bool numeric_limits<__int128>::is_exact;\n+  const int  numeric_limits<__int128>::radix;\n+  const int  numeric_limits<__int128>::min_exponent;\n+  const int  numeric_limits<__int128>::min_exponent10;\n+  const int  numeric_limits<__int128>::max_exponent;\n+  const int  numeric_limits<__int128>::max_exponent10;\n+  const bool numeric_limits<__int128>::has_infinity;\n+  const bool numeric_limits<__int128>::has_quiet_NaN;\n+  const bool numeric_limits<__int128>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<__int128>::has_denorm;\n+  const bool numeric_limits<__int128>::has_denorm_loss;\n+  const bool numeric_limits<__int128>::is_iec559;\n+  const bool numeric_limits<__int128>::is_bounded;\n+  const bool numeric_limits<__int128>::is_modulo;\n+  const bool numeric_limits<__int128>::traps;\n+  const bool numeric_limits<__int128>::tinyness_before;\n+  const float_round_style numeric_limits<__int128>::round_style;\n+\n+  const bool numeric_limits<unsigned __int128>::is_specialized;\n+  const int  numeric_limits<unsigned __int128>::digits;\n+  const int  numeric_limits<unsigned __int128>::digits10;\n+  const int  numeric_limits<unsigned __int128>::max_digits10;\n+  const bool numeric_limits<unsigned __int128>::is_signed;\n+  const bool numeric_limits<unsigned __int128>::is_integer;\n+  const bool numeric_limits<unsigned __int128>::is_exact;\n+  const int  numeric_limits<unsigned __int128>::radix;\n+  const int  numeric_limits<unsigned __int128>::min_exponent;\n+  const int  numeric_limits<unsigned __int128>::min_exponent10;\n+  const int  numeric_limits<unsigned __int128>::max_exponent;\n+  const int  numeric_limits<unsigned __int128>::max_exponent10;\n+  const bool numeric_limits<unsigned __int128>::has_infinity;\n+  const bool numeric_limits<unsigned __int128>::has_quiet_NaN;\n+  const bool numeric_limits<unsigned __int128>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<unsigned __int128>::has_denorm;\n+  const bool numeric_limits<unsigned __int128>::has_denorm_loss;\n+  const bool numeric_limits<unsigned __int128>::is_iec559;\n+  const bool numeric_limits<unsigned __int128>::is_bounded;\n+  const bool numeric_limits<unsigned __int128>::is_modulo;\n+  const bool numeric_limits<unsigned __int128>::traps;\n+  const bool numeric_limits<unsigned __int128>::tinyness_before;\n+  const float_round_style numeric_limits<unsigned __int128>::round_style;\n #endif\n \n   // float"}, {"sha": "d4dff3a14a8a1088d43a597474b358261b2ae383", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/40856.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2F40856.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -22,6 +22,7 @@\n \n // libstdc++/40856 \n #ifdef _GLIBCXX_USE_INT128\n-static_assert(std::numeric_limits<__int128_t>::is_specialized == true, \"\");\n-static_assert(std::numeric_limits<__uint128_t>::is_specialized == true, \"\");\n+static_assert(std::numeric_limits<__int128>::is_specialized == true, \"\");\n+static_assert(std::numeric_limits<unsigned __int128>::is_specialized == true,\n+\t      \"\");\n #endif"}, {"sha": "05e4e173d1a3ad7abf7ea12c843b282286c55e8e", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/dr559.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fdr559.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -97,8 +97,8 @@ int main()\n   do_test<unsigned long long>();\n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  do_test<__int128_t>();\n-  do_test<__uint128_t>();\n+  do_test<__int128>();\n+  do_test<unsigned __int128>();\n #endif\n   do_test<float>();\n   do_test<double>();"}, {"sha": "0b410b55fe0e0b8da1ab74a39707a1e8f5c153ea", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/lowest.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Flowest.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -74,8 +74,8 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  do_test<__int128_t>();\n-  do_test<__uint128_t>();\n+  do_test<__int128>();\n+  do_test<unsigned __int128>();\n #endif\n \n   do_test<float>();"}, {"sha": "d4858244ee776fa050d58a5470b09bf2cb82881f", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/max_digits10.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fmax_digits10.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -49,8 +49,8 @@ test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( std::numeric_limits<__int128_t>::max_digits10 == 0 );\n-  VERIFY( std::numeric_limits<__uint128_t>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<__int128>::max_digits10 == 0 );\n+  VERIFY( std::numeric_limits<unsigned __int128>::max_digits10 == 0 );\n #endif\n \n   const int f_max_digits10 = (2 + std::numeric_limits<float>::digits"}, {"sha": "df9cfcaa5bc97f563e725318976e2f826b53d3e6", "filename": "libstdc++-v3/testsuite/20_util/is_floating_point/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_floating_point%2Fvalue.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -53,8 +53,8 @@ void test01()\n #endif\n \n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_floating_point, __int128_t>(false)) );\n-  VERIFY( (test_category<is_floating_point, __uint128_t>(false)) );\n+  VERIFY( (test_category<is_floating_point, __int128>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned __int128>(false)) );\n #endif\n \n   // Sanity check."}, {"sha": "d085f92358ff17f09499003b5978e09ff97a2a31", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -53,8 +53,8 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_integral, __int128_t>(true)) );\n-  VERIFY( (test_category<is_integral, __uint128_t>(true)) );\n+  VERIFY( (test_category<is_integral, __int128>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned __int128>(true)) );\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128"}, {"sha": "d6394ff503734b73a18570660fc6773d98ad54d0", "filename": "libstdc++-v3/testsuite/20_util/is_signed/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_signed%2Fvalue.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -51,8 +51,8 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_signed, __int128_t>(true)) );\n-  VERIFY( (test_category<is_signed, __uint128_t>(false)) );\n+  VERIFY( (test_category<is_signed, __int128>(true)) );\n+  VERIFY( (test_category<is_signed, unsigned __int128>(false)) );\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128"}, {"sha": "41e05871a7b95bb4d0b4f32c5588495825dba128", "filename": "libstdc++-v3/testsuite/20_util/is_unsigned/value.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_unsigned%2Fvalue.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -51,8 +51,8 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  VERIFY( (test_category<is_unsigned, __uint128_t>(true)) );\n-  VERIFY( (test_category<is_unsigned, __int128_t>(false)) );\n+  VERIFY( (test_category<is_unsigned, unsigned __int128>(true)) );\n+  VERIFY( (test_category<is_unsigned, __int128>(false)) );\n #endif\n \n #ifdef _GLIBCXX_USE_FLOAT128"}, {"sha": "73cfddccb3c2a5bcbf9efc18a06a78db01f83ae9", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -59,11 +59,11 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  typedef make_signed<__uint128_t>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, __int128_t>::value) );\n+  typedef make_signed<unsigned __int128>::type  test25_type;\n+  VERIFY( (is_same<test25_type, __int128>::value) );\n \n-  typedef make_signed<__int128_t>::type  \ttest26_type;\n-  VERIFY( (is_same<test26_type, __int128_t>::value) );\n+  typedef make_signed<__int128>::type  \t        test26_type;\n+  VERIFY( (is_same<test26_type, __int128>::value) );\n #endif\n }\n "}, {"sha": "adf3af4abd8cbbdb1d772b5da5a8cd1e45a282b0", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -58,11 +58,11 @@ void test01()\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  typedef make_signed<__uint128_t>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, __int128_t>::value) );\n+  typedef make_signed<unsigned __int128>::type  test25_type;\n+  VERIFY( (is_same<test25_type, __int128>::value) );\n \n-  typedef make_signed<__int128_t>::type  \ttest26_type;\n-  VERIFY( (is_same<test26_type, __int128_t>::value) );\n+  typedef make_signed<__int128>::type  \t        test26_type;\n+  VERIFY( (is_same<test26_type, __int128>::value) );\n #endif\n }\n "}, {"sha": "44399851a19c2e412827ae3688ee3854f7a54906", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -54,17 +54,17 @@ void test01()\n \n   // Chapter 48, chapter 20. Smallest rank such that new unsigned type\n   // same size.\n-  typedef make_unsigned<test_enum>::type  \ttest24_type;\n+  typedef make_unsigned<test_enum>::type  \t test24_type;\n   VERIFY( is_unsigned<test24_type>::value );\n   VERIFY( sizeof(test24_type) == sizeof(test_enum) );\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  typedef make_unsigned<__uint128_t>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, __uint128_t>::value) );\n+  typedef make_unsigned<unsigned __int128>::type test25_type;\n+  VERIFY( (is_same<test25_type, unsigned __int128>::value) );\n \n-  typedef make_unsigned<__int128_t>::type  \ttest26_type;\n-  VERIFY( (is_same<test26_type, __uint128_t>::value) );\n+  typedef make_unsigned<__int128>::type  \t test26_type;\n+  VERIFY( (is_same<test26_type, unsigned __int128>::value) );\n #endif\n }\n "}, {"sha": "a1465d39fb24893bb1abc953452d7845e8d8c505", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -53,16 +53,16 @@ void test01()\n   VERIFY( (is_same<test23_type, volatile wchar_t>::value) );\n #endif\n \n-  typedef make_unsigned<test_enum>::type  \ttest24_type;\n+  typedef make_unsigned<test_enum>::type  \t  test24_type;\n   VERIFY( (is_same<test24_type, unsigned short>::value) );\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n-  typedef make_unsigned<__uint128_t>::type  \ttest25_type;\n-  VERIFY( (is_same<test25_type, __uint128_t>::value) );\n+  typedef make_unsigned<unsigned __int128>::type  test25_type;\n+  VERIFY( (is_same<test25_type, unsigned __int128>::value) );\n \n-  typedef make_unsigned<__int128_t>::type  \ttest26_type;\n-  VERIFY( (is_same<test26_type, __uint128_t>::value) );\n+  typedef make_unsigned<__int128>::type  \t  test26_type;\n+  VERIFY( (is_same<test26_type, unsigned __int128>::value) );\n #endif\n }\n "}, {"sha": "03be0acac252e0740506ded35df1c12b77f5d470", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e62c239e732536345e8c6102669923455dd89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=fd1e62c239e732536345e8c6102669923455dd89", "patch": "@@ -305,8 +305,8 @@ namespace __gnu_test\n     typedef char16_t \t\ta14;\n     typedef char32_t \t\ta15;\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    typedef __int128_t          a16;\n-    typedef __uint128_t         a17;\n+    typedef __int128            a16;\n+    typedef unsigned __int128   a17;\n \n     typedef node<_GLIBCXX_TYPELIST_CHAIN17(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n \t\t\t\t\t   a10, a11, a12, a13, a14, a15,\n@@ -317,8 +317,8 @@ namespace __gnu_test\n # endif\n #else\n # if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_INT128)\n-    typedef __int128_t          a14;\n-    typedef __uint128_t         a15;\n+    typedef __int128            a14;\n+    typedef unsigned __int128   a15;\n \n     typedef node<_GLIBCXX_TYPELIST_CHAIN15(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n \t\t\t\t\t   a10, a11, a12, a13, a14, a15)> type;"}]}