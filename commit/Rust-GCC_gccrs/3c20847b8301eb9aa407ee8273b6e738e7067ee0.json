{"sha": "3c20847b8301eb9aa407ee8273b6e738e7067ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyMDg0N2I4MzAxZWI5YWE0MDdlZTgyNzNiNmU3MzhlNzA2N2VlMA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T18:05:07Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T18:05:07Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* basic-block.h (struct edge_def):  Use new source_locus typedef.\n\t* c-common.c (fname_decl):  Update save/clear/store of input_location.\n\t(c_do_switch_warnings):  Update for USE_MAPPED_LOCATION case.\n\t* c-decl.c:  Likewise.\n\t* c-dump.c (dump_stmt):  Likewise.\n\t* c-gimplify.c (c-gimplify.c):  Generalize using SET_EXPR_LOCATION.\n\t* c-lex.c (cb_line_change):  If USE_MAPPED_LOCATION use token's\tsrc_loc\n\tto set input_location direction, rather than using linemap_lookup.\n\t(fe_file_change, cb_def_pragma):  Again use source_location directly.\n\t* c-opts.c (saved_lineno):  Remove static variable.\n\t(c_common_post_options, c_common_init):  Don't bothner to save,\n\tclear and restore input_Location - now handled by lang_dependent_init.\n\t* function.c (init_function_start):  Use new DECL_IS_BUILTIN macro.\n\t* xcoffout.c (xcoff_assign_fundamental_type_number):  Likewise.\n\nFrom-SVN: r83919", "tree": {"sha": "3a5eb1a7eff65640bfe8d3933a6c06578d9f38ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5eb1a7eff65640bfe8d3933a6c06578d9f38ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c20847b8301eb9aa407ee8273b6e738e7067ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c20847b8301eb9aa407ee8273b6e738e7067ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c20847b8301eb9aa407ee8273b6e738e7067ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c20847b8301eb9aa407ee8273b6e738e7067ee0/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c166747038bc41ee6702618828e5c915cc4e47ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166747038bc41ee6702618828e5c915cc4e47ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c166747038bc41ee6702618828e5c915cc4e47ea"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "c477d5388595c3a7d383cc5365b0e1c80621fe9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -26,6 +26,21 @@\n \t(lang_dependent_init):  Save, set input_location to <built-in>.\n \t(warn_deprecated_use):  Use expand_location.\n \n+\t* basic-block.h (struct edge_def):  Use new source_locus typedef.\n+\t* c-common.c (fname_decl):  Update save/clear/store of input_location.\n+\t(c_do_switch_warnings):  Update for USE_MAPPED_LOCATION case.\n+\t* c-decl.c:  Likewise.\n+\t* c-dump.c (dump_stmt):  Likewise.\n+\t* c-gimplify.c (c-gimplify.c):  Generalize using SET_EXPR_LOCATION.\n+\t* c-lex.c (cb_line_change):  If USE_MAPPED_LOCATION use token's\tsrc_loc\n+\tto set input_location direction, rather than using linemap_lookup.\n+\t(fe_file_change, cb_def_pragma):  Again use source_location directly.\n+\t* c-opts.c (saved_lineno):  Remove static variable.\n+\t(c_common_post_options, c_common_init):  Don't bothner to save,\n+\tclear and restore input_Location - now handled by lang_dependent_init.\n+\t* function.c (init_function_start):  Use new DECL_IS_BUILTIN macro.\n+\t* xcoffout.c (xcoff_assign_fundamental_type_number):  Likewise.\n+\n 2004-06-30  Richard Sandiford  <rsandifo@redhat.com>\n \t    Eric Christopher  <echristo@redhat.com>\n "}, {"sha": "e097f9925431d5d750cbff1bbcae59402ba65278", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -143,7 +143,7 @@ struct edge_def GTY((chain_next (\"%h.pred_next\")))\n   PTR GTY ((skip (\"\"))) aux;\n \n   /* Location of any goto implicit in the edge, during tree-ssa.  */\n-  location_t *goto_locus;\n+  source_locus goto_locus;\n \n   int flags;\t\t\t/* see EDGE_* below  */\n   int probability;\t\t/* biased by REG_BR_PROB_BASE */"}, {"sha": "9d07efbbfcee65f24ad649de03ffec690469c720", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -801,8 +801,12 @@ fname_decl (unsigned int rid, tree id)\n \t To avoid this problem set the lineno to 0 here; that prevents\n \t it from appearing in the RTL.  */\n       tree stmts;\n-      location_t saved_locus = input_location;\n+      location_t saved_location = input_location;\n+#ifdef USE_MAPPED_LOCATION\n+      input_location = UNKNOWN_LOCATION;\n+#else\n       input_line = 0;\n+#endif\n \n       stmts = push_stmt_list ();\n       decl = (*make_fname_decl) (id, fname_vars[ix].pretty);\n@@ -811,7 +815,7 @@ fname_decl (unsigned int rid, tree id)\n \tsaved_function_name_decls\n \t  = tree_cons (decl, stmts, saved_function_name_decls);\n       *fname_vars[ix].decl = decl;\n-      input_location = saved_locus;\n+      input_location = saved_location;\n     }\n   if (!ix && !current_function_decl)\n     pedwarn (\"%J'%D' is not defined outside of function scope\", decl, decl);\n@@ -3599,20 +3603,22 @@ void\n c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n {\n   splay_tree_node default_node;  \n-  location_t *switch_locus;\n+  location_t switch_location;\n   tree type;\n \n   if (!warn_switch && !warn_switch_enum && !warn_switch_default)\n     return;\n \n-  switch_locus = EXPR_LOCUS (switch_stmt);\n-  if (!switch_locus)\n-    switch_locus = &input_location;\n+  if (EXPR_HAS_LOCATION (switch_stmt))\n+    switch_location = EXPR_LOCATION (switch_stmt);\n+  else\n+    switch_location = input_location;\n+\n   type = SWITCH_TYPE (switch_stmt);\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (warn_switch_default && !default_node)\n-    warning (\"%Hswitch missing default case\", switch_locus);\n+    warning (\"%Hswitch missing default case\", &switch_location);\n \n   /* If the switch expression was an enumerated type, check that\n      exactly all enumeration literals are covered by the cases.\n@@ -3647,7 +3653,7 @@ c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n \t      /* Warn if there are enumerators that don't correspond to\n \t\t case expressions.  */\n \t      warning (\"%Henumeration value `%E' not handled in switch\",\n-\t\t       switch_locus, TREE_PURPOSE (chain));\n+\t\t       &switch_location, TREE_PURPOSE (chain));\n \t    }\n \t}\n "}, {"sha": "f5c03f3446762ca8c49b0603b259d9e527271e82", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -1114,7 +1114,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    }\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t       && DECL_SOURCE_LINE (olddecl) == 0)\n+\t       && DECL_IS_BUILTIN (olddecl))\n \t{\n \t  /* A conflicting function declaration for a predeclared\n \t     function that isn't actually built in.  Objective C uses\n@@ -1223,7 +1223,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t     default.  Objective C uses these.  See also above.\n \t     FIXME: Make Objective C use normal builtins.  */\n \t  if (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t      && DECL_SOURCE_LINE (olddecl) == 0)\n+\t      && DECL_IS_BUILTIN (olddecl))\n \t    return false;\n \t  else\n \t    {\n@@ -1671,7 +1671,7 @@ warn_if_shadowing (tree new)\n   /* Shadow warnings wanted?  */\n   if (!warn_shadow\n       /* No shadow warnings for internally generated vars.  */\n-      || DECL_SOURCE_LINE (new) == 0\n+      || DECL_IS_BUILTIN (new)\n       /* No shadow warnings for vars made for inlining.  */\n       || DECL_FROM_INLINE (new)\n       /* Don't warn about the parm names in function declarator\n@@ -1755,7 +1755,7 @@ warn_if_shadowing (tree new)\n static void\n clone_underlying_type (tree x)\n {\n-  if (DECL_SOURCE_LINE (x) == 0)\n+  if (DECL_IS_BUILTIN (x))\n     {\n       if (TYPE_NAME (TREE_TYPE (x)) == 0)\n \tTYPE_NAME (TREE_TYPE (x)) = x;\n@@ -1963,7 +1963,7 @@ implicitly_declare (tree functionid)\n \t in the external scope because they're pushed before the file\n \t scope gets created.  Catch this here and rebind them into the\n \t file scope.  */\n-      if (!DECL_BUILT_IN (decl) && DECL_SOURCE_LINE (decl) == 0)\n+      if (!DECL_BUILT_IN (decl) && DECL_IS_BUILTIN (decl))\n \t{\n \t  bind (functionid, decl, file_scope);\n \t  return decl;\n@@ -2290,8 +2290,12 @@ c_init_decl_processing (void)\n   /* Declarations from c_common_nodes_and_builtins must not be associated\n      with this input file, lest we get differences between using and not\n      using preprocessed headers.  */\n-  input_location.file = \"<internal>\";\n+#ifdef USE_MAPPED_LOCATION\n+  input_location = BUILTINS_LOCATION;\n+#else\n+  input_location.file = \"<built-in>\";\n   input_location.line = 0;\n+#endif\n \n   build_common_tree_nodes (flag_signed_char);\n "}, {"sha": "006759f9fa22820d54c6d91635ff35fcbd192495", "filename": "gcc/c-dump.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -32,9 +32,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n void\n dump_stmt (dump_info_p di, tree t)\n {\n-  location_t *locus = EXPR_LOCUS (t);\n-  if (locus)\n-    dump_int (di, \"line\", locus->line);\n+  if (EXPR_HAS_LOCATION (t))\n+    dump_int (di, \"line\", EXPR_LINENO (t));\n }\n \n /* Dump any C-specific tree codes and attributes of common codes.  */"}, {"sha": "0d92967ff7b9031e626f0d7ba3a2b59b98cb2a1a", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -458,7 +458,7 @@ gimplify_switch_stmt (tree *stmt_p)\n \n   *stmt_p = build (SWITCH_EXPR, SWITCH_TYPE (stmt), SWITCH_COND (stmt),\n \t\t   body, NULL_TREE);\n-  annotate_with_locus (*stmt_p, stmt_locus);\n+  SET_EXPR_LOCATION (*stmt_p, stmt_locus);\n   gimplify_stmt (stmt_p);\n \n   *stmt_p = finish_bc_block (break_block, *stmt_p);"}, {"sha": "79081232eb558651ef96dbf026231fdcef8225a5", "filename": "gcc/c-lex.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -197,11 +197,15 @@ cb_line_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const cpp_token *token,\n \t\tint parsing_args)\n {\n   if (token->type != CPP_EOF && !parsing_args)\n+#ifdef USE_MAPPED_LOCATION\n+    input_location = token->src_loc;\n+#else\n     {\n       source_location loc = token->src_loc;\n       const struct line_map *map = linemap_lookup (&line_table, loc);\n       input_line = SOURCE_LINE (map, loc);\n     }\n+#endif\n }\n \n void\n@@ -216,10 +220,17 @@ fe_file_change (const struct line_map *new_map)\n \t we already did in compile_file.  */\n       if (! MAIN_FILE_P (new_map))\n \t{\n+#ifdef USE_MAPPED_LOCATION\n+          int included_at = LAST_SOURCE_LINE_LOCATION (new_map - 1);\n+\n+\t  input_location = included_at;\n+\t  push_srcloc (new_map->start_location);\n+#else\n           int included_at = LAST_SOURCE_LINE (new_map - 1);\n \n \t  input_line = included_at;\n \t  push_srcloc (new_map->to_file, 1);\n+#endif\n \t  (*debug_hooks->start_source_file) (included_at, new_map->to_file);\n #ifndef NO_IMPLICIT_EXTERN_C\n \t  if (c_header_level)\n@@ -249,8 +260,12 @@ fe_file_change (const struct line_map *new_map)\n \n   update_header_times (new_map->to_file);\n   in_system_header = new_map->sysp != 0;\n+#ifdef USE_MAPPED_LOCATION\n+  input_location = new_map->start_location;\n+#else\n   input_filename = new_map->to_file;\n   input_line = new_map->to_line;\n+#endif\n \n   /* Hook for C++.  */\n   extract_interface_info ();\n@@ -264,7 +279,9 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n      -Wunknown-pragmas has been given.  */\n   if (warn_unknown_pragmas > in_system_header)\n     {\n+#ifndef USE_MAPPED_LOCATION\n       const struct line_map *map = linemap_lookup (&line_table, loc);\n+#endif\n       const unsigned char *space, *name;\n       const cpp_token *s;\n \n@@ -278,7 +295,11 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n \t    name = cpp_token_as_text (pfile, s);\n \t}\n \n+#ifdef USE_MAPPED_LOCATION\n+      input_location = loc;\n+#else\n       input_line = SOURCE_LINE (map, loc);\n+#endif\n       warning (\"ignoring #pragma %s %s\", space, name);\n     }\n }"}, {"sha": "6ae668b1a6c9de89e3836cefa5f4422118893bf2", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -51,8 +51,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define TARGET_OPTF(ARG)\n #endif\n \n-static int saved_lineno;\n-\n /* CPP's options.  */\n static cpp_options *cpp_opts;\n \n@@ -998,16 +996,15 @@ c_common_post_options (const char **pfilename)\n       init_c_lex ();\n \n       /* Yuk.  WTF is this?  I do know ObjC relies on it somewhere.  */\n-      input_line = 0;\n+      input_location = UNKNOWN_LOCATION;\n     }\n \n   cb = cpp_get_callbacks (parse_in);\n   cb->file_change = cb_file_change;\n   cb->dir_change = cb_dir_change;\n   cpp_post_options (parse_in);\n \n-  saved_lineno = input_line;\n-  input_line = 0;\n+  input_location = UNKNOWN_LOCATION;\n \n   /* If an error has occurred in cpplib, note it so we fail\n      immediately.  */\n@@ -1033,8 +1030,6 @@ c_common_post_options (const char **pfilename)\n bool\n c_common_init (void)\n {\n-  input_line = saved_lineno;\n-\n   /* Set up preprocessor arithmetic.  Must be done after call to\n      c_common_nodes_and_builtins for type nodes to be good.  */\n   cpp_opts->precision = TYPE_PRECISION (intmax_type_node);"}, {"sha": "76747b333dca447a9dd0b2da533da4e131d3d17e", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -6315,7 +6315,7 @@ init_function_start (tree subr)\n      function.  Also tell final how to output a linenum before the\n      function prologue.  Note linenums could be missing, e.g. when\n      compiling a Java .class file.  */\n-  if (DECL_SOURCE_LINE (subr))\n+  if (! DECL_IS_BUILTIN (subr))\n     emit_line_note (DECL_SOURCE_LOCATION (subr));\n \n   /* Make sure first insn is a note even if we don't want linenums."}, {"sha": "2f0397ca59c3b8a64590a3d3cefaed066a563e54", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c20847b8301eb9aa407ee8273b6e738e7067ee0/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=3c20847b8301eb9aa407ee8273b6e738e7067ee0", "patch": "@@ -156,7 +156,7 @@ xcoff_assign_fundamental_type_number (tree decl)\n   size_t i;\n \n   /* Do not waste time searching the list for non-intrinsic types.  */\n-  if (DECL_NAME (decl) == 0 || DECL_SOURCE_LINE (decl) > 0)\n+  if (DECL_NAME (decl) == 0 || ! DECL_IS_BUILTIN (decl))\n     return 0;\n \n   name = IDENTIFIER_POINTER (DECL_NAME (decl));"}]}