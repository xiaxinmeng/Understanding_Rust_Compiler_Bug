{"sha": "7a096965f668c1d2129c70c92e2398227b97eee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwOTY5NjVmNjY4YzFkMjEyOWM3MGM5MmUyMzk4MjI3Yjk3ZWVlNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-10T09:31:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-10T09:31:51Z"}, "message": "Strip only selected predictors after early tree passes (PR tree-optimization/85799).\n\n2018-08-10  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/85799\n\t* passes.def: Add argument for pass_strip_predict_hints.\n\t* predict.c (class pass_strip_predict_hints): Add new argument\n        early_p.\n\t(strip_predictor_early): New function.\n\t(pass_strip_predict_hints::execute): Call the function to\n        strip predictors.\n\t(strip_predict_hints): New function.\n\t* predict.def: Fix comment.\n2018-08-10  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/85799\n\t* gcc.dg/pr85799.c: New test.\n\nFrom-SVN: r263465", "tree": {"sha": "369110415b7ecc35cb7caa2b7a109551fb79b3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369110415b7ecc35cb7caa2b7a109551fb79b3ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a096965f668c1d2129c70c92e2398227b97eee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a096965f668c1d2129c70c92e2398227b97eee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a096965f668c1d2129c70c92e2398227b97eee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a096965f668c1d2129c70c92e2398227b97eee6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d568f0b6dbee4079cf19412330a0bbb959d530cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d568f0b6dbee4079cf19412330a0bbb959d530cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d568f0b6dbee4079cf19412330a0bbb959d530cf"}], "stats": {"total": 144, "additions": 109, "deletions": 35}, "files": [{"sha": "5edaf2414b6101b2eba13b97c9cf1c3e2cd1236d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -1,3 +1,15 @@\n+2018-08-10  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/85799\n+\t* passes.def: Add argument for pass_strip_predict_hints.\n+\t* predict.c (class pass_strip_predict_hints): Add new argument\n+        early_p.\n+\t(strip_predictor_early): New function.\n+\t(pass_strip_predict_hints::execute): Call the function to\n+        strip predictors.\n+\t(strip_predict_hints): New function.\n+\t* predict.def: Fix comment.\n+\n 2018-08-10  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n \n \t* Makefile.in: Clarify which tm.texi to copy over to assert the"}, {"sha": "7f4b3479a35f99879e887d574acffb96b02fe5f9", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -98,7 +98,7 @@ along with GCC; see the file COPYING3.  If not see\n \t     early optimizations again.  It is thus good idea to do this\n \t      late.  */\n \t  NEXT_PASS (pass_split_functions);\n-\t  NEXT_PASS (pass_strip_predict_hints);\n+\t  NEXT_PASS (pass_strip_predict_hints, true /* early_p */);\n       POP_INSERT_PASSES ()\n       NEXT_PASS (pass_release_ssa_names);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n@@ -183,7 +183,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_remove_cgraph_callee_edges);\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n-      NEXT_PASS (pass_strip_predict_hints);\n+      NEXT_PASS (pass_strip_predict_hints, false /* early_p */);\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       NEXT_PASS (pass_post_ipa_warn);\n       /* After CCP we rewrite no longer addressed locals into SSA\n@@ -348,7 +348,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_all_optimizations_g);\n   PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations_g)\n       NEXT_PASS (pass_remove_cgraph_callee_edges);\n-      NEXT_PASS (pass_strip_predict_hints);\n+      NEXT_PASS (pass_strip_predict_hints, false /* early_p */);\n       /* Lower remaining pieces of GIMPLE.  */\n       NEXT_PASS (pass_lower_complex);\n       NEXT_PASS (pass_lower_vector_ssa);"}, {"sha": "abbafdae74ac8c4232457462434dcdf9c7be14cd", "filename": "gcc/predict.c", "status": "modified", "additions": 69, "deletions": 31, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -3884,38 +3884,28 @@ make_pass_profile (gcc::context *ctxt)\n   return new pass_profile (ctxt);\n }\n \n-namespace {\n+/* Return true when PRED predictor should be removed after early\n+   tree passes.  Most of the predictors are beneficial to survive\n+   as early inlining can also distribute then into caller's bodies.  */\n \n-const pass_data pass_data_strip_predict_hints =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"*strip_predict_hints\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_BRANCH_PROB, /* tv_id */\n-  PROP_cfg, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_strip_predict_hints : public gimple_opt_pass\n+static bool\n+strip_predictor_early (enum br_predictor pred)\n {\n-public:\n-  pass_strip_predict_hints (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_strip_predict_hints, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_strip_predict_hints (m_ctxt); }\n-  virtual unsigned int execute (function *);\n-\n-}; // class pass_strip_predict_hints\n+  switch (pred)\n+    {\n+    case PRED_TREE_EARLY_RETURN:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n \n /* Get rid of all builtin_expect calls and GIMPLE_PREDICT statements\n-   we no longer need.  */\n+   we no longer need.  EARLY is set to true when called from early\n+   optimizations.  */\n+\n unsigned int\n-pass_strip_predict_hints::execute (function *fun)\n+strip_predict_hints (function *fun, bool early)\n {\n   basic_block bb;\n   gimple *ass_stmt;\n@@ -3931,15 +3921,20 @@ pass_strip_predict_hints::execute (function *fun)\n \n \t  if (gimple_code (stmt) == GIMPLE_PREDICT)\n \t    {\n-\t      gsi_remove (&bi, true);\n-\t      changed = true;\n-\t      continue;\n+\t      if (!early\n+\t\t  || strip_predictor_early (gimple_predict_predictor (stmt)))\n+\t\t{\n+\t\t  gsi_remove (&bi, true);\n+\t\t  changed = true;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  else if (is_gimple_call (stmt))\n \t    {\n \t      tree fndecl = gimple_call_fndecl (stmt);\n \n-\t      if ((fndecl\n+\t      if ((!early\n+\t\t   && fndecl\n \t\t   && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n \t\t   && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n \t\t   && gimple_call_num_args (stmt) == 2)\n@@ -3967,6 +3962,49 @@ pass_strip_predict_hints::execute (function *fun)\n   return changed ? TODO_cleanup_cfg : 0;\n }\n \n+namespace {\n+\n+const pass_data pass_data_strip_predict_hints =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"*strip_predict_hints\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_BRANCH_PROB, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_strip_predict_hints : public gimple_opt_pass\n+{\n+public:\n+  pass_strip_predict_hints (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_strip_predict_hints, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_strip_predict_hints (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      early_p = param;\n+    }\n+\n+  virtual unsigned int execute (function *);\n+\n+private:\n+  bool early_p;\n+\n+}; // class pass_strip_predict_hints\n+\n+unsigned int\n+pass_strip_predict_hints::execute (function *fun)\n+{\n+  return strip_predict_hints (fun, early_p);\n+}\n+\n } // anon namespace\n \n gimple_opt_pass *"}, {"sha": "c0709aa6473c46f497008abaa4106d59029966df", "filename": "gcc/predict.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n      DEF_PREDICTOR (ENUM, NAME, HITRATE)\n \n    This macro will be called once for each predictor.  The ENUM will\n-   be of type `enum predictor', and will enumerate all supported\n+   be of type `enum br_predictor', and will enumerate all supported\n    predictors.  The order of DEF_PREDICTOR calls is important, as\n    in the first match combining heuristics, the predictor appearing\n    first in this file will win."}, {"sha": "8a2ed682f651d301f0d4cf2d4a5c7f82a6d04c85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -1,3 +1,8 @@\n+2018-08-10  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/85799\n+\t* gcc.dg/pr85799.c: New test.\n+\n 2018-08-09  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/86897"}, {"sha": "0e937857e297fd6baa8c1658c469afae9d404531", "filename": "gcc/testsuite/gcc.dg/pr85799.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85799.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a096965f668c1d2129c70c92e2398227b97eee6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85799.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85799.c?ref=7a096965f668c1d2129c70c92e2398227b97eee6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+void unlikely();\n+void likely();\n+\n+inline int expect_false(int b) {\n+    return __builtin_expect(b, 0);\n+}\n+\n+void inline_func_hint(int b) {\n+    if (expect_false(b)) {\n+        unlikely();\n+    } else {\n+        likely();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"_builtin_expect heuristics of edge\" \"profile_estimate\"} } */"}]}