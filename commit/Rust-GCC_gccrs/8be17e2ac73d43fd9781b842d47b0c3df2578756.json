{"sha": "8be17e2ac73d43fd9781b842d47b0c3df2578756", "node_id": "C_kwDOANBUbNoAKDhiZTE3ZTJhYzczZDQzZmQ5NzgxYjg0MmQ0N2IwYzNkZjI1Nzg3NTY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-07T11:27:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-12T08:13:45Z"}, "message": "libstdc++: Prefer const T to std::add_const_t<T>\n\nFor any typedef-name or template parameter, T, add_const_t<T> is\nequivalent to T const, so we can avoid instantiating the std::add_const\nclass template and just say T const (or const T).\n\nThis isn't true for a non-typedef like int&, where int& const would be\nill-formed, but we shouldn't be using add_const_t<int&> anyway, because\nwe know what that type is.\n\nThe only place we need to continue using std::add_const is in the\nstd::bind implementation where it's used as a template template\nparameter to be applied as a metafunction elsewhere.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (__iter_to_alloc_t): Replace\n\tadd_const_t with const-qualifier.\n\t* include/bits/utility.h (tuple_element<N, cv T>): Likewise for\n\tall cv-qualifiers.\n\t* include/std/type_traits (add_const, add_volatile): Replace\n\ttypedef-declaration with using-declaration.\n\t(add_cv): Replace add_const and add_volatile with cv-qualifiers.\n\t* include/std/variant (variant_alternative<N, cv T>): Replace\n\tadd_const_t, add_volatile_t and add_cv_t etc. with cv-qualifiers.", "tree": {"sha": "4393636500113baf69a570e1ba7bb65b15b96c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4393636500113baf69a570e1ba7bb65b15b96c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be17e2ac73d43fd9781b842d47b0c3df2578756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be17e2ac73d43fd9781b842d47b0c3df2578756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be17e2ac73d43fd9781b842d47b0c3df2578756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be17e2ac73d43fd9781b842d47b0c3df2578756/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3723aedaad20a129741c2f6f3c22b3dd1220a3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3723aedaad20a129741c2f6f3c22b3dd1220a3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3723aedaad20a129741c2f6f3c22b3dd1220a3fc"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "049cb02a4c40f5fdc612c721a5f03c5741844627", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=8be17e2ac73d43fd9781b842d47b0c3df2578756", "patch": "@@ -2536,19 +2536,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // of associative containers.\n   template<typename _InputIterator>\n     using __iter_key_t = remove_const_t<\n-    typename iterator_traits<_InputIterator>::value_type::first_type>;\n+      typename iterator_traits<_InputIterator>::value_type::first_type>;\n \n   template<typename _InputIterator>\n-    using __iter_val_t =\n-    typename iterator_traits<_InputIterator>::value_type::second_type;\n+    using __iter_val_t\n+      = typename iterator_traits<_InputIterator>::value_type::second_type;\n \n   template<typename _T1, typename _T2>\n     struct pair;\n \n   template<typename _InputIterator>\n-    using __iter_to_alloc_t =\n-    pair<add_const_t<__iter_key_t<_InputIterator>>,\n-\t __iter_val_t<_InputIterator>>;\n+    using __iter_to_alloc_t\n+      = pair<const __iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>>;\n #endif // __cpp_deduction_guides\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "6a192e278366132a90547e1e583348235710d244", "filename": "libstdc++-v3/include/bits/utility.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h?ref=8be17e2ac73d43fd9781b842d47b0c3df2578756", "patch": "@@ -86,19 +86,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<size_t __i, typename _Tp>\n     struct tuple_element<__i, const _Tp>\n     {\n-      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n+      using type = const __tuple_element_t<__i, _Tp>;\n     };\n \n   template<size_t __i, typename _Tp>\n     struct tuple_element<__i, volatile _Tp>\n     {\n-      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n+      using type = volatile __tuple_element_t<__i, _Tp>;\n     };\n \n   template<size_t __i, typename _Tp>\n     struct tuple_element<__i, const volatile _Tp>\n     {\n-      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n+      using type = const volatile __tuple_element_t<__i, _Tp>;\n     };\n \n #if __cplusplus >= 201402L"}, {"sha": "e5f58bc2e3fab140e71c0537c6c8d7d0ec8f8de6", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=8be17e2ac73d43fd9781b842d47b0c3df2578756", "patch": "@@ -1577,20 +1577,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// add_const\n   template<typename _Tp>\n     struct add_const\n-    { typedef _Tp const     type; };\n+    { using type = _Tp const; };\n \n   /// add_volatile\n   template<typename _Tp>\n     struct add_volatile\n-    { typedef _Tp volatile     type; };\n+    { using type = _Tp volatile; };\n \n   /// add_cv\n   template<typename _Tp>\n     struct add_cv\n-    {\n-      typedef typename\n-      add_const<typename add_volatile<_Tp>::type>::type     type;\n-    };\n+    { using type = _Tp const volatile; };\n \n #if __cplusplus > 201103L\n "}, {"sha": "f8f15665433b9e799c557699eb4c8ab82e605ada", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be17e2ac73d43fd9781b842d47b0c3df2578756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=8be17e2ac73d43fd9781b842d47b0c3df2578756", "patch": "@@ -107,15 +107,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<size_t _Np, typename _Variant>\n     struct variant_alternative<_Np, const _Variant>\n-    { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };\n+    { using type = const variant_alternative_t<_Np, _Variant>; };\n \n   template<size_t _Np, typename _Variant>\n     struct variant_alternative<_Np, volatile _Variant>\n-    { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };\n+    { using type = volatile variant_alternative_t<_Np, _Variant>; };\n \n   template<size_t _Np, typename _Variant>\n     struct variant_alternative<_Np, const volatile _Variant>\n-    { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };\n+    { using type = const volatile variant_alternative_t<_Np, _Variant>; };\n \n   inline constexpr size_t variant_npos = -1;\n "}]}