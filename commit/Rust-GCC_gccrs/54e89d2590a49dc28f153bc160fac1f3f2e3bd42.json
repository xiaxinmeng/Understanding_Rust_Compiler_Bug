{"sha": "54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlODlkMjU5MGE0OWRjMjhmMTUzYmMxNjBmYWMxZjNmMmUzYmQ0Mg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-08-24T17:03:34Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-08-24T17:03:34Z"}, "message": "reload1.c (reload_cse_regs_1): When deleting a no-op move that loads the function result, substitute with a USE.\n\n\t* reload1.c (reload_cse_regs_1): When deleting a no-op move that\n\tloads the function result, substitute with a USE.\n\nFrom-SVN: r21951", "tree": {"sha": "7c83d9259d757a2c220a5eb846b3e081f1aaeaad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c83d9259d757a2c220a5eb846b3e081f1aaeaad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e89d2590a49dc28f153bc160fac1f3f2e3bd42/comments", "author": null, "committer": null, "parents": [{"sha": "cce2be438d67e6514c60ce887d0142c9b32dc407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce2be438d67e6514c60ce887d0142c9b32dc407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce2be438d67e6514c60ce887d0142c9b32dc407"}], "stats": {"total": 67, "additions": 57, "deletions": 10}, "files": [{"sha": "0cc7a236dabbc6c98442c8c31c48bf925d2e98bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e89d2590a49dc28f153bc160fac1f3f2e3bd42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e89d2590a49dc28f153bc160fac1f3f2e3bd42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "patch": "@@ -1,3 +1,8 @@\n+Tue Aug 25 00:57:54 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (reload_cse_regs_1): When deleting a no-op move that\n+\tloads the function result, substitute with a USE.\n+\n Mon Aug 24 15:20:19 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* rs6000.h (GO_IF_LEGITIMATE_ADDRESS): Use TARGET_POWERPC64"}, {"sha": "346fbcc201f35b55e5b58cfcbf3352b2cd2887ae", "filename": "gcc/reload1.c", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e89d2590a49dc28f153bc160fac1f3f2e3bd42/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e89d2590a49dc28f153bc160fac1f3f2e3bd42/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=54e89d2590a49dc28f153bc160fac1f3f2e3bd42", "patch": "@@ -8290,9 +8290,27 @@ reload_cse_regs (first)\n \t  int count = 0;\n \t  if (reload_cse_noop_set_p (body, insn))\n \t    {\n-\t      PUT_CODE (insn, NOTE);\n-\t      NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-\t      NOTE_SOURCE_FILE (insn) = 0;\n+\t      /* If this sets the return value of the function, we must keep\n+\t\t a USE around, in case this is in a different basic block\n+\t\t than the final USE.  Otherwise, we could loose important\n+\t\t register lifeness information on SMALL_REGISTER_CLASSES\n+\t\t machines, where return registers might be used as spills:\n+\t\t subsequent passes assume that spill registers are dead at\n+\t\t the end of a basic block.  */\n+\t      if (REG_FUNCTION_VALUE_P (SET_DEST (body)))\n+\t\t{\n+\t\t  pop_obstacks ();\n+\t\t  PATTERN (insn) = gen_rtx_USE (VOIDmode, SET_DEST (body));\n+\t\t  INSN_CODE (insn) = -1;\n+\t\t  REG_NOTES (insn) = NULL_RTX;\n+\t\t  push_obstacks (&reload_obstack, &reload_obstack);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  PUT_CODE (insn, NOTE);\n+\t\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n+\t\t  NOTE_SOURCE_FILE (insn) = 0;\n+\t\t}\n \t      reload_cse_delete_death_notes (insn);\n \n \t      /* We're done with this insn.  */\n@@ -8313,19 +8331,43 @@ reload_cse_regs (first)\n       else if (GET_CODE (body) == PARALLEL)\n \t{\n \t  int count = 0;\n+\t  rtx value = NULL_RTX;\n \n \t  /* If every action in a PARALLEL is a noop, we can delete\n              the entire PARALLEL.  */\n \t  for (i = XVECLEN (body, 0) - 1; i >= 0; --i)\n-\t    if ((GET_CODE (XVECEXP (body, 0, i)) != SET\n-\t\t || ! reload_cse_noop_set_p (XVECEXP (body, 0, i), insn))\n-\t\t&& GET_CODE (XVECEXP (body, 0, i)) != CLOBBER)\n-\t      break;\n+\t    {\n+\t      rtx part = XVECEXP (body, 0, i);\n+\t      if (GET_CODE (part) == SET)\n+\t\t{\n+\t\t  if (! reload_cse_noop_set_p (part, insn))\n+\t\t    break;\n+\t\t  if (REG_FUNCTION_VALUE_P (SET_DEST (part)))\n+\t\t    {\n+\t\t      if (value)\n+\t\t\tbreak;\n+\t\t      value = SET_DEST (part);\n+\t\t    }\n+\t\t}\n+\t      else if (GET_CODE (part) != CLOBBER)\n+\t\tbreak;\n+\t    }\n \t  if (i < 0)\n \t    {\n-\t      PUT_CODE (insn, NOTE);\n-\t      NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n-\t      NOTE_SOURCE_FILE (insn) = 0;\n+\t      if (value)\n+\t\t{\n+\t\t  pop_obstacks ();\n+\t\t  PATTERN (insn) = gen_rtx_USE (VOIDmode, value);\n+\t\t  INSN_CODE (insn) = -1;\n+\t\t  REG_NOTES (insn) = NULL_RTX;\n+\t\t  push_obstacks (&reload_obstack, &reload_obstack);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  PUT_CODE (insn, NOTE);\n+\t\t  NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED;\n+\t\t  NOTE_SOURCE_FILE (insn) = 0;\n+\t\t}\n \t      reload_cse_delete_death_notes (insn);\n \n \t      /* We're done with this insn.  */"}]}