{"sha": "ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5MzM1ZWI2N2JiODE3Y2Y2NTBmNDQ4OWFhMGI3YTllZjg2YzQ4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-08-07T21:05:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-08-07T21:05:16Z"}, "message": "stor-layout.c (place_union_field): Apply ADJUST_FIELD_ALIGN to type_align when PCC_BITFIELD_TYPE_MATTERS.\n\n\t* stor-layout.c (place_union_field): Apply ADJUST_FIELD_ALIGN\n\tto type_align when PCC_BITFIELD_TYPE_MATTERS.  Only apply\n\tADJUST_FIELD_ALIGN if not DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n\t(place_field): Likewise.\n\t* config/i386/i386.c (x86_field_alignment): Don't check\n\tDECL_USER_ALIGN here.\n\t* config/rs6000/rs6000.c (rs6000_field_alignment): New.\n\t* config/rs6000/rs6000-protos.h (rs6000_field_alignment): New\n\tprototype.\n\t* config/rs6000/rs6000.h (ADJUST_FIELD_ALIGN): Define.\n\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Remove.\n\t* config/rs6000/darwin.h (ADJUST_FIELD_ALIGN): Remove.\n\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Remove.\n\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Remove.\n\t* doc/tm.texi (ADJUST_FIELD_ALIGN): Update description.\n\n\t* gcc.dg/i386-bitfield1.c: New test.\n\t* g++.dg/abi/bitfield3.C: Update.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r56107", "tree": {"sha": "7249cbfca426d8f5536a573cc0ed13427c382e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7249cbfca426d8f5536a573cc0ed13427c382e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65b91091db74266fde6648243bcd839d65101314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b91091db74266fde6648243bcd839d65101314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b91091db74266fde6648243bcd839d65101314"}], "stats": {"total": 201, "additions": 151, "deletions": 50}, "files": [{"sha": "3490b504781ac5189c4ca6d89b6c2ca4f6ddb628", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -1,3 +1,22 @@\n+2002-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* stor-layout.c (place_union_field): Apply ADJUST_FIELD_ALIGN\n+\tto type_align when PCC_BITFIELD_TYPE_MATTERS.  Only apply\n+\tADJUST_FIELD_ALIGN if not DECL_USER_ALIGN resp. TYPE_USER_ALIGN.\n+\t(place_field): Likewise.\n+\t* config/i386/i386.c (x86_field_alignment): Don't check\n+\tDECL_USER_ALIGN here.\n+\t* config/rs6000/rs6000.c (rs6000_field_alignment): New.\n+\t* config/rs6000/rs6000-protos.h (rs6000_field_alignment): New\n+\tprototype.\n+\t* config/rs6000/rs6000.h (ADJUST_FIELD_ALIGN): Define.\n+\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Remove.\n+\t* config/rs6000/darwin.h (ADJUST_FIELD_ALIGN): Remove.\n+\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Remove.\n+\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Remove.\n+\t* doc/tm.texi (ADJUST_FIELD_ALIGN): Update description.\n+\n 2002-08-07  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Makefile.in (c-opts.o, c-common.o, C_AND_OBJC_OBJS): Update."}, {"sha": "5ef4e7637c6c274cfa74103bcad06e6f613c8f71", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -13818,10 +13818,12 @@ x86_field_alignment (field, computed)\n      int computed;\n {\n   enum machine_mode mode;\n-  if (TARGET_64BIT || DECL_USER_ALIGN (field) || TARGET_ALIGN_DOUBLE)\n+  tree type = TREE_TYPE (field);\n+\n+  if (TARGET_64BIT || TARGET_ALIGN_DOUBLE)\n     return computed;\n-  mode = TYPE_MODE (TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE\n-\t\t    ? get_inner_array_type (field) : TREE_TYPE (field));\n+  mode = TYPE_MODE (TREE_CODE (type) == ARRAY_TYPE\n+\t\t    ? get_inner_array_type (type) : type);\n   if (mode == DFmode || mode == DCmode\n       || GET_MODE_CLASS (mode) == MODE_INT\n       || GET_MODE_CLASS (mode) == MODE_COMPLEX_INT)"}, {"sha": "b639025c9cbd9dabbe752902f4ab279389289362", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -111,13 +111,6 @@ Boston, MA 02111-1307, USA.  */\n #define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n %{p:-L/lib/profiled -L/usr/lib/profiled} %{!shared:%{g*:-lg}} -lc\"\n \n-/* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n-\t      ? get_inner_array_type (FIELD) \\\n-\t      : TREE_TYPE (FIELD)) == DFmode \\\n-   ? MIN ((COMPUTED), 32) : (COMPUTED))\n-\n /* AIX increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */\n #define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\\"}, {"sha": "6b6ca11dddbb08ccc4540b561e63f155c79da08f", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -196,13 +196,6 @@ Boston, MA 02111-1307, USA.  */\n /* Fix for emit_group_load (): force large constants to be pushed via regs.  */\n #define ALWAYS_PUSH_CONSTS_USING_REGS_P\t\t1\n \n-/* Darwin word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n-\t      ? get_inner_array_type (FIELD) \\\n-\t      : TREE_TYPE (FIELD)) == DFmode \\\n-   ? MIN ((COMPUTED), 32) : (COMPUTED))\n-\n /* Darwin increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */\n #define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\\"}, {"sha": "1d9b1a1d9f0d6e2a791bc36d6accb501923bb49c", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -72,13 +72,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define USER_LABEL_PREFIX  \"\"\n \n-/* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n-\t      ? get_inner_array_type (FIELD) \\\n-\t      : TREE_TYPE (FIELD)) == DFmode \\\n-   ? MIN ((COMPUTED), 32) : (COMPUTED))\n-\n /* AIX increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */\n #undef ROUND_TYPE_ALIGN"}, {"sha": "3725c7fe9da304533fa74b346693edb2f92178a8", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -151,6 +151,7 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern int rs6000_field_alignment PARAMS ((tree, int));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));"}, {"sha": "382f47bc22418fc3503037eca4969cf833240d46", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -13115,3 +13115,24 @@ rs6000_xcoff_encode_section_info (decl, first)\n       && ! DECL_WEAK (decl))\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+\n+int\n+rs6000_field_alignment (field, computed)\n+     tree field;\n+     int computed;\n+{\n+  tree type = get_inner_array_type (field);\n+\n+  if (DEFAULT_ABI == ABI_V4)\n+    {\n+      if (TARGET_ALTIVEC && TREE_CODE (type) == VECTOR_TYPE)\n+\treturn 128;\n+    }\n+  else\n+    {\n+      if (TYPE_MODE (type) == DFmode)\n+\treturn MIN (32, computed);\n+    }\n+\n+  return computed;\n+}"}, {"sha": "a502d525d4c07e7b7853253e483939f2f04bedc9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -631,6 +631,10 @@ extern int rs6000_default_long_calls;\n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n+/* Most ABIs word-align FP doubles but doubleword-align 64-bit ints.  */\n+#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n+  rs6000_field_alignment ((FIELD), (COMPUTED))\n+\n /* Make strings word-aligned so strcpy from constants will be faster.\n    Make vector constants quadword aligned.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN)                           \\"}, {"sha": "24a5c9c5d7bb291f8113f7686b367262b6319f6e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -380,12 +380,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Real stack boundary as mandated by the appropriate ABI.  */\n #define ABI_STACK_BOUNDARY ((TARGET_EABI && !TARGET_ALTIVEC_ABI) ? 64 : 128)\n \n-/* An expression for the alignment of a structure field FIELD if the\n-   alignment computed in the usual way is COMPUTED.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED)\t\t\t\t      \\\n-\t((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)     \\\n-\t ? 128 : COMPUTED)\n-\n /* Define this macro as an expression for the alignment of a type\n    (given by TYPE as a tree node) if the alignment computed in the\n    usual way is COMPUTED and the alignment explicitly specified was\n@@ -396,7 +390,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n          : MAX (COMPUTED, SPECIFIED))\n \n #undef  BIGGEST_FIELD_ALIGNMENT\n-#undef  ADJUST_FIELD_ALIGN\n \n /* Use ELF style section commands.  */\n "}, {"sha": "d13b53ee4a4470e104786c74529685775c2f199d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -1068,9 +1068,11 @@ by the @code{__attribute__ ((aligned (@var{n})))} construct.\n @findex ADJUST_FIELD_ALIGN\n @item ADJUST_FIELD_ALIGN (@var{field}, @var{computed})\n An expression for the alignment of a structure field @var{field} if the\n-alignment computed in the usual way is @var{computed}.  GCC uses\n-this value instead of the value in @code{BIGGEST_ALIGNMENT} or\n-@code{BIGGEST_FIELD_ALIGNMENT}, if defined.\n+alignment computed in the usual way (including applying of\n+@code{BIGGEST_ALIGNMENT} and @code{BIGGEST_FIELD_ALIGNMENT} to the\n+alignment) is @var{computed}.  It overrides alignment only if the\n+field alignment has not been set by the\n+@code{__attribute__ ((aligned (@var{n})))} construct.\n \n @findex MAX_OFILE_ALIGNMENT\n @item MAX_OFILE_ALIGNMENT"}, {"sha": "5a4041e5af0ed94608915c267616c2559d176c66", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -671,7 +671,8 @@ place_union_field (rli, field)\n #endif\n \n #ifdef ADJUST_FIELD_ALIGN\n-  desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n+  if (! DECL_USER_ALIGN (field))\n+    desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n #endif\n \n   TYPE_USER_ALIGN (rli->t) |= DECL_USER_ALIGN (field);\n@@ -685,10 +686,14 @@ place_union_field (rli, field)\n      entire union to have `int' alignment.  */\n   if (PCC_BITFIELD_TYPE_MATTERS && DECL_BIT_FIELD_TYPE (field))\n     {\n-      rli->record_align = MAX (rli->record_align,\n-\t\t\t       TYPE_ALIGN (TREE_TYPE (field)));\n-      rli->unpadded_align = MAX (rli->unpadded_align,\n-\t\t\t\t TYPE_ALIGN (TREE_TYPE (field)));\n+      unsigned int type_align = TYPE_ALIGN (TREE_TYPE (field));\n+\n+#ifdef ADJUST_FIELD_ALIGN\n+      if (! TYPE_USER_ALIGN (TREE_TYPE (field)))\n+\ttype_align = ADJUST_FIELD_ALIGN (field, type_align);\n+#endif\n+      rli->record_align = MAX (rli->record_align, type_align);\n+      rli->unpadded_align = MAX (rli->unpadded_align, type_align);\n     }\n #endif\n \n@@ -785,7 +790,8 @@ place_field (rli, field)\n #endif\n \n #ifdef ADJUST_FIELD_ALIGN\n-  desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n+  if (! user_align)\n+    desired_align = ADJUST_FIELD_ALIGN (field, desired_align);\n #endif\n \n   /* Record must have at least as much alignment as any field.\n@@ -829,6 +835,11 @@ place_field (rli, field)\n \t{\n \t  unsigned int type_align = TYPE_ALIGN (type);\n \n+#ifdef ADJUST_FIELD_ALIGN\n+\t  if (! TYPE_USER_ALIGN (type))\n+\t    type_align = ADJUST_FIELD_ALIGN (field, type_align);\n+#endif\n+\n \t  if (maximum_field_alignment != 0)\n \t    type_align = MIN (type_align, maximum_field_alignment);\n \t  else if (DECL_PACKED (field))\n@@ -917,6 +928,11 @@ place_field (rli, field)\n       HOST_WIDE_INT offset = tree_low_cst (rli->offset, 0);\n       HOST_WIDE_INT bit_offset = tree_low_cst (rli->bitpos, 0);\n \n+#ifdef ADJUST_FIELD_ALIGN\n+      if (! TYPE_USER_ALIGN (type))\n+\ttype_align = ADJUST_FIELD_ALIGN (field, type_align);\n+#endif\n+\n       /* A bit field may not span more units of alignment of its type\n \t than its type itself.  Advance to next boundary if necessary.  */\n       if ((((offset * BITS_PER_UNIT + bit_offset + field_size +\n@@ -946,6 +962,11 @@ place_field (rli, field)\n       HOST_WIDE_INT offset = tree_low_cst (rli->offset, 0);\n       HOST_WIDE_INT bit_offset = tree_low_cst (rli->bitpos, 0);\n \n+#ifdef ADJUST_FIELD_ALIGN\n+      if (! TYPE_USER_ALIGN (type))\n+\ttype_align = ADJUST_FIELD_ALIGN (field, type_align);\n+#endif\n+\n       if (maximum_field_alignment != 0)\n \ttype_align = MIN (type_align, maximum_field_alignment);\n       /* ??? This test is opposite the test in the containing if"}, {"sha": "2438925246bdb78171ebb0db688789e1211faa41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -1,3 +1,9 @@\n+2002-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/i386-bitfield1.c: New test.\n+\t* g++.dg/abi/bitfield3.C: Update.\n+\n 2002-08-07  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* objc.dg/const-str-2.m: Update."}, {"sha": "da7b92fad7f9fa0e9adaaaea843e5e6132ce8271", "filename": "gcc/testsuite/g++.dg/abi/bitfield3.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield3.C?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -56,25 +56,25 @@ int main (void)\n     return 4;\n   if (__alignof__ (b.e) != 4)\n     return 5;\n-  if (&c.i - &c.g != 16)\n+  if (&c.i - &c.g != 12)\n     return 6;\n-  if (sizeof (c) != 24)\n+  if (sizeof (c) != 16)\n     return 7;\n-  if (sizeof (c4) != 4 * 24)\n+  if (sizeof (c4) != 4 * 16)\n     return 8;\n-  if (sizeof (d) != 2 * 8 + 24)\n+  if (sizeof (d) != 2 * 4 + 16)\n     return 9;\n-  if (__alignof__ (d.k) != 8)\n+  if (__alignof__ (d.k) != 4)\n     return 10;\n-  if (&e.o - &e.m != 28)\n+  if (&e.o - &e.m != 24)\n     return 11;\n-  if (sizeof (e) != 32)\n+  if (sizeof (e) != 28)\n     return 12;\n-  if (sizeof (e4) != 4 * 32)\n+  if (sizeof (e4) != 4 * 28)\n     return 13;\n-  if (sizeof (f) != 2 * 8 + 32)\n+  if (sizeof (f) != 2 * 4 + 28)\n     return 14;\n-  if (__alignof__ (f.q) != 8)\n+  if (__alignof__ (f.q) != 4)\n     return 15;\n   return 0;\n }"}, {"sha": "8045a677e6c9220e2d4c423f9328e200185006b7", "filename": "gcc/testsuite/gcc.dg/i386-bitfield1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-bitfield1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9335eb67bb817cf650f4489aa0b7a9ef86c48d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-bitfield1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-bitfield1.c?ref=ad9335eb67bb817cf650f4489aa0b7a9ef86c48d", "patch": "@@ -0,0 +1,53 @@\n+// Test for bitfield alignment in structs on IA-32\n+// { dg-do run { target i?86-*-* } }\n+// { dg-options \"-O2\" }\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A\n+{\n+  char a;\n+  long long b : 61;\n+  char c;\n+} a, a4[4];\n+\n+struct B\n+{\n+  char d;\n+  struct A e;\n+  char f;\n+} b;\n+\n+struct C\n+{\n+  char g;\n+  union U\n+  {\n+    char u1;\n+    long long u2;\n+    long long u3 : 64;\n+  } h;\n+  char i;\n+} c;\n+\n+int main (void)\n+{\n+  if (&a.c - &a.a != 12)\n+    abort ();\n+  if (sizeof (a) != 16)\n+    abort ();\n+  if (sizeof (a4) != 4 * 16)\n+    abort ();\n+  if (sizeof (b) != 2 * 4 + 16)\n+    abort ();\n+  if (__alignof__ (b.e) != 4)\n+    abort ();\n+  if (&c.i - &c.g != 12)\n+    abort ();\n+  if (sizeof (c) != 16)\n+    abort ();\n+  if (__alignof__ (c.h) != 4)\n+    abort ();\n+  exit (0);\n+}"}]}