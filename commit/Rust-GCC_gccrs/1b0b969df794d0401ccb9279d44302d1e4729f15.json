{"sha": "1b0b969df794d0401ccb9279d44302d1e4729f15", "node_id": "C_kwDOANBUbNoAKDFiMGI5NjlkZjc5NGQwNDAxY2NiOTI3OWQ0NDMwMmQxZTQ3MjlmMTU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-26T08:43:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-26T14:29:03Z"}, "message": "libstdc++: Add nonnull to starts_with/ends_with/contains string members\n\nIdeally this wouldn't be needed, because eventually these pointers all\nget passed to either the basic_string_view(const CharT*) constructor, or\nto basic_string_view::find(const CharT*), both of which already have the\nattribute. But for that to work requires optimization, so that the null\nvalue gets propagated through the call chain.\n\nAdding it explicitly to each member that requires a non-null pointer\nmakes the diagnostics more reliable even without optimization. It's\nbetter to give a diagnostic earlier anyway, at the actual problematic\ncall in the user's code.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (starts_with, ends_with, contains):\n\tAdd nonnull attribute.\n\t* include/bits/cow_string.h (starts_with, ends_with, contains):\n\tLikewise.\n\t* include/std/string_view (starts_with, ends_with, contains):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/operations/contains/nonnull.cc\n\t* testsuite/21_strings/basic_string/operations/ends_with/nonnull.cc\n\t* testsuite/21_strings/basic_string/operations/starts_with/nonnull.cc\n\t* testsuite/21_strings/basic_string_view/operations/contains/nonnull.cc\n\t* testsuite/21_strings/basic_string_view/operations/ends_with/nonnull.cc\n\t* testsuite/21_strings/basic_string_view/operations/starts_with/nonnull.cc", "tree": {"sha": "cabdb1b04d535e5768e7531544ba3764c312f1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cabdb1b04d535e5768e7531544ba3764c312f1a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b0b969df794d0401ccb9279d44302d1e4729f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0b969df794d0401ccb9279d44302d1e4729f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0b969df794d0401ccb9279d44302d1e4729f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0b969df794d0401ccb9279d44302d1e4729f15/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad2d3e003f1a9885cb1fa0f67baf50f62d57b06"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "9d8b415302b2fa39e9056a68064296e3103d2a36", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -3400,6 +3400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       starts_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n@@ -3412,6 +3413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       ends_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       ends_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n@@ -3426,6 +3428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       contains(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       contains(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }"}, {"sha": "f5f03338eec272f903d9ad2709a5d491fe4a3511", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -3012,6 +3012,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       starts_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       bool\n       starts_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n@@ -3024,6 +3025,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ends_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       bool\n       ends_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n@@ -3038,6 +3040,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       contains(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n+      [[__gnu__::__nonnull__]]\n       bool\n       contains(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }"}, {"sha": "5b96ffeecd6199000c45f04588d6f028d873af5d", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -360,6 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       starts_with(_CharT __x) const noexcept\n       { return !this->empty() && traits_type::eq(this->front(), __x); }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n       { return this->starts_with(basic_string_view(__x)); }\n@@ -377,6 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ends_with(_CharT __x) const noexcept\n       { return !this->empty() && traits_type::eq(this->back(), __x); }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       ends_with(const _CharT* __x) const noexcept\n       { return this->ends_with(basic_string_view(__x)); }\n@@ -392,6 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       contains(_CharT __x) const noexcept\n       { return this->find(__x) != npos; }\n \n+      [[__gnu__::__nonnull__]]\n       constexpr bool\n       contains(const _CharT* __x) const noexcept\n       { return this->find(__x) != npos; }"}, {"sha": "e987cb7d29776c026b9624400e4c1598046c9864", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/contains/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fcontains%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++23 -Wnonnull -O0\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <string>\n+\n+void\n+test01(const std::string& s)\n+{\n+  s.contains((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.contains((char*)nullptr);\t     // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.contains(nullptr);\t\t     // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "1f2a156bace8976737f26e138bae1097cbcbb4a1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/ends_with/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fends_with%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <string>\n+\n+void\n+test01(const std::string& s)\n+{\n+  s.ends_with((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.ends_with((char*)nullptr);\t      // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.ends_with(nullptr);\t\t      // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "8514359c877e79feade01f071df154f53a1a928d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/starts_with/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fstarts_with%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <string>\n+\n+void\n+test01(const std::string& s)\n+{\n+  s.starts_with((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.starts_with((char*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.starts_with(nullptr);\t\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "c0d274f095ba77e18bfaf7f0ca570986aeb6102f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++23 -Wnonnull -O0\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <string_view>\n+\n+void\n+test01(std::string_view s)\n+{\n+  s.contains((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.contains((char*)nullptr);\t     // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.contains(nullptr);\t\t     // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "09a99978a37604632de64bbebcb72b7a3bd9861e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/ends_with/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fends_with%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <string_view>\n+\n+void\n+test01(std::string_view s)\n+{\n+  s.ends_with((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.ends_with((char*)nullptr);\t      // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.ends_with(nullptr);\t\t      // { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}, {"sha": "c47f1dae832b376b82fb5e63646d4c434b946df4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/starts_with/nonnull.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0b969df794d0401ccb9279d44302d1e4729f15/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fstarts_with%2Fnonnull.cc?ref=1b0b969df794d0401ccb9279d44302d1e4729f15", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++20 -Wnonnull -O0\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <string_view>\n+\n+void\n+test01(std::string_view s)\n+{\n+  s.starts_with((const char*)nullptr);  // { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.starts_with((char*)nullptr);\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n+  s.starts_with(nullptr);\t\t// { dg-warning \"\\\\\\[-Wnonnull\" }\n+}"}]}