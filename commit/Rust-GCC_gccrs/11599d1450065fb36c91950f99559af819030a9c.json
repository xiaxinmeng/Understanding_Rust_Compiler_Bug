{"sha": "11599d1450065fb36c91950f99559af819030a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1OTlkMTQ1MDA2NWZiMzZjOTE5NTBmOTk1NTlhZjgxOTAzMGE5Yw==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2004-03-11T06:45:11Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2004-03-11T06:45:11Z"}, "message": "var-tracking.c (vars_copy_1): Cleanup and speedup chain operations.\n\n\t* var-tracking.c (vars_copy_1): Cleanup and speedup chain operations.\n\t(vars_copy): Likewise.\n\t(variable_union): Likewise.\n\t(set_variable_part): Likewise.\n\t(delete_variable_part): Likewise.\n\nFrom-SVN: r79304", "tree": {"sha": "ca0943c02e17d185b833d5021e693c5b0056921b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca0943c02e17d185b833d5021e693c5b0056921b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11599d1450065fb36c91950f99559af819030a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11599d1450065fb36c91950f99559af819030a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11599d1450065fb36c91950f99559af819030a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11599d1450065fb36c91950f99559af819030a9c/comments", "author": null, "committer": null, "parents": [{"sha": "71cc389ba10ab60c77f39fecc73be3179b6e679a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cc389ba10ab60c77f39fecc73be3179b6e679a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cc389ba10ab60c77f39fecc73be3179b6e679a"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "c1df556d0324d5be171c24aeac003a3023a86613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11599d1450065fb36c91950f99559af819030a9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11599d1450065fb36c91950f99559af819030a9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11599d1450065fb36c91950f99559af819030a9c", "patch": "@@ -1,3 +1,11 @@\n+2004-03-11  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* var-tracking.c (vars_copy_1): Cleanup and speedup chain operations.\n+\t(vars_copy): Likewise.\n+\t(variable_union): Likewise.\n+\t(set_variable_part): Likewise.\n+\t(delete_variable_part): Likewise.\n+\n 2004-03-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-typeck.c, combine.c, cse.c, dominance.c, et-forest.h,"}, {"sha": "5b586bc55aa2fa7f813183e1ef365a9325e1ec3f", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11599d1450065fb36c91950f99559af819030a9c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11599d1450065fb36c91950f99559af819030a9c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=11599d1450065fb36c91950f99559af819030a9c", "patch": "@@ -752,10 +752,11 @@ vars_copy_1 (void **slot, void *data)\n \n   for (i = 0; i < var->n_var_parts; i++)\n     {\n-      location_chain last, node;\n+      location_chain node;\n+      location_chain *nextp;\n \n       var->var_part[i].offset = src->var_part[i].offset;\n-      last = NULL;\n+      nextp = &var->var_part[i].loc_chain;\n       for (node = src->var_part[i].loc_chain; node; node = node->next)\n \t{\n \t  location_chain new_lc;\n@@ -764,11 +765,8 @@ vars_copy_1 (void **slot, void *data)\n \t  new_lc->next = NULL;\n \t  new_lc->loc = node->loc;\n \n-\t  if (last)\n-\t    last->next = new_lc;\n-\t  else\n-\t    var->var_part[i].loc_chain = new_lc;\n-\t  last = new_lc;\n+\t  *nextp = new_lc;\n+\t  nextp = &new_lc->next;\n \t}\n \n       /* We are at the basic block boundary when copying variable description\n@@ -798,33 +796,29 @@ vars_copy (htab_t dst, htab_t src)\n static void\n var_reg_delete_and_set (dataflow_set *set, rtx loc)\n {\n-  attrs *reg = &set->regs[REGNO (loc)];\n   tree decl = REG_EXPR (loc);\n   HOST_WIDE_INT offset = REG_OFFSET (loc);\n-  attrs node, prev, next;\n+  attrs node, next;\n+  attrs *nextp;\n \n-  prev = NULL;\n-  for (node = *reg; node; node = next)\n+  nextp = &set->regs[REGNO (loc)];\n+  for (node = *nextp; node; node = next)\n     {\n       next = node->next;\n       if (node->decl != decl || node->offset != offset)\n \t{\n \t  delete_variable_part (set, node->loc, node->decl, node->offset);\n-\n-\t  if (prev)\n-\t    prev->next = next;\n-\t  else\n-\t    *reg = next;\n \t  pool_free (attrs_pool, node);\n+\t  *nextp = next;\n \t}\n       else\n \t{\n \t  node->loc = loc;\n-\t  prev = node;\n+\t  nextp = &node->next;\n \t}\n     }\n-  if (*reg == NULL)\n-    attrs_list_insert (reg, decl, offset, loc);\n+  if (set->regs[REGNO (loc)] == NULL)\n+    attrs_list_insert (&set->regs[REGNO (loc)], decl, offset, loc);\n   set_variable_part (set, loc, decl, offset);\n }\n \n@@ -1112,9 +1106,10 @@ variable_union (void **slot, void *data)\n \t\t&& src->var_part[i].offset > dst->var_part[j].offset)\n \t       || j < 0)\n \t{\n-\t  location_chain last = NULL;\n+\t  location_chain *nextp;\n \n \t  /* Copy the chain from SRC.  */\n+\t  nextp = &dst->var_part[k].loc_chain;\n \t  for (node = src->var_part[i].loc_chain; node; node = node->next)\n \t    {\n \t      location_chain new_lc;\n@@ -1123,11 +1118,8 @@ variable_union (void **slot, void *data)\n \t      new_lc->next = NULL;\n \t      new_lc->loc = node->loc;\n \n-\t      if (last)\n-\t\tlast->next = new_lc;\n-\t      else\n-\t\tdst->var_part[k].loc_chain = new_lc;\n-\t      last = new_lc;\n+\t      *nextp = new_lc;\n+\t      nextp = &new_lc->next;\n \t    }\n \n \t  dst->var_part[k].offset = src->var_part[i].offset;\n@@ -1863,7 +1855,8 @@ static void\n set_variable_part (dataflow_set *set, rtx loc, tree decl, HOST_WIDE_INT offset)\n {\n   int pos, low, high;\n-  location_chain node, prev, next;\n+  location_chain node, next;\n+  location_chain *nextp;\n   variable var;\n   void **slot;\n   \n@@ -1922,23 +1915,20 @@ set_variable_part (dataflow_set *set, rtx loc, tree decl, HOST_WIDE_INT offset)\n     }\n \n   /* Delete the location from list.  */\n-  prev = NULL;\n+  nextp = &var->var_part[pos].loc_chain;\n   for (node = var->var_part[pos].loc_chain; node; node = next)\n     {\n       next = node->next;\n       if ((GET_CODE (node->loc) == REG && GET_CODE (loc) == REG\n \t   && REGNO (node->loc) == REGNO (loc))\n \t  || rtx_equal_p (node->loc, loc))\n \t{\n-\t  if (prev)\n-\t    prev->next = next;\n-\t  else\n-\t    var->var_part[pos].loc_chain = next;\n \t  pool_free (loc_chain_pool, node);\n+\t  *nextp = next;\n \t  break;\n \t}\n       else\n-\tprev = node;\n+\tnextp = &node->next;\n     }\n \n   /* Add the location to the beginning.  */\n@@ -1987,27 +1977,25 @@ delete_variable_part (dataflow_set *set, rtx loc, tree decl,\n \n       if (pos < var->n_var_parts && var->var_part[pos].offset == offset)\n \t{\n-\t  location_chain node, prev, next;\n+\t  location_chain node, next;\n+\t  location_chain *nextp;\n \t  bool changed;\n \n \t  /* Delete the location part.  */\n-\t  prev = NULL;\n-\t  for (node = var->var_part[pos].loc_chain; node; node = next)\n+\t  nextp = &var->var_part[pos].loc_chain;\n+\t  for (node = *nextp; node; node = next)\n \t    {\n \t      next = node->next;\n \t      if ((GET_CODE (node->loc) == REG && GET_CODE (loc) == REG\n \t\t   && REGNO (node->loc) == REGNO (loc))\n \t\t  || rtx_equal_p (node->loc, loc))\n \t\t{\n-\t\t  if (prev)\n-\t\t    prev->next = next;\n-\t\t  else\n-\t\t    var->var_part[pos].loc_chain = next;\n \t\t  pool_free (loc_chain_pool, node);\n+\t\t  *nextp = next;\n \t\t  break;\n \t\t}\n \t      else\n-\t\tprev = node;\n+\t\tnextp = &node->next;\n \t    }\n \n \t  /* If we have deleted the location which was last emitted"}]}