{"sha": "6deb519753e07d167eda75bced5a7987a57f0a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlYjUxOTc1M2UwN2QxNjdlZGE3NWJjZWQ1YTc5ODdhNTdmMGEwMw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-16T18:28:32Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-16T18:28:32Z"}, "message": "avr.md: (umulqihi3, mulqihi3): Write as one pattern.\n\n\t* config/avr/avr.md: (umulqihi3, mulqihi3): Write as one pattern.\n\t(umulqi3_highpart, smulqi3_highpart): Ditto.\n\t(*maddqihi4.const, *umaddqihi4.uconst): Ditto.\n\t(*msubqihi4.const, *umsubqihi4.uconst): Ditto.\n\t(*muluqihi3.uconst, *mulsqihi3.sconst): Ditto.\n\nFrom-SVN: r178913", "tree": {"sha": "395862fb0fb09b953ec03b9c49d794696034c93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/395862fb0fb09b953ec03b9c49d794696034c93d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6deb519753e07d167eda75bced5a7987a57f0a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6deb519753e07d167eda75bced5a7987a57f0a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6deb519753e07d167eda75bced5a7987a57f0a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6deb519753e07d167eda75bced5a7987a57f0a03/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b65da7dfd8fca8ba99c6af6cdbc4b1a067b8620"}], "stats": {"total": 167, "additions": 52, "deletions": 115}, "files": [{"sha": "ce61c21aa682bc0ad3cdefc7192b634cfc5b33c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6deb519753e07d167eda75bced5a7987a57f0a03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6deb519753e07d167eda75bced5a7987a57f0a03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6deb519753e07d167eda75bced5a7987a57f0a03", "patch": "@@ -1,3 +1,11 @@\n+2011-09-16  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\t* config/avr/avr.md: (umulqihi3, mulqihi3): Write as one pattern.\n+\t(umulqi3_highpart, smulqi3_highpart): Ditto.\n+\t(*maddqihi4.const, *umaddqihi4.uconst): Ditto.\n+\t(*msubqihi4.const, *umsubqihi4.uconst): Ditto.\n+\t(*muluqihi3.uconst, *mulsqihi3.sconst): Ditto.\n+\n 2011-09-16  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50358"}, {"sha": "80bb8f5300d25f47efbede47ad1f11c4a26a1b60", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 44, "deletions": 115, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6deb519753e07d167eda75bced5a7987a57f0a03/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6deb519753e07d167eda75bced5a7987a57f0a03/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=6deb519753e07d167eda75bced5a7987a57f0a03", "patch": "@@ -1027,31 +1027,21 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"smulqi3_highpart\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(truncate:QI\n-         (lshiftrt:HI (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n-                               (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"d\")))\n+;; \"umulqi3_highpart\"\n+;; \"smulqi3_highpart\"\n+(define_insn \"<extend_su>mulqi3_highpart\"\n+  [(set (match_operand:QI 0 \"register_operand\"                                       \"=r\")\n+        (truncate:QI\n+         (lshiftrt:HI (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                               (any_extend:HI (match_operand:QI 2 \"register_operand\" \"<mul_r_d>\")))\n                       (const_int 8))))]\n   \"AVR_HAVE_MUL\"\n-  \"muls %1,%2\n+  \"mul<extend_s> %1,%2\n \tmov %0,r1\n \tclr __zero_reg__\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n   \n-(define_insn \"umulqi3_highpart\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(truncate:QI\n-         (lshiftrt:HI (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-                               (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\")))\n-                      (const_int 8))))]\n-  \"AVR_HAVE_MUL\"\n-  \"mul %1,%2\n-\tmov %0,r1\n-\tclr __zero_reg__\"\n-  [(set_attr \"length\" \"3\")\n-   (set_attr \"cc\" \"clobber\")])\n \n ;; Used when expanding div or mod inline for some special values\n (define_insn \"*subqi3.ashiftrt7\"\n@@ -1064,25 +1054,16 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"mulqihi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n-\t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"d\"))))]\n-  \"AVR_HAVE_MUL\"\n-  \"muls %1,%2\n-\tmovw %0,r0\n-\tclr r1\"\n-  [(set_attr \"length\" \"3\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"umulqihi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+;; \"umulqihi3\"\n+;; \"mulqihi3\"\n+(define_insn \"<extend_u>mulqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n+        (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                 (any_extend:HI (match_operand:QI 2 \"register_operand\" \"<mul_r_d>\"))))]\n   \"AVR_HAVE_MUL\"\n-  \"mul %1,%2\n+  \"mul<extend_s> %1,%2\n \tmovw %0,r0\n-\tclr r1\"\n+\tclr __zero_reg__\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1293,42 +1274,46 @@\n \n ;; Handle small constants\n \n-(define_insn_and_split \"*umaddqihi4.uconst\"\n-  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n-        (plus:HI (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"r\"))\n-                          (match_operand:HI 2 \"u8_operand\"                        \"M\"))\n-                 (match_operand:HI 3 \"register_operand\"                           \"0\")))\n+;; \"umaddqihi4.uconst\"\n+;; \"maddqihi4.sconst\"\n+(define_insn_and_split \"*<extend_u>maddqihi4.<extend_su>const\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (plus:HI (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                          (match_operand:HI 2 \"<extend_su>8_operand\"             \"n\"))\n+                 (match_operand:HI 3 \"register_operand\"                          \"0\")))\n    (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n   \"AVR_HAVE_MUL\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 4)\n         (match_dup 2))\n-   ; *umaddqihi4\n+   ; *umaddqihi4 resp. *maddqihi4\n    (set (match_dup 0)\n-        (plus:HI (mult:HI (zero_extend:HI (match_dup 1))\n-                          (zero_extend:HI (match_dup 4)))\n+        (plus:HI (mult:HI (any_extend:HI (match_dup 1))\n+                          (any_extend:HI (match_dup 4)))\n                  (match_dup 3)))]\n   {\n     operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n   })\n \n-(define_insn_and_split \"*umsubqihi4.uconst\"\n-  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n-        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n-                  (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-                           (match_operand:HI 2 \"u8_operand\"                       \"M\"))))\n+;; \"*umsubqihi4.uconst\"\n+;; \"*msubqihi4.sconst\"\n+(define_insn_and_split \"*<extend_u>msubqihi4.<extend_su>const\"\n+  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n+        (minus:HI (match_operand:HI 3 \"register_operand\"                         \"0\")\n+                  (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                           (match_operand:HI 2 \"<extend_su>8_operand\"            \"n\"))))\n    (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n   \"AVR_HAVE_MUL\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 4)\n         (match_dup 2))\n-   ; *umsubqihi4\n+   ; *umsubqihi4 resp. *msubqihi4\n    (set (match_dup 0)\n         (minus:HI (match_dup 3)\n-                  (mult:HI (zero_extend:HI (match_dup 1))\n-                           (zero_extend:HI (match_dup 4)))))]\n+                  (mult:HI (any_extend:HI (match_dup 1))\n+                           (any_extend:HI (match_dup 4)))))]\n   {\n     operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n   })\n@@ -1356,46 +1341,6 @@\n     operands[2] = gen_int_mode (1 << INTVAL (operands[2]), QImode);\n   })\n \n-(define_insn_and_split \"*maddqihi4.sconst\"\n-  [(set (match_operand:HI 0 \"register_operand\"                                  \"=r\")\n-        (plus:HI (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n-                          (match_operand:HI 2 \"s8_operand\"                       \"n\"))\n-                 (match_operand:HI 3 \"register_operand\"                          \"0\")))\n-   (clobber (match_scratch:QI 4                                                \"=&d\"))]\n-  \"AVR_HAVE_MUL\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 4)\n-        (match_dup 2))\n-   ; *maddqihi4\n-   (set (match_dup 0)\n-        (plus:HI (mult:HI (sign_extend:HI (match_dup 1))\n-                          (sign_extend:HI (match_dup 4)))\n-                 (match_dup 3)))]\n-  {\n-    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n-  })\n-\n-(define_insn_and_split \"*msubqihi4.sconst\"\n-  [(set (match_operand:HI 0 \"register_operand\"                                   \"=r\")\n-        (minus:HI (match_operand:HI 3 \"register_operand\"                          \"0\")\n-                  (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n-                           (match_operand:HI 2 \"s8_operand\"                       \"M\"))))\n-   (clobber (match_scratch:QI 4                                                 \"=&d\"))]\n-  \"AVR_HAVE_MUL\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 4)\n-        (match_dup 2))\n-   ; *smsubqihi4\n-   (set (match_dup 0)\n-        (minus:HI (match_dup 3)\n-                  (mult:HI (sign_extend:HI (match_dup 1))\n-                           (sign_extend:HI (match_dup 4)))))]\n-  {\n-    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n-  })\n-\n ;; Same as the insn above, but combiner tries versions canonicalized to ASHIFT\n ;; for MULT with power of 2 and skips trying MULT insn above.  We omit 128\n ;; because this would require an extra pattern for just one value.\n@@ -1469,20 +1414,22 @@\n ; mul HI: $1 = sign/zero-extend, $2 = small constant\n ;******************************************************************************\n \n-(define_insn_and_split \"*muluqihi3.uconst\"\n+;; \"*muluqihi3.uconst\"\n+;; \"*mulsqihi3.sconst\"\n+(define_insn_and_split \"*mul<extend_su>qihi3.<extend_su>const\"\n   [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n-        (mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-                 (match_operand:HI 2 \"u8_operand\"                       \"M\")))\n+        (mult:HI (any_extend:HI (match_operand:QI 1 \"register_operand\" \"<mul_r_d>\"))\n+                 (match_operand:HI 2 \"<extend_su>8_operand\"            \"n\")))\n    (clobber (match_scratch:QI 3                                       \"=&d\"))]\n   \"AVR_HAVE_MUL\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3)\n         (match_dup 2))\n-   ; umulqihi3\n+   ; umulqihi3 resp. mulqihi3\n    (set (match_dup 0)\n-        (mult:HI (zero_extend:HI (match_dup 1))\n-                 (zero_extend:HI (match_dup 3))))]\n+        (mult:HI (any_extend:HI (match_dup 1))\n+                 (any_extend:HI (match_dup 3))))]\n   {\n     operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n   })\n@@ -1505,24 +1452,6 @@\n     operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n   })\n \n-(define_insn_and_split \"*mulsqihi3.sconst\"\n-  [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n-        (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"d\"))\n-                 (match_operand:HI 2 \"s8_operand\"                       \"n\")))\n-   (clobber (match_scratch:QI 3                                       \"=&d\"))]\n-  \"AVR_HAVE_MUL\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 3)\n-        (match_dup 2))\n-   ; mulqihi3\n-   (set (match_dup 0)\n-        (mult:HI (sign_extend:HI (match_dup 1))\n-                 (sign_extend:HI (match_dup 3))))]\n-  {\n-    operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n-  })\n-\n (define_insn_and_split \"*mulsqihi3.uconst\"\n   [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n         (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"a\"))"}]}