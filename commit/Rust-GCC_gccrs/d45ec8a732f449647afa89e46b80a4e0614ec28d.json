{"sha": "d45ec8a732f449647afa89e46b80a4e0614ec28d", "node_id": "C_kwDOANBUbNoAKGQ0NWVjOGE3MzJmNDQ5NjQ3YWZhODllNDZiODBhNGUwNjE0ZWMyOGQ", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-02-02T10:01:13Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2023-02-02T10:01:13Z"}, "message": "arm: Remove unnecessary zero-extending of MVE predicates before use [PR 107674]\n\nThis patch teaches GCC that zero-extending a MVE predicate from 16-bits to\n32-bits and then only using 16-bits is a no-op.\nIt does so in two steps:\n- it lets gcc know that it can access any MVE predicate mode using any other MVE\npredicate mode without needing to copy it, using the TARGET_MODES_TIEABLE_P hook,\n- it teaches simplify_subreg to optimize a subreg with a vector outermode, by\nreplacing this outermode with a same-sized integer mode and trying the\navalailable optimizations, then if successful it surrounds the result with a\nsubreg casting it back to the original vector outermode.\n\ngcc/ChangeLog:\n\n\tPR target/107674\n\t* config/arm/arm.cc (arm_hard_regno_mode_ok): Use new MACRO.\n\t(arm_modes_tieable_p): Make MVE predicate modes tieable.\n\t* config/arm/arm.h (VALID_MVE_PRED_MODE):  New define.\n\t* simplify-rtx.cc (simplify_context::simplify_subreg): Teach\n\tsimplify_subreg to simplify subregs where the outermode is not scalar.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/mve_vpt.c: Change to remove unecessary zero-extend.", "tree": {"sha": "24b143aded8b691c315f63eb0cf5cf9d7b63e551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24b143aded8b691c315f63eb0cf5cf9d7b63e551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d45ec8a732f449647afa89e46b80a4e0614ec28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45ec8a732f449647afa89e46b80a4e0614ec28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45ec8a732f449647afa89e46b80a4e0614ec28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45ec8a732f449647afa89e46b80a4e0614ec28d/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b58e77706e8b5057770f040005950940a9a0f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b58e77706e8b5057770f040005950940a9a0f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b58e77706e8b5057770f040005950940a9a0f5"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "4d9d202cad1f39ba386df9d8e4277007fd960262", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=d45ec8a732f449647afa89e46b80a4e0614ec28d", "patch": "@@ -25656,10 +25656,7 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n     return false;\n \n   if (IS_VPR_REGNUM (regno))\n-    return mode == HImode\n-      || mode == V16BImode\n-      || mode == V8BImode\n-      || mode == V4BImode;\n+    return VALID_MVE_PRED_MODE (mode);\n \n   if (TARGET_THUMB1)\n     /* For the Thumb we only allow values bigger than SImode in\n@@ -25738,6 +25735,10 @@ arm_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n   if (GET_MODE_CLASS (mode1) == GET_MODE_CLASS (mode2))\n     return true;\n \n+  if (TARGET_HAVE_MVE\n+      && (VALID_MVE_PRED_MODE (mode1) && VALID_MVE_PRED_MODE (mode2)))\n+    return true;\n+\n   /* We specifically want to allow elements of \"structure\" modes to\n      be tieable to the structure.  This more general condition allows\n      other rarer situations too.  */"}, {"sha": "8325e7a876e2e03f14cba07385cc5a1ddd771655", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d45ec8a732f449647afa89e46b80a4e0614ec28d", "patch": "@@ -1104,6 +1104,10 @@ extern const int arm_arch_cde_coproc_bits[];\n    || (MODE) == V16QImode || (MODE) == V8HFmode || (MODE) == V4SFmode \\\n    || (MODE) == V2DFmode)\n \n+#define VALID_MVE_PRED_MODE(MODE) \\\n+  ((MODE) == HImode\t\t\t\t\t\t\t\\\n+   || (MODE) == V16BImode || (MODE) == V8BImode || (MODE) == V4BImode)\n+\n #define VALID_MVE_SI_MODE(MODE) \\\n   ((MODE) == V2DImode ||(MODE) == V4SImode || (MODE) == V8HImode \\\n    || (MODE) == V16QImode)"}, {"sha": "0a1dd88b0a8adc343c7a2ae213fb4dca193f20cc", "filename": "gcc/simplify-rtx.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fsimplify-rtx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Fsimplify-rtx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.cc?ref=d45ec8a732f449647afa89e46b80a4e0614ec28d", "patch": "@@ -7652,6 +7652,22 @@ simplify_context::simplify_subreg (machine_mode outermode, rtx op,\n \t}\n     }\n \n+  /* Try simplifying a SUBREG expression of a non-integer OUTERMODE by using a\n+     NEW_OUTERMODE of the same size instead, other simplifications rely on\n+     integer to integer subregs and we'd potentially miss out on optimizations\n+     otherwise.  */\n+  if (known_gt (GET_MODE_SIZE (innermode),\n+\t\tGET_MODE_SIZE (outermode))\n+      && SCALAR_INT_MODE_P (innermode)\n+      && !SCALAR_INT_MODE_P (outermode)\n+      && int_mode_for_size (GET_MODE_BITSIZE (outermode),\n+\t\t\t    0).exists (&int_outermode))\n+    {\n+      rtx tem = simplify_subreg (int_outermode, op, innermode, byte);\n+      if (tem)\n+\treturn simplify_gen_subreg (outermode, tem, GET_MODE (tem), 0);\n+    }\n+\n   /* If OP is a vector comparison and the subreg is not changing the\n      number of elements or the size of the elements, change the result\n      of the comparison to the new mode.  */"}, {"sha": "41f4e3805d62d0343c4035a328250fb8c7b0c47f", "filename": "gcc/testsuite/gcc.target/arm/mve/mve_vpt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_vpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45ec8a732f449647afa89e46b80a4e0614ec28d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_vpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fmve_vpt.c?ref=d45ec8a732f449647afa89e46b80a4e0614ec28d", "patch": "@@ -16,12 +16,9 @@ void test0 (uint8_t *a, uint8_t *b, uint8_t *c)\n **\tvldrb.8\tq[0-9]+, \\[r[0-9]+\\]\n **\tvldrb.8\tq[0-9]+, \\[r[0-9]+\\]\n **\tvcmp.i8\teq, q[0-9]+, q[0-9]+\n-**\tvmrs\t(r[0-9]+), p0\t@ movhi\n-**\tuxth\t\\1, \\1\n-**\tvmsr\tp0, \\1\t@ movhi\n **\tvpst\n **\tvaddt.i8\t(q[0-9]+), q[0-9]+, q[0-9]+\n **\tvpst\n-**\tvstrbt.8\t\\2, \\[r[0-9]+\\]\n+**\tvstrbt.8\t\\1, \\[r[0-9]+\\]\n **\tbx\tlr\n */"}]}