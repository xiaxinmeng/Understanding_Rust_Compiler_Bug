{"sha": "4058454c9e0ee141d049cefa8db315a345a4b30a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ODQ1NGM5ZTBlZTE0MWQwNDljZWZhOGRiMzE1YTM0NWE0YjMwYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-18T21:41:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-19T16:25:37Z"}, "message": "c++: Allow defaulted comparison outside class.\n\nImplementing P2085, another refinement to the operator<=> specification from\nthe Prague meeting.  It was deemed desirable to be able to have a non-inline\ndefaulted definition of a comparison operator just like you can with other\ndefaulted functions.\n\ngcc/cp/ChangeLog:\n\n\t* method.c (early_check_defaulted_comparison): Allow defaulting\n\tcomparison outside class.  Complain if non-member operator isn't a\n\tfriend.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/spaceship-friend1.C: New test.\n\t* g++.dg/cpp2a/spaceship-err4.C: Adjust diagnostic.", "tree": {"sha": "a12833a627dc92f855820c1d6d391e72e15cc19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12833a627dc92f855820c1d6d391e72e15cc19b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4058454c9e0ee141d049cefa8db315a345a4b30a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4058454c9e0ee141d049cefa8db315a345a4b30a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4058454c9e0ee141d049cefa8db315a345a4b30a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4058454c9e0ee141d049cefa8db315a345a4b30a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cea81adabd7660838ebb3e59e8d28f820a3b789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea81adabd7660838ebb3e59e8d28f820a3b789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cea81adabd7660838ebb3e59e8d28f820a3b789"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "2a98907bfa13bbdc0b71f848529c5005bbce8710", "filename": "gcc/cp/method.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4058454c9e0ee141d049cefa8db315a345a4b30a", "patch": "@@ -1102,17 +1102,6 @@ early_check_defaulted_comparison (tree fn)\n       return false;\n     }\n \n-  if (!ctx)\n-    {\n-      if (DECL_OVERLOADED_OPERATOR_IS (fn, SPACESHIP_EXPR))\n-\terror_at (loc, \"three-way comparison operator can only be defaulted \"\n-\t\t  \"in a class definition\");\n-      else\n-\terror_at (loc, \"equality comparison operator can only be defaulted \"\n-\t\t  \"in a class definition\");\n-      return false;\n-    }\n-\n   if (!DECL_OVERLOADED_OPERATOR_IS (fn, SPACESHIP_EXPR)\n       && !same_type_p (TREE_TYPE (TREE_TYPE (fn)), boolean_type_node))\n     {\n@@ -1146,16 +1135,27 @@ early_check_defaulted_comparison (tree fn)\n   for (; parmnode != void_list_node; parmnode = TREE_CHAIN (parmnode))\n     {\n       tree parmtype = TREE_VALUE (parmnode);\n-      if (same_type_p (parmtype, ctx))\n+      if (CLASS_TYPE_P (parmtype))\n \tsaw_byval = true;\n-      else if (TREE_CODE (parmtype) != REFERENCE_TYPE\n-\t       || TYPE_REF_IS_RVALUE (parmtype)\n-\t       || TYPE_QUALS (TREE_TYPE (parmtype)) != TYPE_QUAL_CONST\n-\t       || !(same_type_ignoring_top_level_qualifiers_p\n-\t\t    (TREE_TYPE (parmtype), ctx)))\n-\tsaw_bad = true;\n+      else if (TREE_CODE (parmtype) == REFERENCE_TYPE\n+\t       && !TYPE_REF_IS_RVALUE (parmtype)\n+\t       && TYPE_QUALS (TREE_TYPE (parmtype)) == TYPE_QUAL_CONST)\n+\t{\n+\t  saw_byref = true;\n+\t  parmtype = TREE_TYPE (parmtype);\n+\t}\n       else\n-\tsaw_byref = true;\n+\tsaw_bad = true;\n+\n+      if (!saw_bad && !ctx)\n+\t{\n+\t  /* Defaulted outside the class body.  */\n+\t  ctx = TYPE_MAIN_VARIANT (parmtype);\n+\t  if (!is_friend (ctx, fn))\n+\t    error_at (loc, \"defaulted %qD is not a friend of %qT\", fn, ctx);\n+\t}\n+      else if (!same_type_ignoring_top_level_qualifiers_p (parmtype, ctx))\n+\tsaw_bad = true;\n     }\n \n   if (saw_bad || (saw_byval && saw_byref))"}, {"sha": "a39e50699576d10f03dc6d9699af30c5d26563c3", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-err4.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-err4.C?ref=4058454c9e0ee141d049cefa8db315a345a4b30a", "patch": "@@ -2,6 +2,6 @@\n // { dg-do compile { target c++20 } }\n \n struct B {};\n-bool operator!=(const B&, const B&) = default; // { dg-error \"equality comparison operator can only be defaulted in a class definition\" }\n-bool operator==(const B&, const B&) = default; // { dg-error \"equality comparison operator can only be defaulted in a class definition\" }\n-bool operator<=>(const B&, const B&) = default; // { dg-error \"three-way comparison operator can only be defaulted in a class definition\" }\n+bool operator!=(const B&, const B&) = default; // { dg-error \"not a friend\" }\n+bool operator==(const B&, const B&) = default; // { dg-error \"not a friend\" }\n+bool operator<=>(const B&, const B&) = default; // { dg-error \"not a friend\" }"}, {"sha": "24bbc74a2d19fdf240d94fef944aa42a9661816f", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-friend1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-friend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4058454c9e0ee141d049cefa8db315a345a4b30a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-friend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-friend1.C?ref=4058454c9e0ee141d049cefa8db315a345a4b30a", "patch": "@@ -0,0 +1,26 @@\n+// P2085, separate definition of defaulted comparisons\n+// { dg-do compile { target c++20 } }\n+\n+namespace X {\n+\n+  struct A {\n+    int i;\n+    friend constexpr bool operator==(const A&,const A&);\n+  };\n+\n+  inline constexpr bool operator==(const A&,const A&)=default;\n+\n+  static_assert (A() == A());\n+\n+}\n+\n+namespace Y {\n+\n+  struct A {\n+    int i;\n+    // friend bool operator==(const A&,const A&);\n+  };\n+\n+  inline bool operator==(const A&,const A&)=default; // { dg-error \"not a friend\" }\n+\n+}"}]}