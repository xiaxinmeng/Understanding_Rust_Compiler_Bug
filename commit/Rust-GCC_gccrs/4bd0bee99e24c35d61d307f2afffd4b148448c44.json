{"sha": "4bd0bee99e24c35d61d307f2afffd4b148448c44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkMGJlZTk5ZTI0YzM1ZDYxZDMwN2YyYWZmZmQ0YjE0ODQ0OGM0NA==", "commit": {"author": {"name": "Matt Kraai", "email": "kraai@alumni.cmu.edu", "date": "2003-07-31T01:32:24Z"}, "committer": {"name": "Matt Kraai", "email": "kraai@gcc.gnu.org", "date": "2003-07-31T01:32:24Z"}, "message": "c-tree.texi: Normalize spellings of \"lowercase\" and \"uppercase\".\n\n\t* doc/c-tree.texi: Normalize spellings of \"lowercase\" and\n\t\"uppercase\".\n\t* doc/cpp.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/rtl.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\nFrom-SVN: r69988", "tree": {"sha": "c042b968581207ca94b4d3df8abdedccea28267a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c042b968581207ca94b4d3df8abdedccea28267a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd0bee99e24c35d61d307f2afffd4b148448c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd0bee99e24c35d61d307f2afffd4b148448c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd0bee99e24c35d61d307f2afffd4b148448c44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd0bee99e24c35d61d307f2afffd4b148448c44/comments", "author": null, "committer": null, "parents": [{"sha": "7f02cb5ccd8f850be7cdae350c08057a1dc51af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f02cb5ccd8f850be7cdae350c08057a1dc51af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f02cb5ccd8f850be7cdae350c08057a1dc51af5"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "13cb92741019052e3003f01690b68cda76dac020", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -1,3 +1,12 @@\n+2003-07-30  Matt Kraai  <kraai@alumni.cmu.edu>\n+\n+\t* doc/c-tree.texi: Normalize spellings of \"lowercase\" and\n+\t\"uppercase\".\n+\t* doc/cpp.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\n 2003-07-30  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* objc/Make-lang.in (objc.stage1, objc.stage2, objc.stage3)"}, {"sha": "e605d738155bbc7c915b0e7485bc294dd027f93f", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -124,7 +124,7 @@ functions described here.  In particular, no guarantee is given that the\n values are lvalues.\n \n In general, the names of macros are all in uppercase, while the names of\n-functions are entirely in lower case.  There are rare exceptions to this\n+functions are entirely in lowercase.  There are rare exceptions to this\n rule.  You should assume that any macro or function whose name is made\n up entirely of uppercase letters may evaluate its arguments more than\n once.  You may assume that a macro or function whose name is made up"}, {"sha": "a27a7b1e5897c9a231bb40eb25c9297a2f6c0f98", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -1206,7 +1206,7 @@ if you had written\n foo = (char *) malloc (1024);\n @end example\n \n-By convention, macro names are written in upper case.  Programs are\n+By convention, macro names are written in uppercase.  Programs are\n easier to read when it is possible to tell at a glance which names are\n macros.\n "}, {"sha": "ce59a0fd5edf14ea9d2f9c9f7af5504dcfdde607", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -1314,15 +1314,15 @@ The constraints are defined through these macros:\n \n @table @code\n @item REG_CLASS_FROM_LETTER\n-Register class constraints (usually lower case).\n+Register class constraints (usually lowercase).\n \n @item CONST_OK_FOR_LETTER_P\n Immediate constant constraints, for non-floating point constants of\n-word size or smaller precision (usually upper case).\n+word size or smaller precision (usually uppercase).\n \n @item CONST_DOUBLE_OK_FOR_LETTER_P\n Immediate constant constraints, for all floating point constants and for\n-constants of greater than word size precision (usually upper case).\n+constants of greater than word size precision (usually uppercase).\n \n @item EXTRA_CONSTRAINT\n Special cases of registers or memory.  This macro is not required, and\n@@ -2318,7 +2318,7 @@ pattern to accomplish a certain task.\n @table @asis\n @cindex @code{mov@var{m}} instruction pattern\n @item @samp{mov@var{m}}\n-Here @var{m} stands for a two-letter machine mode name, in lower case.\n+Here @var{m} stands for a two-letter machine mode name, in lowercase.\n This instruction pattern moves data with that machine mode from operand\n 1 to operand 0.  For example, @samp{movsi} moves full-word data.\n \n@@ -4810,7 +4810,7 @@ A @samp{#define} is written for the symbol @samp{HAVE_ATTR_@var{name}}.\n @item\n An enumeral class is defined for @samp{attr_@var{name}} with\n elements of the form @samp{@var{upper-name}_@var{upper-value}} where\n-the attribute name and value are first converted to upper case.\n+the attribute name and value are first converted to uppercase.\n \n @item\n A function @samp{get_attr_@var{name}} is defined that is passed an insn and"}, {"sha": "94147dbfd9984e9ebae0736112701a2e3ed124cc", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -99,7 +99,7 @@ null pointers are used instead.\n @findex PUT_CODE\n Expressions are classified by @dfn{expression codes} (also called RTX\n codes).  The expression code is a name defined in @file{rtl.def}, which is\n-also (in upper case) a C enumeration constant.  The possible expression\n+also (in uppercase) a C enumeration constant.  The possible expression\n codes and their meanings are machine-independent.  The code of an RTX can\n be extracted with the macro @code{GET_CODE (@var{x})} and altered with\n @code{PUT_CODE (@var{x}, @var{newcode})}.\n@@ -118,8 +118,8 @@ Expressions are written as parentheses containing the name of the\n expression type, its flags and machine mode if any, and then the operands\n of the expression (separated by spaces).\n \n-Expression code names in the @samp{md} file are written in lower case,\n-but when they appear in C code they are written in upper case.  In this\n+Expression code names in the @samp{md} file are written in lowercase,\n+but when they appear in C code they are written in uppercase.  In this\n manual, they are shown as follows: @code{const_int}.\n \n @cindex (nil)"}, {"sha": "9ada2b5d1b449bfb637418b0e23ea082687e1a0b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd0bee99e24c35d61d307f2afffd4b148448c44/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4bd0bee99e24c35d61d307f2afffd4b148448c44", "patch": "@@ -558,7 +558,7 @@ wrapped in @code{extern @samp{C}} when compiling C++.  Mark the end of\n the array with a null element.\n \n The component name denotes what GNU package the include file is part of,\n-if any, in all upper-case letters.  For example, it might be @samp{GCC}\n+if any, in all uppercase letters.  For example, it might be @samp{GCC}\n or @samp{BINUTILS}.  If the package is part of a vendor-supplied\n operating system, code the component name as @samp{0}.\n \n@@ -7348,7 +7348,7 @@ If defined this macro should expand to a series of @code{case}\n statements which will be parsed inside the @code{switch} statement of\n the @code{asm_fprintf} function.  This allows targets to define extra\n printf formats which may useful when generating their assembler\n-statements.  Note that upper case letters are reserved for future\n+statements.  Note that uppercase letters are reserved for future\n generic extensions to asm_fprintf, and so are not available to target\n specific code.  The output file is given by the parameter @var{file}.\n The varargs input pointer is @var{argptr} and the rest of the format"}]}