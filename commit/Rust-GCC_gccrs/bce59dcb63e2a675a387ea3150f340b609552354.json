{"sha": "bce59dcb63e2a675a387ea3150f340b609552354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlNTlkY2I2M2UyYTY3NWEzODdlYTMxNTBmMzQwYjYwOTU1MjM1NA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-08-16T01:19:59Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-08-16T01:19:59Z"}, "message": "[RS6000] Merge rs6000_reg_live_or_pic_offset_p into save_reg_p\n\nrs6000_reg_live_or_pic_offset_p is just save_reg_p with special\nhandling for the pic register and eh_return.  This merge also\nsimplifies the eh_return handling.  The intent of\nhttps://gcc.gnu.org/ml/gcc-patches/2010-09/msg01838.html was to say\nthe PIC reg needed to be saved for eh_return, not all gprs.  Of\ncourse, it doesn't hurt to say all gprs need to be saved for eh_return\nas that is what the target-independent code does by setting DF live,\nbut it's unnecessary in the backend.\n\n\t* config/rs6000/rs6000.c (rs6000_reg_live_or_pic_offset_p): Merge..\n\t(save_reg_p): ..into this.  Update all callers.\n\t(first_reg_to_save): Simplify.\n\nFrom-SVN: r251115", "tree": {"sha": "09984e7216cfd35479100de77d8de4cc6edaedf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09984e7216cfd35479100de77d8de4cc6edaedf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce59dcb63e2a675a387ea3150f340b609552354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce59dcb63e2a675a387ea3150f340b609552354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce59dcb63e2a675a387ea3150f340b609552354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce59dcb63e2a675a387ea3150f340b609552354/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "973d3f1905307988ba17a4f93d9a95518b91fe42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973d3f1905307988ba17a4f93d9a95518b91fe42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973d3f1905307988ba17a4f93d9a95518b91fe42"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "10ff39e7fbc05d9ce844a9cf96d47ce145f83591", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce59dcb63e2a675a387ea3150f340b609552354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce59dcb63e2a675a387ea3150f340b609552354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bce59dcb63e2a675a387ea3150f340b609552354", "patch": "@@ -1,3 +1,9 @@\n+2017-08-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_reg_live_or_pic_offset_p): Merge..\n+\t(save_reg_p): ..into this.  Update all callers.\n+\t(first_reg_to_save): Simplify.\n+\n 2017-08-16  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_savres_strategy): Don't restore"}, {"sha": "5e79933855a38016b7318ef14897a3835b1f3c5e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce59dcb63e2a675a387ea3150f340b609552354/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce59dcb63e2a675a387ea3150f340b609552354/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bce59dcb63e2a675a387ea3150f340b609552354", "patch": "@@ -24078,22 +24078,19 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n /* This page contains routines that are used to determine what the\n    function prologue and epilogue code will do and write them out.  */\n \n-static inline bool\n-save_reg_p (int r)\n-{\n-  return !call_used_regs[r] && df_regs_ever_live_p (r);\n-}\n-\n-/* Determine whether the gp REG is really used.  */\n+/* Determine whether the REG is really used.  */\n \n static bool\n-rs6000_reg_live_or_pic_offset_p (int reg)\n+save_reg_p (int reg)\n {\n   /* We need to mark the PIC offset register live for the same conditions\n      as it is set up, or otherwise it won't be saved before we clobber it.  */\n \n   if (reg == RS6000_PIC_OFFSET_TABLE_REGNUM && !TARGET_SINGLE_PIC_BASE)\n     {\n+      /* When calling eh_return, we must return true for all the cases\n+\t where conditional_register_usage marks the PIC offset reg\n+\t call used.  */\n       if (TARGET_TOC && TARGET_MINIMAL_TOC\n \t  && (crtl->calls_eh_return\n \t      || df_regs_ever_live_p (reg)\n@@ -24105,11 +24102,7 @@ rs6000_reg_live_or_pic_offset_p (int reg)\n \treturn true;\n     }\n \n-  /* If the function calls eh_return, claim used all the registers that would\n-     be checked for liveness otherwise.  */\n-\n-  return ((crtl->calls_eh_return || df_regs_ever_live_p (reg))\n-\t  && !call_used_regs[reg]);\n+  return !call_used_regs[reg] && df_regs_ever_live_p (reg);\n }\n \n /* Return the first fixed-point register that is required to be\n@@ -24125,13 +24118,6 @@ first_reg_to_save (void)\n     if (save_reg_p (first_reg))\n       break;\n \n-  if (first_reg > RS6000_PIC_OFFSET_TABLE_REGNUM\n-      && ((DEFAULT_ABI == ABI_V4 && flag_pic != 0)\n-\t  || (DEFAULT_ABI == ABI_DARWIN && flag_pic)\n-\t  || (TARGET_TOC && TARGET_MINIMAL_TOC))\n-      && rs6000_reg_live_or_pic_offset_p (RS6000_PIC_OFFSET_TABLE_REGNUM))\n-    first_reg = RS6000_PIC_OFFSET_TABLE_REGNUM;\n-\n #if TARGET_MACHO\n   if (flag_pic\n       && crtl->uses_pic_offset_table\n@@ -26306,7 +26292,7 @@ rs6000_get_separate_components (void)\n       for (unsigned regno = info->first_gp_reg_save; regno < 32; regno++)\n \t{\n \t  if (IN_RANGE (offset, -0x8000, 0x7fff)\n-\t      && rs6000_reg_live_or_pic_offset_p (regno))\n+\t      && save_reg_p (regno))\n \t    bitmap_set_bit (components, regno);\n \n \t  offset += reg_size;\n@@ -27047,7 +27033,7 @@ rs6000_emit_prologue (void)\n       int offset = info->gp_save_offset + frame_off;\n       for (int i = info->first_gp_reg_save; i < 32; i++)\n \t{\n-\t  if (rs6000_reg_live_or_pic_offset_p (i)\n+\t  if (save_reg_p (i)\n \t      && !cfun->machine->gpr_is_wrapped_separately[i])\n \t    emit_frame_save (frame_reg_rtx, reg_mode, i, offset,\n \t\t\t     sp_off - frame_off);\n@@ -28497,7 +28483,7 @@ rs6000_emit_epilogue (int sibcall)\n       int offset = info->gp_save_offset + frame_off;\n       for (i = info->first_gp_reg_save; i < 32; i++)\n \t{\n-\t  if (rs6000_reg_live_or_pic_offset_p (i)\n+\t  if (save_reg_p (i)\n \t      && !cfun->machine->gpr_is_wrapped_separately[i])\n \t    {\n \t      rtx reg = gen_rtx_REG (reg_mode, i);\n@@ -28540,13 +28526,9 @@ rs6000_emit_epilogue (int sibcall)\n \tcfa_restores = add_crlr_cfa_restore (info, cfa_restores);\n \n       for (i = info->first_gp_reg_save; i < 32; i++)\n-\tif (!restoring_GPRs_inline\n-\t    || using_load_multiple\n-\t    || rs6000_reg_live_or_pic_offset_p (i))\n+\tif (save_reg_p (i)\n+\t    && !cfun->machine->gpr_is_wrapped_separately[i])\n \t  {\n-\t    if (cfun->machine->gpr_is_wrapped_separately[i])\n-\t      continue;\n-\n \t    rtx reg = gen_rtx_REG (reg_mode, i);\n \t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg, cfa_restores);\n \t  }"}]}