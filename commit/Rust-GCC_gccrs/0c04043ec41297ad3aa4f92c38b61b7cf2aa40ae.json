{"sha": "0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwNDA0M2VjNDEyOTdhZDNhYTRmOTJjMzhiNjFiN2NmMmFhNDBhZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-08-15T06:58:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-08-15T06:58:09Z"}, "message": "Properly register dead cgraph_nodes in passes.c.\n\n2019-08-15  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/91404\n\t* passes.c (order): Remove.\n\t(uid_hash_t): Likewise).\n\t(remove_cgraph_node_from_order): Remove from set\n\tof pointers (cgraph_node *).\n\t(insert_cgraph_node_to_order): New.\n\t(duplicate_cgraph_node_to_order): New.\n\t(do_per_function_toporder): Register all 3 cgraph hooks.\n\tSkip removed_nodes now as we know about all of them.\n\nFrom-SVN: r274502", "tree": {"sha": "29b9b351775dbb81c4a60f055cfd17053f040bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b9b351775dbb81c4a60f055cfd17053f040bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "304e8bcb4a7923651816d27433f101fdc309ca96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304e8bcb4a7923651816d27433f101fdc309ca96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304e8bcb4a7923651816d27433f101fdc309ca96"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "27e09f26390f366f092728d5a9cb14f141de5cdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "patch": "@@ -1,3 +1,15 @@\n+2019-08-15  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/91404\n+\t* passes.c (order): Remove.\n+\t(uid_hash_t): Likewise).\n+\t(remove_cgraph_node_from_order): Remove from set\n+\tof pointers (cgraph_node *).\n+\t(insert_cgraph_node_to_order): New.\n+\t(duplicate_cgraph_node_to_order): New.\n+\t(do_per_function_toporder): Register all 3 cgraph hooks.\n+\tSkip removed_nodes now as we know about all of them.\n+\n 2019-08-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386-expand.c (ix86_expand_vector_init_one_nonzero)"}, {"sha": "f715c67ab65963bfe6bd2bac819b839914f31f11", "filename": "gcc/passes.c", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=0c04043ec41297ad3aa4f92c38b61b7cf2aa40ae", "patch": "@@ -1646,24 +1646,39 @@ do_per_function (void (*callback) (function *, void *data), void *data)\n     }\n }\n \n-/* Because inlining might remove no-longer reachable nodes, we need to\n-   keep the array visible to garbage collector to avoid reading collected\n-   out nodes.  */\n-static int nnodes;\n-static GTY ((length (\"nnodes\"))) cgraph_node **order;\n-\n-#define uid_hash_t hash_set<int_hash <int, 0, -1> >\n-\n /* Hook called when NODE is removed and therefore should be\n    excluded from order vector.  DATA is a hash set with removed nodes.  */\n \n static void\n remove_cgraph_node_from_order (cgraph_node *node, void *data)\n {\n-  uid_hash_t *removed_nodes = (uid_hash_t *)data;\n-  removed_nodes->add (node->get_uid ());\n+  hash_set<cgraph_node *> *removed_nodes = (hash_set<cgraph_node *> *)data;\n+  removed_nodes->add (node);\n+}\n+\n+/* Hook called when NODE is insert and therefore should be\n+   excluded from removed_nodes.  DATA is a hash set with removed nodes.  */\n+\n+static void\n+insert_cgraph_node_to_order (cgraph_node *node, void *data)\n+{\n+  hash_set<cgraph_node *> *removed_nodes = (hash_set<cgraph_node *> *)data;\n+  removed_nodes->remove (node);\n }\n \n+/* Hook called when NODE is duplicated and therefore should be\n+   excluded from removed_nodes.  DATA is a hash set with removed nodes.  */\n+\n+static void\n+duplicate_cgraph_node_to_order (cgraph_node *node, cgraph_node *node2,\n+\t\t\t\tvoid *data)\n+{\n+  hash_set<cgraph_node *> *removed_nodes = (hash_set<cgraph_node *> *)data;\n+  gcc_checking_assert (!removed_nodes->contains (node));\n+  removed_nodes->remove (node2);\n+}\n+\n+\n /* If we are in IPA mode (i.e., current_function_decl is NULL), call\n    function CALLBACK for every function in the call graph.  Otherwise,\n    call CALLBACK on the current function.\n@@ -1677,26 +1692,30 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n     callback (cfun, data);\n   else\n     {\n-      cgraph_node_hook_list *hook;\n-      uid_hash_t removed_nodes;\n-      gcc_assert (!order);\n-      order = ggc_vec_alloc<cgraph_node *> (symtab->cgraph_count);\n+      hash_set<cgraph_node *> removed_nodes;\n+      unsigned nnodes = symtab->cgraph_count;\n+      cgraph_node **order = XNEWVEC (cgraph_node *, nnodes);\n \n       nnodes = ipa_reverse_postorder (order);\n       for (i = nnodes - 1; i >= 0; i--)\n \torder[i]->process = 1;\n-      hook = symtab->add_cgraph_removal_hook (remove_cgraph_node_from_order,\n-\t\t\t\t\t      &removed_nodes);\n+      cgraph_node_hook_list *removal_hook\n+\t= symtab->add_cgraph_removal_hook (remove_cgraph_node_from_order,\n+\t\t\t\t\t   &removed_nodes);\n+      cgraph_node_hook_list *insertion_hook\n+\t= symtab->add_cgraph_insertion_hook (insert_cgraph_node_to_order,\n+\t\t\t\t\t     &removed_nodes);\n+      cgraph_2node_hook_list *duplication_hook\n+\t= symtab->add_cgraph_duplication_hook (duplicate_cgraph_node_to_order,\n+\t\t\t\t\t       &removed_nodes);\n       for (i = nnodes - 1; i >= 0; i--)\n \t{\n \t  cgraph_node *node = order[i];\n \n \t  /* Function could be inlined and removed as unreachable.  */\n-\t  if (node == NULL || removed_nodes.contains (node->get_uid ()))\n+\t  if (node == NULL || removed_nodes.contains (node))\n \t    continue;\n \n-\t  /* Allow possibly removed nodes to be garbage collected.  */\n-\t  order[i] = NULL;\n \t  node->process = 0;\n \t  if (node->has_gimple_body_p ())\n \t    {\n@@ -1706,11 +1725,12 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n \t      pop_cfun ();\n \t    }\n \t}\n-      symtab->remove_cgraph_removal_hook (hook);\n+      symtab->remove_cgraph_removal_hook (removal_hook);\n+      symtab->remove_cgraph_insertion_hook (insertion_hook);\n+      symtab->remove_cgraph_duplication_hook (duplication_hook);\n+\n+      free (order);\n     }\n-  ggc_free (order);\n-  order = NULL;\n-  nnodes = 0;\n }\n \n /* Helper function to perform function body dump.  */\n@@ -3046,5 +3066,3 @@ function_called_by_processed_nodes_p (void)\n     }\n   return e != NULL;\n }\n-\n-#include \"gt-passes.h\""}]}