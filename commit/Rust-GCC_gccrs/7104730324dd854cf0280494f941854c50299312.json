{"sha": "7104730324dd854cf0280494f941854c50299312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwNDczMDMyNGRkODU0Y2YwMjgwNDk0Zjk0MTg1NGM1MDI5OTMxMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-06T02:25:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-06T02:25:03Z"}, "message": "fold-const.c (fold_binary): Avoid directly using the original expression t as much as possible.\n\n\t* fold-const.c (fold_binary): Avoid directly using the original\n\texpression t as much as possible.\n\nFrom-SVN: r95962", "tree": {"sha": "2ddf3fc3749d103ac00f2b290bd509f6a51a199c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ddf3fc3749d103ac00f2b290bd509f6a51a199c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7104730324dd854cf0280494f941854c50299312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7104730324dd854cf0280494f941854c50299312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7104730324dd854cf0280494f941854c50299312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7104730324dd854cf0280494f941854c50299312/comments", "author": null, "committer": null, "parents": [{"sha": "75505450f647279fc6fecc603cedf6702c871dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75505450f647279fc6fecc603cedf6702c871dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75505450f647279fc6fecc603cedf6702c871dc2"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "8e2596252ff818f3bbddd94cc739642a6b1a6496", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7104730324dd854cf0280494f941854c50299312/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7104730324dd854cf0280494f941854c50299312/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7104730324dd854cf0280494f941854c50299312", "patch": "@@ -1,3 +1,8 @@\n+2005-03-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold_binary): Avoid directly using the original\n+\texpression t as much as possible.\n+\n 2005-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-semantics.c (build_stmt): Use TYPE_P instead of"}, {"sha": "2577da2690e07571a6a1dfc7d6ed1cfbca6bdcdf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7104730324dd854cf0280494f941854c50299312/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7104730324dd854cf0280494f941854c50299312/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7104730324dd854cf0280494f941854c50299312", "patch": "@@ -7025,6 +7025,7 @@ fold_binary (tree expr)\n   const tree type = TREE_TYPE (expr);\n   tree t1 = NULL_TREE;\n   tree tem;\n+  tree op0, op1;\n   tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n   enum tree_code code = TREE_CODE (t);\n   enum tree_code_class kind = TREE_CODE_CLASS (code);\n@@ -7037,6 +7038,8 @@ fold_binary (tree expr)\n   gcc_assert (IS_EXPR_CODE_CLASS (kind)\n \t      && TREE_CODE_LENGTH (code) == 2);\n \n+  op0 = TREE_OPERAND (t, 0);\n+  op1 = TREE_OPERAND (t, 1);\n   for (i = 0; i < 2; i++)\n     {\n       tree op = TREE_OPERAND (t, i);\n@@ -7083,8 +7086,7 @@ fold_binary (tree expr)\n      to ARG1 to reduce the number of tests below.  */\n   if (commutative_tree_code (code)\n       && tree_swap_operands_p (arg0, arg1, true))\n-    return fold (build2 (code, type, TREE_OPERAND (t, 1),\n-\t\t\t TREE_OPERAND (t, 0)));\n+    return fold (build2 (code, type, op1, op0));\n \n   /* Now WINS is set as described above,\n      ARG0 is the first operand of EXPR,\n@@ -7784,7 +7786,7 @@ fold_binary (tree expr)\n \t\t\t\t TREE_OPERAND (arg0, 1)));\n \n \t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0),\n+\t      && 0 != (tem = extract_muldiv (op0,\n \t\t\t\t\t     fold_convert (type, arg1),\n \t\t\t\t\t     code, NULL_TREE)))\n \t    return fold_convert (type, tem);\n@@ -8343,8 +8345,7 @@ fold_binary (tree expr)\n \treturn fold (build2 (EXACT_DIV_EXPR, type, arg0, arg1));\n \n       if (TREE_CODE (arg1) == INTEGER_CST\n-\t  && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,\n-\t\t\t\t\t code, NULL_TREE)))\n+\t  && 0 != (tem = extract_muldiv (op0, arg1, code, NULL_TREE)))\n \treturn fold_convert (type, tem);\n \n       if (TREE_CODE (type) == COMPLEX_TYPE)\n@@ -8429,8 +8430,7 @@ fold_binary (tree expr)\n \t\t\t     fold_convert (type, TREE_OPERAND (arg1, 0))));\n \n       if (TREE_CODE (arg1) == INTEGER_CST\n-\t  && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,\n-\t\t\t\t\t code, NULL_TREE)))\n+\t  && 0 != (tem = extract_muldiv (op0, arg1, code, NULL_TREE)))\n \treturn fold_convert (type, tem);\n \n       goto binary;"}]}