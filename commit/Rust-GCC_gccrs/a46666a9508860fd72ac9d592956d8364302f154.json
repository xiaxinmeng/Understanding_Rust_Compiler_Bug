{"sha": "a46666a9508860fd72ac9d592956d8364302f154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2NjY2YTk1MDg4NjBmZDcyYWM5ZDU5Mjk1NmQ4MzY0MzAyZjE1NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-11T16:22:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-11T16:22:29Z"}, "message": "re PR c/10201 ([IA64] ICE in int_mode_for_mode, at stor-layout.c)\n\n        PR c/10201\n        * expr.c (expand_expr): Move DECL_RTL frobbing ...\n        * stor-layout.c (layout_decl): ... here.\n\nFrom-SVN: r65467", "tree": {"sha": "1cb23927181d5252d9655bc7e20fc97b620c0e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cb23927181d5252d9655bc7e20fc97b620c0e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46666a9508860fd72ac9d592956d8364302f154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46666a9508860fd72ac9d592956d8364302f154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46666a9508860fd72ac9d592956d8364302f154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46666a9508860fd72ac9d592956d8364302f154/comments", "author": null, "committer": null, "parents": [{"sha": "6d2f9dd377ee9d9af94c58097d3511192eded91c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2f9dd377ee9d9af94c58097d3511192eded91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2f9dd377ee9d9af94c58097d3511192eded91c"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "ea6055b1a446480a33caa82f6f41480e3b98a44e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46666a9508860fd72ac9d592956d8364302f154/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46666a9508860fd72ac9d592956d8364302f154/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a46666a9508860fd72ac9d592956d8364302f154", "patch": "@@ -1,3 +1,9 @@\n+2003-04-11  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/10201\n+\t* expr.c (expand_expr): Move DECL_RTL frobbing ...\n+\t* stor-layout.c (layout_decl): ... here.\n+\n 2003-04-11  James A. Morrison <ja2morri@uwaterloo.ca>\n \n \t* doc/invoke.texi: Eliminate extra white-space caused by"}, {"sha": "3d8903da7002d2307242b09a51ef5e650247cc98", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a46666a9508860fd72ac9d592956d8364302f154", "patch": "@@ -6714,21 +6714,7 @@ expand_expr (exp, target, tmode, modifier)\n \t but the type is complete now, lay out the decl now.  */\n       if (DECL_SIZE (exp) == 0 && COMPLETE_TYPE_P (TREE_TYPE (exp))\n \t  && (TREE_STATIC (exp) || DECL_EXTERNAL (exp)))\n-\t{\n-\t  rtx value = DECL_RTL_IF_SET (exp);\n-\n-\t  layout_decl (exp, 0);\n-\n-\t  /* If the RTL was already set, update its mode and memory\n-\t     attributes.  */\n-\t  if (value != 0)\n-\t    {\n-\t      PUT_MODE (value, DECL_MODE (exp));\n-\t      SET_DECL_RTL (exp, 0);\n-\t      set_mem_attributes (value, exp, 1);\n-\t      SET_DECL_RTL (exp, value);\n-\t    }\n-\t}\n+\tlayout_decl (exp, 0);\n \n       /* ... fall through ...  */\n "}, {"sha": "c592fa4e401c6d48e83b81c97b959cbc1e45a5a1", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=a46666a9508860fd72ac9d592956d8364302f154", "patch": "@@ -390,13 +390,16 @@ layout_decl (decl, known_align)\n {\n   tree type = TREE_TYPE (decl);\n   enum tree_code code = TREE_CODE (decl);\n+  rtx rtl = NULL_RTX;\n \n   if (code == CONST_DECL)\n     return;\n   else if (code != VAR_DECL && code != PARM_DECL && code != RESULT_DECL\n \t   && code != TYPE_DECL && code != FIELD_DECL)\n     abort ();\n \n+  rtl = DECL_RTL_IF_SET (decl);\n+\n   if (type == error_mark_node)\n     type = void_type_node;\n \n@@ -542,6 +545,15 @@ layout_decl (decl, known_align)\n \t\t\t       larger_than_size);\n \t}\n     }\n+\n+  /* If the RTL was already set, update its mode and mem attributes.  */\n+  if (rtl)\n+    {\n+      PUT_MODE (rtl, DECL_MODE (decl));\n+      SET_DECL_RTL (decl, 0);\n+      set_mem_attributes (rtl, decl, 1);\n+      SET_DECL_RTL (decl, rtl);\n+    }\n }\n \f\n /* Hook for a front-end function that can modify the record layout as needed"}, {"sha": "9127ede83972c4251d968513481305302560b6bc", "filename": "gcc/testsuite/gcc.c-torture/compile/20030410-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46666a9508860fd72ac9d592956d8364302f154/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030410-1.c?ref=a46666a9508860fd72ac9d592956d8364302f154", "patch": "@@ -0,0 +1,27 @@\n+/* PR 10201 */\n+\n+extern struct _zend_compiler_globals compiler_globals;\n+typedef struct _zend_executor_globals zend_executor_globals;\n+extern zend_executor_globals executor_globals;\n+\n+typedef struct _zend_ptr_stack {\n+        int top;\n+        void **top_element;\n+} zend_ptr_stack;\n+struct _zend_compiler_globals {\n+};\n+struct _zend_executor_globals {\n+        int *uninitialized_zval_ptr;\n+        zend_ptr_stack argument_stack;\n+};\n+\n+static inline void safe_free_zval_ptr(int *p)\n+{\n+        if (p!=(executor_globals.uninitialized_zval_ptr)) {\n+        }\n+}\n+zend_executor_globals executor_globals;\n+static inline void zend_ptr_stack_clear_multiple(void)\n+{\n+        executor_globals.argument_stack.top -= 2;\n+}"}]}