{"sha": "c36eda5462a917b6b23c07fa0ac1752cf830a29d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2ZWRhNTQ2MmE5MTdiNmIyM2MwN2ZhMGFjMTc1MmNmODMwYTI5ZA==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-02-14T21:08:08Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-02-14T21:08:08Z"}, "message": "jawt.c: New file.\n\n2005-02-14  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* jawt.c: New file.\n\t* include/jawt.h: Likewise.\n\t* include/jawt_md.h: Likewise.\n\t* include/Makefile.am (tool_include__HEADERS): Add jawt.h and\n\tjawt_md.h files.\n\t* include/Makefile.in: Regenerate.\n\t* jni/classpath/classpath_jawt.h: Likewise.\n\t* jni/gtk-peer/gtk_jawt.c: Likewise.\n\t* Makefile.am: Build libjawt.so.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r95047", "tree": {"sha": "24123b91fac1a16e6031e39bd090dd4a32dcc631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24123b91fac1a16e6031e39bd090dd4a32dcc631"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c36eda5462a917b6b23c07fa0ac1752cf830a29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36eda5462a917b6b23c07fa0ac1752cf830a29d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36eda5462a917b6b23c07fa0ac1752cf830a29d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36eda5462a917b6b23c07fa0ac1752cf830a29d/comments", "author": null, "committer": null, "parents": [{"sha": "5728cb66879693b5487590579e0022b1e1e5175c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5728cb66879693b5487590579e0022b1e1e5175c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5728cb66879693b5487590579e0022b1e1e5175c"}], "stats": {"total": 618, "additions": 600, "deletions": 18}, "files": [{"sha": "1adfca2b70dfdf23fcfa65f0608954ff958b627c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -1,3 +1,16 @@\n+2005-02-14  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* jawt.c: New file.\n+\t* include/jawt.h: Likewise.\n+\t* include/jawt_md.h: Likewise.\n+\t* include/Makefile.am (tool_include__HEADERS): Add jawt.h and\n+\tjawt_md.h files.\n+\t* include/Makefile.in: Regenerate.\n+\t* jni/classpath/classpath_jawt.h: Likewise.\n+\t* jni/gtk-peer/gtk_jawt.c: Likewise.\n+\t* Makefile.am: Build libjawt.so.\n+\t* Makefile.in: Regenerate.\n+\n 2005-02-14  Tom Tromey  <tromey@redhat.com>\n \n \t* testsuite/libjava.lang/PR19921.java: Use correct class name."}, {"sha": "249388eabdec50bc4d65ce002784096cd7a35ac0", "filename": "libjava/Makefile.am", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -102,12 +102,14 @@ endif\n \n if GTK_AWT\n cond_gtk_ltlibrary = lib-gnu-java-awt-peer-gtk.la\n+cond_gtk_jawt_ltlibrary = libjawt.la\n else\n cond_gtk_ltlibrary =\n+cond_gtk_jawt_ltlibrary =\n endif\n \n toolexeclib_LTLIBRARIES = libgcj.la libgij.la \\\n-    $(cond_gtk_ltlibrary) $(cond_xlib_ltlibrary)\n+    $(cond_gtk_ltlibrary) $(cond_gtk_jawt_ltlibrary) $(cond_xlib_ltlibrary)\n toolexecmainlib_DATA = libgcj.spec\n \n pkgconfigdir = $(libdir)/pkgconfig\n@@ -290,6 +292,7 @@ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c\t\\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c \\\n jni/gtk-peer/gthread-jni.c \\\n+jni/gtk-peer/gtk_jawt.c \\\n jni/classpath/jcl.c \\\n jni/classpath/jnilink.c\t\\\n jni/classpath/native_state.c \\\n@@ -460,6 +463,14 @@ lib_gnu_java_awt_peer_gtk_la_LDFLAGS = \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n lib_gnu_java_awt_peer_gtk_la_LINK = $(LIBLINK)\n \n+libjawt_la_SOURCES = jawt.c\n+libjawt_la_CFLAGS = -I$(srcdir)/jni/classpath $(PEDANTIC_CFLAGS) $(X_CFLAGS)\n+libjawt_la_LIBADD = lib-gnu-java-awt-peer-gtk.la\n+libjawt_la_LDFLAGS = \\\n+\t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n+\t$(LIBGCJ_LD_SYMBOLIC)\n+libjawt_la_LINK = $(LIBLINK)\n+\n lib_gnu_awt_xlib_la_SOURCES = \\\n \t$(xlib_java_source_files) \\\n \t$(xlib_nat_source_files)"}, {"sha": "064da74452c2e73777bb5b2908f4e92b0a567cea", "filename": "libjava/Makefile.in", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -17,7 +17,7 @@\n \n \n \n-SOURCES = $(lib_gnu_awt_xlib_la_SOURCES) $(lib_gnu_java_awt_peer_gtk_la_SOURCES) $(libgcj_la_SOURCES) $(libgij_la_SOURCES) $(gcj_dbtool_SOURCES) $(gen_from_JIS_SOURCES) $(gij_SOURCES) $(grmic_SOURCES) $(grmiregistry_SOURCES) $(jv_convert_SOURCES)\n+SOURCES = $(lib_gnu_awt_xlib_la_SOURCES) $(lib_gnu_java_awt_peer_gtk_la_SOURCES) $(libgcj_la_SOURCES) $(libgij_la_SOURCES) $(libjawt_la_SOURCES) $(gcj_dbtool_SOURCES) $(gen_from_JIS_SOURCES) $(gij_SOURCES) $(grmic_SOURCES) $(grmiregistry_SOURCES) $(jv_convert_SOURCES)\n \n srcdir = @srcdir@\n top_srcdir = @top_srcdir@\n@@ -59,7 +59,16 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../compile \\\n \tChangeLog NEWS THANKS\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/accross.m4 \\\n+\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/gcc-version.m4 \\\n+\t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n+\t$(top_srcdir)/../config/lcmessage.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 $(top_srcdir)/pkg.m4 \\\n+\t$(top_srcdir)/acinclude.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n@@ -213,12 +222,12 @@ am__lib_gnu_java_awt_peer_gtk_la_SOURCES_DIST =  \\\n \tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c \\\n \tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c \\\n \tjni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c \\\n-\tjni/gtk-peer/gthread-jni.c jni/classpath/jcl.c \\\n-\tjni/classpath/jnilink.c jni/classpath/native_state.c \\\n-\tjni/classpath/primlib.c jni/gtk-peer/gthread-jni.h \\\n-\tjni/gtk-peer/gtkpeer.h jni/classpath/jcl.h \\\n-\tjni/classpath/jnilink.h jni/classpath/native_state.h \\\n-\tjni/classpath/primlib.h\n+\tjni/gtk-peer/gthread-jni.c jni/gtk-peer/gtk_jawt.c \\\n+\tjni/classpath/jcl.c jni/classpath/jnilink.c \\\n+\tjni/classpath/native_state.c jni/classpath/primlib.c \\\n+\tjni/gtk-peer/gthread-jni.h jni/gtk-peer/gtkpeer.h \\\n+\tjni/classpath/jcl.h jni/classpath/jnilink.h \\\n+\tjni/classpath/native_state.h jni/classpath/primlib.h\n am__objects_3 = gnu/java/awt/peer/gtk/lib_gnu_java_awt_peer_gtk_la-GdkTextLayout.lo \\\n \tgnu/java/awt/peer/gtk/lib_gnu_java_awt_peer_gtk_la-GdkFontMetrics.lo \\\n \tgnu/java/awt/peer/gtk/lib_gnu_java_awt_peer_gtk_la-GdkFontPeer.lo \\\n@@ -303,6 +312,7 @@ am__objects_5 = $(am__objects_4) \\\n \tjni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkWindowPeer.lo \\\n \tjni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.lo \\\n \tjni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.lo \\\n+\tjni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo \\\n \tjni/classpath/lib_gnu_java_awt_peer_gtk_la-jcl.lo \\\n \tjni/classpath/lib_gnu_java_awt_peer_gtk_la-jnilink.lo \\\n \tjni/classpath/lib_gnu_java_awt_peer_gtk_la-native_state.lo \\\n@@ -4586,6 +4596,10 @@ am_libgcj_la_OBJECTS = prims.lo jni.lo exception.lo link.lo \\\n libgcj_la_OBJECTS = $(am_libgcj_la_OBJECTS)\n am_libgij_la_OBJECTS = gij.lo\n libgij_la_OBJECTS = $(am_libgij_la_OBJECTS)\n+libjawt_la_DEPENDENCIES = lib-gnu-java-awt-peer-gtk.la\n+am_libjawt_la_OBJECTS = libjawt_la-jawt.lo\n+libjawt_la_OBJECTS = $(am_libjawt_la_OBJECTS)\n+@GTK_AWT_TRUE@am_libjawt_la_rpath = -rpath $(toolexeclibdir)\n binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)\n PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)\n am_gcj_dbtool_OBJECTS = gnu/gcj/tools/gcj_dbtool/Main.$(OBJEXT)\n@@ -4631,15 +4645,15 @@ LTGCJCOMPILE = $(LIBTOOL) --mode=compile $(GCJ) $(AM_GCJFLAGS) \\\n GCJLD = $(GCJ)\n SOURCES = $(lib_gnu_awt_xlib_la_SOURCES) \\\n \t$(lib_gnu_java_awt_peer_gtk_la_SOURCES) $(libgcj_la_SOURCES) \\\n-\t$(libgij_la_SOURCES) $(gcj_dbtool_SOURCES) \\\n-\t$(gen_from_JIS_SOURCES) $(gij_SOURCES) $(grmic_SOURCES) \\\n-\t$(grmiregistry_SOURCES) $(jv_convert_SOURCES)\n+\t$(libgij_la_SOURCES) $(libjawt_la_SOURCES) \\\n+\t$(gcj_dbtool_SOURCES) $(gen_from_JIS_SOURCES) $(gij_SOURCES) \\\n+\t$(grmic_SOURCES) $(grmiregistry_SOURCES) $(jv_convert_SOURCES)\n DIST_SOURCES = $(lib_gnu_awt_xlib_la_SOURCES) \\\n \t$(am__lib_gnu_java_awt_peer_gtk_la_SOURCES_DIST) \\\n \t$(am__libgcj_la_SOURCES_DIST) $(libgij_la_SOURCES) \\\n-\t$(gcj_dbtool_SOURCES) $(am__gen_from_JIS_SOURCES_DIST) \\\n-\t$(gij_SOURCES) $(grmic_SOURCES) $(grmiregistry_SOURCES) \\\n-\t$(jv_convert_SOURCES)\n+\t$(libjawt_la_SOURCES) $(gcj_dbtool_SOURCES) \\\n+\t$(am__gen_from_JIS_SOURCES_DIST) $(gij_SOURCES) \\\n+\t$(grmic_SOURCES) $(grmiregistry_SOURCES) $(jv_convert_SOURCES)\n RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n \thtml-recursive info-recursive install-data-recursive \\\n \tinstall-exec-recursive install-info-recursive \\\n@@ -4740,11 +4754,13 @@ LIBGCJ_CFLAGS = @LIBGCJ_CFLAGS@\n LIBGCJ_CXXFLAGS = @LIBGCJ_CXXFLAGS@\n LIBGCJ_JAVAFLAGS = @LIBGCJ_JAVAFLAGS@\n LIBGCJ_LD_SYMBOLIC = @LIBGCJ_LD_SYMBOLIC@\n+LIBICONV = @LIBICONV@\n LIBLTDL = @LIBLTDL@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\n@@ -4767,6 +4783,7 @@ PANGOFT2_CFLAGS = @PANGOFT2_CFLAGS@\n PANGOFT2_LIBS = @PANGOFT2_LIBS@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n PERL = @PERL@\n+PKG_CONFIG = @PKG_CONFIG@\n PLATFORM_INNER_NAT_HDRS = @PLATFORM_INNER_NAT_HDRS@\n RANLIB = @RANLIB@\n SET_MAKE = @SET_MAKE@\n@@ -4844,6 +4861,10 @@ build_os = @build_os@\n build_vendor = @build_vendor@\n datadir = @datadir@\n exec_prefix = @exec_prefix@\n+gcc_version = @gcc_version@\n+gcc_version_full = @gcc_version_full@\n+gcc_version_trigger = @gcc_version_trigger@\n+gxx_include_dir = @gxx_include_dir@\n here = @here@\n host = @host@\n host_alias = @host_alias@\n@@ -4856,6 +4877,7 @@ install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libgcj_basedir = @libgcj_basedir@\n+libstdcxx_incdir = @libstdcxx_incdir@\n localstatedir = @localstatedir@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n@@ -4916,8 +4938,10 @@ write_entries_to_file = $(shell rm -f $(2) || :) $(shell touch $(2)) $(foreach o\n @XLIB_AWT_TRUE@cond_xlib_ltlibrary = lib-gnu-awt-xlib.la\n @GTK_AWT_FALSE@cond_gtk_ltlibrary = \n @GTK_AWT_TRUE@cond_gtk_ltlibrary = lib-gnu-java-awt-peer-gtk.la\n+@GTK_AWT_FALSE@cond_gtk_jawt_ltlibrary = \n+@GTK_AWT_TRUE@cond_gtk_jawt_ltlibrary = libjawt.la\n toolexeclib_LTLIBRARIES = libgcj.la libgij.la \\\n-    $(cond_gtk_ltlibrary) $(cond_xlib_ltlibrary)\n+    $(cond_gtk_ltlibrary) $(cond_gtk_jawt_ltlibrary) $(cond_xlib_ltlibrary)\n \n toolexecmainlib_DATA = libgcj.spec\n pkgconfigdir = $(libdir)/pkgconfig\n@@ -5046,6 +5070,7 @@ jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c\t\\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c \\\n jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c \\\n jni/gtk-peer/gthread-jni.c \\\n+jni/gtk-peer/gtk_jawt.c \\\n jni/classpath/jcl.c \\\n jni/classpath/jnilink.c\t\\\n jni/classpath/native_state.c \\\n@@ -5119,6 +5144,14 @@ lib_gnu_java_awt_peer_gtk_la_LDFLAGS = \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(LIBGCJ_LD_SYMBOLIC)\n \n lib_gnu_java_awt_peer_gtk_la_LINK = $(LIBLINK)\n+libjawt_la_SOURCES = jawt.c\n+libjawt_la_CFLAGS = -I$(srcdir)/jni/classpath $(PEDANTIC_CFLAGS) $(X_CFLAGS)\n+libjawt_la_LIBADD = lib-gnu-java-awt-peer-gtk.la\n+libjawt_la_LDFLAGS = \\\n+\t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n+\t$(LIBGCJ_LD_SYMBOLIC)\n+\n+libjawt_la_LINK = $(LIBLINK)\n lib_gnu_awt_xlib_la_SOURCES = \\\n \t$(xlib_java_source_files) \\\n \t$(xlib_nat_source_files)\n@@ -8418,6 +8451,9 @@ jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GThreadNativeMet\n jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.lo:  \\\n \tjni/gtk-peer/$(am__dirstamp) \\\n \tjni/gtk-peer/$(DEPDIR)/$(am__dirstamp)\n+jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo:  \\\n+\tjni/gtk-peer/$(am__dirstamp) \\\n+\tjni/gtk-peer/$(DEPDIR)/$(am__dirstamp)\n jni/classpath/$(am__dirstamp):\n \t@$(mkdir_p) jni/classpath\n \t@: > jni/classpath/$(am__dirstamp)\n@@ -15614,6 +15650,8 @@ sysdep/dwarf2-backtrace.lo: sysdep/$(am__dirstamp) \\\n \tsysdep/$(DEPDIR)/$(am__dirstamp)\n libgij.la: $(libgij_la_OBJECTS) $(libgij_la_DEPENDENCIES) \n \t$(CXXLINK) -rpath $(toolexeclibdir) $(libgij_la_LDFLAGS) $(libgij_la_OBJECTS) $(libgij_la_LIBADD) $(LIBS)\n+libjawt.la: $(libjawt_la_OBJECTS) $(libjawt_la_DEPENDENCIES) \n+\t$(libjawt_la_LINK) $(am_libjawt_la_rpath) $(libjawt_la_LDFLAGS) $(libjawt_la_OBJECTS) $(libjawt_la_LIBADD) $(LIBS)\n install-binPROGRAMS: $(bin_PROGRAMS)\n \t@$(NORMAL_INSTALL)\n \ttest -z \"$(bindir)\" || $(mkdir_p) \"$(DESTDIR)$(bindir)\"\n@@ -21200,6 +21238,8 @@ mostlyclean-compile:\n \t-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkWindowPeer.lo\n \t-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.$(OBJEXT)\n \t-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.lo\n+\t-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.$(OBJEXT)\n+\t-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo\n \t-rm -f org/ietf/jgss/ChannelBinding.$(OBJEXT)\n \t-rm -f org/ietf/jgss/ChannelBinding.lo\n \t-rm -f org/ietf/jgss/GSSContext.$(OBJEXT)\n@@ -21229,6 +21269,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gij.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/interpret.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/jni.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libjawt_la-jawt.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/link.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/no-threads.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nogc.Plo@am__quote@\n@@ -23988,6 +24029,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkToolkit.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkWindowPeer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gthread-jni.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@org/ietf/jgss/$(DEPDIR)/ChannelBinding.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@org/ietf/jgss/$(DEPDIR)/GSSContext.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@org/ietf/jgss/$(DEPDIR)/GSSCredential.Plo@am__quote@\n@@ -24302,6 +24344,13 @@ jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.lo: jni/gtk-peer/gthread-j\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gthread-jni.lo `test -f 'jni/gtk-peer/gthread-jni.c' || echo '$(srcdir)/'`jni/gtk-peer/gthread-jni.c\n \n+jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo: jni/gtk-peer/gtk_jawt.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -MT jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo -MD -MP -MF \"jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.Tpo\" -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo `test -f 'jni/gtk-peer/gtk_jawt.c' || echo '$(srcdir)/'`jni/gtk-peer/gtk_jawt.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.Tpo\" \"jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.Plo\"; else rm -f \"jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='jni/gtk-peer/gtk_jawt.c' object='jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gtk_jawt.lo `test -f 'jni/gtk-peer/gtk_jawt.c' || echo '$(srcdir)/'`jni/gtk-peer/gtk_jawt.c\n+\n jni/classpath/lib_gnu_java_awt_peer_gtk_la-jcl.lo: jni/classpath/jcl.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -MT jni/classpath/lib_gnu_java_awt_peer_gtk_la-jcl.lo -MD -MP -MF \"jni/classpath/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-jcl.Tpo\" -c -o jni/classpath/lib_gnu_java_awt_peer_gtk_la-jcl.lo `test -f 'jni/classpath/jcl.c' || echo '$(srcdir)/'`jni/classpath/jcl.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"jni/classpath/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-jcl.Tpo\" \"jni/classpath/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-jcl.Plo\"; else rm -f \"jni/classpath/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-jcl.Tpo\"; exit 1; fi\n@@ -24330,6 +24379,13 @@ jni/classpath/lib_gnu_java_awt_peer_gtk_la-primlib.lo: jni/classpath/primlib.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/classpath/lib_gnu_java_awt_peer_gtk_la-primlib.lo `test -f 'jni/classpath/primlib.c' || echo '$(srcdir)/'`jni/classpath/primlib.c\n \n+libjawt_la-jawt.lo: jawt.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libjawt_la_CFLAGS) $(CFLAGS) -MT libjawt_la-jawt.lo -MD -MP -MF \"$(DEPDIR)/libjawt_la-jawt.Tpo\" -c -o libjawt_la-jawt.lo `test -f 'jawt.c' || echo '$(srcdir)/'`jawt.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/libjawt_la-jawt.Tpo\" \"$(DEPDIR)/libjawt_la-jawt.Plo\"; else rm -f \"$(DEPDIR)/libjawt_la-jawt.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='jawt.c' object='libjawt_la-jawt.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libjawt_la_CFLAGS) $(CFLAGS) -c -o libjawt_la-jawt.lo `test -f 'jawt.c' || echo '$(srcdir)/'`jawt.c\n+\n .cc.o:\n @am__fastdepCXX_TRUE@\tdepbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\\.o$$||'`; \\\n @am__fastdepCXX_TRUE@\tif $(CXXCOMPILE) -MT $@ -MD -MP -MF \"$$depbase.Tpo\" -c -o $@ $<; \\"}, {"sha": "089884b5fbd5876952f60eb5a32fbd3b7f5ba3ee", "filename": "libjava/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.am?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -5,4 +5,4 @@ AUTOMAKE_OPTIONS = foreign\n # autoconf2.13's target_alias\n target_noncanonical = @target_noncanonical@\n \n-tool_include__HEADERS = jni.h jvmpi.h\n+tool_include__HEADERS = jni.h jawt.h jawt_md.h jvmpi.h"}, {"sha": "4c05fcedf5e6e9e0e1279dbf36d05b32caad3fa6", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -296,7 +296,7 @@ toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n toolexecmainlibdir = @toolexecmainlibdir@\n AUTOMAKE_OPTIONS = foreign\n-tool_include__HEADERS = jni.h jvmpi.h\n+tool_include__HEADERS = jni.h jawt.h jawt_md.h jvmpi.h\n all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-am\n "}, {"sha": "52cde838e69420c10f9351e9c124f9b7fea9e477", "filename": "libjava/include/jawt.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2Fjawt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2Fjawt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjawt.h?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -0,0 +1,92 @@\n+/* jawt.h -- the machine-independent parts of the AWT Native Interface\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+ \n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n+\n+\n+/*\n+ * The AWT Native Interface allows direct access to native screen\n+ * resources from within a Canvas's paint method.\n+ */\n+\n+#ifndef __jawt_h__\n+#define __jawt_h__\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+#define JAWT_VERSION_1_3 0x10003\n+\n+#define JAWT_LOCK_ERROR 0x1\n+\n+struct _JAWT_DrawingSurfaceInfo\n+{\n+  void* platformInfo;\n+};\n+\n+struct _JAWT_DrawingSurface\n+{\n+  jint (JNICALL* Lock) (struct _JAWT_DrawingSurface*);\n+  void (JNICALL* Unlock) (struct _JAWT_DrawingSurface*);\n+\n+  struct _JAWT_DrawingSurfaceInfo* (JNICALL* GetDrawingSurfaceInfo) (struct _JAWT_DrawingSurface*);\n+  void (JNICALL* FreeDrawingSurfaceInfo) (struct _JAWT_DrawingSurfaceInfo*);\n+\n+  struct _JAWT_DrawingSurfaceInfo* surface_info;\n+\n+  /* FIXME: also include bounding rectangle of drawing surface. */\n+  /* FIXME: also include current clipping region. */\n+};\n+\n+struct _JAWT\n+{\n+  jint version;\n+  struct _JAWT_DrawingSurface* (JNICALL* GetDrawingSurface) (JNIEnv*, jobject);\n+  void (JNICALL* FreeDrawingSurface) (struct _JAWT_DrawingSurface*);\n+};\n+\n+typedef struct _JAWT_DrawingSurfaceInfo JAWT_DrawingSurfaceInfo;\n+typedef struct _JAWT_DrawingSurface JAWT_DrawingSurface;\n+typedef struct _JAWT JAWT;\n+\n+JNIEXPORT jboolean JNICALL JAWT_GetAWT (JNIEnv* env, struct _JAWT* awt);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __jawt_h__ */"}, {"sha": "94abb57863bfe8046a591f91cb54f028ae19dd06", "filename": "libjava/include/jawt_md.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2Fjawt_md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Finclude%2Fjawt_md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjawt_md.h?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -0,0 +1,63 @@\n+/* jawt_md.h -- the X11-dependent parts of the AWT Native Interface\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+ \n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n+\n+\n+#ifndef __jawt_md_h__\n+#define __jawt_md_h__\n+\n+#include <jni.h>\n+#include <jawt.h>\n+#include <X11/Xlib.h>\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+struct _JAWT_X11DrawingSurfaceInfo\n+{\n+  Display* display;\n+  Drawable drawable;\n+};\n+\n+typedef struct _JAWT_X11DrawingSurfaceInfo JAWT_X11DrawingSurfaceInfo;\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __jawt_md_h__ */"}, {"sha": "08cd78cd581d54074a27997ffb8df18098cf3acc", "filename": "libjava/jawt.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjawt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjawt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjawt.c?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -0,0 +1,156 @@\n+/* jawt.c -- X11 implementation of the AWT Native Interface\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+ \n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n+\n+\n+#include <jni.h>\n+#include <jawt.h>\n+#include <jawt_md.h>\n+#include \"classpath_jawt.h\"\n+\n+static jint (JNICALL _Jv_Lock) (JAWT_DrawingSurface* surface);\n+static void (JNICALL _Jv_Unlock) (JAWT_DrawingSurface* surface);\n+static JAWT_DrawingSurfaceInfo* (JNICALL _Jv_GetDrawingSurfaceInfo)\n+     (JAWT_DrawingSurface* surface);\n+static void (JNICALL _Jv_FreeDrawingSurfaceInfo)\n+     (JAWT_DrawingSurfaceInfo* surface_info);\n+static JAWT_DrawingSurface* (JNICALL _Jv_GetDrawingSurface) (JNIEnv* env,\n+\t\t\t\t\t\t\t     jobject canvas);\n+static void (JNICALL _Jv_FreeDrawingSurface) (JAWT_DrawingSurface* surface);\n+\n+JNIEXPORT jboolean JNICALL\n+JAWT_GetAWT (JNIEnv* env, JAWT* awt)\n+{\n+  jint retrieved_version;\n+\n+  retrieved_version = classpath_jawt_get_awt_version ();\n+\n+  if (awt->version > retrieved_version)\n+    return JNI_FALSE;\n+\n+  awt->GetDrawingSurface = _Jv_GetDrawingSurface;\n+  awt->FreeDrawingSurface = _Jv_FreeDrawingSurface;\n+\n+  return JNI_TRUE;\n+}\n+\n+/* JAWT_DrawingSurface functions */\n+\n+static jint\n+(JNICALL _Jv_Lock) (JAWT_DrawingSurface* surface)\n+{\n+  /* lock the drawing surface */\n+  return classpath_jawt_lock ();\n+}\n+\n+static void\n+(JNICALL _Jv_Unlock) (JAWT_DrawingSurface* surface)\n+{\n+  classpath_jawt_unlock ();\n+}\n+\n+static JAWT_DrawingSurfaceInfo*\n+(JNICALL _Jv_GetDrawingSurfaceInfo) (JAWT_DrawingSurface* surface)\n+{\n+  if (surface == NULL)\n+    return NULL;\n+\n+  return surface->surface_info;\n+}\n+\n+static void\n+(JNICALL _Jv_FreeDrawingSurfaceInfo) (JAWT_DrawingSurfaceInfo* surface_info)\n+{\n+  JAWT_X11DrawingSurfaceInfo* surface_info_x11;\n+\n+  if (surface_info == NULL)\n+    return;\n+\n+  surface_info_x11 = (JAWT_X11DrawingSurfaceInfo*) surface_info->platformInfo;\n+\n+  surface_info_x11->display = NULL;\n+  surface_info_x11->drawable = 0;\n+\n+  free (surface_info);\n+  surface_info = NULL;\n+}\n+\n+/* JAWT functions */\n+\n+static JAWT_DrawingSurface*\n+(JNICALL _Jv_GetDrawingSurface) (JNIEnv* env, jobject canvas)\n+{\n+  JAWT_DrawingSurface* surface;\n+  JAWT_X11DrawingSurfaceInfo* surface_info_x11;\n+\n+  surface = (JAWT_DrawingSurface*) malloc (sizeof (JAWT_DrawingSurface));\n+\n+  if (surface == NULL)\n+    return NULL;\n+\n+  /* initialize function pointers */\n+  surface->GetDrawingSurfaceInfo = _Jv_GetDrawingSurfaceInfo;\n+  surface->FreeDrawingSurfaceInfo = _Jv_FreeDrawingSurfaceInfo;\n+\n+  surface->Lock = _Jv_Lock;\n+  surface->Unlock = _Jv_Unlock;\n+\n+  surface->surface_info = (JAWT_DrawingSurfaceInfo*) malloc (sizeof (JAWT_DrawingSurfaceInfo));\n+\n+  if (surface->surface_info == NULL)\n+    return NULL;\n+\n+  surface->surface_info->platformInfo = malloc (sizeof (JAWT_X11DrawingSurfaceInfo));\n+\n+  if (surface->surface_info->platformInfo == NULL)\n+    return NULL;\n+\n+  surface_info_x11 = (JAWT_X11DrawingSurfaceInfo*) surface->surface_info->platformInfo;\n+\n+  surface_info_x11->display = classpath_jawt_get_default_display (env, canvas);\n+  surface_info_x11->drawable = classpath_jawt_get_drawable (env, canvas);\n+\n+  /* FIXME: also include bounding rectangle of drawing surface */\n+  /* FIXME: also include current clipping region */\n+\n+  return surface;\n+}\n+\n+static void\n+(JNICALL _Jv_FreeDrawingSurface) (JAWT_DrawingSurface* surface)\n+{\n+  free (surface);\n+}"}, {"sha": "51e6af3ea1d93187a73c78b2ff42bb44bcb2f7d4", "filename": "libjava/jni/classpath/classpath_jawt.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjni%2Fclasspath%2Fclasspath_jawt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjni%2Fclasspath%2Fclasspath_jawt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fclasspath_jawt.h?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -0,0 +1,59 @@\n+/* classpath_awt.h -- libjawt's interface to the peer library\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+ \n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n+\n+/*\n+ * libjawt.so is linked directly to the peer library with -l.  This\n+ * header declares all the functions that libjawt.so needs -- X-based\n+ * peer libraries wanting to support libjawt.so must implement these\n+ * functions.\n+ */\n+\n+#ifndef __classpath_jawt_h__\n+#define __classpath_jawt_h__\n+\n+#include <jni.h>\n+#include <X11/Xlib.h>\n+\n+#define CLASSPATH_JAWT_VERSION 0x10004\n+\n+jint     classpath_jawt_get_awt_version ();\n+Display* classpath_jawt_get_default_display (JNIEnv* env, jobject canvas);\n+Drawable classpath_jawt_get_drawable (JNIEnv* env, jobject canvas);\n+jint     classpath_jawt_lock ();\n+void     classpath_jawt_unlock ();\n+\n+#endif /* __classpath_jawt_h__ */"}, {"sha": "6a12fc7954cc47193f683568c1134ed3cfbe5565", "filename": "libjava/jni/gtk-peer/gtk_jawt.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjni%2Fgtk-peer%2Fgtk_jawt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36eda5462a917b6b23c07fa0ac1752cf830a29d/libjava%2Fjni%2Fgtk-peer%2Fgtk_jawt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtk_jawt.c?ref=c36eda5462a917b6b23c07fa0ac1752cf830a29d", "patch": "@@ -0,0 +1,132 @@\n+/* gtk_jawt.c -- GTK implementation of classpath_jawt.h\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include <gtk/gtk.h>\n+#include <gdk/gdkx.h>\n+#include \"classpath_jawt.h\"\n+\n+jint\n+classpath_jawt_get_awt_version ()\n+{\n+  return CLASSPATH_JAWT_VERSION;\n+}\n+\n+Display*\n+classpath_jawt_get_default_display (JNIEnv* env, jobject canvas)\n+{\n+  GdkDisplay *display;\n+  Display *xdisplay;\n+  GtkWidget *widget;\n+  void *ptr;\n+  jobject peer;\n+  jclass class_id;\n+  jmethodID method_id;\n+\n+  /* retrieve peer object */\n+  class_id = (*env)->GetObjectClass (env, canvas);\n+\n+  method_id = (*env)->GetMethodID (env, class_id,\n+\t\t\t\t   \"getPeer\",\n+\t\t\t\t   \"()Ljava/awt/peer/ComponentPeer;\");\n+\n+  peer = (*env)->CallObjectMethod (env, canvas, method_id);\n+\n+  ptr = NSA_GET_PTR (env, peer);\n+\n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET (ptr);\n+\n+  /* widget should be realized before Canvas.paint is called. */\n+  g_assert (GTK_WIDGET_REALIZED (widget));\n+\n+  display = gtk_widget_get_display (widget);\n+\n+  xdisplay = GDK_DISPLAY_XDISPLAY (display);\n+\n+  gdk_threads_leave ();\n+\n+  return xdisplay;\n+}\n+\n+Drawable\n+classpath_jawt_get_drawable (JNIEnv* env, jobject canvas)\n+{\n+  GtkWidget *widget;\n+  int drawable;\n+  void *ptr;\n+  jobject peer;\n+  jclass class_id;\n+  jmethodID method_id;\n+\n+  class_id = (*env)->GetObjectClass (env, canvas);\n+\n+  method_id = (*env)->GetMethodID (env, class_id,\n+\t\t\t\t   \"getPeer\",\n+\t\t\t\t   \"()Ljava/awt/peer/ComponentPeer;\");\n+\n+  peer = (*env)->CallObjectMethod (env, canvas, method_id);\n+\n+  ptr = NSA_GET_PTR (env, peer);\n+\n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET (ptr);\n+\n+  g_assert (GTK_WIDGET_REALIZED (widget));\n+\n+  drawable = GDK_DRAWABLE_XID (widget->window);\n+\n+  gdk_threads_leave ();\n+\n+  return drawable;\n+}\n+\n+jint\n+classpath_jawt_lock ()\n+{\n+  gdk_threads_enter ();\n+  return 0;\n+}\n+\n+void\n+classpath_jawt_unlock ()\n+{\n+  gdk_threads_leave ();\n+}"}]}