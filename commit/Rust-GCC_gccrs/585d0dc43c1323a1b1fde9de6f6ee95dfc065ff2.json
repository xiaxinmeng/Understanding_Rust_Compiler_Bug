{"sha": "585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1ZDBkYzQzYzEzMjNhMWIxZmRlOWRlNmY2ZWU5NWRmYzA2NWZmMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-10-08T11:55:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-08T11:55:13Z"}, "message": "tree-ssa-pre.c (postorder_num): New global.\n\n2012-10-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (postorder_num): New global.\n\t(compute_antic): Initialize all blocks and adjust for\n\tgeneric postorder.\n\t(my_rev_post_order_compute): Remove.\n\t(init_pre): Use inverted_post_order_compute.\n\nFrom-SVN: r192204", "tree": {"sha": "70dff88a3752d2538371f4e3047ad9cd8776929f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70dff88a3752d2538371f4e3047ad9cd8776929f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc"}], "stats": {"total": 94, "additions": 14, "deletions": 80}, "files": [{"sha": "f1e815e3f0b4649063e2529830fba96e90349b4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "patch": "@@ -1,3 +1,11 @@\n+2012-10-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (postorder_num): New global.\n+\t(compute_antic): Initialize all blocks and adjust for\n+\tgeneric postorder.\n+\t(my_rev_post_order_compute): Remove.\n+\t(init_pre): Use inverted_post_order_compute.\n+\n 2012-10-08  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* sched-int.h (schedule_block): Adjust declaration."}, {"sha": "5feed3b5153178929ab51390504b21b4587c671c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 80, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=585d0dc43c1323a1b1fde9de6f6ee95dfc065ff2", "patch": "@@ -430,6 +430,7 @@ typedef struct bb_bitmap_sets\n \n /* Basic block list in postorder.  */\n static int *postorder;\n+static int postorder_num;\n \n /* This structure is used to keep track of statistics on what\n    optimization PRE was able to perform.  */\n@@ -2456,7 +2457,7 @@ compute_antic (void)\n   has_abnormal_preds = sbitmap_alloc (last_basic_block);\n   sbitmap_zero (has_abnormal_preds);\n \n-  FOR_EACH_BB (block)\n+  FOR_ALL_BB (block)\n     {\n       edge_iterator ei;\n       edge e;\n@@ -2480,9 +2481,7 @@ compute_antic (void)\n     }\n \n   /* At the exit block we anticipate nothing.  */\n-  ANTIC_IN (EXIT_BLOCK_PTR) = bitmap_set_new ();\n   BB_VISITED (EXIT_BLOCK_PTR) = 1;\n-  PA_IN (EXIT_BLOCK_PTR) = bitmap_set_new ();\n \n   changed_blocks = sbitmap_alloc (last_basic_block + 1);\n   sbitmap_ones (changed_blocks);\n@@ -2496,7 +2495,7 @@ compute_antic (void)\n \t for PA ANTIC computation.  */\n       num_iterations++;\n       changed = false;\n-      for (i = n_basic_blocks - NUM_FIXED_BLOCKS - 1; i >= 0; i--)\n+      for (i = postorder_num - 1; i >= 0; i--)\n \t{\n \t  if (TEST_BIT (changed_blocks, postorder[i]))\n \t    {\n@@ -2525,7 +2524,7 @@ compute_antic (void)\n \t    fprintf (dump_file, \"Starting iteration %d\\n\", num_iterations);\n \t  num_iterations++;\n \t  changed = false;\n-\t  for (i = n_basic_blocks - NUM_FIXED_BLOCKS - 1 ; i >= 0; i--)\n+\t  for (i = postorder_num - 1 ; i >= 0; i--)\n \t    {\n \t      if (TEST_BIT (changed_blocks, postorder[i]))\n \t\t{\n@@ -4593,78 +4592,6 @@ remove_dead_inserted_code (void)\n   BITMAP_FREE (worklist);\n }\n \n-/* Compute a reverse post-order in *POST_ORDER.  If INCLUDE_ENTRY_EXIT is\n-   true, then then ENTRY_BLOCK and EXIT_BLOCK are included.  Returns\n-   the number of visited blocks.  */\n-\n-static int\n-my_rev_post_order_compute (int *post_order, bool include_entry_exit)\n-{\n-  edge_iterator *stack;\n-  int sp;\n-  int post_order_num = 0;\n-  sbitmap visited;\n-\n-  if (include_entry_exit)\n-    post_order[post_order_num++] = EXIT_BLOCK;\n-\n-  /* Allocate stack for back-tracking up CFG.  */\n-  stack = XNEWVEC (edge_iterator, n_basic_blocks + 1);\n-  sp = 0;\n-\n-  /* Allocate bitmap to track nodes that have been visited.  */\n-  visited = sbitmap_alloc (last_basic_block);\n-\n-  /* None of the nodes in the CFG have been visited yet.  */\n-  sbitmap_zero (visited);\n-\n-  /* Push the last edge on to the stack.  */\n-  stack[sp++] = ei_start (EXIT_BLOCK_PTR->preds);\n-\n-  while (sp)\n-    {\n-      edge_iterator ei;\n-      basic_block src;\n-      basic_block dest;\n-\n-      /* Look at the edge on the top of the stack.  */\n-      ei = stack[sp - 1];\n-      src = ei_edge (ei)->src;\n-      dest = ei_edge (ei)->dest;\n-\n-      /* Check if the edge source has been visited yet.  */\n-      if (src != ENTRY_BLOCK_PTR && ! TEST_BIT (visited, src->index))\n-        {\n-          /* Mark that we have visited the destination.  */\n-          SET_BIT (visited, src->index);\n-\n-          if (EDGE_COUNT (src->preds) > 0)\n-            /* Since the SRC node has been visited for the first\n-               time, check its predecessors.  */\n-            stack[sp++] = ei_start (src->preds);\n-          else\n-            post_order[post_order_num++] = src->index;\n-        }\n-      else\n-        {\n-          if (ei_one_before_end_p (ei) && dest != EXIT_BLOCK_PTR)\n-            post_order[post_order_num++] = dest->index;\n-\n-          if (!ei_one_before_end_p (ei))\n-            ei_next (&stack[sp - 1]);\n-          else\n-            sp--;\n-        }\n-    }\n-\n-  if (include_entry_exit)\n-    post_order[post_order_num++] = ENTRY_BLOCK;\n-\n-  free (stack);\n-  sbitmap_free (visited);\n-  return post_order_num;\n-}\n-\n \n /* Initialize data structures used by PRE.  */\n \n@@ -4686,9 +4613,8 @@ init_pre (void)\n   connect_infinite_loops_to_exit ();\n   memset (&pre_stats, 0, sizeof (pre_stats));\n \n-\n-  postorder = XNEWVEC (int, n_basic_blocks - NUM_FIXED_BLOCKS);\n-  my_rev_post_order_compute (postorder, false);\n+  postorder = XNEWVEC (int, n_basic_blocks);\n+  postorder_num = inverted_post_order_compute (postorder);\n \n   alloc_aux_for_blocks (sizeof (struct bb_bitmap_sets));\n "}]}