{"sha": "ff473280054c876499089772cea1a5fc56970d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0NzMyODAwNTRjODc2NDk5MDg5NzcyY2VhMWE1ZmM1Njk3MGQ2NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-07-02T15:59:19Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-07-02T15:59:19Z"}, "message": "re PR target/36669 (Wrong versioning for __float128)\n\ngcc/\n\n2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/36669\n\t* config/libgcc-glibc.ver: Add %exclude.\n\t* config/m32r/libgcc-glibc.ver: Likwise.\n\t* config/s390/libgcc-glibc.ver: Likwise.\n\t* config/sh/libgcc-glibc.ver: Likwise.\n\t* config/sparc/libgcc-sparc-glibc.ver: Likwise.\n\n\t* config/i386/libgcc-glibc.ver: New.\n\n\t* config/i386/libgcc-x86_64-glibc.ver: Removed.\n\n2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc: Remove i386/t-fprules-softfp64 soft-fp/t-softfp\n\tfrom tmake_file from i[34567]86-*-darwin*, x86_64-*-darwin*,\n\ti[34567]86-*-linux*, x86_64-*-linux*.  Add\n\ti386/t-fprules-softfp and soft-fp/t-softfp to tmake_file for\n\ti[34567]86-*-darwin*, x86_64-*-darwin*, i[34567]86-*-linux*,\n\tx86_64-*-linux*.  Add i386/t-linux to tmake_file for\n\ti[34567]86-*-linux*, x86_64-*-linux*.\n\n\t* libgcc-std.ver: Add empty GCC_4.4.0.\n\n\t* mkmap-symver.awk: Support multiple versions per symbol.\n\n\t* config/i386/i386.c (ix86_init_builtins): Always define\n\t__builtin_fabsq and __builtin_copysignq with fallbacks.\n\t(ix86_expand_builtin): Emit normal call for __builtin_fabsq\n\tand __builtin_copysignq if SSE2 isn't available.\n\n\t* config/i386/linux.h (LIBGCC2_HAS_TF_MODE): Defined.\n\t(LIBGCC2_TF_CEXT): Likwise.\n\t(TF_SIZE): Likwise.\n\n\t* config/i386/linux64.h (LIBGCC2_HAS_TF_MODE): Defined as 1.\n\n\t* config/i386/sfp-machine.h: Moved to libgcc.\n\n\t* config/i386/sfp-machine.h: New.\n\t* config/i386/t-linux: Likwise.\n\n\t* config/i386/t-darwin: Remove softfp_wrap_start and\n\tsoftfp_wrap_end.\n\t* config/i386/t-darwin64: Likewise.\n\n\t* config/i386/t-fprules-softfp64: Renamed to ...\n\t* config/i386/t-fprules-softfp: This.\n\n\t* config/i386/t-linux64: Remove SHLIB_MAPFILES, softfp_wrap_start\n\tand softfp_wrap_end.\n\nlibgcc/\n\n2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/36669\n\t* shared-object.mk ($(base)_s$(objext)): Add -DSHARED.\n\n\t* config/i386/64/_divtc3-compat.c: New.\n\t* config/i386/64/_multc3-compat.c: Likewise.\n\t* config/i386/64/_powitf2-compat.c: Likewise.\n\t* config/i386/64/eqtf2.c: Likewise.\n\t* config/i386/64/getf2.c: Likewise.\n\t* config/i386/64/letf2.c: Likewise.\n\t* config/i386/64/t-fprules-softfp: Likewise.\n\n2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.host: Add i386/${host_address}/t-fprules-softfp to\n\ttmake_file for i[34567]86-*-darwin*, x86_64-*-darwin*,\n\ti[34567]86-*-linux*, x86_64-*-linux*. \n\n\t* configure.ac: Set host_address to 64 or 32 for x86.\n\t* configure: Regenerated.\n\n\t* Makefile.in (config.status): Also depend on\n\t$(srcdir)/config.host.\n\n\t* config/i386/32/t-fprules-softfp: New.\n\t* config/i386/32/tf-signs.c: Likewise.\n\n\t* config/i386/64/sfp-machine.h: New. Moved from gcc.\n\n2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/32/sfp-machine.h: New.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r137369", "tree": {"sha": "819f63abca489ef0ba829bffcc7e52b44128bb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819f63abca489ef0ba829bffcc7e52b44128bb73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff473280054c876499089772cea1a5fc56970d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff473280054c876499089772cea1a5fc56970d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff473280054c876499089772cea1a5fc56970d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff473280054c876499089772cea1a5fc56970d64/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b12285bdfc30eeefc48555bc6aa4e571248ee14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12285bdfc30eeefc48555bc6aa4e571248ee14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12285bdfc30eeefc48555bc6aa4e571248ee14d"}], "stats": {"total": 1046, "additions": 869, "deletions": 177}, "files": [{"sha": "c1bbc252c54ac225384b40f5bffe17ffcec9ab48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1,3 +1,56 @@\n+2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/36669\n+\t* config/libgcc-glibc.ver: Add %exclude.\n+\t* config/m32r/libgcc-glibc.ver: Likwise.\n+\t* config/s390/libgcc-glibc.ver: Likwise.\n+\t* config/sh/libgcc-glibc.ver: Likwise.\n+\t* config/sparc/libgcc-sparc-glibc.ver: Likwise.\n+\n+\t* config/i386/libgcc-glibc.ver: New.\n+\n+\t* config/i386/libgcc-x86_64-glibc.ver: Removed.\n+\n+2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc: Remove i386/t-fprules-softfp64 soft-fp/t-softfp\n+\tfrom tmake_file from i[34567]86-*-darwin*, x86_64-*-darwin*,\n+\ti[34567]86-*-linux*, x86_64-*-linux*.  Add\n+\ti386/t-fprules-softfp and soft-fp/t-softfp to tmake_file for\n+\ti[34567]86-*-darwin*, x86_64-*-darwin*, i[34567]86-*-linux*,\n+\tx86_64-*-linux*.  Add i386/t-linux to tmake_file for\n+\ti[34567]86-*-linux*, x86_64-*-linux*.\n+\n+\t* libgcc-std.ver: Add empty GCC_4.4.0.\n+\n+\t* mkmap-symver.awk: Support multiple versions per symbol.\n+\n+\t* config/i386/i386.c (ix86_init_builtins): Always define\n+\t__builtin_fabsq and __builtin_copysignq with fallbacks.\n+\t(ix86_expand_builtin): Emit normal call for __builtin_fabsq\n+\tand __builtin_copysignq if SSE2 isn't available.\n+\n+\t* config/i386/linux.h (LIBGCC2_HAS_TF_MODE): Defined.\n+\t(LIBGCC2_TF_CEXT): Likwise.\n+\t(TF_SIZE): Likwise.\n+\n+\t* config/i386/linux64.h (LIBGCC2_HAS_TF_MODE): Defined as 1.\n+\n+\t* config/i386/sfp-machine.h: Moved to libgcc.\n+\n+\t* config/i386/sfp-machine.h: New.\n+\t* config/i386/t-linux: Likwise.\n+\n+\t* config/i386/t-darwin: Remove softfp_wrap_start and\n+\tsoftfp_wrap_end.\n+\t* config/i386/t-darwin64: Likewise.\n+\n+\t* config/i386/t-fprules-softfp64: Renamed to ...\n+\t* config/i386/t-fprules-softfp: This.\n+\n+\t* config/i386/t-linux64: Remove SHLIB_MAPFILES, softfp_wrap_start\n+\tand softfp_wrap_end.\n+\n 2008-07-02  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (ctor_to_list): New fn."}, {"sha": "b29a762895c10ace22dc2cd6c188cf76e9bfcd5d", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1006,11 +1006,11 @@ i[34567]86-*-darwin*)\n \t# then this file using that to set --with-cpu=i386 which has no -m64\n \t# support.\n \twith_cpu=${with_cpu:-generic}\n-\ttmake_file=\"${tmake_file} i386/t-fprules-softfp64 soft-fp/t-softfp i386/t-crtpc i386/t-crtfm\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm\"\n \t;;\n x86_64-*-darwin*)\n \twith_cpu=${with_cpu:-generic}\n-\ttmake_file=\"t-darwin ${cpu_type}/t-darwin64 t-slibgcc-darwin i386/t-fprules-softfp64 soft-fp/t-softfp i386/t-crtpc i386/t-crtfm\"\n+\ttmake_file=\"t-darwin ${cpu_type}/t-darwin64 t-slibgcc-darwin i386/t-crtpc i386/t-crtfm\"\n \ttm_file=\"${tm_file} ${cpu_type}/darwin64.h\"\n \t;;\n i[34567]86-*-elf*)\n@@ -1069,7 +1069,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n \t\tif test x$enable_targets = xall; then\n \t\t\ttm_file=\"${tm_file} i386/x86-64.h i386/linux64.h\"\n \t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n-\t\t\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-fprules-softfp64 soft-fp/t-softfp\"\n+\t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n \t\t\tneed_64bit_hwint=yes\n \t\t\tcase X\"${with_cpu}\" in\n \t\t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n@@ -1101,7 +1101,7 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \tx86_64-*-kfreebsd*-gnu) tm_file=\"${tm_file} kfreebsd-gnu.h\" ;;\n \tx86_64-*-knetbsd*-gnu) tm_file=\"${tm_file} knetbsd-gnu.h\" ;;\n \tesac\n-\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtstuff i386/t-crtpc i386/t-crtfm i386/t-fprules-softfp64 soft-fp/t-softfp t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n \t;;\n i[34567]86-*-gnu*)\n \t;;\n@@ -2973,6 +2973,13 @@ case ${target} in\n \t\tfi\n \t\t;;\n \n+\ti[34567]86-*-darwin* | x86_64-*-darwin*)\n+\t\ttmake_file=\"${tmake_file} i386/t-fprules-softfp soft-fp/t-softfp\"\n+\t\t;;\n+\ti[34567]86-*-linux* | x86_64-*-linux*)\n+\t\ttmake_file=\"${tmake_file} i386/t-fprules-softfp soft-fp/t-softfp i386/t-linux\"\n+\t\t;;\n+\n \tmips*-*-*)\n \t\tif test x$gnu_ld = xyes\n \t\tthen"}, {"sha": "58c3dba1e8ca898ecb887e93c2fe83444ffe7ae1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -20247,16 +20247,26 @@ ix86_init_builtins (void)\n \t\t\t       NULL, NULL_TREE);\n   ix86_builtins[(int) IX86_BUILTIN_INFQ] = decl;\n \n+  /* We will expand them to normal call if SSE2 isn't available since\n+     they are used by libgcc. */\n   ftype = build_function_type_list (float128_type_node,\n \t\t\t\t    float128_type_node,\n \t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_fabsq\", ftype, IX86_BUILTIN_FABSQ);\n+  decl = add_builtin_function (\"__builtin_fabsq\", ftype,\n+\t\t\t       IX86_BUILTIN_FABSQ, BUILT_IN_MD,\n+\t\t\t       \"__fabstf2\", NULL_TREE);\n+  ix86_builtins[(int) IX86_BUILTIN_FABSQ] = decl;\n+  TREE_READONLY (decl) = 1;\n \n   ftype = build_function_type_list (float128_type_node,\n \t\t\t\t    float128_type_node,\n \t\t\t\t    float128_type_node,\n \t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n+  decl = add_builtin_function (\"__builtin_copysignq\", ftype,\n+\t\t\t       IX86_BUILTIN_COPYSIGNQ, BUILT_IN_MD,\n+\t\t\t       \"__copysigntf3\", NULL_TREE);\n+  ix86_builtins[(int) IX86_BUILTIN_COPYSIGNQ] = decl;\n+  TREE_READONLY (decl) = 1;\n \n   if (TARGET_MMX)\n     ix86_init_mmx_sse_builtins ();\n@@ -21610,7 +21620,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n        i < ARRAY_SIZE (bdesc_args);\n        i++, d++)\n     if (d->code == fcode)\n-      return ix86_expand_args_builtin (d, exp, target);\n+      switch (fcode)\n+\t{\n+\tcase IX86_BUILTIN_FABSQ:\n+\tcase IX86_BUILTIN_COPYSIGNQ:\n+\t  if (!TARGET_SSE2)\n+\t    /* Emit a normal call if SSE2 isn't available.  */\n+\t    return expand_call (exp, target, ignore);\n+\tdefault:\n+\t  return ix86_expand_args_builtin (d, exp, target);\n+\t}\n \n   for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     if (d->code == fcode)"}, {"sha": "be791745b438ff1017beae64c1f0f9e4193f7b64", "filename": "gcc/config/i386/libgcc-glibc.ver", "status": "renamed", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -5,6 +5,20 @@\n # to defer implementation of these routines to libgcc.so via DT_AUXILIARY.\n \n %ifndef __x86_64__\n+%exclude {\n+  __divdi3\n+  __moddi3\n+  __udivdi3\n+  __umoddi3\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.0\n GLIBC_2.0 {\n   # Sampling of DImode arithmetic used by (at least) i386 and m68k.\n@@ -24,16 +38,18 @@ GLIBC_2.0 {\n }\n %endif\n \n-% 128 bit long double support was introduced with GCC 4.3.0.\n-% These lines make the symbols to get a @@GCC_4.3.0 attached.\n+# 128 bit long double support was introduced with GCC 4.3.0 to 64bit\n+# and with GCC 4.4.0 to 32bit.  These lines make the symbols to get\n+# a @@GCC_4.3.0 or @@GCC_4.4.0 attached.\n \n-%ifdef __x86_64__\n %exclude {\n   __addtf3\n+  __divtc3\n   __divtf3\n   __eqtf2\n   __extenddftf2\n   __extendsftf2\n+  __extendxftf2\n   __fixtfdi\n   __fixtfsi\n   __fixtfti\n@@ -47,21 +63,45 @@ GLIBC_2.0 {\n   __floatunsitf\n   __floatuntitf\n   __getf2\n+  __gttf2\n   __letf2\n+  __lttf2\n+  __multc3\n   __multf3\n   __negtf2\n+  __netf2\n+  __powitf2\n   __subtf3\n   __trunctfdf2\n   __trunctfsf2\n+  __trunctfxf2\n   __unordtf2\n }\n \n+%ifdef __x86_64__\n+# Those symbols had improper versions when they were added to gcc 4.3.0.\n+# We corrected the default version to GCC_4.3.0.  But we keep the old\n+# version for backward binary compatibility. \n+GCC_3.0 {\n+  __gttf2\n+  __lttf2\n+  __netf2\n+}\n+\n+GCC_4.0.0 {\n+  __divtc3\n+  __multc3\n+  __powitf2\n+}\n+\n GCC_4.3.0 {\n   __addtf3\n+  __divtc3\n   __divtf3\n   __eqtf2\n   __extenddftf2\n   __extendsftf2\n+  __extendxftf2\n   __fixtfdi\n   __fixtfsi\n   __fixtfti\n@@ -75,12 +115,51 @@ GCC_4.3.0 {\n   __floatunsitf\n   __floatuntitf\n   __getf2\n+  __gttf2\n+  __letf2\n+  __lttf2\n+  __multc3\n+  __multf3\n+  __negtf2\n+  __netf2\n+  __powitf2\n+  __subtf3\n+  __trunctfdf2\n+  __trunctfsf2\n+  __trunctfxf2\n+  __unordtf2\n+}\n+%else\n+GCC_4.4.0 {\n+  __addtf3\n+  __copysigntf3\n+  __divtc3\n+  __divtf3\n+  __eqtf2\n+  __extenddftf2\n+  __extendsftf2\n+  __fabstf2\n+  __fixtfdi\n+  __fixtfsi\n+  __fixunstfdi\n+  __fixunstfsi\n+  __floatditf\n+  __floatsitf\n+  __floatunditf\n+  __floatunsitf\n+  __getf2\n+  __gttf2\n   __letf2\n+  __lttf2\n+  __multc3\n   __multf3\n   __negtf2\n+  __netf2\n+  __powitf2\n   __subtf3\n   __trunctfdf2\n   __trunctfsf2\n+  __trunctfxf2\n   __unordtf2\n }\n %endif", "previous_filename": "gcc/config/i386/libgcc-x86_64-glibc.ver"}, {"sha": "78326b05ec0c4e63b4b2c35e0ae4a4cc8057e019", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -189,6 +189,12 @@ along with GCC; see the file COPYING3.  If not see\n \t   : \"=d\"(BASE))\n #endif\n \n+/* Put all *tf routines in libgcc.  */\n+#undef LIBGCC2_HAS_TF_MODE\n+#define LIBGCC2_HAS_TF_MODE 1\n+#define LIBGCC2_TF_CEXT q\n+#define TF_SIZE 113\n+\n #undef NEED_INDICATE_EXEC_STACK\n #define NEED_INDICATE_EXEC_STACK 1\n "}, {"sha": "04d12cadada6ad31d053f879d0277aa4c088d526", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -91,7 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Put all *tf routines in libgcc.  */\n #undef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE TARGET_64BIT\n+#define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n #define TF_SIZE 113\n "}, {"sha": "f2df869653ffab61d11abb0d872758d6833f2ad1", "filename": "gcc/config/i386/sfp-machine.h", "status": "modified", "additions": 3, "deletions": 141, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsfp-machine.h?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1,143 +1,5 @@\n-#define _FP_W_TYPE_SIZE\t\t64\n-#define _FP_W_TYPE\t\tunsigned long\n-#define _FP_WS_TYPE\t\tsigned long\n-#define _FP_I_TYPE\t\tlong\n-\n-typedef int TItype __attribute__ ((mode (TI)));\n-typedef unsigned int UTItype __attribute__ ((mode (TI)));\n-\n-#define TI_BITS (__CHAR_BIT__ * (int)sizeof(TItype))\n-\n-/* The type of the result of a floating point comparison.  This must\n-   match `__libgcc_cmp_return__' in GCC for the target.  */\n-typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n-#define CMPtype __gcc_CMPtype\n-\n-#define _FP_MUL_MEAT_Q(R,X,Y)                           \\\n-  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n-\n-#define _FP_DIV_MEAT_Q(R,X,Y)   _FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n-\n-#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n-#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n-#define _FP_NANFRAC_E\t\t_FP_QNANBIT_E, 0\n-#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n-#define _FP_NANSIGN_S\t\t1\n-#define _FP_NANSIGN_D\t\t1\n-#define _FP_NANSIGN_E\t\t1\n-#define _FP_NANSIGN_Q\t\t1\n-\n-#define _FP_KEEPNANFRACP 1\n-\n-/* Here is something Intel misdesigned: the specs don't define\n-   the case where we have two NaNs with same mantissas, but\n-   different sign. Different operations pick up different NaNs.  */\n-#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    if (_FP_FRAC_GT_##wc(X, Y)\t\t\t\t\t\\\n-\t|| (_FP_FRAC_EQ_##wc(X,Y) && (OP == '+' || OP == '*')))\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tR##_s = X##_s;\t\t\t\t\t\t\\\n-        _FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tR##_s = Y##_s;\t\t\t\t\t\t\\\n-        _FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#define FP_EX_INVALID\t\t0x01\n-#define FP_EX_DENORM\t\t0x02\n-#define FP_EX_DIVZERO\t\t0x04\n-#define FP_EX_OVERFLOW\t\t0x08\n-#define FP_EX_UNDERFLOW\t\t0x10\n-#define FP_EX_INEXACT\t\t0x20\n-\n-struct fenv\n-{\n-  unsigned short int __control_word;\n-  unsigned short int __unused1;\n-  unsigned short int __status_word;\n-  unsigned short int __unused2;\n-  unsigned short int __tags;\n-  unsigned short int __unused3;\n-  unsigned int __eip;\n-  unsigned short int __cs_selector;\n-  unsigned int __opcode:11;\n-  unsigned int __unused4:5;\n-  unsigned int __data_offset;\n-  unsigned short int __data_selector;\n-  unsigned short int __unused5;\n-};\n-\n-#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfloat f = 0.0;\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"divss %0, %0 \" : : \"x\" (f));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfloat f = 1.0, g = 0.0;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"divss %1, %0\" : : \"x\" (f), \"x\" (g));\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tstruct fenv temp;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n-\ttemp.__status_word |= FP_EX_OVERFLOW;\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n-\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tstruct fenv temp;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n-\ttemp.__status_word |= FP_EX_UNDERFLOW;\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n-\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tstruct fenv temp;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n-\ttemp.__status_word |= FP_EX_INEXACT;\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n-\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#define FP_RND_NEAREST\t\t0\n-#define FP_RND_ZERO\t\t0xc00\n-#define FP_RND_PINF\t\t0x800\n-#define FP_RND_MINF\t\t0x400\n-\n-#define _FP_DECL_EX \\\n-  unsigned short _fcw __attribute__ ((unused)) = FP_RND_NEAREST\n-\n-#define FP_INIT_ROUNDMODE\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    __asm__ (\"fnstcw %0\" : \"=m\" (_fcw));\t\\\n-  } while (0)\n-\n-#define FP_ROUNDMODE\t\t(_fcw & 0xc00)\n-\n-#define\t__LITTLE_ENDIAN\t1234\n-#define\t__BIG_ENDIAN\t4321\n-\n-#define __BYTE_ORDER __LITTLE_ENDIAN\n-\n-/* Define ALIASNAME as a strong alias for NAME.  */\n-#if defined __MACH__\n-/* Mach-O doesn't support aliasing.  If these functions ever return\n-   anything but CMPtype we need to revisit this... */\n-#define strong_alias(name, aliasname) \\\n-  CMPtype aliasname (TFtype a, TFtype b) { return name(a, b); }\n+#ifdef __x86_64__\n+#include \"config/i386/64/sfp-machine.h\"\n #else\n-# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n-# define _strong_alias(name, aliasname) \\\n-  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+#include \"config/i386/32/sfp-machine.h\"\n #endif"}, {"sha": "fb5bbe78c04b8c9b31eab2df1642f45a6a4edb48", "filename": "gcc/config/i386/t-darwin", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-darwin?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -2,6 +2,3 @@ MULTILIB_OPTIONS = m64\n MULTILIB_DIRNAMES = x86_64\n LIB2_SIDITI_CONV_FUNCS=yes\n LIB2FUNCS_EXTRA = $(srcdir)/config/darwin-64.c\n-\n-softfp_wrap_start := '\\#ifdef __x86_64__'\n-softfp_wrap_end := '\\#endif'"}, {"sha": "5143e3819dc4a82e0e825acd05f0da506d7f74c4", "filename": "gcc/config/i386/t-darwin64", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-darwin64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-darwin64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-darwin64?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1,5 +1,2 @@\n LIB2_SIDITI_CONV_FUNCS=yes\n LIB2FUNCS_EXTRA = $(srcdir)/config/darwin-64.c\n-\n-softfp_wrap_start := '\\#ifdef __x86_64__'\n-softfp_wrap_end := '\\#endif'"}, {"sha": "0b0068f90537154417c69d5151007358a59b8ac0", "filename": "gcc/config/i386/t-fprules-softfp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-fprules-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-fprules-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-fprules-softfp?ref=ff473280054c876499089772cea1a5fc56970d64", "previous_filename": "gcc/config/i386/t-fprules-softfp64"}, {"sha": "4c6bb51e3b84a144fba26a38fac4db1ea6279a20", "filename": "gcc/config/i386/t-linux", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,5 @@\n+# On 64bit we do not need any exports for glibc for 64-bit libgcc_s.\n+# Need to support TImode for x86.  Override the settings from\n+# t-slibgcc-elf-ver and t-linux\n+SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \\\n+\t\t $(srcdir)/config/i386/libgcc-glibc.ver"}, {"sha": "36378d87e0b0d98688356c906a5bb4e91b3d1f14", "filename": "gcc/config/i386/t-linux64", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fi386%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux64?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1,9 +1,3 @@\n-# On x86-64 we do not need any exports for glibc for 64-bit libgcc_s,\n-# override the settings\n-# from t-slibgcc-elf-ver and t-linux\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \\\n-\t\t $(srcdir)/config/i386/libgcc-x86_64-glibc.ver\n-\n # On Debian, Ubuntu and other derivative distributions, the 32bit libraries\n # are found in /lib32 and /usr/lib32, /lib64 and /usr/lib64 are symlinks to\n # /lib and /usr/lib, while other distributions install libraries into /lib64\n@@ -21,6 +15,3 @@ INSTALL_LIBGCC = install-multilib\n EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o \\\n \t\t     crtbeginT.o crtprec32.o crtprec64.o crtprec80.o \\\n \t\t     crtfastmath.o\n-\n-softfp_wrap_start := '\\#ifdef __x86_64__'\n-softfp_wrap_end := '\\#endif'"}, {"sha": "264828b17c07324b995c6b54170acdf923899e8e", "filename": "gcc/config/libgcc-glibc.ver", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flibgcc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -4,6 +4,20 @@\n # maintain enough binary compatibility to allow future versions of glibc\n # to defer implementation of these routines to libgcc.so via DT_AUXILIARY.\n \n+%exclude {\n+  __divdi3\n+  __moddi3\n+  __udivdi3\n+  __umoddi3\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.0\n GLIBC_2.0 {\n   # Sampling of DImode arithmetic used by (at least) i386 and m68k."}, {"sha": "977c3346604a8f6b590ec6e733934f13fda742e0", "filename": "gcc/config/m32r/libgcc-glibc.ver", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fm32r%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fm32r%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Flibgcc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -8,6 +8,16 @@\n # because GLIBC_2.0 does not exist on this architecture, as the first \n # ever glibc release on the platform was GLIBC_2.3.\n \n+%exclude {\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.3\n GLIBC_2.3 {\n   __register_frame"}, {"sha": "ab6eedcf6834757c3ebbee881f94839838d6a547", "filename": "gcc/config/s390/libgcc-glibc.ver", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -9,6 +9,20 @@\n # ever glibc release on the platform was GLIBC_2.2.\n \n %ifndef __s390x__\n+%exclude {\n+  __divdi3\n+  __moddi3\n+  __udivdi3\n+  __umoddi3\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.0\n GLIBC_2.0 {\n   __divdi3\n@@ -27,6 +41,16 @@ GLIBC_2.0 {\n %endif\n \n %ifdef __s390x__\n+%exclude {\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.2\n GLIBC_2.2 {\n   __register_frame"}, {"sha": "11ef379effa7b36a7bea8eb1e5b2173008a3cc71", "filename": "gcc/config/sh/libgcc-glibc.ver", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fsh%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fsh%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flibgcc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -8,6 +8,16 @@\n # because GLIBC_2.0 does not exist on this architecture, as the first \n # ever glibc release on the platform was GLIBC_2.2.\n \n+%exclude {\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %inherit GCC_3.0 GLIBC_2.2\n GLIBC_2.2 {\n   __register_frame\n@@ -18,4 +28,3 @@ GLIBC_2.2 {\n   __frame_state_for\n   __register_frame_info_table\n }\n-"}, {"sha": "8f50c0d588685039feba1ced03f2039836b3f854", "filename": "gcc/config/sparc/libgcc-sparc-glibc.ver", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fsparc%2Flibgcc-sparc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fconfig%2Fsparc%2Flibgcc-sparc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flibgcc-sparc-glibc.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -4,6 +4,20 @@\n # maintain enough binary compatibility to allow future versions of glibc\n # to defer implementation of these routines to libgcc.so via DT_AUXILIARY.\n \n+%exclude {\n+  __divdi3\n+  __moddi3\n+  __udivdi3\n+  __umoddi3\n+  __register_frame\n+  __register_frame_table\n+  __deregister_frame\n+  __register_frame_info\n+  __deregister_frame_info\n+  __frame_state_for\n+  __register_frame_info_table\n+}\n+\n %ifdef __arch64__\n %define GLIBC_VER GLIBC_2.2\n %else"}, {"sha": "1df9ab1b3f91b248a1a09f7ac74e3e508fab4f2c", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1800,3 +1800,7 @@ GCC_4.3.0 {\n   __satfractunstiuda\n   __satfractunstiuta\n }\n+\n+%inherit GCC_4.4.0 GCC_4.3.0\n+GCC_4.4.0 {\n+}"}, {"sha": "4877e905147ae62ae8ed2e314fe25ac13b316827", "filename": "gcc/mkmap-symver.awk", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fmkmap-symver.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/gcc%2Fmkmap-symver.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkmap-symver.awk?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -46,7 +46,8 @@ state == \"nm\" && ($1 == \"U\" || $2 == \"U\") {\n }\n \n state == \"nm\" && NF == 3 {\n-  def[$3] = 1;\n+  split ($3, s, \"@\")\n+  def[s[1]] = 1;\n   sawsymbol = 1;\n   next;\n }\n@@ -82,10 +83,13 @@ $1 == \"}\" {\n \n {\n   sym = prefix $1;\n+  symbols[sym] = 1\n   if (thislib != \"%exclude\")\n-    ver[sym] = thislib;\n-  else\n-    delete ver[sym];\n+    ver[sym, thislib] = 1;\n+  else {\n+    for (l in libs)\n+      ver[sym, l] = 0;\n+  }\n   next;\n }\n \n@@ -107,8 +111,8 @@ function output(lib) {\n     output(inherit[lib]);\n \n   empty=1\n-  for (sym in ver)\n-    if ((ver[sym] == lib) && (sym in def))\n+  for (sym in symbols)\n+    if ((ver[sym, lib] != 0) && (sym in def))\n       {\n \tif (empty)\n \t  {"}, {"sha": "fa055e9c51034d06816dafcb6b0cb21c46822be1", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -1,3 +1,38 @@\n+2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/36669\n+\t* shared-object.mk ($(base)_s$(objext)): Add -DSHARED.\n+\n+\t* config/i386/64/_divtc3-compat.c: New.\n+\t* config/i386/64/_multc3-compat.c: Likewise.\n+\t* config/i386/64/_powitf2-compat.c: Likewise.\n+\t* config/i386/64/eqtf2.c: Likewise.\n+\t* config/i386/64/getf2.c: Likewise.\n+\t* config/i386/64/letf2.c: Likewise.\n+\t* config/i386/64/t-fprules-softfp: Likewise.\n+\n+2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.host: Add i386/${host_address}/t-fprules-softfp to\n+\ttmake_file for i[34567]86-*-darwin*, x86_64-*-darwin*,\n+\ti[34567]86-*-linux*, x86_64-*-linux*. \n+\n+\t* configure.ac: Set host_address to 64 or 32 for x86.\n+\t* configure: Regenerated.\n+\n+\t* Makefile.in (config.status): Also depend on\n+\t$(srcdir)/config.host.\n+\n+\t* config/i386/32/t-fprules-softfp: New.\n+\t* config/i386/32/tf-signs.c: Likewise.\n+\n+\t* config/i386/64/sfp-machine.h: New. Moved from gcc.\n+\n+2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/32/sfp-machine.h: New.\n+\n 2008-06-26  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/t-ppccomm: Remove rules that conflict with"}, {"sha": "369c7fecb58bbd18d4da0dc66e3bb2d3a49b3539", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -138,7 +138,7 @@ config.h: stamp-h ; @true\n stamp-h: $(srcdir)/config.in config.status Makefile\n \tCONFIG_FILES= CONFIG_HEADERS=config.h:$(srcdir)/config.in $(SHELL) ./config.status\n \n-config.status: $(srcdir)/configure\n+config.status: $(srcdir)/configure $(srcdir)/config.host\n \t$(SHELL) ./config.status --recheck\n \n include $(gcc_objdir)/libgcc.mvars"}, {"sha": "ca07a07fadc72b103eee0f6148685af69e281b70", "filename": "libgcc/config.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -578,3 +578,10 @@ i[34567]86-*-linux* | x86_64-*-linux*)\n \ttmake_file=\"${tmake_file} t-tls\"\n \t;;\n esac\n+\n+case ${host} in\n+i[34567]86-*-darwin* | x86_64-*-darwin* | \\\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+\ttmake_file=\"${tmake_file} i386/${host_address}/t-fprules-softfp\"\n+\t;;\n+esac"}, {"sha": "256bdeb4a48625cef090c858742990c1b97501b7", "filename": "libgcc/config/i386/32/sfp-machine.h", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F32%2Fsfp-machine.h?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,217 @@\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned int\n+#define _FP_WS_TYPE\t\tsigned int\n+#define _FP_I_TYPE\t\tint\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define __FP_FRAC_ADD_4(r3,r2,r1,r0,x3,x2,x1,x0,y3,y2,y1,y0)\t\t\\\n+  __asm__ (\"add{l} {%11,%3|%3,%11}\\n\\t\"\t\t\t\t\t\\\n+\t   \"adc{l} {%9,%2|%2,%9}\\n\\t\"\t\t\t\t\t\\\n+\t   \"adc{l} {%7,%1|%1,%7}\\n\\t\"\t\t\t\t\t\\\n+\t   \"adc{l} {%5,%0|%0,%5}\"\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (r3)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r2)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r1)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r0))\t\t\t\t\t\\\n+\t   : \"%0\" ((USItype) (x3)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y3)),\t\t\t\t\t\\\n+\t     \"%1\" ((USItype) (x2)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y2)),\t\t\t\t\t\\\n+\t     \"%2\" ((USItype) (x1)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y1)),\t\t\t\t\t\\\n+\t     \"%3\" ((USItype) (x0)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y0)))\n+\n+#define __FP_FRAC_ADD_3(r2,r1,r0,x2,x1,x0,y2,y1,y0)\t\t\t\\\n+  __asm__ (\"add{l} {%8,%2|%2,%8}\\n\\t\"\t\t\t\t\t\\\n+\t   \"adc{l} {%6,%1|%1,%6}\\n\\t\"\t\t\t\t\t\\\n+\t   \"adc{l} {%4,%0|%0,%4}\"\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (r2)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r1)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r0))\t\t\t\t\t\\\n+\t   : \"%0\" ((USItype) (x2)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y2)),\t\t\t\t\t\\\n+\t     \"%1\" ((USItype) (x1)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y1)),\t\t\t\t\t\\\n+\t     \"%2\" ((USItype) (x0)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y0)))\n+\n+/* FIXME: The last constraint should be \"g\" instead of \"im\" if reload\n+   works properly.  */\n+#define __FP_FRAC_SUB_4(r3,r2,r1,r0,x3,x2,x1,x0,y3,y2,y1,y0)\t\t\\\n+  __asm__ (\"sub{l} {%11,%3|%3,%11}\\n\\t\"\t\t\t\t\t\\\n+\t   \"sbb{l} {%9,%2|%2,%9}\\n\\t\"\t\t\t\t\t\\\n+\t   \"sbb{l} {%7,%1|%1,%7}\\n\\t\"\t\t\t\t\t\\\n+\t   \"sbb{l} {%5,%0|%0,%5}\"\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (r3)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r2)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r1)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r0))\t\t\t\t\t\\\n+\t   : \"0\" ((USItype) (x3)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y3)),\t\t\t\t\t\\\n+\t     \"1\" ((USItype) (x2)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y2)),\t\t\t\t\t\\\n+\t     \"2\" ((USItype) (x1)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y1)),\t\t\t\t\t\\\n+\t     \"3\" ((USItype) (x0)),\t\t\t\t\t\\\n+\t     \"im\" ((USItype) (y0)))\n+\n+#define __FP_FRAC_SUB_3(r2,r1,r0,x2,x1,x0,y2,y1,y0)\t\t\t\\\n+  __asm__ (\"sub{l} {%8,%2|%2,%8}\\n\\t\"\t\t\t\t\t\\\n+\t   \"sbb{l} {%6,%1|%1,%6}\\n\\t\"\t\t\t\t\t\\\n+\t   \"sbb{l} {%4,%0|%0,%4}\"\t\t\t\t\t\\\n+\t   : \"=r\" ((USItype) (r2)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r1)),\t\t\t\t\t\\\n+\t     \"=&r\" ((USItype) (r0))\t\t\t\t\t\\\n+\t   : \"0\" ((USItype) (x2)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y2)),\t\t\t\t\t\\\n+\t     \"1\" ((USItype) (x1)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y1)),\t\t\t\t\t\\\n+\t     \"2\" ((USItype) (x0)),\t\t\t\t\t\\\n+\t     \"g\" ((USItype) (y0)))\n+\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_udiv(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)   _FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n+#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D, 0\n+/* Even if XFmode is 12byte,  we have to pad it to 16byte since soft-fp\n+   emulation is done in 16byte.  */\n+#define _FP_NANFRAC_E\t\t_FP_QNANBIT_E, 0, 0, 0\n+#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0, 0, 0\n+#define _FP_NANSIGN_S\t\t1\n+#define _FP_NANSIGN_D\t\t1\n+#define _FP_NANSIGN_E\t\t1\n+#define _FP_NANSIGN_Q\t\t1\n+\n+#define _FP_KEEPNANFRACP 1\n+\n+/* Here is something Intel misdesigned: the specs don't define\n+   the case where we have two NaNs with same mantissas, but\n+   different sign. Different operations pick up different NaNs.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if (_FP_FRAC_GT_##wc(X, Y)\t\t\t\t\t\\\n+\t|| (_FP_FRAC_EQ_##wc(X,Y) && (OP == '+' || OP == '*')))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_EX_INVALID\t\t0x01\n+#define FP_EX_DENORM\t\t0x02\n+#define FP_EX_DIVZERO\t\t0x04\n+#define FP_EX_OVERFLOW\t\t0x08\n+#define FP_EX_UNDERFLOW\t\t0x10\n+#define FP_EX_INEXACT\t\t0x20\n+\n+struct fenv\n+{\n+  unsigned short int __control_word;\n+  unsigned short int __unused1;\n+  unsigned short int __status_word;\n+  unsigned short int __unused2;\n+  unsigned short int __tags;\n+  unsigned short int __unused3;\n+  unsigned int __eip;\n+  unsigned short int __cs_selector;\n+  unsigned int __opcode:11;\n+  unsigned int __unused4:5;\n+  unsigned int __data_offset;\n+  unsigned short int __data_selector;\n+  unsigned short int __unused5;\n+};\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f;\t\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fdiv %0\" : \"+t\" (f));\t\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f = 1.0, g = 0.0;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fdivp\" : \"=t\" (f)\t\t\t\\\n+\t\t\t      \t      : \"0\" (f), \"u\" (g)\t\t\\\n+\t\t\t\t      : \"st(1)\");\t\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_OVERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_UNDERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_INEXACT;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_RND_NEAREST\t\t0\n+#define FP_RND_ZERO\t\t0xc00\n+#define FP_RND_PINF\t\t0x800\n+#define FP_RND_MINF\t\t0x400\n+\n+#define _FP_DECL_EX \\\n+  unsigned short _fcw __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    __asm__ (\"fnstcw %0\" : \"=m\" (_fcw));\t\\\n+  } while (0)\n+\n+#define FP_ROUNDMODE\t\t(_fcw & 0xc00)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+#if defined __MACH__\n+/* Mach-O doesn't support aliasing.  If these functions ever return\n+   anything but CMPtype we need to revisit this... */\n+#define strong_alias(name, aliasname) \\\n+  CMPtype aliasname (TFtype a, TFtype b) { return name(a, b); }\n+#else\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+#endif"}, {"sha": "8e7f3233b71d398d5b17207f74f49c84b0874113", "filename": "libgcc/config/i386/32/t-fprules-softfp", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Ft-fprules-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Ft-fprules-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F32%2Ft-fprules-softfp?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,8 @@\n+# Filter out TImode functions\n+tifunctions = fixtfti.c fixunstfti.c floattitf.c floatuntitf.c\n+tifunctions := $(addprefix $(gcc_srcdir)/config/soft-fp/, $(tifunctions))\n+\n+LIB2ADD := $(filter-out $(tifunctions), $(LIB2ADD))\n+\n+# Provide fallbacks for __builtin_copysignq and __builtin_fabsq.\n+LIB2ADD += $(srcdir)/config/i386/32/tf-signs.c"}, {"sha": "1b19b60126979f2761639b4b312ddd29e57b9d92", "filename": "libgcc/config/i386/32/tf-signs.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F32%2Ftf-signs.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,64 @@\n+/* Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+union _FP_UNION_Q\n+{\n+   __float128 flt;\n+   struct \n+   {\n+      unsigned long frac0 : 32;\n+      unsigned long frac1 : 32;\n+      unsigned long frac2 : 32;\n+      unsigned long frac3 : 16;\n+      unsigned exp : 15;\n+      unsigned sign : 1;\n+   } bits __attribute__((packed));\n+};\n+\n+__float128\n+__copysigntf3 (__float128 a, __float128 b)\n+{\n+  union _FP_UNION_Q A, B;\n+\n+  A.flt = a;\n+  B.flt = b;\n+  A.bits.sign = B.bits.sign;\n+\n+  return A.flt;\n+}\n+\n+__float128\n+__fabstf2 (__float128 a)\n+{\n+  union _FP_UNION_Q A;\n+\n+  A.flt = a;\n+  A.bits.sign = 0;\n+\n+  return A.flt;\n+}"}, {"sha": "57ee350b7cd4ab7d7eb57331c57597e72f488fb0", "filename": "libgcc/config/i386/64/_divtc3-compat.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_divtc3-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_divtc3-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2F_divtc3-compat.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,14 @@\n+#ifdef SHARED\n+#define __divtc3 __divtc3_shared\n+#endif\n+\n+#define L_divtc3\n+#include \"libgcc2.c\"\n+\n+#ifdef SHARED\n+#undef __divtc3\n+extern __typeof__ (__divtc3_shared) __divtc3_compat __attribute__((alias (\"__divtc3_shared\")));\n+\n+asm (\".symver __divtc3_compat,__divtc3@GCC_4.0.0\");\n+asm (\".symver __divtc3_shared,__divtc3@@GCC_4.3.0\");\n+#endif"}, {"sha": "49141a9384fdea83fc044b223e5fb57744cd1fd3", "filename": "libgcc/config/i386/64/_multc3-compat.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_multc3-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_multc3-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2F_multc3-compat.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,14 @@\n+#ifdef SHARED\n+#define __multc3 __multc3_shared\n+#endif\n+\n+#define L_multc3\n+#include \"libgcc2.c\"\n+\n+#ifdef SHARED\n+#undef __multc3\n+extern __typeof__ (__multc3_shared) __multc3_compat __attribute__((alias (\"__multc3_shared\")));\n+\n+asm (\".symver __multc3_compat,__multc3@GCC_4.0.0\");\n+asm (\".symver __multc3_shared,__multc3@@GCC_4.3.0\");\n+#endif"}, {"sha": "3bc3c904de73766c374969431f6a482bf2bb10d2", "filename": "libgcc/config/i386/64/_powitf2-compat.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_powitf2-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2F_powitf2-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2F_powitf2-compat.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,14 @@\n+#ifdef SHARED\n+#define __powitf2 __powitf2_shared\n+#endif\n+\n+#define L_powitf2\n+#include \"libgcc2.c\"\n+\n+#ifdef SHARED\n+#undef __powitf2\n+extern __typeof__ (__powitf2_shared) __powitf2_compat __attribute__((alias (\"__powitf2_shared\")));\n+\n+asm (\".symver __powitf2_compat,__powitf2@GCC_4.0.0\");\n+asm (\".symver __powitf2_shared,__powitf2@@GCC_4.3.0\");\n+#endif"}, {"sha": "d9baba689be032bb92d053738d5e13dbbc1e8272", "filename": "libgcc/config/i386/64/eqtf2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Feqtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Feqtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Feqtf2.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,13 @@\n+#ifdef SHARED\n+#define __netf2 __netf2_shared\n+#endif\n+\n+#include \"config/soft-fp/eqtf2.c\"\n+\n+#ifdef SHARED\n+#undef __netf2\n+strong_alias (__netf2_shared, __netf2_compat);\n+\n+asm (\".symver __netf2_compat,__netf2@GCC_3.0\");\n+asm (\".symver __netf2_shared,__netf2@@GCC_4.3.0\");\n+#endif"}, {"sha": "30885cc0cafbaec4fee6842fb426db314d1217b5", "filename": "libgcc/config/i386/64/getf2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fgetf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fgetf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Fgetf2.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,13 @@\n+#ifdef SHARED\n+#define __gttf2 __gttf2_shared\n+#endif\n+\n+#include \"config/soft-fp/getf2.c\"\n+\n+#ifdef SHARED\n+#undef __gttf2\n+strong_alias (__gttf2_shared, __gttf2_compat);\n+\n+asm (\".symver __gttf2_compat,__gttf2@GCC_3.0\");\n+asm (\".symver __gttf2_shared,__gttf2@@GCC_4.3.0\");\n+#endif"}, {"sha": "231f981c84c4afdedeb47b7dc03f28ef04d28c97", "filename": "libgcc/config/i386/64/letf2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fletf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fletf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Fletf2.c?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,13 @@\n+#ifdef SHARED\n+#define __lttf2 __lttf2_shared\n+#endif\n+\n+#include \"config/soft-fp/letf2.c\"\n+\n+#ifdef SHARED\n+#undef __lttf2\n+strong_alias (__lttf2_shared, __lttf2_compat);\n+\n+asm (\".symver __lttf2_compat,__lttf2@GCC_3.0\");\n+asm (\".symver __lttf2_shared,__lttf2@@GCC_4.3.0\");\n+#endif"}, {"sha": "190e3cb0e81ae58a995196a72b32cb16fee26d46", "filename": "libgcc/config/i386/64/sfp-machine.h", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Fsfp-machine.h?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,143 @@\n+#define _FP_W_TYPE_SIZE\t\t64\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+\n+#define TI_BITS (__CHAR_BIT__ * (int)sizeof(TItype))\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define _FP_MUL_MEAT_Q(R,X,Y)                           \\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_Q(R,X,Y)   _FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n+#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n+#define _FP_NANFRAC_E\t\t_FP_QNANBIT_E, 0\n+#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n+#define _FP_NANSIGN_S\t\t1\n+#define _FP_NANSIGN_D\t\t1\n+#define _FP_NANSIGN_E\t\t1\n+#define _FP_NANSIGN_Q\t\t1\n+\n+#define _FP_KEEPNANFRACP 1\n+\n+/* Here is something Intel misdesigned: the specs don't define\n+   the case where we have two NaNs with same mantissas, but\n+   different sign. Different operations pick up different NaNs.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if (_FP_FRAC_GT_##wc(X, Y)\t\t\t\t\t\\\n+\t|| (_FP_FRAC_EQ_##wc(X,Y) && (OP == '+' || OP == '*')))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+        _FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_EX_INVALID\t\t0x01\n+#define FP_EX_DENORM\t\t0x02\n+#define FP_EX_DIVZERO\t\t0x04\n+#define FP_EX_OVERFLOW\t\t0x08\n+#define FP_EX_UNDERFLOW\t\t0x10\n+#define FP_EX_INEXACT\t\t0x20\n+\n+struct fenv\n+{\n+  unsigned short int __control_word;\n+  unsigned short int __unused1;\n+  unsigned short int __status_word;\n+  unsigned short int __unused2;\n+  unsigned short int __tags;\n+  unsigned short int __unused3;\n+  unsigned int __eip;\n+  unsigned short int __cs_selector;\n+  unsigned int __opcode:11;\n+  unsigned int __unused4:5;\n+  unsigned int __data_offset;\n+  unsigned short int __data_selector;\n+  unsigned short int __unused5;\n+};\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f = 0.0;\t\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"divss %0, %0 \" : : \"x\" (f));\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f = 1.0, g = 0.0;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"divss %1, %0\" : : \"x\" (f), \"x\" (g));\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_OVERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_UNDERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_INEXACT;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_RND_NEAREST\t\t0\n+#define FP_RND_ZERO\t\t0xc00\n+#define FP_RND_PINF\t\t0x800\n+#define FP_RND_MINF\t\t0x400\n+\n+#define _FP_DECL_EX \\\n+  unsigned short _fcw __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    __asm__ (\"fnstcw %0\" : \"=m\" (_fcw));\t\\\n+  } while (0)\n+\n+#define FP_ROUNDMODE\t\t(_fcw & 0xc00)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+#if defined __MACH__\n+/* Mach-O doesn't support aliasing.  If these functions ever return\n+   anything but CMPtype we need to revisit this... */\n+#define strong_alias(name, aliasname) \\\n+  CMPtype aliasname (TFtype a, TFtype b) { return name(a, b); }\n+#else\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+#endif"}, {"sha": "e8cda296cbd996a9251bb983a71f485931435377", "filename": "libgcc/config/i386/64/t-fprules-softfp", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Ft-fprules-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfig%2Fi386%2F64%2Ft-fprules-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2F64%2Ft-fprules-softfp?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -0,0 +1,12 @@\n+# Filter out the following TImode functions and provide backward binary\n+# compatibility.\n+tf-compats = getf2.c letf2.c eqtf2.c\n+tf-functions := $(addprefix $(gcc_srcdir)/config/soft-fp/, $(tf-compats))\n+LIB2ADD := $(filter-out $(tf-functions), $(LIB2ADD))\n+LIB2ADD += $(addprefix $(srcdir)/config/i386/64/, $(tf-compats))\n+\n+# Replace _divtc3, _multc3 and _powitf2.\n+libgcc2-tf-functions = _divtc3 _multc3 _powitf2\n+LIB2FUNCS_EXCLUDE += $(libgcc2-tf-functions)\n+libgcc2-tf-compats = $(addsuffix -compat.c, $(libgcc2-tf-functions))\n+LIB2ADD += $(addprefix $(srcdir)/config/i386/64/, $(libgcc2-tf-compats))"}, {"sha": "75bf9034b1a53c8fde949b83a7c219f6fdbc8797", "filename": "libgcc/configure", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -3402,6 +3402,21 @@ echo \"${ECHO_T}$libgcc_cv_fixed_point\" >&6\n fixed_point=$libgcc_cv_fixed_point\n \n \n+# Check 32bit or 64bit for x86.\n+case ${host} in\n+i?86*-*-* | x86_64*-*-*)\n+  cat > conftest.c <<EOF\n+#ifdef __x86_64__\n+host_address=64\n+#else\n+host_address=32\n+#endif\n+EOF\n+    eval `${CC-cc} -E conftest.c | grep host_address=`\n+    rm -f conftest.c\n+    ;;\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}, {"sha": "1238d74245057468c5396faf7772e9dedab2db07", "filename": "libgcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -153,6 +153,21 @@ AC_CACHE_CHECK([whether fixed-point is supported], [libgcc_cv_fixed_point],\n fixed_point=$libgcc_cv_fixed_point\n AC_SUBST(fixed_point)\n \n+# Check 32bit or 64bit for x86.\n+case ${host} in\n+i?86*-*-* | x86_64*-*-*)\n+  cat > conftest.c <<EOF\n+#ifdef __x86_64__\n+host_address=64\n+#else\n+host_address=32\n+#endif\n+EOF\n+    eval `${CC-cc} -E conftest.c | grep host_address=`\n+    rm -f conftest.c\n+    ;;\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}, {"sha": "5c0abb3262404ab0186ebb84143278cf6f0ee193", "filename": "libgcc/shared-object.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fshared-object.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff473280054c876499089772cea1a5fc56970d64/libgcc%2Fshared-object.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fshared-object.mk?ref=ff473280054c876499089772cea1a5fc56970d64", "patch": "@@ -12,7 +12,7 @@ $(base)$(objext): $o\n \t$(gcc_compile) $(c_flags) -c $< $(vis_hide)\n \n $(base)_s$(objext): $o\n-\t$(gcc_s_compile) $(c_flags) -c $<\n+\t$(gcc_s_compile) -DSHARED $(c_flags) -c $<\n \n else\n \n@@ -29,6 +29,6 @@ $(base).vis: $(base)_s$(objext)\n \t$(gen-hide-list)\n \n $(base)_s$(objext): $o\n-\t$(gcc_s_compile) -c -xassembler-with-cpp $<\n+\t$(gcc_s_compile) -DSHARED -c -xassembler-with-cpp $<\n \n endif"}]}