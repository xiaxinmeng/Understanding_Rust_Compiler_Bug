{"sha": "ffc7f200adbdf47f14b3594d9b21855c19cf797a", "node_id": "C_kwDOANBUbNoAKGZmYzdmMjAwYWRiZGY0N2YxNGIzNTk0ZDliMjE4NTVjMTljZjc5N2E", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-19T14:03:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-19T14:03:45Z"}, "message": "match.pd, optabs: Avoid vectorization of {FLOOR,CEIL,ROUND}_{DIV,MOD}_EXPR [PR102860]\n\npower10 has modv4si3 expander and so vectorizes the following testcase\nwhere Fortran modulo is FLOOR_MOD_EXPR.\noptabs_for_tree_code indicates that the optab for all the *_MOD_EXPR\nvariants is umod_optab or smod_optab, but that isn't true, that optab\nactually expands just TRUNC_MOD_EXPR.  For the other tree codes expmed.cc\nhas code how to adjust the TRUNC_MOD_EXPR into those by emitting some\nextra comparisons and conditional updates.  Similarly for *_DIV_EXPR,\nexcept in that case it actually needs both division and modulo.\n\nWhile it would be possible to handle it in expmed.cc for vectors as well,\nwe'd need to be sure all the vector operations we need for that are\navailable, and furthermore we wouldn't account for that in the costing.\n\nSo, IMHO it is better to stop pretending those non-truncating (and\nnon-exact) div/mod operations have an optab.  For GCC 13, we should\nIMHO pattern match these in tree-vect-patterns.cc and transform them\nto truncating div/mod with follow-up adjustments and let the vectorizer\nvectorize that.  As written in the PR, for signed operands:\nr = x %[fl] y;\nis\nr = x % y; if (r && (x ^ y) < 0) r += y;\nand\nd = x /[fl] y;\nis\nr = x % y; d = x / y; if (r && (x ^ y) < 0) --d;\nand\nr = x %[cl] y;\nis\nr = x % y; if (r && (x ^ y) >= 0) r -= y;\nand\nd = /[cl] y;\nis\nr = x % y; d = x / y; if (r && (x ^ y) >= 0) ++d;\n(too lazy to figure out rounding div/mod now).  I'll create a PR\nfor that.\nThe patch also extends a match.pd optimization that floor_mod on\nunsigned operands is actually trunc_mod.\n\n2022-01-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/102860\n\t* match.pd (x %[fl] y -> x % y): New simplification for\n\tunsigned integral types.\n\t* optabs-tree.cc (optab_for_tree_code): Return unknown_optab\n\tfor {CEIL,FLOOR,ROUND}_{DIV,MOD}_EXPR with VECTOR_TYPE.\n\n\t* gfortran.dg/pr102860.f90: New test.", "tree": {"sha": "491ecb8e57e2a64bc59886bda1054ab1fcfd8c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491ecb8e57e2a64bc59886bda1054ab1fcfd8c2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffc7f200adbdf47f14b3594d9b21855c19cf797a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc7f200adbdf47f14b3594d9b21855c19cf797a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc7f200adbdf47f14b3594d9b21855c19cf797a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc7f200adbdf47f14b3594d9b21855c19cf797a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f35bb467a01db988d5fe1637db5bff4b4f9e7086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35bb467a01db988d5fe1637db5bff4b4f9e7086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35bb467a01db988d5fe1637db5bff4b4f9e7086"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "c68eed70a265352696c3f68704a5d108d4a2e405", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ffc7f200adbdf47f14b3594d9b21855c19cf797a", "patch": "@@ -425,12 +425,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     { build_minus_one_cst (type); })))\n \n /* For unsigned integral types, FLOOR_DIV_EXPR is the same as\n-   TRUNC_DIV_EXPR.  Rewrite into the latter in this case.  */\n-(simplify\n- (floor_div @0 @1)\n- (if ((INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n-      && TYPE_UNSIGNED (type))\n-  (trunc_div @0 @1)))\n+   TRUNC_DIV_EXPR.  Rewrite into the latter in this case.  Similarly\n+   for MOD instead of DIV.  */\n+(for floor_divmod (floor_div floor_mod)\n+     trunc_divmod (trunc_div trunc_mod)\n+ (simplify\n+  (floor_divmod @0 @1)\n+  (if ((INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n+       && TYPE_UNSIGNED (type))\n+   (trunc_divmod @0 @1))))\n \n /* Combine two successive divisions.  Note that combining ceil_div\n    and floor_div is trickier and combining round_div even more so.  */"}, {"sha": "8383fe820b080f6d66f83dcf3b77d3c9f869f4bc", "filename": "gcc/optabs-tree.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Foptabs-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Foptabs-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.cc?ref=ffc7f200adbdf47f14b3594d9b21855c19cf797a", "patch": "@@ -56,17 +56,32 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case MULT_HIGHPART_EXPR:\n       return TYPE_UNSIGNED (type) ? umul_highpart_optab : smul_highpart_optab;\n \n-    case TRUNC_MOD_EXPR:\n     case CEIL_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n+      /* {s,u}mod_optab implements TRUNC_MOD_EXPR.  For scalar modes,\n+\t expansion has code to adjust TRUNC_MOD_EXPR into the desired other\n+\t modes, but for vector modes it does not.  The adjustment code\n+\t should be instead emitted in tree-vect-patterns.cc.  */\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\treturn unknown_optab;\n+      /* FALLTHRU */\n+    case TRUNC_MOD_EXPR:\n       return TYPE_UNSIGNED (type) ? umod_optab : smod_optab;\n \n-    case RDIV_EXPR:\n-    case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:\n     case ROUND_DIV_EXPR:\n+      /* {,u}{s,u}div_optab implements {TRUNC,EXACT}_DIV_EXPR or RDIV_EXPR.\n+\t For scalar modes, expansion has code to adjust TRUNC_DIV_EXPR\n+\t into the desired other modes, but for vector modes it does not.\n+\t The adjustment code should be instead emitted in\n+\t tree-vect-patterns.cc.  */\n+      if (TREE_CODE (type) == VECTOR_TYPE)\n+\treturn unknown_optab;\n+      /* FALLTHRU */\n+    case RDIV_EXPR:\n+    case TRUNC_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n       if (TYPE_SATURATING (type))\n \treturn TYPE_UNSIGNED (type) ? usdiv_optab : ssdiv_optab;"}, {"sha": "d0a7356c0f5e9550139b13f568168853fcd242c5", "filename": "gcc/testsuite/gfortran.dg/pr102860.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102860.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc7f200adbdf47f14b3594d9b21855c19cf797a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102860.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102860.f90?ref=ffc7f200adbdf47f14b3594d9b21855c19cf797a", "patch": "@@ -0,0 +1,10 @@\n+! PR middle-end/102860\n+! { dg-do compile { target { powerpc*-*-* } } }\n+! { dg-require-effective-target powerpc_vsx_ok } \n+! { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power10\" } } \n+! { dg-options \"-O2 -mcpu=power10\" } \n+\n+function foo(a)\n+  integer(kind=4) :: a(1024)\n+  a(:) = modulo (a(:), 39)\n+end function"}]}