{"sha": "f5ca06e67847e071c6df8ca316afc042af8cb07d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjYTA2ZTY3ODQ3ZTA3MWM2ZGY4Y2EzMTZhZmMwNDJhZjhjYjA3ZA==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2010-08-13T07:26:05Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2010-08-13T07:26:05Z"}, "message": "gfortran.h (array_type): New type `AS_IMPLIED_SHAPE'.\n\n2010-08-13  Daniel Kraft  <d@domob.eu>\n\n\t* gfortran.h (array_type): New type `AS_IMPLIED_SHAPE'.\n\t* array.c (gfc_match_array_spec): Match implied-shape specification and\n\thandle AS_IMPLIED_SHAPE correctly otherwise.\n\t* decl.c (add_init_expr_to_sym): Set upper bounds for implied-shape.\n\t(variable_decl): Some checks for implied-shape declaration.\n\t* resolve.c (resolve_symbol): Assert that array-spec is no longer\n\tAS_IMPLIED_SHAPE in any case.\n\n2010-08-13  Daniel Kraft  <d@domob.eu>\n\n\t* gfortran.dg/implied_shape_1.f08: New test.\n\t* gfortran.dg/implied_shape_2.f90: New test.\n\t* gfortran.dg/implied_shape_3.f08: New test.\n\nFrom-SVN: r163221", "tree": {"sha": "cfb530d8bd21c019453cd0cba78bea87e46daea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb530d8bd21c019453cd0cba78bea87e46daea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5ca06e67847e071c6df8ca316afc042af8cb07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ca06e67847e071c6df8ca316afc042af8cb07d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ca06e67847e071c6df8ca316afc042af8cb07d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ca06e67847e071c6df8ca316afc042af8cb07d/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf677bb86756a4ab60f1db9592261cfa90265b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf677bb86756a4ab60f1db9592261cfa90265b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf677bb86756a4ab60f1db9592261cfa90265b17"}], "stats": {"total": 224, "additions": 211, "deletions": 13}, "files": [{"sha": "aaf15315213b5c28a4dad02a79b66520e68b60d7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -1,3 +1,13 @@\n+2010-08-13  Daniel Kraft  <d@domob.eu>\n+\n+\t* gfortran.h (array_type): New type `AS_IMPLIED_SHAPE'.\n+\t* array.c (gfc_match_array_spec): Match implied-shape specification and\n+\thandle AS_IMPLIED_SHAPE correctly otherwise.\n+\t* decl.c (add_init_expr_to_sym): Set upper bounds for implied-shape.\n+\t(variable_decl): Some checks for implied-shape declaration.\n+\t* resolve.c (resolve_symbol): Assert that array-spec is no longer\n+\tAS_IMPLIED_SHAPE in any case.\n+\n 2010-08-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.opt (MD, MMD): Change to MDX and MMDX."}, {"sha": "a26be7891deb74384f2f0d3dc9ea6ac1fecde342", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -463,6 +463,12 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n       as->rank++;\n       current_type = match_array_element_spec (as);\n \n+      /* Note that current_type == AS_ASSUMED_SIZE for both assumed-size\n+\t and implied-shape specifications.  If the rank is at least 2, we can\n+\t distinguish between them.  But for rank 1, we currently return\n+\t ASSUMED_SIZE; this gets adjusted later when we know for sure\n+\t whether the symbol parsed is a PARAMETER or not.  */\n+\n       if (as->rank == 1)\n \t{\n \t  if (current_type == AS_UNKNOWN)\n@@ -475,6 +481,15 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n \t  case AS_UNKNOWN:\n \t    goto cleanup;\n \n+\t  case AS_IMPLIED_SHAPE:\n+\t    if (current_type != AS_ASSUMED_SHAPE)\n+\t      {\n+\t\tgfc_error (\"Bad array specification for implied-shape\"\n+\t\t\t   \" array at %C\");\n+\t\tgoto cleanup;\n+\t      }\n+\t    break;\n+\n \t  case AS_EXPLICIT:\n \t    if (current_type == AS_ASSUMED_SIZE)\n \t      {\n@@ -513,6 +528,12 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n \t    goto cleanup;\n \n \t  case AS_ASSUMED_SIZE:\n+\t    if (as->rank == 2 && current_type == AS_ASSUMED_SIZE)\n+\t      {\n+\t\tas->type = AS_IMPLIED_SHAPE;\n+\t\tbreak;\n+\t      }\n+\n \t    gfc_error (\"Bad specification for assumed size array at %C\");\n \t    goto cleanup;\n \t  }\n@@ -570,6 +591,7 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n       else\n \tswitch (as->cotype)\n \t  { /* See how current spec meshes with the existing.  */\n+\t    case AS_IMPLIED_SHAPE:\n \t    case AS_UNKNOWN:\n \t      goto cleanup;\n "}, {"sha": "91eb7109c8056cb5ddd3f1f82de6d08490c5095e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -1378,6 +1378,51 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t    }\n \t}\n \n+      /* If sym is implied-shape, set its upper bounds from init.  */\n+      if (sym->attr.flavor == FL_PARAMETER && sym->attr.dimension\n+\t  && sym->as->type == AS_IMPLIED_SHAPE)\n+\t{\n+\t  int dim;\n+\n+\t  if (init->rank == 0)\n+\t    {\n+\t      gfc_error (\"Can't initialize implied-shape array at %L\"\n+\t\t\t \" with scalar\", &sym->declared_at);\n+\t      return FAILURE;\n+\t    }\n+\t  gcc_assert (sym->as->rank == init->rank);\n+\n+\t  /* Shape should be present, we get an initialization expression.  */\n+\t  gcc_assert (init->shape);\n+\n+\t  for (dim = 0; dim < sym->as->rank; ++dim)\n+\t    {\n+\t      int k;\n+\t      gfc_expr* lower;\n+\t      gfc_expr* e;\n+\t      \n+\t      lower = sym->as->lower[dim];\n+\t      if (lower->expr_type != EXPR_CONSTANT)\n+\t\t{\n+\t\t  gfc_error (\"Non-constant lower bound in implied-shape\"\n+\t\t\t     \" declaration at %L\", &lower->where);\n+\t\t  return FAILURE;\n+\t\t}\n+\n+\t      /* All dimensions must be without upper bound.  */\n+\t      gcc_assert (!sym->as->upper[dim]);\n+\n+\t      k = lower->ts.kind;\n+\t      e = gfc_get_constant_expr (BT_INTEGER, k, &sym->declared_at);\n+\t      mpz_add (e->value.integer,\n+\t\t       lower->value.integer, init->shape[dim]);\n+\t      mpz_sub_ui (e->value.integer, e->value.integer, 1);\n+\t      sym->as->upper[dim] = e;\n+\t    }\n+\n+\t  sym->as->type = AS_EXPLICIT;\n+\t}\n+\n       /* Need to check if the expression we initialized this\n \t to was one of the iso_c_binding named constants.  If so,\n \t and we're a parameter (constant), let it be iso_c.\n@@ -1650,6 +1695,34 @@ variable_decl (int elem)\n   else if (current_as)\n     merge_array_spec (current_as, as, true);\n \n+  /* At this point, we know for sure if the symbol is PARAMETER and can thus\n+     determine (and check) whether it can be implied-shape.  If it\n+     was parsed as assumed-size, change it because PARAMETERs can not\n+     be assumed-size.  */\n+  if (as)\n+    {\n+      if (as->type == AS_IMPLIED_SHAPE && current_attr.flavor != FL_PARAMETER)\n+\t{\n+\t  m = MATCH_ERROR;\n+\t  gfc_error (\"Non-PARAMETER symbol '%s' at %L can't be implied-shape\",\n+\t\t     name, &var_locus);\n+\t  goto cleanup;\n+\t}\n+\n+      if (as->type == AS_ASSUMED_SIZE && as->rank == 1\n+\t  && current_attr.flavor == FL_PARAMETER)\n+\tas->type = AS_IMPLIED_SHAPE;\n+\n+      if (as->type == AS_IMPLIED_SHAPE\n+\t  && gfc_notify_std (GFC_STD_F2008,\n+\t\t\t     \"Fortran 2008: Implied-shape array at %L\",\n+\t\t\t     &var_locus) == FAILURE)\n+\t{\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n+    }\n+\n   char_len = NULL;\n   cl = NULL;\n "}, {"sha": "60ab175905900b0d9b9fc6ce60132c5ec7645fd2", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -157,7 +157,7 @@ expr_t;\n /* Array types.  */\n typedef enum\n { AS_EXPLICIT = 1, AS_ASSUMED_SHAPE, AS_DEFERRED,\n-  AS_ASSUMED_SIZE, AS_UNKNOWN\n+  AS_ASSUMED_SIZE, AS_IMPLIED_SHAPE, AS_UNKNOWN\n }\n array_type;\n "}, {"sha": "0e68af629a3ceaf67cef06623e0e054a90dafb30", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -11673,20 +11673,24 @@ resolve_symbol (gfc_symbol *sym)\n     }\n \n   /* Assumed size arrays and assumed shape arrays must be dummy\n-     arguments.  */\n+     arguments.  Array-spec's of implied-shape should have been resolved to\n+     AS_EXPLICIT already.  */\n \n-  if (sym->as != NULL\n-      && ((sym->as->type == AS_ASSUMED_SIZE && !sym->as->cp_was_assumed)\n-\t  || sym->as->type == AS_ASSUMED_SHAPE)\n-      && sym->attr.dummy == 0)\n+  if (sym->as)\n     {\n-      if (sym->as->type == AS_ASSUMED_SIZE)\n-\tgfc_error (\"Assumed size array at %L must be a dummy argument\",\n-\t\t   &sym->declared_at);\n-      else\n-\tgfc_error (\"Assumed shape array at %L must be a dummy argument\",\n-\t\t   &sym->declared_at);\n-      return;\n+      gcc_assert (sym->as->type != AS_IMPLIED_SHAPE);\n+      if (((sym->as->type == AS_ASSUMED_SIZE && !sym->as->cp_was_assumed)\n+\t   || sym->as->type == AS_ASSUMED_SHAPE)\n+\t  && sym->attr.dummy == 0)\n+\t{\n+\t  if (sym->as->type == AS_ASSUMED_SIZE)\n+\t    gfc_error (\"Assumed size array at %L must be a dummy argument\",\n+\t\t       &sym->declared_at);\n+\t  else\n+\t    gfc_error (\"Assumed shape array at %L must be a dummy argument\",\n+\t\t       &sym->declared_at);\n+\t  return;\n+\t}\n     }\n \n   /* Make sure symbols with known intent or optional are really dummy"}, {"sha": "5821cfaf4ca501899d958c52601a10eadb03895e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -1,3 +1,9 @@\n+2010-08-13  Daniel Kraft  <d@domob.eu>\n+\n+\t* gfortran.dg/implied_shape_1.f08: New test.\n+\t* gfortran.dg/implied_shape_2.f90: New test.\n+\t* gfortran.dg/implied_shape_3.f08: New test.\n+\n 2010-08-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/42526"}, {"sha": "07a1ce835097857d640ad90fe93f84d2e0ded5de", "filename": "gcc/testsuite/gfortran.dg/implied_shape_1.f08", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_1.f08?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+! { dg-options \"-std=f2008 -fall-intrinsics\" }\n+\n+! Test for correct semantics of implied-shape arrays.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  INTEGER, PARAMETER :: n = 3\n+\n+  ! Should be able to reduce complex expressions.\n+  REAL, PARAMETER :: arr1(n:*) = SQRT ((/ 1.0, 2.0, 3.0 /)) + 42\n+\n+  ! With dimension statement.\n+  REAL, DIMENSION(*), PARAMETER :: arr2 = arr1\n+\n+  ! Rank > 1.\n+  INTEGER, PARAMETER :: arr3(n:*, *) = RESHAPE ((/ 1, 2, 3, 4 /), (/ 2, 2/))\n+\n+  ! Character array.\n+  CHARACTER(LEN=*), PARAMETER :: arr4(*) = (/ CHARACTER(LEN=3) :: \"ab\", \"cde\" /)\n+\n+  IF (LBOUND (arr1, 1) /= n .OR. UBOUND (arr1, 1) /= n + 2) CALL abort ()\n+  IF (SIZE (arr1) /= 3) CALL abort ()\n+\n+  IF (LBOUND (arr2, 1) /= 1 .OR. UBOUND (arr2, 1) /= 3) CALL abort ()\n+  IF (SIZE (arr2) /= 3) CALL abort ()\n+\n+  IF (ANY (LBOUND (arr3) /= (/ n, 1 /) .OR. UBOUND (arr3) /= (/ n + 1, 2 /))) &\n+    CALL abort ()\n+  IF (SIZE (arr3) /= 4) CALL abort ()\n+\n+  IF (LBOUND (arr4, 1) /= 1 .OR. UBOUND (arr4, 1) /= 2) CALL abort ()\n+  IF (SIZE (arr4) /= 2) CALL abort ()\n+END PROGRAM main"}, {"sha": "a6e11f5584797cd08cc5886b68095f0fb6754054", "filename": "gcc/testsuite/gfortran.dg/implied_shape_2.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_2.f90?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+\n+! Test for rejection of implied-shape prior to Fortran 2008.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+  INTEGER, PARAMETER :: arr(*) = (/ 2, 3, 4 /) ! { dg-error \"Fortran 2008\" }\n+END PROGRAM main"}, {"sha": "6cf13bb401334dd69a5c1fb836ebfe4e11bac664", "filename": "gcc/testsuite/gfortran.dg/implied_shape_3.f08", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ca06e67847e071c6df8ca316afc042af8cb07d/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_shape_3.f08?ref=f5ca06e67847e071c6df8ca316afc042af8cb07d", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+\n+! Test for errors with implied-shape declarations.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  INTEGER :: n\n+  INTEGER, PARAMETER :: mat(2, 2) = RESHAPE ((/ 1, 2, 3, 4 /), (/ 2, 2 /))\n+\n+  ! Malformed declaration.\n+  INTEGER, PARAMETER :: arr1(*, *, 5) = mat ! { dg-error \"Bad array specification for implied-shape array\" }\n+\n+  ! Rank mismatch in initialization.\n+  INTEGER, PARAMETER :: arr2(*, *) = (/ 1, 2, 3, 4 /) ! { dg-error \"Incompatible ranks\" }\n+\n+  ! Non-PARAMETER implied-shape, with and without initializer.\n+  INTEGER :: arr3(*, *) ! { dg-error \"Non-PARAMETER\" }\n+  INTEGER :: arr4(*, *) = mat ! { dg-error \"Non-PARAMETER\" }\n+\n+  ! Missing initializer.\n+  INTEGER, PARAMETER :: arr5(*) ! { dg-error \"is missing an initializer\" }\n+\n+  ! Initialization from scalar.\n+  INTEGER, PARAMETER :: arr6(*) = 0 ! { dg-error \"with scalar\" }\n+\n+  ! Automatic bounds.\n+  n = 2\n+  BLOCK\n+    INTEGER, PARAMETER :: arr7(n:*) = (/ 2, 3, 4 /) ! { dg-error \"Non-constant lower bound\" }\n+  END BLOCK\n+END PROGRAM main"}]}