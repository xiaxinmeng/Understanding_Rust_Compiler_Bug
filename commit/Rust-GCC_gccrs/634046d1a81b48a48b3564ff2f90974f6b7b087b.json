{"sha": "634046d1a81b48a48b3564ff2f90974f6b7b087b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0MDQ2ZDFhODFiNDhhNDhiMzU2NGZmMmY5MDk3NGY2YjdiMDg3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-18T13:02:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-18T13:05:04Z"}, "message": "c++: Move hidden-lambda entity lookup checking\n\nHidden lambda entities only occur in block and class scopes.  There's\nno need to check for them on every lookup.  So moving that particular\npiece of validation to lookup_name_1, which cares.  Also reordered the\nnamespace and type checking, as that is also simpler.\n\n\tgcc/cp/\n\t* name-lookup.c (qualify_lookup): Drop lambda checking here.\n\tReorder namespace & type checking.\n\t(lookup_name_1): Do hidden lambda checking here.", "tree": {"sha": "f3518da97e26a659ed3893fb324853a451d13a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3518da97e26a659ed3893fb324853a451d13a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/634046d1a81b48a48b3564ff2f90974f6b7b087b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634046d1a81b48a48b3564ff2f90974f6b7b087b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634046d1a81b48a48b3564ff2f90974f6b7b087b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634046d1a81b48a48b3564ff2f90974f6b7b087b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bebbc033d8bf2246745ffef7186b0424e08ba6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bebbc033d8bf2246745ffef7186b0424e08ba6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bebbc033d8bf2246745ffef7186b0424e08ba6b"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "c68ea09e610b7cfe297caadbfb4379c21f574b3f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634046d1a81b48a48b3564ff2f90974f6b7b087b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634046d1a81b48a48b3564ff2f90974f6b7b087b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=634046d1a81b48a48b3564ff2f90974f6b7b087b", "patch": "@@ -5221,24 +5221,16 @@ qualify_lookup (tree val, LOOK_want want)\n   if (val == NULL_TREE)\n     return false;\n \n-  if (bool (want & LOOK_want::NAMESPACE) && TREE_CODE (val) == NAMESPACE_DECL)\n-    return true;\n-\n   if (bool (want & LOOK_want::TYPE))\n     {\n       tree target_val = strip_using_decl (val);\n \n-      if (TREE_CODE (target_val) == TYPE_DECL\n-\t  || TREE_CODE (target_val) == TEMPLATE_DECL)\n+      if (TREE_CODE (STRIP_TEMPLATE (target_val)) == TYPE_DECL)\n \treturn true;\n     }\n \n   if (bool (want & LOOK_want::TYPE_NAMESPACE))\n-    return false;\n-\n-  /* Look through lambda things that we shouldn't be able to see.  */\n-  if (!bool (want & LOOK_want::HIDDEN_LAMBDA) && is_lambda_ignored_entity (val))\n-    return false;\n+    return TREE_CODE (val) == NAMESPACE_DECL;\n \n   return true;\n }\n@@ -6430,7 +6422,10 @@ lookup_name_1 (tree name, LOOK_where where, LOOK_want want)\n   tree val = NULL_TREE;\n \n   gcc_checking_assert (unsigned (where) != 0);\n-\n+  /* If we're looking for hidden lambda things, we shouldn't be\n+     looking in namespace scope.  */\n+  gcc_checking_assert (!bool (want & LOOK_want::HIDDEN_LAMBDA)\n+\t\t       || !bool (where & LOOK_where::NAMESPACE));\n   query_oracle (name);\n \n   /* Conversion operators are handled specially because ordinary\n@@ -6481,7 +6476,10 @@ lookup_name_1 (tree name, LOOK_where where, LOOK_want want)\n \t  continue;\n \n \t/* If this is the kind of thing we're looking for, we're done.  */\n-\tif (qualify_lookup (iter->value, want))\n+\tif (iter->value\n+\t    && (bool (want & LOOK_want::HIDDEN_LAMBDA)\n+\t\t|| !is_lambda_ignored_entity (iter->value))\n+\t    && qualify_lookup (iter->value, want))\n \t  binding = iter->value;\n \telse if (bool (want & LOOK_want::TYPE)\n \t\t && qualify_lookup (iter->type, want))"}]}