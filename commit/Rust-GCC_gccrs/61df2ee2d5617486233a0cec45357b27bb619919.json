{"sha": "61df2ee2d5617486233a0cec45357b27bb619919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkZjJlZTJkNTYxNzQ4NjIzM2EwY2VjNDUzNTdiMjdiYjYxOTkxOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-06T01:11:37Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-08-06T01:11:37Z"}, "message": "(finish_struct): No pedwarn for field with enum type if size matches int.\n\n(grokdeclarator): No error for void type for extern or global var.\n\n(grokdeclarator): Warn here for volatile fn returning non-void type.\n(start_function): Not here.\n\n(grokdeclarator): Don't pass on const and volatile\nfron function value type to function type.\n\nFrom-SVN: r5084", "tree": {"sha": "8a0f848104f2b6b4abb07e1a87ce3dc3f291a132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0f848104f2b6b4abb07e1a87ce3dc3f291a132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61df2ee2d5617486233a0cec45357b27bb619919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61df2ee2d5617486233a0cec45357b27bb619919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61df2ee2d5617486233a0cec45357b27bb619919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61df2ee2d5617486233a0cec45357b27bb619919/comments", "author": null, "committer": null, "parents": [{"sha": "d8e29a65ddcd21f2e2cad1b8eb09fff6b96bd6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e29a65ddcd21f2e2cad1b8eb09fff6b96bd6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e29a65ddcd21f2e2cad1b8eb09fff6b96bd6fa"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "734577a24505ba8afee13b0d60f29cbb1366584e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61df2ee2d5617486233a0cec45357b27bb619919/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61df2ee2d5617486233a0cec45357b27bb619919/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=61df2ee2d5617486233a0cec45357b27bb619919", "patch": "@@ -4306,6 +4306,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t\t\t      flag_traditional \n \t\t\t\t      ? NULL_TREE : arg_types);\n #endif\n+\t  /* ANSI seems to say that `const int foo ();'\n+\t     does not make the function foo const.  */\n+\t  if (constp || volatilep)\n+\t    type = c_build_type_variant (type, constp, volatilep);\n+\t  constp = 0;\n+\t  volatilep = 0;\n+\n \t  type = build_function_type (type, arg_types);\n \t  declarator = TREE_OPERAND (declarator, 0);\n \n@@ -4424,12 +4431,18 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       return type;\n     }\n \n-  /* `void' at top level (not within pointer)\n-     is allowed only in typedefs or type names.\n+  /* Aside from typedefs and type names (handle above),\n+     `void' at top level (not within pointer)\n+     is allowed only in public variables.\n      We don't complain about parms either, but that is because\n      a better error message can be made later.  */\n \n-  if (TYPE_MAIN_VARIANT (type) == void_type_node && decl_context != PARM)\n+  if (TYPE_MAIN_VARIANT (type) == void_type_node && decl_context != PARM\n+      && ! ((decl_context != FIELD && TREE_CODE (type) != FUNCTION_TYPE)\n+\t    && ((specbits & (1 << (int) RID_EXTERN))\n+\t\t|| (current_binding_level == global_binding_level\n+\t\t    && !(specbits\n+\t\t\t & ((1 << (int) RID_STATIC) | (1 << (int) RID_REGISTER)))))))\n     {\n       error (\"variable or field `%s' declared void\",\n \t     IDENTIFIER_POINTER (declarator));\n@@ -4564,6 +4577,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    && ! DECL_IN_SYSTEM_HEADER (decl))\n \t  pedwarn (\"ANSI C forbids const or volatile functions\");\n \n+\tif (volatilep\n+\t    && TREE_TYPE (TREE_TYPE (decl)) != void_type_node)\n+\t  warning (\"volatile function returns non-void value\");\n+\n \tif (extern_ref)\n \t  DECL_EXTERNAL (decl) = 1;\n \t/* Record absence of global scope for `static' or `auto'.  */\n@@ -5154,7 +5171,11 @@ finish_struct (t, fieldlist)\n \t}\n       if (DECL_INITIAL (x) && pedantic\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != integer_type_node\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != unsigned_type_node)\n+\t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != unsigned_type_node\n+\t  /* Accept an enum that's equivalent to int or unsigned int.  */\n+\t  && !(TREE_CODE (TREE_TYPE (x)) == ENUMERAL_TYPE\n+\t       && (TYPE_PRECISION (TREE_TYPE (x))\n+\t\t   == TYPE_PRECISION (integer_type_node))))\n \tpedwarn_with_decl (x, \"bit-field `%s' type invalid in ANSI C\");\n \n       /* Detect and ignore out of range field width.  */\n@@ -5648,10 +5669,6 @@ start_function (declspecs, declarator, nested)\n \n   announce_function (decl1);\n \n-  if (TREE_THIS_VOLATILE (decl1)\n-      && TREE_TYPE (decl1) != void_type_node)\n-    warning (\"volatile function returns non-void value\");\n-\n   if (TYPE_SIZE (TREE_TYPE (TREE_TYPE (decl1))) == 0)\n     {\n       error (\"return-type is an incomplete type\");"}]}