{"sha": "ed947a968eb7b1de0557448c7128d25a2b9bf40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5NDdhOTY4ZWI3YjFkZTA1NTc0NDhjNzEyOGQyNWEyYjliZjQwYw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2001-10-02T03:36:45Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-10-02T03:36:45Z"}, "message": "rs6000.h (enum processor_type): Add support for 7400 (G4) and 7450.\n\n2001-10-01  Dale Johannesen  <dalej@apple.com>\n\n        * config/rs6000/rs6000.h (enum processor_type): Add support\n        for 7400 (G4) and 7450.\n        (RTX_COSTS): Ditto.\n        * config/rs6000/rs6000.c (rs6000_override_options): Ditto.\n        (rs6000_issue_rate): Ditto.\n        (rs6000_adjust_cost): Fix cycle counts for compares.\n        (debug_stack_info):  Fix an obvious typo.\n        * config/rs6000/rs6000.md: Add functional units for 7400 and 7450.\n        * doc/invoke.texi: Document.\n        * config/rs6000/darwin.h (TARGET_DEFAULT): Set to be reasonable\n        for Darwin.\n        (PROCESSOR_DEFAULT): Ditto.\n\nFrom-SVN: r45937", "tree": {"sha": "1efdc7baede335a3a9ec05e1e13604f8ae8ab769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efdc7baede335a3a9ec05e1e13604f8ae8ab769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed947a968eb7b1de0557448c7128d25a2b9bf40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed947a968eb7b1de0557448c7128d25a2b9bf40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed947a968eb7b1de0557448c7128d25a2b9bf40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed947a968eb7b1de0557448c7128d25a2b9bf40c/comments", "author": null, "committer": null, "parents": [{"sha": "d93f142f8a395f73c73b1b74b9fcf9c373519c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93f142f8a395f73c73b1b74b9fcf9c373519c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93f142f8a395f73c73b1b74b9fcf9c373519c06"}], "stats": {"total": 219, "additions": 181, "deletions": 38}, "files": [{"sha": "e0581ec4f249073536897e7141946d5772f5cc21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -1,3 +1,18 @@\n+2001-10-01  Dale Johannesen  <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.h (enum processor_type): Add support\n+\tfor 7400 (G4) and 7450.\n+\t(RTX_COSTS): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Ditto.\n+\t(rs6000_issue_rate): Ditto.\n+\t(rs6000_adjust_cost): Fix cycle counts for compares.\n+\t(debug_stack_info):  Fix an obvious typo.\n+\t* config/rs6000/rs6000.md: Add functional units for 7400 and 7450.\n+\t* doc/invoke.texi: Document.\n+\t* config/rs6000/darwin.h (TARGET_DEFAULT): Set to be reasonable\n+\tfor Darwin.\n+\t(PROCESSOR_DEFAULT): Ditto.\n+\n 2001-10-01  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* Makefile.in (STAGE2_FLAGS_TO_PASS): Propagate HOST_CC."}, {"sha": "b63e963d29ac39c2fae3b6c98a3cc07dfeb57877", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -43,10 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #define FIXED_R2 0\n #define FIXED_R13 0\n \n-#undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_MULTIPLE | MASK_NEW_MNEMONICS \\\n-  | MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC)\n-\n /* Base register for access to local variables of the function.  */\n \n #undef  FRAME_POINTER_REGNUM\n@@ -146,6 +142,19 @@ Boston, MA 02111-1307, USA.  */\n \n #define RS6000_MCOUNT \"*mcount\"\n \n+/* Default processor: a G4.  */\n+\n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT  PROCESSOR_PPC7400\n+\n+/* Default target flag settings.  Despite the fact that STMW/LMW\n+   serializes, it's still a big codesize win to use them.  Use FSEL by\n+   default as well.  */\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_MULTIPLE | MASK_NEW_MNEMONICS \\\n+                      | MASK_PPC_GFXOPT)\n+\n /* Since Darwin doesn't do TOCs, stub this out.  */\n \n #define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)  0"}, {"sha": "88420ba4cabf85b3fd05888cf4d5b249595aec2d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -309,6 +309,12 @@ rs6000_override_options (default_cpu)\n \t {\"750\", PROCESSOR_PPC750,\n  \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n  \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n+       {\"7400\", PROCESSOR_PPC7400,\n+          MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+          POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n+       {\"7450\", PROCESSOR_PPC7450,\n+          MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+          POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"801\", PROCESSOR_MPCCORE,\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n@@ -5654,7 +5660,7 @@ debug_stack_info (info)\n     fprintf (stderr, \"\\tfp_size             = %5d\\n\", info->fp_size);\n \n  if (info->lr_size)\n-    fprintf (stderr, \"\\tlr_size             = %5d\\n\", info->cr_size);\n+    fprintf (stderr, \"\\tlr_size             = %5d\\n\", info->lr_size);\n \n   if (info->cr_size)\n     fprintf (stderr, \"\\tcr_size             = %5d\\n\", info->cr_size);\n@@ -7964,16 +7970,33 @@ rs6000_adjust_cost (insn, link, dep_insn, cost)\n \n   if (REG_NOTE_KIND (link) == 0)\n     {\n-      /* Data dependency; DEP_INSN writes a register that INSN reads some\n-\t cycles later.  */\n-\n-      /* Tell the first scheduling pass about the latency between a mtctr\n-\t and bctr (and mtlr and br/blr).  The first scheduling pass will not\n-\t know about this latency since the mtctr instruction, which has the\n-\t latency associated to it, will be generated by reload.  */\n-      if (get_attr_type (insn) == TYPE_JMPREG)\n-\treturn TARGET_POWER ? 5 : 4;\n-\n+      /* Data dependency; DEP_INSN writes a register that INSN reads\n+\t some cycles later.  */\n+      switch (get_attr_type (insn))\n+\t{\n+\tcase TYPE_JMPREG:\n+          /* Tell the first scheduling pass about the latency between\n+\t     a mtctr and bctr (and mtlr and br/blr).  The first\n+\t     scheduling pass will not know about this latency since\n+\t     the mtctr instruction, which has the latency associated\n+\t     to it, will be generated by reload.  */\n+          return TARGET_POWER ? 5 : 4;\n+\tcase TYPE_BRANCH:\n+\t  /* Leave some extra cycles between a compare and its\n+\t     dependent branch, to inhibit expensive mispredicts.  */\n+\t  if ((rs6000_cpu_attr == CPU_PPC750\n+               || rs6000_cpu_attr == CPU_PPC7400\n+               || rs6000_cpu_attr == CPU_PPC7450)\n+\t      && recog_memoized (dep_insn)\n+\t      && (INSN_CODE (dep_insn) >= 0)\n+\t      && (get_attr_type (dep_insn) == TYPE_COMPARE\n+\t\t  || get_attr_type (dep_insn) == TYPE_DELAYED_COMPARE\n+\t\t  || get_attr_type (dep_insn) == TYPE_FPCOMPARE\n+\t\t  || get_attr_type (dep_insn) == TYPE_CR_LOGICAL))\n+\t    return cost + 2;\n+\tdefault:\n+\t  break;\n+\t}\n       /* Fall out to return default cost.  */\n     }\n \n@@ -8031,9 +8054,11 @@ rs6000_issue_rate ()\n   case CPU_RIOS1:  /* ? */\n   case CPU_RS64A:\n   case CPU_PPC601: /* ? */\n+  case CPU_PPC7450:\n     return 3;\n   case CPU_PPC603:\n   case CPU_PPC750:\n+  case CPU_PPC7400:\n     return 2; \n   case CPU_RIOS2:\n   case CPU_PPC604:"}, {"sha": "56281940a5aada90b942ba6001b7c1ad7730f9c1", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -358,7 +358,9 @@ enum processor_type\n    PROCESSOR_PPC604e,\n    PROCESSOR_PPC620,\n    PROCESSOR_PPC630,\n-   PROCESSOR_PPC750\n+   PROCESSOR_PPC750,\n+   PROCESSOR_PPC7400,\n+   PROCESSOR_PPC7450\n };\n \n extern enum processor_type rs6000_cpu;\n@@ -2116,6 +2118,8 @@ do {\t\t\t\t\t\t\t\t\t     \\\n         return COSTS_N_INSNS (2);\t\t\t\t\t\\\n       case PROCESSOR_PPC601:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (5);\t\t\t\t\t\\\n+      case PROCESSOR_PPC7400:                                         \\\n+      case PROCESSOR_PPC7450:                                         \\\n       case PROCESSOR_PPC603:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n         return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n@@ -2168,7 +2172,10 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \t\t? COSTS_N_INSNS (21)\t\t\t\t\t\\\n \t\t: COSTS_N_INSNS (37));\t\t\t\t\t\\\n       case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n+      case PROCESSOR_PPC7400:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (19);\t\t\t\t\t\\\n+      case PROCESSOR_PPC7450:\t\t\t\t\t\t\\\n+        return COSTS_N_INSNS (23);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   case FFS:\t\t\t\t\t\t\t\t\\\n     return COSTS_N_INSNS (4);\t\t\t\t\t\t\\"}, {"sha": "de88213d1affe1d18a6ad3fb8de643e4ed646369", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 104, "deletions": 19, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -56,7 +56,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n ; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n@@ -66,19 +66,44 @@\n ; (POWER and 601 use Integer Unit)\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400\"))\n   2 1)\n \n+(define_function_unit \"lsu\" 1 0\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  3 1)\n+\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n   1 1)\n \n+(define_function_unit \"lsu\" 1 0\n+  (and (eq_attr \"type\" \"store,fpstore\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  2 1)\n+\n+(define_function_unit \"lsu\" 1 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  3 1)\n+\n+(define_function_unit \"lsu\" 1 0\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  3 3)\n+\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc750\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc603,ppc750,ppc7400\"))\n   2 1)\n \n+(define_function_unit \"lsu\" 1 0\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  4 1)\n+\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"fpload\")\n        (eq_attr \"cpu\" \"rs64a,ppc604,ppc604e,ppc620,ppc630\"))\n@@ -270,29 +295,57 @@\n        (eq_attr \"cpu\" \"ppc620,ppc630\"))\n   37 36)\n \n+; PPC7450 has 3 integer units (for most integer insns) and one mul/div\n+; unit, which also does CR-logical insns and move to/from SPR.\n+\n+(define_function_unit \"iu3\" 3 0\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  1 1)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  4 4)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  23 23)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  1 1)\n+\n ; PPC750 has two integer units: a primary one which can perform all\n ; operations and a secondary one which is fed in lock step with the first\n ; and can perform \"simple\" integer operations.  \n ; To catch this we define a 'dummy' imuldiv-unit that is also needed\n ; for the complex insns. \n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"integer\")\n-       (eq_attr \"cpu\" \"ppc750\"))\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   1 1)\n \n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc750\"))\n-  4 2)\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  4 4)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  19 19)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"imul\")\n-       (eq_attr \"cpu\" \"ppc750\"))\n-  4 2)\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  4 4)\n \n (define_function_unit \"imuldiv\" 1 0\n   (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc750\"))\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   19 19)\n \n ; CR-logical operations are execute-serialized, that is they don't\n@@ -301,7 +354,7 @@\n ; I've imitated this by giving them longer latency.\n (define_function_unit \"sru\" 1 0 \n   (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc603,ppc750\"))\n+       (eq_attr \"cpu\" \"ppc603,ppc750,ppc7400\"))\n   3 2)\n \n ; compare is done on integer unit, but feeds insns which\n@@ -318,17 +371,29 @@\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n   3 1)\n \n+; some extra cycles added by TARGET_SCHED_ADJUST_COST between compare\n+; and a following branch, to reduce mispredicts\n+(define_function_unit \"iu\" 1 0\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n+  1 1)\n+\n+(define_function_unit \"iu3\" 3 0\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  1 1)\n+\n (define_function_unit \"iu2\" 2 0   \n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n        (eq_attr \"cpu\" \"rios2\"))\n   3 1)\n \n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400\"))\n   1 1)\n \n ; fp compare uses fp unit\n@@ -355,9 +420,14 @@\n ; fp compare uses fp unit\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n   5 1)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\"  \"ppc750,ppc7400,ppc7450\"))\n+  3 1)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fpcompare\")\n        (eq_attr \"cpu\" \"mpccore\"))\n@@ -370,7 +440,7 @@\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450\"))\n   4 1)\n \n (define_function_unit \"bpu\" 1 0\n@@ -410,9 +480,14 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc603,ppc750,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620,ppc750,ppc7400\"))\n   3 1)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  5 1)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n        (eq_attr \"cpu\" \"rs64a\"))\n@@ -436,7 +511,7 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc7400\"))\n   3 1)\n \n (define_function_unit \"fpu\" 1 0\n@@ -451,9 +526,14 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"ppc601\"))\n+       (eq_attr \"cpu\" \"ppc601,ppc750,ppc7400\"))\n   17 17)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  21 21)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"sdiv\")\n        (eq_attr \"cpu\" \"mpccore\"))\n@@ -471,9 +551,14 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"rs64a,ppc601,ppc750,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc601,ppc750,ppc604,ppc604e,ppc620,ppc7400\"))\n   31 31)\n \n+(define_function_unit \"fpu\" 1 0\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc7450\"))\n+  35 35)\n+\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n        (eq_attr \"cpu\" \"ppc603\"))"}, {"sha": "b3a731a32665307fc88b081cdacb9986fa67b0e2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed947a968eb7b1de0557448c7128d25a2b9bf40c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ed947a968eb7b1de0557448c7128d25a2b9bf40c", "patch": "@@ -6587,9 +6587,9 @@ instruction scheduling parameters for machine type @var{cpu_type}.\n Supported values for @var{cpu_type} are @samp{rios}, @samp{rios1},\n @samp{rsc}, @samp{rios2}, @samp{rs64a}, @samp{601}, @samp{602},\n @samp{603}, @samp{603e}, @samp{604}, @samp{604e}, @samp{620},\n-@samp{630}, @samp{740}, @samp{750}, @samp{power}, @samp{power2},\n-@samp{powerpc}, @samp{403}, @samp{505}, @samp{801}, @samp{821},\n-@samp{823}, and @samp{860} and @samp{common}.\n+@samp{630}, @samp{740}, @samp{7400}, @samp{7450}, @samp{750},\n+@samp{power}, @samp{power2}, @samp{powerpc}, @samp{403}, @samp{505},\n+@samp{801}, @samp{821}, @samp{823}, and @samp{860} and @samp{common}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option will run on any POWER or PowerPC processor.\n@@ -6630,6 +6630,8 @@ The @option{-mcpu} options automatically enable or disable other\n @itemx 620\n @itemx 630\n @itemx 740\n+@itemx 7400\n+@itemx 7450\n @itemx 750\n @itemx 505\n @option{-mno-power}, @option{-mpowerpc}, @option{-mnew-mnemonics}"}]}