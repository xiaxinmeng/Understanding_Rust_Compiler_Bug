{"sha": "fff15bad1ab571906c37b88380431768d917dcb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmMTViYWQxYWI1NzE5MDZjMzdiODgzODA0MzE3NjhkOTE3ZGNiMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T06:33:20Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-07-15T06:33:20Z"}, "message": "libgomp: Add Fortran routine support for allocators\n\nlibgomp/ChangeLog:\n\n\t* allocator.c: Add ialias for omp_init_allocator and\n\tomp_destroy_allocator.\n\t* configure.ac: Set INTPTR_T_KIND.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\t* fortran.c (omp_init_allocator_, omp_destroy_allocator_,\n\tomp_set_default_allocator_, omp_get_default_allocator_): New\n\tfunctions and ialias_redirect.\n\t* icv.c: Add ialias for omp_set_default_allocator and\n\tomp_get_default_allocator.\n\t* libgomp.map (OMP_5.0.1): Add omp_init_allocator_,\n\tomp_destroy_allocator_, omp_set_default_allocator_ and\n\tomp_get_default_allocator_.\n\t* omp_lib.f90.in: Add allocator traits parameters, declare\n\tallocator routines and add related kind parameters.\n\t* omp_lib.h.in: Likewise.\n\t* testsuite/libgomp.c-c++-common/alloc-2.c: Fix sizeof.\n\t* testsuite/libgomp.fortran/alloc-1.F90: New test.\n\t* testsuite/libgomp.fortran/alloc-2.F90: New test.\n\t* testsuite/libgomp.fortran/alloc-3.F: New test.\n\t* testsuite/libgomp.fortran/alloc-4.f90: New test.\n\t* testsuite/libgomp.fortran/alloc-5.f90: New test.", "tree": {"sha": "db37c1397b78b5430555ef4c30fa39d6d288551c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db37c1397b78b5430555ef4c30fa39d6d288551c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff15bad1ab571906c37b88380431768d917dcb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff15bad1ab571906c37b88380431768d917dcb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff15bad1ab571906c37b88380431768d917dcb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff15bad1ab571906c37b88380431768d917dcb0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca07a3072438fa5e76f2b2cea9e51a98760a86f"}], "stats": {"total": 578, "additions": 574, "deletions": 4}, "files": [{"sha": "bc044b1820ae727f60db72aa3cc61c01545b87c8", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -405,6 +405,7 @@ INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+INTPTR_T_KIND = @INTPTR_T_KIND@\n LD = @LD@\n LDFLAGS = @LDFLAGS@\n LIBOBJS = @LIBOBJS@"}, {"sha": "7166538b1de4f5a4e4d794cd0876c4dcee6c204f", "filename": "libgomp/allocator.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fallocator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fallocator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fallocator.c?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -202,6 +202,9 @@ omp_destroy_allocator (omp_allocator_handle_t allocator)\n     }\n }\n \n+ialias (omp_init_allocator)\n+ialias (omp_destroy_allocator)\n+\n void *\n omp_alloc (size_t size, omp_allocator_handle_t allocator)\n {"}, {"sha": "d85023f4f05957a96b3b2a366918df19622682e4", "filename": "libgomp/configure", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -647,6 +647,7 @@ OMP_NEST_LOCK_ALIGN\n OMP_NEST_LOCK_SIZE\n OMP_LOCK_ALIGN\n OMP_LOCK_SIZE\n+INTPTR_T_KIND\n USE_FORTRAN_FALSE\n USE_FORTRAN_TRUE\n link_gomp\n@@ -11433,7 +11434,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11436 \"configure\"\n+#line 11437 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11539,7 +11540,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11542 \"configure\"\n+#line 11543 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16962,6 +16963,11 @@ for i in $config_path; do\n   fi\n done\n \n+if ac_fn_c_compute_int \"$LINENO\" \"sizeof (__INTPTR_TYPE__)\" \"INTPTR_T_KIND\"        \"\"; then :\n+\n+fi\n+\n+\n if ac_fn_c_compute_int \"$LINENO\" \"sizeof (omp_lock_t)\" \"OMP_LOCK_SIZE\"        \"\"; then :\n \n else\n@@ -17041,6 +17047,7 @@ fi\n \n \n \n+\n CFLAGS=\"$save_CFLAGS\"\n \n # Determine what GCC version number to use in filesystem paths."}, {"sha": "d1034dab7f80e7da0ed270754288bc3fe7593688", "filename": "libgomp/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -395,6 +395,7 @@ for i in $config_path; do\n   fi\n done\n \n+_AC_COMPUTE_INT([sizeof (__INTPTR_TYPE__)], [INTPTR_T_KIND])\n _AC_COMPUTE_INT([sizeof (omp_lock_t)], [OMP_LOCK_SIZE],,\n   [AC_MSG_ERROR([unsupported system, cannot find sizeof (omp_lock_t)])])\n _AC_COMPUTE_INT([__alignof (omp_lock_t)], [OMP_LOCK_ALIGN])\n@@ -428,6 +429,7 @@ if test $OMP_NEST_LOCK_25_SIZE -gt 8 || test $OMP_NEST_LOCK_25_ALIGN -gt $OMP_NE\n   OMP_NEST_LOCK_25_KIND=8\n fi\n \n+AC_SUBST(INTPTR_T_KIND)\n AC_SUBST(OMP_LOCK_SIZE)\n AC_SUBST(OMP_LOCK_ALIGN)\n AC_SUBST(OMP_NEST_LOCK_SIZE)"}, {"sha": "9d838b3b56f3ac5d62b27f748d9f08723a5da851", "filename": "libgomp/fortran.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ffortran.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ffortran.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ffortran.c?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -86,6 +86,10 @@ ialias_redirect (omp_get_initial_device)\n ialias_redirect (omp_get_max_task_priority)\n ialias_redirect (omp_pause_resource)\n ialias_redirect (omp_pause_resource_all)\n+ialias_redirect (omp_init_allocator)\n+ialias_redirect (omp_destroy_allocator)\n+ialias_redirect (omp_set_default_allocator)\n+ialias_redirect (omp_get_default_allocator)\n #endif\n \n #ifndef LIBGOMP_GNU_SYMBOL_VERSIONING\n@@ -676,3 +680,37 @@ omp_pause_resource_all_ (const int32_t *kind)\n {\n   return omp_pause_resource_all (*kind);\n }\n+\n+intptr_t\n+omp_init_allocator_ (const intptr_t *memspace, const int32_t *ntraits,\n+\t\t    const omp_alloctrait_t *traits)\n+{\n+  return (intptr_t) omp_init_allocator ((omp_memspace_handle_t) *memspace,\n+\t\t\t\t\t(int) *ntraits, traits);\n+}\n+\n+intptr_t\n+omp_init_allocator_8_ (const intptr_t *memspace, const int64_t *ntraits,\n+\t\t    const omp_alloctrait_t *traits)\n+{\n+  return (intptr_t) omp_init_allocator ((omp_memspace_handle_t) *memspace,\n+\t\t\t\t\t(int) *ntraits, traits);\n+}\n+\n+void\n+omp_destroy_allocator_ (const intptr_t *allocator)\n+{\n+  omp_destroy_allocator ((omp_allocator_handle_t) *allocator);\n+}\n+\n+void\n+omp_set_default_allocator_ (const intptr_t *allocator)\n+{\n+  omp_set_default_allocator ((omp_allocator_handle_t) *allocator);\n+}\n+\n+intptr_t\n+omp_get_default_allocator_ ()\n+{\n+  return (intptr_t) omp_get_default_allocator ();\n+}"}, {"sha": "3c16abb9123595d8d5362eeeca2213b5552663db", "filename": "libgomp/icv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ficv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ficv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ficv.c?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -235,3 +235,5 @@ ialias (omp_get_num_places)\n ialias (omp_get_place_num)\n ialias (omp_get_partition_num_places)\n ialias (omp_get_partition_place_nums)\n+ialias (omp_set_default_allocator)\n+ialias (omp_get_default_allocator)"}, {"sha": "c808e810702c5cf7d03d0d54eb43d346153b9d19", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -183,9 +183,14 @@ OMP_5.0 {\n OMP_5.0.1 {\n   global:\n \tomp_set_default_allocator;\n+\tomp_set_default_allocator_;\n \tomp_get_default_allocator;\n+\tomp_get_default_allocator_;\n \tomp_init_allocator;\n+\tomp_init_allocator_;\n+\tomp_init_allocator_8_;\n \tomp_destroy_allocator;\n+\tomp_destroy_allocator_;\n \tomp_alloc;\n \tomp_free;\n } OMP_5.0;"}, {"sha": "666b5152a5fac57fe6fc4aafca5e276a5ebb473d", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -24,13 +24,19 @@\n !  <http://www.gnu.org/licenses/>.\n \n       module omp_lib_kinds\n+        use iso_c_binding, only: c_int, c_intptr_t\n         implicit none\n+        private :: c_int, c_intptr_t\n         integer, parameter :: omp_lock_kind = @OMP_LOCK_KIND@\n         integer, parameter :: omp_nest_lock_kind = @OMP_NEST_LOCK_KIND@\n         integer, parameter :: omp_sched_kind = 4\n         integer, parameter :: omp_proc_bind_kind = 4\n         integer, parameter :: omp_lock_hint_kind = 4\n         integer, parameter :: omp_pause_resource_kind = 4\n+        integer, parameter :: omp_allocator_handle_kind = c_intptr_t\n+        integer, parameter :: omp_alloctrait_key_kind = c_int\n+        integer, parameter :: omp_alloctrait_val_kind = c_intptr_t\n+        integer, parameter :: omp_memspace_handle_kind = c_intptr_t\n         integer (omp_sched_kind), parameter :: omp_sched_static = 1\n         integer (omp_sched_kind), parameter :: omp_sched_dynamic = 2\n         integer (omp_sched_kind), parameter :: omp_sched_guided = 3\n@@ -59,6 +65,95 @@\n                  parameter :: omp_pause_soft = 1\n         integer (kind=omp_pause_resource_kind), &\n                  parameter :: omp_pause_hard = 2\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_sync_hint = 1\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_alignment = 2\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_access = 3\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_pool_size = 4\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_fallback = 5\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_fb_data = 6\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_pinned = 7\n+        integer (kind=omp_alloctrait_key_kind), &\n+                 parameter :: omp_atk_partition = 8\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_default = -1\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_false = 0\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_true = 1\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_contended = 3\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_uncontended = 4\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_serialized = 5\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_sequential = omp_atv_serialized\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_private = 6\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_all = 7\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_thread = 8\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_pteam = 9\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_cgroup = 10\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_default_mem_fb = 11\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_null_fb = 12\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_abort_fb = 13\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_allocator_fb = 14\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_environment = 15\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_nearest = 16\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_blocked = 17\n+        integer (kind=omp_alloctrait_val_kind), &\n+                 parameter :: omp_atv_interleaved = 18\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_null_allocator = 0\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_default_mem_alloc = 1\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_large_cap_mem_alloc = 2\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_const_mem_alloc = 3\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_high_bw_mem_alloc = 4\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_low_lat_mem_alloc = 5\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_cgroup_mem_alloc = 6\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_pteam_mem_alloc = 7\n+        integer (kind=omp_allocator_handle_kind), &\n+                 parameter :: omp_thread_mem_alloc = 8\n+        integer (omp_memspace_handle_kind), &\n+                 parameter :: omp_default_mem_space = 0\n+        integer (omp_memspace_handle_kind), &\n+                 parameter :: omp_large_cap_mem_space = 1\n+        integer (omp_memspace_handle_kind), &\n+                 parameter :: omp_const_mem_space = 2\n+        integer (omp_memspace_handle_kind), &\n+                 parameter :: omp_high_bw_mem_space = 3\n+        integer (omp_memspace_handle_kind), &\n+                 parameter :: omp_low_lat_mem_space = 4\n+\n+        type omp_alloctrait\n+          integer (kind=omp_alloctrait_key_kind) key\n+          integer (kind=omp_alloctrait_val_kind) value\n+        end type omp_alloctrait\n       end module\n \n       module omp_lib\n@@ -484,4 +579,47 @@\n           end function\n         end interface\n \n+        interface omp_init_allocator\n+          function omp_init_allocator (memspace, ntraits, traits)\n+            use omp_lib_kinds\n+            integer (kind=omp_allocator_handle_kind) omp_init_allocator\n+            integer (kind=omp_memspace_handle_kind), &\n+              intent(in) :: memspace\n+            integer (4), intent(in) :: ntraits\n+            type (omp_alloctrait), intent(in) :: traits(*)\n+          end function\n+          function omp_init_allocator_8 (memspace, ntraits, traits)\n+            use omp_lib_kinds\n+            integer (kind=omp_allocator_handle_kind) omp_init_allocator_8\n+            integer (kind=omp_memspace_handle_kind), &\n+              intent(in) :: memspace\n+            integer (8), intent(in) :: ntraits\n+            type (omp_alloctrait), intent(in) :: traits(*)\n+          end function\n+        end interface\n+\n+        interface\n+          subroutine omp_destroy_allocator (allocator)\n+            use omp_lib_kinds\n+            integer (kind=omp_allocator_handle_kind), &\n+              intent(in) :: allocator\n+          end subroutine\n+        end interface\n+\n+        interface\n+          subroutine omp_set_default_allocator (allocator)\n+            use omp_lib_kinds\n+            integer (kind=omp_allocator_handle_kind), &\n+              intent(in) :: allocator\n+          end subroutine\n+        end interface\n+\n+        interface\n+          function omp_get_default_allocator ()\n+            use omp_lib_kinds\n+            integer (kind=omp_allocator_handle_kind) &\n+               omp_get_default_allocator\n+          end function\n+        end interface\n+\n       end module omp_lib"}, {"sha": "34babe93ab9d726c8523663e0d2c25f23b934adc", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -66,6 +66,102 @@\n       parameter (omp_pause_soft = 1)\n       parameter (omp_pause_hard = 2)\n \n+      integer omp_allocator_handle_kind, omp_alloctrait_key_kind\n+      integer omp_alloctrait_val_kind, omp_memspace_handle_kind\n+      parameter (omp_allocator_handle_kind = @INTPTR_T_KIND@)\n+      parameter (omp_alloctrait_key_kind = @INTPTR_T_KIND@)\n+      parameter (omp_alloctrait_val_kind = @INTPTR_T_KIND@)\n+      parameter (omp_memspace_handle_kind = @INTPTR_T_KIND@)\n+      integer (omp_alloctrait_key_kind) omp_atk_sync_hint\n+      integer (omp_alloctrait_key_kind) omp_atk_alignment\n+      integer (omp_alloctrait_key_kind) omp_atk_access\n+      integer (omp_alloctrait_key_kind) omp_atk_pool_size\n+      integer (omp_alloctrait_key_kind) omp_atk_fallback\n+      integer (omp_alloctrait_key_kind) omp_atk_fb_data\n+      integer (omp_alloctrait_key_kind) omp_atk_pinned\n+      integer (omp_alloctrait_key_kind) omp_atk_partition\n+      parameter (omp_atk_sync_hint = 1)\n+      parameter (omp_atk_alignment = 2)\n+      parameter (omp_atk_access = 3)\n+      parameter (omp_atk_pool_size = 4)\n+      parameter (omp_atk_fallback = 5)\n+      parameter (omp_atk_fb_data = 6)\n+      parameter (omp_atk_pinned = 7)\n+      parameter (omp_atk_partition = 8)\n+      integer (omp_alloctrait_val_kind) omp_atv_false\n+      integer (omp_alloctrait_val_kind) omp_atv_true\n+      integer (omp_alloctrait_val_kind) omp_atv_default\n+      integer (omp_alloctrait_val_kind) omp_atv_contended\n+      integer (omp_alloctrait_val_kind) omp_atv_uncontended\n+      integer (omp_alloctrait_val_kind) omp_atv_serialized\n+      integer (omp_alloctrait_val_kind) omp_atv_sequential\n+      integer (omp_alloctrait_val_kind) omp_atv_private\n+      integer (omp_alloctrait_val_kind) omp_atv_all\n+      integer (omp_alloctrait_val_kind) omp_atv_thread\n+      integer (omp_alloctrait_val_kind) omp_atv_pteam\n+      integer (omp_alloctrait_val_kind) omp_atv_cgroup\n+      integer (omp_alloctrait_val_kind) omp_atv_default_mem_fb\n+      integer (omp_alloctrait_val_kind) omp_atv_null_fb\n+      integer (omp_alloctrait_val_kind) omp_atv_abort_fb\n+      integer (omp_alloctrait_val_kind) omp_atv_allocator_fb\n+      integer (omp_alloctrait_val_kind) omp_atv_environment\n+      integer (omp_alloctrait_val_kind) omp_atv_nearest\n+      integer (omp_alloctrait_val_kind) omp_atv_blocked\n+      integer (omp_alloctrait_val_kind) omp_atv_interleaved\n+      parameter (omp_atv_default = -1)\n+      parameter (omp_atv_false = 0)\n+      parameter (omp_atv_true = 1)\n+      parameter (omp_atv_contended = 3)\n+      parameter (omp_atv_uncontended = 4)\n+      parameter (omp_atv_serialized = 5)\n+      parameter (omp_atv_sequential = omp_atv_serialized)\n+      parameter (omp_atv_private = 6)\n+      parameter (omp_atv_all = 7)\n+      parameter (omp_atv_thread = 8)\n+      parameter (omp_atv_pteam = 9)\n+      parameter (omp_atv_cgroup = 10)\n+      parameter (omp_atv_default_mem_fb = 11)\n+      parameter (omp_atv_null_fb = 12)\n+      parameter (omp_atv_abort_fb = 13)\n+      parameter (omp_atv_allocator_fb = 14)\n+      parameter (omp_atv_environment = 15)\n+      parameter (omp_atv_nearest = 16)\n+      parameter (omp_atv_blocked = 17)\n+      parameter (omp_atv_interleaved = 18)\n+      integer (omp_allocator_handle_kind) omp_null_allocator\n+      integer (omp_allocator_handle_kind) omp_default_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_large_cap_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_const_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_high_bw_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_low_lat_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_cgroup_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_pteam_mem_alloc\n+      integer (omp_allocator_handle_kind) omp_thread_mem_alloc\n+      parameter (omp_null_allocator = 0)\n+      parameter (omp_default_mem_alloc = 1)\n+      parameter (omp_large_cap_mem_alloc = 2)\n+      parameter (omp_const_mem_alloc = 3)\n+      parameter (omp_high_bw_mem_alloc = 4)\n+      parameter (omp_low_lat_mem_alloc = 5)\n+      parameter (omp_cgroup_mem_alloc = 6)\n+      parameter (omp_pteam_mem_alloc = 7)\n+      parameter (omp_thread_mem_alloc = 8)\n+      integer (omp_memspace_handle_kind) omp_default_mem_space\n+      integer (omp_memspace_handle_kind) omp_large_cap_mem_space\n+      integer (omp_memspace_handle_kind) omp_const_mem_space\n+      integer (omp_memspace_handle_kind) omp_high_bw_mem_space\n+      integer (omp_memspace_handle_kind) omp_low_lat_mem_space\n+      parameter (omp_default_mem_space = 0)\n+      parameter (omp_large_cap_mem_space = 1)\n+      parameter (omp_const_mem_space = 2)\n+      parameter (omp_high_bw_mem_space = 3)\n+      parameter (omp_low_lat_mem_space = 4)\n+\n+      type omp_alloctrait\n+        integer (omp_alloctrait_key_kind) key\n+        integer (omp_alloctrait_val_kind) value\n+      end type omp_alloctrait\n+\n       external omp_init_lock, omp_init_nest_lock\n       external omp_init_lock_with_hint\n       external omp_init_nest_lock_with_hint\n@@ -141,3 +237,10 @@\n       external omp_pause_resource, omp_pause_resource_all\n       integer(4) omp_pause_resource\n       integer(4) omp_pause_resource_all\n+\n+      external omp_init_allocator\n+      integer (omp_allocator_handle_kind) omp_init_allocator\n+      external omp_destroy_allocator\n+      external omp_set_default_allocator\n+      external omp_get_default_allocator\n+      integer (omp_allocator_handle_kind) omp_get_default_allocator"}, {"sha": "bbec6aeca00b43101e79369d34e8e128a85f4054", "filename": "libgomp/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2FMakefile.in?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -170,6 +170,7 @@ INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+INTPTR_T_KIND = @INTPTR_T_KIND@\n LD = @LD@\n LDFLAGS = @LDFLAGS@\n LIBOBJS = @LIBOBJS@\n@@ -295,6 +296,7 @@ target_alias = @target_alias@\n target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n+tmake_file = @tmake_file@\n toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n top_build_prefix = @top_build_prefix@"}, {"sha": "c5c090f26135c7b7a54e750a0e60db1b259f90ed", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-2.c?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -23,7 +23,7 @@ main ()\n     if (p == NULL)\n       abort ();\n     p[0] = 1.0;\n-    p[1695 / sizeof (double *)] = 2.0;\n+    p[1695 / sizeof (double)] = 2.0;\n     #pragma omp barrier\n     omp_set_default_allocator ((n & 1) ? omp_default_mem_alloc : a);\n     q = (double *) omp_alloc (1696, omp_null_allocator);\n@@ -32,7 +32,7 @@ main ()\n \tif (q == NULL)\n \t  abort ();\n \tq[0] = 3.0;\n-\tq[1695 / sizeof (double *)] = 4.0;\n+\tq[1695 / sizeof (double)] = 4.0;\n       }\n     else if (q != NULL)\n       abort ();"}, {"sha": "e19077a78d0796f83fb46ce99bac7fd360123ffd", "filename": "libgomp/testsuite/libgomp.fortran/alloc-1.F90", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-1.F90?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -0,0 +1,169 @@\n+! { dg-additional-options \"-Wall -Wextra -Wno-maybe-uninitialized\" }\n+#ifdef DEFAULT_INTEGER_8\n+#define ONEoFIVE 105_c_size_t*8\n+#else\n+#define ONEoFIVE 105_c_size_t*4\n+#endif\n+      program main\n+        use iso_c_binding\n+#ifdef USE_F77_INCLUDE\n+        implicit none\n+#include \"omp_lib.h\"\n+#else\n+        use omp_lib\n+        implicit none (external, type)\n+#endif\n+\n+        type (omp_alloctrait), parameter :: traits2(*)                  &\n+     &    = [omp_alloctrait (omp_atk_alignment, 16),                    &\n+     &       omp_alloctrait (omp_atk_sync_hint, omp_atv_default),       &\n+     &       omp_alloctrait (omp_atk_access, omp_atv_default),          &\n+     &       omp_alloctrait (omp_atk_pool_size, 1024),                  &\n+     &       omp_alloctrait (omp_atk_fallback, omp_atv_default_mem_fb), &\n+     &       omp_alloctrait (omp_atk_partition, omp_atv_environment)]\n+        type (omp_alloctrait), parameter :: traits3(*)                  &\n+     &    = [omp_alloctrait (omp_atk_sync_hint, omp_atv_uncontended),   &\n+     &       omp_alloctrait (omp_atk_alignment, 32),                    &\n+     &       omp_alloctrait (omp_atk_access, omp_atv_all),              &\n+     &       omp_alloctrait (omp_atk_pool_size, 512),                   &\n+     &       omp_alloctrait (omp_atk_fallback, omp_atv_allocator_fb),   &\n+     &       omp_alloctrait (omp_atk_fb_data, 0),                       &\n+     &       omp_alloctrait (omp_atk_partition, omp_atv_default)]\n+        type (omp_alloctrait), parameter :: traits4(*)                  &\n+     &    = [omp_alloctrait (omp_atk_alignment, 128),                   &\n+     &       omp_alloctrait (omp_atk_pool_size, 1024),                  &\n+     &       omp_alloctrait (omp_atk_fallback, omp_atv_null_fb)]\n+\n+        type (omp_alloctrait), allocatable :: traits(:), traits5(:)\n+\n+        interface\n+          ! omp_alloc + omp_free part of OpenMP for C/C++\n+          ! but not (yet) in the OpenMP spec for Fortran\n+          type(c_ptr) function omp_alloc (size, handle) bind(C)\n+            import\n+            integer (c_size_t), value :: size\n+            integer (omp_allocator_handle_kind), value :: handle\n+          end function\n+\n+          subroutine omp_free (ptr, handle) bind(C)\n+            import\n+            type (c_ptr), value :: ptr\n+            integer (omp_allocator_handle_kind), value :: handle\n+          end subroutine\n+        end interface\n+\n+        type(c_ptr), volatile :: cp, cq, cr\n+        integer :: i\n+        integer(c_intptr_t) :: intptr\n+        integer, pointer, volatile :: p(:), p0, q(:), r(:)\n+        integer (omp_allocator_handle_kind) :: a, a2\n+\n+        cp = omp_alloc (3 * c_sizeof (i), omp_default_mem_alloc)\n+        if (mod (transfer (cp, intptr), 4_c_intptr_t) /= 0) stop 1\n+        call c_f_pointer (cp, p, [3])\n+        p(1) = 1\n+        p(2) = 2\n+        p(3) = 3\n+        call omp_free (cp, omp_default_mem_alloc)\n+\n+        cp = omp_alloc (2 * c_sizeof (i), omp_default_mem_alloc)\n+        if (mod (transfer (cp, intptr), 4_c_intptr_t) /= 0) stop 2\n+        call c_f_pointer (cp, p, [2])\n+        p(1) = 1\n+        p(2) = 2\n+        call omp_free (cp, omp_null_allocator)\n+\n+        call omp_set_default_allocator (omp_default_mem_alloc)\n+        cp = omp_alloc (c_sizeof (i), omp_null_allocator)\n+        if (mod (transfer (cp, intptr), 4_c_intptr_t) /= 0) stop 3\n+        call c_f_pointer (cp, p0)\n+        p0 = 3\n+        call omp_free (cp, omp_get_default_allocator ())\n+\n+        traits = [omp_alloctrait (omp_atk_alignment, 64),               &\n+     &            omp_alloctrait (omp_atk_fallback, omp_atv_null_fb),   &\n+     &            omp_alloctrait (omp_atk_pool_size, 4096)]\n+        a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+        if (a == omp_null_allocator) stop 4\n+        cp = omp_alloc (3072_c_size_t, a)\n+        if (mod (transfer (cp, intptr), 64_c_intptr_t) /= 0) stop 4\n+        call c_f_pointer (cp, p, [3072 / c_sizeof (i)])\n+        p(1) = 1\n+        p(3072 / c_sizeof (i)) = 2\n+        if (c_associated (omp_alloc (3072_c_size_t, a))) stop 5\n+        call omp_free (cp, a)\n+        cp = omp_alloc (3072_c_size_t, a)\n+        call c_f_pointer (cp, p, [3072 / c_sizeof (i)])\n+        p(1) = 3\n+        p(3072 / c_sizeof (i)) = 4\n+        call omp_free (cp, omp_null_allocator)\n+        call omp_set_default_allocator (a)\n+        if (omp_get_default_allocator () /= a) stop 6\n+        cp = omp_alloc (3072_c_size_t, omp_null_allocator)\n+        if (c_associated (omp_alloc (3072_c_size_t,                     &\n+     &                    omp_null_allocator)))                         &\n+     &     stop 7\n+        call omp_free (cp, a)\n+        call omp_destroy_allocator (a)\n+\n+        traits5 = traits3\n+        a = omp_init_allocator (omp_default_mem_space, size (traits2),  &\n+     &                          traits2)\n+        if (a == omp_null_allocator) stop 8\n+        if (traits5(6)%key /= omp_atk_fb_data) stop 9\n+        traits5(6)%value = a\n+        if (traits5(4)%key /= omp_atk_pool_size) stop 20\n+#if DEFAULT_INTEGER_8\n+        traits5(4)%value = 1024\n+#endif\n+        a2 = omp_init_allocator (omp_default_mem_space,                 &\n+     &                           size (traits5), traits5)\n+        if (a2 == omp_null_allocator) stop 10\n+        cp = omp_alloc (ONEoFIVE, a2)\n+        if (mod (transfer (cp, intptr), 32_c_intptr_t) /= 0) stop 11\n+        call c_f_pointer (cp, p, [ONEoFIVE / c_sizeof (i)])\n+        p(1) = 5\n+        p(ONEoFIVE / c_sizeof (i)) = 6\n+        cq = omp_alloc (768_c_size_t, a2)\n+        if (mod (transfer (cq, intptr), 16_c_intptr_t) /= 0) stop 12\n+        call c_f_pointer (cq, q, [768 / c_sizeof (i)])\n+        q(1) = 7\n+        q(768 / c_sizeof (i)) = 8\n+        cr = omp_alloc (512_c_size_t, a2)\n+        if (mod (transfer (cr, intptr), 16_c_intptr_t) /= 0) stop 13\n+        call c_f_pointer (cr, r, [512 / c_sizeof (i)])\n+        r(1) = 9\n+        r(512 / c_sizeof (i)) = 10\n+        call omp_free (cp, omp_null_allocator)\n+        call omp_free (cq, a2)\n+        call omp_free (cr, omp_null_allocator)\n+        call omp_destroy_allocator (a2)\n+        call omp_destroy_allocator (a)\n+\n+        a = omp_init_allocator (omp_default_mem_space, size (traits4),  &\n+     &                          traits4)\n+        if (a == omp_null_allocator) stop 14\n+        if (traits5(6)%key /= omp_atk_fb_data) stop 15\n+        traits5(6)%value = a\n+        a2 = omp_init_allocator (omp_default_mem_space,                 &\n+     &                           size (traits5), traits5)\n+        if (a2 == omp_null_allocator) stop 16\n+        call omp_set_default_allocator (a2)\n+        cp = omp_alloc (ONEoFIVE, omp_null_allocator)\n+        if (mod (transfer (cp, intptr), 32_c_intptr_t) /= 0) stop 17\n+        call c_f_pointer (cq, q, [ONEoFIVE / c_sizeof (i)])\n+        p(1) = 5\n+        p(ONEoFIVE / c_sizeof (i)) = 6\n+        cq = omp_alloc (768_c_size_t, omp_null_allocator)\n+        if (mod (transfer (cq, intptr), 128_c_intptr_t) /= 0) stop 18\n+        q(1) = 7\n+        q(768 / c_sizeof (i)) = 8\n+        if (c_associated (omp_alloc (768_c_size_t, omp_null_allocator))) &\n+     &    stop 19\n+        call omp_free (cp, omp_null_allocator)\n+        call omp_free (cq, omp_null_allocator)\n+        call omp_free (c_null_ptr, omp_null_allocator)\n+        call omp_free (c_null_ptr, omp_null_allocator)\n+        call omp_destroy_allocator (a2)\n+        call omp_destroy_allocator (a)\n+      end program"}, {"sha": "d18453cb84756bd3401f1f463dcf1a06f2c3b306", "filename": "libgomp/testsuite/libgomp.fortran/alloc-2.F90", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-2.F90?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -0,0 +1,3 @@\n+! { dg-additional-options \"-fdefault-integer-8 -Wall -Wextra -Wno-maybe-uninitialized -DDEFAULT_INTEGER_8=1\" }\n+\n+#include \"alloc-1.F90\""}, {"sha": "76166fa5e396475aa857d8f3b0a4c100732c3c0e", "filename": "libgomp/testsuite/libgomp.fortran/alloc-3.F", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-3.F", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-3.F", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-3.F?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -0,0 +1,3 @@\n+! { dg-additional-options \"-Wall -Wextra -Wno-maybe-uninitialized -Wno-c-binding-type -Wno-unused-parameter -DUSE_F77_INCLUDE=1\" }\n+\n+#include \"alloc-1.F90\""}, {"sha": "ce353b55eb056d77152d3c3c4ba3390488c88327", "filename": "libgomp/testsuite/libgomp.fortran/alloc-4.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-4.f90?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -0,0 +1,71 @@\n+program main\n+  use omp_lib\n+  use ISO_C_Binding\n+  implicit none (external, type)\n+\n+  interface\n+    ! omp_alloc + omp_free part of OpenMP for C/C++\n+    ! but not (yet) in the OpenMP spec for Fortran\n+    type(c_ptr) function omp_alloc (size, handle) bind(C)\n+      import\n+      integer (c_size_t), value :: size\n+      integer (omp_allocator_handle_kind), value :: handle\n+    end function\n+\n+    subroutine omp_free (ptr, handle) bind(C)\n+      import\n+      type (c_ptr), value :: ptr\n+      integer (omp_allocator_handle_kind), value :: handle\n+    end subroutine\n+  end interface\n+\n+  type (omp_alloctrait) :: traits(3)\n+  integer (omp_allocator_handle_kind) :: a\n+\n+  traits = [omp_alloctrait (omp_atk_alignment, 64), &\n+            omp_alloctrait (omp_atk_fallback, omp_atv_null_fb), &\n+            omp_alloctrait (omp_atk_pool_size, 4096)]\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits)\n+  if (a == omp_null_allocator) stop 1\n+\n+  !$omp parallel num_threads(4)\n+  block\n+    integer :: n\n+    real(8) :: r\n+    type(c_ptr) :: cp, cq\n+    real(8), pointer, volatile :: p(:), q(:)\n+ \n+    n = omp_get_thread_num ()\n+    if (mod (n, 2) /= 0) then\n+      call omp_set_default_allocator (a)\n+    else\n+      call omp_set_default_allocator (omp_default_mem_alloc)\n+    endif\n+    cp = omp_alloc (1696_c_size_t, omp_null_allocator)\n+    if (.not. c_associated (cp)) stop 2\n+    call c_f_pointer (cp, p, [1696 / c_sizeof (r)])\n+    p(1) = 1.0\n+    p(1696 / c_sizeof (r)) = 2.0\n+    !$omp barrier\n+    if (mod (n, 2) /= 0) then\n+      call omp_set_default_allocator (omp_default_mem_alloc)\n+    else\n+      call omp_set_default_allocator (a)\n+    endif\n+    cq = omp_alloc (1696_c_size_t, omp_null_allocator)\n+    if (mod (n, 2) /= 0) then\n+      if (.not. c_associated (cq)) stop 3\n+      call c_f_pointer (cq, q, [1696 / c_sizeof (r)])\n+      q(1) = 3.0\n+      q(1696 / c_sizeof (r)) = 4.0\n+    else if (c_associated (cq)) then\n+      stop 4\n+    end if\n+    !$omp barrier\n+    call omp_free (cp, omp_null_allocator)\n+    call omp_free (cq, omp_null_allocator)\n+    call omp_set_default_allocator (omp_default_mem_alloc)\n+  end block\n+  !$omp end parallel\n+  call omp_destroy_allocator (a)\n+end program main"}, {"sha": "9a1d36b079871cc9d456a7ca7e9e3d146b6e1edc", "filename": "libgomp/testsuite/libgomp.fortran/alloc-5.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff15bad1ab571906c37b88380431768d917dcb0/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Falloc-5.f90?ref=fff15bad1ab571906c37b88380431768d917dcb0", "patch": "@@ -0,0 +1,23 @@\n+! { dg-set-target-env-var OMP_ALLOCATOR \"omp_cgroup_mem_alloc\" }\n+! { dg-set-target-env-var OMP_DISPLAY_ENV \"true\" }\n+\n+program main\n+  use omp_lib\n+  implicit none (external, type)\n+\n+  character(len=255) :: mem_env\n+  type (omp_alloctrait) :: traits(3)\n+  integer (omp_allocator_handle_kind) :: a\n+\n+  call get_environment_variable (\"OMP_ALLOCATOR\", mem_env)\n+\n+  if (mem_env == \"omp_cgroup_mem_alloc\") then\n+    if (omp_get_default_allocator () /= omp_cgroup_mem_alloc) stop 1\n+    !$omp parallel num_threads (2)\n+      if (omp_get_default_allocator () /= omp_cgroup_mem_alloc) stop 2\n+      !$omp parallel num_threads (2)\n+        if (omp_get_default_allocator () /= omp_cgroup_mem_alloc) stop 3\n+      !$omp end parallel\n+    !$omp end parallel\n+  end if\n+end program"}]}