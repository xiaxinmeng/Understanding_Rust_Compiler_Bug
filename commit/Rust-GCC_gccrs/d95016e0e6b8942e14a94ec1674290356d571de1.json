{"sha": "d95016e0e6b8942e14a94ec1674290356d571de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1MDE2ZTBlNmI4OTQyZTE0YTk0ZWMxNjc0MjkwMzU2ZDU3MWRlMQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-07-20T17:43:06Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-07-20T17:43:06Z"}, "message": "rs6000.opt (mblock-move-inline-limit): New option.\n\ngcc/\n\t* config/rs6000/rs6000.opt (mblock-move-inline-limit): New option.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Set\n\trs6000_block_move_inline_limit appropriately.\n\t(expand_block_move): Use rs6000_block_move_inline_limit.\n\t* doc/invoke.texi (mblock-move-inline-limit): Document.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/block-move-1.c: New test.\n\t* gcc.target/powerpc/block-move-2.c: New test.\n\nFrom-SVN: r162344", "tree": {"sha": "c24abcc45306d171c1ec61ee5e9bcb26023ddfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c24abcc45306d171c1ec61ee5e9bcb26023ddfe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d95016e0e6b8942e14a94ec1674290356d571de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95016e0e6b8942e14a94ec1674290356d571de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95016e0e6b8942e14a94ec1674290356d571de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95016e0e6b8942e14a94ec1674290356d571de1/comments", "author": null, "committer": null, "parents": [{"sha": "a397bb72552072c13621e4e8e2b534746d497c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a397bb72552072c13621e4e8e2b534746d497c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a397bb72552072c13621e4e8e2b534746d497c9a"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "bf463904a3fef9ceff0fac48d211c9795d9b417a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -1,3 +1,11 @@\n+2010-07-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.opt (mblock-move-inline-limit): New option.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Set\n+\trs6000_block_move_inline_limit appropriately.\n+\t(expand_block_move): Use rs6000_block_move_inline_limit.\n+\t* doc/invoke.texi (mblock-move-inline-limit): Document.\n+\n 2010-07-20  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* postreload.c (fixup_debug_insns): Remove arg REGNO.  New args"}, {"sha": "130d1ac9be2f864b10f99bacba8cf2a497f02157", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -2696,6 +2696,18 @@ rs6000_override_options (const char *default_cpu)\n   else if (TARGET_ALTIVEC)\n     target_flags |= (MASK_PPC_GFXOPT & ~target_flags_explicit);\n \n+  /* E500mc does \"better\" if we inline more aggressively.  Respect the\n+     user's opinion, though.  */\n+  if (rs6000_block_move_inline_limit == 0\n+      && (rs6000_cpu == PROCESSOR_PPCE500MC\n+\t  || rs6000_cpu == PROCESSOR_PPCE500MC64))\n+    rs6000_block_move_inline_limit = 128;\n+\n+  /* store_one_arg depends on expand_block_move to handle at least the\n+     size of reg_parm_stack_space.  */\n+  if (rs6000_block_move_inline_limit < (TARGET_POWERPC64 ? 64 : 32))\n+    rs6000_block_move_inline_limit = (TARGET_POWERPC64 ? 64 : 32);\n+\n   /* Set debug flags */\n   if (rs6000_debug_name)\n     {\n@@ -13208,9 +13220,7 @@ expand_block_move (rtx operands[])\n   if (bytes <= 0)\n     return 1;\n \n-  /* store_one_arg depends on expand_block_move to handle at least the size of\n-     reg_parm_stack_space.  */\n-  if (bytes > (TARGET_POWERPC64 ? 64 : 32))\n+  if (bytes > rs6000_block_move_inline_limit)\n     return 0;\n \n   for (offset = 0; bytes > 0; offset += move_bytes, bytes -= move_bytes)"}, {"sha": "30f9b3988c0ed33b41d2a02ce8422224426ed3df", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -245,6 +245,10 @@ mvrsave=\n Target RejectNegative Joined\n -mvrsave=yes/no\tDeprecated option.  Use -mvrsave/-mno-vrsave instead\n \n+mblock-move-inline-limit=\n+Target Report Var(rs6000_block_move_inline_limit) Init(0) RejectNegative Joined UInteger\n+Specify how many bytes should be moved inline before calling out to memcpy/memmove\n+\n misel\n Target Report Mask(ISEL)\n Generate isel instructions"}, {"sha": "9459ec2b558b3e87e6f516318b279446f644f2b0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -772,6 +772,7 @@ See RS/6000 and PowerPC Options.\n -mcall-sysv  -mcall-netbsd @gol\n -maix-struct-return  -msvr4-struct-return @gol\n -mabi=@var{abi-type} -msecure-plt -mbss-plt @gol\n+-mblock-move-inline-limit=@var{num} @gol\n -misel -mno-isel @gol\n -misel=yes  -misel=no @gol\n -mspe -mno-spe @gol\n@@ -15626,6 +15627,13 @@ On embedded PowerPC systems, put all initialized global and static data\n in the @samp{.data} section, and all uninitialized data in the\n @samp{.bss} section.\n \n+@item -mblock-move-inline-limit=@var{num}\n+@opindex mblock-move-inline-limit\n+Inline all block moves (such as calls to @code{memcpy} or structure\n+copies) less than or equal to @var{num} bytes.  The minimum value for\n+@var{num} is 32 bytes on 32-bit targets and 64 bytes on 64-bit\n+targets.  The default value is target-specific.\n+\n @item -G @var{num}\n @opindex G\n @cindex smaller data references (PowerPC)"}, {"sha": "9772252bc76f722ff8a2668b759c469430eb373f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -1,3 +1,8 @@\n+2010-07-20  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc.target/powerpc/block-move-1.c: New test.\n+\t* gcc.target/powerpc/block-move-2.c: New test.\n+\n 2010-07-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44967"}, {"sha": "7b6623fbe5140eb874fb5e267f58a75c4972b6d6", "filename": "gcc/testsuite/gcc.target/powerpc/block-move-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-1.c?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -0,0 +1,14 @@\n+/* Test that we bump up low values of -mblock-move-inline-limit */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mblock-move-inline-limit=8\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *, const void *, size_t);\n+\n+void\n+cpy16 (void *x, void *y)\n+{\n+  memcpy (x, y, 16);\n+}\n+\n+/* { dg-final { scan-assembler-not \"memcpy\" } } */"}, {"sha": "ffaf9ef05e8b849062386ee12fe1857608584e96", "filename": "gcc/testsuite/gcc.target/powerpc/block-move-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d95016e0e6b8942e14a94ec1674290356d571de1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fblock-move-2.c?ref=d95016e0e6b8942e14a94ec1674290356d571de1", "patch": "@@ -0,0 +1,14 @@\n+/* Test that we honor -mblock-move-inline-limit.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mblock-move-inline-limit=128\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *memcpy (void *, const void *, size_t);\n+\n+void\n+cpy128 (void *x, void *y)\n+{\n+  memcpy (x, y, 128);\n+}\n+\n+/* { dg-final { scan-assembler-not \"memcpy\" } } */"}]}