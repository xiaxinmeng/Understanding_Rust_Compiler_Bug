{"sha": "5b65a74fb5a0d3048624f34e76ef57712436e3f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2NWE3NGZiNWEwZDMwNDg2MjRmMzRlNzZlZjU3NzEyNDM2ZTNmNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-17T12:47:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-17T12:47:23Z"}, "message": "(HOST_BITS_PER_WIDE_INT, HOST_WIDE_INT): Put back.\n\n(pcfinclude): Use HOST_WIDE_INT for casting pointer to integer.\n\nFrom-SVN: r11037", "tree": {"sha": "68a7b86377c8fc7484d9d898b8f5c68914fd7e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a7b86377c8fc7484d9d898b8f5c68914fd7e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b65a74fb5a0d3048624f34e76ef57712436e3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b65a74fb5a0d3048624f34e76ef57712436e3f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b65a74fb5a0d3048624f34e76ef57712436e3f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b65a74fb5a0d3048624f34e76ef57712436e3f7/comments", "author": null, "committer": null, "parents": [{"sha": "e18c4cfeb8b563b1080d82c0fb5edbdf4acf1f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18c4cfeb8b563b1080d82c0fb5edbdf4acf1f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18c4cfeb8b563b1080d82c0fb5edbdf4acf1f99"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "499727e13abd8c12675030a4423b75a350690b48", "filename": "gcc/cccp.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b65a74fb5a0d3048624f34e76ef57712436e3f7/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b65a74fb5a0d3048624f34e76ef57712436e3f7/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=5b65a74fb5a0d3048624f34e76ef57712436e3f7", "patch": "@@ -263,6 +263,20 @@ static void hack_vms_include_specification ();\n #define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))\n \n+/* Find the largest host integer type and set its size and type.  */\n+\n+#ifndef HOST_BITS_PER_WIDE_INT\n+\n+#if HOST_BITS_PER_LONG > HOST_BITS_PER_INT\n+#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n+#define HOST_WIDE_INT long\n+#else\n+#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_INT\n+#define HOST_WIDE_INT int\n+#endif\n+\n+#endif\n+\n #ifndef S_ISREG\n #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n #endif\n@@ -5257,12 +5271,12 @@ pcfinclude (buf, limit, name, op)\n \n     /* First skip to a longword boundary */\n     /* ??? Why a 4-byte boundary?  On all machines? */\n-    /* NOTE: This works correctly even if int\n+    /* NOTE: This works correctly even if HOST_WIDE_INT\n        is narrower than a pointer.\n        Do not try risky measures here to get another type to use!\n        Do not include stddef.h--it will fail!  */\n-    if ((int) cp & 3)\n-      cp += 4 - ((int) cp & 3);\n+    if ((HOST_WIDE_INT) cp & 3)\n+      cp += 4 - ((HOST_WIDE_INT) cp & 3);\n     \n     /* Now get the string. */\n     str = (STRINGDEF *) (GENERIC_PTR) cp;"}]}