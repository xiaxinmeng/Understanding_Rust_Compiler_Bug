{"sha": "2026dcf90abe91054e63d3556e0f33e098e08324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyNmRjZjkwYWJlOTEwNTRlNjNkMzU1NmUwZjMzZTA5OGUwODMyNA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-02-11T20:43:41Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-02-11T20:43:41Z"}, "message": "inclhack.def (hpux_long_double, [...]): New hacks.\n\n\t* inclhack.def (hpux_long_double, hpux10_ctype_declarations1,\n\thpux10_ctype_declarations2, hpux_ctype_macros): New hacks.\n\t* fixincl.x: Rebuilt.\n\t* tests/base/stdlib.h: Update.\n\t* tests/base/ctype.h: New file.\n\nFrom-SVN: r62718", "tree": {"sha": "d97c9190e1ce019f9425f945169b3fc28892990f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d97c9190e1ce019f9425f945169b3fc28892990f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2026dcf90abe91054e63d3556e0f33e098e08324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2026dcf90abe91054e63d3556e0f33e098e08324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2026dcf90abe91054e63d3556e0f33e098e08324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2026dcf90abe91054e63d3556e0f33e098e08324/comments", "author": null, "committer": null, "parents": [{"sha": "22fd5743d9a6c0e283a69250011685e58dcc2993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fd5743d9a6c0e283a69250011685e58dcc2993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fd5743d9a6c0e283a69250011685e58dcc2993"}], "stats": {"total": 386, "additions": 383, "deletions": 3}, "files": [{"sha": "6c59b58e92c81abe86186aa2bea79ce567dbf6f5", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 213, "deletions": 3, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=2026dcf90abe91054e63d3556e0f33e098e08324", "patch": "@@ -5,7 +5,7 @@\n  * files which are fixed to work correctly with ANSI C and placed in a\n  * directory that GNU C will search.\n  *\n- * This file contains 138 fixup descriptions.\n+ * This file contains 142 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -1695,6 +1695,41 @@ static const char* apzHpux11_AbsPatch[] = {\n     \"if !defined(_MATH_INCLUDED) || defined(__GNUG__)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux_Long_Double fix\n+ */\n+tSCC zHpux_Long_DoubleName[] =\n+     \"hpux_long_double\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux_Long_DoubleList[] =\n+  \"|stdlib.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHpux_Long_DoubleMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux_Long_DoubleSelect0[] =\n+       \"long_double\";\n+\n+#define    HPUX_LONG_DOUBLE_TEST_CT  1\n+static tTestDesc aHpux_Long_DoubleTests[] = {\n+  { TT_EGREP,    zHpux_Long_DoubleSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux_Long_Double\n+ */\n+static const char* apzHpux_Long_DoublePatch[] = { \"sed\",\n+    \"-e\", \"/^#[ \\t]*ifndef _LONG_DOUBLE/,/\\\\/\\\\* _LONG_DOUBLE \\\\*\\\\//D\",\n+    \"-e\", \"s/long_double/long double/g\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Hpux11_Fabsf fix\n@@ -1810,6 +1845,157 @@ static const char* apzHpux11_Uint32_CPatch[] = {\n     \"#define UINT32_C(__c) __CONCAT__(__c,ul)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux10_Ctype_Declarations1 fix\n+ */\n+tSCC zHpux10_Ctype_Declarations1Name[] =\n+     \"hpux10_ctype_declarations1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux10_Ctype_Declarations1List[] =\n+  \"|ctype.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHpux10_Ctype_Declarations1Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux10_Ctype_Declarations1Select0[] =\n+       \"^#[ \\t]*define _toupper\\\\(__c\\\\)[ \\t]*__toupper\\\\(__c\\\\)\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zHpux10_Ctype_Declarations1Bypass0[] =\n+       \"^[ \\t]*extern[ \\t]*int[ \\t]*__tolower[ \\t]*\\\\(\";\n+\n+#define    HPUX10_CTYPE_DECLARATIONS1_TEST_CT  2\n+static tTestDesc aHpux10_Ctype_Declarations1Tests[] = {\n+  { TT_NEGREP,   zHpux10_Ctype_Declarations1Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zHpux10_Ctype_Declarations1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux10_Ctype_Declarations1\n+ */\n+static const char* apzHpux10_Ctype_Declarations1Patch[] = {\n+    \"format\",\n+    \"#ifdef _PROTOTYPES\\n\\\n+extern int __tolower(int);\\n\\\n+extern int __toupper(int);\\n\\\n+#else /* NOT _PROTOTYPES */\\n\\\n+extern int __tolower();\\n\\\n+extern int __toupper();\\n\\\n+#endif /* _PROTOTYPES */\\n\\n\\\n+%0\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux10_Ctype_Declarations2 fix\n+ */\n+tSCC zHpux10_Ctype_Declarations2Name[] =\n+     \"hpux10_ctype_declarations2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux10_Ctype_Declarations2List[] =\n+  \"|ctype.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHpux10_Ctype_Declarations2Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux10_Ctype_Declarations2Select0[] =\n+       \"^#  if defined\\\\(_SB_CTYPE_MACROS\\\\) && \\\\!defined\\\\(__lint\\\\)\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zHpux10_Ctype_Declarations2Bypass0[] =\n+       \"^[ \\t]*extern[ \\t]*int[ \\t]*_isalnum[ \\t]*\\\\(\";\n+\n+#define    HPUX10_CTYPE_DECLARATIONS2_TEST_CT  2\n+static tTestDesc aHpux10_Ctype_Declarations2Tests[] = {\n+  { TT_NEGREP,   zHpux10_Ctype_Declarations2Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zHpux10_Ctype_Declarations2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux10_Ctype_Declarations2\n+ */\n+static const char* apzHpux10_Ctype_Declarations2Patch[] = {\n+    \"format\",\n+    \"%0\\n\\n\\\n+#ifdef _PROTOTYPES\\n\\\n+     extern int _isalnum(int);\\n\\\n+     extern int _isalpha(int);\\n\\\n+     extern int _iscntrl(int);\\n\\\n+     extern int _isdigit(int);\\n\\\n+     extern int _isgraph(int);\\n\\\n+     extern int _islower(int);\\n\\\n+     extern int _isprint(int);\\n\\\n+     extern int _ispunct(int);\\n\\\n+     extern int _isspace(int);\\n\\\n+     extern int _isupper(int);\\n\\\n+     extern int _isxdigit(int);\\n\\\n+#  else /* not _PROTOTYPES */\\n\\\n+     extern int _isalnum();\\n\\\n+     extern int _isalpha();\\n\\\n+     extern int _iscntrl();\\n\\\n+     extern int _isdigit();\\n\\\n+     extern int _isgraph();\\n\\\n+     extern int _islower();\\n\\\n+     extern int _isprint();\\n\\\n+     extern int _ispunct();\\n\\\n+     extern int _isspace();\\n\\\n+     extern int _isupper();\\n\\\n+     extern int _isxdigit();\\n\\\n+#endif /* _PROTOTYPES */\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Hpux_Ctype_Macros fix\n+ */\n+tSCC zHpux_Ctype_MacrosName[] =\n+     \"hpux_ctype_macros\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zHpux_Ctype_MacrosList[] =\n+  \"|ctype.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzHpux_Ctype_MacrosMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zHpux_Ctype_MacrosSelect0[] =\n+       \"((: |\\\\()__SB_masks \\\\? )(__SB_masks\\\\[__(alnum|c)\\\\] & _IS)\";\n+\n+#define    HPUX_CTYPE_MACROS_TEST_CT  1\n+static tTestDesc aHpux_Ctype_MacrosTests[] = {\n+  { TT_EGREP,    zHpux_Ctype_MacrosSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Hpux_Ctype_Macros\n+ */\n+static const char* apzHpux_Ctype_MacrosPatch[] = {\n+    \"format\",\n+    \"%1(int)%3\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Hpux11_Vsnprintf fix\n@@ -5415,9 +5601,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          147\n+#define REGEX_COUNT          153\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            138\n+#define FIX_COUNT            142\n \n /*\n  *  Enumerate the fixes\n@@ -5463,9 +5649,13 @@ typedef enum {\n     HPUX10_CPP_POW_INLINE_FIXIDX,\n     HPUX11_CPP_POW_INLINE_FIXIDX,\n     HPUX11_ABS_FIXIDX,\n+    HPUX_LONG_DOUBLE_FIXIDX,\n     HPUX11_FABSF_FIXIDX,\n     HPUX11_SIZE_T_FIXIDX,\n     HPUX11_UINT32_C_FIXIDX,\n+    HPUX10_CTYPE_DECLARATIONS1_FIXIDX,\n+    HPUX10_CTYPE_DECLARATIONS2_FIXIDX,\n+    HPUX_CTYPE_MACROS_FIXIDX,\n     HPUX11_VSNPRINTF_FIXIDX,\n     HPUX8_BOGUS_INLINES_FIXIDX,\n     HPUX_MAXINT_FIXIDX,\n@@ -5764,6 +5954,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      HPUX11_ABS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aHpux11_AbsTests,   apzHpux11_AbsPatch, 0 },\n \n+  {  zHpux_Long_DoubleName,    zHpux_Long_DoubleList,\n+     apzHpux_Long_DoubleMachs,\n+     HPUX_LONG_DOUBLE_TEST_CT, FD_MACH_ONLY,\n+     aHpux_Long_DoubleTests,   apzHpux_Long_DoublePatch, 0 },\n+\n   {  zHpux11_FabsfName,    zHpux11_FabsfList,\n      apzHpux11_FabsfMachs,\n      HPUX11_FABSF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -5779,6 +5974,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      HPUX11_UINT32_C_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aHpux11_Uint32_CTests,   apzHpux11_Uint32_CPatch, 0 },\n \n+  {  zHpux10_Ctype_Declarations1Name,    zHpux10_Ctype_Declarations1List,\n+     apzHpux10_Ctype_Declarations1Machs,\n+     HPUX10_CTYPE_DECLARATIONS1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHpux10_Ctype_Declarations1Tests,   apzHpux10_Ctype_Declarations1Patch, 0 },\n+\n+  {  zHpux10_Ctype_Declarations2Name,    zHpux10_Ctype_Declarations2List,\n+     apzHpux10_Ctype_Declarations2Machs,\n+     HPUX10_CTYPE_DECLARATIONS2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHpux10_Ctype_Declarations2Tests,   apzHpux10_Ctype_Declarations2Patch, 0 },\n+\n+  {  zHpux_Ctype_MacrosName,    zHpux_Ctype_MacrosList,\n+     apzHpux_Ctype_MacrosMachs,\n+     HPUX_CTYPE_MACROS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aHpux_Ctype_MacrosTests,   apzHpux_Ctype_MacrosPatch, 0 },\n+\n   {  zHpux11_VsnprintfName,    zHpux11_VsnprintfList,\n      apzHpux11_VsnprintfMachs,\n      HPUX11_VSNPRINTF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "62b1284e0c97257e35dfbc7a516f3ef0ca184e10", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=2026dcf90abe91054e63d3556e0f33e098e08324", "patch": "@@ -1016,6 +1016,26 @@ fix = {\n };\n \n \n+/*\n+ * HP-UX long_double\n+ */\n+fix = {\n+    hackname  = hpux_long_double;\n+    files     = stdlib.h;\n+    select    = \"long_double\";\n+    sed       = \"/^#[ \\t]*ifndef _LONG_DOUBLE/,/\\\\/\\\\* _LONG_DOUBLE \\\\*\\\\//D\";\n+    sed       = \"s/long_double/long double/g\";\n+\n+    test_text = \"#  ifndef _LONG_DOUBLE\\n\"\n+\t\t\"#    define _LONG_DOUBLE\\n\"\n+\t\t\"     typedef struct {\\n\"\n+\t\t\"       unsigned int word1, word2, word3, word4;\\n\"\n+\t\t\"     } long_double;\\n\"\n+\t\t\"#  endif /* _LONG_DOUBLE */\\n\"\n+\t\t\"extern long_double strtold(const char *, char **);\\n\";\n+};\n+\n+\n /*\n  *  Keep HP-UX 11 from stomping on C++ math namespace\n  *  with defines for fabsf.\n@@ -1082,6 +1102,85 @@ fix = {\n };\n \n \n+/*\n+ *  Fix hpux 10.X missing ctype declarations 1\n+ */\n+fix = {\n+    hackname = hpux10_ctype_declarations1;\n+    files    = ctype.h;\n+    select   = \"^#[ \\t]*define _toupper\\\\(__c\\\\)[ \\t]*__toupper\\\\(__c\\\\)\";\n+    bypass   = \"^[ \\t]*extern[ \\t]*int[ \\t]*__tolower[ \\t]*\\\\(\";\n+    c_fix     = format;\n+    c_fix_arg = \"#ifdef _PROTOTYPES\\n\"\n+\t\t\"extern int __tolower(int);\\n\"\n+\t\t\"extern int __toupper(int);\\n\"\n+\t\t\"#else /* NOT _PROTOTYPES */\\n\"\n+\t\t\"extern int __tolower();\\n\"\n+\t\t\"extern int __toupper();\\n\"\n+\t\t\"#endif /* _PROTOTYPES */\\n\\n\"\n+\t\t\"%0\\n\";\n+\n+    test_text = \"#  define _toupper(__c)         __toupper(__c)\\n\";\n+};\n+\n+\n+/*\n+ *  Fix hpux 10.X missing ctype declarations 2\n+ */\n+fix = {\n+    hackname = hpux10_ctype_declarations2;\n+    files    = ctype.h;\n+    select   = \"^#  if defined\\\\(_SB_CTYPE_MACROS\\\\) && \\\\!defined\\\\(__lint\\\\)\";\n+    bypass   = \"^[ \\t]*extern[ \\t]*int[ \\t]*_isalnum[ \\t]*\\\\(\";\n+    c_fix     = format;\n+    c_fix_arg = \"%0\\n\\n\"\n+\t\t\"#ifdef _PROTOTYPES\\n\"\n+\t\t\"     extern int _isalnum(int);\\n\"\n+\t\t\"     extern int _isalpha(int);\\n\"\n+\t\t\"     extern int _iscntrl(int);\\n\"\n+\t\t\"     extern int _isdigit(int);\\n\"\n+\t\t\"     extern int _isgraph(int);\\n\"\n+\t\t\"     extern int _islower(int);\\n\"\n+\t\t\"     extern int _isprint(int);\\n\"\n+\t\t\"     extern int _ispunct(int);\\n\"\n+\t\t\"     extern int _isspace(int);\\n\"\n+\t\t\"     extern int _isupper(int);\\n\"\n+\t\t\"     extern int _isxdigit(int);\\n\"\n+\t\t\"#  else /* not _PROTOTYPES */\\n\"\n+\t\t\"     extern int _isalnum();\\n\"\n+\t\t\"     extern int _isalpha();\\n\"\n+\t\t\"     extern int _iscntrl();\\n\"\n+\t\t\"     extern int _isdigit();\\n\"\n+\t\t\"     extern int _isgraph();\\n\"\n+\t\t\"     extern int _islower();\\n\"\n+\t\t\"     extern int _isprint();\\n\"\n+\t\t\"     extern int _ispunct();\\n\"\n+\t\t\"     extern int _isspace();\\n\"\n+\t\t\"     extern int _isupper();\\n\"\n+\t\t\"     extern int _isxdigit();\\n\"\n+\t\t\"#endif /* _PROTOTYPES */\\n\";\n+\n+    test_text = \"#  if defined(_SB_CTYPE_MACROS) && !defined(__lint)\\n\"\n+\t\t\"     extern unsigned int *__SB_masks;\\n\";\n+};\n+\n+\n+/*\n+ *  Fix hpux broken ctype macros\n+ */\n+fix = {\n+    hackname = hpux_ctype_macros;\n+    files    = ctype.h;\n+    select   = '((: |\\()__SB_masks \\? )'\n+\t       '(__SB_masks\\[__(alnum|c)\\] & _IS)';\n+    c_fix     = format;\n+    c_fix_arg = \"%1(int)%3\";\n+\n+    test_text = \": __SB_masks ? __SB_masks[__alnum] & _ISCNTRL\\n\"\n+\t\t\"# define isalpha(__c) (__SB_masks ? __SB_masks[__c] & _IS\\n\";\n+};\n+\n+\n /*\n  *  Fix hpux 11.00 broken vsnprintf declaration\n  */"}, {"sha": "deabd5e447348026b6bd818733cdce03ab7d856a", "filename": "gcc/fixinc/tests/base/ctype.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ftests%2Fbase%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ftests%2Fbase%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fctype.h?ref=2026dcf90abe91054e63d3556e0f33e098e08324", "patch": "@@ -0,0 +1,65 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/ctype.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( HPUX10_CTYPE_DECLARATIONS1_CHECK )\n+#ifdef _PROTOTYPES\n+extern int __tolower(int);\n+extern int __toupper(int);\n+#else /* NOT _PROTOTYPES */\n+extern int __tolower();\n+extern int __toupper();\n+#endif /* _PROTOTYPES */\n+\n+#  define _toupper(__c)         __toupper(__c)\n+\n+\n+#endif  /* HPUX10_CTYPE_DECLARATIONS1_CHECK */\n+\n+\n+#if defined( HPUX10_CTYPE_DECLARATIONS2_CHECK )\n+#  if defined(_SB_CTYPE_MACROS) && !defined(__lint)\n+\n+#ifdef _PROTOTYPES\n+     extern int _isalnum(int);\n+     extern int _isalpha(int);\n+     extern int _iscntrl(int);\n+     extern int _isdigit(int);\n+     extern int _isgraph(int);\n+     extern int _islower(int);\n+     extern int _isprint(int);\n+     extern int _ispunct(int);\n+     extern int _isspace(int);\n+     extern int _isupper(int);\n+     extern int _isxdigit(int);\n+#  else /* not _PROTOTYPES */\n+     extern int _isalnum();\n+     extern int _isalpha();\n+     extern int _iscntrl();\n+     extern int _isdigit();\n+     extern int _isgraph();\n+     extern int _islower();\n+     extern int _isprint();\n+     extern int _ispunct();\n+     extern int _isspace();\n+     extern int _isupper();\n+     extern int _isxdigit();\n+#endif /* _PROTOTYPES */\n+\n+     extern unsigned int *__SB_masks;\n+\n+#endif  /* HPUX10_CTYPE_DECLARATIONS2_CHECK */\n+\n+\n+#if defined( HPUX_CTYPE_MACROS_CHECK )\n+: __SB_masks ? (int)__SB_masks[__alnum] & _ISCNTRL\n+# define isalpha(__c) (__SB_masks ? (int)__SB_masks[__c] & _IS\n+\n+#endif  /* HPUX_CTYPE_MACROS_CHECK */"}, {"sha": "7297a3ab282e748b6cdfe667466c139a13a4d1bb", "filename": "gcc/fixinc/tests/base/stdlib.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2026dcf90abe91054e63d3556e0f33e098e08324/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fstdlib.h?ref=2026dcf90abe91054e63d3556e0f33e098e08324", "patch": "@@ -14,6 +14,12 @@\n #endif  /* HPUX11_ABS_CHECK */\n \n \n+#if defined( HPUX_LONG_DOUBLE_CHECK )\n+extern long double strtold(const char *, char **);\n+\n+#endif  /* HPUX_LONG_DOUBLE_CHECK */\n+\n+\n #if defined( INT_ABORT_FREE_AND_EXIT_CHECK )\n extern void\tabort(int);\n extern void\tfree(void*);"}]}