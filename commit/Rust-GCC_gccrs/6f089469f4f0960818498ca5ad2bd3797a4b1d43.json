{"sha": "6f089469f4f0960818498ca5ad2bd3797a4b1d43", "node_id": "C_kwDOANBUbNoAKDZmMDg5NDY5ZjRmMDk2MDgxODQ5OGNhNWFkMmJkMzc5N2E0YjFkNDM", "commit": {"author": {"name": "Ronan Desplanques", "email": "desplanques@adacore.com", "date": "2022-11-17T13:37:12Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-21T10:10:34Z"}, "message": "ada: Order pragmas alphabetically in reference manual\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Restore\n\talphabetical ordering.\n\t* gnat_rm.texi: Regenerate.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "a0a8237a8d3e4d5afaf7e3a3270d0d0f4ee34daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0a8237a8d3e4d5afaf7e3a3270d0d0f4ee34daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f089469f4f0960818498ca5ad2bd3797a4b1d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f089469f4f0960818498ca5ad2bd3797a4b1d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f089469f4f0960818498ca5ad2bd3797a4b1d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f089469f4f0960818498ca5ad2bd3797a4b1d43/comments", "author": {"login": "ronan-d", "id": 14870758, "node_id": "MDQ6VXNlcjE0ODcwNzU4", "avatar_url": "https://avatars.githubusercontent.com/u/14870758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronan-d", "html_url": "https://github.com/ronan-d", "followers_url": "https://api.github.com/users/ronan-d/followers", "following_url": "https://api.github.com/users/ronan-d/following{/other_user}", "gists_url": "https://api.github.com/users/ronan-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronan-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronan-d/subscriptions", "organizations_url": "https://api.github.com/users/ronan-d/orgs", "repos_url": "https://api.github.com/users/ronan-d/repos", "events_url": "https://api.github.com/users/ronan-d/events{/privacy}", "received_events_url": "https://api.github.com/users/ronan-d/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5947b1ee8af0c8e5a08a20f1f2b9f0b09720d130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5947b1ee8af0c8e5a08a20f1f2b9f0b09720d130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5947b1ee8af0c8e5a08a20f1f2b9f0b09720d130"}], "stats": {"total": 256, "additions": 128, "deletions": 128}, "files": [{"sha": "ed42d087a25104a6bb28b8e453848ed613fb1166", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=6f089469f4f0960818498ca5ad2bd3797a4b1d43", "patch": "@@ -1438,20 +1438,6 @@ This pragma applies only to protected types and specifies the floor\n deadline inherited by a task when the task enters a protected object.\n It is effective only when the EDF scheduling policy is used.\n \n-.. _Pragma-Default_Initial_Condition:\n-\n-Pragma Default_Initial_Condition\n-================================\n-\n-Syntax:\n-\n-.. code-block:: ada\n-\n-  pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n-\n-For the semantics of this pragma, see the entry for aspect\n-``Default_Initial_Condition`` in the SPARK 2014 Reference Manual, section 7.3.3.\n-\n Pragma Debug\n ============\n \n@@ -1495,6 +1481,20 @@ This pragma is equivalent to a corresponding ``Check_Policy`` pragma\n with a first argument of ``Debug``. It is retained for historical\n compatibility reasons.\n \n+.. _Pragma-Default_Initial_Condition:\n+\n+Pragma Default_Initial_Condition\n+================================\n+\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect\n+``Default_Initial_Condition`` in the SPARK 2014 Reference Manual, section 7.3.3.\n+\n Pragma Default_Scalar_Storage_Order\n ===================================\n .. index:: Default_Scalar_Storage_Order\n@@ -4640,6 +4640,22 @@ even though\n RM 8.3 (15) stipulates that an overridden operation is not visible within the\n declaration of the overriding operation.\n \n+.. _Pragma-Part_Of:\n+\n+Pragma Part_Of\n+==============\n+\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Part_Of (ABSTRACT_STATE);\n+\n+  ABSTRACT_STATE ::= NAME\n+\n+For the semantics of this pragma, see the entry for aspect ``Part_Of`` in the\n+SPARK 2014 Reference Manual, section 7.2.6.\n+\n Pragma Partition_Elaboration_Policy\n ===================================\n \n@@ -4657,22 +4673,6 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n-.. _Pragma-Part_Of:\n-\n-Pragma Part_Of\n-==============\n-\n-Syntax:\n-\n-.. code-block:: ada\n-\n-  pragma Part_Of (ABSTRACT_STATE);\n-\n-  ABSTRACT_STATE ::= NAME\n-\n-For the semantics of this pragma, see the entry for aspect ``Part_Of`` in the\n-SPARK 2014 Reference Manual, section 7.2.6.\n-\n Pragma Passive\n ==============\n \n@@ -7297,29 +7297,6 @@ Note that in addition to the checks defined in the Ada RM, GNAT recognizes a\n number of implementation-defined check names. See the description of pragma\n ``Suppress`` for full details.\n \n-Pragma Use_VADS_Size\n-====================\n-.. index:: Size, VADS compatibility\n-\n-.. index:: Rational profile\n-\n-\n-Syntax:\n-\n-\n-.. code-block:: ada\n-\n-  pragma Use_VADS_Size;\n-\n-\n-This is a configuration pragma.  In a unit to which it applies, any use\n-of the 'Size attribute is automatically interpreted as a use of the\n-'VADS_Size attribute.  Note that this may result in incorrect semantic\n-processing of valid Ada 95 or Ada 2005 programs.  This is intended to aid in\n-the handling of existing code which depends on the interpretation of Size\n-as implemented in the VADS compiler.  See description of the VADS_Size\n-attribute for further details.\n-\n .. _Pragma-Unused:\n \n Pragma Unused\n@@ -7354,6 +7331,29 @@ are typically to be used in cases where such warnings are expected.\n Thus it is never necessary to use ``pragma Unused`` for such\n variables, though it is harmless to do so.\n \n+Pragma Use_VADS_Size\n+====================\n+.. index:: Size, VADS compatibility\n+\n+.. index:: Rational profile\n+\n+\n+Syntax:\n+\n+\n+.. code-block:: ada\n+\n+  pragma Use_VADS_Size;\n+\n+\n+This is a configuration pragma.  In a unit to which it applies, any use\n+of the 'Size attribute is automatically interpreted as a use of the\n+'VADS_Size attribute.  Note that this may result in incorrect semantic\n+processing of valid Ada 95 or Ada 2005 programs.  This is intended to aid in\n+the handling of existing code which depends on the interpretation of Size\n+as implemented in the VADS compiler.  See description of the VADS_Size\n+attribute for further details.\n+\n Pragma Validity_Checks\n ======================\n "}, {"sha": "cc18673c3ddea263090a1f67b7c06aca1c8efbe1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=6f089469f4f0960818498ca5ad2bd3797a4b1d43", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Nov 14, 2022\n+GNAT Reference Manual , Nov 18, 2022\n \n AdaCore\n \n@@ -135,9 +135,9 @@ Implementation Defined Pragmas\n * Pragma CPP_Vtable:: \n * Pragma CPU:: \n * Pragma Deadline_Floor:: \n-* Pragma Default_Initial_Condition:: \n * Pragma Debug:: \n * Pragma Debug_Policy:: \n+* Pragma Default_Initial_Condition:: \n * Pragma Default_Scalar_Storage_Order:: \n * Pragma Default_Storage_Pool:: \n * Pragma Depends:: \n@@ -215,8 +215,8 @@ Implementation Defined Pragmas\n * Pragma Ordered:: \n * Pragma Overflow_Mode:: \n * Pragma Overriding_Renamings:: \n-* Pragma Partition_Elaboration_Policy:: \n * Pragma Part_Of:: \n+* Pragma Partition_Elaboration_Policy:: \n * Pragma Passive:: \n * Pragma Persistent_BSS:: \n * Pragma Post:: \n@@ -284,8 +284,8 @@ Implementation Defined Pragmas\n * Pragma Unreferenced_Objects:: \n * Pragma Unreserve_All_Interrupts:: \n * Pragma Unsuppress:: \n-* Pragma Use_VADS_Size:: \n * Pragma Unused:: \n+* Pragma Use_VADS_Size:: \n * Pragma Validity_Checks:: \n * Pragma Volatile:: \n * Pragma Volatile_Full_Access:: \n@@ -1220,9 +1220,9 @@ consideration, the use of these pragmas should be minimized.\n * Pragma CPP_Vtable:: \n * Pragma CPU:: \n * Pragma Deadline_Floor:: \n-* Pragma Default_Initial_Condition:: \n * Pragma Debug:: \n * Pragma Debug_Policy:: \n+* Pragma Default_Initial_Condition:: \n * Pragma Default_Scalar_Storage_Order:: \n * Pragma Default_Storage_Pool:: \n * Pragma Depends:: \n@@ -1300,8 +1300,8 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Ordered:: \n * Pragma Overflow_Mode:: \n * Pragma Overriding_Renamings:: \n-* Pragma Partition_Elaboration_Policy:: \n * Pragma Part_Of:: \n+* Pragma Partition_Elaboration_Policy:: \n * Pragma Passive:: \n * Pragma Persistent_BSS:: \n * Pragma Post:: \n@@ -1369,8 +1369,8 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Unreferenced_Objects:: \n * Pragma Unreserve_All_Interrupts:: \n * Pragma Unsuppress:: \n-* Pragma Use_VADS_Size:: \n * Pragma Unused:: \n+* Pragma Use_VADS_Size:: \n * Pragma Validity_Checks:: \n * Pragma Volatile:: \n * Pragma Volatile_Full_Access:: \n@@ -2823,7 +2823,7 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n-@node Pragma Deadline_Floor,Pragma Default_Initial_Condition,Pragma CPU,Implementation Defined Pragmas\n+@node Pragma Deadline_Floor,Pragma Debug,Pragma CPU,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-deadline-floor}@anchor{4c}\n @section Pragma Deadline_Floor\n \n@@ -2838,22 +2838,8 @@ This pragma applies only to protected types and specifies the floor\n deadline inherited by a task when the task enters a protected object.\n It is effective only when the EDF scheduling policy is used.\n \n-@node Pragma Default_Initial_Condition,Pragma Debug,Pragma Deadline_Floor,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id8}@anchor{4d}@anchor{gnat_rm/implementation_defined_pragmas pragma-default-initial-condition}@anchor{4e}\n-@section Pragma Default_Initial_Condition\n-\n-\n-Syntax:\n-\n-@example\n-pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n-@end example\n-\n-For the semantics of this pragma, see the entry for aspect\n-@code{Default_Initial_Condition} in the SPARK 2014 Reference Manual, section 7.3.3.\n-\n-@node Pragma Debug,Pragma Debug_Policy,Pragma Default_Initial_Condition,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-debug}@anchor{4f}\n+@node Pragma Debug,Pragma Debug_Policy,Pragma Deadline_Floor,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-debug}@anchor{4d}\n @section Pragma Debug\n \n \n@@ -2880,8 +2866,8 @@ pragmas can be enabled either by use of the command line switch `-gnata'\n or by use of the pragma @code{Check_Policy} with a first argument of\n @code{Debug}.\n \n-@node Pragma Debug_Policy,Pragma Default_Scalar_Storage_Order,Pragma Debug,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-debug-policy}@anchor{50}\n+@node Pragma Debug_Policy,Pragma Default_Initial_Condition,Pragma Debug,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-debug-policy}@anchor{4e}\n @section Pragma Debug_Policy\n \n \n@@ -2895,7 +2881,21 @@ This pragma is equivalent to a corresponding @code{Check_Policy} pragma\n with a first argument of @code{Debug}. It is retained for historical\n compatibility reasons.\n \n-@node Pragma Default_Scalar_Storage_Order,Pragma Default_Storage_Pool,Pragma Debug_Policy,Implementation Defined Pragmas\n+@node Pragma Default_Initial_Condition,Pragma Default_Scalar_Storage_Order,Pragma Debug_Policy,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas id8}@anchor{4f}@anchor{gnat_rm/implementation_defined_pragmas pragma-default-initial-condition}@anchor{50}\n+@section Pragma Default_Initial_Condition\n+\n+\n+Syntax:\n+\n+@example\n+pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect\n+@code{Default_Initial_Condition} in the SPARK 2014 Reference Manual, section 7.3.3.\n+\n+@node Pragma Default_Scalar_Storage_Order,Pragma Default_Storage_Pool,Pragma Default_Initial_Condition,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-default-scalar-storage-order}@anchor{51}\n @section Pragma Default_Scalar_Storage_Order\n \n@@ -6106,7 +6106,7 @@ overflow checking, but does not affect the overflow mode.\n The pragma @code{Unsuppress (Overflow_Check)} unsuppresses (enables)\n overflow checking, but does not affect the overflow mode.\n \n-@node Pragma Overriding_Renamings,Pragma Partition_Elaboration_Policy,Pragma Overflow_Mode,Implementation Defined Pragmas\n+@node Pragma Overriding_Renamings,Pragma Part_Of,Pragma Overflow_Mode,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-overriding-renamings}@anchor{b0}\n @section Pragma Overriding_Renamings\n \n@@ -6141,40 +6141,40 @@ even though\n RM 8.3 (15) stipulates that an overridden operation is not visible within the\n declaration of the overriding operation.\n \n-@node Pragma Partition_Elaboration_Policy,Pragma Part_Of,Pragma Overriding_Renamings,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-partition-elaboration-policy}@anchor{b1}\n-@section Pragma Partition_Elaboration_Policy\n+@node Pragma Part_Of,Pragma Partition_Elaboration_Policy,Pragma Overriding_Renamings,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas id28}@anchor{b1}@anchor{gnat_rm/implementation_defined_pragmas pragma-part-of}@anchor{b2}\n+@section Pragma Part_Of\n \n \n Syntax:\n \n @example\n-pragma Partition_Elaboration_Policy (POLICY_IDENTIFIER);\n+pragma Part_Of (ABSTRACT_STATE);\n \n-POLICY_IDENTIFIER ::= Concurrent | Sequential\n+ABSTRACT_STATE ::= NAME\n @end example\n \n-This pragma is standard in Ada 2005, but is available in all earlier\n-versions of Ada as an implementation-defined pragma.\n-See Ada 2012 Reference Manual for details.\n+For the semantics of this pragma, see the entry for aspect @code{Part_Of} in the\n+SPARK 2014 Reference Manual, section 7.2.6.\n \n-@node Pragma Part_Of,Pragma Passive,Pragma Partition_Elaboration_Policy,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id28}@anchor{b2}@anchor{gnat_rm/implementation_defined_pragmas pragma-part-of}@anchor{b3}\n-@section Pragma Part_Of\n+@node Pragma Partition_Elaboration_Policy,Pragma Passive,Pragma Part_Of,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-partition-elaboration-policy}@anchor{b3}\n+@section Pragma Partition_Elaboration_Policy\n \n \n Syntax:\n \n @example\n-pragma Part_Of (ABSTRACT_STATE);\n+pragma Partition_Elaboration_Policy (POLICY_IDENTIFIER);\n \n-ABSTRACT_STATE ::= NAME\n+POLICY_IDENTIFIER ::= Concurrent | Sequential\n @end example\n \n-For the semantics of this pragma, see the entry for aspect @code{Part_Of} in the\n-SPARK 2014 Reference Manual, section 7.2.6.\n+This pragma is standard in Ada 2005, but is available in all earlier\n+versions of Ada as an implementation-defined pragma.\n+See Ada 2012 Reference Manual for details.\n \n-@node Pragma Passive,Pragma Persistent_BSS,Pragma Part_Of,Implementation Defined Pragmas\n+@node Pragma Passive,Pragma Persistent_BSS,Pragma Partition_Elaboration_Policy,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-passive}@anchor{b4}\n @section Pragma Passive\n \n@@ -8790,7 +8790,7 @@ For a more general facility for controlling what interrupts can be\n handled, see pragma @code{Interrupt_State}, which subsumes the functionality\n of the @code{Unreserve_All_Interrupts} pragma.\n \n-@node Pragma Unsuppress,Pragma Use_VADS_Size,Pragma Unreserve_All_Interrupts,Implementation Defined Pragmas\n+@node Pragma Unsuppress,Pragma Unused,Pragma Unreserve_All_Interrupts,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-unsuppress}@anchor{10e}\n @section Pragma Unsuppress\n \n@@ -8826,32 +8826,8 @@ Note that in addition to the checks defined in the Ada RM, GNAT recognizes a\n number of implementation-defined check names. See the description of pragma\n @code{Suppress} for full details.\n \n-@node Pragma Use_VADS_Size,Pragma Unused,Pragma Unsuppress,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-use-vads-size}@anchor{10f}\n-@section Pragma Use_VADS_Size\n-\n-\n-@geindex Size\n-@geindex VADS compatibility\n-\n-@geindex Rational profile\n-\n-Syntax:\n-\n-@example\n-pragma Use_VADS_Size;\n-@end example\n-\n-This is a configuration pragma.  In a unit to which it applies, any use\n-of the \u2018Size attribute is automatically interpreted as a use of the\n-\u2018VADS_Size attribute.  Note that this may result in incorrect semantic\n-processing of valid Ada 95 or Ada 2005 programs.  This is intended to aid in\n-the handling of existing code which depends on the interpretation of Size\n-as implemented in the VADS compiler.  See description of the VADS_Size\n-attribute for further details.\n-\n-@node Pragma Unused,Pragma Validity_Checks,Pragma Use_VADS_Size,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id52}@anchor{110}@anchor{gnat_rm/implementation_defined_pragmas pragma-unused}@anchor{111}\n+@node Pragma Unused,Pragma Use_VADS_Size,Pragma Unsuppress,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas id52}@anchor{10f}@anchor{gnat_rm/implementation_defined_pragmas pragma-unused}@anchor{110}\n @section Pragma Unused\n \n \n@@ -8884,7 +8860,31 @@ are typically to be used in cases where such warnings are expected.\n Thus it is never necessary to use @code{pragma Unused} for such\n variables, though it is harmless to do so.\n \n-@node Pragma Validity_Checks,Pragma Volatile,Pragma Unused,Implementation Defined Pragmas\n+@node Pragma Use_VADS_Size,Pragma Validity_Checks,Pragma Unused,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-use-vads-size}@anchor{111}\n+@section Pragma Use_VADS_Size\n+\n+\n+@geindex Size\n+@geindex VADS compatibility\n+\n+@geindex Rational profile\n+\n+Syntax:\n+\n+@example\n+pragma Use_VADS_Size;\n+@end example\n+\n+This is a configuration pragma.  In a unit to which it applies, any use\n+of the \u2018Size attribute is automatically interpreted as a use of the\n+\u2018VADS_Size attribute.  Note that this may result in incorrect semantic\n+processing of valid Ada 95 or Ada 2005 programs.  This is intended to aid in\n+the handling of existing code which depends on the interpretation of Size\n+as implemented in the VADS compiler.  See description of the VADS_Size\n+attribute for further details.\n+\n+@node Pragma Validity_Checks,Pragma Volatile,Pragma Use_VADS_Size,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-validity-checks}@anchor{112}\n @section Pragma Validity_Checks\n \n@@ -9536,7 +9536,7 @@ This aspect is equivalent to @ref{54,,pragma Depends}.\n \n @geindex Default_Initial_Condition\n \n-This aspect is equivalent to @ref{4e,,pragma Default_Initial_Condition}.\n+This aspect is equivalent to @ref{50,,pragma Default_Initial_Condition}.\n \n @node Aspect Dimension,Aspect Dimension_System,Aspect Default_Initial_Condition,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-dimension}@anchor{129}\n@@ -9943,7 +9943,7 @@ delayed until the freeze point.\n \n @geindex Part_Of\n \n-This aspect is equivalent to @ref{b3,,pragma Part_Of}.\n+This aspect is equivalent to @ref{b2,,pragma Part_Of}.\n \n @node Aspect Persistent_BSS,Aspect Predicate,Aspect Part_Of,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-persistent-bss}@anchor{144}"}, {"sha": "f268be01ad11c3852b9829d8b970ab5b92548540", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f089469f4f0960818498ca5ad2bd3797a4b1d43/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6f089469f4f0960818498ca5ad2bd3797a4b1d43", "patch": "@@ -29386,8 +29386,8 @@ to permit their use in free software.\n \n @printindex ge\n \n-@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n @anchor{cf}@w{                              }\n+@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n \n @c %**end of body\n @bye"}]}