{"sha": "b08bcba5dc1775618e67f6486240188260084122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA4YmNiYTVkYzE3NzU2MThlNjdmNjQ4NjI0MDE4ODI2MDA4NDEyMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-09-10T08:12:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-09-10T08:12:28Z"}, "message": "decl.c (has_designator_problem): Use cp_expr_loc_or_input_loc in error_at.\n\n/cp\n2019-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (has_designator_problem): Use cp_expr_loc_or_input_loc\n\tin error_at.\n\t(build_enumerator): Likewise.\n\t(cp_finish_decl): Use DECL_SOURCE_LOCATION.\n\t(grokdeclarator): Use id_loc in two error_at; change errror\n\tmessage about constinit together constexpr to use two ranges.\n\n/testsuite\n2019-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/enum29.C: Test location(s) too.\n\t* g++.dg/cpp0x/lambda/lambda-ice10.C: Likewise.\n\t* g++.dg/cpp2a/constinit3.C: Likewise.\n\t* g++.dg/ext/desig4.C: Likewise.\n\t* g++.dg/ext/label10.C: Likewise.\n\t* g++.old-deja/g++.other/dtor3.C: Likewise.\n\nFrom-SVN: r275585", "tree": {"sha": "63cf4ce79d85ce717807eee9a1fa0d04b1e46242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63cf4ce79d85ce717807eee9a1fa0d04b1e46242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b08bcba5dc1775618e67f6486240188260084122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08bcba5dc1775618e67f6486240188260084122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b08bcba5dc1775618e67f6486240188260084122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08bcba5dc1775618e67f6486240188260084122/comments", "author": null, "committer": null, "parents": [{"sha": "a360a359b784acdb53e20cbb85576b4b3662703a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a360a359b784acdb53e20cbb85576b4b3662703a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a360a359b784acdb53e20cbb85576b4b3662703a"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "2c488297f99504de4298db24f81d2c8922302444", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -1,3 +1,12 @@\n+2019-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (has_designator_problem): Use cp_expr_loc_or_input_loc\n+\tin error_at.\n+\t(build_enumerator): Likewise.\n+\t(cp_finish_decl): Use DECL_SOURCE_LOCATION.\n+\t(grokdeclarator): Use id_loc in two error_at; change errror\n+\tmessage about constinit together constexpr to use two ranges.\n+\n 2019-09-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84374 - diagnose invalid uses of decltype(auto)."}, {"sha": "8bb398bfa5c2e137551e675e9dd2bb33ceed99ab", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -6114,8 +6114,9 @@ has_designator_problem (reshape_iter *d, tsubst_flags_t complain)\n   if (d->cur->index)\n     {\n       if (complain & tf_error)\n-\terror (\"C99 designator %qE outside aggregate initializer\",\n-\t       d->cur->index);\n+\terror_at (cp_expr_loc_or_input_loc (d->cur->index),\n+\t\t  \"C99 designator %qE outside aggregate initializer\",\n+\t\t  d->cur->index);\n       else\n \treturn true;\n     }\n@@ -7288,8 +7289,9 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       if ((flags & LOOKUP_CONSTINIT)\n \t  && !(dk == dk_thread || dk == dk_static))\n \t{\n-\t  error (\"%<constinit%> can only be applied to a variable with static \"\n-\t\t \"or thread storage duration\");\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"%<constinit%> can only be applied to a variable with \"\n+\t\t    \"static or thread storage duration\");\n \t  return;\n \t}\n \n@@ -10628,8 +10630,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t     && !uniquely_derived_from_p (ctype,\n \t\t\t\t\t\t\t  current_class_type))\n \t\t      {\n-\t\t\terror (\"invalid use of qualified-name %<%T::%D%>\",\n-\t\t\t       qualifying_scope, decl);\n+\t\t\terror_at (id_declarator->id_loc,\n+\t\t\t\t  \"invalid use of qualified-name %<%T::%D%>\",\n+\t\t\t\t  qualifying_scope, decl);\n \t\t\treturn error_mark_node;\n \t\t      }\n \t\t  }\n@@ -10816,8 +10819,9 @@ grokdeclarator (const cp_declarator *declarator,\n      keywords shall appear in a decl-specifier-seq.\"  */\n   if (constinit_p && constexpr_p)\n     {\n-      error_at (min_location (declspecs->locations[ds_constinit],\n-\t\t\t      declspecs->locations[ds_constexpr]),\n+      gcc_rich_location richloc (declspecs->locations[ds_constinit]);\n+      richloc.add_range (declspecs->locations[ds_constexpr]);\n+      error_at (&richloc,\n \t\t\"can use at most one of the %<constinit%> and %<constexpr%> \"\n \t\t\"specifiers\");\n       return error_mark_node;\n@@ -11831,7 +11835,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t&& inner_declarator->u.id.sfk == sfk_destructor\n \t\t&& arg_types != void_list_node)\n \t      {\n-\t\terror (\"destructors may not have parameters\");\n+\t\terror_at (declarator->id_loc,\n+\t\t\t  \"destructors may not have parameters\");\n \t\targ_types = void_list_node;\n \t\tparms = NULL_TREE;\n \t      }\n@@ -15171,8 +15176,9 @@ build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n \t      if (! INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P\n \t\t  (TREE_TYPE (value)))\n \t\t{\n-\t\t  error (\"enumerator value for %qD must have integral or \"\n-\t\t\t \"unscoped enumeration type\", name);\n+\t\t  error_at (cp_expr_loc_or_input_loc (value),\n+\t\t\t    \"enumerator value for %qD must have integral or \"\n+\t\t\t    \"unscoped enumeration type\", name);\n \t\t  value = NULL_TREE;\n \t\t}\n \t      else"}, {"sha": "31b54f88c8c6911f48857aa3183a917dfee2a547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -1,3 +1,12 @@\n+2019-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/enum29.C: Test location(s) too.\n+\t* g++.dg/cpp0x/lambda/lambda-ice10.C: Likewise.\n+\t* g++.dg/cpp2a/constinit3.C: Likewise.\n+\t* g++.dg/ext/desig4.C: Likewise.\n+\t* g++.dg/ext/label10.C: Likewise.\n+\t* g++.old-deja/g++.other/dtor3.C: Likewise.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \n \t* lib/target-supports.exp (check_effective_target_static): Disable"}, {"sha": "b7048f1717a330643c1df6c2b2742ead2b3efb72", "filename": "gcc/testsuite/g++.dg/cpp0x/enum29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum29.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -38,7 +38,7 @@ enum E0 { e0 = X0() };\n enum E1 { e1 = X1() };\n enum E2 { e2 = X2() };\n enum E3 { e3 = X3() };\n-enum E4 { e4 = X4() };  // { dg-error \"integral\" }\n+enum E4 { e4 = X4() };  // { dg-error \"16:enumerator value for .e4. must have integral\" }\n enum E5 { e5 = X5() };  // { dg-error \"ambiguous\" }\n \n enum F0 : int { f0 = X0() };"}, {"sha": "235bfeb8d18801cd322659289800fda804098a31", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice10.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -4,5 +4,5 @@\n template<int> struct A\n {\n   static const int i;\n-  template<int N> const int A<N>::i = []{ return 0; }(); // { dg-error \"invalid use\" }\n+  template<int N> const int A<N>::i = []{ return 0; }(); // { dg-error \"29:invalid use\" }\n };"}, {"sha": "1db16feafcb4eee73b86fa96d1a8b0a87a48d36d", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -31,8 +31,8 @@ int\n fn1 ()\n {\n   // Not static storage\n-  constinit int a1 = 42; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n-  constinit int a2 = 42; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+  constinit int a1 = 42; // { dg-error \"17:.constinit. can only be applied to a variable with static or thread storage\" }\n+  constinit int a2 = 42; // { dg-error \"17:.constinit. can only be applied to a variable with static or thread storage\" }\n   extern constinit int e1;\n \n   return 0;\n@@ -46,7 +46,7 @@ fn3 ()\n void\n fn2 (int i, constinit int p) // { dg-error \"a parameter cannot be declared .constinit.\" }\n {\n-  constinit auto l = [i](){ return i; }; // { dg-error \".constinit. can only be applied to a variable with static or thread storage\" }\n+  constinit auto l = [i](){ return i; }; // { dg-error \"18:.constinit. can only be applied to a variable with static or thread storage\" }\n }\n \n struct B { int d; };"}, {"sha": "902bd1ff0b622381748d9a663c45d185fa9ceb63", "filename": "gcc/testsuite/g++.dg/ext/desig4.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig4.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -1,18 +1,18 @@\n // PR c++/51458\n // { dg-options \"\" }\n \n-char g[] = { [7] = \"abcd\" };\t     // { dg-error \"designator\" }\n+char g[] = { [7] = \"abcd\" };\t     // { dg-error \"15:designator .7.\" }\n int a = { .foo = 6 };\t\t     // { dg-error \"designator\" }\n-int b = { [0] = 1 };\t\t     // { dg-error \"designator\" }\n+int b = { [0] = 1 };\t\t     // { dg-error \"12:designator .0.\" }\n _Complex float c = { .foo = 0,  1 }; // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n \t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n-_Complex float d = { [0] = 0,  1 };  // { dg-error \"designator\" }\n+_Complex float d = { [0] = 0,  1 };  // { dg-error \"23:designator .0.\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n \t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n _Complex float e = { 0, .foo = 1 };  // { dg-error \"designator\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n \t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }\n-_Complex float f = { 0, [0] = 1 };   // { dg-error \"designator\" }\n+_Complex float f = { 0, [0] = 1 };   // { dg-error \"26:designator .0.\" }\n \t\t\t\t     // { dg-error \"either all initializer clauses should be designated or none of them should be\" \"\" { target c++2a } .-1 }\n \t\t\t\t     // { dg-error \"cannot convert\" \"\" { target *-*-* } .-2 }"}, {"sha": "4ba5ae71f703e2d0daab9c2ce53c60ba336063f4", "filename": "gcc/testsuite/g++.dg/ext/label10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel10.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -12,6 +12,6 @@ A<0> a;\n void foo ()\n {\n   __label__ P;\n-  enum { O = && P };\t// { dg-error \"cannot appear in|integral\" }\n+  enum { O = && P };\t// { dg-error \"14:enumerator value for .O. must have integral|cannot appear in\" }\n   P:;\n }"}, {"sha": "22eca46b332cbff182d0062ad184d0cb0ff7a159", "filename": "gcc/testsuite/g++.old-deja/g++.other/dtor3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b08bcba5dc1775618e67f6486240188260084122/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdtor3.C?ref=b08bcba5dc1775618e67f6486240188260084122", "patch": "@@ -2,27 +2,27 @@\n \n struct S1\n {\n-  ~S1(int); // { dg-error \"\" } destructors may not have parameters\n+  ~S1(int); // { dg-error \"3:destructors may not have parameters\" }\n };\n \n \n template <class T>\n struct S2\n {\n-  ~S2(int); // { dg-error \"\" } destructors may not have parameters\n+  ~S2(int); // { dg-error \"3:destructors may not have parameters\" }\n };\n \n \n struct S3 \n {\n-  ~S3(double) {} // { dg-error \"\" } destructors may not have parameters\n+  ~S3(double) {} // { dg-error \"3:destructors may not have parameters\" }\n };\n \n \n template <class T>\n struct S4\n {\n-  ~S4(double) {} // { dg-error \"\" } destructors may not have parameters\n+  ~S4(double) {} // { dg-error \"3:destructors may not have parameters\" }\n };\n \n "}]}