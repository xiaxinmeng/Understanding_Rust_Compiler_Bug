{"sha": "bc6d4c3f08404ffb1cb9379649d60bace4d15258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM2ZDRjM2YwODQwNGZmYjFjYjkzNzk2NDlkNjBiYWNlNGQxNTI1OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-06-10T23:43:09Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-06-10T23:43:09Z"}, "message": "dfp.c (WORDS_BIGENDIAN): Define to 0 if not defined.\n\ngcc:\n\t* dfp.c (WORDS_BIGENDIAN): Define to 0 if not defined.\n\t(encode_decimal64, decode_decimal64, encode_decimal128,\n\tdecode_decimal128): Reverse order of 32-bit parts of value if host\n\tand target endianness differ.\n\nlibdecnumber:\n\t* dconfig.h: New.\n\t* decContext.c, decExcept.c, decExcept.h, decLibrary.c,\n\tdecNumber.c, decNumberLocal.h, decRound.c, dpd/decimal128.c,\n\tdpd/decimal32.c, dpd/decimal64.c: Include dconfig.h not config.h.\n\t* dpd/decimal128Local.h (decimal128SetSign, decimal128ClearSign,\n\tdecimal128FlipSign): Use WORDS_BIGENDIAN not\n\tFLOAT_WORDS_BIG_ENDIAN.\n\t* bid/host-ieee128.c: Include dconfig.h.\n\t(__host_to_ieee_128, __ieee_to_host_128): Swap 64-bit halves of\n\tvalue if WORDS_BIGENDIAN.\n\nlibgcc:\n\t* Makefile.in (DECNUMINC): Remove\n\t-I$(MULTIBUILDTOP)../../libdecnumber.\n\t* gstdint.h: New.\n\nFrom-SVN: r136641", "tree": {"sha": "aaae18cb379d8aaa4351816af260f701d6721cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaae18cb379d8aaa4351816af260f701d6721cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc6d4c3f08404ffb1cb9379649d60bace4d15258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6d4c3f08404ffb1cb9379649d60bace4d15258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6d4c3f08404ffb1cb9379649d60bace4d15258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6d4c3f08404ffb1cb9379649d60bace4d15258/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0178d64465a03fdfa6e37f6f0750ad7d55e446f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0178d64465a03fdfa6e37f6f0750ad7d55e446f1"}], "stats": {"total": 192, "additions": 165, "deletions": 27}, "files": [{"sha": "63035a09edfa8ff6071b282b960fd2fb7798ecfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -1,3 +1,10 @@\n+2008-06-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* dfp.c (WORDS_BIGENDIAN): Define to 0 if not defined.\n+\t(encode_decimal64, decode_decimal64, encode_decimal128,\n+\tdecode_decimal128): Reverse order of 32-bit parts of value if host\n+\tand target endianness differ.\n+\n 2008-06-10  Vinodha Ramasamy  <vinodha@google.com>\n         * value_prob.c (tree_divmod_fixed_value_transform): Use gcov_type.\n \tAvoid division by 0."}, {"sha": "43262380af5a5b4e69fb66ef6a0e6821bc6c02d1", "filename": "gcc/dfp.c", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -36,6 +36,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"decimal32.h\"\n #include \"decNumber.h\"\n \n+#ifndef WORDS_BIGENDIAN\n+#define WORDS_BIGENDIAN 0\n+#endif\n+\n /* Initialize R (a real with the decimal flag set) from DN.  Can\n    utilize status passed in via CONTEXT, if a previous operation had\n    interesting status.  */\n@@ -173,8 +177,16 @@ encode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decimal_to_decnumber (r, &dn);\n   decimal64FromNumber (&d64, &dn, &set);\n \n-  buf[0] = *(uint32_t *) &d64.bytes[0];\n-  buf[1] = *(uint32_t *) &d64.bytes[4];\n+  if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n+    {\n+      buf[0] = *(uint32_t *) &d64.bytes[0];\n+      buf[1] = *(uint32_t *) &d64.bytes[4];\n+    }\n+  else\n+    {\n+      buf[0] = *(uint32_t *) &d64.bytes[4];\n+      buf[1] = *(uint32_t *) &d64.bytes[0];\n+    }\n }\n \n /* Decode an IEEE 754R decimal64 type into a real.  */\n@@ -190,8 +202,16 @@ decode_decimal64 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n-  *((uint32_t *) &d64.bytes[0]) = (uint32_t) buf[0];\n-  *((uint32_t *) &d64.bytes[4]) = (uint32_t) buf[1];\n+  if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n+    {\n+      *((uint32_t *) &d64.bytes[0]) = (uint32_t) buf[0];\n+      *((uint32_t *) &d64.bytes[4]) = (uint32_t) buf[1];\n+    }\n+  else\n+    {\n+      *((uint32_t *) &d64.bytes[0]) = (uint32_t) buf[1];\n+      *((uint32_t *) &d64.bytes[4]) = (uint32_t) buf[0];\n+    }\n \n   decimal64ToNumber (&d64, &dn);\n   decimal_from_decnumber (r, &dn, &set); \n@@ -213,10 +233,20 @@ encode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decimal_to_decnumber (r, &dn);\n   decimal128FromNumber (&d128, &dn, &set);\n \n-  buf[0] = *(uint32_t *) &d128.bytes[0];\n-  buf[1] = *(uint32_t *) &d128.bytes[4];\n-  buf[2] = *(uint32_t *) &d128.bytes[8];\n-  buf[3] = *(uint32_t *) &d128.bytes[12];\n+  if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n+    {\n+      buf[0] = *(uint32_t *) &d128.bytes[0];\n+      buf[1] = *(uint32_t *) &d128.bytes[4];\n+      buf[2] = *(uint32_t *) &d128.bytes[8];\n+      buf[3] = *(uint32_t *) &d128.bytes[12];\n+    }\n+  else\n+    {\n+      buf[0] = *(uint32_t *) &d128.bytes[12];\n+      buf[1] = *(uint32_t *) &d128.bytes[8];\n+      buf[2] = *(uint32_t *) &d128.bytes[4];\n+      buf[3] = *(uint32_t *) &d128.bytes[0];\n+    }\n }\n \n /* Decode an IEEE 754R decimal128 type into a real.  */\n@@ -232,10 +262,20 @@ decode_decimal128 (const struct real_format *fmt ATTRIBUTE_UNUSED,\n   decContextDefault (&set, DEC_INIT_DECIMAL128);\n   set.traps = 0;\n \n-  *((uint32_t *) &d128.bytes[0])  = (uint32_t) buf[0];\n-  *((uint32_t *) &d128.bytes[4])  = (uint32_t) buf[1];\n-  *((uint32_t *) &d128.bytes[8])  = (uint32_t) buf[2];\n-  *((uint32_t *) &d128.bytes[12]) = (uint32_t) buf[3];\n+  if (WORDS_BIGENDIAN == FLOAT_WORDS_BIG_ENDIAN)\n+    {\n+      *((uint32_t *) &d128.bytes[0])  = (uint32_t) buf[0];\n+      *((uint32_t *) &d128.bytes[4])  = (uint32_t) buf[1];\n+      *((uint32_t *) &d128.bytes[8])  = (uint32_t) buf[2];\n+      *((uint32_t *) &d128.bytes[12]) = (uint32_t) buf[3];\n+    }\n+  else\n+    {\n+      *((uint32_t *) &d128.bytes[0])  = (uint32_t) buf[3];\n+      *((uint32_t *) &d128.bytes[4])  = (uint32_t) buf[2];\n+      *((uint32_t *) &d128.bytes[8])  = (uint32_t) buf[1];\n+      *((uint32_t *) &d128.bytes[12]) = (uint32_t) buf[0];\n+    }\n \n   decimal128ToNumber (&d128, &dn);\n   decimal_from_decnumber (r, &dn, &set); "}, {"sha": "153b6772f110b24057e816e486e05a42a84676eb", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -1,3 +1,16 @@\n+2008-06-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* dconfig.h: New.\n+\t* decContext.c, decExcept.c, decExcept.h, decLibrary.c,\n+\tdecNumber.c, decNumberLocal.h, decRound.c, dpd/decimal128.c,\n+\tdpd/decimal32.c, dpd/decimal64.c: Include dconfig.h not config.h.\n+\t* dpd/decimal128Local.h (decimal128SetSign, decimal128ClearSign,\n+\tdecimal128FlipSign): Use WORDS_BIGENDIAN not\n+\tFLOAT_WORDS_BIG_ENDIAN.\n+\t* bid/host-ieee128.c: Include dconfig.h.\n+\t(__host_to_ieee_128, __ieee_to_host_128): Swap 64-bit halves of\n+\tvalue if WORDS_BIGENDIAN.\n+\n 2008-04-18  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR bootstrap/35457"}, {"sha": "12632c8aab2420ce2aec4664d3a4f51e5e43ce11", "filename": "libdecnumber/bid/host-ieee128.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fbid%2Fhost-ieee128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fbid%2Fhost-ieee128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fhost-ieee128.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -29,20 +29,35 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #include <string.h>\n \n+#include \"dconfig.h\"\n #include \"bid-dpd.h\"\n #include \"decimal128.h\"\n \n void __host_to_ieee_128 (_Decimal128 in, decimal128 *out);\n void __ieee_to_host_128 (decimal128 in, _Decimal128 *out);\n \n+/* The code for converting 128-bit values between DPD and BID presumes\n+   that the 64-bit halves of the 128-bit value are in little-endian\n+   order, so they need swapping on big-endian hosts.  */\n+\n void\n __host_to_ieee_128 (_Decimal128 in, decimal128 *out)\n {\n+#if WORDS_BIGENDIAN\n+  memcpy ((char *) out, (char *) &in + 8, 8);\n+  memcpy ((char *) out + 8, (char *) &in, 8);\n+#else\n   memcpy ((char *) out, (char *) &in, 16);\n+#endif\n }\n \n void\n __ieee_to_host_128 (decimal128 in, _Decimal128 *out)\n {\n+#if WORDS_BIGENDIAN\n+  memcpy ((char *) out, (char *) &in + 8, 8);\n+  memcpy ((char *) out + 8, (char *) &in, 8);\n+#else\n   memcpy ((char *) out, (char *) &in, 16);\n+#endif\n }"}, {"sha": "ffbad255ce5835a2277a0146b9d4f763cc2f35b6", "filename": "libdecnumber/dconfig.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdconfig.h?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -0,0 +1,52 @@\n+/* Configure decNumber for either host or target.\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 2, or (at your option) any later\n+   version.\n+\n+   In addition to the permissions in the GNU General Public License,\n+   the Free Software Foundation gives you unlimited permission to link\n+   the compiled version of this file into combinations with other\n+   programs, and to distribute those combinations without any\n+   restriction coming from the use of this file.  (The General Public\n+   License restrictions do apply in other respects; for example, they\n+   cover modification of the file, and distribution when not linked\n+   into a combine executable.)\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+#ifdef IN_LIBGCC2\n+\n+#include \"tconfig.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+#ifndef LIBGCC2_WORDS_BIG_ENDIAN\n+#define LIBGCC2_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n+#endif\n+\n+#ifndef LIBGCC2_FLOAT_WORDS_BIG_ENDIAN\n+#define LIBGCC2_FLOAT_WORDS_BIG_ENDIAN LIBGCC2_WORDS_BIG_ENDIAN\n+#endif\n+\n+#if LIBGCC2_FLOAT_WORDS_BIG_ENDIAN\n+#define WORDS_BIGENDIAN 1\n+#endif\n+\n+#else\n+\n+#include \"config.h\"\n+\n+#endif"}, {"sha": "d2e3bed439750c1c845efab12b87004a4866c1da", "filename": "libdecnumber/decContext.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecContext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecContext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecContext.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -37,7 +37,7 @@\n \n #include <string.h>\t      /* for strcmp */\n #include <stdio.h>\t      /* for printf if DECCHECK */\n-#include \"config.h\"\t      /* for GCC definitions */\n+#include \"dconfig.h\"\t      /* for GCC definitions */\n #include \"decContext.h\"\t      /* context and base types */\n #include \"decNumberLocal.h\"   /* decNumber local types, etc. */\n "}, {"sha": "a111aeeb41622e71c494de0543747e2a600bb2d1", "filename": "libdecnumber/decExcept.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecExcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecExcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecExcept.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -28,7 +28,7 @@\n    02110-1301, USA.  */\n \n #include <fenv.h>\n-#include \"config.h\"\n+#include \"dconfig.h\"\n #include \"decContext.h\"\n #include \"decExcept.h\"\n "}, {"sha": "5dc1ebb1d167f94e9bae61caab7094d2cb335602", "filename": "libdecnumber/decExcept.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecExcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecExcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecExcept.h?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -28,7 +28,7 @@\n    02110-1301, USA.  */\n \n #include <fenv.h>\n-#include \"config.h\"\n+#include \"dconfig.h\"\n #include \"decContext.h\"\n \n #define DFP_EXCEPTIONS_ENABLED 1"}, {"sha": "86daedd89e69707b39cf8709c800cccddb144d0b", "filename": "libdecnumber/decLibrary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecLibrary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecLibrary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecLibrary.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -27,7 +27,7 @@\n    Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    02110-1301, USA.  */\n \n-#include \"config.h\"\n+#include \"dconfig.h\"\n #include \"decContext.h\"\n #include \"decimal128.h\"\n #include \"decimal64.h\""}, {"sha": "f9a624a1afa9498702f22213203c95fde906a8ee", "filename": "libdecnumber/decNumber.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecNumber.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecNumber.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumber.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -170,7 +170,7 @@\n #include <stdio.h>\t\t   /* for printf [if needed] */\n #include <string.h>\t\t   /* for strcpy */\n #include <ctype.h>\t\t   /* for lower */\n-#include \"config.h\"\t\t   /* for GCC definitions */\n+#include \"dconfig.h\"\t\t   /* for GCC definitions */\n #include \"decNumber.h\"\t\t   /* base number library */\n #include \"decNumberLocal.h\"\t   /* decNumber local types, etc. */\n "}, {"sha": "809eaa466a22bc4050dcd6eb7b668199dee248fe", "filename": "libdecnumber/decNumberLocal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecNumberLocal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecNumberLocal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumberLocal.h?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -44,7 +44,7 @@\n \n   #include <stdlib.h>\t      /* for abs\t\t\t      */\n   #include <string.h>\t      /* for memset, strcpy\t\t      */\n-  #include \"config.h\"\t      /* for WORDS_BIGENDIAN                  */\n+  #include \"dconfig.h\"\t      /* for WORDS_BIGENDIAN                  */\n \n   /* Conditional code flag -- set this to match hardware platform     */\n   /* 1=little-endian, 0=big-endian\t                              */"}, {"sha": "26740bf69c2ad0130c14787c186bcb4e5d694db7", "filename": "libdecnumber/decRound.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecRound.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2FdecRound.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecRound.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -28,7 +28,7 @@\n    Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    02110-1301, USA.  */\n \n-#include \"config.h\"\n+#include \"dconfig.h\"\n #include \"decContext.h\"\n #include \"decRound.h\"\n "}, {"sha": "54191aab5c02d60aaba4d68dd74862cfcf540081", "filename": "libdecnumber/dpd/decimal128.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal128.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -42,7 +42,7 @@\n #include <string.h>\t      /* [for memset/memcpy] */\n #include <stdio.h>\t      /* [for printf] */\n \n-#include \"config.h\"\t      /* GCC definitions */\n+#include \"dconfig.h\"\t      /* GCC definitions */\n #define\t DECNUMDIGITS 34      /* make decNumbers with space for 34 */\n #include \"decNumber.h\"\t      /* base number library */\n #include \"decNumberLocal.h\"   /* decNumber local types, etc. */"}, {"sha": "9765427719336148cb346cbfc5e3c40dd4b5f8f6", "filename": "libdecnumber/dpd/decimal128Local.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal128Local.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal128Local.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal128Local.h?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -34,14 +34,14 @@\n \n /* Set sign; this assumes the sign was previously zero.  */\n #define decimal128SetSign(d,b) \\\n-  { (d)->bytes[FLOAT_WORDS_BIG_ENDIAN ? 0 : 15] |= ((unsigned) (b) << 7); }\n+  { (d)->bytes[WORDS_BIGENDIAN ? 0 : 15] |= ((unsigned) (b) << 7); }\n \n /* Clear sign.  */\n #define decimal128ClearSign(d) \\\n-  { (d)->bytes[FLOAT_WORDS_BIG_ENDIAN ? 0 : 15] &= ~0x80; }\n+  { (d)->bytes[WORDS_BIGENDIAN ? 0 : 15] &= ~0x80; }\n \n /* Flip sign.  */\n #define decimal128FlipSign(d) \\\n-  { (d)->bytes[FLOAT_WORDS_BIG_ENDIAN ? 0 : 15] ^= 0x80; }\n+  { (d)->bytes[WORDS_BIGENDIAN ? 0 : 15] ^= 0x80; }\n \n #endif"}, {"sha": "d8e3f5978111d15e87a8e146a38fa8556db273fc", "filename": "libdecnumber/dpd/decimal32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal32.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -42,7 +42,7 @@\n #include <string.h>\t      /* [for memset/memcpy] */\n #include <stdio.h>\t      /* [for printf] */\n \n-#include \"config.h\"\t      /* GCC definitions */\n+#include \"dconfig.h\"\t      /* GCC definitions */\n #define\t DECNUMDIGITS  7      /* make decNumbers with space for 7 */\n #include \"decNumber.h\"\t      /* base number library */\n #include \"decNumberLocal.h\"   /* decNumber local types, etc. */"}, {"sha": "474eb7cf8a0634bbb16b52acfda239e5d732b9d9", "filename": "libdecnumber/dpd/decimal64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libdecnumber%2Fdpd%2Fdecimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal64.c?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -42,7 +42,7 @@\n #include <string.h>\t      /* [for memset/memcpy] */\n #include <stdio.h>\t      /* [for printf] */\n \n-#include \"config.h\"\t      /* GCC definitions */\n+#include \"dconfig.h\"\t      /* GCC definitions */\n #define\t DECNUMDIGITS 16      /* make decNumbers with space for 16 */\n #include \"decNumber.h\"\t      /* base number library */\n #include \"decNumberLocal.h\"   /* decNumber local types, etc. */"}, {"sha": "a0f379adbf023587bf13490e16b627b2f3cf2b5c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -1,3 +1,9 @@\n+2008-06-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (DECNUMINC): Remove\n+\t-I$(MULTIBUILDTOP)../../libdecnumber.\n+\t* gstdint.h: New.\n+\n 2008-06-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.host (strongarm*-*-*, ep9312*-*-*, xscale-*-*,"}, {"sha": "94b6440f011ee3d463a87a739ccf758a8a9fbe15", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -191,8 +191,7 @@ ifeq ($(enable_decimal_float),bid)\n DECNUMINC = -I$(srcdir)/config/libbid -DENABLE_DECIMAL_BID_FORMAT\n else\n DECNUMINC = -I$(srcdir)/../libdecnumber/$(enable_decimal_float) \\\n-\t    -I$(srcdir)/../libdecnumber \\\n-\t    -I$(MULTIBUILDTOP)../../libdecnumber\n+\t    -I$(srcdir)/../libdecnumber\n endif\n else\n DECNUMINC ="}, {"sha": "4d61c318440731eec9ccff9dd3d723854ef98efe", "filename": "libgcc/gstdint.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2Fgstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6d4c3f08404ffb1cb9379649d60bace4d15258/libgcc%2Fgstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgstdint.h?ref=bc6d4c3f08404ffb1cb9379649d60bace4d15258", "patch": "@@ -0,0 +1,6 @@\n+/* This header is only for use of libdecnumber built as part of\n+   libgcc.  The targets supported for decimal floating point have\n+   <stdint.h>; libdecnumber uses GCC_HEADER_STDINT only for the sake\n+   of the host.  */\n+\n+#include <stdint.h>"}]}