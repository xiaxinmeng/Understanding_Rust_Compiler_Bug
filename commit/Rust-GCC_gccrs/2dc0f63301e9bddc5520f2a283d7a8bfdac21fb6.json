{"sha": "2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjMGY2MzMwMWU5YmRkYzU1MjBmMmEyODNkN2E4YmZkYWMyMWZiNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-02-20T14:13:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-02-20T14:13:47Z"}, "message": "tree.h (fold_real_zero_addition_p): Declare.\n\n2008-02-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (fold_real_zero_addition_p): Declare.\n\t* fold-const.c (fold_real_zero_addition_p): Export.\n\t* tree-ssa-reassoc.c (eliminate_using_constants): Also handle\n\tfloating-point operations with zero and one.\n\n\t* gcc.dg/tree-ssa/reassoc-13.c: New testcase.\n\nFrom-SVN: r132480", "tree": {"sha": "c5e05848bec7920261ee516331b46b45437148c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e05848bec7920261ee516331b46b45437148c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8bd6a397365e8cc69507f8c311f1fda3d6ebec"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "18dd9dc4a31b106a2a43d6e959486580d3b0ac5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -1,3 +1,10 @@\n+2008-02-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (fold_real_zero_addition_p): Declare.\n+\t* fold-const.c (fold_real_zero_addition_p): Export.\n+\t* tree-ssa-reassoc.c (eliminate_using_constants): Also handle\n+\tfloating-point operations with zero and one.\n+\n 2008-02-20  Paolo Bonzini  <bonzini@gnu.org>\n \n         * doc/install.texi: Correct references to CFLAGS, replacing them"}, {"sha": "aba71b6bf41d157aea171c6479066af4620d747f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -134,7 +134,6 @@ static tree extract_muldiv_1 (tree, tree, enum tree_code, tree, bool *);\n static tree fold_binary_op_with_conditional_arg (enum tree_code, tree,\n \t\t\t\t\t\t tree, tree,\n \t\t\t\t\t\t tree, tree, int);\n-static bool fold_real_zero_addition_p (const_tree, const_tree, int);\n static tree fold_mathfn_compare (enum built_in_function, enum tree_code,\n \t\t\t\t tree, tree, tree);\n static tree fold_inf_compare (enum tree_code, tree, tree, tree);\n@@ -6426,7 +6425,7 @@ fold_binary_op_with_conditional_arg (enum tree_code code,\n    X - 0 is not the same as X because 0 - 0 is -0.  In other rounding\n    modes, X + 0 is not the same as X because -0 + 0 is 0.  */\n \n-static bool\n+bool\n fold_real_zero_addition_p (const_tree type, const_tree addend, int negate)\n {\n   if (!real_zerop (addend))"}, {"sha": "7e947ec4b27968b37c6a9c3ea3cd9b54d83077a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -1,3 +1,7 @@\n+2008-02-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/reassoc-13.c: New testcase.\n+\n 2008-02-20  Ira Rosen  <irar@il.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_unpack):"}, {"sha": "4d4dfeb446b64a3e40a8e8018bc0122a959e1c3b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-13.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-13.c?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ffast-math -fdump-tree-reassoc1 -fdump-tree-optimized\" } */\n+\n+double foo(double a)\n+{\n+  double tmp = 5.0;\n+  double tmp2 = a + tmp;\n+  tmp2 = tmp2 - a;\n+  return a + tmp2 - 5.0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\\\+ 0.0\" \"reassoc1\" } } */\n+/* { dg-final { scan-tree-dump \"return a;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"reassoc1\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6e6f5f7f4425520e713f9c0be060bd77a2c7b328", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"pointer-set.h\"\n #include \"cfgloop.h\"\n+#include \"flags.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based\n     on the LLVM pass of the same name (They do some things more/less\n@@ -598,8 +599,10 @@ eliminate_using_constants (enum tree_code opcode,\n \t\t\t   VEC(operand_entry_t, heap) **ops)\n {\n   operand_entry_t oelast = VEC_last (operand_entry_t, *ops);\n+  tree type = TREE_TYPE (oelast->op);\n \n-  if (oelast->rank == 0 && INTEGRAL_TYPE_P (TREE_TYPE (oelast->op)))\n+  if (oelast->rank == 0\n+      && (INTEGRAL_TYPE_P (type) || FLOAT_TYPE_P (type)))\n     {\n       switch (opcode)\n \t{\n@@ -660,7 +663,11 @@ eliminate_using_constants (enum tree_code opcode,\n \t    }\n \t  break;\n \tcase MULT_EXPR:\n-\t  if (integer_zerop (oelast->op))\n+\t  if (integer_zerop (oelast->op)\n+\t      || (FLOAT_TYPE_P (type)\n+\t\t  && !HONOR_NANS (TYPE_MODE (type))\n+\t\t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (type))\n+\t\t  && real_zerop (oelast->op)))\n \t    {\n \t      if (VEC_length (operand_entry_t, *ops) != 1)\n \t\t{\n@@ -675,7 +682,10 @@ eliminate_using_constants (enum tree_code opcode,\n \t\t  return;\n \t\t}\n \t    }\n-\t  else if (integer_onep (oelast->op))\n+\t  else if (integer_onep (oelast->op)\n+\t\t   || (FLOAT_TYPE_P (type)\n+\t\t       && !HONOR_SNANS (TYPE_MODE (type))\n+\t\t       && real_onep (oelast->op)))\n \t    {\n \t      if (VEC_length (operand_entry_t, *ops) != 1)\n \t\t{\n@@ -690,7 +700,11 @@ eliminate_using_constants (enum tree_code opcode,\n \tcase BIT_XOR_EXPR:\n \tcase PLUS_EXPR:\n \tcase MINUS_EXPR:\n-\t  if (integer_zerop (oelast->op))\n+\t  if (integer_zerop (oelast->op)\n+\t      || (FLOAT_TYPE_P (type)\n+\t\t  && (opcode == PLUS_EXPR || opcode == MINUS_EXPR)\n+\t\t  && fold_real_zero_addition_p (type, oelast->op,\n+\t\t\t\t\t\topcode == MINUS_EXPR)))\n \t    {\n \t      if (VEC_length (operand_entry_t, *ops) != 1)\n \t\t{"}, {"sha": "f98afe9be807d74501ec995b0ad88ecf6a8da3f9", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2dc0f63301e9bddc5520f2a283d7a8bfdac21fb6", "patch": "@@ -4851,6 +4851,8 @@ extern enum tree_code invert_tree_comparison (enum tree_code, bool);\n extern bool tree_expr_nonzero_p (tree);\n extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n \n+extern bool fold_real_zero_addition_p (const_tree, const_tree, int);\n+\n /* In builtins.c */\n extern tree fold_call_expr (tree, bool);\n extern tree fold_builtin_fputs (tree, tree, bool, bool, tree);"}]}