{"sha": "41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhYTNhMzg1NzJiZDY0M2FlOTU4ZmIyM2E5ZmFkODdjZGRkZDliYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-28T15:32:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-28T15:32:24Z"}, "message": "re PR tree-optimization/79740 (ICE on -Os and above in both 32-bit and 64-bit modes on x86_64-linux-gnu (internal compiler error: in VN_INFO_GET, at tree-ssa-sccvn.c:407  }))\n\n2017-02-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79740\n\t* tree-ssa-sccvn.c (vn_nary_op_insert_into): Allow redundant\n\tinserts.\n\t(visit_nary_op): Insert the nary into the hashtable if we\n\tpattern-matched sth.\n\t* tree-ssa-pre.c (eliminate_insert): Robustify.\n\n\t* gcc.dg/torture/pr79740.c: New testcase.\n\nFrom-SVN: r245780", "tree": {"sha": "dbbfdd34b9627de77f02682c0884df4ffbfa6a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbfdd34b9627de77f02682c0884df4ffbfa6a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "587240d2494dae65fd67d5bd642a6123ecc89738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587240d2494dae65fd67d5bd642a6123ecc89738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587240d2494dae65fd67d5bd642a6123ecc89738"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "17acce53557e9e1e71a33a4b3304c233b6283cf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "patch": "@@ -1,3 +1,12 @@\n+2017-02-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79740\n+\t* tree-ssa-sccvn.c (vn_nary_op_insert_into): Allow redundant\n+\tinserts.\n+\t(visit_nary_op): Insert the nary into the hashtable if we\n+\tpattern-matched sth.\n+\t* tree-ssa-pre.c (eliminate_insert): Robustify.\n+\n 2017-02-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/79731"}, {"sha": "a09eb286c97d2fde30cc280a5d6b824b094b8273", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "patch": "@@ -1,3 +1,8 @@\n+2017-02-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79740\n+\t* gcc.dg/torture/pr79740.c: New testcase.\n+\n 2017-02-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/79731"}, {"sha": "25b8de5356125c6f23bdcc7fd0b582d457efc823", "filename": "gcc/testsuite/gcc.dg/torture/pr79740.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79740.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79740.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79740.c?ref=41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+int a;\n+short b;\n+short fn1(unsigned short p1) { return p1 << a; }\n+\n+int main()\n+{\n+  short c;\n+  int d = 4;\n+  for (; b;)\n+    {\n+      c = d + 1;\n+      fn1(c);\n+      d = 0;\n+    }\n+  d++;\n+  return 0;\n+}"}, {"sha": "bdf48ad7d8a1f8c0d92f3330a06689a739bbdc34", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "patch": "@@ -4099,8 +4099,12 @@ eliminate_push_avail (tree op)\n static tree\n eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n {\n-  gimple *stmt = gimple_seq_first_stmt (VN_INFO (val)->expr);\n-  if (!is_gimple_assign (stmt)\n+  /* We can insert a sequence with a single assignment only.  */\n+  gimple_seq stmts = VN_INFO (val)->expr;\n+  if (!gimple_seq_singleton_p (stmts))\n+    return NULL_TREE;\n+  gassign *stmt = dyn_cast <gassign *> (gimple_seq_first_stmt (stmts));\n+  if (!stmt\n       || (!CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n \t  && gimple_assign_rhs_code (stmt) != VIEW_CONVERT_EXPR\n \t  && gimple_assign_rhs_code (stmt) != BIT_FIELD_REF\n@@ -4116,8 +4120,8 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n   if (!leader)\n     return NULL_TREE;\n \n-  gimple_seq stmts = NULL;\n   tree res;\n+  stmts = NULL;\n   if (gimple_assign_rhs_code (stmt) == BIT_FIELD_REF)\n     res = gimple_build (&stmts, BIT_FIELD_REF,\n \t\t\tTREE_TYPE (val), leader,"}, {"sha": "e7502de790ded9167ee68ee863f9c332b38c781d", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41aa3a38572bd643ae958fb23a9fad87cdddd9bb/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=41aa3a38572bd643ae958fb23a9fad87cdddd9bb", "patch": "@@ -2820,6 +2820,15 @@ vn_nary_op_insert_into (vn_nary_op_t vno, vn_nary_op_table_type *table,\n     vno->hashcode = vn_nary_op_compute_hash (vno);\n \n   slot = table->find_slot_with_hash (vno, vno->hashcode, INSERT);\n+  /* While we do not want to insert things twice it's awkward to\n+     avoid it in the case where visit_nary_op pattern-matches stuff\n+     and ends up simplifying the replacement to itself.  We then\n+     get two inserts, one from visit_nary_op and one from\n+     vn_nary_build_or_lookup.\n+     So allow inserts with the same value number.  */\n+  if (*slot && (*slot)->result == vno->result)\n+    return *slot;\n+\n   gcc_assert (!*slot);\n \n   *slot = vno;\n@@ -3544,7 +3553,11 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t\t\t  result = vn_nary_build_or_lookup (NOP_EXPR,\n \t\t\t\t\t\t\t    type, ops);\n \t\t\t  if (result)\n-\t\t\t    return set_ssa_val_to (lhs, result);\n+\t\t\t    {\n+\t\t\t      bool changed = set_ssa_val_to (lhs, result);\n+\t\t\t      vn_nary_op_insert_stmt (stmt, result);\n+\t\t\t      return changed;\n+\t\t\t    }\n \t\t\t}\n \t\t      else\n \t\t\t{\n@@ -3555,7 +3568,11 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t\t\t\t\t\t\t    TREE_TYPE (lhs),\n \t\t\t\t\t\t\t    ops);\n \t\t\t  if (result)\n-\t\t\t    return set_ssa_val_to (lhs, result);\n+\t\t\t    {\n+\t\t\t      bool changed = set_ssa_val_to (lhs, result);\n+\t\t\t      vn_nary_op_insert_stmt (stmt, result);\n+\t\t\t      return changed;\n+\t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t}"}]}