{"sha": "17a3b967929eb6d344ae73bff4f28efc88c35ca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhM2I5Njc5MjllYjZkMzQ0YWU3M2JmZjRmMjhlZmM4OGMzNWNhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-15T09:40:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-15T09:40:01Z"}, "message": "re PR tree-optimization/69783 (Loop is not vectorized after r233212)\n\n2016-02-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69783\n\t* tree-vect-data-refs.c (vect_prune_runtime_alias_test_list):\n\tAdd trivially correct cases.\n\n\t* gcc.dg/vect/pr69783.c: New testcase.\n\nFrom-SVN: r233420", "tree": {"sha": "206b3a1f97e9938efc887592c89238d17e81a242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206b3a1f97e9938efc887592c89238d17e81a242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a3b967929eb6d344ae73bff4f28efc88c35ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a3b967929eb6d344ae73bff4f28efc88c35ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a3b967929eb6d344ae73bff4f28efc88c35ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a3b967929eb6d344ae73bff4f28efc88c35ca9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed5d948da920f8de6041b7010625cfeff7014203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5d948da920f8de6041b7010625cfeff7014203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5d948da920f8de6041b7010625cfeff7014203"}], "stats": {"total": 118, "additions": 96, "deletions": 22}, "files": [{"sha": "6ef134f12e834a47b7e13dad5e142d525294b610", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17a3b967929eb6d344ae73bff4f28efc88c35ca9", "patch": "@@ -1,3 +1,9 @@\n+2016-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69783\n+\t* tree-vect-data-refs.c (vect_prune_runtime_alias_test_list):\n+\tAdd trivially correct cases.\n+\n 2016-02-15  Tom de Vries  <tom@codesourcery.com>\n \n \tPR lto/69655"}, {"sha": "2a0e538c4105e22daaeeb3c10d4ffac0cd302877", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17a3b967929eb6d344ae73bff4f28efc88c35ca9", "patch": "@@ -1,3 +1,8 @@\n+2016-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69783\n+\t* gcc.dg/vect/pr69783.c: New testcase.\n+\n 2016-02-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69776"}, {"sha": "5df95d0ce4e87bee1863ccc11ebc4be371353a32", "filename": "gcc/testsuite/gcc.dg/vect/pr69783.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr69783.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr69783.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr69783.c?ref=17a3b967929eb6d344ae73bff4f28efc88c35ca9", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-Ofast -funroll-loops\" } */\n+\n+#define NXX 516\n+#define NYY 516\n+#define IND(x,y) ((x) + (y)*NXX)\n+float **In, **Out, **V;\n+\n+void foo(int I, int J, int K1, int K2, int L1, int L2 )\n+{\n+  for(int i=0; i < I; i++)\n+    {\n+      float *v = V[i];\n+\n+      for(int j=0; j < J; j++)\n+\t{\n+\t  float *in = In[j];\n+\t  float *out = Out[j];\n+\t  for(int l=L1; l<L2; l++)\n+\t    {\n+\t      for(int k=K1; k<K2; k++)\n+\t\t{\n+\t\t  float sum = 0;\n+\t\t  int offset = 0;\n+\t\t  for(int m=-2; m<=2; m++)\n+\t\t    {\n+\t\t      for(int n=-2; n<=2; n++, offset++)\n+\t\t\tsum += in[IND((k+n), (l+m))] * v[offset];\n+\t\t    }\n+\t\t  out[IND(k,l)] = sum;\n+\t\t}\n+\t    }\n+\n+\t}\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"improved number of alias checks from \\[0-9\\]* to 2\" \"vect\" } } */"}, {"sha": "f8695b13d6d2210864d95a3a39b40153dd8d0492", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3b967929eb6d344ae73bff4f28efc88c35ca9/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=17a3b967929eb6d344ae73bff4f28efc88c35ca9", "patch": "@@ -3089,6 +3089,30 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t    = tree_to_shwi (dr_a2->offset) - tree_to_shwi (dr_a1->offset);\n \n \n+\t  bool do_remove = false;\n+\n+\t  /* If the left segment does not extend beyond the start of the\n+\t     right segment the new segment length is that of the right\n+\t     plus the segment distance.  */\n+\t  if (tree_fits_uhwi_p (dr_a1->seg_len)\n+\t      && compare_tree_int (dr_a1->seg_len, diff) <= 0)\n+\t    {\n+\t      dr_a1->seg_len = size_binop (PLUS_EXPR, dr_a2->seg_len,\n+\t\t\t\t\t   size_int (diff));\n+\t      do_remove = true;\n+\t    }\n+\t  /* Generally the new segment length is the maximum of the\n+\t     left segment size and the right segment size plus the distance.\n+\t     ???  We can also build tree MAX_EXPR here but it's not clear this\n+\t     is profitable.  */\n+\t  else if (tree_fits_uhwi_p (dr_a1->seg_len)\n+\t\t   && tree_fits_uhwi_p (dr_a2->seg_len))\n+\t    {\n+\t      unsigned HOST_WIDE_INT seg_len_a1 = tree_to_uhwi (dr_a1->seg_len);\n+\t      unsigned HOST_WIDE_INT seg_len_a2 = tree_to_uhwi (dr_a2->seg_len);\n+\t      dr_a1->seg_len = size_int (MAX (seg_len_a1, diff + seg_len_a2));\n+\t      do_remove = true;\n+\t    }\n \t  /* Now we check if the following condition is satisfied:\n \n \t     DIFF - SEGMENT_LENGTH_A < SEGMENT_LENGTH_B\n@@ -3101,39 +3125,39 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t     one above:\n \n \t     1: DIFF <= MIN_SEG_LEN_B\n-\t     2: DIFF - SEGMENT_LENGTH_A < MIN_SEG_LEN_B\n-\n-\t     */\n-\n-\t  unsigned HOST_WIDE_INT min_seg_len_b\n-\t    = (tree_fits_uhwi_p (dr_b1->seg_len)\n-\t       ? tree_to_uhwi (dr_b1->seg_len)\n-\t       : vect_factor);\n+\t     2: DIFF - SEGMENT_LENGTH_A < MIN_SEG_LEN_B  */\n+\t  else\n+\t    {\n+\t      unsigned HOST_WIDE_INT min_seg_len_b\n+\t\t= (tree_fits_uhwi_p (dr_b1->seg_len)\n+\t\t   ? tree_to_uhwi (dr_b1->seg_len)\n+\t\t   : vect_factor);\n+\n+\t      if (diff <= min_seg_len_b\n+\t\t  || (tree_fits_uhwi_p (dr_a1->seg_len)\n+\t\t      && diff - tree_to_uhwi (dr_a1->seg_len) < min_seg_len_b))\n+\t\t{\n+\t\t  dr_a1->seg_len = size_binop (PLUS_EXPR,\n+\t\t\t\t\t       dr_a2->seg_len, size_int (diff));\n+\t\t  do_remove = true;\n+\t\t}\n+\t    }\n \n-\t  if (diff <= min_seg_len_b\n-\t      || (tree_fits_uhwi_p (dr_a1->seg_len)\n-\t\t  && diff - tree_to_uhwi (dr_a1->seg_len) < min_seg_len_b))\n+\t  if (do_remove)\n \t    {\n \t      if (dump_enabled_p ())\n \t\t{\n \t\t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t   \"merging ranges for \");\n-\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM,\n-\t\t\t\t     DR_REF (dr_a1->dr));\n+\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_a1->dr));\n \t\t  dump_printf (MSG_NOTE,  \", \");\n-\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM,\n-\t\t\t\t     DR_REF (dr_b1->dr));\n+\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_b1->dr));\n \t\t  dump_printf (MSG_NOTE,  \" and \");\n-\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM,\n-\t\t\t\t     DR_REF (dr_a2->dr));\n+\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_a2->dr));\n \t\t  dump_printf (MSG_NOTE,  \", \");\n-\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM,\n-\t\t\t\t     DR_REF (dr_b2->dr));\n+\t\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_b2->dr));\n \t\t  dump_printf (MSG_NOTE, \"\\n\");\n \t\t}\n-\n-\t      dr_a1->seg_len = size_binop (PLUS_EXPR,\n-\t\t\t\t\t   dr_a2->seg_len, size_int (diff));\n \t      comp_alias_ddrs.ordered_remove (i--);\n \t    }\n \t}"}]}