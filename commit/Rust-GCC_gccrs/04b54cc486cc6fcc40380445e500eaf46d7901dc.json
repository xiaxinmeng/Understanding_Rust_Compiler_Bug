{"sha": "04b54cc486cc6fcc40380445e500eaf46d7901dc", "node_id": "C_kwDOANBUbNoAKDA0YjU0Y2M0ODZjYzZmY2M0MDM4MDQ0NWU1MDBlYWY0NmQ3OTAxZGM", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-03T13:00:02Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-08T08:54:30Z"}, "message": "[nvptx] Fix .local atomic regressions\n\nIn PR target/104364, two problems were reported:\n- in muniform-simt mode, an atom.cas insn is no longer executed in the\n  \"master lane\" only.\n- in msoft-stack mode, an __atomic_compare_exchange_n on stack memory is\n  translated assuming it accesses local memory, while that's not the case.\n\nFix these by:\n- ensuring that all insns with atomic attribute are also predicable, such\n  that the validate_change in nvptx_reorg_uniform_simt will succeed, and\n  asserting that it does, and\n- guarding the local atomics implementation with a new function\n  nvptx_mem_local_p that correctly handles msoft-stack.\n\nTested on x86_64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-02-04  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104364\n\t* config/nvptx/nvptx-protos.h (nvptx_mem_local_p): Declare.\n\t* config/nvptx/nvptx.cc (nvptx_reorg_uniform_simt): Assert that\n\tchange is validated.\n\t(nvptx_mem_local_p): New function.\n\t* config/nvptx/nvptx.md: Use nvptx_mem_local_p.\n\t(define_c_enum \"unspecv\"): Add UNSPECV_CAS_LOCAL.\n\t(define_insn \"atomic_compare_and_swap<mode>_1_local\"): New\n\tnon-atomic, non-predicable define_insn, factored out of ...\n\t(define_insn \"atomic_compare_and_swap<mode>_1\"): ... here.\n\tMake predicable again.\n\t(define_expand \"atomic_compare_and_swap<mode>\"): Use\n\tatomic_compare_and_swap<mode>_1_local.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-04  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/104364\n\t* gcc.target/nvptx/softstack-2.c: New test.\n\t* gcc.target/nvptx/uniform-simt-1.c: New test.", "tree": {"sha": "e9b9461242182dd61d5342588d3e6b1673fc92f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b9461242182dd61d5342588d3e6b1673fc92f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b54cc486cc6fcc40380445e500eaf46d7901dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b54cc486cc6fcc40380445e500eaf46d7901dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b54cc486cc6fcc40380445e500eaf46d7901dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b54cc486cc6fcc40380445e500eaf46d7901dc/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af7ef050aed9f678d70d79931ede38374fde863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af7ef050aed9f678d70d79931ede38374fde863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af7ef050aed9f678d70d79931ede38374fde863"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "a846e3419177bf46993cefb749bde71324b7e4a6", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=04b54cc486cc6fcc40380445e500eaf46d7901dc", "patch": "@@ -59,5 +59,6 @@ extern const char *nvptx_output_simt_enter (rtx, rtx, rtx);\n extern const char *nvptx_output_simt_exit (rtx);\n extern const char *nvptx_output_red_partition (rtx, rtx);\n extern const char *nvptx_output_atomic_insn (const char *, rtx *, int, int);\n+extern bool nvptx_mem_local_p (rtx);\n #endif\n #endif"}, {"sha": "2a694926b7a7d9d8940d37092f86cfa85d2e0684", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=04b54cc486cc6fcc40380445e500eaf46d7901dc", "patch": "@@ -3150,7 +3150,8 @@ nvptx_reorg_uniform_simt ()\n       rtx pred = nvptx_get_unisimt_predicate ();\n       pred = gen_rtx_NE (BImode, pred, const0_rtx);\n       pat = gen_rtx_COND_EXEC (VOIDmode, pred, pat);\n-      validate_change (insn, &PATTERN (insn), pat, false);\n+      bool changed_p = validate_change (insn, &PATTERN (insn), pat, false);\n+      gcc_assert (changed_p);\n     }\n }\n \n@@ -6894,6 +6895,28 @@ nvptx_libc_has_function (enum function_class fn_class, tree type)\n   return default_libc_has_function (fn_class, type);\n }\n \n+bool\n+nvptx_mem_local_p (rtx mem)\n+{\n+  gcc_assert (GET_CODE (mem) == MEM);\n+\n+  struct address_info info;\n+  decompose_mem_address (&info, mem);\n+\n+  if (info.base != NULL && REG_P (*info.base)\n+      && REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    {\n+      if (TARGET_SOFT_STACK)\n+\t{\n+\t  /* Frame-related doesn't mean local.  */\n+\t}\n+      else\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE nvptx_option_override\n "}, {"sha": "d64dbfd8b33e08317c1ff5f3edf5823c3c50b40e", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=04b54cc486cc6fcc40380445e500eaf46d7901dc", "patch": "@@ -54,6 +54,7 @@\n (define_c_enum \"unspecv\" [\n    UNSPECV_LOCK\n    UNSPECV_CAS\n+   UNSPECV_CAS_LOCAL\n    UNSPECV_XCHG\n    UNSPECV_BARSYNC\n    UNSPECV_WARPSYNC\n@@ -1771,32 +1772,33 @@\n    (match_operand:SI 7 \"const_int_operand\")]\t\t;; failure model\n   \"\"\n {\n-  emit_insn (gen_atomic_compare_and_swap<mode>_1\n-    (operands[1], operands[2], operands[3], operands[4], operands[6]));\n+  if (nvptx_mem_local_p (operands[2]))\n+    emit_insn (gen_atomic_compare_and_swap<mode>_1_local\n+\t\t(operands[1], operands[2], operands[3], operands[4],\n+\t\t operands[6]));\n+  else\n+    emit_insn (gen_atomic_compare_and_swap<mode>_1\n+\t\t(operands[1], operands[2], operands[3], operands[4],\n+\t\t operands[6]));\n \n   rtx cond = gen_reg_rtx (BImode);\n   emit_move_insn (cond, gen_rtx_EQ (BImode, operands[1], operands[3]));\n   emit_insn (gen_sel_truesi (operands[0], cond, GEN_INT (1), GEN_INT (0)));\n   DONE;\n })\n \n-(define_insn \"atomic_compare_and_swap<mode>_1\"\n+(define_insn \"atomic_compare_and_swap<mode>_1_local\"\n   [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(unspec_volatile:SDIM\n \t  [(match_operand:SDIM 1 \"memory_operand\" \"+m\")\n \t   (match_operand:SDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")\n \t   (match_operand:SDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")\n \t   (match_operand:SI 4 \"const_int_operand\")]\n-\t  UNSPECV_CAS))\n+\t  UNSPECV_CAS_LOCAL))\n    (set (match_dup 1)\n-\t(unspec_volatile:SDIM [(const_int 0)] UNSPECV_CAS))]\n+\t(unspec_volatile:SDIM [(const_int 0)] UNSPECV_CAS_LOCAL))]\n   \"\"\n   {\n-    struct address_info info;\n-    decompose_mem_address (&info, operands[1]);\n-    if (info.base != NULL && REG_P (*info.base)\n-\t&& REGNO_PTR_FRAME_P (REGNO (*info.base)))\n-      {\n \toutput_asm_insn (\"{\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t      \".reg.pred\"  \"\\\\t\" \"%%eq_p;\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t      \".reg%t0\"\t   \"\\\\t\" \"%%val;\", operands);\n@@ -1807,13 +1809,26 @@\n \toutput_asm_insn (\"\\\\t\"\t      \"mov%t0\"\t   \"\\\\t\" \"%0,%%val;\", operands);\n \toutput_asm_insn (\"}\", NULL);\n \treturn \"\";\n-      }\n+  }\n+  [(set_attr \"predicable\" \"false\")])\n+\n+(define_insn \"atomic_compare_and_swap<mode>_1\"\n+  [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(unspec_volatile:SDIM\n+\t  [(match_operand:SDIM 1 \"memory_operand\" \"+m\")\n+\t   (match_operand:SDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")\n+\t   (match_operand:SDIM 3 \"nvptx_nonmemory_operand\" \"Ri\")\n+\t   (match_operand:SI 4 \"const_int_operand\")]\n+\t  UNSPECV_CAS))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SDIM [(const_int 0)] UNSPECV_CAS))]\n+  \"\"\n+  {\n     const char *t\n-      = \"\\\\tatom%A1.cas.b%T0\\\\t%0, %1, %2, %3;\";\n+      = \"%.\\\\tatom%A1.cas.b%T0\\\\t%0, %1, %2, %3;\";\n     return nvptx_output_atomic_insn (t, operands, 1, 4);\n   }\n-  [(set_attr \"atomic\" \"true\")\n-   (set_attr \"predicable\" \"false\")])\n+  [(set_attr \"atomic\" \"true\")])\n \n (define_insn \"atomic_exchange<mode>\"\n   [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\t;; output\n@@ -1825,10 +1840,7 @@\n \t(match_operand:SDIM 2 \"nvptx_nonmemory_operand\" \"Ri\"))]\t;; input\n   \"\"\n   {\n-    struct address_info info;\n-    decompose_mem_address (&info, operands[1]);\n-    if (info.base != NULL && REG_P (*info.base)\n-\t&& REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    if (nvptx_mem_local_p (operands[1]))\n       {\n \toutput_asm_insn (\"{\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t \".reg%t0\"  \"\\\\t\" \"%%val;\", operands);\n@@ -1855,10 +1867,7 @@\n \t(match_dup 1))]\n   \"\"\n   {\n-    struct address_info info;\n-    decompose_mem_address (&info, operands[1]);\n-    if (info.base != NULL && REG_P (*info.base)\n-\t&& REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    if (nvptx_mem_local_p (operands[1]))\n       {\n \toutput_asm_insn (\"{\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t \".reg%t0\"  \"\\\\t\" \"%%val;\", operands);\n@@ -1888,10 +1897,7 @@\n \t(match_dup 1))]\n   \"\"\n   {\n-    struct address_info info;\n-    decompose_mem_address (&info, operands[1]);\n-    if (info.base != NULL && REG_P (*info.base)\n-\t&& REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    if (nvptx_mem_local_p (operands[1]))\n       {\n \toutput_asm_insn (\"{\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t \".reg%t0\"  \"\\\\t\" \"%%val;\", operands);\n@@ -1924,10 +1930,7 @@\n \t(match_dup 1))]\n   \"<MODE>mode == SImode || TARGET_SM35\"\n   {\n-    struct address_info info;\n-    decompose_mem_address (&info, operands[1]);\n-    if (info.base != NULL && REG_P (*info.base)\n-\t&& REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    if (nvptx_mem_local_p (operands[1]))\n       {\n \toutput_asm_insn (\"{\", NULL);\n \toutput_asm_insn (\"\\\\t\"\t \".reg.b%T0\"    \"\\\\t\" \"%%val;\", operands);"}, {"sha": "cccfda947d7d7f1174459245c33c4e3fd0290387", "filename": "gcc/testsuite/gcc.target/nvptx/softstack-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fsoftstack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fsoftstack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fsoftstack-2.c?ref=04b54cc486cc6fcc40380445e500eaf46d7901dc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O2 -msoft-stack\" } */\n+\n+int\n+f (void)\n+{\n+  int a = 0;\n+  return __sync_lock_test_and_set (&a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"atom.exch\" 1 } } */\n+"}, {"sha": "1bc0adae014339180b3d4da617167a414809c6e9", "filename": "gcc/testsuite/gcc.target/nvptx/uniform-simt-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b54cc486cc6fcc40380445e500eaf46d7901dc/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c?ref=04b54cc486cc6fcc40380445e500eaf46d7901dc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -muniform-simt\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0,\n+};\n+\n+int a = 0;\n+\n+int\n+f (void)\n+{\n+  int expected = 1;\n+  return __atomic_compare_exchange_n (&a, &expected, 0, 0, MEMMODEL_RELAXED,\n+\t\t\t\t      MEMMODEL_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"@%r\\[0-9\\]*\\tatom.global.cas\" 1 } } */"}]}