{"sha": "0715a2a8d257d647ee97521316ef87ac150c1977", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxNWEyYThkMjU3ZDY0N2VlOTc1MjEzMTZlZjg3YWMxNTBjMTk3Nw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-11-14T11:41:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:41:20Z"}, "message": "[Ada] Renamed equality leads to spurious errors\n\nThe following patch corrects the search for the equality function to\nhandle cases where the equality could be a renaming of another routine.\nNo simple reproducer possible because this requires PolyORB.\n\n2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Find_Aliased_Equality): New routine.\n\t(Find_Equality): Reimplemented.\n\t(Is_Equality): New routine.\n\nFrom-SVN: r266121", "tree": {"sha": "16bdc68929370f39f7ec2d03ea8c256485ec7eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16bdc68929370f39f7ec2d03ea8c256485ec7eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0715a2a8d257d647ee97521316ef87ac150c1977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0715a2a8d257d647ee97521316ef87ac150c1977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0715a2a8d257d647ee97521316ef87ac150c1977", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0715a2a8d257d647ee97521316ef87ac150c1977/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3b3ada9a000ee3ebda203debead999a37fa1094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b3ada9a000ee3ebda203debead999a37fa1094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b3ada9a000ee3ebda203debead999a37fa1094"}], "stats": {"total": 103, "additions": 74, "deletions": 29}, "files": [{"sha": "2ebc0c9ecfdd2642d6cf9a37447021dc35059ab0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0715a2a8d257d647ee97521316ef87ac150c1977/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0715a2a8d257d647ee97521316ef87ac150c1977/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0715a2a8d257d647ee97521316ef87ac150c1977", "patch": "@@ -1,3 +1,9 @@\n+2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Find_Aliased_Equality): New routine.\n+\t(Find_Equality): Reimplemented.\n+\t(Is_Equality): New routine.\n+\n 2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* ghost.adb (Ghost_Entity): New routine."}, {"sha": "c427b9e1e034daff544dc2ad36d60ee8ab24dd05", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 68, "deletions": 29, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0715a2a8d257d647ee97521316ef87ac150c1977/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0715a2a8d257d647ee97521316ef87ac150c1977/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0715a2a8d257d647ee97521316ef87ac150c1977", "patch": "@@ -7560,57 +7560,96 @@ package body Exp_Ch4 is\n       -------------------\n \n       function Find_Equality (Prims : Elist_Id) return Entity_Id is\n-         Formal_1  : Entity_Id;\n-         Formal_2  : Entity_Id;\n-         Prim      : Entity_Id;\n-         Prim_Elmt : Elmt_Id;\n+         function Find_Aliased_Equality (Prim : Entity_Id) return Entity_Id;\n+         --  Find an equality in a possible alias chain starting from primitive\n+         --  operation Prim.\n \n-      begin\n-         --  Assume that the tagged type lacks an equality\n+         function Is_Equality (Id : Entity_Id) return Boolean;\n+         --  Determine whether arbitrary entity Id denotes an equality\n \n-         Prim := Empty;\n+         ---------------------------\n+         -- Find_Aliased_Equality --\n+         ---------------------------\n \n-         --  Inspect the list of primitives looking for a suitable equality\n+         function Find_Aliased_Equality (Prim : Entity_Id) return Entity_Id is\n+            Candid : Entity_Id;\n \n-         Prim_Elmt := First_Elmt (Prims);\n-         while Present (Prim_Elmt) loop\n+         begin\n+            --  Inspect each candidate in the alias chain, checking whether it\n+            --  denotes an equality.\n \n-            --  Traverse a potential chain of derivations to recover the parent\n-            --  equality.\n+            Candid := Prim;\n+            while Present (Candid) loop\n+               if Is_Equality (Candid) then\n+                  return Candid;\n+               end if;\n \n-            Prim := Ultimate_Alias (Node (Prim_Elmt));\n+               Candid := Alias (Candid);\n+            end loop;\n \n-            --  The current primitives denotes function \"=\" that returns a\n-            --  Boolean. This could be the suitable equality if the formal\n-            --  parameters agree.\n+            return Empty;\n+         end Find_Aliased_Equality;\n \n-            if Ekind (Prim) = E_Function\n-              and then Chars (Prim) = Name_Op_Eq\n-              and then Base_Type (Etype (Prim)) = Standard_Boolean\n+         -----------------\n+         -- Is_Equality --\n+         -----------------\n+\n+         function Is_Equality (Id : Entity_Id) return Boolean is\n+            Formal_1 : Entity_Id;\n+            Formal_2 : Entity_Id;\n+\n+         begin\n+            --  The equality function carries name \"=\", returns Boolean, and\n+            --  has exactly two formal parameters of an identical type.\n+\n+            if Ekind (Id) = E_Function\n+              and then Chars (Id) = Name_Op_Eq\n+              and then Base_Type (Etype (Id)) = Standard_Boolean\n             then\n-               Formal_1 := First_Formal (Prim);\n+               Formal_1 := First_Formal (Id);\n                Formal_2 := Empty;\n \n                if Present (Formal_1) then\n                   Formal_2 := Next_Formal (Formal_1);\n                end if;\n \n-               if Present (Formal_1)\n-                 and then Present (Formal_2)\n-                 and then Etype (Formal_1) = Etype (Formal_2)\n-               then\n-                  exit;\n-               end if;\n+               return\n+                 Present (Formal_1)\n+                   and then Present (Formal_2)\n+                   and then Etype (Formal_1) = Etype (Formal_2)\n+                   and then No (Next_Formal (Formal_2));\n             end if;\n \n+            return False;\n+         end Is_Equality;\n+\n+         --  Local variables\n+\n+         Eq_Prim   : Entity_Id;\n+         Prim_Elmt : Elmt_Id;\n+\n+      --  Start of processing for Find_Equality\n+\n+      begin\n+         --  Assume that the tagged type lacks an equality\n+\n+         Eq_Prim := Empty;\n+\n+         --  Inspect the list of primitives looking for a suitable equality\n+         --  within a possible chain of aliases.\n+\n+         Prim_Elmt := First_Elmt (Prims);\n+         while Present (Prim_Elmt) and then No (Eq_Prim) loop\n+            Eq_Prim := Find_Aliased_Equality (Node (Prim_Elmt));\n+\n             Next_Elmt (Prim_Elmt);\n          end loop;\n \n-         --  A tagged type should have an equality in its list of primitives\n+         --  A tagged type should always have an equality\n \n-         pragma Assert (Present (Prim));\n+         pragma Assert (Present (Eq_Prim));\n \n-         return Prim;\n+         return Eq_Prim;\n       end Find_Equality;\n \n       ------------------------------------"}]}