{"sha": "d34aacdfff52080f0909a02e02e8f2c99646a062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0YWFjZGZmZjUyMDgwZjA5MDlhMDJlMDJlOGYyYzk5NjQ2YTA2Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-09T22:02:09Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-09T22:02:09Z"}, "message": "* cpplib.pot: Regenerate.\n\nFrom-SVN: r90369", "tree": {"sha": "e8f8927bad47cf4476e57ca7bd28ec776f48281e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f8927bad47cf4476e57ca7bd28ec776f48281e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34aacdfff52080f0909a02e02e8f2c99646a062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34aacdfff52080f0909a02e02e8f2c99646a062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34aacdfff52080f0909a02e02e8f2c99646a062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34aacdfff52080f0909a02e02e8f2c99646a062/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f47ee0cd080ac2e190544d3e1baa17439fc298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f47ee0cd080ac2e190544d3e1baa17439fc298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f47ee0cd080ac2e190544d3e1baa17439fc298"}], "stats": {"total": 704, "additions": 375, "deletions": 329}, "files": [{"sha": "b4642f85ff1f62752294dae240dbdcf262749a11", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34aacdfff52080f0909a02e02e8f2c99646a062/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34aacdfff52080f0909a02e02e8f2c99646a062/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=d34aacdfff52080f0909a02e02e8f2c99646a062", "patch": "@@ -1,3 +1,7 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* cpplib.pot: Regenerate.\n+\n 2004-05-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* be.po: Extracted from gcc/po/be.po."}, {"sha": "c832f723a930da2238d80e8205308c9f049a7e4f", "filename": "libcpp/po/cpplib.pot", "status": "modified", "additions": 371, "deletions": 329, "changes": 700, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34aacdfff52080f0909a02e02e8f2c99646a062/libcpp%2Fpo%2Fcpplib.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34aacdfff52080f0909a02e02e8f2c99646a062/libcpp%2Fpo%2Fcpplib.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2Fcpplib.pot?ref=d34aacdfff52080f0909a02e02e8f2c99646a062", "patch": "@@ -8,767 +8,809 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: http://gcc.gnu.org/bugs.html\\n\"\n-\"POT-Creation-Date: 2004-02-06 01:34+0000\\n\"\n+\"POT-Creation-Date: 2004-11-09 22:00+0000\\n\"\n \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=CHARSET\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n \n-#: cppexp.c:1253\n-msgid \"traditional C rejects the unary plus operator\"\n-msgstr \"\"\n-\n-#: cpperror.c:176\n-#, c-format\n-msgid \"%s: %s\"\n-msgstr \"\"\n-\n-#: cppcharset.c:653\n+#: charset.c:653\n #, c-format\n msgid \"conversion from %s to %s not supported by iconv\"\n msgstr \"\"\n \n-#: cppcharset.c:656\n+#: charset.c:656\n msgid \"iconv_open\"\n msgstr \"\"\n \n-#. FIXME: should be DL_SORRY\n-#: cppcharset.c:664\n+#: charset.c:664\n #, c-format\n msgid \"no iconv implementation, cannot convert from %s to %s\"\n msgstr \"\"\n \n-#: cppcharset.c:808\n+#: charset.c:808\n msgid \"universal character names are only valid in C++ and C99\"\n msgstr \"\"\n \n-#: cppcharset.c:811\n+#: charset.c:811\n #, c-format\n msgid \"the meaning of '\\\\%c' is different in traditional C\"\n msgstr \"\"\n \n-#: cppcharset.c:837\n+#: charset.c:837\n #, c-format\n msgid \"incomplete universal character name %.*s\"\n msgstr \"\"\n \n-#: cppcharset.c:849\n+#: charset.c:849\n #, c-format\n msgid \"%.*s is not a valid universal character\"\n msgstr \"\"\n \n-#: cppcharset.c:859\n+#: charset.c:859\n #, c-format\n msgid \"universal character %.*s is not valid in an identifier\"\n msgstr \"\"\n \n-#: cppcharset.c:863\n+#: charset.c:863\n #, c-format\n msgid \"universal character %.*s is not valid at the start of an identifier\"\n msgstr \"\"\n \n-#: cppcharset.c:898\n+#: charset.c:896\n msgid \"converting UCN to source character set\"\n msgstr \"\"\n \n-#: cppcharset.c:902\n+#: charset.c:900\n msgid \"converting UCN to execution character set\"\n msgstr \"\"\n \n-#: cppcharset.c:967\n+#: charset.c:972\n msgid \"the meaning of '\\\\x' is different in traditional C\"\n msgstr \"\"\n \n-#: cppcharset.c:984 f/lex.c:580\n+#: charset.c:989\n msgid \"\\\\x used with no following hex digits\"\n msgstr \"\"\n \n-#: cppcharset.c:991\n+#: charset.c:996\n msgid \"hex escape sequence out of range\"\n msgstr \"\"\n \n-#: cppcharset.c:1030\n+#: charset.c:1035\n msgid \"octal escape sequence out of range\"\n msgstr \"\"\n \n-#: cppcharset.c:1098\n+#: charset.c:1103\n msgid \"the meaning of '\\\\a' is different in traditional C\"\n msgstr \"\"\n \n-#: cppcharset.c:1105\n+#: charset.c:1110\n #, c-format\n msgid \"non-ISO-standard escape sequence, '\\\\%c'\"\n msgstr \"\"\n \n-#: cppcharset.c:1113\n+#: charset.c:1118\n #, c-format\n msgid \"unknown escape sequence '\\\\%c'\"\n msgstr \"\"\n \n-#: cppcharset.c:1116\n+#: charset.c:1121\n #, c-format\n msgid \"unknown escape sequence: '\\\\%03o'\"\n msgstr \"\"\n \n-#: cppcharset.c:1122\n+#: charset.c:1127\n msgid \"converting escape sequence to execution character set\"\n msgstr \"\"\n \n-#: cppcharset.c:1181\n+#: charset.c:1186\n msgid \"converting to execution character set\"\n msgstr \"\"\n \n-#: cppcharset.c:1244 cppcharset.c:1307\n+#: charset.c:1249 charset.c:1312\n msgid \"character constant too long for its type\"\n msgstr \"\"\n \n-#: cppcharset.c:1247\n+#: charset.c:1252\n msgid \"multi-character character constant\"\n msgstr \"\"\n \n-#: cppcharset.c:1339\n+#: charset.c:1344\n msgid \"empty character constant\"\n msgstr \"\"\n \n-#: cppcharset.c:1378\n+#: charset.c:1393\n #, c-format\n msgid \"failure to convert %s to %s\"\n msgstr \"\"\n \n-#: cpperror.c:110 diagnostic.def:5\n-msgid \"warning: \"\n+#: directives.c:215\n+#, c-format\n+msgid \"extra tokens at end of #%s directive\"\n msgstr \"\"\n \n-#: cpperror.c:112\n-msgid \"internal error: \"\n+#: directives.c:302\n+#, c-format\n+msgid \"#%s is a GCC extension\"\n msgstr \"\"\n \n-#: cpperror.c:174\n-msgid \"stdout\"\n+#: directives.c:314\n+msgid \"suggest not using #elif in traditional C\"\n msgstr \"\"\n \n-#: cppexp.c:192\n-msgid \"too many decimal points in number\"\n+#: directives.c:317\n+#, c-format\n+msgid \"traditional C ignores #%s with the # indented\"\n msgstr \"\"\n \n-#: cppexp.c:212\n+#: directives.c:321\n #, c-format\n-msgid \"invalid digit \\\"%c\\\" in octal constant\"\n+msgid \"suggest hiding #%s from traditional C with an indented #\"\n msgstr \"\"\n \n-#: cppexp.c:218\n-msgid \"use of C99 hexadecimal floating constant\"\n+#: directives.c:347\n+msgid \"embedding a directive within macro arguments is not portable\"\n msgstr \"\"\n \n-#: cppexp.c:227\n-msgid \"exponent has no digits\"\n+#: directives.c:367\n+msgid \"style of line directive is a GCC extension\"\n msgstr \"\"\n \n-#: cppexp.c:234\n-msgid \"hexadecimal floating constants require an exponent\"\n+#: directives.c:417\n+#, c-format\n+msgid \"invalid preprocessing directive #%s\"\n msgstr \"\"\n \n-#: cppexp.c:240\n-#, c-format\n-msgid \"invalid suffix \\\"%.*s\\\" on floating constant\"\n+#: directives.c:488\n+msgid \"\\\"defined\\\" cannot be used as a macro name\"\n msgstr \"\"\n \n-#: cppexp.c:250 cppexp.c:275\n+#: directives.c:494\n #, c-format\n-msgid \"traditional C rejects the \\\"%.*s\\\" suffix\"\n+msgid \"\\\"%s\\\" cannot be used as a macro name as it is an operator in C++\"\n msgstr \"\"\n \n-#: cppexp.c:261\n+#: directives.c:497\n #, c-format\n-msgid \"invalid suffix \\\"%.*s\\\" on integer constant\"\n+msgid \"no macro name given in #%s directive\"\n msgstr \"\"\n \n-#: cppexp.c:283\n-msgid \"use of C99 long long integer constant\"\n+#: directives.c:500\n+msgid \"macro names must be identifiers\"\n msgstr \"\"\n \n-#: cppexp.c:290\n-msgid \"imaginary constants are a GCC extension\"\n+#: directives.c:541\n+#, c-format\n+msgid \"undefining \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cppexp.c:376\n-msgid \"integer constant is too large for its type\"\n+#: directives.c:596\n+msgid \"missing terminating > character\"\n msgstr \"\"\n \n-#: cppexp.c:388\n-msgid \"integer constant is so large that it is unsigned\"\n+#: directives.c:649\n+#, c-format\n+msgid \"#%s expects \\\"FILENAME\\\" or <FILENAME>\"\n msgstr \"\"\n \n-#: cppexp.c:470\n-msgid \"missing ')' after \\\"defined\\\"\"\n+#: directives.c:672\n+msgid \"#include nested too deeply\"\n msgstr \"\"\n \n-#: cppexp.c:477\n-msgid \"operator \\\"defined\\\" requires an identifier\"\n+#: directives.c:710\n+msgid \"#include_next in primary source file\"\n msgstr \"\"\n \n-#: cppexp.c:485\n+#: directives.c:736\n #, c-format\n-msgid \"(\\\"%s\\\" is an alternative token for \\\"%s\\\" in C++)\"\n+msgid \"invalid flag \\\"%s\\\" in line directive\"\n msgstr \"\"\n \n-#: cppexp.c:495\n-msgid \"this use of \\\"defined\\\" may not be portable\"\n+#: directives.c:783\n+#, c-format\n+msgid \"\\\"%s\\\" after #line is not a positive integer\"\n msgstr \"\"\n \n-#: cppexp.c:531\n-msgid \"floating constant in preprocessor expression\"\n+#: directives.c:789\n+msgid \"line number out of range\"\n msgstr \"\"\n \n-#: cppexp.c:537\n-msgid \"imaginary number in preprocessor expression\"\n+#: directives.c:802 directives.c:879\n+#, c-format\n+msgid \"\\\"%s\\\" is not a valid filename\"\n msgstr \"\"\n \n-#: cppexp.c:582\n+#: directives.c:839\n #, c-format\n-msgid \"\\\"%s\\\" is not defined\"\n+msgid \"\\\"%s\\\" after # is not a positive integer\"\n msgstr \"\"\n \n-#: cppexp.c:714 cppexp.c:743\n+#: directives.c:941\n+msgid \"invalid #ident directive\"\n+msgstr \"\"\n+\n+#: directives.c:1026\n #, c-format\n-msgid \"missing binary operator before token \\\"%s\\\"\"\n+msgid \"registering \\\"%s\\\" as both a pragma and a pragma namespace\"\n msgstr \"\"\n \n-#: cppexp.c:734\n+#: directives.c:1029\n #, c-format\n-msgid \"token \\\"%s\\\" is not valid in preprocessor expressions\"\n+msgid \"#pragma %s %s is already registered\"\n msgstr \"\"\n \n-#: cppexp.c:753\n-msgid \"void expression between '(' and ')'\"\n+#: directives.c:1032\n+#, c-format\n+msgid \"#pragma %s is already registered\"\n msgstr \"\"\n \n-#: cppexp.c:756\n-msgid \"#if with no expression\"\n+#: directives.c:1220\n+msgid \"#pragma once in main file\"\n msgstr \"\"\n \n-#: cppexp.c:758\n+#: directives.c:1243\n+msgid \"invalid #pragma GCC poison directive\"\n+msgstr \"\"\n+\n+#: directives.c:1252\n #, c-format\n-msgid \"operator '%s' has no right operand\"\n+msgid \"poisoning existing macro \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cppexp.c:784\n-msgid \" ':' without preceding '?'\"\n+#: directives.c:1273\n+msgid \"#pragma system_header ignored outside include file\"\n msgstr \"\"\n \n-#: cppexp.c:811\n-msgid \"unbalanced stack in #if\"\n+#: directives.c:1297\n+#, c-format\n+msgid \"cannot find source file %s\"\n msgstr \"\"\n \n-#: cppexp.c:830\n+#: directives.c:1301\n #, c-format\n-msgid \"impossible operator '%u'\"\n+msgid \"current file is older than %s\"\n msgstr \"\"\n \n-#: cppexp.c:922\n-msgid \"missing ')' in expression\"\n+#: directives.c:1415\n+msgid \"_Pragma takes a parenthesized string literal\"\n msgstr \"\"\n \n-#: cppexp.c:943\n-msgid \"'?' without following ':'\"\n+#: directives.c:1520\n+msgid \"#else without #if\"\n msgstr \"\"\n \n-#: cppexp.c:953\n-msgid \"integer overflow in preprocessor expression\"\n+#: directives.c:1525\n+msgid \"#else after #else\"\n msgstr \"\"\n \n-#: cppexp.c:958\n-msgid \"missing '(' in expression\"\n+#: directives.c:1527\n+#: directives.c:1560\n+msgid \"the conditional began here\"\n msgstr \"\"\n \n-#: cppexp.c:990\n-#, c-format\n-msgid \"the left operand of \\\"%s\\\" changes sign when promoted\"\n+#: directives.c:1553\n+msgid \"#elif without #if\"\n msgstr \"\"\n \n-#: cppexp.c:995\n-#, c-format\n-msgid \"the right operand of \\\"%s\\\" changes sign when promoted\"\n+#: directives.c:1558\n+msgid \"#elif after #else\"\n msgstr \"\"\n \n-#: cppexp.c:1352\n-msgid \"comma operator in operand of #if\"\n+#: directives.c:1588\n+msgid \"#endif without #if\"\n msgstr \"\"\n \n-#: cppexp.c:1483\n-msgid \"division by zero in #if\"\n+#: directives.c:1665\n+msgid \"missing '(' after predicate\"\n msgstr \"\"\n \n-#: cppfiles.c:375\n-msgid \"NULL directory in find_file\"\n+#: directives.c:1680\n+msgid \"missing ')' to complete answer\"\n msgstr \"\"\n \n-#: cppfiles.c:402\n-msgid \"one or more PCH files were found, but they were invalid\"\n+#: directives.c:1700\n+msgid \"predicate's answer is empty\"\n msgstr \"\"\n \n-#: cppfiles.c:405\n-msgid \"use -Winvalid-pch for more information\"\n+#: directives.c:1727\n+msgid \"assertion without predicate\"\n msgstr \"\"\n \n-#: cppfiles.c:463\n-#, c-format\n-msgid \"%s is a block device\"\n+#: directives.c:1729\n+msgid \"predicate must be an identifier\"\n msgstr \"\"\n \n-#: cppfiles.c:480\n+#: directives.c:1815\n #, c-format\n-msgid \"%s is too large\"\n+msgid \"\\\"%s\\\" re-asserted\"\n msgstr \"\"\n \n-#: cppfiles.c:515\n+#: directives.c:2038\n #, c-format\n-msgid \"%s is shorter than expected\"\n+msgid \"unterminated #%s\"\n msgstr \"\"\n \n-#: cppfiles.c:714\n-#, c-format\n-msgid \"no include path in which to search for %s\"\n+#: errors.c:118\n+msgid \"warning: \"\n msgstr \"\"\n \n-#: cppfiles.c:974\n-msgid \"Multiple include guards may be useful for:\\n\"\n+#: errors.c:120\n+msgid \"internal error: \"\n msgstr \"\"\n \n-#: cppinit.c:389\n-msgid \"cppchar_t must be an unsigned type\"\n+#: errors.c:122\n+msgid \"error: \"\n+msgstr \"\"\n+\n+#: errors.c:181\n+msgid \"stdout\"\n msgstr \"\"\n \n-#: cppinit.c:393\n+#: errors.c:183\n #, c-format\n-msgid \"\"\n-\"preprocessor arithmetic has maximum precision of %lu bits; target requires %\"\n-\"lu bits\"\n+msgid \"%s: %s\"\n msgstr \"\"\n \n-#: cppinit.c:400\n-msgid \"CPP arithmetic must be at least as precise as a target int\"\n+#: expr.c:192\n+msgid \"too many decimal points in number\"\n msgstr \"\"\n \n-#: cppinit.c:403\n-msgid \"target char is less than 8 bits wide\"\n+#: expr.c:212\n+#, c-format\n+msgid \"invalid digit \\\"%c\\\" in octal constant\"\n msgstr \"\"\n \n-#: cppinit.c:407\n-msgid \"target wchar_t is narrower than target char\"\n+#: expr.c:218\n+msgid \"use of C99 hexadecimal floating constant\"\n msgstr \"\"\n \n-#: cppinit.c:411\n-msgid \"target int is narrower than target char\"\n+#: expr.c:227\n+msgid \"exponent has no digits\"\n msgstr \"\"\n \n-#: cppinit.c:416\n-msgid \"CPP half-integer narrower than CPP character\"\n+#: expr.c:234\n+msgid \"hexadecimal floating constants require an exponent\"\n msgstr \"\"\n \n-#: cppinit.c:420\n+#: expr.c:240\n #, c-format\n-msgid \"\"\n-\"CPP on this host cannot handle wide character constants over %lu bits, but \"\n-\"the target requires %lu bits\"\n+msgid \"invalid suffix \\\"%.*s\\\" on floating constant\"\n msgstr \"\"\n \n-#: cpplex.c:410\n-msgid \"null character(s) ignored\"\n+#: expr.c:250 expr.c:275\n+#, c-format\n+msgid \"traditional C rejects the \\\"%.*s\\\" suffix\"\n msgstr \"\"\n \n-#: cpplex.c:445\n-msgid \"'$' in identifier or number\"\n+#: expr.c:261\n+#, c-format\n+msgid \"invalid suffix \\\"%.*s\\\" on integer constant\"\n msgstr \"\"\n \n-#: cpplex.c:492\n-#, c-format\n-msgid \"attempt to use poisoned \\\"%s\\\"\"\n+#: expr.c:283\n+msgid \"use of C99 long long integer constant\"\n msgstr \"\"\n \n-#: cpplex.c:500\n-msgid \"__VA_ARGS__ can only appear in the expansion of a C99 variadic macro\"\n+#: expr.c:290\n+msgid \"imaginary constants are a GCC extension\"\n msgstr \"\"\n \n-#: cpplex.c:596\n-msgid \"null character(s) preserved in literal\"\n+#: expr.c:376\n+msgid \"integer constant is too large for its type\"\n msgstr \"\"\n \n-#: cpplex.c:916\n-msgid \"unterminated comment\"\n+#: expr.c:388\n+msgid \"integer constant is so large that it is unsigned\"\n msgstr \"\"\n \n-#: cpplex.c:927\n-msgid \"C++ style comments are not allowed in ISO C90\"\n+#: expr.c:470\n+msgid \"missing ')' after \\\"defined\\\"\"\n msgstr \"\"\n \n-#: cpplex.c:929\n-msgid \"(this will be reported only once per input file)\"\n+#: expr.c:477\n+msgid \"operator \\\"defined\\\" requires an identifier\"\n msgstr \"\"\n \n-#: cpplex.c:934\n-msgid \"multi-line comment\"\n+#: expr.c:485\n+#, c-format\n+msgid \"(\\\"%s\\\" is an alternative token for \\\"%s\\\" in C++)\"\n+msgstr \"\"\n+\n+#: expr.c:495\n+msgid \"this use of \\\"defined\\\" may not be portable\"\n+msgstr \"\"\n+\n+#: expr.c:534\n+msgid \"floating constant in preprocessor expression\"\n+msgstr \"\"\n+\n+#: expr.c:540\n+msgid \"imaginary number in preprocessor expression\"\n msgstr \"\"\n \n-#: cpplex.c:1198\n+#: expr.c:585\n #, c-format\n-msgid \"unspellable token %s\"\n+msgid \"\\\"%s\\\" is not defined\"\n msgstr \"\"\n \n-#: cpplib.c:218\n+#: expr.c:716 expr.c:745\n #, c-format\n-msgid \"extra tokens at end of #%s directive\"\n+msgid \"missing binary operator before token \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cpplib.c:304\n+#: expr.c:736\n #, c-format\n-msgid \"#%s is a GCC extension\"\n+msgid \"token \\\"%s\\\" is not valid in preprocessor expressions\"\n msgstr \"\"\n \n-#: cpplib.c:316\n-msgid \"suggest not using #elif in traditional C\"\n+#: expr.c:753\n+msgid \"missing expression between '(' and ')'\"\n+msgstr \"\"\n+\n+#: expr.c:756\n+msgid \"#if with no expression\"\n msgstr \"\"\n \n-#: cpplib.c:319\n+#: expr.c:759\n #, c-format\n-msgid \"traditional C ignores #%s with the # indented\"\n+msgid \"operator '%s' has no right operand\"\n msgstr \"\"\n \n-#: cpplib.c:323\n+#: expr.c:764\n #, c-format\n-msgid \"suggest hiding #%s from traditional C with an indented #\"\n+msgid \"operator '%s' has no left operand\"\n msgstr \"\"\n \n-#: cpplib.c:345\n-msgid \"embedding a directive within macro arguments is not portable\"\n+#: expr.c:790\n+msgid \" ':' without preceding '?'\"\n msgstr \"\"\n \n-#: cpplib.c:365\n-msgid \"style of line directive is a GCC extension\"\n+#: expr.c:817\n+msgid \"unbalanced stack in #if\"\n msgstr \"\"\n \n-#: cpplib.c:415\n+#: expr.c:836\n #, c-format\n-msgid \"invalid preprocessing directive #%s\"\n+msgid \"impossible operator '%u'\"\n msgstr \"\"\n \n-#: cpplib.c:484\n-msgid \"\\\"defined\\\" cannot be used as a macro name\"\n+#: expr.c:928\n+msgid \"missing ')' in expression\"\n+msgstr \"\"\n+\n+#: expr.c:949\n+msgid \"'?' without following ':'\"\n+msgstr \"\"\n+\n+#: expr.c:959\n+msgid \"integer overflow in preprocessor expression\"\n+msgstr \"\"\n+\n+#: expr.c:964\n+msgid \"missing '(' in expression\"\n msgstr \"\"\n \n-#: cpplib.c:490\n+#: expr.c:996\n #, c-format\n-msgid \"\\\"%s\\\" cannot be used as a macro name as it is an operator in C++\"\n+msgid \"the left operand of \\\"%s\\\" changes sign when promoted\"\n msgstr \"\"\n \n-#: cpplib.c:493\n+#: expr.c:1001\n #, c-format\n-msgid \"no macro name given in #%s directive\"\n+msgid \"the right operand of \\\"%s\\\" changes sign when promoted\"\n msgstr \"\"\n \n-#: cpplib.c:496\n-msgid \"macro names must be identifiers\"\n+#: expr.c:1260\n+msgid \"traditional C rejects the unary plus operator\"\n msgstr \"\"\n \n-#: cpplib.c:537\n-#, c-format\n-msgid \"undefining \\\"%s\\\"\"\n+#: expr.c:1359\n+msgid \"comma operator in operand of #if\"\n msgstr \"\"\n \n-#: cpplib.c:609\n-msgid \"missing terminating > character\"\n+#: expr.c:1491\n+msgid \"division by zero in #if\"\n msgstr \"\"\n \n-#: cpplib.c:662\n-#, c-format\n-msgid \"#%s expects \\\"FILENAME\\\" or <FILENAME>\"\n+#: files.c:401\n+msgid \"NULL directory in find_file\"\n msgstr \"\"\n \n-#: cpplib.c:685\n-msgid \"#include nested too deeply\"\n+#: files.c:446\n+msgid \"one or more PCH files were found, but they were invalid\"\n msgstr \"\"\n \n-#: cpplib.c:723\n-msgid \"#include_next in primary source file\"\n+#: files.c:449\n+msgid \"use -Winvalid-pch for more information\"\n msgstr \"\"\n \n-#: cpplib.c:749\n+#: files.c:514\n #, c-format\n-msgid \"invalid flag \\\"%s\\\" in line directive\"\n+msgid \"%s is a block device\"\n msgstr \"\"\n \n-#: cpplib.c:794\n+#: files.c:531\n #, c-format\n-msgid \"\\\"%s\\\" after #line is not a positive integer\"\n+msgid \"%s is too large\"\n msgstr \"\"\n \n-#: cpplib.c:800\n-msgid \"line number out of range\"\n+#: files.c:566\n+#, c-format\n+msgid \"%s is shorter than expected\"\n msgstr \"\"\n \n-#: cpplib.c:812 cpplib.c:885\n+#: files.c:769\n #, c-format\n-msgid \"\\\"%s\\\" is not a valid filename\"\n+msgid \"no include path in which to search for %s\"\n msgstr \"\"\n \n-#: cpplib.c:847\n-#, c-format\n-msgid \"\\\"%s\\\" after # is not a positive integer\"\n+#: files.c:1052\n+msgid \"Multiple include guards may be useful for:\\n\"\n msgstr \"\"\n \n-#: cpplib.c:947\n-msgid \"invalid #ident directive\"\n+#: init.c:393\n+msgid \"cppchar_t must be an unsigned type\"\n msgstr \"\"\n \n-#: cpplib.c:1027\n+#: init.c:397\n #, c-format\n-msgid \"registering \\\"%s\\\" as both a pragma and a pragma namespace\"\n+msgid \"\"\n+\"preprocessor arithmetic has maximum precision of %lu bits; target requires %\"\n+\"lu bits\"\n msgstr \"\"\n \n-#: cpplib.c:1030\n-#, c-format\n-msgid \"#pragma %s %s is already registered\"\n+#: init.c:404\n+msgid \"CPP arithmetic must be at least as precise as a target int\"\n msgstr \"\"\n \n-#: cpplib.c:1033\n-#, c-format\n-msgid \"#pragma %s is already registered\"\n+#: init.c:407\n+msgid \"target char is less than 8 bits wide\"\n msgstr \"\"\n \n-#: cpplib.c:1178\n-msgid \"#pragma once in main file\"\n+#: init.c:411\n+msgid \"target wchar_t is narrower than target char\"\n msgstr \"\"\n \n-#: cpplib.c:1201\n-msgid \"invalid #pragma GCC poison directive\"\n+#: init.c:415\n+msgid \"target int is narrower than target char\"\n+msgstr \"\"\n+\n+#: init.c:420\n+msgid \"CPP half-integer narrower than CPP character\"\n msgstr \"\"\n \n-#: cpplib.c:1210\n+#: init.c:424\n #, c-format\n-msgid \"poisoning existing macro \\\"%s\\\"\"\n+msgid \"\"\n+\"CPP on this host cannot handle wide character constants over %lu bits, but \"\n+\"the target requires %lu bits\"\n msgstr \"\"\n \n-#: cpplib.c:1231\n-msgid \"#pragma system_header ignored outside include file\"\n+#: lex.c:274\n+msgid \"backslash and newline separated by space\"\n msgstr \"\"\n \n-#: cpplib.c:1255\n+#: lex.c:279\n+msgid \"backslash-newline at end of file\"\n+msgstr \"\"\n+\n+#: lex.c:294\n #, c-format\n-msgid \"cannot find source file %s\"\n+msgid \"trigraph ??%c converted to %c\"\n msgstr \"\"\n \n-#: cpplib.c:1259\n+#: lex.c:301\n #, c-format\n-msgid \"current file is older than %s\"\n+msgid \"trigraph ??%c ignored, use -trigraphs to enable\"\n msgstr \"\"\n \n-#: cpplib.c:1373\n-msgid \"_Pragma takes a parenthesized string literal\"\n+#: lex.c:347\n+msgid \"\\\"/*\\\" within comment\"\n msgstr \"\"\n \n-#: cpplib.c:1451\n-msgid \"#else without #if\"\n+#: lex.c:405\n+#, c-format\n+msgid \"%s in preprocessing directive\"\n msgstr \"\"\n \n-#: cpplib.c:1456\n-msgid \"#else after #else\"\n+#: lex.c:414\n+msgid \"null character(s) ignored\"\n msgstr \"\"\n \n-#: cpplib.c:1484\n-msgid \"#elif without #if\"\n+#: lex.c:449\n+msgid \"'$' in identifier or number\"\n msgstr \"\"\n \n-#: cpplib.c:1489\n-msgid \"#elif after #else\"\n+#: lex.c:510\n+#, c-format\n+msgid \"attempt to use poisoned \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cpplib.c:1519\n-msgid \"#endif without #if\"\n+#: lex.c:518\n+msgid \"__VA_ARGS__ can only appear in the expansion of a C99 variadic macro\"\n msgstr \"\"\n \n-#: cpplib.c:1596\n-msgid \"missing '(' after predicate\"\n+#: lex.c:614\n+msgid \"null character(s) preserved in literal\"\n msgstr \"\"\n \n-#: cpplib.c:1611\n-msgid \"missing ')' to complete answer\"\n+#: lex.c:805\n+msgid \"no newline at end of file\"\n msgstr \"\"\n \n-#: cpplib.c:1631\n-msgid \"predicate's answer is empty\"\n+#: lex.c:948 traditional.c:162\n+msgid \"unterminated comment\"\n msgstr \"\"\n \n-#: cpplib.c:1658\n-msgid \"assertion without predicate\"\n+#: lex.c:959\n+msgid \"C++ style comments are not allowed in ISO C90\"\n msgstr \"\"\n \n-#: cpplib.c:1660\n-msgid \"predicate must be an identifier\"\n+#: lex.c:961\n+msgid \"(this will be reported only once per input file)\"\n msgstr \"\"\n \n-#: cpplib.c:1744\n+#: lex.c:966\n+msgid \"multi-line comment\"\n+msgstr \"\"\n+\n+#: lex.c:1230\n #, c-format\n-msgid \"\\\"%s\\\" re-asserted\"\n+msgid \"unspellable token %s\"\n+msgstr \"\"\n+\n+#: line-map.c:309\n+#, c-format\n+msgid \"In file included from %s:%u\"\n+msgstr \"\"\n+\n+#: line-map.c:327\n+#, c-format\n+msgid \"\"\n+\",\\n\"\n+\"                 from %s:%u\"\n msgstr \"\"\n \n-#: cppmacro.c:125 cppmacro.c:280\n+#: macro.c:85\n+#, c-format\n+msgid \"macro \\\"%s\\\" is not used\"\n+msgstr \"\"\n+\n+#: macro.c:124 macro.c:287\n #, c-format\n msgid \"invalid built-in macro \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cppmacro.c:221\n+#: macro.c:221\n msgid \"could not determine date and time\"\n msgstr \"\"\n \n-#: cppmacro.c:393\n+#: macro.c:400\n msgid \"invalid string literal, ignoring final '\\\\'\"\n msgstr \"\"\n \n-#: cppmacro.c:476\n+#: macro.c:483\n #, c-format\n msgid \"pasting \\\"%s\\\" and \\\"%s\\\" does not give a valid preprocessing token\"\n msgstr \"\"\n \n-#: cppmacro.c:514\n+#: macro.c:521\n msgid \"ISO C99 requires rest arguments to be used\"\n msgstr \"\"\n \n-#: cppmacro.c:519\n+#: macro.c:526\n #, c-format\n msgid \"macro \\\"%s\\\" requires %u arguments, but only %u given\"\n msgstr \"\"\n \n-#: cppmacro.c:524\n+#: macro.c:531\n #, c-format\n msgid \"macro \\\"%s\\\" passed %u arguments, but takes just %u\"\n msgstr \"\"\n \n-#: cppmacro.c:635\n+#: macro.c:642 traditional.c:675\n #, c-format\n msgid \"unterminated argument list invoking macro \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cppmacro.c:738\n+#: macro.c:745\n #, c-format\n msgid \"function-like macro \\\"%s\\\" must be used with arguments in traditional C\"\n msgstr \"\"\n \n-#: cppmacro.c:1241\n+#: macro.c:1258\n #, c-format\n msgid \"duplicate macro parameter \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cppmacro.c:1286\n+#: macro.c:1303\n #, c-format\n msgid \"\\\"%s\\\" may not appear in macro parameter list\"\n msgstr \"\"\n \n-#: cppmacro.c:1294\n+#: macro.c:1311\n msgid \"macro parameters must be comma-separated\"\n msgstr \"\"\n \n-#: cppmacro.c:1311\n+#: macro.c:1328\n msgid \"parameter name missing\"\n msgstr \"\"\n \n-#: cppmacro.c:1326\n+#: macro.c:1345\n msgid \"anonymous variadic macros were introduced in C99\"\n msgstr \"\"\n \n-#: cppmacro.c:1330\n+#: macro.c:1350\n msgid \"ISO C does not permit named variadic macros\"\n msgstr \"\"\n \n-#: cppmacro.c:1339\n+#: macro.c:1359\n msgid \"missing ')' in macro parameter list\"\n msgstr \"\"\n \n-#: cppmacro.c:1402\n+#: macro.c:1430\n msgid \"ISO C requires whitespace after the macro name\"\n msgstr \"\"\n \n-#: cppmacro.c:1430\n+#: macro.c:1458\n msgid \"'#' is not followed by a macro parameter\"\n msgstr \"\"\n \n-#: cppmacro.c:1449\n+#: macro.c:1477\n msgid \"'##' cannot appear at either end of a macro expansion\"\n msgstr \"\"\n \n-#: cppmacro.c:1588\n+#: macro.c:1573\n+#, c-format\n+msgid \"\\\"%s\\\" redefined\"\n+msgstr \"\"\n+\n+#: macro.c:1578\n+msgid \"this is the location of the previous definition\"\n+msgstr \"\"\n+\n+#: macro.c:1628\n #, c-format\n msgid \"macro argument \\\"%s\\\" would be stringified in traditional C\"\n msgstr \"\"\n \n-#: cppmacro.c:1611\n+#: macro.c:1651\n #, c-format\n msgid \"invalid hash type %d in cpp_macro_definition\"\n msgstr \"\"\n \n-#: cpppch.c:84 cpppch.c:332 cpppch.c:356 cpppch.c:365 cpppch.c:371\n+#: pch.c:83 pch.c:331\n+#: pch.c:353 pch.c:359\n msgid \"while writing precompiled header\"\n msgstr \"\"\n \n-#: cpppch.c:469\n+#: pch.c:466\n #, c-format\n msgid \"%s: not used because `%.*s' not defined\"\n msgstr \"\"\n \n-#: cpppch.c:481\n+#: pch.c:478\n #, c-format\n msgid \"%s: not used because `%.*s' defined as `%s' not `%.*s'\"\n msgstr \"\"\n \n-#: cpppch.c:522\n+#: pch.c:519\n #, c-format\n msgid \"%s: not used because `%s' is defined\"\n msgstr \"\"\n \n-#: cpppch.c:535 cpppch.c:724\n+#: pch.c:532 pch.c:695\n msgid \"while reading precompiled header\"\n msgstr \"\"\n \n-#: cppspec.c:106\n-#, c-format\n-msgid \"\\\"%s\\\" is not a valid option to the preprocessor\"\n-msgstr \"\"\n-\n-#: cppspec.c:128\n-msgid \"too many input files\"\n-msgstr \"\"\n-\n-#: cpptrad.c:744\n+#: traditional.c:745\n #, c-format\n msgid \"detected recursion whilst expanding macro \\\"%s\\\"\"\n msgstr \"\"\n \n-#: cpptrad.c:911\n+#: traditional.c:912\n msgid \"syntax error in macro parameter list\"\n msgstr \"\"\n-\n-#: line-map.c:218\n-#, c-format\n-msgid \"In file included from %s:%u\"\n-msgstr \"\"\n-\n-#. Translators note: this message is used in conjunction\n-#. with \"In file included from %s:%ld\" and some other\n-#. tricks.  We want something like this:\n-#.\n-#. | In file included from sys/select.h:123,\n-#. |                  from sys/types.h:234,\n-#. |                  from userfile.c:31:\n-#. | bits/select.h:45: <error message here>\n-#.\n-#. with all the \"from\"s lined up.\n-#. The trailing comma is at the beginning of this message,\n-#. and the trailing colon is not translated.\n-#: line-map.c:236\n-#, c-format\n-msgid \"\"\n-\",\\n\"\n-\"                 from %s:%u\"\n-msgstr \"\"\n-"}]}