{"sha": "95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTViMTQ3ZmU0YTUzYTc1NDMxN2RkNmY3YjQ2YTk4NWUxYmJhN2NjNQ==", "commit": {"author": {"name": "Simon Marshall", "email": "simon.marshall@misys.com", "date": "2004-05-13T16:29:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-05-13T16:29:39Z"}, "message": "re PR libstdc++/15090 (-fno-for-scope vs. libstdc++)\n\n\n2004-05-13  Simon Marshall <simon.marshall@misys.com>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/15090\n\t* include/bits/locale_facets.h: Fix for -fno-for-scope.\n\t* include/debug/safe_sequence.h: Same.\n\t* include/debug/safe_iterator.tcc: Same.\n\t* src/debug.cc: Same.\n\t* src/locale.cc: Same.\n\t* src/locale_init.cc: Same.\n\t* src/localename.cc: Same.\n\t* config/locale/gnu/ctype_members.cc: Same.\n\t* config/locale/gnu/numeric_members.cc: Same.\n\t* testsuite/testsuite_abi.cc: Same.\n\t* testsuite/testsuite_hooks.cc: Same.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r81795", "tree": {"sha": "1b8cc420a4d8c3ba4a0c3af3ee293ad16320c07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b8cc420a4d8c3ba4a0c3af3ee293ad16320c07b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/comments", "author": null, "committer": null, "parents": [{"sha": "d7f30833549aa0378f41f8cdb132cff5826847fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f30833549aa0378f41f8cdb132cff5826847fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f30833549aa0378f41f8cdb132cff5826847fe"}], "stats": {"total": 163, "additions": 92, "deletions": 71}, "files": [{"sha": "34b79b6dedb252a6391c5d5448842a29e2e1b23a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -1,3 +1,19 @@\n+2004-05-13  Simon Marshall <simon.marshall@misys.com>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/15090\n+\t* include/bits/locale_facets.h: Fix for -fno-for-scope.\n+\t* include/debug/safe_sequence.h: Same.\n+\t* include/debug/safe_iterator.tcc: Same.\n+\t* src/debug.cc: Same.\n+\t* src/locale.cc: Same.\n+\t* src/locale_init.cc: Same.\n+\t* src/localename.cc: Same.\n+\t* config/locale/gnu/ctype_members.cc: Same.\n+\t* config/locale/gnu/numeric_members.cc: Same.\n+\t* testsuite/testsuite_abi.cc: Same.\n+\t* testsuite/testsuite_hooks.cc: Same.\n+\t\n 2004-05-13  Jonathan Wakely  <redi@gcc.gnu.org>\n \t\n \t* docs/html/abi.html: Document effect of -fabi-version on value"}, {"sha": "7c53c15831db618cc3e25030ccb356cdbcb7ec58", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -272,14 +272,14 @@ namespace std\n       _M_narrow_ok = true;\n     else\n       _M_narrow_ok = false;\n-    for (size_t __i = 0;\n-\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n-      _M_widen[__i] = btowc(__i);\n+    for (size_t __j = 0;\n+\t __j < sizeof(_M_widen) / sizeof(wint_t); ++__j)\n+      _M_widen[__j] = btowc(__j);\n \n-    for (size_t __i = 0; __i <= 11; ++__i)\n+    for (size_t __k = 0; __k <= 11; ++__k)\n       { \n-\t_M_bit[__i] = static_cast<mask>(_ISbit(__i));\n-\t_M_wmask[__i] = _M_convert_to_wmask(_M_bit[__i]);\n+\t_M_bit[__k] = static_cast<mask>(_ISbit(__k));\n+\t_M_wmask[__k] = _M_convert_to_wmask(_M_bit[__k]);\n       }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);"}, {"sha": "34fadf456765825ead87b9ae8cf1a79d691c012a", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -58,14 +58,16 @@ namespace std\n \t  for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n \t    _M_data->_M_atoms_out[__i] = __num_base::_S_atoms_out[__i];\n \n-\t  for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n-\t    _M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n+\t  for (size_t __j = 0; __j < __num_base::_S_iend; ++__j)\n+\t    _M_data->_M_atoms_in[__j] = __num_base::_S_atoms_in[__j];\n \t}\n       else\n \t{\n \t  // Named locale.\n-\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(DECIMAL_POINT, __cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSANDS_SEP, __cloc));\n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(DECIMAL_POINT, \n+\t\t\t\t\t\t\t__cloc));\n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSANDS_SEP, \n+\t\t\t\t\t\t\t__cloc));\n \n \t  // Check for NULL, which implies no grouping.\n \t  if (_M_data->_M_thousands_sep == '\\0')\n@@ -111,9 +113,9 @@ namespace std\n \t    _M_data->_M_atoms_out[__i] =\n \t      static_cast<wchar_t>(__num_base::_S_atoms_out[__i]);\n \n-\t  for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n-\t    _M_data->_M_atoms_in[__i] =\n-\t      static_cast<wchar_t>(__num_base::_S_atoms_in[__i]);\n+\t  for (size_t __j = 0; __j < __num_base::_S_iend; ++__j)\n+\t    _M_data->_M_atoms_in[__j] =\n+\t      static_cast<wchar_t>(__num_base::_S_atoms_in[__j]);\n \t}\n       else\n \t{"}, {"sha": "c1d430db9844b712bb9c7d0194bb4a52add1b576", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -1161,8 +1161,8 @@ namespace std\n \n \t_M_widen_ok = 1;\n \t// Set _M_widen_ok to 2 if memcpy can't be used.\n-\tfor (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n-\t  if (__tmp[__i] != _M_widen[__i])\n+\tfor (size_t __j = 0; __j < sizeof(_M_widen); ++__j)\n+\t  if (__tmp[__j] != _M_widen[__j])\n \t    {\n \t      _M_widen_ok = 2;\n \t      break;\n@@ -1182,11 +1182,11 @@ namespace std\n \t// Check if any default values were created.  Do this by\n \t// renarrowing with a different default value and comparing.\n \tbool __consecutive = true;\n-\tfor (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n-\t  if (!_M_narrow[__i])\n+\tfor (size_t __j = 0; __j < sizeof(_M_narrow); ++__j)\n+\t  if (!_M_narrow[__j])\n \t    {\n \t      char __c;\n-\t      do_narrow(__tmp + __i, __tmp + __i + 1, 1, &__c);\n+\t      do_narrow(__tmp + __j, __tmp + __j + 1, 1, &__c);\n \t      if (__c == 1)\n \t\t{\n \t\t  __consecutive = false;"}, {"sha": "cede969d168dc63b39aa827e802a78f8277f80c3", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -1,6 +1,6 @@\n // Debugging iterator implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -123,11 +123,11 @@ namespace __gnu_debug\n \t      if (this->base() == __victim->base())\n \t\t__victim->_M_version = 0;\n \t    }\n-\t  for (_Safe_iterator_base* iter = _M_sequence->_M_const_iterators;\n-\t       iter; /* increment in loop */)\n+\t  for (_Safe_iterator_base* iter2 = _M_sequence->_M_const_iterators;\n+\t       iter2; /* increment in loop */)\n \t    {\n-\t      const_iterator* __victim = static_cast<const_iterator*>(iter);\n-\t      iter = iter->_M_next;\n+\t      const_iterator* __victim = static_cast<const_iterator*>(iter2);\n+\t      iter2 = iter2->_M_next;\n \t      if (this->base() == __victim->base())\n \t\t__victim->_M_version = 0;\n \t    }"}, {"sha": "f050530a997cbb1f7011ea20e7c4db265e4c27cc", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence implementation  -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -133,10 +133,10 @@ namespace __gnu_debug\n           }\n         }\n \n-        for (_Safe_iterator_base* __iter = _M_const_iterators; __iter; )\n+        for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n         {\n-          const_iterator* __victim = static_cast<const_iterator*>(__iter);\n-          __iter = __iter->_M_next;\n+          const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n+          __iter2 = __iter2->_M_next;\n           if (!__victim->_M_singular())\n           {\n \t    if (__pred(__victim->base()))\n@@ -166,10 +166,11 @@ namespace __gnu_debug\n \t    __victim->_M_attach(static_cast<_Sequence*>(this));\n         }\n \n-        for (_Safe_iterator_base* __iter = __from->_M_const_iterators; __iter;)\n+        for (_Safe_iterator_base* __iter2 = __from->_M_const_iterators; \n+\t     __iter2;)\n         {\n-          const_iterator* __victim = static_cast<const_iterator*>(__iter);\n-          __iter = __iter->_M_next;\n+          const_iterator* __victim = static_cast<const_iterator*>(__iter2);\n+          __iter2 = __iter2->_M_next;\n           if (!__victim->_M_singular() && __victim->base() == __x.base())\n \t    __victim->_M_attach(static_cast<_Sequence*>(this));\n         }"}, {"sha": "05ebc2ffa7b914dad4a6e10e8872c6bb766cb518", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -114,10 +114,10 @@ namespace __gnu_debug\n \t__old->_M_attach(0, false);\n       }\n     \n-    for (_Safe_iterator_base* __iter = _M_const_iterators; __iter; )\n+    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n       {\n-\t_Safe_iterator_base* __old = __iter;\n-\t__iter = __iter->_M_next;\n+\t_Safe_iterator_base* __old = __iter2;\n+\t__iter2 = __iter2->_M_next;\n \t__old->_M_attach(0, true);\n       }\n   }\n@@ -134,10 +134,10 @@ namespace __gnu_debug\n \t  __old->_M_attach(0, false);\n       }\n \n-    for (_Safe_iterator_base* __iter = _M_const_iterators; __iter; )\n+    for (_Safe_iterator_base* __iter2 = _M_const_iterators; __iter2; )\n       {\n-\t_Safe_iterator_base* __old = __iter;\n-\t__iter = __iter->_M_next;\n+\t_Safe_iterator_base* __old = __iter2;\n+\t__iter2 = __iter2->_M_next;\n \tif (__old->_M_singular())\n \t  __old->_M_attach(0, true);\n       }"}, {"sha": "d28d39aed7676889021b0b117e2775a6913cb2b7", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -241,23 +241,23 @@ namespace std\n \t      _M_facets[__i]->_M_add_reference();\n \t  }\n \t_M_caches = new const facet*[_M_facets_size];\n-\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\tfor (size_t __j = 0; __j < _M_facets_size; ++__j)\n \t  {\n-\t    _M_caches[__i] = __imp._M_caches[__i];\n-\t    if (_M_caches[__i])\n-\t      _M_caches[__i]->_M_add_reference(); \t\n+\t    _M_caches[__j] = __imp._M_caches[__j];\n+\t    if (_M_caches[__j])\n+\t      _M_caches[__j]->_M_add_reference(); \t\n \t  }\n \t_M_names = new char*[_S_categories_size];\n-\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n-\t  _M_names[__i] = 0;\n+\tfor (size_t __k = 0; __k < _S_categories_size; ++__k)\n+\t  _M_names[__k] = 0;\n \n \t// Name the categories.\n-\tfor (size_t __i = 0; (__i < _S_categories_size\n-\t\t\t      && __imp._M_names[__i]); ++__i)\n+\tfor (size_t __l = 0; (__l < _S_categories_size\n+\t\t\t      && __imp._M_names[__l]); ++__l)\n \t  {\n-\t    const size_t __len = std::strlen(__imp._M_names[__i]) + 1;\n-\t    _M_names[__i] = new char[__len];\n-\t    std::memcpy(_M_names[__i], __imp._M_names[__i], __len);\n+\t    const size_t __len = std::strlen(__imp._M_names[__l]) + 1;\n+\t    _M_names[__l] = new char[__len];\n+\t    std::memcpy(_M_names[__l], __imp._M_names[__l], __len);\n \t  }\n       }\n     catch(...)\n@@ -269,7 +269,8 @@ namespace std\n \n   void\n   locale::_Impl::\n-  _M_replace_category(const _Impl* __imp, const locale::id* const* __idpp)\n+  _M_replace_category(const _Impl* __imp, \n+\t\t      const locale::id* const* __idpp)\n   {\n     for (; *__idpp; ++__idpp)\n       _M_replace_facet(__imp, *__idpp);\n@@ -280,7 +281,8 @@ namespace std\n   _M_replace_facet(const _Impl* __imp, const locale::id* __idp)\n   {\n     size_t __index = __idp->_M_id();\n-    if ((__index > (__imp->_M_facets_size - 1)) || !__imp->_M_facets[__index])\n+    if ((__index > (__imp->_M_facets_size - 1)) \n+\t|| !__imp->_M_facets[__index])\n       __throw_runtime_error(__N(\"locale::_Impl::_M_replace_facet\"));\n     _M_install_facet(__idp, __imp->_M_facets[__index]); \n   }\n@@ -304,8 +306,8 @@ namespace std\n \t    __newf = new const facet*[__new_size]; \n \t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n \t      __newf[__i] = _M_facets[__i];\n-\t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)\n-\t      __newf[__i2] = 0;\n+\t    for (size_t __l = _M_facets_size; __l < __new_size; ++__l)\n+\t      __newf[__l] = 0;\n \n \t    // New cache array.\n \t    const facet** __oldc = _M_caches;\n@@ -319,10 +321,10 @@ namespace std\n \t\tdelete [] __newf;\n \t\t__throw_exception_again;\n \t      }\n-\t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t      __newc[__i] = _M_caches[__i];\n-\t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)\n-\t      __newc[__i2] = 0;\n+\t    for (size_t __j = 0; __j < _M_facets_size; ++__j)\n+\t      __newc[__j] = _M_caches[__j];\n+\t    for (size_t __k = _M_facets_size; __k < __new_size; ++__k)\n+\t      __newc[__k] = 0;\n \n \t    _M_facets_size = __new_size;\n \t    _M_facets = __newf;"}, {"sha": "175ece6500d63b21a4b83593b5166b6282c332c6", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -260,8 +260,8 @@ namespace std\n     _M_names = new (&name_vec) char*[_S_categories_size];\n     _M_names[0] = new (&name_c[0]) char[2];\n     std::memcpy(_M_names[0], locale::facet::_S_get_c_name(), 2);\n-    for (size_t __i = 1; __i < _S_categories_size; ++__i)\n-      _M_names[__i] = 0;\n+    for (size_t __j = 1; __j < _S_categories_size; ++__j)\n+      _M_names[__j] = 0;\n \n     // This is needed as presently the C++ version of \"C\" locales\n     // != data in the underlying locale model for __timepunct,"}, {"sha": "1600b2cc55b5839793195943edfda36ada72dedb", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -193,11 +193,11 @@ namespace std\n \tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n \t  _M_facets[__i] = 0;\n \t_M_caches = new const facet*[_M_facets_size];\n-\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t  _M_caches[__i] = 0;\n+\tfor (size_t __j = 0; __j < _M_facets_size; ++__j)\n+\t  _M_caches[__j] = 0;\n \t_M_names = new char*[_S_categories_size];\n-\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n-\t  _M_names[__i] = 0;\n+\tfor (size_t __k = 0; __k < _S_categories_size; ++__k)\n+\t  _M_names[__k] = 0;\n \n \t// Name the categories.\n \tconst size_t __len = std::strlen(__s);"}, {"sha": "45d47777ddaafc3d39bdabaa0ffd832eee70c9bc", "filename": "libstdc++-v3/testsuite/testsuite_abi.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -328,25 +328,25 @@ compare_symbols(const char* baseline_file, const char* test_file,\n   // Check missing names for compatibility.\n   typedef pair<symbol, symbol> symbol_pair;\n   vector<symbol_pair> incompatible;\n-  for (size_t i = 0; i < missing_names.size(); ++i)\n+  for (size_t j = 0; j < missing_names.size(); ++j)\n     {\n-      symbol base = baseline_objects[missing_names[i]];\n+      symbol base = baseline_objects[missing_names[j]];\n       incompatible.push_back(symbol_pair(base, base));\n     }\n \n   // Check shared names for compatibility.\n-  for (size_t i = 0; i < shared_names.size(); ++i)\n+  for (size_t k = 0; k < shared_names.size(); ++k)\n     {\n-      symbol base = baseline_objects[shared_names[i]];\n-      symbol test = test_objects[shared_names[i]];\n+      symbol base = baseline_objects[shared_names[k]];\n+      symbol test = test_objects[shared_names[k]];\n       if (!check_compatible(base, test))\n \tincompatible.push_back(symbol_pair(base, test));\n     }\n \n   // Check added names for compatibility.\n-  for (size_t i = 0; i < added_names.size(); ++i)\n+  for (size_t l = 0; l < added_names.size(); ++l)\n     {\n-      symbol test = test_objects[added_names[i]];\n+      symbol test = test_objects[added_names[l]];\n       if (!check_version(test, true))\n \tincompatible.push_back(symbol_pair(test, test));\n     }"}, {"sha": "e12a9b41f594c235de03d5d63b5a293a15a2a779", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b147fe4a53a754317dd6f7b46a985e1bba7cc5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=95b147fe4a53a754317dd6f7b46a985e1bba7cc5", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Utility subroutines for the C++ library testsuite. \n //\n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -373,8 +373,8 @@ namespace std\n \t}\n       _M_data->_M_atoms_out[__num_base::_S_oend] = pod_type();\n       \n-      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n-\t_M_data->_M_atoms_in[i].value = value_type(__num_base::_S_atoms_in[i]);\n+      for (size_t j = 0; j < __num_base::_S_iend; ++j)\n+\t_M_data->_M_atoms_in[j].value = value_type(__num_base::_S_atoms_in[j]);\n       _M_data->_M_atoms_in[__num_base::_S_iend] = pod_type();\n \n       // \"true\""}]}