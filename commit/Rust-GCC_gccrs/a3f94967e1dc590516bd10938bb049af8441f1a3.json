{"sha": "a3f94967e1dc590516bd10938bb049af8441f1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmOTQ5NjdlMWRjNTkwNTE2YmQxMDkzOGJiMDQ5YWY4NDQxZjFhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-19T10:12:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-19T10:12:34Z"}, "message": "re PR sanitizer/65400 (tsan mis-compiles inlineable C functions)\n\n\tPR sanitizer/65400\n\t* tsan.c (instrument_gimple): Clear tail call flag on\n\tcalls.\n\n\t* c-c++-common/tsan/pr65400-3.c: New test.\n\nFrom-SVN: r221512", "tree": {"sha": "0dea73fba72b7c5ab55b5fcbd0390f21580d0ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dea73fba72b7c5ab55b5fcbd0390f21580d0ee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f94967e1dc590516bd10938bb049af8441f1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f94967e1dc590516bd10938bb049af8441f1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f94967e1dc590516bd10938bb049af8441f1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f94967e1dc590516bd10938bb049af8441f1a3/comments", "author": null, "committer": null, "parents": [{"sha": "9308995b0acf2f8bbfdbc63d3f950494388f6fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9308995b0acf2f8bbfdbc63d3f950494388f6fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9308995b0acf2f8bbfdbc63d3f950494388f6fa8"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "467b445458b13eaf12eece8f7ebc1d175b4d99d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f94967e1dc590516bd10938bb049af8441f1a3", "patch": "@@ -1,3 +1,10 @@\n+2015-03-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/65400\n+\t* tsan.c (instrument_gimple): Clear tail call flag on\n+\tcalls.\n+\n 2015-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/65400"}, {"sha": "92ad9e1c98cb53f6c8efb93540a9ee72651d83c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f94967e1dc590516bd10938bb049af8441f1a3", "patch": "@@ -1,3 +1,8 @@\n+2015-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/65400\n+\t* c-c++-common/tsan/pr65400-3.c: New test.\n+\n 2015-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59686"}, {"sha": "9483bb6c74610c46cc273276ad28dd46188c0e4a", "filename": "gcc/testsuite/c-c++-common/tsan/pr65400-3.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr65400-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr65400-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fpr65400-3.c?ref=a3f94967e1dc590516bd10938bb049af8441f1a3", "patch": "@@ -0,0 +1,75 @@\n+/* PR sanitizer/65400 */\n+/* { dg-shouldfail \"tsan\" } */\n+/* { dg-additional-options \"-fno-omit-frame-pointer -ldl\" } */\n+\n+#include <pthread.h>\n+#include \"tsan_barrier.h\"\n+\n+static pthread_barrier_t barrier;\n+int v;\n+\n+int\n+fn1 (int a, int b, int c)\n+{\n+  int r = (a ^ b) % c;\n+  r = r * a * b + c;\n+  r = (r ^ b) % c;\n+  return r;\n+}\n+\n+int\n+fn2 (int a, int b, int c)\n+{\n+  int r = (a ^ b) % c;\n+  r = r * a * b + c;\n+  r = (r ^ b) % c;\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  barrier_wait (&barrier);\n+  barrier_wait (&barrier);\n+  v++;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  int (*fna) (int, int, int);\n+  int (*fnb) (int, int, int);\n+  int i;\n+  asm (\"\" : \"=g\" (fna) : \"0\" (fn1));\n+  asm (\"\" : \"=g\" (fnb) : \"0\" (fn2));\n+  for (i = 0; i < 128; i++)\n+    {\n+      fna (0, 0, i + 1);\n+      fnb (0, 0, i + 1);\n+    }\n+  foo ();\n+}\n+\n+__attribute__((noinline, noclone)) void *\n+tf (void *arg)\n+{\n+  (void) arg;\n+  bar ();\n+  return NULL;\n+}\n+\n+int\n+main ()\n+{\n+  pthread_t th;\n+  barrier_init (&barrier, 2);\n+  if (pthread_create (&th, NULL, tf, NULL))\n+    return 0;\n+  barrier_wait (&barrier);\n+  v++;\n+  barrier_wait (&barrier);\n+  pthread_join (th, NULL);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*#2 _?tf\" } */"}, {"sha": "ebafbb03cbdff9fd44aed53c7e68a9835b43d1a8", "filename": "gcc/tsan.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94967e1dc590516bd10938bb049af8441f1a3/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=a3f94967e1dc590516bd10938bb049af8441f1a3", "patch": "@@ -680,6 +680,10 @@ instrument_gimple (gimple_stmt_iterator *gsi)\n       && (gimple_call_fndecl (stmt)\n \t  != builtin_decl_implicit (BUILT_IN_TSAN_INIT)))\n     {\n+      /* All functions with function call will have exit instrumented,\n+\t therefore no function calls other than __tsan_func_exit\n+\t shall appear in the functions.  */\n+      gimple_call_set_tail (as_a <gcall *> (stmt), false);\n       if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n \tinstrument_builtin_call (gsi);\n       return true;"}]}