{"sha": "12342f90557915d42293a1cec341f4f8f0c426bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzNDJmOTA1NTc5MTVkNDIyOTNhMWNlYzM0MWY0ZjhmMGM0MjZiYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-30T07:08:14Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-30T07:08:14Z"}, "message": "(expand_expr): In NOP_EXPR case, truncate and reextend integer constants.\n\nFrom-SVN: r2987", "tree": {"sha": "0590b3e325e1b49c759292940000c7d9b5945f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0590b3e325e1b49c759292940000c7d9b5945f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12342f90557915d42293a1cec341f4f8f0c426bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12342f90557915d42293a1cec341f4f8f0c426bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12342f90557915d42293a1cec341f4f8f0c426bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12342f90557915d42293a1cec341f4f8f0c426bb/comments", "author": null, "committer": null, "parents": [{"sha": "fb92d909c6a96e09624d8032b81060c5be27e18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb92d909c6a96e09624d8032b81060c5be27e18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb92d909c6a96e09624d8032b81060c5be27e18c"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "3e3e6ce62b130c8394e96df0642dcb8faa550b1a", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12342f90557915d42293a1cec341f4f8f0c426bb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12342f90557915d42293a1cec341f4f8f0c426bb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=12342f90557915d42293a1cec341f4f8f0c426bb", "patch": "@@ -4134,7 +4134,43 @@ expand_expr (exp, target, tmode, modifier)\n \t  return target;\n \t}\n       op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n-      if (GET_MODE (op0) == mode || GET_MODE (op0) == VOIDmode)\n+      if (GET_MODE (op0) == mode)\n+\treturn op0;\n+      /* If arg is a constant integer being extended from a narrower mode,\n+\t we must really truncate to get the extended bits right.  Otherwise\n+\t (unsigned long) (unsigned char) (\"\\377\"[0])\n+\t would come out as ffffffff.  */\n+      if (GET_MODE (op0) == VOIDmode\n+\t  && (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+\t      < GET_MODE_BITSIZE (mode)))\n+\t{\n+\t  /* MODE must be narrower than HOST_BITS_PER_INT.  */\n+\t  int width = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))));\n+\n+\t  if (width < HOST_BITS_PER_WIDE_INT)\n+\t    {\n+\t      HOST_WIDE_INT val = (GET_CODE (op0) == CONST_INT ? INTVAL (op0)\n+\t\t\t\t   : CONST_DOUBLE_LOW (op0));\n+\t      if (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t\t  || !(val & ((HOST_WIDE_INT) 1 << (width - 1))))\n+\t\tval &= ((HOST_WIDE_INT) 1 << width) - 1;\n+\t      else\n+\t\tval |= ~(((HOST_WIDE_INT) 1 << width) - 1);\n+\n+\t      op0 = GEN_INT (val);\n+\t    }\n+\t  else\n+\t    {\n+\t      op0 = (simplify_unary_operation\n+\t\t     ((TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t\t       ? ZERO_EXTEND : SIGN_EXTEND),\n+\t\t      mode, op0,\n+\t\t      TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)))));\n+\t      if (op0 == 0)\n+\t\tabort ();\n+\t    }\n+\t}\n+      if (GET_MODE (op0) == VOIDmode)\n \treturn op0;\n       if (modifier == EXPAND_INITIALIZER)\n \treturn gen_rtx (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);"}]}