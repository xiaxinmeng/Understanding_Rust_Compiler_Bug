{"sha": "90285d8d96e6a2c348691f35fe37e936f64eeb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyODVkOGQ5NmU2YTJjMzQ4NjkxZjM1ZmUzN2U5MzZmNjRlZWIwMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-05-14T18:08:20Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-05-14T18:08:20Z"}, "message": "vax.c: (print_operand_address) Use gcc_unreachable() and gcc_assert().\n\n\t* config/vax/vax.c: (print_operand_address) Use gcc_unreachable() and\n\tgcc_assert().\n\t(rev_cond_name) Likewise.\n\t(vax_float_literal) Likewise.\n\t* config/vax/vax.md: Likewise.\n\nCo-Authored-By: Jan-Benedict Glaw <jbglaw@lug-owl.de>\n\nFrom-SVN: r99703", "tree": {"sha": "8bad8112a886f52c636ec98bdf561b07b231fc5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bad8112a886f52c636ec98bdf561b07b231fc5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90285d8d96e6a2c348691f35fe37e936f64eeb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90285d8d96e6a2c348691f35fe37e936f64eeb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90285d8d96e6a2c348691f35fe37e936f64eeb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90285d8d96e6a2c348691f35fe37e936f64eeb01/comments", "author": null, "committer": null, "parents": [{"sha": "0f8def688dde484c63a3d5271d10b2c0bfbd2c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8def688dde484c63a3d5271d10b2c0bfbd2c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8def688dde484c63a3d5271d10b2c0bfbd2c0e"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "84e179687f27b96f9f0f482ea5eae2f895f2dc4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90285d8d96e6a2c348691f35fe37e936f64eeb01", "patch": "@@ -1,3 +1,12 @@\n+2005-05-14  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/vax/vax.c: (print_operand_address) Use gcc_unreachable() and\n+\tgcc_assert().\n+\t(rev_cond_name) Likewise.\n+\t(vax_float_literal) Likewise.\n+\t* config/vax/vax.md: Likewise.\n+\n 2005-05-14  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/vax/vax.md: define_constant VAXens AP, FP, SP and PC"}, {"sha": "75892f2b48d753abc78fa264d1ff08000dacf797", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=90285d8d96e6a2c348691f35fe37e936f64eeb01", "patch": "@@ -269,7 +269,7 @@ print_operand_address (FILE * file, rtx addr)\n \t  addr = XEXP (addr, 1);\n \t}\n       else\n-\tabort ();\n+\tgcc_unreachable ();\n \n       if (GET_CODE (addr) == REG)\n \t{\n@@ -280,19 +280,21 @@ print_operand_address (FILE * file, rtx addr)\n \t}\n       else if (GET_CODE (addr) == MULT)\n \tireg = addr;\n-      else if (GET_CODE (addr) == PLUS)\n+      else\n \t{\n+\t  gcc_assert (GET_CODE (addr) == PLUS);\n \t  if (CONSTANT_ADDRESS_P (XEXP (addr, 0))\n \t      || GET_CODE (XEXP (addr, 0)) == MEM)\n \t    {\n \t      if (offset)\n \t\t{\n \t\t  if (GET_CODE (offset) == CONST_INT)\n \t\t    offset = plus_constant (XEXP (addr, 0), INTVAL (offset));\n-\t\t  else if (GET_CODE (XEXP (addr, 0)) == CONST_INT)\n-\t\t    offset = plus_constant (offset, INTVAL (XEXP (addr, 0)));\n \t\t  else\n-\t\t    abort ();\n+\t\t    {\n+\t\t      gcc_assert (GET_CODE (XEXP (addr, 0)) == CONST_INT);\n+\t\t      offset = plus_constant (offset, INTVAL (XEXP (addr, 0)));\n+\t\t    }\n \t\t}\n \t      offset = XEXP (addr, 0);\n \t    }\n@@ -303,14 +305,12 @@ print_operand_address (FILE * file, rtx addr)\n \t      else\n \t\treg1 = XEXP (addr, 0);\n \t    }\n-\t  else if (GET_CODE (XEXP (addr, 0)) == MULT)\n+\t  else\n \t    {\n-\t      if (ireg)\n-\t\tabort ();\n+\t      gcc_assert (GET_CODE (XEXP (addr, 0)) == MULT);\n+\t      gcc_assert (!ireg);\n \t      ireg = XEXP (addr, 0);\n \t    }\n-\t  else\n-\t    abort ();\n \n \t  if (CONSTANT_ADDRESS_P (XEXP (addr, 1))\n \t      || GET_CODE (XEXP (addr, 1)) == MEM)\n@@ -319,10 +319,11 @@ print_operand_address (FILE * file, rtx addr)\n \t\t{\n \t\t  if (GET_CODE (offset) == CONST_INT)\n \t\t    offset = plus_constant (XEXP (addr, 1), INTVAL (offset));\n-\t\t  else if (GET_CODE (XEXP (addr, 1)) == CONST_INT)\n-\t\t    offset = plus_constant (offset, INTVAL (XEXP (addr, 1)));\n \t\t  else\n-\t\t    abort ();\n+\t\t    {\n+\t\t      gcc_assert (GET_CODE (XEXP (addr, 1)) == CONST_INT);\n+\t\t      offset = plus_constant (offset, INTVAL (XEXP (addr, 1)));\n+\t\t    }\n \t\t}\n \t      offset = XEXP (addr, 1);\n \t    }\n@@ -333,25 +334,20 @@ print_operand_address (FILE * file, rtx addr)\n \t      else\n \t\treg1 = XEXP (addr, 1);\n \t    }\n-\t  else if (GET_CODE (XEXP (addr, 1)) == MULT)\n+\t  else\n \t    {\n-\t      if (ireg)\n-\t\tabort ();\n+\t      gcc_assert (GET_CODE (XEXP (addr, 1)) == MULT);\n+\t      gcc_assert (!ireg);\n \t      ireg = XEXP (addr, 1);\n \t    }\n-\t  else\n-\t    abort ();\n \t}\n-      else\n-\tabort ();\n \n       /* If REG1 is nonzero, figure out if it is a base or index register.  */\n       if (reg1)\n \t{\n \t  if (breg != 0 || (offset && GET_CODE (offset) == MEM))\n \t    {\n-\t      if (ireg)\n-\t\tabort ();\n+\t      gcc_assert (!ireg);\n \t      ireg = reg1;\n \t    }\n \t  else\n@@ -368,8 +364,7 @@ print_operand_address (FILE * file, rtx addr)\n \t{\n \t  if (GET_CODE (ireg) == MULT)\n \t    ireg = XEXP (ireg, 0);\n-\t  if (GET_CODE (ireg) != REG)\n-\t    abort ();\n+\t  gcc_assert (GET_CODE (ireg) == REG);\n \t  fprintf (file, \"[%s]\", reg_names[REGNO (ireg)]);\n \t}\n       break;\n@@ -406,7 +401,7 @@ rev_cond_name (rtx op)\n       return \"lssu\";\n \n     default:\n-      abort ();\n+      gcc_unreachable ();\n     }\n }\n \n@@ -432,12 +427,13 @@ vax_float_literal(rtx c)\n   for (i = 0; i < 7; i++)\n     {\n       int x = 1 << i;\n+      bool ok;\n       REAL_VALUE_FROM_INT (s, x, 0, mode);\n \n       if (REAL_VALUES_EQUAL (r, s))\n \treturn 1;\n-      if (!exact_real_inverse (mode, &s))\n-\tabort ();\n+      ok = exact_real_inverse (mode, &s);\n+      gcc_assert (ok);\n       if (REAL_VALUES_EQUAL (r, s))\n \treturn 1;\n     }"}, {"sha": "6d447f79a6123472f15e80003f80b38ad1bc5752", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90285d8d96e6a2c348691f35fe37e936f64eeb01/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=90285d8d96e6a2c348691f35fe37e936f64eeb01", "patch": "@@ -1205,8 +1205,7 @@\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"\")))])]\n   \"\"\n {\n-  if (INTVAL (operands[3]) > 255 * 4 || INTVAL (operands[3]) % 4)\n-    abort ();\n+  gcc_assert (INTVAL (operands[3]) <= 255 * 4 && INTVAL (operands[3]) % 4 == 0);\n \n   /* Operand 1 is the number of bytes to be popped by DW_CFA_GNU_args_size\n      during EH unwinding.  We must include the argument count pushed by\n@@ -1234,8 +1233,7 @@\n \t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))])]\n   \"\"\n {\n-  if (INTVAL (operands[4]) > 255 * 4 || INTVAL (operands[4]) % 4)\n-    abort ();\n+  gcc_assert (INTVAL (operands[4]) <= 255 * 4 && INTVAL (operands[4]) % 4 == 0);\n \n   /* Operand 2 is the number of bytes to be popped by DW_CFA_GNU_args_size\n      during EH unwinding.  We must include the argument count pushed by"}]}