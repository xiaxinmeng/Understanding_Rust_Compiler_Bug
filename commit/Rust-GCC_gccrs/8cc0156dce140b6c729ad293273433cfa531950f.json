{"sha": "8cc0156dce140b6c729ad293273433cfa531950f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjMDE1NmRjZTE0MGI2YzcyOWFkMjkzMjczNDMzY2ZhNTMxOTUwZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-12T13:29:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-12T13:29:02Z"}, "message": "Add definitions for VMS; they differ from Unix.\n\nFrom-SVN: r13295", "tree": {"sha": "5a8f236fb7c56f12d2ed75fda7f7d43ce212c208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8f236fb7c56f12d2ed75fda7f7d43ce212c208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cc0156dce140b6c729ad293273433cfa531950f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc0156dce140b6c729ad293273433cfa531950f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc0156dce140b6c729ad293273433cfa531950f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc0156dce140b6c729ad293273433cfa531950f/comments", "author": null, "committer": null, "parents": [{"sha": "74ba6761da8bd5a95b8e01bde002656fa8e5b64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ba6761da8bd5a95b8e01bde002656fa8e5b64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ba6761da8bd5a95b8e01bde002656fa8e5b64c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "16f0acfff5e94b9d56a79e8cc5899c46ca406c0b", "filename": "gcc/ginclude/va-alpha.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc0156dce140b6c729ad293273433cfa531950f/gcc%2Fginclude%2Fva-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc0156dce140b6c729ad293273433cfa531950f/gcc%2Fginclude%2Fva-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-alpha.h?ref=8cc0156dce140b6c729ad293273433cfa531950f", "patch": "@@ -10,10 +10,19 @@\n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n \n+\n+/* In VMS, __gnuc_va_list is simply char *; on OSF, it's a structure.  */\n+\n+#ifdef VMS\n+typedef char *__gnuc_va_list;\n+#else\n+\n typedef struct {\n   char *__base;\t\t\t/* Pointer to first integer register. */\n   int __offset;\t\t\t/* Byte offset of args so far. */\n } __gnuc_va_list;\n+#endif\n+\n #endif /* not __GNUC_VA_LIST */\n \n /* If this is for internal libc use, don't define anything but\n@@ -29,17 +38,28 @@ typedef struct {\n /* varargs support */\n #define va_alist __builtin_va_alist\n #define va_dcl\t int __builtin_va_alist;...\n+#ifdef VMS\n+#define va_start(pvar) ((pvar) = __builtin_saveregs ())\n+#else\n #define va_start(pvar) ((pvar) = * (__gnuc_va_list *) __builtin_saveregs ())\n+#endif\n \n #else /* STDARG.H */\n \n /* ANSI alternative.  */\n \n /* Call __builtin_next_arg even though we aren't using its value, so that\n    we can verify that firstarg is correct.  */\n+\n+#ifdef VMS\n+#define va_start(pvar, firstarg)\t\t\t\t\\\n+  (__builtin_next_arg (firstarg),\t\t\t\t\\\n+   (pvar) = __builtin_saveregs ())\n+#else\n #define va_start(pvar, firstarg)\t\t\t\t\\\n   (__builtin_next_arg (firstarg),\t\t\t\t\\\n    (pvar) = *(__gnuc_va_list *) __builtin_saveregs ())\n+#endif\n \n #endif /* _STDARG_H */\n \n@@ -89,12 +109,20 @@ enum {\n   (((sizeof (__type) + __extension__ sizeof (long long) - 1)   \\\n     / __extension__ sizeof (long long)) * __extension__ sizeof (long long))\n \n+#ifdef VMS\n+#define va_arg(__va, __type)\t\t\t\t\t\t\\\n+(*(((__va) += __va_tsize (__type)),\t\t\t\t\t\\\n+   (__type *)(void *)((__va) - __va_tsize (__type))))\n+\n+#else\n+\n #define va_arg(__va, __type)\t\t\t\t\t\t\\\n (*(((__va).__offset += __va_tsize (__type)),\t\t\t\t\\\n    (__type *)(void *)((__va).__base + (__va).__offset\t\t\t\\\n \t      - (((__builtin_classify_type (* (__type *) 0)\t\t\\\n \t\t   == __real_type_class) && (__va).__offset <= (6 * 8))\t\\\n \t\t ? (6 * 8) + 8 : __va_tsize (__type)))))\n+#endif\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n "}]}