{"sha": "44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmOWE4ZTRiYmNlNzEyMWRmOGQyMWFhMDI4MzQ0ZDhiNGZmYzJjYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-01-06T20:31:16Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-01-06T20:31:16Z"}, "message": "hwint.h: If the current compiler has no 64-bit type at all, make HOST_WIDEST_INT 32 bits.\n\n\t* hwint.h: If the current compiler has no 64-bit type at all,\n\tmake HOST_WIDEST_INT 32 bits.\n\nFrom-SVN: r60951", "tree": {"sha": "6bdccfa5538281de288c8ad8e1e07594cbb9deca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bdccfa5538281de288c8ad8e1e07594cbb9deca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb/comments", "author": null, "committer": null, "parents": [{"sha": "2610198a4579d180e971fd449e256096fb53add5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2610198a4579d180e971fd449e256096fb53add5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2610198a4579d180e971fd449e256096fb53add5"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "b3263f3cd823719cd364a76f1af98a742cdb565f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "patch": "@@ -1,3 +1,8 @@\n+2003-01-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* hwint.h: If the current compiler has no 64-bit type at all,\n+\tmake HOST_WIDEST_INT 32 bits.\n+\n 2003-01-06  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.md (movdf_internal2): Fix constraints.\n@@ -17,7 +22,7 @@\n \n 2003-01-06 Herman A.J. ten Brugge <hermantenbrugge@home.nl>\n \n-        * config/c4x/c4x.h: Remove hwint.h include and HOST_WIDE_INT_PRINT_HEX\n+\t* config/c4x/c4x.h: Remove hwint.h include and HOST_WIDE_INT_PRINT_HEX\n \tredefinition.\n \n 2003-01-05  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -547,10 +552,10 @@ Wed Dec 25 20:30:53 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-12-23  Aldy Hernandez  <aldyh@redhat.com>\n \n-        PR/8763\n-        * config/rs6000/altivec.md (mulv4sf3): Rewrite to add -0.0 vector.\n-        (altivec_vspltisw_v4sf): Name pattern.\n-        (altivec_vslw_v4sf): New pattern.\n+\tPR/8763\n+\t* config/rs6000/altivec.md (mulv4sf3): Rewrite to add -0.0 vector.\n+\t(altivec_vspltisw_v4sf): Name pattern.\n+\t(altivec_vslw_v4sf): New pattern.\n \n 2002-12-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n@@ -714,38 +719,38 @@ Sun Dec 22 18:23:44 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-12-20  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n \n-        * config/ns32k/ns32k.md (movdi): Use \"l\" instead of \"f\" to match\n-        all registers capable of holding a double float.\n-        (*rcond): change name of \"reverse branch\" insns to\n-        something more meaningful.\n-        (*rbgt, *rblt, *rbge, *rble): Reverse branches to handle IEEE\n-        comparisons properly.\n-        (*ffs): Change operand 0 from write to read-modify-write.\n-        (*ffsssi2): Drop constraints from define_expand.\n+\t* config/ns32k/ns32k.md (movdi): Use \"l\" instead of \"f\" to match\n+\tall registers capable of holding a double float.\n+\t(*rcond): change name of \"reverse branch\" insns to\n+\tsomething more meaningful.\n+\t(*rbgt, *rblt, *rbge, *rble): Reverse branches to handle IEEE\n+\tcomparisons properly.\n+\t(*ffs): Change operand 0 from write to read-modify-write.\n+\t(*ffsssi2): Drop constraints from define_expand.\n \n-        * config/ns32k/ns32k.h (STORE_RATIO, STORE_BY_PIECES): Avoid using\n-        MOVE_RATIO as default for store operations.\n+\t* config/ns32k/ns32k.h (STORE_RATIO, STORE_BY_PIECES): Avoid using\n+\tMOVE_RATIO as default for store operations.\n \n-        * config/ns32k/ns32k.h (enum reg_class, REG_CLASS_NAMES): Add\n-        LONG_REGS class.\n-        (CANNOT_CHANGE_MODE_CLASS): Can't subreg LONG_REGS.\n-        (GO_IF_LEGITIMATE_ADDRESS): Remove spurious abort().\n-        * config/ns32k/ns32k.c (regclass_map): Add LONG_REGS class.\n+\t* config/ns32k/ns32k.h (enum reg_class, REG_CLASS_NAMES): Add\n+\tLONG_REGS class.\n+\t(CANNOT_CHANGE_MODE_CLASS): Can't subreg LONG_REGS.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Remove spurious abort().\n+\t* config/ns32k/ns32k.c (regclass_map): Add LONG_REGS class.\n \n-        * config/ns32k/STATUS: New File\n-        * config/ns32k/NOTES: New file.\n+\t* config/ns32k/STATUS: New File\n+\t* config/ns32k/NOTES: New file.\n \n 2002-12-20  Hartmut Penner  <hpenner@de.ibm.com>\n \n        \t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march=\n \toption for S/390 and zSeries.\n-        * config/s390/s390.c (s390_cpu, s390_cpu_string, s390_arch,\n-        s390_arch_string): New variables.\n-        (override_options): Checking for options and setting of\n+\t* config/s390/s390.c (s390_cpu, s390_cpu_string, s390_arch,\n+\ts390_arch_string): New variables.\n+\t(override_options): Checking for options and setting of\n \tappropriate target_flags, cpu and arch flags.\n-        * config/s390/s390.h: (processor_type): New enum.\n-        (TARGET_SWITCHES): New switches -mesa/zarch.\n-        * config/s390/s390.md: New attribute 'cpu'.\n+\t* config/s390/s390.h: (processor_type): New enum.\n+\t(TARGET_SWITCHES): New switches -mesa/zarch.\n+\t* config/s390/s390.md: New attribute 'cpu'.\n \n 2002-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n "}, {"sha": "f866e168c8bae006efedf6be1f5e4e6220c5ebc6", "filename": "gcc/hwint.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "patch": "@@ -88,10 +88,11 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%016llx\"\n #endif\n \n-/* Set HOST_WIDEST_INT.  Unlike HOST_WIDE_INT, this must always be\n-   at least 64 bits wide.  */\n+/* Set HOST_WIDEST_INT.  This is a 64-bit type unless the compiler\n+   in use has no 64-bit type at all; in that case it's 32 bits.  */\n \n-#if HOST_BITS_PER_WIDE_INT >= 64\n+#if HOST_BITS_PER_WIDE_INT >= 64 \\\n+    || (HOST_BITS_PER_LONGLONG < 64 && HOST_BITS_PER___INT64 < 64)\n # define HOST_WIDEST_INT\t\t      HOST_WIDE_INT\n # define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER_WIDE_INT\n # define HOST_WIDEST_INT_PRINT_DEC\t      HOST_WIDE_INT_PRINT_DEC\n@@ -110,7 +111,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #   define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER___INT64\n #   define HOST_WIDEST_INT\t\t      __int64\n #  else\n-    #error \"Unable to find a suitable type for HOST_WIDEST_INT\"\n+    #error \"This line should be impossible to reach\"\n #  endif\n # endif\n # define HOST_WIDEST_INT_PRINT_DEC\t      \"%lld\""}]}