{"sha": "044a73da40c548ed472948f3138ebf54d69afb09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ0YTczZGE0MGM1NDhlZDQ3Mjk0OGYzMTM4ZWJmNTRkNjlhZmIwOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-27T21:18:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-27T21:18:05Z"}, "message": "Reduce nesting of parentheses in conditionals generated by genattrtab\n\ngcc/ChangeLog:\n\n\t* genattrtab.c (write_test_expr): New parameter EMIT_PARENS\n\twhich defaults to true.  Emit an outer pair of parentheses only if\n\tEMIT_PARENS.  When continuing a chain of && or || (or & or |),\n\tdon't emit parentheses for the right-hand operand.\n\nFrom-SVN: r235536", "tree": {"sha": "3c79d3a816a038909c373f70215421eeb621be64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c79d3a816a038909c373f70215421eeb621be64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/044a73da40c548ed472948f3138ebf54d69afb09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044a73da40c548ed472948f3138ebf54d69afb09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044a73da40c548ed472948f3138ebf54d69afb09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044a73da40c548ed472948f3138ebf54d69afb09/comments", "author": null, "committer": null, "parents": [{"sha": "565f407037aaae41f9111a76c9df7348caf12fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565f407037aaae41f9111a76c9df7348caf12fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565f407037aaae41f9111a76c9df7348caf12fb9"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "225ade991ce454355908cf01e40e0300f9257781", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044a73da40c548ed472948f3138ebf54d69afb09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044a73da40c548ed472948f3138ebf54d69afb09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=044a73da40c548ed472948f3138ebf54d69afb09", "patch": "@@ -1,3 +1,10 @@\n+2016-04-27  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* genattrtab.c (write_test_expr): New parameter EMIT_PARENS\n+\twhich defaults to true.  Emit an outer pair of parentheses only if\n+\tEMIT_PARENS.  When continuing a chain of && or || (or & or |),\n+\tdon't emit parentheses for the right-hand operand.\n+\n 2016-04-27  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (record_temporary_equivalences): Fix typo in comment."}, {"sha": "c956527cd4258b2041447523724295932091c4ff", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044a73da40c548ed472948f3138ebf54d69afb09/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044a73da40c548ed472948f3138ebf54d69afb09/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=044a73da40c548ed472948f3138ebf54d69afb09", "patch": "@@ -3416,7 +3416,10 @@ find_attrs_to_cache (rtx exp, bool create)\n \n /* Given a piece of RTX, print a C expression to test its truth value to OUTF.\n    We use AND and IOR both for logical and bit-wise operations, so\n-   interpret them as logical unless they are inside a comparison expression.  */\n+   interpret them as logical unless they are inside a comparison expression.\n+\n+   An outermost pair of parentheses is emitted around this C expression unless\n+   EMIT_PARENS is false.  */\n \n /* Interpret AND/IOR as bit-wise operations instead of logical.  */\n #define FLG_BITWISE\t\t1\n@@ -3432,16 +3435,16 @@ find_attrs_to_cache (rtx exp, bool create)\n #define FLG_OUTSIDE_AND\t\t8\n \n static unsigned int\n-write_test_expr (FILE *outf, rtx exp, unsigned int attrs_cached, int flags)\n+write_test_expr (FILE *outf, rtx exp, unsigned int attrs_cached, int flags,\n+\t\t bool emit_parens = true)\n {\n   int comparison_operator = 0;\n   RTX_CODE code;\n   struct attr_desc *attr;\n \n-  /* In order not to worry about operator precedence, surround our part of\n-     the expression with parentheses.  */\n+  if (emit_parens)\n+    fprintf (outf, \"(\");\n \n-  fprintf (outf, \"(\");\n   code = GET_CODE (exp);\n   switch (code)\n     {\n@@ -3575,8 +3578,18 @@ write_test_expr (FILE *outf, rtx exp, unsigned int attrs_cached, int flags)\n \t      || GET_CODE (XEXP (exp, 1)) == EQ_ATTR\n \t      || (GET_CODE (XEXP (exp, 1)) == NOT\n \t\t  && GET_CODE (XEXP (XEXP (exp, 1), 0)) == EQ_ATTR)))\n-\tattrs_cached\n-\t  = write_test_expr (outf, XEXP (exp, 1), attrs_cached, flags);\n+\t{\n+\t  bool need_parens = true;\n+\n+\t  /* No need to emit parentheses around the right-hand operand if we are\n+\t     continuing a chain of && or || (or & or |).  */\n+\t  if (GET_CODE (XEXP (exp, 1)) == code)\n+\t    need_parens = false;\n+\n+\t  attrs_cached\n+\t    = write_test_expr (outf, XEXP (exp, 1), attrs_cached, flags,\n+\t\t\t       need_parens);\n+\t}\n       else\n \twrite_test_expr (outf, XEXP (exp, 1), attrs_cached,\n \t\t\t flags | comparison_operator);\n@@ -3794,7 +3807,9 @@ write_test_expr (FILE *outf, rtx exp, unsigned int attrs_cached, int flags)\n \t     GET_RTX_NAME (code));\n     }\n \n-  fprintf (outf, \")\");\n+  if (emit_parens)\n+    fprintf (outf, \")\");\n+\n   return attrs_cached;\n }\n "}]}