{"sha": "8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkYmJjYWVhNGQ2YTlkMzNlYTQ5ZWQwOWI5YThiZDZhMzVhZjgxOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-03-19T11:22:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-03-19T11:22:40Z"}, "message": "re PR other/35094 (RTL dump file letters hosed and partly undocumented)\n\n\n\t* gcc.dg/20050811-2.c: Update dumping flags.\n\t* gcc.dg/sms-2.c: Update dumping flags.\n\t* gcc.dg/var-expand1.c: Update dumping flags.\n\t* gcc.dg/var-expand3.c: Update dumping flags.\n\t* gcc.dg/pr30957-1.c: Update dumping flags.\n\t* gcc.dg/20050811-1.c: Update dumping flags.\n\t* gcc.dg/cpp/cmdlne-dI-M.C: Do not xfail.\n\t* gcc.dg/cpp/cmdlne-dM-M.C: Do not xfail.\n\n\tPR other/35094\n\t* toplev.c (decode_d_option): Handle all CPP flags.\n\t* tree-vrp.c: Update tree_pass descriptors.\n\t* regrename.c: Update tree_pass descriptors.\n\t* fwprop.c: Update tree_pass descriptors.\n\t* doc/invoke.texi: Remove documentation of dropped -d? flags.\n\t* tree-into-ssa.c: Update tree_pass descriptors.\n\t* tree-dump.c: Update tree_pass descriptors.\n\t* tree-complex.c: Update tree_pass descriptors.\n\t* tree-dump.h: Update tree_pass descriptors.\n\t* see.c: Update tree_pass descriptors.\n\t* cgraphbuild.c: Update tree_pass descriptors.\n\t* tracer.c: Update tree_pass descriptors.\n\t* tree-loop-distribution.c: Update tree_pass descriptors.\n\t* cgraph.c: Update tree_pass descriptors.\n\t* postreload-gcse.c: Update tree_pass descriptors.\n\t* postreload.c: Update tree_pass descriptors.\n\t* tree-ssa-loop-ch.c: Update tree_pass descriptors.\n\t* tree-tailcall.c: Update tree_pass descriptors.\n\t* tree-pass.h (tree_opt_pass): Rename to ...\n\t(opt_pass) ... this one; add \"type\" field and remove letter field.\n\t(gimple_opt_pass, rtl_opt_pass, simple_ipa_opt_pass): New.\n\t(execute_pass_list, execute_ipa_pass_list, all_passes, all_ipa_passes,\n\tall_lowering_passes): Update declaration.\n\t* ipa-cp.c: Update tree_pass descriptors.\n\t* final.c: Update tree_pass descriptors.\n\t* omp-low.c: Update tree_pass descriptors.\n\t* tree-ssa-dse.c: Update tree_pass descriptors.\n\t* ipa-reference.c: Update tree_pass descriptors.\n\t* tree-ssa-uncprop.c: Update tree_pass descriptors.\n\t* auto-inc-dec.c: Update tree_pass descriptors.\n\t* reorg.c: Update tree_pass descriptors.\n\t* cgraphunit.c: Update tree_pass descriptors.\n\t* tree-ssa-copyrename.c: Update tree_pass descriptors.\n\t* tree-ssa-ccp.c: Update tree_pass descriptors.\n\t* df-core.c: Update tree_pass descriptors.\n\t* mode-switching.c: Update tree_pass descriptors.\n\t* tree-nomudflap.c: Update tree_pass descriptors.\n\t* modulo-sched.c: Update tree_pass descriptors.\n\t* ipa-pure-const.c: Update tree_pass descriptors.\n\t* cse.c: Update tree_pass descriptors.\n\t* web.c: Update tree_pass descriptors.\n\t* tree-stdarg.c: Update tree_pass descriptors.\n\t* tree-ssa-math-opts.c: Update tree_pass descriptors.\n\t* tree-ssa-dom.c: Update tree_pass descriptors.\n\t* tree-nrv.c: Update tree_pass descriptors.\n\t* tree-ssa-alias.c: Update tree_pass descriptors.\n\t* loop-init.c: Update tree_pass descriptors.\n\t* gimple-low.c: Update tree_pass descriptors.\n\t* ipa-inline.c: Update tree_pass descriptors.\n\t* tree-ssa-sink.c: Update tree_pass descriptors.\n\t* global.c: Update tree_pass descriptors.\n\t* ifcvt.c: Update tree_pass descriptors.\n\t* jump.c: Update tree_pass descriptors.\n\t* predict.c: Update tree_pass descriptors.\n\t* tree-ssa-loop.c: Update tree_pass descriptors.\n\t* recog.c: Update tree_pass descriptors.\n\t* dse.c: Update tree_pass descriptors.\n\t* tree-ssa-ifcombine.c: Update tree_pass descriptors.\n\t* tree-eh.c: Update tree_pass descriptors.\n\t* regmove.c: Update tree_pass descriptors.\n\t* local-alloc.c\n\t* function.c: Update tree_pass descriptors.\n\t* tree-vectorizer.c: Update tree_pass descriptors.\n\t* gcse.c: Update tree_pass descriptors.\n\t* ipa-type-escape.c: Update tree_pass descriptors.\n\t* tree-if-conv.c: Update tree_pass descriptors.\n\t* init-regs.c: Update tree_pass descriptors.\n\t* ipa.c: Update tree_pass descriptors.\n\t* tree-ssa-phiopt.c: Update tree_pass descriptors.\n\t* rtl-factoring.c: Update tree_pass descriptors.\n\t* lower-subreg.c: Update tree_pass descriptors.\n\t* bt-load.c: Update tree_pass descriptors.\n\t* tree-dfa.c: Update tree_pass descriptors.\n\t* except.c: Update tree_pass descriptors.\n\t* emit-rtl.c: Update tree_pass descriptors.\n\t* cfgexpand.c: Update tree_pass descriptors.\n\t* tree-cfgcleanup.c: Update tree_pass descriptors.\n\t* cfgcleanup.c: Update tree_pass descriptors.\n\t* tree-ssa-pre.c: Update tree_pass descriptors.\n\t* tree-sra.c: Update tree_pass descriptors.\n\t* tree-mudflap.c: Update tree_pass descriptors.\n\t* tree-ssa-copy.c: Update tree_pass descriptors.\n\t* cfglayout.c: Update tree_pass descriptors.\n\t* tree-ssa-forwprop.c: Update tree_pass descriptors.\n\t* tree-ssa-dce.c: Update tree_pass descriptors.\n\t* tree-ssa.c: Update tree_pass descriptors.\n\t* regclass.c: Update tree_pass descriptors.\n\t* integrate.c: Update tree_pass descriptors.\n\t* tree-optimize.c: Update tree_pass descriptors.\n\t* tree-ssa-phiprop.c: Update tree_pass descriptors.\n\t* tree-object-size.c: Update tree_pass descriptors.\n\t* combine.c: Update tree_pass descriptors.\n\t* tree-outof-ssa.c: Update tree_pass descriptors.\n\t* bb-reorder.c: Update tree_pass descriptors.\n\t* stack-ptr-mod.c: Update tree_pass descriptors.\n\t* var-tracking.c: Update tree_pass descriptors.\n\t* tree-profile.c: Update tree_pass descriptors.\n\t* tree-vect-generic.c: Update tree_pass descriptors.\n\t* reg-stack.c: Update tree_pass descriptors.\n\t* sched-rgn.c: Update tree_pass descriptors.\n\t* tree-ssa-structalias.c: Update tree_pass descriptors.\n\t* tree-cfg.c: Update tree_pass descriptors.\n\t* passes.c (current_pass): Update declaration.\n\t(finish_optimization_passes): Update.\n\t(all_passes, all_ipa_passes, all_lowering_passes): Update declaration.\n\t(register_one_dump_file, register_dump_files_1, next_pass_1):\n \tUpdate arguments.\n\t(init_optimization_passes): Update handling of new types.\n\t(execute_one_pass, execute_pass_list, execute_ipa_pass_list): Update.\n\t* ipa-struct-reorg.c: Update tree_pass descriptors.\n\t* tree-ssa-reassoc.c: Update tree_pass descriptors.\n\t* combine-stack-adj.c: Update tree_pass descriptors.\n\t* cfgrtl.c: Update tree_pass descriptors.\n\t* dce.c: Update tree_pass descriptors.\n\t* tree-ssanames.c: Update tree_pass descriptors.\n\nFrom-SVN: r133342", "tree": {"sha": "a92c2b5908ddb433dcfd4848584500d8ec662e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a92c2b5908ddb433dcfd4848584500d8ec662e1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/comments", "author": null, "committer": null, "parents": [{"sha": "8cb3ee3785019dc4b2566360816f0b83aeea4e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb3ee3785019dc4b2566360816f0b83aeea4e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb3ee3785019dc4b2566360816f0b83aeea4e2e"}], "stats": {"total": 2345, "additions": 1410, "deletions": 935}, "files": [{"sha": "845455ca39c757ce20d52c1b54f684cd7ce4bd7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 23, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1,3 +1,122 @@\n+2008-03-19  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR other/35094\n+\t* toplev.c (decode_d_option): Handle all CPP flags.\n+\t* tree-vrp.c: Update tree_pass descriptors.\n+\t* regrename.c: Update tree_pass descriptors.\n+\t* fwprop.c: Update tree_pass descriptors.\n+\t* doc/invoke.texi: Remove documentation of dropped -d? flags.\n+\t* tree-into-ssa.c: Update tree_pass descriptors.\n+\t* tree-dump.c: Update tree_pass descriptors.\n+\t* tree-complex.c: Update tree_pass descriptors.\n+\t* tree-dump.h: Update tree_pass descriptors.\n+\t* see.c: Update tree_pass descriptors.\n+\t* cgraphbuild.c: Update tree_pass descriptors.\n+\t* tracer.c: Update tree_pass descriptors.\n+\t* tree-loop-distribution.c: Update tree_pass descriptors.\n+\t* cgraph.c: Update tree_pass descriptors.\n+\t* postreload-gcse.c: Update tree_pass descriptors.\n+\t* postreload.c: Update tree_pass descriptors.\n+\t* tree-ssa-loop-ch.c: Update tree_pass descriptors.\n+\t* tree-tailcall.c: Update tree_pass descriptors.\n+\t* tree-pass.h (tree_opt_pass): Rename to ...\n+\t(opt_pass) ... this one; add \"type\" field and remove letter field.\n+\t(gimple_opt_pass, rtl_opt_pass, simple_ipa_opt_pass): New.\n+\t(execute_pass_list, execute_ipa_pass_list, all_passes, all_ipa_passes,\n+\tall_lowering_passes): Update declaration.\n+\t* ipa-cp.c: Update tree_pass descriptors.\n+\t* final.c: Update tree_pass descriptors.\n+\t* omp-low.c: Update tree_pass descriptors.\n+\t* tree-ssa-dse.c: Update tree_pass descriptors.\n+\t* ipa-reference.c: Update tree_pass descriptors.\n+\t* tree-ssa-uncprop.c: Update tree_pass descriptors.\n+\t* auto-inc-dec.c: Update tree_pass descriptors.\n+\t* reorg.c: Update tree_pass descriptors.\n+\t* cgraphunit.c: Update tree_pass descriptors.\n+\t* tree-ssa-copyrename.c: Update tree_pass descriptors.\n+\t* tree-ssa-ccp.c: Update tree_pass descriptors.\n+\t* df-core.c: Update tree_pass descriptors.\n+\t* mode-switching.c: Update tree_pass descriptors.\n+\t* tree-nomudflap.c: Update tree_pass descriptors.\n+\t* modulo-sched.c: Update tree_pass descriptors.\n+\t* ipa-pure-const.c: Update tree_pass descriptors.\n+\t* cse.c: Update tree_pass descriptors.\n+\t* web.c: Update tree_pass descriptors.\n+\t* tree-stdarg.c: Update tree_pass descriptors.\n+\t* tree-ssa-math-opts.c: Update tree_pass descriptors.\n+\t* tree-ssa-dom.c: Update tree_pass descriptors.\n+\t* tree-nrv.c: Update tree_pass descriptors.\n+\t* tree-ssa-alias.c: Update tree_pass descriptors.\n+\t* loop-init.c: Update tree_pass descriptors.\n+\t* gimple-low.c: Update tree_pass descriptors.\n+\t* ipa-inline.c: Update tree_pass descriptors.\n+\t* tree-ssa-sink.c: Update tree_pass descriptors.\n+\t* global.c: Update tree_pass descriptors.\n+\t* ifcvt.c: Update tree_pass descriptors.\n+\t* jump.c: Update tree_pass descriptors.\n+\t* predict.c: Update tree_pass descriptors.\n+\t* tree-ssa-loop.c: Update tree_pass descriptors.\n+\t* recog.c: Update tree_pass descriptors.\n+\t* dse.c: Update tree_pass descriptors.\n+\t* tree-ssa-ifcombine.c: Update tree_pass descriptors.\n+\t* tree-eh.c: Update tree_pass descriptors.\n+\t* regmove.c: Update tree_pass descriptors.\n+\t* local-alloc.c\n+\t* function.c: Update tree_pass descriptors.\n+\t* tree-vectorizer.c: Update tree_pass descriptors.\n+\t* gcse.c: Update tree_pass descriptors.\n+\t* ipa-type-escape.c: Update tree_pass descriptors.\n+\t* tree-if-conv.c: Update tree_pass descriptors.\n+\t* init-regs.c: Update tree_pass descriptors.\n+\t* ipa.c: Update tree_pass descriptors.\n+\t* tree-ssa-phiopt.c: Update tree_pass descriptors.\n+\t* rtl-factoring.c: Update tree_pass descriptors.\n+\t* lower-subreg.c: Update tree_pass descriptors.\n+\t* bt-load.c: Update tree_pass descriptors.\n+\t* tree-dfa.c: Update tree_pass descriptors.\n+\t* except.c: Update tree_pass descriptors.\n+\t* emit-rtl.c: Update tree_pass descriptors.\n+\t* cfgexpand.c: Update tree_pass descriptors.\n+\t* tree-cfgcleanup.c: Update tree_pass descriptors.\n+\t* cfgcleanup.c: Update tree_pass descriptors.\n+\t* tree-ssa-pre.c: Update tree_pass descriptors.\n+\t* tree-sra.c: Update tree_pass descriptors.\n+\t* tree-mudflap.c: Update tree_pass descriptors.\n+\t* tree-ssa-copy.c: Update tree_pass descriptors.\n+\t* cfglayout.c: Update tree_pass descriptors.\n+\t* tree-ssa-forwprop.c: Update tree_pass descriptors.\n+\t* tree-ssa-dce.c: Update tree_pass descriptors.\n+\t* tree-ssa.c: Update tree_pass descriptors.\n+\t* regclass.c: Update tree_pass descriptors.\n+\t* integrate.c: Update tree_pass descriptors.\n+\t* tree-optimize.c: Update tree_pass descriptors.\n+\t* tree-ssa-phiprop.c: Update tree_pass descriptors.\n+\t* tree-object-size.c: Update tree_pass descriptors.\n+\t* combine.c: Update tree_pass descriptors.\n+\t* tree-outof-ssa.c: Update tree_pass descriptors.\n+\t* bb-reorder.c: Update tree_pass descriptors.\n+\t* stack-ptr-mod.c: Update tree_pass descriptors.\n+\t* var-tracking.c: Update tree_pass descriptors.\n+\t* tree-profile.c: Update tree_pass descriptors.\n+\t* tree-vect-generic.c: Update tree_pass descriptors.\n+\t* reg-stack.c: Update tree_pass descriptors.\n+\t* sched-rgn.c: Update tree_pass descriptors.\n+\t* tree-ssa-structalias.c: Update tree_pass descriptors.\n+\t* tree-cfg.c: Update tree_pass descriptors.\n+\t* passes.c (current_pass): Update declaration.\n+\t(finish_optimization_passes): Update.\n+\t(all_passes, all_ipa_passes, all_lowering_passes): Update declaration.\n+\t(register_one_dump_file, register_dump_files_1, next_pass_1):\n+ \tUpdate arguments.\n+\t(init_optimization_passes): Update handling of new types.\n+\t(execute_one_pass, execute_pass_list, execute_ipa_pass_list): Update.\n+\t* ipa-struct-reorg.c: Update tree_pass descriptors.\n+\t* tree-ssa-reassoc.c: Update tree_pass descriptors.\n+\t* combine-stack-adj.c: Update tree_pass descriptors.\n+\t* cfgrtl.c: Update tree_pass descriptors.\n+\t* dce.c: Update tree_pass descriptors.\n+\t* tree-ssanames.c: Update tree_pass descriptors.\n+\n 2008-03-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/35609\n@@ -89,29 +208,6 @@\n \t* gimplify.c (gimplify_expr): Gimplify second operand of\n \tOMP_ATOMIC_LOAD.\n \n-2008-03-17  Richard Guenther  <rguenther@suse.de>\n-\n-\t* tree-pretty-print.c: Include predict.h.\n-\t(dump_generic_node): Dump predictor.\n-\t* tree.h (PREDICT_EXPR_OUTCOME, PREDICT_EXPR_PREDICTION): Update.\n-\t* tree-gimple.c (is_gimple_stmt): Add PREDICT_EXPR.\n-\t* gimple-low.c (lower_stmt): Likewise.\n-\t* expr.c (expand_expr_real): Likewise.\n-\t* predict.c (tree_bb_level_predictions): Use PREDICT_EXPRs and remove\n-\tthem.\n-\t(build_predict_expr, build_predict_expr): New.\n-\t* predict.h (predictor_name, build_predict_expr): Update.\n-\t* c-typeck.c (c_finish_bc_stmt): Add prediction.\n-\t* gimplify.c (gimplify_expr): Add PREDICT_EXPR.\n-\t* predict.def (PRED_CONTINUE): Update hitrate.\n-\t* tree.def (PREDICT_EXPR): Define.\n-\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Mark PREDICT_EXPR;\n-\tdo not handle BIND_EXPR.\n-\t* tree-inline.c (estimate_num_insns_1): PREDICT_EXPR is free.\n-\t* tree-cfg.c (verify_gimple_stmt): PREDICT_EXPR is valid.\n-\t* tree-ssa-operands.c (get_expr_operands): PREDICT_EXPR takes no\n-\toperands.\n-\n 2008-03-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19637"}, {"sha": "8dbcecf93b586d0e5a19c85ba17895b386d28636", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1540,8 +1540,10 @@ gate_auto_inc_dec (void)\n }\n \n \n-struct tree_opt_pass pass_inc_dec =\n+struct rtl_opt_pass pass_inc_dec =\n {\n+ {\n+  RTL_PASS,\n   \"auto-inc-dec\",                       /* name */\n   gate_auto_inc_dec,                    /* gate */\n   rest_of_handle_auto_inc_dec,          /* execute */\n@@ -1555,6 +1557,6 @@ struct tree_opt_pass pass_inc_dec =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | \n   TODO_df_finish,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n "}, {"sha": "3b59fcd8377d736ff75f259f05d37e466481f74f", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2096,8 +2096,10 @@ duplicate_computed_gotos (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_duplicate_computed_gotos =\n+struct rtl_opt_pass pass_duplicate_computed_gotos =\n {\n+ {\n+  RTL_PASS,\n   \"compgotos\",                          /* name */\n   gate_duplicate_computed_gotos,        /* gate */\n   duplicate_computed_gotos,             /* execute */\n@@ -2110,7 +2112,7 @@ struct tree_opt_pass pass_duplicate_computed_gotos =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing,/* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \n \n@@ -2239,8 +2241,10 @@ rest_of_handle_reorder_blocks (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_reorder_blocks =\n+struct rtl_opt_pass pass_reorder_blocks =\n {\n+ {\n+  RTL_PASS,\n   \"bbro\",                               /* name */\n   gate_handle_reorder_blocks,           /* gate */\n   rest_of_handle_reorder_blocks,        /* execute */\n@@ -2253,7 +2257,7 @@ struct tree_opt_pass pass_reorder_blocks =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing,/* todo_flags_finish */\n-  'B'                                   /* letter */\n+ }\n };\n \n static bool\n@@ -2277,8 +2281,10 @@ rest_of_handle_partition_blocks (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_partition_blocks =\n+struct rtl_opt_pass pass_partition_blocks =\n {\n+ {\n+  RTL_PASS,\n   \"bbpart\",                             /* name */\n   gate_handle_partition_blocks,         /* gate */\n   rest_of_handle_partition_blocks,      /* execute */\n@@ -2290,8 +2296,8 @@ struct tree_opt_pass pass_partition_blocks =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing,/* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing/* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "188faeb4f74217c93b1fa15d876e65aaae6ecb49", "filename": "gcc/bt-load.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1505,8 +1505,10 @@ rest_of_handle_branch_target_load_optimize1 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_branch_target_load_optimize1 =\n+struct rtl_opt_pass pass_branch_target_load_optimize1 =\n {\n+ {\n+  RTL_PASS,\n   \"btl1\",                               /* name */\n   gate_handle_branch_target_load_optimize1,      /* gate */\n   rest_of_handle_branch_target_load_optimize1,   /* execute */\n@@ -1521,7 +1523,7 @@ struct tree_opt_pass pass_branch_target_load_optimize1 =\n   TODO_dump_func |\n   TODO_verify_rtl_sharing |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n-  'd'                                   /* letter */\n+ }\n };\n \n static bool\n@@ -1553,8 +1555,10 @@ rest_of_handle_branch_target_load_optimize2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_branch_target_load_optimize2 =\n+struct rtl_opt_pass pass_branch_target_load_optimize2 =\n {\n+ {\n+  RTL_PASS,\n   \"btl2\",                               /* name */\n   gate_handle_branch_target_load_optimize2,      /* gate */\n   rest_of_handle_branch_target_load_optimize2,   /* execute */\n@@ -1568,6 +1572,6 @@ struct tree_opt_pass pass_branch_target_load_optimize2 =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n-  'd'                                   /* letter */\n+ }\n };\n "}, {"sha": "203963e02ccfb6764a8bbf0e27d6fbd5f9f4e265", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2181,8 +2181,10 @@ rest_of_handle_jump (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_jump =\n+struct rtl_opt_pass pass_jump =\n {\n+ {\n+  RTL_PASS,\n   \"sibling\",                            /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_jump,\t\t\t/* execute */\n@@ -2195,7 +2197,7 @@ struct tree_opt_pass pass_jump =\n   0,                                    /* properties_destroyed */\n   TODO_ggc_collect,                     /* todo_flags_start */\n   TODO_verify_flow,                     /* todo_flags_finish */\n-  'i'                                   /* letter */\n+ }\n };\n \n \n@@ -2211,8 +2213,10 @@ rest_of_handle_jump2 (void)\n }\n \n \n-struct tree_opt_pass pass_jump2 =\n+struct rtl_opt_pass pass_jump2 =\n {\n+ {\n+  RTL_PASS,\n   \"jump\",                               /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_jump2,\t\t\t/* execute */\n@@ -2225,7 +2229,7 @@ struct tree_opt_pass pass_jump2 =\n   0,                                    /* properties_destroyed */\n   TODO_ggc_collect,                     /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing,/* todo_flags_finish */\n-  'j'                                   /* letter */\n+ }\n };\n \n "}, {"sha": "cd04a625ec8b70fb0f58fc9eaa846e9d3bebd08e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1986,8 +1986,10 @@ tree_expand_cfg (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_expand =\n+struct gimple_opt_pass pass_expand =\n {\n+ {\n+  GIMPLE_PASS,\n   \"expand\",\t\t\t\t/* name */\n   NULL,                                 /* gate */\n   tree_expand_cfg,\t\t\t/* execute */\n@@ -2001,5 +2003,5 @@ struct tree_opt_pass pass_expand =\n   PROP_trees,\t\t\t\t/* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func,                       /* todo_flags_finish */\n-  'r'\t\t\t\t\t/* letter */\n+ }\n };"}, {"sha": "0885af79b3f6134212314d0c2706c6efc0962b2f", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -340,8 +340,10 @@ outof_cfg_layout_mode (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_into_cfg_layout_mode =\n+struct rtl_opt_pass pass_into_cfg_layout_mode =\n {\n+ {\n+  RTL_PASS,\n   \"into_cfglayout\",                     /* name */\n   NULL,                                 /* gate */\n   into_cfg_layout_mode,                 /* execute */\n@@ -354,11 +356,13 @@ struct tree_opt_pass pass_into_cfg_layout_mode =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \n-struct tree_opt_pass pass_outof_cfg_layout_mode =\n+struct rtl_opt_pass pass_outof_cfg_layout_mode =\n {\n+ {\n+  RTL_PASS,\n   \"outof_cfglayout\",                    /* name */\n   NULL,                                 /* gate */\n   outof_cfg_layout_mode,                /* execute */\n@@ -371,7 +375,7 @@ struct tree_opt_pass pass_outof_cfg_layout_mode =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \f\n /* Return sope resulting from combination of S1 and S2.  */"}, {"sha": "a42063b6c4cbb19d51c63e1a58bbbc9044e5c8e1", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -427,8 +427,10 @@ free_bb_for_insn (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_free_cfg =\n+struct rtl_opt_pass pass_free_cfg =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */\n   free_bb_for_insn,                     /* execute */\n@@ -441,7 +443,7 @@ struct tree_opt_pass pass_free_cfg =\n   PROP_cfg,                             /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \n /* Return RTX to emit after when we want to emit code on the entry of function.  */"}, {"sha": "86940b84ed33dd27b778a2c726b402025a0e04df", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1070,7 +1070,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n           tree_lowering_passes (fndecl);\n \tbitmap_obstack_initialize (NULL);\n \tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)) && optimize)\n-\t  execute_pass_list (pass_early_local_passes.sub);\n+\t  execute_pass_list (pass_early_local_passes.pass.sub);\n \tbitmap_obstack_release (NULL);\n \ttree_rest_of_compilation (fndecl);\n \tpop_cfun ();"}, {"sha": "832fa6eab90e0d98b646acf08ae109b2d924f722", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -170,8 +170,10 @@ build_cgraph_edges (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_build_cgraph_edges =\n+struct gimple_opt_pass pass_build_cgraph_edges =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   build_cgraph_edges,\t\t\t/* execute */\n@@ -183,8 +185,8 @@ struct tree_opt_pass pass_build_cgraph_edges =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Record references to functions and other variables present in the\n@@ -238,8 +240,10 @@ rebuild_cgraph_edges (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rebuild_cgraph_edges =\n+struct gimple_opt_pass pass_rebuild_cgraph_edges =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   rebuild_cgraph_edges,\t\t\t/* execute */\n@@ -252,5 +256,5 @@ struct tree_opt_pass pass_rebuild_cgraph_edges =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+ }\n };"}, {"sha": "7b01248def2b6d6dde2b4a649d39b6836e1a75d7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -475,7 +475,7 @@ cgraph_process_new_functions (void)\n \t      /* When not optimizing, be sure we run early local passes anyway\n \t\t to expand OMP.  */\n \t      || !optimize)\n-\t    execute_pass_list (pass_early_local_passes.sub);\n+\t    execute_pass_list (pass_early_local_passes.pass.sub);\n \t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  free_dominance_info (CDI_DOMINATORS);\n \t  pop_cfun ();\n@@ -858,7 +858,7 @@ cgraph_analyze_function (struct cgraph_node *node)\n     {\n       bitmap_obstack_initialize (NULL);\n       tree_register_cfg_hooks ();\n-      execute_pass_list (pass_early_local_passes.sub);\n+      execute_pass_list (pass_early_local_passes.pass.sub);\n       free_dominance_info (CDI_POST_DOMINATORS);\n       free_dominance_info (CDI_DOMINATORS);\n       bitmap_obstack_release (NULL);"}, {"sha": "bf7cccf2df755e5fc4ce6c69cf8878188ef19c26", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -472,8 +472,10 @@ rest_of_handle_stack_adjustments (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_stack_adjustments =\n+struct rtl_opt_pass pass_stack_adjustments =\n {\n+ {\n+  RTL_PASS,\n   \"csa\",                                /* name */\n   gate_handle_stack_adjustments,        /* gate */\n   rest_of_handle_stack_adjustments,     /* execute */\n@@ -488,6 +490,6 @@ struct tree_opt_pass pass_stack_adjustments =\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n "}, {"sha": "0fca12da9dbebc466a21bc116c44b83ca479c571", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -13035,8 +13035,10 @@ rest_of_handle_combine (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_combine =\n+struct rtl_opt_pass pass_combine =\n {\n+ {\n+  RTL_PASS,\n   \"combine\",                            /* name */\n   gate_handle_combine,                  /* gate */\n   rest_of_handle_combine,               /* execute */\n@@ -13051,6 +13053,6 @@ struct tree_opt_pass pass_combine =\n   TODO_dump_func |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n-  'c'                                   /* letter */\n+ }\n };\n "}, {"sha": "ef135e99b8f6c5418e4fcf74dd20ed50f4a445dc", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -7011,8 +7011,10 @@ rest_of_handle_cse (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cse =\n+struct rtl_opt_pass pass_cse =\n {\n+ {\n+  RTL_PASS,\n   \"cse1\",                               /* name */\n   gate_handle_cse,                      /* gate */   \n   rest_of_handle_cse,\t\t\t/* execute */       \n@@ -7028,7 +7030,7 @@ struct tree_opt_pass pass_cse =\n   TODO_dump_func |\n   TODO_ggc_collect |\n   TODO_verify_flow,                     /* todo_flags_finish */\n-  's'                                   /* letter */\n+ }\n };\n \n \n@@ -7072,8 +7074,10 @@ rest_of_handle_cse2 (void)\n }\n \n \n-struct tree_opt_pass pass_cse2 =\n+struct rtl_opt_pass pass_cse2 =\n {\n+ {\n+  RTL_PASS,\n   \"cse2\",                               /* name */\n   gate_handle_cse2,                     /* gate */   \n   rest_of_handle_cse2,\t\t\t/* execute */       \n@@ -7088,7 +7092,7 @@ struct tree_opt_pass pass_cse2 =\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n   TODO_ggc_collect |\n-  TODO_verify_flow,                     /* todo_flags_finish */\n-  't'                                   /* letter */\n+  TODO_verify_flow                      /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "f8e54bbb5304c37ae46214a74caf6463b5aa19b3", "filename": "gcc/dce.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -567,8 +567,10 @@ gate_ud_dce (void)\n     && dbg_cnt (dce_ud);\n }\n \n-struct tree_opt_pass pass_ud_rtl_dce =\n+struct rtl_opt_pass pass_ud_rtl_dce =\n {\n+ {\n+  RTL_PASS,\n   \"dce\",                                /* name */\n   gate_ud_dce,                        /* gate */\n   rest_of_handle_ud_dce,              /* execute */\n@@ -582,8 +584,8 @@ struct tree_opt_pass pass_ud_rtl_dce =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'w'                                   /* letter */\n+  TODO_ggc_collect                     /* todo_flags_finish */\n+ }\n };\n \n \n@@ -853,8 +855,10 @@ gate_fast_dce (void)\n     && dbg_cnt (dce_fast);\n }\n \n-struct tree_opt_pass pass_fast_rtl_dce =\n+struct rtl_opt_pass pass_fast_rtl_dce =\n {\n+ {\n+  RTL_PASS,\n   \"dce\",                                /* name */\n   gate_fast_dce,                        /* gate */\n   rest_of_handle_fast_dce,              /* execute */\n@@ -868,6 +872,6 @@ struct tree_opt_pass pass_fast_rtl_dce =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'w'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "1cd49b133be2920d690c38344c73279416fb471e", "filename": "gcc/df-core.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -753,8 +753,10 @@ gate_opt (void)\n }\n \n \n-struct tree_opt_pass pass_df_initialize_opt =\n+struct rtl_opt_pass pass_df_initialize_opt =\n {\n+ {\n+  RTL_PASS,\n   \"dfinit\",                             /* name */\n   gate_opt,                             /* gate */\n   rest_of_handle_df_initialize,         /* execute */\n@@ -766,8 +768,8 @@ struct tree_opt_pass pass_df_initialize_opt =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  'z'                                   /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n \n@@ -778,8 +780,10 @@ gate_no_opt (void)\n }\n \n \n-struct tree_opt_pass pass_df_initialize_no_opt =\n+struct rtl_opt_pass pass_df_initialize_no_opt =\n {\n+ {\n+  RTL_PASS,\n   \"dfinit\",                             /* name */\n   gate_no_opt,                          /* gate */\n   rest_of_handle_df_initialize,         /* execute */\n@@ -791,8 +795,8 @@ struct tree_opt_pass pass_df_initialize_no_opt =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  'z'                                   /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n \n@@ -825,8 +829,10 @@ rest_of_handle_df_finish (void)\n }\n \n \n-struct tree_opt_pass pass_df_finish =\n+struct rtl_opt_pass pass_df_finish =\n {\n+ {\n+  RTL_PASS,\n   \"dfinish\",                            /* name */\n   NULL,\t\t\t\t\t/* gate */\n   rest_of_handle_df_finish,             /* execute */\n@@ -838,8 +844,8 @@ struct tree_opt_pass pass_df_finish =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  'z'                                   /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "8b3d49ae2213e2db26875c0c376b6c4d1c52ea15", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 74, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4446,222 +4446,162 @@ letters for use in @var{letters} and @var{pass}, and their meanings:\n @opindex dA\n Annotate the assembler output with miscellaneous debugging information.\n \n-@item -dB\n @itemx -fdump-rtl-bbro\n-@opindex dB\n @opindex fdump-rtl-bbro\n Dump after block reordering, to @file{@var{file}.148r.bbro}.\n \n-@item -dc\n @itemx -fdump-rtl-combine\n-@opindex dc\n @opindex fdump-rtl-combine\n Dump after the RTL instruction combination pass, to the file\n @file{@var{file}.129r.combine}.\n \n-@item -dC\n @itemx -fdump-rtl-ce1\n @itemx -fdump-rtl-ce2\n-@opindex dC\n @opindex fdump-rtl-ce1\n @opindex fdump-rtl-ce2\n-@option{-dC} and @option{-fdump-rtl-ce1} enable dumping after the\n-first if conversion, to the file @file{@var{file}.117r.ce1}.  @option{-dC}\n-and @option{-fdump-rtl-ce2} enable dumping after the second if\n+@option{-fdump-rtl-ce1} enable dumping after the\n+first if conversion, to the file @file{@var{file}.117r.ce1}. \n+@option{-fdump-rtl-ce2} enable dumping after the second if\n conversion, to the file @file{@var{file}.130r.ce2}.\n \n-@item -dd\n @itemx -fdump-rtl-btl\n @itemx -fdump-rtl-dbr\n-@opindex dd\n @opindex fdump-rtl-btl\n @opindex fdump-rtl-dbr\n-@option{-dd} and @option{-fdump-rtl-btl} enable dumping after branch\n-target load optimization, to @file{@var{file}.31.btl}.  @option{-dd}\n-and @option{-fdump-rtl-dbr} enable dumping after delayed branch\n+@option{-fdump-rtl-btl} enable dumping after branch\n+target load optimization, to @file{@var{file}.31.btl}.  \n+@option{-fdump-rtl-dbr} enable dumping after delayed branch\n scheduling, to @file{@var{file}.36.dbr}.\n \n @item -dD\n @opindex dD\n Dump all macro definitions, at the end of preprocessing, in addition to\n normal output.\n \n-@item -dE\n @itemx -fdump-rtl-ce3\n-@opindex dE\n @opindex fdump-rtl-ce3\n Dump after the third if conversion, to @file{@var{file}.146r.ce3}.\n \n-@item -df\n @itemx -fdump-rtl-cfg\n @itemx -fdump-rtl-life\n-@opindex df\n @opindex fdump-rtl-cfg\n @opindex fdump-rtl-life\n-@option{-df} and @option{-fdump-rtl-cfg} enable dumping after control\n-and data flow analysis, to @file{@var{file}.116r.cfg}.  @option{-df}\n-and @option{-fdump-rtl-cfg} enable dumping dump after life analysis,\n+@option{-fdump-rtl-cfg} enable dumping after control\n+and data flow analysis, to @file{@var{file}.116r.cfg}.  \n+@option{-fdump-rtl-cfg} enable dumping dump after life analysis,\n to @file{@var{file}.128r.life1} and @file{@var{file}.135r.life2}.\n \n-@item -dg\n @itemx -fdump-rtl-greg\n-@opindex dg\n @opindex fdump-rtl-greg\n Dump after global register allocation, to @file{@var{file}.139r.greg}.\n \n-@item -dG\n @itemx -fdump-rtl-gcse\n @itemx -fdump-rtl-bypass\n-@opindex dG\n @opindex fdump-rtl-gcse\n @opindex fdump-rtl-bypass\n-@option{-dG} and @option{-fdump-rtl-gcse} enable dumping after GCSE, to\n-@file{@var{file}.114r.gcse}.  @option{-dG} and @option{-fdump-rtl-bypass}\n+@option{-fdump-rtl-gcse} enable dumping after GCSE, to\n+@file{@var{file}.114r.gcse}.  @option{-fdump-rtl-bypass}\n enable dumping after jump bypassing and control flow optimizations, to\n @file{@var{file}.115r.bypass}.\n \n-@item -dh\n @itemx -fdump-rtl-eh\n-@opindex dh\n @opindex fdump-rtl-eh\n Dump after finalization of EH handling code, to @file{@var{file}.02.eh}.\n \n-@item -di\n @itemx -fdump-rtl-sibling\n-@opindex di\n @opindex fdump-rtl-sibling\n Dump after sibling call optimizations, to @file{@var{file}.106r.sibling}.\n \n-@item -dj\n @itemx -fdump-rtl-jump\n-@opindex dj\n @opindex fdump-rtl-jump\n Dump after the first jump optimization, to @file{@var{file}.112r.jump}.\n \n-@item -dk\n @itemx -fdump-rtl-stack\n-@opindex dk\n @opindex fdump-rtl-stack\n Dump after conversion from GCC's \"flat register file\" registers to the\n x87's stack-like registers, to @file{@var{file}.152r.stack}.\n \n-@item -dl\n @itemx -fdump-rtl-lreg\n-@opindex dl\n @opindex fdump-rtl-lreg\n Dump after local register allocation, to @file{@var{file}.138r.lreg}.\n \n-@item -dL\n @itemx -fdump-rtl-loop2\n-@opindex dL\n @opindex fdump-rtl-loop2\n @option{-dL} and @option{-fdump-rtl-loop2} enable dumping after the\n loop optimization pass, to @file{@var{file}.119r.loop2},\n @file{@var{file}.120r.loop2_init},\n @file{@var{file}.121r.loop2_invariant}, and\n @file{@var{file}.125r.loop2_done}.\n \n-@item -dm\n @itemx -fdump-rtl-sms\n-@opindex dm\n @opindex fdump-rtl-sms\n Dump after modulo scheduling, to @file{@var{file}.136r.sms}.\n \n-@item -dM\n @itemx -fdump-rtl-mach\n-@opindex dM\n @opindex fdump-rtl-mach\n Dump after performing the machine dependent reorganization pass, to\n @file{@var{file}.155r.mach} if that pass exists.\n \n-@item -dn\n @itemx -fdump-rtl-rnreg\n-@opindex dn\n @opindex fdump-rtl-rnreg\n Dump after register renumbering, to @file{@var{file}.147r.rnreg}.\n \n-@item -dN\n @itemx -fdump-rtl-regmove\n-@opindex dN\n @opindex fdump-rtl-regmove\n Dump after the register move pass, to @file{@var{file}.132r.regmove}.\n \n-@item -do\n @itemx -fdump-rtl-postreload\n-@opindex do\n @opindex fdump-rtl-postreload\n Dump after post-reload optimizations, to @file{@var{file}.24.postreload}.\n \n-@item -dr\n @itemx -fdump-rtl-expand\n-@opindex dr\n @opindex fdump-rtl-expand\n Dump after RTL generation, to @file{@var{file}.104r.expand}.\n \n-@item -dR\n @itemx -fdump-rtl-sched2\n-@opindex dR\n @opindex fdump-rtl-sched2\n Dump after the second scheduling pass, to @file{@var{file}.149r.sched2}.\n \n-@item -ds\n @itemx -fdump-rtl-cse\n-@opindex ds\n @opindex fdump-rtl-cse\n Dump after CSE (including the jump optimization that sometimes follows\n CSE), to @file{@var{file}.113r.cse}.\n \n-@item -dS\n @itemx -fdump-rtl-sched1\n-@opindex dS\n @opindex fdump-rtl-sched1\n Dump after the first scheduling pass, to @file{@var{file}.136r.sched1}.\n \n-@item -dt\n @itemx -fdump-rtl-cse2\n-@opindex dt\n @opindex fdump-rtl-cse2\n Dump after the second CSE pass (including the jump optimization that\n sometimes follows CSE), to @file{@var{file}.127r.cse2}.\n \n-@item -dT\n @itemx -fdump-rtl-tracer\n-@opindex dT\n @opindex fdump-rtl-tracer\n Dump after running tracer, to @file{@var{file}.118r.tracer}.\n \n-@item -dV\n @itemx -fdump-rtl-vpt\n @itemx -fdump-rtl-vartrack\n-@opindex dV\n @opindex fdump-rtl-vpt\n @opindex fdump-rtl-vartrack\n-@option{-dV} and @option{-fdump-rtl-vpt} enable dumping after the value\n-profile transformations, to @file{@var{file}.10.vpt}.  @option{-dV}\n-and @option{-fdump-rtl-vartrack} enable dumping after variable tracking,\n+@option{-fdump-rtl-vpt} enable dumping after the value\n+profile transformations, to @file{@var{file}.10.vpt}.\n+@option{-fdump-rtl-vartrack} enable dumping after variable tracking,\n to @file{@var{file}.154r.vartrack}.\n \n-@item -dw\n @itemx -fdump-rtl-flow2\n-@opindex dw\n @opindex fdump-rtl-flow2\n Dump after the second flow pass, to @file{@var{file}.142r.flow2}.\n \n-@item -dz\n @itemx -fdump-rtl-peephole2\n-@opindex dz\n @opindex fdump-rtl-peephole2\n Dump after the peephole pass, to @file{@var{file}.145r.peephole2}.\n \n-@item -dZ\n @itemx -fdump-rtl-web\n-@opindex dZ\n @opindex fdump-rtl-web\n Dump after live range splitting, to @file{@var{file}.126r.web}.\n \n-@item -da\n @itemx -fdump-rtl-all\n-@opindex da\n @opindex fdump-rtl-all\n Produce all the dumps listed above.\n "}, {"sha": "fea7afaca0490179060dac098c0f4a7bc7da5e26", "filename": "gcc/dse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3303,8 +3303,10 @@ gate_dse2 (void)\n     && dbg_cnt (dse2);\n }\n \n-struct tree_opt_pass pass_rtl_dse1 =\n+struct rtl_opt_pass pass_rtl_dse1 =\n {\n+ {\n+  RTL_PASS,\n   \"dse1\",                               /* name */\n   gate_dse1,                            /* gate */\n   rest_of_handle_dse,                   /* execute */\n@@ -3318,12 +3320,14 @@ struct tree_opt_pass pass_rtl_dse1 =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'w'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_rtl_dse2 =\n+struct rtl_opt_pass pass_rtl_dse2 =\n {\n+ {\n+  RTL_PASS,\n   \"dse2\",                               /* name */\n   gate_dse2,                            /* gate */\n   rest_of_handle_dse,                   /* execute */\n@@ -3337,6 +3341,6 @@ struct tree_opt_pass pass_rtl_dse2 =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'w'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "02680a9c06b21ef878e486772684e5b04ca0adb5", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2181,8 +2181,10 @@ unshare_all_rtl (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_unshare_all_rtl =\n+struct rtl_opt_pass pass_unshare_all_rtl =\n {\n+ {\n+  RTL_PASS,\n   \"unshare\",                            /* name */\n   NULL,                                 /* gate */\n   unshare_all_rtl,                      /* execute */\n@@ -2194,8 +2196,8 @@ struct tree_opt_pass pass_unshare_all_rtl =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "9c18ebde765c9e39a325a70e8df13c9c41a0ae65", "filename": "gcc/except.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2843,8 +2843,10 @@ set_nothrow_function_flags (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_set_nothrow_function_flags =\n+struct rtl_opt_pass pass_set_nothrow_function_flags =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */\n   set_nothrow_function_flags,           /* execute */\n@@ -2857,7 +2859,7 @@ struct tree_opt_pass pass_set_nothrow_function_flags =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \n \f\n@@ -3372,8 +3374,10 @@ convert_to_eh_region_ranges (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_convert_to_eh_region_ranges =\n+struct rtl_opt_pass pass_convert_to_eh_region_ranges =\n {\n+ {\n+  RTL_PASS,\n   \"eh-ranges\",                          /* name */\n   NULL,                                 /* gate */\n   convert_to_eh_region_ranges,          /* execute */\n@@ -3386,7 +3390,7 @@ struct tree_opt_pass pass_convert_to_eh_region_ranges =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0                                     /* letter */\n+ }\n };\n \n \f\n@@ -3995,8 +3999,10 @@ rest_of_handle_eh (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_eh =\n+struct rtl_opt_pass pass_rtl_eh =\n {\n+ {\n+  RTL_PASS,\n   \"eh\",                                 /* name */\n   gate_handle_eh,                       /* gate */\n   rest_of_handle_eh,\t\t\t/* execute */\n@@ -4008,8 +4014,8 @@ struct tree_opt_pass pass_rtl_eh =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'h'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n #include \"gt-except.h\""}, {"sha": "189b83fbeee6c42587c1f13fc40bfb159e635e03", "filename": "gcc/final.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -794,8 +794,10 @@ compute_alignments (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_compute_alignments =\n+struct rtl_opt_pass pass_compute_alignments =\n {\n+ {\n+  RTL_PASS,\n   \"alignments\",                         /* name */\n   NULL,                                 /* gate */\n   compute_alignments,                   /* execute */\n@@ -808,8 +810,8 @@ struct tree_opt_pass pass_compute_alignments =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing\n-  | TODO_ggc_collect,                   /* todo_flags_finish */\n-  0                                     /* letter */\n+  | TODO_ggc_collect                    /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -4169,8 +4171,10 @@ rest_of_handle_final (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_final =\n+struct rtl_opt_pass pass_final =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_final,                 /* execute */\n@@ -4182,8 +4186,8 @@ struct tree_opt_pass pass_final =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n \n@@ -4195,8 +4199,10 @@ rest_of_handle_shorten_branches (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_shorten_branches =\n+struct rtl_opt_pass pass_shorten_branches =\n {\n+ {\n+  RTL_PASS,\n   \"shorten\",                            /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_shorten_branches,      /* execute */\n@@ -4208,8 +4214,8 @@ struct tree_opt_pass pass_shorten_branches =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n \n@@ -4277,8 +4283,10 @@ rest_of_clean_state (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_clean_state =\n+struct rtl_opt_pass pass_clean_state =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */\n   rest_of_clean_state,                  /* execute */\n@@ -4290,7 +4298,7 @@ struct tree_opt_pass pass_clean_state =\n   0,                                    /* properties_provided */\n   PROP_rtl,                             /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "4e2da8902140936956783e86f8ad78d8523b93fe", "filename": "gcc/function.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1737,8 +1737,10 @@ instantiate_virtual_regs (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_instantiate_virtual_regs =\n+struct rtl_opt_pass pass_instantiate_virtual_regs =\n {\n+ {\n+  RTL_PASS,\n   \"vregs\",                              /* name */\n   NULL,                                 /* gate */\n   instantiate_virtual_regs,             /* execute */\n@@ -1750,8 +1752,8 @@ struct tree_opt_pass pass_instantiate_virtual_regs =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -4042,8 +4044,10 @@ init_function_for_compilation (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_init_function =\n+struct rtl_opt_pass pass_init_function =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */   \n   init_function_for_compilation,        /* execute */       \n@@ -4055,8 +4059,8 @@ struct tree_opt_pass pass_init_function =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n \n@@ -5595,8 +5599,10 @@ used_types_insert (tree t)\n     used_types_insert_helper (t, cfun);\n }\n \n-struct tree_opt_pass pass_leaf_regs =\n+struct rtl_opt_pass pass_leaf_regs =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_check_leaf_regs,       /* execute */\n@@ -5608,8 +5614,8 @@ struct tree_opt_pass pass_leaf_regs =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n static unsigned int\n@@ -5626,8 +5632,10 @@ rest_of_handle_thread_prologue_and_epilogue (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_thread_prologue_and_epilogue =\n+struct rtl_opt_pass pass_thread_prologue_and_epilogue =\n {\n+ {\n+  RTL_PASS,\n   \"pro_and_epilogue\",                   /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_thread_prologue_and_epilogue, /* execute */\n@@ -5642,8 +5650,8 @@ struct tree_opt_pass pass_thread_prologue_and_epilogue =\n   TODO_dump_func |\n   TODO_df_verify |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'w'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \f\n \n@@ -5823,8 +5831,10 @@ rest_of_match_asm_constraints (void)\n   return TODO_df_finish;\n }\n \n-struct tree_opt_pass pass_match_asm_constraints =\n+struct rtl_opt_pass pass_match_asm_constraints =\n {\n+ {\n+  RTL_PASS,\n   \"asmcons\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   rest_of_match_asm_constraints,\t/* execute */\n@@ -5836,8 +5846,8 @@ struct tree_opt_pass pass_match_asm_constraints =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                       /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "b0ae1ba625cfd847fd1e223882537cae52ca6ffa", "filename": "gcc/fwprop.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1021,8 +1021,10 @@ fwprop (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_fwprop =\n+struct rtl_opt_pass pass_rtl_fwprop =\n {\n+ {\n+  RTL_PASS,\n   \"fwprop1\",                            /* name */\n   gate_fwprop,\t\t\t\t/* gate */\n   fwprop,\t\t\t\t/* execute */\n@@ -1035,8 +1037,8 @@ struct tree_opt_pass pass_rtl_fwprop =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static unsigned int\n@@ -1063,8 +1065,10 @@ fwprop_addr (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_fwprop_addr =\n+struct rtl_opt_pass pass_rtl_fwprop_addr =\n {\n+ {\n+  RTL_PASS,\n   \"fwprop2\",                            /* name */\n   gate_fwprop,\t\t\t\t/* gate */\n   fwprop_addr,\t\t\t\t/* execute */\n@@ -1077,6 +1081,6 @@ struct tree_opt_pass pass_rtl_fwprop_addr =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };"}, {"sha": "201e42c5a974ef7e9362833d6f20138b4f901fa6", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -6691,8 +6691,10 @@ rest_of_handle_jump_bypass (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_jump_bypass =\n+struct rtl_opt_pass pass_jump_bypass =\n {\n+ {\n+  RTL_PASS,\n   \"bypass\",                             /* name */\n   gate_handle_jump_bypass,              /* gate */   \n   rest_of_handle_jump_bypass,           /* execute */       \n@@ -6705,8 +6707,8 @@ struct tree_opt_pass pass_jump_bypass =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_ggc_collect | TODO_verify_flow,  /* todo_flags_finish */\n-  'G'                                   /* letter */\n+  TODO_ggc_collect | TODO_verify_flow   /* todo_flags_finish */\n+ }\n };\n \n \n@@ -6760,8 +6762,10 @@ rest_of_handle_gcse (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_gcse =\n+struct rtl_opt_pass pass_gcse =\n {\n+ {\n+  RTL_PASS,\n   \"gcse1\",                              /* name */\n   gate_handle_gcse,                     /* gate */   \n   rest_of_handle_gcse,\t\t\t/* execute */       \n@@ -6775,8 +6779,8 @@ struct tree_opt_pass pass_gcse =\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_verify_flow | TODO_ggc_collect,  /* todo_flags_finish */\n-  'G'                                   /* letter */\n+  TODO_verify_flow | TODO_ggc_collect   /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "09ca304bca4ec0691832fdc864e974625615ab43", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -148,8 +148,10 @@ lower_function_body (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_lower_cf = \n+struct gimple_opt_pass pass_lower_cf = \n {\n+ {\n+  GIMPLE_PASS,\n   \"lower\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   lower_function_body,\t\t\t/* execute */\n@@ -161,8 +163,8 @@ struct tree_opt_pass pass_lower_cf =\n   PROP_gimple_lcf,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n \n@@ -790,8 +792,10 @@ mark_used_blocks (void)\n }\n \n \n-struct tree_opt_pass pass_mark_used_blocks = \n+struct gimple_opt_pass pass_mark_used_blocks = \n {\n+ {\n+  GIMPLE_PASS,\n   \"blocks\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   mark_used_blocks,\t\t\t/* execute */\n@@ -803,6 +807,6 @@ struct tree_opt_pass pass_mark_used_blocks =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "f88da11032138aefb15188c04e7530abf292b619", "filename": "gcc/global.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1783,7 +1783,7 @@ rest_of_handle_global_alloc (void)\n       failure = reload (get_insns (), 0);\n     }\n \n-  if (dump_enabled_p (pass_global_alloc.static_pass_number))\n+  if (dump_enabled_p (pass_global_alloc.pass.static_pass_number))\n     {\n       timevar_push (TV_DUMP);\n       dump_global_regs (dump_file);\n@@ -1817,8 +1817,10 @@ rest_of_handle_global_alloc (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_global_alloc =\n+struct rtl_opt_pass pass_global_alloc =\n {\n+ {\n+  RTL_PASS,\n   \"greg\",                               /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_global_alloc,          /* execute */\n@@ -1831,7 +1833,7 @@ struct tree_opt_pass pass_global_alloc =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing\n-  | TODO_ggc_collect,                   /* todo_flags_finish */\n-  'g'                                   /* letter */\n+  | TODO_ggc_collect                    /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "98b707a3e774d0eefc4095d8e59b8d7a766bdca6", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4143,8 +4143,10 @@ rest_of_handle_if_conversion (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_ifcvt =\n+struct rtl_opt_pass pass_rtl_ifcvt =\n {\n+ {\n+  RTL_PASS,\n   \"ce1\",                                /* name */\n   gate_handle_if_conversion,            /* gate */\n   rest_of_handle_if_conversion,         /* execute */\n@@ -4157,8 +4159,8 @@ struct tree_opt_pass pass_rtl_ifcvt =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'C'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -4178,8 +4180,10 @@ rest_of_handle_if_after_combine (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_if_after_combine =\n+struct rtl_opt_pass pass_if_after_combine =\n {\n+ {\n+  RTL_PASS,\n   \"ce2\",                                /* name */\n   gate_handle_if_after_combine,         /* gate */\n   rest_of_handle_if_after_combine,      /* execute */\n@@ -4193,8 +4197,8 @@ struct tree_opt_pass pass_if_after_combine =\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'C'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n \n@@ -4213,8 +4217,10 @@ rest_of_handle_if_after_reload (void)\n }\n \n \n-struct tree_opt_pass pass_if_after_reload =\n+struct rtl_opt_pass pass_if_after_reload =\n {\n+ {\n+  RTL_PASS,\n   \"ce3\",                                /* name */\n   gate_handle_if_after_reload,          /* gate */\n   rest_of_handle_if_after_reload,       /* execute */\n@@ -4228,6 +4234,6 @@ struct tree_opt_pass pass_if_after_reload =\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'E'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "83abe715971bdeaae516c33df60459a07819af60", "filename": "gcc/init-regs.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Finit-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Finit-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -139,8 +139,10 @@ rest_of_handle_initialize_regs (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_initialize_regs =\n+struct rtl_opt_pass pass_initialize_regs =\n {\n+ {\n+  RTL_PASS,\n   \"init-regs\",                          /* name */\n   gate_initialize_regs,                 /* gate */\n   rest_of_handle_initialize_regs,       /* execute */\n@@ -153,6 +155,6 @@ struct tree_opt_pass pass_initialize_regs =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_df_finish,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_df_finish                        /* todo_flags_finish */\n+ }\n };"}, {"sha": "55ac31ddf93fa4526fa348efbfb9c9169ae28840", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -298,8 +298,10 @@ emit_initial_value_sets (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_initial_value_sets =\n+struct rtl_opt_pass pass_initial_value_sets =\n {\n+ {\n+  RTL_PASS,\n   \"initvals\",                           /* name */\n   NULL,                                 /* gate */\n   emit_initial_value_sets,              /* execute */\n@@ -311,8 +313,8 @@ struct tree_opt_pass pass_initial_value_sets =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n /* If the backend knows where to allocate pseudos for hard"}, {"sha": "4d9e0a4eb282a7ff0f21d4dbcceb625a8613c86c", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1136,7 +1136,10 @@ cgraph_gate_cp (void)\n   return flag_ipa_cp;\n }\n \n-struct tree_opt_pass pass_ipa_cp = {\n+struct simple_ipa_opt_pass pass_ipa_cp = \n+{\n+ {\n+  SIMPLE_IPA_PASS,\n   \"cp\",\t\t\t\t/* name */\n   cgraph_gate_cp,\t\t/* gate */\n   ipcp_driver,\t\t\t/* execute */\n@@ -1148,6 +1151,6 @@ struct tree_opt_pass pass_ipa_cp = {\n   PROP_trees,\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph | TODO_dump_func,\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+  TODO_dump_cgraph | TODO_dump_func\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "f251fbebe30f5486430f58581f2396c4613c7dc5", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1426,8 +1426,10 @@ cgraph_gate_inlining (void)\n   return flag_inline_trees;\n }\n \n-struct tree_opt_pass pass_ipa_inline = \n+struct simple_ipa_opt_pass pass_ipa_inline = \n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"inline\",\t\t\t\t/* name */\n   cgraph_gate_inlining,\t\t\t/* gate */\n   cgraph_decide_inlining,\t\t/* execute */\n@@ -1440,8 +1442,8 @@ struct tree_opt_pass pass_ipa_inline =\n   0,\t\t\t\t\t/* properties_destroyed */\n   TODO_remove_functions,\t\t/* todo_flags_finish */\n   TODO_dump_cgraph | TODO_dump_func\n-  | TODO_remove_functions,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_remove_functions\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Because inlining might remove no-longer reachable nodes, we need to\n@@ -1479,8 +1481,10 @@ cgraph_gate_early_inlining (void)\n   return flag_inline_trees && flag_early_inlining;\n }\n \n-struct tree_opt_pass pass_early_inline = \n+struct gimple_opt_pass pass_early_inline = \n {\n+ {\n+  GIMPLE_PASS,\n   \"einline\",\t \t\t\t/* name */\n   cgraph_gate_early_inlining,\t\t/* gate */\n   cgraph_early_inlining,\t\t/* execute */\n@@ -1492,8 +1496,8 @@ struct tree_opt_pass pass_early_inline =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,    \t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func    \t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* When inlining shall be performed.  */\n@@ -1507,8 +1511,10 @@ cgraph_gate_ipa_early_inlining (void)\n \n /* IPA pass wrapper for early inlining pass.  We need to run early inlining\n    before tree profiling so we have stand alone IPA pass for doing so.  */\n-struct tree_opt_pass pass_ipa_early_inline = \n+struct simple_ipa_opt_pass pass_ipa_early_inline = \n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"einline_ipa\",\t\t\t/* name */\n   cgraph_gate_ipa_early_inlining,\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -1520,8 +1526,8 @@ struct tree_opt_pass pass_ipa_early_inline =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph, \t\t        /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_cgraph \t\t        /* todo_flags_finish */\n+ }\n };\n \n /* Compute parameters of functions used by inliner.  */\n@@ -1554,8 +1560,10 @@ gate_inline_passes (void)\n   return flag_inline_trees;\n }\n \n-struct tree_opt_pass pass_inline_parameters = \n+struct gimple_opt_pass pass_inline_parameters = \n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t \t\t\t\t/* name */\n   gate_inline_passes,\t\t\t/* gate */\n   compute_inline_parameters,\t\t/* execute */\n@@ -1567,8 +1575,8 @@ struct tree_opt_pass pass_inline_parameters =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Apply inline plan to the function.  */\n@@ -1609,8 +1617,10 @@ apply_inline (void)\n   return todo | execute_fixup_cfg ();\n }\n \n-struct tree_opt_pass pass_apply_inline = \n+struct gimple_opt_pass pass_apply_inline = \n {\n+ {\n+  GIMPLE_PASS,\n   \"apply_inline\",\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   apply_inline,\t\t\t\t/* execute */\n@@ -1623,8 +1633,8 @@ struct tree_opt_pass pass_apply_inline =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_flow\n-  | TODO_verify_stmts,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+ }\n };\n \n #include \"gt-ipa-inline.h\""}, {"sha": "c180e35d6c1d552a6696ce60ad9c9e0fafebfc63", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -769,8 +769,10 @@ gate_pure_const (void)\n \t  && !(errorcount || sorrycount));\n }\n \n-struct tree_opt_pass pass_ipa_pure_const =\n+struct simple_ipa_opt_pass pass_ipa_pure_const =\n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"pure-const\",\t\t                /* name */\n   gate_pure_const,\t\t\t/* gate */\n   static_execute,\t\t\t/* execute */\n@@ -782,8 +784,8 @@ struct tree_opt_pass pass_ipa_pure_const =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "71c0ec50297714828617ed5e84454c00403d5d6d", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1319,8 +1319,10 @@ gate_reference (void)\n \t  && !(errorcount || sorrycount));\n }\n \n-struct tree_opt_pass pass_ipa_reference =\n+struct simple_ipa_opt_pass pass_ipa_reference =\n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"static-var\",\t\t\t\t/* name */\n   gate_reference,\t\t\t/* gate */\n   static_execute,\t\t\t/* execute */\n@@ -1332,8 +1334,8 @@ struct tree_opt_pass pass_ipa_reference =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n #include \"gt-ipa-reference.h\""}, {"sha": "10eedec08ec690db9929a1809b2b6d269b1ad4a8", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4038,8 +4038,10 @@ struct_reorg_gate (void)\n     && (optimize > 0);\n }\n \n-struct tree_opt_pass pass_ipa_struct_reorg = \n+struct simple_ipa_opt_pass pass_ipa_struct_reorg = \n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"ipa_struct_reorg\",\t \t  /* name */\n   struct_reorg_gate,\t\t  /* gate */\n   reorg_structs_drive,\t\t  /* execute */\n@@ -4051,6 +4053,6 @@ struct tree_opt_pass pass_ipa_struct_reorg =\n   0,\t\t\t\t  /* properties_provided */\n   0,\t\t\t\t  /* properties_destroyed */\n   TODO_verify_ssa,\t\t  /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "9cd9caa99df16a200b305db3d8b584bed984d58b", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2196,8 +2196,10 @@ gate_type_escape_vars (void)\n \t  && !(errorcount || sorrycount));\n }\n \n-struct tree_opt_pass pass_ipa_type_escape =\n+struct simple_ipa_opt_pass pass_ipa_type_escape =\n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"type-escape-var\",\t\t\t/* name */\n   gate_type_escape_vars,\t\t/* gate */\n   type_escape_execute,\t\t\t/* execute */\n@@ -2209,7 +2211,7 @@ struct tree_opt_pass pass_ipa_type_escape =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "16023be2dee237333bef2a3215be890503eefba6", "filename": "gcc/ipa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -278,8 +278,10 @@ function_and_variable_visibility (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_ipa_function_and_variable_visibility = \n+struct simple_ipa_opt_pass pass_ipa_function_and_variable_visibility = \n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"visibility\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   function_and_variable_visibility,\t/* execute */\n@@ -291,6 +293,6 @@ struct tree_opt_pass pass_ipa_function_and_variable_visibility =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_remove_functions | TODO_dump_cgraph,/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_remove_functions | TODO_dump_cgraph/* todo_flags_finish */\n+ }\n };"}, {"sha": "1aa0c6db6d873a50e3a3888b5fe24d27dc6415df", "filename": "gcc/jump.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -122,8 +122,10 @@ cleanup_barriers (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cleanup_barriers =\n+struct rtl_opt_pass pass_cleanup_barriers =\n {\n+ {\n+  RTL_PASS,\n   \"barriers\",                           /* name */\n   NULL,                                 /* gate */\n   cleanup_barriers,                     /* execute */\n@@ -135,8 +137,8 @@ struct tree_opt_pass pass_cleanup_barriers =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n \f"}, {"sha": "0d6d908581a5403633f0285de672b3a90caa50e3", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2632,8 +2632,10 @@ rest_of_handle_local_alloc (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_local_alloc =\n+struct rtl_opt_pass pass_local_alloc =\n {\n+ {\n+  RTL_PASS,\n   \"lreg\",                               /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_local_alloc,           /* execute */\n@@ -2646,7 +2648,7 @@ struct tree_opt_pass pass_local_alloc =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'l'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "83375714d44d54de2f4ea3b37f7bb5bb29257630", "filename": "gcc/loop-init.c", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -140,8 +140,10 @@ gate_handle_loop2 (void)\n \t      ));\n }\n \n-struct tree_opt_pass pass_loop2 =\n+struct rtl_opt_pass pass_loop2 =\n {\n+ {\n+  RTL_PASS,\n   \"loop2\",                              /* name */\n   gate_handle_loop2, \t\t        /* gate */\n   NULL,                                 /* execute */\n@@ -154,8 +156,8 @@ struct tree_opt_pass pass_loop2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'L'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -172,8 +174,10 @@ rtl_loop_init (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_loop_init =\n+struct rtl_opt_pass pass_rtl_loop_init =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_init\",                           /* name */\n   NULL,                                 /* gate */\n   rtl_loop_init,                        /* execute */\n@@ -185,8 +189,8 @@ struct tree_opt_pass pass_rtl_loop_init =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'L'                                   /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -205,8 +209,10 @@ rtl_loop_done (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_loop_done =\n+struct rtl_opt_pass pass_rtl_loop_done =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_done\",                          /* name */\n   NULL,                                 /* gate */\n   rtl_loop_done,                        /* execute */\n@@ -218,8 +224,8 @@ struct tree_opt_pass pass_rtl_loop_done =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'L'                                   /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -238,8 +244,10 @@ rtl_move_loop_invariants (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_move_loop_invariants =\n+struct rtl_opt_pass pass_rtl_move_loop_invariants =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_invariant\",                    /* name */\n   gate_rtl_move_loop_invariants,        /* gate */\n   rtl_move_loop_invariants,             /* execute */\n@@ -253,8 +261,8 @@ struct tree_opt_pass pass_rtl_move_loop_invariants =\n   0,                                    /* todo_flags_start */ \n   TODO_df_verify |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'L'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -273,8 +281,10 @@ rtl_unswitch (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_unswitch =\n+struct rtl_opt_pass pass_rtl_unswitch =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_unswitch\",                      /* name */\n   gate_rtl_unswitch,                    /* gate */\n   rtl_unswitch,                         /* execute */\n@@ -287,7 +297,7 @@ struct tree_opt_pass pass_rtl_unswitch =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'L'                                   /* letter */\n+ }\n };\n \n \f\n@@ -319,8 +329,10 @@ rtl_unroll_and_peel_loops (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_unroll_and_peel_loops =\n+struct rtl_opt_pass pass_rtl_unroll_and_peel_loops =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_unroll\",                        /* name */\n   gate_rtl_unroll_and_peel_loops,       /* gate */\n   rtl_unroll_and_peel_loops,            /* execute */\n@@ -333,7 +345,7 @@ struct tree_opt_pass pass_rtl_unroll_and_peel_loops =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'L'                                   /* letter */\n+ }\n };\n \n \f\n@@ -358,8 +370,10 @@ rtl_doloop (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_doloop =\n+struct rtl_opt_pass pass_rtl_doloop =\n {\n+ {\n+  RTL_PASS,\n   \"loop2_doloop\",                        /* name */\n   gate_rtl_doloop,                      /* gate */\n   rtl_doloop,                           /* execute */\n@@ -371,7 +385,7 @@ struct tree_opt_pass pass_rtl_doloop =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'L'                                   /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "c3b29a84f30add28c16baea0a099910d16d8c900", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1425,8 +1425,10 @@ rest_of_handle_lower_subreg2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_lower_subreg =\n+struct rtl_opt_pass pass_lower_subreg =\n {\n+ {\n+  RTL_PASS,\n   \"subreg\",\t                        /* name */\n   gate_handle_lower_subreg,             /* gate */\n   rest_of_handle_lower_subreg,          /* execute */\n@@ -1440,12 +1442,14 @@ struct tree_opt_pass pass_lower_subreg =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n   TODO_ggc_collect |\n-  TODO_verify_flow,                     /* todo_flags_finish */\n-  'u'                                   /* letter */\n+  TODO_verify_flow                      /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_lower_subreg2 =\n+struct rtl_opt_pass pass_lower_subreg2 =\n {\n+ {\n+  RTL_PASS,\n   \"subreg2\",\t                        /* name */\n   gate_handle_lower_subreg,             /* gate */\n   rest_of_handle_lower_subreg2,          /* execute */\n@@ -1460,6 +1464,6 @@ struct tree_opt_pass pass_lower_subreg2 =\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n   TODO_ggc_collect |\n-  TODO_verify_flow,                     /* todo_flags_finish */\n-  'U'                                   /* letter */\n+  TODO_verify_flow                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "8a2734d0f0bebd2baf572a61253a96015cfcfbe2", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2317,7 +2317,10 @@ gate_matrix_reorg (void)\n   return flag_ipa_matrix_reorg && flag_whole_program;\n }\n \n-struct tree_opt_pass pass_ipa_matrix_reorg = {\n+struct simple_ipa_opt_pass pass_ipa_matrix_reorg = \n+{\n+ {\n+  SIMPLE_IPA_PASS,\n   \"matrix-reorg\",\t\t/* name */\n   gate_matrix_reorg,\t\t/* gate */\n   matrix_reorg,\t\t\t/* execute */\n@@ -2329,6 +2332,6 @@ struct tree_opt_pass pass_ipa_matrix_reorg = {\n   PROP_trees,\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph | TODO_dump_func,\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+  TODO_dump_cgraph | TODO_dump_func\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "23269b815ddccd910449710d9d812fc8c077db85", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -756,8 +756,10 @@ rest_of_handle_mode_switching (void)\n }\n \n \n-struct tree_opt_pass pass_mode_switching =\n+struct rtl_opt_pass pass_mode_switching =\n {\n+ {\n+  RTL_PASS,\n   \"mode-sw\",                            /* name */\n   gate_mode_switching,                  /* gate */\n   rest_of_handle_mode_switching,        /* execute */\n@@ -770,6 +772,6 @@ struct tree_opt_pass pass_mode_switching =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };"}, {"sha": "f2193d4e41a111f5ca01ff99e8d14e40308359b9", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2871,8 +2871,10 @@ rest_of_handle_sms (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_sms =\n+struct rtl_opt_pass pass_sms =\n {\n+ {\n+  RTL_PASS,\n   \"sms\",                                /* name */\n   gate_handle_sms,                      /* gate */\n   rest_of_handle_sms,                   /* execute */\n@@ -2886,7 +2888,7 @@ struct tree_opt_pass pass_sms =\n   TODO_dump_func,                       /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'm'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "45602c24d748b704e04404cae2f536c40c709213", "filename": "gcc/omp-low.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4195,8 +4195,10 @@ gate_expand_omp_ssa (void)\n   return flag_openmp_ssa && flag_openmp != 0 && errorcount == 0;\n }\n \n-struct tree_opt_pass pass_expand_omp_ssa = \n+struct gimple_opt_pass pass_expand_omp_ssa = \n {\n+ {\n+  GIMPLE_PASS,\n   \"ompexpssa\",\t\t\t\t/* name */\n   gate_expand_omp_ssa,\t\t\t/* gate */\n   execute_expand_omp,\t\t\t/* execute */\n@@ -4208,8 +4210,8 @@ struct tree_opt_pass pass_expand_omp_ssa =\n   PROP_gimple_lomp,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* OMP expansion -- the default pass, run before creation of SSA form.  */\n@@ -4221,8 +4223,10 @@ gate_expand_omp (void)\n \t  && flag_openmp != 0 && errorcount == 0);\n }\n \n-struct tree_opt_pass pass_expand_omp = \n+struct gimple_opt_pass pass_expand_omp = \n {\n+ {\n+  GIMPLE_PASS,\n   \"ompexp\",\t\t\t\t/* name */\n   gate_expand_omp,\t\t\t/* gate */\n   execute_expand_omp,\t\t\t/* execute */\n@@ -4234,8 +4238,8 @@ struct tree_opt_pass pass_expand_omp =\n   PROP_gimple_lomp,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \f\n /* Routines to lower OpenMP directives into OMP-GIMPLE.  */\n@@ -5081,8 +5085,10 @@ gate_lower_omp (void)\n   return flag_openmp != 0;\n }\n \n-struct tree_opt_pass pass_lower_omp = \n+struct gimple_opt_pass pass_lower_omp = \n {\n+ {\n+  GIMPLE_PASS,\n   \"omplower\",\t\t\t\t/* name */\n   gate_lower_omp,\t\t\t/* gate */\n   execute_lower_omp,\t\t\t/* execute */\n@@ -5094,8 +5100,8 @@ struct tree_opt_pass pass_lower_omp =\n   PROP_gimple_lomp,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \f\n /* The following is a utility to diagnose OpenMP structured block violations."}, {"sha": "833bdbd01342d4a75473525d1d48eb82e7ca61ac", "filename": "gcc/passes.c", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -104,7 +104,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This is used for debugging.  It allows the current pass to printed\n    from anywhere in compilation.  */\n-struct tree_opt_pass *current_pass;\n+struct opt_pass *current_pass;\n \n /* Call from anywhere to find out what pass this is.  Useful for\n    printing out debugging information deep inside an service\n@@ -246,19 +246,19 @@ finish_optimization_passes (void)\n   timevar_push (TV_DUMP);\n   if (profile_arc_flag || flag_test_coverage || flag_branch_probabilities)\n     {\n-      dump_file = dump_begin (pass_profile.static_pass_number, NULL);\n+      dump_file = dump_begin (pass_profile.pass.static_pass_number, NULL);\n       end_branch_prob ();\n       if (dump_file)\n-\tdump_end (pass_profile.static_pass_number, dump_file);\n+\tdump_end (pass_profile.pass.static_pass_number, dump_file);\n     }\n \n   if (optimize > 0)\n     {\n-      dump_file = dump_begin (pass_combine.static_pass_number, NULL);\n+      dump_file = dump_begin (pass_combine.pass.static_pass_number, NULL);\n       if (dump_file)\n \t{\n \t  dump_combine_total_stats (dump_file);\n-          dump_end (pass_combine.static_pass_number, dump_file);\n+          dump_end (pass_combine.pass.static_pass_number, dump_file);\n \t}\n     }\n \n@@ -284,8 +284,10 @@ gate_rest_of_compilation (void)\n   return !(rtl_dump_and_exit || flag_syntax_only || errorcount || sorrycount);\n }\n \n-struct tree_opt_pass pass_rest_of_compilation =\n+struct gimple_opt_pass pass_rest_of_compilation =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,                                 /* name */\n   gate_rest_of_compilation,             /* gate */\n   NULL,                                 /* execute */\n@@ -297,8 +299,8 @@ struct tree_opt_pass pass_rest_of_compilation =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -307,8 +309,10 @@ gate_postreload (void)\n   return reload_completed;\n }\n \n-struct tree_opt_pass pass_postreload =\n+struct rtl_opt_pass pass_postreload =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   gate_postreload,                      /* gate */\n   NULL,                                 /* execute */\n@@ -320,21 +324,21 @@ struct tree_opt_pass pass_postreload =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_ggc_collect | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_ggc_collect | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n \n \n \n /* The root of the compilation pass tree, once constructed.  */\n-struct tree_opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n+struct opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n \n /* Iterate over the pass tree allocating dump file numbers.  We want\n    to do this depth first, and independent of whether the pass is\n    enabled or not.  */\n \n static void\n-register_one_dump_file (struct tree_opt_pass *pass, bool ipa, int properties)\n+register_one_dump_file (struct opt_pass *pass, bool ipa, int properties)\n {\n   char *dot_name, *flag_name, *glob_name;\n   const char *prefix;\n@@ -358,13 +362,13 @@ register_one_dump_file (struct tree_opt_pass *pass, bool ipa, int properties)\n   flag_name = concat (prefix, pass->name, num, NULL);\n   glob_name = concat (prefix, pass->name, NULL);\n   pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n-                                            flags, pass->letter);\n+                                            flags);\n }\n \n /* Recursive worker function for register_dump_files.  */\n \n static int \n-register_dump_files_1 (struct tree_opt_pass *pass, bool ipa, int properties)\n+register_dump_files_1 (struct opt_pass *pass, bool ipa, int properties)\n {\n   do\n     {\n@@ -398,7 +402,7 @@ register_dump_files_1 (struct tree_opt_pass *pass, bool ipa, int properties)\n    the pipeline.  */\n \n static void \n-register_dump_files (struct tree_opt_pass *pass, bool ipa, int properties)\n+register_dump_files (struct opt_pass *pass, bool ipa, int properties)\n {\n   pass->properties_required |= properties;\n   register_dump_files_1 (pass, ipa, properties);\n@@ -407,14 +411,14 @@ register_dump_files (struct tree_opt_pass *pass, bool ipa, int properties)\n /* Add a pass to the pass list. Duplicate the pass if it's already\n    in the list.  */\n \n-static struct tree_opt_pass **\n-next_pass_1 (struct tree_opt_pass **list, struct tree_opt_pass *pass)\n+static struct opt_pass **\n+next_pass_1 (struct opt_pass **list, struct opt_pass *pass)\n {\n   /* A nonzero static_pass_number indicates that the\n      pass is already in the list.  */\n   if (pass->static_pass_number)\n     {\n-      struct tree_opt_pass *new;\n+      struct opt_pass *new;\n \n       new = xmalloc (sizeof (*new));\n       memcpy (new, pass, sizeof (*new));\n@@ -467,9 +471,9 @@ next_pass_1 (struct tree_opt_pass **list, struct tree_opt_pass *pass)\n void\n init_optimization_passes (void)\n {\n-  struct tree_opt_pass **p;\n+  struct opt_pass **p;\n \n-#define NEXT_PASS(PASS)  (p = next_pass_1 (p, &PASS))\n+#define NEXT_PASS(PASS)  (p = next_pass_1 (p, &((PASS).pass)))\n \n  /* All passes needed to lower the function into shape optimizers can\n     operate on.  These passes are always run first on the function, but\n@@ -497,21 +501,21 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_ipa_function_and_variable_visibility);\n   NEXT_PASS (pass_ipa_early_inline);\n     {\n-      struct tree_opt_pass **p = &pass_ipa_early_inline.sub;\n+      struct opt_pass **p = &pass_ipa_early_inline.pass.sub;\n       NEXT_PASS (pass_early_inline);\n       NEXT_PASS (pass_inline_parameters);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n     }\n   NEXT_PASS (pass_early_local_passes);\n     {\n-      struct tree_opt_pass **p = &pass_early_local_passes.sub;\n+      struct opt_pass **p = &pass_early_local_passes.pass.sub;\n       NEXT_PASS (pass_tree_profile);\n       NEXT_PASS (pass_cleanup_cfg);\n       NEXT_PASS (pass_init_datastructures);\n       NEXT_PASS (pass_expand_omp);\n       NEXT_PASS (pass_all_early_optimizations);\n \t{\n-\t  struct tree_opt_pass **p = &pass_all_early_optimizations.sub;\n+\t  struct opt_pass **p = &pass_all_early_optimizations.pass.sub;\n \t  NEXT_PASS (pass_referenced_vars);\n \t  NEXT_PASS (pass_reset_cc_flags);\n \t  NEXT_PASS (pass_build_ssa);\n@@ -555,7 +559,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_apply_inline);\n   NEXT_PASS (pass_all_optimizations);\n     {\n-      struct tree_opt_pass **p = &pass_all_optimizations.sub;\n+      struct opt_pass **p = &pass_all_optimizations.pass.sub;\n       NEXT_PASS (pass_create_structure_vars);\n       /* ??? pass_build_alias is a dummy pass that ensures that we\n \t execute TODO_rebuild_alias at this point even if\n@@ -614,7 +618,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_sink_code);\n       NEXT_PASS (pass_tree_loop);\n \t{\n-\t  struct tree_opt_pass **p = &pass_tree_loop.sub;\n+\t  struct opt_pass **p = &pass_tree_loop.pass.sub;\n \t  NEXT_PASS (pass_tree_loop_init);\n \t  NEXT_PASS (pass_copy_prop);\n \t  NEXT_PASS (pass_dce_loop);\n@@ -631,7 +635,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_if_conversion);\n \t  NEXT_PASS (pass_vectorize);\n \t    {\n-\t      struct tree_opt_pass **p = &pass_vectorize.sub;\n+\t      struct opt_pass **p = &pass_vectorize.pass.sub;\n \t      NEXT_PASS (pass_lower_vector_ssa);\n \t      NEXT_PASS (pass_dce_loop);\n \t    }\n@@ -685,7 +689,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_expand);\n   NEXT_PASS (pass_rest_of_compilation);\n     {\n-      struct tree_opt_pass **p = &pass_rest_of_compilation.sub;\n+      struct opt_pass **p = &pass_rest_of_compilation.pass.sub;\n       NEXT_PASS (pass_init_function);\n       NEXT_PASS (pass_jump);\n       NEXT_PASS (pass_rtl_eh);\n@@ -705,7 +709,7 @@ init_optimization_passes (void)\n \t efficiently.  */\n       NEXT_PASS (pass_loop2);\n \t{\n-\t  struct tree_opt_pass **p = &pass_loop2.sub;\n+\t  struct opt_pass **p = &pass_loop2.pass.sub;\n \t  NEXT_PASS (pass_rtl_loop_init);\n \t  NEXT_PASS (pass_rtl_move_loop_invariants);\n \t  NEXT_PASS (pass_rtl_unswitch);\n@@ -743,7 +747,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_subregs_of_mode_finish);\n       NEXT_PASS (pass_postreload);\n \t{\n-\t  struct tree_opt_pass **p = &pass_postreload.sub;\n+\t  struct opt_pass **p = &pass_postreload.pass.sub;\n \t  NEXT_PASS (pass_postreload_cse);\n \t  NEXT_PASS (pass_gcse2);\n \t  NEXT_PASS (pass_split_after_reload);\n@@ -764,7 +768,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_sched2);\n \t  NEXT_PASS (pass_stack_regs);\n \t    {\n-\t      struct tree_opt_pass **p = &pass_stack_regs.sub;\n+\t      struct opt_pass **p = &pass_stack_regs.pass.sub;\n \t      NEXT_PASS (pass_split_before_regstack);\n \t      NEXT_PASS (pass_stack_regs_run);\n \t    }\n@@ -1056,13 +1060,13 @@ verify_curr_properties (void *data)\n static void\n update_properties_after_pass (void *data)\n {\n-  struct tree_opt_pass *pass = data;\n+  struct opt_pass *pass = data;\n   cfun->curr_properties = (cfun->curr_properties | pass->properties_provided)\n \t\t           & ~pass->properties_destroyed;\n }\n \n static bool\n-execute_one_pass (struct tree_opt_pass *pass)\n+execute_one_pass (struct opt_pass *pass)\n {\n   bool initializing_dump;\n   unsigned int todo_after = 0;\n@@ -1169,7 +1173,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n }\n \n void\n-execute_pass_list (struct tree_opt_pass *pass)\n+execute_pass_list (struct opt_pass *pass)\n {\n   do\n     {\n@@ -1183,7 +1187,7 @@ execute_pass_list (struct tree_opt_pass *pass)\n /* Same as execute_pass_list but assume that subpasses of IPA passes\n    are local passes.  */\n void\n-execute_ipa_pass_list (struct tree_opt_pass *pass)\n+execute_ipa_pass_list (struct opt_pass *pass)\n {\n   do\n     {"}, {"sha": "ef78fde2179b9731612668b23d1e4c2c681d3faf", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1318,8 +1318,10 @@ rest_of_handle_gcse2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_gcse2 =\n+struct rtl_opt_pass pass_gcse2 =\n {\n+ {\n+  RTL_PASS,\n   \"gcse2\",                              /* name */\n   gate_handle_gcse2,                    /* gate */\n   rest_of_handle_gcse2,                 /* execute */\n@@ -1332,7 +1334,7 @@ struct tree_opt_pass pass_gcse2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func | TODO_verify_rtl_sharing\n-  | TODO_verify_flow | TODO_ggc_collect,/* todo_flags_finish */\n-  'J'                                   /* letter */\n+  | TODO_verify_flow | TODO_ggc_collect /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "7e40728e87684ea4f0e83ab5cd55230de30c2671", "filename": "gcc/postreload.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1585,8 +1585,10 @@ rest_of_handle_postreload (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_postreload_cse =\n+struct rtl_opt_pass pass_postreload_cse =\n {\n+ {\n+  RTL_PASS,\n   \"postreload\",                         /* name */\n   gate_handle_postreload,               /* gate */\n   rest_of_handle_postreload,            /* execute */\n@@ -1599,7 +1601,7 @@ struct tree_opt_pass pass_postreload_cse =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'o'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "41743331b9e1d9432681efa440dcb302922699fa", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1939,8 +1939,10 @@ predictor_name (enum br_predictor predictor)\n   return predictor_info[predictor].name;\n }\n \n-struct tree_opt_pass pass_profile = \n+struct gimple_opt_pass pass_profile = \n {\n+ {\n+  GIMPLE_PASS,\n   \"profile\",\t\t\t\t/* name */\n   gate_estimate_probability,\t\t/* gate */\n   tree_estimate_probability,\t\t/* execute */\n@@ -1952,6 +1954,6 @@ struct tree_opt_pass pass_profile =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_ggc_collect | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_ggc_collect | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "7303b2a86f30b7b2ccf4b8ded290eaddea47e22a", "filename": "gcc/recog.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3312,8 +3312,10 @@ rest_of_handle_peephole2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_peephole2 =\n+struct rtl_opt_pass pass_peephole2 =\n {\n+ {\n+  RTL_PASS,\n   \"peephole2\",                          /* name */\n   gate_handle_peephole2,                /* gate */\n   rest_of_handle_peephole2,             /* execute */\n@@ -3326,8 +3328,8 @@ struct tree_opt_pass pass_peephole2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'z'                                   /* letter */\n+  TODO_dump_func                       /* todo_flags_finish */\n+ }\n };\n \n static unsigned int\n@@ -3337,8 +3339,10 @@ rest_of_handle_split_all_insns (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_split_all_insns =\n+struct rtl_opt_pass pass_split_all_insns =\n {\n+ {\n+  RTL_PASS,\n   \"split1\",                             /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_split_all_insns,       /* execute */\n@@ -3350,8 +3354,8 @@ struct tree_opt_pass pass_split_all_insns =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static unsigned int\n@@ -3365,8 +3369,10 @@ rest_of_handle_split_after_reload (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_split_after_reload =\n+struct rtl_opt_pass pass_split_after_reload =\n {\n+ {\n+  RTL_PASS,\n   \"split2\",                             /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_split_after_reload,    /* execute */\n@@ -3378,8 +3384,8 @@ struct tree_opt_pass pass_split_after_reload =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -3407,8 +3413,10 @@ rest_of_handle_split_before_regstack (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_split_before_regstack =\n+struct rtl_opt_pass pass_split_before_regstack =\n {\n+ {\n+  RTL_PASS,\n   \"split3\",                             /* name */\n   gate_handle_split_before_regstack,    /* gate */\n   rest_of_handle_split_before_regstack, /* execute */\n@@ -3420,8 +3428,8 @@ struct tree_opt_pass pass_split_before_regstack =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -3443,8 +3451,10 @@ rest_of_handle_split_before_sched2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_split_before_sched2 =\n+struct rtl_opt_pass pass_split_before_sched2 =\n {\n+ {\n+  RTL_PASS,\n   \"split4\",                             /* name */\n   gate_handle_split_before_sched2,      /* gate */\n   rest_of_handle_split_before_sched2,   /* execute */\n@@ -3457,8 +3467,8 @@ struct tree_opt_pass pass_split_before_sched2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_verify_flow |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n /* The placement of the splitting that we do for shorten_branches\n@@ -3473,8 +3483,10 @@ gate_do_final_split (void)\n #endif \n }\n \n-struct tree_opt_pass pass_split_for_shorten_branches =\n+struct rtl_opt_pass pass_split_for_shorten_branches =\n {\n+ {\n+  RTL_PASS,\n   \"split5\",                             /* name */\n   gate_do_final_split,                  /* gate */\n   split_all_insns_noflow,               /* execute */\n@@ -3486,8 +3498,8 @@ struct tree_opt_pass pass_split_for_shorten_branches =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  0                                     /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "5a6443bd1abbdba50f8e509da24cd63ab8b88dfd", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3202,8 +3202,10 @@ gate_handle_stack_regs (void)\n #endif\n }\n \n-struct tree_opt_pass pass_stack_regs =\n+struct rtl_opt_pass pass_stack_regs =\n {\n+ {\n+  RTL_PASS,\n   NULL,                                 /* name */\n   gate_handle_stack_regs,               /* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -3215,8 +3217,8 @@ struct tree_opt_pass pass_stack_regs =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n /* Convert register usage from flat register file usage to a stack\n@@ -3231,8 +3233,10 @@ rest_of_handle_stack_regs (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_stack_regs_run =\n+struct rtl_opt_pass pass_stack_regs_run =\n {\n+ {\n+  RTL_PASS,\n   \"stack\",                              /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_stack_regs,            /* execute */\n@@ -3246,6 +3250,6 @@ struct tree_opt_pass pass_stack_regs_run =\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'k'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "200f3eefa5812634f32b17ee0d8a656c5876f137", "filename": "gcc/regclass.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1059,8 +1059,10 @@ regclass_init (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_regclass_init =\n+struct rtl_opt_pass pass_regclass_init =\n {\n+ {\n+  RTL_PASS,\n   \"regclass\",                           /* name */\n   NULL,                                 /* gate */\n   regclass_init,                        /* execute */\n@@ -1072,8 +1074,8 @@ struct tree_opt_pass pass_regclass_init =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  'k'                                   /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n \n@@ -2670,8 +2672,10 @@ gate_subregs_of_mode_init (void)\n #endif\n }\n \n-struct tree_opt_pass pass_subregs_of_mode_init =\n+struct rtl_opt_pass pass_subregs_of_mode_init =\n {\n+ {\n+  RTL_PASS,\n   \"subregs_of_mode_init\",               /* name */\n   gate_subregs_of_mode_init,            /* gate */\n   init_subregs_of_mode,                 /* execute */\n@@ -2683,12 +2687,14 @@ struct tree_opt_pass pass_subregs_of_mode_init =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_subregs_of_mode_finish =\n+struct rtl_opt_pass pass_subregs_of_mode_finish =\n {\n+ {\n+  RTL_PASS,\n   \"subregs_of_mode_finish\",               /* name */\n   gate_subregs_of_mode_init,            /* gate */\n   finish_subregs_of_mode,               /* execute */\n@@ -2700,8 +2706,8 @@ struct tree_opt_pass pass_subregs_of_mode_finish =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "925cb9dcd21609f093a78a79bfd3a81644409be1", "filename": "gcc/regmove.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2135,8 +2135,10 @@ rest_of_handle_regmove (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_regmove =\n+struct rtl_opt_pass pass_regmove =\n {\n+ {\n+  RTL_PASS,\n   \"regmove\",                            /* name */\n   gate_handle_regmove,                  /* gate */\n   rest_of_handle_regmove,               /* execute */\n@@ -2150,7 +2152,7 @@ struct tree_opt_pass pass_regmove =\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'N'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "cfc0881be1fb5a37ab4d5ca1a17ae75118037880", "filename": "gcc/regrename.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1938,8 +1938,10 @@ rest_of_handle_regrename (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_regrename =\n+struct rtl_opt_pass pass_regrename =\n {\n+ {\n+  RTL_PASS,\n   \"rnreg\",                              /* name */\n   gate_handle_regrename,                /* gate */\n   rest_of_handle_regrename,             /* execute */\n@@ -1952,8 +1954,8 @@ struct tree_opt_pass pass_regrename =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'n'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -1971,8 +1973,10 @@ rest_of_handle_cprop (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cprop_hardreg =\n+struct rtl_opt_pass pass_cprop_hardreg =\n {\n+ {\n+  RTL_PASS,\n   \"cprop_hardreg\",                      /* name */\n   gate_handle_cprop,                    /* gate */\n   rest_of_handle_cprop,                 /* execute */\n@@ -1984,7 +1988,7 @@ struct tree_opt_pass pass_cprop_hardreg =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing, /* todo_flags_finish */\n-  'n'                                   /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "8db19b49d576056d77bc52c0dea35403368a9cc8", "filename": "gcc/reorg.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4066,8 +4066,10 @@ rest_of_handle_delay_slots (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_delay_slots =\n+struct rtl_opt_pass pass_delay_slots =\n {\n+ {\n+  RTL_PASS,\n   \"dbr\",                                /* name */\n   gate_handle_delay_slots,              /* gate */\n   rest_of_handle_delay_slots,           /* execute */\n@@ -4080,8 +4082,8 @@ struct tree_opt_pass pass_delay_slots =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'd'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n /* Machine dependent reorg pass.  */\n@@ -4099,8 +4101,10 @@ rest_of_handle_machine_reorg (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_machine_reorg =\n+struct rtl_opt_pass pass_machine_reorg =\n {\n+ {\n+  RTL_PASS,\n   \"mach\",                               /* name */\n   gate_handle_machine_reorg,            /* gate */\n   rest_of_handle_machine_reorg,         /* execute */\n@@ -4113,6 +4117,6 @@ struct tree_opt_pass pass_machine_reorg =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'M'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "77c2197b41d70f6702d63e811d7a330fbd12da25", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1428,7 +1428,10 @@ rest_of_rtl_seqabstr (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_rtl_seqabstr = {\n+struct rtl_opt_pass pass_rtl_seqabstr = \n+{\n+ {\n+  RTL_PASS,\n   \"seqabstr\",                           /* name */\n   gate_rtl_seqabstr,                    /* gate */\n   rest_of_rtl_seqabstr,                 /* execute */\n@@ -1442,6 +1445,6 @@ struct tree_opt_pass pass_rtl_seqabstr = {\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'Q'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };"}, {"sha": "e62046b8cd8240306e470dda86a1dea4548a1ddc", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3192,8 +3192,10 @@ rest_of_handle_sched2 (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_sched =\n+struct rtl_opt_pass pass_sched =\n {\n+ {\n+  RTL_PASS,\n   \"sched1\",                             /* name */\n   gate_handle_sched,                    /* gate */\n   rest_of_handle_sched,                 /* execute */\n@@ -3208,12 +3210,14 @@ struct tree_opt_pass pass_sched =\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n   TODO_verify_flow |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'S'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_sched2 =\n+struct rtl_opt_pass pass_sched2 =\n {\n+ {\n+  RTL_PASS,\n   \"sched2\",                             /* name */\n   gate_handle_sched2,                   /* gate */\n   rest_of_handle_sched2,                /* execute */\n@@ -3228,7 +3232,7 @@ struct tree_opt_pass pass_sched2 =\n   TODO_df_finish | TODO_verify_rtl_sharing |\n   TODO_dump_func |\n   TODO_verify_flow |\n-  TODO_ggc_collect,                     /* todo_flags_finish */\n-  'R'                                   /* letter */\n+  TODO_ggc_collect                      /* todo_flags_finish */\n+ }\n };\n "}, {"sha": "c6f584cc6537cd951fc15b7e23f15d510faa6411", "filename": "gcc/see.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3859,8 +3859,10 @@ rest_of_handle_see (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_see =\n+struct rtl_opt_pass pass_see =\n {\n+ {\n+  RTL_PASS,\n   \"see\",\t\t\t\t/* name */\n   gate_handle_see,\t\t\t/* gate */\n   rest_of_handle_see,\t\t\t/* execute */\n@@ -3874,7 +3876,7 @@ struct tree_opt_pass pass_see =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_df_verify |\n   TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  'u'\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n "}, {"sha": "e37fcc3e302f8f4e7c1f2410e055530971652467", "filename": "gcc/stack-ptr-mod.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fstack-ptr-mod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fstack-ptr-mod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack-ptr-mod.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -91,8 +91,10 @@ rest_of_handle_stack_ptr_mod (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_stack_ptr_mod =\n+struct rtl_opt_pass pass_stack_ptr_mod =\n {\n+ {\n+  RTL_PASS,\n   NULL,\t\t                        /* name */\n   NULL,                                 /* gate */\n   rest_of_handle_stack_ptr_mod,         /* execute */\n@@ -104,6 +106,6 @@ struct tree_opt_pass pass_stack_ptr_mod =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0                                     /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };"}, {"sha": "7365b81c60531b55c1729384ddd59778f5ec26a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1,3 +1,14 @@\n+2008-03-19  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/20050811-2.c: Update dumping flags.\n+\t* gcc.dg/sms-2.c: Update dumping flags.\n+\t* gcc.dg/var-expand1.c: Update dumping flags.\n+\t* gcc.dg/var-expand3.c: Update dumping flags.\n+\t* gcc.dg/pr30957-1.c: Update dumping flags.\n+\t* gcc.dg/20050811-1.c: Update dumping flags.\n+\t* gcc.dg/cpp/cmdlne-dI-M.C: Do not xfail.\n+\t* gcc.dg/cpp/cmdlne-dM-M.C: Do not xfail.\n+\n 2008-03-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/35609"}, {"sha": "a9f860bb8bdff48ea7843a259017b82b083a0d7e", "filename": "gcc/testsuite/gcc.dg/20050811-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-1.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1,6 +1,6 @@\n-/* Test whether -dav doesn't crash.  */\n+/* Test whether -dv -fdump-rtl-all doesn't crash.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -dav\" } */\n+/* { dg-options \"-O2 -dv -fdump-rtl-all\" } */\n \n int foo (void)\n {"}, {"sha": "ffd1f390498bb3bc57d59921694dc8f19913962d", "filename": "gcc/testsuite/gcc.dg/20050811-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050811-2.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1,6 +1,6 @@\n /* Test whether -dov doesn't crash.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -dov\" } */\n+/* { dg-options \"-O2 -dv -fdump-rtl-postreload\" } */\n \n int foo (void)\n {"}, {"sha": "a30b4bc12db8016440e29a41be73f2cc0965d3bc", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dI-M.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dI-M.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -13,4 +13,4 @@ int variable;\n \n /* { dg-final { scan-file-not cmdlne-dI-M.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n    { dg-final { scan-file-not cmdlne-dI-M.i \"variable\" } }\n-   { dg-final { scan-file cmdlne-dI-M.i \"(^|\\\\n)cmdlne-dI-M.*:\\[^\\\\n\\]*cmdlne-dI-M.c\" { xfail *-*-* } } } */\n+   { dg-final { scan-file cmdlne-dI-M.i \"(^|\\\\n)cmdlne-dI-M.*:\\[^\\\\n\\]*cmdlne-dI-M.c\" } } */"}, {"sha": "193168e940f5188dfceb4217c19c3bd57de613d5", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dM-M.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dM-M.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -12,4 +12,4 @@ int variable;\n \n /* { dg-final { scan-file cmdlne-dM-M.i \"(^|\\\\n)#define foo bar($|\\\\n)\" } }\n    { dg-final { scan-file-not cmdlne-dM-M.i \"variable\" } }\n-   { dg-final { scan-file cmdlne-dM-M.i \"(^|\\\\n)cmdlne-dM-M\\[^\\\\n\\]*:\\[^\\\\n\\]*cmdlne-dM-M.c\" { xfail *-*-* } } } */\n+   { dg-final { scan-file cmdlne-dM-M.i \"(^|\\\\n)cmdlne-dM-M\\[^\\\\n\\]*:\\[^\\\\n\\]*cmdlne-dM-M.c\"} } */"}, {"sha": "65b98fa533d58747a9411b354cf11c3157a1be5e", "filename": "gcc/testsuite/gcc.dg/pr30957-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -6,7 +6,7 @@\n    they can not co-exist; also under -funsafe-math-optimizations, so we\n    expect it to fail.  */\n /* { dg-require-effective-target hard_float } */\n-/* { dg-options \"-O2 -funroll-loops -funsafe-math-optimizations -fvariable-expansion-in-unroller -dL\" } */\n+/* { dg-options \"-O2 -funroll-loops -funsafe-math-optimizations -fvariable-expansion-in-unroller -fdump-rtl-loop2_unroll\" } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "04d0482ca8c96c0c28338867e53ade33a342e607", "filename": "gcc/testsuite/gcc.dg/sms-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-2.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2,7 +2,7 @@\n    traversal of the loops after versioning.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fmodulo-sched -dm\" } */\n+/* { dg-options \"-O2 -fmodulo-sched -fdump-rtl-sms\" } */\n \n \n void"}, {"sha": "3904407c44d41baa2a73dd1015d09b9269f852a7", "filename": "gcc/testsuite/gcc.dg/var-expand1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2,7 +2,7 @@\n /* We don't (and don't want to) perform this optimisation on soft-float\n    targets, where each addition is a library call.  */\n /* { dg-require-effective-target hard_float } */\n-/* { dg-options \"-O2 -funroll-loops --fast-math -fvariable-expansion-in-unroller -dL\" } */\n+/* { dg-options \"-O2 -funroll-loops --fast-math -fvariable-expansion-in-unroller -fdump-rtl-loop2_unroll\" } */\n \n extern void abort (void);\n "}, {"sha": "e82fb3ceb28db2214fe2ff381874797882d00e2a", "filename": "gcc/testsuite/gcc.dg/var-expand3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { powerpc*-*-* && powerpc_altivec_ok } } }} */\n-/* { dg-options \"-O2 -funroll-loops -ffast-math -fvariable-expansion-in-unroller -maltivec -dL\" } */\n+/* { dg-options \"-O2 -funroll-loops -ffast-math -fvariable-expansion-in-unroller -maltivec -fdump-rtl-loop2\" } */\n \n #include \"altivec.h\"\n extern void abort (void);"}, {"sha": "e6460ada469be482d6c923ef47b8e878cda66845", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1062,6 +1062,8 @@ decode_d_option (const char *arg)\n \tbreak;\n       case 'D':\t/* These are handled by the preprocessor.  */\n       case 'I':\n+      case 'M':\n+      case 'N':\n \tbreak;\n       case 'H':\n \tsetup_core_dumping();"}, {"sha": "1d5099ae05fa8071cc6eceec41e820938a20fd85", "filename": "gcc/tracer.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -378,8 +378,10 @@ gate_tracer (void)\n   return (optimize > 0 && flag_tracer && flag_reorder_blocks);\n }\n \n-struct tree_opt_pass pass_tracer =\n+struct gimple_opt_pass pass_tracer =\n {\n+ {\n+  GIMPLE_PASS,\n   \"tracer\",                             /* name */\n   gate_tracer,                          /* gate */\n   tracer,                               /* execute */\n@@ -393,6 +395,6 @@ struct tree_opt_pass pass_tracer =\n   0,                                    /* todo_flags_start */\n   TODO_dump_func\n     | TODO_update_ssa\n-    | TODO_verify_ssa,                  /* todo_flags_finish */\n-  'T'                                   /* letter */\n+    | TODO_verify_ssa                   /* todo_flags_finish */\n+ }\n };"}, {"sha": "c4b9bfff84904fe3f2fc4442f4a3b2a598da0325", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -212,8 +212,10 @@ execute_build_cfg (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_build_cfg =\n+struct gimple_opt_pass pass_build_cfg =\n {\n+ {\n+  GIMPLE_PASS,\n   \"cfg\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_build_cfg,\t\t\t/* execute */\n@@ -225,8 +227,8 @@ struct tree_opt_pass pass_build_cfg =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts | TODO_cleanup_cfg,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_verify_stmts | TODO_cleanup_cfg\t/* todo_flags_finish */\n+ }\n };\n \n /* Search the CFG for any computed gotos.  If found, factor them to a\n@@ -1933,8 +1935,10 @@ remove_useless_stmts (void)\n }\n \n \n-struct tree_opt_pass pass_remove_useless_stmts =\n+struct gimple_opt_pass pass_remove_useless_stmts =\n {\n+ {\n+  GIMPLE_PASS,\n   \"useless\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   remove_useless_stmts,\t\t\t/* execute */\n@@ -1946,8 +1950,8 @@ struct tree_opt_pass pass_remove_useless_stmts =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Remove PHI nodes associated with basic block BB and all edges out of BB.  */\n@@ -6898,8 +6902,10 @@ split_critical_edges (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_split_crit_edges =\n+struct gimple_opt_pass pass_split_crit_edges =\n {\n+ {\n+  GIMPLE_PASS,\n   \"crited\",                          /* name */\n   NULL,                          /* gate */\n   split_critical_edges,          /* execute */\n@@ -6911,8 +6917,8 @@ struct tree_opt_pass pass_split_crit_edges =\n   PROP_no_crit_edges,            /* properties_provided */\n   0,                             /* properties_destroyed */\n   0,                             /* todo_flags_start */\n-  TODO_dump_func,                /* todo_flags_finish */\n-  0                              /* letter */\n+  TODO_dump_func                 /* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -7068,8 +7074,10 @@ extract_true_false_edges_from_block (basic_block b,\n     }\n }\n \n-struct tree_opt_pass pass_warn_function_return =\n+struct gimple_opt_pass pass_warn_function_return =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_warn_function_return,\t\t/* execute */\n@@ -7081,8 +7089,8 @@ struct tree_opt_pass pass_warn_function_return =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Emit noreturn warnings.  */\n@@ -7100,8 +7108,10 @@ execute_warn_function_noreturn (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_warn_function_noreturn =\n+struct gimple_opt_pass pass_warn_function_noreturn =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_warn_function_noreturn,\t/* execute */\n@@ -7113,6 +7123,6 @@ struct tree_opt_pass pass_warn_function_noreturn =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "8970a9b96eb477d6cfc2d64eca46af5e54b310a5", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -930,7 +930,10 @@ gate_merge_phi (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_merge_phi = {\n+struct gimple_opt_pass pass_merge_phi = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"mergephi\",\t\t\t/* name */\n   gate_merge_phi,\t\t/* gate */\n   merge_phi_nodes,\t\t/* execute */\n@@ -943,6 +946,6 @@ struct tree_opt_pass pass_merge_phi = {\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n-  | TODO_verify_ssa,\n-  0\t\t\t\t/* letter */\n+  | TODO_verify_ssa\n+ }\n };"}, {"sha": "4703e78d22d655da416858946bafa363459c141f", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1534,8 +1534,10 @@ tree_lower_complex (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_lower_complex = \n+struct gimple_opt_pass pass_lower_complex = \n {\n+ {\n+  GIMPLE_PASS,\n   \"cplxlower\",\t\t\t\t/* name */\n   0,\t\t\t\t\t/* gate */\n   tree_lower_complex,\t\t\t/* execute */\n@@ -1550,8 +1552,8 @@ struct tree_opt_pass pass_lower_complex =\n   TODO_dump_func\n     | TODO_ggc_collect\n     | TODO_update_ssa\n-    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_stmts\t \t\t/* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -1582,8 +1584,10 @@ gate_no_optimization (void)\n   return optimize == 0 || sorrycount || errorcount;\n }\n \n-struct tree_opt_pass pass_lower_complex_O0 = \n+struct gimple_opt_pass pass_lower_complex_O0 = \n {\n+ {\n+  GIMPLE_PASS,\n   \"cplxlower0\",\t\t\t\t/* name */\n   gate_no_optimization,\t\t\t/* gate */\n   tree_lower_complex_O0,\t\t/* execute */\n@@ -1597,5 +1601,5 @@ struct tree_opt_pass pass_lower_complex_O0 =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\n     | TODO_verify_stmts,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+ }\n };"}, {"sha": "23e3ba7919a3ddb66b547912adb9ae1776505c1c", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -96,8 +96,10 @@ find_referenced_vars (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_referenced_vars =\n+struct gimple_opt_pass pass_referenced_vars =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   find_referenced_vars,\t\t\t/* execute */\n@@ -109,8 +111,8 @@ struct tree_opt_pass pass_referenced_vars =\n   PROP_referenced_vars,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "bc017738efb967921504a1bca7d2249c5acef1b1", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -831,7 +831,7 @@ static const struct dump_option_value_info dump_options[] =\n \n unsigned int\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       int flags, int letter)\n+\t       int flags)\n {\n   static int next_dump = FIRST_AUTO_NUMBERED_DUMP;\n   int num = next_dump++;\n@@ -855,7 +855,6 @@ dump_register (const char *suffix, const char *swtch, const char *glob,\n   extra_dump_files[this].glob = glob;\n   extra_dump_files[this].flags = flags;\n   extra_dump_files[this].num = num;\n-  extra_dump_files[this].letter = letter;\n \n   return this + TDI_end;\n }"}, {"sha": "72c2868c857142249b945404c0889621915a65fb", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -94,7 +94,7 @@ extern void debug_function (tree, int);\n extern int dump_flag (dump_info_p, int, const_tree);\n \n extern unsigned int dump_register (const char *, const char *, const char *, \n-\t\t\t\t   int, int);\n+\t\t\t\t   int);\n \n \n #endif /* ! GCC_TREE_DUMP_H */"}, {"sha": "06e4b5a9d07b1df2e4f9aac06d696adacd287e9f", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1725,8 +1725,10 @@ lower_eh_constructs (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_lower_eh =\n+struct gimple_opt_pass pass_lower_eh =\n {\n+ {\n+  GIMPLE_PASS,\n   \"eh\",\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   lower_eh_constructs,\t\t\t/* execute */\n@@ -1738,8 +1740,8 @@ struct tree_opt_pass pass_lower_eh =\n   PROP_gimple_leh,\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n \f\n@@ -2244,8 +2246,10 @@ refactor_eh (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_refactor_eh =\n+struct gimple_opt_pass pass_refactor_eh =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ehopt\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   refactor_eh,\t\t\t\t/* execute */\n@@ -2257,6 +2261,6 @@ struct tree_opt_pass pass_refactor_eh =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "5c285efba55d59409446837ed7d242f5fdb1c2fe", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1160,8 +1160,10 @@ gate_tree_if_conversion (void)\n   return flag_tree_vectorize != 0;\n }\n \n-struct tree_opt_pass pass_if_conversion =\n+struct gimple_opt_pass pass_if_conversion =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ifcvt\",\t\t\t\t/* name */\n   gate_tree_if_conversion,\t\t/* gate */\n   main_tree_if_conversion,\t\t/* execute */\n@@ -1173,7 +1175,7 @@ struct tree_opt_pass pass_if_conversion =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops | TODO_verify_stmts | TODO_verify_flow,\t\n+  TODO_dump_func | TODO_verify_loops | TODO_verify_stmts | TODO_verify_flow\n                                         /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+ }\n };"}, {"sha": "efb315b06070b9a9207e624c6c9b091f27093962", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2298,8 +2298,10 @@ rewrite_into_ssa (void)\n }\n \n \n-struct tree_opt_pass pass_build_ssa = \n+struct gimple_opt_pass pass_build_ssa = \n {\n+ {\n+  GIMPLE_PASS,\n   \"ssa\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   rewrite_into_ssa,\t\t\t/* execute */\n@@ -2313,8 +2315,8 @@ struct tree_opt_pass pass_build_ssa =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func\n     | TODO_verify_ssa\n-    | TODO_remove_unused_locals,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_remove_unused_locals\t\t/* todo_flags_finish */\n+ }\n };\n \n "}, {"sha": "c380854eab59170dc7fe27283b36d5b21f8c3fa6", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1155,8 +1155,10 @@ gate_tree_loop_distribution (void)\n   return flag_tree_loop_distribution != 0;\n }\n \n-struct tree_opt_pass pass_loop_distribution =\n+struct gimple_opt_pass pass_loop_distribution =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ldist\",\t\t\t/* name */\n   gate_tree_loop_distribution,  /* gate */\n   tree_loop_distribution,       /* execute */\n@@ -1168,6 +1170,6 @@ struct tree_opt_pass pass_loop_distribution =\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,            /* todo_flags_finish */\n-  0                             /* letter */  \n+  TODO_dump_func | TODO_verify_loops            /* todo_flags_finish */\n+ }\n };"}, {"sha": "cb0b44936016d55559d1d3bd710939ac968bb693", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1303,8 +1303,10 @@ gate_mudflap (void)\n   return flag_mudflap != 0;\n }\n \n-struct tree_opt_pass pass_mudflap_1 = \n+struct gimple_opt_pass pass_mudflap_1 = \n {\n+ {\n+  GIMPLE_PASS,\n   \"mudflap1\",                           /* name */\n   gate_mudflap,                         /* gate */\n   execute_mudflap_function_decls,       /* execute */\n@@ -1316,12 +1318,14 @@ struct tree_opt_pass pass_mudflap_1 =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func,                       /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_mudflap_2 = \n+struct gimple_opt_pass pass_mudflap_2 = \n {\n+ {\n+  GIMPLE_PASS,\n   \"mudflap2\",                           /* name */\n   gate_mudflap,                         /* gate */\n   execute_mudflap_function_ops,         /* execute */\n@@ -1334,8 +1338,8 @@ struct tree_opt_pass pass_mudflap_2 =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_verify_flow | TODO_verify_stmts\n-  | TODO_dump_func,                     /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_dump_func                      /* todo_flags_finish */\n+ }\n };\n \n #include \"gt-tree-mudflap.h\""}, {"sha": "8d1ae7519b316b1ccf5512da59900668f16fcfa1", "filename": "gcc/tree-nomudflap.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-nomudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-nomudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nomudflap.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -90,8 +90,10 @@ gate_mudflap (void)\n   return flag_mudflap != 0;\n }\n \n-struct tree_opt_pass pass_mudflap_1 = \n+struct gimple_opt_pass pass_mudflap_1 = \n {\n+ {\n+  GIMPLE_PASS,\n   \"mudflap1\",\t\t\t\t/* name */\n   gate_mudflap,                         /* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -103,12 +105,14 @@ struct tree_opt_pass pass_mudflap_1 =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_mudflap_2 = \n+struct gimple_opt_pass pass_mudflap_2 = \n {\n+ {\n+  GIMPLE_PASS,\n   \"mudflap2\",\t\t\t\t/* name */\n   gate_mudflap,                         /* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -120,8 +124,8 @@ struct tree_opt_pass pass_mudflap_2 =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n /* Instead of:"}, {"sha": "7330d2896b5e952fce6652bea2f37a3c1e85b71e", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -221,8 +221,10 @@ tree_nrv (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_nrv = \n+struct gimple_opt_pass pass_nrv = \n {\n+ {\n+  GIMPLE_PASS,\n   \"nrv\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   tree_nrv,\t\t\t\t/* execute */\n@@ -234,8 +236,8 @@ struct tree_opt_pass pass_nrv =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Determine (pessimistically) whether DEST is available for NRV\n@@ -312,8 +314,10 @@ execute_return_slot_opt (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_return_slot = \n+struct gimple_opt_pass pass_return_slot = \n {\n+ {\n+  GIMPLE_PASS,\n   \"retslot\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_return_slot_opt,\t\t/* execute */\n@@ -325,6 +329,6 @@ struct tree_opt_pass pass_return_slot =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "bc99ae79e49cdecf053e3bf216fe3b632be1bafd", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1063,8 +1063,10 @@ compute_object_sizes (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_object_sizes =\n+struct gimple_opt_pass pass_object_sizes =\n {\n+ {\n+  GIMPLE_PASS,\n   \"objsz\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   compute_object_sizes,\t\t\t/* execute */\n@@ -1076,6 +1078,6 @@ struct tree_opt_pass pass_object_sizes =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "b6a9b93ef2812f0aefefe0530ac39763c95dbcff", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -61,8 +61,10 @@ gate_all_optimizations (void)\n \t  && (!(errorcount || sorrycount) || gimple_in_ssa_p (cfun)));\n }\n \n-struct tree_opt_pass pass_all_optimizations =\n+struct gimple_opt_pass pass_all_optimizations =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   gate_all_optimizations,\t\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -74,8 +76,8 @@ struct tree_opt_pass pass_all_optimizations =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n@@ -87,8 +89,10 @@ gate_all_early_local_passes (void)\n   return (!errorcount && !sorrycount);\n }\n \n-struct tree_opt_pass pass_early_local_passes =\n+struct simple_ipa_opt_pass pass_early_local_passes =\n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"early_local_cleanups\",\t\t/* name */\n   gate_all_early_local_passes,\t\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -100,8 +104,8 @@ struct tree_opt_pass pass_early_local_passes =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_remove_functions,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_remove_functions\t \t\t/* todo_flags_finish */\n+ }\n };\n \n static unsigned int\n@@ -122,8 +126,10 @@ gate_all_early_optimizations (void)\n \t  && !(errorcount || sorrycount));\n }\n \n-struct tree_opt_pass pass_all_early_optimizations =\n+struct gimple_opt_pass pass_all_early_optimizations =\n {\n+ {\n+  GIMPLE_PASS,\n   \"early_optimizations\",\t\t/* name */\n   gate_all_early_optimizations,\t\t/* gate */\n   execute_early_local_optimizations,\t/* execute */\n@@ -135,8 +141,8 @@ struct tree_opt_pass pass_all_early_optimizations =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Pass: cleanup the CFG just before expanding trees to RTL.\n@@ -151,8 +157,10 @@ execute_cleanup_cfg_pre_ipa (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cleanup_cfg =\n+struct gimple_opt_pass pass_cleanup_cfg =\n {\n+ {\n+  GIMPLE_PASS,\n   \"cleanup_cfg\",\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_cleanup_cfg_pre_ipa,\t\t/* execute */\n@@ -164,8 +172,8 @@ struct tree_opt_pass pass_cleanup_cfg =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n \n@@ -184,8 +192,10 @@ execute_cleanup_cfg_post_optimizing (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n+struct gimple_opt_pass pass_cleanup_cfg_post_optimizing =\n {\n+ {\n+  GIMPLE_PASS,\n   \"final_cleanup\",\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_cleanup_cfg_post_optimizing,\t/* execute */\n@@ -197,8 +207,8 @@ struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Pass: do the actions required to finish with tree-ssa optimization\n@@ -216,8 +226,10 @@ execute_free_datastructures (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_free_datastructures =\n+struct gimple_opt_pass pass_free_datastructures =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_free_datastructures,\t\t\t/* execute */\n@@ -229,8 +241,8 @@ struct tree_opt_pass pass_free_datastructures =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n /* Pass: free cfg annotations.  */\n \n@@ -243,8 +255,10 @@ execute_free_cfg_annotations (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_free_cfg_annotations =\n+struct gimple_opt_pass pass_free_cfg_annotations =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_free_cfg_annotations,\t\t/* execute */\n@@ -256,8 +270,8 @@ struct tree_opt_pass pass_free_cfg_annotations =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Pass: fixup_cfg.  IPA passes, compilation of earlier functions or inlining\n@@ -330,8 +344,10 @@ gate_init_datastructures (void)\n   return (optimize >= 1);\n }\n \n-struct tree_opt_pass pass_init_datastructures =\n+struct gimple_opt_pass pass_init_datastructures =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   gate_init_datastructures,\t\t/* gate */\n   execute_init_datastructures,\t\t/* execute */\n@@ -343,8 +359,8 @@ struct tree_opt_pass pass_init_datastructures =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };\n \n void\n@@ -358,7 +374,7 @@ tree_lowering_passes (tree fn)\n   bitmap_obstack_initialize (NULL);\n   execute_pass_list (all_lowering_passes);\n   if (optimize && cgraph_global_info_ready)\n-    execute_pass_list (pass_early_local_passes.sub);\n+    execute_pass_list (pass_early_local_passes.pass.sub);\n   free_dominance_info (CDI_POST_DOMINATORS);\n   free_dominance_info (CDI_DOMINATORS);\n   compact_blocks ();"}, {"sha": "12ce1b9c6927372671b3dfd8dc1897bad41d80d8", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1466,8 +1466,10 @@ rewrite_out_of_ssa (void)\n \n /* Define the parameters of the out of SSA pass.  */\n \n-struct tree_opt_pass pass_del_ssa = \n+struct gimple_opt_pass pass_del_ssa = \n {\n+ {\n+  GIMPLE_PASS,\n   \"optimized\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   rewrite_out_of_ssa,\t\t\t/* execute */\n@@ -1483,6 +1485,6 @@ struct tree_opt_pass pass_del_ssa =\n     | TODO_verify_stmts,\t\t/* todo_flags_start */\n   TODO_dump_func\n   | TODO_ggc_collect\n-  | TODO_remove_unused_locals,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_remove_unused_locals\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "9c698cae42d9db9f6b5bcb6fe6e6eaf1eee2bc50", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 240, "deletions": 217, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -88,9 +88,16 @@ extern const char *dump_file_name;\n /* Return the dump_file_info for the given phase.  */\n extern struct dump_file_info *get_dump_file_info (enum tree_dump_index);\n \n-/* Describe one pass.  */\n-struct tree_opt_pass\n+/* Describe one pass; this is the common part shared across different pass\n+   types.  */\n+struct opt_pass\n {\n+  /* Optimization pass type.  */\n+  enum opt_pass_type {\n+    GIMPLE_PASS,\n+    RTL_PASS,\n+    SIMPLE_IPA_PASS\n+  } type;\n   /* Terse name of the pass used as a fragment of the dump file name.  */\n   const char *name;\n \n@@ -104,10 +111,10 @@ struct tree_opt_pass\n   unsigned int (*execute) (void);\n \n   /* A list of sub-passes to run, dependent on gate predicate.  */\n-  struct tree_opt_pass *sub;\n+  struct opt_pass *sub;\n \n   /* Next in the list of passes to run, independent of gate predicate.  */\n-  struct tree_opt_pass *next;\n+  struct opt_pass *next;\n \n   /* Static pass number, used as a fragment of the dump file name.  */\n   int static_pass_number;\n@@ -124,9 +131,25 @@ struct tree_opt_pass\n   /* Flags indicating common sets things to do before and after.  */\n   unsigned int todo_flags_start;\n   unsigned int todo_flags_finish;\n+};\n+\n+/* Description or GIMPLE pass.  */\n+struct gimple_opt_pass\n+{\n+  struct opt_pass pass;\n+};\n \n-  /* Letter for RTL dumps.  */\n-  char letter;\n+/* Decription of RTL pass.  */\n+struct rtl_opt_pass\n+{\n+  struct opt_pass pass;\n+};\n+\n+/* Description if simple IPA pass.  Simple IPA passes have just one execute\n+   hook.  */\n+struct simple_ipa_opt_pass\n+{\n+  struct opt_pass pass;\n };\n \n /* Define a tree dump switch.  */\n@@ -240,222 +263,222 @@ struct dump_file_info\n \n extern void tree_lowering_passes (tree decl);\n \n-extern struct tree_opt_pass pass_mudflap_1;\n-extern struct tree_opt_pass pass_mudflap_2;\n-extern struct tree_opt_pass pass_remove_useless_stmts;\n-extern struct tree_opt_pass pass_lower_cf;\n-extern struct tree_opt_pass pass_refactor_eh;\n-extern struct tree_opt_pass pass_lower_eh;\n-extern struct tree_opt_pass pass_build_cfg;\n-extern struct tree_opt_pass pass_tree_profile;\n-extern struct tree_opt_pass pass_early_tree_profile;\n-extern struct tree_opt_pass pass_cleanup_cfg;\n-extern struct tree_opt_pass pass_referenced_vars;\n-extern struct tree_opt_pass pass_sra;\n-extern struct tree_opt_pass pass_sra_early;\n-extern struct tree_opt_pass pass_tail_recursion;\n-extern struct tree_opt_pass pass_tail_calls;\n-extern struct tree_opt_pass pass_tree_loop;\n-extern struct tree_opt_pass pass_tree_loop_init;\n-extern struct tree_opt_pass pass_lim;\n-extern struct tree_opt_pass pass_tree_unswitch;\n-extern struct tree_opt_pass pass_predcom;\n-extern struct tree_opt_pass pass_iv_canon;\n-extern struct tree_opt_pass pass_scev_cprop;\n-extern struct tree_opt_pass pass_empty_loop;\n-extern struct tree_opt_pass pass_record_bounds;\n-extern struct tree_opt_pass pass_if_conversion;\n-extern struct tree_opt_pass pass_loop_distribution;\n-extern struct tree_opt_pass pass_vectorize;\n-extern struct tree_opt_pass pass_complete_unroll;\n-extern struct tree_opt_pass pass_parallelize_loops;\n-extern struct tree_opt_pass pass_loop_prefetch;\n-extern struct tree_opt_pass pass_iv_optimize;\n-extern struct tree_opt_pass pass_tree_loop_done;\n-extern struct tree_opt_pass pass_ch;\n-extern struct tree_opt_pass pass_ccp;\n-extern struct tree_opt_pass pass_phi_only_cprop;\n-extern struct tree_opt_pass pass_build_ssa;\n-extern struct tree_opt_pass pass_del_ssa;\n-extern struct tree_opt_pass pass_build_alias;\n-extern struct tree_opt_pass pass_dominator;\n-extern struct tree_opt_pass pass_dce;\n-extern struct tree_opt_pass pass_dce_loop;\n-extern struct tree_opt_pass pass_cd_dce;\n-extern struct tree_opt_pass pass_merge_phi;\n-extern struct tree_opt_pass pass_split_crit_edges;\n-extern struct tree_opt_pass pass_pre;\n-extern struct tree_opt_pass pass_profile;\n-extern struct tree_opt_pass pass_lower_complex_O0;\n-extern struct tree_opt_pass pass_lower_complex;\n-extern struct tree_opt_pass pass_lower_vector;\n-extern struct tree_opt_pass pass_lower_vector_ssa;\n-extern struct tree_opt_pass pass_lower_omp;\n-extern struct tree_opt_pass pass_expand_omp;\n-extern struct tree_opt_pass pass_expand_omp_ssa;\n-extern struct tree_opt_pass pass_object_sizes;\n-extern struct tree_opt_pass pass_fold_builtins;\n-extern struct tree_opt_pass pass_stdarg;\n-extern struct tree_opt_pass pass_early_warn_uninitialized;\n-extern struct tree_opt_pass pass_late_warn_uninitialized;\n-extern struct tree_opt_pass pass_cse_reciprocals;\n-extern struct tree_opt_pass pass_cse_sincos;\n-extern struct tree_opt_pass pass_convert_to_rsqrt;\n-extern struct tree_opt_pass pass_warn_function_return;\n-extern struct tree_opt_pass pass_warn_function_noreturn;\n-extern struct tree_opt_pass pass_cselim;\n-extern struct tree_opt_pass pass_phiopt;\n-extern struct tree_opt_pass pass_forwprop;\n-extern struct tree_opt_pass pass_phiprop;\n-extern struct tree_opt_pass pass_tree_ifcombine;\n-extern struct tree_opt_pass pass_dse;\n-extern struct tree_opt_pass pass_simple_dse;\n-extern struct tree_opt_pass pass_nrv;\n-extern struct tree_opt_pass pass_mark_used_blocks;\n-extern struct tree_opt_pass pass_rename_ssa_copies;\n-extern struct tree_opt_pass pass_expand;\n-extern struct tree_opt_pass pass_rest_of_compilation;\n-extern struct tree_opt_pass pass_sink_code;\n-extern struct tree_opt_pass pass_fre;\n-extern struct tree_opt_pass pass_linear_transform;\n-extern struct tree_opt_pass pass_check_data_deps;\n-extern struct tree_opt_pass pass_copy_prop;\n-extern struct tree_opt_pass pass_store_ccp;\n-extern struct tree_opt_pass pass_vrp;\n-extern struct tree_opt_pass pass_create_structure_vars;\n-extern struct tree_opt_pass pass_uncprop;\n-extern struct tree_opt_pass pass_return_slot;\n-extern struct tree_opt_pass pass_reassoc;\n-extern struct tree_opt_pass pass_rebuild_cgraph_edges;\n-extern struct tree_opt_pass pass_build_cgraph_edges;\n-extern struct tree_opt_pass pass_reset_cc_flags;\n+extern struct gimple_opt_pass pass_mudflap_1;\n+extern struct gimple_opt_pass pass_mudflap_2;\n+extern struct gimple_opt_pass pass_remove_useless_stmts;\n+extern struct gimple_opt_pass pass_lower_cf;\n+extern struct gimple_opt_pass pass_refactor_eh;\n+extern struct gimple_opt_pass pass_lower_eh;\n+extern struct gimple_opt_pass pass_build_cfg;\n+extern struct gimple_opt_pass pass_tree_profile;\n+extern struct gimple_opt_pass pass_early_tree_profile;\n+extern struct gimple_opt_pass pass_cleanup_cfg;\n+extern struct gimple_opt_pass pass_referenced_vars;\n+extern struct gimple_opt_pass pass_sra;\n+extern struct gimple_opt_pass pass_sra_early;\n+extern struct gimple_opt_pass pass_tail_recursion;\n+extern struct gimple_opt_pass pass_tail_calls;\n+extern struct gimple_opt_pass pass_tree_loop;\n+extern struct gimple_opt_pass pass_tree_loop_init;\n+extern struct gimple_opt_pass pass_lim;\n+extern struct gimple_opt_pass pass_tree_unswitch;\n+extern struct gimple_opt_pass pass_predcom;\n+extern struct gimple_opt_pass pass_iv_canon;\n+extern struct gimple_opt_pass pass_scev_cprop;\n+extern struct gimple_opt_pass pass_empty_loop;\n+extern struct gimple_opt_pass pass_record_bounds;\n+extern struct gimple_opt_pass pass_if_conversion;\n+extern struct gimple_opt_pass pass_loop_distribution;\n+extern struct gimple_opt_pass pass_vectorize;\n+extern struct gimple_opt_pass pass_complete_unroll;\n+extern struct gimple_opt_pass pass_parallelize_loops;\n+extern struct gimple_opt_pass pass_loop_prefetch;\n+extern struct gimple_opt_pass pass_iv_optimize;\n+extern struct gimple_opt_pass pass_tree_loop_done;\n+extern struct gimple_opt_pass pass_ch;\n+extern struct gimple_opt_pass pass_ccp;\n+extern struct gimple_opt_pass pass_phi_only_cprop;\n+extern struct gimple_opt_pass pass_build_ssa;\n+extern struct gimple_opt_pass pass_del_ssa;\n+extern struct gimple_opt_pass pass_build_alias;\n+extern struct gimple_opt_pass pass_dominator;\n+extern struct gimple_opt_pass pass_dce;\n+extern struct gimple_opt_pass pass_dce_loop;\n+extern struct gimple_opt_pass pass_cd_dce;\n+extern struct gimple_opt_pass pass_merge_phi;\n+extern struct gimple_opt_pass pass_split_crit_edges;\n+extern struct gimple_opt_pass pass_pre;\n+extern struct gimple_opt_pass pass_profile;\n+extern struct gimple_opt_pass pass_lower_complex_O0;\n+extern struct gimple_opt_pass pass_lower_complex;\n+extern struct gimple_opt_pass pass_lower_vector;\n+extern struct gimple_opt_pass pass_lower_vector_ssa;\n+extern struct gimple_opt_pass pass_lower_omp;\n+extern struct gimple_opt_pass pass_expand_omp;\n+extern struct gimple_opt_pass pass_expand_omp_ssa;\n+extern struct gimple_opt_pass pass_object_sizes;\n+extern struct gimple_opt_pass pass_fold_builtins;\n+extern struct gimple_opt_pass pass_stdarg;\n+extern struct gimple_opt_pass pass_early_warn_uninitialized;\n+extern struct gimple_opt_pass pass_late_warn_uninitialized;\n+extern struct gimple_opt_pass pass_cse_reciprocals;\n+extern struct gimple_opt_pass pass_cse_sincos;\n+extern struct gimple_opt_pass pass_convert_to_rsqrt;\n+extern struct gimple_opt_pass pass_warn_function_return;\n+extern struct gimple_opt_pass pass_warn_function_noreturn;\n+extern struct gimple_opt_pass pass_cselim;\n+extern struct gimple_opt_pass pass_phiopt;\n+extern struct gimple_opt_pass pass_forwprop;\n+extern struct gimple_opt_pass pass_phiprop;\n+extern struct gimple_opt_pass pass_tree_ifcombine;\n+extern struct gimple_opt_pass pass_dse;\n+extern struct gimple_opt_pass pass_simple_dse;\n+extern struct gimple_opt_pass pass_nrv;\n+extern struct gimple_opt_pass pass_mark_used_blocks;\n+extern struct gimple_opt_pass pass_rename_ssa_copies;\n+extern struct gimple_opt_pass pass_expand;\n+extern struct gimple_opt_pass pass_rest_of_compilation;\n+extern struct gimple_opt_pass pass_sink_code;\n+extern struct gimple_opt_pass pass_fre;\n+extern struct gimple_opt_pass pass_linear_transform;\n+extern struct gimple_opt_pass pass_check_data_deps;\n+extern struct gimple_opt_pass pass_copy_prop;\n+extern struct gimple_opt_pass pass_store_ccp;\n+extern struct gimple_opt_pass pass_vrp;\n+extern struct gimple_opt_pass pass_create_structure_vars;\n+extern struct gimple_opt_pass pass_uncprop;\n+extern struct gimple_opt_pass pass_return_slot;\n+extern struct gimple_opt_pass pass_reassoc;\n+extern struct gimple_opt_pass pass_rebuild_cgraph_edges;\n+extern struct gimple_opt_pass pass_build_cgraph_edges;\n+extern struct gimple_opt_pass pass_reset_cc_flags;\n \n /* IPA Passes */\n-extern struct tree_opt_pass pass_ipa_matrix_reorg;\n-extern struct tree_opt_pass pass_ipa_cp;\n-extern struct tree_opt_pass pass_ipa_inline;\n-extern struct tree_opt_pass pass_ipa_early_inline;\n-extern struct tree_opt_pass pass_ipa_reference;\n-extern struct tree_opt_pass pass_ipa_pure_const;\n-extern struct tree_opt_pass pass_ipa_type_escape;\n-extern struct tree_opt_pass pass_ipa_pta;\n-extern struct tree_opt_pass pass_ipa_struct_reorg;\n-extern struct tree_opt_pass pass_early_local_passes;\n-extern struct tree_opt_pass pass_ipa_increase_alignment;\n-extern struct tree_opt_pass pass_ipa_function_and_variable_visibility;\n-\n-extern struct tree_opt_pass pass_all_optimizations;\n-extern struct tree_opt_pass pass_cleanup_cfg_post_optimizing;\n-extern struct tree_opt_pass pass_free_cfg_annotations;\n-extern struct tree_opt_pass pass_free_datastructures;\n-extern struct tree_opt_pass pass_init_datastructures;\n-extern struct tree_opt_pass pass_fixup_cfg;\n-\n-extern struct tree_opt_pass pass_init_function;\n-extern struct tree_opt_pass pass_jump;\n-extern struct tree_opt_pass pass_rtl_eh;\n-extern struct tree_opt_pass pass_initial_value_sets;\n-extern struct tree_opt_pass pass_unshare_all_rtl;\n-extern struct tree_opt_pass pass_instantiate_virtual_regs;\n-extern struct tree_opt_pass pass_rtl_fwprop;\n-extern struct tree_opt_pass pass_rtl_fwprop_addr;\n-extern struct tree_opt_pass pass_jump2;\n-extern struct tree_opt_pass pass_lower_subreg;\n-extern struct tree_opt_pass pass_cse;\n-extern struct tree_opt_pass pass_fast_rtl_dce;\n-extern struct tree_opt_pass pass_ud_rtl_dce;\n-extern struct tree_opt_pass pass_rtl_dce;\n-extern struct tree_opt_pass pass_rtl_dse1;\n-extern struct tree_opt_pass pass_rtl_dse2;\n-extern struct tree_opt_pass pass_rtl_dse3;\n-extern struct tree_opt_pass pass_gcse;\n-extern struct tree_opt_pass pass_jump_bypass;\n-extern struct tree_opt_pass pass_profiling;\n-extern struct tree_opt_pass pass_rtl_ifcvt;\n-extern struct tree_opt_pass pass_tracer;\n-\n-extern struct tree_opt_pass pass_into_cfg_layout_mode;\n-extern struct tree_opt_pass pass_outof_cfg_layout_mode;\n-\n-extern struct tree_opt_pass pass_loop2;\n-extern struct tree_opt_pass pass_rtl_loop_init;\n-extern struct tree_opt_pass pass_rtl_move_loop_invariants;\n-extern struct tree_opt_pass pass_rtl_unswitch;\n-extern struct tree_opt_pass pass_rtl_unroll_and_peel_loops;\n-extern struct tree_opt_pass pass_rtl_doloop;\n-extern struct tree_opt_pass pass_rtl_loop_done;\n-\n-extern struct tree_opt_pass pass_web;\n-extern struct tree_opt_pass pass_cse2;\n-extern struct tree_opt_pass pass_df_initialize_opt;\n-extern struct tree_opt_pass pass_df_initialize_no_opt;\n-extern struct tree_opt_pass pass_regclass_init;\n-extern struct tree_opt_pass pass_subregs_of_mode_init;\n-extern struct tree_opt_pass pass_subregs_of_mode_finish;\n-extern struct tree_opt_pass pass_inc_dec;\n-extern struct tree_opt_pass pass_stack_ptr_mod;\n-extern struct tree_opt_pass pass_initialize_regs;\n-extern struct tree_opt_pass pass_combine;\n-extern struct tree_opt_pass pass_if_after_combine;\n-extern struct tree_opt_pass pass_partition_blocks;\n-extern struct tree_opt_pass pass_match_asm_constraints;\n-extern struct tree_opt_pass pass_regmove;\n-extern struct tree_opt_pass pass_split_all_insns;\n-extern struct tree_opt_pass pass_lower_subreg2;\n-extern struct tree_opt_pass pass_mode_switching;\n-extern struct tree_opt_pass pass_see;\n-extern struct tree_opt_pass pass_sms;\n-extern struct tree_opt_pass pass_sched;\n-extern struct tree_opt_pass pass_local_alloc;\n-extern struct tree_opt_pass pass_global_alloc;\n-extern struct tree_opt_pass pass_postreload;\n-extern struct tree_opt_pass pass_clean_state;\n-extern struct tree_opt_pass pass_branch_prob;\n-extern struct tree_opt_pass pass_value_profile_transformations;\n-extern struct tree_opt_pass pass_postreload_cse;\n-extern struct tree_opt_pass pass_gcse2;\n-extern struct tree_opt_pass pass_split_after_reload;\n-extern struct tree_opt_pass pass_branch_target_load_optimize1;\n-extern struct tree_opt_pass pass_thread_prologue_and_epilogue;\n-extern struct tree_opt_pass pass_stack_adjustments;\n-extern struct tree_opt_pass pass_peephole2;\n-extern struct tree_opt_pass pass_if_after_reload;\n-extern struct tree_opt_pass pass_regrename;\n-extern struct tree_opt_pass pass_cprop_hardreg;\n-extern struct tree_opt_pass pass_reorder_blocks;\n-extern struct tree_opt_pass pass_branch_target_load_optimize2;\n-extern struct tree_opt_pass pass_leaf_regs;\n-extern struct tree_opt_pass pass_split_before_sched2;\n-extern struct tree_opt_pass pass_sched2;\n-extern struct tree_opt_pass pass_stack_regs;\n-extern struct tree_opt_pass pass_stack_regs_run;\n-extern struct tree_opt_pass pass_df_finish;\n-extern struct tree_opt_pass pass_compute_alignments;\n-extern struct tree_opt_pass pass_duplicate_computed_gotos;\n-extern struct tree_opt_pass pass_variable_tracking;\n-extern struct tree_opt_pass pass_free_cfg;\n-extern struct tree_opt_pass pass_machine_reorg;\n-extern struct tree_opt_pass pass_cleanup_barriers;\n-extern struct tree_opt_pass pass_delay_slots;\n-extern struct tree_opt_pass pass_split_for_shorten_branches;\n-extern struct tree_opt_pass pass_split_before_regstack;\n-extern struct tree_opt_pass pass_convert_to_eh_region_ranges;\n-extern struct tree_opt_pass pass_shorten_branches;\n-extern struct tree_opt_pass pass_set_nothrow_function_flags;\n-extern struct tree_opt_pass pass_final;\n-extern struct tree_opt_pass pass_rtl_seqabstr;\n-extern struct tree_opt_pass pass_release_ssa_names;\n-extern struct tree_opt_pass pass_early_inline;\n-extern struct tree_opt_pass pass_inline_parameters;\n-extern struct tree_opt_pass pass_apply_inline;\n-extern struct tree_opt_pass pass_all_early_optimizations;\n-extern struct tree_opt_pass pass_update_address_taken;\n+extern struct simple_ipa_opt_pass pass_ipa_matrix_reorg;\n+extern struct simple_ipa_opt_pass pass_ipa_cp;\n+extern struct simple_ipa_opt_pass pass_ipa_inline;\n+extern struct simple_ipa_opt_pass pass_ipa_early_inline;\n+extern struct simple_ipa_opt_pass pass_ipa_reference;\n+extern struct simple_ipa_opt_pass pass_ipa_pure_const;\n+extern struct simple_ipa_opt_pass pass_ipa_type_escape;\n+extern struct simple_ipa_opt_pass pass_ipa_pta;\n+extern struct simple_ipa_opt_pass pass_ipa_struct_reorg;\n+extern struct simple_ipa_opt_pass pass_early_local_passes;\n+extern struct simple_ipa_opt_pass pass_ipa_increase_alignment;\n+extern struct simple_ipa_opt_pass pass_ipa_function_and_variable_visibility;\n+\n+extern struct gimple_opt_pass pass_all_optimizations;\n+extern struct gimple_opt_pass pass_cleanup_cfg_post_optimizing;\n+extern struct gimple_opt_pass pass_free_cfg_annotations;\n+extern struct gimple_opt_pass pass_free_datastructures;\n+extern struct gimple_opt_pass pass_init_datastructures;\n+extern struct gimple_opt_pass pass_fixup_cfg;\n+\n+extern struct rtl_opt_pass pass_init_function;\n+extern struct rtl_opt_pass pass_jump;\n+extern struct rtl_opt_pass pass_rtl_eh;\n+extern struct rtl_opt_pass pass_initial_value_sets;\n+extern struct rtl_opt_pass pass_unshare_all_rtl;\n+extern struct rtl_opt_pass pass_instantiate_virtual_regs;\n+extern struct rtl_opt_pass pass_rtl_fwprop;\n+extern struct rtl_opt_pass pass_rtl_fwprop_addr;\n+extern struct rtl_opt_pass pass_jump2;\n+extern struct rtl_opt_pass pass_lower_subreg;\n+extern struct rtl_opt_pass pass_cse;\n+extern struct rtl_opt_pass pass_fast_rtl_dce;\n+extern struct rtl_opt_pass pass_ud_rtl_dce;\n+extern struct rtl_opt_pass pass_rtl_dce;\n+extern struct rtl_opt_pass pass_rtl_dse1;\n+extern struct rtl_opt_pass pass_rtl_dse2;\n+extern struct rtl_opt_pass pass_rtl_dse3;\n+extern struct rtl_opt_pass pass_gcse;\n+extern struct rtl_opt_pass pass_jump_bypass;\n+extern struct rtl_opt_pass pass_profiling;\n+extern struct rtl_opt_pass pass_rtl_ifcvt;\n+extern struct gimple_opt_pass pass_tracer;\n+\n+extern struct rtl_opt_pass pass_into_cfg_layout_mode;\n+extern struct rtl_opt_pass pass_outof_cfg_layout_mode;\n+\n+extern struct rtl_opt_pass pass_loop2;\n+extern struct rtl_opt_pass pass_rtl_loop_init;\n+extern struct rtl_opt_pass pass_rtl_move_loop_invariants;\n+extern struct rtl_opt_pass pass_rtl_unswitch;\n+extern struct rtl_opt_pass pass_rtl_unroll_and_peel_loops;\n+extern struct rtl_opt_pass pass_rtl_doloop;\n+extern struct rtl_opt_pass pass_rtl_loop_done;\n+\n+extern struct rtl_opt_pass pass_web;\n+extern struct rtl_opt_pass pass_cse2;\n+extern struct rtl_opt_pass pass_df_initialize_opt;\n+extern struct rtl_opt_pass pass_df_initialize_no_opt;\n+extern struct rtl_opt_pass pass_regclass_init;\n+extern struct rtl_opt_pass pass_subregs_of_mode_init;\n+extern struct rtl_opt_pass pass_subregs_of_mode_finish;\n+extern struct rtl_opt_pass pass_inc_dec;\n+extern struct rtl_opt_pass pass_stack_ptr_mod;\n+extern struct rtl_opt_pass pass_initialize_regs;\n+extern struct rtl_opt_pass pass_combine;\n+extern struct rtl_opt_pass pass_if_after_combine;\n+extern struct rtl_opt_pass pass_partition_blocks;\n+extern struct rtl_opt_pass pass_match_asm_constraints;\n+extern struct rtl_opt_pass pass_regmove;\n+extern struct rtl_opt_pass pass_split_all_insns;\n+extern struct rtl_opt_pass pass_lower_subreg2;\n+extern struct rtl_opt_pass pass_mode_switching;\n+extern struct rtl_opt_pass pass_see;\n+extern struct rtl_opt_pass pass_sms;\n+extern struct rtl_opt_pass pass_sched;\n+extern struct rtl_opt_pass pass_local_alloc;\n+extern struct rtl_opt_pass pass_global_alloc;\n+extern struct rtl_opt_pass pass_postreload;\n+extern struct rtl_opt_pass pass_clean_state;\n+extern struct rtl_opt_pass pass_branch_prob;\n+extern struct rtl_opt_pass pass_value_profile_transformations;\n+extern struct rtl_opt_pass pass_postreload_cse;\n+extern struct rtl_opt_pass pass_gcse2;\n+extern struct rtl_opt_pass pass_split_after_reload;\n+extern struct rtl_opt_pass pass_branch_target_load_optimize1;\n+extern struct rtl_opt_pass pass_thread_prologue_and_epilogue;\n+extern struct rtl_opt_pass pass_stack_adjustments;\n+extern struct rtl_opt_pass pass_peephole2;\n+extern struct rtl_opt_pass pass_if_after_reload;\n+extern struct rtl_opt_pass pass_regrename;\n+extern struct rtl_opt_pass pass_cprop_hardreg;\n+extern struct rtl_opt_pass pass_reorder_blocks;\n+extern struct rtl_opt_pass pass_branch_target_load_optimize2;\n+extern struct rtl_opt_pass pass_leaf_regs;\n+extern struct rtl_opt_pass pass_split_before_sched2;\n+extern struct rtl_opt_pass pass_sched2;\n+extern struct rtl_opt_pass pass_stack_regs;\n+extern struct rtl_opt_pass pass_stack_regs_run;\n+extern struct rtl_opt_pass pass_df_finish;\n+extern struct rtl_opt_pass pass_compute_alignments;\n+extern struct rtl_opt_pass pass_duplicate_computed_gotos;\n+extern struct rtl_opt_pass pass_variable_tracking;\n+extern struct rtl_opt_pass pass_free_cfg;\n+extern struct rtl_opt_pass pass_machine_reorg;\n+extern struct rtl_opt_pass pass_cleanup_barriers;\n+extern struct rtl_opt_pass pass_delay_slots;\n+extern struct rtl_opt_pass pass_split_for_shorten_branches;\n+extern struct rtl_opt_pass pass_split_before_regstack;\n+extern struct rtl_opt_pass pass_convert_to_eh_region_ranges;\n+extern struct rtl_opt_pass pass_shorten_branches;\n+extern struct rtl_opt_pass pass_set_nothrow_function_flags;\n+extern struct rtl_opt_pass pass_final;\n+extern struct rtl_opt_pass pass_rtl_seqabstr;\n+extern struct gimple_opt_pass pass_release_ssa_names;\n+extern struct gimple_opt_pass pass_early_inline;\n+extern struct gimple_opt_pass pass_inline_parameters;\n+extern struct gimple_opt_pass pass_apply_inline;\n+extern struct gimple_opt_pass pass_all_early_optimizations;\n+extern struct gimple_opt_pass pass_update_address_taken;\n \n /* The root of the compilation pass tree, once constructed.  */\n-extern struct tree_opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n+extern struct opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n \n-extern void execute_pass_list (struct tree_opt_pass *);\n-extern void execute_ipa_pass_list (struct tree_opt_pass *);\n+extern void execute_pass_list (struct opt_pass *);\n+extern void execute_ipa_pass_list (struct opt_pass *);\n extern void print_current_pass (FILE *);\n extern void debug_pass (void);\n "}, {"sha": "7a70cefad19d4d7a39155df587bb2c242d4e4da3", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -443,8 +443,10 @@ tree_profiling (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_tree_profile = \n+struct gimple_opt_pass pass_tree_profile = \n {\n+ {\n+  GIMPLE_PASS,\n   \"tree_profile\",\t\t\t/* name */\n   do_tree_profiling,\t\t\t/* gate */\n   tree_profiling,\t\t\t/* execute */\n@@ -456,8 +458,8 @@ struct tree_opt_pass pass_tree_profile =\n   PROP_gimple_leh | PROP_cfg,\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts | TODO_dump_func,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_verify_stmts | TODO_dump_func\t/* todo_flags_finish */\n+ }\n };\n \n struct profile_hooks tree_profile_hooks ="}, {"sha": "752f87da947573f1ddce4b41b7e183d48cca8581", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3680,8 +3680,10 @@ gate_sra (void)\n   return flag_tree_sra != 0;\n }\n \n-struct tree_opt_pass pass_sra_early =\n+struct gimple_opt_pass pass_sra_early =\n {\n+ {\n+  GIMPLE_PASS,\n   \"esra\",\t\t\t\t/* name */\n   gate_sra,\t\t\t\t/* gate */\n   tree_sra_early,\t\t\t/* execute */\n@@ -3696,12 +3698,14 @@ struct tree_opt_pass pass_sra_early =\n   TODO_dump_func\n   | TODO_update_ssa\n   | TODO_ggc_collect\n-  | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_sra =\n+struct gimple_opt_pass pass_sra =\n {\n+ {\n+  GIMPLE_PASS,\n   \"sra\",\t\t\t\t/* name */\n   gate_sra,\t\t\t\t/* gate */\n   tree_sra,\t\t\t\t/* execute */\n@@ -3716,6 +3720,6 @@ struct tree_opt_pass pass_sra =\n   TODO_dump_func\n   | TODO_update_ssa\n   | TODO_ggc_collect\n-  | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "a9ae29fa876c4cf74e091eec19eeb845f9be60e5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4205,8 +4205,10 @@ gate_structure_vars (void)\n   return flag_tree_salias != 0;\n }\n \n-struct tree_opt_pass pass_create_structure_vars = \n+struct gimple_opt_pass pass_create_structure_vars = \n {\n+ {\n+  GIMPLE_PASS,\n   \"salias\",\t\t /* name */\n   gate_structure_vars,\t /* gate */\n   create_structure_vars, /* execute */\n@@ -4218,8 +4220,8 @@ struct tree_opt_pass pass_create_structure_vars =\n   0,\t\t\t /* properties_provided */\n   0,\t\t\t /* properties_destroyed */\n   0,\t\t\t /* todo_flags_start */\n-  TODO_dump_func,\t /* todo_flags_finish */\n-  0\t\t\t /* letter */\n+  TODO_dump_func\t /* todo_flags_finish */\n+ }\n };\n \n /* Reset the call_clobbered flags on our referenced vars.  In\n@@ -4236,8 +4238,10 @@ reset_cc_flags (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_reset_cc_flags =\n+struct gimple_opt_pass pass_reset_cc_flags =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t /* name */\n   NULL,  \t /* gate */\n   reset_cc_flags, /* execute */\n@@ -4249,8 +4253,8 @@ struct tree_opt_pass pass_reset_cc_flags =\n   0,\t\t\t /* properties_provided */\n   0,\t\t\t /* properties_destroyed */\n   0,\t\t\t /* todo_flags_start */\n-  0,         \t         /* todo_flags_finish */\n-  0\t\t\t /* letter */\n+  0         \t         /* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -4260,8 +4264,10 @@ gate_build_alias (void)\n }\n \n \n-struct tree_opt_pass pass_build_alias =\n+struct gimple_opt_pass pass_build_alias =\n {\n+ {\n+  GIMPLE_PASS,\n   \"build_alias\",            /* name */\n   gate_build_alias,         /* gate */\n   NULL,                     /* execute */\n@@ -4273,6 +4279,6 @@ struct tree_opt_pass pass_build_alias =\n   PROP_alias,               /* properties_provided */\n   0,                        /* properties_destroyed */\n   0,                        /* todo_flags_start */\n-  TODO_rebuild_alias,        /* todo_flags_finish */\n-  0                         /* letter */\n+  TODO_rebuild_alias        /* todo_flags_finish */\n+ }\n };"}, {"sha": "2a82c0469995fe95aef25b3a77d51d3eeb5fe001", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1495,8 +1495,10 @@ gate_ccp (void)\n }\n \n \n-struct tree_opt_pass pass_ccp = \n+struct gimple_opt_pass pass_ccp = \n {\n+ {\n+  GIMPLE_PASS,\n   \"ccp\",\t\t\t\t/* name */\n   gate_ccp,\t\t\t\t/* gate */\n   do_ssa_ccp,\t\t\t\t/* execute */\n@@ -1509,8 +1511,8 @@ struct tree_opt_pass pass_ccp =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_ssa\n-  | TODO_verify_stmts | TODO_ggc_collect,/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_stmts | TODO_ggc_collect/* todo_flags_finish */\n+ }\n };\n \n \n@@ -1531,8 +1533,10 @@ gate_store_ccp (void)\n }\n \n \n-struct tree_opt_pass pass_store_ccp = \n+struct gimple_opt_pass pass_store_ccp = \n {\n+ {\n+  GIMPLE_PASS,\n   \"store_ccp\",\t\t\t\t/* name */\n   gate_store_ccp,\t\t\t/* gate */\n   do_ssa_store_ccp,\t\t\t/* execute */\n@@ -1545,8 +1549,8 @@ struct tree_opt_pass pass_store_ccp =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_ssa\n-  | TODO_verify_stmts | TODO_ggc_collect,/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_stmts | TODO_ggc_collect/* todo_flags_finish */\n+ }\n };\n \n /* Given a constant value VAL for bitfield FIELD, and a destination\n@@ -3026,8 +3030,10 @@ execute_fold_all_builtins (void)\n }\n \n \n-struct tree_opt_pass pass_fold_builtins = \n+struct gimple_opt_pass pass_fold_builtins = \n {\n+ {\n+  GIMPLE_PASS,\n   \"fab\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_fold_all_builtins,\t\t/* execute */\n@@ -3041,6 +3047,6 @@ struct tree_opt_pass pass_fold_builtins =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func\n     | TODO_verify_ssa\n-    | TODO_update_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_update_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "bc8a874eeda9ca045e541d60ed48867f8cdda36b", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1062,8 +1062,10 @@ gate_copy_prop (void)\n   return flag_tree_copy_prop != 0;\n }\n \n-struct tree_opt_pass pass_copy_prop =\n+struct gimple_opt_pass pass_copy_prop =\n {\n+ {\n+  GIMPLE_PASS,\n   \"copyprop\",\t\t\t\t/* name */\n   gate_copy_prop,\t\t\t/* gate */\n   execute_copy_prop,\t\t\t/* execute */\n@@ -1079,7 +1081,7 @@ struct tree_opt_pass pass_copy_prop =\n     | TODO_dump_func\n     | TODO_ggc_collect\n     | TODO_verify_ssa\n-    | TODO_update_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_update_ssa\t\t\t/* todo_flags_finish */\n+ }\n };\n "}, {"sha": "46b33143cb025f34528e41919b89b6e59dae9807", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -389,8 +389,10 @@ gate_copyrename (void)\n   return flag_tree_copyrename != 0;\n }\n \n-struct tree_opt_pass pass_rename_ssa_copies = \n-{  \n+struct gimple_opt_pass pass_rename_ssa_copies = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"copyrename\",\t\t\t\t/* name */\n   gate_copyrename,\t\t\t/* gate */\n   rename_ssa_copies,\t\t\t/* execute */\n@@ -402,7 +404,7 @@ struct tree_opt_pass pass_rename_ssa_copies =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */ \n-  TODO_dump_func | TODO_verify_ssa,     /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa      /* todo_flags_finish */\n+ }\n }; \n "}, {"sha": "95457eb7fe423de8cf0578963f9556933a4617f4", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -901,8 +901,10 @@ gate_dce (void)\n   return flag_tree_dce != 0;\n }\n \n-struct tree_opt_pass pass_dce =\n+struct gimple_opt_pass pass_dce =\n {\n+ {\n+  GIMPLE_PASS,\n   \"dce\",\t\t\t\t/* name */\n   gate_dce,\t\t\t\t/* gate */\n   tree_ssa_dce,\t\t\t\t/* execute */\n@@ -914,12 +916,14 @@ struct tree_opt_pass pass_dce =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_dce_loop =\n+struct gimple_opt_pass pass_dce_loop =\n {\n+ {\n+  GIMPLE_PASS,\n   \"dceloop\",\t\t\t\t/* name */\n   gate_dce,\t\t\t\t/* gate */\n   tree_ssa_dce_loop,\t\t\t/* execute */\n@@ -931,12 +935,14 @@ struct tree_opt_pass pass_dce_loop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_cd_dce =\n+struct gimple_opt_pass pass_cd_dce =\n {\n+ {\n+  GIMPLE_PASS,\n   \"cddce\",\t\t\t\t/* name */\n   gate_dce,\t\t\t\t/* gate */\n   tree_ssa_cd_dce,\t\t\t/* execute */\n@@ -949,6 +955,6 @@ struct tree_opt_pass pass_cd_dce =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_ssa\n-  | TODO_verify_flow,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_flow\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "4d95261bc73b83bfe5e248c77851f24057d7cfd5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -367,8 +367,10 @@ gate_dominator (void)\n   return flag_tree_dom != 0;\n }\n \n-struct tree_opt_pass pass_dominator = \n+struct gimple_opt_pass pass_dominator = \n {\n+ {\n+  GIMPLE_PASS,\n   \"dom\",\t\t\t\t/* name */\n   gate_dominator,\t\t\t/* gate */\n   tree_ssa_dominator_optimize,\t\t/* execute */\n@@ -383,8 +385,8 @@ struct tree_opt_pass pass_dominator =\n   TODO_dump_func\n     | TODO_update_ssa\n     | TODO_cleanup_cfg\n-    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };\n \n \n@@ -2533,8 +2535,10 @@ eliminate_degenerate_phis (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_phi_only_cprop =\n+struct gimple_opt_pass pass_phi_only_cprop =\n {\n+ {\n+  GIMPLE_PASS,\n   \"phicprop\",                           /* name */\n   gate_dominator,                       /* gate */\n   eliminate_degenerate_phis,            /* execute */\n@@ -2551,6 +2555,6 @@ struct tree_opt_pass pass_phi_only_cprop =\n     | TODO_ggc_collect\n     | TODO_verify_ssa\n     | TODO_verify_stmts\n-    | TODO_update_ssa,\t\t\t/* todo_flags_finish */\n-  0                                     /* letter */\n+    | TODO_update_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "8c960045ce69c14bfc38cb52782bae6a25b5340d", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -632,7 +632,10 @@ gate_dse (void)\n   return flag_tree_dse != 0;\n }\n \n-struct tree_opt_pass pass_dse = {\n+struct gimple_opt_pass pass_dse = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"dse\",\t\t\t/* name */\n   gate_dse,\t\t\t/* gate */\n   tree_ssa_dse,\t\t\t/* execute */\n@@ -648,8 +651,8 @@ struct tree_opt_pass pass_dse = {\n   0,\t\t\t\t/* todo_flags_start */\n   TODO_dump_func\n     | TODO_ggc_collect\n-    | TODO_verify_ssa,\t\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+    | TODO_verify_ssa\t\t/* todo_flags_finish */\n+ }\n };\n \n /* A very simple dead store pass eliminating write only local variables.\n@@ -769,8 +772,10 @@ execute_simple_dse (void)\n   return todo;\n }\n \n-struct tree_opt_pass pass_simple_dse =\n+struct gimple_opt_pass pass_simple_dse =\n {\n+ {\n+  GIMPLE_PASS,\n   \"sdse\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_simple_dse,\t\t\t/* execute */\n@@ -782,6 +787,6 @@ struct tree_opt_pass pass_simple_dse =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,          \t        /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  TODO_dump_func          \t        /* todo_flags_finish */\n+ }\n };"}, {"sha": "84553fbef4207069ccbded81de3af780e4ff7295", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1081,7 +1081,10 @@ gate_forwprop (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_forwprop = {\n+struct gimple_opt_pass pass_forwprop = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"forwprop\",\t\t\t/* name */\n   gate_forwprop,\t\t/* gate */\n   tree_ssa_forward_propagate_single_use_vars,\t/* execute */\n@@ -1096,7 +1099,7 @@ struct tree_opt_pass pass_forwprop = {\n   TODO_dump_func\n   | TODO_ggc_collect\n   | TODO_update_ssa\n-  | TODO_verify_ssa,\t\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t/* todo_flags_finish */\n+ }\n };\n "}, {"sha": "cec5868c6364160a79cc3f9effa5633af91088bc", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -605,7 +605,10 @@ gate_ifcombine (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_tree_ifcombine = {\n+struct gimple_opt_pass pass_tree_ifcombine = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"ifcombine\",\t\t\t/* name */\n   gate_ifcombine,\t\t/* gate */\n   tree_ssa_ifcombine,\t\t/* execute */\n@@ -620,6 +623,6 @@ struct tree_opt_pass pass_tree_ifcombine = {\n   TODO_dump_func\n   | TODO_ggc_collect\n   | TODO_update_ssa\n-  | TODO_verify_ssa,\t\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "47b93f8beebb58b81851832b6745786555b4796b", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -253,8 +253,10 @@ gate_ch (void)\n   return flag_tree_ch != 0;\n }\n \n-struct tree_opt_pass pass_ch = \n+struct gimple_opt_pass pass_ch = \n {\n+ {\n+  GIMPLE_PASS,\n   \"ch\",\t\t\t\t\t/* name */\n   gate_ch,\t\t\t\t/* gate */\n   copy_loop_headers,\t\t\t/* execute */\n@@ -267,6 +269,6 @@ struct tree_opt_pass pass_ch =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_cleanup_cfg | TODO_dump_func \n-  | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "639fb10a393950a2b5767c7a3a343cfc9e913eb7", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 85, "deletions": 51, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -55,8 +55,10 @@ gate_tree_loop (void)\n   return flag_tree_loop_optimize != 0;\n }\n \n-struct tree_opt_pass pass_tree_loop = \n+struct gimple_opt_pass pass_tree_loop = \n {\n+ {\n+  GIMPLE_PASS,\n   \"loop\",\t\t\t\t/* name */\n   gate_tree_loop,\t\t\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n@@ -68,8 +70,8 @@ struct tree_opt_pass pass_tree_loop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   TODO_ggc_collect,\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa | TODO_ggc_collect,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa | TODO_ggc_collect\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop optimizer initialization.  */\n@@ -85,8 +87,10 @@ tree_ssa_loop_init (void)\n   return 0;\n }\n   \n-struct tree_opt_pass pass_tree_loop_init = \n+struct gimple_opt_pass pass_tree_loop_init = \n {\n+ {\n+  GIMPLE_PASS,\n   \"loopinit\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   tree_ssa_loop_init,\t\t\t/* execute */\n@@ -98,8 +102,8 @@ struct tree_opt_pass pass_tree_loop_init =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_loops\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop invariant motion pass.  */\n@@ -120,8 +124,10 @@ gate_tree_ssa_loop_im (void)\n   return flag_tree_loop_im != 0;\n }\n \n-struct tree_opt_pass pass_lim = \n+struct gimple_opt_pass pass_lim = \n {\n+ {\n+  GIMPLE_PASS,\n   \"lim\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_im,\t\t/* gate */\n   tree_ssa_loop_im,\t\t\t/* execute */\n@@ -133,8 +139,8 @@ struct tree_opt_pass pass_lim =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_loops\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop unswitching pass.  */\n@@ -154,8 +160,10 @@ gate_tree_ssa_loop_unswitch (void)\n   return flag_unswitch_loops != 0;\n }\n \n-struct tree_opt_pass pass_tree_unswitch = \n+struct gimple_opt_pass pass_tree_unswitch = \n {\n+ {\n+  GIMPLE_PASS,\n   \"unswitch\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_unswitch,\t\t/* gate */\n   tree_ssa_loop_unswitch,\t\t/* execute */\n@@ -168,8 +176,8 @@ struct tree_opt_pass pass_tree_unswitch =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_ggc_collect | TODO_dump_func\n-    | TODO_verify_loops,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_loops\t\t \t/* todo_flags_finish */\n+ }\n };\n \n /* Predictive commoning.  */\n@@ -190,8 +198,10 @@ gate_tree_predictive_commoning (void)\n   return flag_predictive_commoning != 0;\n }\n \n-struct tree_opt_pass pass_predcom = \n+struct gimple_opt_pass pass_predcom = \n {\n+ {\n+  GIMPLE_PASS,\n   \"pcom\",\t\t\t\t/* name */\n   gate_tree_predictive_commoning,\t/* gate */\n   run_tree_predictive_commoning,\t/* execute */\n@@ -204,8 +214,8 @@ struct tree_opt_pass pass_predcom =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_loops\n-    | TODO_update_ssa_only_virtuals,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_update_ssa_only_virtuals\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop autovectorization.  */\n@@ -222,8 +232,10 @@ gate_tree_vectorize (void)\n   return flag_tree_vectorize && number_of_loops () > 1;\n }\n \n-struct tree_opt_pass pass_vectorize =\n+struct gimple_opt_pass pass_vectorize =\n {\n+ {\n+  GIMPLE_PASS,\n   \"vect\",                               /* name */\n   gate_tree_vectorize,                  /* gate */\n   tree_vectorize,                       /* execute */\n@@ -236,8 +248,8 @@ struct tree_opt_pass pass_vectorize =\n   0,                                    /* properties_destroyed */\n   TODO_verify_loops,\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa\n-    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop nest optimizations.  */\n@@ -258,8 +270,10 @@ gate_tree_linear_transform (void)\n   return flag_tree_loop_linear != 0;\n }\n \n-struct tree_opt_pass pass_linear_transform =\n+struct gimple_opt_pass pass_linear_transform =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ltrans\",\t\t\t\t/* name */\n   gate_tree_linear_transform,\t\t/* gate */\n   tree_linear_transform,       \t\t/* execute */\n@@ -273,8 +287,8 @@ struct tree_opt_pass pass_linear_transform =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_loops\n     | TODO_update_ssa_only_virtuals\n-    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\t\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Check the correctness of the data dependence analyzers.  */\n@@ -295,8 +309,10 @@ gate_check_data_deps (void)\n   return flag_check_data_deps != 0;\n }\n \n-struct tree_opt_pass pass_check_data_deps =\n+struct gimple_opt_pass pass_check_data_deps =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ckdd\",\t\t\t\t/* name */\n   gate_check_data_deps,\t        \t/* gate */\n   check_data_deps,       \t\t/* execute */\n@@ -308,8 +324,8 @@ struct tree_opt_pass pass_check_data_deps =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,                \t/* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\t\n+  TODO_dump_func                \t/* todo_flags_finish */\n+ }\n };\n \n /* Canonical induction variable creation pass.  */\n@@ -329,8 +345,10 @@ gate_tree_ssa_loop_ivcanon (void)\n   return flag_tree_loop_ivcanon != 0;\n }\n \n-struct tree_opt_pass pass_iv_canon =\n+struct gimple_opt_pass pass_iv_canon =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ivcanon\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_ivcanon,\t\t/* gate */\n   tree_ssa_loop_ivcanon,\t       \t/* execute */\n@@ -342,8 +360,8 @@ struct tree_opt_pass pass_iv_canon =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_loops\t/* todo_flags_finish */\n+ }\n };\n \n /* Propagation of constants using scev.  */\n@@ -354,8 +372,10 @@ gate_scev_const_prop (void)\n   return flag_tree_scev_cprop;\n }\n \n-struct tree_opt_pass pass_scev_cprop =\n+struct gimple_opt_pass pass_scev_cprop =\n {\n+ {\n+  GIMPLE_PASS,\n   \"sccp\",\t\t\t\t/* name */\n   gate_scev_const_prop,\t\t\t/* gate */\n   scev_const_prop,\t       \t\t/* execute */\n@@ -368,9 +388,9 @@ struct tree_opt_pass pass_scev_cprop =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_cleanup_cfg\n-    | TODO_update_ssa_only_virtuals,\n+    | TODO_update_ssa_only_virtuals\n \t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+ }\n };\n \n /* Remove empty loops.  */\n@@ -384,8 +404,10 @@ tree_ssa_empty_loop (void)\n   return remove_empty_loops ();\n }\n \n-struct tree_opt_pass pass_empty_loop =\n+struct gimple_opt_pass pass_empty_loop =\n {\n+ {\n+  GIMPLE_PASS,\n   \"empty\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   tree_ssa_empty_loop,\t\t       \t/* execute */\n@@ -398,8 +420,8 @@ struct tree_opt_pass pass_empty_loop =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_loops \n-    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Record bounds on numbers of iterations of loops.  */\n@@ -415,8 +437,10 @@ tree_ssa_loop_bounds (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_record_bounds =\n+struct gimple_opt_pass pass_record_bounds =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   tree_ssa_loop_bounds,\t\t       \t/* execute */\n@@ -428,8 +452,8 @@ struct tree_opt_pass pass_record_bounds =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t              \t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t              \t/* todo_flags_finish */\n+ }\n };\n \n /* Complete unrolling of loops.  */\n@@ -451,8 +475,10 @@ gate_tree_complete_unroll (void)\n   return true;\n }\n \n-struct tree_opt_pass pass_complete_unroll =\n+struct gimple_opt_pass pass_complete_unroll =\n {\n+ {\n+  GIMPLE_PASS,\n   \"cunroll\",\t\t\t\t/* name */\n   gate_tree_complete_unroll,\t\t/* gate */\n   tree_complete_unroll,\t\t       \t/* execute */\n@@ -465,8 +491,8 @@ struct tree_opt_pass pass_complete_unroll =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_loops\n-    | TODO_ggc_collect,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n+ }\n };\n \n /* Parallelization.  */\n@@ -488,8 +514,10 @@ tree_parallelize_loops (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_parallelize_loops =\n+struct gimple_opt_pass pass_parallelize_loops =\n {\n+ {\n+  GIMPLE_PASS,\n   \"parloops\",\t\t\t\t/* name */\n   gate_tree_parallelize_loops,\t\t/* gate */\n   tree_parallelize_loops,      \t\t/* execute */\n@@ -501,8 +529,8 @@ struct tree_opt_pass pass_parallelize_loops =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\t\n+  TODO_dump_func | TODO_verify_loops\t/* todo_flags_finish */\n+ }\n };\n \n /* Prefetching.  */\n@@ -522,8 +550,10 @@ gate_tree_ssa_loop_prefetch (void)\n   return flag_prefetch_loop_arrays != 0;\n }\n \n-struct tree_opt_pass pass_loop_prefetch =\n+struct gimple_opt_pass pass_loop_prefetch =\n {\n+ {\n+  GIMPLE_PASS,\n   \"aprefetch\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_prefetch,\t\t/* gate */\n   tree_ssa_loop_prefetch,\t       \t/* execute */\n@@ -535,8 +565,8 @@ struct tree_opt_pass pass_loop_prefetch =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_loops\t/* todo_flags_finish */\n+ }\n };\n \n /* Induction variable optimizations.  */\n@@ -557,8 +587,10 @@ gate_tree_ssa_loop_ivopts (void)\n   return flag_ivopts != 0;\n }\n \n-struct tree_opt_pass pass_iv_optimize =\n+struct gimple_opt_pass pass_iv_optimize =\n {\n+ {\n+  GIMPLE_PASS,\n   \"ivopts\",\t\t\t\t/* name */\n   gate_tree_ssa_loop_ivopts,\t\t/* gate */\n   tree_ssa_loop_ivopts,\t\t       \t/* execute */\n@@ -571,8 +603,8 @@ struct tree_opt_pass pass_iv_optimize =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_verify_loops\n-  | TODO_update_ssa | TODO_ggc_collect,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_update_ssa | TODO_ggc_collect\t/* todo_flags_finish */\n+ }\n };\n \n /* Loop optimizer finalization.  */\n@@ -586,8 +618,10 @@ tree_ssa_loop_done (void)\n   return 0;\n }\n   \n-struct tree_opt_pass pass_tree_loop_done = \n+struct gimple_opt_pass pass_tree_loop_done = \n {\n+ {\n+  GIMPLE_PASS,\n   \"loopdone\",\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   tree_ssa_loop_done,\t\t\t/* execute */\n@@ -599,6 +633,6 @@ struct tree_opt_pass pass_tree_loop_done =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_cleanup_cfg | TODO_dump_func,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_cleanup_cfg | TODO_dump_func\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "49fd1707d1e6a4355b2ebc2d7cad9a12d5bbd334", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -555,8 +555,10 @@ execute_cse_reciprocals (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_cse_reciprocals =\n+struct gimple_opt_pass pass_cse_reciprocals =\n {\n+ {\n+  GIMPLE_PASS,\n   \"recip\",\t\t\t\t/* name */\n   gate_cse_reciprocals,\t\t\t/* gate */\n   execute_cse_reciprocals,\t\t/* execute */\n@@ -569,8 +571,8 @@ struct tree_opt_pass pass_cse_reciprocals =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa | TODO_verify_ssa\n-    | TODO_verify_stmts,                /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+    | TODO_verify_stmts                /* todo_flags_finish */\n+ }\n };\n \n /* Records an occurrence at statement USE_STMT in the vector of trees\n@@ -761,8 +763,10 @@ gate_cse_sincos (void)\n \t && optimize;\n }\n \n-struct tree_opt_pass pass_cse_sincos =\n+struct gimple_opt_pass pass_cse_sincos =\n {\n+ {\n+  GIMPLE_PASS,\n   \"sincos\",\t\t\t\t/* name */\n   gate_cse_sincos,\t\t\t/* gate */\n   execute_cse_sincos,\t\t\t/* execute */\n@@ -775,8 +779,8 @@ struct tree_opt_pass pass_cse_sincos =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa | TODO_verify_ssa\n-    | TODO_verify_stmts,                /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+    | TODO_verify_stmts                 /* todo_flags_finish */\n+ }\n };\n \n /* Find all expressions in the form of sqrt(a/b) and\n@@ -853,8 +857,10 @@ gate_convert_to_rsqrt (void)\n   return flag_unsafe_math_optimizations && optimize;\n }\n \n-struct tree_opt_pass pass_convert_to_rsqrt =\n+struct gimple_opt_pass pass_convert_to_rsqrt =\n {\n+ {\n+  GIMPLE_PASS,\n   \"rsqrt\",\t\t\t\t/* name */\n   gate_convert_to_rsqrt,\t\t/* gate */\n   execute_convert_to_rsqrt,\t\t/* execute */\n@@ -867,6 +873,6 @@ struct tree_opt_pass pass_convert_to_rsqrt =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa | TODO_verify_ssa\n-    | TODO_verify_stmts,                /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+    | TODO_verify_stmts                 /* todo_flags_finish */\n+ }\n };"}, {"sha": "bfe4fed4ba6a138b40b97f6b50135d4e6a2cf1f1", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1352,8 +1352,10 @@ gate_phiopt (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_phiopt =\n+struct gimple_opt_pass pass_phiopt =\n {\n+ {\n+  GIMPLE_PASS,\n   \"phiopt\",\t\t\t\t/* name */\n   gate_phiopt,\t\t\t\t/* gate */\n   tree_ssa_phiopt,\t\t\t/* execute */\n@@ -1369,8 +1371,8 @@ struct tree_opt_pass pass_phiopt =\n     | TODO_ggc_collect\n     | TODO_verify_ssa\n     | TODO_verify_flow\n-    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_stmts\t \t\t/* todo_flags_finish */\n+ }\n };\n \n static bool\n@@ -1379,8 +1381,10 @@ gate_cselim (void)\n   return flag_tree_cselim;\n }\n \n-struct tree_opt_pass pass_cselim =\n+struct gimple_opt_pass pass_cselim =\n {\n+ {\n+  GIMPLE_PASS,\n   \"cselim\",\t\t\t\t/* name */\n   gate_cselim,\t\t\t\t/* gate */\n   tree_ssa_cs_elim,\t\t\t/* execute */\n@@ -1396,6 +1400,6 @@ struct tree_opt_pass pass_cselim =\n     | TODO_ggc_collect\n     | TODO_verify_ssa\n     | TODO_verify_flow\n-    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_stmts\t \t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "2621dae1abdcdc849c4a3a57197d4af345e90536", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -368,7 +368,10 @@ gate_phiprop (void)\n   return 1;\n }\n \n-struct tree_opt_pass pass_phiprop = {\n+struct gimple_opt_pass pass_phiprop = \n+{\n+ {\n+  GIMPLE_PASS,\n   \"phiprop\",\t\t\t/* name */\n   gate_phiprop,\t\t\t/* gate */\n   tree_ssa_phiprop,\t\t/* execute */\n@@ -383,6 +386,6 @@ struct tree_opt_pass pass_phiprop = {\n   TODO_dump_func\n   | TODO_ggc_collect\n   | TODO_update_ssa\n-  | TODO_verify_ssa,\t\t/* todo_flags_finish */\n-  0\t\t\t\t/* letter */\n+  | TODO_verify_ssa\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "e6a931d94409090bfcead19a34a8aeb7a796943d", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -4057,8 +4057,10 @@ gate_pre (void)\n   return flag_tree_pre != 0;\n }\n \n-struct tree_opt_pass pass_pre =\n+struct gimple_opt_pass pass_pre =\n {\n+ {\n+  GIMPLE_PASS,\n   \"pre\",\t\t\t\t/* name */\n   gate_pre,\t\t\t\t/* gate */\n   do_pre,\t\t\t\t/* execute */\n@@ -4072,8 +4074,8 @@ struct tree_opt_pass pass_pre =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_update_ssa_only_virtuals | TODO_dump_func | TODO_ggc_collect\n-  | TODO_verify_ssa, /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  | TODO_verify_ssa /* todo_flags_finish */\n+ }\n };\n \n \n@@ -4091,8 +4093,10 @@ gate_fre (void)\n   return flag_tree_fre != 0;\n }\n \n-struct tree_opt_pass pass_fre =\n+struct gimple_opt_pass pass_fre =\n {\n+ {\n+  GIMPLE_PASS,\n   \"fre\",\t\t\t\t/* name */\n   gate_fre,\t\t\t\t/* gate */\n   execute_fre,\t\t\t\t/* execute */\n@@ -4104,6 +4108,6 @@ struct tree_opt_pass pass_fre =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+ }\n };"}, {"sha": "19e10398168b7e2910c5fa35cca220b09951ac5b", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1528,8 +1528,10 @@ gate_tree_ssa_reassoc (void)\n   return flag_tree_reassoc != 0;\n }\n \n-struct tree_opt_pass pass_reassoc =\n+struct gimple_opt_pass pass_reassoc =\n {\n+ {\n+  GIMPLE_PASS,\n   \"reassoc\",\t\t\t\t/* name */\n   gate_tree_ssa_reassoc,\t\t/* gate */\n   execute_reassoc,\t\t\t/* execute */\n@@ -1541,6 +1543,6 @@ struct tree_opt_pass pass_reassoc =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+ }\n };"}, {"sha": "40a3640b7368575f7f3f0ac91da1635574c4084f", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -568,8 +568,10 @@ gate_sink (void)\n   return flag_tree_sink != 0;\n }\n \n-struct tree_opt_pass pass_sink_code =\n+struct gimple_opt_pass pass_sink_code =\n {\n+ {\n+  GIMPLE_PASS,\n   \"sink\",\t\t\t\t/* name */\n   gate_sink,\t\t\t\t/* gate */\n   do_sink,\t\t\t\t/* execute */\n@@ -585,6 +587,6 @@ struct tree_opt_pass pass_sink_code =\n   TODO_update_ssa \n     | TODO_dump_func\n     | TODO_ggc_collect\n-    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "037f223c1407a262dca8beaa590434c47a750072", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -5630,8 +5630,10 @@ ipa_pta_execute (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_ipa_pta =\n+struct simple_ipa_opt_pass pass_ipa_pta =\n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"pta\",\t\t                /* name */\n   gate_ipa_pta,\t\t\t/* gate */\n   ipa_pta_execute,\t\t\t/* execute */\n@@ -5643,8 +5645,8 @@ struct tree_opt_pass pass_ipa_pta =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_update_ssa,                      /* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_update_ssa                       /* todo_flags_finish */\n+ }\n };\n \n /* Initialize the heapvar for statement mapping.  */"}, {"sha": "0d19c2dfa5fb68a84f36c2ce92d5ee3dd0fdaeaa", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -606,8 +606,10 @@ gate_uncprop (void)\n   return flag_tree_dom != 0;\n }\n \n-struct tree_opt_pass pass_uncprop = \n+struct gimple_opt_pass pass_uncprop = \n {\n+ {\n+  GIMPLE_PASS,\n   \"uncprop\",\t\t\t\t/* name */\n   gate_uncprop,\t\t\t\t/* gate */\n   tree_ssa_uncprop,\t\t\t/* execute */\n@@ -619,6 +621,6 @@ struct tree_opt_pass pass_uncprop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "128b4e8728326081f4743cfcdd2fa89185bc660e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1530,8 +1530,10 @@ gate_warn_uninitialized (void)\n   return warn_uninitialized != 0;\n }\n \n-struct tree_opt_pass pass_early_warn_uninitialized =\n+struct gimple_opt_pass pass_early_warn_uninitialized =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   gate_warn_uninitialized,\t\t/* gate */\n   execute_early_warn_uninitialized,\t/* execute */\n@@ -1543,12 +1545,14 @@ struct tree_opt_pass pass_early_warn_uninitialized =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_late_warn_uninitialized =\n+struct gimple_opt_pass pass_late_warn_uninitialized =\n {\n+ {\n+  GIMPLE_PASS,\n   NULL,\t\t\t\t\t/* name */\n   gate_warn_uninitialized,\t\t/* gate */\n   execute_late_warn_uninitialized,\t/* execute */\n@@ -1560,8 +1564,8 @@ struct tree_opt_pass pass_late_warn_uninitialized =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,                                    /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  0                                     /* todo_flags_finish */\n+ }\n };\n \n /* Compute TREE_ADDRESSABLE for local variables.  */\n@@ -1643,8 +1647,10 @@ execute_update_addresses_taken (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_update_address_taken =\n+struct gimple_opt_pass pass_update_address_taken =\n {\n+ {\n+  GIMPLE_PASS,\n   \"addressables\",\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   execute_update_addresses_taken,\t/* execute */\n@@ -1656,6 +1662,6 @@ struct tree_opt_pass pass_update_address_taken =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_update_ssa,                      /* todo_flags_finish */\n-  0\t\t\t\t        /* letter */\n+  TODO_update_ssa                       /* todo_flags_finish */\n+ }\n };"}, {"sha": "d418bc19b5fc8491f4c82c244c34b1f4786a71e0", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -343,8 +343,10 @@ release_dead_ssa_names (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_release_ssa_names =\n+struct gimple_opt_pass pass_release_ssa_names =\n {\n+ {\n+  GIMPLE_PASS,\n   \"release_ssa\",\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n   release_dead_ssa_names,\t\t/* execute */\n@@ -356,6 +358,6 @@ struct tree_opt_pass pass_release_ssa_names =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0,\t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "54693d11bece4fc9a97b3a181fb16b5f645344a4", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -904,8 +904,10 @@ execute_optimize_stdarg (void)\n }\n \n \n-struct tree_opt_pass pass_stdarg =\n+struct gimple_opt_pass pass_stdarg =\n {\n+ {\n+  GIMPLE_PASS,\n   \"stdarg\",\t\t\t\t/* name */\n   gate_optimize_stdarg,\t\t\t/* gate */\n   execute_optimize_stdarg,\t\t/* execute */\n@@ -917,6 +919,6 @@ struct tree_opt_pass pass_stdarg =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "a4430ec34e2e39ce17034e8039d0155d89cff4b0", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -1017,8 +1017,10 @@ execute_tail_calls (void)\n   return tree_optimize_tail_calls_1 (true);\n }\n \n-struct tree_opt_pass pass_tail_recursion = \n+struct gimple_opt_pass pass_tail_recursion = \n {\n+ {\n+  GIMPLE_PASS,\n   \"tailr\",\t\t\t\t/* name */\n   gate_tail_calls,\t\t\t/* gate */\n   execute_tail_recursion,\t\t/* execute */\n@@ -1030,12 +1032,14 @@ struct tree_opt_pass pass_tail_recursion =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_tail_calls = \n+struct gimple_opt_pass pass_tail_calls = \n {\n+ {\n+  GIMPLE_PASS,\n   \"tailc\",\t\t\t\t/* name */\n   gate_tail_calls,\t\t\t/* gate */\n   execute_tail_calls,\t\t\t/* execute */\n@@ -1047,6 +1051,6 @@ struct tree_opt_pass pass_tail_calls =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  TODO_dump_func | TODO_verify_ssa\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "a4026d6acf53e9639abb761ff55d20e208d1c9a8", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -527,8 +527,10 @@ expand_vector_operations (void)\n   return 0;\n }\n \n-struct tree_opt_pass pass_lower_vector = \n+struct gimple_opt_pass pass_lower_vector = \n {\n+ {\n+  GIMPLE_PASS,\n   \"veclower\",\t\t\t\t/* name */\n   0,\t\t\t\t\t/* gate */\n   expand_vector_operations,\t\t/* execute */\n@@ -541,12 +543,14 @@ struct tree_opt_pass pass_lower_vector =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_ggc_collect\n-    | TODO_verify_stmts,\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+ }\n };\n \n-struct tree_opt_pass pass_lower_vector_ssa = \n+struct gimple_opt_pass pass_lower_vector_ssa = \n {\n+ {\n+  GIMPLE_PASS,\n   \"veclower2\",\t\t\t\t/* name */\n   gate_expand_vector_operations,\t/* gate */\n   expand_vector_operations,\t\t/* execute */\n@@ -560,8 +564,8 @@ struct tree_opt_pass pass_lower_vector_ssa =\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func | TODO_update_ssa\t/* todo_flags_finish */\n     | TODO_verify_ssa\n-    | TODO_verify_stmts | TODO_verify_flow,\n-  0\t\t\t\t\t/* letter */\n+    | TODO_verify_stmts | TODO_verify_flow\n+ }\n };\n \n #include \"gt-tree-vect-generic.h\""}, {"sha": "ac3f84370538c6f9c294774d4b946bd8cc8e78c3", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -2767,8 +2767,10 @@ gate_increase_alignment (void)\n   return flag_section_anchors && flag_tree_vectorize;\n }\n \n-struct tree_opt_pass pass_ipa_increase_alignment = \n+struct simple_ipa_opt_pass pass_ipa_increase_alignment = \n {\n+ {\n+  SIMPLE_IPA_PASS,\n   \"increase_alignment\",\t\t\t/* name */\n   gate_increase_alignment,\t\t/* gate */\n   increase_alignment,\t\t\t/* execute */\n@@ -2780,6 +2782,6 @@ struct tree_opt_pass pass_ipa_increase_alignment =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  0, \t\t\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+  0 \t\t\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "5944e6a95b246101e7acb0d53acba91b9ffb69e7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -6207,8 +6207,10 @@ gate_vrp (void)\n   return flag_tree_vrp != 0;\n }\n \n-struct tree_opt_pass pass_vrp =\n+struct gimple_opt_pass pass_vrp =\n {\n+ {\n+  GIMPLE_PASS,\n   \"vrp\",\t\t\t\t/* name */\n   gate_vrp,\t\t\t\t/* gate */\n   execute_vrp,\t\t\t\t/* execute */\n@@ -6224,6 +6226,6 @@ struct tree_opt_pass pass_vrp =\n     | TODO_ggc_collect\n     | TODO_verify_ssa\n     | TODO_dump_func\n-    | TODO_update_ssa,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n+    | TODO_update_ssa\t\t\t/* todo_flags_finish */\n+ }\n };"}, {"sha": "de996acd963050f52bc2b70b40bcf9fb018ae5a4", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -3406,8 +3406,10 @@ gate_handle_var_tracking (void)\n \n \n \n-struct tree_opt_pass pass_variable_tracking =\n+struct rtl_opt_pass pass_variable_tracking =\n {\n+ {\n+  RTL_PASS,\n   \"vartrack\",                           /* name */\n   gate_handle_var_tracking,             /* gate */\n   variable_tracking_main,               /* execute */\n@@ -3419,7 +3421,7 @@ struct tree_opt_pass pass_variable_tracking =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing,/* todo_flags_finish */\n-  'V'                                   /* letter */\n+  TODO_dump_func | TODO_verify_rtl_sharing/* todo_flags_finish */\n+ }\n };\n "}, {"sha": "ada150ed23ddb048966aa954c053b0910022f865", "filename": "gcc/web.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=8ddbbcaea4d6a9d33ea49ed09b9a8bd6a35af819", "patch": "@@ -371,8 +371,10 @@ web_main (void)\n   return 0;\n }\n \f\n-struct tree_opt_pass pass_web =\n+struct rtl_opt_pass pass_web =\n {\n+ {\n+  RTL_PASS,\n   \"web\",                                /* name */\n   gate_handle_web,                      /* gate */\n   web_main,\t\t                /* execute */\n@@ -385,7 +387,7 @@ struct tree_opt_pass pass_web =\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_df_finish | TODO_verify_rtl_sharing | \n-  TODO_dump_func,                       /* todo_flags_finish */\n-  'Z'                                   /* letter */\n+  TODO_dump_func                        /* todo_flags_finish */\n+ }\n };\n "}]}