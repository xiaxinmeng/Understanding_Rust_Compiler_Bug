{"sha": "ed540c0ab930daf080cfea8a07fd18b07c503842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1NDBjMGFiOTMwZGFmMDgwY2ZlYThhMDdmZDE4YjA3YzUwMzg0Mg==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2007-10-07T16:33:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-07T16:33:59Z"}, "message": "list (list<>::list(list&&), [...]): Add.\n\n2007-10-07  Chris Jefferson  <chris@bubblescope.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/debug/list (list<>::list(list&&),\n\tlist<>::operator=(list&&)): Add.\n\t(list<>::swap): Adjust.\n\t(swap(list&&, list& __y), swap(list&, list&& __y)): Add.\n\t* include/debug/vector (vector<>::vector(vector&&),\n\tvector<>::operator=(vector&&)): Add.\n\t(vector<>::swap): Adjust.\n\t(swap(vector&&, vector& __y), swap(vector&, vector&& __y)): Add.\n\t* include/debug/deque (deque<>::deque(deque&&),\n\tdeque<>::operator=(deque&&)): Add.\n\t(deque<>::swap): Adjust.\n\t(swap(deque&&, deque& __y), swap(deque&, deque&& __y)): Add.\n\t* include/debug/set.h (set<>::set(set&&),\n\tset<>::operator=(set&&)): Add.\n\t(set<>::swap): Adjust.\n\t(swap(set&&, set& __y), swap(set&, set&& __y)): Add.\n\t* include/debug/map.h (map<>::map(map&&),\n\tmap<>::operator=(map&&)): Add.\n\t(map<>::swap): Adjust.\n\t(swap(map&&, map& __y), swap(map&, map&& __y)): Add.\n\t* include/debug/multiset.h (multiset<>::multiset(multiset&&),\n\tmultiset<>::operator=(multiset&&)): Add.\n\t(smultiet<>::swap): Adjust.\n\t(swap(multiset&&, multiset& __y),\n\tswap(multiset&, multiset&& __y)): Add.\n\t* include/debug/multimap.h (multimap<>::multimap(multimap&&),\n\tmultimap<>::operator=(multimap&&)): Add.\n\t(multimap<>::swap): Adjust.\n\t(swap(multimap&&, multimap& __y),\n\tswap(multimap&, multimap&& __y)): Add.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r129071", "tree": {"sha": "128bbf6e1b1bc763832380081aa55ef3bc358778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128bbf6e1b1bc763832380081aa55ef3bc358778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed540c0ab930daf080cfea8a07fd18b07c503842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed540c0ab930daf080cfea8a07fd18b07c503842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed540c0ab930daf080cfea8a07fd18b07c503842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed540c0ab930daf080cfea8a07fd18b07c503842/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "becb103cbe12515cc3a2a98c315d5d4488de80cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/becb103cbe12515cc3a2a98c315d5d4488de80cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/becb103cbe12515cc3a2a98c315d5d4488de80cc"}], "stats": {"total": 540, "additions": 422, "deletions": 118}, "files": [{"sha": "356b8d1bb392155c8ae993880bd1429613542e1c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,3 +1,37 @@\n+2007-10-07  Chris Jefferson  <chris@bubblescope.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/debug/list (list<>::list(list&&),\n+\tlist<>::operator=(list&&)): Add.\n+\t(list<>::swap): Adjust.\n+\t(swap(list&&, list& __y), swap(list&, list&& __y)): Add.\n+\t* include/debug/vector (vector<>::vector(vector&&),\n+\tvector<>::operator=(vector&&)): Add.\n+\t(vector<>::swap): Adjust.\n+\t(swap(vector&&, vector& __y), swap(vector&, vector&& __y)): Add.\n+\t* include/debug/deque (deque<>::deque(deque&&),\n+\tdeque<>::operator=(deque&&)): Add.\n+\t(deque<>::swap): Adjust.\n+\t(swap(deque&&, deque& __y), swap(deque&, deque&& __y)): Add.\n+\t* include/debug/set.h (set<>::set(set&&),\n+\tset<>::operator=(set&&)): Add.\n+\t(set<>::swap): Adjust.\n+\t(swap(set&&, set& __y), swap(set&, set&& __y)): Add.\n+\t* include/debug/map.h (map<>::map(map&&),\n+\tmap<>::operator=(map&&)): Add.\n+\t(map<>::swap): Adjust.\n+\t(swap(map&&, map& __y), swap(map&, map&& __y)): Add.\n+\t* include/debug/multiset.h (multiset<>::multiset(multiset&&),\n+\tmultiset<>::operator=(multiset&&)): Add.\n+\t(smultiet<>::swap): Adjust.\n+\t(swap(multiset&&, multiset& __y),\n+\tswap(multiset&, multiset&& __y)): Add.\n+\t* include/debug/multimap.h (multimap<>::multimap(multimap&&),\n+\tmultimap<>::operator=(multimap&&)): Add.\n+\t(multimap<>::swap): Adjust.\n+\t(swap(multimap&&, multimap& __y),\n+\tswap(multimap&, multimap&& __y)): Add.\n+\n 2007-10-07  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (_GLIBCXX_MOVE): Add."}, {"sha": "56db8ee2b00a2016d14b601b15604500f909dff1", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging deque implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -84,20 +84,37 @@ namespace __debug\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last, __a)\n         { }\n \n-      deque(const deque<_Tp,_Allocator>& __x) : _Base(__x), _Safe_base() { }\n+      deque(const deque& __x)\n+      : _Base(__x), _Safe_base() { }\n \n-      deque(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      deque(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      deque(deque&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~deque() { }\n \n-      deque<_Tp,_Allocator>&\n-      operator=(const deque<_Tp,_Allocator>& __x)\n+      deque&\n+      operator=(const deque& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      deque&\n+      operator=(deque&& __x)\n+      {\n+\tswap(__x);\t  \n+\treturn *this;\n+      }\n+#endif\n+\n       template<class _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n@@ -329,7 +346,11 @@ namespace __debug\n       }\n \n       void\n-      swap(deque<_Tp,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(deque&& __x)\n+#else\n+      swap(deque& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -363,7 +384,8 @@ namespace __debug\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<(const deque<_Tp, _Alloc>& __lhs, const deque<_Tp, _Alloc>& __rhs)\n+    operator<(const deque<_Tp, _Alloc>& __lhs,\n+\t      const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n@@ -380,13 +402,27 @@ namespace __debug\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>(const deque<_Tp, _Alloc>& __lhs, const deque<_Tp, _Alloc>& __rhs)\n+    operator>(const deque<_Tp, _Alloc>& __lhs,\n+\t      const deque<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(deque<_Tp, _Alloc>&& __lhs, deque<_Tp, _Alloc>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "f30917b2ce43f252a0cb2151237a66ccf2b740ea", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging list implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -113,9 +113,17 @@ namespace __debug\n       { }\n \n \n-      list(const list& __x) : _Base(__x), _Safe_base() { }\n+      list(const list& __x)\n+      : _Base(__x), _Safe_base() { }\n \n-      list(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      list(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      list(list&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~list() { }\n \n@@ -127,6 +135,15 @@ namespace __debug\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      list&\n+      operator=(list&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       template<class _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n@@ -311,7 +328,11 @@ namespace __debug\n       }\n \n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(list&& __x)\n+#else\n       swap(list& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -502,38 +523,57 @@ namespace __debug\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator==(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator==(const list<_Tp, _Alloc>& __lhs,\n+\t       const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator!=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator!=(const list<_Tp, _Alloc>& __lhs,\n+\t       const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator<(const list<_Tp, _Alloc>& __lhs,\n+\t      const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator<=(const list<_Tp, _Alloc>& __lhs,\n+\t       const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>=(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator>=(const list<_Tp, _Alloc>& __lhs,\n+\t       const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>(const list<_Tp, _Alloc>& __lhs, const list<_Tp, _Alloc>& __rhs)\n+    operator>(const list<_Tp, _Alloc>& __lhs,\n+\t      const list<_Tp, _Alloc>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Tp, typename _Alloc>\n     inline void\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(list<_Tp, _Alloc>&& __lhs, list<_Tp, _Alloc>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "5e1312a8ac3abee580edefcbfc8f28a4265b65c5", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 71, "deletions": 27, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging map implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -88,21 +88,37 @@ namespace __debug\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a), _Safe_base() { }\n \n-      map(const map<_Key,_Tp,_Compare,_Allocator>& __x)\n+      map(const map& __x)\n       : _Base(__x), _Safe_base() { }\n \n-      map(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      map(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      map(map&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~map() { }\n \n-      map<_Key,_Tp,_Compare,_Allocator>&\n-      operator=(const map<_Key,_Tp,_Compare,_Allocator>& __x)\n+      map&\n+      operator=(const map& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      map&\n+      operator=(map&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 133. map missing get_allocator()\n       using _Base::get_allocator;\n@@ -210,7 +226,11 @@ namespace __debug\n       }\n \n       void\n-      swap(map<_Key,_Tp,_Compare,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(map&& __x)\n+#else\n+      swap(map& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -287,47 +307,71 @@ namespace __debug\n       }\n     };\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator==(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator==(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator!=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t      const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator<(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator<=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator>=(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator>=(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator>(const map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t      const map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator>(const map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline void\n-    swap(map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    swap(map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n+    inline void\n+    swap(map<_Key, _Tp, _Compare, _Allocator>&& __lhs,\n+\t map<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n+    inline void\n+    swap(map<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t map<_Key, _Tp, _Compare, _Allocator>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "4f0b7935e5906dee7a0b950138d35d5112f6c5a9", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 73, "deletions": 28, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -47,7 +47,8 @@ namespace __debug\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap\n     : public _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator>,\n-    public __gnu_debug::_Safe_sequence<multimap<_Key,_Tp,_Compare,_Allocator> >\n+      public __gnu_debug::_Safe_sequence<multimap<_Key, _Tp,\n+\t\t\t\t\t\t  _Compare, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_D::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<multimap> _Safe_base;\n@@ -88,21 +89,37 @@ namespace __debug\n       : _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t      __comp, __a) { }\n \n-      multimap(const multimap<_Key,_Tp,_Compare,_Allocator>& __x)\n+      multimap(const multimap& __x)\n       : _Base(__x), _Safe_base() { }\n \n-      multimap(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      multimap(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      multimap(multimap&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~multimap() { }\n \n-      multimap<_Key,_Tp,_Compare,_Allocator>&\n-      operator=(const multimap<_Key,_Tp,_Compare,_Allocator>& __x)\n+      multimap&\n+      operator=(const multimap& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      multimap&\n+      operator=(multimap&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       using _Base::get_allocator;\n \n       // iterators:\n@@ -197,7 +214,11 @@ namespace __debug\n       }\n \n       void\n-      swap(multimap<_Key,_Tp,_Compare,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(multimap&& __x)\n+#else\n+      swap(multimap& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -274,47 +295,71 @@ namespace __debug\n       }\n     };\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator==(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator==(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator!=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t      const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator<(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator<=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator<=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator>=(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t       const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator>=(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t       const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline bool\n-    operator>(const multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t      const multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    operator>(const multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t      const multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n-  template<typename _Key,typename _Tp,typename _Compare,typename _Allocator>\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n     inline void\n-    swap(multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n-\t multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n+    swap(multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n+    inline void\n+    swap(multimap<_Key, _Tp, _Compare, _Allocator>&& __lhs,\n+\t multimap<_Key, _Tp, _Compare, _Allocator>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _Key, typename _Tp,\n+\t   typename _Compare, typename _Allocator>\n+    inline void\n+    swap(multimap<_Key, _Tp, _Compare, _Allocator>& __lhs,\n+\t multimap<_Key, _Tp, _Compare, _Allocator>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "5ec99452c4e40c0ff4c57b882818cd6ea63d6f31", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -86,21 +86,37 @@ namespace __debug\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a) { }\n \n-      multiset(const multiset<_Key,_Compare,_Allocator>& __x)\n+      multiset(const multiset& __x)\n       : _Base(__x), _Safe_base() { }\n \n-      multiset(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      multiset(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      multiset(multiset&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~multiset() { }\n \n-      multiset<_Key,_Compare,_Allocator>&\n-      operator=(const multiset<_Key,_Compare,_Allocator>& __x)\n+      multiset&\n+      operator=(const multiset& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      multiset&\n+      operator=(multiset&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       using _Base::get_allocator;\n \n       // iterators:\n@@ -195,7 +211,11 @@ namespace __debug\n       }\n \n       void\n-      swap(multiset<_Key,_Compare,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(multiset&& __x)\n+#else\n+      swap(multiset& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -282,45 +302,60 @@ namespace __debug\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator==(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator==(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator!=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t      const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator<(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t      const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator<=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator>=(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t       const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator>=(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t       const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator>(const multiset<_Key,_Compare,_Allocator>& __lhs,\n-\t      const multiset<_Key,_Compare,_Allocator>& __rhs)\n+    operator>(const multiset<_Key, _Compare, _Allocator>& __lhs,\n+\t      const multiset<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     void\n-    swap(multiset<_Key,_Compare,_Allocator>& __x,\n-\t multiset<_Key,_Compare,_Allocator>& __y)\n+    swap(multiset<_Key, _Compare, _Allocator>& __x,\n+\t multiset<_Key, _Compare, _Allocator>& __y)\n     { return __x.swap(__y); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Key, typename _Compare, typename _Allocator>\n+    void\n+    swap(multiset<_Key, _Compare, _Allocator>&& __x,\n+\t multiset<_Key, _Compare, _Allocator>& __y)\n+    { return __x.swap(__y); }\n+\n+  template<typename _Key, typename _Compare, typename _Allocator>\n+    void\n+    swap(multiset<_Key, _Compare, _Allocator>& __x,\n+\t multiset<_Key, _Compare, _Allocator>&& __y)\n+    { return __x.swap(__y); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "5610cab02a08b32b23b00039fdb8fb764b5b373e", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging set implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -49,7 +49,7 @@ namespace __debug\n     : public _GLIBCXX_STD_D::set<_Key,_Compare,_Allocator>,\n       public __gnu_debug::_Safe_sequence<set<_Key, _Compare, _Allocator> >\n     {\n-      typedef _GLIBCXX_STD_D::set<_Key,_Compare,_Allocator> _Base;\n+      typedef _GLIBCXX_STD_D::set<_Key, _Compare, _Allocator> _Base;\n       typedef __gnu_debug::_Safe_sequence<set> _Safe_base;\n \n     public:\n@@ -86,21 +86,37 @@ namespace __debug\n \t: _Base(__gnu_debug::__check_valid_range(__first, __last), __last,\n \t\t__comp, __a) { }\n \n-      set(const set<_Key,_Compare,_Allocator>& __x)\n+      set(const set& __x)\n       : _Base(__x), _Safe_base() { }\n \n-      set(const _Base& __x) : _Base(__x), _Safe_base() { }\n+      set(const _Base& __x)\n+      : _Base(__x), _Safe_base() { }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      set(set&& __x)\n+      : _Base(__x), _Safe_base()\n+      { this->_M_swap(__x); }\n+#endif\n \n       ~set() { }\n \n-      set<_Key,_Compare,_Allocator>&\n-      operator=(const set<_Key,_Compare,_Allocator>& __x)\n+      set&\n+      operator=(const set& __x)\n       {\n \t*static_cast<_Base*>(this) = __x;\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      set&\n+      operator=(set&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       using _Base::get_allocator;\n \n       // iterators:\n@@ -200,7 +216,11 @@ namespace __debug\n       }\n \n       void\n-      swap(set<_Key,_Compare,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(set&& __x)\n+#else\n+      swap(set& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -287,45 +307,60 @@ namespace __debug\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator==(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t       const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator==(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t       const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() == __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator!=(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t       const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator!=(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t       const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() != __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t      const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator<(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t      const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() < __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator<=(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t       const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator<=(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t       const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() <= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator>=(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t       const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator>=(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t       const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() >= __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     inline bool\n-    operator>(const set<_Key,_Compare,_Allocator>& __lhs,\n-\t      const set<_Key,_Compare,_Allocator>& __rhs)\n+    operator>(const set<_Key, _Compare, _Allocator>& __lhs,\n+\t      const set<_Key, _Compare, _Allocator>& __rhs)\n     { return __lhs._M_base() > __rhs._M_base(); }\n \n   template<typename _Key, typename _Compare, typename _Allocator>\n     void\n-    swap(set<_Key,_Compare,_Allocator>& __x,\n-\t set<_Key,_Compare,_Allocator>& __y)\n+    swap(set<_Key, _Compare, _Allocator>& __x,\n+\t set<_Key, _Compare, _Allocator>& __y)\n     { return __x.swap(__y); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Key, typename _Compare, typename _Allocator>\n+    void\n+    swap(set<_Key, _Compare, _Allocator>&& __x,\n+\t set<_Key, _Compare, _Allocator>& __y)\n+    { return __x.swap(__y); }\n+\n+  template<typename _Key, typename _Compare, typename _Allocator>\n+    void\n+    swap(set<_Key, _Compare, _Allocator>& __x,\n+\t set<_Key, _Compare, _Allocator>&& __y)\n+    { return __x.swap(__y); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}, {"sha": "91e515a8e9b995d516320ee8d12124ce1a61ec30", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed540c0ab930daf080cfea8a07fd18b07c503842/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=ed540c0ab930daf080cfea8a07fd18b07c503842", "patch": "@@ -1,6 +1,6 @@\n // Debugging vector implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -91,24 +91,42 @@ namespace __debug\n \t  _M_guaranteed_capacity(0)\n         { _M_update_guaranteed_capacity(); }\n \n-      vector(const vector<_Tp,_Allocator>& __x)\n+      vector(const vector& __x)\n       : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n \n       /// Construction from a release-mode vector\n       vector(const _Base& __x)\n       : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      vector(vector&& __x)\n+      : _Base(__x), _Safe_base(), _M_guaranteed_capacity(this->size())\n+      { \n+\tthis->_M_swap(__x);\n+\t__x._M_guaranteed_capacity = 0;\n+      }\n+#endif\n+\n       ~vector() { }\n \n-      vector<_Tp,_Allocator>&\n-      operator=(const vector<_Tp,_Allocator>& __x)\n+      vector&\n+      operator=(const vector& __x)\n       {\n \tstatic_cast<_Base&>(*this) = __x;\n \tthis->_M_invalidate_all();\n \t_M_update_guaranteed_capacity();\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      vector&\n+      operator=(vector&& __x)\n+      {\n+\tswap(__x);\n+\treturn *this;\n+      }\n+#endif\n+\n       template<typename _InputIterator>\n         void\n         assign(_InputIterator __first, _InputIterator __last)\n@@ -335,7 +353,11 @@ namespace __debug\n       }\n \n       void\n-      swap(vector<_Tp,_Allocator>& __x)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(vector&& __x)\n+#else\n+      swap(vector& __x)\n+#endif\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n@@ -417,6 +439,19 @@ namespace __debug\n     inline void\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(vector<_Tp, _Alloc>&& __lhs, vector<_Tp, _Alloc>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _Tp, typename _Alloc>\n+    inline void\n+    swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n } // namespace __debug\n } // namespace std\n "}]}