{"sha": "7815eaa869b450be391b128c588f125fc646926e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxNWVhYTg2OWI0NTBiZTM5MWIxMjhjNTg4ZjEyNWZjNjQ2OTI2ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-25T09:13:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-25T09:13:55Z"}, "message": "Update SVE tests for recent XPASSes\n\nRecent target-independent patches mean that several SVE tests\nnow produce the code that we'd originally wanted them to produce.\nReally nice to see :-)\n\nThis patch therefore updates the expected baseline, so that hopefully\nwe don't regress from this point in future.\n\n2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/loop_add_5.c: Remove XFAILs for tests\n\tthat now pass.\n\t* gcc.target/aarch64/sve/reduc_1.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_5.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_8.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_13.c: Likewise.\n\t* gcc.target/aarch64/sve/slp_5.c: Likewise.  Update expected\n\tWHILELO counts.\n\t* gcc.target/aarch64/sve/slp_7.c: Likewise.\n\nFrom-SVN: r277441", "tree": {"sha": "4074b8968d6f9cd50b88437c65c8b18dc330340d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4074b8968d6f9cd50b88437c65c8b18dc330340d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7815eaa869b450be391b128c588f125fc646926e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7815eaa869b450be391b128c588f125fc646926e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7815eaa869b450be391b128c588f125fc646926e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7815eaa869b450be391b128c588f125fc646926e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f88b78ae374f143cca63a56b1eecf8d426045f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88b78ae374f143cca63a56b1eecf8d426045f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88b78ae374f143cca63a56b1eecf8d426045f4e"}], "stats": {"total": 105, "additions": 47, "deletions": 58}, "files": [{"sha": "dfb2186d8edf3a6ab50b8c9c884fef6b71a661dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -1,3 +1,16 @@\n+2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/loop_add_5.c: Remove XFAILs for tests\n+\tthat now pass.\n+\t* gcc.target/aarch64/sve/reduc_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_13.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_5.c: Likewise.  Update expected\n+\tWHILELO counts.\n+\t* gcc.target/aarch64/sve/slp_7.c: Likewise.\n+\n 2019-10-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/pr65947-1.c: No longer expect doubled dump lines"}, {"sha": "a08af7dfd1e926486a4d223e2cfbff14ebd27a9c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/loop_add_5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_5.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -3,11 +3,11 @@\n \n #include \"loop_add_4.c\"\n \n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #-16\\n} 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #-15\\n} 1 { xfail *-*-* }  } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #-15\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #1\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #15\\n} 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, w[0-9]+\\n} 3 { xfail *-*-* }  } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #15\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, w[0-9]+\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.b, p[0-7]+/z, \\[x[0-9]+, x[0-9]+\\]} 8 } } */\n /* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b, p[0-7]+, \\[x[0-9]+, x[0-9]+\\]} 8 } } */\n \n@@ -16,11 +16,11 @@\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #} 6 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 8 } } */\n \n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #-16\\n} 1 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #-15\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #-15\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #1\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #15\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, w[0-9]+\\n} 3 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, w[0-9]+\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.h, p[0-7]+/z, \\[x[0-9]+, x[0-9]+, lsl 1\\]} 8 } } */\n /* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h, p[0-7]+, \\[x[0-9]+, x[0-9]+, lsl 1\\]} 8 } } */\n "}, {"sha": "f152d04b4735c9be985389f5317b8cf44411f63a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -105,8 +105,8 @@ reduc_##NAME##_##TYPE (TYPE *a, int n)\t\t\\\n \n TEST_BITWISE (DEF_REDUC_BITWISE)\n \n-/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n \n@@ -157,8 +157,8 @@ TEST_BITWISE (DEF_REDUC_BITWISE)\n /* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n \n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */"}, {"sha": "0640cba8e0fe7d632df1b52aa6e1f528d93bf54c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -116,8 +116,8 @@ reduc_##NAME##TYPE (TYPE (*restrict a)[NUM_ELEMS(TYPE)],\t\\\n \n TEST_BITWISE (DEF_REDUC_BITWISE)\n \n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */"}, {"sha": "cced4ad488ecaba889f526e6d25afe364823516d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_5.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_5.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -23,16 +23,12 @@ REDUC (uint64_t)\n REDUC (float)\n REDUC (double)\n \n-/* XFAILed until we support sub-int reductions for signed types.  */\n-/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m} 2 } } */\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m} 2 } } */\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, p[0-7]/m} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m} 1 } } */\n \n-/* XFAILed until we support sub-int reductions for signed types.  */\n-/* { dg-final { scan-assembler-times {\\tsub\\t} 8 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\t} 8 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\t} 2 } } */"}, {"sha": "dec4c87e54dc4b4bd6e7d8cb32b4918b31383c30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_8.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -15,6 +15,5 @@ reduc (int *restrict a, int *restrict b, int *restrict c)\n }\n \n /* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-9]+\\.s, } 1 } } */\n-/* We ought to use the CMPNE result for the SEL too.  */\n-/* { dg-final { scan-assembler-not {\\tcmpeq\\tp[0-9]+\\.s, } { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tcmpeq\\tp[0-9]+\\.s, } } } */\n /* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, } 1 } } */"}, {"sha": "37b5f1148a3734c44c2d938408fe0125978acb86", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_13.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_13.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -32,7 +32,6 @@ vec_slp_##TYPE (TYPE *restrict a, int n)\t\t\t\\\n \n TEST_ALL (VEC_PERM)\n \n-/* ??? We don't treat the int8_t and int16_t loops as reductions.  */\n /* ??? We don't treat the uint loops as SLP.  */\n /* The loop should be fully-masked.  */\n /* { dg-final { scan-assembler-times {\\tld1b\\t} 2 { xfail *-*-* } } } */\n@@ -41,15 +40,15 @@ TEST_ALL (VEC_PERM)\n /* { dg-final { scan-assembler-times {\\tld1w\\t} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\t} 3 { xfail *-*-* } } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\t} 2 } } */\n-/* { dg-final { scan-assembler-not {\\tldr} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tldr} } } */\n \n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 4 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 6 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 4 } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.s} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n \n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfadda\\th[0-9]+, p[0-7], h[0-9]+, z[0-9]+\\.h\\n} 1 } } */"}, {"sha": "6a199d00659e717089950efcde597ed46614baed", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_5.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_5.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -33,34 +33,24 @@ vec_slp_##TYPE (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n \n TEST_ALL (VEC_PERM)\n \n-/* ??? We don't think it's worth using SLP for the 64-bit loops and fall\n-   back to the less efficient non-SLP implementation instead.  */\n-/* ??? At present we don't treat the int8_t and int16_t loops as\n-   reductions.  */\n-/* { dg-final { scan-assembler-times {\\tld1b\\t} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tld1h\\t} 3 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tld1b\\t} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld1h\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\t} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\t} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\t} 3 } } */\n /* { dg-final { scan-assembler-not {\\tld2b\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld2h\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld2w\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld2d\\t} } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 4 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 4 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 4 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s} 4 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 2 } } */\n \n-/* Should be 4 and 6 respectively, if we used reductions for int8_t and\n-   int16_t.  */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 2 } } */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 4 } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 4 } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.s} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n "}, {"sha": "dbc32a4e7981c8d0701e9386eb0c7c4f00cf8f12", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_7.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7815eaa869b450be391b128c588f125fc646926e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c?ref=7815eaa869b450be391b128c588f125fc646926e", "patch": "@@ -43,32 +43,24 @@ TEST_ALL (VEC_PERM)\n    results might be greater than the number of elements in the vector.\n    Otherwise we have two loads per loop, one for the initial vector\n    and one for the loop body.  */\n-/* ??? At present we don't treat the int8_t and int16_t loops as\n-   reductions.  */\n-/* { dg-final { scan-assembler-times {\\tld1b\\t} 2 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tld1h\\t} 3 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tld1b\\t} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tld1h\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\t} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\t} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld4d\\t} 3 } } */\n /* { dg-final { scan-assembler-not {\\tld4b\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld4h\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld4w\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld1d\\t} } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 8 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 8 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 4 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 8 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s} 8 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 8 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 4 } } */\n \n-/* Should be 4 and 6 respectively, if we used reductions for int8_t and\n-   int16_t.  */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 2 } } */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 4 } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 4 } } */\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.s} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n "}]}