{"sha": "90eb63a3a045dd9ac0774860e03163da82cb0a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlYjYzYTNhMDQ1ZGQ5YWMwNzc0ODYwZTAzMTYzZGE4MmNiMGExYw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-05-02T03:30:37Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-05-02T03:30:37Z"}, "message": "extend.texi (Variable Attributes): Add menu and proper @nodes to subsections.\n\n2015-05-01  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (Variable Attributes): Add menu and proper\n\t@nodes to subsections.  Move Microsoft Windows attributes to\n\ttheir own subsection.\n\t(Type Attributes): Reorganize introduction to remove duplicate\n\tlist of attributes.  Add menu and proper @nodes to subsections.\n\tAlphabetize the main table of common attributes.\n\nFrom-SVN: r222714", "tree": {"sha": "c2481a8fef6a8293cf8dfe955d660e299792de37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2481a8fef6a8293cf8dfe955d660e299792de37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90eb63a3a045dd9ac0774860e03163da82cb0a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eb63a3a045dd9ac0774860e03163da82cb0a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eb63a3a045dd9ac0774860e03163da82cb0a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eb63a3a045dd9ac0774860e03163da82cb0a1c/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0717ed3ff9ba969d13ab6a4277a509dd641aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0717ed3ff9ba969d13ab6a4277a509dd641aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0717ed3ff9ba969d13ab6a4277a509dd641aed"}], "stats": {"total": 439, "additions": 248, "deletions": 191}, "files": [{"sha": "fa0575fad09eb57379a33f2948e9b35b199c435e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90eb63a3a045dd9ac0774860e03163da82cb0a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90eb63a3a045dd9ac0774860e03163da82cb0a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90eb63a3a045dd9ac0774860e03163da82cb0a1c", "patch": "@@ -1,3 +1,12 @@\n+2015-05-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Variable Attributes): Add menu and proper\n+\t@nodes to subsections.  Move Microsoft Windows attributes to\n+\ttheir own subsection.\n+\t(Type Attributes): Reorganize introduction to remove duplicate\n+\tlist of attributes.  Add menu and proper @nodes to subsections.\n+\tAlphabetize the main table of common attributes.\n+\n 2015-05-01  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n \n \t* match.pd: New simplification patterns."}, {"sha": "1f6bbd539a8667b876e4b8041c143fc767d36c02", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 239, "deletions": 191, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90eb63a3a045dd9ac0774860e03163da82cb0a1c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90eb63a3a045dd9ac0774860e03163da82cb0a1c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=90eb63a3a045dd9ac0774860e03163da82cb0a1c", "patch": "@@ -5400,6 +5400,26 @@ Other front ends might define more attributes\n @xref{Attribute Syntax}, for details of the exact syntax for using\n attributes.\n \n+@menu\n+* Common Variable Attributes::\n+* AVR Variable Attributes::\n+* Blackfin Variable Attributes::\n+* H8/300 Variable Attributes::\n+* IA-64 Variable Attributes::\n+* M32R/D Variable Attributes::\n+* MeP Variable Attributes::\n+* Microsoft Windows Variable Attributes::\n+* PowerPC Variable Attributes::\n+* SPU Variable Attributes::\n+* x86 Variable Attributes::\n+* Xstormy16 Variable Attributes::\n+@end menu\n+\n+@node Common Variable Attributes\n+@subsection Common Variable Attributes\n+\n+The following attributes are supported on most targets.\n+\n @table @code\n @cindex @code{aligned} variable attribute\n @item aligned (@var{alignment})\n@@ -5522,7 +5542,8 @@ argument, which must be a string, is printed in the warning if\n present.\n \n The @code{deprecated} attribute can also be used for functions and\n-types (@pxref{Common Function Attributes}, @pxref{Type Attributes}).\n+types (@pxref{Common Function Attributes},\n+@pxref{Common Type Attributes}).\n \n @item mode (@var{mode})\n @cindex @code{mode} variable attribute\n@@ -5608,33 +5629,6 @@ attribute is not available on all platforms.\n If you need to map the entire contents of a module to a particular\n section, consider using the facilities of the linker instead.\n \n-@item shared\n-@cindex @code{shared} variable attribute\n-On Microsoft Windows, in addition to putting variable definitions in a named\n-section, the section can also be shared among all running copies of an\n-executable or DLL@.  For example, this small program defines shared data\n-by putting it in a named section @code{shared} and marking the section\n-shareable:\n-\n-@smallexample\n-int foo __attribute__((section (\"shared\"), shared)) = 0;\n-\n-int\n-main()\n-@{\n-  /* @r{Read and write foo.  All running\n-     copies see the same value.}  */\n-  return 0;\n-@}\n-@end smallexample\n-\n-@noindent\n-You may only use the @code{shared} attribute along with @code{section}\n-attribute with a fully-initialized global definition because of the way\n-linkers work.  See @code{section} attribute for more information.\n-\n-The @code{shared} attribute is only available on Microsoft Windows@.\n-\n @item tls_model (\"@var{tls_model}\")\n @cindex @code{tls_model} variable attribute\n The @code{tls_model} attribute sets thread-local storage model\n@@ -5692,45 +5686,14 @@ struct S  __attribute__ ((vector_size (16))) foo;\n is invalid even if the size of the structure is the same as the size of\n the @code{int}.\n \n-@item selectany\n-@cindex @code{selectany} variable attribute\n-The @code{selectany} attribute causes an initialized global variable to\n-have link-once semantics.  When multiple definitions of the variable are\n-encountered by the linker, the first is selected and the remainder are\n-discarded.  Following usage by the Microsoft compiler, the linker is told\n-@emph{not} to warn about size or content differences of the multiple\n-definitions.\n-\n-Although the primary usage of this attribute is for POD types, the\n-attribute can also be applied to global C++ objects that are initialized\n-by a constructor.  In this case, the static initialization and destruction\n-code for the object is emitted in each translation defining the object,\n-but the calls to the constructor and destructor are protected by a\n-link-once guard variable.\n-\n-The @code{selectany} attribute is only available on Microsoft Windows\n-targets.  You can use @code{__declspec (selectany)} as a synonym for\n-@code{__attribute__ ((selectany))} for compatibility with other\n-compilers.\n-\n @item weak\n @cindex @code{weak} variable attribute\n The @code{weak} attribute is described in\n @ref{Common Function Attributes}.\n \n-@item dllimport\n-@cindex @code{dllimport} variable attribute\n-The @code{dllimport} attribute is described in\n-@ref{Microsoft Windows Function Attributes}.\n-\n-@item dllexport\n-@cindex @code{dllexport} variable attribute\n-The @code{dllexport} attribute is described in\n-@ref{Microsoft Windows Function Attributes}.\n-\n @end table\n \n-@anchor{AVR Variable Attributes}\n+@node AVR Variable Attributes\n @subsection AVR Variable Attributes\n \n @table @code\n@@ -5813,6 +5776,7 @@ volatile int porta __attribute__((address (0x600)));\n \n @end table\n \n+@node Blackfin Variable Attributes\n @subsection Blackfin Variable Attributes\n \n Three attributes are currently defined for the Blackfin.\n@@ -5837,6 +5801,7 @@ Variables with @code{l2} attribute are put into the specific section\n named @code{.l2.data}.\n @end table\n \n+@node H8/300 Variable Attributes\n @subsection H8/300 Variable Attributes\n \n These variable attributes are available for H8/300 targets:\n@@ -5865,6 +5830,7 @@ slightly under 32KB of data.\n \n @end table\n \n+@node IA-64 Variable Attributes\n @subsection IA-64 Variable Attributes\n \n The IA-64 back end supports the following variable attribute:\n@@ -5883,6 +5849,7 @@ defined by shared libraries.\n \n @end table\n \n+@node M32R/D Variable Attributes\n @subsection M32R/D Variable Attributes\n \n One attribute is currently defined for the M32R/D@.\n@@ -5903,7 +5870,7 @@ Medium and large model objects may live anywhere in the 32-bit address space\n addresses).\n @end table\n \n-@anchor{MeP Variable Attributes}\n+@node MeP Variable Attributes\n @subsection MeP Variable Attributes\n \n The MeP target has a number of addressing modes and busses.  The\n@@ -5967,6 +5934,72 @@ int cpu_clock __attribute__((cb(0x123)));\n \n @end table\n \n+@node Microsoft Windows Variable Attributes\n+@subsection Microsoft Windows Variable Attributes\n+\n+You can use these attributes on Microsoft Windows targets.\n+@ref{x86 Variable Attributes} for additional Windows compatibility\n+attributes available on all x86 targets.\n+\n+@table @code\n+@item dllimport\n+@itemx dllexport\n+@cindex @code{dllimport} variable attribute\n+@cindex @code{dllexport} variable attribute\n+The @code{dllimport} and @code{dllexport} attributes are described in\n+@ref{Microsoft Windows Function Attributes}.\n+\n+@item selectany\n+@cindex @code{selectany} variable attribute\n+The @code{selectany} attribute causes an initialized global variable to\n+have link-once semantics.  When multiple definitions of the variable are\n+encountered by the linker, the first is selected and the remainder are\n+discarded.  Following usage by the Microsoft compiler, the linker is told\n+@emph{not} to warn about size or content differences of the multiple\n+definitions.\n+\n+Although the primary usage of this attribute is for POD types, the\n+attribute can also be applied to global C++ objects that are initialized\n+by a constructor.  In this case, the static initialization and destruction\n+code for the object is emitted in each translation defining the object,\n+but the calls to the constructor and destructor are protected by a\n+link-once guard variable.\n+\n+The @code{selectany} attribute is only available on Microsoft Windows\n+targets.  You can use @code{__declspec (selectany)} as a synonym for\n+@code{__attribute__ ((selectany))} for compatibility with other\n+compilers.\n+\n+@item shared\n+@cindex @code{shared} variable attribute\n+On Microsoft Windows, in addition to putting variable definitions in a named\n+section, the section can also be shared among all running copies of an\n+executable or DLL@.  For example, this small program defines shared data\n+by putting it in a named section @code{shared} and marking the section\n+shareable:\n+\n+@smallexample\n+int foo __attribute__((section (\"shared\"), shared)) = 0;\n+\n+int\n+main()\n+@{\n+  /* @r{Read and write foo.  All running\n+     copies see the same value.}  */\n+  return 0;\n+@}\n+@end smallexample\n+\n+@noindent\n+You may only use the @code{shared} attribute along with @code{section}\n+attribute with a fully-initialized global definition because of the way\n+linkers work.  See @code{section} attribute for more information.\n+\n+The @code{shared} attribute is only available on Microsoft Windows@.\n+\n+@end table\n+\n+@node PowerPC Variable Attributes\n @subsection PowerPC Variable Attributes\n \n Three attributes currently are defined for PowerPC configurations:\n@@ -5981,14 +6014,15 @@ documentation in @ref{x86 Variable Attributes}.\n For documentation of @code{altivec} attribute please see the\n documentation in @ref{PowerPC Type Attributes}.\n \n+@node SPU Variable Attributes\n @subsection SPU Variable Attributes\n \n @cindex @code{spu_vector} variable attribute, SPU\n The SPU supports the @code{spu_vector} attribute for variables.  For\n documentation of this attribute please see the documentation in\n @ref{SPU Type Attributes}.\n \n-@anchor{x86 Variable Attributes}\n+@node x86 Variable Attributes\n @subsection x86 Variable Attributes\n \n Two attributes are currently defined for x86 configurations:\n@@ -6126,6 +6160,7 @@ Here, @code{t5} takes up 2 bytes.\n @end enumerate\n @end table\n \n+@node Xstormy16 Variable Attributes\n @subsection Xstormy16 Variable Attributes\n \n One attribute is currently defined for xstormy16 configurations:\n@@ -6149,27 +6184,39 @@ placed in either the @code{.bss_below100} section or the\n @cindex type attributes\n \n The keyword @code{__attribute__} allows you to specify special\n-attributes of @code{struct} and @code{union} types when you define\n-such types.  This keyword is followed by an attribute specification\n-inside double parentheses.  Eight attributes are currently defined for\n-types: @code{aligned}, @code{packed}, @code{transparent_union},\n-@code{unused}, @code{deprecated}, @code{visibility}, @code{may_alias}\n-and @code{bnd_variable_size}.  Other attributes are defined for\n+attributes of types.  Some type attributes apply only to @code{struct}\n+and @code{union} types, while others can apply to any type defined\n+via a @code{typedef} declaration.  Other attributes are defined for\n functions (@pxref{Function Attributes}), labels (@pxref{Label \n Attributes}) and for variables (@pxref{Variable Attributes}).\n \n-You may specify type attributes in an enum, struct or union type\n-declaration or definition, or for other types in a @code{typedef}\n-declaration.\n+The @code{__attribute__} keyword is followed by an attribute specification\n+inside double parentheses.  \n \n-For an enum, struct or union type, you may specify attributes either\n-between the enum, struct or union tag and the name of the type, or\n-just past the closing curly brace of the @emph{definition}.  The\n-former syntax is preferred.\n+You may specify type attributes in an enum, struct or union type\n+declaration or definition by placing them immediately after the\n+@code{struct}, @code{union} or @code{enum} keyword.  A less preferred\n+syntax is to place them just past the closing curly brace of the\n+definition.\n \n+You can also include type attributes in a @code{typedef} declaration.\n @xref{Attribute Syntax}, for details of the exact syntax for using\n attributes.\n \n+@menu\n+* Common Type Attributes::\n+* ARM Type Attributes::\n+* MeP Type Attributes::\n+* PowerPC Type Attributes::\n+* SPU Type Attributes::\n+* x86 Type Attributes::\n+@end menu\n+\n+@node Common Type Attributes\n+@subsection Common Type Attributes\n+\n+The following type attributes are supported on most targets.\n+\n @table @code\n @cindex @code{aligned} type attribute\n @item aligned (@var{alignment})\n@@ -6250,14 +6297,6 @@ up to a maximum of 8-byte alignment, then specifying @code{aligned(16)}\n in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n-@item packed\n-@cindex @code{packed} type attribute\n-This attribute, attached to @code{struct} or @code{union} type\n-definition, specifies that each member (other than zero-width bit-fields)\n-of the structure or union is placed to minimize the memory required.  When\n-attached to an @code{enum} definition, it indicates that the smallest\n-integral type should be used.\n-\n @opindex fshort-enums\n Specifying this attribute for @code{struct} and @code{union} types is\n equivalent to specifying the @code{packed} attribute on each of the\n@@ -6289,78 +6328,38 @@ You may only specify this attribute on the definition of an @code{enum},\n @code{struct} or @code{union}, not on a @code{typedef} that does not\n also define the enumerated type, structure or union.\n \n-@item transparent_union\n-@cindex @code{transparent_union} type attribute\n-\n-This attribute, attached to a @code{union} type definition, indicates\n-that any function parameter having that union type causes calls to that\n-function to be treated in a special way.\n-\n-First, the argument corresponding to a transparent union type can be of\n-any type in the union; no cast is required.  Also, if the union contains\n-a pointer type, the corresponding argument can be a null pointer\n-constant or a void pointer expression; and if the union contains a void\n-pointer type, the corresponding argument can be any pointer expression.\n-If the union member type is a pointer, qualifiers like @code{const} on\n-the referenced type must be respected, just as with normal pointer\n-conversions.\n-\n-Second, the argument is passed to the function using the calling\n-conventions of the first member of the transparent union, not the calling\n-conventions of the union itself.  All members of the union must have the\n-same machine representation; this is necessary for this argument passing\n-to work properly.\n-\n-Transparent unions are designed for library functions that have multiple\n-interfaces for compatibility reasons.  For example, suppose the\n-@code{wait} function must accept either a value of type @code{int *} to\n-comply with POSIX, or a value of type @code{union wait *} to comply with\n-the 4.1BSD interface.  If @code{wait}'s parameter were @code{void *},\n-@code{wait} would accept both kinds of arguments, but it would also\n-accept any other pointer type and this would make argument type checking\n-less useful.  Instead, @code{<sys/wait.h>} might define the interface\n-as follows:\n-\n-@smallexample\n-typedef union __attribute__ ((__transparent_union__))\n-  @{\n-    int *__ip;\n-    union wait *__up;\n-  @} wait_status_ptr_t;\n-\n-pid_t wait (wait_status_ptr_t);\n-@end smallexample\n-\n-@noindent\n-This interface allows either @code{int *} or @code{union wait *}\n-arguments to be passed, using the @code{int *} calling convention.\n-The program can call @code{wait} with arguments of either type:\n+@item bnd_variable_size\n+@cindex @code{bnd_variable_size} type attribute\n+@cindex Pointer Bounds Checker attributes\n+When applied to a structure field, this attribute tells Pointer\n+Bounds Checker that the size of this field should not be computed\n+using static type information.  It may be used to mark variably-sized\n+static array fields placed at the end of a structure.\n \n @smallexample\n-int w1 () @{ int w; return wait (&w); @}\n-int w2 () @{ union wait w; return wait (&w); @}\n+struct S\n+@{\n+  int size;\n+  char data[1];\n+@}\n+S *p = (S *)malloc (sizeof(S) + 100);\n+p->data[10] = 0; //Bounds violation\n @end smallexample\n \n @noindent\n-With this interface, @code{wait}'s implementation might look like this:\n+By using an attribute for the field we may avoid unwanted bound\n+violation checks:\n \n @smallexample\n-pid_t wait (wait_status_ptr_t p)\n+struct S\n @{\n-  return waitpid (-1, p.__ip, 0);\n+  int size;\n+  char data[1] __attribute__((bnd_variable_size));\n @}\n+S *p = (S *)malloc (sizeof(S) + 100);\n+p->data[10] = 0; //OK\n @end smallexample\n \n-@item unused\n-@cindex @code{unused} type attribute\n-When attached to a type (including a @code{union} or a @code{struct}),\n-this attribute means that variables of that type are meant to appear\n-possibly unused.  GCC does not produce a warning for any variables of\n-that type, even if the variable appears to do nothing.  This is often\n-the case with lock or thread classes, which are usually defined and then\n-not referenced, but contain constructors and destructors that have\n-nontrivial bookkeeping functions.\n-\n @item deprecated\n @itemx deprecated (@var{msg})\n @cindex @code{deprecated} type attribute\n@@ -6394,6 +6393,18 @@ present.\n The @code{deprecated} attribute can also be used for functions and\n variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n \n+@item designated_init\n+@cindex @code{designated_init} type attribute\n+This attribute may only be applied to structure types.  It indicates\n+that any initialization of an object of this type must use designated\n+initializers rather than positional initializers.  The intent of this\n+attribute is to allow the programmer to indicate that a structure's\n+layout may change, and that therefore relying on positional\n+initialization will result in future breakage.\n+\n+GCC emits warnings based on this attribute by default; use\n+@option{-Wno-designated-init} to suppress them.\n+\n @item may_alias\n @cindex @code{may_alias} type attribute\n Accesses through pointers to types with this attribute are not subject\n@@ -6435,70 +6446,107 @@ declaration, the above program would abort when compiled with\n @option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n above.\n \n-@item visibility\n-@cindex @code{visibility} type attribute\n-In C++, attribute visibility (@pxref{Function Attributes}) can also be\n-applied to class, struct, union and enum types.  Unlike other type\n-attributes, the attribute must appear between the initial keyword and\n-the name of the type; it cannot appear after the body of the type.\n+@item packed\n+@cindex @code{packed} type attribute\n+This attribute, attached to @code{struct} or @code{union} type\n+definition, specifies that each member (other than zero-width bit-fields)\n+of the structure or union is placed to minimize the memory required.  When\n+attached to an @code{enum} definition, it indicates that the smallest\n+integral type should be used.\n \n-Note that the type visibility is applied to vague linkage entities\n-associated with the class (vtable, typeinfo node, etc.).  In\n-particular, if a class is thrown as an exception in one shared object\n-and caught in another, the class must have default visibility.\n-Otherwise the two shared objects are unable to use the same\n-typeinfo node and exception handling will break.\n+@item transparent_union\n+@cindex @code{transparent_union} type attribute\n \n-@item designated_init\n-@cindex @code{designated_init} type attribute\n-This attribute may only be applied to structure types.  It indicates\n-that any initialization of an object of this type must use designated\n-initializers rather than positional initializers.  The intent of this\n-attribute is to allow the programmer to indicate that a structure's\n-layout may change, and that therefore relying on positional\n-initialization will result in future breakage.\n+This attribute, attached to a @code{union} type definition, indicates\n+that any function parameter having that union type causes calls to that\n+function to be treated in a special way.\n \n-GCC emits warnings based on this attribute by default; use\n-@option{-Wno-designated-init} to suppress them.\n+First, the argument corresponding to a transparent union type can be of\n+any type in the union; no cast is required.  Also, if the union contains\n+a pointer type, the corresponding argument can be a null pointer\n+constant or a void pointer expression; and if the union contains a void\n+pointer type, the corresponding argument can be any pointer expression.\n+If the union member type is a pointer, qualifiers like @code{const} on\n+the referenced type must be respected, just as with normal pointer\n+conversions.\n \n-@item bnd_variable_size\n-@cindex @code{bnd_variable_size} type attribute\n-@cindex Pointer Bounds Checker attributes\n-When applied to a structure field, this attribute tells Pointer\n-Bounds Checker that the size of this field should not be computed\n-using static type information.  It may be used to mark variably-sized\n-static array fields placed at the end of a structure.\n+Second, the argument is passed to the function using the calling\n+conventions of the first member of the transparent union, not the calling\n+conventions of the union itself.  All members of the union must have the\n+same machine representation; this is necessary for this argument passing\n+to work properly.\n+\n+Transparent unions are designed for library functions that have multiple\n+interfaces for compatibility reasons.  For example, suppose the\n+@code{wait} function must accept either a value of type @code{int *} to\n+comply with POSIX, or a value of type @code{union wait *} to comply with\n+the 4.1BSD interface.  If @code{wait}'s parameter were @code{void *},\n+@code{wait} would accept both kinds of arguments, but it would also\n+accept any other pointer type and this would make argument type checking\n+less useful.  Instead, @code{<sys/wait.h>} might define the interface\n+as follows:\n \n @smallexample\n-struct S\n-@{\n-  int size;\n-  char data[1];\n-@}\n-S *p = (S *)malloc (sizeof(S) + 100);\n-p->data[10] = 0; //Bounds violation\n+typedef union __attribute__ ((__transparent_union__))\n+  @{\n+    int *__ip;\n+    union wait *__up;\n+  @} wait_status_ptr_t;\n+\n+pid_t wait (wait_status_ptr_t);\n @end smallexample\n \n @noindent\n-By using an attribute for the field we may avoid unwanted bound\n-violation checks:\n+This interface allows either @code{int *} or @code{union wait *}\n+arguments to be passed, using the @code{int *} calling convention.\n+The program can call @code{wait} with arguments of either type:\n \n @smallexample\n-struct S\n+int w1 () @{ int w; return wait (&w); @}\n+int w2 () @{ union wait w; return wait (&w); @}\n+@end smallexample\n+\n+@noindent\n+With this interface, @code{wait}'s implementation might look like this:\n+\n+@smallexample\n+pid_t wait (wait_status_ptr_t p)\n @{\n-  int size;\n-  char data[1] __attribute__((bnd_variable_size));\n+  return waitpid (-1, p.__ip, 0);\n @}\n-S *p = (S *)malloc (sizeof(S) + 100);\n-p->data[10] = 0; //OK\n @end smallexample\n \n+@item unused\n+@cindex @code{unused} type attribute\n+When attached to a type (including a @code{union} or a @code{struct}),\n+this attribute means that variables of that type are meant to appear\n+possibly unused.  GCC does not produce a warning for any variables of\n+that type, even if the variable appears to do nothing.  This is often\n+the case with lock or thread classes, which are usually defined and then\n+not referenced, but contain constructors and destructors that have\n+nontrivial bookkeeping functions.\n+\n+@item visibility\n+@cindex @code{visibility} type attribute\n+In C++, attribute visibility (@pxref{Function Attributes}) can also be\n+applied to class, struct, union and enum types.  Unlike other type\n+attributes, the attribute must appear between the initial keyword and\n+the name of the type; it cannot appear after the body of the type.\n+\n+Note that the type visibility is applied to vague linkage entities\n+associated with the class (vtable, typeinfo node, etc.).  In\n+particular, if a class is thrown as an exception in one shared object\n+and caught in another, the class must have default visibility.\n+Otherwise the two shared objects are unable to use the same\n+typeinfo node and exception handling will break.\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the\n double parentheses: for example, @samp{__attribute__ ((aligned (16),\n packed))}.\n \n+@node ARM Type Attributes\n @subsection ARM Type Attributes\n \n @cindex @code{notshared} type attribute, ARM\n@@ -6524,7 +6572,7 @@ virtual table for @code{C} is not exported.  (You can use\n @code{__attribute__} instead of @code{__declspec} if you prefer, but\n most Symbian OS code uses @code{__declspec}.)\n \n-@anchor{MeP Type Attributes}\n+@node MeP Type Attributes\n @subsection MeP Type Attributes\n \n @cindex @code{based} type attribute, MeP\n@@ -6536,7 +6584,7 @@ Specifically, the @code{based}, @code{tiny}, @code{near}, and\n @code{far} attributes may be applied to either.  The @code{io} and\n @code{cb} attributes may not be applied to types.\n \n-@anchor{PowerPC Type Attributes}\n+@node PowerPC Type Attributes\n @subsection PowerPC Type Attributes\n \n Three attributes currently are defined for PowerPC configurations:\n@@ -6563,7 +6611,7 @@ __attribute__((altivec(bool__))) unsigned\n These attributes mainly are intended to support the @code{__vector},\n @code{__pixel}, and @code{__bool} AltiVec keywords.\n \n-@anchor{SPU Type Attributes}\n+@node SPU Type Attributes\n @subsection SPU Type Attributes\n \n @cindex @code{spu_vector} type attribute, SPU\n@@ -6572,7 +6620,7 @@ allows one to declare vector data types supported by the Sony/Toshiba/IBM SPU\n Language Extensions Specification.  It is intended to support the\n @code{__vector} keyword.\n \n-@anchor{x86 Type Attributes}\n+@node x86 Type Attributes\n @subsection x86 Type Attributes\n \n Two attributes are currently defined for x86 configurations:"}]}