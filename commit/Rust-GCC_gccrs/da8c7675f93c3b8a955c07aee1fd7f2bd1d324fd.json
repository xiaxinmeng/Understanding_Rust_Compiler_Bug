{"sha": "da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4Yzc2NzVmOTNjM2I4YTk1NWMwN2FlZTFmZDdmMmJkMWQzMjRmZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-05T17:02:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-05T17:02:26Z"}, "message": "ipa-pure-const.c (propagate): Fix type in handling functions that can not return...\n\n\t* ipa-pure-const.c (propagate): Fix type in handling functions\n\tthat can not return; be more cureful about merging the results\n\twith previously known.\n\nFrom-SVN: r160321", "tree": {"sha": "acef4131d9a1dae649c2564c544c7027da6300d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acef4131d9a1dae649c2564c544c7027da6300d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd/comments", "author": null, "committer": null, "parents": [{"sha": "c1ce46a54585e1897e6226e880a1501a950f98f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ce46a54585e1897e6226e880a1501a950f98f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ce46a54585e1897e6226e880a1501a950f98f5"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "85b61fe0beef5aba73b3627439b5d434ba4dcce5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "patch": "@@ -1,3 +1,9 @@\n+2010-06-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-pure-const.c (propagate): Fix type in handling functions\n+\tthat can not return; be more cureful about merging the results\n+\twith previously known.\n+\n 2010-06-05  Matthias Klose  <doko@ubuntu.com>\n \n \t* gcc.c (cc1_options, cpp_unique_options): Use find-plugindir spec"}, {"sha": "299019a145c8685e9f6b19b5de282fa037eaa02b", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=da8c7675f93c3b8a955c07aee1fd7f2bd1d324fd", "patch": "@@ -1055,7 +1055,7 @@ propagate (void)\n \t\t\t       pure_const_names[y_l->pure_const_state],\n \t\t\t       y_l->looping);\n \t\t    }\n-\t\t  if (y_l->pure_const_state > ECF_PURE\n+\t\t  if (y_l->pure_const_state > IPA_PURE\n \t\t      && cgraph_edge_cannot_lead_to_return (e))\n \t\t    {\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1108,10 +1108,17 @@ propagate (void)\n \t\t      edge_looping = true;\n \t\t    }\n \t\t}\n+\n+\t      /* Merge the results with what we already know.\n+\t\t When we found function to be NEITHER, but we know\n+\t\t it is looping pure const, be sure to set the looping flag. */\n \t      pure_const_state = MAX (pure_const_state, MIN (edge_state,\n \t\t\t\t      w_l->state_previously_known));\n-\t      looping = MAX (looping, MIN (edge_looping,\n-\t\t\t\t\t   w_l->looping_previously_known));\n+\t      if (edge_state > w_l->state_previously_known)\n+\t\tlooping = MAX (looping, w_l->looping_previously_known);\n+\t      else\n+\t\tlooping = MAX (looping, MIN (edge_looping,\n+\t\t\t\t\t     w_l->looping_previously_known));\n \t      if (pure_const_state == IPA_NEITHER)\n \t        break;\n \t    }\n@@ -1134,7 +1141,10 @@ propagate (void)\n \n \t  if (w_l->state_previously_known != IPA_NEITHER\n \t      && this_state > w_l->state_previously_known)\n-            this_state = w_l->state_previously_known;\n+\t    {\n+              this_state = w_l->state_previously_known;\n+\t      this_looping |= w_l->looping_previously_known;\n+\t    }\n \t  if (!this_looping && self_recursive_p (w))\n \t    this_looping = true;\n \t  if (!w_l->looping_previously_known)"}]}