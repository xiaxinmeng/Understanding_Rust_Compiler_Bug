{"sha": "32f9be169ca3c5e1c56735c8b1e076570d56389c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmOWJlMTY5Y2EzYzVlMWM1NjczNWM4YjFlMDc2NTcwZDU2Mzg5Yw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-11-21T12:30:37Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-11-21T12:30:37Z"}, "message": "string_view: Rep empty string with unit-length static constexpr string.\n\n2013-11-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/experimental/string_view: Rep empty string with unit-length\n\tstatic constexpr string. Uncomment _GLIBCXX_VISIBILITY. Enforce\n\tinvariant of no nullptr string pointer.\n\t* include/experimental/string_view.tcc: Ditto.\n\t* testsuite/experimental/string_view/cons/char/1.cc: data() for empty\n\tstring_view is no longer nullptr.\n\t* testsuite/experimental/string_view/cons/wchar_t/1.cc: Ditto.\n\t* testsuite/experimental/string_view/operations/data/char/1.cc: Ditto.\n\t* testsuite/experimental/string_view/operations/data/wchar_t/1.cc:\n\tDitto.\n\nFrom-SVN: r205213", "tree": {"sha": "2c8203853e473a685d088ab1bfe274e96e46d383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8203853e473a685d088ab1bfe274e96e46d383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32f9be169ca3c5e1c56735c8b1e076570d56389c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f9be169ca3c5e1c56735c8b1e076570d56389c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f9be169ca3c5e1c56735c8b1e076570d56389c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f9be169ca3c5e1c56735c8b1e076570d56389c/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ae7b11b5fa0dfe134978d510d2aaa2595f2d2f"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "d3d6405320f95e241864116b335127691054ae87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -1,3 +1,16 @@\n+2013-11-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/experimental/string_view: Rep empty string with unit-length\n+\tstatic constexpr string. Uncomment _GLIBCXX_VISIBILITY. Enforce\n+\tinvariant of no nullptr string pointer.\n+\t* include/experimental/string_view.tcc: Ditto.\n+\t* testsuite/experimental/string_view/cons/char/1.cc: data() for empty\n+\tstring_view is no longer nullptr.\n+\t* testsuite/experimental/string_view/cons/wchar_t/1.cc: Ditto.\n+\t* testsuite/experimental/string_view/operations/data/char/1.cc: Ditto.\n+\t* testsuite/experimental/string_view/operations/data/wchar_t/1.cc:\n+\tDitto.\n+\n 2013-11-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement __gnu_cxx::hypergeometric_distribution."}, {"sha": "000d317c5c51ce087d4dbcbf4d7c10009f64b496", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -43,7 +43,7 @@\n #include <string>\n #include <limits>\n \n-namespace std //_GLIBCXX_VISIBILITY(default)\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace experimental\n {\n@@ -66,6 +66,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *    _CharT*    _M_str\n    *    size_t     _M_len\n    *  @endcode\n+   *\n+   *  A basic_string_view represents an empty string with a static constexpr\n+   *  length one string:\n+   *\n+   *  @code\n+   *    static constexpr value_type _S_empty_str[1]{0};\n+   *  @endcode\n    */\n   template<typename _CharT, typename _Traits = char_traits<_CharT>>\n     class basic_string_view\n@@ -92,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr\n       basic_string_view() noexcept\n-      : _M_len{0}, _M_str{nullptr}\n+      : _M_len{0}, _M_str{_S_empty_str}\n       { }\n \n       constexpr basic_string_view(const basic_string_view&) noexcept = default;\n@@ -104,11 +111,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { }\n \n       constexpr basic_string_view(const _CharT* __str)\n-      : _M_len{__str == nullptr ? 0 : traits_type::length(__str)}, _M_str{__str}\n+      : _M_len{__str == nullptr ? 0 : traits_type::length(__str)},\n+\t_M_str{__str == nullptr ? _S_empty_str : __str}\n       { }\n \n       constexpr basic_string_view(const _CharT* __str, size_type __len)\n-      : _M_len{__len}, _M_str{__str}\n+      : _M_len{__str == nullptr ? 0 :__len},\n+        _M_str{__str == nullptr || __len == 0 ? _S_empty_str : __str}\n       { }\n \n       basic_string_view&\n@@ -185,7 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t     \"(which is %zu) >= this->size() \"\n \t\t\t\t\t     \"(which is %zu)\"),\n \t\t\t\t\t __pos, this->size()),\n-\t\t*static_cast<pointer>(nullptr));\n+\t\t_S_empty_str[0]);\n       }\n \n       constexpr const _CharT&\n@@ -211,7 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       clear() noexcept\n       {\n \tthis->_M_len = 0;\n-\tthis->_M_str = nullptr;\n+\tthis->_M_str = _S_empty_str;\n       }\n \n       void\n@@ -408,6 +417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     private:\n+\n       static constexpr const int\n       _S_compare(size_type __n1, size_type __n2) noexcept\n       {\n@@ -418,6 +428,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     : static_cast<int>(difference_type{__n1 - __n2});\n       }\n \n+      static constexpr value_type _S_empty_str[1]{};\n+\n       size_t\t    _M_len;\n       const _CharT* _M_str;\n     };"}, {"sha": "eeccb026344bf2dc8652f60c84a0ca83b9961973", "filename": "libstdc++-v3/include/experimental/string_view.tcc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view.tcc?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -40,12 +40,16 @@\n # include <bits/c++14_warning.h>\n #else\n \n-namespace std //_GLIBCXX_VISIBILITY(default)\n+namespace std _GLIBCXX_VISIBILITY(default)\n {\n namespace experimental\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  template<typename _CharT, typename _Traits>\n+    constexpr _CharT\n+    basic_string_view<_CharT, _Traits>::_S_empty_str[1];\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::"}, {"sha": "982a4c76fb5e1dc59f93a27f3d44166e716aeeaa", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/char/1.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fchar%2F1.cc?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -33,7 +33,7 @@ test01()\n   // basic_string_view()\n   const std::experimental::string_view str00{};\n   VERIFY( str00.length() == 0 );\n-  VERIFY( str00.data() == nullptr );\n+  VERIFY( str00.data() != nullptr );\n \n   // basic_string_view(const char*)\n   const char str_lit01[] = \"rodeo beach, marin\";\n@@ -53,10 +53,11 @@ test01()\n   std::experimental::string_view str05{str_lit01, len_lit01};\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n-  //  This is invalid and unchecked.\n-  //std::experimental::string_view str06{nullptr, len_lit01};\n-  //VERIFY( str06.length() == 0 );\n-  //VERIFY( str06.data() == nullptr );\n+\n+  //  basic_string_view(const char* s, std::size_t l)\n+  std::experimental::string_view str06{nullptr, len_lit01};\n+  VERIFY( str06.length() == 0 );\n+  VERIFY( str06.data() != nullptr );\n \n   // basic_string_view(basic_string& s)\n   std::string istr07(10, 'z');"}, {"sha": "eb115fd55283dfde0faa5425834a7d14a748556a", "filename": "libstdc++-v3/testsuite/experimental/string_view/cons/wchar_t/1.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fcons%2Fwchar_t%2F1.cc?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -33,7 +33,7 @@ test01()\n   // basic_string_view()\n   const std::experimental::wstring_view str00{};\n   VERIFY( str00.length() == 0 );\n-  VERIFY( str00.data() == nullptr );\n+  VERIFY( str00.data() != nullptr );\n \n   // basic_string_view(const char*)\n   const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n@@ -53,10 +53,11 @@ test01()\n   std::experimental::wstring_view str05{str_lit01, len_lit01};\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n-  //  This is invalid and unchecked.\n-  //std::experimental::wstring_view str06{nullptr, len_lit01};\n-  //VERIFY( str06.length() == 0 );\n-  //VERIFY( str06.data() == nullptr );\n+\n+  //  basic_string_view(const wchar_t* s, std::size_t l)\n+  std::experimental::wstring_view str06{nullptr, len_lit01};\n+  VERIFY( str06.length() == 0 );\n+  VERIFY( str06.data() != nullptr );\n \n   // basic_string_view(basic_string& s)\n   std::wstring istr07(10, L'z');"}, {"sha": "be75de917919b0017e4ba5d9758493aa2f8cceaa", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fchar%2F1.cc?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -29,10 +29,10 @@ test01()\n \n   std::experimental::string_view empty;\n \n-  // data() for size == 0 is non-NULL?\n+  // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::experimental::string_view::value_type* p = empty.data();\n-  VERIFY( p == nullptr );\n+  VERIFY( p );\n \n   return 0;\n }"}, {"sha": "5e00b00b601bc7d13db28f6e10d836cd49c74720", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/data/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f9be169ca3c5e1c56735c8b1e076570d56389c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fdata%2Fwchar_t%2F1.cc?ref=32f9be169ca3c5e1c56735c8b1e076570d56389c", "patch": "@@ -29,10 +29,10 @@ test01()\n \n   std::experimental::wstring_view empty;\n \n-  // data() for size == 0 is non-NULL?\n+  // data() for size == 0 is non-NULL.\n   VERIFY( empty.size() == 0 );\n   const std::experimental::wstring_view::value_type* p = empty.data();\n-  VERIFY( p == nullptr );\n+  VERIFY( p );\n \n   return 0;\n }"}]}