{"sha": "a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg4NmFlNzQ3ZTFmNDBjYjUzOGI2Y2I5YmFiZjJlNTkwNGE3ZjJiZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@cygnus.com", "date": "1997-11-01T23:45:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-01T23:45:10Z"}, "message": "flow.c (find_basic_blocks): Generate correct flow control information when exception handling notes are present.\n\n        * flow.c (find_basic_blocks): Generate correct flow control\n        information when exception handling notes are present.\n\nFrom-SVN: r16263", "tree": {"sha": "f6765880bf151f007b09791d0437c9d4b6dd297e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6765880bf151f007b09791d0437c9d4b6dd297e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a886ae747e1f40cb538b6cb9babf2e5904a7f2be/comments", "author": null, "committer": null, "parents": [{"sha": "c2c85462f3b86e2945a29a2b9406bcd079b2c872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c85462f3b86e2945a29a2b9406bcd079b2c872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c85462f3b86e2945a29a2b9406bcd079b2c872"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "e153a19f67ed1864c55c1fef2e554dc0004862ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886ae747e1f40cb538b6cb9babf2e5904a7f2be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886ae747e1f40cb538b6cb9babf2e5904a7f2be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "patch": "@@ -1,3 +1,8 @@\n+Sat Nov  1 16:44:49 1997  Jason Merrill  (jason@cygnus.com)\n+\n+\t* flow.c (find_basic_blocks): Generate correct flow control\n+\tinformation when exception handling notes are present.\n+\n Sat Nov  1 13:42:19 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* dwarf2out.c (output_call_frame_info): Fix length argument"}, {"sha": "08dd4e8854622c432ad495b02f588d1672323344", "filename": "gcc/flow.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886ae747e1f40cb538b6cb9babf2e5904a7f2be/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886ae747e1f40cb538b6cb9babf2e5904a7f2be/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=a886ae747e1f40cb538b6cb9babf2e5904a7f2be", "patch": "@@ -522,21 +522,39 @@ find_basic_blocks (f, nonlocal_label_list)\n \t  }\n \n       /* Find all call insns and mark them as possibly jumping\n-\t to all the nonlocal goto handler labels.  */\n+\t to all the nonlocal goto handler labels, or to the current\n+\t exception handler.  */\n \n-      for (insn = f; insn; insn = NEXT_INSN (insn))\n-\tif (GET_CODE (insn) == CALL_INSN\n-\t    && ! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n-\t  {\n-\t    for (x = nonlocal_label_list; x; x = XEXP (x, 1))\n-\t      mark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n-\t\t\t      insn, 0);\n+      for (note = NULL_RTX, insn = f; insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  if (! asynchronous_exceptions && GET_CODE (insn) == NOTE)\n+\t    {\n+\t      if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG)\n+\t\t{\n+\t\t  for (x = exception_handler_labels; x; x = XEXP (x, 1))\n+\t\t    if (CODE_LABEL_NUMBER (XEXP (x, 0))\n+\t\t\t== NOTE_BLOCK_NUMBER (insn))\n+\t\t      {\n+\t\t\tnote = gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\t\t XEXP (x, 0), note);\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  if (x == NULL_RTX)\n+\t\t    abort ();\n+\t\t}\n+\t      else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n+\t\tnote = XEXP (note, 1);\n+\t    }\n+\t  else if (GET_CODE (insn) == CALL_INSN\n+\t\t   && ! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t    {\n+\t      if (note)\n+\t\tmark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (note, 0)),\n+\t\t\t\tinsn, 0);\n \n-\t    if (! asynchronous_exceptions)\n-\t      for (x = exception_handler_labels; x; x = XEXP (x, 1))\n+\t      for (x = nonlocal_label_list; x; x = XEXP (x, 1))\n \t\tmark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n \t\t\t\tinsn, 0);\n-\n \t    /* ??? This could be made smarter:\n \t       in some cases it's possible to tell that certain\n \t       calls will not do a nonlocal goto.\n@@ -546,7 +564,8 @@ find_basic_blocks (f, nonlocal_label_list)\n \t       only calls to those functions or to other nested\n \t       functions that use them could possibly do nonlocal\n \t       gotos.  */\n-\t  }\n+\t    }\n+\t}\n \n       /* All blocks associated with labels in label_value_list are\n \t trivially considered as marked live, if the list is empty."}]}