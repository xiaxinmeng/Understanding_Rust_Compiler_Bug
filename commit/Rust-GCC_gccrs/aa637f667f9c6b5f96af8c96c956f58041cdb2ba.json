{"sha": "aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2MzdmNjY3ZjljNmI1Zjk2YWY4Yzk2Yzk1NmY1ODA0MWNkYjJiYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-02-20T20:39:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-02-20T20:39:46Z"}, "message": "re PR target/57896 (ICE in expand_expr_real_2)\n\n\tPR target/57896\n\t* config/i386/i386.c (expand_vec_perm_interleave2): Don't call\n\tgen_reg_rtx if d->testing_p.\n\t(expand_vec_perm_pshufb2, expand_vec_perm_broadcast_1): Return early\n\tif d->testing_p and we will certainly return true.\n\t(expand_vec_perm_even_odd_1): Likewise.  Don't call gen_reg_rtx\n\tif d->testing_p.\n\nFrom-SVN: r207969", "tree": {"sha": "9964bf6b2be6a97e7d32e3018422a760985a450d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9964bf6b2be6a97e7d32e3018422a760985a450d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa637f667f9c6b5f96af8c96c956f58041cdb2ba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "004a7e45c695a377acabad42e139b64876558a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004a7e45c695a377acabad42e139b64876558a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004a7e45c695a377acabad42e139b64876558a44"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "cbdecf83d202a01c7cc6d0fc7f6ff1aba5e66721", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa637f667f9c6b5f96af8c96c956f58041cdb2ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa637f667f9c6b5f96af8c96c956f58041cdb2ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "patch": "@@ -1,3 +1,13 @@\n+2014-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/57896\n+\t* config/i386/i386.c (expand_vec_perm_interleave2): Don't call\n+\tgen_reg_rtx if d->testing_p.\n+\t(expand_vec_perm_pshufb2, expand_vec_perm_broadcast_1): Return early\n+\tif d->testing_p and we will certainly return true.\n+\t(expand_vec_perm_even_odd_1): Likewise.  Don't call gen_reg_rtx\n+\tif d->testing_p.\n+\n 2014-02-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* emit-rtl.c (gen_reg_rtx): Assert that"}, {"sha": "07658c35276f9693e59b6393ae08181312af2466", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa637f667f9c6b5f96af8c96c956f58041cdb2ba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa637f667f9c6b5f96af8c96c956f58041cdb2ba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aa637f667f9c6b5f96af8c96c956f58041cdb2ba", "patch": "@@ -43411,8 +43411,11 @@ expand_vec_perm_interleave2 (struct expand_vec_perm_d *d)\n       else\n \tdfinal.perm[i] = e;\n     }\n-  dremap.target = gen_reg_rtx (dremap.vmode);\n-  dfinal.op0 = gen_lowpart (dfinal.vmode, dremap.target);\n+  if (!d->testing_p)\n+    {\n+      dremap.target = gen_reg_rtx (dremap.vmode);\n+      dfinal.op0 = gen_lowpart (dfinal.vmode, dremap.target);\n+    }\n   dfinal.op1 = dfinal.op0;\n   dfinal.one_operand_p = true;\n \n@@ -43845,6 +43848,9 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n     return false;\n   gcc_assert (!d->one_operand_p);\n \n+  if (d->testing_p)\n+    return true;\n+\n   nelt = d->nelt;\n   eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n \n@@ -44053,6 +44059,8 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n   switch (d->vmode)\n     {\n     case V4DFmode:\n+      if (d->testing_p)\n+\tbreak;\n       t1 = gen_reg_rtx (V4DFmode);\n       t2 = gen_reg_rtx (V4DFmode);\n \n@@ -44072,6 +44080,8 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       {\n \tint mask = odd ? 0xdd : 0x88;\n \n+\tif (d->testing_p)\n+\t  break;\n \tt1 = gen_reg_rtx (V8SFmode);\n \tt2 = gen_reg_rtx (V8SFmode);\n \tt3 = gen_reg_rtx (V8SFmode);\n@@ -44113,6 +44123,8 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \treturn expand_vec_perm_pshufb2 (d);\n       else\n \t{\n+\t  if (d->testing_p)\n+\t    break;\n \t  /* We need 2*log2(N)-1 operations to achieve odd/even\n \t     with interleave. */\n \t  t1 = gen_reg_rtx (V8HImode);\n@@ -44134,6 +44146,8 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \treturn expand_vec_perm_pshufb2 (d);\n       else\n \t{\n+\t  if (d->testing_p)\n+\t    break;\n \t  t1 = gen_reg_rtx (V16QImode);\n \t  t2 = gen_reg_rtx (V16QImode);\n \t  t3 = gen_reg_rtx (V16QImode);\n@@ -44160,7 +44174,10 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t{\n \t  struct expand_vec_perm_d d_copy = *d;\n \t  d_copy.vmode = V4DFmode;\n-\t  d_copy.target = gen_reg_rtx (V4DFmode);\n+\t  if (d->testing_p)\n+\t    d_copy.target = gen_lowpart (V4DFmode, d->target);\n+\t  else\n+\t    d_copy.target = gen_reg_rtx (V4DFmode);\n \t  d_copy.op0 = gen_lowpart (V4DFmode, d->op0);\n \t  d_copy.op1 = gen_lowpart (V4DFmode, d->op1);\n \t  if (expand_vec_perm_even_odd_1 (&d_copy, odd))\n@@ -44173,6 +44190,9 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t  return false;\n \t}\n \n+      if (d->testing_p)\n+\tbreak;\n+\n       t1 = gen_reg_rtx (V4DImode);\n       t2 = gen_reg_rtx (V4DImode);\n \n@@ -44193,7 +44213,10 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t{\n \t  struct expand_vec_perm_d d_copy = *d;\n \t  d_copy.vmode = V8SFmode;\n-\t  d_copy.target = gen_reg_rtx (V8SFmode);\n+\t  if (d->testing_p)\n+\t    d_copy.target = gen_lowpart (V8SFmode, d->target);\n+\t  else\n+\t    d_copy.target = gen_reg_rtx (V8SFmode);\n \t  d_copy.op0 = gen_lowpart (V8SFmode, d->op0);\n \t  d_copy.op1 = gen_lowpart (V8SFmode, d->op1);\n \t  if (expand_vec_perm_even_odd_1 (&d_copy, odd))\n@@ -44206,6 +44229,9 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t  return false;\n \t}\n \n+      if (d->testing_p)\n+\tbreak;\n+\n       t1 = gen_reg_rtx (V8SImode);\n       t2 = gen_reg_rtx (V8SImode);\n       t3 = gen_reg_rtx (V4DImode);\n@@ -44298,6 +44324,8 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n     case V16QImode:\n       /* These can be implemented via interleave.  We save one insn by\n \t stopping once we have promoted to V4SImode and then use pshufd.  */\n+      if (d->testing_p)\n+\treturn true;\n       do\n \t{\n \t  rtx dest;"}]}