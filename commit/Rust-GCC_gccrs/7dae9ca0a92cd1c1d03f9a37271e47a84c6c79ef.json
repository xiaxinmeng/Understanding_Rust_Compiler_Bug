{"sha": "7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhZTljYTBhOTJjZDFjMWQwM2Y5YTM3MjcxZTQ3YTg0YzZjNzllZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T11:14:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T11:14:34Z"}, "message": "[multiple changes]\n\n2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* init.c [Darwin/arm64] (__gnat_sigtramp): Do not increment PC,\n\tfix CFI and add return sequence.\n\n2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_fixd.adb (Expand_Convert_Float_To_Fixed): If the conversion\n\tcomes from an attribute reference 'Round, the operation must\n\tround and not truncate.\n\t* sem_res.adb, sem_ch6.adb: Minor editing.\n\nFrom-SVN: r230302", "tree": {"sha": "64490512a4d76256ca385ffe7e6abe4cc2894a04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64490512a4d76256ca385ffe7e6abe4cc2894a04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/comments", "author": null, "committer": null, "parents": [{"sha": "9babab64280b4e2c86be70896ba73b11e1908663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9babab64280b4e2c86be70896ba73b11e1908663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9babab64280b4e2c86be70896ba73b11e1908663"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "22fa12f8083a479a84735a5e8e57aa57a8bfd2c5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "patch": "@@ -1,3 +1,15 @@\n+2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c [Darwin/arm64] (__gnat_sigtramp): Do not increment PC,\n+\tfix CFI and add return sequence.\n+\n+2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_fixd.adb (Expand_Convert_Float_To_Fixed): If the conversion\n+\tcomes from an attribute reference 'Round, the operation must\n+\tround and not truncate.\n+\t* sem_res.adb, sem_ch6.adb: Minor editing.\n+\n 2015-11-12  Philippe Gil  <gil@adacore.com>\n \n \t* g-debpoo.adb (Print_Address): print address in hexadecimal as"}, {"sha": "78f8e724c4f09eb76801fca0c37767514f620883", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "patch": "@@ -37,6 +37,7 @@ with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n+with Snames;   use Snames;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n@@ -1695,6 +1696,7 @@ package body Exp_Fixd is\n       Expr        : constant Node_Id   := Expression (N);\n       Result_Type : constant Entity_Id := Etype (N);\n       Small       : constant Ureal     := Small_Value (Result_Type);\n+      Truncate    : Boolean;\n \n    begin\n       --  Optimize small = 1, where we can avoid the multiply completely\n@@ -1704,14 +1706,25 @@ package body Exp_Fixd is\n \n       --  Normal case where multiply is required\n       --  Rounding is truncating for decimal fixed point types only,\n-      --  see RM 4.6(29).\n+      --  see RM 4.6(29), except if the conversion comes from an attribute\n+      --  reference 'Round (RM 3.5.10 (14)): The attribute is implemented\n+      --  by means of a conversion that must round.\n \n       else\n+         if Is_Decimal_Fixed_Point_Type (Result_Type) then\n+            Truncate := Nkind (Original_Node (N)) /= N_Attribute_Reference\n+               or else Get_Attribute_Id (Attribute_Name (Original_Node (N)))\n+                /= Attribute_Round;\n+         else\n+            Truncate := False;\n+         end if;\n+\n          Set_Result (N,\n            Build_Multiply (N,\n              Fpt_Value (Expr),\n              Real_Literal (N, Ureal_1 / Small)),\n-           Rng_Check, Trunc => Is_Decimal_Fixed_Point_Type (Result_Type));\n+             Rng_Check,\n+             Trunc => Truncate);\n       end if;\n    end Expand_Convert_Float_To_Fixed;\n "}, {"sha": "65761b01873358a8dcfabd9e13705d90cd7cf559", "filename": "gcc/ada/init.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "patch": "@@ -2301,8 +2301,8 @@ char __gnat_alternate_stack[32 * 1024]; /* 1 * MINSIGSTKSZ */\n #include <sys/ucontext.h>\n \n /* Trampoline inserted before raising the exception.  It modifies the\n-   stack so that PROC (D, M) looks to be called from the fault point.  Note\n-   that LR may be incorrectly set.  */\n+   stack so that it looks to be called directly from the fault point.\n+   Note that LR may be incorrectly restored by unwinding.  */\n void __gnat_sigtramp (struct Exception_Data *d, const char *m,\n \t\t      mcontext_t ctxt,\n \t\t      void (*proc)(struct Exception_Data *, const char *));\n@@ -2323,17 +2323,19 @@ asm(\"\\n\"\n \"\tldp\tq12, q13, [x2, #480]\\n\"\n \"\tldp\tq14, q15, [x2, #512]\\n\"\n \t/* Read FP from mcontext.  */\n-\"\tldp\tfp, lr, [x2, #248]\\n\"\n+\"\tldr\tfp, [x2, #248]\\n\"\n \t/* Read SP and PC from mcontext.  */\n-\"\tldp\tx6, x7, [x2, #264]\\n\"\n-\"\tadd\tlr, x7, #1\\n\"\n+\"\tldp\tx6, lr, [x2, #264]\\n\"\n \"\tmov\tsp, x6\\n\"\n-\t/* Create a standard frame.  */\n+\t/* Create a minimal frame.  */\n \"\tstp\tfp, lr, [sp, #-16]!\\n\"\n-\"\t.cfi_def_cfa\tw29, 16\\n\"\n-\"\t.cfi_offset\tw30, -8\\n\"\n-\"\t.cfi_offset\tw29, -16\\n\"\n-\"\tbr\tx3\\n\"\n+\"\t.cfi_def_cfa_offset 16\\n\"\n+\"\t.cfi_offset\t30, -8\\n\"\n+\"\t.cfi_offset\t29, -16\\n\"\n+\"\tblr\tx3\\n\"\n+\t/* Release our frame and return (should never get here!).  */\n+\"\tldp\tfp, lr, [sp, #16]\\n\"\n+\"\tret\\n\"\n \"\t.cfi_endproc\\n\"\n );\n #endif\n@@ -2416,6 +2418,9 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n       uc->uc_mcontext->__ss.__rbx = uc->uc_mcontext->__ss.__rdx;\n       uc->uc_mcontext->__ss.__rdx = t;\n     }\n+#elif defined(__arm64__)\n+  ucontext_t *uc = (ucontext_t *)ucontext;\n+  uc->uc_mcontext->__ss.__pc++;\n #endif\n }\n \n@@ -2447,6 +2452,16 @@ __gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n       syscall (SYS_sigreturn, NULL, UC_RESET_ALT_STACK);\n \n #ifdef __arm64__\n+      /* ??? Temporary kludge to make stack checking work.  The problem is\n+\t that the trampoline doesn't restore LR and, consequently, doesn't\n+\t make it possible to unwind past an interrupted frame which hasn\"t\n+\t saved LR on the stack yet.  */\n+      if (__gnat_is_stack_guard ((unsigned long)si->si_addr))\n+\t{\n+\t  ucontext_t *uc = (ucontext_t *)ucontext;\n+\t  uc->uc_mcontext->__ss.__pc = uc->uc_mcontext->__ss.__lr;\n+\t}\n+\n       /* On arm64, use a trampoline so that the unwinder won't see the\n \t signal frame.  */\n       __gnat_sigtramp (exception, msg,"}, {"sha": "a9a1a57dbfdbaf1f1a892f06fdeb0e7d3bd98687", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "patch": "@@ -7914,7 +7914,7 @@ package body Sem_Ch6 is\n \n             when N_Parameter_Association =>\n                return\n-                 Chars (Selector_Name (E1))  = Chars (Selector_Name (E2))\n+                 Chars (Selector_Name (E1)) = Chars (Selector_Name (E2))\n                    and then FCE (Explicit_Actual_Parameter (E1),\n                                  Explicit_Actual_Parameter (E2));\n "}, {"sha": "f6d71ce98c49c32e56284888d95a2579f7a82a57", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7dae9ca0a92cd1c1d03f9a37271e47a84c6c79ef", "patch": "@@ -1635,7 +1635,7 @@ package body Sem_Res is\n                end if;\n \n                if Nkind (Old_Sec) = N_Parameter_Association then\n-                  if Chars (Selector_Name (Old_Sec))  =\n+                  if Chars (Selector_Name (Old_Sec)) =\n                      Chars (First_Entity (Op_Id))\n                   then\n                      Rewrite (Explicit_Actual_Parameter (Old_Sec),"}]}