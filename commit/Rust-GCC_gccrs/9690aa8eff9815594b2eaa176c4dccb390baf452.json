{"sha": "9690aa8eff9815594b2eaa176c4dccb390baf452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5MGFhOGVmZjk4MTU1OTRiMmVhYTE3NmM0ZGNjYjM5MGJhZjQ1Mg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-04T21:51:30Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-04T21:51:30Z"}, "message": "re PR target/44751 (h8300 get_attr_cc warnings)\n\n\tPR target/44751\n\t* config/h8300/h8300.c: Include df.h.\n\t(push, pop): Use add_reg_note.\n\t(compute_plussi_cc, compute_logical_op_cc): Return enum attr_c.\n\t(compute_a_shift_cc): Likewise.\n\t(expand_a_shift): Argument code has type enum rtx_code.\n\t(struct shift_insn): Member cc_valid has type enum attr_cc.\n\t(struct shift_info) <cc_inline, cc_special>: Likewise.\n\tenum attr_cc.\n\t* config/h8300/h8300-protos.h (compute_plussi_cc): Update prototype.\n\t(compute_a_shift_cc, compute_logical_op_cc, expand_a_shift): Likewise.\n\nFrom-SVN: r166336", "tree": {"sha": "56f7d55d213ed542511694a828541a45b97a4fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f7d55d213ed542511694a828541a45b97a4fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9690aa8eff9815594b2eaa176c4dccb390baf452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690aa8eff9815594b2eaa176c4dccb390baf452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9690aa8eff9815594b2eaa176c4dccb390baf452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9690aa8eff9815594b2eaa176c4dccb390baf452/comments", "author": null, "committer": null, "parents": [{"sha": "5e426dd41e9aad7692fee596f67be0422be6434b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e426dd41e9aad7692fee596f67be0422be6434b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e426dd41e9aad7692fee596f67be0422be6434b"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "f0fbbf41c9563e6283b2ef2df088af3501d52b14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9690aa8eff9815594b2eaa176c4dccb390baf452", "patch": "@@ -117,6 +117,18 @@\n \t* genopinit.c (main) [FIXUNS_TRUNC_LIKE_FIX_TRUNC]: Cast\n \titeration variables to enum machine_mode.\n \n+\tPR target/44751\n+\t* config/h8300/h8300.c: Include df.h.\n+\t(push, pop): Use add_reg_note.\n+\t(compute_plussi_cc, compute_logical_op_cc): Return enum attr_c.\n+\t(compute_a_shift_cc): Likewise.\n+\t(expand_a_shift): Argument code has type enum rtx_code.\n+\t(struct shift_insn): Member cc_valid has type enum attr_cc.\n+\t(struct shift_info) <cc_inline, cc_special>: Likewise.\n+\tenum attr_cc.\n+\t* config/h8300/h8300-protos.h (compute_plussi_cc): Update prototype.\n+\t(compute_a_shift_cc, compute_logical_op_cc, expand_a_shift): Likewise.\n+\n 2010-11-04  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/46213"}, {"sha": "1211c63897ab96ff83419975a202cbdb2b8b8a48", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=9690aa8eff9815594b2eaa176c4dccb390baf452", "patch": "@@ -29,10 +29,8 @@ along with GCC; see the file COPYING3.  If not see\n extern unsigned int compute_mov_length (rtx *);\n extern const char *output_plussi (rtx *);\n extern unsigned int compute_plussi_length (rtx *);\n-extern int compute_plussi_cc (rtx *);\n extern const char *output_a_shift (rtx *);\n extern unsigned int compute_a_shift_length (rtx, rtx *);\n-extern int compute_a_shift_cc (rtx, rtx *);\n extern const char *output_a_rotate (enum rtx_code, rtx *);\n extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);\n@@ -44,10 +42,14 @@ extern void notice_update_cc (rtx, rtx);\n extern const char *output_logical_op (enum machine_mode, rtx *);\n extern unsigned int compute_logical_op_length (enum machine_mode,\n \t\t\t\t\t       rtx *);\n-extern int compute_logical_op_cc (enum machine_mode, rtx *);\n+#ifdef HAVE_ATTR_cc\n+extern enum attr_cc compute_plussi_cc (rtx *);\n+extern enum attr_cc compute_a_shift_cc (rtx, rtx *);\n+extern enum attr_cc compute_logical_op_cc (enum machine_mode, rtx *);\n+#endif\n extern void h8300_expand_branch (rtx[]);\n extern void h8300_expand_store (rtx[]);\n-extern bool expand_a_shift (enum machine_mode, int, rtx[]);\n+extern bool expand_a_shift (enum machine_mode, enum rtx_code, rtx[]);\n extern int h8300_shift_needs_scratch_p (int, enum machine_mode);\n extern int expand_a_rotate (rtx[]);\n extern int fix_bit_operand (rtx *, enum rtx_code);"}, {"sha": "2ab90fa24680e803d4d91b4918f34b1bc069d067", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9690aa8eff9815594b2eaa176c4dccb390baf452/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9690aa8eff9815594b2eaa176c4dccb390baf452", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"df.h\"\n \n /* Classifies a h8300_src_operand or h8300_dst_operand.\n \n@@ -639,7 +640,7 @@ push (int rn)\n   else\n     x = gen_push_h8300hs_normal (reg);\n   x = F (emit_insn (x), true);\n-  REG_NOTES (x) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, 0);\n+  add_reg_note (x, REG_INC, stack_pointer_rtx);\n }\n \n /* Emit an insn to pop register RN.  */\n@@ -657,7 +658,7 @@ pop (int rn)\n   else\n     x = gen_pop_h8300hs_normal (reg);\n   x = emit_insn (x);\n-  REG_NOTES (x) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, 0);\n+  add_reg_note (x, REG_INC, stack_pointer_rtx);\n }\n \n /* Emit an instruction to push or pop NREGS consecutive registers\n@@ -3134,7 +3135,7 @@ compute_plussi_length (rtx *operands)\n \n /* Compute which flag bits are valid after an addition insn.  */\n \n-int\n+enum attr_cc\n compute_plussi_cc (rtx *operands)\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n@@ -3518,7 +3519,7 @@ compute_logical_op_length (enum machine_mode mode, rtx *operands)\n \n /* Compute which flag bits are valid after a logical insn.  */\n \n-int\n+enum attr_cc\n compute_logical_op_cc (enum machine_mode mode, rtx *operands)\n {\n   /* Figure out the logical op that we need to perform.  */\n@@ -3769,7 +3770,7 @@ output_h8sx_shift (rtx *operands, int suffix, int optype)\n /* Emit code to do shifts.  */\n \n bool\n-expand_a_shift (enum machine_mode mode, int code, rtx operands[])\n+expand_a_shift (enum machine_mode mode, enum rtx_code code, rtx operands[])\n {\n   switch (h8sx_classify_shift (mode, code, operands[2]))\n     {\n@@ -3814,7 +3815,7 @@ enum shift_mode\n struct shift_insn\n {\n   const char *const assembler;\n-  const int cc_valid;\n+  const enum attr_cc cc_valid;\n };\n \n /* Assembler instruction shift table.\n@@ -3982,10 +3983,10 @@ struct shift_info {\n   const char *shift2;\n \n   /* CC status for SHIFT_INLINE.  */\n-  int cc_inline;\n+  enum attr_cc cc_inline;\n \n   /* CC status  for SHIFT_SPECIAL.  */\n-  int cc_special;\n+  enum attr_cc cc_special;\n };\n \n static void get_shift_alg (enum shift_type,\n@@ -4815,7 +4816,7 @@ compute_a_shift_length (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n \n /* Compute which flag bits are valid after a shift insn.  */\n \n-int\n+enum attr_cc\n compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n {\n   rtx shift = operands[3];"}]}