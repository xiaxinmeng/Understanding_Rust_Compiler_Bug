{"sha": "423aec8b5756c73681dadd10aec25e28dc18eb99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzYWVjOGI1NzU2YzczNjgxZGFkZDEwYWVjMjVlMjhkYzE4ZWI5OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-03-09T08:35:37Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-03-09T08:35:37Z"}, "message": "PR c++/79900 - ICE in strip_typedefs\n\n\tPR c++/79900 - ICE in strip_typedefs\n\t* tree.c (strip_typedefs): Skip the attribute handling if T is\n\ta variant type which hasn't been updated yet.\n\n\t* g++.dg/warn/Wpadded-1.C: New test.\n\nFrom-SVN: r245988", "tree": {"sha": "6f5ceb49588acca1f4f4d463e536488ff47b8073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5ceb49588acca1f4f4d463e536488ff47b8073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/423aec8b5756c73681dadd10aec25e28dc18eb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423aec8b5756c73681dadd10aec25e28dc18eb99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423aec8b5756c73681dadd10aec25e28dc18eb99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423aec8b5756c73681dadd10aec25e28dc18eb99/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd01cd0ca29b687337661abd9870c32a287de94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd01cd0ca29b687337661abd9870c32a287de94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd01cd0ca29b687337661abd9870c32a287de94b"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "caf0322972ff64a56c6ea079304c2508675e5bcb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=423aec8b5756c73681dadd10aec25e28dc18eb99", "patch": "@@ -1,3 +1,9 @@\n+2017-03-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/79900 - ICE in strip_typedefs\n+\t* tree.c (strip_typedefs): Skip the attribute handling if T is\n+\ta variant type which hasn't been updated yet.\n+\n 2017-03-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/79797 - ICE with self-reference in array DMI."}, {"sha": "2757af6691d5baee0bfc69d3be025ed1f8e8afed", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=423aec8b5756c73681dadd10aec25e28dc18eb99", "patch": "@@ -1548,29 +1548,40 @@ strip_typedefs (tree t, bool *remove_attributes)\n \tresult = TYPE_MAIN_VARIANT (t);\n     }\n   gcc_assert (!typedef_variant_p (result));\n-  if (TYPE_USER_ALIGN (t) != TYPE_USER_ALIGN (result)\n-      || TYPE_ALIGN (t) != TYPE_ALIGN (result))\n+\n+  if (COMPLETE_TYPE_P (result) && !COMPLETE_TYPE_P (t))\n+  /* If RESULT is complete and T isn't, it's likely the case that T\n+     is a variant of RESULT which hasn't been updated yet.  Skip the\n+     attribute handling.  */;\n+  else\n     {\n-      gcc_assert (TYPE_USER_ALIGN (t));\n-      if (remove_attributes)\n-\t*remove_attributes = true;\n-      else\n+      if (TYPE_USER_ALIGN (t) != TYPE_USER_ALIGN (result)\n+\t  || TYPE_ALIGN (t) != TYPE_ALIGN (result))\n \t{\n-\t  if (TYPE_ALIGN (t) == TYPE_ALIGN (result))\n-\t    result = build_variant_type_copy (result);\n+\t  gcc_assert (TYPE_USER_ALIGN (t));\n+\t  if (remove_attributes)\n+\t    *remove_attributes = true;\n \t  else\n-\t    result = build_aligned_type (result, TYPE_ALIGN (t));\n-\t  TYPE_USER_ALIGN (result) = true;\n+\t    {\n+\t      if (TYPE_ALIGN (t) == TYPE_ALIGN (result))\n+\t\tresult = build_variant_type_copy (result);\n+\t      else\n+\t\tresult = build_aligned_type (result, TYPE_ALIGN (t));\n+\t      TYPE_USER_ALIGN (result) = true;\n+\t    }\n+\t}\n+\n+      if (TYPE_ATTRIBUTES (t))\n+\t{\n+\t  if (remove_attributes)\n+\t    result = apply_identity_attributes (result, TYPE_ATTRIBUTES (t),\n+\t\t\t\t\t\tremove_attributes);\n+\t  else\n+\t    result = cp_build_type_attribute_variant (result,\n+\t\t\t\t\t\t      TYPE_ATTRIBUTES (t));\n \t}\n     }\n-  if (TYPE_ATTRIBUTES (t))\n-    {\n-      if (remove_attributes)\n-\tresult = apply_identity_attributes (result, TYPE_ATTRIBUTES (t),\n-\t\t\t\t\t    remove_attributes);\n-      else\n-\tresult = cp_build_type_attribute_variant (result, TYPE_ATTRIBUTES (t));\n-    }\n+\n   return cp_build_qualified_type (result, cp_type_quals (t));\n }\n "}, {"sha": "6c8ab1d87fb5767618e327d96b79edfae7bc0b79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=423aec8b5756c73681dadd10aec25e28dc18eb99", "patch": "@@ -1,3 +1,8 @@\n+2017-03-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/79900 - ICE in strip_typedefs\n+\t* g++.dg/warn/Wpadded-1.C: New test.\n+\n 2017-03-08  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/Walloca1.C: Adjust dg-warning."}, {"sha": "b3f058135ff16be847e983ac2781ce42579059d9", "filename": "gcc/testsuite/g++.dg/warn/Wpadded-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpadded-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/423aec8b5756c73681dadd10aec25e28dc18eb99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpadded-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWpadded-1.C?ref=423aec8b5756c73681dadd10aec25e28dc18eb99", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/79900 - ICE in strip_typedefs\n+// { dg-do compile }\n+// { dg-options \"-Wpadded\" }\n+\n+template <class> struct A;\n+template <typename> struct B { // { dg-warning \"padding struct size to alignment boundary\" }\n+  long _M_off;\n+  int _M_state;\n+};\n+template <> struct A<char> { typedef B<int> pos_type; };\n+enum _Ios_Openmode {};\n+struct C {\n+  typedef _Ios_Openmode openmode;\n+};\n+template <typename, typename _Traits> struct D {\n+  typedef typename _Traits::pos_type pos_type;\n+  pos_type m_fn1(pos_type, C::openmode);\n+};\n+template class D<char, A<char> >;\n+template <typename _CharT, typename _Traits>\n+typename D<_CharT, _Traits>::pos_type D<_CharT, _Traits>::m_fn1(pos_type x,\n+                                                                C::openmode) { return x; }"}]}