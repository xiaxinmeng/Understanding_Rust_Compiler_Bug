{"sha": "5d9da222b951cced6dcfc4d92bf157bd373d448f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ZGEyMjJiOTUxY2NlZDZkY2ZjNGQ5MmJmMTU3YmQzNzNkNDQ4Zg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-07-27T08:46:12Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-07-27T08:46:12Z"}, "message": "predict.c: merge multi-edges\n\n\t* gcc.dg/predict-13.c: New test.\n\t* gcc.dg/predict-14.c: New test.\n\t* predict.c (set_even_probabilities): Handle unlikely edges.\n\t(combine_predictions_for_bb): Likewise.\n\nFrom-SVN: r238781", "tree": {"sha": "7d8dba5eb17e383d3f620bc1617f6a075b0b5109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8dba5eb17e383d3f620bc1617f6a075b0b5109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9da222b951cced6dcfc4d92bf157bd373d448f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9da222b951cced6dcfc4d92bf157bd373d448f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9da222b951cced6dcfc4d92bf157bd373d448f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9da222b951cced6dcfc4d92bf157bd373d448f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af9e275f45ee4c1ec23a9701aaceb7fc4c66c184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9e275f45ee4c1ec23a9701aaceb7fc4c66c184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9e275f45ee4c1ec23a9701aaceb7fc4c66c184"}], "stats": {"total": 126, "additions": 116, "deletions": 10}, "files": [{"sha": "4169007115a26439acda2e8234e831ae881bd75c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d9da222b951cced6dcfc4d92bf157bd373d448f", "patch": "@@ -1,3 +1,8 @@\n+2016-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (set_even_probabilities): Handle unlikely edges.\n+\t(combine_predictions_for_bb): Likewise.\n+\n 2016-07-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71869"}, {"sha": "ca320cde68ddf7657531f756c9ecaadbba3637c5", "filename": "gcc/predict.c", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=5d9da222b951cced6dcfc4d92bf157bd373d448f", "patch": "@@ -785,9 +785,13 @@ dump_prediction (FILE *file, enum br_predictor predictor, int probability,\n }\n \n /* We can not predict the probabilities of outgoing edges of bb.  Set them\n-   evenly and hope for the best.  */\n+   evenly and hope for the best.  If UNLIKELY_EDGES is not null, distribute\n+   even probability for all edges not mentioned in the set.  These edges\n+   are given PROB_VERY_UNLIKELY probability.  */\n+\n static void\n-set_even_probabilities (basic_block bb)\n+set_even_probabilities (basic_block bb,\n+\t\t\thash_set<edge> *unlikely_edges = NULL)\n {\n   int nedges = 0;\n   edge e;\n@@ -796,9 +800,25 @@ set_even_probabilities (basic_block bb)\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     if (!(e->flags & (EDGE_EH | EDGE_FAKE)))\n       nedges ++;\n+\n+  /* Make the distribution even if all edges are unlikely.  */\n+  unsigned unlikely_count = unlikely_edges ? unlikely_edges->elements () : 0;\n+  if (unlikely_count == nedges)\n+    {\n+      unlikely_edges = NULL;\n+      unlikely_count = 0;\n+    }\n+\n+  unsigned c = nedges - unlikely_count;\n+\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     if (!(e->flags & (EDGE_EH | EDGE_FAKE)))\n-      e->probability = (REG_BR_PROB_BASE + nedges / 2) / nedges;\n+      {\n+\tif (unlikely_edges != NULL && unlikely_edges->contains (e))\n+\t  e->probability = PROB_VERY_UNLIKELY;\n+\telse\n+\t  e->probability = (REG_BR_PROB_BASE + c / 2) / c;\n+      }\n     else\n       e->probability = 0;\n }\n@@ -1068,18 +1088,51 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n \n   /* When there is no successor or only one choice, prediction is easy.\n \n-     We are lazy for now and predict only basic blocks with two outgoing\n-     edges.  It is possible to predict generic case too, but we have to\n-     ignore first match heuristics and do more involved combining.  Implement\n-     this later.  */\n+     When we have a basic block with more than 2 successors, the situation\n+     is more complicated as DS theory cannot be used literally.\n+     More precisely, let's assume we predicted edge e1 with probability p1,\n+     thus: m1({b1}) = p1.  As we're going to combine more than 2 edges, we\n+     need to find probability of e.g. m1({b2}), which we don't know.\n+     The only approximation is to equally distribute 1-p1 to all edges\n+     different from b1.\n+\n+     According to numbers we've got from SPEC2006 benchark, there's only\n+     one interesting reliable predictor (noreturn call), which can be\n+     handled with a bit easier approach.  */\n   if (nedges != 2)\n     {\n+      hash_set<edge> unlikely_edges (4);\n+\n+      /* Identify all edges that have a probability close to very unlikely.\n+\t Doing the approach for very unlikely doesn't worth for doing as\n+\t there's no such probability in SPEC2006 benchmark.  */\n+      edge_prediction **preds = bb_predictions->get (bb);\n+      if (preds)\n+\tfor (pred = *preds; pred; pred = pred->ep_next)\n+\t  if (pred->ep_probability <= PROB_VERY_UNLIKELY)\n+\t    unlikely_edges.add (pred->ep_edge);\n+\n       if (!bb->count && !dry_run)\n-\tset_even_probabilities (bb);\n+\tset_even_probabilities (bb, &unlikely_edges);\n       clear_bb_predictions (bb);\n       if (dump_file)\n-\tfprintf (dump_file, \"%i edges in bb %i predicted to even probabilities\\n\",\n-\t\t nedges, bb->index);\n+\t{\n+\t  fprintf (dump_file, \"Predictions for bb %i\\n\", bb->index);\n+\t  if (unlikely_edges.elements () == 0)\n+\t    fprintf (dump_file,\n+\t\t     \"%i edges in bb %i predicted to even probabilities\\n\",\n+\t\t     nedges, bb->index);\n+\t  else\n+\t    {\n+\t      fprintf (dump_file,\n+\t\t       \"%i edges in bb %i predicted with some unlikely edges\\n\",\n+\t\t       nedges, bb->index);\n+\t      FOR_EACH_EDGE (e, ei, bb->succs)\n+\t\tif (!(e->flags & (EDGE_EH | EDGE_FAKE)))\n+\t\t  dump_prediction (dump_file, PRED_COMBINED, e->probability,\n+\t\t   bb, REASON_NONE, e);\n+\t    }\n+\t}\n       return;\n     }\n "}, {"sha": "727e84c43a60ceb91fd145e800c36562b12c47c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d9da222b951cced6dcfc4d92bf157bd373d448f", "patch": "@@ -1,3 +1,8 @@\n+2016-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/predict-13.c: New test.\n+\t* gcc.dg/predict-14.c: New test.\n+\n 2016-07-27  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/torture/pr69352.c: Use  __INTPTR_TYPE__ instead of "}, {"sha": "df82b7e708bb4e6fec1861a1a98742d111c72668", "filename": "gcc/testsuite/gcc.dg/predict-13.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-13.c?ref=5d9da222b951cced6dcfc4d92bf157bd373d448f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int main(int argc, char **argv)\n+{\n+  switch (argc)\n+    {\n+    case 1:\n+      return 1;\n+    case 2:\n+      return 2;\n+    case 3:\n+      __builtin_unreachable();\n+    case 4:\n+      __builtin_unreachable();\n+    default:\n+      return 5;\n+    }\n+\n+  return 10;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 33.3%\" 3 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"combined heuristics of edge\\[^:\\]*: 0.0%\" 2 \"profile_estimate\"} } */"}, {"sha": "e24166714ce011bae4fb66d43492a7a979dc451f", "filename": "gcc/testsuite/gcc.dg/predict-14.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9da222b951cced6dcfc4d92bf157bd373d448f/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-14.c?ref=5d9da222b951cced6dcfc4d92bf157bd373d448f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int main(int argc, char **argv)\n+{\n+  switch (argc)\n+    {\n+    case 1:\n+      __builtin_unreachable();\n+    case 4:\n+      __builtin_unreachable();\n+    default:\n+      __builtin_unreachable();\n+    }\n+\n+  return 10;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"predicted to even probabilities\" 4 \"profile_estimate\"} } */"}]}