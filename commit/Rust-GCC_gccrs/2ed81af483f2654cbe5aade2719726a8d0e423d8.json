{"sha": "2ed81af483f2654cbe5aade2719726a8d0e423d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkODFhZjQ4M2YyNjU0Y2JlNWFhZGUyNzE5NzI2YThkMGU0MjNkOA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-05-06T13:10:59Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-05-06T13:10:59Z"}, "message": "re PR target/66020 (FAIL: gcc.target/powerpc/ppc64-abi-2.c execution test)\n\n\tPR target/66020\n\t* gcc.target/powerpc/ppc64-abi-2.c (my_mcount): Rewrite.\n\t(gparms): Make volatile.\n\nFrom-SVN: r222850", "tree": {"sha": "3613c45cbb52055e91585b77e1d9608e2f79a51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3613c45cbb52055e91585b77e1d9608e2f79a51c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ed81af483f2654cbe5aade2719726a8d0e423d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed81af483f2654cbe5aade2719726a8d0e423d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed81af483f2654cbe5aade2719726a8d0e423d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed81af483f2654cbe5aade2719726a8d0e423d8/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccd85564545b62b7af9e07a5eeea9d89b04b59cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd85564545b62b7af9e07a5eeea9d89b04b59cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd85564545b62b7af9e07a5eeea9d89b04b59cc"}], "stats": {"total": 160, "additions": 81, "deletions": 79}, "files": [{"sha": "2b92dafc82093684c1452bd02aed698aa11de9c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed81af483f2654cbe5aade2719726a8d0e423d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed81af483f2654cbe5aade2719726a8d0e423d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ed81af483f2654cbe5aade2719726a8d0e423d8", "patch": "@@ -1,3 +1,9 @@\n+2015-05-06  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/66020\n+\t* gcc.target/powerpc/ppc64-abi-2.c (my_mcount): Rewrite.\n+\t(gparms): Make volatile.\n+\n 2015-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/62283"}, {"sha": "eb1df7a2dc97503de9cb27cdbf6c72c9181b0ef9", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-2.c", "status": "modified", "additions": 75, "deletions": 79, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed81af483f2654cbe5aade2719726a8d0e423d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed81af483f2654cbe5aade2719726a8d0e423d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-2.c?ref=2ed81af483f2654cbe5aade2719726a8d0e423d8", "patch": "@@ -24,72 +24,69 @@ typedef struct\n   vector int vrs[12];\n } reg_parms_t;\n \n-reg_parms_t gparms;\n+volatile reg_parms_t gparms;\n \n /* _mcount call is done on Linux ppc64 early in the prologue.\n    my_mcount will provide a entry point _mcount,\n-   which will save all register to gparms. \n-   Note that _mcount need to restore lr to original value,\n-   therefor use ctr to return.  \n+   which will save all parameter registers to gparms.\n+   Note that _mcount needs to restore lr to original value,\n+   therefore use ctr to return.\n */\n \n-void __attribute__((no_instrument_function))\n-my_mcount() \n+extern void my_mcount (void) asm (\"_mcount\");\n+void __attribute__((no_instrument_function, no_split_stack))\n+my_mcount (void)\n {\n-  asm volatile (\".type\t_mcount,@function\\n\\t\"\n-\t\t\".globl\t_mcount\\n\\t\"\n-\t\t\"_mcount:\\n\\t\"\n-                \"mflr 0\\n\\t\"\n-                \"mtctr 0\\n\\t\"\n-                \"ld 0,16(1)\\n\\t\"\n+  asm volatile (\"mflr 12\\n\\t\"\n+\t\t\"mtctr 12\\n\\t\"\n \t\t\"mtlr 0\\n\\t\"\n-\t\t\"ld 11,gparms@got(2)\\n\\t\" \n-\t\t\"std 3,0(11)\\n\\t\"\t\t\n-\t\t\"std 4,8(11)\\n\\t\"\n-\t\t\"std 5,16(11)\\n\\t\"\t\n-\t\t\"std 6,24(11)\\n\\t\"\t\n-\t\t\"std 7,32(11)\\n\\t\"\t\n-\t\t\"std 8,40(11)\\n\\t\"\t\n-\t\t\"std 9,48(11)\\n\\t\"\t\n-\t\t\"std 10,56(11)\\n\\t\"   \n-\t\t\"stfd 1,64(11)\\n\\t\"\t\n-\t\t\"stfd 2,72(11)\\n\\t\"\t\n-\t\t\"stfd 3,80(11)\\n\\t\"\t\n-\t\t\"stfd 4,88(11)\\n\\t\"\t\n-\t\t\"stfd 5,96(11)\\n\\t\"\t\n-\t\t\"stfd 6,104(11)\\n\\t\"\t\n-\t\t\"stfd 7,112(11)\\n\\t\"\t\n-\t\t\"stfd 8,120(11)\\n\\t\"\t\n-\t\t\"stfd 9,128(11)\\n\\t\"\t\n-\t\t\"stfd 10,136(11)\\n\\t\"\t\n-\t\t\"stfd 11,144(11)\\n\\t\"\t\n-\t\t\"stfd 12,152(11)\\n\\t\" \n-\t\t\"stfd 13,160(11)\\n\\t\" \n-\t\t\"li 3,176\\n\\t\"        \n-\t\t\"stvx 2,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\" \n-\t\t\"stvx 3,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 4,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 5,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 6,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 7,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 8,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 9,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 10,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 11,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 12,3,11\\n\\t\"\t\n-\t\t\"addi 3,3,16\\n\\t\"     \n-\t\t\"stvx 13,3,11\\n\\t\"\t\n-\t\t\"ld 3,0(11)\\n\\t\"\n+\t\t\"addis 12,2,gparms@got@ha\\n\\t\"\n+\t\t\"ld 12,gparms@got@l(12)\\n\\t\"\n+\t\t\"std 3,0(12)\\n\\t\"\n+\t\t\"std 4,8(12)\\n\\t\"\n+\t\t\"std 5,16(12)\\n\\t\"\n+\t\t\"std 6,24(12)\\n\\t\"\n+\t\t\"std 7,32(12)\\n\\t\"\n+\t\t\"std 8,40(12)\\n\\t\"\n+\t\t\"std 9,48(12)\\n\\t\"\n+\t\t\"std 10,56(12)\\n\\t\"\n+\t\t\"stfd 1,64(12)\\n\\t\"\n+\t\t\"stfd 2,72(12)\\n\\t\"\n+\t\t\"stfd 3,80(12)\\n\\t\"\n+\t\t\"stfd 4,88(12)\\n\\t\"\n+\t\t\"stfd 5,96(12)\\n\\t\"\n+\t\t\"stfd 6,104(12)\\n\\t\"\n+\t\t\"stfd 7,112(12)\\n\\t\"\n+\t\t\"stfd 8,120(12)\\n\\t\"\n+\t\t\"stfd 9,128(12)\\n\\t\"\n+\t\t\"stfd 10,136(12)\\n\\t\"\n+\t\t\"stfd 11,144(12)\\n\\t\"\n+\t\t\"stfd 12,152(12)\\n\\t\"\n+\t\t\"stfd 13,160(12)\\n\\t\"\n+\t\t\"li 0,176\\n\\t\"\n+\t\t\"stvx 2,12,0\\n\\t\"\n+\t\t\"li 0,192\\n\\t\"\n+\t\t\"stvx 3,12,0\\n\\t\"\n+\t\t\"li 0,208\\n\\t\"\n+\t\t\"stvx 4,12,0\\n\\t\"\n+\t\t\"li 0,224\\n\\t\"\n+\t\t\"stvx 5,12,0\\n\\t\"\n+\t\t\"li 0,240\\n\\t\"\n+\t\t\"stvx 6,12,0\\n\\t\"\n+\t\t\"li 0,256\\n\\t\"\n+\t\t\"stvx 7,12,0\\n\\t\"\n+\t\t\"li 0,272\\n\\t\"\n+\t\t\"stvx 8,12,0\\n\\t\"\n+\t\t\"li 0,288\\n\\t\"\n+\t\t\"stvx 9,12,0\\n\\t\"\n+\t\t\"li 0,304\\n\\t\"\n+\t\t\"stvx 10,12,0\\n\\t\"\n+\t\t\"li 0,320\\n\\t\"\n+\t\t\"stvx 11,12,0\\n\\t\"\n+\t\t\"li 0,336\\n\\t\"\n+\t\t\"stvx 12,12,0\\n\\t\"\n+\t\t\"li 0,352\\n\\t\"\n+\t\t\"stvx 13,12,0\\n\\t\"\n \t\t\"bctr\");\n }\n \n@@ -198,7 +195,7 @@ fcivv (char *s, int i, vector int v, vector int w)\n     abort ();\n \n   a = vec_add (v,w);\n-  \n+\n   if (!vec_all_eq (a, c))\n     abort ();\n }\n@@ -226,14 +223,14 @@ fcevv (char *s, ...)\n   v = va_arg(arg, vector int);\n   w = va_arg(arg, vector int);\n   a = vec_add (v,w);\n-  \n+\n   if (!vec_all_eq (a, c))\n     abort ();\n \n   /* Go back one frame.  */\n   sp = __builtin_frame_address(0);\n   sp = sp->backchain;\n-  \n+\n   if (sp->slot[2].l != MAKE_SLOT (1, 2)\n       || sp->slot[4].l !=  MAKE_SLOT (5, 6))\n     abort();\n@@ -265,17 +262,17 @@ fciievv (char *s, int i, int j, ...)\n \n   if ((long) j != lparms.gprs[2])\n     abort();\n-  \n+\n   v = va_arg(arg, vector int);\n   w = va_arg(arg, vector int);\n   a = vec_add (v,w);\n-  \n+\n   if (!vec_all_eq (a, c))\n     abort ();\n \n   sp = __builtin_frame_address(0);\n   sp = sp->backchain;\n-  \n+\n   if (sp->slot[4].l != MAKE_SLOT (1, 2)\n       || sp->slot[6].l !=  MAKE_SLOT (5, 6))\n     abort();\n@@ -291,31 +288,31 @@ fcvevv (char *s, vector int x, ...)\n   va_list arg;\n \n   va_start (arg, x);\n-  \n+\n   v = va_arg(arg, vector int);\n   w = va_arg(arg, vector int);\n \n   a = vec_add (v,w);\n   a = vec_add (a, x);\n- \n+\n   if (!vec_all_eq (a, c))\n     abort ();\n \n   sp = __builtin_frame_address(0);\n   sp = sp->backchain;\n-  \n+\n   if (sp->slot[4].l != MAKE_SLOT (1, 2)\n       || sp->slot[6].l !=  MAKE_SLOT (5, 6))\n     abort();\n }\n \n int __attribute__((no_instrument_function, noinline))\n-main1() \n-{   \n+main1()\n+{\n   char *s = \"vv\";\n   vector int v = {1, 2, 3, 4};\n   vector int w = {5, 6, 7, 8};\n- \n+\n   fcvi (s, v, 2);\n   fcvv (s, v, w);\n   fcivv (s, 1, v, w);\n@@ -325,7 +322,7 @@ main1()\n   return 0;\n }\n \n-int __attribute__((no_instrument_function)) \n+int __attribute__((no_instrument_function))\n main()\n {\n   /* Exit on systems without altivec.  */\n@@ -370,12 +367,12 @@ fnp_cvvvv (char *s, vector int v, vector int w,\n     abort ();\n \n   a = vec_add (v,w);\n-  a = vec_add (a,x);  \n-  a = vec_add (a,y);  \n-  \n+  a = vec_add (a,x);\n+  a = vec_add (a,y);\n+\n   if (!vec_all_eq (a, c))\n     abort ();\n-  \n+\n   v0.v = lparms.vrs[0];\n   v1.v = lparms.vrs[1];\n   v2.v = lparms.vrs[2];\n@@ -401,11 +398,10 @@ fnp_cvvvv (char *s, vector int v, vector int w,\n \n   sp = __builtin_frame_address(0);\n   sp = sp->backchain;\n-  \n+\n   if (sp->slot[8].l != v3.l[0])\n     abort ();\n \n   if (sp->slot[9].l != v3.l[1])\n     abort ();\n-}  \n-  \n+}"}]}