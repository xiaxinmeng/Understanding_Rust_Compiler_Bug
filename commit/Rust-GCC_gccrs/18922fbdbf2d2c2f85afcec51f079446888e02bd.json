{"sha": "18922fbdbf2d2c2f85afcec51f079446888e02bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5MjJmYmRiZjJkMmMyZjg1YWZjZWM1MWYwNzk0NDY4ODhlMDJiZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T17:08:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T17:08:18Z"}, "message": "compiler: remove trailing spaces\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/175557\n\nFrom-SVN: r271014", "tree": {"sha": "3f06325944f235530467f24655f77226645e9ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f06325944f235530467f24655f77226645e9ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18922fbdbf2d2c2f85afcec51f079446888e02bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18922fbdbf2d2c2f85afcec51f079446888e02bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18922fbdbf2d2c2f85afcec51f079446888e02bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18922fbdbf2d2c2f85afcec51f079446888e02bd/comments", "author": null, "committer": null, "parents": [{"sha": "ab87ac8d53f3d903bfc9eeb0f0b5e7eed1f38cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab87ac8d53f3d903bfc9eeb0f0b5e7eed1f38cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab87ac8d53f3d903bfc9eeb0f0b5e7eed1f38cbc"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "9a80682f169cf5494d8ebac5e8a025a979db0c2b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -1,4 +1,4 @@\n-fcbf847c3bf76fb475c9020e1c57057134407263\n+0b4cf8ded107ccbfbd4af7f4e056f23f941d0f86\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c5b5d8f2054bb9080a93940ffd7ce7cd6fa46e7c", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -564,7 +564,7 @@ class Backend\n   // ASM_NAME is encoded assembler-friendly version of the name, or the\n   // empty string if no encoding is needed.\n   //\n-  // TYPE is the type of the implicit variable. \n+  // TYPE is the type of the implicit variable.\n   //\n   // IS_HIDDEN will be true if the descriptor should only be visible\n   // within the current object.\n@@ -634,7 +634,7 @@ class Backend\n   //\n   // TYPE will be a struct type; the type of the returned expression\n   // must be a pointer to this struct type.\n-  // \n+  //\n   // We must create the named structure before we know its\n   // initializer, because the initializer may refer to its own\n   // address.  After calling this the frontend will call\n@@ -668,7 +668,7 @@ class Backend\n                              Btype* type, Location) = 0;\n \n   // Labels.\n-  \n+\n   // Create a new label.  NAME will be empty if this is a label\n   // created by the frontend for a loop construct.  The location is\n   // where the label is defined."}, {"sha": "402e8d3010ce0a530a8b1e901396c595c653a6ce", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -1704,7 +1704,7 @@ class Boolean_expression : public Expression\n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n   { ast_dump_context->ostream() << (this->val_ ? \"true\" : \"false\"); }\n-  \n+\n  private:\n   // The constant.\n   bool val_;\n@@ -2015,8 +2015,8 @@ String_info_expression::do_dump_expression(\n   ast_dump_context->ostream() << \"stringinfo(\";\n   this->string_->dump_expression(ast_dump_context);\n   ast_dump_context->ostream() << \",\";\n-  ast_dump_context->ostream() << \n-      (this->string_info_ == STRING_INFO_DATA ? \"data\" \n+  ast_dump_context->ostream() <<\n+      (this->string_info_ == STRING_INFO_DATA ? \"data\"\n     : this->string_info_ == STRING_INFO_LENGTH ? \"length\"\n     : \"unknown\");\n   ast_dump_context->ostream() << \")\";\n@@ -2694,7 +2694,7 @@ class Complex_expression : public Expression\n   // Write REAL/IMAG to dump context.\n   static void\n   dump_complex(Ast_dump_context* ast_dump_context, const mpc_t val);\n-  \n+\n  protected:\n   bool\n   do_is_constant() const"}, {"sha": "7d3cfd85a3fd2e680a82bfef7d82b1e8ed256fe5", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -2806,7 +2806,7 @@ class Unknown_expression : public Parser_expression\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n-  \n+\n  private:\n   // The unknown name.\n   Named_object* named_object_;\n@@ -2832,7 +2832,7 @@ class Index_expression : public Parser_expression\n   // Dump an index expression, i.e. an expression of the form\n   // expr[expr], expr[expr:expr], or expr[expr:expr:expr] to a dump context.\n   static void\n-  dump_index_expression(Ast_dump_context*, const Expression* expr, \n+  dump_index_expression(Ast_dump_context*, const Expression* expr,\n                         const Expression* start, const Expression* end,\n                         const Expression* cap);\n \n@@ -2988,7 +2988,7 @@ class Array_index_expression : public Expression\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n-  \n+\n  private:\n   // The array we are getting a value from.\n   Expression* array_;\n@@ -3828,7 +3828,7 @@ class Map_construction_expression : public Expression\n \n   void\n   do_dump_expression(Ast_dump_context*) const;\n-  \n+\n  private:\n   // The type of the map to construct.\n   Type* type_;"}, {"sha": "e611c70466245903d823b51096d70d9cb785bb29", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -3483,7 +3483,7 @@ Parse::expression(Precedence precedence, bool may_be_sink,\n \n       if (is_parenthesized != NULL)\n \t*is_parenthesized = false;\n-      \n+\n       Operator op = token->op();\n       Location binop_location = token->location();\n \n@@ -3576,7 +3576,7 @@ Parse::unary_expr(bool may_be_sink, bool may_be_composite_lit,\n \n   // There is a complex parse for <- chan.  The choices are\n   // Convert x to type <- chan int:\n-  //   (<- chan int)(x)         \n+  //   (<- chan int)(x)\n   // Receive from (x converted to type chan <- chan int):\n   //   (<- chan <- chan int (x))\n   // Convert x to type <- chan (<- chan int)."}, {"sha": "cd35d5ea45288ef980935e68b974497de74a77b3", "filename": "gcc/go/gofrontend/string-dump.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18922fbdbf2d2c2f85afcec51f079446888e02bd/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h?ref=18922fbdbf2d2c2f85afcec51f079446888e02bd", "patch": "@@ -10,7 +10,7 @@\n // This abstract class provides an interface strings for whatever purpose.\n // Used for example for exporting and dumping objects.\n \n-class String_dump \n+class String_dump\n {\n  public:\n   // Write a string. Implements the String_dump interface."}]}