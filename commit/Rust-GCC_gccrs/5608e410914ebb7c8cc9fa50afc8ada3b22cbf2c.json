{"sha": "5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "node_id": "C_kwDOANBUbNoAKDU2MDhlNDEwOTE0ZWJiN2M4Y2M5ZmE1MGFmYzhhZGEzYjIyY2JmMmM", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-20T23:30:46Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T18:48:30Z"}, "message": "Convert CFN_BUILT_IN_PARITY to range-ops.\n\nAlso, as the last builtin remaining, also remove the builtin infrastrucure\nroutines from fold_using_range.\n\n\t* gimple-range-fold.cc (range_of_range_op): Handle no operands.\n\t(range_of_call): Do not check for builtins.\n\t(fold_using_range::range_of_builtin_call): Delete.\n\t(fold_using_range::range_of_builtin_int_call): Delete.\n\t* gimple-range-fold.h: Adjust prototypes.\n\t* gimple-range-op.cc (class cfn_parity): New.\n\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.", "tree": {"sha": "55d1644e49cf3ddb97295a8ad54c3299b966c21c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d1644e49cf3ddb97295a8ad54c3299b966c21c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/comments", "author": null, "committer": null, "parents": [{"sha": "e7f035f66aa25e0537a0e3a76d43c71fe9531724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f035f66aa25e0537a0e3a76d43c71fe9531724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f035f66aa25e0537a0e3a76d43c71fe9531724"}], "stats": {"total": 83, "additions": 31, "deletions": 52}, "files": [{"sha": "c381ef94087e40db478d9bc666638049ef2ead67", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "patch": "@@ -534,6 +534,16 @@ fold_using_range::range_of_range_op (vrange &r,\n   tree lhs = handler.lhs ();\n   tree op1 = handler.operand1 ();\n   tree op2 = handler.operand2 ();\n+\n+  // Certain types of builtin functions may have no arguments.\n+  if (!op1)\n+    {\n+      Value_Range r1 (type);\n+      if (!handler.fold_range (r, type, r1, r1))\n+\tr.set_varying (type);\n+      return true;\n+    }\n+\n   Value_Range range1 (TREE_TYPE (op1));\n   Value_Range range2 (op2 ? TREE_TYPE (op2) : TREE_TYPE (op1));\n \n@@ -823,7 +833,7 @@ fold_using_range::range_of_phi (vrange &r, gphi *phi, fur_source &src)\n // If a range cannot be calculated, return false.\n \n bool\n-fold_using_range::range_of_call (vrange &r, gcall *call, fur_source &src)\n+fold_using_range::range_of_call (vrange &r, gcall *call, fur_source &)\n {\n   tree type = gimple_range_type (call);\n   if (!type)\n@@ -832,9 +842,7 @@ fold_using_range::range_of_call (vrange &r, gcall *call, fur_source &src)\n   tree lhs = gimple_call_lhs (call);\n   bool strict_overflow_p;\n \n-  if (range_of_builtin_call (r, call, src))\n-    ;\n-  else if (gimple_stmt_nonnegative_warnv_p (call, &strict_overflow_p))\n+  if (gimple_stmt_nonnegative_warnv_p (call, &strict_overflow_p))\n     r.set_nonnegative (type);\n   else if (gimple_call_nonnull_result_p (call)\n \t   || gimple_call_nonnull_arg (call))\n@@ -852,50 +860,6 @@ fold_using_range::range_of_call (vrange &r, gcall *call, fur_source &src)\n   return true;\n }\n \n-// For a builtin in CALL, return a range in R if known and return\n-// TRUE.  Otherwise return FALSE.\n-\n-bool\n-fold_using_range::range_of_builtin_call (vrange &r, gcall *call,\n-\t\t\t\t\t fur_source &src)\n-{\n-  combined_fn func = gimple_call_combined_fn (call);\n-  if (func == CFN_LAST)\n-    return false;\n-\n-  tree type = gimple_range_type (call);\n-  gcc_checking_assert (type);\n-\n-  if (irange::supports_p (type))\n-    return range_of_builtin_int_call (as_a <irange> (r), call, src);\n-\n-  return false;\n-}\n-\n-bool\n-fold_using_range::range_of_builtin_int_call (irange &r, gcall *call,\n-\t\t\t\t\t     fur_source &)\n-{\n-  combined_fn func = gimple_call_combined_fn (call);\n-  if (func == CFN_LAST)\n-    return false;\n-\n-  tree type = gimple_range_type (call);\n-  scalar_int_mode mode;\n-\n-  switch (func)\n-    {\n-    CASE_CFN_PARITY:\n-      r.set (build_zero_cst (type), build_one_cst (type));\n-      return true;\n-\n-    default:\n-      break;\n-    }\n-  return false;\n-}\n-\n-\n // Calculate a range for COND_EXPR statement S and return it in R.\n // If a range cannot be calculated, return false.\n "}, {"sha": "d1ed2bca80f6b73c24403c38f675146e311f258f", "filename": "gcc/gimple-range-fold.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.h?ref=5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "patch": "@@ -165,10 +165,6 @@ class fold_using_range\n   bool range_of_call (vrange &r, gcall *call, fur_source &src);\n   bool range_of_cond_expr (vrange &r, gassign* cond, fur_source &src);\n   bool range_of_address (irange &r, gimple *s, fur_source &src);\n-  bool range_of_builtin_call (vrange &r, gcall *call, fur_source &src);\n-  bool range_of_builtin_int_call (irange &r, gcall *call, fur_source &src);\n-  void range_of_builtin_ubsan_call (irange &r, gcall *call, tree_code code,\n-\t\t\t\t    fur_source &src);\n   bool range_of_phi (vrange &r, gphi *phi, fur_source &src);\n   void range_of_ssa_name_with_loop_info (vrange &, tree, class loop *, gphi *,\n \t\t\t\t\t fur_source &src);"}, {"sha": "d7c6dfa933d1f63192953807815778b38956f3df", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=5608e410914ebb7c8cc9fa50afc8ada3b22cbf2c", "patch": "@@ -663,6 +663,20 @@ class cfn_goacc_dim : public range_operator\n   bool m_is_pos;\n } op_cfn_goacc_dim_size (false), op_cfn_goacc_dim_pos (true);\n \n+\n+// Implement range operator for CFN_BUILT_IN_\n+class cfn_parity : public range_operator\n+{\n+public:\n+  using range_operator::fold_range;\n+  virtual bool fold_range (irange &r, tree type, const irange &,\n+\t\t\t   const irange &, relation_kind) const\n+  {\n+    r.set (build_zero_cst (type), build_one_cst (type));\n+    return true;\n+  }\n+} op_cfn_parity;\n+\n // Set up a gimple_range_op_handler for any built in function which can be\n // supported via range-ops.\n \n@@ -795,6 +809,11 @@ gimple_range_op_handler::maybe_builtin_call ()\n       m_int = &op_cfn_goacc_dim_pos;\n       break;\n \n+    CASE_CFN_PARITY:\n+      m_valid = true;\n+      m_int = &op_cfn_parity;\n+      break;\n+\n     default:\n       break;\n     }"}]}