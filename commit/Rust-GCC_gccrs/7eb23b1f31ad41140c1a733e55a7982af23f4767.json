{"sha": "7eb23b1f31ad41140c1a733e55a7982af23f4767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViMjNiMWYzMWFkNDExNDBjMWE3MzNlNTVhNzk4MmFmMjNmNDc2Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-06-07T20:35:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-06-07T20:35:43Z"}, "message": "Makefile.in (cp-demangle.o): Depend on $(INCDIR)/demangle.h.\n\n\t* Makefile.in (cp-demangle.o): Depend on $(INCDIR)/demangle.h.\n\n\t* cp-demangle.c: Include demangle.h.\n\t(template_arg_list_new): DeANSIfy.\n\t(cp_demangle): Make static and add prototype.\n\t(operator_code, operators): Constify.\n\t(demangle_operator_name): Likewise for variables `p1', `p2' and `p'.\n\nFrom-SVN: r34446", "tree": {"sha": "025f8bbc4164c86dd9648a8ca5093d9d6297a2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025f8bbc4164c86dd9648a8ca5093d9d6297a2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb23b1f31ad41140c1a733e55a7982af23f4767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb23b1f31ad41140c1a733e55a7982af23f4767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb23b1f31ad41140c1a733e55a7982af23f4767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb23b1f31ad41140c1a733e55a7982af23f4767/comments", "author": null, "committer": null, "parents": [{"sha": "3f8a8c683b0930176c3d10c36df48041f9fec96e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8a8c683b0930176c3d10c36df48041f9fec96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8a8c683b0930176c3d10c36df48041f9fec96e"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "34f2908cba73bdc04ee9ebbe18889cb6c0637504", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7eb23b1f31ad41140c1a733e55a7982af23f4767", "patch": "@@ -1,3 +1,13 @@\n+2000-06-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (cp-demangle.o): Depend on $(INCDIR)/demangle.h.\n+\n+\t* cp-demangle.c: Include demangle.h.\n+\t(template_arg_list_new): DeANSIfy.\n+\t(cp_demangle): Make static and add prototype.\n+\t(operator_code, operators): Constify.\n+\t(demangle_operator_name): Likewise for variables `p1', `p2' and `p'.\n+\n 2000-06-05  Alex Samuel  <samuel@codesourcery.com>\n \n \t* cp-demangle.c (demangle_prefix): Cast argument to isdigit to"}, {"sha": "a95adcdccc0221e95b8aaff9144e15cf70ebeb1f", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=7eb23b1f31ad41140c1a733e55a7982af23f4767", "patch": "@@ -263,7 +263,7 @@ choose-temp.o: config.h\n clock.o: config.h\n concat.o: $(INCDIR)/libiberty.h\n cplus-dem.o: config.h $(INCDIR)/demangle.h\n-cp-demangle.o: config.h $(INCDIR)/dyn-string.h\n+cp-demangle.o: config.h $(INCDIR)/dyn-string.h $(INCDIR)/demangle.h\n dyn-string.o: config.h $(INCDIR)/dyn-string.h\n fdmatch.o: $(INCDIR)/libiberty.h\n fnmatch.o: config.h $(INCDIR)/fnmatch.h"}, {"sha": "502035f4ff24317eb4b7cc60a273e57edd49329a", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb23b1f31ad41140c1a733e55a7982af23f4767/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=7eb23b1f31ad41140c1a733e55a7982af23f4767", "patch": "@@ -44,6 +44,7 @@\n #include \"ansidecl.h\"\n #include \"libiberty.h\"\n #include \"dyn-string.h\"\n+#include \"demangle.h\"\n \n /* If CP_DEMANGLE_DEBUG is defined, a trace of the grammar evaluation,\n    and other debugging output, will be generated. */\n@@ -513,7 +514,7 @@ substitutions_print (dm, fp)\n /* Creates a new template argument list.  */\n \n static template_arg_list_t\n-template_arg_list_new (void)\n+template_arg_list_new ()\n {\n   template_arg_list_t new_list \n     = (template_arg_list_t) xmalloc (sizeof (struct template_arg_list_def));\n@@ -775,6 +776,8 @@ static status_t demangle_local_name\n   PARAMS ((demangling_t));\n static status_t demangle_discriminator \n   PARAMS ((demangling_t, int));\n+static status_t cp_demangle\n+  PARAMS ((char *, dyn_string_t));\n \n /* When passed to demangle_bare_function_type, indicates that the\n    function's return type is not encoded before its parameter types.  */\n@@ -1308,14 +1311,14 @@ demangle_operator_name (dm, short_name, num_args)\n   struct operator_code\n   {\n     /* The mangled code for this operator.  */\n-    char *code;\n+    const char *code;\n     /* The source name of this operator.  */\n-    char *name;\n+    const char *name;\n     /* The number of arguments this operator takes.  */\n     int num_args;\n   };\n \n-  struct operator_code operators[] = \n+  static const struct operator_code operators[] = \n   {\n     { \"aN\", \"&=\"       , 2 },\n     { \"aS\", \"=\"        , 2 },\n@@ -1371,8 +1374,8 @@ demangle_operator_name (dm, short_name, num_args)\n \n   int c0 = next_char (dm);\n   int c1 = next_char (dm);\n-  struct operator_code* p1 = operators;\n-  struct operator_code* p2 = operators + num_operators;\n+  const struct operator_code* p1 = operators;\n+  const struct operator_code* p2 = operators + num_operators;\n \n   DEMANGLE_TRACE (\"operator-name\", dm);\n \n@@ -1398,7 +1401,7 @@ demangle_operator_name (dm, short_name, num_args)\n   /* Perform a binary search for the operator code.  */\n   while (1)\n     {\n-      struct operator_code* p = p1 + (p2 - p1) / 2;\n+      const struct operator_code* p = p1 + (p2 - p1) / 2;\n       char match0 = p->code[0];\n       char match1 = p->code[1];\n \n@@ -2744,7 +2747,7 @@ demangle_discriminator (dm, suppress_first)\n    dyn_string_t.  On success, returns STATUS_OK.  On failure, returns\n    an error message, and the contents of RESULT are unchanged.  */\n \n-status_t\n+static status_t\n cp_demangle (name, result)\n      char *name;\n      dyn_string_t result;"}]}