{"sha": "e96482d84ec801c43e651547ef70dfc86f9cbb62", "node_id": "C_kwDOANBUbNoAKGU5NjQ4MmQ4NGVjODAxYzQzZTY1MTU0N2VmNzBkZmM4NmY5Y2JiNjI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T12:39:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-31T16:47:40Z"}, "message": "RISC-V: Add binop constraint tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-1.c: New test.", "tree": {"sha": "f511721201beec373f8add7197d15711b75a8e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f511721201beec373f8add7197d15711b75a8e29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e96482d84ec801c43e651547ef70dfc86f9cbb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96482d84ec801c43e651547ef70dfc86f9cbb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96482d84ec801c43e651547ef70dfc86f9cbb62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96482d84ec801c43e651547ef70dfc86f9cbb62/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2674f5b913ddec9d0b94d555ffd326b7f113c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2674f5b913ddec9d0b94d555ffd326b7f113c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2674f5b913ddec9d0b94d555ffd326b7f113c8d"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "3ab1ccee035530643583b940bafda7e2d09d6bb7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-1.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96482d84ec801c43e651547ef70dfc86f9cbb62/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96482d84ec801c43e651547ef70dfc86f9cbb62/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-1.c?ref=e96482d84ec801c43e651547ef70dfc86f9cbb62", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void *out)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vv_i32m1 (v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vadd_vv_i32m1_tu (v3, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vv_i32m1 (v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vadd_vv_i32m1_m (mask, v3, v3, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+    vint32m1_t v3 = __riscv_vadd_vv_i32m1 (v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vadd_vv_i32m1_tumu (mask, v3, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**\tvsetivli\\tzero,4,e8,mf8,tu,ma\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f4 (void * in, void *out)\n+{\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vv_i8mf8 (v2, v2, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vv_i8mf8_tu (v3, v2, v2, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,ta,ma\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f5 (void * in, void *out)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_m (mask, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vv_i8mf8 (v2, v2, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vv_i8mf8_m (mask, v3, v3, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf8,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e8,mf8,tu,mu\n+**\tvle8\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle8.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvadd\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\n+**\tvse8.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f6 (void * in, void *out)\n+{\n+    vbool64_t mask = *(vbool64_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint8mf8_t v = __riscv_vle8_v_i8mf8 (in, 4);\n+    vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tumu (mask, v, in, 4);\n+    vint8mf8_t v3 = __riscv_vadd_vv_i8mf8 (v2, v2, 4);\n+    vint8mf8_t v4 = __riscv_vadd_vv_i8mf8_tumu (mask, v3, v2, v2, 4);\n+    __riscv_vse8_v_i8mf8 (out, v4, 4);\n+}"}]}