{"sha": "e24ff9733326709acd0add575db7e9962abf7554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0ZmY5NzMzMzI2NzA5YWNkMGFkZDU3NWRiN2U5OTYyYWJmNzU1NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-03T23:15:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-03T23:15:52Z"}, "message": "(layout_type...\n\n(layout_type, case ARRAY_TYPE): Strip MAX_EXPR from upper bound when\ncomputing length if it just protects against negative length.\n\nFrom-SVN: r10430", "tree": {"sha": "dbbf3893c7fcbb0adff6ee1dd5bc91f2f21540b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbf3893c7fcbb0adff6ee1dd5bc91f2f21540b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24ff9733326709acd0add575db7e9962abf7554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24ff9733326709acd0add575db7e9962abf7554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24ff9733326709acd0add575db7e9962abf7554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24ff9733326709acd0add575db7e9962abf7554/comments", "author": null, "committer": null, "parents": [{"sha": "675f0e7cb2931a7f0d08f422b1a6564fb3b28b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675f0e7cb2931a7f0d08f422b1a6564fb3b28b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675f0e7cb2931a7f0d08f422b1a6564fb3b28b6b"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "8cdbf86aa80b3abcc6c02d1fe49b78d4061c7a93", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24ff9733326709acd0add575db7e9962abf7554/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24ff9733326709acd0add575db7e9962abf7554/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=e24ff9733326709acd0add575db7e9962abf7554", "patch": "@@ -747,10 +747,28 @@ layout_type (type)\n \tif (index && TYPE_MAX_VALUE (index) && TYPE_MIN_VALUE (index)\n \t    && TYPE_SIZE (element))\n \t  {\n-\t    tree length\n-\t      = size_binop (PLUS_EXPR, size_one_node,\n-\t\t\t    size_binop (MINUS_EXPR, TYPE_MAX_VALUE (index),\n-\t\t\t\t\tTYPE_MIN_VALUE (index)));\n+\t    tree ub = TYPE_MAX_VALUE (index);\n+\t    tree lb = TYPE_MIN_VALUE (index);\n+\t    tree length;\n+\n+\t    /* If UB is max (lb - 1, x), remove the MAX_EXPR since the\n+\t       test for negative below covers it.  */\n+\t    if (TREE_CODE (ub) == MAX_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (ub, 0)) == MINUS_EXPR\n+\t\t&& integer_onep (TREE_OPERAND (TREE_OPERAND (ub, 0), 1))\n+\t\t&& operand_equal_p (TREE_OPERAND (TREE_OPERAND (ub, 0), 0),\n+\t\t\t\t    lb, 0))\n+\t      ub = TREE_OPERAND (ub, 1);\n+\t    else if (TREE_CODE (ub) == MAX_EXPR\n+\t\t     && TREE_CODE (TREE_OPERAND (ub, 1)) == MINUS_EXPR\n+\t\t     && integer_onep (TREE_OPERAND (TREE_OPERAND (ub, 1), 1))\n+\t\t     && operand_equal_p (TREE_OPERAND (TREE_OPERAND (ub, 1),\n+\t\t\t\t\t\t       0),\n+\t\t\t\t\t lb, 0))\n+\t      ub = TREE_OPERAND (ub, 0);\n+\n+\t    length = size_binop (PLUS_EXPR, size_one_node,\n+\t\t\t\t size_binop (MINUS_EXPR, ub, lb));\n \n \t    /* If neither bound is a constant and sizetype is signed, make\n \t       sure the size is never negative.  We should really do this"}]}