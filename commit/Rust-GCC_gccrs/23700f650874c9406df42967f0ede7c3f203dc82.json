{"sha": "23700f650874c9406df42967f0ede7c3f203dc82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3MDBmNjUwODc0Yzk0MDZkZjQyOTY3ZjBlZGU3YzNmMjAzZGM4Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-12-04T10:34:40Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-12-04T10:34:40Z"}, "message": "c-decl.c (duplicate_decls): Revert rth's patch.\n\n* c-decl.c (duplicate_decls): Revert rth's patch.  If newdecl\nis in a different binding level, get its abstract origin to be\nolddecl.\n* tree-inline.c (expand_call_inline): Move DECL_INITIAL sanity\ncheck earlier.\n* tree.c (get_callee_fndecl): Follow DECL_ABSTRACT_ORIGIN if\nDECL_INITIAL is NULL.\n\nFrom-SVN: r47610", "tree": {"sha": "5f796d4a540cf14b9ff9cbc2a69e91812776ca98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f796d4a540cf14b9ff9cbc2a69e91812776ca98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23700f650874c9406df42967f0ede7c3f203dc82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23700f650874c9406df42967f0ede7c3f203dc82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23700f650874c9406df42967f0ede7c3f203dc82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23700f650874c9406df42967f0ede7c3f203dc82/comments", "author": null, "committer": null, "parents": [{"sha": "961eacce43e97fa61b625d38480a89927faa64d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961eacce43e97fa61b625d38480a89927faa64d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961eacce43e97fa61b625d38480a89927faa64d8"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "26bed221d40bf5059df6c2f6b5e63a1c6bd34a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23700f650874c9406df42967f0ede7c3f203dc82", "patch": "@@ -1,5 +1,13 @@\n 2001-12-04  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* c-decl.c (duplicate_decls): Revert rth's patch.  If newdecl\n+\tis in a different binding level, get its abstract origin to be\n+\tolddecl.\n+\t* tree-inline.c (expand_call_inline): Move DECL_INITIAL sanity\n+\tcheck earlier.\n+\t* tree.c (get_callee_fndecl): Follow DECL_ABSTRACT_ORIGIN if\n+\tDECL_INITIAL is NULL.\n+\n \t* stmt.c (expand_expr_stmt): Keep last_expr_value non-NULL iff\n \twe're interested in the result.  Use it to tell whether to\n \tignore results of enclosed expressions."}, {"sha": "34278546d979787e6d184a27f7e498607d333abf", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=23700f650874c9406df42967f0ede7c3f203dc82", "patch": "@@ -2019,14 +2019,15 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t     DECL_INITIAL, so that we don't accidentally change function\n \t     declarations into function definitions.  */\n \t  if (! different_binding_level)\n-\t    {\n-\t      DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n-\t      DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n-\t    }\n+\t    DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n \t  DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n+\t  DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n \t  if (DECL_INLINE (newdecl))\n-\t    DECL_ABSTRACT_ORIGIN (newdecl) = DECL_ABSTRACT_ORIGIN (olddecl);\n+\t    DECL_ABSTRACT_ORIGIN (newdecl)\n+\t      = (different_binding_level\n+\t\t ? DECL_ORIGIN (olddecl)\n+\t\t : DECL_ABSTRACT_ORIGIN (olddecl));\n \t}\n     }\n   if (different_binding_level)"}, {"sha": "f82c8c90ae5de7df78ded6a9983279b611664e92", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=23700f650874c9406df42967f0ede7c3f203dc82", "patch": "@@ -864,6 +864,10 @@ expand_call_inline (tp, walk_subtrees, data)\n   id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n   DECL_CONTEXT (id->ret_label) = VARRAY_TREE (id->fns, 0);\n \n+  if (! DECL_INITIAL (fn)\n+      || TREE_CODE (DECL_INITIAL (fn)) != BLOCK)\n+    abort ();\n+\n   /* Create a block to put the parameters in.  We have to do this\n      after the parameters have been remapped because remapping\n      parameters is different from remapping ordinary variables.  */\n@@ -894,9 +898,6 @@ expand_call_inline (tp, walk_subtrees, data)\n   /* Close the block for the parameters.  */\n   scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n-  if (! DECL_INITIAL (fn)\n-      || TREE_CODE (DECL_INITIAL (fn)) != BLOCK)\n-    abort ();\n   remap_block (scope_stmt, NULL_TREE, id);\n   STMT_EXPR_STMT (expr)\n     = chainon (STMT_EXPR_STMT (expr), scope_stmt);"}, {"sha": "87dac2d5eb5bae50896037ee953bdd9a5529fa82", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23700f650874c9406df42967f0ede7c3f203dc82/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=23700f650874c9406df42967f0ede7c3f203dc82", "patch": "@@ -4378,7 +4378,14 @@ get_callee_fndecl (call)\n      that `f' is being called.  */\n   if (TREE_CODE (addr) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (addr, 0)) == FUNCTION_DECL)\n-    return TREE_OPERAND (addr, 0);\n+    {\n+      addr = TREE_OPERAND (addr, 0);\n+\n+      if (! DECL_INITIAL (addr) && DECL_ABSTRACT_ORIGIN (addr))\n+\taddr = DECL_ABSTRACT_ORIGIN (addr);\n+\n+      return addr;\n+    }\n \n   /* We couldn't figure out what was being called.  */\n   return NULL_TREE;"}]}