{"sha": "12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkMGQzNTgxYjBhY2Y3N2Q2Y2I1N2I2ZTc3ZWFmOTJlMDQxM2I3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-12T18:09:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-12T18:09:59Z"}, "message": "re PR debug/55541 (unable to see local variables due extra lexical block was generated)\n\n\tPR debug/55541\n\t* cp-tree.h (BLOCK_OUTER_CURLY_BRACE_P): Define.\n\t* decl.c (poplevel): If functionbody, try not to create an extra\n\tBLOCK for function body and use subblocks as that, if it is non-NULL\n\tand doesn't have siblings.  Set BLOCK_OUTER_CURLY_BRACE_P flag.\n\t(outer_curly_brace_block): Use BLOCK_OUTER_CURLY_BRACE_P flag.\n\n\t* g++.dg/debug/dwarf2/localclass3.C: Adjust for the extraneous\n\tDW_TAG_lexical_block removal.\n\t* g++.dg/debug/dwarf2/redeclaration-1.C: Likewise.\n\t* g++.dg/guality/pr55541.C: New test.\n\nFrom-SVN: r220650", "tree": {"sha": "643380c28cfaa4e5d03935806d8323e6c7214b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643380c28cfaa4e5d03935806d8323e6c7214b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40595b8e01bd43d5c58b5fbf0abed1f30419aed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40595b8e01bd43d5c58b5fbf0abed1f30419aed3"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "722e92684bf92b0e8f008a6294eed078ed3ae575", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -1,5 +1,12 @@\n 2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/55541\n+\t* cp-tree.h (BLOCK_OUTER_CURLY_BRACE_P): Define.\n+\t* decl.c (poplevel): If functionbody, try not to create an extra\n+\tBLOCK for function body and use subblocks as that, if it is non-NULL\n+\tand doesn't have siblings.  Set BLOCK_OUTER_CURLY_BRACE_P flag.\n+\t(outer_curly_brace_block): Use BLOCK_OUTER_CURLY_BRACE_P flag.\n+\n \tPR sanitizer/64984\n \t* except.c (check_noexcept_r): Return NULL for internal\n \tcalls."}, {"sha": "65219f159e326a77d20bceb9b85750a30c639b12", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -84,6 +84,7 @@ c-common.h, not after.\n       PACK_EXPANSION_LOCAL_P (in *_PACK_EXPANSION)\n       TINFO_HAS_ACCESS_ERRORS (in TEMPLATE_INFO)\n       SIZEOF_EXPR_TYPE_P (in SIZEOF_EXPR)\n+      BLOCK_OUTER_CURLY_BRACE_P (in BLOCK)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -326,6 +327,9 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define STATEMENT_LIST_TRY_BLOCK(NODE) \\\n   TREE_LANG_FLAG_2 (STATEMENT_LIST_CHECK (NODE))\n \n+/* Mark the outer curly brace BLOCK.  */\n+#define BLOCK_OUTER_CURLY_BRACE_P(NODE)\tTREE_LANG_FLAG_0 (BLOCK_CHECK (NODE))\n+\n /* Nonzero if this statement should be considered a full-expression,\n    i.e., if temporaries created during this statement should have\n    their destructors run at the end of this statement.  */"}, {"sha": "50b062497fa875fb1c3d531278c8db76e56b860e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -610,7 +610,10 @@ poplevel (int keep, int reverse, int functionbody)\n      or if this level is a function body,\n      create a BLOCK to record them for the life of this function.  */\n   block = NULL_TREE;\n-  if (keep == 1 || functionbody)\n+  /* Avoid function body block if possible.  */\n+  if (functionbody && subblocks && BLOCK_CHAIN (subblocks) == NULL_TREE)\n+    keep = 0;\n+  else if (keep == 1 || functionbody)\n     block = make_node (BLOCK);\n   if (block != NULL_TREE)\n     {\n@@ -793,11 +796,16 @@ poplevel (int keep, int reverse, int functionbody)\n      check over all the labels.  */\n   if (functionbody)\n     {\n-      /* Since this is the top level block of a function, the vars are\n-\t the function's parameters.  Don't leave them in the BLOCK\n-\t because they are found in the FUNCTION_DECL instead.  */\n-      BLOCK_VARS (block) = 0;\n-      pop_labels (block);\n+      if (block)\n+\t{\n+\t  /* Since this is the top level block of a function, the vars are\n+\t     the function's parameters.  Don't leave them in the BLOCK\n+\t     because they are found in the FUNCTION_DECL instead.  */\n+\t  BLOCK_VARS (block) = 0;\n+\t  pop_labels (block);\n+\t}\n+      else\n+\tpop_labels (subblocks);\n     }\n \n   kind = current_binding_level->kind;\n@@ -819,7 +827,17 @@ poplevel (int keep, int reverse, int functionbody)\n       /* The current function is being defined, so its DECL_INITIAL\n \t should be error_mark_node.  */\n       gcc_assert (DECL_INITIAL (current_function_decl) == error_mark_node);\n-      DECL_INITIAL (current_function_decl) = block;\n+      DECL_INITIAL (current_function_decl) = block ? block : subblocks;\n+      if (subblocks)\n+\t{\n+\t  if (FUNCTION_NEEDS_BODY_BLOCK (current_function_decl))\n+\t    {\n+\t      if (BLOCK_SUBBLOCKS (subblocks))\n+\t\tBLOCK_OUTER_CURLY_BRACE_P (BLOCK_SUBBLOCKS (subblocks)) = 1;\n+\t    }\n+\t  else\n+\t    BLOCK_OUTER_CURLY_BRACE_P (subblocks) = 1;\n+\t}\n     }\n   else if (block)\n     current_binding_level->blocks\n@@ -14053,10 +14071,14 @@ finish_function_body (tree compstmt)\n tree\n outer_curly_brace_block (tree fndecl)\n {\n-  tree block = BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl));\n-  if (FUNCTION_NEEDS_BODY_BLOCK (current_function_decl))\n-    /* Skip the artificial function body block.  */\n-    block = BLOCK_SUBBLOCKS (block);\n+  tree block = DECL_INITIAL (fndecl);\n+  if (BLOCK_OUTER_CURLY_BRACE_P (block))\n+    return block;\n+  block = BLOCK_SUBBLOCKS (block);\n+  if (BLOCK_OUTER_CURLY_BRACE_P (block))\n+    return block;\n+  block = BLOCK_SUBBLOCKS (block);\n+  gcc_assert (BLOCK_OUTER_CURLY_BRACE_P (block));\n   return block;\n }\n "}, {"sha": "3cb5af0c8ac636297b30a1c1c7e39737bb30884e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -1,5 +1,11 @@\n 2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/55541\n+\t* g++.dg/debug/dwarf2/localclass3.C: Adjust for the extraneous\n+\tDW_TAG_lexical_block removal.\n+\t* g++.dg/debug/dwarf2/redeclaration-1.C: Likewise.\n+\t* g++.dg/guality/pr55541.C: New test.\n+\n \tPR sanitizer/64984\n \t* g++.dg/ubsan/pr64984.C: New test.\n "}, {"sha": "b4baaa1f7e048f544f863db5ba3351a9023abc81", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/localclass3.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass3.C?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -4,8 +4,11 @@\n \n void f()\n {\n-  struct A { int i; } *ap;\n-  ap->i = 42;\n+  int j = 5;\n+  {\n+    struct A { int i; } *ap;\n+    ap->i = 42;\n+  }\n }\n \n // { dg-final { scan-assembler \"DW_TAG_pointer_type.\\[^)\\]*. DW_TAG_structure_type\" } }"}, {"sha": "325647e13fee0c01c350e2aaa3affcd1c6395a48", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/redeclaration-1.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fredeclaration-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fredeclaration-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fredeclaration-1.C?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -9,10 +9,12 @@ namespace S\n   int\n   f()\n   {\n-    int i = 42;\n     {\n-      extern int i;\n-      return i;\n+      int i = 42;\n+      {\n+\textern int i;\n+\treturn i;\n+      }\n     }\n   }\n }"}, {"sha": "c8ec19365dc03019b89751f344478fb0f3307766", "filename": "gcc/testsuite/g++.dg/guality/pr55541.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr55541.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr55541.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fguality%2Fpr55541.C?ref=12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "patch": "@@ -0,0 +1,11 @@\n+// PR debug/55541\n+// { dg-do run }\n+// { dg-options \"-g\" }\n+\n+int\n+main ()\n+{\n+  int vari;\n+  vari = 10;\n+  vari = vari + 5;\n+} // { dg-final { gdb-test 11 \"vari\" \"15\" } }"}]}