{"sha": "557be5a8767902f204e8afa04551a387eac33a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3YmU1YTg3Njc5MDJmMjA0ZThhZmEwNDU1MWEzODdlYWMzM2EyNg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-13T16:20:13Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-13T16:20:13Z"}, "message": "[Vectorizer] Split vect_gen_perm_mask into _checked and _any variants\n\n\t* tree-vectorizer.h (vect_gen_perm_mask): Remove.\n\t(vect_gen_perm_mask_checked, vect_gen_perm_mask_any): New.\n\n\ttree_vec_data_refs.c (vect_permute_load_chain, vec_permute_store_chain,\n\tvec_shift_permute_load_chain): Replace vect_gen_perm_mask & assert\n\twith vect_gen_perm_mask_checked.\n\n\t* tree-vect-stmts.c (vectorizable_mask_load_store, vectorizable_load):\n\tLikewise.\n\n\t(vect_gen_perm_mask_checked): New.\n\t(vect_gen_perm_mask): Remove can_vec_perm_p check, rename to...\n\t(vect_gen_perm_mask_any): ...this.\n\n\t(perm_mask_for_reverse): Call can_vec_perm_p and\n\tvect_gen_perm_mask_checked.\n\nFrom-SVN: r217508", "tree": {"sha": "eec657cc746f77494e987ad6b044c2a73effafa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec657cc746f77494e987ad6b044c2a73effafa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/557be5a8767902f204e8afa04551a387eac33a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557be5a8767902f204e8afa04551a387eac33a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557be5a8767902f204e8afa04551a387eac33a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557be5a8767902f204e8afa04551a387eac33a26/comments", "author": null, "committer": null, "parents": [{"sha": "1c5fd343ded2f26d6bf1e6459d6d7b80cb8564e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5fd343ded2f26d6bf1e6459d6d7b80cb8564e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5fd343ded2f26d6bf1e6459d6d7b80cb8564e6"}], "stats": {"total": 113, "additions": 60, "deletions": 53}, "files": [{"sha": "1ff63181808e46dc7fe0a509ed85923756a95636", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557be5a8767902f204e8afa04551a387eac33a26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557be5a8767902f204e8afa04551a387eac33a26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=557be5a8767902f204e8afa04551a387eac33a26", "patch": "@@ -1,3 +1,22 @@\n+2014-11-13  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+        * tree-vectorizer.h (vect_gen_perm_mask): Remove.\n+        (vect_gen_perm_mask_checked, vect_gen_perm_mask_any): New.\n+\n+        tree_vec_data_refs.c (vect_permute_load_chain, vec_permute_store_chain,\n+        vec_shift_permute_load_chain): Replace vect_gen_perm_mask & assert\n+        with vect_gen_perm_mask_checked.\n+\n+        * tree-vect-stmts.c (vectorizable_mask_load_store, vectorizable_load):\n+        Likewise.\n+\n+        (vect_gen_perm_mask_checked): New.\n+        (vect_gen_perm_mask): Remove can_vec_perm_p check, rename to...\n+        (vect_gen_perm_mask_any): ...this.\n+\n+        (perm_mask_for_reverse): Call can_vec_perm_p and\n+        vect_gen_perm_mask_checked.\n+\n 2014-11-13  Felix Yang  <felix.yang@huawei.com>\n \n \t* ipa-utils.h: Fix typo in comments."}, {"sha": "2f8e0c2c9d8246bf071bf2b561d28c96ca311b6d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=557be5a8767902f204e8afa04551a387eac33a26", "patch": "@@ -4619,8 +4619,7 @@ vect_permute_store_chain (vec<tree> dr_chain,\n \t      if (3 * i + nelt2 < nelt)\n \t\tsel[3 * i + nelt2] = 0;\n \t    }\n-\t  perm3_mask_low = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm3_mask_low != NULL);\n+\t  perm3_mask_low = vect_gen_perm_mask_checked (vectype, sel);\n \n \t  for (i = 0; i < nelt; i++)\n \t    {\n@@ -4631,8 +4630,7 @@ vect_permute_store_chain (vec<tree> dr_chain,\n \t      if (3 * i + nelt2 < nelt)\n \t\tsel[3 * i + nelt2] = nelt + j2++;\n \t    }\n-\t  perm3_mask_high = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm3_mask_high != NULL);\n+\t  perm3_mask_high = vect_gen_perm_mask_checked (vectype, sel);\n \n \t  vect1 = dr_chain[0];\n \t  vect2 = dr_chain[1];\n@@ -4671,13 +4669,11 @@ vect_permute_store_chain (vec<tree> dr_chain,\n \t  sel[i * 2] = i;\n \t  sel[i * 2 + 1] = i + nelt;\n \t}\n-\tperm_mask_high = vect_gen_perm_mask (vectype, sel);\n-\tgcc_assert (perm_mask_high != NULL);\n+\tperm_mask_high = vect_gen_perm_mask_checked (vectype, sel);\n \n \tfor (i = 0; i < nelt; i++)\n \t  sel[i] += nelt / 2;\n-\tperm_mask_low = vect_gen_perm_mask (vectype, sel);\n-\tgcc_assert (perm_mask_low != NULL);\n+\tperm_mask_low = vect_gen_perm_mask_checked (vectype, sel);\n \n \tfor (i = 0, n = log_length; i < n; i++)\n \t  {\n@@ -5180,17 +5176,15 @@ vect_permute_load_chain (vec<tree> dr_chain,\n \t      sel[i] = 3 * i + k;\n \t    else\n \t      sel[i] = 0;\n-\t  perm3_mask_low = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm3_mask_low != NULL);\n+\t  perm3_mask_low = vect_gen_perm_mask_checked (vectype, sel);\n \n \t  for (i = 0, j = 0; i < nelt; i++)\n \t    if (3 * i + k < 2 * nelt)\n \t      sel[i] = i;\n \t    else\n \t      sel[i] = nelt + ((nelt + k) % 3) + 3 * (j++);\n \n-\t  perm3_mask_high = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm3_mask_high != NULL);\n+\t  perm3_mask_high = vect_gen_perm_mask_checked (vectype, sel);\n \n \t  first_vect = dr_chain[0];\n \t  second_vect = dr_chain[1];\n@@ -5224,13 +5218,11 @@ vect_permute_load_chain (vec<tree> dr_chain,\n \n       for (i = 0; i < nelt; ++i)\n \tsel[i] = i * 2;\n-      perm_mask_even = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (perm_mask_even != NULL);\n+      perm_mask_even = vect_gen_perm_mask_checked (vectype, sel);\n \n       for (i = 0; i < nelt; ++i)\n \tsel[i] = i * 2 + 1;\n-      perm_mask_odd = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (perm_mask_odd != NULL);\n+      perm_mask_odd = vect_gen_perm_mask_checked (vectype, sel);\n \n       for (i = 0; i < log_length; i++)\n \t{\n@@ -5386,8 +5378,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t      supported by target\\n\");\n \t  return false;\n \t}\n-      perm2_mask1 = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (perm2_mask1 != NULL);\n+      perm2_mask1 = vect_gen_perm_mask_checked (vectype, sel);\n \n       for (i = 0; i < nelt / 2; ++i)\n \tsel[i] = i * 2 + 1;\n@@ -5401,8 +5392,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t      supported by target\\n\");\n \t  return false;\n \t}\n-      perm2_mask2 = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (perm2_mask2 != NULL);\n+      perm2_mask2 = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to shift all elements.\n \t For vector length 8 it is {4 5 6 7 8 9 10 11}.  */\n@@ -5415,8 +5405,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"shift permutation is not supported by target\\n\");\n \t  return false;\n \t}\n-      shift1_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (shift1_mask != NULL);\n+      shift1_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to select vector from 2.\n \t For vector length 8 it is {0 1 2 3 12 13 14 15}.  */\n@@ -5431,8 +5420,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"select is not supported by target\\n\");\n \t  return false;\n \t}\n-      select_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (select_mask != NULL);\n+      select_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       for (i = 0; i < log_length; i++)\n \t{\n@@ -5498,8 +5486,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t      supported by target\\n\");\n \t  return false;\n \t}\n-      perm3_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (perm3_mask != NULL);\n+      perm3_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to shift all elements.\n \t For vector length 8 it is {6 7 8 9 10 11 12 13}.  */\n@@ -5512,8 +5499,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"shift permutation is not supported by target\\n\");\n \t  return false;\n \t}\n-      shift1_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (shift1_mask != NULL);\n+      shift1_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to shift all elements.\n \t For vector length 8 it is {5 6 7 8 9 10 11 12}.  */\n@@ -5526,8 +5512,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"shift permutation is not supported by target\\n\");\n \t  return false;\n \t}\n-      shift2_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (shift2_mask != NULL);\n+      shift2_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to shift all elements.\n \t For vector length 8 it is {3 4 5 6 7 8 9 10}.  */\n@@ -5540,8 +5525,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"shift permutation is not supported by target\\n\");\n \t  return false;\n \t}\n-      shift3_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (shift3_mask != NULL);\n+      shift3_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       /* Generating permutation constant to shift all elements.\n \t For vector length 8 it is {5 6 7 8 9 10 11 12}.  */\n@@ -5554,8 +5538,7 @@ vect_shift_permute_load_chain (vec<tree> dr_chain,\n \t\t\t     \"shift permutation is not supported by target\\n\");\n \t  return false;\n \t}\n-      shift4_mask = vect_gen_perm_mask (vectype, sel);\n-      gcc_assert (shift4_mask != NULL);\n+      shift4_mask = vect_gen_perm_mask_checked (vectype, sel);\n \n       for (k = 0; k < 3; k++)\n \t{"}, {"sha": "3d40f0f775ea454d26df7f19c01a640f24e051ac", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=557be5a8767902f204e8afa04551a387eac33a26", "patch": "@@ -1917,8 +1917,7 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t  for (i = 0; i < gather_off_nunits; ++i)\n \t    sel[i] = i | nunits;\n \n-\t  perm_mask = vect_gen_perm_mask (gather_off_vectype, sel);\n-\t  gcc_assert (perm_mask != NULL_TREE);\n+\t  perm_mask = vect_gen_perm_mask_checked (gather_off_vectype, sel);\n \t}\n       else if (nunits == gather_off_nunits * 2)\n \t{\n@@ -1929,13 +1928,11 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t    sel[i] = i < gather_off_nunits\n \t\t     ? i : i + nunits - gather_off_nunits;\n \n-\t  perm_mask = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm_mask != NULL_TREE);\n+\t  perm_mask = vect_gen_perm_mask_checked (vectype, sel);\n \t  ncopies *= 2;\n \t  for (i = 0; i < nunits; ++i)\n \t    sel[i] = i | gather_off_nunits;\n-\t  mask_perm_mask = vect_gen_perm_mask (masktype, sel);\n-\t  gcc_assert (mask_perm_mask != NULL_TREE);\n+\t  mask_perm_mask = vect_gen_perm_mask_checked (masktype, sel);\n \t}\n       else\n \tgcc_unreachable ();\n@@ -4940,7 +4937,9 @@ perm_mask_for_reverse (tree vectype)\n   for (i = 0; i < nunits; ++i)\n     sel[i] = nunits - 1 - i;\n \n-  return vect_gen_perm_mask (vectype, sel);\n+  if (!can_vec_perm_p (TYPE_MODE (vectype), false, sel))\n+    return NULL_TREE;\n+  return vect_gen_perm_mask_checked (vectype, sel);\n }\n \n /* Function vectorizable_store.\n@@ -5471,21 +5470,19 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   return true;\n }\n \n-/* Given a vector type VECTYPE and permutation SEL returns\n-   the VECTOR_CST mask that implements the permutation of the\n-   vector elements.  If that is impossible to do, returns NULL.  */\n+/* Given a vector type VECTYPE, turns permutation SEL into the equivalent\n+   VECTOR_CST mask.  No checks are made that the target platform supports the\n+   mask, so callers may wish to test can_vec_perm_p separately, or use\n+   vect_gen_perm_mask_checked.  */\n \n tree\n-vect_gen_perm_mask (tree vectype, unsigned char *sel)\n+vect_gen_perm_mask_any (tree vectype, const unsigned char *sel)\n {\n   tree mask_elt_type, mask_type, mask_vec, *mask_elts;\n   int i, nunits;\n \n   nunits = TYPE_VECTOR_SUBPARTS (vectype);\n \n-  if (!can_vec_perm_p (TYPE_MODE (vectype), false, sel))\n-    return NULL;\n-\n   mask_elt_type = lang_hooks.types.type_for_mode\n \t\t    (int_mode_for_mode (TYPE_MODE (TREE_TYPE (vectype))), 1);\n   mask_type = get_vectype_for_scalar_type (mask_elt_type);\n@@ -5498,6 +5495,15 @@ vect_gen_perm_mask (tree vectype, unsigned char *sel)\n   return mask_vec;\n }\n \n+/* Checked version of vect_gen_perm_mask_any.  Asserts can_vec_perm_p.  */\n+\n+tree\n+vect_gen_perm_mask_checked (tree vectype, const unsigned char *sel)\n+{\n+  gcc_assert (can_vec_perm_p (TYPE_MODE (vectype), false, sel));\n+  return vect_gen_perm_mask_any (vectype, sel);\n+}\n+\n /* Given a vector variable X and Y, that was generated for the scalar\n    STMT, generate instructions to permute the vector elements of X and Y\n    using permutation mask MASK_VEC, insert them at *GSI and return the\n@@ -5853,8 +5859,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  for (i = 0; i < gather_off_nunits; ++i)\n \t    sel[i] = i | nunits;\n \n-\t  perm_mask = vect_gen_perm_mask (gather_off_vectype, sel);\n-\t  gcc_assert (perm_mask != NULL_TREE);\n+\t  perm_mask = vect_gen_perm_mask_checked (gather_off_vectype, sel);\n \t}\n       else if (nunits == gather_off_nunits * 2)\n \t{\n@@ -5865,8 +5870,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    sel[i] = i < gather_off_nunits\n \t\t     ? i : i + nunits - gather_off_nunits;\n \n-\t  perm_mask = vect_gen_perm_mask (vectype, sel);\n-\t  gcc_assert (perm_mask != NULL_TREE);\n+\t  perm_mask = vect_gen_perm_mask_checked (vectype, sel);\n \t  ncopies *= 2;\n \t}\n       else"}, {"sha": "d817f9f53a6ed8d88a305207f6f482ef7a30fea3", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557be5a8767902f204e8afa04551a387eac33a26/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=557be5a8767902f204e8afa04551a387eac33a26", "patch": "@@ -1040,7 +1040,8 @@ extern void vect_get_store_cost (struct data_reference *, int,\n extern bool vect_supportable_shift (enum tree_code, tree);\n extern void vect_get_vec_defs (tree, tree, gimple, vec<tree> *,\n \t\t\t       vec<tree> *, slp_tree, int);\n-extern tree vect_gen_perm_mask (tree, unsigned char *);\n+extern tree vect_gen_perm_mask_any (tree, const unsigned char *);\n+extern tree vect_gen_perm_mask_checked (tree, const unsigned char *);\n \n /* In tree-vect-data-refs.c.  */\n extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);"}]}