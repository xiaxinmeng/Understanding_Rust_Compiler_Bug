{"sha": "44f0760eaea8e0c2842b438248c52b380d128571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmMDc2MGVhZWE4ZTBjMjg0MmI0MzgyNDhjNTJiMzgwZDEyODU3MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-30T17:40:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-30T17:40:13Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_PCH): Add bits for --enable-pch.\n\n\n2003-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_PCH): Add bits for --enable-pch.\n\t* aclocal.m4: Regenerate.\n\t* configure.in (GLIBCPP_CHECK_PCH): Move, change to\n\tGLIBCPP_ENABLE_PCH, default to yes.\n\t* configure: Regenerate.\n\t* docs/html/configopts.html: Add --enable-pch.\n\nFrom-SVN: r68715", "tree": {"sha": "79ab677d9c621f919633e2ce4a3e2f51b62f9c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ab677d9c621f919633e2ce4a3e2f51b62f9c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f0760eaea8e0c2842b438248c52b380d128571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f0760eaea8e0c2842b438248c52b380d128571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f0760eaea8e0c2842b438248c52b380d128571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f0760eaea8e0c2842b438248c52b380d128571/comments", "author": null, "committer": null, "parents": [{"sha": "ec097612bcc64d6a0cc887994bf3a62970a6bc30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec097612bcc64d6a0cc887994bf3a62970a6bc30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec097612bcc64d6a0cc887994bf3a62970a6bc30"}], "stats": {"total": 2915, "additions": 1509, "deletions": 1406}, "files": [{"sha": "04a5a5b0337d92bdb39a987dba22605988369a9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -1,3 +1,12 @@\n+2003-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_PCH): Add bits for --enable-pch.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in (GLIBCPP_CHECK_PCH): Move, change to\n+\tGLIBCPP_ENABLE_PCH, default to yes.\n+\t* configure: Regenerate.\n+\t* docs/html/configopts.html: Add --enable-pch.\n+\t\n 2003-06-30  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* testsuite/lib/libstdc++-v3-dg.exp:  Add comments."}, {"sha": "d013df556ca154b1064a7a677a7b086a8909e614", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -1371,32 +1371,60 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n dnl\n dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n-dnl GLIBCPP_CHECK_PCH\n+dnl GLIBCPP_ENABLE_PCH\n dnl\n-dnl If it looks like it may work, flip bits on in include/Makefile.am\n+dnl --enable-pch=yes\n+dnl default, this shows intent to use stdc++.h.gch If it looks like it\n+dnl may work, after some light-hearted attempts to puzzle out compiler\n+dnl support, flip bits on in include/Makefile.am\n dnl\n-AC_DEFUN(GLIBCPP_CHECK_PCH, [\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+dnl --disable-pch\n+dnl turns off attempts to use or build stdc++.h.gch.\n+dnl\n+AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n+define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n+AC_ARG_ENABLE(pch,\n+changequote(<<, >>)dnl\n+<<  --enable-pch         build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+changequote([, ])dnl\n+[case \"${enableval}\" in\n+ yes) enable_pch=yes ;;\n+ no)  enable_pch=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n+ esac],\n+enable_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n \n-  AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n-  if test x${glibcpp_pch_comp+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_pch_comp, [\n-      AC_LANG_SAVE\n-      AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>\n+  if test x$enable_pch = xyes; then\n+    ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+\n+    AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n+    if test x${glibcpp_pch_comp+set} != xset; then\n+      AC_CACHE_VAL(glibcpp_pch_comp, [\n+        AC_LANG_SAVE\n+        AC_LANG_CPLUSPLUS\n+        AC_TRY_COMPILE([#include <math.h>\n \t\t     ],\n                      [ $1(0);],\n                      [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n-      AC_LANG_RESTORE\n-    ])\n+        AC_LANG_RESTORE\n+      ])\n+    fi\n+    AC_MSG_RESULT([$glibcpp_pch_comp])\n+\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   fi\n-  AC_MSG_RESULT([$glibcpp_pch_comp])\n \n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$glibcpp_pch_comp\" = yes)\n-  if test \"$glibcpp_pch_comp\" = yes; then\n+  if test x\"$enable_pch\" = xyes && test x\"$glibcpp_pch_comp\" = xno; then\n+    enable_pch=no\n+  fi\n+\n+  AC_MSG_CHECKING([for enabled PCH])\n+  AC_MSG_RESULT([$enable_pch])\n+\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_pch\" = yes)\n+  if test \"$enable_pch\" = yes; then\n \tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n \tglibcpp_PCHFLAGS=\"\""}, {"sha": "305b69e1bde4f243388c39353744700856c24204", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -1383,32 +1383,60 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n dnl\n dnl Check to see if building and using a C++ precompiled header can be done.\n dnl\n-dnl GLIBCPP_CHECK_PCH\n+dnl GLIBCPP_ENABLE_PCH\n dnl\n-dnl If it looks like it may work, flip bits on in include/Makefile.am\n+dnl --enable-pch=yes\n+dnl default, this shows intent to use stdc++.h.gch If it looks like it\n+dnl may work, after some light-hearted attempts to puzzle out compiler\n+dnl support, flip bits on in include/Makefile.am\n dnl\n-AC_DEFUN(GLIBCPP_CHECK_PCH, [\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+dnl --disable-pch\n+dnl turns off attempts to use or build stdc++.h.gch.\n+dnl\n+AC_DEFUN(GLIBCPP_ENABLE_PCH, [dnl\n+define([GLIBCPP_ENABLE_PCH_DEFAULT], ifelse($1,,, $1))dnl\n+AC_ARG_ENABLE(pch,\n+changequote(<<, >>)dnl\n+<<  --enable-pch         build pre-compiled libstdc++ includes [default=>>GLIBCPP_ENABLE_PCH_DEFAULT],\n+changequote([, ])dnl\n+[case \"${enableval}\" in\n+ yes) enable_pch=yes ;;\n+ no)  enable_pch=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable PCH]) ;;\n+ esac],\n+enable_pch=GLIBCPP_ENABLE_PCH_DEFAULT)dnl\n \n-  AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n-  if test x${glibcpp_pch_comp+set} != xset; then\n-    AC_CACHE_VAL(glibcpp_pch_comp, [\n-      AC_LANG_SAVE\n-      AC_LANG_CPLUSPLUS\n-      AC_TRY_COMPILE([#include <math.h>\n+  if test x$enable_pch = xyes; then\n+    ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+    ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+    CXXFLAGS='-Werror -Winvalid-pch -Wno-deprecated -x c++-header'\n+\n+    AC_MSG_CHECKING([for compiler that seems to compile .gch files])\n+    if test x${glibcpp_pch_comp+set} != xset; then\n+      AC_CACHE_VAL(glibcpp_pch_comp, [\n+        AC_LANG_SAVE\n+        AC_LANG_CPLUSPLUS\n+        AC_TRY_COMPILE([#include <math.h>\n \t\t     ],\n                      [ $1(0);],\n                      [glibcpp_pch_comp=yes], [glibcpp_pch_comp=no])\n-      AC_LANG_RESTORE\n-    ])\n+        AC_LANG_RESTORE\n+      ])\n+    fi\n+    AC_MSG_RESULT([$glibcpp_pch_comp])\n+\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   fi\n-  AC_MSG_RESULT([$glibcpp_pch_comp])\n \n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$glibcpp_pch_comp\" = yes)\n-  if test \"$glibcpp_pch_comp\" = yes; then\n+  if test x\"$enable_pch\" = xyes && test x\"$glibcpp_pch_comp\" = xno; then\n+    enable_pch=no\n+  fi\n+\n+  AC_MSG_CHECKING([for enabled PCH])\n+  AC_MSG_RESULT([$enable_pch])\n+\n+  AM_CONDITIONAL(GLIBCPP_BUILD_PCH, test \"$enable_pch\" = yes)\n+  if test \"$enable_pch\" = yes; then\n \tglibcpp_PCHFLAGS=\"-include bits/stdc++.h\"\n   else\n \tglibcpp_PCHFLAGS=\"\""}, {"sha": "09d492668e47dce399f30f4fc1821027e9896f65", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1385, "deletions": 1360, "changes": 2745, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=44f0760eaea8e0c2842b438248c52b380d128571"}, {"sha": "cec8e3606a791a83706e57bf8e2584a522343586", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -45,21 +45,22 @@ AM_PROG_LIBTOOL\n AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n \n-# Check for c++ or library specific bits that don't require linking.\n+# Check for support bits and g++ features that don't require linking.\n GLIBCPP_CHECK_GNU_MAKE\n #GLIBCPP_CHECK_COMPILER_VERSION\n-GLIBCPP_CHECK_PCH\n+GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n+GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n+GLIBCPP_ENABLE_PCH([yes])\n \n-# Enable all the variable C++ stuff.  C_MBCHAR must come early.\n+# Enable all the variable C++ runtime options.  \n+# NB: C_MBCHAR must come early.\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_CLOCALE\n GLIBCPP_ENABLE_CHEADERS([$c_model])\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_C99([yes])\n GLIBCPP_ENABLE_LONG_LONG([yes])\n GLIBCPP_ENABLE_THREADS\n-GLIBCPP_ENABLE_SJLJ_EXCEPTIONS\n-GLIBCPP_ENABLE_LIBUNWIND_EXCEPTIONS\n GLIBCPP_ENABLE_CONCEPT_CHECKS\n GLIBCPP_ENABLE_CXX_FLAGS\n GLIBCPP_ENABLE_DEBUG([no])"}, {"sha": "0f0ca2a31796fed8565c2318d7cb69418a665091", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -261,6 +261,18 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n         people will volunteer to do other 'style' options.\n      </p>\n  </dd>\n+\n+ <dt><code>--enable-pch  </code></dt>\n+ <dd><p>In 3.4 and later, tries to turn on the generation of\n+        stdc++.h.gch, a pre-compiled file including all the standard\n+        C++ includes. If enabled (as by default), and the compiler\n+        seems capable of passing the simple sanity checks thrown at\n+        it, try to build stdc++.h.gch as part of the make process. \n+        In addition, this generated file is used later on (by appending <code>\n+        --include bits/stdc++.h </code> to CXXFLAGS) when running the\n+        testsuite.\n+     </p>\n+ </dd>\n </dl>\n <p>Return <a href=\"#top\">to the top of the page</a> or\n    <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>."}, {"sha": "34d8a3f76a34f08d77df87359a488bb23c4483b6", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -118,7 +118,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n+baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "ff621b164c9df794e96591b05d5aa7435c2d3734", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -119,7 +119,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n+baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "b1eaa7f075ff238a858113d777c60bfdedf10e6e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -116,7 +116,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n+baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "74159f1a31bfdb4ceee72494bcac36ce4054721b", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -120,7 +120,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n+baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}, {"sha": "5604055c306395bac8cdc9beda5942649e538608", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f0760eaea8e0c2842b438248c52b380d128571/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=44f0760eaea8e0c2842b438248c52b380d128571", "patch": "@@ -114,7 +114,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n+baseline_dir = @baseline_dir@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@"}]}