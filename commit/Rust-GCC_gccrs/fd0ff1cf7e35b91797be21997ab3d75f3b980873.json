{"sha": "fd0ff1cf7e35b91797be21997ab3d75f3b980873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwZmYxY2Y3ZTM1YjkxNzk3YmUyMTk5N2FiM2Q3NWYzYjk4MDg3Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-21T10:30:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T10:30:24Z"}, "message": "einfo.ads, einfo.adb: Add handling of predicates.\n\n2010-10-21  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb: Add handling of predicates.\n\tRework handling of invariants.\n\t* exp_ch3.adb, exp_ch4.adb, exp_util.adb, sem_ch6.adb: Minor changes to\n\thanding of invariants.\n\t* par-prag.adb: Add dummy entry for pragma Predicate\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add processing for\n\tPredicate aspects.\n\t* sem_prag.adb: Add implementation of pragma Predicate.\n\t* snames.ads-tmpl: Add entries for pragma Predicate.\n\n2010-10-21  Robert Dewar  <dewar@adacore.com>\n\n\t* elists.adb: Minor reformatting.\n\nFrom-SVN: r165763", "tree": {"sha": "82e1e9c9a50526d9512c41952beb3d596c952bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e1e9c9a50526d9512c41952beb3d596c952bb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd0ff1cf7e35b91797be21997ab3d75f3b980873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0ff1cf7e35b91797be21997ab3d75f3b980873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0ff1cf7e35b91797be21997ab3d75f3b980873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0ff1cf7e35b91797be21997ab3d75f3b980873/comments", "author": null, "committer": null, "parents": [{"sha": "04cbd48e9ed3fbd4c66f7ebc829276b5b83932a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cbd48e9ed3fbd4c66f7ebc829276b5b83932a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cbd48e9ed3fbd4c66f7ebc829276b5b83932a5"}], "stats": {"total": 360, "additions": 301, "deletions": 59}, "files": [{"sha": "db583435e46d8c3e38b51c87774394292e5137df", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -1,3 +1,19 @@\n+2010-10-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: Add handling of predicates.\n+\tRework handling of invariants.\n+\t* exp_ch3.adb, exp_ch4.adb, exp_util.adb, sem_ch6.adb: Minor changes to\n+\thanding of invariants.\n+\t* par-prag.adb: Add dummy entry for pragma Predicate\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add processing for\n+\tPredicate aspects.\n+\t* sem_prag.adb: Add implementation of pragma Predicate.\n+\t* snames.ads-tmpl: Add entries for pragma Predicate.\n+\n+2010-10-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* elists.adb: Minor reformatting.\n+\n 2010-10-21  Geert Bosch  <bosch@adacore.com>\n \n \t* urealp.adb (UR_Write): Write hexadecimal constants with exponent 1 as"}, {"sha": "ca6bbf0e4d2db12136f674d562be20e91eb10999", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 136, "deletions": 20, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -230,7 +230,7 @@ package body Einfo is\n    --    Extra_Formals                   Node28\n    --    Underlying_Record_View          Node28\n \n-   --    Invariant_Procedure             Node29\n+   --    Subprograms_For_Type            Node29\n \n    ---------------------------------------------\n    -- Usage of Flags in Defining Entity Nodes --\n@@ -513,8 +513,8 @@ package body Einfo is\n    --    OK_To_Rename                    Flag247\n    --    Has_Inheritable_Invariants      Flag248\n    --    OK_To_Reference                 Flag249\n+   --    Has_Predicates                  Flag250\n \n-   --    (unused)                        Flag250\n    --    (unused)                        Flag251\n    --    (unused)                        Flag252\n    --    (unused)                        Flag253\n@@ -1287,7 +1287,7 @@ package body Einfo is\n \n    function Has_Invariants (Id : E) return B is\n    begin\n-      pragma Assert (Is_Type (Id));\n+      pragma Assert (Is_Type (Id) or else Ekind (Id) = E_Procedure);\n       return Flag232 (Id);\n    end Has_Invariants;\n \n@@ -1409,6 +1409,12 @@ package body Einfo is\n       return Flag212 (Id);\n    end Has_Pragma_Unreferenced_Objects;\n \n+   function Has_Predicates (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Type (Id) or else Ekind (Id) = E_Procedure);\n+      return Flag250 (Id);\n+   end Has_Predicates;\n+\n    function Has_Primitive_Operations (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -1566,12 +1572,6 @@ package body Einfo is\n       return Elist25 (Id);\n    end Interfaces;\n \n-   function Invariant_Procedure (Id : E) return N is\n-   begin\n-      pragma Assert (Is_Type (Id));\n-      return Node29 (Id);\n-   end Invariant_Procedure;\n-\n    function In_Package_Body (Id : E) return B is\n    begin\n       return Flag48 (Id);\n@@ -2651,6 +2651,12 @@ package body Einfo is\n       return Node15 (Id);\n    end String_Literal_Low_Bound;\n \n+   function Subprograms_For_Type (Id : E) return E is\n+   begin\n+      pragma Assert (Is_Type (Id) or else Is_Subprogram (Id));\n+      return Node29 (Id);\n+   end Subprograms_For_Type;\n+\n    function Suppress_Elaboration_Warnings (Id : E) return B is\n    begin\n       return Flag148 (Id);\n@@ -3722,7 +3728,9 @@ package body Einfo is\n \n    procedure Set_Has_Invariants (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Is_Type (Id));\n+      pragma Assert (Is_Type (Id)\n+        or else Ekind (Id) = E_Procedure\n+        or else Ekind (Id) = E_Void);\n       Set_Flag232 (Id, V);\n    end Set_Has_Invariants;\n \n@@ -3853,6 +3861,14 @@ package body Einfo is\n       Set_Flag212 (Id, V);\n    end Set_Has_Pragma_Unreferenced_Objects;\n \n+   procedure Set_Has_Predicates (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id)\n+        or else Ekind (Id) = E_Procedure\n+        or else Ekind (Id) = E_Void);\n+      Set_Flag250 (Id, V);\n+   end Set_Has_Predicates;\n+\n    procedure Set_Has_Primitive_Operations (Id : E; V : B := True) is\n    begin\n       pragma Assert (Id = Base_Type (Id));\n@@ -4012,12 +4028,6 @@ package body Einfo is\n       Set_Elist25 (Id, V);\n    end Set_Interfaces;\n \n-   procedure Set_Invariant_Procedure (Id : E; V : N) is\n-   begin\n-      pragma Assert (Is_Type (Id));\n-      Set_Node29 (Id, V);\n-   end Set_Invariant_Procedure;\n-\n    procedure Set_In_Package_Body (Id : E; V : B := True) is\n    begin\n       Set_Flag48 (Id, V);\n@@ -5146,6 +5156,12 @@ package body Einfo is\n       Set_Node15 (Id, V);\n    end Set_String_Literal_Low_Bound;\n \n+   procedure Set_Subprograms_For_Type (Id : E; V : E) is\n+   begin\n+      pragma Assert (Is_Type (Id) or else Is_Subprogram (Id));\n+      Set_Node29 (Id, V);\n+   end Set_Subprograms_For_Type;\n+\n    procedure Set_Suppress_Elaboration_Warnings (Id : E; V : B := True) is\n    begin\n       Set_Flag148 (Id, V);\n@@ -6129,6 +6145,33 @@ package body Einfo is\n       end if;\n    end Implementation_Base_Type;\n \n+   -------------------------\n+   -- Invariant_Procedure --\n+   -------------------------\n+\n+   function Invariant_Procedure (Id : E) return E is\n+      S : Entity_Id;\n+\n+   begin\n+      pragma Assert (Is_Type (Id) and then Has_Invariants (Id));\n+\n+      if No (Subprograms_For_Type (Id)) then\n+         return Empty;\n+\n+      else\n+         S := Subprograms_For_Type (Id);\n+         while Present (S) loop\n+            if Has_Invariants (S) then\n+               return S;\n+            else\n+               S := Subprograms_For_Type (S);\n+            end if;\n+         end loop;\n+\n+         return Empty;\n+      end if;\n+   end Invariant_Procedure;\n+\n    ---------------------\n    -- Is_Boolean_Type --\n    ---------------------\n@@ -6222,6 +6265,33 @@ package body Einfo is\n         Ekind (Id) = E_Generic_Package;\n    end Is_Package_Or_Generic_Package;\n \n+   -------------------------\n+   -- Predicate_Procedure --\n+   -------------------------\n+\n+   function Predicate_Procedure (Id : E) return E is\n+      S : Entity_Id;\n+\n+   begin\n+      pragma Assert (Is_Type (Id) and then Has_Predicates (Id));\n+\n+      if No (Subprograms_For_Type (Id)) then\n+         return Empty;\n+\n+      else\n+         S := Subprograms_For_Type (Id);\n+         while Present (S) loop\n+            if Has_Predicates (S) then\n+               return S;\n+            else\n+               S := Subprograms_For_Type (S);\n+            end if;\n+         end loop;\n+\n+         return Empty;\n+      end if;\n+   end Predicate_Procedure;\n+\n    ---------------\n    -- Is_Prival --\n    ---------------\n@@ -6766,6 +6836,54 @@ package body Einfo is\n       end case;\n    end Set_Component_Alignment;\n \n+   -----------------------------\n+   -- Set_Invariant_Procedure --\n+   -----------------------------\n+\n+   procedure Set_Invariant_Procedure (Id : E; V : E) is\n+      S : Entity_Id;\n+\n+   begin\n+      pragma Assert (Is_Type (Id) and then Has_Invariants (Id));\n+\n+      S := Subprograms_For_Type (Id);\n+      Set_Subprograms_For_Type (Id, V);\n+\n+      while Present (S) loop\n+         if Has_Invariants (S) then\n+            raise Program_Error;\n+         else\n+            S := Subprograms_For_Type (S);\n+         end if;\n+      end loop;\n+\n+      Set_Subprograms_For_Type (Id, V);\n+   end Set_Invariant_Procedure;\n+\n+   -----------------------------\n+   -- Set_Predicate_Procedure --\n+   -----------------------------\n+\n+   procedure Set_Predicate_Procedure (Id : E; V : E) is\n+      S : Entity_Id;\n+\n+   begin\n+      pragma Assert (Is_Type (Id) and then Has_Predicates (Id));\n+\n+      S := Subprograms_For_Type (Id);\n+      Set_Subprograms_For_Type (Id, V);\n+\n+      while Present (S) loop\n+         if Has_Predicates (S) then\n+            raise Program_Error;\n+         else\n+            S := Subprograms_For_Type (S);\n+         end if;\n+      end loop;\n+\n+      Set_Subprograms_For_Type (Id, V);\n+   end Set_Predicate_Procedure;\n+\n    -----------------\n    -- Size_Clause --\n    -----------------\n@@ -7063,6 +7181,7 @@ package body Einfo is\n       W (\"Has_Pragma_Unmodified\",           Flag233 (Id));\n       W (\"Has_Pragma_Unreferenced\",         Flag180 (Id));\n       W (\"Has_Pragma_Unreferenced_Objects\", Flag212 (Id));\n+      W (\"Has_Predicates\",                  Flag250 (Id));\n       W (\"Has_Primitive_Operations\",        Flag120 (Id));\n       W (\"Has_Private_Declaration\",         Flag155 (Id));\n       W (\"Has_Qualified_Name\",              Flag161 (Id));\n@@ -8246,9 +8365,6 @@ package body Einfo is\n    procedure Write_Field28_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when Private_Kind =>\n-            Write_Str (\"Invariant_Procedure\");\n-\n          when E_Procedure | E_Function | E_Entry           =>\n             Write_Str (\"Extra_Formals\");\n \n@@ -8264,7 +8380,7 @@ package body Einfo is\n    begin\n       case Ekind (Id) is\n          when Type_Kind =>\n-            Write_Str (\"Invariant_Procedure\");\n+            Write_Str (\"Subprograms_For_Type\");\n \n          when others                                       =>\n             Write_Str (\"Field29??\");"}, {"sha": "6eadc354066ee51b8eecb54814fd9b0df1ce9db9", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 74, "deletions": 16, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -1507,14 +1507,16 @@ package Einfo is\n --       Interrupt_Handler applies.\n \n --    Has_Invariants (Flag232)\n---       Present in all type entities. Set True in private types if an\n---       Invariant or Invariant'Class aspect applies to the type, or if the\n---       type inherits one or more Invariant'Class aspects. Also set in the\n---       corresponding full type. Note: if this flag is set True, then usually\n---       the Invariant_Procedure field is set once the type is frozen, however\n---       this may not be true in some error situations. Note that it might be\n---       the full type which has inheritable invariants, and then the flag will\n---       also be set in the private type.\n+--       Present in all type entities and in subprogram entities. Set True in\n+--       private types if an Invariant or Invariant'Class aspect applies to the\n+--       type, or if the type inherits one or more Invariant'Class aspects.\n+--       Also set in the corresponding full type. Note: if this flag is set\n+--       True, then usually the Invariant_Procedure attribute is set once the\n+--       type is frozen, however this may not be true in some error situations.\n+--       Note that it might be the full type which has inheritable invariants,\n+--       and then the flag will also be set in the private type. Also set in\n+--       the invariant procedure entity, to distinguish it among entries in the\n+--       Subprograms_For_Type.\n \n --    Has_Inheritable_Invariants (Flag248)\n --       Present in all type entities. Set True in private types from which one\n@@ -1671,6 +1673,13 @@ package Einfo is\n --       (but unlike the case with pragma Unreferenced, it is ok to reference\n --       such an object and no warning is generated.\n \n+--    Has_Predicates (Flag250)\n+--       Present in type and subtype entities and in subprogram entities. Set\n+--       if a pragma Predicate or Predicate aspect applies to the type, or if\n+--       it inherits a Predicate aspect from its parent or progenitor types.\n+--       Also set in the predicate procedure entity, to distinguish it among\n+--       entries in the Subprograms_For_Type.\n+\n --    Has_Primitive_Operations (Flag120) [base type only]\n --       Present in all type entities. Set if at least one primitive operation\n --       is defined for the type.\n@@ -1900,15 +1909,18 @@ package Einfo is\n --       External_Name of the imported Java field (which is generally needed,\n --       because Java names are case sensitive).\n \n---    Invariant_Procedure (Node29)\n+--    Invariant_Procedure (synthesized)\n --       Present in types and subtypes. Set for private types if one or more\n --       Invariant, or Invariant'Class, or inherited Invariant'Class aspects\n --       apply to the type. Points to the entity for a procedure which checks\n --       the invariant. This invariant procedure takes a single argument of the\n --       given type, and returns if the invariant holds, or raises exception\n --       Assertion_Error with an appropriate message if it does not hold. This\n---       field is present but always empty for private subtypes. This field is\n---       also set for the corresponding full type.\n+--       attribute is present but always empty for private subtypes. This\n+--       attribute is also set for the corresponding full type.\n+--\n+--       Note: the reason this is marked as a synthesized attribute is that the\n+--       way this is stored is as an element of the Subprograms_For_Type field.\n \n --    In_Use (Flag8)\n --       Present in packages and types. Set when analyzing a use clause for\n@@ -3264,6 +3276,17 @@ package Einfo is\n --       Direct_Primitive_Operations of its CRT; otherwise returns No_Elist.\n --       For all the other types returns the Direct_Primitive_Operations.\n \n+--    Predicate_Procedure (synthesized)\n+--       Present in all types. Set for types for which (Has_Predicates is True)\n+--       and for which a predicate procedure has been built that tests that the\n+--       specified predicates are True. Contains the entity for the procedure\n+--       which takes a single argument of the given type, and returns if the\n+--       predicate holds, or raises exception Assertion_Error with an exception\n+--       message if it does not hold.\n+--\n+--       Note: the reason this is marked as a synthesized attribute is that the\n+--       way this is stored is as an element of the Subprograms_For_Type field.\n+\n --    Prival (Node17)\n --       Present in private components of protected types. Refers to the entity\n --       of the component renaming declaration generated inside protected\n@@ -3632,6 +3655,16 @@ package Einfo is\n --       the low bound of the applicable index constraint if there is one,\n --       or a copy of the low bound of the index base type if not.\n \n+--    Subprograms_For_Type (Node29)\n+--       Present in all type entities, and in subprogram entities. This is used\n+--       to hold a list of subprogram entities for subprograms associated with\n+--       the type, linked through the Suprogram_List field of the subprogram\n+--       entity. Basically this is a way of multiplexing the single field to\n+--       hold more than one entity (since we ran out of space in some type\n+--       entities). This is currently used for Invariant_Procedure and also\n+--       for Predicate_Procedure, and clients will always use the latter two\n+--       names to access entries in this list.\n+\n --    Suppress_Elaboration_Warnings (Flag148)\n --       Present in all entities, can be set only for subprogram entities and\n --       for variables. If this flag is set then Sem_Elab will not generate\n@@ -4733,7 +4766,7 @@ package Einfo is\n    --    Alignment                           (Uint14)\n    --    Related_Expression                  (Node24)\n    --    Current_Use_Clause                  (Node27)\n-   --    Invariant_Procedure                 (Node29)\n+   --    Subprograms_For_Type                (Node29)\n \n    --    Depends_On_Private                  (Flag14)\n    --    Discard_Names                       (Flag88)\n@@ -4752,6 +4785,7 @@ package Einfo is\n    --    Has_Object_Size_Clause              (Flag172)\n    --    Has_Pragma_Preelab_Init             (Flag221)\n    --    Has_Pragma_Unreferenced_Objects     (Flag212)\n+   --    Has_Predicates                      (Flag250)\n    --    Has_Primitive_Operations            (Flag120)  (base type only)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Specified_Layout                (Flag100)  (base type only)\n@@ -4796,7 +4830,9 @@ package Einfo is\n    --    Base_Type                           (synth)\n    --    Has_Private_Ancestor                (synth)\n    --    Implementation_Base_Type            (synth)\n+   --    Invariant_Procedure                 (synth)\n    --    Is_Access_Protected_Subprogram_Type (synth)\n+   --    Predicate_Procedure                 (synth)\n    --    Root_Type                           (synth)\n    --    Size_Clause                         (synth)\n \n@@ -5095,6 +5131,7 @@ package Einfo is\n    --    Overridden_Operation                (Node26)\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)\n    --    Extra_Formals                       (Node28)\n+   --    Subprograms_For_Type                (Node29)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Elaboration_Entity_Required         (Flag174)\n    --    Default_Expressions_Processed       (Flag108)\n@@ -5103,10 +5140,12 @@ package Einfo is\n    --    Discard_Names                       (Flag88)\n    --    Has_Completion                      (Flag26)\n    --    Has_Controlling_Result              (Flag98)\n+   --    Has_Invariants                      (Flag232)\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Missing_Return                  (Flag142)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Postconditions                  (Flag240)\n+   --    Has_Predicates                      (Flag250)\n    --    Has_Recursive_Call                  (Flag143)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n@@ -5236,7 +5275,10 @@ package Einfo is\n    --    First_Entity                        (Node17)\n    --    Alias                               (Node18)\n    --    Last_Entity                         (Node20)\n+   --    Subprograms_For_Type                (Node29)\n+   --    Has_Invariants                      (Flag232)\n    --    Has_Postconditions                  (Flag240)\n+   --    Has_Predicates                      (Flag250)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Pure                             (Flag44)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n@@ -5364,9 +5406,11 @@ package Einfo is\n    --    Delay_Subprogram_Descriptors        (Flag50)\n    --    Discard_Names                       (Flag88)\n    --    Has_Completion                      (Flag26)\n+   --    Has_Invariants                      (Flag232)\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Postconditions                  (Flag240)\n+   --    Has_Predicates                      (Flag250)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Asynchronous                     (Flag81)\n@@ -5965,6 +6009,7 @@ package Einfo is\n    function Has_Pragma_Unmodified               (Id : E) return B;\n    function Has_Pragma_Unreferenced             (Id : E) return B;\n    function Has_Pragma_Unreferenced_Objects     (Id : E) return B;\n+   function Has_Predicates                      (Id : E) return B;\n    function Has_Primitive_Operations            (Id : E) return B;\n    function Has_Qualified_Name                  (Id : E) return B;\n    function Has_RACW                            (Id : E) return B;\n@@ -5996,7 +6041,6 @@ package Einfo is\n    function Interface_Alias                     (Id : E) return E;\n    function Interfaces                          (Id : E) return L;\n    function Interface_Name                      (Id : E) return N;\n-   function Invariant_Procedure                 (Id : E) return N;\n    function Is_AST_Entry                        (Id : E) return B;\n    function Is_Abstract_Subprogram              (Id : E) return B;\n    function Is_Abstract_Type                    (Id : E) return B;\n@@ -6179,6 +6223,7 @@ package Einfo is\n    function Strict_Alignment                    (Id : E) return B;\n    function String_Literal_Length               (Id : E) return U;\n    function String_Literal_Low_Bound            (Id : E) return N;\n+   function Subprograms_For_Type                (Id : E) return E;\n    function Suppress_Elaboration_Warnings       (Id : E) return B;\n    function Suppress_Init_Proc                  (Id : E) return B;\n    function Suppress_Style_Checks               (Id : E) return B;\n@@ -6531,6 +6576,7 @@ package Einfo is\n    procedure Set_Has_Pragma_Unmodified           (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced_Objects (Id : E; V : B := True);\n+   procedure Set_Has_Predicates                  (Id : E; V : B := True);\n    procedure Set_Has_Primitive_Operations        (Id : E; V : B := True);\n    procedure Set_Has_Private_Declaration         (Id : E; V : B := True);\n    procedure Set_Has_Qualified_Name              (Id : E; V : B := True);\n@@ -6563,7 +6609,6 @@ package Einfo is\n    procedure Set_Inner_Instances                 (Id : E; V : L);\n    procedure Set_Interface_Alias                 (Id : E; V : E);\n    procedure Set_Interface_Name                  (Id : E; V : N);\n-   procedure Set_Invariant_Procedure             (Id : E; V : N);\n    procedure Set_Is_AST_Entry                    (Id : E; V : B := True);\n    procedure Set_Is_Abstract_Subprogram          (Id : E; V : B := True);\n    procedure Set_Is_Abstract_Type                (Id : E; V : B := True);\n@@ -6753,6 +6798,7 @@ package Einfo is\n    procedure Set_Strict_Alignment                (Id : E; V : B := True);\n    procedure Set_String_Literal_Length           (Id : E; V : U);\n    procedure Set_String_Literal_Low_Bound        (Id : E; V : N);\n+   procedure Set_Subprograms_For_Type            (Id : E; V : E);\n    procedure Set_Suppress_Elaboration_Warnings   (Id : E; V : B := True);\n    procedure Set_Suppress_Init_Proc              (Id : E; V : B := True);\n    procedure Set_Suppress_Style_Checks           (Id : E; V : B := True);\n@@ -6773,6 +6819,16 @@ package Einfo is\n    procedure Set_Was_Hidden                      (Id : E; V : B := True);\n    procedure Set_Wrapped_Entity                  (Id : E; V : E);\n \n+   ---------------------------------------------------\n+   -- Access to Subprograms in Subprograms_For_Type --\n+   ---------------------------------------------------\n+\n+   function Invariant_Procedure                 (Id : E) return N;\n+   function Predicate_Procedure                 (Id : E) return N;\n+\n+   procedure Set_Invariant_Procedure            (Id : E; V : E);\n+   procedure Set_Predicate_Procedure            (Id : E; V : E);\n+\n    -----------------------------------\n    -- Field Initialization Routines --\n    -----------------------------------\n@@ -7210,6 +7266,7 @@ package Einfo is\n    pragma Inline (Has_Pragma_Unmodified);\n    pragma Inline (Has_Pragma_Unreferenced);\n    pragma Inline (Has_Pragma_Unreferenced_Objects);\n+   pragma Inline (Has_Predicates);\n    pragma Inline (Has_Primitive_Operations);\n    pragma Inline (Has_Private_Declaration);\n    pragma Inline (Has_Qualified_Name);\n@@ -7243,7 +7300,6 @@ package Einfo is\n    pragma Inline (Inner_Instances);\n    pragma Inline (Interface_Alias);\n    pragma Inline (Interface_Name);\n-   pragma Inline (Invariant_Procedure);\n    pragma Inline (Is_AST_Entry);\n    pragma Inline (Is_Abstract_Subprogram);\n    pragma Inline (Is_Abstract_Type);\n@@ -7475,6 +7531,7 @@ package Einfo is\n    pragma Inline (Strict_Alignment);\n    pragma Inline (String_Literal_Length);\n    pragma Inline (String_Literal_Low_Bound);\n+   pragma Inline (Subprograms_For_Type);\n    pragma Inline (Suppress_Elaboration_Warnings);\n    pragma Inline (Suppress_Init_Proc);\n    pragma Inline (Suppress_Style_Checks);\n@@ -7647,6 +7704,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Unmodified);\n    pragma Inline (Set_Has_Pragma_Unreferenced);\n    pragma Inline (Set_Has_Pragma_Unreferenced_Objects);\n+   pragma Inline (Set_Has_Predicates);\n    pragma Inline (Set_Has_Primitive_Operations);\n    pragma Inline (Set_Has_Private_Declaration);\n    pragma Inline (Set_Has_Qualified_Name);\n@@ -7680,7 +7738,6 @@ package Einfo is\n    pragma Inline (Set_Inner_Instances);\n    pragma Inline (Set_Interface_Alias);\n    pragma Inline (Set_Interface_Name);\n-   pragma Inline (Set_Invariant_Procedure);\n    pragma Inline (Set_Is_AST_Entry);\n    pragma Inline (Set_Is_Abstract_Subprogram);\n    pragma Inline (Set_Is_Abstract_Type);\n@@ -7868,6 +7925,7 @@ package Einfo is\n    pragma Inline (Set_Strict_Alignment);\n    pragma Inline (Set_String_Literal_Length);\n    pragma Inline (Set_String_Literal_Low_Bound);\n+   pragma Inline (Set_Subprograms_For_Type);\n    pragma Inline (Set_Suppress_Elaboration_Warnings);\n    pragma Inline (Set_Suppress_Init_Proc);\n    pragma Inline (Set_Suppress_Style_Checks);"}, {"sha": "58beb00d5721e49291b659e3dbd81812bc188517", "filename": "gcc/ada/elists.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Felists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Felists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -389,7 +389,6 @@ package body Elists is\n       --  Case of removing only element in the list\n \n       if Elmts.Table (Nxt).Next in Elist_Range then\n-\n          pragma Assert (Nxt = Elmt);\n \n          Elists.Table (List).First := No_Elmt;"}, {"sha": "0cb2b5bb517e44de50656fbdb9a5711a2d7e6055", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -4576,7 +4576,7 @@ package body Exp_Ch3 is\n          --  to clobber the object with an invalid value since if the exception\n          --  is raised, then the object will go out of scope.\n \n-         if Is_Private_Type (Typ)\n+         if Has_Invariants (Typ)\n            and then Present (Invariant_Procedure (Typ))\n          then\n             Insert_After (N,"}, {"sha": "d62703de19099cfe59879fffa80a7035bd37756d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -8278,7 +8278,8 @@ package body Exp_Ch4 is\n       --  Note: the Comes_From_Source check, and then the resetting of this\n       --  flag prevents what would otherwise be an infinite recursion.\n \n-      if Present (Invariant_Procedure (Target_Type))\n+      if Has_Invariants (Target_Type)\n+        and then Present (Invariant_Procedure (Target_Type))\n         and then Comes_From_Source (N)\n       then\n          Set_Comes_From_Source (N, False);"}, {"sha": "0caf92dc99b693d7d93adf1fc80c9d32e77bd02c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -3998,6 +3998,9 @@ package body Exp_Util is\n       Typ : constant Entity_Id  := Etype (Expr);\n \n    begin\n+      pragma Assert\n+        (Has_Invariants (Typ) and then Present (Invariant_Procedure (Typ)));\n+\n       if Check_Enabled (Name_Invariant)\n            or else\n          Check_Enabled (Name_Assertion)"}, {"sha": "f678c0d20f5a8fe22ec1b4803c92319702f4fc7c", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -1205,6 +1205,7 @@ begin\n            Pragma_Persistent_BSS                |\n            Pragma_Postcondition                 |\n            Pragma_Precondition                  |\n+           Pragma_Predicate                     |\n            Pragma_Preelaborate                  |\n            Pragma_Preelaborate_05               |\n            Pragma_Priority                      |"}, {"sha": "ce0cb5b53137f0be52d32ccda248876cb260717f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -635,7 +635,7 @@ package body Sem_Ch13 is\n       Ent    : Node_Id;\n \n       Ins_Node : Node_Id := N;\n-      --  Insert pragmas (other than Pre/Post) after this node\n+      --  Insert pragmas (except Pre/Post/Invariant/Predicate) after this node\n \n       --  The general processing involves building an attribute definition\n       --  clause or a pragma node that corresponds to the access type. Then\n@@ -1008,13 +1008,14 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end;\n \n-               --  Invariant aspect generates an Invariant pragma with a first\n-               --  argument that is the entity, and the second argument is the\n-               --  expression. This is inserted right after the declaration, to\n-               --  get the required pragma placement. The processing for the\n-               --  pragma takes care of the required delay.\n+               --  Invariant and Predicate aspects generate a corresponding\n+               --  pragma with a first argument that is the entity, and the\n+               --  second argument is the expression. This is inserted right\n+               --  after the declaration, to get the required pragma placement.\n+               --  The pragma processing takes care of the required delay.\n \n-               when Aspect_Invariant =>\n+               when Aspect_Invariant |\n+                    Aspect_Predicate =>\n \n                   --  Construct the pragma\n \n@@ -1024,7 +1025,7 @@ package body Sem_Ch13 is\n                         New_List (Ent, Relocate_Node (Expr)),\n                       Class_Present                => Class_Present (Aspect),\n                       Pragma_Identifier            =>\n-                        Make_Identifier (Sloc (Id), Name_Invariant));\n+                        Make_Identifier (Sloc (Id), Chars (Id)));\n \n                   --  Add message unless exception messages are suppressed\n \n@@ -1040,18 +1041,13 @@ package body Sem_Ch13 is\n \n                   Set_From_Aspect_Specification (Aitem, True);\n \n-                  --  For Invariant case, insert immediately after the entity\n-                  --  declaration. We do not have to worry about delay issues\n-                  --  since the pragma processing takes care of this.\n+                  --  For Invariant and Predicate cases, insert immediately\n+                  --  after the entity declaration. We do not have to worry\n+                  --  about delay issues since the pragma processing takes\n+                  --  care of this.\n \n                   Insert_After (N, Aitem);\n                   goto Continue;\n-\n-               --  Aspects currently unimplemented\n-\n-               when Aspect_Predicate =>\n-                  Error_Msg_N (\"aspect& not implemented\", Identifier (Aspect));\n-                  goto Continue;\n             end case;\n \n             Set_From_Aspect_Specification (Aitem, True);\n@@ -3685,9 +3681,11 @@ package body Sem_Ch13 is\n \n          --  Build procedure declaration\n \n+         pragma Assert (Has_Invariants (Typ));\n          SId :=\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Typ), \"Invariant\"));\n+         Set_Has_Invariants (SId);\n          Set_Invariant_Procedure (Typ, SId);\n \n          Spec :="}, {"sha": "fe2e1973797334ff084aa25472fce464ea8a5761", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -9099,7 +9099,9 @@ package body Sem_Ch6 is\n \n                --  Add invariant call if returning type with invariants\n \n-               if Present (Invariant_Procedure (Etype (Rent))) then\n+               if Has_Invariants (Etype (Rent))\n+                 and then Present (Invariant_Procedure (Etype (Rent)))\n+               then\n                   Append_To (Plist,\n                     Make_Invariant_Call (New_Occurrence_Of (Rent, Loc)));\n                end if;\n@@ -9121,6 +9123,7 @@ package body Sem_Ch6 is\n             Formal := First_Formal (Designator);\n             while Present (Formal) loop\n                if Ekind (Formal) /= E_In_Parameter\n+                 and then Has_Invariants (Etype (Formal))\n                  and then Present (Invariant_Procedure (Etype (Formal)))\n                then\n                   Append_To (Plist,"}, {"sha": "64388a897c770870de45197dcaa8fd4deb97c587", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -11166,6 +11166,51 @@ package body Sem_Prag is\n             end if;\n          end Precondition;\n \n+         ---------------\n+         -- Predicate --\n+         ---------------\n+\n+         --  pragma Predicate\n+         --    ([Entity =>]    type_LOCAL_NAME,\n+         --     [Check  =>]    EXPRESSION\n+         --     [,[Message =>] String_Expression]);\n+\n+         when Pragma_Predicate => Predicate : declare\n+            Type_Id : Node_Id;\n+            Typ     : Entity_Id;\n+\n+            Discard : Boolean;\n+            pragma Unreferenced (Discard);\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_At_Least_N_Arguments (2);\n+            Check_At_Most_N_Arguments (3);\n+            Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Optional_Identifier (Arg2, Name_Check);\n+\n+            if Arg_Count = 3 then\n+               Check_Optional_Identifier (Arg3, Name_Message);\n+               Check_Arg_Is_Static_Expression (Arg3, Standard_String);\n+            end if;\n+\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Type_Id := Get_Pragma_Arg (Arg1);\n+            Find_Type (Type_Id);\n+            Typ := Entity (Type_Id);\n+\n+            if Typ = Any_Type then\n+               return;\n+            end if;\n+\n+            --  The remaining processing is simply to link the pragma on to\n+            --  the rep item chain, for processing when the type is frozen.\n+            --  This is accomplished by a call to Rep_Item_Too_Late.\n+\n+            Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n+         end Predicate;\n+\n          ------------------\n          -- Preelaborate --\n          ------------------\n@@ -13919,6 +13964,7 @@ package body Sem_Prag is\n       Pragma_Persistent_BSS                =>  0,\n       Pragma_Postcondition                 => -1,\n       Pragma_Precondition                  => -1,\n+      Pragma_Predicate                     => -1,\n       Pragma_Preelaborate                  => -1,\n       Pragma_Preelaborate_05               => -1,\n       Pragma_Priority                      => -1,"}, {"sha": "29cc172c20b6f32fb950c2bec946c28925c34c3f", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0ff1cf7e35b91797be21997ab3d75f3b980873/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=fd0ff1cf7e35b91797be21997ab3d75f3b980873", "patch": "@@ -139,7 +139,6 @@ package Snames is\n \n    Name_Post                           : constant Name_Id := N + $;\n    Name_Pre                            : constant Name_Id := N + $;\n-   Name_Predicate                      : constant Name_Id := N + $;\n \n    --  Some special names used by the expander. Note that the lower case u's\n    --  at the start of these names get translated to extra underscores. These\n@@ -507,6 +506,7 @@ package Snames is\n    Name_Passive                        : constant Name_Id := N + $; -- GNAT\n    Name_Postcondition                  : constant Name_Id := N + $; -- GNAT\n    Name_Precondition                   : constant Name_Id := N + $; -- GNAT\n+   Name_Predicate                      : constant Name_Id := N + $; -- GNAT\n    Name_Preelaborable_Initialization   : constant Name_Id := N + $; -- Ada 05\n    Name_Preelaborate                   : constant Name_Id := N + $;\n    Name_Preelaborate_05                : constant Name_Id := N + $; -- GNAT\n@@ -1596,6 +1596,7 @@ package Snames is\n       Pragma_Passive,\n       Pragma_Postcondition,\n       Pragma_Precondition,\n+      Pragma_Predicate,\n       Pragma_Preelaborable_Initialization,\n       Pragma_Preelaborate,\n       Pragma_Preelaborate_05,"}]}