{"sha": "9f4e09a89a4879d1a39f6055b61afb8f335e7604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0ZTA5YTg5YTQ4NzlkMWEzOWY2MDU1YjYxYWZiOGYzMzVlNzYwNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-30T19:04:05Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-30T19:04:05Z"}, "message": "PR c++/89119 - ICE with value-initialization in template.\n\n\t* pt.c (tsubst_copy_and_build): Handle RANGE_EXPR.\n\n\t* g++.dg/cpp0x/initlist-value3.C: New test.\n\nFrom-SVN: r268400", "tree": {"sha": "9243a3f49aee226a9f591e35d8706ad0fe209f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9243a3f49aee226a9f591e35d8706ad0fe209f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f4e09a89a4879d1a39f6055b61afb8f335e7604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4e09a89a4879d1a39f6055b61afb8f335e7604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4e09a89a4879d1a39f6055b61afb8f335e7604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4e09a89a4879d1a39f6055b61afb8f335e7604/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7341a03ab85827e2fe36c26e6bfad622bdfd218b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7341a03ab85827e2fe36c26e6bfad622bdfd218b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7341a03ab85827e2fe36c26e6bfad622bdfd218b"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "4b90951885897ed79457794d09df3674dd3343b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f4e09a89a4879d1a39f6055b61afb8f335e7604", "patch": "@@ -1,3 +1,8 @@\n+2019-01-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89119 - ICE with value-initialization in template.\n+\t* pt.c (tsubst_copy_and_build): Handle RANGE_EXPR.\n+\n 2019-01-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86943 - wrong code converting lambda to function pointer."}, {"sha": "f92fa1a181340782cd05c8e767baac8b77f85786", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9f4e09a89a4879d1a39f6055b61afb8f335e7604", "patch": "@@ -19412,6 +19412,11 @@ tsubst_copy_and_build (tree t,\n     case REQUIRES_EXPR:\n       RETURN (tsubst_requires_expr (t, args, complain, in_decl));\n \n+    case RANGE_EXPR:\n+      /* No need to substitute further, a RANGE_EXPR will always be built\n+\t with constant operands.  */\n+      RETURN (t);\n+\n     case NON_LVALUE_EXPR:\n     case VIEW_CONVERT_EXPR:\n       if (location_wrapper_p (t))"}, {"sha": "8bb5f40d65a8cedf72d95deb26ec7118c1d4378d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f4e09a89a4879d1a39f6055b61afb8f335e7604", "patch": "@@ -1,3 +1,8 @@\n+2019-01-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89119 - ICE with value-initialization in template.\n+\t* g++.dg/cpp0x/initlist-value3.C: New test.\n+\n 2019-01-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-extract-schar-1.c: New test."}, {"sha": "25ac104d24dde1e2c36abddef2e1126a969730df", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-value3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4e09a89a4879d1a39f6055b61afb8f335e7604/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-value3.C?ref=9f4e09a89a4879d1a39f6055b61afb8f335e7604", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/89119\n+// { dg-do compile { target c++11 } }\n+\n+struct S { int a[4]; };\n+\n+template<int N>\n+struct R { int a[N]; };\n+\n+template <typename T>\n+void\n+fn ()\n+{\n+  constexpr auto s = S();\n+  constexpr auto s2 = S{};\n+  constexpr auto r = R<4>();\n+  constexpr auto r2 = R<4>{};\n+}\n+\n+void\n+foo ()\n+{\n+  fn<int>();\n+}"}]}