{"sha": "4e5baf7e679a890c22804d16b99fc6794486825b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1YmFmN2U2NzlhODkwYzIyODA0ZDE2Yjk5ZmM2Nzk0NDg2ODI1Yg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-23T13:14:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-23T13:14:49Z"}, "message": "Merge #520\n\n520: Add support for struct definitions to be within a block r=philberty a=philberty\n\nWe still have bugs handling unit-structs but this allows for Tuple Structs\r\nand normal named field structs to be declared within a block and referenced\r\nlexically. This allows rust statements to follow the correct grammar.\r\n\r\nFixes #519\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f08c021b2e536fa1c2677ddbedf9bd432033d47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f08c021b2e536fa1c2677ddbedf9bd432033d47d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e5baf7e679a890c22804d16b99fc6794486825b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0zPJCRBK7hj4Ov3rIwAAxKcIAD85zBFg7SVUuREioo26A8me\nfvsHnX6Uqiqm70l702fqJhqw0+ZpBtxe/DkmJHPEMA7Z0svWdEIFj+w26+ILAQow\nm0ZFk7JENjZ1MQzVH0DNXx4if5f3UpjTfK7x/gnFqyw8xZNOCcdVKYqOxmP8Qo76\ng1B6R3jjez0qmtW6QoIzWpoSwJ9c6X7XIj7ULPPXatRyenYd4zFqQU47s7JR7R+h\no2ro7N0oRoSZNI8HO7iASZSZCh5/RZ0lKGxN1am5U4FZtXFOBKqENxUBLJsQTgGt\nv9rx72F3ILndp+cvg0yOHUx3fJPV/FClMr8sjLr0gm26CVsfDjIczkbTloC3rpc=\n=RiQL\n-----END PGP SIGNATURE-----\n", "payload": "tree f08c021b2e536fa1c2677ddbedf9bd432033d47d\nparent ce545f5318b3ff494caed8108f746ad045dfeab6\nparent 012401ab1c98ea6fa578bd27b018037ec55464a2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624454089 +0000\ncommitter GitHub <noreply@github.com> 1624454089 +0000\n\nMerge #520\n\n520: Add support for struct definitions to be within a block r=philberty a=philberty\n\nWe still have bugs handling unit-structs but this allows for Tuple Structs\r\nand normal named field structs to be declared within a block and referenced\r\nlexically. This allows rust statements to follow the correct grammar.\r\n\r\nFixes #519\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5baf7e679a890c22804d16b99fc6794486825b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5baf7e679a890c22804d16b99fc6794486825b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5baf7e679a890c22804d16b99fc6794486825b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce545f5318b3ff494caed8108f746ad045dfeab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce545f5318b3ff494caed8108f746ad045dfeab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce545f5318b3ff494caed8108f746ad045dfeab6"}, {"sha": "012401ab1c98ea6fa578bd27b018037ec55464a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012401ab1c98ea6fa578bd27b018037ec55464a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/012401ab1c98ea6fa578bd27b018037ec55464a2"}], "stats": {"total": 361, "additions": 347, "deletions": 14}, "files": [{"sha": "73f6f22c59a7ec0c7cd6b89aa5af738776f01e64", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -35,27 +35,21 @@ class CompileStmt : public HIRCompileBase\n   {\n     CompileStmt compiler (ctx);\n     stmt->accept_vis (compiler);\n-    rust_assert (compiler.ok);\n     return compiler.translated;\n   }\n \n   void visit (HIR::ExprStmtWithBlock &stmt) override\n   {\n-    ok = true;\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n   void visit (HIR::ExprStmtWithoutBlock &stmt) override\n   {\n-    ok = true;\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n   void visit (HIR::LetStmt &stmt) override\n   {\n-    // marks that the statement has been looked at\n-    ok = true;\n-\n     // nothing to do\n     if (!stmt.has_init_expr ())\n       return;\n@@ -96,11 +90,8 @@ class CompileStmt : public HIRCompileBase\n   }\n \n private:\n-  CompileStmt (Context *ctx)\n-    : HIRCompileBase (ctx), ok (false), translated (nullptr)\n-  {}\n+  CompileStmt (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n \n-  bool ok;\n   Bexpression *translated;\n };\n "}, {"sha": "c495932497e28316e16cf3212581a20537d5052a", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -44,8 +44,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  virtual ~ASTLoweringStmt () {}\n-\n   void visit (AST::ExprStmtWithBlock &stmt) override\n   {\n     HIR::ExprWithBlock *expr\n@@ -110,6 +108,128 @@ class ASTLoweringStmt : public ASTLoweringBase\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n+  void visit (AST::TupleStruct &struct_decl) override\n+  {\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (struct_decl.has_generics ())\n+      {\n+\tgeneric_params\n+\t  = lower_generic_params (struct_decl.get_generic_params ());\n+      }\n+\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<HIR::TupleField> fields;\n+    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n+      HIR::Visibility vis = HIR::Visibility::create_public ();\n+      HIR::Type *type\n+\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+\n+      auto crate_num = mappings->get_current_crate ();\n+      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     mappings->get_next_localdef_id (\n+\t\t\t\t       crate_num));\n+\n+      // FIXME\n+      // AST::TupleField is missing Location info\n+      Location field_locus;\n+      HIR::TupleField translated_field (mapping,\n+\t\t\t\t\tstd::unique_ptr<HIR::Type> (type), vis,\n+\t\t\t\t\tfield_locus, field.get_outer_attrs ());\n+      fields.push_back (std::move (translated_field));\n+      return true;\n+    });\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::TupleStruct (mapping, std::move (fields),\n+\t\t\t\t       struct_decl.get_identifier (),\n+\t\t\t\t       std::move (generic_params),\n+\t\t\t\t       std::move (where_clause), vis,\n+\t\t\t\t       struct_decl.get_outer_attrs (),\n+\t\t\t\t       struct_decl.get_locus ());\n+\n+    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       struct_decl.get_locus ());\n+  }\n+\n+  void visit (AST::StructStruct &struct_decl) override\n+  {\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (struct_decl.has_generics ())\n+      {\n+\tgeneric_params\n+\t  = lower_generic_params (struct_decl.get_generic_params ());\n+      }\n+\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    bool is_unit = struct_decl.is_unit_struct ();\n+    std::vector<HIR::StructField> fields;\n+    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+      HIR::Visibility vis = HIR::Visibility::create_public ();\n+      HIR::Type *type\n+\t= ASTLoweringType::translate (field.get_field_type ().get ());\n+\n+      auto crate_num = mappings->get_current_crate ();\n+      Analysis::NodeMapping mapping (crate_num, field.get_node_id (),\n+\t\t\t\t     mappings->get_next_hir_id (crate_num),\n+\t\t\t\t     mappings->get_next_localdef_id (\n+\t\t\t\t       crate_num));\n+\n+      // FIXME\n+      // AST::StructField is missing Location info\n+      Location field_locus;\n+      HIR::StructField translated_field (mapping, field.get_field_name (),\n+\t\t\t\t\t std::unique_ptr<HIR::Type> (type), vis,\n+\t\t\t\t\t field_locus, field.get_outer_attrs ());\n+      fields.push_back (std::move (translated_field));\n+      return true;\n+    });\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, struct_decl.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::StructStruct (mapping, std::move (fields),\n+\t\t\t\t\tstruct_decl.get_identifier (),\n+\t\t\t\t\tstd::move (generic_params),\n+\t\t\t\t\tstd::move (where_clause), is_unit, vis,\n+\t\t\t\t\tstruct_decl.get_outer_attrs (),\n+\t\t\t\t\tstruct_decl.get_locus ());\n+\n+    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       struct_decl.get_locus ());\n+  }\n+\n+  void visit (AST::EmptyStmt &empty) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, empty.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::EmptyStmt (mapping, empty.get_locus ());\n+\n+    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       empty.get_locus ());\n+  }\n+\n private:\n   ASTLoweringStmt () : translated (nullptr), terminated (false) {}\n "}, {"sha": "3fd1cfa841f1f9133fb739de6cf05c11af45c2be", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -39,8 +39,6 @@ class ResolveStmt : public ResolverBase\n     stmt->accept_vis (resolver);\n   };\n \n-  ~ResolveStmt () {}\n-\n   void visit (AST::ExprStmtWithBlock &stmt) override\n   {\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n@@ -67,6 +65,70 @@ class ResolveStmt : public ResolverBase\n       ResolveType::go (stmt.get_type ().get (), stmt.get_node_id ());\n   }\n \n+  void visit (AST::TupleStruct &struct_decl) override\n+  {\n+    auto path = CanonicalPath (struct_decl.get_identifier ());\n+    resolver->get_type_scope ().insert (\n+      path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (struct_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    NodeId scope_node_id = struct_decl.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (struct_decl.has_generics ())\n+      {\n+\tfor (auto &generic : struct_decl.get_generic_params ())\n+\t  {\n+\t    ResolveGenericParam::go (generic.get (),\n+\t\t\t\t     struct_decl.get_node_id ());\n+\t  }\n+      }\n+\n+    struct_decl.iterate ([&] (AST::TupleField &field) mutable -> bool {\n+      ResolveType::go (field.get_field_type ().get (),\n+\t\t       struct_decl.get_node_id ());\n+      return true;\n+    });\n+\n+    resolver->get_type_scope ().pop ();\n+  }\n+\n+  void visit (AST::StructStruct &struct_decl) override\n+  {\n+    auto path = CanonicalPath (struct_decl.get_identifier ());\n+    resolver->get_type_scope ().insert (\n+      path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (struct_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+\n+    NodeId scope_node_id = struct_decl.get_node_id ();\n+    resolver->get_type_scope ().push (scope_node_id);\n+\n+    if (struct_decl.has_generics ())\n+      {\n+\tfor (auto &generic : struct_decl.get_generic_params ())\n+\t  {\n+\t    ResolveGenericParam::go (generic.get (),\n+\t\t\t\t     struct_decl.get_node_id ());\n+\t  }\n+      }\n+\n+    struct_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+      ResolveType::go (field.get_field_type ().get (),\n+\t\t       struct_decl.get_node_id ());\n+      return true;\n+    });\n+\n+    resolver->get_type_scope ().pop ();\n+  }\n+\n private:\n   ResolveStmt (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "0e55df839723693f02369408e881f899c5e06326", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -49,6 +49,12 @@ class TypeCheckStmt : public TypeCheckBase\n     infered = TypeCheckExpr::Resolve (stmt.get_expr (), inside_loop);\n   }\n \n+  void visit (HIR::EmptyStmt &stmt) override\n+  {\n+    infered\n+      = TyTy::TupleType::get_unit_type (stmt.get_mappings ().get_hirid ());\n+  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     infered = new TyTy::TupleType (stmt.get_mappings ().get_hirid ());\n@@ -107,6 +113,109 @@ class TypeCheckStmt : public TypeCheckBase\n     rust_assert (ok);\n   }\n \n+  void visit (HIR::TupleStruct &struct_decl) override\n+  {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (struct_decl.has_generics ())\n+      {\n+\tfor (auto &generic_param : struct_decl.get_generic_params ())\n+\t  {\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    std::vector<TyTy::StructFieldType *> fields;\n+\n+    size_t idx = 0;\n+    struct_decl.iterate ([&] (HIR::TupleField &field) mutable -> bool {\n+      TyTy::BaseType *field_type\n+\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n+      TyTy::StructFieldType *ty_field\n+\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t     std::to_string (idx), field_type);\n+      fields.push_back (ty_field);\n+      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n+      idx++;\n+      return true;\n+    });\n+\n+    TyTy::BaseType *type\n+      = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n+\t\t\t   mappings->get_next_hir_id (),\n+\t\t\t   struct_decl.get_identifier (), true,\n+\t\t\t   std::move (fields), std::move (substitutions));\n+\n+    context->insert_type (struct_decl.get_mappings (), type);\n+    infered = type;\n+  }\n+\n+  void visit (HIR::StructStruct &struct_decl) override\n+  {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (struct_decl.has_generics ())\n+      {\n+\tfor (auto &generic_param : struct_decl.get_generic_params ())\n+\t  {\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    std::vector<TyTy::StructFieldType *> fields;\n+    struct_decl.iterate ([&] (HIR::StructField &field) mutable -> bool {\n+      TyTy::BaseType *field_type\n+\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n+      TyTy::StructFieldType *ty_field\n+\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t     field.get_field_name (), field_type);\n+      fields.push_back (ty_field);\n+      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n+      return true;\n+    });\n+\n+    TyTy::BaseType *type\n+      = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n+\t\t\t   mappings->get_next_hir_id (),\n+\t\t\t   struct_decl.get_identifier (), false,\n+\t\t\t   std::move (fields), std::move (substitutions));\n+\n+    context->insert_type (struct_decl.get_mappings (), type);\n+    infered = type;\n+  }\n+\n private:\n   TypeCheckStmt (bool inside_loop)\n     : TypeCheckBase (), infered (nullptr), inside_loop (inside_loop)"}, {"sha": "fcf4d8622e8cef9d0323cd7b289a68924e3548b9", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -342,6 +342,8 @@ class TupleType : public BaseType\n     : BaseType (ref, ty_ref, TypeKind::TUPLE, refs), fields (fields)\n   {}\n \n+  static TupleType *get_unit_type (HirId ref) { return new TupleType (ref); }\n+\n   void accept_vis (TyVisitor &vis) override;\n \n   bool is_unit () const override { return this->fields.empty (); }"}, {"sha": "7fbceb039743438641433363f5d504736281d886", "filename": "gcc/testsuite/rust/compile/torture/struct_init_10.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_10.rs?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    struct foo {\n+        a: i32,\n+        b: f32,\n+    };\n+\n+    let a;\n+    a = foo { a: 123, b: 456f32 };\n+}"}, {"sha": "16a2f0725664013ef3aa67e4818d5056d1f0ed77", "filename": "gcc/testsuite/rust/compile/torture/struct_init_11.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_11.rs?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -0,0 +1,34 @@\n+pub fn main() {\n+    struct O(i32);\n+    struct T(i32, i32);\n+    struct M(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32);\n+\n+    // tuples\n+    let z = ();\n+    let o = (0,);\n+    let f = o.0;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let t = (0, 1);\n+    let s = t.1;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let m = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let l = m.10;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    // tuple structs\n+    let so = O(0);\n+    let sf = so.0;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let st = T(0, 1);\n+    let fs = st.1;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let sm = M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let sl = sm.10;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    z\n+}"}, {"sha": "2daa078d5b37f31ebd9ef030a4543a54d745b120", "filename": "gcc/testsuite/rust/compile/torture/struct_init_9.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5baf7e679a890c22804d16b99fc6794486825b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_9.rs?ref=4e5baf7e679a890c22804d16b99fc6794486825b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    struct foo(i32, f32);\n+\n+    let a;\n+    a = foo(123, 456f32);\n+}"}]}