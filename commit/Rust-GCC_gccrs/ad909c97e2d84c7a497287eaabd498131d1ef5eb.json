{"sha": "ad909c97e2d84c7a497287eaabd498131d1ef5eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5MDljOTdlMmQ4NGM3YTQ5NzI4N2VhYWJkNDk4MTMxZDFlZjVlYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-04T04:34:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-04T04:34:03Z"}, "message": "re PR c++/40619 ([c++0x] ICE on repeated decltype expression in auto functions)\n\n\tPR c++/40619\n\t* cp-tree.h (struct lang_decl_parm): New.\n\t(struct lang_decl): Add it.\n\t(LANG_DECL_PARM_CHECK): New.\n\t(DECL_PARM_INDEX): New.\n\t* decl2.c (parm_index): Remove.\n\t* lex.c (retrofit_lang_decl): Handle parms.\n\t(cxx_dup_lang_specific_decl): Likewise.\n\t* mangle.c (write_expression): Adjust.\n\t* tree.c (cp_tree_equal): Adjust.\n\t(decl_linkage): Only check DECL_COMDAT for functions and variables.\n\t* parser.c (cp_parser_parameter_declaration_list): Set\n\tDECL_PARM_INDEX.\n\t* pt.c (iterative_hash_template_arg): Hash it.\n\nFrom-SVN: r149223", "tree": {"sha": "8ef0778c524d062435bf88b94bc898d7b8a51acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef0778c524d062435bf88b94bc898d7b8a51acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad909c97e2d84c7a497287eaabd498131d1ef5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad909c97e2d84c7a497287eaabd498131d1ef5eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad909c97e2d84c7a497287eaabd498131d1ef5eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad909c97e2d84c7a497287eaabd498131d1ef5eb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "caf271d8026c2f9a3ade32a8e670fa3be6e3892b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf271d8026c2f9a3ade32a8e670fa3be6e3892b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf271d8026c2f9a3ade32a8e670fa3be6e3892b"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "9cc2aabc0dbb9e6ca9e8f92d8c8971685bc2d4eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -1,3 +1,20 @@\n+2009-07-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40619\n+\t* cp-tree.h (struct lang_decl_parm): New.\n+\t(struct lang_decl): Add it.\n+\t(LANG_DECL_PARM_CHECK): New.\n+\t(DECL_PARM_INDEX): New.\n+\t* decl2.c (parm_index): Remove.\n+\t* lex.c (retrofit_lang_decl): Handle parms.\n+\t(cxx_dup_lang_specific_decl): Likewise.\n+\t* mangle.c (write_expression): Adjust.\n+\t* tree.c (cp_tree_equal): Adjust.\n+\t(decl_linkage): Only check DECL_COMDAT for functions and variables.\n+\t* parser.c (cp_parser_parameter_declaration_list): Set\n+\tDECL_PARM_INDEX.\n+\t* pt.c (iterative_hash_template_arg): Hash it.\n+\n 2009-07-03  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (struct lang_decl): Overhaul."}, {"sha": "4cf5b14ca35b649b205834679f132316540c7f8d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -1675,6 +1675,13 @@ struct GTY(()) lang_decl_ns {\n   struct cp_binding_level *level;\n };\n \n+/* DECL_LANG_SPECIFIC for parameters.  */\n+\n+struct GTY(()) lang_decl_parm {\n+  struct lang_decl_base base;\n+  int index;\n+};\n+\n /* DECL_LANG_SPECIFIC for all types.  It would be nice to just make this a\n    union rather than a struct containing a union as its only field, but\n    tree.h declares it as a struct.  */\n@@ -1685,6 +1692,7 @@ struct GTY(()) lang_decl {\n     struct lang_decl_min GTY((tag (\"0\"))) min;\n     struct lang_decl_fn GTY ((tag (\"1\"))) fn;\n     struct lang_decl_ns GTY((tag (\"2\"))) ns;\n+    struct lang_decl_parm GTY((tag (\"3\"))) parm;\n   } u;\n };\n \n@@ -1715,6 +1723,12 @@ struct GTY(()) lang_decl {\n      lang_check_failed (__FILE__, __LINE__, __FUNCTION__);\t\t\\\n    &lt->u.ns; })\n \n+#define LANG_DECL_PARM_CHECK(NODE) __extension__\t\t\\\n+({ struct lang_decl *lt = DECL_LANG_SPECIFIC (NODE);\t\t\\\n+  if (TREE_CODE (NODE) != PARM_DECL)\t\t\t\t\\\n+    lang_check_failed (__FILE__, __LINE__, __FUNCTION__);\t\\\n+  &lt->u.parm; })\n+\n #define LANG_DECL_U2_CHECK(NODE, TF) __extension__\t\t\\\n ({  struct lang_decl *lt = DECL_LANG_SPECIFIC (NODE);\t\t\\\n     if (lt->u.base.u2sel != TF)\t\t\t\t\t\\\n@@ -1732,6 +1746,9 @@ struct GTY(()) lang_decl {\n #define LANG_DECL_NS_CHECK(NODE) \\\n   (&DECL_LANG_SPECIFIC (NODE)->u.ns)\n \n+#define LANG_DECL_PARM_CHECK(NODE) \\\n+  (&DECL_LANG_SPECIFIC (NODE)->u.parm)\n+\n #define LANG_DECL_U2_CHECK(NODE, TF) \\\n   (&DECL_LANG_SPECIFIC (NODE)->u.min.u2)\n \n@@ -1847,6 +1864,11 @@ struct GTY(()) lang_decl {\n /* Discriminator for name mangling.  */\n #define DECL_DISCRIMINATOR(NODE) (LANG_DECL_U2_CHECK (NODE, 1)->discriminator)\n \n+/* The index of a user-declared parameter in its function, starting at 1.\n+   All artificial parameters will have index 0.  */\n+#define DECL_PARM_INDEX(NODE) \\\n+  (LANG_DECL_PARM_CHECK (NODE)->index)\n+\n /* Nonzero if the VTT parm has been added to NODE.  */\n #define DECL_HAS_VTT_PARM_P(NODE) \\\n   (LANG_DECL_FN_CHECK (NODE)->has_vtt_parm_p)"}, {"sha": "b3b567e0f6ce4c20ef9ba46d6e2c00737593be49", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -3910,27 +3910,4 @@ mark_used (tree decl)\n   processing_template_decl = saved_processing_template_decl;\n }\n \n-/* Given function PARM_DECL PARM, return its index in the function's list\n-   of parameters, beginning with 1.  */\n-\n-int\n-parm_index (tree parm)\n-{\n-  int index;\n-  tree arg;\n-\n-  for (index = 1, arg = DECL_ARGUMENTS (DECL_CONTEXT (parm));\n-       arg;\n-       ++index, arg = TREE_CHAIN (arg))\n-    {\n-      if (DECL_NAME (parm) == DECL_NAME (arg))\n-\tbreak;\n-      if (DECL_ARTIFICIAL (arg))\n-\t--index;\n-    }\n-\n-  gcc_assert (arg);\n-  return index;\n-}\n-\n #include \"gt-cp-decl2.h\""}, {"sha": "5eb182d3caf21b5d63b63f2f75e3ddfb192df2e2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -538,6 +538,8 @@ retrofit_lang_decl (tree t)\n     sel = 1, size = sizeof (struct lang_decl_fn);\n   else if (TREE_CODE (t) == NAMESPACE_DECL)\n     sel = 2, size = sizeof (struct lang_decl_ns);\n+  else if (TREE_CODE (t) == PARM_DECL)\n+    sel = 3, size = sizeof (struct lang_decl_parm);\n   else if (LANG_DECL_HAS_MIN (t))\n     sel = 0, size = sizeof (struct lang_decl_min);\n   else\n@@ -577,6 +579,8 @@ cxx_dup_lang_specific_decl (tree node)\n     size = sizeof (struct lang_decl_fn);\n   else if (TREE_CODE (node) == NAMESPACE_DECL)\n     size = sizeof (struct lang_decl_ns);\n+  else if (TREE_CODE (node) == PARM_DECL)\n+    size = sizeof (struct lang_decl_parm);\n   else if (LANG_DECL_HAS_MIN (node))\n     size = sizeof (struct lang_decl_min);\n   else"}, {"sha": "c49439d0e0760d36093f3d54666cb477fff4b538", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -2199,7 +2199,8 @@ write_expression (tree expr)\n   else if (code == PARM_DECL)\n     {\n       /* A function parameter used in a late-specified return type.  */\n-      int index = parm_index (expr);\n+      int index = DECL_PARM_INDEX (expr);\n+      gcc_assert (index >= 1);\n       write_string (\"fp\");\n       if (index > 1)\n \twrite_unsigned_number (index - 2);"}, {"sha": "f3122bc76fd9f6a70d2149491a77b72d4c2e81f4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -14111,6 +14111,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n   tree parameters = NULL_TREE;\n   tree *tail = &parameters; \n   bool saved_in_unbraced_linkage_specification_p;\n+  int index = 0;\n \n   /* Assume all will go well.  */\n   *is_error = false;\n@@ -14162,6 +14163,12 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n       if (DECL_NAME (decl))\n \tdecl = pushdecl (decl);\n \n+      if (decl != error_mark_node)\n+\t{\n+\t  retrofit_lang_decl (decl);\n+\t  DECL_PARM_INDEX (decl) = ++index;\n+\t}\n+\n       /* Add the new parameter to the list.  */\n       *tail = build_tree_list (parameter->default_argument, decl);\n       tail = &TREE_CHAIN (*tail);"}, {"sha": "527fe04f5a8ac4254603cafa78b8712b17ff67f1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -1488,9 +1488,7 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       }\n \n     case PARM_DECL:\n-      /* I tried hashing parm_index as well, but in some cases we get\n-\t called too soon for that to work, so just hash the type and let\n-\t lookup check that the index matches.  */\n+      val = iterative_hash_object (DECL_PARM_INDEX (arg), val);\n       return iterative_hash_template_arg (TREE_TYPE (arg), val);\n \n     case TARGET_EXPR:"}, {"sha": "644e53cef9fd7b1abe8a9bc8c7355b144ab3b4b1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -1997,7 +1997,7 @@ cp_tree_equal (tree t1, tree t2)\n       /* For comparing uses of parameters in late-specified return types\n \t with an out-of-class definition of the function.  */\n       if (same_type_p (TREE_TYPE (t1), TREE_TYPE (t2))\n-\t  && parm_index (t1) == parm_index (t2))\n+\t  && DECL_PARM_INDEX (t1) == DECL_PARM_INDEX (t2))\n \treturn true;\n       else\n \treturn false;\n@@ -2723,7 +2723,8 @@ decl_linkage (tree decl)\n      template instantiations have internal linkage (in the object\n      file), but the symbols should still be treated as having external\n      linkage from the point of view of the language.  */\n-  if (TREE_CODE (decl) != TYPE_DECL && DECL_LANG_SPECIFIC (decl)\n+  if ((TREE_CODE (decl) == FUNCTION_DECL\n+       || TREE_CODE (decl) == VAR_DECL)\n       && DECL_COMDAT (decl))\n     return lk_external;\n "}, {"sha": "bc9263894e8d9db6fca8497a1d9f637ac381b412", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -1,3 +1,8 @@\n+2009-07-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40619\n+\t* g++.dg/cpp0x/auto16.C: New.\n+\n 2009-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/40638"}, {"sha": "1b4ae8f82b2bceefe5b6e5d648c096d6fd1e7271", "filename": "gcc/testsuite/g++.dg/cpp0x/auto16.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad909c97e2d84c7a497287eaabd498131d1ef5eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto16.C?ref=ad909c97e2d84c7a497287eaabd498131d1ef5eb", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/40619\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename U> struct X {};\n+\n+template<typename T> auto f(T t) -> X<decltype(t+1)> {}\n+template<typename T> auto g(T t) -> X<decltype(t+1)> {}"}]}