{"sha": "7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "node_id": "C_kwDOANBUbNoAKDdlZTBmYTEwMGYwZjI4ZDdiODgyMzdkNTIwMTMxZTA3YjdiNDlmMGE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-17T00:17:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-17T00:17:20Z"}, "message": "Daily bump.", "tree": {"sha": "7fe0367477b5ff0a4d6b9d4b42a11fdfdba67727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe0367477b5ff0a4d6b9d4b42a11fdfdba67727"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/comments", "author": null, "committer": null, "parents": [{"sha": "eaddc87b51117c5f2346089999907c2de5780d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaddc87b51117c5f2346089999907c2de5780d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaddc87b51117c5f2346089999907c2de5780d37"}], "stats": {"total": 163, "additions": 162, "deletions": 1}, "files": [{"sha": "6e09a1a3b79d32ab4c1727263a364c32e08589e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1,3 +1,19 @@\n+2022-09-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/106910\n+\t* config/i386/i386-builtins.cc\n+\t(ix86_builtin_vectorized_function): Modernized with\n+\tcorresponding expanders.\n+\t* config/i386/sse.md (lrint<mode><sseintvecmodelower>2): New\n+\texpander.\n+\t(floor<mode>2): Ditto.\n+\t(lfloor<mode><sseintvecmodelower>2): Ditto.\n+\t(ceil<mode>2): Ditto.\n+\t(lceil<mode><sseintvecmodelower>2): Ditto.\n+\t(btrunc<mode>2): Ditto.\n+\t(lround<mode><sseintvecmodelower>2): Ditto.\n+\t(exp2<mode>2): Ditto.\n+\n 2022-09-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ginclude/float.h (INFINITY): Define only if"}, {"sha": "c5a8cbf7428c2c28622bb5101a63477e3f24ac11", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1 +1 @@\n-20220916\n+20220917"}, {"sha": "811052815cf213d8dbed4059467fc56572fc7615", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1,3 +1,19 @@\n+2022-09-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92505\n+\t* constexpr.cc (cxx_eval_component_reference): Check non_constant_p\n+\tsooner.  In C++14 or later, reject a DECL_MUTABLE_P member access\n+\tonly if CONSTRUCTOR_MUTABLE_POISION is also set.\n+\n+2022-09-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106858\n+\t* parser.cc (cp_parser_omp_var_list_no_open): Pass the\n+\tinitial token location down.\n+\t* semantics.cc (finish_omp_clauses): Check\n+\tinvalid_nonstatic_memfn_p.\n+\t* typeck.cc (invalid_nonstatic_memfn_p): Handle null TREE_TYPE.\n+\n 2022-09-15  Richard Biener  <rguenther@suse.de>\n \n \t* decl.cc (cxx_init_decl_processing): Inline last"}, {"sha": "a40fdd2d7db62081d33e7bc1b18d5ce348fed427", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1,3 +1,18 @@\n+2022-09-16  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* gcc.dg/tree-prof/indir-call-prof-2.c: Fix dg-final-use-autofdo.\n+\n+2022-09-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92505\n+\t* g++.dg/cpp0x/constexpr-mutable3.C: New test.\n+\t* g++.dg/cpp1y/constexpr-mutable1.C: New test.\n+\n+2022-09-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/106858\n+\t* g++.dg/gomp/map-3.C: New test.\n+\n 2022-09-15  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/106857"}, {"sha": "d07fc9c67030c3f2953e26753698530658e0da52", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1,3 +1,15 @@\n+2022-09-16  Thomas Neumann  <tneumann@users.sourceforge.net>\n+\n+\t* unwind-dw2-fde.c (release_registered_frames): Cleanup at shutdown.\n+\t(__register_frame_info_table_bases): Use btree in atomic fast path.\n+\t(__deregister_frame_info_bases): Likewise.\n+\t(_Unwind_Find_FDE): Likewise.\n+\t(base_from_object): Make parameter const.\n+\t(classify_object_over_fdes): Add query-only mode.\n+\t(get_pc_range): Compute PC range for lookup.\n+\t* unwind-dw2-fde.h (last_fde): Make parameter const.\n+\t* unwind-dw2-btree.h: New file.\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* config.host: Remove hppa."}, {"sha": "a55293e79567a2e745557cc273d3599680ad4dad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee0fa100f0f28d7b88237d520131e07b7b49f0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ee0fa100f0f28d7b88237d520131e07b7b49f0a", "patch": "@@ -1,3 +1,105 @@\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106953\n+\t* include/backward/auto_ptr.h [!_GLIBCXX_HOSTED]: Do not define\n+\tshared_ptr members.\n+\t* include/bits/alloc_traits.h [!_GLIBCXX_HOSTED]: Do not declare\n+\tstd::allocator_traits<std::allocator<T>> specializations for\n+\tfreestanding.\n+\t* include/bits/memoryfwd.h [!_GLIBCXX_HOSTED] (allocator): Do\n+\tnot declare for freestanding.\n+\t* include/bits/stl_algo.h [!_GLIBCXX_HOSTED] (stable_partition):\n+\tDo not define for freestanding.\n+\t[!_GLIBCXX_HOSTED] (merge, stable_sort): Do not use temporary\n+\tbuffers for freestanding.\n+\t* include/bits/stl_algobase.h [!_GLIBCXX_HOSTED]: Do not declare\n+\tstreambuf iterators and overloaded algorithms using them.\n+\t* include/bits/stl_uninitialized.h [!_GLIBCXX_HOSTED]: Do not\n+\tdefine specialized overloads for std::allocator.\n+\t* include/bits/unique_ptr.h [!_GLIBCXX_HOSTED] (make_unique)\n+\t(make_unique_for_overwrite, operator<<): Do not define for\n+\tfreestanding.\n+\t* include/c_global/cstdlib [!_GLIBCXX_HOSTED] (_Exit): Declare.\n+\tUse _GLIBCXX_NOTHROW instead of throw().\n+\t* include/debug/assertions.h [!_GLIBCXX_HOSTED]: Ignore\n+\t_GLIBCXX_DEBUG for freestanding.\n+\t* include/debug/debug.h [!_GLIBCXX_DEBUG]: Likewise.\n+\t* include/std/bit [!_GLIBCXX_HOSTED]: Do not use the custom\n+\t__int_traits if <ext/numeric_traits.h> is available.\n+\t* include/std/functional [!_GLIBCXX_HOSTED]: Do not include\n+\theaders that aren't valid for freestanding.\n+\t(boyer_moore_searcher, boyer_moore_horspool_searcher): Do not\n+\tdefine for freestanding.\n+\t* include/std/iterator [!_GLIBCXX_HOSTED]: Do not include\n+\theaders that aren't valid for freestanding.\n+\t* include/std/memory [!_GLIBCXX_HOSTED]: Likewise.\n+\t* include/std/ranges [!_GLIBCXX_HOSTED] (istream_view): Do not\n+\tdefine for freestanding.\n+\t(views::__detail::__is_basic_string_view) [!_GLIBCXX_HOSTED]:\n+\tDo not define partial specialization for freestanding.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h (__alloc_swap)\n+\t(__shrink_to_fit_aux): Move here, from ...\n+\t* include/bits/allocator.h: ... here.\n+\t* include/ext/alloc_traits.h: Do not include allocator.h.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algo.h: Include <bits/stl_algobase.h>.\n+\t* include/bits/stl_tempbuf.h: Include headers for __try and\n+\t__catch macros, std::pair, and __gnu_cxx::__numeric_traits.\n+\t* include/bits/stream_iterator.h: Include <iosfwd> and headers\n+\tfor std::addressof and std::iterator.\n+\t* include/bits/streambuf_iterator.h: Include header for\n+\tstd::iterator.\n+\t* include/std/iterator: Do not include <iosfwd>.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/29_atomics/atomic_ref/compare_exchange_padding.cc:\n+\tStore value with non-zero padding bits after construction.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/tr1/random.h (__detail::_Adaptor::_BEngine): Remove.\n+\t(__detail::_Adaptor::_M_g): Make public.\n+\t(__detail::_Adaptor<_Engine*, _Dist>): Remove partial\n+\tspecialization.\n+\t(variate_generate::_Value): New helper to simplify handling of\n+\t_Engine* and _Engine& template arguments.\n+\t(variate_generate::engine_value_type): Define to underlying\n+\tengine type, not adapted type.\n+\t(variate_generate::engine()): Return underlying engine instead\n+\tof adaptor.\n+\t* testsuite/tr1/5_numerical_facilities/random/variate_generator/37986.cc:\n+\tFix comment.\n+\t* testsuite/tr1/5_numerical_facilities/random/variate_generator/requirements/typedefs.cc:\n+\tCheck member typedefs have the correct types.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/debug/formatter.h [_GLIBCXX_DEBUG_BACKTRACE]\n+\t(_Error_formatter): Use 0 as null pointer constant.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/allocator.h (__alloc_neq): Remove.\n+\t* include/bits/stl_list.h (list::_M_check_equal_allocators):\n+\tCompare allocators directly, without __alloc_neq.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Remove __allocator_base.\n+\t* include/bits/allocator.h: Fix nesting of Doxygen commands.\n+\n+2022-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/abi.xml: Document GLIBCXX_3.4.30 and\n+\tGLIBCXX_3.4.31 versions.\n+\t* doc/html/manual/abi.html: Regenerate.\n+\n 2022-09-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/memory: Do not include <bits/stl_algobase.h>."}]}