{"sha": "8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNlYjg4ZDRjZDZiYTcyOWIzOGRlZTNiZGE5MjVhYjM0YTc1ZWZjOQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2006-01-03T22:58:31Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-01-03T22:58:31Z"}, "message": "PR libgcj/9715, PR libgcj/19132:\n\n\t* java/nio/charset/Charset.java (charsetForName): Try default\n\tprovider first.\n\t(availableCharsets): Re-merged.\n\t(providers2): Likewise.\n\t(defaultCharset): Likewise.\n\t* sources.am, Makefile.in: Rebuilt.\n\t* gnu/java/nio/charset/Provider.java: Removed.\n\t* java/io/OutputStreamWriter.java\n\t(OutputStreamWriter(OutputStream,Charset)): New constructor.\n\t(OutputStreamWriter(OutputStream,CharsetEncoder)): Likewise.\n\t* java/io/InputStreamReader.java\n\t(InputStreamReader(InputStream,CharsetDecoder)): New constructor.\n\t(InputStreamReader(InputStream,Charset)): Likewise.\n\t* gnu/gcj/convert/BytesToUnicode.java (getDecoder): Try a\n\tBytesToCharsetAdaptor.\n\t* gnu/gcj/convert/UnicodeToBytes.java (getEncoder): Try a\n\tCharsetToBytesAdaptor.\n\t* gnu/gcj/convert/CharsetToBytesAdaptor.java: New file.\n\t* gnu/gcj/convert/BytesToCharsetAdaptor.java: New file.\n\t* mauve-libgcj: Remove getEncoding exclusion.\n\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r109294", "tree": {"sha": "82dbb00c69057da2d374d746d77eb40854b23164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82dbb00c69057da2d374d746d77eb40854b23164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/comments", "author": null, "committer": null, "parents": [{"sha": "368872c3154af66d44a984737b0119d88431c64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368872c3154af66d44a984737b0119d88431c64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368872c3154af66d44a984737b0119d88431c64f"}], "stats": {"total": 606, "additions": 420, "deletions": 186}, "files": [{"sha": "5f1b05a8c3c004eff2630921bfd673308adc874d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -1,3 +1,28 @@\n+2005-12-24  David Daney <ddaney@avtrex.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/9715, PR libgcj/19132:\n+\t* java/nio/charset/Charset.java (charsetForName): Try default\n+\tprovider first.\n+\t(availableCharsets): Re-merged.\n+\t(providers2): Likewise.\n+\t(defaultCharset): Likewise.\n+\t* sources.am, Makefile.in: Rebuilt.\n+\t* gnu/java/nio/charset/Provider.java: Removed.\n+\t* java/io/OutputStreamWriter.java\n+\t(OutputStreamWriter(OutputStream,Charset)): New constructor.\n+\t(OutputStreamWriter(OutputStream,CharsetEncoder)): Likewise.\n+\t* java/io/InputStreamReader.java\n+\t(InputStreamReader(InputStream,CharsetDecoder)): New constructor.\n+\t(InputStreamReader(InputStream,Charset)): Likewise.\n+\t* gnu/gcj/convert/BytesToUnicode.java (getDecoder): Try a\n+\tBytesToCharsetAdaptor.\n+\t* gnu/gcj/convert/UnicodeToBytes.java (getEncoder): Try a\n+\tCharsetToBytesAdaptor.\n+\t* gnu/gcj/convert/CharsetToBytesAdaptor.java: New file.\n+\t* gnu/gcj/convert/BytesToCharsetAdaptor.java: New file.\n+\t* mauve-libgcj: Remove getEncoding exclusion.\n+\n 2005-12-28  Anthony Green  <green@redhat.com>\n \n \t* gnu/java/net/natPlainSocketImplWin32.cc (connect): Same "}, {"sha": "cec8b3875a8707fef82b03f358b879cdb3ce7d59", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -1134,7 +1134,9 @@ gnu/gcj/RawDataManaged.java\n \n gnu_gcj_header_files = $(patsubst %.java,%.h,$(gnu_gcj_source_files))\n gnu_gcj_convert_source_files = \\\n+gnu/gcj/convert/BytesToCharsetAdaptor.java \\\n gnu/gcj/convert/BytesToUnicode.java \\\n+gnu/gcj/convert/CharsetToBytesAdaptor.java \\\n gnu/gcj/convert/Convert.java \\\n gnu/gcj/convert/IOConverter.java \\\n gnu/gcj/convert/Input_8859_1.java \\\n@@ -1708,7 +1710,7 @@ classpath/gnu/java/nio/charset/MacRomania.java \\\n classpath/gnu/java/nio/charset/MacSymbol.java \\\n classpath/gnu/java/nio/charset/MacThai.java \\\n classpath/gnu/java/nio/charset/MacTurkish.java \\\n-gnu/java/nio/charset/Provider.java \\\n+classpath/gnu/java/nio/charset/Provider.java \\\n classpath/gnu/java/nio/charset/US_ASCII.java \\\n classpath/gnu/java/nio/charset/UTF_16.java \\\n classpath/gnu/java/nio/charset/UTF_16BE.java \\"}, {"sha": "78ba848e118f57e30ac61aba33dc35167ce81dfa", "filename": "libjava/gnu/gcj/convert/BytesToCharsetAdaptor.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToCharsetAdaptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToCharsetAdaptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToCharsetAdaptor.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -0,0 +1,90 @@\n+/* Copyright (C) 2005  Free Software Foundation\n+\n+This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert; \n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.CoderResult;\n+import gnu.java.nio.charset.EncodingHelper;\n+\n+/**\n+ * Adaptor class that allow any {@link Charset} to be used\n+ * as a BytesToUnicode converter.\n+ */\n+public class BytesToCharsetAdaptor extends BytesToUnicode\n+{\n+  /**\n+   * The CharsetDecoder that does all the work.\n+   */\n+  private final CharsetDecoder decoder;\n+\n+  /**\n+   * ByteBuffer wrapper for this.buf.\n+   */\n+  private ByteBuffer inBuf;\n+\n+  /**\n+   * Create a new BytesToCharsetAdaptor for the given Charset.\n+   *\n+   * @param cs the Charset.\n+   */\n+  public BytesToCharsetAdaptor(Charset cs)\n+  {\n+    this(cs.newDecoder());\n+  }\n+\n+  /**\n+   * Create a new BytesToCharsetAdaptor for the given CharsetDecoder.\n+   *\n+   * @param dec the CharsetDecoder.\n+   */\n+  public BytesToCharsetAdaptor(CharsetDecoder dec)\n+  {\n+    decoder = dec;\n+    // Use default replacments on bad input so that we don't have to\n+    // deal with errors.\n+    decoder.onMalformedInput(CodingErrorAction.REPLACE);\n+    decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n+  }\n+\n+  /**\n+   * Return the decoder's name.  The backing Charset's name is\n+   * returned.\n+   *\n+   * @return The name.\n+   */\n+  public String getName()\n+  {\n+    return EncodingHelper.getOldCanonical(decoder.charset().name());\n+  }\n+\n+  public int read(char[] outbuffer, int outpos, int count)\n+  {\n+    if (inBuf == null || ! inBuf.hasArray() || inBuf.array() != inbuffer)\n+      inBuf = ByteBuffer.wrap(inbuffer);\n+    inBuf.limit(inpos + inlength);\n+    inBuf.position(inpos);\n+\n+    CharBuffer outBuf = CharBuffer.wrap(outbuffer, outpos, count);\n+    decoder.decode(inBuf, outBuf, false);\n+\n+    // Update this.inpos to reflect the bytes consumed.\n+    inpos = inBuf.position();\n+    // Return the number of characters that were written to outbuffer.\n+    return outBuf.position() - outpos;\n+  }\n+\n+  // These aren't cached.\n+  public void done()\n+  {\n+  }\n+}"}, {"sha": "e3afe3ee97bdb6ddda36f0c0c2acb7dd94fb4851", "filename": "libjava/gnu/gcj/convert/BytesToUnicode.java", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -8,6 +8,8 @@\n \n package gnu.gcj.convert;\n \n+import java.nio.charset.Charset;\n+\n public abstract class BytesToUnicode extends IOConverter\n {\n   /** Buffer to read bytes from.\n@@ -104,9 +106,18 @@ public static BytesToUnicode getDecoder (String encoding)\n \ttry\n \t  {\n \t    // We pass the original name to iconv and let it handle\n-\t    // its own aliasing.\n+\t    // its own aliasing.  Note that we intentionally prefer\n+\t    // iconv over nio.\n \t    return new Input_iconv (encoding);\n \t  }\n+\tcatch (Throwable _)\n+\t  {\n+\t    // Ignore, and try the next method.\n+\t  }\n+\ttry\n+\t  {\n+\t    return new BytesToCharsetAdaptor(Charset.forName(encoding));\n+\t  }\n \tcatch (Throwable _)\n \t  {\n \t    throw new java.io.UnsupportedEncodingException(encoding"}, {"sha": "4e9bcd5b4619d197645268544303be42c4eb1fcd", "filename": "libjava/gnu/gcj/convert/CharsetToBytesAdaptor.java", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FCharsetToBytesAdaptor.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -0,0 +1,150 @@\n+/* Copyright (C) 2005, 2006  Free Software Foundation\n+\n+This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert; \n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.CoderResult;\n+import gnu.java.nio.charset.EncodingHelper;\n+\n+/**\n+ * Adaptor class that allow any {@link Charset} to be used\n+ * as a UnicodeToBytes converter.\n+ */\n+public class CharsetToBytesAdaptor extends UnicodeToBytes\n+{\n+  /**\n+   * The CharsetEncoder that does all the work.\n+   */\n+  private final CharsetEncoder encoder;\n+\n+  /**\n+   * ByteBuffer wrapper for this.buf.\n+   */\n+  private ByteBuffer outBuf;\n+\n+  /**\n+   * True if we've told the CharsetEncoder that there are no more\n+   * characters available.\n+   */\n+  private boolean closedEncoder;\n+\n+  /**\n+   * True if we're finished.\n+   */\n+  private boolean finished;\n+\n+  /**\n+   * Create a new CharsetToBytesAdaptor for the given Charset.\n+   *\n+   * @param cs The Charset.\n+   */\n+  public CharsetToBytesAdaptor(Charset cs)\n+  {\n+    this(cs.newEncoder());\n+  }\n+\n+  /**\n+   * Create a new CharsetToBytesAdaptor for the given CharsetEncoder.\n+   *\n+   * @param enc The CharsetEncoder.\n+   */\n+  public CharsetToBytesAdaptor(CharsetEncoder enc)\n+  {\n+    encoder = enc;\n+    // Use default replacments on bad input so that we don't have to\n+    // deal with errors.\n+    encoder.onMalformedInput(CodingErrorAction.REPLACE);\n+    encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n+  }\n+\n+  /**\n+   * Return the encoder's name.  The backing Charset's name is\n+   * returned.\n+   *\n+   * @return The name.\n+   */\n+  public String getName()\n+  {\n+    return EncodingHelper.getOldCanonical(encoder.charset().name());\n+  }\n+\n+  public int write (char[] inbuffer, int inpos, int inlength)\n+  {\n+    // Wrap the char array so it can be used by the encoder.\n+    CharBuffer b = CharBuffer.wrap(inbuffer, inpos, inlength);\n+    write(b);\n+    return b.position() - inpos; // Number of chars consumed.\n+  }\n+\n+  public int write (String str, int inpos, int inlength, char work)\n+  {\n+    // Wrap the String so it can be used by the encoder.\n+    CharBuffer b = CharBuffer.wrap(str, inpos, inlength);\n+    write(b);\n+    return b.position() - inpos; // Number of chars consumed.\n+  }\n+\n+  /**\n+   * Encode as much of inBuf as will fit in buf.  The number of\n+   * chars consumed is reflected by the new position of inBuf.  The\n+   * output is put in buf and count is incremented by the number of\n+   * bytes written.\n+   *\n+   * @param inBuf The input.\n+   */\n+  private void write(CharBuffer inBuf)\n+  {\n+    // Reuse existing outBuf if it is still wrapping the same array\n+    // it was created with.\n+    if (outBuf == null || !outBuf.hasArray() || outBuf.array() != buf)\n+      outBuf = ByteBuffer.wrap(buf);\n+\n+    // Set the current position.\n+    outBuf.position(count);\n+\n+    // If we've already said that there is no more input available,\n+    // then we simply try to flush again.\n+    if (closedEncoder)\n+      {\n+\tCoderResult result = encoder.flush(outBuf);\n+\tif (result == CoderResult.UNDERFLOW)\n+\t  finished = true;\n+       }\n+    else\n+      {\n+\t// Do the conversion.  If there are no characters to write,\n+\t// then we are finished.\n+\tclosedEncoder = ! inBuf.hasRemaining();\n+\tencoder.encode(inBuf, outBuf, closedEncoder);\n+      }\n+\n+    // Mark the new end of buf.\n+    count = outBuf.position();\n+  }\n+\n+  /**\n+   * Check for cached output in the converter.\n+   *\n+   * @return true if there is cached output that has not been\n+   * written to buf.\n+   */\n+  public boolean havePendingBytes()\n+  {\n+    return ! finished;\n+  }\n+\n+  // These aren't cached.\n+  public void done()\n+  {\n+  }\n+}"}, {"sha": "8522bec117ac3dd15c204a65589a9722e2cc3a78", "filename": "libjava/gnu/gcj/convert/UnicodeToBytes.java", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicodeToBytes.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999, 2000, 2001, 2003  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2003, 2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -8,6 +8,8 @@\n \n package gnu.gcj.convert; \n \n+import java.nio.charset.Charset;\n+\n public abstract class UnicodeToBytes extends IOConverter\n {\n   /** Buffer to emit bytes to.\n@@ -99,10 +101,22 @@ public static UnicodeToBytes getEncoder (String encoding)\n     catch (Throwable ex) \n       { \n \ttry\n-\t  {\n+          {\n \t    // We pass the original name to iconv and let it handle\n-\t    // its own aliasing.\n+\t    // its own aliasing.  Note that we intentionally prefer\n+\t    // iconv over nio.\n \t    return new Output_iconv (encoding);\n+          }\n+        catch (Throwable _)\n+          {\n+            // Ignore, and try the next method.\n+          }\n+\ttry\n+\t  {\n+            // Try using finding java.nio.charset.Charset and using\n+            // the adaptor.  Use the original name as Charsets have\n+            // their own canonical names.\n+            return new CharsetToBytesAdaptor(Charset.forName(encoding));\n \t  }\n \tcatch (Throwable _)\n \t  {"}, {"sha": "586a09e1a1bd2aa3bf6567d070a5735b3cf85d8e", "filename": "libjava/gnu/java/nio/charset/Provider.java", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368872c3154af66d44a984737b0119d88431c64f/libjava%2Fgnu%2Fjava%2Fnio%2Fcharset%2FProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368872c3154af66d44a984737b0119d88431c64f/libjava%2Fgnu%2Fjava%2Fnio%2Fcharset%2FProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fcharset%2FProvider.java?ref=368872c3154af66d44a984737b0119d88431c64f", "patch": "@@ -1,154 +0,0 @@\n-/* Provider.java -- \n-   Copyright (C) 2002, 2005 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-package gnu.java.nio.charset;\n-\n-import java.nio.charset.Charset;\n-import java.nio.charset.spi.CharsetProvider;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-\n-/**\n- * Charset provider for the required charsets.  Used by\n- * {@link Charset#charsetForName} and * {@link Charset#availableCharsets}.\n- *\n- * @author Jesse Rosenstock\n- * @author Robert Schuster (thebohemian@gmx.net)\n- * @see Charset\n- */\n-public final class Provider extends CharsetProvider\n-{\n-  private static Provider singleton;\n-\n-  static\n-  {\n-    synchronized (Provider.class)\n-      {\n-        singleton = null;\n-      }\n-  }\n-\n-  /**\n-   * Map from charset name to charset canonical name. The strings\n-   * are all lower-case to allow case-insensitive retrieval of\n-   * Charset instances. \n-   */\n-  private final HashMap canonicalNames;\n-\n-  /**\n-   * Map from lower-case canonical name to Charset.\n-   * TODO: We may want to use soft references.  We would then need to keep\n-   * track of the class name to regenerate the object.\n-   */\n-  private final HashMap charsets;\n-\n-  private Provider ()\n-  {\n-    canonicalNames = new HashMap ();\n-    charsets = new HashMap ();\n-\n-    // US-ASCII aka ISO646-US\n-    addCharset (new US_ASCII ());\n-\n-    // ISO-8859-1 aka ISO-LATIN-1\n-    addCharset (new ISO_8859_1 ());\n-\n-    // UTF-8\n-    addCharset (new UTF_8 ());\n-\n-    // UTF-16BE\n-    addCharset (new UTF_16BE ());\n-\n-    // UTF-16LE\n-    addCharset (new UTF_16LE ());\n-\n-    // UTF-16\n-    addCharset (new UTF_16 ());\n-  }\n-\n-  public Iterator charsets ()\n-  {\n-    return Collections.unmodifiableCollection (charsets.values ())\n-                      .iterator ();\n-  }\n-\n-  /**\n-   * Returns a Charset instance by converting the given\n-   * name to lower-case, looking up the canonical charset\n-   * name and finally looking up the Charset with that name.\n-   * \n-   * <p>The lookup is therefore case-insensitive.</p>\n-   * \n-   *  @returns The Charset having <code>charsetName</code>\n-   *  as its alias or null if no such Charset exist.\n-   */\n-  public Charset charsetForName (String charsetName)\n-  {\n-    return (Charset) charsets.get(canonicalNames.get(charsetName.toLowerCase()));\n-  }\n-\n-  /**\n-   * Puts a Charset under its canonical name into the 'charsets' map.\n-   * Then puts a mapping from all its alias names to the canonical name.\n-   * \n-   * <p>All names are converted to lower-case</p>.\n-   * \n-   * @param cs\n-   */\n-  private void addCharset (Charset cs)\n-  {\n-    String canonicalName = cs.name().toLowerCase();\n-    charsets.put (canonicalName, cs);\n-    \n-    /* Adds a mapping between the canonical name\n-     * itself making a lookup using that name\n-     * no special case.\n-     */  \n-    canonicalNames.put(canonicalName, canonicalName);\n-\n-    for (Iterator i = cs.aliases ().iterator (); i.hasNext (); )\n-      canonicalNames.put (((String) i.next()).toLowerCase(), canonicalName);\n-  }\n-\n-  public static synchronized Provider provider ()\n-  {\n-    if (singleton == null)\n-      singleton = new Provider ();\n-    return singleton;\n-  }\n-}"}, {"sha": "91568c5cc5020af7b1b631f215835be9d2726357", "filename": "libjava/java/io/InputStreamReader.java", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fio%2FInputStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fio%2FInputStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInputStreamReader.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -39,6 +39,8 @@\n package java.io;\n \n import gnu.gcj.convert.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n \n /**\n  * This class reads characters from a byte input stream.   The characters\n@@ -131,6 +133,25 @@ public InputStreamReader(InputStream in, String encoding_name)\n     this(in, BytesToUnicode.getDecoder(encoding_name));\n   }\n \n+  /**\n+   * Creates an InputStreamReader that uses a decoder of the given\n+   * charset to decode the bytes in the InputStream into\n+   * characters.\n+   */\n+  public InputStreamReader(InputStream in, Charset charset)\n+  {\n+    this(in, new BytesToCharsetAdaptor(charset));\n+  }\n+\n+  /**\n+   * Creates an InputStreamReader that uses the given charset decoder\n+   * to decode the bytes in the InputStream into characters.\n+   */\n+  public InputStreamReader(InputStream in, CharsetDecoder decoder)\n+  {\n+    this(in, new BytesToCharsetAdaptor(decoder));\n+  }\n+\n   private InputStreamReader(InputStream in, BytesToUnicode decoder)\n   {\n     // FIXME: someone could pass in a BufferedInputStream whose buffer"}, {"sha": "90ecd9f0bc3c75babd7fee4b1f699e3bbb321142", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -39,6 +39,9 @@\n package java.io;\n \n import gnu.gcj.convert.UnicodeToBytes;\n+import gnu.gcj.convert.CharsetToBytesAdaptor;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n \n /**\n  * This class writes characters to an output stream that is byte oriented\n@@ -128,6 +131,31 @@ public OutputStreamWriter (OutputStream out)\n     this(out, UnicodeToBytes.getDefaultEncoder());\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>OutputStreamWriter</code>\n+   * to write to the specified stream using a given <code>Charset</code>.\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   * @param cs The <code>Charset</code> of the encoding to use\n+   */\n+  public OutputStreamWriter(OutputStream out, Charset cs)\n+  {\n+    this(out, new CharsetToBytesAdaptor(cs));\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>OutputStreamWriter</code>\n+   * to write to the specified stream using a given\n+   * <code>CharsetEncoder</code>.\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   * @param enc The <code>CharsetEncoder</code> to encode the output with\n+   */\n+  public OutputStreamWriter(OutputStream out, CharsetEncoder enc)\n+  {\n+    this(out, new CharsetToBytesAdaptor(enc));\n+  }\n+\n   /**\n    * This method closes this stream, and the underlying \n    * <code>OutputStream</code>"}, {"sha": "48093bc9d3d02843d63ce3f1a654b59c0ccc6bdd", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 70, "deletions": 24, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -38,6 +38,8 @@\n \n package java.nio.charset;\n \n+import gnu.classpath.ServiceFactory;\n+import gnu.classpath.SystemProperties;\n import gnu.java.nio.charset.Provider;\n \n import java.io.BufferedReader;\n@@ -116,6 +118,53 @@ private static void checkName (String name)\n       }\n   }\n \n+  /**\n+   * Returns the system default charset.\n+   *\n+   * This may be set by the user or VM with the file.encoding\n+   * property.\n+   *\n+   * @since 1.5\n+   */\n+  public static Charset defaultCharset()\n+  {\n+    String encoding;\n+    \n+    try \n+      {\n+\tencoding = SystemProperties.getProperty(\"file.encoding\");\n+      }\n+    catch(SecurityException e)\n+      {\n+\t// Use fallback.\n+\tencoding = \"ISO-8859-1\";\n+      }\n+    catch(IllegalArgumentException e)\n+      {\n+\t// Use fallback.\n+\tencoding = \"ISO-8859-1\";\n+      }\n+\n+    try\n+      {\n+\treturn forName(encoding);\n+      }\n+    catch(UnsupportedCharsetException e)\n+      {\n+\t// Ignore.\n+      }\n+    catch(IllegalCharsetNameException e)\n+      {\n+\t// Ignore.\n+      }\n+    catch(IllegalArgumentException e)\n+      {\n+\t// Ignore.\n+      }\n+    \n+    throw new IllegalStateException(\"Can't get default charset!\");\n+  }\n+\n   public static boolean isSupported (String charsetName)\n   {\n     return charsetForName (charsetName) != null;\n@@ -155,20 +204,31 @@ public static Charset forName (String charsetName)\n   private static Charset charsetForName(String charsetName)\n   {\n     checkName (charsetName);\n-    Charset cs = null;\n-    CharsetProvider[] providers = providers2();\n-    for (int i = 0; i < providers.length; i++)\n+    // Try the default provider first\n+    // (so we don't need to load external providers unless really necessary)\n+    // if it is an exotic charset try loading the external providers.\n+    Charset cs = provider().charsetForName(charsetName);\n+    if (cs == null)\n       {\n-        cs = providers[i].charsetForName(charsetName);\n-        if (cs != null)\n-\t  break;\n+\tCharsetProvider[] providers = providers2();\n+\tfor (int i = 0; i < providers.length; i++)\n+\t  {\n+\t    cs = providers[i].charsetForName(charsetName);\n+\t    if (cs != null)\n+\t      break;\n+\t  }\n       }\n     return cs;\n   }\n \n   public static SortedMap availableCharsets()\n   {\n     TreeMap charsets = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+    for (Iterator i = provider().charsets(); i.hasNext(); )\n+      {\n+\tCharset cs = (Charset) i.next();\n+\tcharsets.put(cs.name(), cs);\n+      }\n \n     CharsetProvider[] providers = providers2();\n     for (int j = 0; j < providers.length; j++)\n@@ -206,32 +266,18 @@ private static CharsetProvider provider()\n   /**\n    * We need to support multiple providers, reading them from\n    * java.nio.charset.spi.CharsetProvider in the resource directory\n-   * META-INF/services.\n+   * META-INF/services. This returns the \"extra\" charset providers.\n    */\n   private static CharsetProvider[] providers2()\n   {\n     if (providers == null)\n       {\n         try\n           {\n-            Enumeration en = ClassLoader.getSystemResources\n-\t      (\"META-INF/services/java.nio.charset.spi.CharsetProvider\");\n+            Iterator i = ServiceFactory.lookupProviders(CharsetProvider.class);\n             LinkedHashSet set = new LinkedHashSet();\n-            set.add(provider());\n-            while (en.hasMoreElements())\n-              {\n-                BufferedReader rdr = new BufferedReader(new InputStreamReader\n-                  (((URL) (en.nextElement())).openStream()));\n-                while (true)\n-                  {\n-                    String s = rdr.readLine();\n-                    if (s == null)\n-\t\t      break;\n-                    CharsetProvider p =\n-\t\t      (CharsetProvider) ((Class.forName(s)).newInstance());\n-                    set.add(p);\n-                  }\n-               }\n+            while (i.hasNext())\n+              set.add(i.next());\n \n             providers = new CharsetProvider[set.size()];\n             set.toArray(providers);"}, {"sha": "4d4cf5bc16a8807b86d0db4a5c316ec18719f52c", "filename": "libjava/mauve-libgcj", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fmauve-libgcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fmauve-libgcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fmauve-libgcj?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -23,4 +23,3 @@ JDBC2.0\n !java.awt.event.MouseEvent.modifiersEx\n !org.omg.\n !javax.rmi\n-!java.io.InputStreamReader.getEncoding"}, {"sha": "d976154598be65e03074fa4198354867cc70492b", "filename": "libjava/sources.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ceb88d4cd6ba729b38dee3bda925ab34a75efc9/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=8ceb88d4cd6ba729b38dee3bda925ab34a75efc9", "patch": "@@ -497,7 +497,9 @@ gnu/gcj.list: $(gnu_gcj_source_files)\n \n \n gnu_gcj_convert_source_files = \\\n+gnu/gcj/convert/BytesToCharsetAdaptor.java \\\n gnu/gcj/convert/BytesToUnicode.java \\\n+gnu/gcj/convert/CharsetToBytesAdaptor.java \\\n gnu/gcj/convert/Convert.java \\\n gnu/gcj/convert/IOConverter.java \\\n gnu/gcj/convert/Input_8859_1.java \\\n@@ -1350,7 +1352,7 @@ classpath/gnu/java/nio/charset/MacRomania.java \\\n classpath/gnu/java/nio/charset/MacSymbol.java \\\n classpath/gnu/java/nio/charset/MacThai.java \\\n classpath/gnu/java/nio/charset/MacTurkish.java \\\n-gnu/java/nio/charset/Provider.java \\\n+classpath/gnu/java/nio/charset/Provider.java \\\n classpath/gnu/java/nio/charset/US_ASCII.java \\\n classpath/gnu/java/nio/charset/UTF_16.java \\\n classpath/gnu/java/nio/charset/UTF_16BE.java \\"}]}