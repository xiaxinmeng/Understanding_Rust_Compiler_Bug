{"sha": "5baf45323b70abe259bffc89425e9f0155a1a7a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhZjQ1MzIzYjcwYWJlMjU5YmZmYzg5NDI1ZTlmMDE1NWExYTdhMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-01-11T12:13:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-01-11T12:13:50Z"}, "message": "[RTL-ifcvt] PR rtl-optimization/68841: Make sure one basic block doesn't clobber CC reg usage of the other\n\n        PR rtl-optimization/68841\n        * ifcvt.c (struct noce_if_info): Add orig_x field.\n        (bbs_ok_for_cmove_arith): Add to_rename parameter.\n        Don't record conflicts on to_rename if it's present.\n        Allow memory destinations in sets.\n        (noce_try_cmove_arith): Call bbs_ok_for_cmove_arith even on simple\n        blocks, passing orig_x to the checks.\n        (noce_process_if_block): Set if_info->orig_x appropriately.\n\n        * gcc.dg/pr68841.c: New test.\n        * gcc.c-torture/execute/pr68841.c: New test.\n\nFrom-SVN: r232223", "tree": {"sha": "590458ee63e277d05bcf8da716d1961107023f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590458ee63e277d05bcf8da716d1961107023f90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5baf45323b70abe259bffc89425e9f0155a1a7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5baf45323b70abe259bffc89425e9f0155a1a7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5baf45323b70abe259bffc89425e9f0155a1a7a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5baf45323b70abe259bffc89425e9f0155a1a7a3/comments", "author": null, "committer": null, "parents": [{"sha": "1c5211b13cb66b65f92a8289d221e2c3f4a3dfe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5211b13cb66b65f92a8289d221e2c3f4a3dfe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5211b13cb66b65f92a8289d221e2c3f4a3dfe2"}], "stats": {"total": 116, "additions": 106, "deletions": 10}, "files": [{"sha": "c910e8968c7d392b2316c8ae951c6326c0ecf560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5baf45323b70abe259bffc89425e9f0155a1a7a3", "patch": "@@ -1,3 +1,15 @@\n+2016-01-11  Bernd Schmidt  <bschmidt@redhat.com>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/68841\n+\t* ifcvt.c (struct noce_if_info): Add orig_x field.\n+\t(bbs_ok_for_cmove_arith): Add to_rename parameter.\n+\tDon't record conflicts on to_rename if it's present.\n+\tAllow memory destinations in sets.\n+\t(noce_try_cmove_arith): Call bbs_ok_for_cmove_arith even on simple\n+\tblocks, passing orig_x to the checks.\n+\t(noce_process_if_block): Set if_info->orig_x appropriately.\n+\n 2016-01-11  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/69069"}, {"sha": "7d94e75c5dc6a9ec1dc26060c97767983df0f929", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=5baf45323b70abe259bffc89425e9f0155a1a7a3", "patch": "@@ -793,6 +793,9 @@ struct noce_if_info\n   /* The SET_DEST of INSN_A.  */\n   rtx x;\n \n+  /* The original set destination that the THEN and ELSE basic blocks finally\n+     write their result to.  */\n+  rtx orig_x;\n   /* True if this if block is not canonical.  In the canonical form of\n      if blocks, the THEN_BB is the block reached via the fallthru edge\n      from TEST_BB.  For the noce transformations, we allow the symmetric\n@@ -1867,11 +1870,13 @@ insn_valid_noce_process_p (rtx_insn *insn, rtx cc)\n }\n \n \n-/* Return true iff the registers that the insns in BB_A set do not\n-   get used in BB_B.  */\n+/* Return true iff the registers that the insns in BB_A set do not get\n+   used in BB_B.  If TO_RENAME is non-NULL then it is a location that will be\n+   renamed later by the caller and so conflicts on it should be ignored\n+   in this function.  */\n \n static bool\n-bbs_ok_for_cmove_arith (basic_block bb_a, basic_block bb_b)\n+bbs_ok_for_cmove_arith (basic_block bb_a, basic_block bb_b, rtx to_rename)\n {\n   rtx_insn *a_insn;\n   bitmap bba_sets = BITMAP_ALLOC (&reg_obstack);\n@@ -1891,10 +1896,10 @@ bbs_ok_for_cmove_arith (basic_block bb_a, basic_block bb_b)\n \t  BITMAP_FREE (bba_sets);\n \t  return false;\n \t}\n-\n       /* Record all registers that BB_A sets.  */\n       FOR_EACH_INSN_DEF (def, a_insn)\n-\tbitmap_set_bit (bba_sets, DF_REF_REGNO (def));\n+\tif (!(to_rename && DF_REF_REG (def) == to_rename))\n+\t  bitmap_set_bit (bba_sets, DF_REF_REGNO (def));\n     }\n \n   rtx_insn *b_insn;\n@@ -1913,8 +1918,15 @@ bbs_ok_for_cmove_arith (basic_block bb_a, basic_block bb_b)\n \t}\n \n       /* Make sure this is a REG and not some instance\n-\t of ZERO_EXTRACT or SUBREG or other dangerous stuff.  */\n-      if (!REG_P (SET_DEST (sset_b)))\n+\t of ZERO_EXTRACT or SUBREG or other dangerous stuff.\n+\t If we have a memory destination then we have a pair of simple\n+\t basic blocks performing an operation of the form [addr] = c ? a : b.\n+\t bb_valid_for_noce_process_p will have ensured that these are\n+\t the only stores present.  In that case [addr] should be the location\n+\t to be renamed.  Assert that the callers set this up properly.  */\n+      if (MEM_P (SET_DEST (sset_b)))\n+\tgcc_assert (rtx_equal_p (SET_DEST (sset_b), to_rename));\n+      else if (!REG_P (SET_DEST (sset_b)))\n \t{\n \t  BITMAP_FREE (bba_sets);\n \t  return false;\n@@ -2083,9 +2095,9 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \t}\n     }\n \n-  if (then_bb && else_bb && !a_simple && !b_simple\n-      && (!bbs_ok_for_cmove_arith (then_bb, else_bb)\n-\t  || !bbs_ok_for_cmove_arith (else_bb, then_bb)))\n+  if (then_bb && else_bb\n+      && (!bbs_ok_for_cmove_arith (then_bb, else_bb,  if_info->orig_x)\n+\t  || !bbs_ok_for_cmove_arith (else_bb, then_bb,  if_info->orig_x)))\n     return FALSE;\n \n   start_sequence ();\n@@ -3403,6 +3415,7 @@ noce_process_if_block (struct noce_if_info *if_info)\n   /* Only operate on register destinations, and even then avoid extending\n      the lifetime of hard registers on small register class machines.  */\n   orig_x = x;\n+  if_info->orig_x = orig_x;\n   if (!REG_P (x)\n       || (HARD_REGISTER_P (x)\n \t  && targetm.small_register_classes_for_mode_p (GET_MODE (x))))"}, {"sha": "8157e439c9638179446d627e69cdcf9b58f076eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5baf45323b70abe259bffc89425e9f0155a1a7a3", "patch": "@@ -1,3 +1,9 @@\n+2016-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/68841\n+\t* gcc.dg/pr68841.c: New test.\n+\t* gcc.c-torture/execute/pr68841.c: New test.\n+\n 2016-01-11  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR rtl-optimization/68920"}, {"sha": "15a27e7dc382d97398ca05427f431f5ecd3b89da", "filename": "gcc/testsuite/gcc.c-torture/execute/pr68841.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68841.c?ref=5baf45323b70abe259bffc89425e9f0155a1a7a3", "patch": "@@ -0,0 +1,31 @@\n+static inline int\n+foo (int *x, int y)\n+{\n+  int z = *x;\n+  while (y > z)\n+    z *= 2;\n+  return z;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 1; i < 17; i++)\n+    {\n+      int j;\n+      int k;\n+      j = foo (&i, 7);\n+      if (i >= 7)\n+\tk = i;\n+      else if (i >= 4)\n+\tk = 8 + (i - 4) * 2;\n+      else if (i == 3)\n+\tk = 12;\n+      else\n+\tk = 8;\n+      if (j != k)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "470048cc24f0d7150ed1e3141181bc1e8472ae12", "filename": "gcc/testsuite/gcc.dg/pr68841.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5baf45323b70abe259bffc89425e9f0155a1a7a3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68841.c?ref=5baf45323b70abe259bffc89425e9f0155a1a7a3", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Og -fif-conversion -flive-range-shrinkage -fpeel-loops -frerun-cse-after-loop\" } */\n+\n+static inline int\n+foo (int *x, int y)\n+{\n+  int z = *x;\n+  while (y > z)\n+    z *= 2;\n+  return z;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 1; i < 17; i++)\n+    {\n+      int j;\n+      int k;\n+      j = foo (&i, 7);\n+      if (i >= 7)\n+\tk = i;\n+      else if (i >= 4)\n+\tk = 8 + (i - 4) * 2;\n+      else if (i == 3)\n+\tk = 12;\n+      else\n+\tk = 8;\n+      if (j != k)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}]}