{"sha": "f6e8e2797ebae21e483373e303ec1c7596309625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlOGUyNzk3ZWJhZTIxZTQ4MzM3M2UzMDNlYzFjNzU5NjMwOTYyNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-09T00:16:50Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-09T00:16:50Z"}, "message": "Daily bump.", "tree": {"sha": "0e781506bd4324408d9abd0f9640006db0619de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e781506bd4324408d9abd0f9640006db0619de8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e8e2797ebae21e483373e303ec1c7596309625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e8e2797ebae21e483373e303ec1c7596309625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e8e2797ebae21e483373e303ec1c7596309625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e8e2797ebae21e483373e303ec1c7596309625/comments", "author": null, "committer": null, "parents": [{"sha": "ab3a5ff07cd7f7101ac6f7f0635c485aad73f47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3a5ff07cd7f7101ac6f7f0635c485aad73f47e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab3a5ff07cd7f7101ac6f7f0635c485aad73f47e"}], "stats": {"total": 348, "additions": 347, "deletions": 1}, "files": [{"sha": "e040530f5b26a5adf11e215eccd30db4c28a3c27", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,12 @@\n+2020-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* filter-clang-warnings.py: Filter more cases.\n+\n+2020-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* filter-clang-warnings.py: Modernize and filter 2 more\n+\tpatterns.\n+\n 2020-12-04  Martin Liska  <mliska@suse.cz>\n \n \t* check-params-in-docs.py: use flake8 and add some"}, {"sha": "902e496e2d1ede979aeec93f3b7df99451188bfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,90 @@\n+2020-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98182\n+\t* gimple-if-to-switch.cc (pass_if_to_switch::execute): Request\n+\tchain linkage through false edges only.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (DECL_ALIGN_RAW): New.\n+\t(DECL_ALIGN): Use it.\n+\t(DECL_WARN_IF_NOT_ALIGN_RAW): New.\n+\t(DECL_WARN_IF_NOT_ALIGN): Use it.\n+\t(SET_DECL_WARN_IF_NOT_ALIGN): Likewise.\n+\n+2020-12-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Replace calls to __builtin_vmvn* by ~\n+\tin vmvn intrinsics.\n+\t* config/arm/arm_neon_builtins.def: Remove entry for vmvn.\n+\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94440\n+\t* config/i386/i386.opt (ix86_excess_precision,\n+\tix86_unsafe_math_optimizations): New TargetVariables.\n+\t* config/i386/i386.h (X87_ENABLE_ARITH, X87_ENABLE_FLOAT): Use\n+\tix86_unsafe_math_optimizations instead of\n+\tflag_unsafe_math_optimizations and ix86_excess_precision instead of\n+\tflag_excess_precision.\n+\t* config/i386/i386.c (ix86_excess_precision): Rename to ...\n+\t(ix86_get_excess_precision): ... this.\n+\t(TARGET_C_EXCESS_PRECISION): Define to ix86_get_excess_precision.\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_tree,\n+\tix86_option_override_internal): Update ix86_unsafe_math_optimization\n+\tfrom flag_unsafe_math_optimizations and ix86_excess_precision\n+\tfrom flag_excess_precision when constructing target option nodes.\n+\t(ix86_set_current_function): If flag_unsafe_math_optimizations\n+\tor flag_excess_precision is different from the one recorded\n+\tin TARGET_OPTION_NODE, create a new target option node for the\n+\tcurrent function and switch to that.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98192\n+\t* tree-vect-slp.c (vect_build_slp_instance): Get scalar_stmts\n+\tby reference.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98191\n+\t* tree-vect-slp.c (vect_slp_check_for_constructors): Do not\n+\tfollow a non-SSA def chain.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97559\n+\t* tree-ssa-sink.c (statement_sink_location): Never ignore\n+\tPHIs on sink paths in irreducible regions.\n+\n+2020-12-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/97872\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Try to fold\n+\tx CMP y ? -1 : 0 to x CMP y.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98180\n+\t* tree-vect-slp.c (vect_slp_check_for_constructors): Check the\n+\tfirst inserted value has a def.\n+\n+2020-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/96344\n+\t* tree-switch-conversion.c (bit_test_cluster::emit): Compute the\n+\trange only if an entry test is necessary.  Merge the entry test in\n+\tthe bit test when possible.  Use PREC local variable consistently.\n+\tWhen there is only one test, do a single gimplification at the end.\n+\n+2020-12-08  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/98152\n+\t* config.gcc (riscv*-*-*): Checking python, python3 or python2\n+\tis available, and skip doing with_arch canonicalize if no python\n+\tavailable.\n+\n 2020-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/98147"}, {"sha": "c8f34b85e9517b080bb555f977d3f88ff7ce0cf2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1 +1 @@\n-20201208\n+20201209"}, {"sha": "79b7bec9cfcc76e6edd5bb99f9fdd8805419d2d4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,9 @@\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98187\n+\t* c-pragma.c (omp_pragmas): Remove \"master\".\n+\t(omp_pragmas_simd): Add \"master\".\n+\n 2020-12-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/98126"}, {"sha": "cb91fedcb2d2d82a4244ac4e8040507554561ad3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,109 @@\n+2020-12-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98103\n+\t* constexpr.c (cxx_eval_dynamic_cast_fn): If the evaluating of vtable\n+\tyields a null pointer, give an error and return.  Use objtype.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (layout_class_type): Call set_instantiating_module.\n+\t(build_self_reference): Likewise.\n+\t* decl.c (grokfndecl): Call set_originating_module.\n+\t(grokvardecl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* pt.c (maybe_new_partial_specialization): Call\n+\tset_instantiating_module, propagate DECL_MODULE_EXPORT_P.\n+\t(lookup_template_class_1): Likewise.\n+\t(tsubst_function_decl): Likewise.\n+\t(tsubst_decl, instantiate_template_1): Likewise.\n+\t(build_template_decl): Propagate module flags.\n+\t(tsubst_template_dcl): Likewise.\n+\t(finish_concept_definition): Call set_originating_module.\n+\t* module.cc (set_instantiating_module, set_originating_module): Stubs.\n+\n+2020-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96299\n+\t* cp-tree.h (build_new_op): Add overload that omits some parms.\n+\t(genericize_spaceship): Add location_t parm.\n+\t* constexpr.c (cxx_eval_binary_expression): Pass it.\n+\t* cp-gimplify.c (genericize_spaceship): Pass it.\n+\t* method.c (genericize_spaceship): Handle class-type arguments.\n+\t(build_comparison_op): Fall back to op</== when appropriate.\n+\n+2020-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_new_op_1): Set *overload for ambiguity.\n+\t(build_new_method_call_1): Likewise.\n+\n+2020-12-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* decl2.c: (is_atomic_expensive_p): New helper function.\n+\t(build_atomic_load_byte): Rename to...\n+\t(build_atomic_load_type): ... and add new parameter type.\n+\t(get_guard_cond): Skip the atomic here if that is expensive.\n+\tUse the correct type for the atomic load on certain targets.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct tinst_level): Add path & visible fields.\n+\t(build_cdtor_clones): Declare.\n+\t(match_mergeable_specialization): Use a spec_entry, add insert parm.\n+\t* class.c (build_cdtor_clones): Externalize.\n+\t* pt.c (push_tinst_level_loc): Clear new fields.\n+\t(match_mergeable_specialization): Adjust API.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.c (start_objects): Refactor and adjust for named module\n+\tinitializers.\n+\t(finish_objects): Likewise.\n+\t(generate_ctor_or_dtor_function): Likewise.\n+\t* module.cc (module_initializer_kind)\n+\t(module_add_import_initializers): Stubs.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Make-lang.in (MODULE_VERSION): Override when DEVPHASE not empty.\n+\t* module.cc: Comment.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (mangle_module_substitution, mangle_identifier)\n+\t(mangle_module_global_init): Declare.\n+\t* mangle.c (struct globals): Add mod field.\n+\t (mangle_module_substitution, mangle_identifier)\n+\t(mangle_module_global_init): Define.\n+\t(write_module, maybe_write_module): New.\n+\t(write_name): Call it.\n+\t(start_mangling): Clear mod field.\n+\t(finish_mangling_internal): Adjust.\n+\t* module.cc (mangle_module, mangle_module_fini)\n+\t(get_originating_module): Stubs.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (module_token_pre, module_token_cdtor)\n+\t(module_token_lang): Declare.\n+\t* lex.c: Include langhooks.\n+\t(struct module_token_filter): New.\n+\t* cp-tree.h (module_token_pre, module_token_cdtor)\n+\t(module_token_lang): Define.\n+\t* module.cc (get_module, preprocess_module, preprocessed_module):\n+\tNop stubs.\n+\n+2020-12-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* Make-lang.in (MODULE_VERSION): Define.\n+\t* module.cc: Add includes.\n+\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98187\n+\t* parser.c (cp_parser_omp_parallel): For parallel master with\n+\t-fopenmp-simd only, just call cp_parser_omp_master instead of\n+\twrapping it in OMP_PARALLEL.\n+\n 2020-12-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/98043"}, {"sha": "bab5f7942032cc8c977b9708498ee111e060ea6a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,22 @@\n+2020-12-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses, show_omp_node,\n+\tshow_code_node): Handle OMP SCAN.\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_SCAN.\n+\t(enum): Add OMP_LIST_SCAN_IN and OMP_LIST_SCAN_EX.\n+\t(enum gfc_exec_op): Add EXEC_OMP_SCAN.\n+\t* match.h (gfc_match_omp_scan): New prototype.\n+\t* openmp.c (gfc_match_omp_scan): New.\n+\t(gfc_match_omp_taskgroup): Cleanup.\n+\t(resolve_omp_clauses, gfc_resolve_omp_do_blocks,\n+\tomp_code_to_statement, gfc_resolve_omp_directive): Handle 'omp scan'.\n+\t* parse.c (decode_omp_directive, next_statement,\n+\tgfc_ascii_statement): Likewise.\n+\t* resolve.c (gfc_resolve_code): Handle EXEC_OMP_SCAN.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_trans_omp_do,\n+\tgfc_split_omp_clauses): Handle 'omp scan'.\n+\n 2020-12-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/98016"}, {"sha": "b22f0d535b801b7f6ff5bf50b05eec5c9ae4490f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,101 @@\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98191\n+\t* gcc.dg/torture/pr98191.c: Add dg-additional-options with\n+\t-w -Wno-psabi.\n+\n+2020-12-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98103\n+\t* g++.dg/ubsan/vptr-18.C: New test.\n+\n+2020-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96299\n+\t* g++.dg/cpp2a/spaceship-synth-neg2.C: Move error.\n+\t* g++.dg/cpp2a/spaceship-p1186.C: New test.\n+\n+2020-12-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/98182\n+\t* gcc.dg/tree-ssa/if-to-switch-10.c: New test.\n+\t* gcc.dg/tree-ssa/pr98182.c: New test.\n+\n+2020-12-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/reduction4.f90: Update; move FE some tests to ...\n+\t* gfortran.dg/gomp/reduction6.f90: ... this new test and ...\n+\t* gfortran.dg/gomp/reduction7.f90: ... this new test.\n+\t* gfortran.dg/gomp/reduction5.f90: Add dg-error.\n+\t* gfortran.dg/gomp/scan-1.f90: New test.\n+\t* gfortran.dg/gomp/scan-2.f90: New test.\n+\t* gfortran.dg/gomp/scan-3.f90: New test.\n+\t* gfortran.dg/gomp/scan-4.f90: New test.\n+\t* gfortran.dg/gomp/scan-5.f90: New test.\n+\t* gfortran.dg/gomp/scan-6.f90: New test.\n+\t* gfortran.dg/gomp/scan-7.f90: New test.\n+\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94440\n+\t* gcc.target/i386/pr94440-1.c: New file.\n+\t* gcc.target/i386/pr94440-2.c: New file.\n+\n+2020-12-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.target/i386/avx512vpopcntdq-pr97770-2.c: Require\n+\tavx512vpopcntdq support.\n+\t* gcc.target/i386/avx512vpopcntdqvl-pr97770-1.c: Require\n+\tavx512vpopcntdq, avx512vl support.\n+\n+2020-12-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc.target/i386/pr98100.c: Require ifunc support.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/95900\n+\t* gcc.dg/vect/bb-slp-pr95866.c: Require sse2 for the\n+\tBIT_FIELD_REF match.\n+\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512dq-vandnpd-2.c (CALC): Use union\n+\tto avoid aliasing violations.\n+\t* gcc.target/i386/avx512dq-vandnps-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vandpd-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vandps-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vorpd-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vorps-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vxorpd-2.c (CALC): Likewise.\n+\t* gcc.target/i386/avx512dq-vxorps-2.c (CALC): Likewise.\n+\n+2020-12-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98187\n+\t* c-c++-common/gomp/pr98187.c: New test.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98191\n+\t* gcc.dg/torture/pr98191.c: New testcase.\n+\n+2020-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97559\n+\t* gcc.dg/torture/pr97559-1.c: New testcase.\n+\t* gcc.dg/torture/pr97559-2.c: Likewise.\n+\n+2020-12-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/97872\n+\t* gcc.target/arm/pr97872.c: New test.\n+\n+2020-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/96470\n+\t* gnat.dg/opt39.adb: Add dg-additional-options for PowerPC.\n+\n 2020-12-07  Martin Uecker  <muecker@gwdg.de>\n \n \tPR c/97981"}, {"sha": "3fea7d35ecb90596a084d202ff845e68264978f2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,8 @@\n+2020-12-08  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* generic-morestack-thread.c (free_segments): Block signals during\n+\tthread exit.\n+\n 2020-12-03  Michael Meissner  <meissner@linux.ibm.com>\n \n \tPR libgcc/97543"}, {"sha": "016c8fca67d06973f5cb7274e6b461dbba80e0f5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,7 @@\n+2020-12-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/scan-1.f90: New test.\n+\n 2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/97865"}, {"sha": "9c4467bb6a900fd9e68dfb3e21204fe3c7aad6e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e8e2797ebae21e483373e303ec1c7596309625/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e8e2797ebae21e483373e303ec1c7596309625/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f6e8e2797ebae21e483373e303ec1c7596309625", "patch": "@@ -1,3 +1,15 @@\n+2020-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96299\n+\t* testsuite/18_support/comparisons/algorithms/partial_order.cc:\n+\tOne more line needs to use VERIFY instead of static_assert.\n+\n+2020-12-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/appendix_contributing.xml: Use consistent\n+\tindentation.\n+\t* doc/html/manual/source_code_style.html: Regenerate.\n+\n 2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/97865"}]}