{"sha": "6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "node_id": "C_kwDOANBUbNoAKDZhNjRlZTM5MDMxNjZkY2IxYTc4MDNmYmY0OWMzMWQwZjg5ODc1YTg", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-06-23T16:29:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:12Z"}, "message": "[Ada] Remove out-of-range warning in unreachable code\n\nThis patch removes a warning in examples like this:\n\n    if cond then\n       return; -- or other jump\n    end if;\n    X := ...; -- where the value is out of range\n\nwhere cond is known at compile time. It could, for example, be a generic\nformal parameter that is known to be True in some instances.\n\nAs a side effect, this patch adds new warnings about unreachable code.\n\ngcc/ada/\n\n\t* gnatls.adb (Output_License_Information): Remove pragma\n\tNo_Return; call sites deal with Exit_Program.\n\t* libgnat/g-socthi.adb (C_Connect): Suppress warning about\n\tunreachable code.\n\t* sem_ch5.adb (Check_Unreachable_Code): Special-case if\n\tstatements with static conditions.  If we remove unreachable\n\tcode (including the return statement) from a function, add\n\t\"raise Program_Error\", so we won't warn about missing returns.\n\tRemove Original_Node in test for N_Raise_Statement; it's not\n\tneeded.  Remove test for CodePeer_Mode; if Operating_Mode =\n\tGenerate_Code, then CodePeer_Mode can't be True.  Misc cleanup.\n\tDo not reuse Nxt variable for unrelated purpose (the usage in\n\tthe Kill_Dead_Code loop is entirely local to the loop).\n\t* sem_ch6.adb: Add check for Is_Transfer. Misc cleanup.\n\t* sem_prag.adb: Minor.\n\t* sem_res.adb: Minor.\n\t* sem_util.adb: Minor cleanup.\n\t(Is_Trivial_Boolean): Move to nonnested place, so it can be\n\tcalled from elsewhere.\n\t(Is_Static_Constant_Boolean): New function.\n\t* sem_util.ads (Is_Trivial_Boolean): Export.\n\t(Is_Static_Constant_Boolean): New function.", "tree": {"sha": "171d28ecdb42c209b974001827b72854f9166a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171d28ecdb42c209b974001827b72854f9166a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6882d60a10060a7f3c73e73eb7f10239e1a4f905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6882d60a10060a7f3c73e73eb7f10239e1a4f905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6882d60a10060a7f3c73e73eb7f10239e1a4f905"}], "stats": {"total": 181, "additions": 117, "deletions": 64}, "files": [{"sha": "6e7e72274b8608c6c6d9f55378d6c7884542f099", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -189,7 +189,6 @@ procedure Gnatls is\n    --  Print usage message\n \n    procedure Output_License_Information;\n-   pragma No_Return (Output_License_Information);\n    --  Output license statement, and if not found, output reference to COPYING\n \n    function Image (Restriction : Restriction_Id) return String;\n@@ -894,8 +893,6 @@ procedure Gnatls is\n                      & \" for license terms.\");\n             Write_Eol;\n       end case;\n-\n-      Exit_Program (E_Success);\n    end Output_License_Information;\n \n    -------------------"}, {"sha": "f5a3df92e9eef9473faed37876667dcd9212136a", "filename": "gcc/ada/libgnat/g-socthi.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Flibgnat%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Flibgnat%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socthi.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -187,7 +187,9 @@ package body GNAT.Sockets.Thin is\n          return Res;\n       end if;\n \n-      declare\n+      pragma Warnings (Off, \"unreachable code\");\n+      declare -- unreachable if Thread_Blocking_IO is statically True\n+         pragma Warnings (On, \"unreachable code\");\n          WSet : aliased Fd_Set;\n          Now  : aliased Timeval;\n "}, {"sha": "b2a3661900cc2c236547573b3cd98aa67dd447ff", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -4425,7 +4425,7 @@ package body Sem_Ch5 is\n \n             if not (Present (Current_Subprogram)\n                     and then Ekind (Current_Subprogram) = E_Function\n-                    and then (Nkind (Original_Node (N)) = N_Raise_Statement\n+                    and then (Nkind (N) in N_Raise_Statement\n                                 or else\n                               (Nkind (N) = N_Procedure_Call_Statement\n                                and then Is_Entity_Name (Name (N))\n@@ -4444,39 +4444,59 @@ package body Sem_Ch5 is\n                --  unreachable code, since it is useless and we don't want\n                --  to generate junk warnings.\n \n-               --  We skip this step if we are not in code generation mode\n-               --  or CodePeer mode.\n+               --  We skip this step if we are not in code generation mode.\n \n                --  This is the one case where we remove dead code in the\n                --  semantics as opposed to the expander, and we do not want\n                --  to remove code if we are not in code generation mode, since\n                --  this messes up the tree or loses useful information for\n-               --  CodePeer.\n+               --  analysis tools such as CodePeer.\n \n                --  Note that one might react by moving the whole circuit to\n                --  exp_ch5, but then we lose the warning in -gnatc mode.\n \n-               if Operating_Mode = Generate_Code\n-                 and then not CodePeer_Mode\n-               then\n+               if Operating_Mode = Generate_Code then\n                   loop\n-                     Nxt := Next (N);\n-\n-                     --  Quit deleting when we have nothing more to delete\n-                     --  or if we hit a label (since someone could transfer\n-                     --  control to a label, so we should not delete it).\n+                     declare\n+                        Del : constant Node_Id := Next (N);\n+                        --  Node to be possibly deleted\n+                     begin\n+                        --  Quit deleting when we have nothing more to delete\n+                        --  or if we hit a label (since someone could transfer\n+                        --  control to a label, so we should not delete it).\n \n-                     exit when No (Nxt) or else Nkind (Nxt) = N_Label;\n+                        exit when No (Del) or else Nkind (Del) = N_Label;\n \n-                     --  Statement/declaration is to be deleted\n+                        --  Statement/declaration is to be deleted\n \n-                     Analyze (Nxt);\n-                     Remove (Nxt);\n-                     Kill_Dead_Code (Nxt);\n+                        Analyze (Del);\n+                        Kill_Dead_Code (Del);\n+                        Remove (Del);\n+                     end;\n                   end loop;\n+\n+                  --  If this is a function, we add \"raise Program_Error;\",\n+                  --  because otherwise, we will get incorrect warnings about\n+                  --  falling off the end of the function.\n+\n+                  declare\n+                     Subp : constant Entity_Id := Current_Subprogram;\n+                  begin\n+                     if Present (Subp) and then Ekind (Subp) = E_Function then\n+                        Insert_After_And_Analyze (N,\n+                          Make_Raise_Program_Error (Sloc (Error_Node),\n+                            Reason => PE_Missing_Return));\n+                     end if;\n+                  end;\n+\n                end if;\n \n-               Error_Msg_N (\"??unreachable code!\", Error_Node);\n+               --  Suppress the warning in instances, because a statement can\n+               --  be unreachable in some instances but not others.\n+\n+               if not In_Instance then\n+                  Error_Msg_N (\"??unreachable code!\", Error_Node);\n+               end if;\n             end if;\n \n          --  If the unconditional transfer of control instruction is the\n@@ -4535,9 +4555,33 @@ package body Sem_Ch5 is\n             end if;\n \n             --  This was one of the cases we are looking for (i.e. the parent\n-            --  construct was IF, CASE or block) so decrement count.\n-\n-            Unblocked_Exit_Count := Unblocked_Exit_Count - 1;\n+            --  construct was IF, CASE or block). In most cases, we simply\n+            --  decrement the count. However, if the parent is something like:\n+            --\n+            --     if cond then\n+            --        raise ...; -- or some other jump\n+            --     end if;\n+            --\n+            --  where cond is an expression that is known-true at compile time,\n+            --  we can treat that as just the jump -- i.e. anything following\n+            --  the if statement is unreachable. We don't do this for simple\n+            --  cases like \"if True\" or \"if Debug_Flag\", because that causes\n+            --  too many warnings.\n+\n+            if Nkind (P) = N_If_Statement\n+              and then Present (Then_Statements (P))\n+              and then No (Elsif_Parts (P))\n+              and then No (Else_Statements (P))\n+              and then Is_OK_Static_Expression (Condition (P))\n+              and then Is_True (Expr_Value (Condition (P)))\n+              and then not Is_Trivial_Boolean (Condition (P))\n+              and then not Is_Static_Constant_Name (Condition (P))\n+            then\n+               pragma Assert (Unblocked_Exit_Count = 2);\n+               Unblocked_Exit_Count := 0;\n+            else\n+               Unblocked_Exit_Count := Unblocked_Exit_Count - 1;\n+            end if;\n          end if;\n       end if;\n    end Check_Unreachable_Code;"}, {"sha": "4d766b9433b82d2156bdfe22de37dea81a735c43", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -7564,6 +7564,8 @@ package body Sem_Ch6 is\n       Err  : out Boolean;\n       Proc : Entity_Id := Empty)\n    is\n+      pragma Assert (Mode in 'F' | 'P');\n+      pragma Assert (if Mode = 'F' then No (Proc));\n       Handler : Node_Id;\n \n       procedure Check_Statement_Sequence (L : List_Id);\n@@ -7613,15 +7615,13 @@ package body Sem_Ch6 is\n \n          --  Local variables\n \n-         Raise_Exception_Call : Boolean;\n+         Raise_Exception_Call : Boolean := False;\n          --  Set True if statement sequence terminated by Raise_Exception call\n          --  or a Reraise_Occurrence call.\n \n       --  Start of processing for Check_Statement_Sequence\n \n       begin\n-         Raise_Exception_Call := False;\n-\n          --  Get last real statement\n \n          Last_Stm := Last (L);\n@@ -7687,7 +7687,8 @@ package body Sem_Ch6 is\n \n          while Nkind (Last_Stm) = N_Pragma\n \n-         --  Don't count call to SS_Release (can happen after Raise_Exception)\n+           --  Don't count call to SS_Release (can happen after\n+           --  Raise_Exception).\n \n            or else\n              (Nkind (Last_Stm) = N_Procedure_Call_Statement\n@@ -7696,18 +7697,20 @@ package body Sem_Ch6 is\n                 and then\n               Is_RTE (Entity (Name (Last_Stm)), RE_SS_Release))\n \n-         --  Don't count exception junk\n+           --  Don't count exception junk\n \n            or else\n              (Nkind (Last_Stm) in\n                 N_Goto_Statement | N_Label | N_Object_Declaration\n                and then Exception_Junk (Last_Stm))\n            or else Nkind (Last_Stm) in N_Push_xxx_Label | N_Pop_xxx_Label\n \n-         --  Inserted code, such as finalization calls, is irrelevant: we only\n-         --  need to check original source.\n+           --  Inserted code, such as finalization calls, is irrelevant; we\n+           --  only need to check original source. If we see a transfer of\n+           --  control, we stop.\n \n-           or else Is_Rewrite_Insertion (Last_Stm)\n+           or else (Is_Rewrite_Insertion (Last_Stm)\n+                      and then not Is_Transfer (Last_Stm))\n          loop\n             Prev (Last_Stm);\n          end loop;"}, {"sha": "a24d19eacbb76dc7d970964673c1d7cee09f939f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -6694,7 +6694,7 @@ package body Sem_Prag is\n                if Loc not in Source_First (Sindex) .. Source_Last (Sindex) then\n                   --  We do not want to raise an exception here since this code\n                   --  is part of the bootstrap path where we cannot rely on\n-                  --  exception proapgation working.\n+                  --  exception propagation working.\n                   --  Instead the caller should check for N being rewritten as\n                   --  a null statement.\n                   --  This code triggers when compiling a-except.adb."}, {"sha": "44fc955de74a5394ace16e149fcf998398faa110", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -7196,9 +7196,7 @@ package body Sem_Res is\n \n       --  Check unreachable code after calls to procedures with No_Return\n \n-      if Ekind (Nam) = E_Procedure\n-        and then No_Return (Nam)\n-      then\n+      if Ekind (Nam) = E_Procedure and then No_Return (Nam) then\n          Check_Unreachable_Code (N);\n       end if;\n "}, {"sha": "cfbf01092a65897d5490a448e497c1f2f49c26aa", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -4868,9 +4868,6 @@ package body Sem_Util is\n       --  and post-state. Prag is a [refined] postcondition or a contract-cases\n       --  pragma. Result_Seen is set when the pragma mentions attribute 'Result\n \n-      function Is_Trivial_Boolean (N : Node_Id) return Boolean;\n-      --  Determine whether source node N denotes \"True\" or \"False\"\n-\n       -------------------------------------------\n       -- Check_Result_And_Post_State_In_Pragma --\n       -------------------------------------------\n@@ -5243,20 +5240,6 @@ package body Sem_Util is\n          end if;\n       end Check_Result_And_Post_State_In_Pragma;\n \n-      ------------------------\n-      -- Is_Trivial_Boolean --\n-      ------------------------\n-\n-      function Is_Trivial_Boolean (N : Node_Id) return Boolean is\n-      begin\n-         return\n-           Comes_From_Source (N)\n-             and then Is_Entity_Name (N)\n-             and then (Entity (N) = Standard_True\n-                         or else\n-                       Entity (N) = Standard_False);\n-      end Is_Trivial_Boolean;\n-\n       --  Local variables\n \n       Items        : constant Node_Id := Contract (Subp_Id);\n@@ -21501,19 +21484,15 @@ package body Sem_Util is\n       Kind : constant Node_Kind := Nkind (N);\n \n    begin\n-      if Kind = N_Simple_Return_Statement\n-           or else\n-         Kind = N_Extended_Return_Statement\n-           or else\n-         Kind = N_Goto_Statement\n-           or else\n-         Kind = N_Raise_Statement\n-           or else\n-         Kind = N_Requeue_Statement\n+      if Kind in N_Simple_Return_Statement\n+               | N_Extended_Return_Statement\n+               | N_Goto_Statement\n+               | N_Raise_Statement\n+               | N_Requeue_Statement\n       then\n          return True;\n \n-      elsif (Kind = N_Exit_Statement or else Kind in N_Raise_xxx_Error)\n+      elsif Kind in N_Exit_Statement | N_Raise_xxx_Error\n         and then No (Condition (N))\n       then\n          return True;\n@@ -21542,6 +21521,29 @@ package body Sem_Util is\n       return No (U) or else U = Uint_1;\n    end Is_True;\n \n+   ------------------------\n+   -- Is_Trivial_Boolean --\n+   ------------------------\n+\n+   function Is_Trivial_Boolean (N : Node_Id) return Boolean is\n+   begin\n+      return Comes_From_Source (N)\n+        and then Nkind (N) in N_Identifier | N_Expanded_Name\n+        and then Entity (N) in Standard_True | Standard_False;\n+   end Is_Trivial_Boolean;\n+\n+   -----------------------------\n+   -- Is_Static_Constant_Name --\n+   -----------------------------\n+\n+   function Is_Static_Constant_Name (N : Node_Id) return Boolean is\n+   begin\n+      return Comes_From_Source (N)\n+        and then Is_Static_Expression (N)\n+        and then Nkind (N) in N_Identifier | N_Expanded_Name\n+        and then Ekind (Entity (N)) = E_Constant;\n+   end Is_Static_Constant_Name;\n+\n    --------------------------------------\n    -- Is_Unchecked_Conversion_Instance --\n    --------------------------------------"}, {"sha": "e5b1118d97995a4c3773f16c70af3556eec88d56", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a64ee3903166dcb1a7803fbf49c31d0f89875a8/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=6a64ee3903166dcb1a7803fbf49c31d0f89875a8", "patch": "@@ -2481,6 +2481,13 @@ package Sem_Util is\n    --  unconditional transfer of control at run time, i.e. the following\n    --  statement definitely will not be executed.\n \n+   function Is_Trivial_Boolean (N : Node_Id) return Boolean;\n+   --  Determine whether source node N denotes \"True\" or \"False\". Note that\n+   --  this is not true for expressions that got folded to True or False.\n+\n+   function Is_Static_Constant_Name (N : Node_Id) return Boolean;\n+   --  True if N is a name that statically denotes a static constant.\n+\n    function Is_Unchecked_Conversion_Instance (Id : Entity_Id) return Boolean;\n    --  Determine whether an arbitrary entity denotes an instance of function\n    --  Ada.Unchecked_Conversion."}]}