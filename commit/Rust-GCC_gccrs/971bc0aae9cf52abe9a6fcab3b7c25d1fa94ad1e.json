{"sha": "971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "node_id": "C_kwDOANBUbNoAKDk3MWJjMGFhZTljZjUyYWJlOWE2ZmNhYjNiN2MyNWQxZmE5NGFkMWU", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-23T16:32:38Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-27T13:23:43Z"}, "message": "c++: Don't quote nothrow in diagnostic\n\nIn <https://gcc.gnu.org/pipermail/gcc-patches/2022-September/602057.html>\nJason noticed that we quote \"nothrow\" in diagnostics even though it's\nnot a keyword in C++.  This patch removes the quotes and also drops\n\"nothrow\" from c_keywords.\n\ngcc/c-family/ChangeLog:\n\n\t* c-format.cc (c_keywords): Drop nothrow.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (diagnose_trait_expr): Say \"nothrow\" without quotes\n\trather than in quotes.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-traits3.C: Adjust expected diagnostics.", "tree": {"sha": "2ab05b1ecf8961cfa1ef1fd40b464537043ed2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ab05b1ecf8961cfa1ef1fd40b464537043ed2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "a2026591ed196814f86fdb09a6094bdb13cbb4c6", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "patch": "@@ -2900,7 +2900,7 @@ static const token_t cxx_opers[] =\n   };\n \n /* Common C/C++ keywords that are expected to be quoted within the format\n-   string.  Keywords like auto, inline, or volatile are exccluded because\n+   string.  Keywords like auto, inline, or volatile are excluded because\n    they are sometimes used in common terms like /auto variables/, /inline\n    function/, or /volatile access/ where they should not be quoted.  */\n \n@@ -2927,7 +2927,6 @@ static const token_t c_keywords[] =\n    NAME (\"noinline\", NULL),\n    NAME (\"nonnull\", NULL),\n    NAME (\"noreturn\", NULL),\n-   NAME (\"nothrow\", NULL),\n    NAME (\"offsetof\", NULL),\n    NAME (\"readonly\", \"read-only\"),\n    NAME (\"readwrite\", \"read-write\"),"}, {"sha": "266ec581a2026157718bfb6a891d882770130689", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "patch": "@@ -3592,13 +3592,13 @@ diagnose_trait_expr (tree expr, tree args)\n   switch (TRAIT_EXPR_KIND (expr))\n     {\n     case CPTK_HAS_NOTHROW_ASSIGN:\n-      inform (loc, \"  %qT is not %<nothrow%> copy assignable\", t1);\n+      inform (loc, \"  %qT is not nothrow copy assignable\", t1);\n       break;\n     case CPTK_HAS_NOTHROW_CONSTRUCTOR:\n-      inform (loc, \"  %qT is not %<nothrow%> default constructible\", t1);\n+      inform (loc, \"  %qT is not nothrow default constructible\", t1);\n       break;\n     case CPTK_HAS_NOTHROW_COPY:\n-      inform (loc, \"  %qT is not %<nothrow%> copy constructible\", t1);\n+      inform (loc, \"  %qT is not nothrow copy constructible\", t1);\n       break;\n     case CPTK_HAS_TRIVIAL_ASSIGN:\n       inform (loc, \"  %qT is not trivially copy assignable\", t1);\n@@ -3674,7 +3674,7 @@ diagnose_trait_expr (tree expr, tree args)\n       inform (loc, \"  %qT is not trivially assignable from %qT\", t1, t2);\n       break;\n     case CPTK_IS_NOTHROW_ASSIGNABLE:\n-      inform (loc, \"  %qT is not %<nothrow%> assignable from %qT\", t1, t2);\n+      inform (loc, \"  %qT is not nothrow assignable from %qT\", t1, t2);\n       break;\n     case CPTK_IS_CONSTRUCTIBLE:\n       if (!t2)\n@@ -3690,9 +3690,9 @@ diagnose_trait_expr (tree expr, tree args)\n       break;\n     case CPTK_IS_NOTHROW_CONSTRUCTIBLE:\n       if (!t2)\n-\tinform (loc, \"  %qT is not %<nothrow%> default constructible\", t1);\n+\tinform (loc, \"  %qT is not nothrow default constructible\", t1);\n       else\n-\tinform (loc, \"  %qT is not %<nothrow%> constructible from %qE\", t1, t2);\n+\tinform (loc, \"  %qT is not nothrow constructible from %qE\", t1, t2);\n       break;\n     case CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS:\n       inform (loc, \"  %qT does not have unique object representations\", t1);\n@@ -3701,7 +3701,7 @@ diagnose_trait_expr (tree expr, tree args)\n       inform (loc, \"  %qT is not convertible from %qE\", t2, t1);\n       break;\n     case CPTK_IS_NOTHROW_CONVERTIBLE:\n-\tinform (loc, \"  %qT is not %<nothrow%> convertible from %qE\", t2, t1);\n+\tinform (loc, \"  %qT is not nothrow convertible from %qE\", t2, t1);\n       break;\n     case CPTK_REF_CONSTRUCTS_FROM_TEMPORARY:\n       inform (loc, \"  %qT is not a reference that binds to a temporary \""}, {"sha": "3e87da4611eda0eabba86f2af5fadfff32fa5eaa", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-traits3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-traits3.C?ref=971bc0aae9cf52abe9a6fcab3b7c25d1fa94ad1e", "patch": "@@ -21,7 +21,7 @@ concept TriviallyAssignable = __is_trivially_assignable(T, U);\n \n template<class T, class U>\n concept NothrowAssignable = __is_nothrow_assignable(T, U);\n-// { dg-message \"'S' is not 'nothrow' assignable from 'int'\" \"\" { target *-*-* } .-1  }\n+// { dg-message \"'S' is not nothrow assignable from 'int'\" \"\" { target *-*-* } .-1  }\n \n template<class T, class... Args>\n concept Constructible = __is_constructible(T, Args...);\n@@ -37,9 +37,9 @@ concept TriviallyConstructible = __is_trivially_constructible(T, Args...);\n \n template<class T, class... Args>\n concept NothrowConstructible = __is_nothrow_constructible(T, Args...);\n-// { dg-message \"'S' is not 'nothrow' default constructible\" \"\" { target *-*-* } .-1  }\n-// { dg-message \"'S' is not 'nothrow' constructible from 'int'\" \"\" { target *-*-* } .-2  }\n-// { dg-message \"'S' is not 'nothrow' constructible from 'int, char'\" \"\" { target *-*-* } .-3  }\n+// { dg-message \"'S' is not nothrow default constructible\" \"\" { target *-*-* } .-1  }\n+// { dg-message \"'S' is not nothrow constructible from 'int'\" \"\" { target *-*-* } .-2  }\n+// { dg-message \"'S' is not nothrow constructible from 'int, char'\" \"\" { target *-*-* } .-3  }\n \n template<class T>\n concept UniqueObjReps = __has_unique_object_representations(T);"}]}