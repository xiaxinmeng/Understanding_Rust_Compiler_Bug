{"sha": "88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhMzdjNGQ3Mjg5OWM1YTNmNWE3YjJiY2EwYWUwMDk2ZjMyNzBhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:22:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:22:23Z"}, "message": "[AArch64] Use SVE MOV /M of scalars\n\nThis patch uses MOV /M to optimise selects between a duplicated\nscalar variable and a vector.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*aarch64_sel_dup<mode>): New pattern.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/dup_sel_1.C: New test.\n\t* g++.target/aarch64/sve/dup_sel_2.C: Likewise.\n\t* g++.target/aarch64/sve/dup_sel_3.C: Likewise.\n\t* g++.target/aarch64/sve/dup_sel_4.C: Likewise.\n\t* g++.target/aarch64/sve/dup_sel_5.C: Likewise.\n\t* g++.target/aarch64/sve/dup_sel_6.C: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274442", "tree": {"sha": "3ad3a1bc49ce7519cdbd9915c37e5abc003a3bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ad3a1bc49ce7519cdbd9915c37e5abc003a3bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29f7dd50de9e8e46f7e247c53f3b0405a3dadd9"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "73156f105c3bc2ed55ccef0983fd16c31033122c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (*aarch64_sel_dup<mode>): New pattern.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "e12b5d954f8c3b2acd1074d05909f0fe30595f77", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -3070,6 +3070,29 @@\n   [(set_attr \"movprfx\" \"*,*,*,*,yes,yes,yes\")]\n )\n \n+;; Optimize selects between a duplicated scalar variable and another vector,\n+;; the latter of which can be a zero constant or a variable.  Treat duplicates\n+;; of GPRs as being more expensive than duplicates of FPRs, since they\n+;; involve a cross-file move.\n+(define_insn \"*aarch64_sel_dup<mode>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=?w, w, ??w, ?&w, ??&w, ?&w\")\n+\t(unspec:SVE_ALL\n+\t  [(match_operand:<VPRED> 3 \"register_operand\" \"Upa, Upa, Upl, Upl, Upl, Upl\")\n+\t   (vec_duplicate:SVE_ALL\n+\t     (match_operand:<VEL> 1 \"register_operand\" \"r, w, r, w, r, w\"))\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\" \"0, 0, Dz, Dz, w, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   mov\\t%0.<Vetype>, %3/m, %<vwcore>1\n+   mov\\t%0.<Vetype>, %3/m, %<Vetype>1\n+   movprfx\\t%0.<Vetype>, %3/z, %0.<Vetype>\\;mov\\t%0.<Vetype>, %3/m, %<vwcore>1\n+   movprfx\\t%0.<Vetype>, %3/z, %0.<Vetype>\\;mov\\t%0.<Vetype>, %3/m, %<Vetype>1\n+   movprfx\\t%0, %2\\;mov\\t%0.<Vetype>, %3/m, %<vwcore>1\n+   movprfx\\t%0, %2\\;mov\\t%0.<Vetype>, %3/m, %<Vetype>1\"\n+  [(set_attr \"movprfx\" \"*,*,yes,yes,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT,FP] Compare and select\n ;; -------------------------------------------------------------------------"}, {"sha": "de09124e7e04ca6887ebc4ba1505d39c181b2e0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -1,3 +1,13 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* g++.target/aarch64/sve/dup_sel_1.C: New test.\n+\t* g++.target/aarch64/sve/dup_sel_2.C: Likewise.\n+\t* g++.target/aarch64/sve/dup_sel_3.C: Likewise.\n+\t* g++.target/aarch64/sve/dup_sel_4.C: Likewise.\n+\t* g++.target/aarch64/sve/dup_sel_5.C: Likewise.\n+\t* g++.target/aarch64/sve/dup_sel_6.C: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "a59862cf9c3476372e5b631fb66b7993ac4e25a3", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_1.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+\n+void\n+foo (int32_t val)\n+{\n+  register vnx4si x asm (\"z0\");\n+  register vnx4si y asm (\"z0\");\n+  asm volatile (\"\" : \"=w\" (y));\n+  val += 1;\n+  vnx4si z = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? z : y;\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz0\\.s, p[0-7]/m, w[0-9]+\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */"}, {"sha": "47aad2d580facd3599d820ec48352a760855ea89", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_2.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+\n+void\n+foo (int32_t val)\n+{\n+  register vnx4si x asm (\"z0\");\n+  register vnx4si y asm (\"z1\");\n+  asm volatile (\"\" : \"=w\" (y));\n+  val += 1;\n+  vnx4si z = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? z : y;\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0, z1\\n\\tmov\\tz0\\.s, p[0-7]/m, w[0-9]+\\n} } } */"}, {"sha": "e8ec6f8b4b31f404817182e208c11155765236e0", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_3.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+\n+void\n+foo (float val)\n+{\n+  register vnx4sf x asm (\"z0\");\n+  register vnx4sf y asm (\"z0\");\n+  asm volatile (\"\" : \"=w\" (y));\n+  vnx4sf z = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? z : y;\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz0\\.s, p[0-7]/m, s[0-9]+\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */"}, {"sha": "32ca594398e5f4eb3eab287df40e7c290fc165e4", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_4.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+\n+void\n+foo (float val)\n+{\n+  register vnx4sf x asm (\"z0\");\n+  register vnx4sf y asm (\"z1\");\n+  asm volatile (\"\" : \"=w\" (y));\n+  vnx4sf z = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? z : y;\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0, z1\\n\\tmov\\tz0\\.s, p[0-7]/m, s[0-9]+\\n} } } */"}, {"sha": "2fb903a91510d0c49576614b48af549faedfd86b", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_5.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_5.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+\n+void\n+foo (int32_t val)\n+{\n+  register vnx4si x asm (\"z0\");\n+  val += 1;\n+  vnx4si y = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? y : (vnx4si) { 0 };\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0\\.s, p[0-7]/z, z0\\.s\\n\\tmov\\tz0\\.s, p[0-7]/m, w[0-9]+\\n} } } */"}, {"sha": "f2b0181bb82d719fa42f4e7d9cdf37c9784690b8", "filename": "gcc/testsuite/g++.target/aarch64/sve/dup_sel_6.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fdup_sel_6.C?ref=88a37c4d72899c5a3f5a7b2bca0ae0096f3270a3", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+\n+void\n+foo (float val)\n+{\n+  register vnx4sf x asm (\"z0\");\n+  vnx4sf y = { val, val, val, val, val, val, val, val };\n+  x = (vnx4si) { -1, 0, 0, -1, 0, -1, 0, -1 } ? y : (vnx4sf) { 0 };\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz0\\.s, p[0-7]/z, z0\\.s\\n\\tmov\\tz0\\.s, p[0-7]/m, s[0-9]+\\n} } } */"}]}