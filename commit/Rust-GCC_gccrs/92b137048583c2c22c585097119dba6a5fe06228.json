{"sha": "92b137048583c2c22c585097119dba6a5fe06228", "node_id": "C_kwDOANBUbNoAKDkyYjEzNzA0ODU4M2MyYzIyYzU4NTA5NzExOWRiYTZhNWZlMDYyMjg", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-04T14:40:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-05T09:24:55Z"}, "message": "gccrs: Support fully qualified calls to trait items from CallExpr's\n\nFixes #2070\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-resolve-path.cc (HIRCompileBase::query_compile):\n\treuse resolve_method_address to monomorphize the call if required\n\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments):\n\tallow matching against unimplemented trait item bounds\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2070.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "aacc605e53a28780e6d4dd08ab9165c5890c3476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aacc605e53a28780e6d4dd08ab9165c5890c3476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92b137048583c2c22c585097119dba6a5fe06228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b137048583c2c22c585097119dba6a5fe06228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b137048583c2c22c585097119dba6a5fe06228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b137048583c2c22c585097119dba6a5fe06228/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d663acdb6e685c07818aa4229c7b1f2224d678b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d663acdb6e685c07818aa4229c7b1f2224d678b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d663acdb6e685c07818aa4229c7b1f2224d678b"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "4814141905153f34e0252a75303127a19b62b6e6", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=92b137048583c2c22c585097119dba6a5fe06228", "patch": "@@ -186,6 +186,7 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n     = ctx->get_mappings ()->lookup_hir_extern_item (ref, &parent_block);\n   bool is_hir_item = resolved_item != nullptr;\n   bool is_hir_extern_item = resolved_extern_item != nullptr;\n+  bool is_fn = lookup->get_kind () == TyTy::TypeKind::FNDEF;\n   if (is_hir_item)\n     {\n       if (!lookup->has_subsititions_defined ())\n@@ -206,6 +207,21 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n     }\n   else\n     {\n+      if (is_fn)\n+\t{\n+\t  TyTy::FnType *fn = static_cast<TyTy::FnType *> (lookup);\n+\t  TyTy::BaseType *receiver = nullptr;\n+\n+\t  if (fn->is_method ())\n+\t    {\n+\t      receiver = fn->get_self_type ();\n+\t      receiver = receiver->destructure ();\n+\n+\t      return resolve_method_address (fn, ref, receiver, final_segment,\n+\t\t\t\t\t     mappings, expr_locus);\n+\t    }\n+\t}\n+\n       HirId parent_impl_id = UNKNOWN_HIRID;\n       HIR::ImplItem *resolved_item\n \t= ctx->get_mappings ()->lookup_hir_implitem (ref, &parent_impl_id);"}, {"sha": "230da61c3bd86946bf3838f4b4623efad1e41b88", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=92b137048583c2c22c585097119dba6a5fe06228", "patch": "@@ -312,21 +312,19 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n   for (size_t i = offset; i < segments.size (); i++)\n     {\n       HIR::PathExprSegment &seg = segments.at (i);\n-\n-      bool probe_bounds = true;\n       bool probe_impls = !reciever_is_generic;\n-      bool ignore_mandatory_trait_items = !reciever_is_generic;\n \n       // probe the path is done in two parts one where we search impls if no\n       // candidate is found then we search extensions from traits\n       auto candidates\n \t= PathProbeType::Probe (prev_segment, seg.get_segment (), probe_impls,\n-\t\t\t\tfalse, ignore_mandatory_trait_items);\n+\t\t\t\tfalse, true /*ignore_mandatory_trait_items*/);\n       if (candidates.size () == 0)\n \t{\n \t  candidates\n \t    = PathProbeType::Probe (prev_segment, seg.get_segment (), false,\n-\t\t\t\t    probe_bounds, ignore_mandatory_trait_items);\n+\t\t\t\t    true /*probe_bounds*/,\n+\t\t\t\t    false /*ignore_mandatory_trait_items*/);\n \n \t  if (candidates.size () == 0)\n \t    {"}, {"sha": "46f35209f4dd2b1eaaac1cbaee82155e96839272", "filename": "gcc/testsuite/rust/compile/issue-2070.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2070.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92b137048583c2c22c585097119dba6a5fe06228/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2070.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2070.rs?ref=92b137048583c2c22c585097119dba6a5fe06228", "patch": "@@ -0,0 +1,22 @@\n+trait Foo {\n+    fn get(self) -> i32;\n+}\n+\n+struct Bar(i32);\n+impl Foo for Bar {\n+    fn get(self) -> i32 {\n+        self.0\n+    }\n+}\n+\n+fn type_bound_test<T: Foo>(a: T) -> i32 {\n+    Foo::get(a)\n+}\n+\n+fn main() {\n+    let a;\n+    a = Bar(456);\n+\n+    let b;\n+    b = type_bound_test(a);\n+}"}]}