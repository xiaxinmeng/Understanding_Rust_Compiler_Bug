{"sha": "fa18085a32df06be6e7d899fd804d537c0149baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExODA4NWEzMmRmMDZiZTZlN2Q4OTlmZDgwNGQ1MzdjMDE0OWJhZg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-08T21:23:48Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:11:13Z"}, "message": "aarch64: Use RTL builtins for [su]paddl[q] intrinsics\n\nRewrite [su]paddl[q] Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]addlp\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>addlp<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vpaddl_s8): Use RTL builtin\n\tinstead of inline asm.\n\t(vpaddl_s16): Likewise.\n\t(vpaddl_s32): Likewise.\n\t(vpaddl_u8): Likewise.\n\t(vpaddl_u16): Likewise.\n\t(vpaddl_u32): Likewise.\n\t(vpaddlq_s8): Likewise.\n\t(vpaddlq_s16): Likewise.\n\t(vpaddlq_s32): Likewise.\n\t(vpaddlq_u8): Likewise.\n\t(vpaddlq_u16): Likewise.\n\t(vpaddlq_u32): Liwewise.\n\t* config/aarch64/iterators.md: Define [SU]ADDLP unspecs with\n\tappropriate attributes.", "tree": {"sha": "536f7c6f7f11e9ccb3eabe3383dc32585780bcb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536f7c6f7f11e9ccb3eabe3383dc32585780bcb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa18085a32df06be6e7d899fd804d537c0149baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa18085a32df06be6e7d899fd804d537c0149baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa18085a32df06be6e7d899fd804d537c0149baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa18085a32df06be6e7d899fd804d537c0149baf/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2b36024c94bc32465777927092cdbdf2d95204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2b36024c94bc32465777927092cdbdf2d95204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2b36024c94bc32465777927092cdbdf2d95204"}], "stats": {"total": 103, "additions": 31, "deletions": 72}, "files": [{"sha": "ecf80197f8e84f3d1c92442cdc3f73207d2edd0c", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=fa18085a32df06be6e7d899fd804d537c0149baf", "patch": "@@ -154,6 +154,10 @@\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n \n+  /* Implemented by aarch64_<su>addlp<mode>.  */\n+  BUILTIN_VDQV_L (UNOP, saddlp, 0, NONE)\n+  BUILTIN_VDQV_L (UNOPU, uaddlp, 0, NONE)\n+\n   /* Implemented by aarch64_<su>addlv<mode>.  */\n   BUILTIN_VDQV_L (UNOP, saddlv, 0, NONE)\n   BUILTIN_VDQV_L (UNOPU, uaddlv, 0, NONE)"}, {"sha": "8aae6a649624c41d182fcf2b0d967d60c153a8b0", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fa18085a32df06be6e7d899fd804d537c0149baf", "patch": "@@ -3149,6 +3149,15 @@\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n+(define_insn \"aarch64_<su>addlp<mode>\"\n+ [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n+       (unspec:<VDBLW> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n+\t\t    USADDLP))]\n+ \"TARGET_SIMD\"\n+ \"<su>addlp\\\\t%0.<Vwhalf>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+)\n+\n ;; ADDV with result zero-extended to SI/DImode (for popcount).\n (define_insn \"aarch64_zero_extend<GPI:mode>_reduc_plus_<VDQV_E:mode>\"\n  [(set (match_operand:GPI 0 \"register_operand\" \"=w\")"}, {"sha": "7eed6c6362ff89fb12811cda81fe0173aa61bc59", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=fa18085a32df06be6e7d899fd804d537c0149baf", "patch": "@@ -8529,144 +8529,84 @@ __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_s8 (int8x8_t __a)\n {\n-  int16x4_t __result;\n-  __asm__ (\"saddlp %0.4h,%1.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlpv8qi (__a);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_s16 (int16x4_t __a)\n {\n-  int32x2_t __result;\n-  __asm__ (\"saddlp %0.2s,%1.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlpv4hi (__a);\n }\n \n __extension__ extern __inline int64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_s32 (int32x2_t __a)\n {\n-  int64x1_t __result;\n-  __asm__ (\"saddlp %0.1d,%1.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return (int64x1_t) __builtin_aarch64_saddlpv2si (__a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_u8 (uint8x8_t __a)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"uaddlp %0.4h,%1.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlpv8qi_uu (__a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_u16 (uint16x4_t __a)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"uaddlp %0.2s,%1.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlpv4hi_uu (__a);\n }\n \n __extension__ extern __inline uint64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddl_u32 (uint32x2_t __a)\n {\n-  uint64x1_t __result;\n-  __asm__ (\"uaddlp %0.1d,%1.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint64x1_t) __builtin_aarch64_uaddlpv2si_uu (__a);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_s8 (int8x16_t __a)\n {\n-  int16x8_t __result;\n-  __asm__ (\"saddlp %0.8h,%1.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlpv16qi (__a);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_s16 (int16x8_t __a)\n {\n-  int32x4_t __result;\n-  __asm__ (\"saddlp %0.4s,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlpv8hi (__a);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_s32 (int32x4_t __a)\n {\n-  int64x2_t __result;\n-  __asm__ (\"saddlp %0.2d,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlpv4si (__a);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_u8 (uint8x16_t __a)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uaddlp %0.8h,%1.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlpv16qi_uu (__a);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_u16 (uint16x8_t __a)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uaddlp %0.4s,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlpv8hi_uu (__a);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddlq_u32 (uint32x4_t __a)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uaddlp %0.2d,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlpv4si_uu (__a);\n }\n \n __extension__ extern __inline int8x16_t"}, {"sha": "8a765ea8a32b6e1febbeeafc726b316dc01055ae", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa18085a32df06be6e7d899fd804d537c0149baf/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=fa18085a32df06be6e7d899fd804d537c0149baf", "patch": "@@ -550,6 +550,8 @@\n     UNSPEC_SSHLL\t; Used in aarch64-simd.md.\n     UNSPEC_USHLL\t; Used in aarch64-simd.md.\n     UNSPEC_ADDP\t\t; Used in aarch64-simd.md.\n+    UNSPEC_SADDLP\t; Used in aarch64-simd.md.\n+    UNSPEC_UADDLP\t; Used in aarch64-simd.md.\n     UNSPEC_TBL\t\t; Used in vector permute patterns.\n     UNSPEC_TBX\t\t; Used in vector permute patterns.\n     UNSPEC_CONCAT\t; Used in vector permute patterns.\n@@ -2209,6 +2211,8 @@\n \n (define_int_iterator SVE_INT_ADDV [UNSPEC_SADDV UNSPEC_UADDV])\n \n+(define_int_iterator USADDLP [UNSPEC_SADDLP UNSPEC_UADDLP])\n+\n (define_int_iterator USADDLV [UNSPEC_SADDLV UNSPEC_UADDLV])\n \n (define_int_iterator LOGICALF [UNSPEC_ANDF UNSPEC_IORF UNSPEC_XORF])\n@@ -2961,6 +2965,8 @@\n ;; \"s\" for signed operations and \"u\" for unsigned ones.\n (define_int_attr su [(UNSPEC_SADDV \"s\")\n \t\t     (UNSPEC_UADDV \"u\")\n+\t\t     (UNSPEC_SADDLP \"s\")\n+\t\t     (UNSPEC_UADDLP \"u\")\n \t\t     (UNSPEC_SADDLV \"s\")\n \t\t     (UNSPEC_UADDLV \"u\")\n \t\t     (UNSPEC_UNPACKSHI \"s\")"}]}