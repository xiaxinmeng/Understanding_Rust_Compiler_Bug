{"sha": "a03f1b22cb818671a82fad00121360eda6ce6e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzZjFiMjJjYjgxODY3MWE4MmZhZDAwMTIxMzYwZWRhNmNlNmUzOA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-07-21T17:15:22Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-07-21T17:15:22Z"}, "message": "spu.md (\"div<mode>3\"): Convert into expander, move original insn and splitter contents into ...\n\n\t* config/spu/spu.md (\"div<mode>3\"): Convert into expander, move\n\toriginal insn and splitter contents into ...\n\t(\"*div<mode>3_fast\"): ... this new pattern.  Enable only if\n\tflag_unsafe_math_optimizations.  Add dummy scratch register.\n\t(\"*div<mode>3_adjusted\"): New insn and splitter.  Enable only if\n\t!flag_unsafe_math_optimizations.  Returns number with next\n\thighest magnitude if this is still less or equal to the true\n\tquotient in magnitude.\n\nFrom-SVN: r138036", "tree": {"sha": "13c5838936e557ce907e0853e8bd41a01ea10a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c5838936e557ce907e0853e8bd41a01ea10a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03f1b22cb818671a82fad00121360eda6ce6e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03f1b22cb818671a82fad00121360eda6ce6e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03f1b22cb818671a82fad00121360eda6ce6e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03f1b22cb818671a82fad00121360eda6ce6e38/comments", "author": null, "committer": null, "parents": [{"sha": "279086c39066177adac8f9589683429e01c325a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279086c39066177adac8f9589683429e01c325a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279086c39066177adac8f9589683429e01c325a3"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "4838ebe83be6c7d94b2168c91af6f6f25ac06553", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03f1b22cb818671a82fad00121360eda6ce6e38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03f1b22cb818671a82fad00121360eda6ce6e38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a03f1b22cb818671a82fad00121360eda6ce6e38", "patch": "@@ -1,3 +1,14 @@\n+2008-07-21  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.md (\"div<mode>3\"): Convert into expander, move\n+\toriginal insn and splitter contents into ...\n+\t(\"*div<mode>3_fast\"): ... this new pattern.  Enable only if\n+\tflag_unsafe_math_optimizations.  Add dummy scratch register.\n+\t(\"*div<mode>3_adjusted\"): New insn and splitter.  Enable only if\n+\t!flag_unsafe_math_optimizations.  Returns number with next\n+\thighest magnitude if this is still less or equal to the true\n+\tquotient in magnitude.\n+\n 2008-07-21  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* Makefile.in: Replace toplev.h with TOPLEV_H."}, {"sha": "c267efd29d1b47a783cc51cc7f52fdcff7f10477", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03f1b22cb818671a82fad00121360eda6ce6e38/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03f1b22cb818671a82fad00121360eda6ce6e38/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=a03f1b22cb818671a82fad00121360eda6ce6e38", "patch": "@@ -1721,20 +1721,33 @@\n   [(set_attr \"type\" \"multi0\")\n    (set_attr \"length\" \"80\")])\n \n-(define_insn_and_split \"div<mode>3\"\n+(define_expand \"div<mode>3\"\n+  [(parallel\n+    [(set (match_operand:VSF 0 \"spu_reg_operand\" \"\")\t\n+\t  (div:VSF (match_operand:VSF 1 \"spu_reg_operand\" \"\")\n+\t\t   (match_operand:VSF 2 \"spu_reg_operand\" \"\")))\n+     (clobber (match_scratch:VSF 3 \"\"))\n+     (clobber (match_scratch:VSF 4 \"\"))\n+     (clobber (match_scratch:VSF 5 \"\"))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn_and_split \"*div<mode>3_fast\"\n   [(set (match_operand:VSF 0 \"spu_reg_operand\" \"=r\")\n \t(div:VSF (match_operand:VSF 1 \"spu_reg_operand\" \"r\")\n \t\t (match_operand:VSF 2 \"spu_reg_operand\" \"r\")))\n    (clobber (match_scratch:VSF 3 \"=&r\"))\n-   (clobber (match_scratch:VSF 4 \"=&r\"))]\n-  \"\"\n+   (clobber (match_scratch:VSF 4 \"=&r\"))\n+   (clobber (scratch:VSF))]\n+  \"flag_unsafe_math_optimizations\"\n   \"#\"\n   \"reload_completed\"\n   [(set (match_dup:VSF 0)\n \t(div:VSF (match_dup:VSF 1)\n \t\t (match_dup:VSF 2)))\n    (clobber (match_dup:VSF 3))\n-   (clobber (match_dup:VSF 4))]\n+   (clobber (match_dup:VSF 4))\n+   (clobber (scratch:VSF))]\n   {\n     emit_insn (gen_frest_<mode>(operands[3], operands[2]));\n     emit_insn (gen_fi_<mode>(operands[3], operands[2], operands[3]));\n@@ -1744,6 +1757,50 @@\n     DONE;\n   })\n \n+(define_insn_and_split \"*div<mode>3_adjusted\"\n+  [(set (match_operand:VSF 0 \"spu_reg_operand\" \"=r\")\n+\t(div:VSF (match_operand:VSF 1 \"spu_reg_operand\" \"r\")\n+\t\t (match_operand:VSF 2 \"spu_reg_operand\" \"r\")))\n+   (clobber (match_scratch:VSF 3 \"=&r\"))\n+   (clobber (match_scratch:VSF 4 \"=&r\"))\n+   (clobber (match_scratch:VSF 5 \"=&r\"))]\n+  \"!flag_unsafe_math_optimizations\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:VSF 0)\n+\t(div:VSF (match_dup:VSF 1)\n+\t\t (match_dup:VSF 2)))\n+   (clobber (match_dup:VSF 3))\n+   (clobber (match_dup:VSF 4))\n+   (clobber (match_dup:VSF 5))]\n+  {\n+    emit_insn (gen_frest_<mode> (operands[3], operands[2]));\n+    emit_insn (gen_fi_<mode> (operands[3], operands[2], operands[3]));\n+    emit_insn (gen_mul<mode>3 (operands[4], operands[1], operands[3]));\n+    emit_insn (gen_fnms_<mode> (operands[5], operands[4], operands[2], operands[1]));\n+    emit_insn (gen_fma_<mode> (operands[3], operands[5], operands[3], operands[4]));\n+\n+   /* Due to truncation error, the quotient result may be low by 1 ulp.\n+      Conditionally add one if the estimate is too small in magnitude.  */\n+\n+    emit_move_insn (gen_lowpart (<F2I>mode, operands[4]),\n+\t\t    spu_const (<F2I>mode, 0x80000000ULL));\n+    emit_move_insn (gen_lowpart (<F2I>mode, operands[5]),\n+\t\t    spu_const (<F2I>mode, 0x3f800000ULL));\n+    emit_insn (gen_selb (operands[5], operands[5], operands[1], operands[4]));\n+\n+    emit_insn (gen_add<f2i>3 (gen_lowpart (<F2I>mode, operands[4]),\n+\t\t\t      gen_lowpart (<F2I>mode, operands[3]),\n+\t\t\t      spu_const (<F2I>mode, 1)));\n+    emit_insn (gen_fnms_<mode> (operands[0], operands[2], operands[4], operands[1]));\n+    emit_insn (gen_mul<mode>3 (operands[0], operands[0], operands[5]));\n+    emit_insn (gen_cgt_<f2i> (gen_lowpart (<F2I>mode, operands[0]),\n+\t\t\t      gen_lowpart (<F2I>mode, operands[0]),\n+\t\t\t      spu_const (<F2I>mode, -1)));\n+    emit_insn (gen_selb (operands[0], operands[3], operands[4], operands[0]));\n+    DONE;\n+  })\n+\n ;; Taken from STI's gcc\n ;; Does not correctly handle INF or NAN.\n (define_expand \"divdf3\""}]}