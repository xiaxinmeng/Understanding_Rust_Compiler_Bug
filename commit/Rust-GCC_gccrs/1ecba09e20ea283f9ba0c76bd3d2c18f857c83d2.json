{"sha": "1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVjYmEwOWUyMGVhMjgzZjliYTBjNzZiZDNkMmMxOGY4NTdjODNkMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-18T19:11:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-18T19:11:41Z"}, "message": "sum_diff.cc: Use VERIFY.\n\n2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/26_numerics/numeric/sum_diff.cc: Use VERIFY.\n\t* testsuite/ext/array_allocator/1.cc: Likewise.\n\t* testsuite/ext/array_allocator/2.cc: Likewise.\n\t* testsuite/ext/array_allocator/3.cc: Likewise.\n\t* testsuite/ext/enc_filebuf/char/13598.cc: Likewise.\n\nFrom-SVN: r90878", "tree": {"sha": "c4fe993c1cd3225a8128e966980cbd2cd0da9199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4fe993c1cd3225a8128e966980cbd2cd0da9199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/comments", "author": null, "committer": null, "parents": [{"sha": "c4cb37ead824fa91478bb92862e09b3ee4582a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cb37ead824fa91478bb92862e09b3ee4582a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4cb37ead824fa91478bb92862e09b3ee4582a3e"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "638c420e0c983f3fa14f4c0d30727990ea9b1051", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -1,3 +1,11 @@\n+2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/26_numerics/numeric/sum_diff.cc: Use VERIFY.\n+\t* testsuite/ext/array_allocator/1.cc: Likewise.\n+\t* testsuite/ext/array_allocator/2.cc: Likewise.\n+\t* testsuite/ext/array_allocator/3.cc: Likewise.\n+\t* testsuite/ext/enc_filebuf/char/13598.cc: Likewise.\n+\n 2004-11-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get<>::do_get(void*&)):"}, {"sha": "64690be500b1be63a457b4b4da8054dd6f17a605", "filename": "libstdc++-v3/testsuite/26_numerics/numeric/sum_diff.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric%2Fsum_diff.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric%2Fsum_diff.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fnumeric%2Fsum_diff.cc?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,7 +21,7 @@\n \n #include <algorithm>\n #include <numeric>\n-#include <cassert>\n+#include <testsuite_hooks.h>\n \n int A[] = {1, 4, 9, 16, 25, 36, 49, 64, 81, 100};\n int B[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};\n@@ -30,13 +30,15 @@ const int N = sizeof(A) / sizeof(int);\n void\n test01()\n {\n-    int D[N];\n+  bool test __attribute__((unused)) = true;\n \n-    std::adjacent_difference(A, A + N, D);\n-    assert(std::equal(D, D + N, B));\n+  int D[N];\n \n-    std::partial_sum(D, D + N, D);\n-    assert(std::equal(D, D + N, A));\n+  std::adjacent_difference(A, A + N, D);\n+  VERIFY( std::equal(D, D + N, B) );\n+  \n+  std::partial_sum(D, D + N, D);\n+  VERIFY( std::equal(D, D + N, A) );\n }\n \n int"}, {"sha": "e0ea6f5ab1339e652827c60cd53ea9b737901e4c", "filename": "libstdc++-v3/testsuite/ext/array_allocator/1.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -25,9 +25,9 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <cassert>\n #include <string>\n #include <ext/array_allocator.h>\n+#include <testsuite_hooks.h>\n \n typedef char char_type;\n typedef std::char_traits<char_type> traits_type;\n@@ -37,6 +37,8 @@ array_type extern_array;\n \n void test01() \n {\n+  bool test __attribute__((unused)) = true;\n+  \n   using std::basic_string;\n   typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n   typedef basic_string<char_type, traits_type, allocator_type> string_type;\n@@ -50,11 +52,11 @@ void test01()\n     }\n   catch(std::bad_alloc& obj)\n     {\n-      assert(true);\n+      VERIFY( true );\n     }\n   catch(...)\n     {\n-      assert(false);\n+      VERIFY( false );\n     }\n }\n "}, {"sha": "74b2bc9a802c9b1f37879fe0ca06d34611b7581a", "filename": "libstdc++-v3/testsuite/ext/array_allocator/2.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -25,10 +25,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <cassert>\n #include <string>\n #include <iostream>\n #include <ext/array_allocator.h>\n+#include <testsuite_hooks.h>\n \n typedef char char_type;\n typedef std::char_traits<char_type> traits_type;\n@@ -38,6 +38,8 @@ array_type extern_array;\n \n void test01() \n {\n+  bool test __attribute__((unused)) = true;\n+\n   using std::basic_string;\n   typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n   typedef basic_string<char_type, traits_type, allocator_type> string_type;\n@@ -52,11 +54,11 @@ void test01()\n     }\n   catch(std::bad_alloc& obj)\n     {\n-      assert(false);\n+      VERIFY( false );\n     }\n   catch(...)\n     {\n-      assert(false);\n+      VERIFY( false );\n     }\n \n   s.append(1, 'c');"}, {"sha": "97ffbb467c56ff3026796dcf774caa9ca42be0f6", "filename": "libstdc++-v3/testsuite/ext/array_allocator/3.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -25,9 +25,9 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <cassert>\n #include <string>\n #include <ext/array_allocator.h>\n+#include <testsuite_hooks.h>\n \n typedef char char_type;\n typedef std::char_traits<char_type> traits_type;\n@@ -37,6 +37,8 @@ array_type extern_array;\n \n void test01() \n {\n+  bool test __attribute__((unused)) = true;\n+\n   using std::basic_string;\n   typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n   typedef basic_string<char_type, traits_type, allocator_type> string_type;\n@@ -51,11 +53,11 @@ void test01()\n     }\n   catch(std::bad_alloc& obj)\n     {\n-      assert(true);\n+      VERIFY( true );\n     }\n   catch(...)\n     {\n-      assert(false);\n+      VERIFY( false );\n     }\n }\n "}, {"sha": "70f83e1bda359ac423494dc509f06425dbd82f84", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13598.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc?ref=1ecba09e20ea283f9ba0c76bd3d2c18f857c83d2", "patch": "@@ -18,16 +18,17 @@\n \n #include <locale>\n #include <cstring>\n-#include <cassert>\n+#include <testsuite_hooks.h>\n #ifdef _GLIBCXX_USE___ENC_TRAITS\n #include <ext/enc_filebuf.h>\n #endif\n \n int main()\n {\n #ifdef _GLIBCXX_USE___ENC_TRAITS\n-  const char* str = \"Hello, world!\\n\";\n+  bool test __attribute__((unused)) = true;\n \n+  const char* str = \"Hello, world!\\n\";\n   std::locale loc(std::locale::classic(),\n \t\t  new std::codecvt<char, char, std::__enc_traits>());\n   std::__enc_traits st(\"ISO-8859-1\", \"ISO-8859-1\");\n@@ -39,8 +40,8 @@ int main()\n   int s = fb.pubsync();\n   fb.close();\n   \n-  assert(n == std::strlen(str));\n-  assert(s == 0);\n+  VERIFY( n == std::strlen(str) );\n+  VERIFY( s == 0 );\n #endif\n   \n   return 0;"}]}