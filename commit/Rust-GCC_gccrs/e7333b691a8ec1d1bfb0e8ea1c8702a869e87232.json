{"sha": "e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczMzNiNjkxYThlYzFkMWJmYjBlOGVhMWM4NzAyYTg2OWU4NzIzMg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-05-31T08:09:09Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-05-31T08:09:09Z"}, "message": "re PR fortran/54190 (TYPE(*)/assumed-rank: Type/rank check too relaxed for dummy procedure)\n\n2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54190\n\tPR fortran/57217\n\t* gfortran.h (gfc_terminal_width): Remove prototype.\n\t* error.c (get_terminal_width): Moved here from misc.c. Renamed.\n\tTry to determine terminal width from environment variable.\n\t* interface.c (compare_type, compare_rank): New functions. Fix assumed\n\ttype/rank handling.\n\t(compare_type_rank, check_dummy_characteristics,\n\tcheck_result_characteristics, gfc_compare_interfaces): Use them.\n\t(symbol_rank): Slightly modified and moved.\n\t* misc.c (gfc_terminal_width): Moved to error.c.\n\n\n2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54190\n\tPR fortran/57217\n\t* gfortran.dg/dummy_procedure_5.f90: Modified error message.\n\t* gfortran.dg/interface_26.f90: Ditto.\n\t* gfortran.dg/proc_ptr_11.f90: Ditto.\n\t* gfortran.dg/proc_ptr_15.f90: Ditto.\n\t* gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n\t* gfortran.dg/proc_ptr_comp_33.f90: Ditto.\n\t* gfortran.dg/proc_ptr_result_5.f90: Ditto.\n\t* gfortran.dg/typebound_override_1.f90: Ditto.\n\t* gfortran.dg/typebound_override_4.f90: Ditto.\n\t* gfortran.dg/typebound_proc_6.f03: Ditto.\n\t* gfortran.dg/assumed_type_7.f90: New test.\n\t* gfortran.dg/typebound_override_5.f90: New test.\n\t* gfortran.dg/typebound_override_6.f90: New test.\n\t* gfortran.dg/typebound_override_7.f90: New test.\n\nFrom-SVN: r199475", "tree": {"sha": "47677cddfe498b18259a39ec527d93408dae351e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47677cddfe498b18259a39ec527d93408dae351e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e571fa591212572f2839eb64ad879aed81846f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e571fa591212572f2839eb64ad879aed81846f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e571fa591212572f2839eb64ad879aed81846f45"}], "stats": {"total": 350, "additions": 284, "deletions": 66}, "files": [{"sha": "db8d1d09202e15275b2152767269018c36a595bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -1,3 +1,17 @@\n+2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54190\n+\tPR fortran/57217\n+\t* gfortran.h (gfc_terminal_width): Remove prototype.\n+\t* error.c (get_terminal_width): Moved here from misc.c. Renamed.\n+\tTry to determine terminal width from environment variable.\n+\t* interface.c (compare_type, compare_rank): New functions. Fix assumed\n+\ttype/rank handling.\n+\t(compare_type_rank, check_dummy_characteristics,\n+\tcheck_result_characteristics, gfc_compare_interfaces): Use them.\n+\t(symbol_rank): Slightly modified and moved.\n+\t* misc.c (gfc_terminal_width): Moved to error.c.\n+\n 2013-05-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54189"}, {"sha": "ee0dea0c1c7c0c0407062b68ec9616a15d179fb2", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -59,12 +59,27 @@ gfc_pop_suppress_errors (void)\n }\n \n \n+static int\n+get_terminal_width (void)\n+{\n+  const char *p = getenv (\"COLUMNS\");\n+  if (p)\n+    {\n+      int value = atoi (p);\n+      if (value > 0)\n+\treturn value;\n+    }\n+  /* Use a reasonable default.  */\n+  return 80;\n+}\n+\n+\n /* Per-file error initialization.  */\n \n void\n gfc_error_init_1 (void)\n {\n-  terminal_width = gfc_terminal_width ();\n+  terminal_width = get_terminal_width ();\n   errors = 0;\n   warnings = 0;\n   buffer_flag = 0;"}, {"sha": "14da0aff36f9afedb3440206a352e1563ea70e92", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -2436,7 +2436,6 @@ void gfc_start_source_files (void);\n void gfc_end_source_files (void);\n \n /* misc.c */\n-int gfc_terminal_width (void);\n void gfc_clear_ts (gfc_typespec *);\n FILE *gfc_open_file (const char *);\n const char *gfc_basic_typename (bt);"}, {"sha": "f06ecfe3ec45416734472fc87053567c53aa9a80", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 73, "deletions": 33, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -508,18 +508,23 @@ gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)\n }\n \n \n-/* Given two symbols that are formal arguments, compare their ranks\n-   and types.  Returns nonzero if they have the same rank and type,\n-   zero otherwise.  */\n+static int\n+compare_type (gfc_symbol *s1, gfc_symbol *s2)\n+{\n+  if (s2->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))\n+    return 1;\n+\n+  return gfc_compare_types (&s1->ts, &s2->ts) || s2->ts.type == BT_ASSUMED;\n+}\n+\n \n static int\n-compare_type_rank (gfc_symbol *s1, gfc_symbol *s2)\n+compare_rank (gfc_symbol *s1, gfc_symbol *s2)\n {\n   gfc_array_spec *as1, *as2;\n   int r1, r2;\n \n-  if (s1->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK)\n-      || s2->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))\n+  if (s2->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))\n     return 1;\n \n   as1 = (s1->ts.type == BT_CLASS) ? CLASS_DATA (s1)->as : s1->as;\n@@ -528,13 +533,21 @@ compare_type_rank (gfc_symbol *s1, gfc_symbol *s2)\n   r1 = as1 ? as1->rank : 0;\n   r2 = as2 ? as2->rank : 0;\n \n-  if (r1 != r2\n-      && (!as1 || as1->type != AS_ASSUMED_RANK)\n-      && (!as2 || as2->type != AS_ASSUMED_RANK))\n+  if (r1 != r2 && (!as2 || as2->type != AS_ASSUMED_RANK))\n     return 0;\t\t\t/* Ranks differ.  */\n \n-  return gfc_compare_types (&s1->ts, &s2->ts)\n-\t || s1->ts.type == BT_ASSUMED || s2->ts.type == BT_ASSUMED;\n+  return 1;\n+}\n+\n+\n+/* Given two symbols that are formal arguments, compare their ranks\n+   and types.  Returns nonzero if they have the same rank and type,\n+   zero otherwise.  */\n+\n+static int\n+compare_type_rank (gfc_symbol *s1, gfc_symbol *s2)\n+{\n+  return compare_type (s1, s2) && compare_rank (s1, s2);\n }\n \n \n@@ -1019,6 +1032,15 @@ generic_correspondence (gfc_formal_arglist *f1, gfc_formal_arglist *f2,\n }\n \n \n+static int\n+symbol_rank (gfc_symbol *sym)\n+{\n+  gfc_array_spec *as;\n+  as = (sym->ts.type == BT_CLASS) ? CLASS_DATA (sym)->as : sym->as;\n+  return as ? as->rank : 0;\n+}\n+\n+\n /* Check if the characteristics of two dummy arguments match,\n    cf. F08:12.3.2.  */\n \n@@ -1030,12 +1052,20 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n     return s1 == s2 ? true : false;\n \n   /* Check type and rank.  */\n-  if (type_must_agree &&\n-      (!compare_type_rank (s1, s2) || !compare_type_rank (s2, s1)))\n+  if (type_must_agree)\n     {\n-      snprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n-\t\ts1->name);\n-      return false;\n+      if (!compare_type (s1, s2) || !compare_type (s2, s1))\n+\t{\n+\t  snprintf (errmsg, err_len, \"Type mismatch in argument '%s' (%s/%s)\",\n+\t\t    s1->name, gfc_typename (&s1->ts), gfc_typename (&s2->ts));\n+\t  return false;\n+\t}\n+      if (!compare_rank (s1, s2))\n+\t{\n+\t  snprintf (errmsg, err_len, \"Rank mismatch in argument '%s' (%i/%i)\",\n+\t\t    s1->name, symbol_rank (s1), symbol_rank (s2));\n+\t  return false;\n+\t}\n     }\n \n   /* Check INTENT.  */\n@@ -1203,9 +1233,16 @@ check_result_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n     return true;\n \n   /* Check type and rank.  */\n-  if (!compare_type_rank (r1, r2))\n+  if (!compare_type (r1, r2))\n+    {\n+      snprintf (errmsg, err_len, \"Type mismatch in function result (%s/%s)\",\n+\t\tgfc_typename (&r1->ts), gfc_typename (&r2->ts));\n+      return false;\n+    }\n+  if (!compare_rank (r1, r2))\n     {\n-      snprintf (errmsg, err_len, \"Type/rank mismatch in function result\");\n+      snprintf (errmsg, err_len, \"Rank mismatch in function result (%i/%i)\",\n+\t\tsymbol_rank (r1), symbol_rank (r2));\n       return false;\n     }\n \n@@ -1437,13 +1474,26 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t\t\t\t\t      errmsg, err_len))\n \t      return 0;\n \t  }\n-\telse if (!compare_type_rank (f2->sym, f1->sym))\n+\telse\n \t  {\n \t    /* Only check type and rank.  */\n-\t    if (errmsg != NULL)\n-\t      snprintf (errmsg, err_len, \"Type/rank mismatch in argument '%s'\",\n-\t\t\tf1->sym->name);\n-\t    return 0;\n+\t    if (!compare_type (f2->sym, f1->sym))\n+\t      {\n+\t\tif (errmsg != NULL)\n+\t\t  snprintf (errmsg, err_len, \"Type mismatch in argument '%s' \"\n+\t\t\t    \"(%s/%s)\", f1->sym->name,\n+\t\t\t    gfc_typename (&f1->sym->ts),\n+\t\t\t    gfc_typename (&f2->sym->ts));\n+\t\treturn 0;\n+\t      }\n+\t    if (!compare_rank (f2->sym, f1->sym))\n+\t      {\n+\t\tif (errmsg != NULL)\n+\t\t  snprintf (errmsg, err_len, \"Rank mismatch in argument '%s' \"\n+\t\t\t    \"(%i/%i)\", f1->sym->name, symbol_rank (f1->sym),\n+\t\t\t    symbol_rank (f2->sym));\n+\t\treturn 0;\n+\t      }\n \t  }\n next:\n \tf1 = f1->next;\n@@ -1746,16 +1796,6 @@ gfc_check_interfaces (gfc_namespace *ns)\n }\n \n \n-static int\n-symbol_rank (gfc_symbol *sym)\n-{\n-  if (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->as)\n-    return CLASS_DATA (sym)->as->rank;\n-\n-  return (sym->as == NULL) ? 0 : sym->as->rank;\n-}\n-\n-\n /* Given a symbol of a formal argument list and an expression, if the\n    formal argument is allocatable, check that the actual argument is\n    allocatable. Returns nonzero if compatible, zero if not compatible.  */"}, {"sha": "9b8f31f68fc598a43bd97a38d7016108a4ece4cd", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -24,15 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n \n \n-/* Get terminal width.  */\n-\n-int\n-gfc_terminal_width (void)\n-{\n-  return 80;\n-}\n-\n-\n /* Initialize a typespec to unknown.  */\n \n void"}, {"sha": "a46912e5a9ba08afcfb9e08e873223116a75395e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -1,3 +1,22 @@\n+2013-05-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54190\n+\tPR fortran/57217\n+\t* gfortran.dg/dummy_procedure_5.f90: Modified error message.\n+\t* gfortran.dg/interface_26.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_11.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_15.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_comp_33.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_result_5.f90: Ditto.\n+\t* gfortran.dg/typebound_override_1.f90: Ditto.\n+\t* gfortran.dg/typebound_override_4.f90: Ditto.\n+\t* gfortran.dg/typebound_proc_6.f03: Ditto.\n+\t* gfortran.dg/assumed_type_7.f90: New test.\n+\t* gfortran.dg/typebound_override_5.f90: New test.\n+\t* gfortran.dg/typebound_override_6.f90: New test.\n+\t* gfortran.dg/typebound_override_7.f90: New test.\n+\n 2013-05-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR middle-end/57073"}, {"sha": "48cb43e7f8de42ff4b92c91bc66d0011e412b0cf", "filename": "gcc/testsuite/gfortran.dg/assumed_type_7.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_7.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! PR 54190: TYPE(*)/assumed-rank: Type/rank check too relaxed for dummy procedure\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+implicit none\n+call sub(f)    ! { dg-error \"Type mismatch in argument\" }\n+contains\n+\n+  subroutine f(x)\n+    type(*) :: x\n+  end subroutine\n+\n+  subroutine sub(g)\n+    interface\n+      subroutine g(x)\n+        integer :: x\n+      end subroutine\n+    end interface\n+  end subroutine\n+\n+end "}, {"sha": "cb0e7c04d0e50164c2d81364711d954a68b186e8", "filename": "gcc/testsuite/gfortran.dg/dummy_procedure_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdummy_procedure_5.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -15,7 +15,7 @@ program main\n   end type\n \n   type(u), external :: ufunc\n-  call sub(ufunc)            ! { dg-error \"Type/rank mismatch in function result\" }\n+  call sub(ufunc)            ! { dg-error \"Type mismatch in function result\" }\n \n contains\n "}, {"sha": "6f8325faf3242853ebe8990f480d51bd53cdc022", "filename": "gcc/testsuite/gfortran.dg/interface_26.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -23,7 +23,7 @@ PROGRAM test\n   USE funcs \n   INTEGER :: rs\n   INTEGER, PARAMETER :: a = 2, b = 1\n-  rs = recSum( a, b, test1, sumInts ) ! { dg-error \"Type/rank mismatch in argument\" }\n+  rs = recSum( a, b, test1, sumInts ) ! { dg-error \"Type mismatch in argument\" }\n   write(*,*) \"Results\", rs\n CONTAINS\n   RECURSIVE INTEGER FUNCTION recSum( a,b,UserFunction,UserOp ) RESULT( res )\n@@ -37,7 +37,7 @@ END FUNCTION UserFunction\n     END INTERFACE\n     INTEGER, EXTERNAL :: UserOp \n \n-    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/rank mismatch in function result\" }\n+    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type mismatch in function result\" }\n \n     if( res .lt. 10 ) then\n        res = recSum( a, res, UserFunction, UserOp ) "}, {"sha": "bee73f45213bd6483abca11b082d023181ab3c03", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -40,11 +40,11 @@ end function p3\n   p2 => p1\n   p1 => p2\n \n-  p1 => abs   ! { dg-error \"Type/rank mismatch in function result\" }\n-  p2 => abs   ! { dg-error \"Type/rank mismatch in function result\" }\n+  p1 => abs   ! { dg-error \"Type mismatch in function result\" }\n+  p2 => abs   ! { dg-error \"Type mismatch in function result\" }\n \n   p3 => dsin\n-  p3 => sin   ! { dg-error \"Type/rank mismatch in function result\" }\n+  p3 => sin   ! { dg-error \"Type mismatch in function result\" }\n \n   contains\n "}, {"sha": "b4f1b2f6ee88ae3b2789e107d8cdbd62ccfdb778", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_15.f90", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -19,10 +19,10 @@\n p6 => p1\n \n ! invalid\n-p1 => iabs   ! { dg-error \"Type/rank mismatch in function result\" }\n-p1 => p2     ! { dg-error \"Type/rank mismatch in function result\" }\n-p1 => p5     ! { dg-error \"Type/rank mismatch in function result\" }\n-p6 => iabs   ! { dg-error \"Type/rank mismatch in function result\" }\n+p1 => iabs   ! { dg-error \"Type mismatch in function result\" }\n+p1 => p2     ! { dg-error \"Type mismatch in function result\" }\n+p1 => p5     ! { dg-error \"Type mismatch in function result\" }\n+p6 => iabs   ! { dg-error \"Type mismatch in function result\" }\n p4 => p2     ! { dg-error \"is not a subroutine\" }\n \n contains\n@@ -32,4 +32,3 @@ subroutine sub(i)\n   end subroutine\n \n end\n-"}, {"sha": "29a2ef9f0d437aa605b28db61760eaef8ee38f13", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_20.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -27,11 +27,11 @@\n procedure(logical),pointer :: pp1\n procedure(complex),pointer :: pp2\n \n-pp1 => pp2        ! { dg-error \"Type/rank mismatch\" }\n-pp2 => o2%ppc     ! { dg-error \"Type/rank mismatch\" }\n+pp1 => pp2        ! { dg-error \"Type mismatch in function result\" }\n+pp2 => o2%ppc     ! { dg-error \"Type mismatch in function result\" }\n \n-o1%ppc => pp1     ! { dg-error \"Type/rank mismatch\" }\n-o1%ppc => o2%ppc  ! { dg-error \"Type/rank mismatch\" }\n+o1%ppc => pp1     ! { dg-error \"Type mismatch in function result\" }\n+o1%ppc => o2%ppc  ! { dg-error \"Type mismatch in function result\" }\n \n contains\n "}, {"sha": "55a768017fa84d2f098d9ae483bf7ce3fb3d5a46", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_33.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_33.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -11,7 +11,7 @@ module m\n \n   type :: rectangle\n     real :: width, height\n-    procedure(get_area_ai), pointer :: get_area => get_my_area  ! { dg-error \"Type/rank mismatch\" }\n+    procedure(get_area_ai), pointer :: get_area => get_my_area  ! { dg-error \"Type mismatch in argument\" }\n   end type rectangle\n \n   abstract interface\n@@ -51,7 +51,7 @@ end function get_area_ai\n   type(rectangle) :: rect\n \n   rect  = rectangle (1.0, 2.0, get1)\n-  rect  = rectangle (3.0, 4.0, get2)  ! { dg-error \"Type/rank mismatch\" }\n+  rect  = rectangle (3.0, 4.0, get2)  ! { dg-error \"Type mismatch in argument\" }\n \n contains\n "}, {"sha": "121fd4d87f9d1a67b87a8d83d93ab6941a2cb41c", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -6,7 +6,7 @@\n \n program test\n   procedure(real), pointer :: p\n-  p => f()  ! { dg-error \"Type/rank mismatch in function result\" }\n+  p => f()  ! { dg-error \"Type mismatch in function result\" }\n contains\n  function f()\n    pointer :: f"}, {"sha": "7eb685615f46ba631b7d2820541383422e29446d", "filename": "gcc/testsuite/gfortran.dg/typebound_override_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_1.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -20,7 +20,7 @@ module m\n   type, extends(t1) :: t2\n    contains\n      procedure, nopass :: a => a2  ! { dg-error \"Character length mismatch in function result\" }\n-     procedure, nopass :: b => b2  ! { dg-error \"Type/rank mismatch in function result\" }\n+     procedure, nopass :: b => b2  ! { dg-error \"Rank mismatch in function result\" }\n      procedure, nopass :: c => c2  ! FIXME: dg-warning \"Possible character length mismatch\" \n      procedure, nopass :: d => d2  ! valid, check for commutativity (+,*)\n      procedure, nopass :: e => e2  ! { dg-error \"Character length mismatch in function result\" }"}, {"sha": "95131dea3b81501fb23cb075c8b5c48fe5ed3044", "filename": "gcc/testsuite/gfortran.dg/typebound_override_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_4.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -22,7 +22,7 @@ module r_mod\n   implicit none\n   type, extends(base_type) :: r_type\n   contains\n-    procedure, pass(map)  :: clone    => r_clone   ! { dg-error \"Type/rank mismatch in argument\" }\n+    procedure, pass(map)  :: clone    => r_clone   ! { dg-error \"Type mismatch in argument\" }\n   end type\n contains\n   subroutine  r_clone(map,mapout)"}, {"sha": "565dd48d4fd0b6cdb4a9d67bb6250e8624a8f452", "filename": "gcc/testsuite/gfortran.dg/typebound_override_5.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_5.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\r\n+!\r\n+! PR 54190: TYPE(*)/assumed-rank: Type/rank check too relaxed for dummy procedure\r\n+! PR 57217: [4.7/4.8/4.9 Regression][OOP] Accepts invalid TBP overriding - lacking arguments check\r\n+!\r\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\r\n+\r\n+module base_mod\r\n+  implicit none\r\n+  type base_type\r\n+    integer :: kind\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => base_clone\r\n+  end type\r\n+contains\r\n+  subroutine  base_clone(map,mapout,info)\r\n+    class(base_type), intent(inout) :: map\r\n+    class(base_type), intent(inout) :: mapout\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+module r_mod\r\n+  use base_mod\r\n+  implicit none\r\n+  type, extends(base_type) :: r_type\r\n+    real  :: dat\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => r_clone   ! { dg-error \"Type mismatch in argument\" }\r\n+  end type\r\n+contains\r\n+  subroutine  r_clone(map,mapout,info)\r\n+    class(r_type), intent(inout) :: map\r\n+!gcc$ attributes no_arg_check :: mapout\r\n+    integer, intent(inout) :: mapout\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+! { dg-final { cleanup-modules \"base_mod r_mod\" } }\r"}, {"sha": "45720fd610fc7ca4a606a4f453df561d6e278f77", "filename": "gcc/testsuite/gfortran.dg/typebound_override_6.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_6.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\r\n+!\r\n+! PR 54190: TYPE(*)/assumed-rank: Type/rank check too relaxed for dummy procedure\r\n+! PR 57217: [4.7/4.8/4.9 Regression][OOP] Accepts invalid TBP overriding - lacking arguments check\r\n+!\r\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\r\n+\r\n+module base_mod\r\n+  implicit none\r\n+  type base_type\r\n+    integer :: kind\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => base_clone\r\n+  end type\r\n+contains\r\n+  subroutine  base_clone(map,mapout,info)\r\n+    class(base_type), intent(inout) :: map\r\n+    class(base_type), intent(inout) :: mapout\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+module r_mod\r\n+  use base_mod\r\n+  implicit none\r\n+  type, extends(base_type) :: r_type\r\n+    real  :: dat\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => r_clone   ! { dg-error \"Rank mismatch in argument\" }\r\n+  end type\r\n+contains\r\n+  subroutine  r_clone(map,mapout,info)\r\n+    class(r_type), intent(inout) :: map\r\n+    class(base_type), intent(inout) :: mapout(..)\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+! { dg-final { cleanup-modules \"base_mod r_mod\" } }\r"}, {"sha": "0c7c48ad56686c9e985ac5c7f978b1b2c6f9766a", "filename": "gcc/testsuite/gfortran.dg/typebound_override_7.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_override_7.f90?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\r\n+!\r\n+! PR 54190: TYPE(*)/assumed-rank: Type/rank check too relaxed for dummy procedure\r\n+! PR 57217: [4.7/4.8/4.9 Regression][OOP] Accepts invalid TBP overriding - lacking arguments check\r\n+!\r\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\r\n+\r\n+module base_mod\r\n+  implicit none\r\n+  type base_type\r\n+    integer :: kind\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => base_clone\r\n+  end type\r\n+contains\r\n+  subroutine  base_clone(map,mapout,info)\r\n+    class(base_type), intent(inout) :: map\r\n+    class(base_type), intent(inout) :: mapout\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+module r_mod\r\n+  use base_mod\r\n+  implicit none\r\n+  type, extends(base_type) :: r_type\r\n+    real  :: dat\r\n+  contains\r\n+    procedure, pass(map)  :: clone    => r_clone   ! { dg-error \"Type mismatch in argument\" }\r\n+  end type\r\n+contains\r\n+  subroutine  r_clone(map,mapout,info)\r\n+    class(r_type), intent(inout) :: map\r\n+    type(*), intent(inout) :: mapout\r\n+    integer     :: info\r\n+  end subroutine\r\n+end module\r\n+\r\n+! { dg-final { cleanup-modules \"base_mod r_mod\" } }\r"}, {"sha": "1e1d871c39f6e08b413b6a5c7ec96b5287088ce6", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_6.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7333b691a8ec1d1bfb0e8ea1c8702a869e87232/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03?ref=e7333b691a8ec1d1bfb0e8ea1c8702a869e87232", "patch": "@@ -72,7 +72,7 @@ MODULE testmod\n     PROCEDURE, NOPASS :: subroutine2 => proc_intfunc ! { dg-error \"must also be a SUBROUTINE\" }\n     PROCEDURE, NOPASS :: intfunction1 => proc_intfunc ! Ok, matching functions.\n     PROCEDURE, NOPASS :: intfunction2 => proc_sub ! { dg-error \"must also be a FUNCTION\" }\n-    PROCEDURE, NOPASS :: intfunction3 => proc_realfunc ! { dg-error \"Type/rank mismatch in function result\" }\n+    PROCEDURE, NOPASS :: intfunction3 => proc_realfunc ! { dg-error \"Type mismatch in function result\" }\n \n     ! For access-based checks.\n     PROCEDURE, NOPASS, PUBLIC :: priv => proc_sub ! Ok, increases visibility.\n@@ -89,7 +89,7 @@ MODULE testmod\n     ! For corresponding dummy arguments.\n     PROCEDURE, PASS :: corresp1 => proc_tmeint ! Ok.\n     PROCEDURE, PASS :: corresp2 => proc_tmeintx ! { dg-error \"should be named 'a'\" }\n-    PROCEDURE, PASS :: corresp3 => proc_tmereal ! { dg-error \"Type/rank mismatch in argument 'a'\" }\n+    PROCEDURE, PASS :: corresp3 => proc_tmereal ! { dg-error \"Type mismatch in argument 'a'\" }\n \n   END TYPE t\n "}]}