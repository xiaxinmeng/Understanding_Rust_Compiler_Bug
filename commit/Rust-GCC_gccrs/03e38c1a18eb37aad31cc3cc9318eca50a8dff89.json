{"sha": "03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNlMzhjMWExOGViMzdhYWQzMWNjM2NjOTMxOGVjYTUwYThkZmY4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-02-07T20:15:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-02-07T20:15:48Z"}, "message": "re PR libstdc++/47628 (non-compliant C++0x erase methods on STL containers)\n\n2011-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/47628\n\t* include/bits/stl_tree.h (_Rb_tree::erase(iterator), erase(iterator,\n\titerator)): Add back in C++03 mode.\n\t* testsuite/23_containers/map/modifiers/erase/47628.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/erase/47628.cc: Likewise.\n\nFrom-SVN: r169899", "tree": {"sha": "6edbcdc84c4076d503eaf6809cfe46307d16c617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6edbcdc84c4076d503eaf6809cfe46307d16c617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/comments", "author": null, "committer": null, "parents": [{"sha": "83296cd0f41f505d6e0e56f28735e92c70925cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83296cd0f41f505d6e0e56f28735e92c70925cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83296cd0f41f505d6e0e56f28735e92c70925cbf"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "f2d472fac074faba275485da4a5e4fc76bfd4eaa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "patch": "@@ -1,3 +1,11 @@\n+2011-02-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/47628\n+\t* include/bits/stl_tree.h (_Rb_tree::erase(iterator), erase(iterator,\n+\titerator)): Add back in C++03 mode.\n+\t* testsuite/23_containers/map/modifiers/erase/47628.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/erase/47628.cc: Likewise.\n+\n 2011-02-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/47560 try two"}, {"sha": "85681d2da36af76d54b46552c89bc07846bb404a", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "patch": "@@ -1,7 +1,7 @@\n // RB tree implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-// 2009, 2010\n+// 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -761,6 +761,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __result._M_const_cast();\n       }\n #else\n+      void\n+      erase(iterator __position)\n+      { _M_erase_aux(__position); }\n+\n       void\n       erase(const_iterator __position)\n       { _M_erase_aux(__position); }\n@@ -778,6 +782,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __last._M_const_cast();\n       }\n #else\n+      void\n+      erase(iterator __first, iterator __last)\n+      { _M_erase_aux(__first, __last); }\n+\n       void\n       erase(const_iterator __first, const_iterator __last)\n       { _M_erase_aux(__first, __last); }"}, {"sha": "2769bcac2bf4001a66baa0963283e767393f74c6", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/47628.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2F47628.cc?ref=03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+\n+#include <map>\n+\n+struct Key\n+{\n+  Key() { }\n+\n+  Key(const Key&) { }\n+\n+  template<typename T>\n+    Key(const T&)\n+    { }\n+\n+  bool operator<(const Key&) const;\n+};\n+\n+typedef std::map<Key, int> Map;\n+\n+// libstdc++/47628\n+void f()\n+{\n+  Map m;\n+  m.insert(Map::value_type());\n+  Map::iterator i = m.begin();\n+  m.erase(i);\n+}"}, {"sha": "601b16b7d823ca448ce9fce553da44d0c4d352bb", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/47628.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e38c1a18eb37aad31cc3cc9318eca50a8dff89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2F47628.cc?ref=03e38c1a18eb37aad31cc3cc9318eca50a8dff89", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+// { dg-do compile }\n+\n+#include <map>\n+\n+struct Key\n+{\n+  Key() { }\n+\n+  Key(const Key&) { }\n+\n+  template<typename T>\n+    Key(const T&)\n+    { }\n+\n+  bool operator<(const Key&) const;\n+};\n+\n+typedef std::multimap<Key, int> MMap;\n+\n+// libstdc++/47628\n+void f()\n+{\n+  MMap mm;\n+  mm.insert(MMap::value_type());\n+  MMap::iterator i = mm.begin();\n+  mm.erase(i);\n+}"}]}