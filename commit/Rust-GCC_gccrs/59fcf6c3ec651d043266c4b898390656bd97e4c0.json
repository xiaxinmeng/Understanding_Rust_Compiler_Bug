{"sha": "59fcf6c3ec651d043266c4b898390656bd97e4c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmY2Y2YzNlYzY1MWQwNDMyNjZjNGI4OTgzOTA2NTZiZDk3ZTRjMA==", "commit": {"author": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2017-11-04T19:40:23Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2017-11-04T19:40:23Z"}, "message": "re PR libgcc/82635 (std::thread's join broken on FreeBSD with all GCCs >= 5)\n\n2017-11-04  Andreas Tobler  <andreast@gcc.gnu.org>\n\n    PR libgcc/82635\n    * config/i386/freebsd-unwind.h (MD_FALLBACK_FRAME_STATE_FOR): Use a\n    sysctl to determine whether we're in a trampoline.\n    Keep the pattern matching method for systems without\n    KERN_PROC_SIGTRAMP sysctl.\n\nFrom-SVN: r254411", "tree": {"sha": "1a895f2795d2359887792ec93cc391e0342ea6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a895f2795d2359887792ec93cc391e0342ea6ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59fcf6c3ec651d043266c4b898390656bd97e4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fcf6c3ec651d043266c4b898390656bd97e4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59fcf6c3ec651d043266c4b898390656bd97e4c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fcf6c3ec651d043266c4b898390656bd97e4c0/comments", "author": null, "committer": null, "parents": [{"sha": "7c4acac3a0798a62340897eae76da5037467135e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4acac3a0798a62340897eae76da5037467135e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4acac3a0798a62340897eae76da5037467135e"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "a49078117aac578f84265d46d2cffe221b79c735", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fcf6c3ec651d043266c4b898390656bd97e4c0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fcf6c3ec651d043266c4b898390656bd97e4c0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=59fcf6c3ec651d043266c4b898390656bd97e4c0", "patch": "@@ -1,3 +1,11 @@\n+2017-11-04  Andreas Tobler  <andreast@gcc.gnu.org>\n+\n+\tPR libgcc/82635\n+\t* config/i386/freebsd-unwind.h (MD_FALLBACK_FRAME_STATE_FOR): Use a\n+\tsysctl to determine whether we're in a trampoline.\n+\tKeep the pattern matching method for systems without\n+\tKERN_PROC_SIGTRAMP sysctl.\n+\n 2017-11-03  Cupertino Miranda  <cmiranda@synopsys.com>\n \t    Vineet Gupta <vgupta@synopsys.com>\n "}, {"sha": "a8e8edb993a4fac585ffe47fb73cecab2e6d03f9", "filename": "libgcc/config/i386/freebsd-unwind.h", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fcf6c3ec651d043266c4b898390656bd97e4c0/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fcf6c3ec651d043266c4b898390656bd97e4c0/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ffreebsd-unwind.h?ref=59fcf6c3ec651d043266c4b898390656bd97e4c0", "patch": "@@ -28,21 +28,57 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <sys/types.h>\n #include <signal.h>\n+#include <unistd.h>\n+#include <sys/sysctl.h>\n #include <sys/ucontext.h>\n+#include <sys/user.h>\n #include <machine/sigframe.h>\n \n #define REG_NAME(reg)\tsf_uc.uc_mcontext.mc_## reg\n \n #ifdef __x86_64__\n #define MD_FALLBACK_FRAME_STATE_FOR x86_64_freebsd_fallback_frame_state\n \n+#ifdef KERN_PROC_SIGTRAMP\n+/* FreeBSD past 9.3 provides a kern.proc.sigtramp.<pid> sysctl that\n+   returns the location of the signal trampoline. Use this to find\n+   out whether we're in a trampoline.\n+*/\n+static int\n+x86_64_outside_sigtramp_range (unsigned char *pc)\n+{\n+  static int sigtramp_range_determined = 0;\n+  static unsigned char *sigtramp_start, *sigtramp_end;\n+\n+  if (sigtramp_range_determined == 0)\n+    {\n+      struct kinfo_sigtramp kst = {0};\n+      size_t len = sizeof (kst);\n+      int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_SIGTRAMP, getpid() };\n+\n+      sigtramp_range_determined = 1;\n+      if (sysctl (mib, 4, &kst, &len, NULL, 0) == 0)\n+      {\n+        sigtramp_range_determined = 2;\n+        sigtramp_start = kst.ksigtramp_start;\n+        sigtramp_end   = kst.ksigtramp_end;\n+      }\n+    }\n+  if (sigtramp_range_determined < 2)  /* sysctl failed if < 2 */\n+    return 1;\n+\n+  return (pc < sigtramp_start || pc >= sigtramp_end);\n+}\n+#endif\n+\n static _Unwind_Reason_Code\n x86_64_freebsd_fallback_frame_state\n (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n   struct sigframe *sf;\n   long new_cfa;\n \n+#ifndef KERN_PROC_SIGTRAMP\n   /* Prior to FreeBSD 9, the signal trampoline was located immediately\n      before the ps_strings.  To support non-executable stacks on AMD64,\n      the sigtramp was moved to a shared page for FreeBSD 9.  Unfortunately\n@@ -62,12 +98,15 @@ x86_64_freebsd_fallback_frame_state\n         && *(unsigned int *)(context->ra +  8) == 0x01a1c0c7\n         && *(unsigned int *)(context->ra + 12) == 0x050f0000 ))\n     return _URC_END_OF_STACK;\n+#else\n+  if (x86_64_outside_sigtramp_range(context->ra))\n+    return _URC_END_OF_STACK;\n+#endif\n \n   sf = (struct sigframe *) context->cfa;\n   new_cfa = sf->REG_NAME(rsp);\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  /* Register 7 is rsp  */\n-  fs->regs.cfa_reg = 7;\n+  fs->regs.cfa_reg =  __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* The SVR4 register numbering macros aren't usable in libgcc.  */"}]}