{"sha": "d9186814809888b38657fbb968c6eea02f3b9fd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxODY4MTQ4MDk4ODhiMzg2NTdmYmI5NjhjNmVlYTAyZjNiOWZkMA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@cavium.com", "date": "2019-01-17T19:06:37Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-01-17T19:06:37Z"}, "message": "aarch64.c (cgraph.h): New include.\n\n2018-01-17  Steve Ellcey  <sellcey@cavium.com>\n\n\t* config/aarch64/aarch64.c (cgraph.h): New include.\n\t(intl.h): New include.\n\t(supported_simd_type): New function.\n\t(currently_supported_simd_type): Ditto.\n\t(aarch64_simd_clone_compute_vecsize_and_simdlen): Ditto.\n\t(aarch64_simd_clone_adjust): Ditto.\n\t(aarch64_simd_clone_usable): Ditto.\n\t(TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN): New macro.\n\t(TARGET_SIMD_CLONE_ADJUST): Ditto.\n\t(TARGET_SIMD_CLONE_USABLE): Ditto.\n\t* config/i386/i386.c (ix86_simd_clone_adjust): Add definition check.\n\t* omp-simd-clone.c (expand_simd_clones): Add targetm.simd_clone.adjust\n\tcall.\n\nFrom-SVN: r268044", "tree": {"sha": "63c24e3338d59cdea8fc0d05dac7b4cf7f278f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c24e3338d59cdea8fc0d05dac7b4cf7f278f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9186814809888b38657fbb968c6eea02f3b9fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9186814809888b38657fbb968c6eea02f3b9fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9186814809888b38657fbb968c6eea02f3b9fd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9186814809888b38657fbb968c6eea02f3b9fd0/comments", "author": {"login": "sellcey", "id": 25938520, "node_id": "MDQ6VXNlcjI1OTM4NTIw", "avatar_url": "https://avatars.githubusercontent.com/u/25938520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellcey", "html_url": "https://github.com/sellcey", "followers_url": "https://api.github.com/users/sellcey/followers", "following_url": "https://api.github.com/users/sellcey/following{/other_user}", "gists_url": "https://api.github.com/users/sellcey/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellcey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellcey/subscriptions", "organizations_url": "https://api.github.com/users/sellcey/orgs", "repos_url": "https://api.github.com/users/sellcey/repos", "events_url": "https://api.github.com/users/sellcey/events{/privacy}", "received_events_url": "https://api.github.com/users/sellcey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "742b6dc476c544389f109b03d221262a4cc55aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742b6dc476c544389f109b03d221262a4cc55aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742b6dc476c544389f109b03d221262a4cc55aaf"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "b3649d1e6a6c253f75db53657652b7f06b02a0eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9186814809888b38657fbb968c6eea02f3b9fd0", "patch": "@@ -1,3 +1,19 @@\n+2018-01-17  Steve Ellcey  <sellcey@cavium.com>\n+\n+\t* config/aarch64/aarch64.c (cgraph.h): New include.\n+\t(intl.h): New include.\n+\t(supported_simd_type): New function.\n+\t(currently_supported_simd_type): Ditto.\n+\t(aarch64_simd_clone_compute_vecsize_and_simdlen): Ditto.\n+\t(aarch64_simd_clone_adjust): Ditto.\n+\t(aarch64_simd_clone_usable): Ditto.\n+\t(TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN): New macro.\n+\t(TARGET_SIMD_CLONE_ADJUST): Ditto.\n+\t(TARGET_SIMD_CLONE_USABLE): Ditto.\n+\t* config/i386/i386.c (ix86_simd_clone_adjust): Add definition check.\n+\t* omp-simd-clone.c (expand_simd_clones): Add targetm.simd_clone.adjust\n+\tcall.\n+\n 2019-01-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/88800"}, {"sha": "7eb9316d4666eb7c80ce8c3eddd97e8792e6c9dd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d9186814809888b38657fbb968c6eea02f3b9fd0", "patch": "@@ -40,6 +40,7 @@\n #include \"regs.h\"\n #include \"emit-rtl.h\"\n #include \"recog.h\"\n+#include \"cgraph.h\"\n #include \"diagnostic.h\"\n #include \"insn-attr.h\"\n #include \"alias.h\"\n@@ -71,6 +72,7 @@\n #include \"selftest.h\"\n #include \"selftest-rtl.h\"\n #include \"rtx-vector-builder.h\"\n+#include \"intl.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -18480,6 +18482,151 @@ aarch64_estimated_poly_value (poly_int64 val)\n   return val.coeffs[0] + val.coeffs[1] * over_128 / 128;\n }\n \n+\n+/* Return true for types that could be supported as SIMD return or\n+   argument types.  */\n+\n+static bool\n+supported_simd_type (tree t)\n+{\n+  if (SCALAR_FLOAT_TYPE_P (t) || INTEGRAL_TYPE_P (t) || POINTER_TYPE_P (t))\n+    {\n+      HOST_WIDE_INT s = tree_to_shwi (TYPE_SIZE_UNIT (t));\n+      return s == 1 || s == 2 || s == 4 || s == 8;\n+    }\n+  return false;\n+}\n+\n+/* Return true for types that currently are supported as SIMD return\n+   or argument types.  */\n+\n+static bool\n+currently_supported_simd_type (tree t, tree b)\n+{\n+  if (COMPLEX_FLOAT_TYPE_P (t))\n+    return false;\n+\n+  if (TYPE_SIZE (t) != TYPE_SIZE (b))\n+    return false;\n+\n+  return supported_simd_type (t);\n+}\n+\n+/* Implement TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN.  */\n+\n+static int\n+aarch64_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n+\t\t\t\t\tstruct cgraph_simd_clone *clonei,\n+\t\t\t\t\ttree base_type, int num)\n+{\n+  tree t, ret_type, arg_type;\n+  unsigned int elt_bits, vec_bits, count;\n+\n+  if (!TARGET_SIMD)\n+    return 0;\n+\n+  if (clonei->simdlen\n+      && (clonei->simdlen < 2\n+\t  || clonei->simdlen > 1024\n+\t  || (clonei->simdlen & (clonei->simdlen - 1)) != 0))\n+    {\n+      warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t  \"unsupported simdlen %d\", clonei->simdlen);\n+      return 0;\n+    }\n+\n+  ret_type = TREE_TYPE (TREE_TYPE (node->decl));\n+  if (TREE_CODE (ret_type) != VOID_TYPE\n+      && !currently_supported_simd_type (ret_type, base_type))\n+    {\n+      if (TYPE_SIZE (ret_type) != TYPE_SIZE (base_type))\n+\twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t    \"GCC does not currently support mixed size types \"\n+\t\t    \"for %<simd%> functions\");\n+      else if (supported_simd_type (ret_type))\n+\twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t    \"GCC does not currently support return type %qT \"\n+\t\t    \"for %<simd%> functions\", ret_type);\n+      else\n+\twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t    \"unsupported return type %qT for %<simd%> functions\",\n+\t\t    ret_type);\n+      return 0;\n+    }\n+\n+  for (t = DECL_ARGUMENTS (node->decl); t; t = DECL_CHAIN (t))\n+    {\n+      arg_type = TREE_TYPE (t);\n+\n+      if (!currently_supported_simd_type (arg_type, base_type))\n+\t{\n+\t  if (TYPE_SIZE (arg_type) != TYPE_SIZE (base_type))\n+\t    warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t\t\"GCC does not currently support mixed size types \"\n+\t\t\t\"for %<simd%> functions\");\n+\t  else\n+\t    warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t\t\"GCC does not currently support argument type %qT \"\n+\t\t\t\"for %<simd%> functions\", arg_type);\n+\t  return 0;\n+\t}\n+    }\n+\n+  clonei->vecsize_mangle = 'n';\n+  clonei->mask_mode = VOIDmode;\n+  elt_bits = GET_MODE_BITSIZE (SCALAR_TYPE_MODE (base_type));\n+  if (clonei->simdlen == 0)\n+    {\n+      count = 2;\n+      vec_bits = (num == 0 ? 64 : 128);\n+      clonei->simdlen = vec_bits / elt_bits;\n+    }\n+  else\n+    {\n+      count = 1;\n+      vec_bits = clonei->simdlen * elt_bits;\n+      if (vec_bits != 64 && vec_bits != 128)\n+\t{\n+\t  warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t      \"GCC does not currently support simdlen %d for type %qT\",\n+\t\t      clonei->simdlen, base_type);\n+\t  return 0;\n+\t}\n+    }\n+  clonei->vecsize_int = vec_bits;\n+  clonei->vecsize_float = vec_bits;\n+  return count;\n+}\n+\n+/* Implement TARGET_SIMD_CLONE_ADJUST.  */\n+\n+static void\n+aarch64_simd_clone_adjust (struct cgraph_node *node)\n+{\n+  /* Add aarch64_vector_pcs target attribute to SIMD clones so they\n+     use the correct ABI.  */\n+\n+  tree t = TREE_TYPE (node->decl);\n+  TYPE_ATTRIBUTES (t) = make_attribute (\"aarch64_vector_pcs\", \"default\",\n+\t\t\t\t\tTYPE_ATTRIBUTES (t));\n+}\n+\n+/* Implement TARGET_SIMD_CLONE_USABLE.  */\n+\n+static int\n+aarch64_simd_clone_usable (struct cgraph_node *node)\n+{\n+  switch (node->simdclone->vecsize_mangle)\n+    {\n+    case 'n':\n+      if (!TARGET_SIMD)\n+\treturn -1;\n+      return 0;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Target-specific selftests.  */\n \n #if CHECKING_P\n@@ -18973,6 +19120,16 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE aarch64_attribute_table\n \n+#undef TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN\n+#define TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN \\\n+  aarch64_simd_clone_compute_vecsize_and_simdlen\n+\n+#undef TARGET_SIMD_CLONE_ADJUST\n+#define TARGET_SIMD_CLONE_ADJUST aarch64_simd_clone_adjust\n+\n+#undef TARGET_SIMD_CLONE_USABLE\n+#define TARGET_SIMD_CLONE_USABLE aarch64_simd_clone_usable\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::aarch64_run_selftests"}, {"sha": "8abff99cc626ec29c0d4660415e24a08e60ee1c1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d9186814809888b38657fbb968c6eea02f3b9fd0", "patch": "@@ -50636,6 +50636,11 @@ static void\n ix86_simd_clone_adjust (struct cgraph_node *node)\n {\n   const char *str = NULL;\n+\n+  /* Attributes need to be adjusted for definitions, not declarations.  */\n+  if (!node->definition)\n+    return;\n+\n   gcc_assert (node->decl == cfun->decl);\n   switch (node->simdclone->vecsize_mangle)\n     {"}, {"sha": "9b8111c0a4db9b9f3879357e4ca266e615674342", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9186814809888b38657fbb968c6eea02f3b9fd0/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=d9186814809888b38657fbb968c6eea02f3b9fd0", "patch": "@@ -1685,6 +1685,7 @@ expand_simd_clones (struct cgraph_node *node)\n \t    simd_clone_adjust (n);\n \t  else\n \t    {\n+\t      targetm.simd_clone.adjust (n);\n \t      simd_clone_adjust_return_type (n);\n \t      simd_clone_adjust_argument_types (n);\n \t    }"}]}