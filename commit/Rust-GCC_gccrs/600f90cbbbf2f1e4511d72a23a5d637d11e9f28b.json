{"sha": "600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwZjkwY2JiYmYyZjFlNDUxMWQ3MmEyM2E1ZDYzN2QxMWU5ZjI4Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-05T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-05T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "438cdd67afa7c649a8032b8565756f5910af8870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/438cdd67afa7c649a8032b8565756f5910af8870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/comments", "author": null, "committer": null, "parents": [{"sha": "621ea10ca060ba19ec693aa73b5e29d553cca849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ea10ca060ba19ec693aa73b5e29d553cca849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621ea10ca060ba19ec693aa73b5e29d553cca849"}], "stats": {"total": 367, "additions": 366, "deletions": 1}, "files": [{"sha": "e94b2fc06247801f6102e3aab56f79f4960ab832", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,81 @@\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/100905\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Handle OMP_CLAUSE_BIND.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100732\n+\t* gimple-fold.c (gimple_fold_builtin_sprintf): Avoid folding calls\n+\twith either source or destination argument of invalid type.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Avoid checking\n+\tcalls with arguments of invalid type.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* attribs.c (init_attr_rdwr_indices): Use VLA bounds in the expected\n+\torder.\n+\t(attr_access::vla_bounds): Also handle VLA bounds.\n+\n+2021-06-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (GOT_memory_operand):\n+\tImplement using match_code RTXes.\n+\t(GOT32_symbol_operand): Ditto.\n+\n+2021-06-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n+\tHandle V2HI mode.\n+\t(ix86_expand_vector_init_general): Ditto.\n+\tUse SImode instead of word_mode for logic operations\n+\twhen GET_MODE_SIZE (mode) < UNITS_PER_WORD.\n+\t(expand_vec_perm_even_odd_1): Assert that V2HI mode should be\n+\timplemented by expand_vec_perm_1.\n+\t(expand_vec_perm_broadcast_1): Assert that V2HI and V4HI modes\n+\tshould be implemented using standard shuffle patterns.\n+\t(ix86_vectorize_vec_perm_const): Handle V2HImode.  Add V4HI and\n+\tV2HI modes to modes, implementable with shuffle for one operand.\n+\t* config/i386/mmx.md (*punpckwd): New insn_and_split pattern.\n+\t(*pshufw_1): New insn pattern.\n+\t(*vec_dupv2hi): Ditto.\n+\t(vec_initv2hihi): New expander.\n+\n+2021-06-04  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/arm/vfp.md (no_literal_pool_df_immediate,\n+\tno_literal_pool_sf_immediate): Fix empty split condition.\n+\n+2021-06-04  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/i386/i386.md (*load_tp_x32_zext, *add_tp_x32_zext,\n+\t*tls_dynamic_gnu2_combine_32): Fix empty split condition.\n+\t* config/i386/sse.md (*<sse2_avx2>_pmovmskb_lt,\n+\t*<sse2_avx2>_pmovmskb_zext_lt, *sse2_pmovmskb_ext_lt,\n+\t*<sse4_1_avx2>_pblendvb_lt): Likewise.\n+\n+2021-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100887\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init): Handle\n+\tconcatenation from half-sized modes with TImode elements.\n+\n+2021-06-04  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_override_options): Disable millicode\n+\tthunks when RF16 is on.\n+\n+2021-06-04  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.h (PROMOTE_MODE): Remove.\n+\n+2021-06-04  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_promote_function_mode):\n+\tReplace PROMOTE_MODE marco with its content.\n+\n 2021-06-03  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* config/cris/cris.md (*addi_reload): Fix empty split condition."}, {"sha": "0098130f31a56956049362e279478e8875465aff", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1 +1 @@\n-20210604\n+20210605"}, {"sha": "3938ef10d0f35383188b036890484e2270d95f76", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,13 @@\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/100783\n+\t* c-attribs.c (positional_argument): Bail on erroneous types.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-warn.c (warn_parm_array_mismatch): Check TREE_PURPOSE to test\n+\tfor element presence.\n+\n 2021-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_ada_macros): Minor tweaks."}, {"sha": "747f53fac7261c8a6d51e02b044d75ad4e1f5271", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,8 @@\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/100783\n+\t* c-objc-common.c (print_type): Handle erroneous types.\n+\n 2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100859"}, {"sha": "f1537e53901ae8a9229063921d30049953680daa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,22 @@\n+2021-06-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100893\n+\t* pt.c (convert_template_argument): Strip top-level cv-quals\n+\ton the substituted type of a non-type template parameter.\n+\n+2021-06-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100102\n+\t* pt.c (tsubst_function_decl): Remove old code for reducing\n+\targs when it has excess levels.\n+\n+2021-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100872\n+\t* name-lookup.c (maybe_save_operator_binding): Add op_attr after all\n+\tATTR_IS_DEPENDENT attributes in the DECL_ATTRIBUTES list rather than\n+\tto the start.\n+\n 2021-06-03  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100592"}, {"sha": "4e9a396a1ad43811af8f8719de7bdfb83a75066b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,14 @@\n+2021-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100882\n+\t* d-codegen.cc (build_assign): Construct initializations inside\n+\tTARGET_EXPR_INITIAL.\n+\t(compound_expr): Remove intermediate expressions that have no\n+\tside-effects.\n+\t(return_expr): Construct returns inside TARGET_EXPR_INITIAL.\n+\t* expr.cc (ExprVisitor::visit (CallExp *)): Remove useless assignment\n+\tto TARGET_EXPR_SLOT.\n+\n 2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-incpath.cc (prefixed_path): Use filename_ncmp instead of strncmp."}, {"sha": "33ab58a083c897aba84c3c58f11aaddc56592da2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,62 @@\n+2021-06-04  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99839\n+\t* frontend-passes.c (inline_matmul_assign): Do not inline matmul\n+\tif the assignment to the resulting array if it is not of canonical\n+\ttype (real/integer/complex/logical).\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_code_node): Handle\n+\tEXEC_OMP_(TARGET_)(,PARALLEL_,TEAMS_)LOOP.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* scanner.c (skip_fixed_omp_sentinel): Set openacc_flag if\n+\tthis is not an (OpenMP) continuation line.\n+\t(skip_fixed_oacc_sentinel): Likewise for openmp_flag and OpenACC.\n+\t(gfc_next_char_literal): gfc_error_now to force error for mixed OMP/ACC\n+\tcontinuation once per location and return '\\n'.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* openmp.c (gfc_match_omp_clauses): Fix typo in error message.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* dump-parse-tree.c (show_omp_clauses): Handle bind clause.\n+\t(show_omp_node): Handle loop directive.\n+\t* frontend-passes.c (gfc_code_walker): Likewise.\n+\t* gfortran.h (enum gfc_statement): Add\n+\tST_OMP_(END_)(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n+\t(enum gfc_omp_bind_type): New.\n+\t(gfc_omp_clauses): Use it.\n+\t(enum gfc_exec_op): Add EXEC_OMP_(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n+\t* match.h (gfc_match_omp_loop, gfc_match_omp_parallel_loop,\n+\tgfc_match_omp_target_parallel_loop, gfc_match_omp_target_teams_loop,\n+\tgfc_match_omp_teams_loop): New.\n+\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_BIND.\n+\t(gfc_match_omp_clauses): Handle it.\n+\t(OMP_LOOP_CLAUSES, gfc_match_omp_loop, gfc_match_omp_teams_loop,\n+\tgfc_match_omp_target_teams_loop, gfc_match_omp_parallel_loop,\n+\tgfc_match_omp_target_parallel_loop): New.\n+\t(resolve_omp_clauses, resolve_omp_do, omp_code_to_statement,\n+\tgfc_resolve_omp_directive): Handle omp loop.\n+\t* parse.c (decode_omp_directive case_exec_markers, gfc_ascii_statement,\n+\tparse_omp_do, parse_executable): Likewise.\n+\t(parse_omp_structured_block): Remove ST_ which use parse_omp_do.\n+\t* resolve.c (gfc_resolve_blocks): Add omp loop.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Handle bind clause.\n+\t(gfc_trans_omp_do, gfc_trans_omp_parallel_do, gfc_trans_omp_distribute,\n+\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_directive):\n+\tHandle loop directive.\n+\t(gfc_split_omp_clauses): Likewise; fix firstprivate/lastprivate\n+\tand (in_)reduction for taskloop.\n+\t* trans.c (trans_code): Handle omp loop directive.\n+\n 2021-06-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/99928"}, {"sha": "ba1d2c7e69648274a6d1dc0b2ad7361ef61d40ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,121 @@\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/100905\n+\t* gfortran.dg/gomp/loop-3.f90: New test.\n+\n+2021-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/100882\n+\t* gdc.dg/pr100882a.d: New test.\n+\t* gdc.dg/pr100882b.d: New test.\n+\t* gdc.dg/pr100882c.d: New test.\n+\t* gdc.dg/torture/pr100882.d: New test.\n+\n+2021-06-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100893\n+\t* g++.dg/template/param4.C: New test.\n+\t* g++.dg/template/param5.C: New test.\n+\t* g++.dg/cpp1z/nontype-auto19.C: New test.\n+\t* g++.dg/cpp2a/concepts-decltype.C: Don't expect that the\n+\tdeduced type of a decltype(auto) NTTP has top-level cv-quals.\n+\n+2021-06-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100102\n+\t* g++.dg/cpp0x/alias-decl-72.C: New test.\n+\t* g++.dg/cpp0x/alias-decl-72a.C: New test.\n+\n+2021-06-04  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/99839\n+\t* gfortran.dg/inline_matmul_25.f90: New test.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/100783\n+\t* gcc.dg/nonnull-6.c: New test.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100732\n+\t* gcc.dg/tree-ssa/builtin-snprintf-11.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-snprintf-12.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-28.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-29.c: New test.\n+\t* gcc.dg/uninit-pr100732.c: New test.\n+\n+2021-06-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wvla-parameter-10.c: New test.\n+\t* gcc.dg/Wvla-parameter-11.c: New test.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/omp-fixed.f: Re-add test item changed in previous\n+\tcommit in addition - add more dg-errors and '... end ...' due to changed\n+\tparsing.\n+\t* gfortran.dg/goacc/omp.f95: Likewise.\n+\t* gfortran.dg/goacc-gomp/mixed-1.f: New test.\n+\n+2021-06-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.dg/vect/slp-perm-9.c (dg-final): Adjust dumps for vect32 targets.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr99928-5.f90: Really use the\n+\tproper iteration variable.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr99928-1.f90: Add 'implicit none'.\n+\t* gfortran.dg/gomp/pr99928-11.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-4.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-6.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-8.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-2.f90: Likewise. Add missing decl.\n+\t* gfortran.dg/gomp/pr99928-5.f90: Add implicit none;\n+\tfix loop-variable and remove xfail.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* gfortran.dg/gomp/loop-2.f90: Update for typo fix.\n+\n+2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/99928\n+\t* gfortran.dg/gomp/pr99928-3.f90: Add 'default(none)', following\n+\tC/C++ version of the patch.\n+\t* gfortran.dg/gomp/loop-1.f90: New test.\n+\t* gfortran.dg/gomp/loop-2.f90: New test.\n+\t* gfortran.dg/gomp/pr99928-1.f90: New test; based on C/C++ test.\n+\t* gfortran.dg/gomp/pr99928-11.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-2.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-4.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-5.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-6.f90: Likewise.\n+\t* gfortran.dg/gomp/pr99928-8.f90: Likewise.\n+\t* gfortran.dg/goacc/omp.f95: Use 'acc kernels loops' instead\n+\tof 'acc loops' to hide unrelated bug for now.\n+\t* gfortran.dg/goacc/omp-fixed.f: Likewise\n+\n+2021-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100887\n+\t* gcc.target/i386/pr100887.c: New test.\n+\n+2021-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100872\n+\t* g++.dg/gomp/declare-simd-8.C: New test.\n+\n+2021-06-04  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/not-promote-mode.c: New.\n+\n 2021-06-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/100637"}, {"sha": "d87370e5340a66c505e456a3f41600a816c0cc69", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600f90cbbbf2f1e4511d72a23a5d637d11e9f28b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=600f90cbbbf2f1e4511d72a23a5d637d11e9f28b", "patch": "@@ -1,3 +1,68 @@\n+2021-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (_SSize): Return the result of\n+\tranges::size converted to the wider of make-signed-like-t<S> and\n+\tptrdiff_t, rather than the ranges different type.\n+\t* testsuite/std/ranges/access/ssize.cc: Adjust expected result\n+\tfor an iota_view that uses an integer class type for its\n+\tdifference_type.\n+\n+2021-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100824\n+\t* include/bits/ranges_base.h (__member_data): Use __decay_copy.\n+\t* testsuite/std/ranges/access/data.cc: Add testcase from PR.\n+\n+2021-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100824\n+\t* include/bits/iterator_concepts.h (__detail::__decay_copy)\n+\t(__detail::__member_begin, __detail::__adl_begin): Move to\n+\tnamespace ranges::__cust_access.\n+\t(__detail::__ranges_begin): Likewise, and rename to __begin.\n+\tRemove redundant static assertion.\n+\t* include/bits/ranges_base.h (_Begin, _End, _RBegin, _REnd):\n+\tUse lvalue in noexcept specifier.\n+\t(__as_const): Add non-deduced parameter for value category.\n+\t(_CBegin, _CEnd, _CRBegin, _CREnd, _CData): Adjust uses of\n+\t__as_const.\n+\t(__member_size, __adl_size, __member_empty, __size0_empty):\n+\t(__eq_iter_empty, __adl_data): Use lvalue objects in\n+\trequirements.\n+\t(__sentinel_size): Likewise. Add check for conversion to\n+\tunsigned-like.\n+\t(__member_data): Allow non-lvalue types to satisfy the concept,\n+\tbut use lvalue object in requirements.\n+\t(_Size, _SSize): Remove forwarding to always use an lvalue.\n+\t(_Data): Likewise. Add static assertion for arrays.\n+\t* testsuite/std/ranges/access/cdata.cc: Adjust expected\n+\tbehaviour for rvalues. Add negative tests for ill-formed\n+\texpressions.\n+\t* testsuite/std/ranges/access/data.cc: Likewise.\n+\t* testsuite/std/ranges/access/empty.cc: Adjust expected\n+\tbehaviour for rvalues.\n+\t* testsuite/std/ranges/access/size.cc: Likewise.\n+\n+2021-06-04  Tim Adye  <Tim.Adye@cern.ch>\n+\n+\t* include/std/any (any::_Manager::_S_access): New static\n+\tfunction to access the contained value.\n+\t(any::emplace, __any_caster): Use _S_access member of the\n+\tmanager type.\n+\n+2021-06-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2020.xml:\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/hashtable.h (__cpp_lib_generic_unordered_lookup):\n+\tDefine.\n+\t* include/std/version (__cpp_lib_generic_unordered_lookup):\n+\tDefine.\n+\t* testsuite/23_containers/unordered_map/operations/1.cc: Check\n+\tfeature test macro.\n+\t* testsuite/23_containers/unordered_set/operations/1.cc:\n+\tLikewise.\n+\n 2021-06-03  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_algo.h (__detail::__can_reread_output):"}]}