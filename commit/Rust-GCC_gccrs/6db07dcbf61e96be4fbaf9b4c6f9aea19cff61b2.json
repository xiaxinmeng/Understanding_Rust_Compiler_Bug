{"sha": "6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiMDdkY2JmNjFlOTZiZTRmYmFmOWI0YzZmOWFlYTE5Y2ZmNjFiMg==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2008-04-03T23:49:35Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2008-04-03T23:49:35Z"}, "message": "re PR c/35712 (decimal float literal constant zero loses significant trailing zeroes)\n\n2008-04-03  Janis Johnson  <janis187@us.ibm.com>\n\ngcc/\n\tPR c/35712\n\t* dfp.c (decimal_from_decnumber): Retain trailing zeroes for\n\t  decimal-float literal constant zero.\n\ntestsuite/\n\tPR c/35712\n\t* gcc.dg/dfp/constants-zero.c: New test.\n\nFrom-SVN: r133881", "tree": {"sha": "204d2542b8154752ec21e713ddd9b4423580e3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204d2542b8154752ec21e713ddd9b4423580e3df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/comments", "author": null, "committer": null, "parents": [{"sha": "79addd1f3581896333c5437c10ae7a5202acc2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79addd1f3581896333c5437c10ae7a5202acc2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79addd1f3581896333c5437c10ae7a5202acc2ae"}], "stats": {"total": 172, "additions": 170, "deletions": 2}, "files": [{"sha": "6965a49c8f437d9916c1587e6aed8eae26727409", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "patch": "@@ -1,3 +1,9 @@\n+2008-04-03  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/35712\n+\t* dfp.c (decimal_from_decnumber): Retain trailing zeroes for\n+\t  decimal-float literal constant zero.\n+\n 2008-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35738"}, {"sha": "2526ef60c0fd2fbdb6ff9730c7566493849f561e", "filename": "gcc/dfp.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "patch": "@@ -46,8 +46,6 @@ decimal_from_decnumber (REAL_VALUE_TYPE *r, decNumber *dn, decContext *context)\n   memset (r, 0, sizeof (REAL_VALUE_TYPE));\n \n   r->cl = rvc_normal;\n-  if (decNumberIsZero (dn))\n-    r->cl = rvc_zero;\n   if (decNumberIsNaN (dn))\n     r->cl = rvc_nan;\n   if (decNumberIsInfinite (dn))"}, {"sha": "f3b7b6fa26521e1c73d3e9154ed27c8f4551cc93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "patch": "@@ -1,3 +1,8 @@\n+2008-04-03  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/35712\n+\t* gcc.dg/dfp/constants-zero.c: New test.\n+\n 2008-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35738"}, {"sha": "e0db28cc38f9ec27b05c5ff4a5e8e8444bfbc3b8", "filename": "gcc/testsuite/gcc.dg/dfp/constants-zero.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c?ref=6db07dcbf61e96be4fbaf9b4c6f9aea19cff61b2", "patch": "@@ -0,0 +1,159 @@\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* Decimal float values can have significant trailing zeroes.  This is\n+   true for zero values as well.  Check that various representations of\n+   zero are handled correctly when specified as literal constants.  */\n+\n+extern void abort (void);\n+\n+int big_endian;\n+\n+typedef union U32 {\n+  unsigned int i;\n+  _Decimal32 d;\n+  unsigned char b[4];\n+} u32_t;\n+\n+typedef union U64 {\n+  unsigned long long i;\n+  _Decimal64 d;\n+} u64_t;\n+\n+typedef union U128 {\n+  unsigned long long i[2];\n+  _Decimal128 d;\n+} u128_t;\n+\n+int\n+compare32 (_Decimal32 d, unsigned int i)\n+{\n+  u32_t u;\n+\n+  u.d = d;\n+  return (u.i == i);\n+}\n+\n+int\n+compare64 (_Decimal64 d, unsigned long long i)\n+{\n+  u64_t u;\n+\n+  u.d = d;\n+  return (u.i == i);\n+}\n+\n+int\n+compare128 (_Decimal64 d, unsigned long long i, unsigned long long j)\n+{\n+  u128_t u;\n+\n+  u.d = d;\n+  if (big_endian)\n+    return (u.i[0] == i && u.i[1] == j);\n+  else\n+    return (u.i[1] == i && u.i[0] == j);\n+}\n+\n+void\n+dpd_tests (void)\n+{\n+  if (! compare32 (0.DF, 0x22500000U))\n+    abort ();\n+  if (! compare32 (-0.DF, 0xa2500000U))\n+    abort ();\n+  if (! compare32 (0.E-4DF, 0x22100000U))\n+    abort ();\n+  if (! compare32 (0.E-7DF, 0x21e00000U))\n+    abort ();\n+  if (! compare32 (0.E+3DF, 0x22800000U))\n+    abort ();\n+\n+  if (! compare64 (0.DD, 0x2238000000000000ULL))\n+    abort ();\n+  if (! compare64 (-0.DD, 0xa238000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E-6DD, 0x2220000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E-7DD, 0x221c000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E+2DD, 0x2240000000000000ULL))\n+    abort ();\n+\n+  if (! compare128 (0.DL, 0x2208000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (-0.DL, 0xa208000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E-3DL, 0x2207400000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E-8DL, 0x2206000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E+2DL, 0x2208800000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+}\n+\n+void\n+bid_tests (void)\n+{\n+  if (! compare32 (0.DF, 0x32800000U))\n+    abort ();\n+  if (! compare32 (-0.DF, 0xb2800000U))\n+    abort ();\n+  if (! compare32 (0.E-4DF, 0x30800000U))\n+    abort ();\n+  if (! compare32 (0.E-7DF, 0x2f000000U))\n+    abort ();\n+  if (! compare32 (0.E+3DF, 0x34000000U))\n+    abort ();\n+\n+  if (! compare64 (0.DD, 0x31c0000000000000ULL))\n+    abort ();\n+  if (! compare64 (-0.DD, 0xb1c0000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E-6DD, 0x3100000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E-7DD, 0x30e0000000000000ULL))\n+    abort ();\n+  if (! compare64 (0.E+2DD, 0x3200000000000000ULL))\n+    abort ();\n+\n+  if (! compare128 (0.DL, 0x3040000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (-0.DL, 0xb040000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E-3DL, 0x303a000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E-8DL, 0x3030000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+  if (! compare128 (0.E+2DL, 0x3044000000000000ULL, 0x0000000000000000ULL))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  u32_t u32;\n+  \n+  /* These sizes are probably always true for targets that support decimal\n+     float types, but check anyway.  Abort so we can fix the test.  */\n+  if ((sizeof (_Decimal64) != sizeof (long long))\n+      || (sizeof (_Decimal128) != 2 * sizeof (long long))\n+      || (sizeof (_Decimal32) != sizeof (_Decimal32)))\n+    abort ();\n+\n+  u32.d = 1.DF;\n+\n+  if (u32.i == 0x22500001)\n+    {\n+      big_endian = (u32.b[0] == 0x22);\n+      dpd_tests ();\n+    }\n+  else if (u32.i == 0x32800001)\n+    {\n+       big_endian = (u32.b[0] == 0x32);\n+       bid_tests ();\n+    }\n+  else\n+    abort ();\t\t/* unknown format; test problem  */\n+\n+  return 0;\n+}"}]}