{"sha": "f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "node_id": "C_kwDOANBUbNoAKGYyYjU0ZTViNzk2YjAwZjAwNzJiNjFmOWNkNmE5NjRjNjZlYWQyOWI", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-17T10:06:29Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:22Z"}, "message": "arm: improve tests for vsetq_lane*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.", "tree": {"sha": "73bf5f2301ad4aa85e570b35ee249f49aedb0427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73bf5f2301ad4aa85e570b35ee249f49aedb0427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32be9d72f9c485068b5fb30ede0ab7572cdd1c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32be9d72f9c485068b5fb30ede0ab7572cdd1c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32be9d72f9c485068b5fb30ede0ab7572cdd1c21"}], "stats": {"total": 318, "additions": 284, "deletions": 34}, "files": [{"sha": "6b148a4b03d4533911802fb435ff9bf306a92fa2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16_t a, float16x8_t b)\n {\n-    return vsetq_lane_f16 (a, b, 0);\n+  return vsetq_lane_f16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float16x8_t\n+foo2 (float16x8_t b)\n+{\n+  return vsetq_lane (1.1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e4e7f892e978322a294e6c3aced3ed36b3ca9f44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32_t a, float32x4_t b)\n {\n-    return vsetq_lane_f32 (a, b, 0);\n+  return vsetq_lane_f32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+float32x4_t\n+foo2 (float32x4_t b)\n+{\n+  return vsetq_lane (1.1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "950cd016b761834951ed70a5c87d661a1d7937d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,33 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16_t a, int16x8_t b)\n {\n-    return vsetq_lane_s16 (a, b, 0);\n+  return vsetq_lane_s16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+int16x8_t\n+foo1 (int16_t a, int16x8_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6b49ccd91e491ac4f7bcc968c9769ad7fbecbef5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,33 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32_t a, int32x4_t b)\n {\n-    return vsetq_lane_s32 (a, b, 0);\n+  return vsetq_lane_s32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+int32x4_t\n+foo1 (int32_t a, int32x4_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "95ba4da1f513cb5a2900be1be4d9aa306677cf76", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,16 +1,33 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n-/* { dg-require-effective-target arm_hard_ok } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-mfloat-abi=hard -O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov\td[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int64x2_t\n foo (int64_t a, int64x2_t b)\n {\n-    return vsetq_lane_s64 (a, b, 0);\n+  return vsetq_lane_s64 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler {vmov\\td0, r[1-9]*[0-9], r[1-9]*[0-9]}  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov\td[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+int64x2_t\n+foo1 (int64_t a, int64x2_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "91a5baee55f94a16b891eb89bf8d7306c896d4b5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,33 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.8\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8_t a, int8x16_t b)\n {\n-    return vsetq_lane_s8 (a, b, 0);\n+  return vsetq_lane_s8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.8\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+int8x16_t\n+foo1 (int8_t a, int8x16_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "53986a5c1b17abf37c5e11f29e47d4baa3ec688d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16_t a, uint16x8_t b)\n {\n-    return vsetq_lane_u16 (a, b, 0);\n+  return vsetq_lane_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo1 (uint16_t a, uint16x8_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov.16\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t b)\n+{\n+  return vsetq_lane (1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3f17db9623a6a752f16c4c82a143bc2a14beb64e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, uint32x4_t b)\n {\n-    return vsetq_lane_u32 (a, b, 0);\n+  return vsetq_lane_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo1 (uint32_t a, uint32x4_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov.32\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t b)\n+{\n+  return vsetq_lane (1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5ce4c544c25327163980d10db162a6d3f521bebb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,16 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n-/* { dg-require-effective-target arm_hard_ok } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-mfloat-abi=hard -O2\" } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov\td[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint64x2_t\n foo (uint64_t a, uint64x2_t b)\n {\n-    return vsetq_lane_u64 (a, b, 0);\n+  return vsetq_lane_u64 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler {vmov\\td0, r[1-9]*[0-9], r[1-9]*[0-9]}  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov\td[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint64x2_t\n+foo1 (uint64_t a, uint64x2_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov\td[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint64x2_t\n+foo2 (uint64x2_t b)\n+{\n+  return vsetq_lane (1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "58e932b85e8b3e63078913be0ea8f3aff50a99bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b54e5b796b00f0072b61f9cd6a964c66ead29b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c?ref=f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "patch": "@@ -1,15 +1,45 @@\n-/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov.8\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8_t a, uint8x16_t b)\n {\n-    return vsetq_lane_u8 (a, b, 0);\n+  return vsetq_lane_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vmov.8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmov.8\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo1 (uint8_t a, uint8x16_t b)\n+{\n+  return vsetq_lane (a, b, 1);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmov.8\tq[0-9]+\\[1\\], (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t b)\n+{\n+  return vsetq_lane (1, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}