{"sha": "d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFkMGM2MDNjNDhlMzhjOGIwYzI1Y2Y3ODQyN2U1YjA0NzU0MTlmMQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-11-12T22:52:09Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-11-12T22:52:09Z"}, "message": "rs6000-protos.h (rs6000_initial_elimination_offset): Add.\n\n2003-11-12  Janis Johnson  <janis187@us.ibm.com>\n\n\t* rs6000-protos.h (rs6000_initial_elimination_offset): Add.\n\t(rs6000_stack_info): Remove.  (debug_stack_info): Remove.\n\t(rs6000_emit_eh_reg_restore): Add\n\t* rs6000.c (rs6000_stack_t): Move from rs6000.h, change data type\n\tof vars_size and total_size to HOST_WIDE_INT.\n\t(emit_frame_save): Change parameter size to HOST_WIDE_INT.\n\t(rs6000_stack_info): Make static; change data size to HOST_WIDE_INT.\n\t(debug_stack_info): Make static; change output format of HOST_WIDE_INT\n\tvalues.\n\t(rs6000_emit_eh_reg_restore): New, with code formerly in rs6000.md.\n\t(rs6000_initial_elimination_offset): New, with code formerly in\n\tINITIAL_ELIMINATION_OFFSET.\n\t* rs6000.h (rs6000_stack_t): Remove.\n\t(INITIAL_ELIMINATION_OFFSET): Replace code with call to function\n\trs6000_initial_elimination_offset.\n\t* rs6000.md (UNSPECV_EH_RR split): Replace code with call to\n\trs6000_emit_eh_reg_restore.\n\nFrom-SVN: r73517", "tree": {"sha": "c8c8359efab47700128dc15f82272db6c0b5493b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c8359efab47700128dc15f82272db6c0b5493b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/comments", "author": null, "committer": null, "parents": [{"sha": "8f120836efe76be97ee21f7d00fed6ba3c8c11d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f120836efe76be97ee21f7d00fed6ba3c8c11d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f120836efe76be97ee21f7d00fed6ba3c8c11d1"}], "stats": {"total": 228, "additions": 137, "deletions": 91}, "files": [{"sha": "dfb51cfea704236bf4b8e24c8b586ed7d0603a94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "patch": "@@ -1,3 +1,23 @@\n+2003-11-12  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* rs6000-protos.h (rs6000_initial_elimination_offset): Add.\n+\t(rs6000_stack_info): Remove.  (debug_stack_info): Remove.\n+\t(rs6000_emit_eh_reg_restore): Add\n+\t* rs6000.c (rs6000_stack_t): Move from rs6000.h, change data type\n+\tof vars_size and total_size to HOST_WIDE_INT.\n+\t(emit_frame_save): Change parameter size to HOST_WIDE_INT.\n+\t(rs6000_stack_info): Make static; change data size to HOST_WIDE_INT.\n+\t(debug_stack_info): Make static; change output format of HOST_WIDE_INT\n+\tvalues.\n+\t(rs6000_emit_eh_reg_restore): New, with code formerly in rs6000.md.\n+\t(rs6000_initial_elimination_offset): New, with code formerly in\n+\tINITIAL_ELIMINATION_OFFSET.\n+\t* rs6000.h (rs6000_stack_t): Remove.\n+\t(INITIAL_ELIMINATION_OFFSET): Replace code with call to function\n+\trs6000_initial_elimination_offset.\n+\t* rs6000.md (UNSPECV_EH_RR split): Replace code with call to\n+\trs6000_emit_eh_reg_restore.\n+\n 2003-11-12  Mike Stump  <mrs@apple.com>\n \n \t* c-typeck.c (c_convert_parm_for_inlining): Add argnum, which"}, {"sha": "ed13c34955fec8cd720fe5532af310e03e7e639d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "patch": "@@ -134,6 +134,7 @@ extern int rs6000_legitimate_address (enum machine_mode, rtx, int);\n extern bool rs6000_mode_dependent_address (rtx);\n extern rtx rs6000_return_addr (int, rtx);\n extern void rs6000_output_symbol_ref (FILE*, rtx);\n+extern HOST_WIDE_INT rs6000_initial_elimination_offset (int, int);\n \n extern rtx rs6000_machopic_legitimize_pic_address (rtx orig, \n                             enum machine_mode mode, rtx reg);\n@@ -168,7 +169,6 @@ extern void rs6000_override_options (const char *);\n extern int direct_return (void);\n extern int first_reg_to_save (void);\n extern int first_fp_reg_to_save (void);\n-extern rs6000_stack_t *rs6000_stack_info (void);\n extern void output_ascii (FILE *, const char *, int);\n extern void rs6000_gen_section_name (char **, const char *, const char *);\n extern void output_function_profiler (FILE *, int);\n@@ -187,7 +187,7 @@ extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);\n extern void rs6000_aix_emit_builtin_unwind_init (void);\n extern void rs6000_emit_epilogue (int);\n-extern void debug_stack_info (rs6000_stack_t *);\n+extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);\n extern int vrsave_operation (rtx, enum machine_mode);\n extern int rs6000_register_move_cost (enum machine_mode,"}, {"sha": "5ca78420a6b81615c4ecc6fd9fef7bb23d92844b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 112, "deletions": 7, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "patch": "@@ -70,6 +70,49 @@\n #define min(A,B)\t((A) < (B) ? (A) : (B))\n #define max(A,B)\t((A) > (B) ? (A) : (B))\n \n+/* Structure used to define the rs6000 stack */\n+typedef struct rs6000_stack {\n+  int first_gp_reg_save;\t/* first callee saved GP register used */\n+  int first_fp_reg_save;\t/* first callee saved FP register used */\n+  int first_altivec_reg_save;\t/* first callee saved AltiVec register used */\n+  int lr_save_p;\t\t/* true if the link reg needs to be saved */\n+  int cr_save_p;\t\t/* true if the CR reg needs to be saved */\n+  unsigned int vrsave_mask;\t/* mask of vec registers to save */\n+  int toc_save_p;\t\t/* true if the TOC needs to be saved */\n+  int push_p;\t\t\t/* true if we need to allocate stack space */\n+  int calls_p;\t\t\t/* true if the function makes any calls */\n+  enum rs6000_abi abi;\t\t/* which ABI to use */\n+  int gp_save_offset;\t\t/* offset to save GP regs from initial SP */\n+  int fp_save_offset;\t\t/* offset to save FP regs from initial SP */\n+  int altivec_save_offset;\t/* offset to save AltiVec regs from initial SP */\n+  int lr_save_offset;\t\t/* offset to save LR from initial SP */\n+  int cr_save_offset;\t\t/* offset to save CR from initial SP */\n+  int vrsave_save_offset;\t/* offset to save VRSAVE from initial SP */\n+  int spe_gp_save_offset;\t/* offset to save spe 64-bit gprs  */\n+  int toc_save_offset;\t\t/* offset to save the TOC pointer */\n+  int varargs_save_offset;\t/* offset to save the varargs registers */\n+  int ehrd_offset;\t\t/* offset to EH return data */\n+  int reg_size;\t\t\t/* register size (4 or 8) */\n+  int varargs_size;\t\t/* size to hold V.4 args passed in regs */\n+  HOST_WIDE_INT vars_size;\t/* variable save area size */\n+  int parm_size;\t\t/* outgoing parameter size */\n+  int save_size;\t\t/* save area size */\n+  int fixed_size;\t\t/* fixed size of stack frame */\n+  int gp_size;\t\t\t/* size of saved GP registers */\n+  int fp_size;\t\t\t/* size of saved FP registers */\n+  int altivec_size;\t\t/* size of saved AltiVec registers */\n+  int cr_size;\t\t\t/* size to hold CR if not in save_size */\n+  int lr_size;\t\t\t/* size to hold LR if not in save_size */\n+  int vrsave_size;\t\t/* size to hold VRSAVE if not in save_size */\n+  int altivec_padding_size;\t/* size of altivec alignment padding if\n+\t\t\t\t   not in save_size */\n+  int spe_gp_size;\t\t/* size of 64-bit GPR save size for SPE */\n+  int spe_padding_size;\n+  int toc_size;\t\t\t/* size to hold TOC if not in save_size */\n+  HOST_WIDE_INT total_size;\t/* total bytes allocated for stack */\n+  int spe_64bit_regs_used;\n+} rs6000_stack_t;\n+\n /* Target cpu type */\n \n enum processor_type rs6000_cpu;\n@@ -222,7 +265,7 @@ static void rs6000_frame_related (rtx, rtx, HOST_WIDE_INT, rtx, rtx);\n static rtx spe_synthesize_frame_save (rtx);\n static bool spe_func_has_64bit_regs_p (void);\n static void emit_frame_save (rtx, rtx, enum machine_mode, unsigned int,\n-\t\t\t     int, int);\n+\t\t\t     int, HOST_WIDE_INT);\n static rtx gen_frame_mem_offset (enum machine_mode, rtx, int);\n static void rs6000_emit_allocate_stack (HOST_WIDE_INT, int);\n static unsigned rs6000_hash_constant (rtx);\n@@ -317,6 +360,8 @@ static rtx spe_expand_builtin (tree, rtx, bool *);\n static rtx spe_expand_predicate_builtin (enum insn_code, tree, rtx);\n static rtx spe_expand_evsel_builtin (enum insn_code, tree, rtx);\n static int rs6000_emit_int_cmove (rtx, rtx, rtx, rtx);\n+static rs6000_stack_t *rs6000_stack_info (void);\n+static void debug_stack_info (rs6000_stack_t *);\n \n static rtx altivec_expand_builtin (tree, rtx, bool *);\n static rtx altivec_expand_ld_builtin (tree, rtx, bool *);\n@@ -10269,14 +10314,14 @@ is_altivec_return_reg (rtx reg, void *xyes)\n #define ABI_STACK_BOUNDARY STACK_BOUNDARY\n #endif\n \n-rs6000_stack_t *\n+static rs6000_stack_t *\n rs6000_stack_info (void)\n {\n   static rs6000_stack_t info, zero_info;\n   rs6000_stack_t *info_ptr = &info;\n   int reg_size = TARGET_POWERPC64 ? 8 : 4;\n   int ehrd_size;\n-  int total_raw_size;\n+  HOST_WIDE_INT total_raw_size;\n \n   /* Zero all fields portably.  */\n   info = zero_info;\n@@ -10608,7 +10653,7 @@ spe_func_has_64bit_regs_p (void)\n   return false;\n }\n \n-void\n+static void\n debug_stack_info (rs6000_stack_t *info)\n {\n   const char *abi_string;\n@@ -10697,13 +10742,15 @@ debug_stack_info (rs6000_stack_t *info)\n     fprintf (stderr, \"\\tvarargs_save_offset = %5d\\n\", info->varargs_save_offset);\n \n   if (info->total_size)\n-    fprintf (stderr, \"\\ttotal_size          = %5d\\n\", info->total_size);\n+    fprintf (stderr, \"\\ttotal_size          = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+\t     info->total_size);\n \n   if (info->varargs_size)\n     fprintf (stderr, \"\\tvarargs_size        = %5d\\n\", info->varargs_size);\n \n   if (info->vars_size)\n-    fprintf (stderr, \"\\tvars_size           = %5d\\n\", info->vars_size);\n+    fprintf (stderr, \"\\tvars_size           = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+\t     info->vars_size);\n \n   if (info->parm_size)\n     fprintf (stderr, \"\\tparm_size           = %5d\\n\", info->parm_size);\n@@ -10976,6 +11023,42 @@ rs6000_emit_load_toc_table (int fromprolog)\n     abort ();\n }\n \n+/* Emit instructions to restore the link register after determining where\n+   its value has been stored.  */\n+\n+void\n+rs6000_emit_eh_reg_restore (rtx source, rtx scratch)\n+{\n+  rs6000_stack_t *info = rs6000_stack_info ();\n+  rtx operands[2];\n+\n+  operands[0] = source;\n+  operands[1] = scratch;\n+\n+  if (info->lr_save_p)\n+    {\n+      rtx frame_rtx = stack_pointer_rtx;\n+      HOST_WIDE_INT sp_offset = 0;\n+      rtx tmp;\n+\n+      if (frame_pointer_needed\n+\t  || current_function_calls_alloca\n+\t  || info->total_size > 32767)\n+\t{\n+\t  emit_move_insn (operands[1], gen_rtx_MEM (Pmode, frame_rtx));\n+\t  frame_rtx = operands[1];\n+\t}\n+      else if (info->push_p)\n+\tsp_offset = info->total_size;\n+\n+      tmp = plus_constant (frame_rtx, info->lr_save_offset + sp_offset);\n+      tmp = gen_rtx_MEM (Pmode, tmp);\n+      emit_move_insn (tmp, operands[0]);\n+    }\n+  else\n+    emit_move_insn (gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM), operands[0]);\n+}\n+\n int   \n get_TOC_alias_set (void)\n {\n@@ -11374,7 +11457,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n \n static void\n emit_frame_save (rtx frame_reg, rtx frame_ptr, enum machine_mode mode, \n-\t\t unsigned int regno, int offset, int total_size)\n+\t\t unsigned int regno, int offset, HOST_WIDE_INT total_size)\n {\n   rtx reg, offset_rtx, insn, mem, addr, int_rtx;\n   rtx replacea, replaceb;\n@@ -15575,6 +15658,28 @@ rs6000_libcall_value (enum machine_mode mode)\n   return gen_rtx_REG (mode, regno);\n }\n \n+/* Define the offset between two registers, FROM to be eliminated and its\n+   replacement TO, at the start of a routine.  */\n+HOST_WIDE_INT\n+rs6000_initial_elimination_offset (int from, int to)\n+{\n+  rs6000_stack_t *info = rs6000_stack_info ();\n+  HOST_WIDE_INT offset;\n+\n+  if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    offset = info->push_p ? 0 : -info->total_size;\n+  else if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+    offset = info->total_size;\n+  else if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    offset = info->push_p ? info->total_size : 0;\n+  else if (from == RS6000_PIC_OFFSET_TABLE_REGNUM)\n+    offset = 0;\n+  else\n+    abort ();\n+\n+  return offset;\n+}\n+\n /* Return true if TYPE is of type __ev64_opaque__.  */\n \n static bool"}, {"sha": "2e93b8aa06d66ea2cc592e05eb4b0ea19bb53527", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 58, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "patch": "@@ -1491,49 +1491,6 @@ enum rs6000_abi {\n \n extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n \n-/* Structure used to define the rs6000 stack */\n-typedef struct rs6000_stack {\n-  int first_gp_reg_save;\t/* first callee saved GP register used */\n-  int first_fp_reg_save;\t/* first callee saved FP register used */\n-  int first_altivec_reg_save;\t/* first callee saved AltiVec register used */\n-  int lr_save_p;\t\t/* true if the link reg needs to be saved */\n-  int cr_save_p;\t\t/* true if the CR reg needs to be saved */\n-  unsigned int vrsave_mask;\t/* mask of vec registers to save */\n-  int toc_save_p;\t\t/* true if the TOC needs to be saved */\n-  int push_p;\t\t\t/* true if we need to allocate stack space */\n-  int calls_p;\t\t\t/* true if the function makes any calls */\n-  enum rs6000_abi abi;\t\t/* which ABI to use */\n-  int gp_save_offset;\t\t/* offset to save GP regs from initial SP */\n-  int fp_save_offset;\t\t/* offset to save FP regs from initial SP */\n-  int altivec_save_offset;\t/* offset to save AltiVec regs from initial SP */\n-  int lr_save_offset;\t\t/* offset to save LR from initial SP */\n-  int cr_save_offset;\t\t/* offset to save CR from initial SP */\n-  int vrsave_save_offset;\t/* offset to save VRSAVE from initial SP */\n-  int spe_gp_save_offset;\t/* offset to save spe 64-bit gprs  */\n-  int toc_save_offset;\t\t/* offset to save the TOC pointer */\n-  int varargs_save_offset;\t/* offset to save the varargs registers */\n-  int ehrd_offset;\t\t/* offset to EH return data */\n-  int reg_size;\t\t\t/* register size (4 or 8) */\n-  int varargs_size;\t\t/* size to hold V.4 args passed in regs */\n-  int vars_size;\t\t/* variable save area size */\n-  int parm_size;\t\t/* outgoing parameter size */\n-  int save_size;\t\t/* save area size */\n-  int fixed_size;\t\t/* fixed size of stack frame */\n-  int gp_size;\t\t\t/* size of saved GP registers */\n-  int fp_size;\t\t\t/* size of saved FP registers */\n-  int altivec_size;\t\t/* size of saved AltiVec registers */\n-  int cr_size;\t\t\t/* size to hold CR if not in save_size */\n-  int lr_size;\t\t\t/* size to hold LR if not in save_size */\n-  int vrsave_size;\t\t/* size to hold VRSAVE if not in save_size */\n-  int altivec_padding_size;\t/* size of altivec alignment padding if\n-\t\t\t\t   not in save_size */\n-  int spe_gp_size;\t\t/* size of 64-bit GPR save size for SPE */\n-  int spe_padding_size;\n-  int toc_size;\t\t\t/* size to hold TOC if not in save_size */\n-  int total_size;\t\t/* total bytes allocated for stack */\n-  int spe_64bit_regs_used;\n-} rs6000_stack_t;\n-\n /* Define this if pushing a word on the stack\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n@@ -1984,21 +1941,8 @@ typedef struct rs6000_args\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  rs6000_stack_t *info = rs6000_stack_info ();\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n- if ((FROM) == FRAME_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM)\t\\\n-   (OFFSET) = (info->push_p) ? 0 : - info->total_size;\t\t\t\\\n- else if ((FROM) == ARG_POINTER_REGNUM && (TO) == FRAME_POINTER_REGNUM)\t\\\n-   (OFFSET) = info->total_size;\t\t\t\t\t\t\\\n- else if ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM)\t\\\n-   (OFFSET) = (info->push_p) ? info->total_size : 0;\t\t\t\\\n-  else if ((FROM) == RS6000_PIC_OFFSET_TABLE_REGNUM)\t\t\t\\\n-    (OFFSET) = 0;\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    abort ();\t\t\t\t\t\t\t\t\\\n-}\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  ((OFFSET) = rs6000_initial_elimination_offset(FROM, TO))\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "1c7f38b034773769611025fbc6fde8fa2a4fe234", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1d0c603c48e38c8b0c25cf78427e5b0475419f1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d1d0c603c48e38c8b0c25cf78427e5b0475419f1", "patch": "@@ -14684,30 +14684,7 @@\n   [(const_int 0)]\n   \"\n {\n-  rs6000_stack_t *info = rs6000_stack_info ();\n-\n-  if (info->lr_save_p)\n-    {\n-      rtx frame_rtx = stack_pointer_rtx;\n-      int sp_offset = 0;\n-      rtx tmp;\n-\n-      if (frame_pointer_needed\n-\t  || current_function_calls_alloca\n-\t  || info->total_size > 32767)\n-\t{\n-\t  emit_move_insn (operands[1], gen_rtx_MEM (Pmode, frame_rtx));\n-\t  frame_rtx = operands[1];\n-\t}\n-      else if (info->push_p)\n-\tsp_offset = info->total_size;\n-\n-      tmp = plus_constant (frame_rtx, info->lr_save_offset + sp_offset);\n-      tmp = gen_rtx_MEM (Pmode, tmp);\n-      emit_move_insn (tmp, operands[0]);\n-    }\n-  else\n-    emit_move_insn (gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM), operands[0]);\n+  rs6000_emit_eh_reg_restore (operands[0], operands[1]);\n   DONE;\n }\")\n "}]}