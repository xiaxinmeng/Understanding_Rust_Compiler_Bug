{"sha": "e7c3cc847fe3af3560ca3ea3a0759fccf2010554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjM2NjODQ3ZmUzYWYzNTYwY2EzZWEzYTA3NTlmY2NmMjAxMDU1NA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T18:25:51Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T18:25:51Z"}, "message": "(movsicc): New pattern.\n\n(movsfcc, movdfcc, *movsicc_insn, *movsfcc_hard_insn): Likewise.\n(*movsfcc_soft_insn, movdfcc_insn): Likewise.\n(*movdf_soft_insn): Rewrite.\n\nFrom-SVN: r9653", "tree": {"sha": "05cb8c144f76c4a893eb79c2f8c33895ef19b37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cb8c144f76c4a893eb79c2f8c33895ef19b37c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c3cc847fe3af3560ca3ea3a0759fccf2010554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c3cc847fe3af3560ca3ea3a0759fccf2010554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c3cc847fe3af3560ca3ea3a0759fccf2010554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c3cc847fe3af3560ca3ea3a0759fccf2010554/comments", "author": null, "committer": null, "parents": [{"sha": "f313930195776e1a083957f4d1f6eac0efcc89ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f313930195776e1a083957f4d1f6eac0efcc89ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f313930195776e1a083957f4d1f6eac0efcc89ef"}], "stats": {"total": 137, "additions": 101, "deletions": 36}, "files": [{"sha": "4c8717fd4ce36d51996bd14c9eb6810de460280c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 101, "deletions": 36, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c3cc847fe3af3560ca3ea3a0759fccf2010554/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c3cc847fe3af3560ca3ea3a0759fccf2010554/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e7c3cc847fe3af3560ca3ea3a0759fccf2010554", "patch": "@@ -2565,44 +2565,17 @@\n  (set_attr \"type\" \n \"load,store2,load,ffarith,ffarith,ffarith,f_load,f_store,r_mem_f,f_mem_r,*\")])\n \n-;; Exactly the same as above, except that all `f' cases are deleted.\n-;; This is necessary to prevent reload from ever trying to use a `f' reg\n-;; when -msoft-float.\n+;; Software floating point version.  This is essentially the same as movdi.\n+;; Do not use `f' as a constraint to prevent reload from ever trying to use\n+;; an `f' reg.\n \n (define_insn \"*movdf_soft_insn\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=r,Q#m,r,r\")\n-\t(match_operand:DF 1 \"general_operand\" \n-\t \t\"Q,r,?o,??r\"))]\n-  \"TARGET_SOFT_FLOAT\n-   && (GET_CODE (operands[0]) != MEM || register_operand (operands[1], DFmode))\"\n-  \"*\n-{\n-  rtx ops[3];\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \\\"ldm%?ia\\\\t%m1, {%0, %R0}\\\\t%@ double\\\";\n-\n-    case 1:\n-      return \\\"stm%?ia\\\\t%m0, {%1, %R1}\\\\t%@ double\\\";\n-\n-    case 2:\n-      ops[0] = operands[0];\n-      ops[1] = XEXP (XEXP (operands[1], 0), 0);\n-      ops[2] = XEXP (XEXP (operands[1], 0), 1);\n-      if (!INTVAL (ops[2]) || const_ok_for_arm (INTVAL (ops[2])))\n-\toutput_asm_insn (\\\"add%?\\\\t%0, %1, %2\\\", ops);\n-      else\n-\toutput_asm_insn (\\\"sub%?\\\\t%0, %1, #%n2\\\", ops);\n-      return \\\"ldm%?ia\\\\t%0, {%0, %R0}\\\\t%@ double\\\";\n-\n-    case 3: return output_move_double (operands);\n-    }\n-}\n-\"\n-[(set_attr \"length\" \"4,4,8,8\")\n- (set_attr \"type\" \"load,store2,load,*\")])\n+  [(set (match_operand:DF 0 \"soft_df_operand\" \"=r,r,o<>,r\")\n+\t(match_operand:DF 1 \"soft_df_operand\" \"r,o<>,r,F\"))]\n+  \"TARGET_SOFT_FLOAT\"\n+  \"* return output_move_double (operands);\"\n+[(set_attr \"length\" \"8,8,8,32\")\n+ (set_attr \"type\" \"*,load,store2,*\")])\n \n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"general_operand\" \"\")\n@@ -3336,6 +3309,98 @@\n  (set_attr \"length\" \"8\")])\n \n \f\n+;; Conditional move insns\n+\n+(define_expand \"movsicc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:SI 2 \"arm_not_operand\" \"\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+  rtx ccreg = gen_rtx (REG,\n+\t\t       SELECT_CC_MODE (code, arm_compare_op0, arm_compare_op1),\n+\t\t       CC_REGNUM);\n+\n+  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+}\")\n+\n+(define_expand \"movsfcc\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:SF 2 \"nonmemory_operand\" \"\")\n+\t\t      (match_operand:SF 3 \"register_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+  rtx ccreg = gen_rtx (REG,\n+\t\t       SELECT_CC_MODE (code, arm_compare_op0, arm_compare_op1),\n+\t\t       CC_REGNUM);\n+\n+  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+}\")\n+\n+(define_expand \"movdfcc\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:DF 2 \"nonmemory_operand\" \"\")\n+\t\t      (match_operand:DF 3 \"register_operand\" \"\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"\n+{\n+  enum rtx_code code = GET_CODE (operands[1]);\n+  rtx ccreg = gen_rtx (REG,\n+\t\t       SELECT_CC_MODE (code, arm_compare_op0, arm_compare_op1),\n+\t\t       CC_REGNUM);\n+\n+  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n+}\")\n+\n+(define_insn \"*movsicc_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:SI 2 \"arm_not_operand\" \"rI,K\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"0,0\")))]\n+  \"\"\n+  \"@\n+   mov%d1\\\\t%0, %2\n+   mvn%d1\\\\t%0, #%B2\"\n+  [(set_attr \"type\" \"*,*\")\n+   (set_attr \"conds\" \"use,use\")])\n+\n+(define_insn \"*movsfcc_hard_insn\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:SF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"mvf%d1s\\\\t%0, %2\"\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"conds\" \"use\")])\n+\n+(define_insn \"*movsfcc_soft_insn\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:SF 2 \"register_operand\" \"r\")\n+\t\t      (match_operand:SF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SOFT_FLOAT\"\n+  \"mov%d1\\\\t%0, %2\"\n+  [(set_attr \"type\" \"*\")\n+   (set_attr \"conds\" \"use\")])\n+\n+(define_insn \"*movdfcc_insn\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n+\t\t      (match_operand:DF 2 \"register_operand\" \"f\")\n+\t\t      (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"mvf%d1d\\\\t%0, %2\"\n+  [(set_attr \"type\" \"ffarith\")\n+   (set_attr \"conds\" \"use\")])\n+\f\n ;; Jump and linkage insns\n \n (define_insn \"jump\""}]}