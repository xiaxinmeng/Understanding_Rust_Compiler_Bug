{"sha": "c41993e86d74a36153bf0efcf84bb94d46e39953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxOTkzZTg2ZDc0YTM2MTUzYmYwZWZjZjg0YmI5NGQ0NmUzOTk1Mw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-04-22T20:33:12Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-04-22T20:33:12Z"}, "message": "trans-const.c (gfc_conv_mpfr_to_tree): Remove unneeded computation; simplify logic; Add a gcc_assert.\n\n* trans-const.c (gfc_conv_mpfr_to_tree): Remove unneeded computation;\n  simplify logic; Add a gcc_assert.\n\nFrom-SVN: r98587", "tree": {"sha": "046d193940b3488fa5cf92488b02c323d097123f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046d193940b3488fa5cf92488b02c323d097123f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c41993e86d74a36153bf0efcf84bb94d46e39953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41993e86d74a36153bf0efcf84bb94d46e39953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41993e86d74a36153bf0efcf84bb94d46e39953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41993e86d74a36153bf0efcf84bb94d46e39953/comments", "author": null, "committer": null, "parents": [{"sha": "eeab1ad250899571da0227735fc6e25ab37fb135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeab1ad250899571da0227735fc6e25ab37fb135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeab1ad250899571da0227735fc6e25ab37fb135"}], "stats": {"total": 56, "additions": 17, "deletions": 39}, "files": [{"sha": "46247ceff826b9cd8e6981ebdcadeeea3f0dbf6e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41993e86d74a36153bf0efcf84bb94d46e39953/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41993e86d74a36153bf0efcf84bb94d46e39953/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c41993e86d74a36153bf0efcf84bb94d46e39953", "patch": "@@ -1,3 +1,8 @@\n+2005-04-21  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* trans-const.c (gfc_conv_mpfr_to_tree): Remove unneeded computation;\n+\tsimplify logic; Add a gcc_assert.\n+\n 2005-04-19  Steven G. Kargl  <kargls@comcast.net>\n \n \t* trans-const.c (gfc_conv_mpz_to_tree): Fix comment."}, {"sha": "a6387199bd7d9314048dab83ae87ac835b9a6891", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41993e86d74a36153bf0efcf84bb94d46e39953/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41993e86d74a36153bf0efcf84bb94d46e39953/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=c41993e86d74a36153bf0efcf84bb94d46e39953", "patch": "@@ -221,10 +221,8 @@ gfc_conv_mpfr_to_tree (mpfr_t f, int kind)\n   tree res;\n   tree type;\n   mp_exp_t exp;\n-  char *p;\n-  char *q;\n+  char *p, *q;\n   int n;\n-  int edigits;\n \n   for (n = 0; gfc_real_kinds[n].kind != 0; n++)\n     {\n@@ -233,45 +231,20 @@ gfc_conv_mpfr_to_tree (mpfr_t f, int kind)\n     }\n   gcc_assert (gfc_real_kinds[n].kind);\n \n-  n = MAX (abs (gfc_real_kinds[n].min_exponent),\n-\t   abs (gfc_real_kinds[n].max_exponent));\n+  /* A decimal representation is used here, which requires the additional\n+     two characters for rounding.  TODO: Use a hexadecimal representation\n+     to avoid rounding issues.  */\n+  p = mpfr_get_str (NULL, &exp, 10, gfc_real_kinds[n].precision+2,\n+\t\t    f, GFC_RND_MODE);\n+  gcc_assert (p);\n \n-  edigits = 1;\n-  while (n > 0)\n-    {\n-      n = n / 10;\n-      edigits += 3;\n-    }\n-\n-  if (kind == gfc_default_double_kind)\n-    p = mpfr_get_str (NULL, &exp, 10, 17, f, GFC_RND_MODE);\n-  else\n-    p = mpfr_get_str (NULL, &exp, 10, 8, f, GFC_RND_MODE);\n+  /* The additional 10 characters add space for the sprintf below.  */\n+  q = (char *) gfc_getmem (strlen (p) + 10);\n \n-\n-  /* We also have one minus sign, \"e\", \".\" and a null terminator.  */\n-  q = (char *) gfc_getmem (strlen (p) + edigits + 4);\n-\n-  if (p[0])\n-    {\n-      if (p[0] == '-')\n-\t{\n-\t  strcpy (&q[2], &p[1]);\n-\t  q[0] = '-';\n-\t  q[1] = '.';\n-\t}\n-      else\n-\t{\n-\t  strcpy (&q[1], p);\n-\t  q[0] = '.';\n-\t}\n-      strcat (q, \"e\");\n-      sprintf (&q[strlen (q)], \"%d\", (int) exp);\n-    }\n+  if (p[0] == '-')\n+    sprintf (q, \"-.%se%d\", &p[1], (int) exp);\n   else\n-    {\n-      strcpy (q, \"0\");\n-    }\n+    sprintf (q, \".%se%d\", p, (int) exp);\n \n   type = gfc_get_real_type (kind);\n   res = build_real (type, REAL_VALUE_ATOF (q, TYPE_MODE (type)));"}]}