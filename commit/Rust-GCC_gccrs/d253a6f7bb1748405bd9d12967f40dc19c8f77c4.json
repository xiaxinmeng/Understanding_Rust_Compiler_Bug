{"sha": "d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1M2E2ZjdiYjE3NDg0MDViZDlkMTI5NjdmNDBkYzE5YzhmNzdjNA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-05T16:46:18Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-14T12:43:37Z"}, "message": "d: Add TARGET_D_HAS_STDCALL_CONVENTION\n\nThis replaces the use of the D front-end `is64bit' parameter in\ndetermining whether to insert the \"stdcall\" function attribute.\n\nIt is also used to determine whether `extern(System)' should be the same\nas `extern(Windows)' in the implementation of Target::systemLinkage.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-d.c (ix86_d_has_stdcall_convention): New function.\n\t* config/i386/i386-protos.h (ix86_d_has_stdcall_convention): Declare.\n\t* config/i386/i386.h (TARGET_D_HAS_STDCALL_CONVENTION): Define.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (D language and ABI): Add @hook for\n\tTARGET_D_HAS_STDCALL_CONVENTION.\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (Target::systemLinkage): Return LINKwindows if\n\td_has_stdcall_convention applies to LINKsystem.\n\t* d-target.def (d_has_stdcall_convention): New hook.\n\t* types.cc (TypeVisitor::visit (TypeFunction *)): Insert \"stdcall\"\n\tfunction attribute if d_has_stdcall_convention applies to LINKwindows.", "tree": {"sha": "5521bbeda5815da04d1f8cd76efb8095ffe99aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5521bbeda5815da04d1f8cd76efb8095ffe99aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3330e673959d44e5c7663956803e1e7a703dd626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3330e673959d44e5c7663956803e1e7a703dd626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3330e673959d44e5c7663956803e1e7a703dd626"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "58b4790fdad3137efec5331f92f1e687fd03ce26", "filename": "gcc/config/i386/i386-d.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-d.c?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -44,3 +44,23 @@ ix86_d_target_versions (void)\n   else\n     d_add_builtin_version (\"D_SoftFloat\");\n }\n+\n+/* Implement TARGET_D_HAS_STDCALL_CONVENTION for x86 targets.  */\n+\n+bool\n+ix86_d_has_stdcall_convention (unsigned int *link_system,\n+\t\t\t       unsigned int *link_windows)\n+{\n+  if (ix86_abi == MS_ABI)\n+    {\n+      *link_system = 1;\n+      *link_windows = (!TARGET_64BIT) ? 1 : 0;\n+    }\n+  else\n+    {\n+      *link_system = 0;\n+      *link_windows = 0;\n+    }\n+\n+  return true;\n+}"}, {"sha": "acfb9f5fe87a9a24b1f8fc3a1367ea774203d3e4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -264,6 +264,7 @@ extern void ix86_register_pragmas (void);\n \n /* In i386-d.c  */\n extern void ix86_d_target_versions (void);\n+extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n \n /* In winnt.c  */\n extern void i386_pe_unique_section (tree, int);"}, {"sha": "4b525d203a314ebcddb9178bff7617b459198314", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -802,8 +802,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* Target Pragmas.  */\n #define REGISTER_TARGET_PRAGMAS() ix86_register_pragmas ()\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS ix86_d_target_versions\n+#define TARGET_D_HAS_STDCALL_CONVENTION ix86_d_has_stdcall_convention\n \n #ifndef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \""}, {"sha": "f1814df110d95e55fa4648325708f5d61c461c62", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -435,11 +435,21 @@ TargetCPP::derivedClassOffset(ClassDeclaration *base_class)\n   return base_class->structsize;\n }\n \n-/* Return the default system linkage for the target.  */\n+/* Return the default `extern (System)' linkage for the target.  */\n \n LINK\n Target::systemLinkage (void)\n {\n+  unsigned link_system, link_windows;\n+\n+  if (targetdm.d_has_stdcall_convention (&link_system, &link_windows))\n+    {\n+      /* In [attribute/linkage], `System' is the same as `Windows' on Windows\n+\t platforms, and `C' on other platforms.  */\n+      if (link_system)\n+\treturn LINKwindows;\n+    }\n+\n   return LINKc;\n }\n "}, {"sha": "f79ffb9cd7dd4ca43c92046c787b57da2c616a31", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -71,5 +71,18 @@ as the name of the symbol indicating the end address of the module info\\n\\\n section\",\n  const char *, NULL)\n \n+/* The \"stdcall\" convention is really supported on 32-bit x86/Windows only.\n+   The following hook is a helper to determine whether to apply the attribute\n+   on declarations with `extern(System)' and `extern(Windows)' linkage.  */\n+DEFHOOK\n+(d_has_stdcall_convention,\n+ \"Returns @code{true} if the target supports the stdcall calling convention.\\n\\\n+The hook should also set @var{link_system} to @code{1} if the @code{stdcall}\\n\\\n+attribute should be applied to functions with @code{extern(System)} linkage,\\n\\\n+and @var{link_windows} to @code{1} to apply @code{stdcall} to functions with\\n\\\n+@code{extern(Windows)} linkage.\",\n+ bool, (unsigned int *link_system, unsigned int *link_windows),\n+ hook_bool_uintp_uintp_false)\n+\n /* Close the 'struct gcc_targetdm' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "3b121f5b042d93e7bb042166f3a29fb5b853fbab", "filename": "gcc/d/types.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n \n #include \"d-tree.h\"\n+#include \"d-target.h\"\n \n \n /* Return the signed or unsigned version of TYPE, an integral type, the\n@@ -800,13 +801,19 @@ class TypeVisitor : public Visitor\n     switch (t->linkage)\n       {\n       case LINKwindows:\n-\t/* [attribute/linkage]\n+\t{\n+\t  /* [attribute/linkage]\n \n-\t   The Windows convention is distinct from the C convention only\n-\t   on Win32, where it is equivalent to the stdcall convention.  */\n-\tif (!global.params.is64bit)\n-\t  t->ctype = insert_type_attribute (t->ctype, \"stdcall\");\n-\tbreak;\n+\t     The Windows convention is distinct from the C convention only\n+\t     on Win32, where it is equivalent to the stdcall convention.  */\n+\t  unsigned link_system, link_windows;\n+\t  if (targetdm.d_has_stdcall_convention (&link_system, &link_windows))\n+\t    {\n+\t      if (link_windows)\n+\t\tt->ctype = insert_type_attribute (t->ctype, \"stdcall\");\n+\t    }\n+\t  break;\n+\t}\n \n       case LINKc:\n       case LINKcpp:"}, {"sha": "71607c4dc4e81b544acc554e65f7d453b1c69164", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -10828,6 +10828,14 @@ as the name of the symbol indicating the end address of the module info\n section\n @end deftypevr\n \n+@deftypefn {D Target Hook} bool TARGET_D_HAS_STDCALL_CONVENTION (unsigned int *@var{link_system}, unsigned int *@var{link_windows})\n+Returns @code{true} if the target supports the stdcall calling convention.\n+The hook should also set @var{link_system} to @code{1} if the @code{stdcall}\n+attribute should be applied to functions with @code{extern(System)} linkage,\n+and @var{link_windows} to @code{1} to apply @code{stdcall} to functions with\n+@code{extern(Windows)} linkage.\n+@end deftypefn\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}, {"sha": "c8880dafcd48bbac14c5d3850d2554e11f59abe4", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d253a6f7bb1748405bd9d12967f40dc19c8f77c4/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "patch": "@@ -7363,6 +7363,8 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_MINFO_END_NAME\n \n+@hook TARGET_D_HAS_STDCALL_CONVENTION\n+\n @node Named Address Spaces\n @section Adding support for named address spaces\n @cindex named address spaces"}]}