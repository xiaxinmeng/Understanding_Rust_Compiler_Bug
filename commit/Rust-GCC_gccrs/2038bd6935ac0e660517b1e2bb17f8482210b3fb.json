{"sha": "2038bd6935ac0e660517b1e2bb17f8482210b3fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzOGJkNjkzNWFjMGU2NjA1MTdiMWUyYmIxN2Y4NDgyMjEwYjNmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-10-20T21:57:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-10-20T21:57:29Z"}, "message": "re PR c/12553 ([tree-ssa] ICE in gimplify_expr with volatiles)\n\n        PR c/12553\n        * tree.c (build1) <ADDR_EXPR>: Set TREE_SIDE_EFFECTS\n        appropriately.\n\n        PR c/11446\n        * stor-layout.c (layout_decl): Fix alignment handling.\n\nFrom-SVN: r72724", "tree": {"sha": "3fa7706fb78b0726e4f89cb84adcf0a469b08fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa7706fb78b0726e4f89cb84adcf0a469b08fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2038bd6935ac0e660517b1e2bb17f8482210b3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2038bd6935ac0e660517b1e2bb17f8482210b3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2038bd6935ac0e660517b1e2bb17f8482210b3fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2038bd6935ac0e660517b1e2bb17f8482210b3fb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02601a5c5a49dfd20f2e34a146fc7b3cc6d3f0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02601a5c5a49dfd20f2e34a146fc7b3cc6d3f0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02601a5c5a49dfd20f2e34a146fc7b3cc6d3f0df"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "4b914ee9927a9448fb703df13957f7e164639092", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2038bd6935ac0e660517b1e2bb17f8482210b3fb", "patch": "@@ -1,3 +1,12 @@\n+2003-10-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c/12553\n+\t* tree.c (build1) <ADDR_EXPR>: Set TREE_SIDE_EFFECTS\n+\tappropriately.\n+\n+\tPR c/11446\n+\t* stor-layout.c (layout_decl): Fix alignment handling.\n+\n 2003-10-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/extend.texi: Deprecate casts as lvalues."}, {"sha": "c29c22d81f3d177e17c1d131dc81273e396b0c81", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=2038bd6935ac0e660517b1e2bb17f8482210b3fb", "patch": "@@ -450,20 +450,26 @@ layout_decl (tree decl, unsigned int known_align)\n \t}\n       else if (DECL_PACKED (decl) && DECL_USER_ALIGN (decl))\n \t/* Don't touch DECL_ALIGN.  For other packed fields, go ahead and\n-\t   round up; we'll reduce it again below.  */;\n+\t   round up; we'll reduce it again below.  We want packing to\n+\t   supercede USER_ALIGN inherited from the type, but defer to\n+\t   alignment explicitly specified on the field decl.  */;\n       else\n-\tdo_type_align (type, decl);\n-\n-      /* If the field is of variable size, we can't misalign it since we\n-\t have no way to make a temporary to align the result.  But this\n-\t isn't an issue if the decl is not addressable.  Likewise if it\n-\t is of unknown size.  */\n-      if (DECL_PACKED (decl)\n-\t  && !DECL_USER_ALIGN (decl)\n-\t  && (DECL_NONADDRESSABLE_P (decl)\n-\t      || DECL_SIZE_UNIT (decl) == 0\n-\t      || TREE_CODE (DECL_SIZE_UNIT (decl)) == INTEGER_CST))\n-\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n+\t{\n+\t  do_type_align (type, decl);\n+\n+\t  /* If the field is of variable size, we can't misalign it since we\n+\t     have no way to make a temporary to align the result.  But this\n+\t     isn't an issue if the decl is not addressable.  Likewise if it\n+\t     is of unknown size.\n+\n+\t     Note that do_type_align may set DECL_USER_ALIGN, so we don't\n+\t     want to check it again here.  */\n+\t  if (DECL_PACKED (decl)\n+\t      && (DECL_NONADDRESSABLE_P (decl)\n+\t\t  || DECL_SIZE_UNIT (decl) == 0\n+\t\t  || TREE_CODE (DECL_SIZE_UNIT (decl)) == INTEGER_CST))\n+\t    DECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n+\t}\n \n       /* Should this be controlled by DECL_USER_ALIGN, too?  */\n       if (maximum_field_alignment != 0)"}, {"sha": "fef9826730502e0a0c06859eabbcc37aec772bcc", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2038bd6935ac0e660517b1e2bb17f8482210b3fb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2038bd6935ac0e660517b1e2bb17f8482210b3fb", "patch": "@@ -2466,6 +2466,29 @@ build1 (enum tree_code code, tree type, tree node)\n       TREE_READONLY (t) = 0;\n       break;\n \n+    case ADDR_EXPR:\n+      if (node)\n+\t{\n+\t  /* The address of a volatile decl or reference does not have\n+\t     side-effects.  But be careful not to ignore side-effects from\n+\t     other sources deeper in the expression--if node is a _REF and\n+\t     one of its operands has side-effects, so do we.  */\n+\t  if (TREE_THIS_VOLATILE (node))\n+\t    {\n+\t      TREE_SIDE_EFFECTS (t) = 0;\n+\t      if (!DECL_P (node))\n+\t\t{\n+\t\t  int i = first_rtl_op (TREE_CODE (node));\n+\t\t  for (; i >= 0; --i)\n+\t\t    {\n+\t\t      if (TREE_SIDE_EFFECTS (TREE_OPERAND (node, i)))\n+\t\t\tTREE_SIDE_EFFECTS (t) = 1;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      break;\n+\n     default:\n       if (TREE_CODE_CLASS (code) == '1' && node && TREE_CONSTANT (node))\n \tTREE_CONSTANT (t) = 1;"}]}