{"sha": "c85f7c16ad9bed5d4732a4624c049da5a5f33085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1ZjdjMTZhZDliZWQ1ZDQ3MzJhNDYyNGMwNDlkYTVhNWYzMzA4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-14T20:57:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-14T20:57:58Z"}, "message": "Bring in final gcc-2.8.0 changes.\n\nFrom-SVN: r17355", "tree": {"sha": "028c0425d9847ebff16ca9566dcf696998e902b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028c0425d9847ebff16ca9566dcf696998e902b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c85f7c16ad9bed5d4732a4624c049da5a5f33085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85f7c16ad9bed5d4732a4624c049da5a5f33085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85f7c16ad9bed5d4732a4624c049da5a5f33085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85f7c16ad9bed5d4732a4624c049da5a5f33085/comments", "author": null, "committer": null, "parents": [{"sha": "60db002df5f6244493a8f2d52277994bdd071938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60db002df5f6244493a8f2d52277994bdd071938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60db002df5f6244493a8f2d52277994bdd071938"}], "stats": {"total": 909, "additions": 663, "deletions": 246}, "files": [{"sha": "108f95a354f48a4e716e9626d98dfd900a042ecd", "filename": "gcc/ChangeLog.11", "status": "modified", "additions": 197, "deletions": 1, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.11?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,7 +1,203 @@\n-Sun Dec 14 06:49:05 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+Wed Jan  7 18:02:42 1998  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Version 2.8.0 released.\n \n+Wed Jan  7 17:54:41 1998  J. Kean Johnston  <jkj@sco.com>\n+\n+\t* i386/sco5.h ({END,START}FILE_SPEC): Link with correct crtbegin.o\n+\tand crtend.o when using -static.\n+\n+Wed Jan  7 17:49:14 1998  Jan Christiaan van Winkel <Jan.Christiaan.van.Winkel@ATComputing.nl>\n+\n+\t* cppexp.c (gansidecl.h): Include.\n+\n+Wed Jan  7 17:45:07 1998  Tristan Gingold  <gingold@puccini.enst.fr>\n+\n+\t* expr.c (get_push_address): Use copy_to_reg instead of force_operand.\n+\t(emit_push_insn): Avoid null pointer deference if aggregate has no\n+\ttypes.\n+\t(expand_expr): Avoid finite but useless recursion.\n+\t(expand_builtin): Fix typo in calling function.\n+\t* function.c (assign_parms): Avoid useless call to chkr_set_right.\n+\n+Wed Jan  7 17:31:13 1998  Christian Iseli  <Christian.Iseli@lslsun.epfl.ch>\n+\n+\t* combine.c (force_to_mode): Return if operand is a CLOBBER.\n+\n+Wed Jan  7 17:23:24 1998  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* x-rs6000 (INSTALL): Remove.\n+\n+\t* jump.c (jump_optimize): Don't use a hard reg as an operand\n+\tof a conditional move if small register classes.\n+\n+Wed Jan  7 17:09:28 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* cse.c (max_insn_uid): New variable.\n+\t(cse_around_loop): Use it.\n+\t(cse_main): Set it.\n+\n+Wed Dec 31 18:40:26 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* stmt.c (expand_asm_operands): Treat ASM with no outputs as volatile.\n+\n+Wed Dec 31 08:03:45 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* toplev.c (flag_verbose_asm): Default to 0, not 1.\n+\n+\t* i386/bsd386.h (ASM_COMMENT_START): Define to \" #\".\n+\n+Tue Dec 30 17:38:55 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* unroll.c (find_splittable_givs): Handle givs with\n+\tdest_reg created by loop.\n+\n+Tue Dec 30 14:21:33 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* svr4.h (LINK_SPEC): Never specify -h.\n+\t* ptx4.h (LINK_SPEC): Likewise.\n+\t* rs6000/sysv4.h (LINK_SPEC): Likewise.\n+\t* sparc/sol2.h (LINK_SPEC): Likewise.\n+\n+Tue Dec 30 06:15:23 1997  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* libgcc2.c (_eh_compat): Do not include stdlib.h, but provide a\n+\tprivate extern declaration for malloc.\n+\n+Mon Dec 29 06:56:41 1997  Laurent Guerby <guerby@gnat.com>\n+\n+\t* Makefile.in (stmp-int-hdrs): Add \"touch\".\n+\n+Sun Dec 28 19:36:05 1997  Stephen L Moshier  <moshier@mediaone.net>\n+\n+\t* mips.h (CACHE_FLUSH_FUNC): New, defaults to _flush_cache.\n+\t(INITIALIZE_TRAMPOLINE): Use it.\n+\t* mips/ultrix.h (CACHE_FLUSH_FUNC): Define as cacheflush.\n+\t* mips/news4.h (CACHE_FLUSH_FUNC): Likewise.\n+\n+Sun Dec 28 08:19:13 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* arm.c: Don't include assert.h.\n+\t* i960.c: Likewise.\n+\t(i960_arg_size_and_align): Rewrite to avoid assert.\n+\t* m88k.c: Don't include assert.h.\n+\t(expand_block_move): Rewrite to avoid assert.\n+\t* except.c: Don't include assert.h.\n+\t(scan_region): Rewrite to avoid assert.\n+\t(save_eh_status, restore_eh_status, scan_region): Don't bother\n+\ttesting whether pointer is null.\n+\t* dwarfout.c, dwarf2out.c: Do not include assert.h.\n+\t(assert): New macro, since we can't use system assert.\n+\n+Sat Dec 27 19:08:17 1997  Stephen L Moshier  <moshier@mediaone.net>\n+\n+    * mips/ultrix.h (DWARF2_UNWIND_INFO): Define as 0.\n+\n+Fri Dec 26 05:57:06 1997  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* m68k/mot3300.h (FINALIZE_TRAMPOLINE): Macro defined.\n+\t* libgcc2.c (__clear_insn_cache): New sysV68-specific helper function\n+\tfor trampolines.\n+\n+Thu Dec 25 15:22:43 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rs6000.c (function_arg_padding): All aggregates pad upward.\n+\n+Wed Dec 24 18:05:13 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* sparc.c: Add prototypes for static functions.\n+\t(check_pic): Check for form of pic_pc_rtx, not it itself.\n+\t(pic_setup_code): New function, from finalize_pic.\n+\t(finalize_pic): Call pic_setup_code and insert after nonlocal_receiver.\n+\t* sparc.md (nonlocal_goto_receiver): New pattern.\n+\n+Tue Dec 23 05:54:38 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (expand_builtin_setjmp): Call builtin_setjmp_receiver.\n+\t* mips.md (builtin_setjmp_receiver): New pattern.\n+\n+\t* crtstuff.c (__do_global_ctors_aux): Add missing call to\n+\tFORCE_INIT_SECTION_ALIGN and go back to text section.\n+\t* i386/sol2.h (FORCE_INIT_SECTION_ALIGN): Remove loop.\n+\n+\t* expr.c (do_store_flag): For shift, get bit count using tree_pow2.\n+\n+Tue Dec 23 05:21:18 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* genattrtab.c (main): Check HAVE_{G,S}ETRLIMIT too.\n+\n+Mon Dec 22 19:30:59 1997  Michael P. Hayes  <michaelh@ongaonga.chch.cri.nz>\n+\n+\t* sdbout.c (plain_type_1): Add missing checks for named types \"char\"\n+\tand \"int\" and check for int by size first.\n+\n+Mon Dec 22 19:13:58 1997  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* m68k/xm-mot3300.h (ADD_MISSING_{POSIX,XOPEN}): Define.\n+\t* m88k/xm-sysv3.h: Likewise.\n+\n+\t* configure.in (getrlimit, setrlimit): Call AC_CHECK_FUNCS.\n+\t* cccp.c (main): Check HAVE_{G,S}ETRLIMIT in addition to RLIMIT_STACK.\n+\t* toplev.c (main): Likewise.\n+\t\n+\t* fixincludes (target_canonical): New variable.\n+\t(size_t): Add support for Motorola's stdlib.h which fails to provide\n+\ta definition for size_t.\n+\t(str{len,spn,cspn} return value): Handle different layout on sysV88.\n+\t(fabs/hypot): Provide a fake for hypot which is broken on\n+\tm88k-motorola-sysv3; emit a prototype for fabs on m88k-motorola-sysv3.\n+\n+\t* m68k/mot3300.h (ASM_BYTE_OP): Don't include '\\t' in  definition.\n+\t(ASM_OUTPUT_ASCII): Prefix ASM_BYTE_OP by one single '\\t'.\n+\n+Mon Dec 22 19:05:49 1997  Richard Henderson  <rth@cygnus.com>\n+\n+        * sparc.md (jump): Don't use the annul bit around an empty loop.\n+\n+Mon Dec 22 18:52:56 1997  Robert Lipe <robertl@dgii.com>\n+\n+\t* i386/x-sco5 (CLIB) Deleted.\n+\t(ALLOCA) Added.\n+\t* i386/xm-sco5.h (USE_C_ALLOCA) Added.\n+\n+Mon Dec 22 18:42:16 1997  Philippe De Muyter  <phdm@macqel.be>\n+\n+\t* m68k/mot3300Mcrt0.S (mcount): Function removed.\n+\t(__stop_monitor): New function.\n+\t* m68k/mot3300-crt0.S (__stop_monitor): New (empty) function.\n+\t(mcount, mcount%, monitor): Common symbols removed.\n+\t* m68k/mot3300.h (FUNCTION_PROFILER): USE_GAS and !USE_GAS versions\n+\tfixed and merged.\n+\t(EXIT_BODY): Always call __stop_monitor without tricky tests.\n+\n+Mon Dec 22 18:35:05 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* objc/Make-lang.in (runtime-info.h, libobjc_entry.o): Create in\n+\tbuild directory.\n+\t(libobjc.a): Update dependency list.\n+\t(libobjc.dll): Likewise.  Use libobjc_entry.o from build directory.\n+\t(objc/sendmsg.o): Add -Iobjc to find runtime-info.h.\n+\t(objc.mostlyclean): Remove runtime-info.h.\n+\n+Mon Dec 22 18:27:47 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* libgcc2.c (_eh_compat): New section.\n+\t* Makefile.in (LIB2FUNCS): Add _eh_compat.\n+\n+Mon Dec 22 17:52:37 1997  Marcus G. Daniels  <mgd@wijiji.santafe.edu>\n+\n+\t* objc/init.c (_objc_load_callback): Don't initialize.\n+\n+Sun Dec 21 15:06:00 1997  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* mips/xm-iris5.h (HAVE_INTTYPES_H): Force undefined.\n+\n+Sun Dec 21 14:51:51 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* dwarf2out.c (add_bound_info, case COMPONENT_REF): New case.\n+\n+Sun Dec 14 06:49:05 1997  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n \t* expr.c (expand_expr, case PLACEHOLDER_EXPR): Use placeholder_list \n \texpression in preference to any other if correct type.\n "}, {"sha": "0695199650e5eaf0aa718d123c2bc093c4bcd2ba", "filename": "gcc/INSTALL", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FINSTALL?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -452,11 +452,39 @@ and includes all the necessary compilation tools and libraries.\n      some other compiler.)\n \n  16. If you're going to use C++, it's likely that you need to also\n-     install the libg++ distribution.  It should be available from the\n-     same place where you got the GNU C distribution.  Just as GNU C\n-     does not distribute a C runtime library, it also does not include\n-     a C++ run-time library.  All I/O functionality, special class\n-     libraries, etc., are available in the libg++ distribution.\n+     install a C++ runtime library.  Just as GNU C does not distribute\n+     a C runtime library, it also does not include a C++ runtime\n+     library.  All I/O functionality, special class libraries, etc., are\n+     provided by the C++ runtime library.\n+\n+     Here's one way to build and install a C++ runtime library for GNU\n+     CC:\n+\n+        * Build and install GNU CC, so that invoking `gcc' obtains the\n+          GNU CC that was just built.\n+\n+        * Obtain a copy of a compatible `libstdc++' distribution.  For\n+          example, the `libstdc++-2.8.0.tar.gz' distribution should be\n+          compatible with GCC 2.8.0.  GCC distributors normally\n+          distribute `libstdc++' as well.\n+\n+        * Set the `CXX' environment variable to `gcc' while running the\n+          `libstdc++' distribution's `configure' command.  Use the same\n+          `configure' options that you used when you invoked GCC's\n+          `configure' command.\n+\n+        * Invoke `make' to build the C++ runtime.\n+\n+        * Invoke `make install' to install the C++ runtime.\n+\n+     To summarize, after building and installing GNU CC, invoke the\n+     following shell commands in the topmost directory of the C++\n+     library distribution.  For CONFIGURE-OPTIONS, use the same options\n+     that you used to configure GNU CC.\n+\n+          $ CXX=gcc ./configure CONFIGURE-OPTIONS\n+          $ make\n+          $ make install\n \n  17. GNU CC includes a runtime library for Objective-C because it is an\n      integral part of the language.  You can find the files associated\n@@ -1786,8 +1814,8 @@ perform the following steps:\n             disk:[gcc.gxx_include.] gnu_gxx_include\n \n      with the appropriate disk and directory name.  If you are going to\n-     be using libg++, this is where the libg++ install procedure will\n-     install the libg++ header files.\n+     be using a C++ runtime library, this is where its install\n+     procedure will install its header files.\n \n   2. Obtain the file `gcc-cc1plus.exe', and place this in the same\n      directory that `gcc-cc1.exe' is kept.\n@@ -2020,8 +2048,8 @@ before GNU CC is built.  If the cross compilation header files are\n already suitable for ANSI C and GNU CC, nothing special need be done).\n \n    `GPLUS_INCLUDE_DIR' means the same thing for native and cross.  It\n-is where `g++' looks first for header files.  `libg++' installs only\n-target independent header files in that directory.\n+is where `g++' looks first for header files.  The C++ library installs\n+only target independent header files in that directory.\n \n    `LOCAL_INCLUDE_DIR' is used only for a native compiler.  It is\n normally `/usr/local/include'.  GNU CC searches this directory so that"}, {"sha": "96a109138aa14c58afcabbc8fdce897fafc03683", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1945,9 +1945,11 @@ stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n # Using basename would be simpler, but some systems don't have it.\n+# The touch command is here to workaround an AIX/Linux NFS bug.\n \tfor file in .. $(USER_H); do \\\n \t  if [ X$$file != X.. ]; then \\\n \t    realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n+\t    touch include/$$realfile; \\\n \t    rm -f include/$$realfile; \\\n \t    cp $$file include; \\\n \t    chmod a+r include/$$realfile; \\"}, {"sha": "486206a441f28312f1970cafa2d18c336333821b", "filename": "gcc/cccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1241,7 +1241,7 @@ main (argc, argv)\n     rlim.rlim_cur = rlim.rlim_max;\n     setrlimit (RLIMIT_STACK, &rlim);\n   }\n-#endif /* RLIMIT_STACK defined */\n+#endif\n \n #ifdef SIGPIPE\n   signal (SIGPIPE, pipe_closed);"}, {"sha": "5e76fc6752c77683b3707def5596be551af97926", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n /* Optimize by combining instructions for GNU compiler.\n-   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n "}, {"sha": "5e12e8d30f6a40e16ec8b350df11e4308e38e2b2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -24,7 +24,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include <stdio.h>\n #include <string.h>\n-#include \"assert.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\""}, {"sha": "52e135f35b26f6453e2d69ca4e692a12e99b2fa8", "filename": "gcc/config/i386/bsd386.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fi386%2Fbsd386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fi386%2Fbsd386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd386.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n-/* Configuration for an i386 running BSDI's BSD/386 1.1 as the target\n-   machine.  */\n+/* Configuration for an i386 running BSDI's BSD/OS (formerly known as BSD/386)\n+   as the target machine.  */\n \n #include \"i386/386bsd.h\"\n \n@@ -17,8 +17,9 @@\n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n+/* This is suitable for BSD/OS 3.0; we don't know about earlier releases.  */\n #undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"#\"\n+#define ASM_COMMENT_START \" #\"\n \n /* Until they use ELF or something that handles dwarf2 unwinds\n    and initialization stuff better.  */"}, {"sha": "d8c1d7336f51de96a7de42e2063208805e53840a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1226,7 +1226,11 @@ while(0)\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n+   CXT is an RTX for the static chain value for the function.\n+\n+   We generate a two-instructions program at address TRAMP :\n+\tmovea.l &CXT,%a0\n+\tjmp FNADDR\t\t\t\t\t*/\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "65c2f4760439994387ccb46ff430fe9c69b113d3", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -147,13 +147,8 @@ Boston, MA 02111-1307, USA.  */\n       asm_fprintf (FILE, \"\\tmov.l %Ra0,%Rd0\\n\"); } \n \n #undef FUNCTION_PROFILER\n-#ifndef USE_GAS\n-#define FUNCTION_PROFILER(FILE, LABEL_NO)\t\\\n-    asm_fprintf (FILE, \"\\tmov.l %ILP%%%d,%Ra0\\n\\tjsr mcount%%\\n\", (LABEL_NO))\n-#else /* USE_GAS */\n #define FUNCTION_PROFILER(FILE, LABEL_NO)\t\\\n-    asm_fprintf (FILE, \"\\tmov.l %I%.LP%d,%Ra0\\n\\tjsr mcount%%\\n\", (LABEL_NO))\n-#endif /* USE_GAS */\n+    asm_fprintf (FILE, \"\\tmov.l %I%LLP%d,%Ra0\\n\\tjsr mcount%%\\n\", (LABEL_NO))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n@@ -797,20 +792,25 @@ do {(CUM).offset = 0;\\\n #define MATH_LIBRARY\t\"-lm881\"\n #endif\n \n-/* Currently we do not have the atexit() function;\n- *  so take that from libgcc2.c\n- */\n+/* Currently we do not have the atexit() function,\n+   so take that from libgcc2.c */\n \n #define NEED_ATEXIT 1\n #define HAVE_ATEXIT 1\n \n #define EXIT_BODY\t\\\n   do\t\t\t\t\t\t\t\t\\\n-    { extern void monitor ();\t\t\t\t\t\\\n-      extern long mcount asm (\"mcount%\");\t\t\t\\\n-      extern long etext;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (&mcount < &etext)\t\t\t\t\t\\\n-\tmonitor (0);\t\t\t\t\t\t\\\n+    { \t\t\t\t\t\t\t\t\\\n+      __stop_monitor ();\t\t\t\t\t\\\n       _cleanup ();\t\t\t\t\t\t\\\n     } while (0)\n+\n+/* FINALIZE_TRAMPOLINE clears the instruction cache. */\n+\n+#undef FINALIZE_TRAMPOLINE\n+#define FINALIZE_TRAMPOLINE(TRAMP)\t\\\n+  if (!TARGET_68040)\t\t\t\\\n+    ;\t\t\t\t\t\\\n+  else\t\t\t\t\t\\\n+    emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__clear_insn_cache\"), \\\n+\t\t       0, VOIDmode, 0)"}, {"sha": "67df28e59404b0da9df19ed4589e0578d148915d", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -27,7 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #include <time.h>\n #include <ctype.h>\n \n-#include \"assert.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -501,9 +500,10 @@ expand_block_move (dest_mem, src_mem, operands)\n   int bytes = (constp ? INTVAL (operands[2]) : 0);\n   int target = (int) m88k_cpu;\n \n-  assert (PROCESSOR_M88100 == 0);\n-  assert (PROCESSOR_M88110 == 1);\n-  assert (PROCESSOR_M88000 == 2);\n+  if (! (PROCESSOR_M88100 == 0\n+\t && PROCESSOR_M88110 == 1\n+\t && PROCESSOR_M88000 == 2))\n+    abort ();\n \n   if (constp && bytes <= 0)\n     return;"}, {"sha": "3e8ab39dc953f761b18f4bb17b7961dd511ecca9", "filename": "gcc/config/m88k/xm-sysv3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for GNU C-compiler.\n    Motorola m88100 running the AT&T/Unisoft/Motorola V.3 reference port.\n-   Copyright (C) 1990 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n "}, {"sha": "42f9da1862bd973efa1917dd0029b974cdbd9fda", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -2538,6 +2538,13 @@ typedef struct mips_args {\n \n #define TRAMPOLINE_ALIGNMENT (TARGET_LONG64 ? 64 : 32)\n \n+/* INITIALIZE_TRAMPOLINE calls this library function to flush\n+   program and data caches.  */\n+\n+#ifndef CACHE_FLUSH_FUNC\n+#define CACHE_FLUSH_FUNC \"_flush_cache\"\n+#endif\n+\n /* A C statement to initialize the variable parts of a trampoline. \n    ADDR is an RTX for the address of the trampoline; FNADDR is an\n    RTX for the address of the nested function; STATIC_CHAIN is an\n@@ -2561,7 +2568,7 @@ typedef struct mips_args {\n   /* Flush both caches.  We need to flush the data cache in case\t    \\\n      the system has a write-back cache.  */\t\t\t\t    \\\n   /* ??? Should check the return value for errors.  */\t\t\t    \\\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"_flush_cache\"),\t    \\\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, CACHE_FLUSH_FUNC),\t    \\\n \t\t     0, VOIDmode, 3, addr, Pmode,\t\t\t    \\\n \t\t     GEN_INT (TRAMPOLINE_SIZE), TYPE_MODE (integer_type_node),\\\n \t\t     GEN_INT (3), TYPE_MODE (integer_type_node));\t    \\"}, {"sha": "b116b2b9f65e7b46d34cce2cff84da0add99624b", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -8740,6 +8740,18 @@ move\\\\t%0,%z4\\\\n\\\\\n {\n   emit_insn (gen_blockage ());\n }\")\n+\n+;; For n32/n64, we need to restore gp after a builtin setjmp.   We do this\n+;; by making use of the fact that we've just called __dummy.\n+\n+(define_expand \"builtin_setjmp_receiver\"\n+  [(const_int 0)]\n+  \"TARGET_ABICALLS && mips_abi != ABI_32\"\n+  \"\n+{\n+  emit_insn (gen_loadgp (gen_rtx (SYMBOL_REF, Pmode, \\\"__dummy\\\")));\n+  emit_insn (gen_blockage ());\n+}\")\n \f\n ;;\n ;;  ...................."}, {"sha": "34964a50fbaced199261d285a3793d7db2d022eb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1181,10 +1181,8 @@ function_arg_padding (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n-  if (type && TREE_CODE (type) == RECORD_TYPE)\n-    {\n-      return upward;\n-    }\n+  if (type != 0 && AGGREGATE_TYPE_P (type))\n+    return upward;\n \n   /* This is the default definition.  */\n   return (! BYTES_BIG_ENDIAN"}, {"sha": "88833b2adf0268477f0a3200721822fab62a6fca", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 61, "deletions": 33, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -100,8 +100,16 @@ char leaf_reg_remap[] =\n static char *frame_base_name;\n static int frame_base_offset;\n \n-static rtx find_addr_reg ();\n-static void sparc_init_modes ();\n+static rtx pic_setup_code\tPROTO((void));\n+static rtx find_addr_reg\tPROTO((rtx));\n+static void sparc_init_modes\tPROTO((void));\n+static int save_regs\t\tPROTO((FILE *, int, int, char *,\n+\t\t\t\t       int, int, int));\n+static int restore_regs\t\tPROTO((FILE *, int, int, char *, int, int));\n+static void build_big_number\tPROTO((FILE *, int, char *));\n+static function_arg_slotno\tPROTO((const CUMULATIVE_ARGS *,\n+\t\t\t\t       enum machine_mode, tree, int, int,\n+\t\t\t\t       int *, int *));\n \n #ifdef DWARF2_DEBUGGING_INFO\n extern char *dwarf2out_cfi_label ();\n@@ -1324,9 +1332,8 @@ reg_unused_after (reg, insn)\n   return 1;\n }\n \f\n-/* The rtx for the global offset table which is a special form\n-   that *is* a position independent symbolic constant.  */\n-static rtx pic_pc_rtx;\n+/* The table we use to reference PIC data.  */\n+static rtx global_offset_table;\n \n /* Ensure that we are not using patterns that are not OK with PIC.  */\n \n@@ -1339,7 +1346,11 @@ check_pic (i)\n     case 1:\n       if (GET_CODE (recog_operand[i]) == SYMBOL_REF\n \t  || (GET_CODE (recog_operand[i]) == CONST\n-\t      && ! rtx_equal_p (pic_pc_rtx, recog_operand[i])))\n+\t      && ! (GET_CODE (XEXP (recog_operand[i], 0)) == MINUS\n+\t\t    && (XEXP (XEXP (recog_operand[i], 0), 0)\n+\t\t\t== global_offset_table)\n+\t\t    && (GET_CODE (XEXP (XEXP (recog_operand[i], 0), 1))\n+\t\t\t== CONST))))\n \tabort ();\n     case 2:\n     default:\n@@ -1472,39 +1483,26 @@ initialize_pic ()\n {\n }\n \n-/* Emit special PIC prologues and epilogues.  */\n+/* Return the RTX for insns to set the PIC register.  */\n \n-void\n-finalize_pic ()\n+static rtx\n+pic_setup_code ()\n {\n-  /* The table we use to reference PIC data.  */\n-  rtx global_offset_table;\n-  /* Labels to get the PC in the prologue of this function.  */\n+  rtx pic_pc_rtx;\n   rtx l1, l2;\n   rtx seq;\n-  int orig_flag_pic = flag_pic;\n-\n-  if (current_function_uses_pic_offset_table == 0)\n-    return;\n-\n-  if (! flag_pic)\n-    abort ();\n-\n-  flag_pic = 0;\n \n   start_sequence ();\n \n   l1 = gen_label_rtx ();\n \n-  /* Initialize every time through, since we can't easily\n-     know this to be permanent.  */\n-  global_offset_table = gen_rtx (SYMBOL_REF, Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n   pic_pc_rtx = gen_rtx (CONST, Pmode,\n \t\t\tgen_rtx (MINUS, Pmode,\n \t\t\t\t global_offset_table,\n \t\t\t\t gen_rtx (CONST, Pmode,\n \t\t\t\t\t  gen_rtx (MINUS, Pmode,\n-\t\t\t\t\t\t   gen_rtx (LABEL_REF, VOIDmode, l1),\n+\t\t\t\t\t\t   gen_rtx (LABEL_REF,\n+\t\t\t\t\t\t\t    VOIDmode, l1),\n \t\t\t\t\t\t   pc_rtx))));\n \n   /* sparc64: the RDPC instruction doesn't pair, and puts 4 bubbles in the\n@@ -1543,14 +1541,46 @@ finalize_pic ()\n   LABEL_PRESERVE_P (l1) = 1;\n   LABEL_PRESERVE_P (l2) = 1;\n \n-  flag_pic = orig_flag_pic;\n-\n   seq = gen_sequence ();\n   end_sequence ();\n-  emit_insn_after (seq, get_insns ());\n+\n+  return seq;\n+}\n+\n+/* Emit special PIC prologues and epilogues.  */\n+\n+void\n+finalize_pic ()\n+{\n+  /* Labels to get the PC in the prologue of this function.  */\n+  int orig_flag_pic = flag_pic;\n+  rtx insn;\n+\n+  if (current_function_uses_pic_offset_table == 0)\n+    return;\n+\n+  if (! flag_pic)\n+    abort ();\n+\n+  /* Initialize every time through, since we can't easily\n+     know this to be permanent.  */\n+  global_offset_table = gen_rtx (SYMBOL_REF, Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+  flag_pic = 0;\n+\n+  emit_insn_after (pic_setup_code (), get_insns ());\n+\n+  /* Insert the code in each nonlocal goto receiver.  */\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t&& XINT (PATTERN (insn), 1) == 4)\n+      emit_insn_after (pic_setup_code (), insn);\n+\n+  flag_pic = orig_flag_pic;\n \n   /* Need to emit this whether or not we obey regdecls,\n-     since setjmp/longjmp can cause life info to screw up.  */\n+     since setjmp/longjmp can cause life info to screw up.\n+     ??? In the case where we don't obey regdecls, this is not sufficient\n+     since we may not fall out the bottom.  */\n   emit_insn (gen_rtx (USE, VOIDmode, pic_offset_table_rtx));\n }\n \f\n@@ -4194,10 +4224,8 @@ function_arg_padding (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n-  if (TARGET_ARCH64 && type && TREE_CODE (type) == RECORD_TYPE)\n-    {\n-      return upward;\n-    }\n+  if (TARGET_ARCH64 && type != 0 && AGGREGATE_TYPE_P (type))\n+    return upward;\n \n   /* This is the default definition.  */\n   return (! BYTES_BIG_ENDIAN"}, {"sha": "6efa33208527781398e71a3e641ecf3b7a3b8000", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -6150,3 +6150,12 @@\n    (set (reg:CC 100) (compare (match_dup 0) (const_int 0)))]\n   \"\"\n   \"subxcc %r1,0,%0\")\n+\n+;; After a nonlocal goto, we need to restore the PIC register, but only\n+;; if we need it.  So do nothing much here, but we'll check for this in\n+;; finalize_pic.\n+\n+(define_insn \"nonlocal_goto_receiver\"\n+  [(unspec_volatile [(const_int 0)] 4)]\n+  \"flag_pic\"\n+  \"\")"}, {"sha": "c7fac28beea01734ae2d6f25e6838b0ed523d834", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for some\n    generic System V Release 4 system.\n-   Copyright (C) 1991, 1994, 1995, 1996, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 94-97, 1998 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC."}, {"sha": "ab1678a63e0e16c05ff59034c8124f5d5623ae51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -29,6 +29,10 @@ Wed Jan  7 23:47:13 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \t* typeck.c (build_modify_expr): Remove code that ignores trivial \n \tmethods.\n \n+Mon Dec 22 17:46:17 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* method.c (build_overload_name): Fix mangling for __null.\n+\n Mon Dec 22 11:36:27 1997  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n  \n \t* call.c (add_builtin_candidate): Add default case in enumeration"}, {"sha": "f93836cb00ff06e5879996c78e25c0c5c8e2e364", "filename": "gcc/cp/method.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,6 +1,6 @@\n /* Handle the hair of processing (but not expanding) inline functions.\n    Also manage function and variable name overloading.\n-   Copyright (C) 1987, 89, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 89, 92-96, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n    This file is part of GNU CC.\n@@ -1047,8 +1047,10 @@ build_overload_name (parmtypes, begin, end)\n \t  }\n \n \tcase UNKNOWN_TYPE:\n-\t  /* This will take some work.  */\n-\t  OB_PUTC ('?');\n+\t  /* We can get here if __null is defined to have type ({unkown\n+\t     type}*), which it is if -ansi is not used.  Treat this\n+\t     like 'void*'.  */\n+\t  OB_PUTC ('v');\n \t  break;\n \n \tcase TEMPLATE_TYPE_PARM:"}, {"sha": "362a2a60ef2443a291a96906b695424c7b24290d", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -389,6 +389,10 @@ __do_global_ctors_aux ()\t/* prologue goes in .text section */\n   asm (INIT_SECTION_ASM_OP);\n   DO_GLOBAL_CTORS_BODY;\n   ON_EXIT (__do_global_dtors, 0);\n+#ifdef FORCE_INIT_SECTION_ALIGN\n+  FORCE_INIT_SECTION_ALIGN;\n+#endif\n+  asm (TEXT_SECTION_ASM_OP);\n }\t\t\t\t/* epilogue and body go in .init section */\n \n #endif /* OBJECT_FORMAT_ELF */"}, {"sha": "f0e331aa90c8d00f225fd5783e6e4ff255d5f2e1", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n /* Common subexpression elimination for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-7, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n "}, {"sha": "627ddb2eadea2ca85f366bbcb98450cd05e056fb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -41,6 +41,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"except.h\"\n #include \"dwarf2.h\"\n \n+/* We cannot use <assert.h> in GCC source, since that would include\n+   GCC's assert.h, which may not be compatible with the host compiler.  */\n+#undef assert\n+#ifdef NDEBUG\n+# define assert(e)\n+#else\n+# define assert(e) do { if (! (e)) abort (); } while (0)\n+#endif\n+\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n \n@@ -7127,6 +7136,7 @@ add_bound_info (subrange_die, bound_attr, bound)\n \n     case MAX_EXPR:\n     case VAR_DECL:\n+    case COMPONENT_REF:\n       /* ??? These types of bounds can be created by the Ada front end,\n \t and it isn't clear how to emit debug info for them.  */\n       break;"}, {"sha": "46815239ecb845e8358e8faae7ca7f723f4b5aff", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -58,6 +58,15 @@ extern time_t time ();\n #endif\n #endif\n \n+/* We cannot use <assert.h> in GCC source, since that would include\n+   GCC's assert.h, which may not be compatible with the host compiler.  */\n+#undef assert\n+#ifdef NDEBUG\n+# define assert(e)\n+#else\n+# define assert(e) do { if (! (e)) abort (); } while (0)\n+#endif\n+\n extern char *getpwd ();\n \n #ifdef NEED_DECLARATION_INDEX"}, {"sha": "c99d77945ff24bd98bf3f715a2f68c1dd3995cb4", "filename": "gcc/expr.c", "status": "modified", "additions": 24, "deletions": 32, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n-   Copyright (C) 1988, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2437,7 +2437,7 @@ get_push_address (size)\n   else\n     temp = stack_pointer_rtx;\n \n-  return force_operand (temp, NULL_RTX);\n+  return copy_to_reg (temp);\n }\n \n /* Generate code to push X onto the stack, assuming it has mode MODE and\n@@ -2566,7 +2566,7 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n \t      \n \t      in_check_memory_usage = 1;\n \t      temp = get_push_address (INTVAL(size) - used);\n-\t      if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))\n+\t      if (GET_CODE (x) == MEM && type && AGGREGATE_TYPE_P (type))\n \t\temit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n \t\t\t\t   temp, ptr_mode,\n \t\t\t\t   XEXP (xinner, 0), ptr_mode,\n@@ -2622,7 +2622,7 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n \t      \n \t      in_check_memory_usage = 1;\n \t      target = copy_to_reg (temp);\n-\t      if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))\n+\t      if (GET_CODE (x) == MEM && type && AGGREGATE_TYPE_P (type))\n \t\temit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n \t\t\t\t   target, ptr_mode,\n \t\t\t\t   XEXP (xinner, 0), ptr_mode,\n@@ -2834,7 +2834,7 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n \t  if (target == 0)\n \t    target = get_push_address (GET_MODE_SIZE (mode));\n \n-\t  if (GET_CODE (x) == MEM && AGGREGATE_TYPE_P (type))\n+\t  if (GET_CODE (x) == MEM && type && AGGREGATE_TYPE_P (type))\n \t    emit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n \t\t\t       target, ptr_mode,\n \t\t\t       XEXP (x, 0), ptr_mode,\n@@ -5512,12 +5512,16 @@ expand_expr (exp, target, tmode, modifier)\n \t    memory_usage = get_memory_usage_from_modifier (modifier);\n \n             if (memory_usage != MEMORY_USE_DONT)\n-\t      emit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n-\t\t\t\t op0, ptr_mode,\n-\t\t\t\t GEN_INT (int_size_in_bytes (type)),\n-\t\t\t\t TYPE_MODE (sizetype),\n-\t\t\t\t GEN_INT (memory_usage),\n-\t\t\t\t TYPE_MODE (integer_type_node));\n+\t      {\n+\t\tin_check_memory_usage = 1;\n+\t\temit_library_call (chkr_check_addr_libfunc, 1, VOIDmode, 3,\n+\t\t\t\t   op0, ptr_mode,\n+\t\t\t\t   GEN_INT (int_size_in_bytes (type)),\n+\t\t\t\t   TYPE_MODE (sizetype),\n+\t\t\t\t   GEN_INT (memory_usage),\n+\t\t\t\t   TYPE_MODE (integer_type_node));\n+\t\tin_check_memory_usage = 0;\n+\t      }\n \t  }\n \n \ttemp = gen_rtx (MEM, mode, op0);\n@@ -8320,6 +8324,11 @@ expand_builtin_setjmp (buf_addr, target)\n #endif\n       abort ();\n \n+#ifdef HAVE_builtin_setjmp_receiver\n+  if (HAVE_builtin_setjmp_receiver)\n+    emit_insn (gen_builtin_setjmp_receiver ());\n+#endif\n+\n   emit_move_insn (target, const1_rtx);\n   emit_label (lab2);\n   return target;\n@@ -9003,8 +9012,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  /* Just copy the rights of SRC to the rights of DEST.  */\n \t  if (flag_check_memory_usage)\n \t    emit_library_call (chkr_copy_bitmap_libfunc, 1, VOIDmode, 3,\n-\t\t\t       src_rtx, ptr_mode,\n \t\t\t       dest_rtx, ptr_mode,\n+\t\t\t       src_rtx, ptr_mode,\n \t\t\t       len_rtx, TYPE_MODE (sizetype));\n \n \t  /* There could be a void* cast on top of the object.  */\n@@ -11119,29 +11128,12 @@ do_store_flag (exp, target, mode, only_cheap)\n \n   if ((code == NE || code == EQ)\n       && TREE_CODE (arg0) == BIT_AND_EXPR && integer_zerop (arg1)\n-      && integer_pow2p (TREE_OPERAND (arg0, 1))\n-      && TYPE_PRECISION (type) <= HOST_BITS_PER_WIDE_INT)\n+      && integer_pow2p (TREE_OPERAND (arg0, 1)))\n     {\n       tree inner = TREE_OPERAND (arg0, 0);\n-      HOST_WIDE_INT tem;\n-      int bitnum;\n+      int bitnum = tree_log2 (TREE_OPERAND (arg0, 1));\n       int ops_unsignedp;\n \n-      tem = INTVAL (expand_expr (TREE_OPERAND (arg0, 1),\n-\t\t\t\t NULL_RTX, VOIDmode, 0));\n-      /* In this case, immed_double_const will sign extend the value to make\n-\t it look the same on the host and target.  We must remove the\n-\t sign-extension before calling exact_log2, since exact_log2 will\n-\t fail for negative values.  */\n-      if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n-\t  && BITS_PER_WORD == GET_MODE_BITSIZE (TYPE_MODE (type)))\n-\t/* We don't use the obvious constant shift to generate the mask,\n-\t   because that generates compiler warnings when BITS_PER_WORD is\n-\t   greater than or equal to HOST_BITS_PER_WIDE_INT, even though this\n-\t   code is unreachable in that case.  */\n-\ttem = tem & GET_MODE_MASK (word_mode);\n-      bitnum = exact_log2 (tem);\n-\n       /* If INNER is a right shift of a constant and it plus BITNUM does\n \t not overflow, adjust BITNUM and INNER.  */\n \n@@ -11151,7 +11143,7 @@ do_store_flag (exp, target, mode, only_cheap)\n \t  && (bitnum + TREE_INT_CST_LOW (TREE_OPERAND (inner, 1))\n \t      < TYPE_PRECISION (type)))\n \t{\n-\t  bitnum +=TREE_INT_CST_LOW (TREE_OPERAND (inner, 1));\n+\t  bitnum += TREE_INT_CST_LOW (TREE_OPERAND (inner, 1));\n \t  inner = TREE_OPERAND (inner, 0);\n \t}\n "}, {"sha": "f50c20735620ee8086dde0a326695ffc2845450e", "filename": "gcc/extend.texi", "status": "modified", "additions": 120, "deletions": 108, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -366,9 +366,7 @@ does not refer to anything that has gone out of scope, you should be\n safe.\n \n GNU CC implements taking the address of a nested function using a\n-technique called @dfn{trampolines}.  A paper describing them is\n-available from @samp{maya.idiap.ch} in directory @file{pub/tmb},\n-file @file{usenix88-lexic.ps.Z}.\n+technique called @dfn{trampolines}.\n \n A nested function can jump to a label inherited from a containing\n function, provided the label was explicitly declared in the containing\n@@ -2277,14 +2275,14 @@ did the easy thing, and turned it off.\n @cindex assembler instructions\n @cindex registers\n \n-In an assembler instruction using @code{asm}, you can now specify the\n-operands of the instruction using C expressions.  This means no more\n-guessing which registers or memory locations will contain the data you want\n+In an assembler instruction using @code{asm}, you can specify the\n+operands of the instruction using C expressions.  This means you need not\n+guess which registers or memory locations will contain the data you want\n to use.\n \n-You must specify an assembler instruction template much like what appears\n-in a machine description, plus an operand constraint string for each\n-operand.\n+You must specify an assembler instruction template much like what\n+appears in a machine description, plus an operand constraint string for\n+each operand.\n \n For example, here is how to use the 68881's @code{fsinx} instruction:\n \n@@ -2295,65 +2293,66 @@ asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n @noindent\n Here @code{angle} is the C expression for the input operand while\n @code{result} is that of the output operand.  Each has @samp{\"f\"} as its\n-operand constraint, saying that a floating point register is required.  The\n-@samp{=} in @samp{=f} indicates that the operand is an output; all output\n-operands' constraints must use @samp{=}.  The constraints use the same\n-language used in the machine description (@pxref{Constraints}).\n-\n-Each operand is described by an operand-constraint string followed by the C\n-expression in parentheses.  A colon separates the assembler template from\n-the first output operand, and another separates the last output operand\n-from the first input, if any.  Commas separate output operands and separate\n-inputs.  The total number of operands is limited to ten or to the maximum\n-number of operands in any instruction pattern in the machine description,\n-whichever is greater.\n-\n-If there are no output operands, and there are input operands, then there\n-must be two consecutive colons surrounding the place where the output\n+operand constraint, saying that a floating point register is required.\n+The @samp{=} in @samp{=f} indicates that the operand is an output; all\n+output operands' constraints must use @samp{=}.  The constraints use the\n+same language used in the machine description (@pxref{Constraints}).\n+\n+Each operand is described by an operand-constraint string followed by\n+the C expression in parentheses.  A colon separates the assembler\n+template from the first output operand and another separates the last\n+output operand from the first input, if any.  Commas separate the\n+operands within each group.  The total number of operands is limited to\n+ten or to the maximum number of operands in any instruction pattern in\n+the machine description, whichever is greater.\n+\n+If there are no output operands but there are input operands, you must\n+place two consecutive colons surrounding the place where the output\n operands would go.\n \n Output operand expressions must be lvalues; the compiler can check this.\n-The input operands need not be lvalues.  The compiler cannot check whether\n-the operands have data types that are reasonable for the instruction being\n-executed.  It does not parse the assembler instruction template and does\n-not know what it means, or whether it is valid assembler input.  The\n-extended @code{asm} feature is most often used for machine instructions\n-that the compiler itself does not know exist.  If the output expression\n-cannot be directly addressed (for example, it is a bit field), your\n-constraint must allow a register.  In that case, GNU CC will use\n-the register as the output of the @code{asm}, and then store that\n-register into the output.\n-\n-The ordinary output operands must be write-only; GNU CC will assume\n-that the values in these operands before the instruction are dead and\n-need not be generated.  Extended asm supports input-output or\n-read-write operands.  Use the constraint character @samp{+} to indicate\n-such an operand and list it with the output operands.\n-\n-When the constraints for the read-write operand\n-(or the operand in which only some of the bits are to be changed)\n-allows a register, you may, as an alternative, logically\n-split its function into two separate operands, one input operand and one\n-write-only output operand.  The connection between them is expressed by\n-constraints which say they need to be in the same location when the\n-instruction executes.  You can use the same C expression for both\n-operands, or different expressions.  For example, here we write the\n-(fictitious) @samp{combine} instruction with @code{bar} as its read-only\n-source operand and @code{foo} as its read-write destination:\n+The input operands need not be lvalues.  The compiler cannot check\n+whether the operands have data types that are reasonable for the\n+instruction being executed.  It does not parse the assembler instruction\n+template and does not know what it means or even whether it is valid\n+assembler input.  The extended @code{asm} feature is most often used for\n+machine instructions the compiler itself does not know exist.  If\n+the output expression cannot be directly addressed (for example, it is a\n+bit field), your constraint must allow a register.  In that case, GNU CC\n+will use the register as the output of the @code{asm}, and then store\n+that register into the output.\n+\n+The ordinary output operands must be write-only; GNU CC will assume that\n+the values in these operands before the instruction are dead and need\n+not be generated.  Extended asm supports input-output or read-write\n+operands.  Use the constraint character @samp{+} to indicate such an\n+operand and list it with the output operands.\n+\n+When the constraints for the read-write operand (or the operand in which\n+only some of the bits are to be changed) allows a register, you may, as\n+an alternative, logically split its function into two separate operands,\n+one input operand and one write-only output operand.  The connection\n+between them is expressed by constraints which say they need to be in\n+the same location when the instruction executes.  You can use the same C\n+expression for both operands, or different expressions.  For example,\n+here we write the (fictitious) @samp{combine} instruction with\n+@code{bar} as its read-only source operand and @code{foo} as its\n+read-write destination:\n \n @example\n asm (\"combine %2,%0\" : \"=r\" (foo) : \"0\" (foo), \"g\" (bar));\n @end example\n \n @noindent\n-The constraint @samp{\"0\"} for operand 1 says that it must occupy the same\n-location as operand 0.  A digit in constraint is allowed only in an input\n-operand, and it must refer to an output operand.\n+The constraint @samp{\"0\"} for operand 1 says that it must occupy the\n+same location as operand 0.  A digit in constraint is allowed only in an\n+input operand and it must refer to an output operand.\n \n Only a digit in the constraint can guarantee that one operand will be in\n-the same place as another.  The mere fact that @code{foo} is the value of\n-both operands is not enough to guarantee that they will be in the same\n-place in the generated assembler code.  The following would not work:\n+the same place as another.  The mere fact that @code{foo} is the value\n+of both operands is not enough to guarantee that they will be in the\n+same place in the generated assembler code.  The following would not\n+work reliably:\n \n @example\n asm (\"combine %2,%0\" : \"=r\" (foo) : \"r\" (foo), \"g\" (bar));\n@@ -2367,10 +2366,10 @@ register (copying it afterward to @code{foo}'s own address).  Of course,\n since the register for operand 1 is not even mentioned in the assembler\n code, the result will not work, but GNU CC can't tell that.\n \n-Some instructions clobber specific hard registers.  To describe this, write\n-a third colon after the input operands, followed by the names of the\n-clobbered hard registers (given as strings).  Here is a realistic example\n-for the Vax:\n+Some instructions clobber specific hard registers.  To describe this,\n+write a third colon after the input operands, followed by the names of\n+the clobbered hard registers (given as strings).  Here is a realistic\n+example for the VAX:\n \n @example\n asm volatile (\"movc3 %0,%1,%2\"\n@@ -2380,32 +2379,32 @@ asm volatile (\"movc3 %0,%1,%2\"\n @end example\n \n If you refer to a particular hardware register from the assembler code,\n-then you will probably have to list the register after the third colon\n-to tell the compiler that the register's value is modified.  In many\n-assemblers, the register names begin with @samp{%}; to produce one\n-@samp{%} in the assembler code, you must write @samp{%%} in the input.\n-\n-If your assembler instruction can alter the condition code register,\n-add @samp{cc} to the list of clobbered registers.  GNU CC on some\n-machines represents the condition codes as a specific hardware\n-register; @samp{cc} serves to name this register.  On other machines,\n-the condition code is handled differently, and specifying @samp{cc}\n-has no effect.  But it is valid no matter what the machine.\n+you will probably have to list the register after the third colon to\n+tell the compiler the register's value is modified.  In some assemblers,\n+the register names begin with @samp{%}; to produce one @samp{%} in the\n+assembler code, you must write @samp{%%} in the input.\n+\n+If your assembler instruction can alter the condition code register, add\n+@samp{cc} to the list of clobbered registers.  GNU CC on some machines\n+represents the condition codes as a specific hardware register;\n+@samp{cc} serves to name this register.  On other machines, the\n+condition code is handled differently, and specifying @samp{cc} has no\n+effect.  But it is valid no matter what the machine.\n \n If your assembler instruction modifies memory in an unpredictable\n-fashion, add @samp{memory} to the list of clobbered registers.\n-This will cause GNU CC to not keep memory values cached in\n-registers across the assembler instruction.\n+fashion, add @samp{memory} to the list of clobbered registers.  This\n+will cause GNU CC to not keep memory values cached in registers across\n+the assembler instruction.\n \n-You can put multiple assembler instructions together in a single @code{asm}\n-template, separated either with newlines (written as @samp{\\n}) or with\n-semicolons if the assembler allows such semicolons.  The GNU assembler\n-allows semicolons and all Unix assemblers seem to do so.  The input\n-operands are guaranteed not to use any of the clobbered registers, and\n-neither will the output operands' addresses, so you can read and write the\n-clobbered registers as many times as you like.  Here is an example of\n-multiple instructions in a template; it assumes that the subroutine\n-@code{_foo} accepts arguments in registers 9 and 10:\n+You can put multiple assembler instructions together in a single\n+@code{asm} template, separated either with newlines (written as\n+@samp{\\n}) or with semicolons if the assembler allows such semicolons.\n+The GNU assembler allows semicolons and most Unix assemblers seem to do\n+so.  The input operands are guaranteed not to use any of the clobbered\n+registers, and neither will the output operands' addresses, so you can\n+read and write the clobbered registers as many times as you like.  Here\n+is an example of multiple instructions in a template; it assumes the\n+subroutine @code{_foo} accepts arguments in registers 9 and 10:\n \n @example\n asm (\"movl %0,r9;movl %1,r10;call _foo\"\n@@ -2414,16 +2413,16 @@ asm (\"movl %0,r9;movl %1,r10;call _foo\"\n      : \"r9\", \"r10\");\n @end example\n \n-Unless an output operand has the @samp{&} constraint modifier, GNU CC may\n-allocate it in the same register as an unrelated input operand, on the\n-assumption that the inputs are consumed before the outputs are produced.\n+Unless an output operand has the @samp{&} constraint modifier, GNU CC\n+may allocate it in the same register as an unrelated input operand, on\n+the assumption the inputs are consumed before the outputs are produced.\n This assumption may be false if the assembler code actually consists of\n more than one instruction.  In such a case, use @samp{&} for each output\n-operand that may not overlap an input.\n-@xref{Modifiers}.\n+operand that may not overlap an input.  @xref{Modifiers}.\n \n-If you want to test the condition code produced by an assembler instruction,\n-you must include a branch and a label in the @code{asm} construct, as follows:\n+If you want to test the condition code produced by an assembler\n+instruction, you must include a branch and a label in the @code{asm}\n+construct, as follows:\n \n @example\n asm (\"clr %0;frob %1;beq 0f;mov #1,%0;0:\"\n@@ -2436,8 +2435,8 @@ This assumes your assembler supports local labels, as the GNU assembler\n and most Unix assemblers do.\n \n Speaking of labels, jumps from one @code{asm} to another are not\n-supported.  The compiler's optimizers do not know about these jumps,\n-and therefore they cannot take account of them when deciding how to\n+supported.  The compiler's optimizers do not know about these jumps, and\n+therefore they cannot take account of them when deciding how to\n optimize.\n \n @cindex macros containing @code{asm}\n@@ -2456,36 +2455,49 @@ Here the variable @code{__arg} is used to make sure that the instruction\n operates on a proper @code{double} value, and to accept only those\n arguments @code{x} which can convert automatically to a @code{double}.\n \n-Another way to make sure the instruction operates on the correct data type\n-is to use a cast in the @code{asm}.  This is different from using a\n+Another way to make sure the instruction operates on the correct data\n+type is to use a cast in the @code{asm}.  This is different from using a\n variable @code{__arg} in that it converts more different types.  For\n example, if the desired type were @code{int}, casting the argument to\n @code{int} would accept a pointer with no complaint, while assigning the\n argument to an @code{int} variable named @code{__arg} would warn about\n using a pointer unless the caller explicitly casts it.\n \n If an @code{asm} has output operands, GNU CC assumes for optimization\n-purposes that the instruction has no side effects except to change the\n-output operands.  This does not mean that instructions with a side effect\n-cannot be used, but you must be careful, because the compiler may eliminate\n-them if the output operands aren't used, or move them out of loops, or\n-replace two with one if they constitute a common subexpression.  Also, if\n-your instruction does have a side effect on a variable that otherwise\n-appears not to change, the old value of the variable may be reused later if\n-it happens to be found in a register.\n+purposes the instruction has no side effects except to change the output\n+operands.  This does not mean instructions with a side effect cannot be\n+used, but you must be careful, because the compiler may eliminate them\n+if the output operands aren't used, or move them out of loops, or\n+replace two with one if they constitute a common subexpression.  Also,\n+if your instruction does have a side effect on a variable that otherwise\n+appears not to change, the old value of the variable may be reused later\n+if it happens to be found in a register.\n \n You can prevent an @code{asm} instruction from being deleted, moved\n significantly, or combined, by writing the keyword @code{volatile} after\n the @code{asm}.  For example:\n \n @example\n-#define set_priority(x)  \\\n-asm volatile (\"set_priority %0\": /* no outputs */ : \"g\" (x))\n-@end example\n+#define get_and_set_priority(new)  \\\n+(@{ int __old; \\\n+   asm volatile (\"get_and_set_priority %0, %1\": \"=g\" (__old) : \"g\" (new)); \\\n+   __old; @})\n+b@end example\n \n @noindent\n-An instruction without output operands will not be deleted or moved\n-significantly, regardless, unless it is unreachable.\n+If you write an @code{asm} instruction with no outputs, GNU CC will know\n+the instruction has side-effects and will not delete the instruction or\n+move it outside of loops.  If the side-effects of your instruction are\n+not purely external, but will affect variables in your program in ways\n+other than reading the inputs and clobbering the specified registers or\n+memory, you should write the @code{volatile} keyword to prevent future\n+versions of GNU CC from moving the instruction around within a core\n+region.\n+\n+An @code{asm} instruction without any operands or clobbers (and ``old\n+style'' @code{asm}) will not be deleted or moved significantly,\n+regardless, unless it is unreachable, the same wasy as if you had\n+written a @code{volatile} keyword.\n \n Note that even a volatile @code{asm} instruction can be moved in ways\n that appear insignificant to the compiler, such as across jump"}, {"sha": "616726e06d64123ff3c96bbe49e5e9c29f504114", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -399,7 +399,7 @@ extern int flag_function_sections;\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n    generated assembly code (perhaps while debugging the compiler itself).\n-   -fverbose-asm is the default.  -fno-verbose-asm causes the extra information\n+   -fno-verbose-asm, the default, causes the extra information\n    to not be added and is useful when comparing two assembler files.  */\n \n extern int flag_verbose_asm;"}, {"sha": "ed4ed81353abd2abe25041f2bd12c35bfc739356", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 88, 89, 91-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4339,7 +4339,9 @@ assign_parms (fndecl, second_time)\n \t\temit_move_insn (validize_mem (stack_parm),\n \t\t\t\tvalidize_mem (entry_parm));\n \t    }\n-\t  if (flag_check_memory_usage)\n+\t  if (flag_check_memory_usage\n+\t      && entry_parm != stack_parm\n+\t      && promoted_mode != nominal_mode)\n \t    {\n \t      push_to_sequence (conversion_insns);\n \t      emit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3,"}, {"sha": "2a54a70900bc76e941684703bfb6be6574dd03ab", "filename": "gcc/gcc.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -96,7 +96,7 @@ Published by the Free Software Foundation\n 59 Temple Place - Suite 330\n Boston, MA 02111-1307 USA\n \n-Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice\n@@ -144,7 +144,7 @@ original English.\n @sp 2\n @center Richard M. Stallman\n @sp 3\n-@center Last updated 4 December 1997\n+@center Last updated 7 January 1998\n @sp 1\n @c The version number appears three times more in this file.\n "}, {"sha": "63d64e9f97c299aaa7b14c5549cb5f1fb620ce98", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -5813,7 +5813,7 @@ main (argc, argv)\n     rlim.rlim_cur = rlim.rlim_max;\n     setrlimit (RLIMIT_STACK, &rlim);\n   }\n-#endif /* RLIMIT_STACK defined */\n+#endif\n \n   obstack_init (rtl_obstack);\n   obstack_init (hash_obstack);"}, {"sha": "9d8e36345f95272e4424d15c73a7fedb595d4c61", "filename": "gcc/install.texi", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,89,92,93,94,95,96,97 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,89,92,93,94,95,96,97,1998 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -534,12 +534,51 @@ since they usually run faster than the ones compiled with some other\n compiler.)\n \n @item\n+@cindex C++ runtime library\n+@cindex @code{libstdc++}\n If you're going to use C++, it's likely that you need to also install\n-the libg++ distribution.  It should be available from the same\n-place where you got the GNU C distribution.  Just as GNU C does not\n-distribute a C runtime library, it also does not include a C++ run-time\n+a C++ runtime library.  Just as GNU C does not\n+distribute a C runtime library, it also does not include a C++ runtime\n library.  All I/O functionality, special class libraries, etc., are\n-available in the libg++ distribution.\n+provided by the C++ runtime library.\n+\n+Here's one way to build and install a C++ runtime library for GNU CC:\n+\n+@itemize @bullet\n+@item\n+Build and install GNU CC, so that invoking @samp{gcc} obtains the GNU CC\n+that was just built.\n+\n+@item\n+Obtain a copy of a compatible @samp{libstdc++} distribution.  For\n+example, the @samp{libstdc++-2.8.0.tar.gz} distribution should be\n+compatible with GCC 2.8.0.  GCC distributors normally distribute\n+@samp{libstdc++} as well.\n+\n+@item\n+Set the @samp{CXX} environment variable to @samp{gcc} while running the\n+@samp{libstdc++} distribution's @file{configure} command.  Use the same\n+@file{configure} options that you used when you invoked GCC's\n+@file{configure} command.\n+\n+@item\n+Invoke @samp{make} to build the C++ runtime.\n+\n+@item\n+Invoke @samp{make install} to install the C++ runtime.\n+\n+@end itemize\n+\n+To summarize, after building and installing GNU CC, invoke the following\n+shell commands in the topmost directory of the C++ library distribution.\n+For @var{configure-options}, use the same options that\n+you used to configure GNU CC.\n+\n+@example\n+$ CXX=gcc ./configure @var{configure-options}\n+$ make\n+$ make install\n+@end example\n \n @item\n GNU CC includes a runtime library for Objective-C because it is an\n@@ -2027,8 +2066,8 @@ $ assign /system /translation=concealed -\n \n @noindent\n with the appropriate disk and directory name.  If you are going to be\n-using libg++, this is where the libg++ install procedure will install\n-the libg++ header files.\n+using a C++ runtime library, this is where its install procedure will install\n+its header files.\n \n @item\n Obtain the file @file{gcc-cc1plus.exe}, and place this in the same\n@@ -2297,7 +2336,7 @@ are already suitable for ANSI C and GNU CC, nothing special need be\n done).\n \n @code{GPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n-is where @code{g++} looks first for header files.  @code{libg++}\n+is where @code{g++} looks first for header files.  The C++ library\n installs only target independent header files in that directory.\n \n @code{LOCAL_INCLUDE_DIR} is used only for a native compiler.  It is"}, {"sha": "1e42e94aa5ea6afbef49a71f8d2b8fe6e45363e3", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -5357,7 +5357,7 @@ make it more readable.  This option is generally only of use to those\n who actually need to read the generated assembly code (perhaps while\n debugging the compiler itself).\n \n-@samp{-fverbose-asm} is the default.  @samp{-fno-verbose-asm} causes the\n+@samp{-fno-verbose-asm}, the default, causes the\n extra information to be omitted and is useful when comparing two assembler\n files.\n "}, {"sha": "ba484d175e6bee91ca3bdcf2c451f4a579ec13f7", "filename": "gcc/jump.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,5 +1,5 @@\n /* Optimize jump instructions, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 91-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1160,8 +1160,11 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t There is no point in using the old value of TEMP1 if\n \t\t it is a register, since cse will alias them.  It can\n \t\t lose if the old value were a hard register since CSE\n-\t\t won't replace hard registers.  */\n-\t      && (((temp3 = reg_set_last (temp1, insn)) != 0)\n+\t\t won't replace hard registers.  Avoid using TEMP3 if\n+\t\t small register classes and it is a hard register.  */\n+\t      && (((temp3 = reg_set_last (temp1, insn)) != 0\n+\t\t   && ! (SMALL_REGISTER_CLASSES && GET_CODE (temp3) == REG\n+\t\t\t && REGNO (temp3) < FIRST_PSEUDO_REGISTER))\n \t\t  /* Make the latter case look like  x = x; if (...) x = b;  */\n \t\t  || (temp3 = temp1, 1))\n \t      /* INSN must either branch to the insn after TEMP or the insn"}, {"sha": "21301f52cdc38fc62530a3475e9d412372f60316", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -2717,6 +2717,45 @@ __enable_execute_stack ()\n \n #endif /* __sysV88__ */\n \n+#ifdef __sysV68__\n+\n+#include <sys/signal.h>\n+#include <errno.h>\n+\n+/* Motorola forgot to put memctl.o in the libp version of libc881.a,\n+   so define it here, because we need it in __clear_insn_cache below */\n+\n+asm(\"\\n\\\n+\tglobal memctl\\n\\\n+memctl:\\n\\\n+\tmovq &75,%d0\\n\\\n+\ttrap &0\\n\\\n+\tbcc.b noerror\\n\\\n+\tjmp cerror%\\n\\\n+noerror:\\n\\\n+\tmovq &0,%d0\\n\\\n+\trts\");\n+\n+/* Clear instruction cache so we can call trampolines on stack.\n+   This is called from FINALIZE_TRAMPOLINE in mot3300.h.  */\n+\n+void\n+__clear_insn_cache ()\n+{\n+  int save_errno;\n+\n+  /* Preserve errno, because users would be surprised to have\n+  errno changing without explicitly calling any system-call. */\n+  save_errno = errno;\n+\n+  /* Keep it simple : memctl (MCT_TEXT) always fully clears the insn cache. \n+     No need to use an address derived from _start or %sp, as 0 works also. */\n+  memctl(0, 4096, MCT_TEXT);\n+  errno = save_errno;\n+}\n+\n+#endif /* __sysV68__ */\n+\n #ifdef __pyr__\n \n #undef NULL /* Avoid errors if stdio.h and our stddef.h mismatch.  */\n@@ -3634,6 +3673,7 @@ __throw ()\n #endif /* DWARF2_UNWIND_INFO */\n \n #endif /* L_eh */\n+\n \f\n #ifdef L_pure\n #ifndef inhibit_libc"}, {"sha": "7deeb3e077b8ca2883fdbdf873283c2edf505044", "filename": "gcc/md.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -2465,6 +2465,15 @@ will not normally need to define this pattern.  A typical reason why you\n might need this pattern is if some value, such as a pointer to a global\n table, must be restored after control flow is branched to the handler of\n an exception.  There are no arguments.\n+\n+@cindex @code{builtin_setjmp_receiver} instruction pattern\n+@item @samp{builtin_setjmp_receiver}\n+This pattern, if defined, contains code needed at the site of an\n+builtin setjmp that isn't needed at the site of a nonlocal goto.  You\n+will not normally need to define this pattern.  A typical reason why you\n+might need this pattern is if some value, such as a pointer to a global\n+table, must be restored.  This pattern is called immediate after the\n+call to @code{__dummy} has been emitted.  There are no arguments.\n @end table\n \n @node Pattern Ordering"}, {"sha": "5c2779fcc22c7e67929c77a000882fe1fd8dbf73", "filename": "gcc/pexecute.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1,6 +1,6 @@\n /* Utilities to execute a program in a subprocess (possibly linked by pipes\n    with other subprocesses), and wait for it.\n-   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or"}, {"sha": "a18afe3fc81a51c68d4e89635e5dc9541bf1935d", "filename": "gcc/sdbout.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -531,10 +531,14 @@ plain_type_1 (type, level)\n \t  {\n \t    char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n+\t    if (!strcmp (name, \"char\"))\n+\t      return T_CHAR;\n \t    if (!strcmp (name, \"unsigned char\"))\n \t      return T_UCHAR;\n \t    if (!strcmp (name, \"signed char\"))\n \t      return T_CHAR;\n+\t    if (!strcmp (name, \"int\"))\n+\t      return T_INT;\n \t    if (!strcmp (name, \"unsigned int\"))\n \t      return T_UINT;\n \t    if (!strcmp (name, \"short int\"))\n@@ -547,12 +551,12 @@ plain_type_1 (type, level)\n \t      return T_ULONG;\n \t  }\n \n+\tif (size == INT_TYPE_SIZE)\n+\t  return (TREE_UNSIGNED (type) ? T_UINT : T_INT);\n \tif (size == CHAR_TYPE_SIZE)\n \t  return (TREE_UNSIGNED (type) ? T_UCHAR : T_CHAR);\n \tif (size == SHORT_TYPE_SIZE)\n \t  return (TREE_UNSIGNED (type) ? T_USHORT : T_SHORT);\n-\tif (size == INT_TYPE_SIZE)\n-\t  return (TREE_UNSIGNED (type) ? T_UINT : T_INT);\n \tif (size == LONG_TYPE_SIZE)\n \t  return (TREE_UNSIGNED (type) ? T_ULONG : T_LONG);\n \tif (size == LONG_LONG_TYPE_SIZE)\t/* better than nothing */"}, {"sha": "c0e400b06cb466ca2adc91436bce85ba5cc4502b", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1574,7 +1574,10 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   body = gen_rtx (ASM_OPERANDS, VOIDmode,\n \t\t  TREE_STRING_POINTER (string), \"\", 0, argvec, constraints,\n \t\t  filename, line);\n-  MEM_VOLATILE_P (body) = vol;\n+\n+  /* The only use of BODY is if no outputs are specified, so set\n+     it volatile, at least for now.  */\n+  MEM_VOLATILE_P (body) = 1;\n \n   /* Eval the inputs and put them into ARGVEC.\n      Put their constraints into ASM_INPUTs and store in CONSTRAINTS.  */"}, {"sha": "b0ffcd713e82264b3e261b1f70aa77668f919e4b", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -630,10 +630,10 @@ int flag_inhibit_size_directive = 0;\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n    generated assembly code (perhaps while debugging the compiler itself).\n-   -fverbose-asm is the default.  -fno-verbose-asm causes the extra information\n+   -fno-verbose-asm, the default, causes the extra information\n    to be omitted and is useful when comparing two assembler files.  */\n \n-int flag_verbose_asm = 1;\n+int flag_verbose_asm = 0;\n \n /* -dA causes debug commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n@@ -3842,7 +3842,7 @@ main (argc, argv, envp)\n     rlim.rlim_cur = rlim.rlim_max;\n     setrlimit (RLIMIT_STACK, &rlim);\n   }\n-#endif /* RLIMIT_STACK */\n+#endif\n \n   signal (SIGFPE, float_signal);\n "}, {"sha": "cef94028ac33a0da31d85fd9efa8aa7e27683a2e", "filename": "gcc/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85f7c16ad9bed5d4732a4624c049da5a5f33085/gcc%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fversion.c?ref=c85f7c16ad9bed5d4732a4624c049da5a5f33085", "patch": "@@ -1 +1 @@\n-char *version_string = \"egcs-2.91.03 971225 (gcc-2.8.0)\";\n+char *version_string = \"egcs-2.91.03 971225 (gcc-2.8.0 release)\";"}]}