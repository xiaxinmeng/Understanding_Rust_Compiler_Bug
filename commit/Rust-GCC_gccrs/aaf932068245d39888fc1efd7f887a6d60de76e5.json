{"sha": "aaf932068245d39888fc1efd7f887a6d60de76e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmOTMyMDY4MjQ1ZDM5ODg4ZmMxZWZkN2Y4ODdhNmQ2MGRlNzZlNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-24T12:27:45Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-24T12:27:45Z"}, "message": "Removal of separate preprocessor cpp0.\n\n\t* Makefile.in (GCC_PASSES, STAGESTUFF, LIBCPP_OBJS,\n\tcpp0, install-common): Update.\n\t* c-common.c (flag_preprocess_only): New.\n\t(c_common_init): Preprocess for -E.\n\t* c-common.h (flag_preprocess_only): New.\n\t* c-decl.c (c_decode_option): Handle -E, and -std=c++98.\n\t* c-objc-common.c (c_init_decl_processing): Exit quickly\n\tfor NULL return from c_common_init.\n\t* cpplib.h (cpp_preprocess_file): New.\n\t* cppmain.c (main, general_init, pfile, progname): Remove.\n\t(do_preprocessing): Rename cpp_preprocess_file, don't call\n\tcpp_finish.  Don't close stdout here.\n\t(setup_callbacks): Update prototype.\n\t* gcc.c (trad_capable_cpp, cpp_unique_options, default_compilers):\n\tUpdate.\n\t* tradcpp.c (main): Ignore -quiet.\ncp:\n\t* decl2.c (cxx_decode_option): Handle -E.\n\t* lang-specs.h (default_compilers): Preprocess with cc1plus.\n\t* lex.c (cxx_init): Exit quickly if c_common_init returns NULL.\nobjc:\n\t* lang-specs.h (default_compilers): Preprocess with cc1obj.\n\nCo-Authored-By: Aldy Hernandez <aldyh@redhat.com>\n\nFrom-SVN: r51256", "tree": {"sha": "273845d7b4dc2112d82db2e2e8f9f5239af6a84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/273845d7b4dc2112d82db2e2e8f9f5239af6a84c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf932068245d39888fc1efd7f887a6d60de76e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf932068245d39888fc1efd7f887a6d60de76e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf932068245d39888fc1efd7f887a6d60de76e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf932068245d39888fc1efd7f887a6d60de76e5/comments", "author": null, "committer": null, "parents": [{"sha": "9e2da84c6a68dc73dfdd7ec04652ab5db8df3994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2da84c6a68dc73dfdd7ec04652ab5db8df3994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2da84c6a68dc73dfdd7ec04652ab5db8df3994"}], "stats": {"total": 172, "additions": 84, "deletions": 88}, "files": [{"sha": "3f568562ca2e081968dee818b92ef85b68d721dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -1,3 +1,27 @@\n+2002-03-24  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\t    Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tRemoval of separate preprocessor cpp0.\n+\n+\t* Makefile.in (GCC_PASSES, STAGESTUFF, LIBCPP_OBJS,\n+\tcpp0, install-common): Update.\n+\t* c-common.c (flag_preprocess_only): New.\n+\t(c_common_init): Preprocess for -E.\n+\t* c-common.h (flag_preprocess_only): New.\n+\t* c-decl.c (c_decode_option): Handle -E and -std=c++98.\n+\t* c-objc-common.c (c_init_decl_processing): Exit quickly\n+\tfor NULL return from c_common_init.\n+\t* cpplib.h (cpp_preprocess_file): New.\n+\t* cppmain.c (main, general_init, pfile, progname): Remove.\n+\t(do_preprocessing): Rename cpp_preprocess_file, don't call\n+\tcpp_finish.  Don't close stdout here.\n+\t(setup_callbacks): Update prototype.\n+\t* gcc.c (trad_capable_cpp, cpp_unique_options, default_compilers):\n+\tUpdate.\n+\t* tradcpp.c (main): Ignore -quiet.\n+objc:\n+\t* lang-specs.h (default_compilers): Preprocess with cc1obj.\n+\n 2002-03-24  Richard Henderson  <rth@redhat.com>\n \n \tPR optimization/5742"}, {"sha": "e9642fc4422f2e8c3261e90a16d15223a9c64b31", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -450,7 +450,7 @@ COMPILERS = cc1$(exeext) @all_compilers@\n \n # List of things which should already be built whenever we try to use xgcc\n # to compile anything (without linking).\n-GCC_PASSES=xgcc$(exeext) cc1$(exeext) cpp0$(exeext) specs $(EXTRA_PASSES)\n+GCC_PASSES=xgcc$(exeext) cc1$(exeext) specs $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use xgcc\n # to link anything.\n@@ -753,7 +753,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  genattr$(build_exeext) genopinit$(build_exeext) gengenrtl$(build_exeext) \\\n  gencheck$(build_exeext) genpreds$(build_exeext) genconstants$(build_exeext) \\\n  genrtl.c genrtl.h \\\n- xgcc$(exeext) cpp$(exeext) cc1$(exeext) cpp0$(exeext) $(EXTRA_PASSES) \\\n+ xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  enquire$(exeext) protoize$(exeext) unprotoize$(exeext) \\\n  specs collect2$(exeext) $(USE_COLLECT2) underscore.c tradcpp0$(exeext) \\\n@@ -1963,7 +1963,7 @@ PREPROCESSOR_DEFINES = \\\n   -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\"\n \n LIBCPP_OBJS =\tcpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o \\\n-\t\tcpphash.o cpperror.o cppinit.o cppdefault.o \\\n+\t\tcpphash.o cpperror.o cppinit.o cppdefault.o cppmain.o \\\n \t\thashtable.o line-map.o mkdeps.o prefix.o version.o mbchar.o\n \n LIBCPP_DEPS =\t$(CPPLIB_H) cpphash.h line-map.h hashtable.h intl.h \\\n@@ -1976,10 +1976,6 @@ libcpp.a: $(LIBCPP_OBJS)\n \t$(AR) $(AR_FLAGS) libcpp.a $(LIBCPP_OBJS)\n \t-$(RANLIB) libcpp.a\n \n-cpp0$(exeext): cppmain.o intl.o libcpp.a $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cpp0$(exeext) cppmain.o \\\n-\tintl.o libcpp.a $(LIBS)\n-\n cppmain.o:  cppmain.c  $(CONFIG_H) $(CPPLIB_H) intl.h $(SYSTEM_H)\n \n cpperror.o: cpperror.c $(CONFIG_H) $(LIBCPP_DEPS)\n@@ -2626,8 +2622,6 @@ install-common: native $(EXTRA_PARTS) lang.install-common\n \t    $(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X; \\\n \t    chmod a-x $(libsubdir)/SYSCALLS.c.X; \\\n \tfi\n-\t-rm -f $(libsubdir)/cpp0$(exeext)\n-\t$(INSTALL_PROGRAM) cpp0$(exeext) $(libsubdir)/cpp0$(exeext)\n \t-rm -f $(libsubdir)/tradcpp0$(exeext)\n \t$(INSTALL_PROGRAM) tradcpp0$(exeext) $(libsubdir)/tradcpp0$(exeext)\n # Install gcov if it was compiled."}, {"sha": "0d5e1e810c59d8ecb631dd6b288436ecbcf5c1f9", "filename": "gcc/c-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -181,6 +181,9 @@ enum c_language_kind c_language;\n \n tree c_global_trees[CTI_MAX];\n \n+/* Nonzero if prepreprocessing only.  */\n+int flag_preprocess_only;\n+\n /* Nonzero means don't recognize the non-ANSI builtin functions.  */\n \n int flag_no_builtin;\n@@ -4141,6 +4144,13 @@ const char *\n c_common_init (filename)\n      const char *filename;\n {\n+  /* NULL is passed up to toplev.c and we exit quickly.  */\n+  if (flag_preprocess_only)\n+    {\n+      cpp_preprocess_file (parse_in);\n+      return NULL;\n+    }\n+\n   /* Do this before initializing pragmas, as then cpplib's hash table\n      has been set up.  */\n   filename = init_c_lex (filename);"}, {"sha": "3bd5ba0154766af2df90f7232e7069d2f3ea2d97", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -372,6 +372,9 @@ extern void c_mark_lang_decl                    PARAMS ((struct c_lang_decl *));\n \n extern c_language_kind c_language;\n \n+/* Nonzero if prepreprocessing only.  */\n+extern int flag_preprocess_only;\n+\n /* Nonzero means give string constants the type `const char *', rather\n    than `char *'.  */\n "}, {"sha": "a727b2707dd0cf990eb095fcb9298d06b2360fc9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -581,6 +581,8 @@ c_decode_option (argc, argv)\n \t  flag_isoc99 = 1;\n \t  flag_isoc94 = 1;\n \t}\n+      else if (!strcmp (argstart, \"c++98\"))\n+\t; /* Handled by cpplib.  */\n       else\n \terror (\"unknown C standard `%s'\", argstart);\n     }\n@@ -685,6 +687,8 @@ c_decode_option (argc, argv)\n       /* Only warn about unknown pragmas that are not in system headers.  */\n       warn_unknown_pragmas = 1;\n     }\n+  else if (!strcmp (p, \"-E\"))\n+    flag_preprocess_only = 1;\n   else\n     {\n       size_t i;"}, {"sha": "62fd84955b388d2cb38424dd5734920b5dc2430a", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -217,6 +217,8 @@ c_objc_common_init (filename)\n   c_init_decl_processing ();\n \n   filename = c_common_init (filename);\n+  if (filename == NULL)\n+    return NULL;\n \n   lang_unsafe_for_reeval = c_unsafe_for_reeval;\n "}, {"sha": "df1bd5718ef670bf43b8f5989ccd4ec5a8d2bc72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -1,3 +1,9 @@\n+2002-03-24  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* decl2.c (cxx_decode_option): Handle -E.\n+\t* lang-specs.h (default_compilers): Preprocess with cc1plus.\n+\t* lex.c (cxx_init): Exit quickly if c_common_init returns NULL.\n+\n 2002-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/6037"}, {"sha": "6763b4591ac99a15aecb426b8b9d57f413d3d012", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -700,6 +700,8 @@ cxx_decode_option (argc, argv)\n \t}\n       else return strings_processed;\n     }\n+  else if (!strcmp (p, \"-E\"))\n+    flag_preprocess_only = 1;\n   else if (!strcmp (p, \"-ansi\"))\n     flag_no_nonansi_builtin = 1, flag_ansi = 1,\n     flag_noniso_default_format_attributes = 0, flag_no_gnu_keywords = 1;"}, {"sha": "771ab59963f763917d8f934b45ab4d8ccb4d0afd", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -35,13 +35,13 @@ Boston, MA 02111-1307, USA.  */\n   {\"@c++\",\n    /* cc1plus has an integrated ISO C preprocessor.  We should invoke\n       the external preprocessor if -save-temps is given.  */\n-    \"%{E|M|MM:cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+    \"%{E|M|MM:cc1plus -E -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{!Wno-deprecated:-D__DEPRECATED}\\\n        %{!fno-exceptions:-D__EXCEPTIONS}\\\n        -D__GXX_ABI_VERSION=100\\\n        %{ansi:-D__STRICT_ANSI__ -trigraphs -$} %(cpp_options)}\\\n      %{!E:%{!M:%{!MM:\\\n-       %{save-temps:cpp0 -lang-c++ \\\n+       %{save-temps:cc1plus -E -lang-c++ \\\n \t\t    %{!no-gcc:-D__GNUG__=%v1}\\\n        \t\t    %{!Wno-deprecated:-D__DEPRECATED}\\\n \t\t    %{!fno-exceptions:-D__EXCEPTIONS}\\"}, {"sha": "f0c6389935d869f1c8c8c4b25250700193bfc4ac", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -685,6 +685,8 @@ cxx_init (filename)\n   interface_unknown = 1;\n \n   filename = c_common_init (filename);\n+  if (filename == NULL)\n+    return NULL;\n \n   init_cp_pragma ();\n "}, {"sha": "e8298be1fae75d2bb23377155a2672d6b5ce26d4", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -603,6 +603,9 @@ extern unsigned char *cpp_quote_string\tPARAMS ((unsigned char *,\n extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n \n+/* In cppmain.c */\n+extern void cpp_preprocess_file PARAMS ((cpp_reader *));\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "0d427292662b409a9c398ef12aae10142a3bfdb1", "filename": "gcc/cppmain.c", "status": "modified", "additions": 15, "deletions": 74, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -1,4 +1,4 @@\n-/* CPP main program, using CPP Library.\n+/* Preprocess only, using cpplib.\n    Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n@@ -38,10 +38,7 @@ struct printer\n   unsigned char printed;\t/* Nonzero if something output at line.  */\n };\n \n-int main\t\tPARAMS ((int, char **));\n-static void general_init PARAMS ((const char *));\n-static void do_preprocessing PARAMS ((int, char **));\n-static void setup_callbacks PARAMS ((void));\n+static void setup_callbacks PARAMS ((cpp_reader *));\n \n /* General output routines.  */\n static void scan_translation_unit PARAMS ((cpp_reader *));\n@@ -64,74 +61,15 @@ static void cb_ident\t  PARAMS ((cpp_reader *, unsigned int,\n static void cb_file_change PARAMS ((cpp_reader *, const struct line_map *));\n static void cb_def_pragma PARAMS ((cpp_reader *, unsigned int));\n \n-const char *progname;\t\t/* Needs to be global.  */\n-static cpp_reader *pfile;\t/* An opaque handle.  */\n static cpp_options *options;\t/* Options of pfile.  */\n static struct printer print;\n \n-int\n-main (argc, argv)\n-     int argc;\n-     char **argv;\n+/* Preprocess and output.  */\n+void\n+cpp_preprocess_file (pfile)\n+     cpp_reader *pfile;\n {\n-  general_init (argv[0]);\n-\n-  /* Construct a reader with default language GNU C89.  */\n-  pfile = cpp_create_reader (CLK_GNUC89);\n   options = cpp_get_options (pfile);\n-  \n-  do_preprocessing (argc, argv);\n-\n-  if (cpp_destroy (pfile))\n-    return FATAL_EXIT_CODE;\n-\n-  return SUCCESS_EXIT_CODE;\n-}\n-\n-/* Store the program name, and set the locale.  */\n-static void\n-general_init (argv0)\n-     const char *argv0;\n-{\n-  progname = argv0 + strlen (argv0);\n-\n-  while (progname != argv0 && ! IS_DIR_SEPARATOR (progname[-1]))\n-    --progname;\n-\n-  xmalloc_set_program_name (progname);\n-\n-  hex_init ();\n-  gcc_init_libintl ();\n-}\n-\n-/* Handle switches, preprocess and output.  */\n-static void\n-do_preprocessing (argc, argv)\n-     int argc;\n-     char **argv;\n-{\n-  int argi = 1;  /* Next argument to handle.  */\n-\n-  argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n-  if (CPP_FATAL_ERRORS (pfile))\n-    return;\n-\n-  if (argi < argc)\n-    {\n-      cpp_fatal (pfile, \"invalid option %s\", argv[argi]);\n-      return;\n-    }\n-\n-  cpp_post_options (pfile);\n-  if (CPP_FATAL_ERRORS (pfile))\n-    return;\n-\n-  /* If cpp_handle_options saw --help or --version on the command\n-     line, it will have set pfile->help_only to indicate this.  Exit\n-     successfully.  [The library does not exit itself, because\n-     e.g. cc1 needs to print its own --help message at this point.]  */\n-  if (options->help_only)\n-    return;\n \n   /* Initialize the printer structure.  Setting print.line to -1 here\n      is a trick to guarantee that the first token of the file will\n@@ -156,7 +94,7 @@ do_preprocessing (argc, argv)\n \t}\n     }\n \n-  setup_callbacks ();\n+  setup_callbacks (pfile);\n \n   if (cpp_read_main_file (pfile, options->in_fname, NULL))\n     {\n@@ -172,21 +110,24 @@ do_preprocessing (argc, argv)\n       /* -dM command line option.  Should this be in cpp_finish?  */\n       if (options->dump_macros == dump_only)\n \tcpp_forall_identifiers (pfile, dump_macro, NULL);\n-\n-      cpp_finish (pfile);\n     }\n \n   /* Flush any pending output.  */\n   if (print.printed)\n     putc ('\\n', print.outf);\n \n-  if (ferror (print.outf) || fclose (print.outf))\n-    cpp_notice_from_errno (pfile, options->out_fname);\n+  /* Don't close stdout (dependencies have yet to be output).  */\n+  if (print.outf != stdout)\n+    {\n+      if (ferror (print.outf) || fclose (print.outf))\n+\tcpp_notice_from_errno (pfile, options->out_fname);\n+    }\n }\n \n /* Set up the callbacks as appropriate.  */\n static void\n-setup_callbacks ()\n+setup_callbacks (pfile)\n+     cpp_reader *pfile;\n {\n   cpp_callbacks *cb = cpp_get_callbacks (pfile);\n "}, {"sha": "436b97baf27d80628c9abb66c6e99eccf30e02d0", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -658,11 +658,12 @@ static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n    appropriate -B options.  */\n \n static const char *trad_capable_cpp =\n-\"%{traditional|ftraditional|traditional-cpp:trad}cpp0\";\n+\"%{traditional|ftraditional|traditional-cpp:tradcpp0}\\\n+ %{!traditional:%{!ftraditional:%{!traditional-cpp:cc1 -E}}}\";\n \n static const char *cpp_unique_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n- %{nostdinc*} %{C} %{v} %{I*} %{P} %{$} %I\\\n+ %{!Q:-quiet} %{nostdinc*} %{C} %{v} %{I*} %{P} %{$} %I\\\n  %{MD:-M -MF %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{MMD:-MM -MF %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\"}, {"sha": "c6d1f9aa0e1250e65ada44c1e80c517bd97c179d", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n       %{!E:%{!M:%{!MM:\\\n \t%{traditional|ftraditional|traditional-cpp:\\\n %eGNU Objective C no longer supports traditional compilation}\\\n-\t%{save-temps:cpp0 -lang-objc %{ansi:-std=c89}\\\n+\t%{save-temps:cc1obj -E -lang-objc %{ansi:-std=c89}\\\n \t  %(cpp_options) %b.mi \\n\\\n \t    cc1obj -fpreprocessed %b.mi %(cc1_options) %{gen-decls}}\\\n \t%{!save-temps:\\"}, {"sha": "4ed6332ac7ffd16146ee198e04476c0ca56ca100", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf932068245d39888fc1efd7f887a6d60de76e5/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=aaf932068245d39888fc1efd7f887a6d60de76e5", "patch": "@@ -779,6 +779,10 @@ main (argc, argv)\n \tno_standard_includes = 1;\n \tbreak;\n \n+      case 'q':\n+\t/* Accept -quiet silently.  */\n+\tbreak;\n+\n       case '\\0': /* JF handle '-' as file name meaning stdin or stdout */\n \tif (in_fname == NULL) {\n \t  in_fname = \"\";"}]}