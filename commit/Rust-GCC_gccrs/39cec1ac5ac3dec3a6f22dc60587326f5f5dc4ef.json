{"sha": "39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzljZWMxYWM1YWMzZGVjM2E2ZjIyZGM2MDU4NzMyNmY1ZjVkYzRlZg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-12-03T01:32:23Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1998-12-03T01:32:23Z"}, "message": "alias.c (addr_side_effect_eval): New function.\n\n\t* alias.c (addr_side_effect_eval): New function.\n\t(memrefs_conflict_p): Use it.\n\t* rtl.h (addr_side_effect_eval): Prototype it.\n\nFrom-SVN: r24068", "tree": {"sha": "784e2a2f3a4aa6bf5c9f17a4f251a307531cf5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/784e2a2f3a4aa6bf5c9f17a4f251a307531cf5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/comments", "author": null, "committer": null, "parents": [{"sha": "5cf068b168182de3a080a3ec60abfb564b9262b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf068b168182de3a080a3ec60abfb564b9262b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf068b168182de3a080a3ec60abfb564b9262b9"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "2481c16f5606ea1c0e5d62b61d6130b69407ee86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "patch": "@@ -1,3 +1,10 @@\n+Thu Dec  3 22:30:18 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* alias.c (addr_side_effect_eval): New function.\n+\t(memrefs_conflict_p): Use it.\n+\t* rtl.h (addr_side_effect_eval): Prototype it.\n+\n+\n 1998-12-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* pdp11.md (extendsfdf2): Fix mode mismatch in SET."}, {"sha": "909176ea3fb951c89150db699c81e4e0cddc226e", "filename": "gcc/alias.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "patch": "@@ -860,6 +860,45 @@ base_alias_check (x, y, x_mode, y_mode)\n   return ! (GET_MODE (x_base) == VOIDmode && GET_MODE (y_base) == VOIDmode);\n }\n \n+/*  Return the address of the (N_REFS + 1)th memory reference to ADDR\n+    where SIZE is the size in bytes of the memory reference.  If ADDR\n+    is not modified by the memory reference then ADDR is returned.  */\n+\n+rtx\n+addr_side_effect_eval (addr, size, n_refs)\n+     rtx addr;\n+     int size;\n+     int n_refs;\n+{\n+  int offset = 0;\n+  \n+  switch (GET_CODE (addr))\n+    {\n+    case PRE_INC:\n+      offset = (n_refs + 1) * size;\n+      break;\n+    case PRE_DEC:\n+      offset = -(n_refs + 1) * size;\n+      break;\n+    case POST_INC:\n+      offset = n_refs * size;\n+      break;\n+    case POST_DEC:\n+      offset = -n_refs * size;\n+      break;\n+\n+    default:\n+      return addr;\n+    }\n+  \n+  if (offset)\n+    addr = gen_rtx_PLUS (GET_MODE (addr), XEXP (addr, 0), GEN_INT (offset));\n+  else\n+    addr = XEXP (addr, 0);\n+\n+  return addr;\n+}\n+\n /* Return nonzero if X and Y (memory addresses) could reference the\n    same location in memory.  C is an offset accumulator.  When\n    C is nonzero, we are testing aliases between X and Y + C.\n@@ -889,13 +928,13 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n   else if (GET_CODE (x) == LO_SUM)\n     x = XEXP (x, 1);\n   else\n-    x = canon_rtx (x);\n+    x = canon_rtx (addr_side_effect_eval (x, xsize, 0));\n   if (GET_CODE (y) == HIGH)\n     y = XEXP (y, 0);\n   else if (GET_CODE (y) == LO_SUM)\n     y = XEXP (y, 1);\n   else\n-    y = canon_rtx (y);\n+    y = canon_rtx (addr_side_effect_eval (y, ysize, 0));\n \n   if (rtx_equal_for_memref_p (x, y))\n     {"}, {"sha": "da22adbe47ab61d9ef6334f49957e734d76107e9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=39cec1ac5ac3dec3a6f22dc60587326f5f5dc4ef", "patch": "@@ -1521,5 +1521,6 @@ extern void end_alias_analysis\t\tPROTO ((void));\n \n extern void record_base_value\t\tPROTO ((int, rtx, int));\n extern void record_alias_subset         PROTO ((int, int));\n+extern rtx addr_side_effect_eval\tPROTO ((rtx, int, int));\n \n #endif /* _RTL_H */"}]}