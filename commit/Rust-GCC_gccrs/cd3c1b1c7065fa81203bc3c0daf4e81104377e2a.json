{"sha": "cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzYzFiMWM3MDY1ZmE4MTIwM2JjM2MwZGFmNGU4MTEwNDM3N2UyYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2013-11-12T13:26:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-11-12T13:26:51Z"}, "message": "Properly handle AVX256 unaligned load and store\n\n\tPR target/59084\n\t* config/i386/i386.c (ix86_option_override_internal): Check\n\tX86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL and\n\tX86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL for\n\tMASK_AVX256_SPLIT_UNALIGNED_LOAD and\n\tMASK_AVX256_SPLIT_UNALIGNED_STORE.\n\n\t* config/i386/x86-tune.def (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL):\n\tClear m_COREI7_AVX and update comments.\n\t(X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL): Likewise.\n\nFrom-SVN: r204700", "tree": {"sha": "76b7d3ee8a4b157a605bf72f38d720713f152b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76b7d3ee8a4b157a605bf72f38d720713f152b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "732dad8f32152ed7cbb2d4cb8ba0fc21f608fe70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732dad8f32152ed7cbb2d4cb8ba0fc21f608fe70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732dad8f32152ed7cbb2d4cb8ba0fc21f608fe70"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "3cdf24779c6354a7bbd674618b3536c031a024c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "patch": "@@ -1,3 +1,16 @@\n+2013-11-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59084\n+\t* config/i386/i386.c (ix86_option_override_internal): Check\n+\tX86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL and\n+\tX86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL for\n+\tMASK_AVX256_SPLIT_UNALIGNED_LOAD and\n+\tMASK_AVX256_SPLIT_UNALIGNED_STORE.\n+\n+\t* config/i386/x86-tune.def (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL):\n+\tClear m_COREI7_AVX and update comments.\n+\t(X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL): Likewise.\n+\n 2013-11-12  Martin Jambor  <mjambor@suse.cz>\n \n \tPR rtl-optimization/10474"}, {"sha": "924cb669e46d42758f893b83b4753d36b55cdb3e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "patch": "@@ -3974,10 +3974,10 @@ ix86_option_override_internal (bool main_args_p,\n       if (flag_expensive_optimizations\n \t  && !(opts_set->x_target_flags & MASK_VZEROUPPER))\n \topts->x_target_flags |= MASK_VZEROUPPER;\n-      if (!ix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]\n+      if (!ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL]\n \t  && !(opts_set->x_target_flags & MASK_AVX256_SPLIT_UNALIGNED_LOAD))\n \topts->x_target_flags |= MASK_AVX256_SPLIT_UNALIGNED_LOAD;\n-      if (!ix86_tune_features[X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL]\n+      if (!ix86_tune_features[X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL]\n \t  && !(opts_set->x_target_flags & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n \topts->x_target_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n       /* Enable 128-bit AVX instruction generation"}, {"sha": "54867d2f31feac0796e3e645ccb17f1d523a87c6", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3c1b1c7065fa81203bc3c0daf4e81104377e2a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=cd3c1b1c7065fa81203bc3c0daf4e81104377e2a", "patch": "@@ -376,15 +376,15 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n /* AVX instruction selection tuning (some of SSE flags affects AVX, too)     */\n /*****************************************************************************/\n \n-/* X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL: if true, unaligned loads are\n+/* X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL: if false, unaligned loads are\n    split.  */\n DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL, \"256_unaligned_load_optimal\", \n-          ~(m_COREI7 | m_GENERIC))\n+          ~(m_COREI7 | m_COREI7_AVX | m_GENERIC))\n \n-/* X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL: if true, unaligned loads are\n+/* X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL: if false, unaligned stores are\n    split.  */\n-DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL, \"256_unaligned_load_optimal\", \n-          ~(m_COREI7 | m_BDVER | m_GENERIC))\n+DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL, \"256_unaligned_store_optimal\", \n+          ~(m_COREI7 | m_COREI7_AVX | m_BDVER | m_GENERIC))\n \n /* X86_TUNE_AVX128_OPTIMAL: Enable 128-bit AVX instruction generation for\n    the auto-vectorizer.  */"}]}