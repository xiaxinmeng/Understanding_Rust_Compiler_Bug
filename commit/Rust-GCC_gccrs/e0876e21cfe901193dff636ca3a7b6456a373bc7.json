{"sha": "e0876e21cfe901193dff636ca3a7b6456a373bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4NzZlMjFjZmU5MDExOTNkZmY2MzZjYTNhN2I2NDU2YTM3M2JjNw==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2016-03-30T20:47:45Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2016-03-30T20:47:45Z"}, "message": "[multiple changes]\n\n2016-03-30  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR libgfortran/70235\n\t* io/write_float.def: Fix PF format for negative values of the scale\n\tfactor.\n\n2016-03-30  Dominique d'Humieres  <dominiq@lps.ens.fr>\n\t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* gfortran.dg/fmt_pf.f90: New test.\n\nFrom-SVN: r234600", "tree": {"sha": "83e4ed7f4cc6fe0a7e0a7a58ff4368d3c788b7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e4ed7f4cc6fe0a7e0a7a58ff4368d3c788b7ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0876e21cfe901193dff636ca3a7b6456a373bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0876e21cfe901193dff636ca3a7b6456a373bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0876e21cfe901193dff636ca3a7b6456a373bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0876e21cfe901193dff636ca3a7b6456a373bc7/comments", "author": null, "committer": null, "parents": [{"sha": "c73f71b7002ed8a5cc10a0332d43c84d29c57c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73f71b7002ed8a5cc10a0332d43c84d29c57c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73f71b7002ed8a5cc10a0332d43c84d29c57c3a"}], "stats": {"total": 264, "additions": 257, "deletions": 7}, "files": [{"sha": "8e2bd73417688bb83af9f19591b01f564d144b75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0876e21cfe901193dff636ca3a7b6456a373bc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0876e21cfe901193dff636ca3a7b6456a373bc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0876e21cfe901193dff636ca3a7b6456a373bc7", "patch": "@@ -1,3 +1,8 @@\n+2016-03-30  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* gfortran.dg/fmt_pf.f90: New test.\n+\n 2016-03-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tForward-port from 5 branch"}, {"sha": "6cefa86e4a89557824990d98fa81590fa03bc461", "filename": "gcc/testsuite/gfortran.dg/fmt_pf.f90", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0876e21cfe901193dff636ca3a7b6456a373bc7/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_pf.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0876e21cfe901193dff636ca3a7b6456a373bc7/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_pf.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_pf.f90?ref=e0876e21cfe901193dff636ca3a7b6456a373bc7", "patch": "@@ -0,0 +1,226 @@\n+! { dg-do run }\n+! PR70235 Incorrect output with PF format.\n+! Test case provided by Antoine Gardeux.\n+program pr70235\n+use ISO_FORTRAN_ENV\n+    implicit none\n+    integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+    logical :: l_skip(4) = .false.\n+    integer :: i\n+    integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n+    character(len=20) :: s, s1\n+\n+!   Check that the default rounding mode is to nearest and to even on tie.\n+    do i=1,size(real_kinds)\n+      if (i == 1) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(1)), &\n+                                  real(9.49999905,kind=j(1)),  &\n+                                  real(9.5,kind=j(1)), real(8.5,kind=j(1))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(1)), &\n+                                       real(98765.0,kind=j(1))\n+      else if (i == 2) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(2)), &\n+                                  real(9.49999905,kind=j(2)),  &\n+                                  real(9.5,kind=j(2)), real(8.5,kind=j(2))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(2)), &\n+                                       real(98765.0,kind=j(2))\n+      else if (i == 3) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(3)), &\n+                                  real(9.49999905,kind=j(3)),  &\n+                                  real(9.5,kind=j(3)), real(8.5,kind=j(3))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(3)), &\n+                                       real(98765.0,kind=j(3))\n+      else if (i == 4) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(4)), &\n+                                  real(9.49999905,kind=j(4)),  &\n+                                  real(9.5,kind=j(4)), real(8.5,kind=j(4))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(4)), &\n+                                       real(98765.0,kind=j(4))\n+      end if\n+      if (s /= '-9.5 9.5 10.  8.' .or. s1 /= ' 987.4E+03 98.76E+03') then\n+        l_skip(i) = .true.\n+!        print \"('Unsupported rounding for real(',i0,')')\", j(i)\n+      end if\n+    end do\n+        \n+\n+! Original test.\n+    call checkfmt(\"(-6PF8.3)\", 1.0e4,    \"   0.010\")\n+    call checkfmt(\"(-6PF8.3)\",   0.0,    \"   0.000\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(-6pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(-1pf18.3)\", 643.125, \"            64.312\")\n+    call checkfmt(\"( 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(ru,-8pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(ru,-7pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(ru,-6pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(ru,-5pf18.3)\", 643.125, \"             0.007\")\n+    call checkfmt(\"(ru,-4pf18.3)\", 643.125, \"             0.065\")\n+    call checkfmt(\"(ru,-3pf18.3)\", 643.125, \"             0.644\")\n+    call checkfmt(\"(ru,-2pf18.3)\", 643.125, \"             6.432\")\n+    call checkfmt(\"(ru,-1pf18.3)\", 643.125, \"            64.313\")\n+    call checkfmt(\"(ru, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(rd,-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rd,-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rd,-6pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rd,-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(rd,-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(rd,-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(rd,-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(rd,-1pf18.3)\", 643.125, \"            64.312\")\n+    call checkfmt(\"(rd, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(rz,-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rz,-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rz,-6pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rz,-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(rz,-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(rz,-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(rz,-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(rz,-1pf18.3)\", 643.125, \"            64.312\")\n+    call checkfmt(\"(rz, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(rc,-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rc,-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rc,-6pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(rc,-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(rc,-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(rc,-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(rc,-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(rc,-1pf18.3)\", 643.125, \"            64.313\")\n+    call checkfmt(\"(rc, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(rn,-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rn,-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rn,-6pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(rn,-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(rn,-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(rn,-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(rn,-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(rn,-1pf18.3)\", 643.125, \"            64.312\")\n+    call checkfmt(\"(rn, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(rp,-8pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rp,-7pf18.3)\", 643.125, \"             0.000\")\n+    call checkfmt(\"(rp,-6pf18.3)\", 643.125, \"             0.001\")\n+    call checkfmt(\"(rp,-5pf18.3)\", 643.125, \"             0.006\")\n+    call checkfmt(\"(rp,-4pf18.3)\", 643.125, \"             0.064\")\n+    call checkfmt(\"(rp,-3pf18.3)\", 643.125, \"             0.643\")\n+    call checkfmt(\"(rp,-2pf18.3)\", 643.125, \"             6.431\")\n+    call checkfmt(\"(rp,-1pf18.3)\", 643.125, \"            64.312\")\n+    call checkfmt(\"(rp, 0pf18.3)\", 643.125, \"           643.125\")\n+\n+    call checkfmt(\"(-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(-6pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(-1pf18.3)\", -643.125, \"           -64.312\")\n+    call checkfmt(\"( 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(ru,-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(ru,-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(ru,-6pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(ru,-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(ru,-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(ru,-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(ru,-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(ru,-1pf18.3)\", -643.125, \"           -64.312\")\n+    call checkfmt(\"(ru, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(rd,-8pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rd,-7pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rd,-6pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rd,-5pf18.3)\", -643.125, \"            -0.007\")\n+    call checkfmt(\"(rd,-4pf18.3)\", -643.125, \"            -0.065\")\n+    call checkfmt(\"(rd,-3pf18.3)\", -643.125, \"            -0.644\")\n+    call checkfmt(\"(rd,-2pf18.3)\", -643.125, \"            -6.432\")\n+    call checkfmt(\"(rd,-1pf18.3)\", -643.125, \"           -64.313\")\n+    call checkfmt(\"(rd, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(rz,-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rz,-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rz,-6pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rz,-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(rz,-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(rz,-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(rz,-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(rz,-1pf18.3)\", -643.125, \"           -64.312\")\n+    call checkfmt(\"(rz, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(rc,-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rc,-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rc,-6pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rc,-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(rc,-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(rc,-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(rc,-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(rc,-1pf18.3)\", -643.125, \"           -64.313\")\n+    call checkfmt(\"(rc, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(rn,-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rn,-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rn,-6pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rn,-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(rn,-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(rn,-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(rn,-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(rn,-1pf18.3)\", -643.125, \"           -64.312\")\n+    call checkfmt(\"(rn, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    call checkfmt(\"(rp,-8pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rp,-7pf18.3)\", -643.125, \"            -0.000\")\n+    call checkfmt(\"(rp,-6pf18.3)\", -643.125, \"            -0.001\")\n+    call checkfmt(\"(rp,-5pf18.3)\", -643.125, \"            -0.006\")\n+    call checkfmt(\"(rp,-4pf18.3)\", -643.125, \"            -0.064\")\n+    call checkfmt(\"(rp,-3pf18.3)\", -643.125, \"            -0.643\")\n+    call checkfmt(\"(rp,-2pf18.3)\", -643.125, \"            -6.431\")\n+    call checkfmt(\"(rp,-1pf18.3)\", -643.125, \"           -64.312\")\n+    call checkfmt(\"(rp, 0pf18.3)\", -643.125, \"          -643.125\")\n+\n+    ! print *, n_tst, n_cnt, n_skip\n+    if (n_cnt /= 0) call abort\n+    if (all(.not. l_skip)) print *, \"All kinds rounded to nearest\"\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        implicit none\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*), intent(in) :: cmp\n+        do i=1,size(real_kinds)\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+            if (l_skip(i)) then\n+              n_skip = n_skip + 1\n+            else\n+              print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+              n_cnt = n_cnt + 1\n+            end if\n+          end if\n+        end do\n+        \n+    end subroutine\n+end program\n+! { dg-output \"All kinds rounded to nearest\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }"}, {"sha": "688a16e8d8ba9516d1a9d4ddcd9ef4fe808f08cd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0876e21cfe901193dff636ca3a7b6456a373bc7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0876e21cfe901193dff636ca3a7b6456a373bc7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=e0876e21cfe901193dff636ca3a7b6456a373bc7", "patch": "@@ -1,3 +1,10 @@\n+2016-03-30  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libgfortran/70235\n+\t* io/write_float.def: Fix PF format for negative values of the scale\n+\tfactor.\n+\n 2016-03-28  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n \n \t* caf/libcaf.h: caf_stop_numeric and caf_stop_str prototype."}, {"sha": "d32440f6f9bb600ff999aff7fb4989c036108c22", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0876e21cfe901193dff636ca3a7b6456a373bc7/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0876e21cfe901193dff636ca3a7b6456a373bc7/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=e0876e21cfe901193dff636ca3a7b6456a373bc7", "patch": "@@ -184,9 +184,6 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t      memmove (digits + nbefore, digits + nbefore + 1, p);\n \t      digits[nbefore + p] = '.';\n \t      nbefore += p;\n-\t      nafter = d - p;\n-\t      if (nafter < 0)\n-\t\tnafter = 0;\n \t      nafter = d;\n \t      nzero = 0;\n \t    }\n@@ -204,12 +201,27 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t\t{\n \t\t  nzero = -(nbefore + p);\n \t\t  memmove (digits + 1, digits, nbefore);\n-\t\t  digits++;\n-\t\t  nafter = d + nbefore;\n+\t\t  nafter = d - nzero;\n+\t\t  if (nafter == 0 && d > 0)\n+\t\t    {\n+\t\t      /* This is needed to get the correct rounding. */\n+\t\t      memmove (digits + 1, digits, ndigits - 1);\n+\t\t      digits[1] = '0';\n+\t\t      nafter = 1;\n+\t\t      nzero = d - 1;\n+\t\t    }\n+\t\t  else if (nafter < 0)\n+\t\t    {\n+\t\t      /* Reset digits to 0 in order to get correct rounding\n+\t\t\t towards infinity. */\n+\t\t      for (i = 0; i < ndigits; i++)\n+\t\t\tdigits[i] = '0';\n+\t\t      digits[ndigits - 1] = '1';\n+\t\t      nafter = d;\n+\t\t      nzero = 0;\n+\t\t    }\n \t\t  nbefore = 0;\n \t\t}\n-\t      if (nzero > d)\n-\t\tnzero = d;\n \t    }\n \t}\n       else"}]}