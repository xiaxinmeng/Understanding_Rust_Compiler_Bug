{"sha": "c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhODUzMGUyMWM3YTNiYzQ4MjRkMDBlMGJiOGZmMzkwMDlkYTQzYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-19T21:49:58Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-19T21:49:58Z"}, "message": "gthr-posix.h: On Tru64...\n\n\n\t* gthr-posix.h: On Tru64, map __gthr_foo as a weak reference to\n\t__foo and not foo when _PTHREAD_USE_MANGLED_NAMES_ is defined.\n\nFrom-SVN: r111282", "tree": {"sha": "0f789b65c451aecafb861e55b6b36f5b18d4973b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f789b65c451aecafb861e55b6b36f5b18d4973b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a/comments", "author": null, "committer": null, "parents": [{"sha": "8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d39a86b963ad0d39edb2e7bf633b5790432fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0d39a86b963ad0d39edb2e7bf633b5790432fc"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "f855ed05b120c04f93d6317d676f605d6c535740", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "patch": "@@ -1,3 +1,8 @@\n+2006-02-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gthr-posix.h: On Tru64, map __gthr_foo as a weak reference to\n+\t__foo and not foo when _PTHREAD_USE_MANGLED_NAMES_ is defined.\n+\n 2006-02-19  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/xcoff.h (TARGET_ASM_OUTPUT_ANCHOR): Define."}, {"sha": "c06e99f0f6da9794306beaea40c7a57061f847a1", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a8530e21c7a3bc4824d00e0bb8ff39009da43a/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=c2a8530e21c7a3bc4824d00e0bb8ff39009da43a", "patch": "@@ -1,6 +1,6 @@\n /* Threads compatibility routines for libgcc2 and libobjc.  */\n /* Compile this one with gcc.  */\n-/* Copyright (C) 1997, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+/* Copyright (C) 1997, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -59,33 +59,61 @@ typedef pthread_mutex_t __gthread_recursive_mutex_t;\n #endif\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n-# define __gthrw(name) \\\n-  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)));\n+# define __gthrw2(name,name2) \\\n+  static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name2)));\n # define __gthrw_(name) __gthrw_ ## name\n #else\n-# define __gthrw(name)\n+# define __gthrw2(name,name2)\n # define __gthrw_(name) name\n #endif\n \n+/* Typically, __gthrw_foo is a weak refernce to symbol foo.  */\n+#define __gthrw(name) __gthrw2(name,name)\n+\n+/* On Tru64, /usr/include/pthread.h uses #pragma extern_prefix \"__\" to\n+   map a subset of the POSIX pthread API to mangled versions of their\n+   names.  */\n+#if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n+__gthrw2(pthread_once,__pthread_once)\n+__gthrw2(pthread_getspecific,__pthread_getspecific)\n+__gthrw2(pthread_setspecific,__pthread_setspecific)\n+__gthrw2(pthread_create,__pthread_create)\n+__gthrw2(pthread_cancel,__pthread_cancel)\n+__gthrw2(pthread_mutex_lock,__pthread_mutex_lock)\n+__gthrw2(pthread_mutex_trylock,__pthread_mutex_trylock)\n+__gthrw2(pthread_mutex_unlock,__pthread_mutex_unlock)\n+__gthrw2(pthread_mutex_init,__pthread_mutex_init)\n+#else\n __gthrw(pthread_once)\n-__gthrw(pthread_key_create)\n-__gthrw(pthread_key_delete)\n __gthrw(pthread_getspecific)\n __gthrw(pthread_setspecific)\n __gthrw(pthread_create)\n __gthrw(pthread_cancel)\n-\n __gthrw(pthread_mutex_lock)\n __gthrw(pthread_mutex_trylock)\n __gthrw(pthread_mutex_unlock)\n+__gthrw(pthread_mutex_init)\n+#endif\n+\n+__gthrw(pthread_key_create)\n+__gthrw(pthread_key_delete)\n __gthrw(pthread_mutexattr_init)\n __gthrw(pthread_mutexattr_settype)\n __gthrw(pthread_mutexattr_destroy)\n \n-__gthrw(pthread_mutex_init)\n \n #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)\n /* Objective-C.  */\n+#if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n+__gthrw2(pthread_cond_broadcast,__pthread_cond_broadcast)\n+__gthrw2(pthread_cond_destroy,__pthread_cond_destroy)\n+__gthrw2(pthread_cond_init,__pthread_cond_init)\n+__gthrw2(pthread_cond_signal,__pthread_cond_signal)\n+__gthrw2(pthread_cond_wait,__pthread_cond_wait)\n+__gthrw2(pthread_exit,__pthread_exit)\n+__gthrw2(pthread_mutex_destroy,__pthread_mutex_destroy)\n+__gthrw2(pthread_self,__pthread_self)\n+#else\n __gthrw(pthread_cond_broadcast)\n __gthrw(pthread_cond_destroy)\n __gthrw(pthread_cond_init)\n@@ -94,6 +122,7 @@ __gthrw(pthread_cond_wait)\n __gthrw(pthread_exit)\n __gthrw(pthread_mutex_destroy)\n __gthrw(pthread_self)\n+#endif /* __osf__ && _PTHREAD_USE_MANGLED_NAMES_ */\n #ifdef _POSIX_PRIORITY_SCHEDULING\n #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING\n __gthrw(sched_get_priority_max)"}]}