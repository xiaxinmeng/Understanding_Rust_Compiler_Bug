{"sha": "f073de07ad00d4be604bdbaeab14786850932601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3M2RlMDdhZDAwZDRiZTYwNGJkYmFlYWIxNDc4Njg1MDkzMjYwMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-26T11:28:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-26T11:28:25Z"}, "message": "This patch adds a new hook that gives the preferred alignment for a static rtx...\n\nTARGET_STATIC_RTX_ALIGNMENT\n\nThis patch adds a new hook that gives the preferred alignment for\na static rtx, so that we don't need to query the front end in\nforce_const_mem.\n\n2017-10-26  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* target.def (static_rtx_alignment): New hook.\n\t* targhooks.h (default_static_rtx_alignment): Declare.\n\t* targhooks.c (default_static_rtx_alignment): New function.\n\t* doc/tm.texi.in (TARGET_STATIC_RTX_ALIGNMENT): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* varasm.c (force_const_mem): Use targetm.static_rtx_alignment\n\tinstead of targetm.constant_alignment.  Remove call to\n\tset_mem_attributes.\n\t* config/cris/cris.c (TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n\t(cris_preferred_mininum_alignment): New function, split out from...\n\t(cris_constant_alignment): ...here.\n\t(cris_static_rtx_alignment): New function.\n\t* config/i386/i386.c (ix86_static_rtx_alignment): New function,\n\tsplit out from...\n\t(ix86_constant_alignment): ...here.\n\t(TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n\t* config/mmix/mmix.c (TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n\t(mmix_static_rtx_alignment): New function.\n\t* config/spu/spu.c (spu_static_rtx_alignment): New function.\n\t(TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n\nFrom-SVN: r254102", "tree": {"sha": "825db4f6d56d10a34af45d9e3c9e8dcaf128e151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/825db4f6d56d10a34af45d9e3c9e8dcaf128e151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f073de07ad00d4be604bdbaeab14786850932601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f073de07ad00d4be604bdbaeab14786850932601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f073de07ad00d4be604bdbaeab14786850932601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f073de07ad00d4be604bdbaeab14786850932601/comments", "author": null, "committer": null, "parents": [{"sha": "4bc19a3b1a9fe74e515b7c54082bbad27decc227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc19a3b1a9fe74e515b7c54082bbad27decc227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc19a3b1a9fe74e515b7c54082bbad27decc227"}], "stats": {"total": 133, "additions": 118, "deletions": 15}, "files": [{"sha": "3033a7f789d5e8d3c5ec7e1aa5046b12d0cb131e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -1,3 +1,26 @@\n+2017-10-26  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* target.def (static_rtx_alignment): New hook.\n+\t* targhooks.h (default_static_rtx_alignment): Declare.\n+\t* targhooks.c (default_static_rtx_alignment): New function.\n+\t* doc/tm.texi.in (TARGET_STATIC_RTX_ALIGNMENT): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* varasm.c (force_const_mem): Use targetm.static_rtx_alignment\n+\tinstead of targetm.constant_alignment.  Remove call to\n+\tset_mem_attributes.\n+\t* config/cris/cris.c (TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n+\t(cris_preferred_mininum_alignment): New function, split out from...\n+\t(cris_constant_alignment): ...here.\n+\t(cris_static_rtx_alignment): New function.\n+\t* config/i386/i386.c (ix86_static_rtx_alignment): New function,\n+\tsplit out from...\n+\t(ix86_constant_alignment): ...here.\n+\t(TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n+\t* config/mmix/mmix.c (TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n+\t(mmix_static_rtx_alignment): New function.\n+\t* config/spu/spu.c (spu_static_rtx_alignment): New function.\n+\t(TARGET_STATIC_RTX_ALIGNMENT): Redefine.\n+\n 2017-10-26  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/81800"}, {"sha": "8fa234f7ff0577061c9a8bbe7db0983ea7bf88e5", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -165,6 +165,7 @@ static bool cris_function_value_regno_p (const unsigned int);\n static void cris_file_end (void);\n static unsigned int cris_hard_regno_nregs (unsigned int, machine_mode);\n static bool cris_hard_regno_mode_ok (unsigned int, machine_mode);\n+static HOST_WIDE_INT cris_static_rtx_alignment (machine_mode);\n static HOST_WIDE_INT cris_constant_alignment (const_tree, HOST_WIDE_INT);\n \n /* This is the parsed result of the \"-max-stack-stackframe=\" option.  If\n@@ -288,6 +289,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_HARD_REGNO_MODE_OK\n #define TARGET_HARD_REGNO_MODE_OK cris_hard_regno_mode_ok\n \n+#undef TARGET_STATIC_RTX_ALIGNMENT\n+#define TARGET_STATIC_RTX_ALIGNMENT cris_static_rtx_alignment\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT cris_constant_alignment\n \n@@ -4329,6 +4332,26 @@ cris_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t      || (regno != CRIS_MOF_REGNUM && regno != CRIS_ACR_REGNUM)));\n }\n \n+/* Return the preferred minimum alignment for a static object.  */\n+\n+static HOST_WIDE_INT\n+cris_preferred_mininum_alignment (void)\n+{\n+  if (!TARGET_CONST_ALIGN)\n+    return 8;\n+  if (TARGET_ALIGN_BY_32)\n+    return 32;\n+  return 16;\n+}\n+\n+/* Implement TARGET_STATIC_RTX_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+cris_static_rtx_alignment (machine_mode mode)\n+{\n+  return MAX (cris_preferred_mininum_alignment (), GET_MODE_ALIGNMENT (mode));\n+}\n+\n /* Implement TARGET_CONSTANT_ALIGNMENT.  Note that this hook has the\n    effect of making gcc believe that ALL references to constant stuff\n    (in code segment, like strings) have this alignment.  That is a rather\n@@ -4339,11 +4362,7 @@ cris_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n static HOST_WIDE_INT\n cris_constant_alignment (const_tree, HOST_WIDE_INT basic_align)\n {\n-  if (!TARGET_CONST_ALIGN)\n-    return basic_align;\n-  if (TARGET_ALIGN_BY_32)\n-    return MAX (basic_align, 32);\n-  return MAX (basic_align, 16);\n+  return MAX (cris_preferred_mininum_alignment (), basic_align);\n }\n \n #if 0"}, {"sha": "1facf121987c9d8b21cdf4a513ecfe66be4c9060", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -28741,6 +28741,18 @@ ix86_sched_init_global (FILE *, int, int)\n }\n \n \f\n+/* Implement TARGET_STATIC_RTX_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+ix86_static_rtx_alignment (machine_mode mode)\n+{\n+  if (mode == DFmode)\n+    return 64;\n+  if (ALIGN_MODE_128 (mode))\n+    return MAX (128, GET_MODE_ALIGNMENT (mode));\n+  return GET_MODE_ALIGNMENT (mode);\n+}\n+\n /* Implement TARGET_CONSTANT_ALIGNMENT.  */\n \n static HOST_WIDE_INT\n@@ -28749,10 +28761,9 @@ ix86_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   if (TREE_CODE (exp) == REAL_CST || TREE_CODE (exp) == VECTOR_CST\n       || TREE_CODE (exp) == INTEGER_CST)\n     {\n-      if (TYPE_MODE (TREE_TYPE (exp)) == DFmode && align < 64)\n-\treturn 64;\n-      else if (ALIGN_MODE_128 (TYPE_MODE (TREE_TYPE (exp))) && align < 128)\n-\treturn 128;\n+      machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+      HOST_WIDE_INT mode_align = ix86_static_rtx_alignment (mode);\n+      return MAX (mode_align, align);\n     }\n   else if (!optimize_size && TREE_CODE (exp) == STRING_CST\n \t   && TREE_STRING_LENGTH (exp) >= 31 && align < BITS_PER_WORD)\n@@ -50295,6 +50306,8 @@ ix86_run_selftests (void)\n #undef TARGET_CAN_CHANGE_MODE_CLASS\n #define TARGET_CAN_CHANGE_MODE_CLASS ix86_can_change_mode_class\n \n+#undef TARGET_STATIC_RTX_ALIGNMENT\n+#define TARGET_STATIC_RTX_ALIGNMENT ix86_static_rtx_alignment\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT ix86_constant_alignment\n "}, {"sha": "4a73162c18c09d20329b109b679ea49fe2a34554", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -168,6 +168,7 @@ static void mmix_print_operand (FILE *, rtx, int);\n static void mmix_print_operand_address (FILE *, machine_mode, rtx);\n static bool mmix_print_operand_punct_valid_p (unsigned char);\n static void mmix_conditional_register_usage (void);\n+static HOST_WIDE_INT mmix_static_rtx_alignment (machine_mode);\n static HOST_WIDE_INT mmix_constant_alignment (const_tree, HOST_WIDE_INT);\n static HOST_WIDE_INT mmix_starting_frame_offset (void);\n \n@@ -284,6 +285,8 @@ static HOST_WIDE_INT mmix_starting_frame_offset (void);\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mmix_option_override\n \n+#undef TARGET_STATIC_RTX_ALIGNMENT\n+#define TARGET_STATIC_RTX_ALIGNMENT mmix_static_rtx_alignment\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT mmix_constant_alignment\n \n@@ -342,6 +345,14 @@ mmix_data_alignment (tree type ATTRIBUTE_UNUSED, int basic_align)\n   return basic_align;\n }\n \n+/* Implement TARGET_STATIC_RTX_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+mmix_static_rtx_alignment (machine_mode mode)\n+{\n+  return MAX (GET_MODE_ALIGNMENT (mode), 32);\n+}\n+\n /* Implement tARGET_CONSTANT_ALIGNMENT.  */\n \n static HOST_WIDE_INT"}, {"sha": "bf21cca5157325cde8003ef2dfd9caa5085bec59", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -7196,6 +7196,18 @@ spu_truly_noop_truncation (unsigned int outprec, unsigned int inprec)\n   return inprec <= 32 && outprec <= inprec;\n }\n \n+/* Implement TARGET_STATIC_RTX_ALIGNMENT.\n+\n+   Make all static objects 16-byte aligned.  This allows us to assume\n+   they are also padded to 16 bytes, which means we can use a single\n+   load or store instruction to access them.  */\n+\n+static HOST_WIDE_INT\n+spu_static_rtx_alignment (machine_mode mode)\n+{\n+  return MAX (GET_MODE_ALIGNMENT (mode), 128);\n+}\n+\n /* Implement TARGET_CONSTANT_ALIGNMENT.\n \n    Make all static objects 16-byte aligned.  This allows us to assume\n@@ -7447,6 +7459,8 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_TRULY_NOOP_TRUNCATION\n #define TARGET_TRULY_NOOP_TRUNCATION spu_truly_noop_truncation\n \n+#undef TARGET_STATIC_RTX_ALIGNMENT\n+#define TARGET_STATIC_RTX_ALIGNMENT spu_static_rtx_alignment\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT spu_constant_alignment\n "}, {"sha": "c02f4d35116057b243e15a581e3f7618fed15e29", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -1078,6 +1078,13 @@ On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n \n+@deftypefn {Target Hook} HOST_WIDE_INT TARGET_STATIC_RTX_ALIGNMENT (machine_mode @var{mode})\n+This hook returns the preferred alignment in bits for a\n+statically-allocated rtx, such as a constant pool entry.  @var{mode}\n+is the mode of the rtx.  The default implementation returns\n+@samp{GET_MODE_ALIGNMENT (@var{mode})}.\n+@end deftypefn\n+\n @defmac DATA_ALIGNMENT (@var{type}, @var{basic-align})\n If defined, a C expression to compute the alignment for a variable in\n the static store.  @var{type} is the data type, and @var{basic-align} is"}, {"sha": "37308e1e551e7a7d163430fdf436fd14a6610c9a", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -1026,6 +1026,8 @@ On 32-bit ELF the largest supported section alignment in bits is\n @samp{(0x80000000 * 8)}, but this is not representable on 32-bit hosts.\n @end defmac\n \n+@hook TARGET_STATIC_RTX_ALIGNMENT\n+\n @defmac DATA_ALIGNMENT (@var{type}, @var{basic-align})\n If defined, a C expression to compute the alignment for a variable in\n the static store.  @var{type} is the data type, and @var{basic-align} is"}, {"sha": "6a1cd31f2acc50ae34aace5699f72d880100e15b", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -3335,6 +3335,15 @@ HOOK_VECTOR_END (addr_space)\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\"\n \n+DEFHOOK\n+(static_rtx_alignment,\n+ \"This hook returns the preferred alignment in bits for a\\n\\\n+statically-allocated rtx, such as a constant pool entry.  @var{mode}\\n\\\n+is the mode of the rtx.  The default implementation returns\\n\\\n+@samp{GET_MODE_ALIGNMENT (@var{mode})}.\",\n+ HOST_WIDE_INT, (machine_mode mode),\n+ default_static_rtx_alignment)\n+\n DEFHOOK\n (constant_alignment,\n  \"This hook returns the alignment in bits of a constant that is being\\n\\"}, {"sha": "92ecc90d4d4deff8644be7e850b99809b727680e", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -1173,6 +1173,14 @@ tree default_mangle_decl_assembler_name (tree decl ATTRIBUTE_UNUSED,\n    return id;\n }\n \n+/* The default implementation of TARGET_STATIC_RTX_ALIGNMENT.  */\n+\n+HOST_WIDE_INT\n+default_static_rtx_alignment (machine_mode mode)\n+{\n+  return GET_MODE_ALIGNMENT (mode);\n+}\n+\n /* The default implementation of TARGET_CONSTANT_ALIGNMENT.  */\n \n HOST_WIDE_INT"}, {"sha": "f60bca257f7aad4d7f583b8d0c6fb74415b8b2e0", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -94,6 +94,7 @@ extern int default_builtin_vectorization_cost (enum vect_cost_for_stmt, tree, in\n \n extern tree default_builtin_reciprocal (tree);\n \n+extern HOST_WIDE_INT default_static_rtx_alignment (machine_mode);\n extern HOST_WIDE_INT default_constant_alignment (const_tree, HOST_WIDE_INT);\n extern HOST_WIDE_INT constant_alignment_word_strings (const_tree,\n \t\t\t\t\t\t      HOST_WIDE_INT);"}, {"sha": "a139151b2e167b5ffc108be77f3f5266a28b0059", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073de07ad00d4be604bdbaeab14786850932601/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f073de07ad00d4be604bdbaeab14786850932601", "patch": "@@ -3783,11 +3783,8 @@ force_const_mem (machine_mode mode, rtx x)\n   *slot = desc;\n \n   /* Align the location counter as required by EXP's data type.  */\n-  align = GET_MODE_ALIGNMENT (mode == VOIDmode ? word_mode : mode);\n-\n-  tree type = lang_hooks.types.type_for_mode (mode, 0);\n-  if (type != NULL_TREE)\n-    align = targetm.constant_alignment (make_tree (type, x), align);\n+  machine_mode align_mode = (mode == VOIDmode ? word_mode : mode);\n+  align = targetm.static_rtx_alignment (align_mode);\n \n   pool->offset += (align / BITS_PER_UNIT) - 1;\n   pool->offset &= ~ ((align / BITS_PER_UNIT) - 1);\n@@ -3829,7 +3826,6 @@ force_const_mem (machine_mode mode, rtx x)\n \n   /* Construct the MEM.  */\n   desc->mem = def = gen_const_mem (mode, symbol);\n-  set_mem_attributes (def, lang_hooks.types.type_for_mode (mode, 0), 1);\n   set_mem_align (def, align);\n \n   /* If we're dropping a label to the constant pool, make sure we"}]}