{"sha": "9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "node_id": "C_kwDOANBUbNoAKDlmN2YyNWJiMzVjMWJlM2U1YzhlZjkzMjVjMDNiYjAxYTJkNjY5NjM", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:50Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:25:52Z"}, "message": "libstdc++: testsuite: conditionalize symlink tests\n\nSeveral filesystem tests expect to be able to create symlinks even\nwhen !defined (_GLIBCXX_HAVE_SYMLINK), and fail predictably, reducing\nthe amount of testing of other filesystem features.\n\nThey are already skipped for mingw targets.  I've extended the\nskipping to other targets in which _GLIBCXX_HAVE_SYMLINK is undefined,\nthrough a new NO_SYMLINKS macro in testsuite_fs.h that guards\nskippable portions of tests, and dg-require-target-fs-symlinks for\ntests that would be reduced to nothing.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/util/testsuite_fs.h (NO_SYMLINKS): Define on\n\tmingw and when create_symlink is a dummy.\n\t* testsuite/27_io/filesystem/operations/symlink_status.cc:\n\tDrop mingw xfail.\n\t(test01, test02): Don't create symlinks when NO_SYMLINKS is\n\tdefined.\n\t* testsuite/27_io/filesystem/operations/canonical.cc (test03):\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/copy.cc (test02):\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/create_directories.cc\n\t(test04): Likewise.\n\t* testsuite/27_io/filesystem/operations/create_directory.cc\n\t(test01): Likewise.\n\t* testsuite/27_io/filesystem/operations/permissions.cc\n\t(test03, test04): Likewise.\n\t* testsuite/27_io/filesystem/operations/remove.cc (test01):\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc (test01):\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/rename.cc\n\t(test_symlinks): Likewise.\n\t* testsuite/27_io/filesystem/operations/weakly_canonical.cc\n\t(test01): Likewise.\n\t* testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc\n\t(test06): Likewise.\n\t* testsuite/experimental/filesystem/operations/copy.cc\n\t(test01): Likewise.\n\t* testsuite/experimental/filesystem/operations/create_directories.cc\n\t(test04): Likewise.\n\t* testsuite/experimental/filesystem/operations/create_directory.cc\n\t(test01): Likewise.\n\t* testsuite/experimental/filesystem/operations/permissions.cc\n\t(test03, test04): Likewise.\n\t* testsuite/experimental/filesystem/operations/remove.cc\n\t(test01): Likewise.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc\n\t(test01): Likewise.\n\t* testsuite/experimental/filesystem/operations/rename.cc\n\t(test01): Likewise.\n\t* testsuite/lib/libstdc++.exp\n\t(v3_check_preprocessor_condition): Add optional inc parameter.\n\tAdd it to the test program after include bits/c++config.h.\n\t(check_v3_target_fs_symlinks): New.\n\t* testsuite/lib/dg-options.exp\n\t(dg-require-target-fs-symlinks): New.\n\t* testsuite/27_io/filesystem/operations/read_symlink.cc:\n\tReplace mingw xfail with require target-fs-symlinks.\n\t* testsuite/experimental/filesystem/operations/read_symlink.cc:\n\tLikewise.", "tree": {"sha": "e41c5974724bf712f613ae03f716a1452a055c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e41c5974724bf712f613ae03f716a1452a055c5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/comments", "author": null, "committer": null, "parents": [{"sha": "fc2fb4fd547fb39d76237a3a1a50f5c4f3646936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2fb4fd547fb39d76237a3a1a50f5c4f3646936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2fb4fd547fb39d76237a3a1a50f5c4f3646936"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "9c432b25acfb63b5c8a51bbccb38054027f3d262", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/canonical.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -111,9 +111,12 @@ test03()\n   fs::path foo = dir/\"foo\", bar = dir/\"bar\";\n   fs::create_directory(foo);\n   fs::create_directory(bar);\n+#ifdef NO_SYMLINKS\n #if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n   const fs::path baz = dir/\"foo\\\\\\\\..\\\\bar///\";\n+#else\n+  const fs::path baz = dir/\"foo//../bar///\";\n+#endif\n #else\n   fs::create_symlink(\"../bar\", foo/\"baz\");\n   const fs::path baz = dir/\"foo//./baz///\";"}, {"sha": "f9fb4dff77ecdcedb3af218ef333f7c17c41786d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -66,11 +66,7 @@ test01()\n void\n test02()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-  return;\n-#endif\n-\n+#ifndef NO_SYMLINKS\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n   auto from = __gnu_test::nonexistent_path();\n   std::error_code ec;\n@@ -110,6 +106,7 @@ test02()\n \n   remove(from, ec);\n   remove(to, ec);\n+#endif\n }\n \n // Test is_regular_file(f) case."}, {"sha": "2b48c152e39a9a4a077f6a9b234412f80e10bd37", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directories.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -148,9 +148,7 @@ test03()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no symlinks\n-#else\n+#ifndef NO_SYMLINKS\n   // PR libstdc++/101510\n   // create_directories reports an error if the path is a symlink to a dir\n   std::error_code ec = make_error_code(std::errc::invalid_argument);"}, {"sha": "aa59f7f3ee22db50ec6b1b66191a69f72db7339b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directory.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -70,9 +70,7 @@ test01()\n     VERIFY( e.path1() == f );\n   }\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no symlinks\n-#else\n+#ifndef NO_SYMLINKS\n   // PR libstdc++/101510 create_directory on an existing symlink to a directory\n   fs::create_directory(p/\"dir\");\n   auto link = p/\"link\";"}, {"sha": "ee5afd529bac4bdc8566f89c1171b152a4779b1d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/permissions.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -76,6 +76,7 @@ test02()\n void\n test03()\n {\n+#ifndef NO_SYMLINKS\n   using std::filesystem::perms;\n   using std::filesystem::perm_options;\n \n@@ -111,11 +112,13 @@ test03()\n     VERIFY( !caught );\n \n   remove(p);\n+#endif\n }\n \n void\n test04()\n {\n+#ifndef NO_SYMLINKS\n   using perms = std::filesystem::perms;\n \n   auto p = __gnu_test::nonexistent_path();\n@@ -137,6 +140,7 @@ test04()\n   VERIFY( ec == ec2 );\n \n   remove(p);\n+#endif\n }\n \n void"}, {"sha": "030d6271de525ae8eb1732045e76919b6ca11bff", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -17,7 +17,7 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n-// { dg-xfail-if \"symlinks not supported\" { *-*-mingw* } }\n+// { dg-require-target-fs-symlinks \"\" }\n \n #include <filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "f769723ae30fa129ad4f8033fa5d32d22ffdee0f", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -41,9 +41,7 @@ test01()\n   VERIFY( !ec );\n   VERIFY( !n );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;"}, {"sha": "d5266a4644913e07a0335578264e22a7ef5d2ed2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -41,9 +41,7 @@ test01()\n   VERIFY( !ec );\n   VERIFY( n == 0 );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;"}, {"sha": "b74e1133a76181043710bb0fa73ad4582e8f2af8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/rename.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frename.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -75,9 +75,7 @@ test01()\n void\n test_symlinks()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   std::error_code ec;\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n "}, {"sha": "e00e4aaa78e77d669b73224fb12aff84da27b9b3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/symlink_status.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n-// { dg-xfail-if \"symlinks not supported\" { *-*-mingw* } }\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n@@ -39,6 +38,7 @@ test01()\n   fs::file_status st2 = fs::symlink_status(dot);\n   VERIFY( st2.type() == fs::file_type::directory );\n \n+#ifndef NO_SYMLINKS\n   fs::path link = __gnu_test::nonexistent_path();\n   create_directory_symlink(dot, link);\n   __gnu_test::scoped_file l(link, __gnu_test::scoped_file::adopt_file);\n@@ -49,6 +49,7 @@ test01()\n   st2 = fs::symlink_status(link, ec);\n   VERIFY( !ec );\n   VERIFY( st2.type() == fs::file_type::symlink );\n+#endif\n }\n \n void\n@@ -68,6 +69,7 @@ test02()\n void\n test03()\n {\n+#ifndef NO_SYMLINKS\n   if (!__gnu_test::permissions_are_testable())\n     return;\n \n@@ -111,6 +113,7 @@ test03()\n   VERIFY( st2.type() == fs::file_type::symlink );\n \n   fs::permissions(dir, fs::perms::owner_all, ec);\n+#endif\n }\n \n void"}, {"sha": "ad164f52809f6a4b7079c5687d8808f8cbae95ae", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/weakly_canonical.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -39,9 +39,7 @@ test01()\n   fs::create_directory(bar/\"baz\");\n   fs::path p;\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   fs::create_symlink(\"../bar\", foo/\"bar\");\n \n   p = fs::weakly_canonical(dir/\"foo//./bar///../biz/.\");"}, {"sha": "393fb315593692689a5c72a9cbdd7f7e6e319310", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -188,7 +188,7 @@ test05()\n void\n test06()\n {\n-#if !(defined __MINGW32__ || defined __MINGW64__)\n+#ifndef NO_SYMLINKS\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"d1/d2\");\n   create_directory_symlink(\"d1\", p/\"link\");"}, {"sha": "021897cfede6e55c4895dc042cddca82b03021e8", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -67,11 +67,7 @@ test01()\n void\n test02()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-  return;\n-#endif\n-\n+#ifndef NO_SYMLINKS\n   auto from = __gnu_test::nonexistent_path();\n   std::error_code ec, bad = std::make_error_code(std::errc::invalid_argument);\n \n@@ -109,6 +105,7 @@ test02()\n \n   remove(from, ec);\n   remove(to, ec);\n+#endif\n }\n \n // Test is_regular_file(f) case."}, {"sha": "df27748ff99a36eaf0cef30236abd557072cf92c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/create_directories.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -147,9 +147,7 @@ test03()\n void\n test04()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no symlinks\n-#else\n+#ifndef NO_SYMLINKS\n   // PR libstdc++/101510\n   // create_directories reports an error if the path is a symlink to a dir\n   std::error_code ec = make_error_code(std::errc::invalid_argument);"}, {"sha": "5e9346d5c73e5dc1690ab617a6c2e14083a1f69d", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/create_directory.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directory.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -69,9 +69,7 @@ test01()\n     VERIFY( e.path1() == f );\n   }\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // no symlinks\n-#else\n+#ifndef NO_SYMLINKS\n   // PR libstdc++/101510 create_directory on an existing symlink to a directory\n   fs::create_directory(p/\"dir\");\n   auto link = p/\"link\";"}, {"sha": "5866e334d7b460dde5cbb106b95dce1b8002b199", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/permissions.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fpermissions.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -72,6 +72,7 @@ test02()\n void\n test03()\n {\n+#ifndef NO_SYMLINKS\n   using perms = std::experimental::filesystem::perms;\n \n   __gnu_test::scoped_file f;\n@@ -95,11 +96,13 @@ test03()\n   VERIFY( ec == ec2 );\n \n   remove(p);\n+#endif\n }\n \n void\n test04()\n {\n+#ifndef NO_SYMLINKS\n   using perms = std::experimental::filesystem::perms;\n \n   auto p = __gnu_test::nonexistent_path();\n@@ -120,6 +123,7 @@ test04()\n   VERIFY( ec == ec2 );\n \n   remove(p);\n+#endif\n }\n \n void"}, {"sha": "d0a90976a71155c32bc9f15bb34a1d07bd6e7975", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -18,7 +18,7 @@\n // { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n // { dg-do run { target c++11 } }\n // { dg-require-filesystem-ts \"\" }\n-// { dg-xfail-if \"symlinks not supported\" { *-*-mingw* } }\n+// { dg-require-target-fs-symlinks \"\" }\n \n #include <experimental/filesystem>\n #include <testsuite_hooks.h>"}, {"sha": "4ffc74093b8a03a19df8f507da8c0da86f0fe92b", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -42,10 +42,7 @@ test01()\n   VERIFY( !ec );\n   VERIFY( !n );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-  return;\n-#else\n+#ifndef NO_SYMLINKS\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;"}, {"sha": "11c07d4f781e975ed2b66c38bf8dd3caa2b73bae", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -42,9 +42,7 @@ test01()\n   VERIFY( !ec );\n   VERIFY( n == 0 );\n \n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   auto link = __gnu_test::nonexistent_path();\n   create_symlink(p, link);  // dangling symlink\n   ec = bad_ec;"}, {"sha": "37e743b770fdf45d8f7d69fcb07bb852b5fa70ee", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/rename.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Frename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Frename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Frename.cc?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -75,9 +75,7 @@ test01()\n void\n test_symlinks()\n {\n-#if defined(__MINGW32__) || defined(__MINGW64__)\n-  // No symlink support\n-#else\n+#ifndef NO_SYMLINKS\n   std::error_code ec;\n   const std::error_code bad_ec = make_error_code(std::errc::invalid_argument);\n "}, {"sha": "e624a69460ed6d06529a3a7516dc1e32457787dd", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -241,6 +241,15 @@ proc dg-require-filesystem-ts { args } {\n     return\n }\n \n+proc dg-require-target-fs-symlinks { args } {\n+    if { ![ check_v3_target_fs_symlinks ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n proc add_options_for_no_pch { flags } {\n     # This forces any generated and possibly included PCH to be invalid.\n     return \"-D__GLIBCXX__=99999999\""}, {"sha": "03f47e8d77242eb034bc980da24dbcb90c6d27e0", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -974,13 +974,16 @@ proc v3_try_preprocess { name code flags } {\n }\n \n # Return 1 if COND evaluates to true in the preprocessor, 0 otherwise.\n-# The <bits/c++config.h> config header is included.\n-proc v3_check_preprocessor_condition { name cond } {\n+# The <bits/c++config.h> config header is included, and INC, if given,\n+# is pasted between it and the condition evaluation, so it can be used\n+# for additional #include's.\n+proc v3_check_preprocessor_condition { name cond { inc \"\" } } {\n     global cxxflags\n     global DEFAULT_CXXFLAGS\n \n     set code \"\n \t#include <bits/c++config.h>\n+\t$inc\n \t#if ! ($cond)\n \t#error '$cond' is false\n \t#endif\n@@ -1267,6 +1270,14 @@ proc check_v3_target_filesystem_ts { } {\n     }]\n }\n \n+# Return 1 if the libstdc++ filesystem create_symlinks implementation\n+# is not an always-failing dummy.\n+proc check_v3_target_fs_symlinks { } {\n+    set inc \"#include <testsuite_fs.h>\"\n+    set cond \"!defined NO_SYMLINKS\"\n+    return [v3_check_preprocessor_condition fs_symlinks $cond $inc]\n+}\n+\n # Return 1 if the \"cxx11\" ABI is in use using the current flags, 0 otherwise.\n # Any flags provided by RUNTESTFLAGS or a target board will be used here.\n # Flags added in the test by dg-options or dg-add-options will not be used."}, {"sha": "03af7ae96e31af9b845d0e0153571dc07aebf21e", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "patch": "@@ -42,6 +42,10 @@ namespace test_fs = std::experimental::filesystem;\n #include <random>   // std::random_device\n #endif\n \n+#ifndef _GLIBCXX_HAVE_SYMLINK\n+#define NO_SYMLINKS\n+#endif\n+\n namespace __gnu_test\n {\n #define PATH_CHK(p1, p2, fn) \\"}]}