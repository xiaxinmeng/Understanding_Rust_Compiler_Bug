{"sha": "7a391e42e75bb13e036d521be84714a5ced2a4c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzOTFlNDJlNzViYjEzZTAzNmQ1MjFiZTg0NzE0YTVjZWQyYTRjNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-05-22T10:23:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T10:23:39Z"}, "message": "sem_prag.adb (Analyze_Pragma): Remove the detection of a useless Part_Of indicator when...\n\n2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Remove the detection\n\tof a useless Part_Of indicator when the related item is a constant.\n\t(Check_Matching_Constituent): Do not emit an error on a constant.\n\t(Check_Missing_Part_Of): Do not check for a missing Part_Of indicator\n\twhen the related item is a constant.\n\t(Collect_Body_States): Code cleanup.\n\t(Collect_Visible_States): Code cleanup.\n\t(Report_Unused_States): Do not emit an error on a constant.\n\t* sem_util.ads, sem_util.adb (Has_Variable_Input): Removed.\n\nFrom-SVN: r223535", "tree": {"sha": "7e4787c5fd3103cf5d56f439f5221cbf05b16ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4787c5fd3103cf5d56f439f5221cbf05b16ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a391e42e75bb13e036d521be84714a5ced2a4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a391e42e75bb13e036d521be84714a5ced2a4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a391e42e75bb13e036d521be84714a5ced2a4c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a391e42e75bb13e036d521be84714a5ced2a4c4/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2cfccb1cf1ea317efe9f061394fd1586a0866df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cfccb1cf1ea317efe9f061394fd1586a0866df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cfccb1cf1ea317efe9f061394fd1586a0866df"}], "stats": {"total": 142, "additions": 63, "deletions": 79}, "files": [{"sha": "a2dfb2879c89cf3acbb834ac7439cc062f879eed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a391e42e75bb13e036d521be84714a5ced2a4c4", "patch": "@@ -1,3 +1,15 @@\n+2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove the detection\n+\tof a useless Part_Of indicator when the related item is a constant.\n+\t(Check_Matching_Constituent): Do not emit an error on a constant.\n+\t(Check_Missing_Part_Of): Do not check for a missing Part_Of indicator\n+\twhen the related item is a constant.\n+\t(Collect_Body_States): Code cleanup.\n+\t(Collect_Visible_States): Code cleanup.\n+\t(Report_Unused_States): Do not emit an error on a constant.\n+\t* sem_util.ads, sem_util.adb (Has_Variable_Input): Removed.\n+\n 2015-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Object_Renaming): Copy"}, {"sha": "6d4ef450160f031e269114d542678db3f43c14f9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 51, "deletions": 60, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7a391e42e75bb13e036d521be84714a5ced2a4c4", "patch": "@@ -17555,20 +17555,6 @@ package body Sem_Prag is\n                Legal   => Legal);\n \n             if Legal then\n-\n-               --  Constants without \"variable input\" are not considered part\n-               --  of the hidden state of a package (SPARK RM 7.1.1(2)). As a\n-               --  result such constants do not require a Part_Of indicator.\n-\n-               if Ekind (Item_Id) = E_Constant\n-                 and then not Has_Variable_Input (Item_Id)\n-               then\n-                  SPARK_Msg_NE\n-                    (\"useless Part_Of indicator, constant & does not have \"\n-                     & \"variable input\", N, Item_Id);\n-                  return;\n-               end if;\n-\n                State_Id := Entity (State);\n \n                --  The Part_Of indicator turns an object into a constituent of\n@@ -23983,14 +23969,25 @@ package body Sem_Prag is\n                      end loop;\n                   end if;\n \n+                  --  Constants are part of the hidden state of a package, but\n+                  --  the compiler cannot determine whether they have variable\n+                  --  input (SPARK RM 7.1.1(2)) and cannot classify them as a\n+                  --  hidden state. Accept the constant quietly even if it is\n+                  --  a visible state or lacks a Part_Of indicator.\n+\n+                  if Ekind (Constit_Id) = E_Constant then\n+                     null;\n+\n                   --  If we get here, then the constituent is not a hidden\n                   --  state of the related package and may not be used in a\n                   --  refinement (SPARK RM 7.2.2(9)).\n \n-                  Error_Msg_Name_1 := Chars (Spec_Id);\n-                  SPARK_Msg_NE\n-                    (\"cannot use & in refinement, constituent is not a hidden \"\n-                     & \"state of package %\", Constit, Constit_Id);\n+                  else\n+                     Error_Msg_Name_1 := Chars (Spec_Id);\n+                     SPARK_Msg_NE\n+                       (\"cannot use & in refinement, constituent is not a \"\n+                        & \"hidden state of package %\", Constit, Constit_Id);\n+                  end if;\n                end if;\n             end Check_Matching_Constituent;\n \n@@ -24434,7 +24431,6 @@ package body Sem_Prag is\n          ----------------------------\n \n          procedure Collect_Visible_States (Pack_Id : Entity_Id) is\n-            Decl    : Node_Id;\n             Item_Id : Entity_Id;\n \n          begin\n@@ -24453,27 +24449,15 @@ package body Sem_Prag is\n                elsif Ekind (Item_Id) = E_Abstract_State then\n                   Add_Item (Item_Id, Result);\n \n-               elsif Ekind_In (Item_Id, E_Constant, E_Variable) then\n-                  Decl := Declaration_Node (Item_Id);\n-\n-                  --  Do not consider constants or variables that map generic\n-                  --  formals to their actuals as the formals cannot be named\n-                  --  from the outside and participate in refinement.\n-\n-                  if Present (Corresponding_Generic_Association (Decl)) then\n-                     null;\n-\n-                  --  Constants without \"variable input\" are not considered a\n-                  --  hidden state of a package (SPARK RM 7.1.1(2)).\n-\n-                  elsif Ekind (Item_Id) = E_Constant\n-                    and then not Has_Variable_Input (Item_Id)\n-                  then\n-                     null;\n+               --  Do not consider constants or variables that map generic\n+               --  formals to their actuals, as the formals cannot be named\n+               --  from the outside and participate in refinement.\n \n-                  else\n-                     Add_Item (Item_Id, Result);\n-                  end if;\n+               elsif Ekind_In (Item_Id, E_Constant, E_Variable)\n+                 and then No (Corresponding_Generic_Association\n+                                (Declaration_Node (Item_Id)))\n+               then\n+                  Add_Item (Item_Id, Result);\n \n                --  Recursively gather the visible states of a nested package\n \n@@ -24562,31 +24546,39 @@ package body Sem_Prag is\n             while Present (State_Elmt) loop\n                State_Id := Node (State_Elmt);\n \n+               --  Constants are part of the hidden state of a package, but the\n+               --  compiler cannot determine whether they have variable input\n+               --  (SPARK RM 7.1.1(2)) and cannot classify them properly as a\n+               --  hidden state. Do not emit an error when a constant does not\n+               --  participate in a state refinement, even though it acts as a\n+               --  hidden state.\n+\n+               if Ekind (State_Id) = E_Constant then\n+                  null;\n+\n                --  Generate an error message of the form:\n \n                --    body of package ... has unused hidden states\n                --      abstract state ... defined at ...\n-               --      constant ... defined at ...\n                --      variable ... defined at ...\n \n-               if not Posted then\n-                  Posted := True;\n-                  SPARK_Msg_N\n-                    (\"body of package & has unused hidden states\", Body_Id);\n-               end if;\n-\n-               Error_Msg_Sloc := Sloc (State_Id);\n+               else\n+                  if not Posted then\n+                     Posted := True;\n+                     SPARK_Msg_N\n+                       (\"body of package & has unused hidden states\", Body_Id);\n+                  end if;\n \n-               if Ekind (State_Id) = E_Abstract_State then\n-                  SPARK_Msg_NE\n-                    (\"\\abstract state & defined #\", Body_Id, State_Id);\n+                  Error_Msg_Sloc := Sloc (State_Id);\n \n-               elsif Ekind (State_Id) = E_Constant then\n-                  SPARK_Msg_NE (\"\\constant & defined #\", Body_Id, State_Id);\n+                  if Ekind (State_Id) = E_Abstract_State then\n+                     SPARK_Msg_NE\n+                       (\"\\abstract state & defined #\", Body_Id, State_Id);\n \n-               else\n-                  pragma Assert (Ekind (State_Id) = E_Variable);\n-                  SPARK_Msg_NE (\"\\variable & defined #\", Body_Id, State_Id);\n+                  else\n+                     pragma Assert (Ekind (State_Id) = E_Variable);\n+                     SPARK_Msg_NE (\"\\variable & defined #\", Body_Id, State_Id);\n+                  end if;\n                end if;\n \n                Next_Elmt (State_Elmt);\n@@ -25017,12 +25009,11 @@ package body Sem_Prag is\n       elsif SPARK_Mode /= On then\n          return;\n \n-      --  Do not consider constants without variable input because those are\n-      --  not part of the hidden state of a package (SPARK RM 7.1.1(2)).\n+      --  Do not consider constants, because the compiler cannot accurately\n+      --  determine whether they have variable input (SPARK RM 7.1.1(2)) and\n+      --  act as a hidden state of a package.\n \n-      elsif Ekind (Item_Id) = E_Constant\n-        and then not Has_Variable_Input (Item_Id)\n-      then\n+      elsif Ekind (Item_Id) = E_Constant then\n          return;\n       end if;\n "}, {"sha": "716c2d84c3ea8bbb60f4f0d33e3eb132ba9e84db", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7a391e42e75bb13e036d521be84714a5ced2a4c4", "patch": "@@ -9317,17 +9317,6 @@ package body Sem_Util is\n       end if;\n    end Has_Tagged_Component;\n \n-   ------------------------\n-   -- Has_Variable_Input --\n-   ------------------------\n-\n-   function Has_Variable_Input (Const_Id : Entity_Id) return Boolean is\n-      Expr : constant Node_Id := Expression (Declaration_Node (Const_Id));\n-   begin\n-      return\n-        Present (Expr) and then not Compile_Time_Known_Value_Or_Aggr (Expr);\n-   end Has_Variable_Input;\n-\n    ----------------------------\n    -- Has_Volatile_Component --\n    ----------------------------"}, {"sha": "910b282d4d4e8f7769c2331dcc5408bd1f851a8a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a391e42e75bb13e036d521be84714a5ced2a4c4/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7a391e42e75bb13e036d521be84714a5ced2a4c4", "patch": "@@ -1046,14 +1046,6 @@ package Sem_Util is\n    --  component is present. This function is used to check if \"=\" has to be\n    --  expanded into a bunch component comparisons.\n \n-   function Has_Variable_Input (Const_Id : Entity_Id) return Boolean;\n-   --  Determine whether the initialization expression of constant Const_Id has\n-   --  \"variable input\" (SPARK RM 7.1.1(2)). This roughly maps to the semantic\n-   --  concept of a compile-time known value.\n-   --  How can a defined concept in SPARK mapped to an undefined predicate in\n-   --  the compiler (which can change at any moment if the compiler feels like\n-   --  getting more clever about what is compile-time known) ???\n-\n    function Has_Volatile_Component (Typ : Entity_Id) return Boolean;\n    --  Given an arbitrary type, determine whether it contains at least one\n    --  volatile component."}]}