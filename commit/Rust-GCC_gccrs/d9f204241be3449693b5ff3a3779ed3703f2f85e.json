{"sha": "d9f204241be3449693b5ff3a3779ed3703f2f85e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmMjA0MjQxYmUzNDQ5NjkzYjVmZjNhMzc3OWVkMzcwM2YyZjg1ZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-08-14T17:54:23Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-08-14T17:54:23Z"}, "message": "cse.c (insert_regs): Also in REG case...\n\n\t* cse.c (insert_regs): Also in REG case: When finding an invalid\n\tvalue, and we make a new quantity, make sure that it won't be\n\tmistaken by for a valid one by mention_regs.\n\nFrom-SVN: r35679", "tree": {"sha": "3c2d1a8e00a88cc50366722ec7f395faf90ed355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c2d1a8e00a88cc50366722ec7f395faf90ed355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f204241be3449693b5ff3a3779ed3703f2f85e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f204241be3449693b5ff3a3779ed3703f2f85e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f204241be3449693b5ff3a3779ed3703f2f85e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f204241be3449693b5ff3a3779ed3703f2f85e/comments", "author": null, "committer": null, "parents": [{"sha": "c8fa6556c1071cac32c06c4f8085717cf2937675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fa6556c1071cac32c06c4f8085717cf2937675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8fa6556c1071cac32c06c4f8085717cf2937675"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "c0cab5b93a6b38cf2bdc711a4086f1e41d20bef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f204241be3449693b5ff3a3779ed3703f2f85e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f204241be3449693b5ff3a3779ed3703f2f85e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9f204241be3449693b5ff3a3779ed3703f2f85e", "patch": "@@ -1,3 +1,9 @@\n+Mon Aug 14 18:51:44 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* cse.c (insert_regs): Also in REG case: When finding an invalid\n+\tvalue, and we make a new quantity, make sure that it won't be\n+\tmistaken by for a valid one by mention_regs.\n+\n 2000-08-13  Ralf G\ufffdtlein <ralf.guetlein@aranea.de>\n \n \t* h8300.md: Remove obsolete peepholes."}, {"sha": "cd220b78202c38f407582d7cdb29ce1082daf6f3", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f204241be3449693b5ff3a3779ed3703f2f85e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f204241be3449693b5ff3a3779ed3703f2f85e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d9f204241be3449693b5ff3a3779ed3703f2f85e", "patch": "@@ -1244,6 +1244,19 @@ insert_regs (x, classp, modified)\n \t\t  return 1;\n \t\t}\n \n+\t  /* Mention_regs for a SUBREG checks if REG_TICK is exactly one larger\n+\t     than REG_IN_TABLE to find out if there was only a single preceding\n+\t     invalidation - for the SUBREG - or another one, which would be\n+\t     for the full register.  However, if we find here that REG_TICK\n+\t     indicates that the register is invalid, it means that it has\n+\t     been invalidated in a separate operation.  The SUBREG might be used\n+\t     now (then this is a recursive call), or we might use the full REG\n+\t     now and a SUBREG of it later.  So bump up REG_TICK so that\n+\t     mention_regs will do the right thing.  */\n+\t  if (! modified\n+\t      && REG_IN_TABLE (regno) >= 0\n+\t      && REG_TICK (regno) == REG_IN_TABLE (regno) + 1)\n+\t    REG_TICK (regno)++;\n \t  make_new_qty (regno, GET_MODE (x));\n \t  return 1;\n \t}\n@@ -1263,15 +1276,6 @@ insert_regs (x, classp, modified)\n       unsigned int regno = REGNO (SUBREG_REG (x));\n \n       insert_regs (SUBREG_REG (x), NULL_PTR, 0);\n-      /* Mention_regs checks if REG_TICK is exactly one larger than\n-\t REG_IN_TABLE to find out if there was only a single preceding\n-\t invalidation - for the SUBREG - or another one, which would be\n-\t for the full register.  Since we don't invalidate the SUBREG\n-\t here first, we might have to bump up REG_TICK so that mention_regs\n-\t will do the right thing.  */\n-      if (REG_IN_TABLE (regno) >= 0\n-\t  && REG_TICK (regno) == REG_IN_TABLE (regno) + 1)\n-\tREG_TICK (regno)++;\n       mention_regs (x);\n       return 1;\n     }"}]}