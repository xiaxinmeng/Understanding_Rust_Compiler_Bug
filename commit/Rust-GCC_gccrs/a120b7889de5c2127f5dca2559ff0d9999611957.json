{"sha": "a120b7889de5c2127f5dca2559ff0d9999611957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEyMGI3ODg5ZGU1YzIxMjdmNWRjYTI1NTlmZjBkOTk5OTYxMTk1Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-12T19:08:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-12T19:08:12Z"}, "message": "(yylex): If integer value overflows so highword is negative,\n\nit needs unsigned long long.\n\nFrom-SVN: r2111", "tree": {"sha": "904aaf42c8c648ca3d670e4af613c38349fd7f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904aaf42c8c648ca3d670e4af613c38349fd7f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a120b7889de5c2127f5dca2559ff0d9999611957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a120b7889de5c2127f5dca2559ff0d9999611957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a120b7889de5c2127f5dca2559ff0d9999611957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a120b7889de5c2127f5dca2559ff0d9999611957/comments", "author": null, "committer": null, "parents": [{"sha": "9bd23d2c954318dfe201afc37c9dbca98856040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd23d2c954318dfe201afc37c9dbca98856040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd23d2c954318dfe201afc37c9dbca98856040b"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "629e93b015f02cddd81249b0b1b63f034d15c764", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a120b7889de5c2127f5dca2559ff0d9999611957/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a120b7889de5c2127f5dca2559ff0d9999611957/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=a120b7889de5c2127f5dca2559ff0d9999611957", "patch": "@@ -1558,6 +1558,8 @@ yylex ()\n \t\telse if (! spec_long_long)\n \t\t  ansi_type = long_unsigned_type_node;\n \t\telse if (! spec_unsigned\n+\t\t\t /* Verify value does not overflow into sign bit.  */\n+\t\t\t && TREE_INT_CST_HIGH (yylval.ttype) >= 0\n \t\t\t && int_fits_type_p (yylval.ttype,\n \t\t\t\t\t     long_long_integer_type_node))\n \t\t  ansi_type = long_long_integer_type_node;"}]}