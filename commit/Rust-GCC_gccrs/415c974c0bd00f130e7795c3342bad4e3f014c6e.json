{"sha": "415c974c0bd00f130e7795c3342bad4e3f014c6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1Yzk3NGMwYmQwMGYxMzBlNzc5NWMzMzQyYmFkNGUzZjAxNGM2ZQ==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-06-02T21:12:54Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-06-02T21:12:54Z"}, "message": "When a class template is explicitly instantiated, its member should be too.\n\n\t* cp-tree.h (instantiate_decl): new boolean parameter,\n\tundefined_ok. Current behavior is equivalent to its being 0.\n\t* decl2.c (mark_used): Add new argument when calling instantiate_decl\n\t* pt.c (mark_decl_instantiated): Unconditionally make\n\tinstantiations explicit unconditionally\n\t(do_decl_instantiation): Don't call SET_DECL_EXPLICIT_INSTANTIATION,\n\tsince mark_decl_instantiated now does it.\n\t(instantiate_class_member): New.  Instantiate a member of an\n\texplicitly instantiated class template.\n\t(do_type_instantiation): Explicitly instantiate members of an\n\texplicitly instantiated class template.\n\t(instantiate_decl): if undefined_ok is nonzero, and if we're\n\ttrying to explicitly instantiated a template with no definition,\n\tchange it to an implicit instantiation.\n\t(instantiate_pending_templates): Add new argument to instantiate_decl.\n\t* tree.c (cp_cannot_inline_tree_fn): Likewise.\n\nFrom-SVN: r82585", "tree": {"sha": "3b859606ef88c37bd6602afa96859aa9f1f0cfbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b859606ef88c37bd6602afa96859aa9f1f0cfbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/415c974c0bd00f130e7795c3342bad4e3f014c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415c974c0bd00f130e7795c3342bad4e3f014c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415c974c0bd00f130e7795c3342bad4e3f014c6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415c974c0bd00f130e7795c3342bad4e3f014c6e/comments", "author": null, "committer": null, "parents": [{"sha": "b53dcf3e5c67b345b6dea948cd3a9f4b31ec39a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53dcf3e5c67b345b6dea948cd3a9f4b31ec39a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53dcf3e5c67b345b6dea948cd3a9f4b31ec39a8"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "4eb93dcbcc6843b0b4c8c4837cc128e0f98e790a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=415c974c0bd00f130e7795c3342bad4e3f014c6e", "patch": "@@ -1,3 +1,22 @@\n+2004-06-02  Matt Austern  <austern@apple.com>\n+\n+\t* cp-tree.h (instantiate_decl): new boolean parameter,\n+\tundefined_ok. Current behavior is equivalent to its being 0.\n+\t* decl2.c (mark_used): Add new argument when calling instantiate_decl\n+\t* pt.c (mark_decl_instantiated): Unconditionally make\n+\tinstantiations explicit unconditionally\n+\t(do_decl_instantiation): Don't call SET_DECL_EXPLICIT_INSTANTIATION,\n+\tsince mark_decl_instantiated now does it.\n+\t(instantiate_class_member): New.  Instantiate a member of an\n+\texplicitly instantiated class template.\n+\t(do_type_instantiation): Explicitly instantiate members of an\n+\texplicitly instantiated class template.\n+\t(instantiate_decl): if undefined_ok is nonzero, and if we're\n+\ttrying to explicitly instantiated a template with no definition,\n+\tchange it to an implicit instantiation.\n+\t(instantiate_pending_templates): Add new argument to instantiate_decl.\n+\t* tree.c (cp_cannot_inline_tree_fn): Likewise.\n+\t\n 2004-06-02  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* cp-tree.h: Fix typo."}, {"sha": "3db4ab69ddb679976e6108692055eab1951cf522", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=415c974c0bd00f130e7795c3342bad4e3f014c6e", "patch": "@@ -3889,7 +3889,7 @@ extern int more_specialized\t\t\t(tree, tree, int, int);\n extern void mark_class_instantiated\t\t(tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n-extern tree instantiate_decl\t\t\t(tree, int);\n+extern tree instantiate_decl\t\t\t(tree, int, int);\n extern int push_tinst_level\t\t\t(tree);\n extern void pop_tinst_level\t\t\t(void);\n extern int more_specialized_class\t\t(tree, tree, tree);"}, {"sha": "c5c4a55a1c4546812f567973be31277415275874", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=415c974c0bd00f130e7795c3342bad4e3f014c6e", "patch": "@@ -3069,7 +3069,7 @@ mark_used (tree decl)\n \t\t  information.  */\n \t       || cp_function_chain->can_throw);\n \n-      instantiate_decl (decl, defer);\n+      instantiate_decl (decl, defer, /*undefined_ok=*/0);\n     }\n }\n "}, {"sha": "7d915dc7390ab84b7a1ce28d923cb0475ab17dd4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 50, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=415c974c0bd00f130e7795c3342bad4e3f014c6e", "patch": "@@ -10131,13 +10131,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n void\n mark_decl_instantiated (tree result, int extern_p)\n {\n-  /* We used to set this unconditionally; we moved that to\n-     do_decl_instantiation so it wouldn't get set on members of\n-     explicit class template instantiations.  But we still need to set\n-     it here for the 'extern template' case in order to suppress\n-     implicit instantiations.  */\n-  if (extern_p)\n-    SET_DECL_EXPLICIT_INSTANTIATION (result);\n+  SET_DECL_EXPLICIT_INSTANTIATION (result);\n \n   /* If this entity has already been written out, it's too late to\n      make any modifications.  */\n@@ -10641,11 +10635,10 @@ do_decl_instantiation (tree decl, tree storage)\n     error (\"storage class `%D' applied to template instantiation\",\n \t      storage);\n \n-  SET_DECL_EXPLICIT_INSTANTIATION (result);\n   mark_decl_instantiated (result, extern_p);\n   repo_template_instantiated (result, extern_p);\n   if (! extern_p)\n-    instantiate_decl (result, /*defer_ok=*/1);\n+    instantiate_decl (result, /*defer_ok=*/1, /*undefined_ok=*/0);\n }\n \n void\n@@ -10674,6 +10667,18 @@ bt_instantiate_type_proc (binding_entry entry, void *data)\n     do_type_instantiation (TYPE_MAIN_DECL (entry->type), storage, 0);\n }\n \n+/* Called from do_type_instantiation to instantiate a member\n+   (a member function or a static member variable) of an\n+   explicitly instantiated class template. */\n+static void\n+instantiate_class_member (tree decl, int extern_p)\n+{\n+  mark_decl_instantiated (decl, extern_p);\n+  repo_template_instantiated (decl, extern_p);\n+  if (! extern_p)\n+    instantiate_decl (decl, /*defer_ok=*/1, /* undefined_ok=*/1);\n+}\n+\n /* Perform an explicit instantiation of template class T.  STORAGE, if\n    non-null, is the RID for extern, inline or static.  COMPLAIN is\n    nonzero if this is called from the parser, zero if called recursively,\n@@ -10773,7 +10778,6 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \n   {\n     tree tmp;\n-    int explicitly_instantiate_members = 0;\n \n     /* In contrast to implicit instantiation, where only the\n        declarations, and not the definitions, of members are\n@@ -10789,50 +10793,18 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n        Of course, we can't instantiate member template classes, since\n        we don't have any arguments for them.  Note that the standard\n        is unclear on whether the instantiation of the members are\n-       *explicit* instantiations or not.  We choose to be generous,\n-       and not set DECL_EXPLICIT_INSTANTIATION.  Therefore, we allow\n-       the explicit instantiation of a class where some of the members\n-       have no definition in the current translation unit.  Exception:\n-       on some targets (e.g. Darwin), weak symbols do not get put in \n-       a static archive's TOC.  The problematic case is if we're doing\n-       a non-extern explicit instantiation of an extern template: we\n-       have to put member functions in the TOC in that case, or we'll\n-       get unresolved symbols at link time.  */\n-\n-    explicitly_instantiate_members =\n-      TARGET_EXPLICIT_INSTANTIATIONS_ONE_ONLY\n-      && previous_instantiation_extern_p && ! extern_p\n-      && ! TYPE_FOR_JAVA (t);\n+       *explicit* instantiations or not.  However, the most natural\n+       interpretation is that it should be an explicit instantiation. */\n \n     if (! static_p)\n       for (tmp = TYPE_METHODS (t); tmp; tmp = TREE_CHAIN (tmp))\n \tif (TREE_CODE (tmp) == FUNCTION_DECL\n \t    && DECL_TEMPLATE_INSTANTIATION (tmp))\n-\t  {\n-\t    if (explicitly_instantiate_members)\n-\t      do_decl_instantiation (tmp, NULL_TREE);\n-\t    else\n-\t      {\n-\t\tmark_decl_instantiated (tmp, extern_p);\n-\t\trepo_template_instantiated (tmp, extern_p);\n-\t\tif (! extern_p)\n-\t\t  instantiate_decl (tmp, /*defer_ok=*/1);\n-\t      }\n-\t  }\n+\t  instantiate_class_member (tmp, extern_p);\n \n     for (tmp = TYPE_FIELDS (t); tmp; tmp = TREE_CHAIN (tmp))\n       if (TREE_CODE (tmp) == VAR_DECL && DECL_TEMPLATE_INSTANTIATION (tmp))\n-\t{\n-\t  if (explicitly_instantiate_members)\n-\t    do_decl_instantiation (tmp, NULL_TREE);\n-\t  else\n-\t    {\n-\t      mark_decl_instantiated (tmp, extern_p);\n-\t      repo_template_instantiated (tmp, extern_p);\n-\t      if (! extern_p)\n-\t\tinstantiate_decl (tmp, /*defer_ok=*/1);\n-\t    }\n-\t}\n+\tinstantiate_class_member (tmp, extern_p);\n \n     if (CLASSTYPE_NESTED_UTDS (t))\n       binding_table_foreach (CLASSTYPE_NESTED_UTDS (t),\n@@ -10995,10 +10967,16 @@ template_for_substitution (tree decl)\n \n /* Produce the definition of D, a _DECL generated from a template.  If\n    DEFER_OK is nonzero, then we don't have to actually do the\n-   instantiation now; we just have to do it sometime.  */\n+   instantiation now; we just have to do it sometime.  Normally it is\n+   an error if this is an explicit instantiation but D is undefined.\n+   If UNDEFINED_OK is nonzero, then instead we treat it as an implicit\n+   instantiation.  UNDEFINED_OK is nonzero only if we are being used\n+   to instantiate the members of an explicitly instantiated class\n+   template. */\n+\n \n tree\n-instantiate_decl (tree d, int defer_ok)\n+instantiate_decl (tree d, int defer_ok, int undefined_ok)\n {\n   tree tmpl = DECL_TI_TEMPLATE (d);\n   tree gen_args;\n@@ -11105,6 +11083,9 @@ instantiate_decl (tree d, int defer_ok)\n \timport_export_decl (d);\n     }\n \n+  if (! pattern_defined && DECL_EXPLICIT_INSTANTIATION (d) && undefined_ok)\n+    SET_DECL_IMPLICIT_INSTANTIATION (d);\n+\n   if (!defer_ok)\n     {\n       /* Recheck the substitutions to obtain any warning messages\n@@ -11340,7 +11321,7 @@ instantiate_pending_templates (void)\n \t\t\t fn;\n \t\t\t fn = TREE_CHAIN (fn))\n \t\t      if (! DECL_ARTIFICIAL (fn))\n-\t\t\tinstantiate_decl (fn, /*defer_ok=*/0);\n+\t\t\tinstantiate_decl (fn, /*defer_ok=*/0, /*undefined_ok=*/0);\n \t\t  if (COMPLETE_TYPE_P (instantiation))\n \t\t    {\n \t\t      instantiated_something = 1;\n@@ -11364,7 +11345,8 @@ instantiate_pending_templates (void)\n \t\t  && !DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t{\n \t\t  instantiation = instantiate_decl (instantiation,\n-\t\t\t\t\t\t    /*defer_ok=*/0);\n+\t\t\t\t\t\t    /*defer_ok=*/0,\n+\t\t\t\t\t\t    /*undefined_ok=*/0);\n \t\t  if (DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t    {\n \t\t      instantiated_something = 1;"}, {"sha": "81db7ca6389a9b7a9c0b0e6d7ca9e05a0009a0cc", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c974c0bd00f130e7795c3342bad4e3f014c6e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=415c974c0bd00f130e7795c3342bad4e3f014c6e", "patch": "@@ -2057,7 +2057,7 @@ cp_cannot_inline_tree_fn (tree* fnp)\n \t\t\t(template_for_substitution (fn))))\n \treturn 1;\n \n-      fn = *fnp = instantiate_decl (fn, /*defer_ok=*/0);\n+      fn = *fnp = instantiate_decl (fn, /*defer_ok=*/0, /*undefined_ok=*/0);\n \n       if (TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n \treturn 1;"}]}