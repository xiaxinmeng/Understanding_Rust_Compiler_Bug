{"sha": "da4083c7815a49b4aab3e30dc8d47d45b7706b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0MDgzYzc4MTVhNDliNGFhYjNlMzBkYzhkNDdkNDViNzcwNmI2NQ==", "commit": {"author": {"name": "Craig Rodrigues", "email": "rodrigc@gcc.gnu.org", "date": "2001-11-13T03:20:58Z"}, "committer": {"name": "Craig Rodrigues", "email": "rodrigc@gcc.gnu.org", "date": "2001-11-13T03:20:58Z"}, "message": "re PR bootstrap/3451 (AIX 4.3.2 redefinition of macro)\n\n\tPR bootstrap/3451\n\t* c-pragma.c: Rename macros BAD, BAD2, BAD_ACTION to\n\tGCC_BAD, GCC_BAD2, GCC_BAD_ACTION.\n\nFrom-SVN: r46972", "tree": {"sha": "7dbf3d80d0c5ea50a645d63b7b0374596953fc01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dbf3d80d0c5ea50a645d63b7b0374596953fc01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4083c7815a49b4aab3e30dc8d47d45b7706b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4083c7815a49b4aab3e30dc8d47d45b7706b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4083c7815a49b4aab3e30dc8d47d45b7706b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4083c7815a49b4aab3e30dc8d47d45b7706b65/comments", "author": null, "committer": null, "parents": [{"sha": "f871d7bf4b6de64a8c4d6fae8ace3a0f3579fc24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f871d7bf4b6de64a8c4d6fae8ace3a0f3579fc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f871d7bf4b6de64a8c4d6fae8ace3a0f3579fc24"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "a57d9503a397f92fe0aeb78566dd7759e1937014", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4083c7815a49b4aab3e30dc8d47d45b7706b65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4083c7815a49b4aab3e30dc8d47d45b7706b65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da4083c7815a49b4aab3e30dc8d47d45b7706b65", "patch": "@@ -1,3 +1,9 @@\n+2001-11-12  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n+\n+\tPR bootstrap/3451\n+\t* c-pragma.c: Rename macros BAD, BAD2, BAD_ACTION to\n+\tGCC_BAD, GCC_BAD2, GCC_BAD_ACTION.\n+\n 2001-11-12  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config.gcc (sparc-tti-*, sparc64-wrs-vxworks*, sparc-wrs-vxworks*,"}, {"sha": "f0c2b4012e385c2770ee39b1e3a8e9bdb56d4b04", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4083c7815a49b4aab3e30dc8d47d45b7706b65/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4083c7815a49b4aab3e30dc8d47d45b7706b65/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=da4083c7815a49b4aab3e30dc8d47d45b7706b65", "patch": "@@ -33,8 +33,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"tm_p.h\"\n \n-#define BAD(msgid) do { warning (msgid); return; } while (0)\n-#define BAD2(msgid, arg) do { warning (msgid, arg); return; } while (0)\n+#define GCC_BAD(msgid) do { warning (msgid); return; } while (0)\n+#define GCC_BAD2(msgid, arg) do { warning (msgid, arg); return; } while (0)\n \n #ifdef HANDLE_PRAGMA_PACK\n static void handle_pragma_pack PARAMS ((cpp_reader *));\n@@ -159,9 +159,9 @@ mark_align_stack (p)\n #else  /* not HANDLE_PRAGMA_PACK_PUSH_POP */\n #define SET_GLOBAL_ALIGNMENT(ALIGN) (maximum_field_alignment = (ALIGN))\n #define push_alignment(ID, N) \\\n-    BAD(\"#pragma pack(push[, id], <n>) is not supported on this target\")\n+    GCC_BAD(\"#pragma pack(push[, id], <n>) is not supported on this target\")\n #define pop_alignment(ID) \\\n-    BAD(\"#pragma pack(pop[, id], <n>) is not supported on this target\")\n+    GCC_BAD(\"#pragma pack(pop[, id], <n>) is not supported on this target\")\n #endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \n /* #pragma pack ()\n@@ -181,7 +181,7 @@ handle_pragma_pack (dummy)\n   enum { set, push, pop } action;\n \n   if (c_lex (&x) != CPP_OPEN_PAREN)\n-    BAD (\"missing '(' after '#pragma pack' - ignored\");\n+    GCC_BAD (\"missing '(' after '#pragma pack' - ignored\");\n \n   token = c_lex (&x);\n   if (token == CPP_CLOSE_PAREN)\n@@ -194,14 +194,14 @@ handle_pragma_pack (dummy)\n       align = TREE_INT_CST_LOW (x);\n       action = set;\n       if (c_lex (&x) != CPP_CLOSE_PAREN)\n-\tBAD (\"malformed '#pragma pack' - ignored\");\n+\tGCC_BAD (\"malformed '#pragma pack' - ignored\");\n     }\n   else if (token == CPP_NAME)\n     {\n-#define BAD_ACTION do { if (action == push) \\\n-\t  BAD (\"malformed '#pragma pack(push[, id], <n>)' - ignored\"); \\\n+#define GCC_BAD_ACTION do { if (action == push) \\\n+\t  GCC_BAD (\"malformed '#pragma pack(push[, id], <n>)' - ignored\"); \\\n \telse \\\n-\t  BAD (\"malformed '#pragma pack(pop[, id])' - ignored\"); \\\n+\t  GCC_BAD (\"malformed '#pragma pack(pop[, id])' - ignored\"); \\\n \t} while (0)\n \n       const char *op = IDENTIFIER_POINTER (x);\n@@ -210,11 +210,11 @@ handle_pragma_pack (dummy)\n       else if (!strcmp (op, \"pop\"))\n \taction = pop;\n       else\n-\tBAD2 (\"unknown action '%s' for '#pragma pack' - ignored\", op);\n+\tGCC_BAD2 (\"unknown action '%s' for '#pragma pack' - ignored\", op);\n \n       token = c_lex (&x);\n       if (token != CPP_COMMA && action == push)\n-\tBAD_ACTION;\n+\tGCC_BAD_ACTION;\n \n       if (token == CPP_COMMA)\n \t{\n@@ -223,7 +223,7 @@ handle_pragma_pack (dummy)\n \t    {\n \t      id = x;\n \t      if (action == push && c_lex (&x) != CPP_COMMA)\n-\t\tBAD_ACTION;\n+\t\tGCC_BAD_ACTION;\n \t      token = c_lex (&x);\n \t    }\n \n@@ -235,16 +235,16 @@ handle_pragma_pack (dummy)\n \t\t  token = c_lex (&x);\n \t\t}\n \t      else\n-\t\tBAD_ACTION;\n+\t\tGCC_BAD_ACTION;\n \t    }\n \t}\n \n       if (token != CPP_CLOSE_PAREN)\n-\tBAD_ACTION;\n-#undef BAD_ACTION\n+\tGCC_BAD_ACTION;\n+#undef GCC_BAD_ACTION\n     }\n   else\n-    BAD (\"malformed '#pragma pack' - ignored\");\n+    GCC_BAD (\"malformed '#pragma pack' - ignored\");\n \n   if (c_lex (&x) != CPP_EOF)\n     warning (\"junk at end of '#pragma pack'\");\n@@ -261,7 +261,7 @@ handle_pragma_pack (dummy)\n \talign *= BITS_PER_UNIT;\n \tbreak;\n       default:\n-\tBAD2 (\"alignment must be a small power of two, not %d\", align);\n+\tGCC_BAD2 (\"alignment must be a small power of two, not %d\", align);\n       }\n \n   switch (action)\n@@ -287,12 +287,12 @@ handle_pragma_weak (dummy)\n   value = 0;\n \n   if (c_lex (&name) != CPP_NAME)\n-    BAD (\"malformed #pragma weak, ignored\");\n+    GCC_BAD (\"malformed #pragma weak, ignored\");\n   t = c_lex (&x);\n   if (t == CPP_EQ)\n     {\n       if (c_lex (&value) != CPP_NAME)\n-\tBAD (\"malformed #pragma weak, ignored\");\n+\tGCC_BAD (\"malformed #pragma weak, ignored\");\n       t = c_lex (&x);\n     }\n   if (t != CPP_EOF)"}]}