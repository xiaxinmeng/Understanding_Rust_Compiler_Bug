{"sha": "99355534ef44f316ec2b72f4776e08cf01169715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzNTU1MzRlZjQ0ZjMxNmVjMmI3MmY0Nzc2ZTA4Y2YwMTE2OTcxNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-08T12:41:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-10T20:28:51Z"}, "message": "The type system has a function can_eq this adds a with_errors flag\n\nWith the type system we can check for equality explicitly which is useful.\nWhen it comes to TypeParameters or Placeholders can_eq allows for:\n\n  fn bla<T>() -> <T>\n  fn bla() -> i32\n\nThe type parameter can be subsituted which means the generic function can\nequal the subsituted one if it was given the right substituion arguments.\n\nThis can emit errors such as expected [X] got [Y] or we might want to\nhave silent errors so we can filter impl items such as the impl item\noverlapping pass", "tree": {"sha": "da8af10feb16cd77c081304e574d9c85b11ee19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da8af10feb16cd77c081304e574d9c85b11ee19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99355534ef44f316ec2b72f4776e08cf01169715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99355534ef44f316ec2b72f4776e08cf01169715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99355534ef44f316ec2b72f4776e08cf01169715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99355534ef44f316ec2b72f4776e08cf01169715/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3390f5602149c9f918efdd9fdc63448920da916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3390f5602149c9f918efdd9fdc63448920da916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3390f5602149c9f918efdd9fdc63448920da916"}], "stats": {"total": 572, "additions": 440, "deletions": 132}, "files": [{"sha": "cbfe1df837081e844f8d1e30f3c713b3854d1a6b", "filename": "gcc/rust/typecheck/rust-hir-inherent-impl-overlap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -145,7 +145,7 @@ class OverlappingImplItemPass : public TypeCheckBase\n \t    if (query == candidate)\n \t      continue;\n \n-\t    if (query->can_eq (candidate))\n+\t    if (query->can_eq (candidate, false))\n \t      possible_collision (it->second, iy->second);\n \t  }\n       }"}, {"sha": "e21bfc9017c3feaaaa24e24de32f64a89ee5aa5b", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -58,7 +58,7 @@ class PathProbeType : public TypeCheckBase\n     bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n     rust_assert (ok);\n \n-    if (!receiver->can_eq (impl_block_ty))\n+    if (!receiver->can_eq (impl_block_ty, false))\n       return;\n \n     // lets visit the impl_item"}, {"sha": "dd10d421fab051b3035357b70a85f018ed136a38", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -275,7 +275,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t    // always be at the end of the list\n \n \t    auto s = fn->get_self_type ();\n-\t    rust_assert (s->can_eq (adt));\n+\t    rust_assert (s->can_eq (adt, false));\n \t    rust_assert (s->get_kind () == TyTy::TypeKind::ADT);\n \t    TyTy::ADTType *self_adt = static_cast<TyTy::ADTType *> (s);\n "}, {"sha": "d6178825d4539bf9015251a2907f21295a1bf9e4", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -263,7 +263,7 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n       = trait_item_fntype->handle_substitions (implicit_self_substs);\n \n     // check the types are compatible\n-    if (!trait_item_fntype->can_eq (fntype))\n+    if (!trait_item_fntype->can_eq (fntype, true))\n       {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (trait_item_ref.get_locus ());"}, {"sha": "f01ef3b0d19eb2e2d33fd42cb87191ede1bf7d2d", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 378, "deletions": 70, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -46,61 +46,303 @@ class BaseCmp : public TyVisitor\n     return ok;\n   }\n \n-  virtual void visit (TupleType &) override { ok = false; }\n+  virtual void visit (TupleType &type) override\n+  {\n+    ok = false;\n \n-  virtual void visit (ADTType &) override { ok = false; }\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (InferType &) override { ok = false; }\n+  virtual void visit (ADTType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (FnType &) override { ok = false; }\n+  virtual void visit (InferType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (FnPtr &) override { ok = false; }\n+  virtual void visit (FnType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (ArrayType &) override { ok = false; }\n+  virtual void visit (FnPtr &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (BoolType &) override { ok = false; }\n+  virtual void visit (ArrayType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (IntType &) override { ok = false; }\n+  virtual void visit (BoolType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (UintType &) override { ok = false; }\n+  virtual void visit (IntType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (USizeType &) override { ok = false; }\n+  virtual void visit (UintType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (ISizeType &) override { ok = false; }\n+  virtual void visit (USizeType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (FloatType &) override { ok = false; }\n+  virtual void visit (ISizeType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (ErrorType &) override { ok = false; }\n+  virtual void visit (FloatType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (CharType &) override { ok = false; }\n+  virtual void visit (ErrorType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (ReferenceType &) override { ok = false; }\n+  virtual void visit (CharType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (ParamType &) override\n+  virtual void visit (ReferenceType &type) override\n   {\n-    // it is ok for types to can eq to a ParamType\n-    ok = true;\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n   }\n \n-  virtual void visit (StrType &) override { ok = false; }\n+  virtual void visit (StrType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n+  virtual void visit (NeverType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n \n-  virtual void visit (NeverType &) override { ok = false; }\n+  virtual void visit (PlaceholderType &type) override\n+  {\n+    // it is ok for types to can eq to a placeholder\n+    ok = true;\n+  }\n \n-  virtual void visit (PlaceholderType &) override\n-  { // it is ok for types to can eq to a placeholder\n+  virtual void visit (ParamType &type) override\n+  {\n+    // it is ok for types to can eq to a ParamType\n     ok = true;\n   }\n \n protected:\n-  BaseCmp (BaseType *base)\n+  BaseCmp (BaseType *base, bool emit_errors)\n     : mappings (Analysis::Mappings::get ()),\n-      context (Resolver::TypeCheckContext::get ()), ok (false)\n+      context (Resolver::TypeCheckContext::get ()), ok (false),\n+      emit_error_flag (emit_errors)\n   {}\n \n   Analysis::Mappings *mappings;\n   Resolver::TypeCheckContext *context;\n \n   bool ok;\n+  bool emit_error_flag;\n \n private:\n   /* Returns a pointer to the ty that created this rule. */\n@@ -112,7 +354,9 @@ class InferCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  InferCmp (InferType *base) : BaseCmp (base), base (base) {}\n+  InferCmp (InferType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (BoolType &type) override\n   {\n@@ -333,7 +577,9 @@ class FnCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnCmp (FnType *base) : BaseCmp (base), base (base) {}\n+  FnCmp (FnType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -353,18 +599,18 @@ class FnCmp : public BaseCmp\n \tauto a = base->param_at (i).second;\n \tauto b = type.param_at (i).second;\n \n-\tauto unified_param = a->unify (b);\n-\tif (unified_param->get_kind () == TypeKind::ERROR)\n+\tif (!a->can_eq (b, emit_error_flag))\n \t  {\n+\t    emit_error_flag = false;\n \t    BaseCmp::visit (type);\n \t    return;\n \t  }\n       }\n \n-    auto unified_return\n-      = base->get_return_type ()->unify (type.get_return_type ());\n-    if (unified_return->get_kind () == TypeKind::ERROR)\n+    if (!base->get_return_type ()->can_eq (type.get_return_type (),\n+\t\t\t\t\t   emit_error_flag))\n       {\n+\temit_error_flag = false;\n \tBaseCmp::visit (type);\n \treturn;\n       }\n@@ -383,7 +629,9 @@ class FnptrCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnptrCmp (FnPtr *base) : BaseCmp (base), base (base) {}\n+  FnptrCmp (FnPtr *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -398,17 +646,15 @@ class FnptrCmp : public BaseCmp\n \n   void visit (FnPtr &type) override\n   {\n-    auto this_ret_type = base->get_return_type ();\n-    auto other_ret_type = type.get_return_type ();\n-    auto unified_result = this_ret_type->unify (other_ret_type);\n-    if (unified_result == nullptr\n-\t|| unified_result->get_kind () == TypeKind::ERROR)\n+    if (base->num_params () != type.num_params ())\n       {\n \tBaseCmp::visit (type);\n \treturn;\n       }\n \n-    if (base->num_params () != type.num_params ())\n+    auto this_ret_type = base->get_return_type ();\n+    auto other_ret_type = type.get_return_type ();\n+    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag))\n       {\n \tBaseCmp::visit (type);\n \treturn;\n@@ -418,9 +664,7 @@ class FnptrCmp : public BaseCmp\n       {\n \tauto this_param = base->param_at (i);\n \tauto other_param = type.param_at (i);\n-\tauto unified_param = this_param->unify (other_param);\n-\tif (unified_param == nullptr\n-\t    || unified_param->get_kind () == TypeKind::ERROR)\n+\tif (!this_param->can_eq (other_param, emit_error_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -432,17 +676,15 @@ class FnptrCmp : public BaseCmp\n \n   void visit (FnType &type) override\n   {\n-    auto this_ret_type = base->get_return_type ();\n-    auto other_ret_type = type.get_return_type ();\n-    auto unified_result = this_ret_type->unify (other_ret_type);\n-    if (unified_result == nullptr\n-\t|| unified_result->get_kind () == TypeKind::ERROR)\n+    if (base->num_params () != type.num_params ())\n       {\n \tBaseCmp::visit (type);\n \treturn;\n       }\n \n-    if (base->num_params () != type.num_params ())\n+    auto this_ret_type = base->get_return_type ();\n+    auto other_ret_type = type.get_return_type ();\n+    if (!this_ret_type->can_eq (other_ret_type, emit_error_flag))\n       {\n \tBaseCmp::visit (type);\n \treturn;\n@@ -452,9 +694,7 @@ class FnptrCmp : public BaseCmp\n       {\n \tauto this_param = base->param_at (i);\n \tauto other_param = type.param_at (i).second;\n-\tauto unified_param = this_param->unify (other_param);\n-\tif (unified_param == nullptr\n-\t    || unified_param->get_kind () == TypeKind::ERROR)\n+\tif (!this_param->can_eq (other_param, emit_error_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -475,7 +715,9 @@ class ArrayCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ArrayCmp (ArrayType *base) : BaseCmp (base), base (base) {}\n+  ArrayCmp (ArrayType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (ArrayType &type) override\n   {\n@@ -511,7 +753,9 @@ class BoolCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  BoolCmp (BoolType *base) : BaseCmp (base), base (base) {}\n+  BoolCmp (BoolType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (BoolType &type) override { ok = true; }\n \n@@ -531,7 +775,9 @@ class IntCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  IntCmp (IntType *base) : BaseCmp (base), base (base) {}\n+  IntCmp (IntType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -554,7 +800,9 @@ class UintCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  UintCmp (UintType *base) : BaseCmp (base), base (base) {}\n+  UintCmp (UintType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -577,7 +825,9 @@ class FloatCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FloatCmp (FloatType *base) : BaseCmp (base), base (base) {}\n+  FloatCmp (FloatType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -600,7 +850,9 @@ class ADTCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ADTCmp (ADTType *base) : BaseCmp (base), base (base) {}\n+  ADTCmp (ADTType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (ADTType &type) override\n   {\n@@ -624,7 +876,7 @@ class ADTCmp : public BaseCmp\n \tTyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \tTyTy::BaseType *other_field_ty = other_field->get_field_type ();\n \n-\tif (!this_field_ty->can_eq (other_field_ty))\n+\tif (!this_field_ty->can_eq (other_field_ty, emit_error_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -645,7 +897,9 @@ class TupleCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  TupleCmp (TupleType *base) : BaseCmp (base), base (base) {}\n+  TupleCmp (TupleType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (TupleType &type) override\n   {\n@@ -660,7 +914,7 @@ class TupleCmp : public BaseCmp\n \tBaseType *bo = base->get_field (i);\n \tBaseType *fo = type.get_field (i);\n \n-\tif (!bo->can_eq (fo))\n+\tif (!bo->can_eq (fo, emit_error_flag))\n \t  {\n \t    BaseCmp::visit (type);\n \t    return;\n@@ -681,7 +935,9 @@ class USizeCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  USizeCmp (USizeType *base) : BaseCmp (base), base (base) {}\n+  USizeCmp (USizeType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -701,7 +957,9 @@ class ISizeCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ISizeCmp (ISizeType *base) : BaseCmp (base), base (base) {}\n+  ISizeCmp (ISizeType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -721,7 +979,9 @@ class CharCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  CharCmp (CharType *base) : BaseCmp (base), base (base) {}\n+  CharCmp (CharType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (InferType &type) override\n   {\n@@ -741,14 +1001,16 @@ class ReferenceCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ReferenceCmp (ReferenceType *base) : BaseCmp (base), base (base) {}\n+  ReferenceCmp (ReferenceType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (ReferenceType &type) override\n   {\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n \n-    ok = base_type->can_eq (other_base_type);\n+    ok = base_type->can_eq (other_base_type, emit_error_flag);\n   }\n \n private:\n@@ -762,7 +1024,9 @@ class ParamCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ParamCmp (ParamType *base) : BaseCmp (base), base (base) {}\n+  ParamCmp (ParamType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   // param types are a placeholder we shouldn't have cases where we unify\n   // against it. eg: struct foo<T> { a: T }; When we invoke it we can do either:\n@@ -786,10 +1050,10 @@ class ParamCmp : public BaseCmp\n     if (lookup->get_kind () == TypeKind::PARAM)\n       {\n \tInferType infer (UNKNOWN_HIRID, InferType::InferTypeKind::GENERAL);\n-\treturn infer.can_eq (other);\n+\treturn infer.can_eq (other, emit_error_flag);\n       }\n \n-    return lookup->can_eq (other);\n+    return lookup->can_eq (other, emit_error_flag);\n   }\n \n   // imagine the case where we have:\n@@ -812,7 +1076,9 @@ class StrCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  StrCmp (StrType *base) : BaseCmp (base), base (base) {}\n+  StrCmp (StrType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (StrType &type) override { ok = true; }\n \n@@ -827,7 +1093,9 @@ class NeverCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  NeverCmp (NeverType *base) : BaseCmp (base), base (base) {}\n+  NeverCmp (NeverType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n \n   void visit (NeverType &type) override { ok = true; }\n \n@@ -842,7 +1110,47 @@ class PlaceholderCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  PlaceholderCmp (PlaceholderType *base) : BaseCmp (base), base (base) {}\n+  PlaceholderCmp (PlaceholderType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n+\n+  virtual void visit (TupleType &) override { ok = true; }\n+\n+  virtual void visit (ADTType &) override { ok = true; }\n+\n+  virtual void visit (InferType &) override { ok = true; }\n+\n+  virtual void visit (FnType &) override { ok = true; }\n+\n+  virtual void visit (FnPtr &) override { ok = true; }\n+\n+  virtual void visit (ArrayType &) override { ok = true; }\n+\n+  virtual void visit (BoolType &) override { ok = true; }\n+\n+  virtual void visit (IntType &) override { ok = true; }\n+\n+  virtual void visit (UintType &) override { ok = true; }\n+\n+  virtual void visit (USizeType &) override { ok = true; }\n+\n+  virtual void visit (ISizeType &) override { ok = true; }\n+\n+  virtual void visit (FloatType &) override { ok = true; }\n+\n+  virtual void visit (ErrorType &) override { ok = true; }\n+\n+  virtual void visit (CharType &) override { ok = true; }\n+\n+  virtual void visit (ReferenceType &) override { ok = true; }\n+\n+  virtual void visit (ParamType &) override { ok = true; }\n+\n+  virtual void visit (StrType &) override { ok = true; }\n+\n+  virtual void visit (NeverType &) override { ok = true; }\n+\n+  virtual void visit (PlaceholderType &) override { ok = true; }\n \n private:\n   BaseType *get_base () override { return base; }"}, {"sha": "ba98212486cbb21c024ae3126196ebf519e9a386", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -98,9 +98,9 @@ InferType::unify (BaseType *other)\n }\n \n bool\n-InferType::can_eq (BaseType *other)\n+InferType::can_eq (BaseType *other, bool emit_errors)\n {\n-  InferCmp r (this);\n+  InferCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -155,7 +155,7 @@ ErrorType::unify (BaseType *other)\n }\n \n bool\n-ErrorType::can_eq (BaseType *other)\n+ErrorType::can_eq (BaseType *other, bool emit_errors)\n {\n   return get_kind () == other->get_kind ();\n }\n@@ -421,9 +421,9 @@ ADTType::unify (BaseType *other)\n }\n \n bool\n-ADTType::can_eq (BaseType *other)\n+ADTType::can_eq (BaseType *other, bool emit_errors)\n {\n-  ADTCmp r (this);\n+  ADTCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -582,9 +582,9 @@ TupleType::unify (BaseType *other)\n }\n \n bool\n-TupleType::can_eq (BaseType *other)\n+TupleType::can_eq (BaseType *other, bool emit_errors)\n {\n-  TupleCmp r (this);\n+  TupleCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -666,9 +666,9 @@ FnType::unify (BaseType *other)\n }\n \n bool\n-FnType::can_eq (BaseType *other)\n+FnType::can_eq (BaseType *other, bool emit_errors)\n {\n-  FnCmp r (this);\n+  FnCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -861,9 +861,9 @@ FnPtr::unify (BaseType *other)\n }\n \n bool\n-FnPtr::can_eq (BaseType *other)\n+FnPtr::can_eq (BaseType *other, bool emit_errors)\n {\n-  FnptrCmp r (this);\n+  FnptrCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -928,9 +928,9 @@ ArrayType::unify (BaseType *other)\n }\n \n bool\n-ArrayType::can_eq (BaseType *other)\n+ArrayType::can_eq (BaseType *other, bool emit_errors)\n {\n-  ArrayCmp r (this);\n+  ArrayCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -983,9 +983,9 @@ BoolType::unify (BaseType *other)\n }\n \n bool\n-BoolType::can_eq (BaseType *other)\n+BoolType::can_eq (BaseType *other, bool emit_errors)\n {\n-  BoolCmp r (this);\n+  BoolCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1029,9 +1029,9 @@ IntType::unify (BaseType *other)\n }\n \n bool\n-IntType::can_eq (BaseType *other)\n+IntType::can_eq (BaseType *other, bool emit_errors)\n {\n-  IntCmp r (this);\n+  IntCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1086,9 +1086,9 @@ UintType::unify (BaseType *other)\n }\n \n bool\n-UintType::can_eq (BaseType *other)\n+UintType::can_eq (BaseType *other, bool emit_errors)\n {\n-  UintCmp r (this);\n+  UintCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1137,9 +1137,9 @@ FloatType::unify (BaseType *other)\n }\n \n bool\n-FloatType::can_eq (BaseType *other)\n+FloatType::can_eq (BaseType *other, bool emit_errors)\n {\n-  FloatCmp r (this);\n+  FloatCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1180,9 +1180,9 @@ USizeType::unify (BaseType *other)\n }\n \n bool\n-USizeType::can_eq (BaseType *other)\n+USizeType::can_eq (BaseType *other, bool emit_errors)\n {\n-  USizeCmp r (this);\n+  USizeCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1212,9 +1212,9 @@ ISizeType::unify (BaseType *other)\n }\n \n bool\n-ISizeType::can_eq (BaseType *other)\n+ISizeType::can_eq (BaseType *other, bool emit_errors)\n {\n-  ISizeCmp r (this);\n+  ISizeCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1244,9 +1244,9 @@ CharType::unify (BaseType *other)\n }\n \n bool\n-CharType::can_eq (BaseType *other)\n+CharType::can_eq (BaseType *other, bool emit_errors)\n {\n-  CharCmp r (this);\n+  CharCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1276,9 +1276,9 @@ ReferenceType::unify (BaseType *other)\n }\n \n bool\n-ReferenceType::can_eq (BaseType *other)\n+ReferenceType::can_eq (BaseType *other, bool emit_errors)\n {\n-  ReferenceCmp r (this);\n+  ReferenceCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1351,9 +1351,9 @@ ParamType::unify (BaseType *other)\n }\n \n bool\n-ParamType::can_eq (BaseType *other)\n+ParamType::can_eq (BaseType *other, bool emit_errors)\n {\n-  ParamCmp r (this);\n+  ParamCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1407,7 +1407,7 @@ ParamType::is_equal (const BaseType &other) const\n     return false;\n \n   if (can_resolve ())\n-    return resolve ()->can_eq (other2.resolve ());\n+    return resolve ()->can_eq (other2.resolve (), false);\n \n   return get_symbol ().compare (other2.get_symbol ()) == 0;\n }\n@@ -1451,9 +1451,9 @@ StrType::unify (BaseType *other)\n }\n \n bool\n-StrType::can_eq (BaseType *other)\n+StrType::can_eq (BaseType *other, bool emit_errors)\n {\n-  StrCmp r (this);\n+  StrCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1483,9 +1483,9 @@ NeverType::unify (BaseType *other)\n }\n \n bool\n-NeverType::can_eq (BaseType *other)\n+NeverType::can_eq (BaseType *other, bool emit_errors)\n {\n-  NeverCmp r (this);\n+  NeverCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n \n@@ -1515,9 +1515,9 @@ PlaceholderType::unify (BaseType *other)\n }\n \n bool\n-PlaceholderType::can_eq (BaseType *other)\n+PlaceholderType::can_eq (BaseType *other, bool emit_errors)\n {\n-  PlaceholderCmp r (this);\n+  PlaceholderCmp r (this, emit_errors);\n   return r.can_eq (other);\n }\n "}, {"sha": "d85b8a8efa63314218203bb7f3e1d5452382c4bc", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99355534ef44f316ec2b72f4776e08cf01169715/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=99355534ef44f316ec2b72f4776e08cf01169715", "patch": "@@ -155,7 +155,7 @@ class BaseType\n \n   // similar to unify but does not actually perform type unification but\n   // determines whether they are compatible\n-  virtual bool can_eq (BaseType *other) = 0;\n+  virtual bool can_eq (BaseType *other, bool emit_errors) = 0;\n \n   // Check value equality between two ty. Type inference rules are ignored. Two\n   //   ty are considered equal if they're of the same kind, and\n@@ -274,7 +274,7 @@ class InferType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n \n@@ -308,7 +308,7 @@ class ErrorType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n \n@@ -336,7 +336,7 @@ class ParamType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n \n@@ -421,7 +421,7 @@ class TupleType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -853,7 +853,7 @@ class ADTType : public BaseType, public SubstitutionRef\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -960,7 +960,7 @@ class FnType : public BaseType, public SubstitutionRef\n   std::string get_identifier () const { return identifier; }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1056,7 +1056,7 @@ class FnPtr : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1098,7 +1098,7 @@ class ArrayType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1137,7 +1137,7 @@ class BoolType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n };\n@@ -1170,7 +1170,7 @@ class IntType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   IntKind get_int_kind () const { return int_kind; }\n \n@@ -1210,7 +1210,7 @@ class UintType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   UintKind get_uint_kind () const { return uint_kind; }\n \n@@ -1248,7 +1248,7 @@ class FloatType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   FloatKind get_float_kind () const { return float_kind; }\n \n@@ -1288,7 +1288,7 @@ class USizeType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n };\n@@ -1321,7 +1321,7 @@ class ISizeType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n };\n@@ -1354,7 +1354,7 @@ class CharType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n };\n@@ -1391,7 +1391,7 @@ class ReferenceType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1436,7 +1436,7 @@ class StrType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1469,7 +1469,7 @@ class NeverType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n \n@@ -1497,7 +1497,7 @@ class PlaceholderType : public BaseType\n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other) override;\n+  bool can_eq (BaseType *other, bool emit_errors) override;\n \n   BaseType *clone () final override;\n "}]}