{"sha": "73804b1224ace0833dfc0e628aa4b0727e7a0451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4MDRiMTIyNGFjZTA4MzNkZmMwZTYyOGFhNGIwNzI3ZTdhMDQ1MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-18T09:17:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-18T09:17:27Z"}, "message": "statistics.h (CXX_MEM_STAT_INFO): New define.\n\n2012-09-18  Richard Guenther  <rguenther@suse.de>\n\n\t* statistics.h (CXX_MEM_STAT_INFO): New define.\n\t* gimple.h (gimple_build_assign_with_ops_stat,\n\tgimple_build_assign_with_ops, gimple_build_assign_with_ops3):\n\tTurn into an overload of the function gimple_build_assign_with_ops.\n\t* gimple.c (gimple_build_assign_with_ops_stat): Rename to ...\n\t(gimple_build_assign_with_ops): ... this.\n\t* tree-ssa-loop-im.c (move_computations_stmt): Adjust.\n\t* tree-ssa-math-opts.c (convert_mult_to_fma): Likewise.\n\t* tree-vect-data-refs.c (vect_permute_store_chain): Likewise.\n\t(vect_permute_load_chain): Likewise.\n\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n\t(vect_recog_divmod_pattern): Likewise.\n\t(vect_recog_mixed_size_cond_pattern): Likewise.\n\t(adjust_bool_pattern): Likewise.\n\t* tree-vect-slp.c (vect_create_mask_and_perm): Likewise.\n\t* tree-vect-stmts.c (vectorizable_operation): Likewise.\n\t(permute_vec_elements): Likewise.\n\t(vectorizable_load): Likewise.\n\nFrom-SVN: r191415", "tree": {"sha": "f0f26ed65c436f49ceac348ef7b52caed61b31c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f26ed65c436f49ceac348ef7b52caed61b31c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73804b1224ace0833dfc0e628aa4b0727e7a0451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73804b1224ace0833dfc0e628aa4b0727e7a0451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73804b1224ace0833dfc0e628aa4b0727e7a0451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73804b1224ace0833dfc0e628aa4b0727e7a0451/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0558468b815e60a5d6d1d48e3a966010cb460f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0558468b815e60a5d6d1d48e3a966010cb460f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0558468b815e60a5d6d1d48e3a966010cb460f2"}], "stats": {"total": 158, "additions": 97, "deletions": 61}, "files": [{"sha": "de3e9c1c8264d29d89ec65085b72ad4f9b99d76c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -1,3 +1,25 @@\n+2012-09-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* statistics.h (CXX_MEM_STAT_INFO): New define.\n+\t* gimple.h (gimple_build_assign_with_ops_stat,\n+\tgimple_build_assign_with_ops, gimple_build_assign_with_ops3):\n+\tTurn into an overload of the function gimple_build_assign_with_ops.\n+\t* gimple.c (gimple_build_assign_with_ops_stat): Rename to ...\n+\t(gimple_build_assign_with_ops): ... this.\n+\t* tree-ssa-loop-im.c (move_computations_stmt): Adjust.\n+\t* tree-ssa-math-opts.c (convert_mult_to_fma): Likewise.\n+\t* tree-vect-data-refs.c (vect_permute_store_chain): Likewise.\n+\t(vect_permute_load_chain): Likewise.\n+\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n+\t(vect_recog_divmod_pattern): Likewise.\n+\t(vect_recog_mixed_size_cond_pattern): Likewise.\n+\t(adjust_bool_pattern): Likewise.\n+\t* tree-vect-slp.c (vect_create_mask_and_perm): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_operation): Likewise.\n+\t(permute_vec_elements): Likewise.\n+\t(vectorizable_load): Likewise.\n+\n 2012-09-17  Paul Koning  <ni1d@arrl.net>\n \n \t* doc/invoke.text (-feliminate-unused-debug-types): Update to"}, {"sha": "2bb4b67ab542dbb8c1b8b42a36478279ecac7fff", "filename": "gcc/gimple.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -424,8 +424,8 @@ gimple_build_assign_stat (tree lhs, tree rhs MEM_STAT_DECL)\n   tree op1, op2, op3;\n \n   extract_ops_from_tree_1 (rhs, &subcode, &op1, &op2, &op3);\n-  return gimple_build_assign_with_ops_stat (subcode, lhs, op1, op2, op3\n-  \t\t\t\t\t    PASS_MEM_STAT);\n+  return gimple_build_assign_with_ops (subcode, lhs, op1, op2, op3\n+\t\t\t\t       PASS_MEM_STAT);\n }\n \n \n@@ -434,8 +434,8 @@ gimple_build_assign_stat (tree lhs, tree rhs MEM_STAT_DECL)\n    GIMPLE_UNARY_RHS or GIMPLE_SINGLE_RHS.  */\n \n gimple\n-gimple_build_assign_with_ops_stat (enum tree_code subcode, tree lhs, tree op1,\n-                                   tree op2, tree op3 MEM_STAT_DECL)\n+gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1,\n+\t\t\t      tree op2, tree op3 MEM_STAT_DECL)\n {\n   unsigned num_ops;\n   gimple p;\n@@ -463,6 +463,14 @@ gimple_build_assign_with_ops_stat (enum tree_code subcode, tree lhs, tree op1,\n   return p;\n }\n \n+gimple\n+gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1,\n+\t\t\t      tree op2 MEM_STAT_DECL)\n+{\n+  return gimple_build_assign_with_ops (subcode, lhs, op1, op2, NULL_TREE\n+\t\t\t\t       PASS_MEM_STAT);\n+}\n+\n \n /* Build a new GIMPLE_ASSIGN tuple and append it to the end of *SEQ_P.\n "}, {"sha": "58696896050eb69bc8fdbb6ecf9fedf489f0a109", "filename": "gcc/gimple.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -744,12 +744,12 @@ gimple gimple_build_assign_stat (tree, tree MEM_STAT_DECL);\n \n void extract_ops_from_tree_1 (tree, enum tree_code *, tree *, tree *, tree *);\n \n-gimple gimple_build_assign_with_ops_stat (enum tree_code, tree, tree,\n-\t\t\t\t\t  tree, tree MEM_STAT_DECL);\n-#define gimple_build_assign_with_ops(c,o1,o2,o3)\t\t\t\\\n-  gimple_build_assign_with_ops_stat (c, o1, o2, o3, NULL_TREE MEM_STAT_INFO)\n-#define gimple_build_assign_with_ops3(c,o1,o2,o3,o4)\t\t\t\\\n-  gimple_build_assign_with_ops_stat (c, o1, o2, o3, o4 MEM_STAT_INFO)\n+gimple\n+gimple_build_assign_with_ops (enum tree_code, tree,\n+\t\t\t      tree, tree CXX_MEM_STAT_INFO);\n+gimple\n+gimple_build_assign_with_ops (enum tree_code, tree,\n+\t\t\t      tree, tree, tree CXX_MEM_STAT_INFO);\n \n gimple gimple_build_debug_bind_stat (tree, tree, gimple MEM_STAT_DECL);\n #define gimple_build_debug_bind(var,val,stmt)\t\t\t\\"}, {"sha": "6bb8166165c11dacb86835db65a6ad01adb1ad70", "filename": "gcc/statistics.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fstatistics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Fstatistics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.h?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -38,6 +38,11 @@\n #define PASS_MEM_STAT , ALONE_PASS_MEM_STAT\n #define FINAL_PASS_MEM_STAT , ALONE_FINAL_PASS_MEM_STAT\n #define MEM_STAT_INFO , ALONE_MEM_STAT_INFO\n+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)\n+#define CXX_MEM_STAT_INFO , const char * _loc_name = __builtin_FILE (), int _loc_line = __builtin_LINE (), const char * _loc_function = __builtin_FUNCTION ()\n+#else\n+#define CXX_MEM_STAT_INFO , const char * _loc_name = __FILE__, int _loc_line = __LINE__, const char * _loc_function = NULL\n+#endif\n #else\n #define ALONE_MEM_STAT_DECL void\n #define ALONE_FINAL_MEM_STAT_DECL GCC_MEM_STAT_ARGUMENTS\n@@ -49,6 +54,7 @@\n #define PASS_MEM_STAT\n #define FINAL_PASS_MEM_STAT , ALONE_FINAL_PASS_MEM_STAT\n #define MEM_STAT_INFO ALONE_MEM_STAT_INFO\n+#define CXX_MEM_STAT_INFO\n #endif\n \n struct function;"}, {"sha": "e76e64398eae0b6693ca79ee34a194b21a54f3c1", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -1273,9 +1273,9 @@ move_computations_stmt (struct dom_walk_data *dw_data,\n \t  gcc_assert (arg0 && arg1);\n \t  t = build2 (gimple_cond_code (cond), boolean_type_node,\n \t\t      gimple_cond_lhs (cond), gimple_cond_rhs (cond));\n-\t  new_stmt = gimple_build_assign_with_ops3 (COND_EXPR,\n-\t\t\t\t\t\t    gimple_phi_result (stmt),\n-\t\t\t\t\t\t    t, arg0, arg1);\n+\t  new_stmt = gimple_build_assign_with_ops (COND_EXPR,\n+\t\t\t\t\t\t   gimple_phi_result (stmt),\n+\t\t\t\t\t\t   t, arg0, arg1);\n \t  SSA_NAME_DEF_STMT (gimple_phi_result (stmt)) = new_stmt;\n \t  *((unsigned int *)(dw_data->global_data)) |= TODO_cleanup_cfg;\n \t}"}, {"sha": "16ff397d47d2b49335bbc50c5c37d5f8b500a3c0", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -2604,10 +2604,10 @@ convert_mult_to_fma (gimple mul_stmt, tree op1, tree op2)\n \t\t\t\t\t   true, NULL_TREE, true,\n \t\t\t\t\t   GSI_SAME_STMT);\n \n-      fma_stmt = gimple_build_assign_with_ops3 (FMA_EXPR,\n-\t\t\t\t\t\tgimple_assign_lhs (use_stmt),\n-\t\t\t\t\t\tmulop1, op2,\n-\t\t\t\t\t\taddop);\n+      fma_stmt = gimple_build_assign_with_ops (FMA_EXPR,\n+\t\t\t\t\t       gimple_assign_lhs (use_stmt),\n+\t\t\t\t\t       mulop1, op2,\n+\t\t\t\t\t       addop);\n       gsi_replace (&gsi, fma_stmt, true);\n       widen_mul_stats.fmas_inserted++;\n     }"}, {"sha": "09704694dea82d3108f4533b7dab205344f23cab", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -4170,8 +4170,8 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \t     high = VEC_PERM_EXPR <vect1, vect2, {0, nelt, 1, nelt+1, ...}>  */\n \t  high = make_temp_ssa_name (vectype, NULL, \"vect_inter_high\");\n \t  perm_stmt\n-\t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, high,\n-\t\t\t\t\t     vect1, vect2, perm_mask_high);\n+\t    = gimple_build_assign_with_ops (VEC_PERM_EXPR, high,\n+\t\t\t\t\t    vect1, vect2, perm_mask_high);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, 2*j, high);\n \n@@ -4180,8 +4180,8 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n \t\t\t\t\t\t nelt*3/2+1, ...}>  */\n \t  low = make_temp_ssa_name (vectype, NULL, \"vect_inter_low\");\n \t  perm_stmt\n-\t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, low,\n-\t\t\t\t\t     vect1, vect2, perm_mask_low);\n+\t    = gimple_build_assign_with_ops (VEC_PERM_EXPR, low,\n+\t\t\t\t\t    vect1, vect2, perm_mask_low);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, 2*j+1, low);\n \t}\n@@ -4618,17 +4618,17 @@ vect_permute_load_chain (VEC(tree,heap) *dr_chain,\n \n \t  /* data_ref = permute_even (first_data_ref, second_data_ref);  */\n \t  data_ref = make_temp_ssa_name (vectype, NULL, \"vect_perm_even\");\n-\t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\t     first_vect, second_vect,\n-\t\t\t\t\t\t     perm_mask_even);\n+\t  perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t    first_vect, second_vect,\n+\t\t\t\t\t\t    perm_mask_even);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, j/2, data_ref);\n \n \t  /* data_ref = permute_odd (first_data_ref, second_data_ref);  */\n \t  data_ref = make_temp_ssa_name (vectype, NULL, \"vect_perm_odd\");\n-\t  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t\t     first_vect, second_vect,\n-\t\t\t\t\t\t     perm_mask_odd);\n+\t  perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t\t    first_vect, second_vect,\n+\t\t\t\t\t\t    perm_mask_odd);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, j/2+length/2, data_ref);\n \t}"}, {"sha": "85fb3a29bca07beabcf227bb454f57cebdbb2101", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -667,8 +667,8 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t\t\t\t\t << shifts[i]) - 1);\n \t      cst = build_vector (type, vec);\n \t      addend = make_ssa_name (type, NULL);\n-\t      stmt = gimple_build_assign_with_ops3 (VEC_COND_EXPR, addend,\n-\t\t\t\t\t\t    cond, cst, zero);\n+\t      stmt = gimple_build_assign_with_ops (VEC_COND_EXPR, addend,\n+\t\t\t\t\t\t   cond, cst, zero);\n \t      gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n \t    }\n \t}"}, {"sha": "ef65c3f885865db438333d6b782122c14de3d678", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -413,8 +413,8 @@ vect_recog_dot_prod_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n \n   /* Pattern detected. Create a stmt to be used to replace the pattern: */\n   var = vect_recog_temp_ssa_var (type, NULL);\n-  pattern_stmt = gimple_build_assign_with_ops3 (DOT_PROD_EXPR, var,\n-\t\t\t\t\t\toprnd00, oprnd01, oprnd1);\n+  pattern_stmt = gimple_build_assign_with_ops (DOT_PROD_EXPR, var,\n+\t\t\t\t\t       oprnd00, oprnd01, oprnd1);\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     {\n@@ -1688,12 +1688,12 @@ vect_recog_divmod_pattern (VEC (gimple, heap) **stmts,\n \t  tree var = vect_recog_temp_ssa_var (itype, NULL);\n \t  tree shift;\n \t  def_stmt\n-\t    = gimple_build_assign_with_ops3 (COND_EXPR, var, cond,\n-\t\t\t\t\t     fold_build2 (MINUS_EXPR, itype,\n-\t\t\t\t\t\t\t  oprnd1,\n-\t\t\t\t\t\t\t  build_int_cst (itype,\n-\t\t\t\t\t\t\t\t\t 1)),\n-\t\t\t\t\t     build_int_cst (itype, 0));\n+\t    = gimple_build_assign_with_ops (COND_EXPR, var, cond,\n+\t\t\t\t\t    fold_build2 (MINUS_EXPR, itype,\n+\t\t\t\t\t\t\t oprnd1,\n+\t\t\t\t\t\t\t build_int_cst (itype,\n+\t\t\t\t\t\t\t\t\t1)),\n+\t\t\t\t\t    build_int_cst (itype, 0));\n \t  new_pattern_def_seq (stmt_vinfo, def_stmt);\n \t  var = vect_recog_temp_ssa_var (itype, NULL);\n \t  def_stmt\n@@ -1716,9 +1716,9 @@ vect_recog_divmod_pattern (VEC (gimple, heap) **stmts,\n \t    {\n \t      signmask = vect_recog_temp_ssa_var (itype, NULL);\n \t      def_stmt\n-\t\t= gimple_build_assign_with_ops3 (COND_EXPR, signmask, cond,\n-\t\t\t\t\t\t build_int_cst (itype, 1),\n-\t\t\t\t\t\t build_int_cst (itype, 0));\n+\t\t= gimple_build_assign_with_ops (COND_EXPR, signmask, cond,\n+\t\t\t\t\t\tbuild_int_cst (itype, 1),\n+\t\t\t\t\t\tbuild_int_cst (itype, 0));\n \t      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t    }\n \t  else\n@@ -1732,9 +1732,9 @@ vect_recog_divmod_pattern (VEC (gimple, heap) **stmts,\n \t      tree var = vect_recog_temp_ssa_var (utype, NULL);\n \n \t      def_stmt\n-\t\t= gimple_build_assign_with_ops3 (COND_EXPR, var, cond,\n-\t\t\t\t\t\t build_int_cst (utype, -1),\n-\t\t\t\t\t\t build_int_cst (utype, 0));\n+\t\t= gimple_build_assign_with_ops (COND_EXPR, var, cond,\n+\t\t\t\t\t\tbuild_int_cst (utype, -1),\n+\t\t\t\t\t\tbuild_int_cst (utype, 0));\n \t      def_stmt_vinfo\n \t\t= new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n \t      set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n@@ -2172,11 +2172,11 @@ vect_recog_mixed_size_cond_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n     }\n \n   def_stmt\n-    = gimple_build_assign_with_ops3 (COND_EXPR,\n-\t\t\t\t     vect_recog_temp_ssa_var (itype, NULL),\n-\t\t\t\t     unshare_expr (cond_expr),\n-\t\t\t\t     fold_convert (itype, then_clause),\n-\t\t\t\t     fold_convert (itype, else_clause));\n+    = gimple_build_assign_with_ops (COND_EXPR,\n+\t\t\t\t    vect_recog_temp_ssa_var (itype, NULL),\n+\t\t\t\t    unshare_expr (cond_expr),\n+\t\t\t\t    fold_convert (itype, then_clause),\n+\t\t\t\t    fold_convert (itype, else_clause));\n   pattern_stmt\n     = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    vect_recog_temp_ssa_var (type, NULL),\n@@ -2476,10 +2476,10 @@ adjust_bool_pattern (tree var, tree out_type, tree trueval,\n \tgcc_checking_assert (useless_type_conversion_p (itype,\n \t\t\t\t\t\t\tTREE_TYPE (trueval)));\n       pattern_stmt\n-\t= gimple_build_assign_with_ops3 (COND_EXPR,\n-\t\t\t\t\t vect_recog_temp_ssa_var (itype, NULL),\n-\t\t\t\t\t cond_expr, trueval,\n-\t\t\t\t\t build_int_cst (itype, 0));\n+\t= gimple_build_assign_with_ops (COND_EXPR,\n+\t\t\t\t\tvect_recog_temp_ssa_var (itype, NULL),\n+\t\t\t\t\tcond_expr, trueval,\n+\t\t\t\t\tbuild_int_cst (itype, 0));\n       break;\n     }\n "}, {"sha": "83cbb49fb223ab6786ec81218cef97a593f3f77b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -2672,8 +2672,8 @@ vect_create_mask_and_perm (gimple stmt, gimple next_scalar_stmt,\n       second_vec = VEC_index (tree, dr_chain, second_vec_indx);\n \n       /* Generate the permute statement.  */\n-      perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, perm_dest,\n-\t\t\t\t\t\t first_vec, second_vec, mask);\n+      perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, perm_dest,\n+\t\t\t\t\t\tfirst_vec, second_vec, mask);\n       data_ref = make_ssa_name (perm_dest, perm_stmt);\n       gimple_set_lhs (perm_stmt, data_ref);\n       vect_finish_stmt_generation (stmt, perm_stmt, gsi);"}, {"sha": "210e5b572faaa641a2fe7db4beffc2f5cd06aa06", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73804b1224ace0833dfc0e628aa4b0727e7a0451/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=73804b1224ace0833dfc0e628aa4b0727e7a0451", "patch": "@@ -3702,8 +3702,8 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t  ? VEC_index (tree, vec_oprnds1, i) : NULL_TREE);\n \t  vop2 = ((op_type == ternary_op)\n \t\t  ? VEC_index (tree, vec_oprnds2, i) : NULL_TREE);\n-\t  new_stmt = gimple_build_assign_with_ops3 (code, vec_dest,\n-\t\t\t\t\t\t    vop0, vop1, vop2);\n+\t  new_stmt = gimple_build_assign_with_ops (code, vec_dest,\n+\t\t\t\t\t\t   vop0, vop1, vop2);\n \t  new_temp = make_ssa_name (vec_dest, new_stmt);\n \t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n@@ -4235,8 +4235,8 @@ permute_vec_elements (tree x, tree y, tree mask_vec, gimple stmt,\n   data_ref = make_ssa_name (perm_dest, NULL);\n \n   /* Generate the permute statement.  */\n-  perm_stmt = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, data_ref,\n-\t\t\t\t\t     x, y, mask_vec);\n+  perm_stmt = gimple_build_assign_with_ops (VEC_PERM_EXPR, data_ref,\n+\t\t\t\t\t    x, y, mask_vec);\n   vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \n   return data_ref;\n@@ -5047,9 +5047,9 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t    realignment_token = dataref_ptr;\n \t\t  vec_dest = vect_create_destination_var (scalar_dest, vectype);\n \t\t  new_stmt\n-\t\t    = gimple_build_assign_with_ops3 (REALIGN_LOAD_EXPR,\n-\t\t\t\t\t\t     vec_dest, msq, lsq,\n-\t\t\t\t\t\t     realignment_token);\n+\t\t    = gimple_build_assign_with_ops (REALIGN_LOAD_EXPR,\n+\t\t\t\t\t\t    vec_dest, msq, lsq,\n+\t\t\t\t\t\t    realignment_token);\n \t\t  new_temp = make_ssa_name (vec_dest, new_stmt);\n \t\t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);"}]}