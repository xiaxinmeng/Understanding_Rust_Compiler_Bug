{"sha": "f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBiZmQxZjkxZmRiYTQxYTZkOWZhN2FkYTZlMDJlYTgxMjFmNjA0Yw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-09T07:55:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:12Z"}, "message": "[Ada] Elaboration order v4.0 and generic instantiations\n\nThis patch updates the library graph augmentation mechanism of the\nelaboration order v4.0 to emulate a particular behavior of the v3.0\nscheme involving generic instantiations. If a unit without any\nelaboration code instantiates a generic without any elaboration code,\nthe invocation edge from the instance to the generic body is not\nconsidered for library graph augmentation.\n\n------------\n-- Source --\n------------\n\n--  gen_pack1.ads\n\ngeneric\n   type Element_Type is private;\n\npackage Gen_Pack1 is\n   procedure Read;\nend Gen_Pack1;\n\n--  gen_pack1.adb\n\nwith Types1;\n\npackage body Gen_Pack1 is\n   procedure Read is null;\nend Gen_Pack1;\n\n--  types1.ads\n\nwith Gen_Pack1;\n\npackage Types1 is\n   procedure Read;\n\n   package Optional_Numbers is new Gen_Pack1 (Positive);\nend Types1;\n\n--  main1.adb\n\nwith Types1;\n\nprocedure Main1 is\nbegin\n   Types1.Optional_Numbers.Read;\nend Main1;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -q main1.adb\n\n2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* bindo-augmentors.adb (Visit_Elaboration_Root): Do not start a\n\tDFS from an elaboration root whose corresponding unit lacks\n\telaboration code. This behavior mimics that of the old\n\telaboration order mechanism.\n\t* bindo-graphs.adb (Find_All_Cycles_Through_Vertex): Move the\n\tvertex tracing within the functional branches of the routine.\n\tThis prevents spurious trace output.\n\t(Has_No_Elaboration_Code): New routine.\n\t(Trace_Cycle, Trace_Edge): Update the various Ids to use the\n\t\"standard\" trace format.\n\t* bindo-graphs.ads (Has_No_Elaboration_Code): New routine.\n\t* bindo-units.ads, bindo-units.adb (Has_No_Elaboration_Code):\n\tNew routine.\n\nFrom-SVN: r273288", "tree": {"sha": "34211f3c7c46707a6e7281503fb3048a36528195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34211f3c7c46707a6e7281503fb3048a36528195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ac53f4c4e1ecbf753ce764bfd9083aa0141323"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "b191e2d0e2121e835b1b29eb53e2906177be404a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -1,3 +1,19 @@\n+2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindo-augmentors.adb (Visit_Elaboration_Root): Do not start a\n+\tDFS from an elaboration root whose corresponding unit lacks\n+\telaboration code. This behavior mimics that of the old\n+\telaboration order mechanism.\n+\t* bindo-graphs.adb (Find_All_Cycles_Through_Vertex): Move the\n+\tvertex tracing within the functional branches of the routine.\n+\tThis prevents spurious trace output.\n+\t(Has_No_Elaboration_Code): New routine.\n+\t(Trace_Cycle, Trace_Edge): Update the various Ids to use the\n+\t\"standard\" trace format.\n+\t* bindo-graphs.ads (Has_No_Elaboration_Code): New routine.\n+\t* bindo-units.ads, bindo-units.adb (Has_No_Elaboration_Code):\n+\tNew routine.\n+\n 2019-07-09  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* ali.ads, bindo-graphs.adb, bindo-validators.adb, clean.adb,"}, {"sha": "e0e23386672ae3277238d804987836ee9f740049", "filename": "gcc/ada/bindo-augmentors.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-augmentors.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-augmentors.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-augmentors.adb?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -152,6 +152,17 @@ package body Bindo.Augmentors is\n          Visited : IGV_Sets.Membership_Set;\n \n       begin\n+         --  Nothing to do when the unit where the elaboration root resides\n+         --  lacks elaboration code. This implies that any invocation edges\n+         --  going out of the unit are unwanted. This behavior emulates the\n+         --  old elaboration order mechanism.\n+\n+         if Has_No_Elaboration_Code (Lib_Graph, Root_Vertex) then\n+            return;\n+         end if;\n+\n+         --  Prepare the global data\n+\n          Visited := IGV_Sets.Create (Number_Of_Vertices (Inv_Graph));\n \n          Visit_Vertex"}, {"sha": "c3ae738c6699bc1e17c96600ed050f35101b6d5f", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -2356,13 +2356,13 @@ package body Bindo.Graphs is\n             return;\n          end if;\n \n-         Trace_Vertex (G, Vertex, Indent);\n-\n          --  The current vertex denotes the end vertex of the cycle and closes\n          --  the circuit. Normalize the cycle such that it is rotated with its\n          --  most significant edge first, and record it for diagnostics.\n \n          if LGV_Sets.Contains (End_Vertices, Vertex) then\n+            Trace_Vertex (G, Vertex, Indent);\n+\n             Normalize_And_Add_Cycle\n               (G                     => G,\n                Most_Significant_Edge => Most_Significant_Edge,\n@@ -2374,6 +2374,7 @@ package body Bindo.Graphs is\n          --  not been visited yet.\n \n          elsif not LGV_Sets.Contains (Visited_Vertices, Vertex) then\n+            Trace_Vertex (G, Vertex, Indent);\n \n             --  Prepare for vertex backtracking\n \n@@ -2859,6 +2860,21 @@ package body Bindo.Graphs is\n          return DG.Has_Next (DG.Outgoing_Edge_Iterator (Iter));\n       end Has_Next;\n \n+      -----------------------------\n+      -- Has_No_Elaboration_Code --\n+      -----------------------------\n+\n+      function Has_No_Elaboration_Code\n+        (G      : Library_Graph;\n+         Vertex : Library_Graph_Vertex_Id) return Boolean\n+      is\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Vertex));\n+\n+         return Has_No_Elaboration_Code (Unit (G, Vertex));\n+      end Has_No_Elaboration_Code;\n+\n       -----------------------------------------\n       -- Hash_Library_Graph_Cycle_Attributes --\n       -----------------------------------------\n@@ -4878,7 +4894,7 @@ package body Bindo.Graphs is\n             Next (Iter, Edge);\n \n             Indent_By (Edge_Indent);\n-            Write_Str (\"library graph edge (Edge_\");\n+            Write_Str (\"library graph edge (LGE_Id_\");\n             Write_Int (Int (Edge));\n             Write_Str (\")\");\n             Write_Eol;\n@@ -4912,7 +4928,7 @@ package body Bindo.Graphs is\n          end if;\n \n          Indent_By (Indent);\n-         Write_Str (\"library graph edge (Edge_\");\n+         Write_Str (\"library graph edge (LGE_Id_\");\n          Write_Int (Int (Edge));\n          Write_Str (\")\");\n          Write_Eol;\n@@ -4923,14 +4939,14 @@ package body Bindo.Graphs is\n          Write_Eol;\n \n          Indent_By  (Attr_Indent);\n-         Write_Str  (\"Predecessor (Vertex_\");\n+         Write_Str  (\"Predecessor (LGV_Id_\");\n          Write_Int  (Int (Pred));\n          Write_Str  (\") name = \");\n          Write_Name (Name (G, Pred));\n          Write_Eol;\n \n          Indent_By  (Attr_Indent);\n-         Write_Str  (\"Successor   (Vertex_\");\n+         Write_Str  (\"Successor   (LGV_Id_\");\n          Write_Int  (Int (Succ));\n          Write_Str  (\") name = \");\n          Write_Name (Name (G, Succ));\n@@ -4977,7 +4993,7 @@ package body Bindo.Graphs is\n          end if;\n \n          Indent_By (Indent);\n-         Write_Str (\"library graph vertex (Vertex_\");\n+         Write_Str (\"library graph vertex (LGV_Id_\");\n          Write_Int (Int (Vertex));\n          Write_Str (\")\");\n          Write_Eol;"}, {"sha": "86ba823abe35086281f6b7c0bcc329f726c52e69", "filename": "gcc/ada/bindo-graphs.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-graphs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-graphs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.ads?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -1028,6 +1028,13 @@ package Bindo.Graphs is\n       --  Determine whether library graph G contains a cycle involving pragma\n       --  Elaborate_All.\n \n+      function Has_No_Elaboration_Code\n+        (G      : Library_Graph;\n+         Vertex : Library_Graph_Vertex_Id) return Boolean;\n+      pragma Inline (Has_No_Elaboration_Code);\n+      --  Determine whether vertex Vertex of library graph G represents a unit\n+      --  that lacks elaboration code.\n+\n       function In_Same_Component\n         (G     : Library_Graph;\n          Left  : Library_Graph_Vertex_Id;"}, {"sha": "8b8fc283a98f926c227e8bf0c920eeb4c9648eee", "filename": "gcc/ada/bindo-units.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-units.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-units.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-units.adb?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -199,6 +199,19 @@ package body Bindo.Units is\n       return Unit_Sets.Has_Next (Unit_Sets.Iterator (Iter));\n    end Has_Next;\n \n+   -----------------------------\n+   -- Has_No_Elaboration_Code --\n+   -----------------------------\n+\n+   function Has_No_Elaboration_Code (U_Id : Unit_Id) return Boolean is\n+      pragma Assert (Present (U_Id));\n+\n+      U_Rec : Unit_Record renames ALI.Units.Table (U_Id);\n+\n+   begin\n+      return U_Rec.No_Elab;\n+   end Has_No_Elaboration_Code;\n+\n    -------------------------------\n    -- Hash_Invocation_Signature --\n    -------------------------------"}, {"sha": "5f045c8b2efed5967f71e039869d26a8fbbc298e", "filename": "gcc/ada/bindo-units.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-units.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c/gcc%2Fada%2Fbindo-units.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-units.ads?ref=f0bfd1f91fdba41a6d9fa7ada6e02ea8121f604c", "patch": "@@ -81,6 +81,10 @@ package Bindo.Units is\n    pragma Inline (For_Each_Unit);\n    --  Invoke Processor on each unit in the bind\n \n+   function Has_No_Elaboration_Code (U_Id : Unit_Id) return Boolean;\n+   pragma Inline (Has_No_Elaboration_Code);\n+   --  Determine whether unit U_Id lacks elaboration code\n+\n    function Hash_Invocation_Signature\n      (IS_Id : Invocation_Signature_Id) return Bucket_Range_Type;\n    pragma Inline (Hash_Invocation_Signature);"}]}