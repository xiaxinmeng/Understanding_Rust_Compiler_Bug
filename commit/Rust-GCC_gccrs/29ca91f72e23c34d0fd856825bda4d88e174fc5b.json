{"sha": "29ca91f72e23c34d0fd856825bda4d88e174fc5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljYTkxZjcyZTIzYzM0ZDBmZDg1NjgyNWJkYTRkODhlMTc0ZmM1Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-04-19T18:02:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-04-19T18:02:46Z"}, "message": "libstdc++/69703 ignore endianness in codecvt_utf8\n\n\tPR libstdc++/69703\n\t* src/c++11/codecvt.cc (__codecvt_utf8_base<char16_t>::do_in)):\n\tOverride endianness bit in mode.\n\t* testsuite/22_locale/codecvt/codecvt_utf8/69703.cc: New test.\n\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/66855.cc: Test\n\tthat little_endian mode is ignored.\n\t* testsuite/experimental/filesystem/path/native/string.cc: New test.\n\nFrom-SVN: r235216", "tree": {"sha": "97badfe05d02ba011bf8f573c0f9fab897c79d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97badfe05d02ba011bf8f573c0f9fab897c79d9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ca91f72e23c34d0fd856825bda4d88e174fc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ca91f72e23c34d0fd856825bda4d88e174fc5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ca91f72e23c34d0fd856825bda4d88e174fc5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ca91f72e23c34d0fd856825bda4d88e174fc5b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149052510483ab2ea3cf02d085e1f31ebe5360c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149052510483ab2ea3cf02d085e1f31ebe5360c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149052510483ab2ea3cf02d085e1f31ebe5360c5"}], "stats": {"total": 216, "additions": 215, "deletions": 1}, "files": [{"sha": "6eed9a323152c43afea31f0091d94368c8937c6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29ca91f72e23c34d0fd856825bda4d88e174fc5b", "patch": "@@ -1,5 +1,13 @@\n 2016-04-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/69703\n+\t* src/c++11/codecvt.cc (__codecvt_utf8_base<char16_t>::do_in)):\n+\tOverride endianness bit in mode.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8/69703.cc: New test.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/66855.cc: Test\n+\tthat little_endian mode is ignored.\n+\t* testsuite/experimental/filesystem/path/native/string.cc: New test.\n+\n \tPR libstdc++/70609\n \t* src/filesystem/ops.cc (close_fd): New function.\n \t(do_copy_file): Set permissions before copying file contents. Check"}, {"sha": "b6b63584fbe5db1769b2e010b4e794b140c8a95f", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=29ca91f72e23c34d0fd856825bda4d88e174fc5b", "patch": "@@ -789,7 +789,11 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n {\n   range<const char> from{ __from, __from_end };\n   range<char16_t> to{ __to, __to_end };\n-  auto res = ucs2_in(from, to, _M_maxcode, _M_mode);\n+  codecvt_mode mode = codecvt_mode(_M_mode | (consume_header|generate_header));\n+#if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__\n+  mode = codecvt_mode(mode | little_endian);\n+#endif\n+  auto res = ucs2_in(from, to, _M_maxcode, mode);\n   __from_next = from.next;\n   __to_next = to.next;\n   return res;"}, {"sha": "745d2c279171e78a0ccbbcc8d90d32c4e97437aa", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8/69703.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F69703.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F69703.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F69703.cc?ref=29ca91f72e23c34d0fd856825bda4d88e174fc5b", "patch": "@@ -0,0 +1,103 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const char out[] = \"abc\";\n+  char16_t in[4];\n+  std::codecvt_utf8<char16_t> cvt;\n+  std::mbstate_t st;\n+  const char* no;\n+  char16_t* ni;\n+  auto res = cvt.in(st, out, out+3, no, in, in+3, ni);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( in[0] == u'a' );\n+  VERIFY( in[1] == u'b' );\n+  VERIFY( in[2] == u'c' );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const char out[] = \"abc\";\n+  char16_t in[4];\n+  std::codecvt_utf8<char16_t, 0x10ffff, std::little_endian> cvt;\n+  std::mbstate_t st;\n+  const char* no;\n+  char16_t* ni;\n+  auto res = cvt.in(st, out, out+3, no, in, in+3, ni);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( in[0] == u'a' );\n+  VERIFY( in[1] == u'b' );\n+  VERIFY( in[2] == u'c' );\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const char out[] = \"abc\";\n+  char32_t in[4];\n+  std::codecvt_utf8<char32_t> cvt;\n+  std::mbstate_t st;\n+  const char* no;\n+  char32_t* ni;\n+  auto res = cvt.in(st, out, out+3, no, in, in+3, ni);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( in[0] == U'a' );\n+  VERIFY( in[1] == U'b' );\n+  VERIFY( in[2] == U'c' );\n+}\n+\n+\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const char out[] = \"abc\";\n+  char32_t in[4];\n+  std::codecvt_utf8<char32_t, 0x10ffff, std::little_endian> cvt;\n+  std::mbstate_t st;\n+  const char* no;\n+  char32_t* ni;\n+  auto res = cvt.in(st, out, out+3, no, in, in+3, ni);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( in[0] == U'a' );\n+  VERIFY( in[1] == U'b' );\n+  VERIFY( in[2] == U'c' );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test01();\n+  test02();\n+}"}, {"sha": "49b750f91e3ffe8f1f63099122ed365c0e78cdaf", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8_utf16/66855.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F66855.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F66855.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F66855.cc?ref=29ca91f72e23c34d0fd856825bda4d88e174fc5b", "patch": "@@ -45,8 +45,35 @@ test01()\n   VERIFY( buf[3] == utf16[3] );\n }\n \n+void\n+test02()\n+{\n+  // Endianness flag should make no difference.\n+  std::codecvt_utf8_utf16<char16_t, 0x10ffff, std::little_endian> cvt;\n+  char16_t utf16[] = u\"\\ub098\\ub294\\ud0dc\\uc624\";\n+  const char16_t* nf16;\n+  char utf8[16];\n+  char* nt8;\n+  std::mbstate_t st{};\n+  auto res = cvt.out(st, utf16, utf16+4, nf16, utf8, utf8+16, nt8);\n+  VERIFY( res == std::codecvt_base::ok );\n+\n+  st = {};\n+  char16_t buf[4] = {};\n+  const char* nf8 = nt8;\n+  char16_t* nt16;\n+  res = cvt.in(st, utf8, nf8, nf8, buf, buf+4, nt16);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( nt16 == buf+4 );\n+  VERIFY( buf[0] == utf16[0] );\n+  VERIFY( buf[1] == utf16[1] );\n+  VERIFY( buf[2] == utf16[2] );\n+  VERIFY( buf[3] == utf16[3] );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "05ff57c59a6d9188b9d3df19a07eb6739c307cd3", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/string.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ca91f72e23c34d0fd856825bda4d88e174fc5b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc?ref=29ca91f72e23c34d0fd856825bda4d88e174fc5b", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -lstdc++fs\" }\n+\n+#include <experimental/filesystem>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std::experimental::filesystem;\n+  const std::string s = \"abc\";\n+  path p(s);\n+\n+  VERIFY( p.native() == s );\n+  VERIFY( p.c_str() == s );\n+  VERIFY( static_cast<std::string>(p) == s );\n+\n+  std::string s2 = p; // implicit conversion\n+  VERIFY( s2 == p.native() );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std::experimental::filesystem;\n+  const char* s = \"abc\";\n+  path p(s);\n+\n+  auto str = p.string<char>();\n+  VERIFY( str == u\"abc\" );\n+  VERIFY( str == p.string() );\n+\n+  auto strw = p.string<wchar_t>();\n+  VERIFY( strw == L\"abc\" );\n+  VERIFY( strw == p.wstring() );\n+\n+  auto str16 = p.string<char16_t>();\n+  VERIFY( str16 == u\"abc\" );\n+  VERIFY( str16 == p.u16string() );\n+\n+  auto str32 = p.string<char32_t>();\n+  VERIFY( str32 == U\"abc\" );\n+  VERIFY( str32 == p.u32string() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}