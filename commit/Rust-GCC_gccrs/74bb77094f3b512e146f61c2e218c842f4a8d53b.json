{"sha": "74bb77094f3b512e146f61c2e218c842f4a8d53b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiYjc3MDk0ZjNiNTEyZTE0NmY2MWMyZTIxOGM4NDJmNGE4ZDUzYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-10-21T21:14:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-10-21T21:14:06Z"}, "message": "re PR ipa/67056 (Wrong code generated)\n\n\tPR ipa/67056\n\t* ipa-polymorphic-call.c (possible_placement_new): If cur_offset\n\tis negative we don't know the type.\n\t(check_stmt_for_type_change): Skip constructors of non-polymorphic\n\ttypes as those won't help devirutalization.\n\t* g++.dg/ipa/pr67056.C: New testcase.\n\nFrom-SVN: r229148", "tree": {"sha": "12fd4877448080c5a10e84c2b07669d069128d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12fd4877448080c5a10e84c2b07669d069128d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74bb77094f3b512e146f61c2e218c842f4a8d53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bb77094f3b512e146f61c2e218c842f4a8d53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bb77094f3b512e146f61c2e218c842f4a8d53b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bb77094f3b512e146f61c2e218c842f4a8d53b/comments", "author": null, "committer": null, "parents": [{"sha": "1567db2f02e005b7a3349aedf0afb37c36260beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1567db2f02e005b7a3349aedf0afb37c36260beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1567db2f02e005b7a3349aedf0afb37c36260beb"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "bc3cfa7cb939f7c4399eac08c02ec45c7597afca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74bb77094f3b512e146f61c2e218c842f4a8d53b", "patch": "@@ -1,3 +1,11 @@\n+2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/67056\n+\t* ipa-polymorphic-call.c (possible_placement_new): If cur_offset\n+\tis negative we don't know the type.\n+\t(check_stmt_for_type_change): Skip constructors of non-polymorphic\n+\ttypes as those won't help devirutalization.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* fold-const.c (operand_equal_p): Add code matching empty"}, {"sha": "9ce86d1c7d49853b0fba8e64c2f48b916df7caa0", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=74bb77094f3b512e146f61c2e218c842f4a8d53b", "patch": "@@ -99,6 +99,8 @@ bool\n possible_placement_new (tree type, tree expected_type,\n \t\t\tHOST_WIDE_INT cur_offset)\n {\n+  if (cur_offset < 0)\n+    return true;\n   return ((TREE_CODE (type) != RECORD_TYPE\n \t   || !TYPE_BINFO (type)\n \t   || cur_offset >= POINTER_SIZE\n@@ -1418,7 +1420,21 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \t    && TYPE_SIZE (type)\n \t    && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n \t    && tree_fits_shwi_p (TYPE_SIZE (type))\n-\t    && tree_to_shwi (TYPE_SIZE (type)) + offset > tci->offset)\n+\t    && tree_to_shwi (TYPE_SIZE (type)) + offset > tci->offset\n+\t    /* Some inlined constructors may look as follows:\n+\t\t  _3 = operator new (16);\n+\t\t  MEM[(struct  &)_3] ={v} {CLOBBER};\n+\t\t  MEM[(struct CompositeClass *)_3]._vptr.CompositeClass\n+\t\t    = &MEM[(void *)&_ZTV14CompositeClass + 16B];\n+\t\t  _7 = &MEM[(struct CompositeClass *)_3].object;\n+\t\t  EmptyClass::EmptyClass (_7);\n+\n+\t       When determining dynamic type of _3 and because we stop at first\n+\t       dynamic type found, we would stop on EmptyClass::EmptyClass (_7).\n+\t       In this case the emptyclass is not even polymorphic and we miss\n+\t       it is contained in an outer type that is polymorphic.  */\n+\n+\t    && (tci->offset == offset || contains_polymorphic_type_p (type)))\n \t  {\n \t    record_known_type (tci, type, tci->offset - offset);\n \t    return true;"}, {"sha": "d2a7da62e8ca598e59dd0eb1d131cacae0ca4c80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74bb77094f3b512e146f61c2e218c842f4a8d53b", "patch": "@@ -1,3 +1,8 @@\n+2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/67056\n+\t* g++.dg/ipa/pr67056.C: New testcase.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/tree-ssa/operand-equal-1.c: Verify that empty constructors"}, {"sha": "f47323b6e5dcb1ae54ff411317d2c0786f8cd911", "filename": "gcc/testsuite/g++.dg/ipa/pr67056.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr67056.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bb77094f3b512e146f61c2e218c842f4a8d53b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr67056.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr67056.C?ref=74bb77094f3b512e146f61c2e218c842f4a8d53b", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c++11 -O3 -fdump-ipa-cp\"  } */\n+/* { dg-additional-options \"-fPIC\" { target fpic } } */\n+#include <memory>\n+\n+class EmptyClass {\n+public:\n+    EmptyClass();\n+};\n+\n+EmptyClass::EmptyClass() {\n+}\n+\n+class CompositeClass {\n+public:\n+    CompositeClass() {}\n+    virtual ~CompositeClass() {}\n+    EmptyClass object;\n+    bool bool1;\n+    bool bool2;\n+};\n+\n+bool boolFunc() {\n+    return true;\n+}\n+\n+static bool staticBoolFunc(CompositeClass * ptr) {\n+    std::unique_ptr<CompositeClass> up(ptr);\n+    (void)up;\n+\n+    return boolFunc();\n+}\n+\n+int main(int, char **) {\n+    staticBoolFunc(new CompositeClass);\n+    return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Speculative outer type:struct CompositeClass\" \"cp\"  } } */"}]}