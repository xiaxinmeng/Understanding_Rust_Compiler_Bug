{"sha": "8839907955ae3ad3240fc48dd082f5758e8dfa41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzOTkwNzk1NWFlM2FkMzI0MGZjNDhkZDA4MmY1NzU4ZThkZmE0MQ==", "commit": {"author": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-09-23T17:34:29Z"}, "committer": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2008-09-23T17:34:29Z"}, "message": "chrono: If _GLIBCXX_USE_MONOTONIC_CLOCK is defined...\n\n2008-09-23  Chris Fairles <cfairles@gcc.gnu.org>\n\n        * include/std/chrono: If _GLIBCXX_USE_MONOTONIC_CLOCK is defined, don't\n        typedef monotonic_clock to system_clock and instead declare new class.\n        * src/chrono.cc: Conditionally define monotonic_clock::now().\n        * include/std/condition_variable (wait_until): Throw exception if\n        __gthread_cond_timedwait returns with error other than timed_out. Use\n        system_clock as known clock type (__clock_t) and add overloads for known\n        and unknown clocks. In the unknown case, sync to the known clock.\n        Implement overload taking a predicate.\n        (wait_for): Implement overload taking a predicate.\n        * config/abi/pre/gnu.ver: Add exports for monotonic_clock.\n        * testsuite/30_threads/condition_variable_any/cons/assign_neg.cc: Modify\n        line numbers.\n        * testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n        Likewise.\n        * testsuite/30_threads/condition_variable/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/condition_variable/member/1.cc: New.\n        * testsuite/30_threads/condition_variable/member/2.cc: Likewise.\n\nFrom-SVN: r140603", "tree": {"sha": "35b70f711f4bbfa92cadbd4c246de21481316e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b70f711f4bbfa92cadbd4c246de21481316e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8839907955ae3ad3240fc48dd082f5758e8dfa41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8839907955ae3ad3240fc48dd082f5758e8dfa41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8839907955ae3ad3240fc48dd082f5758e8dfa41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8839907955ae3ad3240fc48dd082f5758e8dfa41/comments", "author": null, "committer": null, "parents": [{"sha": "1304d5813db7e623b4e64757bf95dc919d36c891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1304d5813db7e623b4e64757bf95dc919d36c891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1304d5813db7e623b4e64757bf95dc919d36c891"}], "stats": {"total": 330, "additions": 254, "deletions": 76}, "files": [{"sha": "92e526776dbbdcd9175e78154dad9fcc2c564865", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -1,3 +1,24 @@\n+2008-09-23  Chris Fairles <cfairles@gcc.gnu.org>\n+\n+\t* include/std/chrono: If _GLIBCXX_USE_MONOTONIC_CLOCK is defined, don't\n+\ttypedef monotonic_clock to system_clock and instead declare new class.\n+\t* src/chrono.cc: Conditionally define monotonic_clock::now().\n+\t* include/std/condition_variable (wait_until): Throw exception if\n+\t__gthread_cond_timedwait returns with error other than timed_out. Use\n+\tsystem_clock as known clock type (__clock_t) and add overloads for known\n+\tand unknown clocks. In the unknown case, sync to the known clock.\n+\tImplement overload taking a predicate.\n+\t(wait_for): Implement overload taking a predicate.\n+\t* config/abi/pre/gnu.ver: Add exports for monotonic_clock.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc: Modify\n+\tline numbers.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/member/1.cc: New.\n+\t* testsuite/30_threads/condition_variable/member/2.cc: Likewise.\n+\n 2008-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/37624"}, {"sha": "56fa9be3e6ef30a72993696c3c14e99d85be65c5", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -952,6 +952,8 @@ GLIBCXX_3.4.11 {\n     # chrono\n     _ZNSt6chrono12system_clock12is_monotonicE;\n     _ZNSt6chrono12system_clock3nowEv;\n+    _ZNSt6chrono15monotonic_clock12is_monotonicE;\n+    _ZNSt6chrono15monotonic_clock3nowEv;\n \n     # string/wstring initializer_list overloads\n     _ZNSs6appendESt16initializer_listIcE;"}, {"sha": "76dc93ce6745fe6561256f34724e2a318085780b", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -578,8 +578,7 @@ namespace std\n     /// system_clock\n     struct system_clock\n     {\n-#if defined(_GLIBCXX_USE_CLOCK_MONOTONIC) || \\\n-    defined(_GLIBCXX_USE_CLOCK_REALTIME)\n+#ifdef _GLIBCXX_USE_CLOCK_REALTIME\n       typedef chrono::nanoseconds     duration;      \n #elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n       typedef chrono::microseconds    duration;      \n@@ -591,11 +590,7 @@ namespace std\n       typedef duration::period period;\n       typedef chrono::time_point<system_clock, duration> time_point;\n \n-#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-      static const bool is_monotonic = true;\n-#else\n       static const bool is_monotonic = false;\n-#endif      \n \n       static time_point\n       now();   \n@@ -625,8 +620,24 @@ namespace std\n       */\n     };\n \n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    struct monotonic_clock\n+    {\n+      typedef chrono::nanoseconds duration;\n+      typedef duration::rep       rep;\n+      typedef duration::period    period;\n+      typedef chrono::time_point<monotonic_clock, duration> time_point;\n+\n+      static const bool is_monotonic = true;\n+\n+      static time_point\n+      now();\n+    };\n+#else\n+    typedef system_clock monotonic_clock;\n+#endif\n+\n     typedef system_clock high_resolution_clock;\n-    typedef system_clock monotonic_clock;    \n   }\n }\n "}, {"sha": "8325ff1aa952094f864c38d674af69b3c62b4db2", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -50,6 +50,8 @@ namespace std\n   /// condition_variable\n   class condition_variable\n   {\n+    typedef chrono::system_clock __clock_t;\n+\n   public:\n     typedef __gthread_cond_t* native_handle_type;\n \n@@ -76,44 +78,51 @@ namespace std\n \t  wait(__lock);\n       }\n   \n-    template<typename _Clock, typename _Duration>\n+    template<typename _Duration>\n       bool \n-      wait_until(unique_lock<mutex>& __lock, \n+      wait_until(unique_lock<mutex>& __lock,\n+\t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n+      { return __wait_until_impl(__lock, __atime); }\n+\n+    template<typename _Clock, typename _Duration>\n+      bool\n+      wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\tchrono::time_point<_Clock, chrono::seconds>  __s =\n-          chrono::time_point_cast<chrono::seconds>(__atime);\n+\t// DR 887 - Sync unknown clock to known clock.\n+\ttypename _Clock::time_point __c_entry = _Clock::now();\n+\t__clock_t::time_point __s_entry = __clock_t::now();\n+\tchrono::nanoseconds __delta = __atime - __c_entry;\t\n+\t__clock_t::time_point __s_atime = __s_entry + __delta;\n \n-\tchrono::nanoseconds __ns =\n-          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n-\n-        __gthread_time_t __ts = {\n-          static_cast<std::time_t>(__s.time_since_epoch().count()),\n-          static_cast<long>(__ns.count())\n-        };\n-\t\n-\t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(), &__ts);\n-\t\n-\treturn __clock_t::now() < __atime;\n+\treturn __wait_until_impl(__lock, __s_atime);\n       }\n \n     template<typename _Clock, typename _Duration, typename _Predicate>\n       bool\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime,\n-\t\t _Predicate __p);\n+\t\t _Predicate __p)\n+      {\n+\twhile(!__p())\n+\t  if(!wait_until(__lock, __atime))\n+\t    return __p();\n+\t\n+\treturn true;\n+      }\n \n     template<typename _Rep, typename _Period>\n       bool\n       wait_for(unique_lock<mutex>& __lock,\n \t       const chrono::duration<_Rep, _Period>& __rtime)\n-      { return __wait_for_impl(__rtime); }\n+      { return wait_until(__lock, __clock_t::now() + __rtime); }\n \n     template<typename _Rep, typename _Period, typename _Predicate>\n       bool\n       wait_for(unique_lock<mutex>& __lock,\n \t       const chrono::duration<_Rep, _Period>& __rtime,\n-\t       _Predicate __p);\n+\t       _Predicate __p)\n+      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }\n \n     native_handle_type \n     native_handle() \n@@ -123,35 +132,28 @@ namespace std\n     __gthread_cond_t _M_cond;\n     mutex _M_internal_mutex;\n \n-#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-    typedef chrono::monotonic_clock __clock_t;\n-#else\n-    typedef chrono::high_resolution_clock __clock_t;\n-#endif\n-\n-    template<typename _Rep, typename _Period>\n-      typename enable_if<\n-        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n-      __wait_for_impl(unique_lock<mutex>& __lock,\n-\t\t      const chrono::duration<_Rep, _Period>& __rtime)\n-      { \n-\t__clock_t::time_point __atime = __clock_t::now()\n-\t  + chrono::duration_cast<__clock_t::duration>(__rtime);\n+    template<typename _Clock, typename _Duration>\n+      bool\n+      __wait_until_impl(unique_lock<mutex>& __lock,\n+\t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+\tchrono::time_point<__clock_t, chrono::seconds> __s =\n+          chrono::time_point_cast<chrono::seconds>(__atime);\n \t\n-\treturn wait_until(__lock, __atime);\n-      }\n-    \n-    template<typename _Rep, typename _Period>\n-      typename enable_if<\n-        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n-      __wait_for_impl(unique_lock<mutex>& __lock,\n-\t\t      const chrono::duration<_Rep, _Period>& __rtime)\n-      { \n-\t__clock_t::time_point __atime = __clock_t::now()\n-\t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n+\tchrono::nanoseconds __ns =\n+          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\t\n+        __gthread_time_t __ts =\n+          {\n+            static_cast<std::time_t>(__s.time_since_epoch().count()),\n+            static_cast<long>(__ns.count())\n+          };\n \t\n-\treturn wait_until(__lock, __atime);\n-      }    \n+        __gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n+                                 &__ts);\n+\t\n+        return _Clock::now() < __atime;\n+      }\n   };\n \n   /// condition_variable_any"}, {"sha": "c44d793cb239fc24dcdebd8809eda69353eb4487", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -47,29 +47,37 @@ namespace std\n     system_clock::time_point\n     system_clock::now()\n     {\n-#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n-        timespec tp;\n-        // -EINVAL, -EFAULT\n-        clock_gettime(CLOCK_MONOTONIC, &tp);\n-        return time_point(duration(chrono::seconds(tp.tv_sec)\n-                                   + chrono::nanoseconds(tp.tv_nsec)));\n-#elif defined(_GLIBCXX_USE_CLOCK_REALTIME)\n-        timespec tp;\n-        // -EINVAL, -EFAULT\n-        clock_gettime(CLOCK_REALTIME, &tp);\n-        return time_point(duration(chrono::seconds(tp.tv_sec)\n-                                   + chrono::nanoseconds(tp.tv_nsec)));\n+#ifdef _GLIBCXX_USE_CLOCK_REALTIME\n+      timespec tp;\n+      // -EINVAL, -EFAULT\n+      clock_gettime(CLOCK_REALTIME, &tp);\n+      return time_point(duration(chrono::seconds(tp.tv_sec)\n+\t\t\t\t + chrono::nanoseconds(tp.tv_nsec)));\n #elif defined(_GLIBCXX_USE_GETTIMEOFDAY)\n-        timeval tv;\n-        // EINVAL, EFAULT\n-        gettimeofday(&tv, NULL);\n-        return time_point(duration(chrono::seconds(tv.tv_sec)\n-                                   + chrono::microseconds(tv.tv_usec)));\n+      timeval tv;\n+      // EINVAL, EFAULT\n+      gettimeofday(&tv, NULL);\n+      return time_point(duration(chrono::seconds(tv.tv_sec)\n+\t\t\t\t + chrono::microseconds(tv.tv_usec)));\n #else\n-        std::time_t __sec = std::time(0);\n-        return system_clock::from_time_t(__sec);\n+      std::time_t __sec = std::time(0);\n+      return system_clock::from_time_t(__sec);\n #endif\n     }\n+    \n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    const bool monotonic_clock::is_monotonic;\n+    \n+    monotonic_clock::time_point\n+    monotonic_clock::now()\n+    {\n+      timespec tp;\n+      // -EINVAL, -EFAULT\n+      clock_gettime(CLOCK_MONOTONIC, &tp);\n+      return time_point(duration(chrono::seconds(tp.tv_sec)\n+\t\t\t\t + chrono::nanoseconds(tp.tv_nsec)));\n+    }\n+#endif\n   }\n }\n "}, {"sha": "cdad0512e7305393261eb3ab8ef72190e81b47d3", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -1,4 +1,4 @@\n-// mutex -*- C++ -*-\n+// condition_variable -*- C++ -*-\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "601bd82eedf39a732b99a5d1765f0d318ec2aa48", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 60 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 62 }"}, {"sha": "b617c8af4ce45c64ccf9dc7998ec32c0a78ebbbd", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 59 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 61 }"}, {"sha": "a4fd9bcb3dbae3a29af9053641e4ac6a778ccb3f", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/member/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F1.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::chrono::microseconds ms(500);\n+      std::condition_variable c1;\n+      std::mutex m;\n+      std::unique_lock<std::mutex> l(m);\n+\n+      auto then = std::chrono::system_clock::now();\n+      bool result = c1.wait_for(l, ms);\n+      VERIFY( !result );\n+      VERIFY( (std::chrono::system_clock::now() - then) >= ms );\n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "25b3f2437d398363bc2b17101502a645eacdea1c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/member/2.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmember%2F2.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::chrono::microseconds ms(500);\n+      std::condition_variable c1;\n+      std::mutex m;\n+      std::unique_lock<std::mutex> l(m);\n+\n+      auto then = std::chrono::monotonic_clock::now();\n+      bool result = c1.wait_until(l, then + ms);\n+      VERIFY( !result );\n+      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n+      VERIFY( l.owns_lock() );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "7399ed6f961dddcd322d152fae7619051b78498d", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -41,4 +41,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 40 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 168 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 170 }"}, {"sha": "86c81a2b9144c38bb8959f544674096ccd86706f", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8839907955ae3ad3240fc48dd082f5758e8dfa41/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=8839907955ae3ad3240fc48dd082f5758e8dfa41", "patch": "@@ -40,4 +40,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 39 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 167 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 169 }"}]}