{"sha": "558d352a12750bdd8230b8bb4bf7775f977433dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4ZDM1MmExMjc1MGJkZDgyMzBiOGJiNGJmNzc3NWY5Nzc0MzNkZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T15:54:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T15:54:45Z"}, "message": "cris.c (TARGET_SETUP_INCOMING_VARARGS): New.\n\n\t* config/cris/cris.c (TARGET_SETUP_INCOMING_VARARGS): New.\n\t(cris_setup_incoming_varargs): Likewise.\n\t* config/cris/cris.h (SETUP_INCOMING_VARARGS): Remove.\n\nFrom-SVN: r76640", "tree": {"sha": "7db523f24743a8c78ff1588d12b4360f30627046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db523f24743a8c78ff1588d12b4360f30627046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/558d352a12750bdd8230b8bb4bf7775f977433dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558d352a12750bdd8230b8bb4bf7775f977433dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558d352a12750bdd8230b8bb4bf7775f977433dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558d352a12750bdd8230b8bb4bf7775f977433dd/comments", "author": null, "committer": null, "parents": [{"sha": "044701ce86d2eb1028ca5466ab10ac88638a8804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044701ce86d2eb1028ca5466ab10ac88638a8804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044701ce86d2eb1028ca5466ab10ac88638a8804"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "7dbfb88854f4e4d88e9fe22c302ddb5443a32ec3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=558d352a12750bdd8230b8bb4bf7775f977433dd", "patch": "@@ -1,3 +1,9 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/cris/cris.c (TARGET_SETUP_INCOMING_VARARGS): New.\n+\t(cris_setup_incoming_varargs): Likewise.\n+\t* config/cris/cris.h (SETUP_INCOMING_VARARGS): Remove.\n+\n 2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/ns32k/ns32k.c (TARGET_STRUCT_VALUE_RTX): New."}, {"sha": "1d5f16815347cf0800bdbd74dd11e8640ef0c1e5", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=558d352a12750bdd8230b8bb4bf7775f977433dd", "patch": "@@ -94,6 +94,9 @@ static struct machine_function * cris_init_machine_status (void);\n \n static rtx cris_struct_value_rtx (tree, int);\n \n+static void cris_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree type, int *, int);\n+\n static int cris_initial_frame_pointer_offset (void);\n \n static int saved_regs_mentioned (rtx);\n@@ -184,6 +187,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX cris_struct_value_rtx\n \n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS cris_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Predicate functions.  */\n@@ -3194,6 +3200,25 @@ cris_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (Pmode, CRIS_STRUCT_VALUE_REGNUM);\n }\n \n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.  */\n+\n+static void\n+cris_setup_incoming_varargs (CUMULATIVE_ARGS *ca,\n+\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t     tree type ATTRIBUTE_UNUSED,\n+\t\t\t     int *pretend_arg_size,\n+\t\t\t     int second_time)\n+{\n+  if (ca->regs < CRIS_MAX_ARGS_IN_REGS)\n+    *pretend_arg_size = (CRIS_MAX_ARGS_IN_REGS - ca->regs) * 4;\n+  if (TARGET_PDEBUG)\n+    {\n+      fprintf (asm_out_file,\n+\t       \"\\n; VA:: ANSI: %d args before, anon @ #%d, %dtime\\n\",\n+\t       ca->regs, *pretend_arg_size, second_time);\n+    }\n+}\n+\n #if 0\n /* Various small functions to replace macros.  Only called from a\n    debugger.  They might collide with gcc functions or system functions,"}, {"sha": "34fb6f9f73053dbd16c1470838b8444dd5b4fdea", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558d352a12750bdd8230b8bb4bf7775f977433dd/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=558d352a12750bdd8230b8bb4bf7775f977433dd", "patch": "@@ -1022,28 +1022,6 @@ struct cum_args {int regs;};\n \n /* Node: Varargs */\n \n-/* We save the register number of the first anonymous argument in\n-   first_vararg_reg, and take care of this in the function prologue.\n-   This behavior is used by at least one more port (the ARM?), but\n-   may be unsafe when compiling nested functions.  (With varargs? Hairy.)\n-   Note that nested-functions is a GNU C extension.\n-\n-   FIXME: We can actually put the size in PRETEND and deduce the number\n-   of registers from it in the prologue and epilogue.  */\n-#define SETUP_INCOMING_VARARGS(ARGSSF, MODE, TYPE, PRETEND, SECOND)\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((ARGSSF).regs < (CRIS_MAX_ARGS_IN_REGS))\t\t\t\\\n-\t(PRETEND) = ((CRIS_MAX_ARGS_IN_REGS) - (ARGSSF).regs) * 4;\t\\\n-      if (TARGET_PDEBUG)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (asm_out_file,\t\t\t\t\t\\\n-\t\t   \"\\n; VA:: ANSI: %d args before, anon @ #%d, %dtime\\n\", \\\n-\t\t   (ARGSSF).regs, PRETEND, SECOND);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* FIXME: This and other EXPAND_BUILTIN_VA_... target macros are not\n    documented, although used by several targets.  */\n #define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\"}]}