{"sha": "ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0NTcyNGFjZDAzZWYzZTFhYjYxYTRlNGY0MjI4N2NiYTdmNjZjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-04T20:15:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-04T20:15:01Z"}, "message": "P0646R1 Improving the Return Value of Erase-Like Algorithms I\n\nIn C++2a the remove, remove_if and unique members of std::list and\nstd::forward_list have been changed to return the number of elements\nremoved. This is an ABI change for the remove members and the\nnon-template unique members, so an abi-tag is used to give those symbols\nnew mangled names in C++2a mode. For the function templates the return\ntype is part of the mangled name so no abi-tag is needed.\n\n\t* include/bits/forward_list.h (__cpp_lib_list_remove_return_type):\n\tDefine.\n\t(forward_list::__remove_return_type): Define typedef as size_type or\n\tvoid, according to __cplusplus value.\n\t(_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n\tempty, according to __cplusplus value.\n\t(forward_list::remove, forward_list::unique): Use typedef and macro\n\tto change return type and add abi-tag for C++2a.\n\t(forward_list::remove_if<Pred>, forward_list::unique<BinPred>): Use\n\ttypedef to change return type for C++2a.\n\t* include/bits/forward_list.tcc (_GLIBCXX20_ONLY): Define macro.\n\t(forward_list::remove, forward_list::remove_if<Pred>)\n\t(forward_list::unique<BinPred>): Return number of removed elements\n\tfor C++2a.\n\t* include/bits/list.tcc (_GLIBCXX20_ONLY): Define macro.\n\t(list::remove, list::unique, list::remove_if<Predicate>)\n\t(list::unique<BinaryPredicate>): Return number of removed elements\n\tfor C++2a.\n\t* include/bits/stl_list.h (__cpp_lib_list_remove_return_type): Define.\n\t(list::__remove_return_type): Define typedef as size_type or\n\tvoid, according to __cplusplus value.\n\t(_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n\tempty, according to __cplusplus value.\n\t(list::remove, list::unique): Use typedef and macro to change return\n\ttype and add abi-tag for C++2a.\n\t(list::remove_if<Predicate>, list::unique<BinaryPredicate>): Use\n\ttypedef to change return type for C++2a.\n\t* include/std/version (__cpp_lib_list_remove_return_type): Define.\n\t* testsuite/23_containers/forward_list/operations/\n\tremove_cxx20_return.cc: New.\n\t* testsuite/23_containers/forward_list/operations/\n\tunique_cxx20_return.cc: New.\n\nFrom-SVN: r262423", "tree": {"sha": "f8187ffa593c73538b8ab7645b745b26ab555289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8187ffa593c73538b8ab7645b745b26ab555289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8dd9f2745d6931f70b7a5f7e46f8e2032d5912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8dd9f2745d6931f70b7a5f7e46f8e2032d5912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8dd9f2745d6931f70b7a5f7e46f8e2032d5912"}], "stats": {"total": 424, "additions": 394, "deletions": 30}, "files": [{"sha": "511a42ed9e6800e702b2511b5e9bf34954efe8cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -1,5 +1,39 @@\n 2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP0646R1 Improving the Return Value of Erase-Like Algorithms I\n+\t* include/bits/forward_list.h (__cpp_lib_list_remove_return_type):\n+\tDefine.\n+\t(forward_list::__remove_return_type): Define typedef as size_type or\n+\tvoid, according to __cplusplus value.\n+\t(_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n+\tempty, according to __cplusplus value.\n+\t(forward_list::remove, forward_list::unique): Use typedef and macro\n+\tto change return type and add abi-tag for C++2a.\n+\t(forward_list::remove_if<Pred>, forward_list::unique<BinPred>): Use\n+\ttypedef to change return type for C++2a.\n+\t* include/bits/forward_list.tcc (_GLIBCXX20_ONLY): Define macro.\n+\t(forward_list::remove, forward_list::remove_if<Pred>)\n+\t(forward_list::unique<BinPred>): Return number of removed elements\n+\tfor C++2a.\n+\t* include/bits/list.tcc (_GLIBCXX20_ONLY): Define macro.\n+\t(list::remove, list::unique, list::remove_if<Predicate>)\n+\t(list::unique<BinaryPredicate>): Return number of removed elements\n+\tfor C++2a.\n+\t* include/bits/stl_list.h (__cpp_lib_list_remove_return_type): Define.\n+\t(list::__remove_return_type): Define typedef as size_type or\n+\tvoid, according to __cplusplus value.\n+\t(_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG): Define macro as abi-tag or\n+\tempty, according to __cplusplus value.\n+\t(list::remove, list::unique): Use typedef and macro to change return\n+\ttype and add abi-tag for C++2a.\n+\t(list::remove_if<Predicate>, list::unique<BinaryPredicate>): Use\n+\ttypedef to change return type for C++2a.\n+\t* include/std/version (__cpp_lib_list_remove_return_type): Define.\n+\t* testsuite/23_containers/forward_list/operations/\n+\tremove_cxx20_return.cc: New.\n+\t* testsuite/23_containers/forward_list/operations/\n+\tunique_cxx20_return.cc: New.\n+\n \tP0458R2 Checking for Existence of an Element in Associative Containers\n \t* include/bits/stl_map.h (map::contains): Add for C++2a.\n \t* include/bits/stl_multimap.h (multimap::contains): Likewise."}, {"sha": "84a4ad4d5dc8514200da160f1ac5b6dcbe71af92", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -1156,6 +1156,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_splice_after(__pos, __before, __last); }\n       // @}\n \n+    private:\n+#if __cplusplus > 201703L\n+# define __cpp_lib_list_remove_return_type 201806L\n+      using __remove_return_type = size_type;\n+# define _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG \\\n+      __attribute__((__abi_tag__(\"__cxx20\")))\n+#else\n+      using __remove_return_type = void;\n+# define _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+#endif\n+    public:\n+\n       /**\n        *  @brief  Remove all elements equal to value.\n        *  @param  __val  The value to remove.\n@@ -1167,7 +1179,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n-      void\n+      _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       remove(const _Tp& __val);\n \n       /**\n@@ -1182,7 +1195,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  responsibility.\n        */\n       template<typename _Pred>\n-\tvoid\n+\t__remove_return_type\n \tremove_if(_Pred __pred);\n \n       /**\n@@ -1195,9 +1208,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the pointed-to memory is not touched in any way.  Managing\n        *  the pointer is the user's responsibility.\n        */\n-      void\n+      _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       unique()\n-      { unique(std::equal_to<_Tp>()); }\n+      { return unique(std::equal_to<_Tp>()); }\n+\n+#undef _GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG\n \n       /**\n        *  @brief  Remove consecutive elements satisfying a predicate.\n@@ -1212,7 +1228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Managing the pointer is the user's responsibility.\n        */\n       template<typename _BinPred>\n-\tvoid\n+\t__remove_return_type\n \tunique(_BinPred __binary_pred);\n \n       /**"}, {"sha": "8a62a5ee748b63432a4b7e664a523dd257ca073f", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -278,11 +278,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  return iterator(const_cast<_Node_base*>(__pos._M_node));\n       }\n \n+#if __cplusplus > 201703L\n+# define _GLIBCXX20_ONLY(__expr) __expr\n+#else\n+# define _GLIBCXX20_ONLY(__expr)\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n-    void\n+    auto\n     forward_list<_Tp, _Alloc>::\n-    remove(const _Tp& __val)\n+    remove(const _Tp& __val) -> __remove_return_type\n     {\n+      size_type __removed __attribute__((__unused__)) = 0;\n       _Node_base* __curr = &this->_M_impl._M_head;\n       _Node_base* __extra = nullptr;\n \n@@ -293,6 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      if (__tmp->_M_valptr() != std::__addressof(__val))\n \t\t{\n \t\t  this->_M_erase_after(__curr);\n+\t\t  _GLIBCXX20_ONLY( __removed++ );\n \t\t  continue;\n \t\t}\n \t      else\n@@ -302,46 +310,62 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n \n       if (__extra)\n-\tthis->_M_erase_after(__extra);\n+\t{\n+\t  this->_M_erase_after(__extra);\n+\t  _GLIBCXX20_ONLY( __removed++ );\n+\t}\n+      return _GLIBCXX20_ONLY( __removed );\n     }\n \n   template<typename _Tp, typename _Alloc>\n     template<typename _Pred>\n-      void\n+      auto\n       forward_list<_Tp, _Alloc>::\n-      remove_if(_Pred __pred)\n+      remove_if(_Pred __pred) -> __remove_return_type\n       {\n+\tsize_type __removed __attribute__((__unused__)) = 0;\n \t_Node_base* __curr = &this->_M_impl._M_head;\n \twhile (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n \t  {\n \t    if (__pred(*__tmp->_M_valptr()))\n-\t      this->_M_erase_after(__curr);\n+\t      {\n+\t\tthis->_M_erase_after(__curr);\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n \t    else\n \t      __curr = __curr->_M_next;\n \t  }\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n   template<typename _Tp, typename _Alloc>\n     template<typename _BinPred>\n-      void\n+      auto\n       forward_list<_Tp, _Alloc>::\n-      unique(_BinPred __binary_pred)\n+      unique(_BinPred __binary_pred) -> __remove_return_type\n       {\n \titerator __first = begin();\n \titerator __last = end();\n \tif (__first == __last)\n-\t  return;\n+\t  return _GLIBCXX20_ONLY(0);\n+\tsize_type __removed __attribute__((__unused__)) = 0;\n \titerator __next = __first;\n \twhile (++__next != __last)\n \t{\n \t  if (__binary_pred(*__first, *__next))\n-\t    erase_after(__first);\n+\t    {\n+\t      erase_after(__first);\n+\t      _GLIBCXX20_ONLY( __removed++ );\n+\t    }\n \t  else\n \t    __first = __next;\n \t  __next = __first;\n \t}\n+        return _GLIBCXX20_ONLY( __removed );\n       }\n \n+#undef _GLIBCXX20_ONLY\n+\n   template<typename _Tp, typename _Alloc>\n     template<typename _Comp>\n       void"}, {"sha": "cdd95527ef576c7822f46daa1f014e678896f320", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -320,11 +320,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n           insert(__last1, __first2, __last2);\n       }\n \n+#if __cplusplus > 201703L\n+# define _GLIBCXX20_ONLY(__expr) __expr\n+#else\n+# define _GLIBCXX20_ONLY(__expr)\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n-    void\n+    typename list<_Tp, _Alloc>::__remove_return_type\n     list<_Tp, _Alloc>::\n     remove(const value_type& __value)\n     {\n+      size_type __removed __attribute__((__unused__)) = 0;\n       iterator __first = begin();\n       iterator __last = end();\n       iterator __extra = __last;\n@@ -338,34 +345,46 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      // 526. Is it undefined if a function in the standard changes\n \t      // in parameters?\n \t      if (std::__addressof(*__first) != std::__addressof(__value))\n-\t\t_M_erase(__first);\n+\t\t{\n+\t\t  _M_erase(__first);\n+\t\t  _GLIBCXX20_ONLY( __removed++ );\n+\t\t}\n \t      else\n \t\t__extra = __first;\n \t    }\n \t  __first = __next;\n \t}\n       if (__extra != __last)\n-\t_M_erase(__extra);\n+\t{\n+\t  _M_erase(__extra);\n+\t  _GLIBCXX20_ONLY( __removed++ );\n+\t}\n+      return _GLIBCXX20_ONLY( __removed );\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    void\n+    typename list<_Tp, _Alloc>::__remove_return_type\n     list<_Tp, _Alloc>::\n     unique()\n     {\n       iterator __first = begin();\n       iterator __last = end();\n       if (__first == __last)\n-\treturn;\n+\treturn _GLIBCXX20_ONLY( 0 );\n+      size_type __removed __attribute__((__unused__)) = 0;\n       iterator __next = __first;\n       while (++__next != __last)\n \t{\n \t  if (*__first == *__next)\n-\t    _M_erase(__next);\n+\t    {\n+\t      _M_erase(__next);\n+\t      _GLIBCXX20_ONLY( __removed++ );\n+\t    }\n \t  else\n \t    __first = __next;\n \t  __next = __first;\n \t}\n+      return _GLIBCXX20_ONLY( __removed );\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -510,43 +529,55 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n     template <typename _Predicate>\n-      void\n+      typename list<_Tp, _Alloc>::__remove_return_type\n       list<_Tp, _Alloc>::\n       remove_if(_Predicate __pred)\n       {\n+\tsize_type __removed __attribute__((__unused__)) = 0;\n         iterator __first = begin();\n         iterator __last = end();\n         while (__first != __last)\n \t  {\n \t    iterator __next = __first;\n \t    ++__next;\n \t    if (__pred(*__first))\n-\t      _M_erase(__first);\n+\t      {\n+\t\t_M_erase(__first);\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n \t    __first = __next;\n \t  }\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n   template<typename _Tp, typename _Alloc>\n     template <typename _BinaryPredicate>\n-      void\n+      typename list<_Tp, _Alloc>::__remove_return_type\n       list<_Tp, _Alloc>::\n       unique(_BinaryPredicate __binary_pred)\n       {\n         iterator __first = begin();\n         iterator __last = end();\n         if (__first == __last)\n-\t  return;\n+\t  return _GLIBCXX20_ONLY(0);\n+        size_type __removed __attribute__((__unused__)) = 0;\n         iterator __next = __first;\n         while (++__next != __last)\n \t  {\n \t    if (__binary_pred(*__first, *__next))\n-\t      _M_erase(__next);\n+\t      {\n+\t\t_M_erase(__next);\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+\t      }\n \t    else\n \t      __first = __next;\n \t    __next = __first;\n \t  }\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n+#undef _GLIBCXX20_ONLY\n+\n   template<typename _Tp, typename _Alloc>\n     template <typename _StrictWeakOrdering>\n       void"}, {"sha": "47749142e0e38b37cc678bd489040ee7fb37ab02", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -1673,6 +1673,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n \n+    private:\n+#if __cplusplus > 201703L\n+# define __cpp_lib_list_remove_return_type 201806L\n+      typedef size_type __remove_return_type;\n+# define _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG \\\n+      __attribute__((__abi_tag__(\"__cxx20\")))\n+#else\n+      typedef void __remove_return_type;\n+# define _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+#endif\n+    public:\n+\n       /**\n        *  @brief  Remove all elements equal to value.\n        *  @param  __value  The value to remove.\n@@ -1684,7 +1696,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n-      void\n+      _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       remove(const _Tp& __value);\n \n       /**\n@@ -1699,7 +1712,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  responsibility.\n        */\n       template<typename _Predicate>\n-\tvoid\n+\t__remove_return_type\n \tremove_if(_Predicate);\n \n       /**\n@@ -1712,7 +1725,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the pointed-to memory is not touched in any way.  Managing\n        *  the pointer is the user's responsibility.\n        */\n-      void\n+      _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+      __remove_return_type\n       unique();\n \n       /**\n@@ -1728,9 +1742,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Managing the pointer is the user's responsibility.\n        */\n       template<typename _BinaryPredicate>\n-\tvoid\n+\t__remove_return_type\n \tunique(_BinaryPredicate);\n \n+#undef _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n+\n       /**\n        *  @brief  Merge sorted lists.\n        *  @param  __x  Sorted list to merge."}, {"sha": "a70c73fd12be45f3b2f24c0b4602411604685e5a", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -105,6 +105,7 @@\n #define __cpp_lib_is_swappable 201603\n #define __cpp_lib_launder 201606\n #define __cpp_lib_lcm 201606\n+#define __cpp_lib_list_remove_return_type 201806L\n #define __cpp_lib_logical_traits 201510\n #define __cpp_lib_make_from_tuple 201606\n #define __cpp_lib_map_insertion 201411"}, {"sha": "9b46817078ee679256fa9dc48f56cf2181307c86", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/remove_cxx20_return.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_cxx20_return.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_cxx20_return.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_cxx20_return.cc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::forward_list<int>;\n+\n+void\n+test01()\n+{\n+  test_type x{1, 2, 3, 4, 3, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.remove(0)), test_type::size_type>);\n+  test_type::size_type r = x.remove(0);\n+  VERIFY( r == 0 );\n+  r = x.remove(1);\n+  VERIFY( r == 2 );\n+  r = x.remove(1);\n+  VERIFY( r == 0 );\n+  r = x.remove(4);\n+  VERIFY( r == 1 );\n+}\n+\n+void\n+test02()\n+{\n+  int i = 0;\n+  auto pred = [&i](int val) { return val == i; };\n+  test_type x{1, 2, 3, 4, 3, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.remove_if(pred)),\n+\t\t\t       test_type::size_type>);\n+  test_type::size_type r = x.remove_if(pred);\n+  VERIFY( r == 0 );\n+  i = 1;\n+  r = x.remove_if(pred);\n+  VERIFY( r == 2 );\n+  r = x.remove_if(pred);\n+  VERIFY( r == 0 );\n+  i = 4;\n+  r = x.remove_if(pred);\n+  VERIFY( r == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "066330c4148d3680d0bce86761dbdee3dce3e6c6", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/unique_cxx20_return.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Funique_cxx20_return.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Funique_cxx20_return.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Funique_cxx20_return.cc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::forward_list<int>;\n+\n+void\n+test01()\n+{\n+  test_type x{1, 2, 2, 4, 4, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.unique()), test_type::size_type>);\n+  test_type::size_type r = x.unique();\n+  VERIFY( r == 2 );\n+  r = x.unique();\n+  VERIFY( r == 0 );\n+}\n+\n+void\n+test02()\n+{\n+  auto pred = [](int val, int prev) { return val == prev; };\n+  test_type x{1, 2, 2, 4, 4, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.unique(pred)),\n+\t\t\t       test_type::size_type>);\n+  test_type::size_type r = x.unique(pred);\n+  VERIFY( r == 2 );\n+  r = x.unique(pred);\n+  VERIFY( r == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "290646106cfc62fc2208cd49624906eeeaa5b6d8", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/remove_cxx20_return.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fremove_cxx20_return.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fremove_cxx20_return.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Fremove_cxx20_return.cc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::list<int>;\n+\n+void\n+test01()\n+{\n+  test_type x{1, 2, 3, 4, 3, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.remove(0)), test_type::size_type>);\n+  test_type::size_type r = x.remove(0);\n+  VERIFY( r == 0 );\n+  r = x.remove(1);\n+  VERIFY( r == 2 );\n+  r = x.remove(1);\n+  VERIFY( r == 0 );\n+  r = x.remove(4);\n+  VERIFY( r == 1 );\n+}\n+\n+void\n+test02()\n+{\n+  int i = 0;\n+  auto pred = [&i](int val) { return val == i; };\n+  test_type x{1, 2, 3, 4, 3, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.remove_if(pred)),\n+\t\t\t       test_type::size_type>);\n+  test_type::size_type r = x.remove_if(pred);\n+  VERIFY( r == 0 );\n+  i = 1;\n+  r = x.remove_if(pred);\n+  VERIFY( r == 2 );\n+  r = x.remove_if(pred);\n+  VERIFY( r == 0 );\n+  i = 4;\n+  r = x.remove_if(pred);\n+  VERIFY( r == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "90d6dd155ff4b47e1ca241beb9c8bd43a402d8b8", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/unique_cxx20_return.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Funique_cxx20_return.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef45724acd03ef3e1ab61a4e4f42287cba7f66c4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Funique_cxx20_return.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2Funique_cxx20_return.cc?ref=ef45724acd03ef3e1ab61a4e4f42287cba7f66c4", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::list<int>;\n+\n+void\n+test01()\n+{\n+  test_type x{1, 2, 2, 4, 4, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.unique()), test_type::size_type>);\n+  test_type::size_type r = x.unique();\n+  VERIFY( r == 2 );\n+  r = x.unique();\n+  VERIFY( r == 0 );\n+}\n+\n+void\n+test02()\n+{\n+  auto pred = [](int val, int prev) { return val == prev; };\n+  test_type x{1, 2, 2, 4, 4, 2, 1};\n+  static_assert(std::is_same_v<decltype(x.unique(pred)),\n+\t\t\t       test_type::size_type>);\n+  test_type::size_type r = x.unique(pred);\n+  VERIFY( r == 2 );\n+  r = x.unique(pred);\n+  VERIFY( r == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}