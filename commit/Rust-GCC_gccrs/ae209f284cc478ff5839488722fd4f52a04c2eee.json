{"sha": "ae209f284cc478ff5839488722fd4f52a04c2eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyMDlmMjg0Y2M0NzhmZjU4Mzk0ODg3MjJmZDRmNTJhMDRjMmVlZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-01T18:24:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-01T18:24:33Z"}, "message": "re PR c++/18064 (gcc accepts different pointer types as covariant return types)\n\ncp:\n\tPR c++/18064\n\t* search.c (check_final_overrider): Deprecate gnu covariant extension.\ndoc:\n\tPR c++/18064\n\t* doc/extend.texi (Deprecated Features): Deprecate G++ covariant\n\textension.\ntestsuite:\n\tPR c++/18064\n\t* g++.old-deja/g++.mike/p811.C: Avoid covariant extension.\n\nFrom-SVN: r89946", "tree": {"sha": "eb7bbcedef1f0538d4cee0e79e23f9f2499a79bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7bbcedef1f0538d4cee0e79e23f9f2499a79bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae209f284cc478ff5839488722fd4f52a04c2eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae209f284cc478ff5839488722fd4f52a04c2eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae209f284cc478ff5839488722fd4f52a04c2eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae209f284cc478ff5839488722fd4f52a04c2eee/comments", "author": null, "committer": null, "parents": [{"sha": "464f49d80df8a5232a956a1ccc8ef78bd25b0110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464f49d80df8a5232a956a1ccc8ef78bd25b0110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464f49d80df8a5232a956a1ccc8ef78bd25b0110"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "067be2934f880f3484afae93c6829487c6adc33a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -1,3 +1,9 @@\n+2004-11-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/18064\n+\t* doc/extend.texi (Deprecated Features): Deprecate G++ covariant\n+\textension.\n+\n 2004-10-16  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/17672"}, {"sha": "022148e916565bb430447c9359a58b8fd1755975", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -1,3 +1,8 @@\n+2004-11-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/18064\n+\t* search.c (check_final_overrider): Deprecate gnu covariant extension.\n+\n 2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 9/n"}, {"sha": "9e6178ea2868d7a5a17ffa92d52de71994507703", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -1830,6 +1830,12 @@ check_final_overrider (tree overrider, tree basefn)\n \t  over_return = non_reference (TREE_TYPE (over_type));\n \t  if (CLASS_TYPE_P (over_return))\n \t    fail = 2;\n+\t  else\n+\t    {\n+\t      cp_warning_at (\"deprecated covariant return type for %q#D\",\n+\t\t\t     overrider);\n+\t      cp_warning_at (\"  overriding %q#D\", basefn);\n+\t    }\n \t}\n       else\n \tfail = 2;"}, {"sha": "a4cbb2f69c0a8d18493fd5f1360b7c1756793157", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -9711,6 +9711,11 @@ parameters, as C++ demands.  This feature has been removed, except where\n it is required for backwards compatibility @xref{Backwards Compatibility}.\n @end table\n \n+G++ allows a virtual function returning @samp{void *} to be overridden\n+by one returning a different pointer type.  This extension to the\n+covariant return type rules is now deprecated and will be removed from a\n+future version.\n+\n The named return value extension has been deprecated, and is now\n removed from G++.\n "}, {"sha": "3b08af5d0471bbdf1b46d583ffea018733e22065", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -1,3 +1,8 @@\n+2004-11-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/18064\n+\t* g++.old-deja/g++.mike/p811.C: Avoid covariant extension.\n+\n 2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15172"}, {"sha": "260c6459cb870794444caf2380d566ebe62eab6c", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p811.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae209f284cc478ff5839488722fd4f52a04c2eee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C?ref=ae209f284cc478ff5839488722fd4f52a04c2eee", "patch": "@@ -511,14 +511,14 @@ inline istream& WS(istream& str) { return ws(str); }\n class Y {\n public:\n     Y() {}\n-    virtual const char *stringify() = 0;\n+  virtual const char *stringify() = 0;\n     virtual char *stringify2() const = 0; // { dg-error \"overriding\" } \n };\n \n class X: public Y {\n public:\n     X(): Y() {}\n-    char *stringify();\t\t// { dg-error \"candidate\" }\n+    const char *stringify();\t\t// { dg-error \"candidate\" }\n     const char *stringify2() const;  // { dg-error \"candidate|conflicting return type\" }\n };\n "}]}