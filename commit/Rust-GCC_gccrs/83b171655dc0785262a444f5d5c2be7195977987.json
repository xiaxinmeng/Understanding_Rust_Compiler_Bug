{"sha": "83b171655dc0785262a444f5d5c2be7195977987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiMTcxNjU1ZGMwNzg1MjYyYTQ0NGY1ZDVjMmJlNzE5NTk3Nzk4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-20T08:08:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-20T08:08:28Z"}, "message": "fold-const: Handle bitfields in native_encode_initializer [PR93121]\n\nWhen working on __builtin_bit_cast that needs to handle bitfields too,\nI've made the following change to handle at least some bitfields in\nnative_encode_initializer (those that have integral representative).\n\n2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/93121\n\t* fold-const.c (native_encode_initializer): Handle bit-fields.\n\n\t* gcc.dg/tree-ssa/pr93121-1.c: New test.", "tree": {"sha": "9147f91e49fe9dd15c6885d5d4ec1948f448f88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9147f91e49fe9dd15c6885d5d4ec1948f448f88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b171655dc0785262a444f5d5c2be7195977987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b171655dc0785262a444f5d5c2be7195977987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b171655dc0785262a444f5d5c2be7195977987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b171655dc0785262a444f5d5c2be7195977987/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0251a7eef9638f4c1e6a96af60d9607c37821b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251a7eef9638f4c1e6a96af60d9607c37821b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0251a7eef9638f4c1e6a96af60d9607c37821b14"}], "stats": {"total": 170, "additions": 167, "deletions": 3}, "files": [{"sha": "cfae846b149ce18b336f3f9b96c1972a92bb52c9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 111, "deletions": 3, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b171655dc0785262a444f5d5c2be7195977987/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b171655dc0785262a444f5d5c2be7195977987/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=83b171655dc0785262a444f5d5c2be7195977987", "patch": "@@ -8047,6 +8047,7 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t      tree field = ce->index;\n \t      tree val = ce->value;\n \t      HOST_WIDE_INT pos, fieldsize;\n+\t      unsigned HOST_WIDE_INT bpos = 0, epos = 0;\n \n \t      if (field == NULL_TREE)\n \t\treturn 0;\n@@ -8066,15 +8067,122 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t      if (fieldsize == 0)\n \t\tcontinue;\n \n+\t      if (DECL_BIT_FIELD (field))\n+\t\t{\n+\t\t  if (!tree_fits_uhwi_p (DECL_FIELD_BIT_OFFSET (field)))\n+\t\t    return 0;\n+\t\t  fieldsize = TYPE_PRECISION (TREE_TYPE (field));\n+\t\t  bpos = tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field));\n+\t\t  if (bpos % BITS_PER_UNIT)\n+\t\t    bpos %= BITS_PER_UNIT;\n+\t\t  else\n+\t\t    bpos = 0;\n+\t\t  fieldsize += bpos;\n+\t\t  epos = fieldsize % BITS_PER_UNIT;\n+\t\t  fieldsize += BITS_PER_UNIT - 1;\n+\t\t  fieldsize /= BITS_PER_UNIT;\n+\t\t}\n+\n \t      if (off != -1 && pos + fieldsize <= off)\n \t\tcontinue;\n \n-\t      if (DECL_BIT_FIELD (field))\n-\t\treturn 0;\n-\n \t      if (val == NULL_TREE)\n \t\tcontinue;\n \n+\t      if (DECL_BIT_FIELD (field))\n+\t\t{\n+\t\t  /* FIXME: Handle PDP endian.  */\n+\t\t  if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+\t\t    return 0;\n+\n+\t\t  tree repr = DECL_BIT_FIELD_REPRESENTATIVE (field);\n+\t\t  if (repr == NULL_TREE\n+\t\t      || TREE_CODE (val) != INTEGER_CST\n+\t\t      || !INTEGRAL_TYPE_P (TREE_TYPE (repr)))\n+\t\t    return 0;\n+\n+\t\t  HOST_WIDE_INT rpos = int_byte_position (repr);\n+\t\t  if (rpos > pos)\n+\t\t    return 0;\n+\t\t  wide_int w = wi::to_wide (val,\n+\t\t\t\t\t    TYPE_PRECISION (TREE_TYPE (repr)));\n+\t\t  int diff = (TYPE_PRECISION (TREE_TYPE (repr))\n+\t\t\t      - TYPE_PRECISION (TREE_TYPE (field)));\n+\t\t  HOST_WIDE_INT bitoff = (pos - rpos) * BITS_PER_UNIT + bpos;\n+\t\t  if (!BYTES_BIG_ENDIAN)\n+\t\t    w = wi::lshift (w, bitoff);\n+\t\t  else\n+\t\t    w = wi::lshift (w, diff - bitoff);\n+\t\t  val = wide_int_to_tree (TREE_TYPE (repr), w);\n+\n+\t\t  unsigned char buf[MAX_BITSIZE_MODE_ANY_INT\n+\t\t\t\t    / BITS_PER_UNIT + 1];\n+\t\t  int l = native_encode_int (val, buf, sizeof buf, 0);\n+\t\t  if (l * BITS_PER_UNIT != TYPE_PRECISION (TREE_TYPE (repr)))\n+\t\t    return 0;\n+\n+\t\t  if (ptr == NULL)\n+\t\t    continue;\n+\n+\t\t  /* If the bitfield does not start at byte boundary, handle\n+\t\t     the partial byte at the start.  */\n+\t\t  if (bpos\n+\t\t      && (off == -1 || (pos >= off && len >= 1)))\n+\t\t    {\n+\t\t      if (!BYTES_BIG_ENDIAN)\n+\t\t\t{\n+\t\t\t  int mask = (1 << bpos) - 1;\n+\t\t\t  buf[pos - rpos] &= ~mask;\n+\t\t\t  buf[pos - rpos] |= ptr[pos - o] & mask;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  int mask = (1 << (BITS_PER_UNIT - bpos)) - 1;\n+\t\t\t  buf[pos - rpos] &= mask;\n+\t\t\t  buf[pos - rpos] |= ptr[pos - o] & ~mask;\n+\t\t\t}\n+\t\t    }\n+\t\t  /* If the bitfield does not end at byte boundary, handle\n+\t\t     the partial byte at the end.  */\n+\t\t  if (epos\n+\t\t      && (off == -1\n+\t\t\t  || pos + fieldsize <= (HOST_WIDE_INT) off + len))\n+\t\t    {\n+\t\t      if (!BYTES_BIG_ENDIAN)\n+\t\t\t{\n+\t\t\t  int mask = (1 << epos) - 1;\n+\t\t\t  buf[pos - rpos + fieldsize - 1] &= mask;\n+\t\t\t  buf[pos - rpos + fieldsize - 1]\n+\t\t\t    |= ptr[pos + fieldsize - 1 - o] & ~mask;\n+\t\t\t}\n+\t\t       else\n+\t\t\t{\n+\t\t\t  int mask = (1 << (BITS_PER_UNIT - epos)) - 1;\n+\t\t\t  buf[pos - rpos + fieldsize - 1] &= ~mask;\n+\t\t\t  buf[pos - rpos + fieldsize - 1]\n+\t\t\t    |= ptr[pos + fieldsize - 1 - o] & mask;\n+\t\t\t}\n+\t\t    }\n+\t\t  if (off == -1\n+\t\t      || (pos >= off\n+\t\t\t  && (pos + fieldsize <= (HOST_WIDE_INT) off + len)))\n+\t\t    memcpy (ptr + pos - o, buf + (pos - rpos), fieldsize);\n+\t\t  else\n+\t\t    {\n+\t\t      /* Partial overlap.  */\n+\t\t      HOST_WIDE_INT fsz = fieldsize;\n+\t\t      if (pos < off)\n+\t\t\t{\n+\t\t\t  fsz -= (off - pos);\n+\t\t\t  pos = off;\n+\t\t\t}\n+\t\t      if (pos + fsz > (HOST_WIDE_INT) off + len)\n+\t\t\tfsz = (HOST_WIDE_INT) off + len - pos;\n+\t\t      memcpy (ptr + pos - off, buf + (pos - rpos), fsz);\n+\t\t    }\n+\t\t  continue;\n+\t\t}\n+\n \t      if (off == -1\n \t\t  || (pos >= off\n \t\t      && (pos + fieldsize <= (HOST_WIDE_INT) off + len)))"}, {"sha": "4bf40c195da6bfc209c17be05a7a2d31c8913176", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93121-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b171655dc0785262a444f5d5c2be7195977987/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b171655dc0785262a444f5d5c2be7195977987/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-1.c?ref=83b171655dc0785262a444f5d5c2be7195977987", "patch": "@@ -0,0 +1,56 @@\n+/* PR libstdc++/93121 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+union U { int a[3]; short c[6]; struct S { int d; int a : 2; int f : 1; int b : 24; int c : 5; int e; } b; };\n+const union U u = { .b = { 0x7efa3412, 3, 0, 0x50eca8, 0xb, 0x1eeffeed } };\n+const union U v = { .b = { 0x7efa3412, 1, 1, 0x7feedb, 0x5, 0x1eeffeed } };\n+union W { struct T { long long int a, b : 11, c : 3, d : 37, e : 1, f : 10, g : 2, h; } a; int b[6]; short c[12]; long long d[3]; };\n+const union W w = { .a = { 0x0feedbacdeadbeefLL, -1011, 2, -0xbacdeadbeLL, -1, 721, 1, 0x0feedbacdeadbeefLL } };\n+int a, b, c, d, e, f, g, h, i, j, k, l;\n+long long m;\n+\n+void\n+foo ()\n+{\n+  a = u.a[1];\n+  b = v.a[1];\n+  c = u.c[2];\n+  d = u.c[3];\n+  e = v.c[2];\n+  f = v.c[3];\n+  g = w.b[2];\n+  h = w.b[3];\n+  i = w.c[4];\n+  j = w.c[5];\n+  k = w.c[6];\n+  l = w.c[7];\n+  m = w.d[1];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a = 1518822723;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"b = 738162397;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"c = 25923;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"d = 23175;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"e = 30429;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"f = 11263;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"g = 1418761229;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"h = 1830622408;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"i = -27635;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"j = 21648;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"k = 5320;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"l = 27933;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"m = 7862463375103529997;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"a = -904030965;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"b = 1878907749;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"c = -13795;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"d = -27381;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"e = 28669;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"f = -9371;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"g = -2119529884;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"h = 709385029;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"i = -32342;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"j = -30108;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"k = 10824;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"l = 23365;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"m = -9103311533965288635;\" 1 \"optimized\" { target be } } } */"}]}