{"sha": "43fd192f76a0121197dcc3975a49b79b201f6411", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmZDE5MmY3NmEwMTIxMTk3ZGNjMzk3NWE0OWI3OWIyMDFmNjQxMQ==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2016-11-23T07:47:25Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2016-11-23T07:47:25Z"}, "message": "2016-11-22  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_and_split_imm1, aarch64_and_split_imm2)\n\t(aarch64_and_bitmask_imm): New prototypes\n\t* config/aarch64/aarch64.c (aarch64_and_split_imm1):\n\tNew overloaded function to create bit mask covering the\n\tlowest to highest bits set.\n\t(aarch64_and_split_imm2): New overloaded functions to create bit\n\tmask of zeros between first and last bit set.\n\t(aarch64_and_bitmask_imm): New function to determine if a integer\n\tis a valid two instruction \"and\" operation.\n\t* config/aarch64/aarch64.md:(and<mode>3): New define_insn and _split\n\tallowing wider range of constants with \"and\" operations.\n\t* (ior<mode>3, xor<mode>3): Use new LOGICAL2 iterator to prevent\n\t\"and\" operator from matching restricted constant range used for\n\tior and xor operators.\n\t* config/aarch64/constraints.md (UsO constraint): New SImode constraint\n\tfor constants in \"and\" operantions.\n\t(UsP constraint): New DImode constraint for constants in \"and\" operations.\n\t* config/aarch64/iterators.md (lconst2): New mode iterator.\n\t(LOGICAL2): New code iterator.\n\t* config/aarch64/predicates.md (aarch64_logical_and_immediate): New\n\tpredicate\n\t(aarch64_logical_and_operand): New predicate allowing extended constants\n\tfor \"and\" operations.\n\t* testsuite/gcc.target/aarch64/and_const.c: New test to verify\n\tadditional constants are recognized and fewer instructions generated.\n\t* testsuite/gcc.target/aarch64/and_const2.c: New test to verify\n\tadditional constants are recognized and fewer instructions generated.\n\nFrom-SVN: r242739", "tree": {"sha": "e928fb5fdbc6ba8b63c59833f9f46e4eafc0ae9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e928fb5fdbc6ba8b63c59833f9f46e4eafc0ae9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fd192f76a0121197dcc3975a49b79b201f6411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fd192f76a0121197dcc3975a49b79b201f6411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fd192f76a0121197dcc3975a49b79b201f6411", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fd192f76a0121197dcc3975a49b79b201f6411/comments", "author": null, "committer": null, "parents": [{"sha": "ed9e2fa904c6112180bcba317908b49c106c0cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9e2fa904c6112180bcba317908b49c106c0cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9e2fa904c6112180bcba317908b49c106c0cd0"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "ea39ef0785fb609872e03ddd82c31210f58bbd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -1,3 +1,30 @@\n+2016-11-22  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_and_split_imm1, aarch64_and_split_imm2)\n+\t(aarch64_and_bitmask_imm): New prototypes\n+\t* config/aarch64/aarch64.c (aarch64_and_split_imm1):\n+\tNew overloaded function to create bit mask covering the\n+\tlowest to highest bits set.\n+\t(aarch64_and_split_imm2): New overloaded functions to create bit\n+\tmask of zeros between first and last bit set.\n+\t(aarch64_and_bitmask_imm): New function to determine if a integer\n+\tis a valid two instruction \"and\" operation.\n+\t* config/aarch64/aarch64.md:(and<mode>3): New define_insn and _split\n+\tallowing wider range of constants with \"and\" operations.\n+\t* (ior<mode>3, xor<mode>3): Use new LOGICAL2 iterator to prevent\n+\t\"and\" operator from matching restricted constant range used for\n+\tior and xor operators.\n+\t* config/aarch64/constraints.md (UsO constraint): New SImode constraint\n+\tfor constants in \"and\" operantions.\n+\t(UsP constraint): New DImode constraint for constants in \"and\" operations.\n+\t* config/aarch64/iterators.md (lconst2): New mode iterator.\n+\t(LOGICAL2): New code iterator.\n+\t* config/aarch64/predicates.md (aarch64_logical_and_immediate): New\n+\tpredicate\n+\t(aarch64_logical_and_operand): New predicate allowing extended constants\n+\tfor \"and\" operations.\n+\n 2016-11-22  Walter Lee  <walt@tilera.com>\n \n \t* config/tilegx/tilegx.md (trap): New pattern."}, {"sha": "7f67f1473056cfcb3b7f58d5726e83e3f23b45ac", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -296,6 +296,9 @@ extern struct tune_params aarch64_tune_params;\n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n+unsigned HOST_WIDE_INT aarch64_and_split_imm1 (HOST_WIDE_INT val_in);\n+unsigned HOST_WIDE_INT aarch64_and_split_imm2 (HOST_WIDE_INT val_in);\n+bool aarch64_and_bitmask_imm (unsigned HOST_WIDE_INT val_in, machine_mode mode);\n int aarch64_branch_cost (bool, bool);\n enum aarch64_symbol_type aarch64_classify_symbolic_expression (rtx);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);"}, {"sha": "1f35220dce5b091ac5f633dfe5b2f3e4abb9647c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -3674,6 +3674,44 @@ aarch64_bitmask_imm (HOST_WIDE_INT val_in, machine_mode mode)\n   return val == mask * bitmask_imm_mul[__builtin_clz (bits) - 26];\n }\n \n+/* Create mask of ones, covering the lowest to highest bits set in VAL_IN.  \n+   Assumed precondition: VAL_IN Is not zero.  */\n+\n+unsigned HOST_WIDE_INT\n+aarch64_and_split_imm1 (HOST_WIDE_INT val_in)\n+{\n+  int lowest_bit_set = ctz_hwi (val_in);\n+  int highest_bit_set = floor_log2 (val_in);\n+  gcc_assert (val_in != 0);\n+\n+  return ((HOST_WIDE_INT_UC (2) << highest_bit_set) -\n+\t  (HOST_WIDE_INT_1U << lowest_bit_set));\n+}\n+\n+/* Create constant where bits outside of lowest bit set to highest bit set\n+   are set to 1.  */\n+\n+unsigned HOST_WIDE_INT\n+aarch64_and_split_imm2 (HOST_WIDE_INT val_in)\n+{\n+  return val_in | ~aarch64_and_split_imm1 (val_in);\n+}\n+\n+/* Return true if VAL_IN is a valid 'and' bitmask immediate.  */\n+\n+bool\n+aarch64_and_bitmask_imm (unsigned HOST_WIDE_INT val_in, machine_mode mode)\n+{\n+  if (aarch64_bitmask_imm (val_in, mode))\n+    return false;\n+\n+  if (aarch64_move_imm (val_in, mode))\n+    return false;\n+\n+  unsigned HOST_WIDE_INT imm2 = aarch64_and_split_imm2 (val_in);\n+\n+  return aarch64_bitmask_imm (imm2, mode);\n+}\n \n /* Return true if val is an immediate that can be loaded into a\n    register in a single instruction.  */"}, {"sha": "3d2123259311a364a94268c1b931565ada3c0dd5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -3397,6 +3397,26 @@\n ;; Logical operations\n ;; -------------------------------------------------------------------\n \n+\n+(define_insn_and_split \"*aarch64_and<mode>_imm2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n+\t(and:GPI (match_operand:GPI 1 \"register_operand\" \"%r\")\n+\t\t (match_operand:GPI 2 \"aarch64_logical_and_immediate\" \"<lconst2>\")))]\n+  \"\"\n+  \"#\"\n+  \"true\"\n+  [(const_int 0)]\n+  {\n+     HOST_WIDE_INT val = INTVAL (operands[2]);\n+     rtx imm1 = GEN_INT (aarch64_and_split_imm1 (val));\n+     rtx imm2 = GEN_INT (aarch64_and_split_imm2 (val));\n+\n+     emit_insn (gen_and<mode>3 (operands[0], operands[1], imm1));\n+     emit_insn (gen_and<mode>3 (operands[0], operands[0], imm2));\n+     DONE;\n+  }\n+)\n+\n (define_insn \"<optab><mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,rk,w\")\n \t(LOGICAL:GPI (match_operand:GPI 1 \"register_operand\" \"%r,r,w\")"}, {"sha": "7a2847ab6b119e174df8e1bd0de730eb1b8d8ad3", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -69,6 +69,16 @@\n  (and (match_code \"const_int\")\n       (match_test \"aarch64_move_imm (ival, DImode)\")))\n \n+(define_constraint \"UsO\"\n+ \"A constant that can be used with a 32-bit and operation.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"aarch64_and_bitmask_imm (ival, SImode)\")))\n+\n+(define_constraint \"UsP\"\n+ \"A constant that can be used with a 64-bit and operation.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"aarch64_and_bitmask_imm (ival, DImode)\")))\n+\n (define_constraint \"S\"\n   \"A constraint that matches an absolute symbolic address.\"\n   (and (match_code \"const,symbol_ref,label_ref\")"}, {"sha": "3d63f34d48e8c127e4972a32ac8af843ca840df4", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -440,6 +440,9 @@\n ;; Attribute to describe constants acceptable in logical operations\n (define_mode_attr lconst [(SI \"K\") (DI \"L\")])\n \n+;; Attribute to describe constants acceptable in logical and operations\n+(define_mode_attr lconst2 [(SI \"UsO\") (DI \"UsP\")])\n+\n ;; Map a mode to a specific constraint character.\n (define_mode_attr cmode [(QI \"q\") (HI \"h\") (SI \"s\") (DI \"d\")])\n "}, {"sha": "daa991bc0e01659d75bbd78b98794b81f6bf1dcf", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -106,6 +106,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_logical_immediate\")))\n \n+(define_predicate \"aarch64_logical_and_immediate\"\n+  (and (match_code \"const_int\")\n+       (match_test \"aarch64_and_bitmask_imm (INTVAL (op), mode)\")))\n+\n (define_predicate \"aarch64_shift_imm_si\"\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) < 32\")))"}, {"sha": "8f3c78294517bf05e2f80768a28ec77d5c336b95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -1,3 +1,10 @@\n+2016-11-23  Michael Collison  <michael.collison@arm.com>\n+\n+\t* testsuite/gcc.target/aarch64/and_const.c: New test to verify\n+\tadditional constants are recognized and fewer instructions generated.\n+\t* testsuite/gcc.target/aarch64/and_const2.c: New test to verify\n+\tadditional constants are recognized and fewer instructions generated.\n+\n 2016-11-22  Ian Lance Taylor  <iant@golang.org>\n \n \t* gcc.misc-tests/godump-1.c: Update expected output for recent"}, {"sha": "9c377d71f06b40427f224a28be23c66134eead8a", "filename": "gcc/testsuite/gcc.target/aarch64/and_const.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const.c?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int f2 (int x)\n+{\n+   x &= 0x0ffffff8;\n+\n+   x &= 0xff001fff;\n+\n+   return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"and\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"movk\\t\" } } */"}, {"sha": "e2b8924f946c57574084b946e26727af7ca3b7ec", "filename": "gcc/testsuite/gcc.target/aarch64/and_const2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fd192f76a0121197dcc3975a49b79b201f6411/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fand_const2.c?ref=43fd192f76a0121197dcc3975a49b79b201f6411", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long f2 (long x)\n+{\n+   x &= 0x0ffffffffffffff8LL;\n+\n+   x &= 0xff001fffLL;\n+\n+   return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"and\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"movk\\t\" } } */"}]}