{"sha": "bf75cdbe7bfae38a0cd222933072bea69c10cf24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3NWNkYmU3YmZhZTM4YTBjZDIyMjkzMzA3MmJlYTY5YzEwY2YyNA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-11-24T16:27:31Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-11-24T16:27:31Z"}, "message": "Fix bootstrap error in s-taprop-tru64.adb\n\n\t* s-taprop-tru64.adb (Create_Task): Use Unrestricted_Access.\n\nFrom-SVN: r181696", "tree": {"sha": "100585ee78dfe554c9011a84f52643b88200ede8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/100585ee78dfe554c9011a84f52643b88200ede8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf75cdbe7bfae38a0cd222933072bea69c10cf24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf75cdbe7bfae38a0cd222933072bea69c10cf24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf75cdbe7bfae38a0cd222933072bea69c10cf24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf75cdbe7bfae38a0cd222933072bea69c10cf24/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49ec778e046ff6d8e23392355126aed3f2b2a98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ec778e046ff6d8e23392355126aed3f2b2a98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ec778e046ff6d8e23392355126aed3f2b2a98c"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "77fd4bf15d1ed4f29bc3a068855afee9f575ff01", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf75cdbe7bfae38a0cd222933072bea69c10cf24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf75cdbe7bfae38a0cd222933072bea69c10cf24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf75cdbe7bfae38a0cd222933072bea69c10cf24", "patch": "@@ -1,3 +1,7 @@\n+2011-11-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* s-taprop-tru64.adb (Create_Task): Use Unrestricted_Access.\n+\n 2011-11-23  Thomas Quinot  <quinot@adacore.com>\n \n \t* thread.c, s-oscons-tmplt.c: Generate __gnat_pthread_condattr_setup"}, {"sha": "8d69e5b19b1eb9fbb6de7f85b77c06d07f2754ae", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf75cdbe7bfae38a0cd222933072bea69c10cf24/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf75cdbe7bfae38a0cd222933072bea69c10cf24/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=bf75cdbe7bfae38a0cd222933072bea69c10cf24", "patch": "@@ -889,9 +889,15 @@ package body System.Task_Primitives.Operations is\n       --  do not need to manipulate caller's signal mask at this point.\n       --  All tasks in RTS will have All_Tasks_Mask initially.\n \n+      --  Note: the use of Unrestricted_Access in the following call is needed\n+      --  because otherwise we have an error of getting a access-to-volatile\n+      --  value which points to a non-volatile object. But in this case it is\n+      --  safe to do this, since we know we have no problems with aliasing and\n+      --  Unrestricted_Access bypasses this check.\n+\n       Result :=\n         pthread_create\n-          (T.Common.LL.Thread'Access,\n+          (T.Common.LL.Thread'Unrestricted_Access,\n            Attributes'Access,\n            Thread_Body_Access (Wrapper),\n            To_Address (T));"}]}