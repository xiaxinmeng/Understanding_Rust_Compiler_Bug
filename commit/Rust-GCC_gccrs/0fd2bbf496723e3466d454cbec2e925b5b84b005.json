{"sha": "0fd2bbf496723e3466d454cbec2e925b5b84b005", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkMmJiZjQ5NjcyM2UzNDY2ZDQ1NGNiZWMyZTkyNWI1Yjg0YjAwNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-05T23:57:14Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-05T23:57:14Z"}, "message": "* gcc.dg/format/asm_fprintf-1.c: New test.\n\nFrom-SVN: r67519", "tree": {"sha": "cfa55a59946d2953716ee2c6111400f44ecee0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa55a59946d2953716ee2c6111400f44ecee0dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd2bbf496723e3466d454cbec2e925b5b84b005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd2bbf496723e3466d454cbec2e925b5b84b005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd2bbf496723e3466d454cbec2e925b5b84b005", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd2bbf496723e3466d454cbec2e925b5b84b005/comments", "author": null, "committer": null, "parents": [{"sha": "1e64c2fc326002fc79bbb8a5b8095d18bba2631f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e64c2fc326002fc79bbb8a5b8095d18bba2631f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e64c2fc326002fc79bbb8a5b8095d18bba2631f"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "3494c609be85bf855ab7825dc7dd8f7522255e0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd2bbf496723e3466d454cbec2e925b5b84b005/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd2bbf496723e3466d454cbec2e925b5b84b005/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fd2bbf496723e3466d454cbec2e925b5b84b005", "patch": "@@ -1,3 +1,7 @@\n+2003-06-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/asm_fprintf-1.c: New test.\n+\n 2003-06-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/gcc-defs.exp (additional_sources): New variable."}, {"sha": "472c2d89ffa5acfc271534e2c9480c29f7e67def", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd2bbf496723e3466d454cbec2e925b5b84b005/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd2bbf496723e3466d454cbec2e925b5b84b005/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c?ref=0fd2bbf496723e3466d454cbec2e925b5b84b005", "patch": "@@ -0,0 +1,82 @@\n+/* Test for asm_fprintf formats.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#include \"format.h\"\n+\n+/* Magic identifier must be set before the attribute is used.  */\n+typedef long long __gcc_host_wide_int__;\n+\n+extern int asm_fprintf (const char *, ...) __attribute__ ((__format__ (__asm_fprintf__, 1, 2))) __attribute__ ((__nonnull__));\n+\n+void\n+foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n+     int *n, short int *hn, long int l, unsigned long int ul,\n+     long int *ln, long double ld, wint_t lc, wchar_t *ls, llong ll,\n+     ullong ull, unsigned int *un, const int *cn, signed char *ss,\n+     unsigned char *us, const signed char *css, unsigned int u1,\n+     unsigned int u2)\n+{\n+  /* Acceptable C90 specifiers, flags and modifiers.  */\n+  asm_fprintf (\"%%\");\n+  asm_fprintf (\"%d%i%o%u%x%X%c%s%%\", i, i, u, u, u, u, i, s);\n+  asm_fprintf (\"%ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n+  asm_fprintf (\"%lld%lli%llo%llu%llx%llX\", ll, ll, ull, ull, ull, ull);\n+  asm_fprintf (\"%-d%-i%-o%-u%-x%-X%-c%-s\", i, i, u, u, u, u, i, s);\n+  asm_fprintf (\"% d% i\\n\", i, i);\n+  asm_fprintf (\"%#o%#x%#X\", u, u, u);\n+  asm_fprintf (\"%08d%08i%08o%08u%08x%08X\", i, i, u, u, u, u);\n+  asm_fprintf (\"%d\\n\", i);\n+  asm_fprintf (\"%+d\\n\", i);\n+  asm_fprintf (\"%3d\\n\", i);\n+  asm_fprintf (\"%-3d\\n\", i);\n+  asm_fprintf (\"%.7d\\n\", i);\n+  asm_fprintf (\"%+9.4d\\n\", i);\n+  asm_fprintf (\"%.3ld\\n\", l);\n+  asm_fprintf (\"%*d\\n\", i1, i);\n+  asm_fprintf (\"%.*d\\n\", i2, i);\n+  asm_fprintf (\"%*.*ld\\n\", i1, i2, l);\n+  asm_fprintf (\"%d %lu\\n\", i, ul);\n+\n+  /* Extensions provided in asm_fprintf.  */\n+  asm_fprintf (\"%O%R%I%L%U%@\");\n+  asm_fprintf (\"%r\", i);\n+  asm_fprintf (\"%wd%wi%wo%wu%wx%wX\", ll, ll, ull, ull, ull, ull);\n+\n+  /* Standard specifiers not accepted in asm_fprintf.  */\n+  asm_fprintf (\"%f\\n\", d); /* { dg-warning \"format\" \"float\" } */\n+  asm_fprintf (\"%e\\n\", d); /* { dg-warning \"format\" \"float\" } */\n+  asm_fprintf (\"%E\\n\", d); /* { dg-warning \"format\" \"float\" } */\n+  asm_fprintf (\"%g\\n\", d); /* { dg-warning \"format\" \"float\" } */\n+  asm_fprintf (\"%G\\n\", d); /* { dg-warning \"format\" \"float\" } */\n+  asm_fprintf (\"%p\\n\", p); /* { dg-warning \"format\" \"pointer\" } */\n+  asm_fprintf (\"%n\\n\", n); /* { dg-warning \"format\" \"counter\" } */\n+  asm_fprintf (\"%hd\\n\", i); /* { dg-warning \"format\" \"conversion\" } */\n+\n+  /* Various tests of bad argument types.  */\n+  asm_fprintf (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n+  asm_fprintf (\"%wd\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n+  asm_fprintf (\"%d\", ll); /* { dg-warning \"format\" \"bad argument types\" } */\n+  asm_fprintf (\"%*.*d\", l, i2, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n+  asm_fprintf (\"%*.*d\", i1, l, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n+  asm_fprintf (\"%ld\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  asm_fprintf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+\n+  /* Wrong number of arguments.  */\n+  asm_fprintf (\"%d%d\", i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  asm_fprintf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  /* Miscellaneous bogus constructions.  */\n+  asm_fprintf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n+  asm_fprintf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  asm_fprintf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n+  asm_fprintf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n+  asm_fprintf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n+  asm_fprintf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n+  asm_fprintf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n+\n+  /* Make sure we still get warnings for regular printf.  */\n+  printf (\"%d\\n\", ll); /* { dg-warning \"format\" \"bad argument types\" } */\n+}"}]}