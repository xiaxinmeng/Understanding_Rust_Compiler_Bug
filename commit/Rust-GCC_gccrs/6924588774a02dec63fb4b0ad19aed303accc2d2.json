{"sha": "6924588774a02dec63fb4b0ad19aed303accc2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkyNDU4ODc3NGEwMmRlYzYzZmI0YjBhZDE5YWVkMzAzYWNjYzJkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-22T16:26:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-22T16:35:00Z"}, "message": "libstdc++: Fix semaphore to work with system_clock timeouts\n\nThe __cond_wait_until_impl function takes a steady_clock timeout, but\nthen sometimes tries to compare it to a time from the system_clock,\nwhich won't compile.  Additionally, that function gets called with\nsystem_clock timeouts, which also won't compile. This makes the function\naccept timeouts for either clock, and compare to the time from the right\nclock.\n\nThis fixes the compilation error that was causing two tests to fail on\nnon-futex targets, so we can revert the r12-11 change to disable them.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_timed_wait.h (__cond_wait_until_impl):\n\tHandle system_clock as well as steady_clock.\n\t* testsuite/30_threads/semaphore/try_acquire_for.cc: Re-enable.\n\t* testsuite/30_threads/semaphore/try_acquire_until.cc:\n\tRe-enable.", "tree": {"sha": "6cd0ea40f2e93ba7f24da4f44311bfbf7f08775b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd0ea40f2e93ba7f24da4f44311bfbf7f08775b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6924588774a02dec63fb4b0ad19aed303accc2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6924588774a02dec63fb4b0ad19aed303accc2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6924588774a02dec63fb4b0ad19aed303accc2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6924588774a02dec63fb4b0ad19aed303accc2d2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58871c03318e080962f022f5d77db3c4fde3e351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58871c03318e080962f022f5d77db3c4fde3e351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58871c03318e080962f022f5d77db3c4fde3e351"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "ec7ff51cdbc6ef33db6968a591d7993cbdcc213a", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=6924588774a02dec63fb4b0ad19aed303accc2d2", "patch": "@@ -139,12 +139,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n // (e.g. __ulock_wait())which is better than pthread_cond_clockwait\n #endif // ! PLATFORM_TIMED_WAIT\n \n-    // returns true if wait ended before timeout\n-    template<typename _Dur>\n+    // Returns true if wait ended before timeout.\n+    // _Clock must be either steady_clock or system_clock.\n+    template<typename _Clock, typename _Dur>\n       bool\n       __cond_wait_until_impl(__condvar& __cv, mutex& __mx,\n-\t  const chrono::time_point<chrono::steady_clock, _Dur>& __atime)\n+\t\t\t     const chrono::time_point<_Clock, _Dur>& __atime)\n       {\n+\tstatic_assert(std::__is_one_of<_Clock, chrono::steady_clock,\n+\t\t\t\t\t       chrono::system_clock>::value);\n+\n \tauto __s = chrono::time_point_cast<chrono::seconds>(__atime);\n \tauto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n \n@@ -155,12 +159,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  };\n \n #ifdef _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT\n-\t__cv.wait_until(__mx, CLOCK_MONOTONIC, __ts);\n-\treturn chrono::steady_clock::now() < __atime;\n-#else\n-\t__cv.wait_until(__mx, __ts);\n-\treturn chrono::system_clock::now() < __atime;\n-#endif // ! _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT\n+\tif constexpr (is_same_v<chrono::steady_clock, _Clock>)\n+\t  __cv.wait_until(__mx, CLOCK_MONOTONIC, __ts);\n+\telse\n+#endif\n+\t  __cv.wait_until(__mx, __ts);\n+\treturn _Clock::now() < __atime;\n       }\n \n     // returns true if wait ended before timeout"}, {"sha": "e7edc9eeef1b9f8bae12a5ce1179b68734264f26", "filename": "libstdc++-v3/testsuite/30_threads/semaphore/try_acquire_for.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_for.cc?ref=6924588774a02dec63fb4b0ad19aed303accc2d2", "patch": "@@ -21,8 +21,6 @@\n // { dg-require-gthreads \"\" }\n // { dg-add-options libatomic }\n \n-// { dg-skip-if \"FIXME: fails\" { ! futex } }\n-\n #include <semaphore>\n #include <chrono>\n #include <thread>"}, {"sha": "49ba33b499981ba760cf32ffffecfa8e461562e1", "filename": "libstdc++-v3/testsuite/30_threads/semaphore/try_acquire_until.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6924588774a02dec63fb4b0ad19aed303accc2d2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fsemaphore%2Ftry_acquire_until.cc?ref=6924588774a02dec63fb4b0ad19aed303accc2d2", "patch": "@@ -21,8 +21,6 @@\n // { dg-additional-options \"-pthread\" { target pthread } }\n // { dg-add-options libatomic }\n \n-// { dg-skip-if \"FIXME: fails\" { ! futex } }\n-\n #include <semaphore>\n #include <chrono>\n #include <thread>"}]}