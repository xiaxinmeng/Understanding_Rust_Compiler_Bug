{"sha": "d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllMWYzN2ZhZDJkYjBjZDc0OWNkNWM2ZjllOTQ5NzJjODQ3MjYxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-03-12T07:56:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-12T07:56:23Z"}, "message": "re PR tree-optimization/89664 (ICE in free_bb, at tree-ssa-math-opts.c:522)\n\n2019-03-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/89664\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1): Properly\n\tfree the occurance tree after the early out.\n\n\t* gfortran.dg/pr89664.f90: New testcase.\n\nFrom-SVN: r269604", "tree": {"sha": "f11132839af1ed186bfca4d0798668ec65801c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f11132839af1ed186bfca4d0798668ec65801c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05073a0d54f65876f4aa827a3ae6b00b6dc74638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05073a0d54f65876f4aa827a3ae6b00b6dc74638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05073a0d54f65876f4aa827a3ae6b00b6dc74638"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "85d11c95dd4f2fa5755bb8242064008e6378bf1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "patch": "@@ -1,3 +1,9 @@\n+2019-03-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89664\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals_1): Properly\n+\tfree the occurance tree after the early out.\n+\n 2019-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89655"}, {"sha": "c4f79ae72547065bd94447e8d417310cad8fa01c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "patch": "@@ -1,3 +1,8 @@\n+2019-03-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89664\n+\t* gfortran.dg/pr89664.f90: New testcase.\n+\n 2019-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/89651"}, {"sha": "5557806995794c6e42b19dad505b855f68f1f259", "filename": "gcc/testsuite/gfortran.dg/pr89664.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89664.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89664.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr89664.f90?ref=d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-Ofast\" }\n+\n+subroutine s (x)\n+   real :: x\n+   call sub (x)\n+end\n+subroutine sub (x)\n+   real :: x, y\n+   logical :: a, b\n+   real :: f1, f2, f3, f4\n+   y = f1()\n+   a = .false.\n+   if ( f2() > f3() ) a = .true.\n+   b = .false.\n+   if ( f2() > f4() ) b = .true.\n+   if ( a ) then\n+      x = 1.0\n+   else if ( b ) then\n+      x = 1.0/y**2\n+   else\n+      x = 1.0/y - y**2\n+   end if\n+end"}, {"sha": "cb8a9143833a5c8c7ad2255678a5c8234cda5ce9", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e1f37fad2db0cd749cd5c6f9e94972c8472610/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d9e1f37fad2db0cd749cd5c6f9e94972c8472610", "patch": "@@ -799,7 +799,7 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n \n   /* If it is more profitable to optimize 1 / x, don't optimize 1 / (x * x).  */\n   if (sqrt_recip_count > square_recip_count)\n-    return;\n+    goto out;\n \n   /* Do the expensive part only if we can hope to optimize something.  */\n   if (count + square_recip_count >= threshold && count >= 1)\n@@ -842,6 +842,7 @@ execute_cse_reciprocals_1 (gimple_stmt_iterator *def_gsi, tree def)\n \t}\n     }\n \n+out:\n   for (occ = occ_head; occ; )\n     occ = free_bb (occ);\n "}]}