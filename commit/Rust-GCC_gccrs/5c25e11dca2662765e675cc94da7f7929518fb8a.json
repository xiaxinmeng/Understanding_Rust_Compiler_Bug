{"sha": "5c25e11dca2662765e675cc94da7f7929518fb8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNWUxMWRjYTI2NjI3NjVlNjc1Y2M5NGRhN2Y3OTI5NTE4ZmI4YQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-01-02T02:56:01Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-01-02T02:56:01Z"}, "message": "extend.texi (C++ Extensions): New node for C++ attributes; describe init_priority and com_interface.\n\n2000-12-27  Phil Edwards  <pme@sources.redhat.com>\n\n\t* extend.texi (C++ Extensions):  New node for C++ attributes;\n\t  describe init_priority and com_interface.\n\t* invoke.texi:  Remove -finit-priority as it now has zero effect.\n\t* install.texi:  Fix xref syntax.\n\t* md.texi:  Likewise.\n\nFrom-SVN: r38610", "tree": {"sha": "e1dc9ac1ea55c353e9a2202c16997bf0e6f0ead0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1dc9ac1ea55c353e9a2202c16997bf0e6f0ead0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c25e11dca2662765e675cc94da7f7929518fb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c25e11dca2662765e675cc94da7f7929518fb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c25e11dca2662765e675cc94da7f7929518fb8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c25e11dca2662765e675cc94da7f7929518fb8a/comments", "author": null, "committer": null, "parents": [{"sha": "e428b937a2fe945e08b36be77ab1767dc9f104e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e428b937a2fe945e08b36be77ab1767dc9f104e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e428b937a2fe945e08b36be77ab1767dc9f104e2"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "fa3263062464888eaabf42f4c5e2293209dbe297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c25e11dca2662765e675cc94da7f7929518fb8a", "patch": "@@ -1,3 +1,11 @@\n+2000-12-27  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* extend.texi (C++ Extensions):  New node for C++ attributes;\n+\t  describe init_priority and com_interface.\n+\t* invoke.texi:  Remove -finit-priority as it now has zero effect.\n+\t* install.texi:  Fix xref syntax.\n+\t* md.texi:  Likewise.\n+\n Mon Jan  1 21:28:29 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config.gcc (sparc64-wrs-vxworks*): New case."}, {"sha": "811a423e7db55c2eae235b2d6cb877c4443a5b4c", "filename": "gcc/extend.texi", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=5c25e11dca2662765e675cc94da7f7929518fb8a", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,89,92,93,94,96,98,99,2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,89,92,93,94,96,98,99,2000,01 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -2022,7 +2022,8 @@ attributes are currently defined for variables: @code{aligned},\n @code{transparent_union}, @code{unused}, and @code{weak}.  Some other\n attributes are defined for variables on particular target systems.  Other\n attributes are available for functions (@pxref{Function Attributes}) and\n-for types (@pxref{Type Attributes}).\n+for types (@pxref{Type Attributes}).  Other front-ends might define more\n+attributes (@pxref{C++ Extensions,,Extensions to the C++ Language}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -3550,6 +3551,7 @@ Predefined Macros,cpp.info,The C Preprocessor}).\n                          each needed template instantiation is emitted.\n * Bound member functions:: You can extract a function pointer to the\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n+* C++ Attributes::  Variable, function, and type attributes for C++ only.\n @end menu\n \n @node Min and Max\n@@ -4059,3 +4061,53 @@ fptr p1 = (fptr)(&A::foo);\n \n You must specify @samp{-Wno-pmf-conversions} to use this extension.\n \n+@node C++ Attributes\n+@section C++-Specific Variable, Function, and Type Attributes\n+\n+Some attributes only make sense for C++ programs.\n+\n+@table @code\n+@item init_priority (@var{priority})\n+@cindex init_priority attribute\n+\n+\n+In Standard C++, objects defined at namespace scope are guaranteed to be\n+initialized in an order in strict accordance with that of their definitions\n+@emph{in a given translation unit}.  No guarantee is made for initializations\n+across translation units.  However, GNU C++ allows users to control the\n+order of initialization of objects defined at namespace socpe with the\n+@code{init_priority} attribute by specifying a relative @var{priority},\n+a constant integral expression currently bounded between 101 and 65535\n+inclusive.  Lower numbers indicate a higher priority.\n+\n+In the following example, @code{A} would normally be created before\n+@code{B}, but the @code{init_priority} attribute has reversed that order:\n+\n+@example\n+Some_Class  A  __attribute__ ((init_priority (2000)));\n+Some_Class  B  __attribute__ ((init_priority (543)));\n+@end example\n+\n+@noindent\n+Note that the particular values of @var{priority} do not matter; only their\n+relative ordering.\n+\n+\n+@item com_interface\n+@cindex com_interface attribute\n+\n+@c This is based on:  1) grepping the code, \n+@c 2) http://gcc.gnu.org/ml/gcc-bugs/1999-08n/msg01212.html\n+@c 3) http://gcc.gnu.org/ml/gcc-bugs/1999-08n/msg01215.html\n+@c and 4) a lot of guesswork.  You can tell I don't use COM.  -pme 21Dec00\n+\n+This type attribute takes no parameters, and marks a class or struct as an\n+interface for communication via COM; the class will support the COM ABI\n+rather than the full C++ ABI.  Currently this means that RTTI is not possible\n+with the resulting class heirarchy.  The virtual pointer table will be\n+changed to be COM-compliant.  Also, all classes and structs derived from one\n+marked with this attribute are implicitly marked with the same attribute;\n+thus, only the base class in a COM hierarchy needs @code{com_interface}.\n+\n+@end table\n+"}, {"sha": "88ff711460a5b3e9b05823c0158bab711de229ab", "filename": "gcc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=5c25e11dca2662765e675cc94da7f7929518fb8a", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -942,7 +942,7 @@ AMD Am29050 used in a system running a variant of BSD Unix.\n @item avr\n ATMEL AVR-family micro controllers.  These are used in embedded\n applications.  There are no standard Unix configurations.\n-See @xref{AVR Options} for the list of supported MCU types.\n+@xref{AVR Options}, for the list of supported MCU types.\n \n @item decstation-*\n MIPS-based DECstations can support three different personalities:"}, {"sha": "d4e79d21fe441c01cda2b700ac5454bc543c3643", "filename": "gcc/invoke.texi", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=5c25e11dca2662765e675cc94da7f7929518fb8a", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -161,7 +161,7 @@ in the following sections.\n -falt-external-templates\n -ffor-scope  -fno-for-scope  -fno-gnu-keywords  -fhonor-std\n -fhuge-objects  -fno-implicit-templates\n--fno-implicit-inline-templates  -finit-priority\n+-fno-implicit-inline-templates\n -fno-implement-inlines  -fms-extensions\n -fname-mangling-version-@var{n}  -fno-operator-names\n -fno-optional-diags  -fpermissive\n@@ -1264,11 +1264,6 @@ Don't emit code for implicit instantiations of inline templates, either.\n The default is to handle inlines differently so that compiles with and\n without optimization will need the same set of explicit instantiations.\n \n-@item -finit-priority\n-Support @samp{__attribute__ ((init_priority (n)))} for controlling the\n-order of initialization of file-scope objects.  On ELF targets, this\n-requires GNU ld 2.10 or later.\n-\n @item -fno-implement-inlines\n To save space, do not emit out-of-line copies of inline functions\n controlled by @samp{#pragma implementation}.  This will cause linker"}, {"sha": "1702a0e724ad3fd4fc339f88063857e6c548b497", "filename": "gcc/md.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c25e11dca2662765e675cc94da7f7929518fb8a/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=5c25e11dca2662765e675cc94da7f7929518fb8a", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 89, 92, 93, 94, 96, 1998, 2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 89, 92, 93, 94, 96, 1998, 2000, 2001 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -2604,7 +2604,7 @@ that the jump optimizer will not delete the table as unreachable code.\n Conditional branch instruction that decrements a register and\n jumps if the register is non-zero.  Operand 0 is the register to\n decrement and test; operand 1 is the label to jump to if the\n-register is non-zero.  @xref{Looping Patterns}\n+register is non-zero.  @xref{Looping Patterns}.\n \n This optional instruction pattern is only used by the combiner,\n typically for loops reversed by the loop optimizer when strength\n@@ -2620,7 +2620,7 @@ determined until run-time; operand 2 is the actual or estimated maximum\n number of iterations as a @code{const_int}; operand 3 is the number of\n enclosed loops as a @code{const_int} (an innermost loop has a value of\n 1); operand 4 is the label to jump to if the register is non-zero.\n-@xref{Looping Patterns}\n+@xref{Looping Patterns}.\n \n This optional instruction pattern should be defined for machines with\n low-overhead looping instructions as the loop optimizer will try to"}]}