{"sha": "158a1e07761aa438fe389a61e869642f38ee53ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4YTFlMDc3NjFhYTQzOGZlMzg5YTYxZTg2OTY0MmYzOGVlNTNmZg==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-06-19T08:44:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:16Z"}, "message": "Added Epiphany target hook (or at least provisional one)", "tree": {"sha": "e12bcb60be8dc1d9802cb11b11a5699b3230641d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e12bcb60be8dc1d9802cb11b11a5699b3230641d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/158a1e07761aa438fe389a61e869642f38ee53ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158a1e07761aa438fe389a61e869642f38ee53ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158a1e07761aa438fe389a61e869642f38ee53ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158a1e07761aa438fe389a61e869642f38ee53ff/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bc3cd68260c7270a3bcde14ba159e5a986b0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bc3cd68260c7270a3bcde14ba159e5a986b0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bc3cd68260c7270a3bcde14ba159e5a986b0e6"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "c3d6763417f4e6b4d00ece84dfe156472af0cfef", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=158a1e07761aa438fe389a61e869642f38ee53ff", "patch": "@@ -1622,6 +1622,7 @@ epiphany-*-elf | epiphany-*-rtems*)\n \textra_objs=\"${extra_objs} mode-switch-use.o resolve-sw-modes.o\"\n \ttm_defines=\"${tm_defines} EPIPHANY_STACK_OFFSET=${with_stack_offset:-8}\"\n \textra_headers=\"epiphany_intrinsics.h\"\n+\trust_target_objs=\"epiphany-rust.o\"\n \t;;\n fr30-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\""}, {"sha": "4765770033cfc017dfe25735032e3bbeec4b9af9", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=158a1e07761aa438fe389a61e869642f38ee53ff", "patch": "@@ -26,6 +26,9 @@ extern struct rtx_def *gen_compare_reg (machine_mode, enum rtx_code,\n \t\t\t\t\tmachine_mode, rtx, rtx);\n #endif\n \n+/* Defined in epiphany-rust.c  */\n+extern void epiphany_rust_target_cpu_info (void);\n+\n /* Declarations for various fns used in the .md file.  */\n extern void epiphany_final_prescan_insn (rtx_insn *, rtx *, int);\n extern bool epiphany_is_long_call_p (rtx);"}, {"sha": "01a73d98f2e94c3794d9131feeb38f11485b878f", "filename": "gcc/config/epiphany/epiphany-rust.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-rust.c?ref=158a1e07761aa438fe389a61e869642f38ee53ff", "patch": "@@ -0,0 +1,82 @@\n+/* Subroutines for the Rust front end for the Adapteva Epiphany architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for Adapteva Epiphany targets.  */\n+\n+void cris_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"epiphany\");\n+\n+    // llvm seems to have no support for sky (nor historical support), so names are made up by me\n+    // TODO: very subject to change\n+    // TODO: should the \"no\" dichotomy be preserved? probably not, but which should be chosen?\n+    if (TARGET_HALF_REG_FILE)\n+        rust_add_target_info(\"target_feature\", \"half-reg-file\");\n+    if (TARGET_PREFER_SHORT_INSN_REGS)\n+        rust_add_target_info(\"target_feature\", \"prefer-short-insn-regs\");\n+    // TODO: maybe have a \"branch-cost\" feature? doesn't really fit well with \"define-only\", though\n+    if (TARGET_CMOVE)\n+        rust_add_target_info(\"target_feature\", \"cmove\");\n+    // TODO: maybe have a \"nops\" feature? doesn't really fit well with \"define-only\", though\n+    if (TARGET_SOFT_CMPSF)\n+        rust_add_target_info(\"target_feature\", \"soft-cmpsf\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-soft-cmpsf\");\n+    // TODO: maybe have a \"stack-offset\" feature? doesn't really fit well with \"define-only\", though\n+    if (TARGET_ROUND_NEAREST)\n+        rust_add_target_info(\"target_feature\", \"round-nearest\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-round-nearest\");\n+    if (TARGET_LONG_CALLS)\n+        rust_add_target_info(\"target_feature\", \"long-calls\");\n+    if (TARGET_SHORT_CALLS)\n+        rust_add_target_info(\"target_feature\", \"short-calls\");\n+    if (TARGET_SMALL16)\n+        rust_add_target_info(\"target_feature\", \"small16\");\n+    // TODO: output mfp-mode somehow - \"define-only\" may work, but idk\n+    if (TARGET_SPLIT_LOHI)\n+        rust_add_target_info(\"target_feature\", \"split-lohi\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-split-lohi\");\n+    if (TARGET_POST_INC)\n+        rust_add_target_info(\"target_feature\", \"postinc\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-postinc\");\n+    if (TARGET_POST_MODIFY)\n+        rust_add_target_info(\"target_feature\", \"postmodify\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-postmodify\");\n+    if (TARGET_VECT_DOUBLE)\n+        rust_add_target_info(\"target_feature\", \"vect-double\");\n+    else\n+        rust_add_target_info(\"target_feature\", \"no-vect-double\");\n+    // TODO: maybe have a \"max-vect-align\" feature? doesn't really fit well with \"define-only\", though\n+    if (TARGET_SPLIT_VECMOVE_EARLY)\n+        rust_add_target_info(\"target_feature\", \"split-vecmove-early\");\n+    // TODO: maybe a feature about having the -1 register (1reg)?\n+    if (TARGET_FP_IARITH)\n+        rust_add_target_info(\"target_feature\", \"fp-iarith\");\n+    if (TARGET_MAY_ROUND_FOR_TRUNC)\n+        rust_add_target_info(\"target_feature\", \"may-round-for-trunc\");\n+}"}, {"sha": "273588d8026a79dbde29b51025f89bff6b36c7d1", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=158a1e07761aa438fe389a61e869642f38ee53ff", "patch": "@@ -41,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_assert (\"machine=epiphany\");\t\\\n     } while (0)\n \n+#define TARGET_RUST_CPU_INFO epiphany_rust_target_cpu_info\n+\n /* Pick up the libgloss library. One day we may do this by linker script, but\n    for now its static.\n    libgloss might use errno/__errno, which might not have been needed when we"}, {"sha": "2aa04cd2907aa8ed853d8ef9f7aecbdb4d26a533", "filename": "gcc/config/epiphany/t-epiphany", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158a1e07761aa438fe389a61e869642f38ee53ff/gcc%2Fconfig%2Fepiphany%2Ft-epiphany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Ft-epiphany?ref=158a1e07761aa438fe389a61e869642f38ee53ff", "patch": "@@ -30,6 +30,10 @@ resolve-sw-modes.o : $(srcdir)/config/epiphany/resolve-sw-modes.c \\\n   insn-attr-common.h $(TREE_PASS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $<\n \n+epiphany-rust.o: $(srcdir)/config/epiphany/epiphany-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n SPECS = specs.install\n \n specs: specs.install"}]}