{"sha": "3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ZDI0MmJkM2FkMzk5YjNjZTY4NWMxNTQ3ODBkMmRhOWRkNTFiNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:51:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:51:46Z"}, "message": "Regenerate doc.\n\nFrom-SVN: r230539", "tree": {"sha": "d99b281ffff8b589b288ff2334e594c3fb8d2888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d99b281ffff8b589b288ff2334e594c3fb8d2888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8d242bd3ad399b3ce685c154780d2da9dd51b7/comments", "author": null, "committer": null, "parents": [{"sha": "2544cbe4f2f0a497fec59491333283750fe45fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2544cbe4f2f0a497fec59491333283750fe45fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2544cbe4f2f0a497fec59491333283750fe45fb2"}], "stats": {"total": 1342, "additions": 863, "deletions": 479}, "files": [{"sha": "e7de072808039741384ac21407d2e081abb7e7ea", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 284, "deletions": 43, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8d242bd3ad399b3ce685c154780d2da9dd51b7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8d242bd3ad399b3ce685c154780d2da9dd51b7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3f8d242bd3ad399b3ce685c154780d2da9dd51b7", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , November 13, 2015\n+GNAT Reference Manual , November 18, 2015\n \n AdaCore\n \n@@ -1369,8 +1369,50 @@ sequence).\n @section Pragma Abstract_State\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.4.\n+Syntax:\n+\n+@example\n+pragma Abstract_State (ABSTRACT_STATE_LIST);\n+\n+ABSTRACT_STATE_LIST ::=\n+     null\n+  |  STATE_NAME_WITH_OPTIONS\n+  | (STATE_NAME_WITH_OPTIONS @{, STATE_NAME_WITH_OPTIONS@} )\n+\n+STATE_NAME_WITH_OPTIONS ::=\n+     STATE_NAME\n+  | (STATE_NAME with OPTION_LIST)\n+\n+OPTION_LIST ::= OPTION @{, OPTION@}\n+\n+OPTION ::=\n+    SIMPLE_OPTION\n+  | NAME_VALUE_OPTION\n+\n+SIMPLE_OPTION ::= Ghost | Synchronous\n+\n+NAME_VALUE_OPTION ::=\n+    Part_Of => ABSTRACT_STATE\n+  | External [=> EXTERNAL_PROPERTY_LIST]\n+\n+EXTERNAL_PROPERTY_LIST ::=\n+     EXTERNAL_PROPERTY\n+  | (EXTERNAL_PROPERTY @{, EXTERNAL_PROPERTY@} )\n+\n+EXTERNAL_PROPERTY ::=\n+    Async_Readers    [=> boolean_EXPRESSION]\n+  | Async_Writers    [=> boolean_EXPRESSION]\n+  | Effective_Reads  [=> boolean_EXPRESSION]\n+  | Effective_Writes [=> boolean_EXPRESSION]\n+    others            => boolean_EXPRESSION\n+\n+STATE_NAME ::= defining_identifier\n+\n+ABSTRACT_STATE ::= name\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Abstract_State} in\n+the SPARK 2014 Reference Manual, section 7.1.4.\n \n @node Pragma Ada_83,Pragma Ada_95,Pragma Abstract_State,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-ada-83}@anchor{1d}\n@@ -1858,16 +1900,28 @@ case, and it is recommended that these two options not be used together.\n @section Pragma Async_Readers\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+@example\n+pragma Asynch_Readers   [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Async_Readers} in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n @node Pragma Async_Writers,Pragma Attribute_Definition,Pragma Async_Readers,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-async-writers}@anchor{2b}\n @section Pragma Async_Writers\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+@example\n+pragma Asynch_Writers   [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Async_Writers} in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n @node Pragma Attribute_Definition,Pragma C_Pass_By_Copy,Pragma Async_Writers,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-attribute-definition}@anchor{2c}\n@@ -2421,8 +2475,14 @@ clause), the GNAT uses the default alignment as described previously.\n @section Pragma Constant_After_Elaboration\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 3.3.1.\n+Syntax:\n+\n+@example\n+pragma Constant_After_Elaboration [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect\n+@cite{Constant_After_Elaboration} in the SPARK 2014 Reference Manual, section 3.3.1.\n \n @node Pragma Contract_Cases,Pragma Convention_Identifier,Pragma Constant_After_Elaboration,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-contract-cases}@anchor{3c}\n@@ -2434,9 +2494,13 @@ section 3.3.1.\n Syntax:\n \n @example\n-pragma Contract_Cases (\n-   Condition => Consequence\n- @{,Condition => Consequence@});\n+pragma Contract_Cases ((CONTRACT_CASE @{, CONTRACT_CASE));\n+\n+CONTRACT_CASE ::= CASE_GUARD => CONSEQUENCE\n+\n+CASE_GUARD ::= boolean_EXPRESSION | others\n+\n+CONSEQUENCE ::= boolean_EXPRESSION\n @end example\n \n The @cite{Contract_Cases} pragma allows defining fine-grain specifications\n@@ -2684,8 +2748,14 @@ See Ada 2012 Reference Manual for details.\n @section Pragma Default_Initial_Condition\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.3.3.\n+Syntax:\n+\n+@example\n+pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect\n+@cite{Default_Initial_Condition} in the SPARK 2014 Reference Manual, section 7.3.3.\n \n @node Pragma Debug,Pragma Debug_Policy,Pragma Default_Initial_Condition,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-debug}@anchor{45}\n@@ -2825,8 +2895,33 @@ See Ada 2012 Reference Manual for details.\n @section Pragma Depends\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.5.\n+Syntax:\n+\n+@example\n+pragma Depends (DEPENDENCY_RELATION);\n+\n+DEPENDENCY_RELATION ::=\n+     null\n+  | (DEPENDENCY_CLAUSE @{, DEPENDENCY_CLAUSE@})\n+\n+DEPENDENCY_CLAUSE ::=\n+    OUTPUT_LIST =>[+] INPUT_LIST\n+  | NULL_DEPENDENCY_CLAUSE\n+\n+NULL_DEPENDENCY_CLAUSE ::= null => INPUT_LIST\n+\n+OUTPUT_LIST ::= OUTPUT | (OUTPUT @{, OUTPUT@})\n+\n+INPUT_LIST ::= null | INPUT | (INPUT @{, INPUT@})\n+\n+OUTPUT ::= NAME | FUNCTION_RESULT\n+INPUT  ::= NAME\n+\n+where FUNCTION_RESULT is a function Result attribute_reference\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Depends} in the\n+SPARK 2014 Reference Manual, section 6.1.5.\n \n @node Pragma Detect_Blocking,Pragma Disable_Atomic_Synchronization,Pragma Depends,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-detect-blocking}@anchor{4a}\n@@ -2892,16 +2987,28 @@ See Ada 2012 Reference Manual for details.\n @section Pragma Effective_Reads\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+@example\n+pragma Effective_Reads  [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Effective_Reads} in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n @node Pragma Effective_Writes,Pragma Elaboration_Checks,Pragma Effective_Reads,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-effective-writes}@anchor{4e}\n @section Pragma Effective_Writes\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+@example\n+pragma Effective_Writes [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Effective_Writes}\n+in the SPARK 2014 Reference Manual, section 7.1.2.\n \n @node Pragma Elaboration_Checks,Pragma Eliminate,Pragma Effective_Writes,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-elaboration-checks}@anchor{4f}\n@@ -3349,8 +3456,14 @@ is constrained.\n @section Pragma Extensions_Visible\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.7.\n+Syntax:\n+\n+@example\n+pragma Extensions_Visible [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Extensions_Visible}\n+in the SPARK 2014 Reference Manual, section 6.1.7.\n \n @node Pragma External,Pragma External_Name_Casing,Pragma Extensions_Visible,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-external}@anchor{5a}\n@@ -3568,16 +3681,39 @@ No other value of digits is permitted.\n @section Pragma Ghost\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.9.\n+Syntax:\n+\n+@example\n+pragma Ghost [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Ghost} in the SPARK\n+2014 Reference Manual, section 6.9.\n \n @node Pragma Global,Pragma Ident,Pragma Ghost,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-global}@anchor{61}\n @section Pragma Global\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.4.\n+Syntax:\n+\n+@example\n+pragma Global (GLOBAL_SPECIFICATION);\n+\n+GLOBAL_SPECIFICATION ::=\n+     null\n+  | (GLOBAL_LIST)\n+  | (MODED_GLOBAL_LIST @{, MODED_GLOBAL_LIST@})\n+\n+MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n+\n+MODE_SELECTOR ::= In_Out | Input | Output | Proof_In\n+GLOBAL_LIST   ::= GLOBAL_ITEM | (GLOBAL_ITEM @{, GLOBAL_ITEM@})\n+GLOBAL_ITEM   ::= NAME\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Global} in the\n+SPARK 2014 Reference Manual, section 6.1.4.\n \n @node Pragma Ident,Pragma Ignore_Pragma,Pragma Global,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-ident}@anchor{62}\n@@ -3972,8 +4108,14 @@ tight packing).\n @section Pragma Initial_Condition\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.6.\n+Syntax:\n+\n+@example\n+pragma Initial_Condition (boolean_EXPRESSION);\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Initial_Condition}\n+in the SPARK 2014 Reference Manual, section 7.1.6.\n \n @node Pragma Initialize_Scalars,Pragma Initializes,Pragma Initial_Condition,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-initialize-scalars}@anchor{6e}\n@@ -4043,8 +4185,27 @@ User's Guide) when using this pragma.\n @section Pragma Initializes\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.5.\n+Syntax:\n+\n+@example\n+pragma Initializes (INITIALIZATION_LIST);\n+\n+INITIALIZATION_LIST ::=\n+     null\n+  | (INITIALIZATION_ITEM @{, INITIALIZATION_ITEM@})\n+\n+INITIALIZATION_ITEM ::= name [=> INPUT_LIST]\n+\n+INPUT_LIST ::=\n+     null\n+  |  INPUT\n+  | (INPUT @{, INPUT@})\n+\n+INPUT ::= name\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Initializes} in the\n+SPARK 2014 Reference Manual, section 7.1.5.\n \n @node Pragma Inline_Always,Pragma Inline_Generic,Pragma Initializes,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-inline-always}@anchor{70}\n@@ -5400,8 +5561,16 @@ See Ada 2012 Reference Manual for details.\n @section Pragma Part_Of\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.6.\n+Syntax:\n+\n+@example\n+pragma Part_Of (ABSTRACT_STATE);\n+\n+ABSTRACT_STATE ::= NAME\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Part_Of} in the\n+SPARK 2014 Reference Manual, section 7.2.6.\n \n @node Pragma Passive,Pragma Persistent_BSS,Pragma Part_Of,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-passive}@anchor{95}\n@@ -6430,32 +6599,98 @@ which is the preferred method of setting the @cite{Ravenscar} profile.\n @section Pragma Refined_Depends\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.5.\n+Syntax:\n+\n+@example\n+pragma Refined_Depends (DEPENDENCY_RELATION);\n+\n+DEPENDENCY_RELATION ::=\n+     null\n+  | (DEPENDENCY_CLAUSE @{, DEPENDENCY_CLAUSE@})\n+\n+DEPENDENCY_CLAUSE ::=\n+    OUTPUT_LIST =>[+] INPUT_LIST\n+  | NULL_DEPENDENCY_CLAUSE\n+\n+NULL_DEPENDENCY_CLAUSE ::= null => INPUT_LIST\n+\n+OUTPUT_LIST ::= OUTPUT | (OUTPUT @{, OUTPUT@})\n+\n+INPUT_LIST ::= null | INPUT | (INPUT @{, INPUT@})\n+\n+OUTPUT ::= NAME | FUNCTION_RESULT\n+INPUT  ::= NAME\n+\n+where FUNCTION_RESULT is a function Result attribute_reference\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Refined_Depends} in\n+the SPARK 2014 Reference Manual, section 6.1.5.\n \n @node Pragma Refined_Global,Pragma Refined_Post,Pragma Refined_Depends,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-refined-global}@anchor{ac}\n @section Pragma Refined_Global\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.4.\n+Syntax:\n+\n+@example\n+pragma Refined_Global (GLOBAL_SPECIFICATION);\n+\n+GLOBAL_SPECIFICATION ::=\n+     null\n+  | (GLOBAL_LIST)\n+  | (MODED_GLOBAL_LIST @{, MODED_GLOBAL_LIST@})\n+\n+MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n+\n+MODE_SELECTOR ::= In_Out | Input | Output | Proof_In\n+GLOBAL_LIST   ::= GLOBAL_ITEM | (GLOBAL_ITEM @{, GLOBAL_ITEM@})\n+GLOBAL_ITEM   ::= NAME\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Refined_Global} in\n+the SPARK 2014 Reference Manual, section 6.1.4.\n \n @node Pragma Refined_Post,Pragma Refined_State,Pragma Refined_Global,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-refined-post}@anchor{ad}\n @section Pragma Refined_Post\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.7.\n+Syntax:\n+\n+@example\n+pragma Refined_Post (boolean_EXPRESSION);\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Refined_Post} in\n+the SPARK 2014 Reference Manual, section 7.2.7.\n \n @node Pragma Refined_State,Pragma Relative_Deadline,Pragma Refined_Post,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-refined-state}@anchor{ae}\n @section Pragma Refined_State\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.2.\n+Syntax:\n+\n+@example\n+pragma Refined_State (REFINEMENT_LIST);\n+\n+REFINEMENT_LIST ::=\n+  (REFINEMENT_CLAUSE @{, REFINEMENT_CLAUSE@})\n+\n+REFINEMENT_CLAUSE ::= state_NAME => CONSTITUENT_LIST\n+\n+CONSTITUENT_LIST ::=\n+     null\n+  |  CONSTITUENT\n+  | (CONSTITUENT @{, CONSTITUENT@})\n+\n+CONSTITUENT ::= object_NAME | state_NAME\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Refined_State} in\n+the SPARK 2014 Reference Manual, section 7.2.2.\n \n @node Pragma Relative_Deadline,Pragma Remote_Access_Type,Pragma Refined_State,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-relative-deadline}@anchor{af}\n@@ -8093,8 +8328,14 @@ It is not permissible to specify @cite{Volatile_Full_Access} for a composite\n @section Pragma Volatile_Function\n \n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+@example\n+pragma Volatile_Function [ (boolean_EXPRESSION) ];\n+@end example\n+\n+For the semantics of this pragma, see the entry for aspect @cite{Volatile_Function}\n+in the SPARK 2014 Reference Manual, section 7.1.2.\n \n @node Pragma Warning_As_Error,Pragma Warnings,Pragma Volatile_Function,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-warning-as-error}@anchor{e0}\n@@ -12208,7 +12449,7 @@ barriers are restricted to:\n @itemize *\n \n @item \n-simple boolean variables defined in the private part of the\n+simple variables defined in the private part of the\n protected type/object,\n \n @item "}, {"sha": "71b6280fd10d45570afc6be1a585036aad768b4b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 579, "deletions": 436, "changes": 1015, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8d242bd3ad399b3ce685c154780d2da9dd51b7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8d242bd3ad399b3ce685c154780d2da9dd51b7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3f8d242bd3ad399b3ce685c154780d2da9dd51b7"}]}