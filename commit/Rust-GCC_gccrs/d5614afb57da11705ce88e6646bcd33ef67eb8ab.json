{"sha": "d5614afb57da11705ce88e6646bcd33ef67eb8ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2MTRhZmI1N2RhMTE3MDVjZTg4ZTY2NDZiY2QzM2VmNjdlYjhhYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-02-07T19:49:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-02-07T19:49:10Z"}, "message": "re PR c++/109 (g++ 2.95.2 can't handle dependent friend member functions)\n\ncp:\n\tPR c++/109\n\t* decl.c (grokdeclarator): Allow friend declarations from\n\tdependant types.\n\t* decl2.c (handle_class_head): Don't push into template parm contexts.\n\t* pt.c (push_template_decl_real): Template parm contexts are never\n\tbeing defined.\ntestsuite:\n\t* g++.dg/template/friend4.C: New test.\n\nFrom-SVN: r49589", "tree": {"sha": "b7a3a796913e016fb175553b89fc5c74f709db2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7a3a796913e016fb175553b89fc5c74f709db2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5614afb57da11705ce88e6646bcd33ef67eb8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5614afb57da11705ce88e6646bcd33ef67eb8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5614afb57da11705ce88e6646bcd33ef67eb8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5614afb57da11705ce88e6646bcd33ef67eb8ab/comments", "author": null, "committer": null, "parents": [{"sha": "5d65aeb7e4432949ff6198d06b37c3ac1c58f1b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d65aeb7e4432949ff6198d06b37c3ac1c58f1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d65aeb7e4432949ff6198d06b37c3ac1c58f1b7"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "f4432532c0e313b7cf23feabe28f03512445ec11", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -1,3 +1,12 @@\n+2002-02-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/109\n+\t* decl.c (grokdeclarator): Allow friend declarations from\n+\tdependant types.\n+\t* decl2.c (handle_class_head): Don't push into template parm contexts.\n+\t* pt.c (push_template_decl_real): Template parm contexts are never\n+\tbeing defined.\n+\n 2002-02-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* class.c: Include target.h."}, {"sha": "6fd9890d9c374afb9df0f71af0a78ec82ab371bc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -9612,6 +9612,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   int explicit_char = 0;\n   int defaulted_int = 0;\n   int extern_langp = 0;\n+  tree dependant_name = NULL_TREE;\n   \n   tree typedef_decl = NULL_TREE;\n   const char *name;\n@@ -9853,11 +9854,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      else if (TREE_CODE (cname) == TEMPLATE_TYPE_PARM\n \t\t       || TREE_CODE (cname) == BOUND_TEMPLATE_TEMPLATE_PARM)\n \t\t{\n-\t\t  error (\"`%T::%D' is not a valid declarator\", cname,\n-\t\t\t    TREE_OPERAND (decl, 1));\n-\t\t  error (\"  perhaps you want `typename %T::%D' to make it a type\",\n-\t\t\t    cname, TREE_OPERAND (decl, 1));\n-\t\t  return void_type_node;\n+\t  \t  /* This might be declaring a member of a template\n+\t\t     parm to be a friend.  */\n+\t\t  ctype = cname;\n+\t\t  dependant_name = TREE_OPERAND (decl, 1);\n \t\t}\n \t      else if (ctype == NULL_TREE)\n \t\tctype = cname;\n@@ -10349,6 +10349,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   friendp = RIDBIT_SETP (RID_FRIEND, specbits);\n   RIDBIT_RESET (RID_FRIEND, specbits);\n \n+  if (dependant_name && !friendp)\n+    {\n+      error (\"`%T::%D' is not a valid declarator\", ctype, dependant_name);\n+      return void_type_node;\n+    }\n+  \n   /* Warn if two storage classes are given. Default to `auto'.  */\n \n   if (RIDBIT_ANY_SET (specbits))"}, {"sha": "0cbb32100efc2e7a4f4ce5559b88f948d6b67495", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -5258,7 +5258,9 @@ handle_class_head (aggr, scope, id, defn_p, new_type_p)\n \t is different to the current scope.  */\n       tree context = CP_DECL_CONTEXT (decl);\n \n-      *new_type_p = current != context;\n+      *new_type_p = (current != context\n+\t\t     && TREE_CODE (context) != TEMPLATE_TYPE_PARM\n+\t\t     && TREE_CODE (context) != BOUND_TEMPLATE_TEMPLATE_PARM);\n       if (*new_type_p)\n \tpush_scope (context);\n   "}, {"sha": "9e5b20cb7bb34b7846e808e03bdd3270c62e727a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -2571,7 +2571,9 @@ push_template_decl_real (decl, is_friend)\n \n   if (!ctx \n       || TREE_CODE (ctx) == FUNCTION_DECL\n-      || TYPE_BEING_DEFINED (ctx)\n+      || (TREE_CODE (ctx) != TEMPLATE_TYPE_PARM\n+\t  && TREE_CODE (ctx) != BOUND_TEMPLATE_TEMPLATE_PARM\n+\t  && TYPE_BEING_DEFINED (ctx))\n       || (is_friend && !DECL_TEMPLATE_INFO (decl)))\n     {\n       if (DECL_LANG_SPECIFIC (decl)"}, {"sha": "693b9a911463bbcd7f884c4218e7de8a975ee542", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -1,3 +1,7 @@\n+2002-02-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/template/friend4.C: New test.\n+\n 2002-02-07  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \tPR fortran/3743"}, {"sha": "9cd3810c2c25506062ac750cce82b9b61843c314", "filename": "gcc/testsuite/g++.dg/template/friend4.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5614afb57da11705ce88e6646bcd33ef67eb8ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend4.C?ref=d5614afb57da11705ce88e6646bcd33ef67eb8ab", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 18 Dec 2001 <nathan@codesourcery.com>\n+\n+// PR 109, dependant member friends\n+\n+struct B\n+{\n+  static int foo ();\n+  struct N\n+  {\n+    static int bar ();\n+  };\n+};\n+\n+\n+template <class T>\n+class A\n+{\n+  friend int T::foo ();\n+  friend int T::N::bar ();\n+  \n+  private:\n+  static int m;\n+};\n+\n+template <class T>\n+class C\n+{\n+  friend struct T::N;\n+\n+  private:\n+  static int m;\n+};\n+\n+\n+int B::foo ()\n+{\n+  return A<B>::m;\n+}\n+\n+int B::N::bar ()\n+{\n+  return A<B>::m + C<B>::m;\n+}"}]}