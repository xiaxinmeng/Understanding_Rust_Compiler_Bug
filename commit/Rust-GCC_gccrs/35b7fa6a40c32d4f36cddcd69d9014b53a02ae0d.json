{"sha": "35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViN2ZhNmE0MGMzMmQ0ZjM2Y2RkY2Q2OWQ5MDE0YjUzYTAyYWUwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-26T12:29:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-26T12:29:41Z"}, "message": "[multiple changes]\n\n2004-04-26  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* sem_dist.adb, exp_dist.adb: When constructing a RAS value for a local\n\tsubprogram for which no pragma All_Calls_Remote applies, store the\n\taddress of the real subprogram in the underlying record type, so local\n\tdereferences do not go through the PCS.\n\n2004-04-26  Robert Dewar  <dewar@gnat.com>\n\n\t* i-c.ads: Add some type qualifications to avoid ambiguities when\n\tcompiling with s-auxdec.ads and a non-private address type.\n\n2004-04-26  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* Makefile.rtl: Fix error in previous check-in:\n\tAdd s-addope.o to non tasking object list (rather than tasking object\n\tlist).\n\n2004-04-26  Javier Miranda  <miranda@gnat.com>\n\n\t* sem_aggr.adb: Fix typo in comments\n\t(Resolve_Aggr_Expr): Propagate the type to the nested aggregate.\n\tRequired to check the null-exclusion attribute.\n\n\t* sem_attr.adb (Resolve_Attribute): Check the accessibility level in\n\tcase of anonymous access types in record and array components. For a\n\tcomponent definition the level is the same of the enclosing composite\n\ttype.\n\n\t* sem_ch3.adb (Analyze_Component_Declaration): In case of components\n\tthat are anonymous access types the level of accessibility depends on\n\tthe enclosing type declaration. In order to have this information, set\n\tthe scope of the anonymous access type to the enclosing record type\n\tdeclaration.\n\t(Array_Type_Declaration): In case of components that are anonymous\n\taccess types the level of accessibility depends on the enclosing type\n\tdeclaration. In order to have this information, set the scope of the\n\tanonymous access type to the enclosing array type declaration.\n\n\t* sem_ch3.adb (Array_Type_Declaration): Set the scope of the anonymous\n\taccess type.\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): Add check to verify that\n\trenaming of anonymous access-to-constant types allowed if and only if\n\tthe renamed object is access-to-constant.\n\n\t* sem_util.adb (Type_Access_Level): In case of anonymous access types\n\tthat are component_definition or discriminants of a nonlimited type,\n\tthe level is the same as that of the enclosing component type.\n\n2004-04-26  Sergey Rybin  <rybin@act-europe.fr>\n\n\t* sem_elim.adb: Some minor code reorganization from code reading. Fix\n\tmisprint in the function name (File_Name_Match).\n\nFrom-SVN: r81186", "tree": {"sha": "5420010f2d8952a835be61c074615295b46149c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5420010f2d8952a835be61c074615295b46149c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/comments", "author": null, "committer": null, "parents": [{"sha": "e11283f1b4f17d4d045a10a315cb47453ffcc927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11283f1b4f17d4d045a10a315cb47453ffcc927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11283f1b4f17d4d045a10a315cb47453ffcc927"}], "stats": {"total": 337, "additions": 262, "deletions": 75}, "files": [{"sha": "b7d9daa7daa8dde65ae89c68cd4feb4e9e02277f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -1,3 +1,58 @@\n+2004-04-26  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* sem_dist.adb, exp_dist.adb: When constructing a RAS value for a local\n+\tsubprogram for which no pragma All_Calls_Remote applies, store the\n+\taddress of the real subprogram in the underlying record type, so local\n+\tdereferences do not go through the PCS.\n+\n+2004-04-26  Robert Dewar  <dewar@gnat.com>\n+\n+\t* i-c.ads: Add some type qualifications to avoid ambiguities when\n+\tcompiling with s-auxdec.ads and a non-private address type.\n+\n+2004-04-26  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* Makefile.rtl: Fix error in previous check-in:\n+\tAdd s-addope.o to non tasking object list (rather than tasking object\n+\tlist).\n+\n+2004-04-26  Javier Miranda  <miranda@gnat.com>\n+\n+\t* sem_aggr.adb: Fix typo in comments\n+\t(Resolve_Aggr_Expr): Propagate the type to the nested aggregate.\n+\tRequired to check the null-exclusion attribute.\n+\n+\t* sem_attr.adb (Resolve_Attribute): Check the accessibility level in\n+\tcase of anonymous access types in record and array components. For a\n+\tcomponent definition the level is the same of the enclosing composite\n+\ttype.\n+\n+\t* sem_ch3.adb (Analyze_Component_Declaration): In case of components\n+\tthat are anonymous access types the level of accessibility depends on\n+\tthe enclosing type declaration. In order to have this information, set\n+\tthe scope of the anonymous access type to the enclosing record type\n+\tdeclaration.\n+\t(Array_Type_Declaration): In case of components that are anonymous\n+\taccess types the level of accessibility depends on the enclosing type\n+\tdeclaration. In order to have this information, set the scope of the\n+\tanonymous access type to the enclosing array type declaration.\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Set the scope of the anonymous\n+\taccess type.\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Add check to verify that\n+\trenaming of anonymous access-to-constant types allowed if and only if\n+\tthe renamed object is access-to-constant.\n+\n+\t* sem_util.adb (Type_Access_Level): In case of anonymous access types\n+\tthat are component_definition or discriminants of a nonlimited type,\n+\tthe level is the same as that of the enclosing component type.\n+\n+2004-04-26  Sergey Rybin  <rybin@act-europe.fr>\n+\n+\t* sem_elim.adb: Some minor code reorganization from code reading. Fix\n+\tmisprint in the function name (File_Name_Match).\n+\n 2004-04-23  Laurent GUERBY <laurent@guerby.net>\n \n \t* Makefile.in: Remove RANLIB_TEST, use -$(RANLIB) including after "}, {"sha": "9e45d01e1b7fc7bd9f10f574a407df60c194ae47", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -40,7 +40,6 @@ GNATRTL_TASKING_OBJS= \\\n   g-semaph$(objext) \\\n   g-signal$(objext) \\\n   g-thread$(objext) \\\n-  s-addope$(objext) \\\n   s-asthan$(objext) \\\n   s-inmaop$(objext) \\\n   s-interr$(objext) \\\n@@ -271,6 +270,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   ioexcept$(objext) \\\n   machcode$(objext) \\\n   s-addima$(objext) \\\n+  s-addope$(objext) \\\n   s-arit64$(objext) \\\n   s-assert$(objext) \\\n   s-atacco$(objext) \\"}, {"sha": "6b4ced731c983d741c1ad167f21793931b89aa17", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 79, "deletions": 39, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -1193,15 +1193,14 @@ package body Exp_Dist is\n       Proc_Decls        : constant List_Id := New_List;\n       Proc_Statements   : constant List_Id := New_List;\n \n-      Proc_Spec : Node_Id;\n-\n-      Proc : Node_Id;\n-\n-      Param        : Node_Id;\n-      Package_Name : Node_Id;\n-      Subp_Id      : Node_Id;\n-      Asynch_P     : Node_Id;\n-      Return_Value : Node_Id;\n+      Proc_Spec    : Node_Id;\n+      Proc         : Node_Id;\n+      Local_Addr   : Entity_Id;\n+      Package_Name : Entity_Id;\n+      Subp_Id      : Entity_Id;\n+      Asynch_P     : Entity_Id;\n+      Origin       : Entity_Id;\n+      Return_Value : Entity_Id;\n \n       All_Calls_Remote : Entity_Id;\n       --  True if an All_Calls_Remote pragma applies to the RCI unit\n@@ -1210,65 +1209,106 @@ package body Exp_Dist is\n \n       Loc : constant Source_Ptr := Sloc (N);\n \n-      procedure Set_Field (Field_Name : in Name_Id; Value : in Node_Id);\n-      --  Set a field name for the return value\n+      function Set_Field\n+        (Field_Name : Name_Id;\n+         Value      : Node_Id) return Node_Id;\n+      --  Construct an assignment that sets the named component in the\n+      --  returned record\n \n-      procedure Set_Field (Field_Name : in Name_Id; Value : in Node_Id)\n+      ---------------\n+      -- Set_Field --\n+      ---------------\n+\n+      function Set_Field\n+        (Field_Name : Name_Id;\n+         Value      : Node_Id) return Node_Id\n       is\n       begin\n-         Append_To (Proc_Statements,\n+         return\n            Make_Assignment_Statement (Loc,\n              Name       =>\n                Make_Selected_Component (Loc,\n                  Prefix        => New_Occurrence_Of (Return_Value, Loc),\n                  Selector_Name => Make_Identifier (Loc, Field_Name)),\n-             Expression => Value));\n+             Expression => Value);\n       end Set_Field;\n \n    --  Start of processing for Add_RAS_Access_Attribute\n \n    begin\n-      Param := Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n-      Package_Name := Make_Defining_Identifier (Loc, New_Internal_Name ('S'));\n-      Subp_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('N'));\n-      Asynch_P := Make_Defining_Identifier (Loc, New_Internal_Name ('B'));\n-      Return_Value := Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n+      Local_Addr   := Make_Defining_Identifier (Loc, New_Internal_Name ('L'));\n+      Package_Name := Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n+      Subp_Id      := Make_Defining_Identifier (Loc, New_Internal_Name ('N'));\n+      Asynch_P     := Make_Defining_Identifier (Loc, New_Internal_Name ('B'));\n+      Origin       := Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n+      Return_Value := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n       All_Calls_Remote :=\n         Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n \n       --  Create the object which will be returned of type Fat_Type\n \n-      Append_To (Proc_Decls,\n+      Append_List_To (Proc_Decls, New_List (\n+\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Origin,\n+          Constant_Present    => True,\n+          Object_Definition   =>\n+            New_Occurrence_Of (RTE (RE_Partition_ID), Loc),\n+          Expression          =>\n+            Make_Function_Call (Loc,\n+              Name                   =>\n+                New_Occurrence_Of (RTE (RE_Get_Active_Partition_Id), Loc),\n+              Parameter_Associations => New_List (\n+                New_Occurrence_Of (Package_Name, Loc)))),\n+\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Return_Value,\n           Object_Definition   =>\n-            New_Occurrence_Of (Fat_Type, Loc)));\n+            New_Occurrence_Of (Fat_Type, Loc))));\n \n       --  Initialize the fields of the record type with the appropriate data\n \n-      Set_Field (Name_Ras,\n-        OK_Convert_To (RTE (RE_Unsigned_64), New_Occurrence_Of (Param, Loc)));\n+      Append_List_To (Proc_Statements, New_List (\n+        Make_Implicit_If_Statement (N,\n+          Condition =>\n+            Make_And_Then (Loc,\n+              Left_Opnd =>\n+                Make_Op_Not (Loc,\n+                  New_Occurrence_Of (All_Calls_Remote, Loc)),\n+              Right_Opnd =>\n+                Make_Op_Eq (Loc,\n+                  Left_Opnd =>\n+                    New_Occurrence_Of (Origin, Loc),\n+                  Right_Opnd =>\n+                    Make_Function_Call (Loc,\n+                      New_Occurrence_Of (\n+                        RTE (RE_Get_Local_Partition_Id), Loc)))),\n+\n+          Then_Statements => New_List (\n+            Set_Field (Name_Ras,\n+              OK_Convert_To (RTE (RE_Unsigned_64),\n+                             New_Occurrence_Of (Local_Addr, Loc)))),\n+\n+          Else_Statements => New_List (\n+            Set_Field (Name_Ras,\n+              Make_Integer_Literal (Loc, Uint_0)))),\n+\n+        Set_Field (Name_Origin,\n+          Unchecked_Convert_To (Standard_Integer,\n+            New_Occurrence_Of (Origin, Loc))),\n \n-      Set_Field (Name_Origin,\n-        Unchecked_Convert_To (Standard_Integer,\n+        Set_Field (Name_Receiver,\n           Make_Function_Call (Loc,\n             Name                   =>\n-              New_Occurrence_Of (RTE (RE_Get_Active_Partition_Id), Loc),\n+              New_Occurrence_Of (RTE (RE_Get_RCI_Package_Receiver), Loc),\n             Parameter_Associations => New_List (\n-              New_Occurrence_Of (Package_Name, Loc)))));\n-\n-      Set_Field (Name_Receiver,\n-        Make_Function_Call (Loc,\n-          Name                   =>\n-            New_Occurrence_Of (RTE (RE_Get_RCI_Package_Receiver), Loc),\n-          Parameter_Associations => New_List (\n-            New_Occurrence_Of (Package_Name, Loc))));\n+              New_Occurrence_Of (Package_Name, Loc)))),\n \n-      Set_Field (Name_Subp_Id,\n-        New_Occurrence_Of (Subp_Id, Loc));\n+        Set_Field (Name_Subp_Id,\n+          New_Occurrence_Of (Subp_Id, Loc)),\n \n-      Set_Field (Name_Async,\n-        New_Occurrence_Of (Asynch_P, Loc));\n+        Set_Field (Name_Async,\n+          New_Occurrence_Of (Asynch_P, Loc))));\n \n       --  Return the newly created value\n \n@@ -1286,7 +1326,7 @@ package body Exp_Dist is\n           Defining_Unit_Name       => Proc,\n           Parameter_Specifications => New_List (\n             Make_Parameter_Specification (Loc,\n-              Defining_Identifier => Param,\n+              Defining_Identifier => Local_Addr,\n               Parameter_Type      =>\n                 New_Occurrence_Of (RTE (RE_Address), Loc)),\n "}, {"sha": "bcd77a897e44d61a6659e092dfa6a1038bd932f3", "filename": "gcc/ada/i-c.ads", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fi-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fi-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-c.ads?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -50,10 +50,14 @@ pragma Pure (C);\n    --  Signed and Unsigned Integers. Note that in GNAT, we have ensured that\n    --  the standard predefined Ada types correspond to the standard C types\n \n+   --  Note: the Integer qualifications used in the declaration of type long\n+   --  avoid ambiguities when compiling in the presence of s-auxdec.ads and\n+   --  a non-private system.address type.\n+\n    type int   is new Integer;\n    type short is new Short_Integer;\n-   type long  is range -(2 ** (System.Parameters.long_bits - 1))\n-     .. +(2 ** (System.Parameters.long_bits - 1)) - 1;\n+   type long  is range -(2 ** (System.Parameters.long_bits - Integer'(1)))\n+     .. +(2 ** (System.Parameters.long_bits - Integer'(1))) - 1;\n \n    type signed_char is range SCHAR_MIN .. SCHAR_MAX;\n    for signed_char'Size use CHAR_BIT;\n@@ -67,9 +71,13 @@ pragma Pure (C);\n \n    subtype plain_char is unsigned_char; -- ??? should be parametrized\n \n+   --  Note: the Integer qualifications used in the declaration of ptrdiff_t\n+   --  avoid ambiguities when compiling in the presence of s-auxdec.ads and\n+   --  a non-private system.address type.\n+\n    type ptrdiff_t is\n-     range -(2 ** (Standard'Address_Size - 1)) ..\n-           +(2 ** (Standard'Address_Size - 1) - 1);\n+     range -(2 ** (Standard'Address_Size - Integer'(1))) ..\n+           +(2 ** (Standard'Address_Size - Integer'(1)) - 1);\n \n    type size_t is mod 2 ** Standard'Address_Size;\n "}, {"sha": "e9d63ee25623b97239ae35feb039f06077561cb1", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -960,7 +960,7 @@ package body Sem_Aggr is\n \n             Aggr_Typ : constant Entity_Id := Etype (Typ);\n             --  This is the unconstrained array type, which is the type\n-            --  against which the aggregate is to be resoved. Typ itself\n+            --  against which the aggregate is to be resolved. Typ itself\n             --  is the array type of the context which may not be the same\n             --  subtype as the subtype for the final aggregate.\n \n@@ -977,7 +977,7 @@ package body Sem_Aggr is\n             --  formal parameter. Consequently we also need to test for\n             --  N_Procedure_Call_Statement or N_Function_Call.\n \n-            Set_Etype (N, Aggr_Typ);  --  may be overridden later on.\n+            Set_Etype (N, Aggr_Typ);  --  may be overridden later on\n \n             --  Ada 0Y (AI-231): Propagate the null_exclusion attribute to the\n             --  components of the array aggregate\n@@ -1399,6 +1399,12 @@ package body Sem_Aggr is\n                end if;\n             end if;\n \n+            --  Ada 0Y (AI-231): Propagate the type to the nested aggregate.\n+            --  Required to check the null-exclusion attribute (if present).\n+            --  This value may be overridden later on.\n+\n+            Set_Etype (Expr, Etype (N));\n+\n             Resolution_OK := Resolve_Array_Aggregate\n               (Expr, Nxt_Ind, Nxt_Ind_Constr, Component_Typ, Others_Allowed);\n "}, {"sha": "ffb0a2706dce99098f0fdb1165e13f054d7624ad", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -6645,8 +6645,37 @@ package body Sem_Attr is\n                   or else\n                 Attr_Id = Attribute_Unchecked_Access)\n               and then (Ekind (Btyp) = E_General_Access_Type\n-                         or else Ekind (Btyp) = E_Anonymous_Access_Type)\n+                          or else Ekind (Btyp) = E_Anonymous_Access_Type)\n             then\n+               --  Ada 0Y (AI-230): Check the accessibility of anonymous access\n+               --  types in record and array components. For a component defini\n+               --  tion the level is the same of the enclosing composite type.\n+\n+               if Extensions_Allowed\n+                 and then Ekind (Btyp) = E_Anonymous_Access_Type\n+                 and then (Is_Array_Type (Scope (Btyp))\n+                             or else Ekind (Scope (Btyp)) = E_Record_Type)\n+                 and then Object_Access_Level (P)\n+                            > Type_Access_Level (Btyp)\n+               then\n+                  --  In an instance, this is a runtime check, but one we\n+                  --  know will fail, so generate an appropriate warning.\n+\n+                  if In_Instance_Body then\n+                     Error_Msg_N\n+                       (\"?non-local pointer cannot point to local object\", P);\n+                     Error_Msg_N\n+                       (\"?Program_Error will be raised at run time\", P);\n+                     Rewrite (N,\n+                       Make_Raise_Program_Error (Loc,\n+                         Reason => PE_Accessibility_Check_Failed));\n+                     Set_Etype (N, Typ);\n+                  else\n+                     Error_Msg_N\n+                       (\"non-local pointer cannot point to local object\", P);\n+                  end if;\n+               end if;\n+\n                if Is_Dependent_Component_Of_Mutable_Object (P) then\n                   Error_Msg_N\n                     (\"illegal attribute for discriminant-dependent component\","}, {"sha": "1b4f7e316a958337f23563ed4ac981a7d5435b49", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -993,6 +993,12 @@ package body Sem_Ch3 is\n                 (Related_Nod => N,\n                  N => Access_Definition (Component_Definition (N)));\n \n+         --  Ada 0Y (AI-230): In case of components that are anonymous access\n+         --  types the level of accessibility depends on the enclosing type\n+         --  declaration\n+\n+         Set_Scope (T, Current_Scope); --  Ada 0Y (AI-230)\n+\n          --  Ada 0Y (AI-254)\n \n          if Present (Access_To_Subprogram_Definition\n@@ -2993,6 +2999,12 @@ package body Sem_Ch3 is\n                            (Related_Nod => Related_Id,\n                             N           => Access_Definition (Component_Def));\n \n+         --  Ada 0Y (AI-230): In case of components that are anonymous access\n+         --  types the level of accessibility depends on the enclosing type\n+         --  declaration\n+\n+         Set_Scope (Element_Type, T); --  Ada 0Y (AI-230)\n+\n          --  Ada 0Y (AI-254)\n \n          declare"}, {"sha": "03529634ae5e4f50ac142f472b9ce49872daf377", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -687,17 +687,25 @@ package body Sem_Ch8 is\n \n       elsif Present (Access_Definition (N)) then\n \n-         if Null_Exclusion_Present (Access_Definition (N)) then\n-            Error_Msg_N (\"(Ada 0Y): null-excluding attribute ignored \"\n-                         & \"('R'M 8.5.1(6))?\", N);\n-            Set_Null_Exclusion_Present (Access_Definition (N), False);\n-         end if;\n-\n          T := Access_Definition\n                 (Related_Nod => N,\n                  N           => Access_Definition (N));\n+\n          Analyze_And_Resolve (Nam, T);\n \n+         --  Ada 0Y (AI-230): Renaming of anonymous access-to-constant types\n+         --  allowed if and only if the renamed object is access-to-constant\n+\n+         if Constant_Present (Access_Definition (N))\n+           and then not Is_Access_Constant (Etype (Nam))\n+         then\n+            Error_Msg_N (\"(Ada 0Y): the renamed object is not \"\n+                         & \"access-to-constant ('R'M 8.5.1(6))\", N);\n+\n+         elsif Null_Exclusion_Present (Access_Definition (N)) then\n+            Error_Msg_N (\"(Ada 0Y): null-excluding attribute ignored \"\n+                         & \"('R'M 8.5.1(6))?\", N);\n+         end if;\n       else\n          pragma Assert (False);\n          null;"}, {"sha": "5ce3fb3284b1c7eef2f6a51694d7a9ee99d24f87", "filename": "gcc/ada/sem_dist.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dist.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -295,7 +295,7 @@ package body Sem_Dist is\n       Async_E               : Entity_Id;\n       All_Calls_Remote_E    : Entity_Id;\n       Attribute_Subp        : Entity_Id;\n-      Parameter             : Node_Id;\n+      Local_Addr            : Node_Id;\n \n    begin\n       --  Check if we have to expand the access attribute\n@@ -346,14 +346,17 @@ package body Sem_Dist is\n          All_Calls_Remote_E := Standard_False;\n       end if;\n \n-      Parameter := New_Occurrence_Of (RTE (RE_Null_Address), Loc);\n+      Local_Addr :=\n+        Make_Attribute_Reference (Loc,\n+          Prefix         => New_Occurrence_Of (Remote_Subp, Loc),\n+          Attribute_Name => Name_Address);\n \n       Tick_Access_Conv_Call :=\n         Make_Function_Call (Loc,\n           Name => New_Occurrence_Of (Attribute_Subp, Loc),\n           Parameter_Associations =>\n             New_List (\n-              Parameter,\n+              Local_Addr,\n               Make_String_Literal (Loc, Full_Qualified_Name (RS_Pkg_E)),\n               Build_Subprogram_Id (Loc, Remote_Subp),\n               New_Occurrence_Of (Async_E, Loc),"}, {"sha": "9f138ebf7ce81460b9436f1d991c9fd7f7ede4f4", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -376,7 +376,7 @@ package body Sem_Elim is\n                      P      : Source_Ptr;\n                      Sindex : Source_File_Index;\n \n-                     function File_Mame_Match return Boolean;\n+                     function File_Name_Match return Boolean;\n                      --  This function is supposed to be called when Idx points\n                      --  to the beginning of the new file name, and Name_Buffer\n                      --  is set to contain the name of the proper source file\n@@ -436,45 +436,64 @@ package body Sem_Elim is\n                         end if;\n                      end Different_Trace_Lengths;\n \n-                     function File_Mame_Match return Boolean is\n-                        Tmp_Idx : Positive := 1;\n-                        End_Idx : Positive := 1;\n-                        --  Initializations are to stop warnings\n+                     ---------------------\n+                     -- File_Name_Match --\n+                     ---------------------\n \n-                        --  But are warnings possibly valid ???\n-                        --  Why are loops below guaranteed to exit ???\n+                     function File_Name_Match return Boolean is\n+                        Tmp_Idx : Natural;\n+                        End_Idx : Natural;\n \n                      begin\n                         if Idx = 0 then\n                            return False;\n                         end if;\n \n-                        for J in Idx .. Last loop\n-                           if Sloc_Trace (J) = ':' then\n-                              Tmp_Idx := J - 1;\n+                        --  Find first colon. If no colon, then return False.\n+                        --  If there is a colon, Tmp_Idx is set to point just\n+                        --  before the colon.\n+\n+                        Tmp_Idx := Idx - 1;\n+                        loop\n+                           if Tmp_Idx >= Last then\n+                              return False;\n+                           elsif Sloc_Trace (Tmp_Idx + 1) = ':' then\n                               exit;\n+                           else\n+                              Tmp_Idx := Tmp_Idx + 1;\n                            end if;\n                         end loop;\n \n-                        for J in reverse Idx .. Tmp_Idx loop\n-                           if Sloc_Trace (J) /= ' ' then\n-                              End_Idx := J;\n+                        --  Find last non-space before this colon. If there\n+                        --  is no no space character before this colon, then\n+                        --  return False. Otherwise, End_Idx set to point to\n+                        --  this non-space character.\n+\n+                        End_Idx := Tmp_Idx;\n+                        loop\n+                           if End_Idx < Idx then\n+                              return False;\n+                           elsif Sloc_Trace (End_Idx) /= ' ' then\n                               exit;\n+                           else\n+                              End_Idx := End_Idx - 1;\n                            end if;\n                         end loop;\n \n+                        --  Now see if file name matches what is in Name_Buffer\n+                        --  and if so, step Idx past it and return True. If the\n+                        --  name does not match, return False.\n+\n                         if Sloc_Trace (Idx .. End_Idx) =\n                            Name_Buffer (1 .. Name_Len)\n                         then\n                            Idx := Tmp_Idx + 2;\n-\n                            Idx := Skip_Spaces;\n-\n                            return True;\n                         else\n                            return False;\n                         end if;\n-                     end File_Mame_Match;\n+                     end File_Name_Match;\n \n                      --------------------\n                      -- Line_Num_Match --\n@@ -548,7 +567,7 @@ package body Sem_Elim is\n \n                      Idx := Skip_Spaces;\n                      while Idx > 0 loop\n-                        if not File_Mame_Match then\n+                        if not File_Name_Match then\n                            goto Continue;\n                         elsif not Line_Num_Match then\n                            goto Continue;"}, {"sha": "f005c75151a496cb31f737eb88fa531d1c87405f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=35b7fa6a40c32d4f36cddcd69d9014b53a02ae0d", "patch": "@@ -6101,9 +6101,16 @@ package body Sem_Util is\n       --  declared at the library level to ensure that names such as\n       --  X.all'access don't fail static accessibility checks.\n \n+      --  Ada 0Y (AI-230): In case of anonymous access types that are\n+      --  component_definition or discriminants of a nonlimited type,\n+      --  the level is the same as that of the enclosing component type.\n+\n       Btyp := Base_Type (Typ);\n       if Ekind (Btyp) in Access_Kind then\n-         if Ekind (Btyp) = E_Anonymous_Access_Type then\n+         if Ekind (Btyp) = E_Anonymous_Access_Type\n+           and then not Is_Array_Type (Scope (Btyp))      --  Ada 0Y (AI-230)\n+           and then Ekind (Scope (Btyp)) /= E_Record_Type --  Ada 0Y (AI-230)\n+         then\n             return Scope_Depth (Standard_Standard);\n          end if;\n "}]}