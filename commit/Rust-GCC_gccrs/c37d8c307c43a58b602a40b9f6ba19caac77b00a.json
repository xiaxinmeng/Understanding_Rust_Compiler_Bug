{"sha": "c37d8c307c43a58b602a40b9f6ba19caac77b00a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3ZDhjMzA3YzQzYTU4YjYwMmE0MGI5ZjZiYTE5Y2FhYzc3YjAwYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-17T13:02:07Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-17T13:02:07Z"}, "message": "add parse support for @package to ObjC*\n\ngcc/c-family:\n\t\n\t* c-common.c (c_common_reswords): Add package, RID_AT_PACKAGE.\n\t* c-common.h (enum rid): Add RID_AT_PACKAGE.\n\t(objc_ivar_visibility_kind): New enum.\n\t(objc_set_visibility): Adjust prototype to use visibility enum.\n\t* stub-objc.c (objc_set_visibility): Adjust stub to use \n\tvisibility enum.\n\ngcc/objc:\n\n\t* objc-act.c: Rename 'objc_public_flag' to  objc_ivar_visibility and\n\tmake its type 'objc_ivar_visibility_kind'.  \n\t(objc_start_class_interface): Update to use visibility enum.\n\t(objc_start_class_implementation): Likewise.\n\t(objc_set_visibility): Update to use visibility enum, warn that \n\t@package is handle as per @public.\n\t(add_instance_variable): Handle OBJC_IVAR_VIS_PACKAGE.\n\t* objc-act.h: Rename 'objc_public_flag' to  objc_ivar_visibility and\n\tmake its type 'objc_ivar_visibility_kind'.\n\ngcc/cp:\n\n\t* parser.c (cp_parser_objc_visibility_spec): Update to use visibility \n\tenum, and handle @package.\n\ngcc:\n\n\t* c-parser.c (c_parser_objc_class_instance_variables): Update to use \n\tvisibility enum, and handle @package.\n\ngcc/testsuite:\n\n\t* objc.dg/fsf-package-0.m: New.\n\t* obj-c++.dg/fsf-package-0.m: New.\n\nFrom-SVN: r165585", "tree": {"sha": "4cf60cd36ea1bba58842294fad70214ca02f74bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cf60cd36ea1bba58842294fad70214ca02f74bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37d8c307c43a58b602a40b9f6ba19caac77b00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37d8c307c43a58b602a40b9f6ba19caac77b00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37d8c307c43a58b602a40b9f6ba19caac77b00a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37d8c307c43a58b602a40b9f6ba19caac77b00a/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1501d0941a5d845d923b30c6199ce0f8b792bdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1501d0941a5d845d923b30c6199ce0f8b792bdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1501d0941a5d845d923b30c6199ce0f8b792bdc8"}], "stats": {"total": 179, "additions": 156, "deletions": 23}, "files": [{"sha": "512ae120dbc1f8d975cd4e1d4c35ca5c3190a816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -1,3 +1,8 @@\n+2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-parser.c (c_parser_objc_class_instance_variables): Update to use \n+\tvisibility enum, and handle @package.\n+\n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* doc/objc.texi (What you can and what you cannot do in +load):"}, {"sha": "f0ef49e01716019e5e3492f7ef0c4ea23dd1b225", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -1,3 +1,12 @@\n+2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-common.c (c_common_reswords): Add package, RID_AT_PACKAGE.\n+\t* c-common.h (enum rid): Add RID_AT_PACKAGE.\n+\t(objc_ivar_visibility_kind): New enum.\n+\t(objc_set_visibility): Adjust prototype to use visibility enum.\n+\t* stub-objc.c (objc_set_visibility): Adjust stub to use \n+\tvisibility enum.\n+\n 2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* c-cppbuiltin.c (builtin_define_float_constants): Emit"}, {"sha": "5068c56f5ed762ee14c1fee6bfb29582566989da", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -544,6 +544,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"optional\",\t\tRID_AT_OPTIONAL,\tD_OBJC },\n   { \"required\",\t\tRID_AT_REQUIRED,\tD_OBJC },\n   { \"property\",\t\tRID_AT_PROPERTY,\tD_OBJC },\n+  { \"package\",\t\tRID_AT_PACKAGE,\t\tD_OBJC },\n   /* These are recognized only in protocol-qualifier context\n      (see above) */\n   { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },"}, {"sha": "8855ff794d33880d99c75d4ccc9ad2b7c45ef6e3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -143,7 +143,7 @@ enum rid\n      they follow '@')  */\n   RID_AT_ENCODE,   RID_AT_END,\n   RID_AT_CLASS,    RID_AT_ALIAS,     RID_AT_DEFS,\n-  RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,\n+  RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,  RID_AT_PACKAGE,\n   RID_AT_PROTOCOL, RID_AT_SELECTOR,\n   RID_AT_THROW,\t   RID_AT_TRY,       RID_AT_CATCH,\n   RID_AT_FINALLY,  RID_AT_SYNCHRONIZED, \n@@ -440,6 +440,14 @@ typedef enum objc_property_attribute_kind {\n   OBJC_PATTR_COPIES\t= 5\n } objc_property_attribute_kind;\n \n+/* ObjC ivar visibility types.  */\n+typedef enum objc_ivar_visibility_kind {\n+  OBJC_IVAR_VIS_PROTECTED = 0,\n+  OBJC_IVAR_VIS_PUBLIC    = 1,\n+  OBJC_IVAR_VIS_PRIVATE   = 2,\n+  OBJC_IVAR_VIS_PACKAGE   = 3\n+} objc_ivar_visibility_kind;\n+\n /* The various name of operator that appears in error messages. */\n typedef enum ref_operator {\n   /* NULL */\n@@ -1009,7 +1017,7 @@ extern void objc_start_class_implementation (tree, tree);\n extern void objc_start_category_implementation (tree, tree);\n extern void objc_continue_implementation (void);\n extern void objc_finish_implementation (void);\n-extern void objc_set_visibility (int);\n+extern void objc_set_visibility (objc_ivar_visibility_kind);\n extern void objc_set_method_type (enum tree_code);\n extern tree objc_build_method_signature (tree, tree, tree, bool);\n extern void objc_add_method_declaration (tree, tree);"}, {"sha": "cff4d79267e8553bf01568d2862d663d022bd5cc", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -163,7 +163,7 @@ objc_add_instance_variable (tree ARG_UNUSED (decl))\n }\n \n void\n-objc_set_visibility (int ARG_UNUSED (vis))\n+objc_set_visibility (objc_ivar_visibility_kind ARG_UNUSED (vis))\n {\n }\n "}, {"sha": "e4230b973820674855fa0670b9e25379fa64189e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -6703,19 +6703,25 @@ c_parser_objc_class_instance_variables (c_parser *parser)\n       if (c_parser_next_token_is_keyword (parser, RID_AT_PRIVATE))\n \t{\n \t  c_parser_consume_token (parser);\n-\t  objc_set_visibility (2);\n+\t  objc_set_visibility (OBJC_IVAR_VIS_PRIVATE);\n \t  continue;\n \t}\n       else if (c_parser_next_token_is_keyword (parser, RID_AT_PROTECTED))\n \t{\n \t  c_parser_consume_token (parser);\n-\t  objc_set_visibility (0);\n+\t  objc_set_visibility (OBJC_IVAR_VIS_PROTECTED);\n \t  continue;\n \t}\n       else if (c_parser_next_token_is_keyword (parser, RID_AT_PUBLIC))\n \t{\n \t  c_parser_consume_token (parser);\n-\t  objc_set_visibility (1);\n+\t  objc_set_visibility (OBJC_IVAR_VIS_PUBLIC);\n+\t  continue;\n+\t}\n+      else if (c_parser_next_token_is_keyword (parser, RID_AT_PACKAGE))\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  objc_set_visibility (OBJC_IVAR_VIS_PACKAGE);\n \t  continue;\n \t}\n       else if (c_parser_next_token_is (parser, CPP_PRAGMA))"}, {"sha": "b72d43d2ae6677e713c520d898bbb28d693f9fc6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -1,3 +1,8 @@\n+2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* parser.c (cp_parser_objc_visibility_spec): Update to use visibility \n+\tenum, and handle @package.\n+\n 2010-10-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/45983"}, {"sha": "670337e5f464febd61615e2a130da1666ae144a8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -21356,13 +21356,16 @@ cp_parser_objc_visibility_spec (cp_parser* parser)\n   switch (vis->keyword)\n     {\n     case RID_AT_PRIVATE:\n-      objc_set_visibility (2);\n+      objc_set_visibility (OBJC_IVAR_VIS_PRIVATE);\n       break;\n     case RID_AT_PROTECTED:\n-      objc_set_visibility (0);\n+      objc_set_visibility (OBJC_IVAR_VIS_PROTECTED);\n       break;\n     case RID_AT_PUBLIC:\n-      objc_set_visibility (1);\n+      objc_set_visibility (OBJC_IVAR_VIS_PUBLIC);\n+      break;\n+    case RID_AT_PACKAGE:\n+      objc_set_visibility (OBJC_IVAR_VIS_PACKAGE);\n       break;\n     default:\n       return;"}, {"sha": "7917d60fa9baa91c9669520a5c71948e7e8e98f9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -1,3 +1,15 @@\n+2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-act.c: Rename 'objc_public_flag' to  objc_ivar_visibility and\n+\tmake its type 'objc_ivar_visibility_kind'.  \n+\t(objc_start_class_interface): Update to use visibility enum.\n+\t(objc_start_class_implementation): Likewise.\n+\t(objc_set_visibility): Update to use visibility enum, warn that \n+\t@package is handle as per @public.\n+\t(add_instance_variable): Handle OBJC_IVAR_VIS_PACKAGE.\n+\t* objc-act.h: Rename 'objc_public_flag' to  objc_ivar_visibility and\n+\tmake its type 'objc_ivar_visibility_kind'.\n+\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tmerge from FSF apple 'trunk' branch. "}, {"sha": "1be52d91b5cf8656f2d32815cd9481bef4a206c3", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -150,7 +150,7 @@ static void objc_start_function (tree, tree, tree, struct c_arg_info *);\n static tree start_protocol (enum tree_code, tree, tree);\n static tree build_method_decl (enum tree_code, tree, tree, tree, bool);\n static tree objc_add_method (tree, tree, int, bool);\n-static tree add_instance_variable (tree, int, tree);\n+static tree add_instance_variable (tree, objc_ivar_visibility_kind, tree);\n static tree build_ivar_reference (tree);\n static tree is_ivar (tree, tree);\n \n@@ -385,7 +385,7 @@ int imp_count = 0;\t/* `@implementation' */\n int cat_count = 0;\t/* `@category' */\n \n enum tree_code objc_inherit_code;\n-int objc_public_flag;\n+objc_ivar_visibility_kind objc_ivar_visibility;\n \n /* Use to generate method labels.  */\n static int method_slot = 0;\n@@ -734,7 +734,7 @@ objc_start_class_interface (tree klass, tree super_class,\n   objc_interface_context\n     = objc_ivar_context\n     = start_class (CLASS_INTERFACE_TYPE, klass, super_class, protos);\n-  objc_public_flag = 0;\n+  objc_ivar_visibility = OBJC_IVAR_VIS_PROTECTED;\n }\n \n void\n@@ -784,7 +784,7 @@ objc_start_class_implementation (tree klass, tree super_class)\n   objc_implementation_context\n     = objc_ivar_context\n     = start_class (CLASS_IMPLEMENTATION_TYPE, klass, super_class, NULL_TREE);\n-  objc_public_flag = 0;\n+  objc_ivar_visibility = OBJC_IVAR_VIS_PROTECTED;\n }\n \n void\n@@ -822,9 +822,11 @@ objc_finish_implementation (void)\n }\n \n void\n-objc_set_visibility (int visibility)\n+objc_set_visibility (objc_ivar_visibility_kind visibility)\n {\n-  objc_public_flag = visibility;\n+  if (visibility == OBJC_IVAR_VIS_PACKAGE)\n+    warning (0, \"%<@package%> presently has the same effect as %<@public%>\");\n+  objc_ivar_visibility = visibility;\n }\n \n void\n@@ -1352,7 +1354,7 @@ void\n objc_add_instance_variable (tree decl)\n {\n   (void) add_instance_variable (objc_ivar_context,\n-\t\t\t\tobjc_public_flag,\n+\t\t\t\tobjc_ivar_visibility,\n \t\t\t\tdecl);\n }\n \n@@ -2592,7 +2594,7 @@ string_eq (const void *ptr1, const void *ptr2)\n tree\n objc_build_string_object (tree string)\n {\n-  tree constructor, constant_string_class;\n+  tree constructor = NULL_TREE, constant_string_class;\n   int length;\n   tree fields, addr;\n   struct string_descriptor *desc, key;\n@@ -7795,7 +7797,8 @@ add_category (tree klass, tree category)\n    VISIBILITY is 1 for public, 0 for protected, and 2 for private.  */\n \n static tree\n-add_instance_variable (tree klass, int visibility, tree field_decl)\n+add_instance_variable (tree klass, objc_ivar_visibility_kind visibility, \n+\t\t       tree field_decl)\n {\n   tree field_type = TREE_TYPE (field_decl);\n   const char *ivar_name = DECL_NAME (field_decl)\n@@ -7887,19 +7890,21 @@ add_instance_variable (tree klass, int visibility, tree field_decl)\n   /* Overload the public attribute, it is not used for FIELD_DECLs.  */\n   switch (visibility)\n     {\n-    case 0:\n+    case OBJC_IVAR_VIS_PROTECTED:\n       TREE_PUBLIC (field_decl) = 0;\n       TREE_PRIVATE (field_decl) = 0;\n       TREE_PROTECTED (field_decl) = 1;\n       break;\n \n-    case 1:\n+    case OBJC_IVAR_VIS_PACKAGE:\n+    /* TODO: Implement the package variant.  */\n+    case OBJC_IVAR_VIS_PUBLIC:\n       TREE_PUBLIC (field_decl) = 1;\n       TREE_PRIVATE (field_decl) = 0;\n       TREE_PROTECTED (field_decl) = 0;\n       break;\n \n-    case 2:\n+    case OBJC_IVAR_VIS_PRIVATE:\n       TREE_PUBLIC (field_decl) = 0;\n       TREE_PRIVATE (field_decl) = 1;\n       TREE_PROTECTED (field_decl) = 0;\n@@ -8520,7 +8525,7 @@ objc_gen_one_property_datum (tree klass, tree property, tree class_methods, bool\n \t\t\t\t      objc_build_property_ivar_name (property));\n       DECL_CONTEXT (field_decl) = record;\n       (void) add_instance_variable (klass, \n-\t\t\t\t    1, field_decl);\n+\t\t\t\t    OBJC_IVAR_VIS_PUBLIC, field_decl);\n       /* Unfortunately, CLASS_IVARS is completed when interface is completed.\n \t Must add the new ivar by hand to its list here. */\n       "}, {"sha": "a11a6de3ccc6ae7722b7fa4c35527922db72a4fa", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -175,7 +175,7 @@ extern GTY(()) int imp_count;\t/* `@implementation' */\n extern GTY(()) int cat_count;\t/* `@category' */\n \n extern GTY(()) enum tree_code objc_inherit_code;\n-extern GTY(()) int objc_public_flag;\n+extern GTY(()) objc_ivar_visibility_kind objc_ivar_visibility;\n \n /* Objective-C/Objective-C++ global tree enumeration.  */\n "}, {"sha": "d678a0a5cd533c099fbc1e9bf3d67143611cfa72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -1,3 +1,8 @@\n+2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc.dg/fsf-package-0.m: New.\n+\t* obj-c++.dg/fsf-package-0.m: New.\n+\n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/18255"}, {"sha": "d6b4db21777b38bf39fac90cb06133165b765cc4", "filename": "gcc/testsuite/obj-c++.dg/fsf-package-0.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ffsf-package-0.m?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+#import \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc-api.h>\n+\n+@interface obj : Object\n+{\n+@public\n+  int v1;\n+@package\t/* { dg-warning \".@package. presently has the same effect as .@public.\" } */\n+  int v2;\n+@protected\n+  int v3;\n+@private\n+  int v4;\n+}\n+- (int) value;\n+- (void) setValue: (int)number;\n+@end\n+\n+@implementation obj : Object\n+\n+- (int) value { return v1; }\n+- (void) setValue: (int)number { v1 = number; }\n+\n+@end\n+\n+void foo (void)\n+{\n+  obj *a;\n+\n+  [a setValue:2];\n+  a->v2 = 1;\n+  a->v3 = [a value] - a->v2;\t/* { dg-warning \".v3. is @protected\" } */\n+  a->v4 = a->v3 - 1;\t\t/* { dg-warning \".v4. is @private\" } */\n+  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } 35 } */\n+}"}, {"sha": "d6b4db21777b38bf39fac90cb06133165b765cc4", "filename": "gcc/testsuite/objc.dg/fsf-package-0.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37d8c307c43a58b602a40b9f6ba19caac77b00a/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffsf-package-0.m?ref=c37d8c307c43a58b602a40b9f6ba19caac77b00a", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+\n+#import \"../objc-obj-c++-shared/Object1.h\"\n+#include <objc/objc-api.h>\n+\n+@interface obj : Object\n+{\n+@public\n+  int v1;\n+@package\t/* { dg-warning \".@package. presently has the same effect as .@public.\" } */\n+  int v2;\n+@protected\n+  int v3;\n+@private\n+  int v4;\n+}\n+- (int) value;\n+- (void) setValue: (int)number;\n+@end\n+\n+@implementation obj : Object\n+\n+- (int) value { return v1; }\n+- (void) setValue: (int)number { v1 = number; }\n+\n+@end\n+\n+void foo (void)\n+{\n+  obj *a;\n+\n+  [a setValue:2];\n+  a->v2 = 1;\n+  a->v3 = [a value] - a->v2;\t/* { dg-warning \".v3. is @protected\" } */\n+  a->v4 = a->v3 - 1;\t\t/* { dg-warning \".v4. is @private\" } */\n+  \t\t\t\t/* { dg-warning \".v3. is @protected\" \"\" { target *-*-* } 35 } */\n+}"}]}