{"sha": "466d19802ad8b2d36609934e788326ef51c1d272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2ZDE5ODAyYWQ4YjJkMzY2MDk5MzRlNzg4MzI2ZWY1MWMxZDI3Mg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-11-02T03:45:59Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-11-02T03:45:59Z"}, "message": "remove cast to rtx_insn * in remove_note\n\ngcc/ChangeLog:\n\n2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/rl78/rl78.c (gen-and_emit_move): Change argument type\n\tto rtx_insn *.\n\t(transcode_memory_rtx): Likewise.\n\t(move_to_acc): Likewise.\n\t(move_from_acc): Likewise.\n\t(move_acc_to_reg): Likewise.\n\t(move_to_x): Likewise.\n\t(move_to_hl): Likewise.\n\t(move_to_de): Likewise.\n\t* config/rs6000/rs6000.c (emit_frame_save): Likewise.\n\t(rs6000_emit_savres_rtx): Likewise.\n\t(rs6000_emit_prologue): Likewise.\n\t* reorg.c (update_reg_unused_notes): Likewise.\n\t* rtl.h (remove_note): Adjust prototype.\n\t* rtlanal.c (remove_note): Make argument type rtx_insn *.\n\nFrom-SVN: r241771", "tree": {"sha": "da6fc22c192622cd89d6d41b6b79ae581f5b6c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da6fc22c192622cd89d6d41b6b79ae581f5b6c56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/466d19802ad8b2d36609934e788326ef51c1d272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466d19802ad8b2d36609934e788326ef51c1d272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466d19802ad8b2d36609934e788326ef51c1d272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466d19802ad8b2d36609934e788326ef51c1d272/comments", "author": null, "committer": null, "parents": [{"sha": "4b6ab433875f410f350b4ddf54a0393f5ac289c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6ab433875f410f350b4ddf54a0393f5ac289c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6ab433875f410f350b4ddf54a0393f5ac289c8"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "fa3df169640e0388b1c37a6c9a314aedeb3c6826", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -1,3 +1,21 @@\n+2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/rl78/rl78.c (gen-and_emit_move): Change argument type\n+\tto rtx_insn *.\n+\t(transcode_memory_rtx): Likewise.\n+\t(move_to_acc): Likewise.\n+\t(move_from_acc): Likewise.\n+\t(move_acc_to_reg): Likewise.\n+\t(move_to_x): Likewise.\n+\t(move_to_hl): Likewise.\n+\t(move_to_de): Likewise.\n+\t* config/rs6000/rs6000.c (emit_frame_save): Likewise.\n+\t(rs6000_emit_savres_rtx): Likewise.\n+\t(rs6000_emit_prologue): Likewise.\n+\t* reorg.c (update_reg_unused_notes): Likewise.\n+\t* rtl.h (remove_note): Adjust prototype.\n+\t* rtlanal.c (remove_note): Make argument type rtx_insn *.\n+\n 2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config/alpha/alpha.c (alpha_legitimize_address_1): Split up"}, {"sha": "b8fe4c97550cf822a7f0e0777fd2baa464dacd68", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -2778,7 +2778,7 @@ process_postponed_content_update (void)\n    after WHERE.  If TO already contains FROM then do nothing.  Returns TO if\n    BEFORE is true, FROM otherwise.  */\n static rtx\n-gen_and_emit_move (rtx to, rtx from, rtx where, bool before)\n+gen_and_emit_move (rtx to, rtx from, rtx_insn *where, bool before)\n {\n   machine_mode mode = GET_MODE (to);\n \n@@ -2833,7 +2833,7 @@ gen_and_emit_move (rtx to, rtx from, rtx where, bool before)\n    copy it into NEWBASE and return the updated MEM.  Otherwise just\n    return M.  Any needed insns are emitted before BEFORE.  */\n static rtx\n-transcode_memory_rtx (rtx m, rtx newbase, rtx before)\n+transcode_memory_rtx (rtx m, rtx newbase, rtx_insn *before)\n {\n   rtx base, index, addendr;\n   int addend = 0;\n@@ -2934,7 +2934,7 @@ transcode_memory_rtx (rtx m, rtx newbase, rtx before)\n /* Copy SRC to accumulator (A or AX), placing any generated insns\n    before BEFORE.  Returns accumulator RTX.  */\n static rtx\n-move_to_acc (int opno, rtx before)\n+move_to_acc (int opno, rtx_insn *before)\n {\n   rtx src = OP (opno);\n   machine_mode mode = GET_MODE (src);\n@@ -2968,7 +2968,7 @@ force_into_acc (rtx src, rtx_insn *before)\n /* Copy accumulator (A or AX) to DEST, placing any generated insns\n    after AFTER.  Returns accumulator RTX.  */\n static rtx\n-move_from_acc (unsigned int opno, rtx after)\n+move_from_acc (unsigned int opno, rtx_insn *after)\n {\n   rtx dest = OP (opno);\n   machine_mode mode = GET_MODE (dest);\n@@ -2982,7 +2982,7 @@ move_from_acc (unsigned int opno, rtx after)\n /* Copy accumulator (A or AX) to REGNO, placing any generated insns\n    before BEFORE.  Returns reg RTX.  */\n static rtx\n-move_acc_to_reg (rtx acc, int regno, rtx before)\n+move_acc_to_reg (rtx acc, int regno, rtx_insn *before)\n {\n   machine_mode mode = GET_MODE (acc);\n   rtx reg;\n@@ -2995,7 +2995,7 @@ move_acc_to_reg (rtx acc, int regno, rtx before)\n /* Copy SRC to X, placing any generated insns before BEFORE.\n    Returns X RTX.  */\n static rtx\n-move_to_x (int opno, rtx before)\n+move_to_x (int opno, rtx_insn *before)\n {\n   rtx src = OP (opno);\n   machine_mode mode = GET_MODE (src);\n@@ -3018,7 +3018,7 @@ move_to_x (int opno, rtx before)\n /* Copy OP (opno) to H or HL, placing any generated insns before BEFORE.\n    Returns H/HL RTX.  */\n static rtx\n-move_to_hl (int opno, rtx before)\n+move_to_hl (int opno, rtx_insn *before)\n {\n   rtx src = OP (opno);\n   machine_mode mode = GET_MODE (src);\n@@ -3041,7 +3041,7 @@ move_to_hl (int opno, rtx before)\n /* Copy OP (opno) to E or DE, placing any generated insns before BEFORE.\n    Returns E/DE RTX.  */\n static rtx\n-move_to_de (int opno, rtx before)\n+move_to_de (int opno, rtx_insn *before)\n {\n   rtx src = OP (opno);\n   machine_mode mode = GET_MODE (src);"}, {"sha": "39ac469799736054b84f61f1d74c319aedf13fc5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -26996,8 +26996,8 @@ output_probe_stack_range (rtx reg1, rtx reg2)\n    pointer.  That fails when saving regs off r1, and sched moves the\n    r31 setup past the reg saves.  */\n \n-static rtx\n-rs6000_frame_related (rtx insn, rtx reg, HOST_WIDE_INT val,\n+static rtx_insn *\n+rs6000_frame_related (rtx_insn *insn, rtx reg, HOST_WIDE_INT val,\n \t\t      rtx reg2, rtx repl2)\n {\n   rtx repl;\n@@ -27161,11 +27161,11 @@ gen_frame_store (rtx reg, rtx frame_reg, int offset)\n /* Save a register into the frame, and emit RTX_FRAME_RELATED_P notes.\n    Save REGNO into [FRAME_REG + OFFSET] in mode MODE.  */\n \n-static rtx\n+static rtx_insn *\n emit_frame_save (rtx frame_reg, machine_mode mode,\n \t\t unsigned int regno, int offset, HOST_WIDE_INT frame_reg_to_sp)\n {\n-  rtx reg, insn;\n+  rtx reg;\n \n   /* Some cases that need register indexed addressing.  */\n   gcc_checking_assert (!((TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n@@ -27176,7 +27176,7 @@ emit_frame_save (rtx frame_reg, machine_mode mode,\n \t\t\t     && !SPE_CONST_OFFSET_OK (offset))));\n \n   reg = gen_rtx_REG (mode, regno);\n-  insn = emit_insn (gen_frame_store (reg, frame_reg, offset));\n+  rtx_insn *insn = emit_insn (gen_frame_store (reg, frame_reg, offset));\n   return rs6000_frame_related (insn, frame_reg, frame_reg_to_sp,\n \t\t\t       NULL_RTX, NULL_RTX);\n }\n@@ -27444,7 +27444,7 @@ ptr_regno_for_savres (int sel)\n    out-of-line register save/restore routine, and emit the insn\n    or jump_insn as appropriate.  */\n \n-static rtx\n+static rtx_insn *\n rs6000_emit_savres_rtx (rs6000_stack_t *info,\n \t\t\trtx frame_reg_rtx, int save_area_offset, int lr_offset,\n \t\t\tmachine_mode reg_mode, int sel)\n@@ -27454,7 +27454,8 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n   int reg_size = GET_MODE_SIZE (reg_mode);\n   rtx sym;\n   rtvec p;\n-  rtx par, insn;\n+  rtx par;\n+  rtx_insn *insn;\n \n   offset = 0;\n   start_reg = ((sel & SAVRES_REG) == SAVRES_GPR\n@@ -27854,7 +27855,7 @@ rs6000_emit_prologue (void)\n   rtx frame_reg_rtx = sp_reg_rtx;\n   unsigned int cr_save_regno;\n   rtx cr_save_rtx = NULL_RTX;\n-  rtx insn;\n+  rtx_insn *insn;\n   int strategy;\n   int using_static_chain_p = (cfun->static_chain_decl != NULL_TREE\n \t\t\t      && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n@@ -28360,12 +28361,12 @@ rs6000_emit_prologue (void)\n \t  if (regno == INVALID_REGNUM)\n \t    break;\n \n-\t  insn\n+\t  rtx set\n \t    = gen_frame_store (gen_rtx_REG (reg_mode, regno),\n \t\t\t       sp_reg_rtx,\n \t\t\t       info->ehrd_offset + sp_off + reg_size * (int) i);\n-\t  RTVEC_ELT (p, i) = insn;\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  RTVEC_ELT (p, i) = set;\n+\t  RTX_FRAME_RELATED_P (set) = 1;\n \t}\n \n       insn = emit_insn (gen_blockage ());\n@@ -28377,7 +28378,8 @@ rs6000_emit_prologue (void)\n   if (TARGET_AIX && crtl->calls_eh_return)\n     {\n       rtx tmp_reg, tmp_reg_si, hi, lo, compare_result, toc_save_done, jump;\n-      rtx save_insn, join_insn, note;\n+      rtx join_insn, note;\n+      rtx_insn *save_insn;\n       long toc_restore_insn;\n \n       tmp_reg = gen_rtx_REG (Pmode, 11);"}, {"sha": "caad82a030593afb27dce98346e028e995aa71d3", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -226,7 +226,7 @@ static void update_block (rtx_insn *, rtx_insn *);\n static int reorg_redirect_jump (rtx_jump_insn *, rtx);\n static void update_reg_dead_notes (rtx_insn *, rtx_insn *);\n static void fix_reg_dead_note (rtx_insn *, rtx);\n-static void update_reg_unused_notes (rtx, rtx);\n+static void update_reg_unused_notes (rtx_insn *, rtx);\n static void fill_simple_delay_slots (int);\n static void fill_slots_from_thread (rtx_jump_insn *, rtx, rtx, rtx,\n \t\t\t\t    int, int, int, int,\n@@ -1805,7 +1805,7 @@ fix_reg_dead_note (rtx_insn *start_insn, rtx stop_insn)\n    does.  */\n \n static void\n-update_reg_unused_notes (rtx insn, rtx redundant_insn)\n+update_reg_unused_notes (rtx_insn *insn, rtx redundant_insn)\n {\n   rtx link, next;\n "}, {"sha": "e94e070581d6a92d0e040e680bbfa67551433567", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -3019,7 +3019,7 @@ extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n extern void add_reg_note (rtx, enum reg_note, rtx);\n extern void add_int_reg_note (rtx, enum reg_note, int);\n extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);\n-extern void remove_note (rtx, const_rtx);\n+extern void remove_note (rtx_insn *, const_rtx);\n extern void remove_reg_equal_equiv_notes (rtx_insn *);\n extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);\n extern int side_effects_p (const_rtx);"}, {"sha": "508c66384d6985e855143e590b1967d85c14bc23", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466d19802ad8b2d36609934e788326ef51c1d272/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=466d19802ad8b2d36609934e788326ef51c1d272", "patch": "@@ -2307,7 +2307,7 @@ add_shallow_copy_of_reg_note (rtx_insn *insn, rtx note)\n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n \n void\n-remove_note (rtx insn, const_rtx note)\n+remove_note (rtx_insn *insn, const_rtx note)\n {\n   rtx link;\n \n@@ -2328,7 +2328,7 @@ remove_note (rtx insn, const_rtx note)\n     {\n     case REG_EQUAL:\n     case REG_EQUIV:\n-      df_notes_rescan (as_a <rtx_insn *> (insn));\n+      df_notes_rescan (insn);\n       break;\n     default:\n       break;"}]}