{"sha": "d17271de7f98ec782324307a8840f531831c4509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3MjcxZGU3Zjk4ZWM3ODIzMjQzMDdhODg0MGY1MzE4MzFjNDUwOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-11T15:52:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-11T15:52:47Z"}, "message": "re PR tree-optimization/42108 (50% performance regression)\n\n2014-12-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/42108\n\t* trans-stmt.c (gfc_trans_do): Execute the division computing\n\tcountm1 before the loop entry check.\n\n\t* gfortran.dg/pr42108.f90: Amend.\n\nFrom-SVN: r218630", "tree": {"sha": "83a5e16407fda4f8d1b8d7ae328e0054a656a7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83a5e16407fda4f8d1b8d7ae328e0054a656a7f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d17271de7f98ec782324307a8840f531831c4509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17271de7f98ec782324307a8840f531831c4509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17271de7f98ec782324307a8840f531831c4509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17271de7f98ec782324307a8840f531831c4509/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b214b73391d67f9a0dbb8807912330289973982a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b214b73391d67f9a0dbb8807912330289973982a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b214b73391d67f9a0dbb8807912330289973982a"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "3092e3cb4a25154bcaf5ccec95211a10b3060362", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d17271de7f98ec782324307a8840f531831c4509", "patch": "@@ -1,3 +1,9 @@\n+2014-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42108\n+\t* trans-stmt.c (gfc_trans_do): Execute the division computing\n+\tcountm1 before the loop entry check.\n+\n 2014-12-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/44054"}, {"sha": "1ba382ab1930a026d22033f264d28b10fefdf789", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d17271de7f98ec782324307a8840f531831c4509", "patch": "@@ -1645,15 +1645,15 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n      This code is executed before we enter the loop body. We generate:\n      if (step > 0)\n        {\n+\t countm1 = (to - from) / step;\n \t if (to < from)\n \t   goto exit_label;\n-\t countm1 = (to - from) / step;\n        }\n      else\n        {\n+\t countm1 = (from - to) / -step;\n \t if (to > from)\n \t   goto exit_label;\n-\t countm1 = (from - to) / -step;\n        }\n    */\n \n@@ -1675,11 +1675,12 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n \t\t\t      fold_build2_loc (loc, MINUS_EXPR, utype,\n \t\t\t\t\t       tou, fromu),\n \t\t\t      stepu);\n-      pos = fold_build3_loc (loc, COND_EXPR, void_type_node, tmp,\n-\t\t\t     fold_build1_loc (loc, GOTO_EXPR, void_type_node,\n-\t\t\t\t\t      exit_label),\n-\t\t\t     fold_build2 (MODIFY_EXPR, void_type_node,\n-\t\t\t\t\t  countm1, tmp2));\n+      pos = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    fold_build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t countm1, tmp2),\n+\t\t    build3_loc (loc, COND_EXPR, void_type_node, tmp,\n+\t\t\t\tbuild1_loc (loc, GOTO_EXPR, void_type_node,\n+\t\t\t\t\t    exit_label), NULL_TREE));\n \n       /* For a negative step, when to > from, exit, otherwise compute\n          countm1 = ((unsigned)from - (unsigned)to) / -(unsigned)step  */\n@@ -1688,11 +1689,12 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n \t\t\t      fold_build2_loc (loc, MINUS_EXPR, utype,\n \t\t\t\t\t       fromu, tou),\n \t\t\t      fold_build1_loc (loc, NEGATE_EXPR, utype, stepu));\n-      neg = fold_build3_loc (loc, COND_EXPR, void_type_node, tmp,\n-\t\t\t     fold_build1_loc (loc, GOTO_EXPR, void_type_node,\n-\t\t\t\t\t      exit_label),\n-\t\t\t     fold_build2 (MODIFY_EXPR, void_type_node,\n-\t\t\t\t\t  countm1, tmp2));\n+      neg = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    fold_build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t countm1, tmp2),\n+\t\t    build3_loc (loc, COND_EXPR, void_type_node, tmp,\n+\t\t\t\tbuild1_loc (loc, GOTO_EXPR, void_type_node,\n+\t\t\t\t\t    exit_label), NULL_TREE));\n \n       tmp = fold_build2_loc (loc, LT_EXPR, boolean_type_node, step,\n \t\t\t     build_int_cst (TREE_TYPE (step), 0));"}, {"sha": "4507037087e121bff820b635610b5fbb9f749f41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d17271de7f98ec782324307a8840f531831c4509", "patch": "@@ -1,3 +1,8 @@\n+2014-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42108\n+\t* gfortran.dg/pr42108.f90: Amend.\n+\n 2014-12-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n         * gfortran.dg/do_iterator.f90: Remove bogus dg-warning."}, {"sha": "020a0a13ac4daa18a7cb8fff48212bd55c9f93d3", "filename": "gcc/testsuite/gfortran.dg/pr42108.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42108.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d17271de7f98ec782324307a8840f531831c4509/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42108.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr42108.f90?ref=d17271de7f98ec782324307a8840f531831c4509", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O2 -fdump-tree-fre1\" }\n+! { dg-options \"-O2 -fdump-tree-fre1 -fdump-tree-pre-details\" }\n \n subroutine  eval(foo1,foo2,foo3,foo4,x,n,nnd)\n   implicit real*8 (a-h,o-z)\n@@ -21,7 +21,9 @@ subroutine  eval(foo1,foo2,foo3,foo4,x,n,nnd)\n   end do\n end subroutine eval\n \n+! We should have hoisted the division\n+! { dg-final { scan-tree-dump \"in all uses of countm1\\[^\\n\\]* / \" \"pre\" } }\n ! There should be only one load from n left\n-\n ! { dg-final { scan-tree-dump-times \"\\\\*n_\" 1 \"fre1\" } }\n ! { dg-final { cleanup-tree-dump \"fre1\" } }\n+! { dg-final { cleanup-tree-dump \"pre\" } }"}]}