{"sha": "b5d0294eafc305eaf15eaee914cccab148fb51f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkMDI5NGVhZmMzMDVlYWYxNWVhZWU5MTRjY2NhYjE0OGZiNTFmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-24T21:23:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-24T21:23:33Z"}, "message": "PR c++/89001 - mangling of reference temporaries\n\nIt used to be the case that the mangled name of a reference temporary didn't\nneed to be standardized, because all access would be through the reference.\nBut now constant expressions can look through references and so different\ntranslation units need to agree on the address of a temporary in the\ninitializer of a reference with vague linkage.\n\n\t* cp-tree.h (struct saved_scope): Add ref_temp_count.\n\t(current_ref_temp_count): New macro.\n\t* mangle.c (mangle_ref_init_variable): Use it.\n\t* typeck2.c (store_init_value): Clear it.\n\t* call.c (make_temporary_var_for_ref_to_temp): Copy public and\n\tcomdat.\n\nFrom-SVN: r268252", "tree": {"sha": "67889379df002d31eddb52c1ab9859fbe535a995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67889379df002d31eddb52c1ab9859fbe535a995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d0294eafc305eaf15eaee914cccab148fb51f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0294eafc305eaf15eaee914cccab148fb51f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d0294eafc305eaf15eaee914cccab148fb51f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0294eafc305eaf15eaee914cccab148fb51f0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b5a1a00d4f88aa82c9119095e2b4993444f6ee"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "82a893ad1701e29f0c5eda6b64a32651a18cda74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -1,3 +1,13 @@\n+2019-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89001 - mangling of reference temporaries\n+\t* cp-tree.h (struct saved_scope): Add ref_temp_count.\n+\t(current_ref_temp_count): New macro.\n+\t* mangle.c (mangle_ref_init_variable): Use it.\n+\t* typeck2.c (store_init_value): Clear it.\n+\t* call.c (make_temporary_var_for_ref_to_temp): Copy public and\n+\tcomdat.\n+\n 2019-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/88976"}, {"sha": "5bad2634cb3b5136e4f7c9f20a47b984e4ac48ec", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -11174,9 +11174,21 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n       && (TREE_STATIC (decl) || CP_DECL_THREAD_LOCAL_P (decl)))\n     {\n       /* Namespace-scope or local static; give it a mangled name.  */\n-      /* FIXME share comdat with decl?  */\n+\n+      /* If an initializer is visible to multiple translation units, those\n+\t translation units must agree on the addresses of the\n+\t temporaries. Therefore the temporaries must be given a consistent name\n+\t and vague linkage. The mangled name of a temporary is the name of the\n+\t non-temporary object in whose initializer they appear, prefixed with\n+\t GR and suffixed with a sequence number mangled using the usual rules\n+\t for a seq-id. Temporaries are numbered with a pre-order, depth-first,\n+\t left-to-right walk of the complete initializer.  */\n \n       TREE_STATIC (var) = TREE_STATIC (decl);\n+      TREE_PUBLIC (var) = TREE_PUBLIC (decl);\n+      if (vague_linkage_p (decl))\n+\tcomdat_linkage (var);\n+\n       CP_DECL_THREAD_LOCAL_P (var) = CP_DECL_THREAD_LOCAL_P (decl);\n       set_decl_tls_model (var, DECL_TLS_MODEL (decl));\n "}, {"sha": "cd902ce1cf601cda140ba2394192f101b494b7dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -1640,6 +1640,7 @@ struct GTY(()) saved_scope {\n   /* If non-zero, implicit \"omp declare target\" attribute is added into the\n      attribute lists.  */\n   int omp_declare_target_attribute;\n+  int ref_temp_count;\n \n   struct stmt_tree_s x_stmt_tree;\n \n@@ -1696,6 +1697,8 @@ extern GTY(()) struct saved_scope *scope_chain;\n \n #define in_discarded_stmt scope_chain->discarded_stmt\n \n+#define current_ref_temp_count scope_chain->ref_temp_count\n+\n /* RAII sentinel to handle clearing processing_template_decl and restoring\n    it when done.  */\n "}, {"sha": "f550b7550dbe554dc8d131be4a63f097b5fba99d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -4240,10 +4240,7 @@ decl_tls_wrapper_p (const tree fn)\n }\n \n /* Return an identifier for the name of a temporary variable used to\n-   initialize a static reference.  This isn't part of the ABI, but we might\n-   as well call them something readable.  */\n-\n-static GTY(()) int temp_count;\n+   initialize a static reference.  This is now part of the ABI.  */\n \n tree\n mangle_ref_init_variable (const tree variable)\n@@ -4254,7 +4251,7 @@ mangle_ref_init_variable (const tree variable)\n   write_name (variable, /*ignore_local_scope=*/0);\n   /* Avoid name clashes with aggregate initialization of multiple\n      references at once.  */\n-  write_unsigned_number (temp_count++);\n+  write_compact_number (current_ref_temp_count++);\n   return finish_mangling_get_identifier ();\n }\n "}, {"sha": "0756eb64872638844a922fb4fd45ee3be1caf4ba", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -829,6 +829,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n       && TREE_CODE (value) == CONSTRUCTOR)\n     value = braced_list_to_string (type, value);\n \n+  current_ref_temp_count = 0;\n   value = extend_ref_init_temps (decl, value, cleanups);\n \n   /* In C++11 constant expression is a semantic, not syntactic, property."}, {"sha": "887f43222869b1c928a422cddffec826ebad566a", "filename": "gcc/testsuite/g++.dg/abi/ref-temp1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fref-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fref-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fref-temp1.C?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -0,0 +1,18 @@\n+// From ABI document\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options --save-temps }\n+\n+struct A { const int (&x)[3]; };\n+struct B { const A (&x)[2]; };\n+template <typename T> B &&b = { { { { 1, 2, 3 } }, { { 4, 5, 6 } } } };\n+B &temp = b<void>;\n+\n+// { dg-final { scan-assembler \".weak\\(_definition\\)?\\[ \\t\\]_?_ZGR1bIvE_\" } }\n+// { dg-final { scan-assembler \".weak\\(_definition\\)?\\[ \\t\\]_?_ZGR1bIvE0_\" } }\n+// { dg-final { scan-assembler \".weak\\(_definition\\)?\\[ \\t\\]_?_ZGR1bIvE1_\" } }\n+// { dg-final { scan-assembler \".weak\\(_definition\\)?\\[ \\t\\]_?_ZGR1bIvE2_\" } }\n+\n+// { dg-final { scan-assembler \"_ZGR1bIvE_:\\n\\[^\\n]+_ZGR1bIvE0_\" } }\n+// { dg-final { scan-assembler \"_ZGR1bIvE0_:\\n\\[^\\n]+_ZGR1bIvE1_\" } }\n+// { dg-final { scan-assembler \"_ZGR1bIvE1_:\\n\\[^\\n]+\\[ \\t\\]1\" } }\n+// { dg-final { scan-assembler \"_ZGR1bIvE2_:\\n\\[^\\n]+\\[ \\t\\]4\" } }"}, {"sha": "9bd1b146fee74d6d8b5281fe6b90bc07ff4bb77e", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp34.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0294eafc305eaf15eaee914cccab148fb51f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp34.C?ref=b5d0294eafc305eaf15eaee914cccab148fb51f0", "patch": "@@ -7,5 +7,5 @@ struct Y { int b, c, d; };\n auto&& [t] = X{};\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n namespace A { namespace B { auto&& [u, v, ww] = Y{}; } }\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n \n-// { dg-final { scan-assembler \"_ZGRDC1tE0\" } }\n-// { dg-final { scan-assembler \"_ZGRN1A1BDC1u1v2wwEE1\" } }\n+// { dg-final { scan-assembler \"_ZGRDC1tE_\" } }\n+// { dg-final { scan-assembler \"_ZGRN1A1BDC1u1v2wwEE_\" } }"}]}