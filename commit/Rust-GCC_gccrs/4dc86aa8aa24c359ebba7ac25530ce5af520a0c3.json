{"sha": "4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjODZhYThhYTI0YzM1OWViYmE3YWMyNTUzMGNlNWFmNTIwYTBjMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-03-17T17:03:59Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-03-17T17:03:59Z"}, "message": "re PR fortran/52585 (Wrong result for ASSOCIATED with dummy procedure pointer)\n\n2012-03-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52585\n        * trans-intrinsic.c (gfc_conv_associated): Fix handling of\n        procpointer dummy arguments.\n\n2012-03-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52585\n        * gfortran.dg/proc_ptr_36.f90: New.\n\nFrom-SVN: r185485", "tree": {"sha": "6c015b63cc6e338720dfed71d317ed87374b1c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c015b63cc6e338720dfed71d317ed87374b1c41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10c20ebd9389bbcbdac1422ba3b1a48a097a37d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c20ebd9389bbcbdac1422ba3b1a48a097a37d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c20ebd9389bbcbdac1422ba3b1a48a097a37d9"}], "stats": {"total": 92, "additions": 82, "deletions": 10}, "files": [{"sha": "115747ea9603f4276e8bf06eeb219516791c6c33", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "patch": "@@ -1,3 +1,9 @@\n+2012-03-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52585\n+\t* trans-intrinsic.c (gfc_conv_associated): Fix handling of\n+\tprocpointer dummy arguments.\n+\n 2012-03-16  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* trans-intrinsic.c (build_round_expr): Don't use BUILT_IN_IROUND"}, {"sha": "ab4f47fc5d30f68c9320d328afe6630d2d49c0df", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "patch": "@@ -5761,10 +5761,14 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n       /* No optional target.  */\n       if (ss1 == gfc_ss_terminator)\n         {\n-          /* A pointer to a scalar.  */\n-          arg1se.want_pointer = 1;\n-          gfc_conv_expr (&arg1se, arg1->expr);\n-          tmp2 = arg1se.expr;\n+\t  /* A pointer to a scalar.  */\n+\t  arg1se.want_pointer = 1;\n+\t  gfc_conv_expr (&arg1se, arg1->expr);\n+\t  if (arg1->expr->symtree->n.sym->attr.proc_pointer\n+\t      && arg1->expr->symtree->n.sym->attr.dummy)\n+\t    arg1se.expr = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t       arg1se.expr);\n+\t  tmp2 = arg1se.expr;\n         }\n       else\n         {\n@@ -5794,12 +5798,21 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \n       if (ss1 == gfc_ss_terminator)\n         {\n-          /* A pointer to a scalar.  */\n-          gcc_assert (ss2 == gfc_ss_terminator);\n-          arg1se.want_pointer = 1;\n-          gfc_conv_expr (&arg1se, arg1->expr);\n-          arg2se.want_pointer = 1;\n-          gfc_conv_expr (&arg2se, arg2->expr);\n+\t  /* A pointer to a scalar.  */\n+\t  gcc_assert (ss2 == gfc_ss_terminator);\n+\t  arg1se.want_pointer = 1;\n+\t  gfc_conv_expr (&arg1se, arg1->expr);\n+\t  if (arg1->expr->symtree->n.sym->attr.proc_pointer\n+\t      && arg1->expr->symtree->n.sym->attr.dummy)\n+\t    arg1se.expr = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t       arg1se.expr);\n+\n+\t  arg2se.want_pointer = 1;\n+\t  gfc_conv_expr (&arg2se, arg2->expr);\n+\t  if (arg2->expr->symtree->n.sym->attr.proc_pointer\n+\t      && arg2->expr->symtree->n.sym->attr.dummy)\n+\t    arg2se.expr = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t       arg2se.expr);\n \t  gfc_add_block_to_block (&se->pre, &arg1se.pre);\n \t  gfc_add_block_to_block (&se->post, &arg1se.post);\n           tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,"}, {"sha": "532cb9f27b93c4ab28d8645458c6c11f70cc1e57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "patch": "@@ -1,3 +1,8 @@\n+2012-03-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52585\n+\t* gfortran.dg/proc_ptr_36.f90: New.\n+\n 2012-03-16  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.dg/misaligned-expand-1.c: New test."}, {"sha": "ada5c565872e0d4ad63d8909d9f0f1f11932af13", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_36.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc86aa8aa24c359ebba7ac25530ce5af520a0c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_36.f90?ref=4dc86aa8aa24c359ebba7ac25530ce5af520a0c3", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+!\n+! PR fortran/52585\n+!\n+! Test proc-pointer dummies with ASSOCIATE\n+!\n+! Contributed by Mat Cross of NAG\n+!\n+module m0\n+  abstract interface\n+    subroutine sub\n+    end subroutine sub\n+  end interface\n+  interface\n+    subroutine s(ss, isassoc)\n+      import sub\n+      logical :: isassoc\n+      procedure(sub), pointer, intent(in) :: ss\n+    end subroutine s\n+  end interface\n+end module m0\n+\n+use m0, only : sub, s\n+procedure(sub) :: sub2, pp\n+pointer :: pp\n+pp => sub2\n+if (.not. associated(pp)) call abort ()\n+if (.not. associated(pp,sub2)) call abort ()\n+call s(pp, .true.)\n+pp => null()\n+if (associated(pp)) call abort ()\n+if (associated(pp,sub2)) call abort ()\n+call s(pp, .false.)\n+end\n+\n+subroutine s(ss, isassoc)\n+  use m0, only : sub\n+  logical :: isassoc\n+  procedure(sub), pointer, intent(in) :: ss\n+  procedure(sub) :: sub2\n+  if (isassoc .neqv. associated(ss)) call abort ()\n+  if (isassoc .neqv. associated(ss,sub2)) call abort ()\n+end subroutine s\n+\n+subroutine sub2\n+end subroutine sub2\n+\n+! { dg-final { cleanup-modules \"m0\" } }"}]}