{"sha": "ce37c2974be19760a28a67bc8eca5967353e2a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzN2MyOTc0YmUxOTc2MGEyOGE2N2JjOGVjYTU5NjczNTNlMmEyYw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2014-12-17T16:25:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2014-12-17T16:25:39Z"}, "message": "Make the Ada front-end use the array descr language hook\n\n\t* gcc-interface/misc.c (gnat_get_array_descr_info): New.  Use it for\n\tthe get_array_descr_info lang-hook.  Use it to tune the DWARF output\n\tfor array types.\n\nFrom-SVN: r218825", "tree": {"sha": "e4d844326f23881443dd67f0ad979d5f88954bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d844326f23881443dd67f0ad979d5f88954bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce37c2974be19760a28a67bc8eca5967353e2a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce37c2974be19760a28a67bc8eca5967353e2a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce37c2974be19760a28a67bc8eca5967353e2a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce37c2974be19760a28a67bc8eca5967353e2a2c/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de8143caadb69d37498b11dcd5c1d7ed6dd05ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8143caadb69d37498b11dcd5c1d7ed6dd05ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8143caadb69d37498b11dcd5c1d7ed6dd05ee7"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "890d4361e0c56ef67deac36bffa75b7de5013ada", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce37c2974be19760a28a67bc8eca5967353e2a2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce37c2974be19760a28a67bc8eca5967353e2a2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ce37c2974be19760a28a67bc8eca5967353e2a2c", "patch": "@@ -1,3 +1,9 @@\n+2014-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_get_array_descr_info): New.  Use it for\n+\tthe get_array_descr_info lang-hook.  Use it to tune the DWARF output\n+\tfor array types.\n+\n 2014-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in (Cygwin/Mingw): Fix previous change."}, {"sha": "2ab3f9201c7912190bc51f9ef9e3d415a96927be", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce37c2974be19760a28a67bc8eca5967353e2a2c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce37c2974be19760a28a67bc8eca5967353e2a2c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=ce37c2974be19760a28a67bc8eca5967353e2a2c", "patch": "@@ -49,6 +49,7 @@\n #include \"hard-reg-set.h\"\n #include \"input.h\"\n #include \"function.h\"\t/* For pass_by_reference.  */\n+#include \"dwarf2out.h\"\n \n #include \"ada.h\"\n #include \"adadecode.h\"\n@@ -634,6 +635,65 @@ gnat_type_max_size (const_tree gnu_type)\n   return max_unitsize;\n }\n \n+/* Provide information in INFO for debug output about the TYPE array type.\n+   Return whether TYPE is handled.  */\n+\n+static bool\n+gnat_get_array_descr_info (const_tree type, struct array_descr_info *info)\n+{\n+  bool convention_fortran_p;\n+  tree index_type;\n+\n+  const_tree dimen = NULL_TREE;\n+  const_tree last_dimen = NULL_TREE;\n+  int i;\n+\n+  if (TREE_CODE (type) != ARRAY_TYPE\n+      || !TYPE_DOMAIN (type)\n+      || !TYPE_INDEX_TYPE (TYPE_DOMAIN (type)))\n+    return false;\n+\n+  /* Count how many dimentions this array has.  */\n+  for (i = 0, dimen = type; ; ++i, dimen = TREE_TYPE (dimen))\n+    if (i > 0\n+\t&& (TREE_CODE (dimen) != ARRAY_TYPE\n+\t    || !TYPE_MULTI_ARRAY_P (dimen)))\n+      break;\n+  info->ndimensions = i;\n+  convention_fortran_p = TYPE_CONVENTION_FORTRAN_P (type);\n+\n+  /* TODO??? For row major ordering, we probably want to emit nothing and\n+     instead specify it as the default in Dw_TAG_compile_unit.  */\n+  info->ordering = (convention_fortran_p\n+\t\t    ? array_descr_ordering_column_major\n+\t\t    : array_descr_ordering_row_major);\n+  info->base_decl = NULL_TREE;\n+  info->data_location = NULL_TREE;\n+  info->allocated = NULL_TREE;\n+  info->associated = NULL_TREE;\n+\n+  for (i = (convention_fortran_p ? info->ndimensions - 1 : 0),\n+       dimen = type;\n+\n+       0 <= i && i < info->ndimensions;\n+\n+       i += (convention_fortran_p ? -1 : 1),\n+       dimen = TREE_TYPE (dimen))\n+    {\n+      /* We are interested in the stored bounds for the debug info.  */\n+      index_type = TYPE_INDEX_TYPE (TYPE_DOMAIN (dimen));\n+\n+      info->dimen[i].bounds_type = index_type;\n+      info->dimen[i].lower_bound = TYPE_MIN_VALUE (index_type);\n+      info->dimen[i].upper_bound = TYPE_MAX_VALUE (index_type);\n+      last_dimen = dimen;\n+    }\n+\n+  info->element_type = TREE_TYPE (last_dimen);\n+\n+  return true;\n+}\n+\n /* GNU_TYPE is a subtype of an integral type.  Set LOWVAL to the low bound\n    and HIGHVAL to the high bound, respectively.  */\n \n@@ -924,6 +984,8 @@ gnat_init_ts (void)\n #define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n #undef  LANG_HOOKS_TYPES_COMPATIBLE_P\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tgnat_types_compatible_p\n+#undef  LANG_HOOKS_GET_ARRAY_DESCR_INFO\n+#define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tgnat_get_array_descr_info\n #undef  LANG_HOOKS_GET_SUBRANGE_BOUNDS\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n #undef  LANG_HOOKS_DESCRIPTIVE_TYPE"}]}