{"sha": "8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2YTc3M2JkODc5YzZkM2U2OTNmNWRmZjdlMzg1NGUxZWEwMzQxOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-20T14:33:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-20T14:33:05Z"}, "message": "i386.md (*lea<mode>_general_1): Rename from *lea_general_1.\n\n\t* config/i386/i386.md (*lea<mode>_general_1): Rename from\n\t*lea_general_1.  Use explicit SWI12 mode interator.\n\t(*lea<mode>_general_2): Rename from *lea_general_2.\n\tUse explicit SWI12 mode interator.\n\t(*lea<mode>_general_3): Rename from *lea_general_3.\n\tUse explicit SWI12 mode interator.\n\t(*lea<SWI12:mode>_general_4): Split from *lea_general_4.\n\tUse explicit SWI12 mode interator.\n\t(*lea<SWI48:mode>_general_4): Split from *lea_general_4.\n\tUse explicit SWI48 mode interator.\n\nFrom-SVN: r235286", "tree": {"sha": "57ce5fc815879b74807a2b0309932f96e2fb4b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ce5fc815879b74807a2b0309932f96e2fb4b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6a773bd879c6d3e693f5dff7e3854e1ea03418/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ccc95364c7a837ce1701177b0b321e3d525d193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ccc95364c7a837ce1701177b0b321e3d525d193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ccc95364c7a837ce1701177b0b321e3d525d193"}], "stats": {"total": 206, "additions": 97, "deletions": 109}, "files": [{"sha": "ab668c3615b89f24fa4dd296e72f3a87c6cd5181", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6a773bd879c6d3e693f5dff7e3854e1ea03418/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6a773bd879c6d3e693f5dff7e3854e1ea03418/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "patch": "@@ -1,3 +1,16 @@\n+2016-04-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*lea<mode>_general_1): Rename from\n+\t*lea_general_1.  Use explicit SWI12 mode interator.\n+\t(*lea<mode>_general_2): Rename from *lea_general_2.\n+\tUse explicit SWI12 mode interator.\n+\t(*lea<mode>_general_3): Rename from *lea_general_3.\n+\tUse explicit SWI12 mode interator.\n+\t(*lea<SWI12:mode>_general_4): Split from *lea_general_4.\n+\tUse explicit SWI12 mode interator.\n+\t(*lea<SWI48:mode>_general_4): Split from *lea_general_4.\n+\tUse explicit SWI48 mode interator.\n+\n 2016-04-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_avx256_split_vector_move_misalign):"}, {"sha": "babd0a47d57c2c6477df0d9a7067e073f4231f3a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 84, "deletions": 109, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6a773bd879c6d3e693f5dff7e3854e1ea03418/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6a773bd879c6d3e693f5dff7e3854e1ea03418/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8f6a773bd879c6d3e693f5dff7e3854e1ea03418", "patch": "@@ -6206,144 +6206,119 @@\n ;; The lea patterns for modes less than 32 bits need to be matched by\n ;; several insns converted to real lea by splitters.\n \n-(define_insn_and_split \"*lea_general_1\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (plus (match_operand 1 \"index_register_operand\" \"l\")\n-\t\t    (match_operand 2 \"register_operand\" \"r\"))\n-\t      (match_operand 3 \"immediate_operand\" \"i\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n-   && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n-       || GET_MODE (operands[3]) == VOIDmode)\"\n+(define_insn_and_split \"*lea<mode>_general_1\"\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n+\t(plus:SWI12\n+\t  (plus:SWI12 (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n+\t\t      (match_operand:SWI12 2 \"register_operand\" \"r\"))\n+\t  (match_operand:SWI12 3 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0)\n+\t(plus:SI\n+\t  (plus:SI (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n {\n-  machine_mode mode = SImode;\n-  rtx pat;\n-\n-  operands[0] = gen_lowpart (mode, operands[0]);\n-  operands[1] = gen_lowpart (mode, operands[1]);\n-  operands[2] = gen_lowpart (mode, operands[2]);\n-  operands[3] = gen_lowpart (mode, operands[3]);\n-\n-  pat = gen_rtx_PLUS (mode, gen_rtx_PLUS (mode, operands[1], operands[2]),\n-  \t\t      operands[3]);\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[3] = gen_lowpart (SImode, operands[3]);\n }\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn_and_split \"*lea_general_2\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (mult (match_operand 1 \"index_register_operand\" \"l\")\n-\t\t    (match_operand 2 \"const248_operand\" \"n\"))\n-\t      (match_operand 3 \"nonmemory_operand\" \"ri\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n-       || GET_MODE (operands[3]) == VOIDmode)\"\n+(define_insn_and_split \"*lea<mode>_general_2\"\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n+\t(plus:SWI12\n+\t  (mult:SWI12 (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n+\t\t      (match_operand:SWI12 2 \"const248_operand\" \"n\"))\n+\t  (match_operand:SWI12 3 \"nonmemory_operand\" \"ri\")))]\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0)\n+\t(plus:SI\n+\t  (mult:SI (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n {\n-  machine_mode mode = SImode;\n-  rtx pat;\n-\n-  operands[0] = gen_lowpart (mode, operands[0]);\n-  operands[1] = gen_lowpart (mode, operands[1]);\n-  operands[3] = gen_lowpart (mode, operands[3]);\n-\n-  pat = gen_rtx_PLUS (mode, gen_rtx_MULT (mode, operands[1], operands[2]),\n-\t\t      operands[3]);\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[3] = gen_lowpart (SImode, operands[3]);\n }\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn_and_split \"*lea_general_3\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(plus (plus (mult (match_operand 1 \"index_register_operand\" \"l\")\n-\t\t\t  (match_operand 2 \"const248_operand\" \"n\"))\n-\t\t    (match_operand 3 \"register_operand\" \"r\"))\n-\t      (match_operand 4 \"immediate_operand\" \"i\")))]\n-  \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && GET_MODE (operands[0]) == GET_MODE (operands[3])\"\n+(define_insn_and_split \"*lea<mode>_general_3\"\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n+\t(plus:SWI12\n+\t  (plus:SWI12\n+\t    (mult:SWI12 (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n+\t\t\t(match_operand:SWI12 2 \"const248_operand\" \"n\"))\n+\t    (match_operand:SWI12 3 \"register_operand\" \"r\"))\n+\t  (match_operand:SWI12 4 \"immediate_operand\" \"i\")))]\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0)\n+\t(plus:SI\n+\t  (plus:SI\n+\t    (mult:SI (match_dup 1) (match_dup 2))\n+\t    (match_dup 3))\n+\t  (match_dup 4)))]\n {\n-  machine_mode mode = SImode;\n-  rtx pat;\n-\n-  operands[0] = gen_lowpart (mode, operands[0]);\n-  operands[1] = gen_lowpart (mode, operands[1]);\n-  operands[3] = gen_lowpart (mode, operands[3]);\n-  operands[4] = gen_lowpart (mode, operands[4]);\n-\n-  pat = gen_rtx_PLUS (mode,\n-  \t\t      gen_rtx_PLUS (mode,\n-\t\t\t\t    gen_rtx_MULT (mode, operands[1],\n-\t\t      \t\t\t\t\toperands[2]),\n-\t\t\t\t    operands[3]),\n-  \t\t      operands[4]);\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[3] = gen_lowpart (SImode, operands[3]);\n+  operands[4] = gen_lowpart (SImode, operands[4]);\n }\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn_and_split \"*lea_general_4\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(any_or (ashift\n-\t\t  (match_operand 1 \"index_register_operand\" \"l\")\n-\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t(match_operand 3 \"const_int_operand\" \"n\")))]\n-  \"(((GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode)\n-      && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)))\n-    || GET_MODE (operands[0]) == SImode\n-    || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && ((unsigned HOST_WIDE_INT) INTVAL (operands[2])) - 1 < 3\n+(define_insn_and_split \"*lea<mode>_general_4\"\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n+\t(any_or:SWI12\n+\t  (ashift:SWI12\n+\t    (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n+\t    (match_operand:SWI12 2 \"const_int_operand\" \"n\"))\n+\t  (match_operand:SWI12 3 \"const_int_operand\" \"n\")))]\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) <= 3\n    && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n        < (HOST_WIDE_INT_1U << INTVAL (operands[2])))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(set (match_dup 0)\n+\t(plus:SI\n+\t  (mult:SI (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n {\n-  machine_mode mode = GET_MODE (operands[0]);\n-  rtx pat;\n-\n-  if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n-    { \n-      mode = SImode; \n-      operands[0] = gen_lowpart (mode, operands[0]);\n-      operands[1] = gen_lowpart (mode, operands[1]);\n-    }\n-\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n   operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n-\n-  pat = plus_constant (mode, gen_rtx_MULT (mode, operands[1], operands[2]),\n-\t\t       INTVAL (operands[3]));\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n }\n   [(set_attr \"type\" \"lea\")\n-   (set (attr \"mode\")\n-      (if_then_else (match_operand:DI 0)\n-\t(const_string \"DI\")\n-\t(const_string \"SI\")))])\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn_and_split \"*lea<mode>_general_4\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_or:SWI48\n+\t  (ashift:SWI48\n+\t    (match_operand:SWI48 1 \"index_register_operand\" \"l\")\n+\t    (match_operand:SWI48 2 \"const_int_operand\" \"n\"))\n+\t  (match_operand:SWI48 3 \"const_int_operand\" \"n\")))]\n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[2]) <= 3\n+   && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n+       < (HOST_WIDE_INT_1U << INTVAL (operands[2])))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:SWI48\n+\t  (mult:SWI48 (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n+  \"operands[2] = GEN_INT (1 << INTVAL (operands[2]));\"\n+  [(set_attr \"type\" \"lea\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;; Subtract instructions\n "}]}