{"sha": "c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjZmEyYmZhMDlhYzk1ZGQwMWZhNzkyN2ZhODAyNzRmOTU4MzgyMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-12-28T21:19:12Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-12-28T21:19:12Z"}, "message": "builtins.def: (_Float<N> and _Float<N>X BUILT_IN_CEIL): Add _Float<N> and _Float<N>X variants...\n\n[gcc]\n2017-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* builtins.def: (_Float<N> and _Float<N>X BUILT_IN_CEIL): Add\n\t_Float<N> and _Float<N>X variants for rounding built-in\n\tfunctions.\n\t(_Float<N> and _Float<N>X BUILT_IN_FLOOR): Likewise.\n\t(_Float<N> and _Float<N>X BUILT_IN_NEARBYINT): Likewise.\n\t(_Float<N> and _Float<N>X BUILT_IN_RINT): Likewise.\n\t(_Float<N> and _Float<N>X BUILT_IN_ROUND): Likewise.\n\t(_Float<N> and _Float<N>X BUILT_IN_TRUNC): Likewise.\n\t* builtins.c (mathfn_built_in_2): Likewise.\n\t* internal-fn.def (CEIL): Likewise.\n\t(FLOOR): Likewise.\n\t(NEARBYINT): Likewise.\n\t(RINT): Likewise.\n\t(ROUND): Likewise.\n\t(TRUNC): Likewise.\n\t* convert.c (convert_to_integer_1): Likewise.\n\t* fold-const.c (tree_call_nonnegative_warnv_p): Likewise.\n\t(integer_valued_real_call_p): Likewise.\n\t* fold-const-call.c (fold_const_call_ss): Likewise.\n\t* gencfn-macros.c (print_case_cfn): Change CFN and operator\n\tprinters to take a const char * suffix instead of a bool.\n\t(print_define_operator_list): Likewise.\n\t(fltall_suffixes): New list of suffixes, that include the\n\ttraditional suffixes as well as all of the _Float<N> and\n\t_Float<N>X suffixes.\n\t(main): For _Float<N> and _Float<N>X functions, emit both\n\t<name>_FN and <name>_ALL variants.  The <macro>_FN variant only\n\thas the _Float<N> and _Float<N>X case names or operators.  The\n\t<name>_ALL variant has both the traditional and the\n\t_Float<N>/_Float<N>X case names or operators.\n\t* match.pd (COPYSIGN optimizations): Provide optimizations for\n\t_Float<N> and _Float<N>X types where possible.\n\t(MIN/MAX optimizations): Likewise.\n\t(sqrt optimizations): Likewise.\n\t(rounding optimizations): Likewise.\n\n[gcc/c]\n2017-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* c-decl.c (header_for_builtin_fn): Add integer rounding _Float<N>\n\tand _Float<N>X built-in functions.\n\nFrom-SVN: r256026", "tree": {"sha": "150679d60c4befc77e534f93d662b51e48277224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/150679d60c4befc77e534f93d662b51e48277224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/comments", "author": null, "committer": null, "parents": [{"sha": "ec8a1b8d931ccdfa87d712028226a03ff17f6cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8a1b8d931ccdfa87d712028226a03ff17f6cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8a1b8d931ccdfa87d712028226a03ff17f6cef"}], "stats": {"total": 210, "additions": 155, "deletions": 55}, "files": [{"sha": "c3a0ef322d8970afbfb01096b5101b03a993bc4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -1,3 +1,41 @@\n+2017-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* builtins.def: (_Float<N> and _Float<N>X BUILT_IN_CEIL): Add\n+\t_Float<N> and _Float<N>X variants for rounding built-in\n+\tfunctions.\n+\t(_Float<N> and _Float<N>X BUILT_IN_FLOOR): Likewise.\n+\t(_Float<N> and _Float<N>X BUILT_IN_NEARBYINT): Likewise.\n+\t(_Float<N> and _Float<N>X BUILT_IN_RINT): Likewise.\n+\t(_Float<N> and _Float<N>X BUILT_IN_ROUND): Likewise.\n+\t(_Float<N> and _Float<N>X BUILT_IN_TRUNC): Likewise.\n+\t* builtins.c (mathfn_built_in_2): Likewise.\n+\t* internal-fn.def (CEIL): Likewise.\n+\t(FLOOR): Likewise.\n+\t(NEARBYINT): Likewise.\n+\t(RINT): Likewise.\n+\t(ROUND): Likewise.\n+\t(TRUNC): Likewise.\n+\t* convert.c (convert_to_integer_1): Likewise.\n+\t* fold-const.c (tree_call_nonnegative_warnv_p): Likewise.\n+\t(integer_valued_real_call_p): Likewise.\n+\t* fold-const-call.c (fold_const_call_ss): Likewise.\n+\t* gencfn-macros.c (print_case_cfn): Change CFN and operator\n+\tprinters to take a const char * suffix instead of a bool.\n+\t(print_define_operator_list): Likewise.\n+\t(fltall_suffixes): New list of suffixes, that include the\n+\ttraditional suffixes as well as all of the _Float<N> and\n+\t_Float<N>X suffixes.\n+\t(main): For _Float<N> and _Float<N>X functions, emit both\n+\t<name>_FN and <name>_ALL variants.  The <macro>_FN variant only\n+\thas the _Float<N> and _Float<N>X case names or operators.  The\n+\t<name>_ALL variant has both the traditional and the\n+\t_Float<N>/_Float<N>X case names or operators.\n+\t* match.pd (COPYSIGN optimizations): Provide optimizations for\n+\t_Float<N> and _Float<N>X types where possible.\n+\t(MIN/MAX optimizations): Likewise.\n+\t(sqrt optimizations): Likewise.\n+\t(rounding optimizations): Likewise.\n+\n 2017-12-28  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/powerpcspe/powerpcspe.md (ieee_128bit_negative_zero): Use"}, {"sha": "98eb804a2753a26c1e8f50f1745a2f665870e346", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -1877,7 +1877,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (ATAN2)\n     CASE_MATHFN (ATANH)\n     CASE_MATHFN (CBRT)\n-    CASE_MATHFN (CEIL)\n+    CASE_MATHFN_FLOATN (CEIL)\n     CASE_MATHFN (CEXPI)\n     CASE_MATHFN_FLOATN (COPYSIGN)\n     CASE_MATHFN (COS)\n@@ -1891,7 +1891,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (EXPM1)\n     CASE_MATHFN (FABS)\n     CASE_MATHFN (FDIM)\n-    CASE_MATHFN (FLOOR)\n+    CASE_MATHFN_FLOATN (FLOOR)\n     CASE_MATHFN_FLOATN (FMA)\n     CASE_MATHFN_FLOATN (FMAX)\n     CASE_MATHFN_FLOATN (FMIN)\n@@ -1930,16 +1930,16 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (MODF)\n     CASE_MATHFN (NAN)\n     CASE_MATHFN (NANS)\n-    CASE_MATHFN (NEARBYINT)\n+    CASE_MATHFN_FLOATN (NEARBYINT)\n     CASE_MATHFN (NEXTAFTER)\n     CASE_MATHFN (NEXTTOWARD)\n     CASE_MATHFN (POW)\n     CASE_MATHFN (POWI)\n     CASE_MATHFN (POW10)\n     CASE_MATHFN (REMAINDER)\n     CASE_MATHFN (REMQUO)\n-    CASE_MATHFN (RINT)\n-    CASE_MATHFN (ROUND)\n+    CASE_MATHFN_FLOATN (RINT)\n+    CASE_MATHFN_FLOATN (ROUND)\n     CASE_MATHFN (SCALB)\n     CASE_MATHFN (SCALBLN)\n     CASE_MATHFN (SCALBN)\n@@ -1952,7 +1952,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (TAN)\n     CASE_MATHFN (TANH)\n     CASE_MATHFN (TGAMMA)\n-    CASE_MATHFN (TRUNC)\n+    CASE_MATHFN_FLOATN (TRUNC)\n     CASE_MATHFN (Y0)\n     CASE_MATHFN (Y1)\n     CASE_MATHFN (YN)"}, {"sha": "671097ea29cb804c3e62ac40f1af742229959223", "filename": "gcc/builtins.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -330,6 +330,9 @@ DEF_C99_BUILTIN        (BUILT_IN_CBRTL, \"cbrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n DEF_LIB_BUILTIN        (BUILT_IN_CEIL, \"ceil\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILF, \"ceilf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILL, \"ceill\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define CEIL_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_CEIL, \"ceil\", CEIL_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef CEIL_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGN, \"copysign\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNF, \"copysignf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNL, \"copysignl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -389,6 +392,9 @@ DEF_C99_BUILTIN        (BUILT_IN_FEUPDATEENV, \"feupdateenv\", BT_FN_INT_CONST_FEN\n DEF_LIB_BUILTIN        (BUILT_IN_FLOOR, \"floor\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FLOORF, \"floorf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FLOORL, \"floorl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define FLOOR_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FLOOR, \"floor\", FLOOR_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef FLOOR_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_FMA, \"fma\", BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_FMAF, \"fmaf\", BT_FN_FLOAT_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_FMAL, \"fmal\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n@@ -526,6 +532,9 @@ DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_NANS, \"nans\", NAN_TYPE, ATTR_CONST_NOTHROW_\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINT, \"nearbyint\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTF, \"nearbyintf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTL, \"nearbyintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define NEARBYINT_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_NEARBYINT, \"nearbyint\", NEARBYINT_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef NEARBYINT_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTER, \"nextafter\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERF, \"nextafterf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERL, \"nextafterl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n@@ -550,9 +559,15 @@ DEF_C99_BUILTIN        (BUILT_IN_REMQUOL, \"remquol\", BT_FN_LONGDOUBLE_LONGDOUBLE\n DEF_C99_BUILTIN        (BUILT_IN_RINT, \"rint\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_RINTF, \"rintf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+#define RINT_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_RINT, \"rint\", RINT_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef RINT_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_ROUND, \"round\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDF, \"roundf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDL, \"roundl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define ROUND_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ROUND, \"round\", ROUND_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef ROUND_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALB, \"scalb\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBF, \"scalbf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBL, \"scalbl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -598,6 +613,9 @@ DEF_C99_BUILTIN        (BUILT_IN_TGAMMAL, \"tgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE\n DEF_C99_BUILTIN        (BUILT_IN_TRUNC, \"trunc\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCF, \"truncf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCL, \"truncl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define TRUNC_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_TRUNC, \"trunc\", TRUNC_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef TRUNC_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0, \"y0\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0F, \"y0f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_Y0L, \"y0l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "f76110a62b1c6aecdc6723df07dc1ebd5f07bb20", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -1,3 +1,8 @@\n+2017-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* c-decl.c (header_for_builtin_fn): Add integer rounding _Float<N>\n+\tand _Float<N>X built-in functions.\n+\n 2017-12-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/83550"}, {"sha": "d3294c390721c73bb53b40f873bd875e22e06177", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -3168,6 +3168,7 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_ATAN2):\n     CASE_FLT_FN (BUILT_IN_CBRT):\n     CASE_FLT_FN (BUILT_IN_CEIL):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_CEIL):\n     CASE_FLT_FN (BUILT_IN_COPYSIGN):\n     CASE_FLT_FN_FLOATN_NX (BUILT_IN_COPYSIGN):\n     CASE_FLT_FN (BUILT_IN_COS):\n@@ -3181,6 +3182,7 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n     CASE_FLT_FN (BUILT_IN_FDIM):\n     CASE_FLT_FN (BUILT_IN_FLOOR):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FLOOR):\n     CASE_FLT_FN (BUILT_IN_FMA):\n     CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n     CASE_FLT_FN (BUILT_IN_FMAX):\n@@ -3205,13 +3207,16 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_MODF):\n     CASE_FLT_FN (BUILT_IN_NAN):\n     CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_NEARBYINT):\n     CASE_FLT_FN (BUILT_IN_NEXTAFTER):\n     CASE_FLT_FN (BUILT_IN_NEXTTOWARD):\n     CASE_FLT_FN (BUILT_IN_POW):\n     CASE_FLT_FN (BUILT_IN_REMAINDER):\n     CASE_FLT_FN (BUILT_IN_REMQUO):\n     CASE_FLT_FN (BUILT_IN_RINT):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_RINT):\n     CASE_FLT_FN (BUILT_IN_ROUND):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ROUND):\n     CASE_FLT_FN (BUILT_IN_SCALBLN):\n     CASE_FLT_FN (BUILT_IN_SCALBN):\n     CASE_FLT_FN (BUILT_IN_SIN):\n@@ -3223,6 +3228,7 @@ header_for_builtin_fn (enum built_in_function fcode)\n     CASE_FLT_FN (BUILT_IN_TANH):\n     CASE_FLT_FN (BUILT_IN_TGAMMA):\n     CASE_FLT_FN (BUILT_IN_TRUNC):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_TRUNC):\n     case BUILT_IN_ISINF:\n     case BUILT_IN_ISNAN:\n       return \"<math.h>\";"}, {"sha": "1607bededbc519bccfaf11ac4687cb280a095082", "filename": "gcc/convert.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -554,6 +554,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n       switch (fcode)\n         {\n \tCASE_FLT_FN (BUILT_IN_CEIL):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_CEIL):\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n@@ -570,6 +571,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_FLOOR):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_FLOOR):\n \t  /* Only convert in ISO C99 mode.  */\n \t  if (!targetm.libc_has_function (function_c99_misc))\n \t    break;\n@@ -586,6 +588,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_ROUND):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_ROUND):\n \t  /* Only convert in ISO C99 mode and with -fno-math-errno.  */\n \t  if (!targetm.libc_has_function (function_c99_misc) || flag_errno_math)\n \t    break;\n@@ -602,11 +605,13 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_NEARBYINT):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_NEARBYINT):\n \t  /* Only convert nearbyint* if we can ignore math exceptions.  */\n \t  if (flag_trapping_math)\n \t    break;\n \t  gcc_fallthrough ();\n \tCASE_FLT_FN (BUILT_IN_RINT):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_RINT):\n \t  /* Only convert in ISO C99 mode and with -fno-math-errno.  */\n \t  if (!targetm.libc_has_function (function_c99_misc) || flag_errno_math)\n \t    break;\n@@ -623,6 +628,7 @@ convert_to_integer_1 (tree type, tree expr, bool dofold)\n \t  break;\n \n \tCASE_FLT_FN (BUILT_IN_TRUNC):\n+\tCASE_FLT_FN_FLOATN_NX (BUILT_IN_TRUNC):\n \t  return convert_to_integer_1 (type, CALL_EXPR_ARG (s_expr, 0), dofold);\n \n \tdefault:"}, {"sha": "c387ce529b138162edc950805384cce7755bc704", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -718,6 +718,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n \t      && do_mpfr_arg1 (result, mpfr_y1, arg, format));\n \n     CASE_CFN_FLOOR:\n+    CASE_CFN_FLOOR_FN:\n       if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n \t{\n \t  real_floor (result, format, arg);\n@@ -726,6 +727,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n       return false;\n \n     CASE_CFN_CEIL:\n+    CASE_CFN_CEIL_FN:\n       if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n \t{\n \t  real_ceil (result, format, arg);\n@@ -734,10 +736,12 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n       return false;\n \n     CASE_CFN_TRUNC:\n+    CASE_CFN_TRUNC_FN:\n       real_trunc (result, format, arg);\n       return true;\n \n     CASE_CFN_ROUND:\n+    CASE_CFN_ROUND_FN:\n       if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n \t{\n \t  real_round (result, format, arg);"}, {"sha": "e776108c411d41239607783e4ba293046ae642df", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -13004,9 +13004,11 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_ATANH:\n     CASE_CFN_CBRT:\n     CASE_CFN_CEIL:\n+    CASE_CFN_CEIL_FN:\n     CASE_CFN_ERF:\n     CASE_CFN_EXPM1:\n     CASE_CFN_FLOOR:\n+    CASE_CFN_FLOOR_FN:\n     CASE_CFN_FMOD:\n     CASE_CFN_FREXP:\n     CASE_CFN_ICEIL:\n@@ -13024,8 +13026,11 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_LROUND:\n     CASE_CFN_MODF:\n     CASE_CFN_NEARBYINT:\n+    CASE_CFN_NEARBYINT_FN:\n     CASE_CFN_RINT:\n+    CASE_CFN_RINT_FN:\n     CASE_CFN_ROUND:\n+    CASE_CFN_ROUND_FN:\n     CASE_CFN_SCALB:\n     CASE_CFN_SCALBLN:\n     CASE_CFN_SCALBN:\n@@ -13034,6 +13039,7 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_SINH:\n     CASE_CFN_TANH:\n     CASE_CFN_TRUNC:\n+    CASE_CFN_TRUNC_FN:\n       /* True if the 1st argument is nonnegative.  */\n       return RECURSE (arg0);\n \n@@ -13539,11 +13545,17 @@ integer_valued_real_call_p (combined_fn fn, tree arg0, tree arg1, int depth)\n   switch (fn)\n     {\n     CASE_CFN_CEIL:\n+    CASE_CFN_CEIL_FN:\n     CASE_CFN_FLOOR:\n+    CASE_CFN_FLOOR_FN:\n     CASE_CFN_NEARBYINT:\n+    CASE_CFN_NEARBYINT_FN:\n     CASE_CFN_RINT:\n+    CASE_CFN_RINT_FN:\n     CASE_CFN_ROUND:\n+    CASE_CFN_ROUND_FN:\n     CASE_CFN_TRUNC:\n+    CASE_CFN_TRUNC_FN:\n       return true;\n \n     CASE_CFN_FMIN:"}, {"sha": "ae5b0c9f19e6cc9bd9997bd20569fd869a4da243", "filename": "gcc/gencfn-macros.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fgencfn-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fgencfn-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencfn-macros.c?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -94,13 +94,15 @@ is_group (string_set *builtins, const char *name, const char *const *suffixes)\n \n /* Print a macro for all combined functions related to NAME, with the\n    null-terminated list of suffixes in SUFFIXES.  INTERNAL_P says whether\n-   CFN_<NAME> also exists.  */\n+   CFN_<NAME> also exists.  FLOATN_P is a suffix to the operator name, blank\n+   for normal operators, \"_FN\" for _Float<N>/_Float<N>X operators only, and\n+   \"_ALL\" for both the traditional operators and the _Float<N>/_Float<N>X\n+   operators.  */\n \n static void\n print_case_cfn (const char *name, bool internal_p,\n-\t\tconst char *const *suffixes, bool floatn_p)\n+\t\tconst char *const *suffixes, const char *floatn)\n {\n-  const char *floatn = (floatn_p) ? \"_FN\" : \"\";\n   printf (\"#define CASE_CFN_%s%s\", name, floatn);\n   if (internal_p)\n     printf (\" \\\\\\n  case CFN_%s%s\", name, floatn);\n@@ -110,15 +112,18 @@ print_case_cfn (const char *name, bool internal_p,\n   printf (\"\\n\");\n }\n \n-/* Print an operator list for all combined functions related to NAME,\n-   with the null-terminated list of suffixes in SUFFIXES.  INTERNAL_P\n-   says whether CFN_<NAME> also exists.  */\n+/* Print an operator list for all combined functions related to NAME, with the\n+   null-terminated list of suffixes in SUFFIXES.  INTERNAL_P says whether\n+   CFN_<NAME> also exists.  FLOATN_P is a suffix to the operator name, blank\n+   for normal operators, \"_FN\" for _Float<N>/_Float<N>X operators only, and\n+   \"_ALL\" for both the traditional operators and the _Float<N>/_Float<N>X\n+   operators.  */\n \n static void\n print_define_operator_list (const char *name, bool internal_p,\n-\t\t\t    const char *const *suffixes, bool floatn_p)\n+\t\t\t    const char *const *suffixes,\n+\t\t\t    const char *floatn)\n {\n-  const char *floatn = (floatn_p) ? \"_FN\" : \"\";\n   printf (\"(define_operator_list %s%s\\n\", name, floatn);\n   for (unsigned int i = 0; suffixes[i]; ++i)\n     printf (\"    BUILT_IN_%s%s\\n\", name, suffixes[i]);\n@@ -152,6 +157,9 @@ const char *const internal_fn_int_names[] = {\n static const char *const flt_suffixes[] = { \"F\", \"\", \"L\", NULL };\n static const char *const fltfn_suffixes[] = { \"F16\", \"F32\", \"F64\", \"F128\",\n \t\t\t\t\t      \"F32X\", \"F64X\", \"F128X\", NULL };\n+static const char *const fltall_suffixes[] = { \"F\", \"\", \"L\", \"F16\", \"F32\",\n+\t\t\t\t\t       \"F64\", \"F128\", \"F32X\", \"F64X\",\n+\t\t\t\t\t       \"F128X\", NULL };\n static const char *const int_suffixes[] = { \"\", \"L\", \"LL\", \"IMAX\", NULL };\n \n static const char *const *const suffix_lists[] = {\n@@ -212,22 +220,31 @@ main (int argc, char **argv)\n \t\t  bool internal_p = internal_fns.contains (root);\n \n \t\t  if (type == 'c')\n-\t\t    print_case_cfn (root, internal_p, suffix, false);\n+\t\t    print_case_cfn (root, internal_p, suffix, \"\");\n \t\t  else\n-\t\t    print_define_operator_list (root, internal_p,\n-\t\t\t\t\t\tsuffix, false);\n+\t\t    print_define_operator_list (root, internal_p, suffix, \"\");\n \n \t\t      /* Support the _Float<N> and _Float<N>X math functions if\n-\t\t\t they exist.  We put these out as a separate CFN macro,\n-\t\t\t so code can add support or not as needed.  */\n+\t\t\t they exist.  We put these out as a separate CFN or\n+\t\t\t operator macro, so code can add support or not as\n+\t\t\t needed.  We also put out a combined CFN or operator\n+\t\t\t macro that includes both the traditional names and the\n+\t\t\t _Float<N> and _Float<N>X versions.  */\n \t\t  if (suffix == flt_suffixes\n \t\t      && is_group (&builtins, root, fltfn_suffixes))\n \t\t    {\n \t\t      if (type == 'c')\n-\t\t\tprint_case_cfn (root, false, fltfn_suffixes, true);\n+\t\t\t{\n+\t\t\t  print_case_cfn (root, false, fltfn_suffixes, \"_FN\");\n+\t\t\t  print_case_cfn (root, false, fltall_suffixes, \"_ALL\");\n+\t\t\t}\n \t\t      else\n-\t\t\tprint_define_operator_list (root, false, fltfn_suffixes,\n-\t\t\t\t\t\t    true);\n+\t\t\t{\n+\t\t\t  print_define_operator_list (root, false,\n+\t\t\t\t\t\t      fltfn_suffixes, \"_FN\");\n+\t\t\t  print_define_operator_list (root, internal_p,\n+\t\t\t\t\t\t      fltall_suffixes, \"_ALL\");\n+\t\t\t}\n \t\t    }\n \t\t}\n \t    }"}, {"sha": "e1f207cbf568b50f32d7590fad96953636128f4e", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -139,12 +139,12 @@ DEF_INTERNAL_FLT_FLOATN_FN (SQRT, ECF_CONST, sqrt, unary)\n DEF_INTERNAL_FLT_FN (TAN, ECF_CONST, tan, unary)\n \n /* FP rounding.  */\n-DEF_INTERNAL_FLT_FN (CEIL, ECF_CONST, ceil, unary)\n-DEF_INTERNAL_FLT_FN (FLOOR, ECF_CONST, floor, unary)\n-DEF_INTERNAL_FLT_FN (NEARBYINT, ECF_CONST, nearbyint, unary)\n-DEF_INTERNAL_FLT_FN (RINT, ECF_CONST, rint, unary)\n-DEF_INTERNAL_FLT_FN (ROUND, ECF_CONST, round, unary)\n-DEF_INTERNAL_FLT_FN (TRUNC, ECF_CONST, btrunc, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (CEIL, ECF_CONST, ceil, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (FLOOR, ECF_CONST, floor, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (NEARBYINT, ECF_CONST, nearbyint, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (RINT, ECF_CONST, rint, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (ROUND, ECF_CONST, round, unary)\n+DEF_INTERNAL_FLT_FLOATN_FN (TRUNC, ECF_CONST, btrunc, unary)\n \n /* Binary math functions.  */\n DEF_INTERNAL_FLT_FN (ATAN2, ECF_CONST, atan2, binary)"}, {"sha": "87012a243191e23e719a0e2766447c83d7adba91", "filename": "gcc/match.pd", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cfa2bfa09ac95dd01fa7927fa80274f9583823/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c6cfa2bfa09ac95dd01fa7927fa80274f9583823", "patch": "@@ -199,21 +199,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Transform X * copysign (1.0, X) into abs(X). */\n (simplify\n- (mult:c @0 (COPYSIGN real_onep @0))\n+ (mult:c @0 (COPYSIGN_ALL real_onep @0))\n  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))\n   (abs @0)))\n \n /* Transform X * copysign (1.0, -X) into -abs(X). */\n (simplify\n- (mult:c @0 (COPYSIGN real_onep (negate @0)))\n+ (mult:c @0 (COPYSIGN_ALL real_onep (negate @0)))\n  (if (!HONOR_NANS (type) && !HONOR_SIGNED_ZEROS (type))\n   (negate (abs @0))))\n \n /* Transform copysign (CST, X) into copysign (ABS(CST), X). */\n (simplify\n- (COPYSIGN REAL_CST@0 @1)\n+ (COPYSIGN_ALL REAL_CST@0 @1)\n  (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (@0)))\n-  (COPYSIGN (negate @0) @1)))\n+  (COPYSIGN_ALL (negate @0) @1)))\n \n /* X * 1, X / 1 -> X.  */\n (for op (mult trunc_div ceil_div floor_div round_div exact_div)\n@@ -542,7 +542,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (hypots @0 (op @1))\n    (hypots @0 @1)))\n  /* copysign(-x, y) and copysign(abs(x), y) -> copysign(x, y).  */\n- (for copysigns (COPYSIGN)\n+ (for copysigns (COPYSIGN_ALL)\n   (simplify\n    (copysigns (op @0) @1)\n    (copysigns @0 @1))))\n@@ -587,21 +587,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (hypots @0 @1)))\n \n /* copysign(x, CST) -> [-]abs (x).  */\n-(for copysigns (COPYSIGN)\n+(for copysigns (COPYSIGN_ALL)\n  (simplify\n   (copysigns @0 REAL_CST@1)\n   (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (@1)))\n    (negate (abs @0))\n    (abs @0))))\n \n /* copysign(copysign(x, y), z) -> copysign(x, z).  */\n-(for copysigns (COPYSIGN)\n+(for copysigns (COPYSIGN_ALL)\n  (simplify\n   (copysigns (copysigns @0 @1) @2)\n   (copysigns @0 @2)))\n \n /* copysign(x,y)*copysign(x,y) -> x*x.  */\n-(for copysigns (COPYSIGN)\n+(for copysigns (COPYSIGN_ALL)\n  (simplify\n   (mult (copysigns@2 @0 @1) @2)\n   (mult @0 @0)))\n@@ -1914,7 +1914,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n-(for minmax (min max FMIN FMIN_FN FMAX FMAX_FN)\n+(for minmax (min max FMIN_ALL FMAX_ALL)\n  (simplify\n   (minmax @0 @0)\n   @0))\n@@ -1992,7 +1992,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (type))\n    (minmax @1 (convert @2)))))\n \n-(for minmax (FMIN FMIN_FN FMAX FMAX_FN)\n+(for minmax (FMIN_ALL FMAX_ALL)\n  /* If either argument is NaN, return the other one.  Avoid the\n     transformation if we get (and honor) a signalling NaN.  */\n  (simplify\n@@ -2007,20 +2007,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    worry about it either.  */\n (if (flag_finite_math_only)\n  (simplify\n-  (FMIN @0 @1)\n+  (FMIN_ALL @0 @1)\n   (min @0 @1))\n  (simplify\n-  (FMIN_FN @0 @1)\n-  (min @0 @1))\n- (simplify\n-  (FMAX @0 @1)\n-  (max @0 @1))\n- (simplify\n-  (FMAX_FN @0 @1)\n+  (FMAX_ALL @0 @1)\n   (max @0 @1)))\n /* min (-A, -B) -> -max (A, B)  */\n-(for minmax (min max FMIN FMIN_FN FMAX FMAX_FN)\n-     maxmin (max min FMAX FMAX_FN FMIN FMAX_FN)\n+(for minmax (min max FMIN_ALL FMAX_ALL)\n+     maxmin (max min FMAX_ALL FMIN_ALL)\n  (simplify\n   (minmax (negate:s@2 @0) (negate:s@3 @1))\n   (if (FLOAT_TYPE_P (TREE_TYPE (@0))\n@@ -3814,7 +3808,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (if (flag_unsafe_math_optimizations)\n  /* Simplify sqrt(x) * sqrt(x) -> x.  */\n  (simplify\n-  (mult (SQRT@1 @0) @1)\n+  (mult (SQRT_ALL@1 @0) @1)\n   (if (!HONOR_SNANS (type))\n    @0))\n \n@@ -3967,12 +3961,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (abs @0))\n \n /* trunc(trunc(x)) -> trunc(x), etc.  */\n-(for fns (TRUNC FLOOR CEIL ROUND NEARBYINT RINT)\n+(for fns (TRUNC_ALL FLOOR_ALL CEIL_ALL ROUND_ALL NEARBYINT_ALL RINT_ALL)\n  (simplify\n   (fns (fns @0))\n   (fns @0)))\n /* f(x) -> x if x is integer valued and f does nothing for such values.  */\n-(for fns (TRUNC FLOOR CEIL ROUND NEARBYINT RINT)\n+(for fns (TRUNC_ALL FLOOR_ALL CEIL_ALL ROUND_ALL NEARBYINT_ALL RINT_ALL)\n  (simplify\n   (fns integer_valued_real_p@0)\n   @0))\n@@ -3989,12 +3983,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n (simplify\n  /* copysign(x,x) -> x.  */\n- (COPYSIGN @0 @0)\n+ (COPYSIGN_ALL @0 @0)\n  @0)\n \n (simplify\n  /* copysign(x,y) -> fabs(x) if y is nonnegative.  */\n- (COPYSIGN @0 tree_expr_nonnegative_p@1)\n+ (COPYSIGN_ALL @0 tree_expr_nonnegative_p@1)\n  (abs @0))\n \n (for scale (LDEXP SCALBN SCALBLN)\n@@ -4145,8 +4139,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n (if (canonicalize_math_p ())\n  /* floor(x) -> trunc(x) if x is nonnegative.  */\n- (for floors (FLOOR)\n-      truncs (TRUNC)\n+ (for floors (FLOOR_ALL)\n+      truncs (TRUNC_ALL)\n   (simplify\n    (floors tree_expr_nonnegative_p@0)\n    (truncs @0))))"}]}