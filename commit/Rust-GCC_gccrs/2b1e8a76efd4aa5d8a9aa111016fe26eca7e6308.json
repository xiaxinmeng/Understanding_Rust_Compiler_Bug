{"sha": "2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxZThhNzZlZmQ0YWE1ZDhhOWFhMTExMDE2ZmUyNmVjYTdlNjMwOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-31T06:16:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-31T06:16:54Z"}, "message": "re PR c++/19555 (specialized in the wrong namespace causes an ICE)\n\n\tPR c++/19555\n\t* cp-tree.h (DECL_USE_TEMPLATE): Expand documentation.\n\t* decl.c (duplicate_decls): Do not discard\n\tDECL_IMPLICIT_INSTANTIATION when merging declarations.\n\t(start_decl): Do not SET_DECL_TEMPLATE_SPECIALIZATION for\n\tvariables that do not have DECL_USE_TEMPLATE.\n\n\tPR c++/19555\n\t* g++.dg/template/static10.C: New test.\n\nFrom-SVN: r94469", "tree": {"sha": "f7c2fcad7da81ca7390ed264d37a6079512631d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c2fcad7da81ca7390ed264d37a6079512631d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/comments", "author": null, "committer": null, "parents": [{"sha": "ebcaaa2152486039f548259cc008ba5b3243d393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcaaa2152486039f548259cc008ba5b3243d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcaaa2152486039f548259cc008ba5b3243d393"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "e205886c863d5c500c94962a7da6ac9164295e67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "patch": "@@ -1,5 +1,12 @@\n 2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19555\n+\t* cp-tree.h (DECL_USE_TEMPLATE): Expand documentation.\n+\t* decl.c (duplicate_decls): Do not discard\n+\tDECL_IMPLICIT_INSTANTIATION when merging declarations.\n+\t(start_decl): Do not SET_DECL_TEMPLATE_SPECIALIZATION for\n+\tvariables that do not have DECL_USE_TEMPLATE.\n+\n \tPR c++/19395\n \t* decl.c (grokdeclarator): Refactor code so that qualified names\n \tare never allowed as the declarator in a typedef."}, {"sha": "cb0c25b3694c8f45aaf4ecf7707fa57e60001247", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "patch": "@@ -2779,7 +2779,10 @@ struct lang_decl GTY(())\n      0=normal declaration, e.g. int min (int, int);\n      1=implicit template instantiation\n      2=explicit template specialization, e.g. int min<int> (int, int);\n-     3=explicit template instantiation, e.g. template int min<int> (int, int);  */\n+     3=explicit template instantiation, e.g. template int min<int> (int, int);\n+\n+   If DECL_USE_TEMPLATE is non-zero, then DECL_TEMPLATE_INFO will also\n+   be non-NULL.  */\n #define DECL_USE_TEMPLATE(NODE) (DECL_LANG_SPECIFIC (NODE)->decl_flags.use_template)\n \n #define DECL_TEMPLATE_INSTANTIATION(NODE) (DECL_USE_TEMPLATE (NODE) & 1)"}, {"sha": "e72b183c6b6f5edb8980169d4d12987027d3e08e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "patch": "@@ -1669,6 +1669,13 @@ duplicate_decls (tree newdecl, tree olddecl)\n       DECL_COMDAT (newdecl) |= DECL_COMDAT (olddecl);\n       DECL_TEMPLATE_INSTANTIATED (newdecl)\n \t|= DECL_TEMPLATE_INSTANTIATED (olddecl);\n+      /* If the OLDDECL is an implicit instantiation, then the NEWDECL\n+\t must be too.  But, it may not yet be marked as such if the\n+\t caller has created NEWDECL, but has not yet figured out that\n+\t it is a redeclaration.  */\n+      if (DECL_IMPLICIT_INSTANTIATION (olddecl)\n+\t  && !DECL_USE_TEMPLATE (newdecl))\n+\tSET_DECL_IMPLICIT_INSTANTIATION (newdecl);\n       /* Don't really know how much of the language-specific\n \t values we should copy from old to new.  */\n       DECL_IN_AGGR_P (newdecl) = DECL_IN_AGGR_P (olddecl);\n@@ -3695,10 +3702,15 @@ start_decl (const cp_declarator *declarator,\n \n       /* cp_finish_decl sets DECL_EXTERNAL if DECL_IN_AGGR_P is set.  */\n       DECL_IN_AGGR_P (decl) = 0;\n-      if ((DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n+      if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl)\n \t  || CLASSTYPE_TEMPLATE_INSTANTIATION (context))\n \t{\n-\t  SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n+\t  /* Do not mark DECL as an explicit specialization if it was\n+\t     not already marked as an instantiation; a declaration\n+\t     should never be marked as a specialization unless we know\n+\t     what template is being specialized.  */ \n+\t  if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n+\t    SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n \t  /* [temp.expl.spec] An explicit specialization of a static data\n \t     member of a template is a definition if the declaration\n \t     includes an initializer; otherwise, it is a declaration."}, {"sha": "30a3bca86f1311b91c00480d3baee5f4deeed74b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "patch": "@@ -1,5 +1,8 @@\n 2005-01-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/19555\n+\t* g++.dg/template/static10.C: New test.\n+\n \tPR c++/19395\n \t* g++.dg/parse/error24.C: New test. \n "}, {"sha": "ab857bd814e28fdd4e2c844ad39e09a5aa6e7719", "filename": "gcc/testsuite/g++.dg/template/static10.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic10.C?ref=2b1e8a76efd4aa5d8a9aa111016fe26eca7e6308", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/19555\n+\n+namespace __gnu_debug_def { }\n+namespace std\n+{\n+  using namespace __gnu_debug_def;\n+  template<typename _Tp> class allocator {};\n+}\n+namespace __gnu_debug_def\n+{\n+  template<typename _Tp,\n+    typename _Allocator = std::allocator<_Tp> >\n+    class vector\n+    {\n+      void\n+      swap(vector<_Tp,_Allocator>& __x);\n+    };\n+}\n+namespace std\n+{\n+  template<> void\n+  vector<int, allocator<int> >::swap(vector<int, allocator<int> >&) { } // { dg-error \"\" }\n+}"}]}