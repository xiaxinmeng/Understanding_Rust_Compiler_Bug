{"sha": "e7c7bcef4e33023b3f6a305d18ba0367016944cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjN2JjZWY0ZTMzMDIzYjNmNmEzMDVkMThiYTAzNjcwMTY5NDRjZA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-07-21T18:11:52Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-07-21T18:11:52Z"}, "message": "[multiple changes]\n\n2000-07-21  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (java_complete_lhs): LOOP_EXPR:, SWITCH_EXPR: the node\n\tor its first operand can be error marks.\n\n2000-07-20  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.h (SET_TYPE_FOR_RESOLUTION): Use GET_CPC.\n\t* parse.y (method_header): Likewise.\n\n2000-07-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (find_as_inner_class): Handle the case where the\n\tenclosing context of an innerclass has been loaded as bytecode.\n\n(Side gcj/225 bug fix and some cleanup:\n http://gcc.gnu.org/ml/gcc-patches/2000-07/msg00832.html)\n\nFrom-SVN: r35176", "tree": {"sha": "e85000d9d68619834479e4e7570f55a74816a9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85000d9d68619834479e4e7570f55a74816a9db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c7bcef4e33023b3f6a305d18ba0367016944cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c7bcef4e33023b3f6a305d18ba0367016944cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c7bcef4e33023b3f6a305d18ba0367016944cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c7bcef4e33023b3f6a305d18ba0367016944cd/comments", "author": null, "committer": null, "parents": [{"sha": "c4cdd4a61e83b8b9dbe685987ec7ef35e29e631a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cdd4a61e83b8b9dbe685987ec7ef35e29e631a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4cdd4a61e83b8b9dbe685987ec7ef35e29e631a"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "d8f99ad1e8c546ae84f0d4e054036048d06c0187", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e7c7bcef4e33023b3f6a305d18ba0367016944cd", "patch": "@@ -1,3 +1,18 @@\n+2000-07-21  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (java_complete_lhs): LOOP_EXPR:, SWITCH_EXPR: the node\n+\tor its first operand can be error marks.\n+\n+2000-07-20  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.h (SET_TYPE_FOR_RESOLUTION): Use GET_CPC.\n+\t* parse.y (method_header): Likewise.\n+\n+2000-07-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (find_as_inner_class): Handle the case where the\n+\tenclosing context of an innerclass has been loaded as bytecode.\n+\n 2000-07-18  Jeff Sturm  <jeff.sturm@appnet.com>\n \n \t* lang-specs.h: Added %(jc1) to java compiler options."}, {"sha": "50a9e3e14cdc9fd505e8e5c041a81ada866b1fec", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=e7c7bcef4e33023b3f6a305d18ba0367016944cd", "patch": "@@ -537,7 +537,7 @@ typedef struct _jdeplist {\n   {\t\t\t\t\t\t\t\t\t\\\n     tree returned_type;\t\t\t\t\t\t\t\\\n     (CHAIN) = 0;\t\t\t\t\t\t\t\\\n-    if (TREE_TYPE (ctxp->current_parsed_class) == object_type_node\t\\\n+    if (TREE_TYPE (GET_CPC ()) == object_type_node\t\t\t\\\n \t&& TREE_CODE (TYPE) == EXPR_WITH_FILE_LOCATION \t\t\t\\\n \t&& EXPR_WFL_NODE (TYPE) == unqualified_object_id_node)\t\t\\\n       (TYPE) = object_type_node;\t\t\t\t\t\\"}, {"sha": "93eff8684cc43942714f219d8d7cd7e8375d8f20", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c7bcef4e33023b3f6a305d18ba0367016944cd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=e7c7bcef4e33023b3f6a305d18ba0367016944cd", "patch": "@@ -3492,7 +3492,18 @@ find_as_inner_class (enclosing, name, cl)\n   else\n     qual = build_tree_list (build_expr_wfl (name, NULL, 0, 0), NULL_TREE);\n \n-  return find_as_inner_class_do (qual, enclosing);\n+  if (!(to_return = find_as_inner_class_do (qual, enclosing)))\n+    {\n+      /* It might be the case that the enclosing class was loaded as\n+\t bytecode, in which case it will be missing the\n+\t DECL_INNER_CLASS_LIST. We build a fully qualified internal\n+\t innerclass name and we try to load it. */\n+      tree fqin = identifier_subst (name, \"\", '.', '$', \"\");\n+      tree ptr;\n+      BUILD_PTR_FROM_NAME (ptr, fqin);\n+      to_return = resolve_class (NULL_TREE, ptr, NULL_TREE, cl);\n+    }\n+  return to_return;\n }\n \n /* We go inside the list of sub classes and try to find a way\n@@ -4290,7 +4301,7 @@ method_header (flags, type, mdecl, throws)\n \t  && !CLASS_INTERFACE (TYPE_NAME (this_class)))\n \tparse_error_context \n \t  (id, \"Class `%s' must be declared abstract to define abstract method `%s'\", \n-\t   IDENTIFIER_POINTER (DECL_NAME (ctxp->current_parsed_class)),\n+\t   IDENTIFIER_POINTER (DECL_NAME (GET_CPC ())),\n \t   IDENTIFIER_POINTER (EXPR_WFL_NODE (id)));\n     }\n \n@@ -10984,7 +10995,7 @@ java_complete_lhs (node)\n       else\n \tnode = patch_switch_statement (node);\n \n-      if (TREE_OPERAND (node, 0) == error_mark_node)\n+      if (node == error_mark_node || TREE_OPERAND (node, 0) == error_mark_node)\n \tnn = error_mark_node;\n       else\n \t{"}]}