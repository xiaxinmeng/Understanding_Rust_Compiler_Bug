{"sha": "8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0M2UyYTlkMGE0NjZhOTA3NDU5ZDFiMDRkMmQyMDAyN2U1ZWY5Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-06T02:25:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-06T02:25:01Z"}, "message": "c.opt (Wterminate): New.\n\ngcc/c-family/\n\t* c.opt (Wterminate): New.\ngcc/cp/\n\t* cp-gimplify.c (cp_genericize_r): Track TRY_BLOCK and\n\tMUST_NOT_THROW_EXPR, warn about a THROW_EXPR directly within a\n\tMUST_NOT_THROW_EXPR.\n\t(cp_genericize_data): Add try_block field.\n\t(cp_genericize_tree): Initialize it.\n\t* except.c (expand_end_catch_block): Set TREE_NO_WARNING on\n\timplicit rethrow.\n\nFrom-SVN: r222842", "tree": {"sha": "9ad11d8e374ad72b911037b02842a64b8871323b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad11d8e374ad72b911037b02842a64b8871323b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81b6a6c55bd5b2549dbaa16a87e736c4c8ac1bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b6a6c55bd5b2549dbaa16a87e736c4c8ac1bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b6a6c55bd5b2549dbaa16a87e736c4c8ac1bf5"}], "stats": {"total": 126, "additions": 112, "deletions": 14}, "files": [{"sha": "9d16d4319d4bfd7fe32d6f7ef368c672d444b341", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -1,3 +1,7 @@\n+2015-05-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (Wterminate): New.\n+\n 2015-04-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (maybe_warn_bool_compare): When comparing with 0/1,"}, {"sha": "8ef0cea52fd185f0c6c51290aab217b80caa4454", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -829,6 +829,10 @@ Wsystem-headers\n C ObjC C++ ObjC++ Warning\n ; Documented in common.opt\n \n+Wterminate\n+C++ ObjC++ Warning Var(warn_terminate) Init(1)\n+Warn if a throw expression will always result in a call to terminate()\n+\n Wtraditional\n C ObjC CPP(cpp_warn_traditional) CppReason(CPP_W_TRADITIONAL) Var(warn_traditional) Init(0) Warning\n Warn about features not present in traditional C"}, {"sha": "b1da4fe7e3db26ee3ebbf313d8119a14f54f4faf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -1,5 +1,13 @@\n 2015-05-05  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-gimplify.c (cp_genericize_r): Track TRY_BLOCK and\n+\tMUST_NOT_THROW_EXPR, warn about a THROW_EXPR directly within a\n+\tMUST_NOT_THROW_EXPR.\n+\t(cp_genericize_data): Add try_block field.\n+\t(cp_genericize_tree): Initialize it.\n+\t* except.c (expand_end_catch_block): Set TREE_NO_WARNING on\n+\timplicit rethrow.\n+\n \t* constexpr.c (potential_constant_expression_1) [AT_ENCODE_EXPR]:\n \tReturn false.\n "}, {"sha": "35749efa38bf823d1a1d04a64af444b4f5a07001", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -905,6 +905,7 @@ struct cp_genericize_data\n   hash_set<tree> *p_set;\n   vec<tree> bind_expr_stack;\n   struct cp_genericize_omp_taskreg *omp_ctx;\n+  tree try_block;\n };\n \n /* Perform any pre-gimplification lowering of C++ front end trees to\n@@ -1193,6 +1194,54 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       wtd->omp_ctx = omp_ctx.outer;\n       splay_tree_delete (omp_ctx.variables);\n     }\n+  else if (TREE_CODE (stmt) == TRY_BLOCK)\n+    {\n+      *walk_subtrees = 0;\n+      tree try_block = wtd->try_block;\n+      wtd->try_block = stmt;\n+      cp_walk_tree (&TRY_STMTS (stmt), cp_genericize_r, data, NULL);\n+      wtd->try_block = try_block;\n+      cp_walk_tree (&TRY_HANDLERS (stmt), cp_genericize_r, data, NULL);\n+    }\n+  else if (TREE_CODE (stmt) == MUST_NOT_THROW_EXPR)\n+    {\n+      /* MUST_NOT_THROW_COND might be something else with TM.  */\n+      if (MUST_NOT_THROW_COND (stmt) == NULL_TREE)\n+\t{\n+\t  *walk_subtrees = 0;\n+\t  tree try_block = wtd->try_block;\n+\t  wtd->try_block = stmt;\n+\t  cp_walk_tree (&TREE_OPERAND (stmt, 0), cp_genericize_r, data, NULL);\n+\t  wtd->try_block = try_block;\n+\t}\n+    }\n+  else if (TREE_CODE (stmt) == THROW_EXPR)\n+    {\n+      location_t loc = location_of (stmt);\n+      if (TREE_NO_WARNING (stmt))\n+\t/* Never mind.  */;\n+      else if (wtd->try_block)\n+\t{\n+\t  if (TREE_CODE (wtd->try_block) == MUST_NOT_THROW_EXPR\n+\t      && warning_at (loc, OPT_Wterminate,\n+\t\t\t     \"throw will always call terminate()\")\n+\t      && cxx_dialect >= cxx11\n+\t      && DECL_DESTRUCTOR_P (current_function_decl))\n+\t    inform (loc, \"in C++11 destructors default to noexcept\");\n+\t}\n+      else\n+\t{\n+\t  if (warn_cxx0x_compat && cxx_dialect < cxx11\n+\t      && DECL_DESTRUCTOR_P (current_function_decl)\n+\t      && (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl))\n+\t\t  == NULL_TREE)\n+\t      && (get_defaulted_eh_spec (current_function_decl)\n+\t\t  == empty_except_spec))\n+\t    warning_at (loc, OPT_Wc__0x_compat,\n+\t\t\t\"in C++11 this throw will terminate because \"\n+\t\t\t\"destructors default to noexcept\");\n+\t}\n+    }\n   else if (TREE_CODE (stmt) == CONVERT_EXPR)\n     gcc_assert (!CONVERT_EXPR_VBASE_PATH (stmt));\n   else if (TREE_CODE (stmt) == FOR_STMT)\n@@ -1269,6 +1318,7 @@ cp_genericize_tree (tree* t_p)\n   wtd.p_set = new hash_set<tree>;\n   wtd.bind_expr_stack.create (0);\n   wtd.omp_ctx = NULL;\n+  wtd.try_block = NULL_TREE;\n   cp_walk_tree (t_p, cp_genericize_r, &wtd, NULL);\n   delete wtd.p_set;\n   wtd.bind_expr_stack.release ();"}, {"sha": "614f2e914b7befec0400be4bde04d14a94667c64", "filename": "gcc/cp/except.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -579,7 +579,11 @@ expand_end_catch_block (void)\n   if (in_function_try_handler\n       && (DECL_CONSTRUCTOR_P (current_function_decl)\n \t  || DECL_DESTRUCTOR_P (current_function_decl)))\n-    finish_expr_stmt (build_throw (NULL_TREE));\n+    {\n+      tree rethrow = build_throw (NULL_TREE);\n+      TREE_NO_WARNING (rethrow) = true;\n+      finish_expr_stmt (rethrow);\n+    }\n }\n \n tree"}, {"sha": "9c8aa99dbd9f5ba382aa02aaab3352d96409d468", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -2882,6 +2882,12 @@ Warn when overload resolution chooses a promotion from unsigned or\n enumerated type to a signed type, over a conversion to an unsigned type of\n the same size.  Previous versions of G++ tried to preserve\n unsignedness, but the standard mandates the current behavior.\n+\n+@item -Wno-terminate @r{(C++ and Objective-C++ only)}\n+@opindex Wterminate\n+@opindex Wno-terminate\n+Disable the warning about a throw-expression that will immediately\n+result in a call to @code{terminate}.\n @end table\n \n @node Objective-C and Objective-C++ Dialect Options"}, {"sha": "9ad186010becc83e34a3fa23bf9bba7e1a9d5f55", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1.h?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -5,6 +5,6 @@ struct Foo\n \n struct Bar\n {\n-  ~Bar ();\n+  ~Bar () throw(int);\n   Foo f;\n };"}, {"sha": "ca1cf389caf75c90ca3a7c4e14717d6bbd1f1729", "filename": "gcc/testsuite/g++.dg/compat/eh/ctor1_y.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fctor1_y.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -7,7 +7,7 @@ Foo::~Foo()\n   was_f_in_Bar_destroyed=true;\n }\n \n-Bar::~Bar()\n+Bar::~Bar() throw(int)\n {\n   throw 1;\n }"}, {"sha": "ad9edec796b3108dbd2630a02ccffcfd91429897", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept06.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept06.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept06.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept06.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -1,6 +1,7 @@\n // Test that checking of a nothrow specification uses the one on the\n // definition.\n // { dg-do run { target c++11 } }\n+// { dg-options \"-Wno-terminate\" }\n \n #include <exception>\n #include <cstdlib>"}, {"sha": "9ea1623880445ac0bf4ecb8dd70dd2a7c17c2a42", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept17.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -1,5 +1,6 @@\n // PR c++/50043\n // { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-terminate\" }\n \n struct True1 {};\n struct True2 { ~True2(); };"}, {"sha": "4d312e478d44294eef6a59d15b7a968f1ca38fff", "filename": "gcc/testsuite/g++.dg/eh/cond4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fcond4.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -12,7 +12,7 @@ void my_terminate ()\n \n struct A {\n   A(int) { }\n-  ~A() { throw 1; };\n+  ~A() throw(int) { throw 1; };\n };\n struct B {\n   B(A) { }"}, {"sha": "b2fb4121d09ed123e7108a2ce0fbfab0a15ce6b7", "filename": "gcc/testsuite/g++.dg/eh/ehopt1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fehopt1.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -15,7 +15,7 @@ class A<int, int>\n public:\n   A(int) { ++count; if (b) throw 1; }\n   A(const A&) { ++count; if (b) throw 1; }\n-  ~A() { --count; if (b) throw 1; }\n+  ~A() throw(int) { --count; if (b) throw 1; }\n };\n \n typedef A<int, int> B;\n@@ -26,7 +26,7 @@ class A<void *, void *>\n public:\n   A() { if (b) throw 1; }\n   A(const B&) { if (b) throw 1; }\n-  ~A() { if (b) throw 1; }\n+  ~A() throw(int) { if (b) throw 1; }\n };\n \n typedef A<void *, void *> C;"}, {"sha": "9cf87976e3bd540c654b340a14222cf14e1d187b", "filename": "gcc/testsuite/g++.dg/eh/init-temp2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp2.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -8,18 +8,18 @@ template <class _Tp> class AutoPtr\n public:\n   explicit AutoPtr(_Tp* __p = 0)  : _M_ptr(__p) {}\n \n-  ~AutoPtr() { delete _M_ptr; }\n+  ~AutoPtr() throw(int) { delete _M_ptr; }\n };\n \n struct A\n {\n   A() { }\n-  ~A() { throw 1.0; }\n+  ~A() throw(int) { throw 1; }\n };\n \n struct B\n {\n-  virtual ~B();\n+  virtual ~B() throw(int);\n };\n \n B* f (const A &s) { throw 1; }"}, {"sha": "e4d3f53bee56e00beebb9e6bc5c9683413c6d000", "filename": "gcc/testsuite/g++.dg/tm/noexcept-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target c++11 } }\n-// { dg-options \"-fgnu-tm -O -fdump-tree-tmmark -fdump-tree-tmlower\" }\n+// { dg-options \"-fgnu-tm -O -fdump-tree-tmmark -fdump-tree-tmlower -Wno-terminate\" }\n \n int global;\n "}, {"sha": "e471885b5e6fb3b314c22bd4e3e85708a0532d41", "filename": "gcc/testsuite/g++.dg/torture/pr49394.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -4,7 +4,7 @@\n struct Mutex\n {\n   bool locked;\n-  ~Mutex ()\n+  ~Mutex () throw(int)\n   {\n     if (locked)\n       throw 0;"}, {"sha": "affb48d3e8ac31cea1ad15189fc62dbd2d7c5046", "filename": "gcc/testsuite/g++.dg/warn/Wterminate1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWterminate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWterminate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWterminate1.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -0,0 +1,20 @@\n+// In C++98 mode this gets a -Wc++11-compat warning, in C++11 mode a\n+// -Wterminate warning.\n+\n+// { dg-options \"-Wall\" }\n+\n+struct A\n+{\n+  ~A()\n+  {\n+    throw 1;\t\t\t// { dg-warning \"terminate\" }\n+  }\n+};\n+\n+int main()\n+{\n+  try { A a;  }\n+  catch (...) {}\n+}\n+\n+"}, {"sha": "f3728cf126f3244059d8d74eb41220be78259df2", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh25.C?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -10,7 +10,7 @@ void my_terminate() {\n \n struct A {\n   A() { }\n-  ~A() {\n+  ~A() throw(int) {\n     std::set_terminate (my_terminate);\n     throw 1;\t\t// This throws from EH dtor, should call my_terminate\n   }"}, {"sha": "6d99c27560ef71a1a4ea16396ef195f7ad335ac9", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/cons/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Fcons%2F1.cc?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -27,7 +27,7 @@ struct Mutex\n {\n   Mutex() : locked(false) { }\n \n-  ~Mutex()\n+  ~Mutex() throw(int)\n   {\n     if (locked)\n       throw 0;"}, {"sha": "06d955a53df9aa969e7c5e0010de886a7781dd2e", "filename": "libstdc++-v3/testsuite/util/replacement_memory_operators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8243e2a9d0a466a907459d1b04d2d20027e5ef9b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h?ref=8243e2a9d0a466a907459d1b04d2d20027e5ef9b", "patch": "@@ -32,7 +32,7 @@ namespace __gnu_test\n \n     counter() : _M_count(0), _M_throw(true) { }\n     \n-    ~counter()\n+    ~counter() throw (counter_error)\n     {\n       if (_M_throw && _M_count != 0)\n \tthrow counter_error();"}]}