{"sha": "ab756588cef4f6bcd34f847e0b8f17f46eb60344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3NTY1ODhjZWY0ZjZiY2QzNGY4NDdlMGI4ZjE3ZjQ2ZWI2MDM0NA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-11T20:29:59Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:29:59Z"}, "message": "Fix tonto: call propagate_expr_outside_region.\n\n2010-07-26  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (propagate_expr_outside_region): Also\n\thandle the case when def is in the sese region.\n\t(rewrite_close_phi_out_of_ssa): Call propagate_expr_outside_region\n\tfor invariant expressions.\n\t(rewrite_cross_bb_phi_deps): Removed.\n\t(rewrite_cross_bb_scalar_deps): Also handle GIMPLE_PHI nodes.\n\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Do not call\n\trewrite_cross_bb_phi_deps.\n\nFrom-SVN: r163159", "tree": {"sha": "9437c069d3c54b550cb993ccedb5e65a157b348b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9437c069d3c54b550cb993ccedb5e65a157b348b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab756588cef4f6bcd34f847e0b8f17f46eb60344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab756588cef4f6bcd34f847e0b8f17f46eb60344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab756588cef4f6bcd34f847e0b8f17f46eb60344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab756588cef4f6bcd34f847e0b8f17f46eb60344/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee23fa87409de023a260a9a6f05027982a8b2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee23fa87409de023a260a9a6f05027982a8b2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee23fa87409de023a260a9a6f05027982a8b2c7"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "430111cbf7756ffa336349eac87a740d3a2de5f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab756588cef4f6bcd34f847e0b8f17f46eb60344", "patch": "@@ -1,5 +1,16 @@\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n+\t* graphite-sese-to-poly.c (propagate_expr_outside_region): Also\n+\thandle the case when def is in the sese region.\n+\t(rewrite_close_phi_out_of_ssa): Call propagate_expr_outside_region\n+\tfor invariant expressions.\n+\t(rewrite_cross_bb_phi_deps): Removed.\n+\t(rewrite_cross_bb_scalar_deps): Also handle GIMPLE_PHI nodes.\n+\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Do not call\n+\trewrite_cross_bb_phi_deps.2\n+\n+010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n \t* graphite-sese-to-poly.c\n \t(rewrite_commutative_reductions_out_of_ssa_loop): Call\n \tscev_analyzable_p only on is_gimple_reg"}, {"sha": "cf0bd6baf3510485feb1943b9f048ac3d04cdecc", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=ab756588cef4f6bcd34f847e0b8f17f46eb60344", "patch": "@@ -1,3 +1,14 @@\n+2010-07-26  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (propagate_expr_outside_region): Also\n+\thandle the case when def is in the sese region.\n+\t(rewrite_close_phi_out_of_ssa): Call propagate_expr_outside_region\n+\tfor invariant expressions.\n+\t(rewrite_cross_bb_phi_deps): Removed.\n+\t(rewrite_cross_bb_scalar_deps): Also handle GIMPLE_PHI nodes.\n+\t(rewrite_cross_bb_scalar_deps_out_of_ssa): Do not call\n+\trewrite_cross_bb_phi_deps.\n+\n 2010-07-26  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c"}, {"sha": "f92c97ef3eb6710b5c83c2100dc8c4e0a802d1d1", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 21, "deletions": 43, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab756588cef4f6bcd34f847e0b8f17f46eb60344/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=ab756588cef4f6bcd34f847e0b8f17f46eb60344", "patch": "@@ -2193,8 +2193,7 @@ propagate_expr_outside_region (tree def, tree expr, sese region)\n   gimple_seq stmts;\n   bool replaced_once = false;\n \n-  gcc_assert (TREE_CODE (def) == SSA_NAME\n-\t      && bb_in_sese_p (gimple_bb (SSA_NAME_DEF_STMT (def)), region));\n+  gcc_assert (TREE_CODE (def) == SSA_NAME);\n \n   expr = force_gimple_operand (unshare_expr (expr), &stmts, true,\n \t\t\t       NULL_TREE);\n@@ -2245,7 +2244,11 @@ rewrite_close_phi_out_of_ssa (gimple_stmt_iterator *psi, sese region)\n   if (is_gimple_min_invariant (arg)\n       || SSA_NAME_IS_DEFAULT_DEF (arg)\n       || gimple_bb (SSA_NAME_DEF_STMT (arg))->loop_father == bb->loop_father)\n-    stmt = gimple_build_assign (res, arg);\n+    {\n+      propagate_expr_outside_region (res, arg, region);\n+      gsi_next (psi);\n+      return;\n+    }\n \n   /* If res is scev analyzable and is not a scalar value, it is safe\n      to ignore the close phi node: it will be code generated in the\n@@ -2262,7 +2265,7 @@ rewrite_close_phi_out_of_ssa (gimple_stmt_iterator *psi, sese region)\n \t  scev = compute_overall_effect_of_inner_loop (loop, scev);\n \t}\n       else\n-\t  scev = scalar_evolution_in_region (region, loop, res);\n+\tscev = scalar_evolution_in_region (region, loop, res);\n \n       if (tree_does_not_contain_chrecs (scev))\n \tpropagate_expr_outside_region (res, scev, region);\n@@ -2424,38 +2427,6 @@ rewrite_cross_bb_scalar_dependence (tree zero_dim_array, tree def, gimple use_st\n   update_stmt (use_stmt);\n }\n \n-/* Rewrite the scalar dependences crossing the boundary of the BB\n-   containing STMT with an array.  GSI points to a definition that is\n-   used in a PHI node.  */\n-\n-static void\n-rewrite_cross_bb_phi_deps (sese region, gimple_stmt_iterator gsi)\n-{\n-  gimple stmt = gsi_stmt (gsi);\n-  imm_use_iterator imm_iter;\n-  tree def;\n-  gimple use_stmt;\n-\n-  if (gimple_code (stmt) != GIMPLE_ASSIGN)\n-    return;\n-\n-  def = gimple_assign_lhs (stmt);\n-  if (!is_gimple_reg (def)\n-      || scev_analyzable_p (def, region))\n-    return;\n-\n-  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n-    if (gimple_code (use_stmt) == GIMPLE_PHI)\n-      {\n-\tgimple_stmt_iterator psi = gsi_for_stmt (use_stmt);\n-\n-\tif (scalar_close_phi_node_p (gsi_stmt (psi)))\n-\t  rewrite_close_phi_out_of_ssa (&psi, region);\n-\telse\n-\t  rewrite_phi_out_of_ssa (&psi);\n-      }\n-}\n-\n /* Rewrite the scalar dependences crossing the boundary of the BB\n    containing STMT with an array.  */\n \n@@ -2500,11 +2471,21 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n   def_bb = gimple_bb (stmt);\n \n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n-    if (def_bb != gimple_bb (use_stmt)\n-\t&& !is_gimple_debug (use_stmt))\n+    if (gimple_code (use_stmt) == GIMPLE_PHI)\n       {\n-\tgcc_assert (gimple_code (use_stmt) != GIMPLE_PHI);\n+\tgimple_stmt_iterator psi = gsi_for_stmt (use_stmt);\n \n+\tif (scalar_close_phi_node_p (gsi_stmt (psi)))\n+\t  rewrite_close_phi_out_of_ssa (&psi, region);\n+\telse\n+\t  rewrite_phi_out_of_ssa (&psi);\n+      }\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n+    if (gimple_code (use_stmt) != GIMPLE_PHI\n+\t&& def_bb != gimple_bb (use_stmt)\n+\t&& !is_gimple_debug (use_stmt))\n+      {\n \tif (!zero_dim_array)\n \t  {\n \t    zero_dim_array = create_zero_dim_array\n@@ -2530,10 +2511,7 @@ rewrite_cross_bb_scalar_deps_out_of_ssa (scop_p scop)\n   FOR_EACH_BB (bb)\n     if (bb_in_sese_p (bb, region))\n       for (psi = gsi_start_bb (bb); !gsi_end_p (psi); gsi_next (&psi))\n-\t{\n-\t  rewrite_cross_bb_phi_deps (region, psi);\n-\t  rewrite_cross_bb_scalar_deps (region, &psi);\n-\t}\n+\trewrite_cross_bb_scalar_deps (region, &psi);\n \n   update_ssa (TODO_update_ssa);\n #ifdef ENABLE_CHECKING"}]}