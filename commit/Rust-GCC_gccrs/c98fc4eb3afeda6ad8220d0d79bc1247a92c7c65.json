{"sha": "c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4ZmM0ZWIzYWZlZGE2YWQ4MjIwZDBkNzliYzEyNDdhOTJjN2M2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-23T09:24:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-23T09:25:26Z"}, "message": "libstdc++: Implement P1972R2 changes to std::variant (PR 95832)\n\nG++ implements P1972R2 since r11-1597-0ca22d027ecc and so we no longer\nneed the P0608R3 special case to prevent narrowing conversions to bool.\n\nSince non-GNU compilers don't necessarily implment P1972R2 yet, this\nmay cause a regression for those compilers. There is no feature-test\nmacro we can use to detect it though, so we'll have to live with it.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95832\n\t* include/std/variant (__detail::__variant::_Build_FUN): Remove\n\tpartial specialization to prevent narrowing conversions to bool.\n\t* testsuite/20_util/variant/compile.cc: Test non-narrowing\n\tconversions to bool.\n\t* testsuite/20_util/variant/run.cc: Likewise.", "tree": {"sha": "a112fb75a18904fd747a38a883d0ac28556b099f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a112fb75a18904fd747a38a883d0ac28556b099f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c5150e401a9c084f88b2d5576b29ef709dbadb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c5150e401a9c084f88b2d5576b29ef709dbadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c5150e401a9c084f88b2d5576b29ef709dbadb"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "6eeb3c80ec280b541ee6bade20a5d026a1518933", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "patch": "@@ -164,7 +164,7 @@ namespace __detail\n {\n namespace __variant\n {\n-  // Returns the first appearence of _Tp in _Types.\n+  // Returns the first appearance of _Tp in _Types.\n   // Returns sizeof...(_Types) if _Tp is not in _Types.\n   template<typename _Tp, typename... _Types>\n     struct __index_of : std::integral_constant<size_t, 0> {};\n@@ -733,35 +733,24 @@ namespace __variant\n   // Helper used to check for valid conversions that don't involve narrowing.\n   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };\n \n-  // Build an imaginary function FUN(Ti) for each alternative type Ti\n-  template<size_t _Ind, typename _Tp, typename _Ti,\n-\t   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,\n-\t   typename = void>\n+  // \"Build an imaginary function FUN(Ti) for each alternative type Ti\"\n+  template<size_t _Ind, typename _Tp, typename _Ti, typename = void>\n     struct _Build_FUN\n     {\n       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,\n       // but only static functions will be considered in the call below.\n       void _S_fun();\n     };\n \n-  // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,\n+  // \"... for which Ti x[] = {std::forward<T>(t)}; is well-formed.\"\n   template<size_t _Ind, typename _Tp, typename _Ti>\n-    struct _Build_FUN<_Ind, _Tp, _Ti, false,\n+    struct _Build_FUN<_Ind, _Tp, _Ti,\n \t\t      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>\n     {\n       // This is the FUN function for type _Ti, with index _Ind\n       static integral_constant<size_t, _Ind> _S_fun(_Ti);\n     };\n \n-  // ... and if Ti is cv bool, remove_cvref_t<T> is bool.\n-  template<size_t _Ind, typename _Tp, typename _Ti>\n-    struct _Build_FUN<_Ind, _Tp, _Ti, true,\n-\t\t      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>\n-    {\n-      // This is the FUN function for when _Ti is cv bool, with index _Ind\n-      static integral_constant<size_t, _Ind> _S_fun(_Ti);\n-    };\n-\n   template<typename _Tp, typename _Variant,\n \t   typename = make_index_sequence<variant_size_v<_Variant>>>\n     struct _Build_FUNs;"}, {"sha": "b2b60d1cf10781267ee17f8d565ee26a3812de47", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "patch": "@@ -155,6 +155,14 @@ void arbitrary_ctor()\n   static_assert(!is_constructible_v<variant<int>, unsigned>);\n   static_assert(!is_constructible_v<variant<bool>, int>);\n   static_assert(!is_constructible_v<variant<bool>, void*>);\n+\n+  // P1957R2 Converting from T* to bool should be considered narrowing\n+  struct ConvertibleToBool\n+  {\n+    operator bool() const { return true; }\n+  };\n+  static_assert(is_constructible_v<variant<bool>, ConvertibleToBool>);\n+  static_assert(is_constructible_v<variant<bool, int>, ConvertibleToBool>);\n }\n \n struct none { none() = delete; };"}, {"sha": "0ac5de25289ef6fd063a68456f3be55f10c65fca", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=c98fc4eb3afeda6ad8220d0d79bc1247a92c7c65", "patch": "@@ -139,6 +139,20 @@ void arbitrary_ctor()\n     variant<float, big_int> v3 = 0;\n     VERIFY(v3.index() == 1);\n   }\n+\n+  {\n+    // P1957R2 Converting from T* to bool should be considered narrowing\n+    struct ConvertibleToBool\n+    {\n+      operator bool() const { return true; }\n+    };\n+    variant<bool> v1 = ConvertibleToBool();\n+    VERIFY(std::get<0>(v1) == true);\n+    variant<bool, int> v2 = ConvertibleToBool();\n+    VERIFY(std::get<0>(v2) == true);\n+    variant<int, bool> v3 = ConvertibleToBool();\n+    VERIFY(std::get<1>(v3) == true);\n+  }\n }\n \n struct ThrowingMoveCtorThrowsCopyCtor\n@@ -226,6 +240,23 @@ void arbitrary_assign()\n     v3 = 0;\n     VERIFY(v3.index() == 1);\n   }\n+\n+  {\n+    // P1957R2 Converting from T* to bool should be considered narrowing\n+    struct ConvertibleToBool\n+    {\n+      operator bool() const { return true; }\n+    };\n+    variant<bool> v1;\n+    v1 = ConvertibleToBool();\n+    VERIFY(std::get<0>(v1) == true);\n+    variant<bool, int> v2;\n+    v2 = ConvertibleToBool();\n+    VERIFY(std::get<0>(v2) == true);\n+    variant<int, bool> v3;\n+    v3 = ConvertibleToBool();\n+    VERIFY(std::get<1>(v3) == true);\n+  }\n }\n \n void dtor()"}]}