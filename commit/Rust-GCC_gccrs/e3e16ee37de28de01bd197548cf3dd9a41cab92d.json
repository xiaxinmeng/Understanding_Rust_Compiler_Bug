{"sha": "e3e16ee37de28de01bd197548cf3dd9a41cab92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlMTZlZTM3ZGUyOGRlMDFiZDE5NzU0OGNmM2RkOWE0MWNhYjkyZA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2002-08-02T11:01:31Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2002-08-02T11:01:31Z"}, "message": "simplify-rtx.c (simplify_binary_operation): x * 1 is allowed when not honoring signalling NaNs.\n\n2002-08-02  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* simplify-rtx.c (simplify_binary_operation): x * 1 is allowed\n\twhen not honoring signalling NaNs.\n\t(simplify_ternary_operation): a == b has a definite value\n\twhen not honoring NaNs.\n\nFrom-SVN: r55980", "tree": {"sha": "80947de2c0a402b92da9a5341fccbff49d0fd0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80947de2c0a402b92da9a5341fccbff49d0fd0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e16ee37de28de01bd197548cf3dd9a41cab92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e16ee37de28de01bd197548cf3dd9a41cab92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e16ee37de28de01bd197548cf3dd9a41cab92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e16ee37de28de01bd197548cf3dd9a41cab92d/comments", "author": null, "committer": null, "parents": [{"sha": "b9d8832d731aa639658f29bcc612bc45c85d7d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d8832d731aa639658f29bcc612bc45c85d7d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9d8832d731aa639658f29bcc612bc45c85d7d62"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "9d0272e33aa9e89d7497c2590adbfb2bf85ac40f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e16ee37de28de01bd197548cf3dd9a41cab92d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e16ee37de28de01bd197548cf3dd9a41cab92d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3e16ee37de28de01bd197548cf3dd9a41cab92d", "patch": "@@ -1,3 +1,10 @@\n+2002-08-02  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* simplify-rtx.c (simplify_binary_operation): x * 1 is allowed\n+\twhen not honoring signalling NaNs.\n+\t(simplify_ternary_operation): a == b has a definite value\n+\twhen not honoring NaNs.\n+\n 2002-08-02  Jason Merrill  <jason@redhat.com>\n \n \t* gdbinit.in (pct): New macro."}, {"sha": "14e8840d44773ad2c0b5e22591e1f9a5eb1cf815", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e16ee37de28de01bd197548cf3dd9a41cab92d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e16ee37de28de01bd197548cf3dd9a41cab92d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e3e16ee37de28de01bd197548cf3dd9a41cab92d", "patch": "@@ -1169,10 +1169,10 @@ simplify_binary_operation (code, mode, op0, op1)\n \t      && ! side_effects_p (op0))\n \t    return op1;\n \n-\t  /* In IEEE floating point, x*1 is not equivalent to x for nans.\n-\t     However, ANSI says we can drop signals,\n-\t     so we can do this anyway.  */\n-\t  if (trueop1 == CONST1_RTX (mode))\n+\t  /* In IEEE floating point, x*1 is not equivalent to x for\n+\t     signalling NaNs.  */\n+\t  if (!HONOR_SNANS (mode)\n+\t      && trueop1 == CONST1_RTX (mode))\n \t    return op0;\n \n \t  /* Convert multiply by constant power of two into shift unless\n@@ -2193,12 +2193,12 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n \n       /* Convert a == b ? b : a to \"a\".  */\n       if (GET_CODE (op0) == NE && ! side_effects_p (op0)\n-\t  && (! FLOAT_MODE_P (mode) || flag_unsafe_math_optimizations)\n+\t  && !HONOR_NANS (mode)\n \t  && rtx_equal_p (XEXP (op0, 0), op1)\n \t  && rtx_equal_p (XEXP (op0, 1), op2))\n \treturn op1;\n       else if (GET_CODE (op0) == EQ && ! side_effects_p (op0)\n-\t  && (! FLOAT_MODE_P (mode) || flag_unsafe_math_optimizations)\n+\t  && !HONOR_NANS (mode)\n \t  && rtx_equal_p (XEXP (op0, 1), op1)\n \t  && rtx_equal_p (XEXP (op0, 0), op2))\n \treturn op2;"}]}