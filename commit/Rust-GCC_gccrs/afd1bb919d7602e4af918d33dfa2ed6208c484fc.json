{"sha": "afd1bb919d7602e4af918d33dfa2ed6208c484fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkMWJiOTE5ZDc2MDJlNGFmOTE4ZDMzZGZhMmVkNjIwOGM0ODRmYw==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2000-05-01T14:37:11Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-05-01T14:37:11Z"}, "message": "avr.c (address_cost): renamed to avr_address_cost.\n\n\t* config/avr/avr.c (address_cost): renamed to avr_address_cost.\n\t* config/avr/avr.h (ADDRESS_COST): use avr_address_cost.\n\nFrom-SVN: r33568", "tree": {"sha": "5cca34f8733778ad328a2b1023c1aaf7be807b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cca34f8733778ad328a2b1023c1aaf7be807b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd1bb919d7602e4af918d33dfa2ed6208c484fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd1bb919d7602e4af918d33dfa2ed6208c484fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd1bb919d7602e4af918d33dfa2ed6208c484fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd1bb919d7602e4af918d33dfa2ed6208c484fc/comments", "author": null, "committer": null, "parents": [{"sha": "368256d894d80c7d82ceefcbd62f6c6381aed3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368256d894d80c7d82ceefcbd62f6c6381aed3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368256d894d80c7d82ceefcbd62f6c6381aed3d8"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "a45abfffb2278ab0474c144420ace3cf9379cabc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afd1bb919d7602e4af918d33dfa2ed6208c484fc", "patch": "@@ -1,3 +1,8 @@\n+Mon May  1 18:20:06 2000  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.c (address_cost): renamed to avr_address_cost.\n+\t* config/avr/avr.h (ADDRESS_COST): use avr_address_cost.\n+\n Mon May  1 17:50:44 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.c (asm_file_start): output 0 as r0 and 1 as r1 in"}, {"sha": "df05ca6818c819c572ebe803554083b4009e1180", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=afd1bb919d7602e4af918d33dfa2ed6208c484fc", "patch": "@@ -3481,7 +3481,7 @@ default_rtx_costs (X, code, outer_code)\n /* Calculate the cost of a memory address */\n \n int\n-address_cost (rtx x)\n+avr_address_cost (rtx x)\n {\n   if (GET_CODE (x) == PLUS\n       && GET_CODE (XEXP (x,1)) == CONST_INT"}, {"sha": "c180e6cfb867469215c73c2485ab35149153034d", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd1bb919d7602e4af918d33dfa2ed6208c484fc/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=afd1bb919d7602e4af918d33dfa2ed6208c484fc", "patch": "@@ -1817,7 +1817,7 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    This macro is optional; do not define it if the default cost\n    assumptions are adequate for the target machine.  */\n \n-#define ADDRESS_COST(ADDRESS) address_cost (ADDRESS)\n+#define ADDRESS_COST(ADDRESS) avr_address_cost (ADDRESS)\n \n /* An expression giving the cost of an addressing mode that contains\n    ADDRESS.  If not defined, the cost is computed from the ADDRESS"}]}