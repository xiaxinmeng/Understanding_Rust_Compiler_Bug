{"sha": "56f30f653e816f0b0dc57290e842d9e653cd9d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmMzBmNjUzZTgxNmYwYjBkYzU3MjkwZTg0MmQ5ZTY1M2NkOWQ1NQ==", "commit": {"author": {"name": "Vladimir Kargov", "email": "kargov@gmail.com", "date": "2010-09-30T21:18:09Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-09-30T21:18:09Z"}, "message": "Remove outermost loop parameter.\n\n2010-08-18  Vladimir Kargov  <kargov@gmail.com>\n\n\t* graphite-scop-detection.c (graphite_can_represent_scev,\n\tgraphite_can_represent_expr, stmt_has_simple_data_refs_p,\n\tgraphite_can_represent_loop): Remove outermost_loop.\n\nFrom-SVN: r164786", "tree": {"sha": "6f9f9a1bc759a501b652720c541fa2bed5b5400c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f9f9a1bc759a501b652720c541fa2bed5b5400c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f30f653e816f0b0dc57290e842d9e653cd9d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f30f653e816f0b0dc57290e842d9e653cd9d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f30f653e816f0b0dc57290e842d9e653cd9d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f30f653e816f0b0dc57290e842d9e653cd9d55/comments", "author": {"login": "vkargov", "id": 1414097, "node_id": "MDQ6VXNlcjE0MTQwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1414097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkargov", "html_url": "https://github.com/vkargov", "followers_url": "https://api.github.com/users/vkargov/followers", "following_url": "https://api.github.com/users/vkargov/following{/other_user}", "gists_url": "https://api.github.com/users/vkargov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkargov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkargov/subscriptions", "organizations_url": "https://api.github.com/users/vkargov/orgs", "repos_url": "https://api.github.com/users/vkargov/repos", "events_url": "https://api.github.com/users/vkargov/events{/privacy}", "received_events_url": "https://api.github.com/users/vkargov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c8119fe2992f78d79acaef79302533ba085b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c8119fe2992f78d79acaef79302533ba085b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c8119fe2992f78d79acaef79302533ba085b03"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "9d19ea162581cee04d490d0fd925a0aae39f3642", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f30f653e816f0b0dc57290e842d9e653cd9d55", "patch": "@@ -1,3 +1,9 @@\n+2010-09-30  Vladimir Kargov  <kargov@gmail.com>\n+\n+\t* graphite-scop-detection.c (graphite_can_represent_scev,\n+\tgraphite_can_represent_expr, stmt_has_simple_data_refs_p,\n+\tgraphite_can_represent_loop): Remove outermost_loop.\n+\n 2010-09-30  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/45229"}, {"sha": "b9c258d1bf6ec13413437d021761e3f2f6703ff3", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=56f30f653e816f0b0dc57290e842d9e653cd9d55", "patch": "@@ -1,3 +1,9 @@\n+2010-08-18  Vladimir Kargov  <kargov@gmail.com>\n+\n+\t* graphite-scop-detection.c (graphite_can_represent_scev,\n+\tgraphite_can_represent_expr, stmt_has_simple_data_refs_p, \n+\tgraphite_can_represent_loop): Remove outermost_loop.\n+\n 2010-08-17  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/45229"}, {"sha": "5647d2e0b39444bc9cb72c197e8c74d8489abe85", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f30f653e816f0b0dc57290e842d9e653cd9d55/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=56f30f653e816f0b0dc57290e842d9e653cd9d55", "patch": "@@ -202,12 +202,10 @@ graphite_can_represent_init (tree e)\n \n    1 i + 20 j + (-2) m + 25\n \n-   Something like \"i * n\" or \"n * m\" is not allowed.\n-\n-   OUTERMOST_LOOP defines the outermost loop that can variate.  */\n+   Something like \"i * n\" or \"n * m\" is not allowed.  */\n \n static bool\n-graphite_can_represent_scev (tree scev, int outermost_loop)\n+graphite_can_represent_scev (tree scev)\n {\n   if (chrec_contains_undetermined (scev))\n     return false;\n@@ -216,17 +214,17 @@ graphite_can_represent_scev (tree scev, int outermost_loop)\n     {\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n-      return graphite_can_represent_scev (TREE_OPERAND (scev, 0), outermost_loop)\n-\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 1), outermost_loop);\n+      return graphite_can_represent_scev (TREE_OPERAND (scev, 0))\n+\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 1));\n \n     case MULT_EXPR:\n       return !CONVERT_EXPR_CODE_P (TREE_CODE (TREE_OPERAND (scev, 0)))\n \t&& !CONVERT_EXPR_CODE_P (TREE_CODE (TREE_OPERAND (scev, 1)))\n \t&& !(chrec_contains_symbols (TREE_OPERAND (scev, 0))\n \t     && chrec_contains_symbols (TREE_OPERAND (scev, 1)))\n \t&& graphite_can_represent_init (scev)\n-\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 0), outermost_loop)\n-\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 1), outermost_loop);\n+\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 0))\n+\t&& graphite_can_represent_scev (TREE_OPERAND (scev, 1));\n \n     case POLYNOMIAL_CHREC:\n       /* Check for constant strides.  With a non constant stride of\n@@ -253,19 +251,18 @@ graphite_can_represent_scev (tree scev, int outermost_loop)\n \n    This means an expression can be represented, if it is linear with\n    respect to the loops and the strides are non parametric.\n-   LOOP is the place where the expr will be evaluated and OUTERMOST_LOOP\n-   defindes the outermost loop that can variate.  SCOP_ENTRY defines the\n+   LOOP is the place where the expr will be evaluated.  SCOP_ENTRY defines the\n    entry of the region we analyse.  */\n \n static bool\n graphite_can_represent_expr (basic_block scop_entry, loop_p loop,\n-\t\t\t     loop_p outermost_loop, tree expr)\n+\t\t\t     tree expr)\n {\n   tree scev = analyze_scalar_evolution (loop, expr);\n \n   scev = instantiate_scev (scop_entry, loop, scev);\n \n-  return graphite_can_represent_scev (scev, outermost_loop->num);\n+  return graphite_can_represent_scev (scev);\n }\n \n /* Return true if the data references of STMT can be represented by\n@@ -278,14 +275,13 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop, gimple stmt)\n   unsigned i;\n   int j;\n   bool res = true;\n-  int loop = outermost_loop->num;\n   VEC (data_reference_p, heap) *drs = VEC_alloc (data_reference_p, heap, 5);\n \n   graphite_find_data_references_in_stmt (outermost_loop, stmt, &drs);\n \n   FOR_EACH_VEC_ELT (data_reference_p, drs, j, dr)\n     for (i = 0; i < DR_NUM_DIMENSIONS (dr); i++)\n-      if (!graphite_can_represent_scev (DR_ACCESS_FN (dr, i), loop))\n+      if (!graphite_can_represent_scev (DR_ACCESS_FN (dr, i)))\n \t{\n \t  res = false;\n \t  goto done;\n@@ -349,8 +345,7 @@ stmt_simple_for_scop_p (basic_block scop_entry, loop_p outermost_loop,\n           return false;\n \n \tFOR_EACH_SSA_TREE_OPERAND (op, stmt, op_iter, SSA_OP_ALL_USES)\n-\t  if (!graphite_can_represent_expr (scop_entry, loop, outermost_loop,\n-\t\t\t\t\t    op)\n+\t  if (!graphite_can_represent_expr (scop_entry, loop, op)\n \t      /* We can not handle REAL_TYPE. Failed for pr39260.  */\n \t      || TREE_CODE (TREE_TYPE (op)) == REAL_TYPE)\n \t    return false;\n@@ -389,12 +384,11 @@ harmful_stmt_in_bb (basic_block scop_entry, loop_p outer_loop, basic_block bb)\n }\n \n /* Return true when it is not possible to represent LOOP in the\n-   polyhedral representation.  This is evaluated taking SCOP_ENTRY and\n-   OUTERMOST_LOOP in mind.  */\n+   polyhedral representation.  This is evaluated taking SCOP_ENTRY\n+   in mind.  */\n \n static bool\n-graphite_can_represent_loop (basic_block scop_entry, loop_p outermost_loop,\n-\t\t\t     loop_p loop)\n+graphite_can_represent_loop (basic_block scop_entry, loop_p loop)\n {\n   tree niter = number_of_latch_executions (loop);\n \n@@ -403,7 +397,7 @@ graphite_can_represent_loop (basic_block scop_entry, loop_p outermost_loop,\n     return false;\n \n   /* Number of iterations not affine.  */\n-  if (!graphite_can_represent_expr (scop_entry, loop, outermost_loop, niter))\n+  if (!graphite_can_represent_expr (scop_entry, loop, niter))\n     return false;\n \n   return true;\n@@ -476,7 +470,7 @@ scopdet_basic_block_info (basic_block bb, loop_p outermost_loop,\n \n \tsinfo = build_scops_1 (bb, outermost_loop, &regions, loop);\n \n-\tif (!graphite_can_represent_loop (entry_block, outermost_loop, loop))\n+\tif (!graphite_can_represent_loop (entry_block, loop))\n \t  result.difficult = true;\n \n \tresult.difficult |= sinfo.difficult;"}]}