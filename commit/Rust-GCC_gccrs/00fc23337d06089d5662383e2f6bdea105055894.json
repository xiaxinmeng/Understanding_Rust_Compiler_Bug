{"sha": "00fc23337d06089d5662383e2f6bdea105055894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmYzIzMzM3ZDA2MDg5ZDU2NjIzODNlMmY2YmRlYTEwNTA1NTg5NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-23T20:28:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-23T20:28:07Z"}, "message": "tree.c (decl_address_ip_invariant_p): New function.\n\n\n\t* tree.c (decl_address_ip_invariant_p): New function.\n\t* tree.h (decl_address_ip_invariant_p): Declare.\n\t* gimple.c (strip_invariant_refs): Break out from ...\n\t(is_gimple_invariant_address): ... here\n\t(is_gimple_ip_invariant_address): New function.\n\t(is_gimple_ip_invariant): New function.\n\t* gimple.h (is_gimple_ip_invariant_address, is_gimple_ip_invariant):\n\tDeclare.\n\n\t* ipa-cp.c (ipcp_lat_is_const): Remove handling of IPA_CONST_VALUE_REF.\n\t(ipcp_lat_is_insertable): All constants are insertable.\n\t(ipcp_lattice_from_jfunc, ipcp_print_all_lattices): Remove handling of\n\tIPA_CONST_VALUE_REF.\n\t(ipcp_initialize_node_lattices): Propagate all types of operands.\n\t(build_const_val): Do not handle IPA_CONST_VALUE_REF.\n\t(ipcp_create_replace_map): Reformat.\n\t(ipcp_need_redirect_p): Simplify.\n\t(ipcp_insert_stage): Check that argument is used before clonning.\n\t* ipa-prop.c (ipa_print_node_jump_functions): Do not handle IPA_CONST_REF.\n\t(compute_scalar_jump_functions): Simplify using is_gimple_ip_invariat.\n\t(determine_cst_member_ptr): Keep wrapping ADDR_EXPR of members.\n\t(update_call_notes_after_inlining): Expect ADDR_EXPR in operand.\n\t* ipa-prop.h (jump_func_type): Remove IPA_CONST_REF.\n\t(jump_func_type): Remove IPA_CONST_VALUE_REF.\n\t* tree-inline.c (tree_function_versioning): Add variables referenced by\n\treplacing trees.\n\nFrom-SVN: r139523", "tree": {"sha": "b2d83395a226ce339483346c7db1d16095008402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d83395a226ce339483346c7db1d16095008402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00fc23337d06089d5662383e2f6bdea105055894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fc23337d06089d5662383e2f6bdea105055894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fc23337d06089d5662383e2f6bdea105055894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fc23337d06089d5662383e2f6bdea105055894/comments", "author": null, "committer": null, "parents": [{"sha": "98e146ab5ceb193cc662f9f6c313a87988131f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e146ab5ceb193cc662f9f6c313a87988131f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e146ab5ceb193cc662f9f6c313a87988131f35"}], "stats": {"total": 242, "additions": 156, "deletions": 86}, "files": [{"sha": "33605b99b5ba47dc40d86b56a639d154fd9c7840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -1,3 +1,32 @@\n+2008-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (decl_address_ip_invariant_p): New function.\n+\t* tree.h (decl_address_ip_invariant_p): Declare.\n+\t* gimple.c (strip_invariant_refs): Break out from ...\n+\t(is_gimple_invariant_address): ... here\n+\t(is_gimple_ip_invariant_address): New function.\n+\t(is_gimple_ip_invariant): New function.\n+\t* gimple.h (is_gimple_ip_invariant_address, is_gimple_ip_invariant):\n+\tDeclare.\n+\n+\t* ipa-cp.c (ipcp_lat_is_const): Remove handling of IPA_CONST_VALUE_REF.\n+\t(ipcp_lat_is_insertable): All constants are insertable.\n+\t(ipcp_lattice_from_jfunc, ipcp_print_all_lattices): Remove handling of\n+\tIPA_CONST_VALUE_REF.\n+\t(ipcp_initialize_node_lattices): Propagate all types of operands.\n+\t(build_const_val): Do not handle IPA_CONST_VALUE_REF.\n+\t(ipcp_create_replace_map): Reformat.\n+\t(ipcp_need_redirect_p): Simplify.\n+\t(ipcp_insert_stage): Check that argument is used before clonning.\n+\t* ipa-prop.c (ipa_print_node_jump_functions): Do not handle IPA_CONST_REF.\n+\t(compute_scalar_jump_functions): Simplify using is_gimple_ip_invariat.\n+\t(determine_cst_member_ptr): Keep wrapping ADDR_EXPR of members.\n+\t(update_call_notes_after_inlining): Expect ADDR_EXPR in operand.\n+\t* ipa-prop.h (jump_func_type): Remove IPA_CONST_REF.\n+\t(jump_func_type): Remove IPA_CONST_VALUE_REF.\n+\t* tree-inline.c (tree_function_versioning): Add variables referenced by\n+\treplacing trees.\n+\n 2008-08-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/37094"}, {"sha": "c651f0db9c313c6bbfa0b8474135d3e296847f6c", "filename": "gcc/gimple.c", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -2730,17 +2730,12 @@ is_gimple_address (const_tree t)\n     }\n }\n \n-/* Return true if T is a gimple invariant address.  */\n+/* Strip out all handled components that produce invariant\n+   offsets.  */\n \n-bool\n-is_gimple_invariant_address (const_tree t)\n+static const_tree\n+strip_invariant_refs (const_tree op)\n {\n-  tree op;\n-\n-  if (TREE_CODE (t) != ADDR_EXPR)\n-    return false;\n-\n-  op = TREE_OPERAND (t, 0);\n   while (handled_component_p (op))\n     {\n       switch (TREE_CODE (op))\n@@ -2750,20 +2745,51 @@ is_gimple_invariant_address (const_tree t)\n \t  if (!is_gimple_constant (TREE_OPERAND (op, 1))\n \t      || TREE_OPERAND (op, 2) != NULL_TREE\n \t      || TREE_OPERAND (op, 3) != NULL_TREE)\n-\t    return false;\n+\t    return NULL;\n \t  break;\n \n \tcase COMPONENT_REF:\n \t  if (TREE_OPERAND (op, 2) != NULL_TREE)\n-\t    return false;\n+\t    return NULL;\n \t  break;\n \n \tdefault:;\n \t}\n       op = TREE_OPERAND (op, 0);\n     }\n \n-  return CONSTANT_CLASS_P (op) || decl_address_invariant_p (op);\n+  return op;\n+}\n+\n+/* Return true if T is a gimple invariant address.  */\n+\n+bool\n+is_gimple_invariant_address (const_tree t)\n+{\n+  const_tree op;\n+\n+  if (TREE_CODE (t) != ADDR_EXPR)\n+    return false;\n+\n+  op = strip_invariant_refs (TREE_OPERAND (t, 0));\n+\n+  return op && (CONSTANT_CLASS_P (op) || decl_address_invariant_p (op));\n+}\n+\n+/* Return true if T is a gimple invariant address at IPA level\n+   (so addresses of variables on stack are not allowed).  */\n+\n+bool\n+is_gimple_ip_invariant_address (const_tree t)\n+{\n+  const_tree op;\n+\n+  if (TREE_CODE (t) != ADDR_EXPR)\n+    return false;\n+\n+  op = strip_invariant_refs (TREE_OPERAND (t, 0));\n+\n+  return op && (CONSTANT_CLASS_P (op) || decl_address_ip_invariant_p (op));\n }\n \n /* Return true if T is a GIMPLE minimal invariant.  It's a restricted\n@@ -2778,6 +2804,18 @@ is_gimple_min_invariant (const_tree t)\n   return is_gimple_constant (t);\n }\n \n+/* Return true if T is a GIMPLE interprocedural invariant.  It's a restricted\n+   form of gimple minimal invariant.  */\n+\n+bool\n+is_gimple_ip_invariant (const_tree t)\n+{\n+  if (TREE_CODE (t) == ADDR_EXPR)\n+    return is_gimple_ip_invariant_address (t);\n+\n+  return is_gimple_constant (t);\n+}\n+\n /* Return true if T looks like a valid GIMPLE statement.  */\n \n bool"}, {"sha": "ebb8eebc1f2d9bcad058152647aeba4b77efff1f", "filename": "gcc/gimple.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -872,10 +872,15 @@ extern bool is_gimple_lvalue (tree);\n bool is_gimple_address (const_tree);\n /* Returns true iff T is a GIMPLE invariant address.  */\n bool is_gimple_invariant_address (const_tree);\n+/* Returns true iff T is a GIMPLE invariant address at interprocedural\n+   level.  */\n+bool is_gimple_ip_invariant_address (const_tree);\n /* Returns true iff T is a valid GIMPLE constant.  */\n bool is_gimple_constant (const_tree);\n /* Returns true iff T is a GIMPLE restricted function invariant.  */\n extern bool is_gimple_min_invariant (const_tree);\n+/* Returns true iff T is a GIMPLE restricted interprecodural invariant.  */\n+extern bool is_gimple_ip_invariant (const_tree);\n /* Returns true iff T is a GIMPLE rvalue.  */\n extern bool is_gimple_val (tree);\n /* Returns true iff T is a GIMPLE asm statement input.  */"}, {"sha": "868a57caec34768419e621a4a6575eab3d3d1bf1", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 14, "deletions": 39, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -207,7 +207,7 @@ ipcp_set_node_scale (struct cgraph_node *node, gcov_type count)\n static inline bool\n ipcp_lat_is_const (struct ipcp_lattice *lat)\n {\n-  if (lat->type == IPA_CONST_VALUE || lat->type == IPA_CONST_VALUE_REF)\n+  if (lat->type == IPA_CONST_VALUE)\n     return true;\n   else\n     return false;\n@@ -218,11 +218,7 @@ ipcp_lat_is_const (struct ipcp_lattice *lat)\n static inline bool\n ipcp_lat_is_insertable (struct ipcp_lattice *lat)\n {\n-  if ((lat->type == IPA_CONST_VALUE || lat->type == IPA_CONST_VALUE_REF)\n-      && !POINTER_TYPE_P (TREE_TYPE (lat->constant)))\n-    return true;\n-  else\n-    return false;\n+  return lat->type == IPA_CONST_VALUE;\n }\n \n /* Return true if LAT1 and LAT2 are equal.  */\n@@ -294,11 +290,6 @@ ipcp_lattice_from_jfunc (struct ipa_node_params *info, struct ipcp_lattice *lat,\n       lat->type = IPA_CONST_VALUE;\n       lat->constant = jfunc->value.constant;\n     }\n-  else if (jfunc->type == IPA_CONST_REF)\n-    {\n-      lat->type = IPA_CONST_VALUE_REF;\n-      lat->constant = jfunc->value.constant;\n-    }\n   else if (jfunc->type == IPA_PASS_THROUGH)\n     {\n       struct ipcp_lattice *caller_lat;\n@@ -349,7 +340,7 @@ ipcp_print_all_lattices (FILE * f)\n \t  struct ipcp_lattice *lat = ipcp_get_ith_lattice (info, i);\n \n \t  fprintf (f, \" param [%d]: \", i);\n-\t  if (lat->type == IPA_CONST_VALUE || lat->type == IPA_CONST_VALUE_REF)\n+\t  if (lat->type == IPA_CONST_VALUE)\n \t    {\n \t      fprintf (f, \"type is CONST \");\n \t      print_generic_expr (f, lat->constant, 0);\n@@ -375,17 +366,7 @@ ipcp_initialize_node_lattices (struct cgraph_node *node)\n   info->ipcp_lattices = XCNEWVEC (struct ipcp_lattice,\n \t\t\t\t  ipa_get_param_count (info));\n   for (i = 0; i < ipa_get_param_count (info) ; i++)\n-    {\n-      tree parm_tree = ipa_get_ith_param (info, i);\n-      struct ipcp_lattice *lat = ipcp_get_ith_lattice (info, i);\n-\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (parm_tree))\n-\t  || SCALAR_FLOAT_TYPE_P (TREE_TYPE (parm_tree))\n-\t  || POINTER_TYPE_P (TREE_TYPE (parm_tree)))\n-\tlat->type = IPA_TOP;\n-      else\n-\tlat->type = IPA_BOTTOM;\n-    }\n+    ipcp_get_ith_lattice (info, i)->type = IPA_TOP;\n }\n \n /* Create a new assignment statement and make it the first statement in the\n@@ -412,14 +393,6 @@ build_const_val (struct ipcp_lattice *lat, tree tree_type)\n   gcc_assert (ipcp_lat_is_const (lat));\n   val = lat->constant;\n \n-  /* compute_jump_functions inserts FUNCTION_DECL as value of parameter\n-     when address of function is taken.  It would make more sense to pass\n-     whole ADDR_EXPR, but for now compensate here.  */\n-  if ((lat->type == IPA_CONST_VALUE\n-        && TREE_CODE (val) == FUNCTION_DECL)\n-      || lat->type == IPA_CONST_VALUE_REF)\n-    return build_fold_addr_expr_with_type (val, tree_type);\n-\n   if (!useless_type_conversion_p (tree_type, TREE_TYPE (val)))\n     {\n       if (fold_convertible_p (tree_type, val))\n@@ -789,7 +762,8 @@ ipcp_create_replace_map (struct function *func, tree parm_tree,\n   tree const_val;\n \n   replace_map = XCNEW (struct ipa_replace_map);\n-  if (is_gimple_reg (parm_tree) && gimple_default_def (func, parm_tree)\n+  if (is_gimple_reg (parm_tree)\n+      && gimple_default_def (func, parm_tree)\n       && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_default_def (func,\n \t\t\t\t\t\t\t\t parm_tree)))\n     {\n@@ -829,8 +803,7 @@ ipcp_need_redirect_p (struct cgraph_edge *cs)\n       if (ipcp_lat_is_const (lat))\n \t{\n \t  jump_func = ipa_get_ith_jump_func (IPA_EDGE_REF (cs), i);\n-\t  if (jump_func->type != IPA_CONST && jump_func->type != IPA_CONST_REF\n-\t      && jump_func->type != IPA_CONST_MEMBER_PTR)\n+\t  if (jump_func->type != IPA_CONST)\n \t    return true;\n \t}\n     }\n@@ -949,7 +922,11 @@ ipcp_insert_stage (void)\n       for (i = 0; i < count; i++)\n \t{\n \t  struct ipcp_lattice *lat = ipcp_get_ith_lattice (info, i);\n-\t  if (ipcp_lat_is_insertable (lat))\n+\t  tree parm_tree = ipa_get_ith_param (info, i);\n+\t  if (ipcp_lat_is_insertable (lat)\n+\t      /* Do not count obviously unused arguments.  */\n+\t      && (!is_gimple_reg (parm_tree)\n+\t\t  || gimple_default_def (DECL_STRUCT_FUNCTION (node->decl), parm_tree)))\n \t    const_param++;\n \t}\n       if (const_param == 0)\n@@ -958,8 +935,7 @@ ipcp_insert_stage (void)\n       for (i = 0; i < count; i++)\n \t{\n \t  struct ipcp_lattice *lat = ipcp_get_ith_lattice (info, i);\n-\t  if (lat->type == IPA_CONST_VALUE\n-\t      && !POINTER_TYPE_P (TREE_TYPE (lat->constant)))\n+\t  if (lat->type == IPA_CONST_VALUE)\n \t    {\n \t      parm_tree = ipa_get_ith_param (info, i);\n \t      replace_param =\n@@ -999,8 +975,7 @@ ipcp_insert_stage (void)\n \t      if (ipcp_lat_is_insertable (lat))\n \t\t{\n \t\t  parm_tree = ipa_get_ith_param (info, i);\n-\t\t  if (lat->type != IPA_CONST_VALUE_REF\n-\t\t      && !is_gimple_reg (parm_tree))\n+\t\t  if (!is_gimple_reg (parm_tree))\n \t\t    ipcp_propagate_one_const (node1, i, lat);\n \t\t}\n \t    }"}, {"sha": "506a9400e151e26af7260855756c7b496a962c4b", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -273,7 +273,7 @@ ipa_print_node_jump_functions (FILE *f, struct cgraph_node *node)\n \t  fprintf (f, \"  param %d: \", i);\n \t  if (type == IPA_UNKNOWN)\n \t    fprintf (f, \"UNKNOWN\\n\");\n-\t  else if (type == IPA_CONST || type == IPA_CONST_REF)\n+\t  else if (type == IPA_CONST)\n  \t    {\n \t      tree val = jump_func->value.constant;\n \t      fprintf (f, \"CONST: \");\n@@ -327,33 +327,11 @@ compute_scalar_jump_functions (struct ipa_node_params *info,\n     {\n       arg = gimple_call_arg (call, num);\n \n-      if (TREE_CODE (arg) == INTEGER_CST\n-\t  || TREE_CODE (arg) == REAL_CST\n-\t  || TREE_CODE (arg) == FIXED_CST)\n+      if (is_gimple_ip_invariant (arg))\n \t{\n \t  functions[num].type = IPA_CONST;\n \t  functions[num].value.constant = arg;\n \t}\n-      else if (TREE_CODE (arg) == ADDR_EXPR)\n-\t{\n-\t  if (TREE_CODE (TREE_OPERAND (arg, 0)) == FUNCTION_DECL)\n-\t    {\n-\t      functions[num].type = IPA_CONST;\n-\t      functions[num].value.constant = TREE_OPERAND (arg, 0);\n-\t    }\n-\t  else if (TREE_CODE (TREE_OPERAND (arg, 0)) == CONST_DECL)\n-\t    {\n-\t      tree cst_decl = TREE_OPERAND (arg, 0);\n-\n-\t      if (TREE_CODE (DECL_INITIAL (cst_decl)) == INTEGER_CST\n-\t\t  || TREE_CODE (DECL_INITIAL (cst_decl)) == REAL_CST\n-\t\t  || TREE_CODE (DECL_INITIAL (cst_decl)) == FIXED_CST)\n-\t\t{\n-\t\t  functions[num].type = IPA_CONST_REF;\n-\t\t  functions[num].value.constant = cst_decl;\n-\t\t}\n-\t    }\n- \t}\n       else if ((TREE_CODE (arg) == SSA_NAME) && SSA_NAME_IS_DEFAULT_DEF (arg))\n \t{\n \t  int index = ipa_get_param_decl_index (info, SSA_NAME_VAR (arg));\n@@ -496,7 +474,7 @@ determine_cst_member_ptr (gimple call, tree arg, tree method_field,\n \t      method = TREE_OPERAND (rhs, 0);\n \t      if (delta)\n \t\t{\n-\t\t  fill_member_ptr_cst_jump_function (jfunc, method, delta);\n+\t\t  fill_member_ptr_cst_jump_function (jfunc, rhs, delta);\n \t\t  return;\n \t\t}\n \t    }\n@@ -511,7 +489,7 @@ determine_cst_member_ptr (gimple call, tree arg, tree method_field,\n \t      delta = rhs;\n \t      if (method)\n \t\t{\n-\t\t  fill_member_ptr_cst_jump_function (jfunc, method, delta);\n+\t\t  fill_member_ptr_cst_jump_function (jfunc, rhs, delta);\n \t\t  return;\n \t\t}\n \t    }\n@@ -952,6 +930,10 @@ update_call_notes_after_inlining (struct cgraph_edge *cs,\n \t  else\n \t    decl = jfunc->value.constant;\n \n+\t  if (TREE_CODE (decl) != ADDR_EXPR)\n+\t    continue;\n+\t  decl = TREE_OPERAND (decl, 0);\n+\n \t  if (TREE_CODE (decl) != FUNCTION_DECL)\n \t    continue;\n \t  callee = cgraph_node (decl);"}, {"sha": "967825e21f8de391dad738429d127d3fa755b4fa", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -32,14 +32,12 @@ along with GCC; see the file COPYING3.  If not see\n    Formal - the caller's formal parameter is passed as an actual argument.\n    Constant - a constant is passed as an actual argument.\n    Unknown - neither of the above.\n-   Integer and real constants are represented as IPA_CONST and Fortran\n-   constants are represented as IPA_CONST_REF.  Finally, IPA_CONST_MEMBER_PTR\n-   stands for C++ member pointers constants.  */\n+   Integer and real constants are represented as IPA_CONST.\n+   Finally, IPA_CONST_MEMBER_PTR stands for C++ member pointers constants.  */\n enum jump_func_type\n {\n   IPA_UNKNOWN = 0,     /* newly allocated and zeroed jump functions default */\n   IPA_CONST,\n-  IPA_CONST_REF,\n   IPA_CONST_MEMBER_PTR,\n   IPA_PASS_THROUGH\n };\n@@ -52,13 +50,11 @@ enum jump_func_type\n    IPA_CONST_VALUE - simple scalar constant,\n    Cval of formal f will have a constant value if all callsites to this\n    function have the same constant value passed to f.\n-   Integer and real constants are represented as IPA_CONST and Fortran\n-   constants are represented as IPA_CONST_REF.  */\n+   Integer and real constants are represented as IPA_CONST.  */\n enum ipa_lattice_type\n {\n   IPA_BOTTOM,\n   IPA_CONST_VALUE,\n-  IPA_CONST_VALUE_REF,\n   IPA_TOP\n };\n "}, {"sha": "ab994379f1e5a72495d026ee98b5e9b999fa108f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -4214,8 +4214,18 @@ tree_function_versioning (tree old_decl, tree new_decl, varray_type tree_map,\n \treplace_info\n \t  = (struct ipa_replace_map *) VARRAY_GENERIC_PTR (tree_map, i);\n \tif (replace_info->replace_p)\n-\t  insert_decl_map (&id, replace_info->old_tree,\n-\t\t\t   replace_info->new_tree);\n+\t  {\n+\t    if (TREE_CODE (replace_info->new_tree) == ADDR_EXPR)\n+\t      {\n+\t\ttree op = TREE_OPERAND (replace_info->new_tree, 0);\n+\t\twhile (handled_component_p (op))\n+\t\t  op = TREE_OPERAND (op, 0);\n+\t\tif (TREE_CODE (op) == VAR_DECL)\n+\t\t  add_referenced_var (op);\n+\t      }\n+\t    insert_decl_map (&id, replace_info->old_tree,\n+\t\t\t     replace_info->new_tree);\n+\t  }\n       }\n   \n   DECL_INITIAL (new_decl) = remap_blocks (DECL_INITIAL (id.src_fn), &id);"}, {"sha": "912d77fd41043431e77ff351ad838bb11db94369", "filename": "gcc/tree.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -2172,6 +2172,40 @@ decl_address_invariant_p (const_tree op)\n   return false;\n }\n \n+/* Return whether OP is a DECL whose address is interprocedural-invariant.  */\n+\n+bool\n+decl_address_ip_invariant_p (const_tree op)\n+{\n+  /* The conditions below are slightly less strict than the one in\n+     staticp.  */\n+\n+  switch (TREE_CODE (op))\n+    {\n+    case LABEL_DECL:\n+    case FUNCTION_DECL:\n+    case STRING_CST:\n+      return true;\n+\n+    case VAR_DECL:\n+      if (((TREE_STATIC (op) || DECL_EXTERNAL (op))\n+           && !DECL_DLLIMPORT_P (op))\n+          || DECL_THREAD_LOCAL_P (op))\n+        return true;\n+      break;\n+\n+    case CONST_DECL:\n+      if ((TREE_STATIC (op) || DECL_EXTERNAL (op)))\n+        return true;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n \n /* Return true if T is function-invariant (internal function, does\n    not handle arithmetic; that's handled in skip_simple_arithmetic and"}, {"sha": "487dd9e5962b46d67101157594382da9eaf70a97", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc23337d06089d5662383e2f6bdea105055894/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00fc23337d06089d5662383e2f6bdea105055894", "patch": "@@ -4868,6 +4868,7 @@ extern tree strip_float_extensions (tree);\n /* In tree.c */\n extern int really_constant_p (const_tree);\n extern bool decl_address_invariant_p (const_tree);\n+extern bool decl_address_ip_invariant_p (const_tree);\n extern int int_fits_type_p (const_tree, const_tree);\n #ifndef GENERATOR_FILE\n extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);"}]}