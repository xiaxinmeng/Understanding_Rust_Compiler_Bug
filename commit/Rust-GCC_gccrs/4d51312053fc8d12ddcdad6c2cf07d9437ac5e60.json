{"sha": "4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ1MTMxMjA1M2ZjOGQxMmRkY2RhZDZjMmNmMDdkOTQzN2FjNWU2MA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-04-14T09:18:42Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-04-14T09:18:42Z"}, "message": "Use gcc/sections/elf_shared.d on Solaris 11.5 (PR d/88150)\n\n\tPR d/88150\n\t* libdruntime/gcc/sections/elf_shared.d [Solaris] (SharedELF): Set\n\tto true.\n\tImport core.sys.solaris.dlfcn, core.sys.solaris.link,\n\tcore.sys.solaris.sys.elf, core.sys.solaris.sys.link.\n\t(dummy_ref): Declare.\n\t(initSections): Initialize dummy_ref.\n\t(getDependencies): Set strtab.\n\t(handleForName): Don't dlclose handle.\n\t(findDSOInfoForAddr): Set IterateManually.\n\t(getprogname): Declare.\n\t(progname): Use it.\n\t* libdruntime/gcc/sections/package.d [Solaris]: Import\n\tgcc.sections.elf_shared instead of gcc.sections.solaris.\n\t* libdruntime/gcc/sections/solaris.d: Remove.\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Remove\n\tgcc/sections/solaris.d.\n\nFrom-SVN: r270345", "tree": {"sha": "db584c0cb9a6d3766807bedbd34e76010f5c6b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db584c0cb9a6d3766807bedbd34e76010f5c6b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77086e012541bf68f71195db9e4c7ef41bd2fe22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77086e012541bf68f71195db9e4c7ef41bd2fe22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77086e012541bf68f71195db9e4c7ef41bd2fe22"}], "stats": {"total": 182, "additions": 46, "deletions": 136}, "files": [{"sha": "b70288b4064baaf4104f8fe8e41f6d642f316334", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "patch": "@@ -1,3 +1,24 @@\n+2019-04-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR d/88150\n+\t* libdruntime/gcc/sections/elf_shared.d [Solaris] (SharedELF): Set\n+\tto true.\n+\tImport core.sys.solaris.dlfcn, core.sys.solaris.link,\n+\tcore.sys.solaris.sys.elf, core.sys.solaris.sys.link.\n+\t(dummy_ref): Declare.\n+\t(initSections): Initialize dummy_ref.\n+\t(getDependencies): Set strtab.\n+\t(handleForName): Don't dlclose handle.\n+\t(findDSOInfoForAddr): Set IterateManually.\n+\t(getprogname): Declare.\n+\t(progname): Use it.\n+\t* libdruntime/gcc/sections/package.d [Solaris]: Import\n+\tgcc.sections.elf_shared instead of gcc.sections.solaris.\n+\t* libdruntime/gcc/sections/solaris.d: Remove.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Remove\n+\tgcc/sections/solaris.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\n 2019-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/Makefile.am (DRUNTIME_CSOURCES): Remove bss_sections.c."}, {"sha": "8cdea52eb5c0d4198041b5de307c9ceb72c6d279", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "patch": "@@ -141,7 +141,7 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/sections/android.d gcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/solaris.d gcc/sections/win32.d \\\n+\tgcc/sections/package.d gcc/sections/win32.d \\\n \tgcc/sections/win64.d gcc/unwind/arm.d gcc/unwind/arm_common.d \\\n \tgcc/unwind/c6x.d gcc/unwind/generic.d gcc/unwind/package.d \\\n \tgcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d \\"}, {"sha": "efb1b952cf8e3a1d363b3235470e78579c634e0c", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "patch": "@@ -196,8 +196,8 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \tcore/vararg.lo gcc/attribute.lo gcc/backtrace.lo \\\n \tgcc/builtins.lo gcc/deh.lo gcc/sections/android.lo \\\n \tgcc/sections/elf_shared.lo gcc/sections/osx.lo \\\n-\tgcc/sections/package.lo gcc/sections/solaris.lo \\\n-\tgcc/sections/win32.lo gcc/sections/win64.lo gcc/unwind/arm.lo \\\n+\tgcc/sections/package.lo gcc/sections/win32.lo \\\n+\tgcc/sections/win64.lo gcc/unwind/arm.lo \\\n \tgcc/unwind/arm_common.lo gcc/unwind/c6x.lo \\\n \tgcc/unwind/generic.lo gcc/unwind/package.lo gcc/unwind/pe.lo \\\n \tobject.lo rt/aApply.lo rt/aApplyR.lo rt/aaA.lo rt/adi.lo \\\n@@ -737,7 +737,7 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/sections/android.d gcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/solaris.d gcc/sections/win32.d \\\n+\tgcc/sections/package.d gcc/sections/win32.d \\\n \tgcc/sections/win64.d gcc/unwind/arm.d gcc/unwind/arm_common.d \\\n \tgcc/unwind/c6x.d gcc/unwind/generic.d gcc/unwind/package.d \\\n \tgcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d \\\n@@ -1090,7 +1090,6 @@ gcc/sections/android.lo: gcc/sections/$(am__dirstamp)\n gcc/sections/elf_shared.lo: gcc/sections/$(am__dirstamp)\n gcc/sections/osx.lo: gcc/sections/$(am__dirstamp)\n gcc/sections/package.lo: gcc/sections/$(am__dirstamp)\n-gcc/sections/solaris.lo: gcc/sections/$(am__dirstamp)\n gcc/sections/win32.lo: gcc/sections/$(am__dirstamp)\n gcc/sections/win64.lo: gcc/sections/$(am__dirstamp)\n gcc/unwind/$(am__dirstamp):"}, {"sha": "40857ce28ede47993bbdba4d0dcc3a1afa689f64", "filename": "libphobos/libdruntime/gcc/sections/elf_shared.d", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d?ref=4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "patch": "@@ -28,6 +28,7 @@ else version (FreeBSD) enum SharedELF = true;\n else version (NetBSD) enum SharedELF = true;\n else version (DragonFlyBSD) enum SharedELF = true;\n else version (CRuntime_UClibc) enum SharedELF = true;\n+else version (Solaris) enum SharedELF = true;\n else enum SharedELF = false;\n static if (SharedELF):\n \n@@ -61,6 +62,13 @@ else version (DragonFlyBSD)\n     import core.sys.dragonflybsd.sys.elf;\n     import core.sys.dragonflybsd.sys.link_elf;\n }\n+else version (Solaris)\n+{\n+    import core.sys.solaris.dlfcn;\n+    import core.sys.solaris.link;\n+    import core.sys.solaris.sys.elf;\n+    import core.sys.solaris.sys.link;\n+}\n else\n {\n     static assert(0, \"unimplemented\");\n@@ -163,6 +171,7 @@ __gshared bool _isRuntimeInitialized;\n version (FreeBSD) private __gshared void* dummy_ref;\n version (DragonFlyBSD) private __gshared void* dummy_ref;\n version (NetBSD) private __gshared void* dummy_ref;\n+version (Solaris) private __gshared void* dummy_ref;\n \n /****\n  * Gets called on program startup just before GC is initialized.\n@@ -174,6 +183,7 @@ void initSections() nothrow @nogc\n     version (FreeBSD) dummy_ref = &_d_dso_registry;\n     version (DragonFlyBSD) dummy_ref = &_d_dso_registry;\n     version (NetBSD) dummy_ref = &_d_dso_registry;\n+    version (Solaris) dummy_ref = &_d_dso_registry;\n }\n \n \n@@ -719,6 +729,8 @@ version (Shared)\n                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n                 else version (DragonFlyBSD)\n                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n+                else version (Solaris)\n+                    strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate\n                 else\n                     static assert(0, \"unimplemented\");\n                 break;\n@@ -745,7 +757,8 @@ version (Shared)\n     void* handleForName(const char* name)\n     {\n         auto handle = .dlopen(name, RTLD_NOLOAD | RTLD_LAZY);\n-        if (handle !is null) .dlclose(handle); // drop reference count\n+        version (Solaris) { }\n+        else if (handle !is null) .dlclose(handle); // drop reference count\n         return handle;\n     }\n }\n@@ -799,9 +812,10 @@ void scanSegments(in ref dl_phdr_info info, DSO* pdso) nothrow @nogc\n  */\n bool findDSOInfoForAddr(in void* addr, dl_phdr_info* result=null) nothrow @nogc\n {\n-    version (linux)       enum IterateManually = true;\n-    else version (NetBSD) enum IterateManually = true;\n-    else                  enum IterateManually = false;\n+    version (linux)        enum IterateManually = true;\n+    else version (NetBSD)  enum IterateManually = true;\n+    else version (Solaris) enum IterateManually = true;\n+    else                   enum IterateManually = false;\n \n     static if (IterateManually)\n     {\n@@ -864,13 +878,15 @@ version (linux) import core.sys.linux.errno : program_invocation_name;\n version (FreeBSD) extern(C) const(char)* getprogname() nothrow @nogc;\n version (DragonFlyBSD) extern(C) const(char)* getprogname() nothrow @nogc;\n version (NetBSD) extern(C) const(char)* getprogname() nothrow @nogc;\n+version (Solaris) extern(C) const(char)* getprogname() nothrow @nogc;\n \n @property const(char)* progname() nothrow @nogc\n {\n     version (linux) return program_invocation_name;\n     version (FreeBSD) return getprogname();\n     version (DragonFlyBSD) return getprogname();\n     version (NetBSD) return getprogname();\n+    version (Solaris) return getprogname();\n }\n \n const(char)[] dsoName(const char* dlpi_name) nothrow @nogc"}, {"sha": "02c9752ef528a93f5ba030109c6ddc00fe3a5e04", "filename": "libphobos/libdruntime/gcc/sections/package.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d51312053fc8d12ddcdad6c2cf07d9437ac5e60/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fpackage.d?ref=4d51312053fc8d12ddcdad6c2cf07d9437ac5e60", "patch": "@@ -35,7 +35,7 @@ else version (NetBSD)\n else version (DragonFlyBSD)\n     public import gcc.sections.elf_shared;\n else version (Solaris)\n-    public import gcc.sections.solaris;\n+    public import gcc.sections.elf_shared;\n else version (OSX)\n     public import gcc.sections.osx;\n else version (CRuntime_DigitalMars)"}, {"sha": "e66325b7a2c89fdb38f2e8bf3db5e743aa20ff24", "filename": "libphobos/libdruntime/gcc/sections/solaris.d", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77086e012541bf68f71195db9e4c7ef41bd2fe22/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fsolaris.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77086e012541bf68f71195db9e4c7ef41bd2fe22/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fsolaris.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Fsolaris.d?ref=77086e012541bf68f71195db9e4c7ef41bd2fe22", "patch": "@@ -1,126 +0,0 @@\n-// Solaris-specific support for sections.\n-// Copyright (C) 2019 Free Software Foundation, Inc.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-module gcc.sections.solaris;\n-\n-version (Solaris):\n-\n-// debug = PRINTF;\n-debug(PRINTF) import core.stdc.stdio;\n-import core.stdc.stdlib : malloc, free;\n-import rt.deh, rt.minfo;\n-\n-struct SectionGroup\n-{\n-    static int opApply(scope int delegate(ref SectionGroup) dg)\n-    {\n-        return dg(_sections);\n-    }\n-\n-    static int opApplyReverse(scope int delegate(ref SectionGroup) dg)\n-    {\n-        return dg(_sections);\n-    }\n-\n-    @property immutable(ModuleInfo*)[] modules() const nothrow @nogc\n-    {\n-        return _moduleGroup.modules;\n-    }\n-\n-    @property ref inout(ModuleGroup) moduleGroup() inout nothrow @nogc\n-    {\n-        return _moduleGroup;\n-    }\n-\n-    @property immutable(FuncTable)[] ehTables() const nothrow @nogc\n-    {\n-        auto pbeg = cast(immutable(FuncTable)*)&__start_deh;\n-        auto pend = cast(immutable(FuncTable)*)&__stop_deh;\n-        return pbeg[0 .. pend - pbeg];\n-    }\n-\n-    @property inout(void[])[] gcRanges() inout nothrow @nogc\n-    {\n-        return _gcRanges[];\n-    }\n-\n-private:\n-    ModuleGroup _moduleGroup;\n-    void[][1] _gcRanges;\n-}\n-\n-void initSections() nothrow @nogc\n-{\n-    auto mbeg = cast(immutable ModuleInfo**)&__start_minfo;\n-    auto mend = cast(immutable ModuleInfo**)&__stop_minfo;\n-    _sections.moduleGroup = ModuleGroup(mbeg[0 .. mend - mbeg]);\n-\n-    auto pbeg = cast(void*)&__dso_handle;\n-    auto pend = cast(void*)&_end;\n-    _sections._gcRanges[0] = pbeg[0 .. pend - pbeg];\n-}\n-\n-void finiSections() nothrow @nogc\n-{\n-}\n-\n-void[] initTLSRanges() nothrow @nogc\n-{\n-    auto pbeg = cast(void*)&_tlsstart;\n-    auto pend = cast(void*)&_tlsend;\n-    return pbeg[0 .. pend - pbeg];\n-}\n-\n-void finiTLSRanges(void[] rng) nothrow @nogc\n-{\n-}\n-\n-void scanTLSRanges(void[] rng, scope void delegate(void* pbeg, void* pend) nothrow dg) nothrow\n-{\n-    dg(rng.ptr, rng.ptr + rng.length);\n-}\n-\n-private:\n-\n-__gshared SectionGroup _sections;\n-\n-extern(C)\n-{\n-    /* Symbols created by the compiler/linker and inserted into the\n-     * object file that 'bracket' sections.\n-     */\n-    extern __gshared\n-    {\n-        void* __start_deh;\n-        void* __stop_deh;\n-        void* __start_minfo;\n-        void* __stop_minfo;\n-        int __dso_handle;\n-        int _end;\n-    }\n-\n-    extern\n-    {\n-        void* _tlsstart;\n-        void* _tlsend;\n-    }\n-}"}]}