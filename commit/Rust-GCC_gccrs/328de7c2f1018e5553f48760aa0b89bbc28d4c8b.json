{"sha": "328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4ZGU3YzJmMTAxOGU1NTUzZjQ4NzYwYWEwYjg5YmJjMjhkNGM4Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-01T04:55:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-01T04:55:20Z"}, "message": "re PR c++/8227 (g++ 3.3: ctors not called in static array initialization)\n\n\tPR c++/8227\n\t* decl.c (layout_var_decl): Deal gracefully with erroneous types.\n\t(check_initializer): Validate the type of the initialized\n\tvariable, even if the initializer is absent.\n\t* typeck.c (cp_type_quals): Deal gracefully with erroneous types.\n\n\tPR c++/8227\n\t* g++.dg/template/ctor2.C: New test.\n\nFrom-SVN: r59672", "tree": {"sha": "b245d8c933469c93a0bd802e68f291b65025b67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b245d8c933469c93a0bd802e68f291b65025b67f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/comments", "author": null, "committer": null, "parents": [{"sha": "f6318a2baf8e87c2fd7f02308b3c2d05569684a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6318a2baf8e87c2fd7f02308b3c2d05569684a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6318a2baf8e87c2fd7f02308b3c2d05569684a2"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "aee593f470d4ee7f21485e900712bdec107a9569", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -1,11 +1,15 @@\n 2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/8227\n+\t* decl.c (layout_var_decl): Deal gracefully with erroneous types.\n+\t(check_initializer): Validate the type of the initialized\n+\tvariable, even if the initializer is absent.\n+\t* typeck.c (cp_type_quals): Deal gracefully with erroneous types.\n+\t\n \tPR c++/8214\n \t* typeck.c (convert_for_assignment): Do not use\n \tdecl_constant_value on the operand.\n \n-2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n-\n \tPR c++/8511\n \t* pt.c (instantiate_decl): Handle template friends defined outside\n \tof the class correctly."}, {"sha": "dbb96eb6a28039334d0428d1ca3c3ea3fb2fcc91", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -7631,6 +7631,7 @@ layout_var_decl (decl)\n   if (!DECL_EXTERNAL (decl))\n     complete_type (type);\n   if (!DECL_SIZE (decl) \n+      && TREE_TYPE (decl) != error_mark_node\n       && (COMPLETE_TYPE_P (type)\n \t  || (TREE_CODE (type) == ARRAY_TYPE \n \t      && !TYPE_DOMAIN (type)\n@@ -7974,33 +7975,30 @@ check_initializer (tree decl, tree init, int flags)\n      the static initialization -- if any -- of DECL.  */\n   DECL_INITIAL (decl) = NULL_TREE;\n \n-  /* Check the initializer.  */\n-  if (init)\n-    {\n-      /* Things that are going to be initialized need to have complete\n-\t type.  */\n-      TREE_TYPE (decl) = type = complete_type (TREE_TYPE (decl));\n+  /* Things that are going to be initialized need to have complete\n+     type.  */\n+  TREE_TYPE (decl) = type = complete_type (TREE_TYPE (decl));\n \n-      if (type == error_mark_node)\n-\t/* We will have already complained.  */\n-\tinit = NULL_TREE;\n-      else if (COMPLETE_TYPE_P (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n-\t{\n-\t  error (\"variable-sized object `%D' may not be initialized\", decl);\n-\t  init = NULL_TREE;\n-\t}\n-      else if (TREE_CODE (type) == ARRAY_TYPE\n-\t       && !COMPLETE_TYPE_P (complete_type (TREE_TYPE (type))))\n-\t{\n-\t  error (\"elements of array `%#D' have incomplete type\", decl);\n-\t  init = NULL_TREE;\n-\t}\n-      else if (TREE_CODE (type) != ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n-\t{\n-\t  error (\"`%D' has incomplete type\", decl);\n-\t  TREE_TYPE (decl) = error_mark_node;\n-\t  init = NULL_TREE;\n-\t}\n+  if (type == error_mark_node)\n+    /* We will have already complained.  */\n+    init = NULL_TREE;\n+  else if (init && COMPLETE_TYPE_P (type) \n+\t   && !TREE_CONSTANT (TYPE_SIZE (type)))\n+    {\n+      error (\"variable-sized object `%D' may not be initialized\", decl);\n+      init = NULL_TREE;\n+    }\n+  else if (TREE_CODE (type) == ARRAY_TYPE\n+\t   && !COMPLETE_TYPE_P (complete_type (TREE_TYPE (type))))\n+    {\n+      error (\"elements of array `%#D' have incomplete type\", decl);\n+      init = NULL_TREE;\n+    }\n+  else if (TREE_CODE (type) != ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n+    {\n+      error (\"`%D' has incomplete type\", decl);\n+      TREE_TYPE (decl) = error_mark_node;\n+      init = NULL_TREE;\n     }\n \n   if (TREE_CODE (decl) == CONST_DECL)"}, {"sha": "77b2fd95056bf1e21a2ce64b6e0b7e5440140e67", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -10063,7 +10063,7 @@ instantiate_decl (d, defer_ok)\n \n   code_pattern = DECL_TEMPLATE_RESULT (td);\n \n-  /* In the case of a friend temlpate whose definition is provided\n+  /* In the case of a friend template whose definition is provided\n      outside the class, we may have too many arguments.  Drop the ones\n      we don't need.  */\n   args = get_innermost_template_args (gen_args,"}, {"sha": "85eef41c2e0e8799daf0430c28af603a6d8ba099", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -6473,6 +6473,8 @@ cp_type_quals (type)\n      tree type;\n {\n   type = strip_array_types (type);\n+  if (type == error_mark_node)\n+    return TYPE_UNQUALIFIED;\n   return TYPE_QUALS (type);\n }\n "}, {"sha": "5574e17a54966c94c43308c5467eb312c9ef9c10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -1,10 +1,11 @@\n 2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/8227\n+\t* g++.dg/template/ctor2.C: New test.\n+\n \tPR c++/8214\n \t* g++.dg/init/string1.C: New test.\n \n-2002-11-30  Mark Mitchell  <mark@codesourcery.com>\n-\n \tPR c++/8511\n \t* g++.dg/template/friend8.C: New test.\n "}, {"sha": "1c8d8a65d9b1740a4154fadedc8e6625e8616762", "filename": "gcc/testsuite/g++.dg/template/ctor2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328de7c2f1018e5553f48760aa0b89bbc28d4c8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor2.C?ref=328de7c2f1018e5553f48760aa0b89bbc28d4c8b", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+\n+int i;\n+\n+template <class T>\n+struct S\n+{\n+  S () { i = 1; }\n+};\n+\n+static S<int> s[1];\n+\n+int main ()\n+{\n+  if (!i)\n+    return 1;\n+}\n+"}]}