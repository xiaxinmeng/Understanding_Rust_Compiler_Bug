{"sha": "c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5YTBhMWQxOTZmNTEyNGFiYmJkNzA4OWQyYzgyYWEwNTUzZWQ4Nw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-07-23T14:31:20Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-07-23T14:31:20Z"}, "message": "builtins.def (BUILT_IN_ARGS_INFO): Remove.\n\n\t* builtins.def (BUILT_IN_ARGS_INFO): Remove.\n\t* ipa-pure-const.c (special_builtlin_state): Remove\n\tBUILT_IN_ARGS_INFO case.\n\t* tree-stdarg.c (execute_optimize_stdarg): Likewise.\n\t* builtins.c (expand_builtin): Likewise.\n\t(expand_builtin_args_info): Remove.\n\t* doc/tm.texi (__builtin_args_info): Remove.\n\t(__builtin_next_arg): Adjust to not refer to __builtin_args_info.\n\t* doc/tm.text.in: Likewise.\n\nFrom-SVN: r162463", "tree": {"sha": "18ad8f874a533c1ea135ba85d29845cb55118573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18ad8f874a533c1ea135ba85d29845cb55118573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/comments", "author": null, "committer": null, "parents": [{"sha": "3d03ead0b8273efde57f6194617b35111a84b05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d03ead0b8273efde57f6194617b35111a84b05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d03ead0b8273efde57f6194617b35111a84b05d"}], "stats": {"total": 105, "additions": 14, "deletions": 91}, "files": [{"sha": "4873ccdbbd850d6da61d3273c8f4c6cd2ae55bc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -1,3 +1,15 @@\n+2010-07-23  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* builtins.def (BUILT_IN_ARGS_INFO): Remove.\n+\t* ipa-pure-const.c (special_builtlin_state): Remove\n+\tBUILT_IN_ARGS_INFO case.\n+\t* tree-stdarg.c (execute_optimize_stdarg): Likewise.\n+\t* builtins.c (expand_builtin): Likewise.\n+\t(expand_builtin_args_info): Remove.\n+\t* doc/tm.texi (__builtin_args_info): Remove.\n+\t(__builtin_next_arg): Adjust to not refer to __builtin_args_info.\n+\t* doc/tm.text.in: Likewise.\n+\n 2010-07-23  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-symtab.c (lto_symtab_merge): Use gtc_mode enum"}, {"sha": "9b6fb1033b1722b1eca06155150896c39f50d155", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -111,7 +111,6 @@ static rtx expand_builtin_sincos (tree);\n static rtx expand_builtin_cexpi (tree, rtx, rtx);\n static rtx expand_builtin_int_roundingfn (tree, rtx);\n static rtx expand_builtin_int_roundingfn_2 (tree, rtx);\n-static rtx expand_builtin_args_info (tree);\n static rtx expand_builtin_next_arg (void);\n static rtx expand_builtin_va_start (tree);\n static rtx expand_builtin_va_end (tree);\n@@ -4398,38 +4397,6 @@ expand_builtin_saveregs (void)\n   return val;\n }\n \n-/* __builtin_args_info (N) returns word N of the arg space info\n-   for the current function.  The number and meanings of words\n-   is controlled by the definition of CUMULATIVE_ARGS.  */\n-\n-static rtx\n-expand_builtin_args_info (tree exp)\n-{\n-  int nwords = sizeof (CUMULATIVE_ARGS) / sizeof (int);\n-  int *word_ptr = (int *) &crtl->args.info;\n-\n-  gcc_assert (sizeof (CUMULATIVE_ARGS) % sizeof (int) == 0);\n-\n-  if (call_expr_nargs (exp) != 0)\n-    {\n-      if (!host_integerp (CALL_EXPR_ARG (exp, 0), 0))\n-\terror (\"argument of %<__builtin_args_info%> must be constant\");\n-      else\n-\t{\n-\t  HOST_WIDE_INT wordnum = tree_low_cst (CALL_EXPR_ARG (exp, 0), 0);\n-\n-\t  if (wordnum < 0 || wordnum >= nwords)\n-\t    error (\"argument of %<__builtin_args_info%> out of range\");\n-\t  else\n-\t    return GEN_INT (word_ptr[wordnum]);\n-\t}\n-    }\n-  else\n-    error (\"missing argument in %<__builtin_args_info%>\");\n-\n-  return const0_rtx;\n-}\n-\n /* Expand a call to __builtin_next_arg.  */\n \n static rtx\n@@ -5925,9 +5892,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_SAVEREGS:\n       return expand_builtin_saveregs ();\n \n-    case BUILT_IN_ARGS_INFO:\n-      return expand_builtin_args_info (exp);\n-\n     case BUILT_IN_VA_ARG_PACK:\n       /* All valid uses of __builtin_va_arg_pack () are removed during\n \t inlining.  */"}, {"sha": "ab0d018cb280d4aa55b66ef616e5e53434e2f4c0", "filename": "gcc/builtins.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -606,7 +606,6 @@ DEF_GCC_BUILTIN        (BUILT_IN_AGGREGATE_INCOMING_ADDRESS, \"aggregate_incoming\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ALLOCA, \"alloca\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY, \"apply\", BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_NULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_ARGS_INFO, \"args_info\", BT_FN_INT_INT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_CLEAR_CACHE, \"__clear_cache\", BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LIST)"}, {"sha": "30210ecc0aeb295e48f9e6404f5a3cd7937c62ff", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -5007,33 +5007,8 @@ to use them for its own purposes.\n @c 10feb93\n @end defmac\n \n-@defmac __builtin_args_info (@var{category})\n-Use this built-in function to find the first anonymous arguments in\n-registers.\n-\n-In general, a machine may have several categories of registers used for\n-arguments, each for a particular category of data types.  (For example,\n-on some machines, floating-point registers are used for floating-point\n-arguments while other arguments are passed in the general registers.)\n-To make non-varargs functions use the proper calling convention, you\n-have defined the @code{CUMULATIVE_ARGS} data type to record how many\n-registers in each category have been used so far\n-\n-@code{__builtin_args_info} accesses the same data structure of type\n-@code{CUMULATIVE_ARGS} after the ordinary argument layout is finished\n-with it, with @var{category} specifying which word to access.  Thus, the\n-value indicates the first unused register in a given category.\n-\n-Normally, you would use @code{__builtin_args_info} in the implementation\n-of @code{va_start}, accessing each category just once and storing the\n-value in the @code{va_list} object.  This is because @code{va_list} will\n-have to update the values, and there is no way to alter the\n-values accessed by @code{__builtin_args_info}.\n-@end defmac\n-\n @defmac __builtin_next_arg (@var{lastarg})\n-This is the equivalent of @code{__builtin_args_info}, for stack\n-arguments.  It returns the address of the first anonymous stack\n+This builtin returns the address of the first anonymous stack\n argument, as type @code{void *}.  If @code{ARGS_GROW_DOWNWARD}, it\n returns the address of the location above the first anonymous stack\n argument.  Use it in @code{va_start} to initialize the pointer for"}, {"sha": "b5c75d3ec90fcd63ce5df78dba31b0560762a76b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -5007,33 +5007,8 @@ to use them for its own purposes.\n @c 10feb93\n @end defmac\n \n-@defmac __builtin_args_info (@var{category})\n-Use this built-in function to find the first anonymous arguments in\n-registers.\n-\n-In general, a machine may have several categories of registers used for\n-arguments, each for a particular category of data types.  (For example,\n-on some machines, floating-point registers are used for floating-point\n-arguments while other arguments are passed in the general registers.)\n-To make non-varargs functions use the proper calling convention, you\n-have defined the @code{CUMULATIVE_ARGS} data type to record how many\n-registers in each category have been used so far\n-\n-@code{__builtin_args_info} accesses the same data structure of type\n-@code{CUMULATIVE_ARGS} after the ordinary argument layout is finished\n-with it, with @var{category} specifying which word to access.  Thus, the\n-value indicates the first unused register in a given category.\n-\n-Normally, you would use @code{__builtin_args_info} in the implementation\n-of @code{va_start}, accessing each category just once and storing the\n-value in the @code{va_list} object.  This is because @code{va_list} will\n-have to update the values, and there is no way to alter the\n-values accessed by @code{__builtin_args_info}.\n-@end defmac\n-\n @defmac __builtin_next_arg (@var{lastarg})\n-This is the equivalent of @code{__builtin_args_info}, for stack\n-arguments.  It returns the address of the first anonymous stack\n+This builtin returns the address of the first anonymous stack\n argument, as type @code{void *}.  If @code{ARGS_GROW_DOWNWARD}, it\n returns the address of the location above the first anonymous stack\n argument.  Use it in @code{va_start} to initialize the pointer for"}, {"sha": "1ff15bf22e6078c8c00a9d3417cae183d93cf588", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -446,7 +446,6 @@ special_builtlin_state (enum pure_const_state_e *state, bool *looping,\n \tcase BUILT_IN_FRAME_ADDRESS:\n \tcase BUILT_IN_APPLY:\n \tcase BUILT_IN_APPLY_ARGS:\n-\tcase BUILT_IN_ARGS_INFO:\n \t  *looping = false;\n \t  *state = IPA_CONST;\n \t  return true;"}, {"sha": "5c9b35cd44d6d8605721cf9cdcec5916b1a235dc", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59a0a1d196f5124abbbd7089d2c82aa0553ed87/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=c59a0a1d196f5124abbbd7089d2c82aa0553ed87", "patch": "@@ -636,7 +636,6 @@ execute_optimize_stdarg (void)\n \t      break;\n \t      /* If old style builtins are used, don't optimize anything.  */\n \t    case BUILT_IN_SAVEREGS:\n-\t    case BUILT_IN_ARGS_INFO:\n \t    case BUILT_IN_NEXT_ARG:\n \t      va_list_escapes = true;\n \t      continue;"}]}