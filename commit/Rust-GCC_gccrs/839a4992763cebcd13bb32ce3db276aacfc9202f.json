{"sha": "839a4992763cebcd13bb32ce3db276aacfc9202f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5YTQ5OTI3NjNjZWJjZDEzYmIzMmNlM2RiMjc2YWFjZmM5MjAyZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-13T04:44:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-13T04:44:12Z"}, "message": "vxlib.c: Fix comment typos.\n\n\t* config/vxlib.c: Fix comment typos.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/c4x/c4x.c: Likewise.\n\t* config/c4x/c4x.md: Likewise.\n\t* config/cris/cris.h: Likewise.\n\t* config/cris/cris.md: Likewise.\n\t* config/fr30/fr30.c: Likewise.\n\t* config/fr30/fr30.h: Likewise.\n\t* config/fr30/fr30.md: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/frv/frv.md: Likewise.\n\t* config/frv/frvbegin.c: Likewise.\n\t* config/i386/athlon.md: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/i386.md: Likewise.\n\t* config/i386/sco5.h: Likewise.\n\t* config/ia64/ia64.md: Likewise.\n\t* config/ip2k/ip2k.c: Likewise.\n\t* config/ip2k/ip2k.md: Likewise.\n\t* config/m68hc11/m68hc11.h: Likewise.\n\t* config/m68k/m68k.h: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/s390/s390.md: Likewise.\n\t* config/sh/sh.h: Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\t* config/v850/v850.c: Likewise.\n\t* config/v850/v850.h: Likewise.\n\t* config/v850/v850.md: Likewise.\n\t* config/xtensa/xtensa.c: Likewise.\n\nFrom-SVN: r74596", "tree": {"sha": "d9001101e775f138ac18b4710a96538eb9e267a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9001101e775f138ac18b4710a96538eb9e267a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839a4992763cebcd13bb32ce3db276aacfc9202f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839a4992763cebcd13bb32ce3db276aacfc9202f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839a4992763cebcd13bb32ce3db276aacfc9202f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839a4992763cebcd13bb32ce3db276aacfc9202f/comments", "author": null, "committer": null, "parents": [{"sha": "da1d7781e46e20a148ec5e277fb891301616e7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1d7781e46e20a148ec5e277fb891301616e7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da1d7781e46e20a148ec5e277fb891301616e7c6"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "26d6fbbf2bc4ae7ca448c3b99a3ffff04173e4d2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -6677,7 +6677,7 @@ alpha_expand_builtin (tree exp, rtx target,\n /* These variables are used for communication between the following functions.\n    They indicate various things about the current function being compiled\n    that are used to tell what kind of prologue, epilogue and procedure\n-   descriptior to generate.  */\n+   descriptor to generate.  */\n \n /* Nonzero if we need a stack procedure.  */\n enum alpha_procedure_types {PT_NULL = 0, PT_REGISTER = 1, PT_STACK = 2};\n@@ -8829,7 +8829,7 @@ alpha_align_insns (unsigned int max_align,\n \t  int nop_count = (align - ofs) / 4;\n \t  rtx where;\n \n-\t  /* Insert nops before labels, branches, and calls to truely merge\n+\t  /* Insert nops before labels, branches, and calls to truly merge\n \t     the execution of the nops with the previous instruction group.  */\n \t  where = prev_nonnote_insn (i);\n \t  if (where)"}, {"sha": "0e8259fcb8da189a96a8c248a286fe64d048874a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -849,7 +849,7 @@ arm_override_options (void)\n     {\n       /* There's some dispute as to whether this should be 1 or 2.  However,\n \t experiments seem to show that in pathological cases a setting of\n-\t 1 degrades less severly than a setting of 2.  This could change if\n+\t 1 degrades less severely than a setting of 2.  This could change if\n \t other parts of the compiler change their behavior.  */\n       arm_constant_limit = 1;\n \n@@ -1051,7 +1051,7 @@ use_return_insn (int iscond, rtx sibling)\n \n      triggers a bug on most SA-110 based devices, such that the stack\n      pointer won't be correctly restored if the instruction takes a\n-     page fault.  We work around this problem by poping r3 along with\n+     page fault.  We work around this problem by popping r3 along with\n      the other registers, since that is never slower than executing\n      another instruction.  \n "}, {"sha": "980bb22890945efd068989fdca8d86707d69a71a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1230,7 +1230,7 @@\n    (set_attr \"type\" \"mult\")]\n )\n \n-;; Unnamed template to match long long multiply-accumlate (smlal)\n+;; Unnamed template to match long long multiply-accumulate (smlal)\n \n (define_insn \"*mulsidi3adddi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n@@ -1267,7 +1267,7 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-;; Unnamed template to match long long unsigned multiply-accumlate (umlal)\n+;; Unnamed template to match long long unsigned multiply-accumulate (umlal)\n \n (define_insn \"*umulsidi3adddi\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")"}, {"sha": "9eaa87194d216cefedb7ab16c6dc900eb329c23b", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1088,7 +1088,7 @@ c4x_expand_epilogue(void)\n \t  dont_pop_ar3 = 0;\t/* If we use ar3, we need to pop it.  */\n \t  if (size || current_function_args_size)\n \t    {\n-\t      /* If we are ommitting the frame pointer, we still have\n+\t      /* If we are omitting the frame pointer, we still have\n \t         to make space for it so the offsets are correct\n \t         unless we don't use anything on the stack at all.  */\n \t      size += 1;"}, {"sha": "e4f240fea4f45d2d4315219a692914c50d1a9ed8", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -157,7 +157,7 @@\n ;  a register satisying the 'f' constraint is used as a dst operand,\n ;  the CC gets clobbered (except for LDFcond).\n \n-;  The ! in front of the 'b' constaint says to GCC to disparage the\n+;  The ! in front of the 'b' constraint says to GCC to disparage the\n ;  use of this constraint.  The 'b' constraint applies only to the SP.\n \n ;  Note that we deal with the condition code CC like some of the RISC\n@@ -173,7 +173,7 @@\n ;  delayed branch slots.\n \n ;  Since the C[34]x has many instructions that set the CC, we pay the\n-;  price of having to explicity define which insns clobber the CC\n+;  price of having to explicitly define which insns clobber the CC\n ;  (rather than using the macro NOTICE_UPDATE_CC). \n \n ;  Note that many patterns say that the CC is clobbered when in fact\n@@ -6265,7 +6265,7 @@\n ;\n ; MULF\n ;\n-; The C3x MPYF only uses 24 bit precision while the C4x uses 32 bit precison.\n+; The C3x MPYF only uses 24-bit precision while the C4x uses 32-bit precision.\n ;\n (define_expand \"mulhf3\"\n   [(parallel [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n@@ -7320,7 +7320,7 @@\n  \"stf\\\\t%1,*%0++\\\\n\\\\tstf\\\\t%2,*%0++\")\n \n \n-; The following two peepholes remove an unecessary load\n+; The following two peepholes remove an unnecessary load\n ; often found at the end of a function.  These peepholes\n ; could be generalized to other binary operators.  They shouldn't\n ; be required if we run a post reload mop-up pass."}, {"sha": "69483fae1fd42543342b61afb6ab3d603f18c59c", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -259,7 +259,7 @@ extern const char *cris_elinux_stacksize_str;\n /* This needs to be at least 32 bits.  */\n extern int target_flags;\n \n-/* Currently this just affects aligment.  FIXME:  Redundant with\n+/* Currently this just affects alignment.  FIXME:  Redundant with\n    TARGET_ALIGN_BY_32, or put machine stuff here?  */\n #define TARGET_MASK_SVINTO 1\n #define TARGET_SVINTO (target_flags & TARGET_MASK_SVINTO)\n@@ -850,7 +850,7 @@ enum reg_class {NO_REGS, ALL_REGS, LIM_REG_CLASSES};\n \n /* If we would ever need an exact mapping between canonical register\n    number and dwarf frame register, we would either need to include all\n-   registers in the gcc decription (with some marked fixed of course), or\n+   registers in the gcc description (with some marked fixed of course), or\n    an inverse mapping from dwarf register to gcc register.  There is one\n    need in dwarf2out.c:expand_builtin_init_dwarf_reg_sizes.  Right now, I\n    don't see that we need exact correspondence between DWARF *frame*"}, {"sha": "8fb07039f04627023d1524c928879b992877bdfa", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -31,7 +31,7 @@\n ;; There are several instructions that are orthogonal in size, and seems\n ;; they could be matched by a single pattern without a specified size\n ;; for the operand that is orthogonal.  However, this did not work on\n-;; gcc-2.7.2 (and problably not on gcc-2.8.1), relating to that when a\n+;; gcc-2.7.2 (and probably not on gcc-2.8.1), relating to that when a\n ;; constant is substituted into an operand, the actual mode must be\n ;; deduced from the pattern.  There is reasonable hope that that has been\n ;; fixed, so FIXME: try again.\n@@ -77,7 +77,7 @@\n ;; The possible values are \"yes\", \"no\" and \"has_slot\".  Yes/no means if\n ;; the insn is slottable or not.  Has_slot means that the insn is a\n ;; return insn or branch insn (which are not considered slottable since\n-;; that is generally true).  Having the semmingly illogical value\n+;; that is generally true).  Having the seemingly illogical value\n ;; \"has_slot\" means we do not have to add another attribute just to say\n ;; that an insn has a delay-slot, since it also infers that it is not\n ;; slottable.  Better names for the attribute were found to be longer and\n@@ -1354,7 +1354,7 @@\n   \"movs.b %1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no\")])\n \n-;; To do a byte->word exension, extend to dword, exept that the top half\n+;; To do a byte->word extension, extend to dword, exept that the top half\n ;; of the register will be clobbered.  FIXME: Perhaps this is not needed.\n \n (define_insn \"extendqihi2\""}, {"sha": "2ff09519f064d6f1ba52f83435c79f50be10f5f9", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -110,7 +110,7 @@ struct fr30_frame_info\n   unsigned int frame_size;      /* # Bytes in current frame.  */\n   unsigned int gmask;\t\t/* Mask of saved registers. */\n   unsigned int save_fp;\t\t/* Nonzero if frame pointer must be saved. */\n-  unsigned int save_rp;\t\t/* Nonzero if return popinter must be saved. */\n+  unsigned int save_rp;\t\t/* Nonzero if return pointer must be saved. */\n   int          initialised;\t/* Nonzero if frame size already calculated. */\n };\n \n@@ -686,7 +686,7 @@ fr30_num_arg_regs (int_mode, type)\n /* Implements the FUNCTION_ARG_PARTIAL_NREGS macro.\n    Returns the number of argument registers required to hold *part* of\n    a parameter of machine mode MODE and tree type TYPE (which may be\n-   NULL if the type is not known).  If the argument fits entirly in\n+   NULL if the type is not known).  If the argument fits entirely in\n    the argument registers, or entirely on the stack, then 0 is returned.\n    CUM is the number of argument registers already used by earlier\n    parameters to the function.  */\n@@ -973,7 +973,7 @@ fr30_const_double_is_zero (operand)\n \n /* Output a double word move.\n    It must be REG<-REG, REG<-MEM, MEM<-REG or REG<-CONST.\n-   On the FR30 we are contrained by the fact that it does not\n+   On the FR30 we are constrained by the fact that it does not\n    support offsetable addresses, and so we have to load the\n    address of the secnd word into the second destination register\n    before we can use it.  */"}, {"sha": "845b4f1e111c0763e3c88fb384c749d212e24bc6", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -926,7 +926,7 @@ enum reg_class\n    jmp    @r0\n \n    The no-ops are to guarantee that the static chain and final\n-   target are 32 bit ailgned within the trampoline.  That allows us to\n+   target are 32 bit aligned within the trampoline.  That allows us to\n    initialize those locations with simple SImode stores.   The alternative\n    would be to use HImode stores.  */\n    "}, {"sha": "5be9d9ae5cecd1e0cd6db5369136e51cd443c8c6", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -639,7 +639,7 @@\n ;; We need some trickery to be able to handle the addition of\n ;; large (ie outside +/- 16) constants.  We need to be able to\n ;; handle this because reload assumes that it can generate add\n-;; instructions with arbitary sized constants.\n+;; instructions with arbitrary sized constants.\n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"           \"\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\"  \"\")"}, {"sha": "8d36bc61c45981495bf64fe772eefb22a4d711fc", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -151,7 +151,7 @@ typedef struct\n        nested compares can be done.  The csubcc and caddcc instructions don't\n        have enough bits to specify both a CC register to be set and a CR register\n        to do the test on, so the same bit number is used for both.  Needless to\n-       say, this is rather inconvient for GCC.  */\n+       say, this is rather inconvenient for GCC.  */\n     rtx nested_cc_reg;\n \n     /* Extra CR registers used for &&, ||.  */\n@@ -1644,7 +1644,7 @@ frv_expand_prologue (void)\n \n \f\n /* Under frv, all of the work is done via frv_expand_epilogue, but\n-   this function provides a convient place to do cleanup.  */\n+   this function provides a convenient place to do cleanup.  */\n \n static void\n frv_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n@@ -2300,7 +2300,7 @@ frv_final_prescan_insn (rtx insn, rtx *opvec, int noperands ATTRIBUTE_UNUSED)\n \n   /* Set frv_insn_packing_flag to FALSE if the next instruction should\n      be packed with this one.  Set it to TRUE otherwise.  If the next\n-     instruction is an asm insntruction, this statement will set the\n+     instruction is an asm instruction, this statement will set the\n      flag to TRUE, and that value will still hold when the asm operands\n      themselves are printed.  */\n   frv_insn_packing_flag = ! (insn && INSN_P (insn)\n@@ -3757,7 +3757,7 @@ pic_register_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n \n /* Return 1 if operand is a symbolic reference when a PIC option is specified\n-   that takes 3 seperate instructions to form.  */\n+   that takes 3 separate instructions to form.  */\n \n int\n pic_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n@@ -5830,7 +5830,7 @@ frv_emit_scc (enum rtx_code test, rtx target)\n \n \f\n /* Split a SCC instruction into component parts, returning a SEQUENCE to hold\n-   the seperate insns.  */\n+   the separate insns.  */\n \n rtx\n frv_split_scc (rtx dest, rtx test, rtx cc_reg, rtx cr_reg, HOST_WIDE_INT value)\n@@ -5941,7 +5941,7 @@ frv_emit_cond_move (rtx dest, rtx test_rtx, rtx src1, rtx src2)\n }\n \n \f\n-/* Split a conditonal move into constituent parts, returning a SEQUENCE\n+/* Split a conditional move into constituent parts, returning a SEQUENCE\n    containing all of the insns.  */\n \n rtx\n@@ -8444,7 +8444,7 @@ frv_pack_insns (void)\n \t}\n \n       /* Clear the VLIW start flag on random USE and CLOBBER insns, which is\n-         set on the USE insn that preceeds the return, and potentially on\n+         set on the USE insn that precedes the return, and potentially on\n          CLOBBERs for setting multiword variables.  Also skip the ADDR_VEC\n          holding the case table labels.  */\n       pattern_code = GET_CODE (PATTERN (insn));\n@@ -9000,7 +9000,7 @@ frv_legitimize_target (enum insn_code icode, rtx target)\n }\n \n /* Given that ARG is being passed as operand OPNUM to instruction ICODE,\n-   check whether ARG satisfies the operand's contraints.  If it doesn't,\n+   check whether ARG satisfies the operand's constraints.  If it doesn't,\n    copy ARG to a temporary register and return that.  Otherwise return ARG\n    itself.  */\n "}, {"sha": "9d06fbbdfdb80e39303515e8c59f84dd75c868c8", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -463,7 +463,7 @@\n           first regular expression *and* the reservation described by\n           the second regular expression *and* etc.\n \n-       4. \"*\" is used for convinience and simply means sequence in\n+       4. \"*\" is used for convenience and simply means sequence in\n           which the regular expression are repeated NUMBER times with\n           cycle advancing (see \",\").\n \n@@ -1118,7 +1118,7 @@\n \n ;; Note - it is the backend's responsibility to fill any unfilled delay slots\n ;; at assembler generation time.  This is usually done by adding a special print\n-;; operand to the delayed insrtuction, and then in the PRINT_OPERAND function\n+;; operand to the delayed instruction, and then in the PRINT_OPERAND function\n ;; calling dbr_sequence_length() to determine how many delay slots were filled.\n ;; For example:\n ;;\n@@ -1364,7 +1364,7 @@\n \n ;; Note - it is best to only have one movsi pattern and to handle\n ;; all the various contingencies by the use of alternatives.  This\n-;; allows reload the greatest amount of flexability (since reload will\n+;; allows reload the greatest amount of flexibility (since reload will\n ;; only choose amoungst alternatives for a selected insn, it will not\n ;; replace the insn with another one).\n \n@@ -1374,7 +1374,7 @@\n ;; constants into memory when the destination is a floating-point register.\n ;; That may make a function use a PIC pointer when it didn't before, and we\n ;; cannot change PIC usage (and hence stack layout) so late in the game.\n-;; The resulting sequences for loading cosntants into FPRs are preferable\n+;; The resulting sequences for loading constants into FPRs are preferable\n ;; even when we're not generating PIC code.\n \n (define_insn \"*movsi_load\"\n@@ -3328,7 +3328,7 @@\n ;;   \"anddi3 %0,%1,%2\"\n ;;   [(set_attr \"length\" \"4\")])\n \n-;; Includive OR, 64 bit integers\n+;; Inclusive OR, 64 bit integers\n ;; (define_insn \"iordi3\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(ior:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n@@ -7393,7 +7393,7 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mqsath\")])\n \n-;; Set hi/lo instrctions: type \"mset\"\n+;; Set hi/lo instructions: type \"mset\"\n \n (define_insn \"mhsetlos\"\n   [(set (match_operand:SI 0 \"fpr_operand\" \"=f\")"}, {"sha": "82f9500eab2e0bd85a2b04a7761ceb28f7fac046", "filename": "gcc/config/frv/frvbegin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrvbegin.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -81,7 +81,7 @@ extern void __frv_deregister_eh(void) __attribute__((__destructor__));\n \n extern func_ptr __EH_FRAME_BEGIN__[];\n \n-/* Register the exeception handling table as the first constructor */\n+/* Register the exception handling table as the first constructor */\n void\n __frv_register_eh (void)\n {\n@@ -93,7 +93,7 @@ __frv_register_eh (void)\n /* Note, do not declare __{,de}register_frame_info weak as it seems\n    to interfere with the pic support.  */\n \n-/* Unregister the exeception handling table as a deconstructor */\n+/* Unregister the exception handling table as a deconstructor */\n void\n __frv_deregister_eh (void)\n {"}, {"sha": "4ce9a3812d8cb9c53850512b4029f136aaeb926c", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -220,7 +220,7 @@\n \t\t\t      (and (eq_attr \"type\" \"idiv\")\n \t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n \t\t\t \"athlon-vector,((athlon-load,athlon-ieu0*6)+(athlon-fpsched,athlon-fvector))\")\n-;; The paralelism of string instructions is not documented.  Model it same way\n+;; The parallelism of string instructions is not documented.  Model it same way\n ;; as idiv to create smaller automata.  This probably does not matter much.\n (define_insn_reservation \"athlon_str\" 6\n \t\t\t (and (eq_attr \"cpu\" \"athlon,k8\")\n@@ -831,7 +831,7 @@\n \t\t\t (and (eq_attr \"cpu\" \"k8\")\n \t\t\t      (eq_attr \"type\" \"ssemul\"))\n \t\t\t \"athlon-double,athlon-fpsched,(athlon-fmul*2)\")\n-;; divsd timmings.  divss is faster\n+;; divsd timings.  divss is faster\n (define_insn_reservation \"athlon_ssediv_load\" 20\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n \t\t\t      (and (eq_attr \"type\" \"ssediv\")"}, {"sha": "bd57078f88bd488365b7c3aebb0285f076f4ab47", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1666,7 +1666,7 @@ ix86_comp_type_attributes (tree type1, tree type2)\n \f\n /* Return the regparm value for a fuctio with the indicated TYPE and DECL.\n    DECL may be NULL when calling function indirectly\n-   or considerling a libcall.  */\n+   or considering a libcall.  */\n \n static int\n ix86_function_regparm (tree type, tree decl)\n@@ -5082,7 +5082,7 @@ ix86_emit_save_regs_using_mov (rtx pointer, HOST_WIDE_INT offset)\n       }\n }\n \n-/* Expand prologue or epilogue stack adjustement.\n+/* Expand prologue or epilogue stack adjustment.\n    The pattern exist to put a dependency on all ebp-based memory accesses.\n    STYLE should be negative if instructions should be marked as frame related,\n    zero if %r11 register is live and cannot be freely used and positive"}, {"sha": "0eff393bf5fcb65d6d8282ecf28caa341c2a8c41", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -2133,7 +2133,7 @@\n       return \"push{l}\\t%1\";\n \n     default:\n-      /* This insn should be already splitted before reg-stack.  */\n+      /* This insn should be already split before reg-stack.  */\n       abort ();\n     }\n }\n@@ -2151,7 +2151,7 @@\n       return \"push{q}\\t%q1\";\n \n     default:\n-      /* This insn should be already splitted before reg-stack.  */\n+      /* This insn should be already split before reg-stack.  */\n       abort ();\n     }\n }\n@@ -2409,7 +2409,7 @@\n \t(match_operand:DF 1 \"general_no_elim_operand\" \"f#Y,Fo#fY,*r#fY,Y#f\"))]\n   \"!TARGET_64BIT && !TARGET_INTEGER_DFMODE_MOVES\"\n {\n-  /* This insn should be already splitted before reg-stack.  */\n+  /* This insn should be already split before reg-stack.  */\n   abort ();\n }\n   [(set_attr \"type\" \"multi\")\n@@ -2420,7 +2420,7 @@\n \t(match_operand:DF 1 \"general_no_elim_operand\" \"f#rY,rFo#fY,Y#rf\"))]\n   \"TARGET_64BIT || TARGET_INTEGER_DFMODE_MOVES\"\n {\n-  /* This insn should be already splitted before reg-stack.  */\n+  /* This insn should be already split before reg-stack.  */\n   abort ();\n }\n   [(set_attr \"type\" \"multi\")\n@@ -2726,7 +2726,7 @@\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n   \"optimize_size\"\n {\n-  /* This insn should be already splitted before reg-stack.  */\n+  /* This insn should be already split before reg-stack.  */\n   abort ();\n }\n   [(set_attr \"type\" \"multi\")\n@@ -2737,7 +2737,7 @@\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,ro#f\"))]\n   \"!optimize_size\"\n {\n-  /* This insn should be already splitted before reg-stack.  */\n+  /* This insn should be already split before reg-stack.  */\n   abort ();\n }\n   [(set_attr \"type\" \"multi\")"}, {"sha": "455741d610bd56c1c2fd837427eb29d21e8dcb89", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -146,7 +146,7 @@ Boston, MA 02111-1307, USA.  */\n    assume that /usr/gnu is the prefix for the GNU tools, because thats\n    where the SCO provided ones go. This is especially important for\n    include and library search path ordering. We want to look in /usr/gnu\n-   first, becuase frequently people are linking against -lintl, and they\n+   first because frequently people are linking against -lintl, and they\n    MEAN to link with gettext. What they get is the SCO intl library. Its\n    a REAL pity that GNU gettext chose that name; perhaps in a future\n    version they can be persuaded to change it to -lgnuintl and have a"}, {"sha": "01e4d73839e7e59b61a17d578e49f35aa48ab808", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -5589,7 +5589,7 @@\n ;; ::\n ;; ::::::::::::::::::::\n \n-;; ??? Emiting a NOP instruction isn't very useful.  This should probably\n+;; ??? Emitting a NOP instruction isn't very useful.  This should probably\n ;; be emitting \";;\" to force a break in the instruction packing.\n \n ;; No operation, needed in case the user uses -g but not -O."}, {"sha": "038b86abafb3aa737146a82896b4932ad797bd4f", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -368,7 +368,7 @@ function_epilogue (file, size)\n \t      OUT_AS2 (mov, w, %L0);\n \t      OUT_AS2 (add, spl, w);\n \t      epilogue_size += 4;\n-\t      /* fall-thru  */\n+\t      /* fall-through  */\n \t    case 0:\n \t      break;\n \t    case 1:\n@@ -383,7 +383,7 @@ function_epilogue (file, size)\n \t\tOUT_AS2 (mov, w, %H0);\n \t      OUT_AS2 (add, sph, w);\n \t      epilogue_size += 4;\n-\t      /* fall-thru  */\n+\t      /* fall-through  */\n \t    case 0:\n \t      break;\n \t    case 0x100:\n@@ -498,7 +498,7 @@ function_epilogue (file, size)\n \t  OUT_AS2 (mov, w, %L0);\n \t  OUT_AS2 (add, spl, w);\n \t  epilogue_size += 4;\n-\t  /* fall-thru  */\n+\t  /* fall-through  */\n \n \tcase 0:\n \t  break;\n@@ -515,7 +515,7 @@ function_epilogue (file, size)\n \t    OUT_AS2 (mov, w, %H0);\n \t  OUT_AS2 (add, sph, w);\n \t  epilogue_size += 4;\n-\t  /* fall-thru  */\n+\t  /* fall-through  */\n \n \tcase 0:\n \t  break;\n@@ -615,7 +615,7 @@ legitimate_address_p (mode, x, strict)\n       if (REGNO (x) == REG_IP)\n \treturn (GET_MODE_SIZE (mode) == 1) ? 'R' : 0;\n \n-      /* We can indirect thru DP or SP register.  */\n+      /* We can indirect through DP or SP register.  */\n       if (strict ? REG_OK_FOR_BASE_STRICT_P (x)\n \t         : REG_OK_FOR_BASE_NOSTRICT_P (x))\n \treturn 'S';\n@@ -636,7 +636,7 @@ legitimate_address_p (mode, x, strict)\n \t    op2 = tmp;\n \t  }\n \n-\t/* Don't let anything but R+I thru..  */\n+\t/* Don't let anything but R+I through..  */\n \tif (! REG_P (op1)\n \t    || REG_P (op2)\n \t    || GET_CODE (op2) != CONST_INT)\n@@ -783,7 +783,7 @@ print_operand_address (file, addr)\n     {\n     case SUBREG:\n       addr = alter_subreg (&addr);\n-      /* fall-thru  */\n+      /* fall-through  */\n \n     case REG:\n       fprintf (file, \"(%s)\",\n@@ -906,7 +906,7 @@ print_operand (file, x, code)\n     {\n     case SUBREG:\n       x = alter_subreg (&x);\n-      /* fall-thru  */\n+      /* fall-through  */\n \n     case REG:\n       fprintf (file, reg_names[true_regnum (x) + abcd]);\n@@ -1757,7 +1757,7 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \n         case GTU:\t\t\t\n           code = NE;\t\t\t/* Anything nonzero is GTU.  */\n-          /* fall-thru  */\n+          /* fall-through  */\n \n         case EQ:\n         case NE:\t\t\t/* Test all the bits, result in\n@@ -2077,7 +2077,7 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \tcase GTU:\n \t  if (imm_sub)\n \t    {\n-\t      /* > 0xffff never suceeds!  */\n+\t      /* > 0xffff never succeeds!  */\n \t      if ((INTVAL (operands[1]) & 0xffff) != 0xffff)\n \t\t{\n \t          operands[3] = GEN_INT (INTVAL (operands[1]) + 1);\n@@ -2177,7 +2177,7 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t    {\n \t      if ((INTVAL (operands[1]) & 0xffff) == 0xffff)\n \t        {\n-\t\t  /* <= 0xffff always suceeds.  */\n+\t\t  /* <= 0xffff always succeeds.  */\n \t\t  OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n \t\t}\n@@ -2306,7 +2306,7 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \tcase GTU:\n \t  if (imm_sub)\n \t    {\n-\t      /* > 0xffffffff never suceeds!  */\n+\t      /* > 0xffffffff never succeeds!  */\n \t      if ((unsigned HOST_WIDE_INT)(INTVAL (operands[1]) & 0xffffffff)\n \t\t  != 0xffffffff)\n \t\t{\n@@ -2436,7 +2436,7 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t      if ((unsigned HOST_WIDE_INT)(INTVAL (operands[1]) & 0xffffffff)\n \t\t  == 0xffffffff)\n \t        {\n-\t\t  /* <= 0xffffffff always suceeds.  */\n+\t\t  /* <= 0xffffffff always succeeds.  */\n \t\t  OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n \t\t}\n@@ -3856,7 +3856,7 @@ track_dp_reload (insn, dp_current, dp_current_ok, modifying)\n /* As part of the machine-dependent reorg we scan loads and reloads of\n    DP to see where any are redundant.  This does happens because we\n    are able to subsequently transform things in interesting ways.  Sometimes\n-   gcc also does unecessary reloads too so we try to eliminate these too.  */\n+   gcc also does unnecessary reloads too so we try to eliminate these too.  */\n \n static void\n mdr_try_dp_reload_elim (first_insn)\n@@ -4017,7 +4017,7 @@ mdr_try_dp_reload_elim (first_insn)\n         }\n \n       /* When we're looking to see if we've finished we count the number of\n-         paths throught the code labels where we weren't able to definitively\n+         paths through the code labels where we weren't able to definitively\n \t track DP.\n \t This number is used to see if we're converging on a solution.\n \t If this hits zero then we've fully converged, but if this stays the\n@@ -5262,7 +5262,7 @@ mdr_try_wreg_elim (first_insn)\n         }\n \n       /* When we're looking to see if we've finished we count the number of\n-         paths throught the code labels where we weren't able to definitively\n+         paths through the code labels where we weren't able to definitively\n \t track WREG.  This number is used to see if we're converging on a\n \t solution.\n \t If this hits zero then we've fully converged, but if this stays the\n@@ -6191,7 +6191,7 @@ ip2k_short_operand (x, mode)\n \n       x = XEXP (x, 0);\n \n-      /* fall thru  */\n+      /* fall through  */\n \n     case REG:\n       if (IS_PSEUDO_P (x))"}, {"sha": "e51db0255ae1041d5c4e3e57a6bba0d2580a5985", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -65,7 +65,7 @@\n ;; d - non-pointer registers (not SP, DP, IP)\n ;; u - non-SP registers (everything except SP)\n ;;\n-;; R - Indirect thru IP - Avoid this except for QI mode, since we\n+;; R - Indirect through IP - Avoid this except for QI mode, since we\n ;;     can't access extra bytes.\n ;; S - Short (stack/dp address). Pointer with 0..127 displacement\n ;;     Note that 0(SP) has undefined contents due to post-decrement push"}, {"sha": "ba0a2c7eef1124bc385083e5be5fa683b95aba07", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1420,7 +1420,7 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n    macro is used in only one place: `find_reloads_address' in reload.c.\n \n    For M68HC11, we handle large displacements of a base register\n-   by splitting the addend accors an addhi3 insn.\n+   by splitting the addend across an addhi3 insn.\n \n    For M68HC12, the 64K offset range is available.\n    */"}, {"sha": "423895de32c54738ca6b3609968b979b04c478e9", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -213,7 +213,7 @@ extern int target_flags;\n #define MASK_RTD\t(1<<16)\n #define TARGET_RTD\t(target_flags & MASK_RTD)\n \n-/* Support A5 relative data seperate from text.\n+/* Support A5 relative data separate from text.\n  * This option implies -fPIC, however it inhibits the generation of the\n  * A5 save/restore in functions and the loading of a5 with a got pointer.\n  */"}, {"sha": "e2fe55655f5599cce15ba2e4b28bfa927d043a1f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -6649,7 +6649,7 @@ mips_expand_prologue (void)\n   /* Set up the frame pointer, if we're using one.  In mips16 code,\n      we point the frame pointer ahead of the outgoing argument area.\n      This should allow more variables & incoming arguments to be\n-     acceesed with unextended instructions.  */\n+     accessed with unextended instructions.  */\n   if (frame_pointer_needed)\n     {\n       if (TARGET_MIPS16 && cfun->machine->frame.args_size != 0)"}, {"sha": "64780f4eea956f83d84598fde7a3d1ab2c4ea028", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -4249,7 +4249,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t     value in GPRs is reported here.  */\n \t  if (align_words + CLASS_MAX_NREGS (mode, GENERAL_REGS)\n \t      > GP_ARG_NUM_REG)\n-\t    /* Fortunately, there are only two possibilites, the value\n+\t    /* Fortunately, there are only two possibilities, the value\n \t       is either wholly in GPRs or half in GPRs and half not.  */\n \t    part_mode = DImode;\n \t  \n@@ -13643,7 +13643,7 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn ATTRIBUTE_UNUSED,\n }\n \n /* The function returns a true if INSN is microcoded.\n-   Return false ptherwise.  */\n+   Return false otherwise.  */\n \n static bool\n is_microcoded_insn (rtx insn)\n@@ -14030,7 +14030,7 @@ get_next_active_insn (rtx insn, rtx tail)\n   return next_insn;\n }\n \n-/* Return whether the presence of INSN causes a dispatch group terminatation\n+/* Return whether the presence of INSN causes a dispatch group termination\n    of group WHICH_GROUP.\n \n    If WHICH_GROUP == current_group, this function will return true if INSN\n@@ -14072,7 +14072,7 @@ insn_terminates_group_p (rtx insn, enum group_termination which_group)\n   return false;\n }\n \n-/* Return true if it is recommended to keep NEXT_INSN \"far\" (in a seperate\n+/* Return true if it is recommended to keep NEXT_INSN \"far\" (in a separate\n    dispatch group) from the insns in GROUP_INSNS.  Return false otherwise.  */\n \n static bool\n@@ -14110,7 +14110,7 @@ is_costly_group (rtx *group_insns, rtx next_insn)\n    one of the following schemes, depending on the value of the flag\n    -minsert_sched_nops = X:\n    (1) X == sched_finish_regroup_exact: insert exactly as many nops as needed\n-       in order to force NEXT_INSN into a seperate group.\n+       in order to force NEXT_INSN into a separate group.\n    (2) X < sched_finish_regroup_exact: insert exactly X nops.  \n    GROUP_END, CAN_ISSUE_MORE and GROUP_COUNT record the state after nop \n    insertion (has a group just ended, how many vacant issue slots remain in the"}, {"sha": "3f6f6b34c4a2346a6f5e49f3b983d6f01363638c", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -7415,7 +7415,7 @@\n \n \n ;; Instruction definition to extend a 31-bit pointer into a 64-bit\n-;; pointer. This is used for compatability.\n+;; pointer. This is used for compatibility.\n \n (define_expand \"ptr_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "9c73b9e714d0bd164b0794f1e4a4f7d1f0324d3a", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -2875,7 +2875,7 @@ struct sh_args {\n    used to use the encodings 245..260, but that doesn't make sense:\n    PR_REG and PR_MEDIA_REG are actually the same register, and likewise\n    the FP registers stay the same when switching between compact and media\n-   mode.  Hence, we also need to use the same dwarf frame coloumns.\n+   mode.  Hence, we also need to use the same dwarf frame columns.\n    Likewise, we need to support unwind information for SHmedia registers\n    even in compact code.  */\n #define SH_DBX_REGISTER_NUMBER(REGNO) \\"}, {"sha": "b3a7dfaf4479f7bc7a52d2e16828d5cf04d88335", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -8641,7 +8641,7 @@\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"xor\\\\t%1, %%tle_lox10(%a2), %0\")\n \n-;; Now patterns combinding tldo_add{32,64} with some integer loads or stores\n+;; Now patterns combining tldo_add{32,64} with some integer loads or stores\n (define_insn \"*tldo_ldub_sp32\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")"}, {"sha": "5163c377eb47a4a6ba0124cc60b5b3a3bf6dc071", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -2270,7 +2270,7 @@ v850_encode_data_area (tree decl, rtx symbol)\n {\n   int flags;\n \n-  /* Map explict sections into the appropriate attribute */\n+  /* Map explicit sections into the appropriate attribute */\n   if (v850_get_data_area (decl) == DATA_AREA_NORMAL)\n     {\n       if (DECL_SECTION_NAME (decl))\n@@ -3155,8 +3155,8 @@ pattern_is_ok_for_prepare (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \treturn 0;\n \n       /* If the register is being pushed somewhere other than the stack\n-\t space just aquired by the first operand then abandon this quest.\n-\t Note: the test is <= becuase both values are negative.\t */\n+\t space just acquired by the first operand then abandon this quest.\n+\t Note: the test is <= because both values are negative.\t */\n       if (INTVAL (XEXP (plus, 1))\n \t  <= INTVAL (XEXP (SET_SRC (XVECEXP (op, 0, 0)), 1)))\n \treturn 0;"}, {"sha": "76f0920fda74b135998d6d74fb13a47e0ed8fc56", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1349,7 +1349,7 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    can appear in the \"ghs section\" pragma.  These names are used to index\n    into the GHS_default_section_names[] and GHS_current_section_names[]\n    that are defined in v850.c, and so the ordering of each must remain\n-   consistant. \n+   consistent. \n \n    These arrays give the default and current names for each kind of \n    section defined by the GHS pragmas.  The current names can be changed"}, {"sha": "b359c7230020b72798186c3bf9722d287852a562", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1716,7 +1716,7 @@\n     \"TARGET_V850E && !TARGET_DISABLE_CALLT\"\n     ;; The CALLT instruction stores the next address of CALLT to CTPC register\n     ;; without saving its previous value.  So if the interrupt handler\n-    ;; or its caller could possibily execute the CALLT insn, save_interrupt \n+    ;; or its caller could possibly execute the CALLT insn, save_interrupt \n     ;; MUST NOT be called via CALLT.\n     \"*\n {"}, {"sha": "20a257e02c447012968eea3f1cc40c00ad833a2a", "filename": "gcc/config/vxlib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fvxlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fvxlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxlib.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -198,7 +198,7 @@ tsd_init (void)\n /* External interface */\n \n /* Store in KEYP a value which can be passed to __gthread_setspecific/\n-   __gthread_getspecific to store and retrive a value which is\n+   __gthread_getspecific to store and retrieve a value which is\n    specific to each calling thread.  If DTOR is not NULL, it will be\n    called when a thread terminates with a non-NULL specific value for\n    this key, with the value as its sole argument.  */"}, {"sha": "74e4b3051e3ebbe8872da83560c13a73208e3383", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839a4992763cebcd13bb32ce3db276aacfc9202f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=839a4992763cebcd13bb32ce3db276aacfc9202f", "patch": "@@ -1585,10 +1585,10 @@ xtensa_setup_frame_addresses (void)\n    a comment showing where the end of the loop is.  However, if there is a\n    label or a branch at the end of the loop then we need to place a nop\n    there.  If the loop ends with a label we need the nop so that branches\n-   targetting that label will target the nop (and thus remain in the loop),\n-   instead of targetting the instruction after the loop (and thus exiting\n+   targeting that label will target the nop (and thus remain in the loop),\n+   instead of targeting the instruction after the loop (and thus exiting\n    the loop).  If the loop ends with a branch, we need the nop in case the\n-   branch is targetting a location inside the loop.  When the branch\n+   branch is targeting a location inside the loop.  When the branch\n    executes it will cause the loop count to be decremented even if it is\n    taken (because it is the last instruction in the loop), so we need to\n    nop after the branch to prevent the loop count from being decremented"}]}