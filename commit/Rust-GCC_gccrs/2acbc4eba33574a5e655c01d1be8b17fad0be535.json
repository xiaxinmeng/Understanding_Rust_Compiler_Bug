{"sha": "2acbc4eba33574a5e655c01d1be8b17fad0be535", "node_id": "C_kwDOANBUbNoAKDJhY2JjNGViYTMzNTc0YTVlNjU1YzAxZDFiZThiMTdmYWQwYmU1MzU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-29T14:20:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-30T07:23:26Z"}, "message": "Avoid some -Wunreachable-code-ctrl\n\nThis cleans up unreachable code diagnosed by -Wunreachable-code-ctrl.\nIt largely follows the previous series but discovers a few extra\ncases, namely dead code after break or continue or loops without\nexits.\n\n2021-11-29  Richard Biener  <rguenther@suse.de>\n\ngcc/c/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression):\n\tavoid unreachable code after break.\n\ngcc/\n\t* cfgrtl.c (skip_insns_after_block): Refactor code to\n\tbe more easily readable.\n\t* expr.c (op_by_pieces_d::run): Remove unreachable\n\tassert.\n\t* sched-deps.c (sched_analyze): Remove unreachable\n\tgcc_unreachable.\n\t* sel-sched-ir.c (in_same_ebb_p): Likewise.\n\t* tree-ssa-alias.c (nonoverlapping_refs_since_match_p):\n\tRemove unreachable code.\n\t* tree-vect-slp.c (vectorize_slp_instance_root_stmt):\n\tRefactor to avoid unreachable loop iteration.\n\t* tree.c (walk_tree_1): Remove unreachable break.\n\t* vec-perm-indices.c (vec_perm_indices::series_p): Remove\n\tunreachable return.\n\ngcc/cp/\n\t* parser.c (cp_parser_postfix_expression): Remove\n\tunreachable code.\n\t* pt.c (tsubst_expr): Remove unreachable breaks.\n\ngcc/fortran/\n\t* frontend-passes.c (gfc_expr_walker): Remove unreachable\n\tbreak.\n\t* scanner.c (skip_fixed_comments): Remove unreachable\n\tgcc_unreachable.\n\t* trans-expr.c (gfc_expr_is_variable): Refactor to make\n\tcontrol flow more obvious.", "tree": {"sha": "e5ed1acaf3d7f9ea3efeef6958dcf97acd35c702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ed1acaf3d7f9ea3efeef6958dcf97acd35c702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2acbc4eba33574a5e655c01d1be8b17fad0be535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2acbc4eba33574a5e655c01d1be8b17fad0be535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2acbc4eba33574a5e655c01d1be8b17fad0be535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2acbc4eba33574a5e655c01d1be8b17fad0be535/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c7d489a1e6592bc73db03678c1231748fd7a126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7d489a1e6592bc73db03678c1231748fd7a126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7d489a1e6592bc73db03678c1231748fd7a126"}], "stats": {"total": 73, "additions": 14, "deletions": 59}, "files": [{"sha": "f594a8ccb3184a8c8c475960f170cdca9a9d38c7", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -1698,13 +1698,7 @@ c_parser_gimple_postfix_expression (gimple_parser &parser)\n \t    }\n \t  break;\n \t}\n-      else\n-\t{\n-\t  c_parser_error (parser, \"expected expression\");\n-\t  expr.set_error ();\n-\t  break;\n-\t}\n-      break;\n+      /* Fallthru.  */\n     default:\n       c_parser_error (parser, \"expected expression\");\n       expr.set_error ();"}, {"sha": "287a3db643a345374a504f6f17bd8bbab71da979", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -3539,14 +3539,8 @@ skip_insns_after_block (basic_block bb)\n \t  continue;\n \n \tcase NOTE:\n-\t  switch (NOTE_KIND (insn))\n-\t    {\n-\t    case NOTE_INSN_BLOCK_END:\n-\t      gcc_unreachable ();\n-\t    default:\n-\t      continue;\n-\t    }\n-\t  break;\n+\t  gcc_assert (NOTE_KIND (insn) != NOTE_INSN_BLOCK_END);\n+\t  continue;\n \n \tcase CODE_LABEL:\n \t  if (NEXT_INSN (insn)"}, {"sha": "55e6a1a8b3ab1288e67a4792db9546ec5d498ece", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -7892,10 +7892,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n             return postfix_expression;\n \t}\n     }\n-\n-  /* We should never get here.  */\n-  gcc_unreachable ();\n-  return error_mark_node;\n }\n \n /* Helper function for cp_parser_parenthesized_expression_list and"}, {"sha": "6e25a3891a524c82eb3037a85cc94f34e69efb65", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -18245,13 +18245,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       stmt = finish_co_yield_expr (input_location,\n \t\t\t\t   RECUR (TREE_OPERAND (t, 0)));\n       RETURN (stmt);\n-      break;\n \n     case CO_AWAIT_EXPR:\n       stmt = finish_co_await_expr (input_location,\n \t\t\t\t   RECUR (TREE_OPERAND (t, 0)));\n       RETURN (stmt);\n-      break;\n \n     case EXPR_STMT:\n       tmp = RECUR (EXPR_STMT_EXPR (t));"}, {"sha": "b281525750978176b22322de20515b3d33164cdd", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -1342,9 +1342,6 @@ op_by_pieces_d::run ()\n \t}\n     }\n   while (1);\n-\n-  /* The code above should have handled everything.  */\n-  gcc_assert (!length);\n }\n \n /* Derived class from op_by_pieces_d, providing support for block move"}, {"sha": "16ee2afc9c0a51378b490b8a5bf71af066c5e4a7", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -5229,7 +5229,6 @@ gfc_expr_walker (gfc_expr **e, walk_expr_fn_t exprfn, void *data)\n \t  case EXPR_OP:\n \t    WALK_SUBEXPR ((*e)->value.op.op1);\n \t    WALK_SUBEXPR_TAIL ((*e)->value.op.op2);\n-\t    break;\n \t  case EXPR_FUNCTION:\n \t    for (a = (*e)->value.function.actual; a; a = a->next)\n \t      WALK_SUBEXPR (a->expr);"}, {"sha": "4d72ff78543f29d6d272debf669c5af9a7c75dd2", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -1159,7 +1159,6 @@ skip_fixed_comments (void)\n \t  skip_comment_line ();\n \t  continue;\n \n-\t  gcc_unreachable ();\n check_for_digits:\n \t  {\n \t    /* Required for OpenMP's conditional compilation sentinel. */"}, {"sha": "e413b2d7a1f91db25030e2666c0dca5322d4e2ce", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -11079,14 +11079,9 @@ gfc_expr_is_variable (gfc_expr *expr)\n \t  func_ifc = expr->value.function.esym;\n \t  goto found_ifc;\n \t}\n-      else\n-\t{\n-\t  gcc_assert (expr->symtree);\n-\t  func_ifc = expr->symtree->n.sym;\n-\t  goto found_ifc;\n-\t}\n-\n-      gcc_unreachable ();\n+      gcc_assert (expr->symtree);\n+      func_ifc = expr->symtree->n.sym;\n+      goto found_ifc;\n     }\n \n   comp = gfc_get_proc_ptr_comp (expr);"}, {"sha": "62aa47a73bd2d34913ddaec0b606982a412cfa87", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -3816,7 +3816,6 @@ sched_analyze (class deps_desc *deps, rtx_insn *head, rtx_insn *tail)\n \n   for (insn = head;; insn = NEXT_INSN (insn))\n     {\n-\n       if (INSN_P (insn))\n \t{\n \t  /* And initialize deps_lists.  */\n@@ -3836,7 +3835,6 @@ sched_analyze (class deps_desc *deps, rtx_insn *head, rtx_insn *tail)\n \t  return;\n \t}\n     }\n-  gcc_unreachable ();\n }\n \n /* Helper for sched_free_deps ()."}, {"sha": "b76a48eb16ecce5fb712785b02525ed6a6072deb", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -4918,9 +4918,6 @@ in_same_ebb_p (insn_t insn, insn_t succ)\n \n       ptr = bb_next_bb (ptr);\n     }\n-\n-  gcc_unreachable ();\n-  return false;\n }\n \n /* Recomputes the reverse topological order for the function and"}, {"sha": "88fd7821c5e55bd63988ac1df98e108d0400c244", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -1800,9 +1800,6 @@ nonoverlapping_refs_since_match_p (tree match1, tree ref1,\n \t  return 1;\n \t}\n     }\n-\n-  ++alias_stats.nonoverlapping_refs_since_match_p_must_overlap;\n-  return 0;\n }\n \n /* Return TYPE_UID which can be used to match record types we consider"}, {"sha": "cfea0c80be38f6b716603e811c3b800ed1e2ce66", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -7311,20 +7311,14 @@ vectorize_slp_instance_root_stmt (slp_tree node, slp_instance instance)\n     {\n       if (SLP_TREE_NUMBER_OF_VEC_STMTS (node) == 1)\n \t{\n-\t  gimple *child_stmt;\n-\t  int j;\n-\n-\t  FOR_EACH_VEC_ELT (SLP_TREE_VEC_STMTS (node), j, child_stmt)\n-\t    {\n-\t      tree vect_lhs = gimple_get_lhs (child_stmt);\n-\t      tree root_lhs = gimple_get_lhs (instance->root_stmts[0]->stmt);\n-\t      if (!useless_type_conversion_p (TREE_TYPE (root_lhs),\n-\t\t\t\t\t      TREE_TYPE (vect_lhs)))\n-\t\tvect_lhs = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (root_lhs),\n-\t\t\t\t   vect_lhs);\n-\t      rstmt = gimple_build_assign (root_lhs, vect_lhs);\n-\t      break;\n-\t    }\n+\t  gimple *child_stmt = SLP_TREE_VEC_STMTS (node)[0];\n+\t  tree vect_lhs = gimple_get_lhs (child_stmt);\n+\t  tree root_lhs = gimple_get_lhs (instance->root_stmts[0]->stmt);\n+\t  if (!useless_type_conversion_p (TREE_TYPE (root_lhs),\n+\t\t\t\t\t  TREE_TYPE (vect_lhs)))\n+\t    vect_lhs = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (root_lhs),\n+\t\t\t       vect_lhs);\n+\t  rstmt = gimple_build_assign (root_lhs, vect_lhs);\n \t}\n       else if (SLP_TREE_NUMBER_OF_VEC_STMTS (node) > 1)\n \t{"}, {"sha": "4d91fdea758ebc2382d36e4abf12911c7f929b24", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -11127,7 +11127,6 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n     case TREE_LIST:\n       WALK_SUBTREE (TREE_VALUE (*tp));\n       WALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n-      break;\n \n     case TREE_VEC:\n       {\n@@ -11206,7 +11205,6 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \t  WALK_SUBTREE (OMP_CLAUSE_OPERAND (*tp, i));\n \tWALK_SUBTREE_TAIL (OMP_CLAUSE_CHAIN (*tp));\n       }\n-      break;\n \n     case TARGET_EXPR:\n       {"}, {"sha": "9e6b5af327cefa19cd0df12bf52ac09669ea92ab", "filename": "gcc/vec-perm-indices.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fvec-perm-indices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2acbc4eba33574a5e655c01d1be8b17fad0be535/gcc%2Fvec-perm-indices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec-perm-indices.c?ref=2acbc4eba33574a5e655c01d1be8b17fad0be535", "patch": "@@ -228,7 +228,6 @@ vec_perm_indices::series_p (unsigned int out_base, unsigned int out_step,\n \n       out_base += out_step;\n     }\n-  return true;\n }\n \n /* Return true if all elements of the permutation vector are in the range"}]}