{"sha": "ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3Zjc5NmU4N2RiMWIwMWNlNGZiYWFiYzZmMGQ3MzAwMGFkNDAwMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-03-03T11:53:14Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-03-03T11:53:14Z"}, "message": "GCSE: Use HOST_WIDE_INT instead of int (PR rtl-optimization/79574).\n\n2017-03-03  Martin Liska  <mliska@suse.cz>\n\n\tPR rtl-optimization/79574\n\t* gcse.c (struct gcse_expr): Use HOST_WIDE_INT instead of int.\n\t(hash_scan_set): Likewise.\n\t(dump_hash_table): Likewise.\n\t(hoist_code): Likewise.\n2017-03-03  Martin Liska  <mliska@suse.cz>\n\n\tPR rtl-optimization/79574\n\t* gcc.dg/pr79574-2.c: New test.\n\nFrom-SVN: r245868", "tree": {"sha": "2c9bc970c4e2f13e8d40a4c309975b34f170bf83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c9bc970c4e2f13e8d40a4c309975b34f170bf83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98fa4d3c024ffa9f808bda8e41d0d3736584146c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98fa4d3c024ffa9f808bda8e41d0d3736584146c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98fa4d3c024ffa9f808bda8e41d0d3736584146c"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "1617bc1a1541708aeeb9cf59c6206bfa6aede4b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "patch": "@@ -1,3 +1,11 @@\n+2017-03-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR rtl-optimization/79574\n+\t* gcse.c (struct gcse_expr): Use HOST_WIDE_INT instead of int.\n+\t(hash_scan_set): Likewise.\n+\t(dump_hash_table): Likewise.\n+\t(hoist_code): Likewise.\n+\n 2017-03-03  Richard Biener  <rguenther@suse.de>\n \n \t* fixed-value.c (fixed_from_string): Restore use of elt (1)"}, {"sha": "38b957728577f070b7bbea5d52a766f940f4fc85", "filename": "gcc/gcse.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "patch": "@@ -281,7 +281,7 @@ struct gcse_expr\n      to keep register pressure under control.\n      A value of \"0\" removes restrictions on how far the expression can\n      travel.  */\n-  int max_distance;\n+  HOST_WIDE_INT max_distance;\n };\n \n /* Occurrence of an expression.\n@@ -458,7 +458,7 @@ static int oprs_unchanged_p (const_rtx, const rtx_insn *, int);\n static int oprs_anticipatable_p (const_rtx, const rtx_insn *);\n static int oprs_available_p (const_rtx, const rtx_insn *);\n static void insert_expr_in_table (rtx, machine_mode, rtx_insn *, int, int,\n-\t\t\t\t  int, struct gcse_hash_table_d *);\n+\t\t\t\t  HOST_WIDE_INT, struct gcse_hash_table_d *);\n static unsigned int hash_expr (const_rtx, machine_mode, int *, int);\n static void record_last_reg_set_info (rtx_insn *, int);\n static void record_last_mem_set_info (rtx_insn *);\n@@ -488,8 +488,10 @@ static void alloc_code_hoist_mem (int, int);\n static void free_code_hoist_mem (void);\n static void compute_code_hoist_vbeinout (void);\n static void compute_code_hoist_data (void);\n-static int should_hoist_expr_to_dom (basic_block, struct gcse_expr *, basic_block,\n-\t\t\t\t     sbitmap, int, int *, enum reg_class,\n+static int should_hoist_expr_to_dom (basic_block, struct gcse_expr *,\n+\t\t\t\t     basic_block,\n+\t\t\t\t     sbitmap, HOST_WIDE_INT, int *,\n+\t\t\t\t     enum reg_class,\n \t\t\t\t     int *, bitmap, rtx_insn *);\n static int hoist_code (void);\n static enum reg_class get_regno_pressure_class (int regno, int *nregs);\n@@ -743,7 +745,7 @@ static basic_block current_bb;\n    GCSE.  */\n \n static int\n-want_to_gcse_p (rtx x, machine_mode mode, int *max_distance_ptr)\n+want_to_gcse_p (rtx x, machine_mode mode, HOST_WIDE_INT *max_distance_ptr)\n {\n #ifdef STACK_REGS\n   /* On register stack architectures, don't GCSE constants from the\n@@ -1115,7 +1117,8 @@ expr_equiv_p (const_rtx x, const_rtx y)\n static void\n insert_expr_in_table (rtx x, machine_mode mode, rtx_insn *insn,\n \t\t      int antic_p,\n-\t\t      int avail_p, int max_distance, struct gcse_hash_table_d *table)\n+\t\t      int avail_p, HOST_WIDE_INT max_distance,\n+\t\t      struct gcse_hash_table_d *table)\n {\n   int found, do_not_record_p;\n   unsigned int hash;\n@@ -1231,7 +1234,7 @@ hash_scan_set (rtx set, rtx_insn *insn, struct gcse_hash_table_d *table)\n   else if (REG_P (dest))\n     {\n       unsigned int regno = REGNO (dest);\n-      int max_distance = 0;\n+      HOST_WIDE_INT max_distance = 0;\n \n       /* See if a REG_EQUAL note shows this equivalent to a simpler expression.\n \n@@ -1300,7 +1303,7 @@ hash_scan_set (rtx set, rtx_insn *insn, struct gcse_hash_table_d *table)\n   else if (flag_gcse_las && REG_P (src) && MEM_P (dest))\n     {\n       unsigned int regno = REGNO (src);\n-      int max_distance = 0;\n+      HOST_WIDE_INT max_distance = 0;\n \n       /* Only record sets of pseudo-regs in the hash table.  */\n       if (regno >= FIRST_PSEUDO_REGISTER\n@@ -1412,7 +1415,8 @@ dump_hash_table (FILE *file, const char *name, struct gcse_hash_table_d *table)\n     if (flat_table[i] != 0)\n       {\n \texpr = flat_table[i];\n-\tfprintf (file, \"Index %d (hash value %d; max distance %d)\\n  \",\n+\tfprintf (file, \"Index %d (hash value %d; max distance \"\n+\t\t HOST_WIDE_INT_PRINT_DEC \")\\n  \",\n \t\t expr->bitmap_index, hash_val[i], expr->max_distance);\n \tprint_rtl (file, expr->expr);\n \tfprintf (file, \"\\n\");\n@@ -2884,7 +2888,8 @@ update_bb_reg_pressure (basic_block bb, rtx_insn *from)\n \n static int\n should_hoist_expr_to_dom (basic_block expr_bb, struct gcse_expr *expr,\n-\t\t\t  basic_block bb, sbitmap visited, int distance,\n+\t\t\t  basic_block bb, sbitmap visited,\n+\t\t\t  HOST_WIDE_INT distance,\n \t\t\t  int *bb_size, enum reg_class pressure_class,\n \t\t\t  int *nregs, bitmap hoisted_bbs, rtx_insn *from)\n {\n@@ -3161,7 +3166,7 @@ hoist_code (void)\n \t\t computes the expression.  */\n \t      FOR_EACH_VEC_ELT (domby, j, dominated)\n \t\t{\n-\t\t  int max_distance;\n+\t\t  HOST_WIDE_INT max_distance;\n \n \t\t  /* Ignore self dominance.  */\n \t\t  if (bb == dominated)"}, {"sha": "6f59a450b1d8e123eb962d8fdde5874bec1b3ac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "patch": "@@ -1,3 +1,8 @@\n+2017-03-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR rtl-optimization/79574\n+\t* gcc.dg/pr79574-2.c: New test.\n+\n 2017-03-03  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/79825"}, {"sha": "995dff40174d605ffd400de297280e7c86c1a014", "filename": "gcc/testsuite/gcc.dg/pr79574-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79574-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec7f796e87db1b01ce4fbaabc6f0d73000ad4001/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79574-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79574-2.c?ref=ec7f796e87db1b01ce4fbaabc6f0d73000ad4001", "patch": "@@ -0,0 +1,33 @@\n+/* PR rtl-optimization/79574 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os --param gcse-cost-distance-ratio=2147483647\" } */\n+\n+#include \"stdarg.h\"\n+\n+int buf[100];\n+int buf1[10];\n+\n+int rd (int *pppp, int n, ...)\n+{\n+  va_list argp;\n+  int *p;\n+  int i;\n+  int res;\n+\n+  va_start (argp, n);\n+  for (; n > 0; n--)\n+    va_arg (argp, double);\n+  p = va_arg (argp, int *);\n+  i = va_arg (argp, int);\n+\n+  res = p[i];\n+  __builtin_printf (\"%d\\n\", res);\n+\n+  return res;\n+}\n+\n+int mpx_test (int argc, const char **argv)\n+{\n+  rd (buf1, 2, 10.0d, 10.0d, buf, 100, buf1);\n+  return 0;\n+}"}]}