{"sha": "b6e2128e2874ef25a1aa1353e96411cca636b5d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlMjEyOGUyODc0ZWYyNWExYWExMzUzZTk2NDExY2NhNjM2YjVkMQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-03-29T22:57:23Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-03-29T22:57:23Z"}, "message": "intrinsic.c (conv_name): Let gfc_get_string handle the format.\n\n* intrinsic.c (conv_name): Let gfc_get_string handle the format.\n(find_conv): Compare pointers instead of calling strcmp.\n(find_sym): Likewise, but ensure that the compared pointer is in\nthe global string table.\n\nFrom-SVN: r123346", "tree": {"sha": "a5077074ab3565617c5fe0636b407eacfbfe02de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5077074ab3565617c5fe0636b407eacfbfe02de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e2128e2874ef25a1aa1353e96411cca636b5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e2128e2874ef25a1aa1353e96411cca636b5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e2128e2874ef25a1aa1353e96411cca636b5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e2128e2874ef25a1aa1353e96411cca636b5d1/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e6a3779735a3e18895316ecb9280dd9009ff1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e6a3779735a3e18895316ecb9280dd9009ff1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e6a3779735a3e18895316ecb9280dd9009ff1c"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "69364bc394447b6123ea3221cfc4d8c37af8efeb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e2128e2874ef25a1aa1353e96411cca636b5d1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e2128e2874ef25a1aa1353e96411cca636b5d1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b6e2128e2874ef25a1aa1353e96411cca636b5d1", "patch": "@@ -1,3 +1,10 @@\n+2007-03-29  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\t* intrinsic.c (conv_name): Let gfc_get_string handle the format.\n+\t(find_conv): Compare pointers instead of calling strcmp.\n+\t(find_sym): Likewise, but ensure that the compared pointer is in\n+\tthe global string table.\n+\n 2007-03-28  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* gfc-internals.texi: Fix output filename.  Merge type index into"}, {"sha": "7990988c55e78ff69663a28282c3bc63a93a73c7", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e2128e2874ef25a1aa1353e96411cca636b5d1/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e2128e2874ef25a1aa1353e96411cca636b5d1/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=b6e2128e2874ef25a1aa1353e96411cca636b5d1", "patch": "@@ -120,12 +120,9 @@ gfc_get_intrinsic_sub_symbol (const char *name)\n static const char *\n conv_name (gfc_typespec *from, gfc_typespec *to)\n {\n-  static char name[30];\n-\n-  sprintf (name, \"__convert_%c%d_%c%d\", gfc_type_letter (from->type),\n-\t   from->kind, gfc_type_letter (to->type), to->kind);\n-\n-  return gfc_get_string (name);\n+  return gfc_get_string (\"__convert_%c%d_%c%d\",\n+\t\t\t gfc_type_letter (from->type), from->kind,\n+\t\t\t gfc_type_letter (to->type), to->kind);\n }\n \n \n@@ -144,7 +141,7 @@ find_conv (gfc_typespec *from, gfc_typespec *to)\n   sym = conversion;\n \n   for (i = 0; i < nconv; i++, sym++)\n-    if (strcmp (target, sym->name) == 0)\n+    if (target == sym->name)\n       return sym;\n \n   return NULL;\n@@ -701,9 +698,14 @@ add_sym_5s (const char *name, int elemental, bt type, int kind, int standard,\n static gfc_intrinsic_sym *\n find_sym (gfc_intrinsic_sym *start, int n, const char *name)\n {\n+  /* name may be a user-supplied string, so we must first make sure\n+     that we're comparing against a pointer into the global string\n+     table.  */\n+  const char *p = gfc_get_string (name);\n+\n   while (n > 0)\n     {\n-      if (strcmp (name, start->name) == 0)\n+      if (p == start->name)\n \treturn start;\n \n       start++;"}]}