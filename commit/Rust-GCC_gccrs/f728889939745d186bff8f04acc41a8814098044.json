{"sha": "f728889939745d186bff8f04acc41a8814098044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyODg4OTkzOTc0NWQxODZiZmY4ZjA0YWNjNDFhODgxNDA5ODA0NA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-09-09T00:27:47Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-09-09T00:27:47Z"}, "message": "config.gcc (i?86-*-darwin): Add 64-bit HWI support.\n\n2006-09-08  Eric Christopher  <echristo@apple.com>\n\n        * config.gcc (i?86-*-darwin): Add 64-bit HWI support.\n        * config/t-slibgcc-darwin: Support x86_64 multilib.\n        * config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION):\n        Return 1 for x86_64-darwin.\n        * config/i386/t-darwin: Add m64 multilib.\n        (LIB2_SIDITI_CONV_FUNCS): Use.\n        (LIB2FUNCS_EXTRA): Ditto.\n        * config/i386/darwin.h: Support x86_64.\n        * config/i386/i386.c (override_options): Turn on flag_pic\n        for x86_64-darwin. Disable flag_omit_pointer.\n        (get_pc_thunk_name): Assert !TARGET_64BIT.\n        (legitimate_address_p): Disable machopic addressing for\n        x86_64.\n        (legitimize_pic_address): Ditto.\n        (ix86_expand_move): Ditto.\n        (ix86_expand_call): Ditto.\n        (machopic_output_stub): Ditto.\n        * config/darwin.c (machopic_select_section): Support literal16.\n        (machopic_select_rtx_section): Ditto.\n        * config/darwin-sections.def: Ditto.\n        * config/darwin-64.c: New.\n\n2006-09-08  Eric Christopher  <echristo@apple.com>\n\n        * gcc.target/i386/20060512-3.c: Run test on ilp32 only.\n        * gcc.target/i386/memcpy-1.c: Ditto.\n        * gcc.target/i386/asm-1.c: Ditto.\n        * gcc.target/i386/20060512-4.c: Ditto.\n        * gcc.target/i386/compress-float-387.c: Ditto.\n        * gcc.target/i386/20060512-1.c: Ditto.\n        * gcc.target/i386/compress-float-sse.c: Ditto.\n        * gcc.target/i386/20060512-2.c: Ditto.\n        * gcc.target/i386/compress-float-sse-pic.c: Ditto.\n        * gcc.target/i386/stack-prot-kernel.c: Ditto.\n        * gcc.target/i386/compress-float-387-pic.c: Ditto.\n        * gcc.dg/pr26449.c: Ditto.\n        * gcc.dg/attr-ms_struct-2.c: Ditto.\n        * gcc.dg/attr-ms_struct-1.c: Ditto.\n        * gcc.misc-tests/linkage.exp: Fix 64-bit darwin support.\n\n2006-09-08  Eric Christopher  <echristo@apple.com>\n\n        * configure.ac: Add 64-bit HWI support for i?86-darwin.\n\nFrom-SVN: r116795", "tree": {"sha": "6362c5766828bc7e24a35770180c840450d9e70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6362c5766828bc7e24a35770180c840450d9e70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f728889939745d186bff8f04acc41a8814098044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f728889939745d186bff8f04acc41a8814098044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f728889939745d186bff8f04acc41a8814098044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f728889939745d186bff8f04acc41a8814098044/comments", "author": null, "committer": null, "parents": [{"sha": "c467c5ddd68d7335a79837d3d2253f72ac88042a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c467c5ddd68d7335a79837d3d2253f72ac88042a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c467c5ddd68d7335a79837d3d2253f72ac88042a"}], "stats": {"total": 450, "additions": 349, "deletions": 101}, "files": [{"sha": "2e9ec6976bcd63b511a562961505939877b9bada", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,3 +1,27 @@\n+2006-09-08  Eric Christopher  <echristo@apple.com>\n+\n+\t* config.gcc (i?86-*-darwin): Add 64-bit HWI support.\n+\t* config/t-slibgcc-darwin: Support x86_64 multilib.\n+\t* config/i386/i386.h (JUMP_TABLES_IN_TEXT_SECTION):\n+\tReturn 1 for x86_64-darwin.\n+\t* config/i386/t-darwin: Add m64 multilib.\n+\t(LIB2_SIDITI_CONV_FUNCS): Use.\n+\t(LIB2FUNCS_EXTRA): Ditto.\n+\t* config/i386/darwin.h: Support x86_64.\n+\t* config/i386/i386.c (override_options): Turn on flag_pic\n+\tfor x86_64-darwin. Disable flag_omit_pointer.\n+\t(get_pc_thunk_name): Assert !TARGET_64BIT.\n+\t(legitimate_address_p): Disable machopic addressing for\n+\tx86_64.\n+\t(legitimize_pic_address): Ditto.\n+\t(ix86_expand_move): Ditto.\n+\t(ix86_expand_call): Ditto.\n+\t(machopic_output_stub): Ditto.\n+\t* config/darwin.c (machopic_select_section): Support literal16.\n+\t(machopic_select_rtx_section): Ditto.\n+\t* config/darwin-sections.def: Ditto.\n+\t* config/darwin-64.c: New.\n+\n 2006-09-08  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/28504"}, {"sha": "efa6c8d867d161e3663a4beaac89e3f7c3342aad", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -438,7 +438,7 @@ case ${target} in\n           ;;\n       esac\n       ;;\n-    *) \n+    *)\n       echo 'Unknown thread configuration for FreeBSD'\n       exit 1\n       ;;\n@@ -693,13 +693,13 @@ arm*-*-netbsd*)\n \tuse_collect2=yes\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n-\ttm_file=\"dbxelf.h elfos.h linux.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\" \n+\ttm_file=\"dbxelf.h elfos.h linux.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n \ttmake_file=\"${tmake_file} t-linux arm/t-arm\"\n \tcase ${target} in\n \tarm*-*-linux-*eabi)\n \t    tm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h\"\n \t    tmake_file=\"$tmake_file arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi\"\n-  \t    # The BPABI long long divmod functions return a 128-bit value in \n+  \t    # The BPABI long long divmod functions return a 128-bit value in\n \t    # registers r0-r3.  Correctly modeling that requires the use of\n \t    # TImode.\n \t    need_64bit_hwint=yes\n@@ -721,7 +721,7 @@ arm*-*-ecos-elf)\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \t;;\n arm*-*-eabi* | arm*-*-symbianelf* )\n-\t# The BPABI long long divmod functions return a 128-bit value in \n+\t# The BPABI long long divmod functions return a 128-bit value in\n \t# registers r0-r3.  Correctly modeling that requires the use of\n \t# TImode.\n \tneed_64bit_hwint=yes\n@@ -965,7 +965,7 @@ hppa*64*-*-hpux11*)\n \t\t     libgcc_stub.a\"\n \tcase x${enable_threads} in\n \txyes | xposix )\n-\t\tthread_file=posix \n+\t\tthread_file=posix\n \t\t;;\n \tesac\n \tgas=yes\n@@ -994,14 +994,14 @@ hppa[12]*-*-hpux11*)\n \tfi\n \tcase x${enable_threads} in\n \txyes | xposix )\n-\t\tthread_file=posix \n+\t\tthread_file=posix\n \t\t;;\n \tesac\n \tuse_collect2=yes\n \tgas=yes\n \t;;\n i[34567]86-*-darwin*)\n-\t# All the configuration is presently done generically.\n+\tneed_64bit_hwint=yes\n \t;;\n i[34567]86-*-elf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h\"\n@@ -1192,7 +1192,7 @@ i[34567]86-*-solaris2*)\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n-\t\t# Solaris 2.10 provides crt1.o, crti.o, crtn.o, and gcrt1.o as \n+\t\t# Solaris 2.10 provides crt1.o, crti.o, crtn.o, and gcrt1.o as\n \t\t# part of the base system.\n \t\textra_parts=\"gmon.o crtbegin.o crtend.o\"\n \t\t;;\n@@ -1540,7 +1540,7 @@ mips*-*-openbsd*)\n \ttarget_cpu_default=\"MASK_ABICALLS\"\n \ttm_file=\"mips/mips.h openbsd.h mips/openbsd.h mips/sdb.h\"\n \tcase ${target} in\n-\tmips*el-*-openbsd*) \n+\tmips*el-*-openbsd*)\n \t    tm_defines=\"${tm_defines} TARGET_ENDIAN_DEFAULT=0\";;\n \t*)  tm_defines=\"${tm_defines} TARGET_ENDIAN_DEFAULT=MASK_BIG_ENDIAN\";;\n         esac\n@@ -1688,7 +1688,7 @@ powerpc-*-darwin*)\n \textra_parts=\"crt2.o\"\n \tcase ${target} in\n \t  *-darwin1[0-9]* | *-darwin[8-9]*)\n-\t    tmake_file=\"${tmake_file} rs6000/t-darwin8\" \n+\t    tmake_file=\"${tmake_file} rs6000/t-darwin8\"\n \t    tm_file=\"${tm_file} rs6000/darwin8.h\"\n \t    ;;\n \t  *-darwin7*)\n@@ -2001,7 +2001,7 @@ sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\\n \t\ttm_file=\"sh/symbian-pre.h sh/little.h ${tm_file} sh/symbian-post.h\"\n \t\textra_objs=\"symbian.o\"\n \t\textra_parts=\"crt1.o crti.o crtn.o crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n-\t\t;;\t\n+\t\t;;\n \tesac\n \t# sed el/eb endian suffixes away to avoid confusion with sh[23]e\n \tcase `echo ${target} | sed 's/e[lb]-/-/'` in"}, {"sha": "33094e30785c5fff74956a4e3d8646a33f950aca", "filename": "gcc/config/darwin-64.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-64.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -0,0 +1,77 @@\n+/* Functions shipped in the ppc64 and x86_64 version of libgcc_s.1.dylib\n+   in older Mac OS X versions, preserved for backwards compatibility.\n+   Copyright (C) 2006  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#if defined (__ppc64__) || defined (__x86_64__)\n+/* Many of these functions have probably never been used by anyone\n+   anywhere on these targets, but it's hard to prove this, so they're defined\n+   here.  None are actually necessary, as demonstrated below by defining\n+   each function using the operation it implements.  */\n+\n+typedef long DI;\n+typedef unsigned long uDI;\n+typedef int SI;\n+typedef unsigned int uSI;\n+typedef int word_type __attribute__ ((mode (__word__)));\n+\n+DI __ashldi3 (DI x, word_type c);\n+DI __ashrdi3 (DI x, word_type c);\n+int __clzsi2 (uSI x);\n+word_type __cmpdi2 (DI x, DI y);\n+int __ctzsi2 (uSI x);\n+DI __divdi3 (DI x, DI y);\n+uDI __lshrdi3 (uDI x, word_type c);\n+DI __moddi3 (DI x, DI y);\n+DI __muldi3 (DI x, DI y);\n+DI __negdi2 (DI x);\n+int __paritysi2 (uSI x);\n+int __popcountsi2 (uSI x);\n+word_type __ucmpdi2 (uDI x, uDI y);\n+uDI __udivdi3 (uDI x, uDI y);\n+uDI __udivmoddi4 (uDI x, uDI y, uDI *r);\n+uDI __umoddi3 (uDI x, uDI y);\n+\n+DI __ashldi3 (DI x, word_type c) { return x << c; }\n+DI __ashrdi3 (DI x, word_type c) { return x >> c; }\n+int __clzsi2 (uSI x) { return __builtin_clz (x); }\n+word_type __cmpdi2 (DI x, DI y) { return x < y ? 0 : x == y ? 1 : 2; }\n+int __ctzsi2 (uSI x) { return __builtin_ctz (x); }\n+DI __divdi3 (DI x, DI y) { return x / y; }\n+uDI __lshrdi3 (uDI x, word_type c) { return x >> c; }\n+DI __moddi3 (DI x, DI y) { return x % y; }\n+DI __muldi3 (DI x, DI y) { return x * y; }\n+DI __negdi2 (DI x) { return -x; }\n+int __paritysi2 (uSI x) { return __builtin_parity (x); }\n+int __popcountsi2 (uSI x) { return __builtin_popcount (x); }\n+word_type __ucmpdi2 (uDI x, uDI y) { return x < y ? 0 : x == y ? 1 : 2; }\n+uDI __udivdi3 (uDI x, uDI y) { return x / y; }\n+uDI __udivmoddi4 (uDI x, uDI y, uDI *r) { *r = x % y; return x / y; }\n+uDI __umoddi3 (uDI x, uDI y) { return x % y; }\n+\n+#endif /* __ppc64__ || __x86_64__ */"}, {"sha": "148b77511eac2a6dc27c3bf36560c37007f4e652", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -14,6 +14,7 @@ DEF_SECTION (data_coal_section, SECTION_WRITE,\n DEF_SECTION (cstring_section, SECTION_MERGE, \".cstring\", 0)\n DEF_SECTION (literal4_section, SECTION_MERGE, \".literal4\", 0)\n DEF_SECTION (literal8_section, SECTION_MERGE, \".literal8\", 0)\n+DEF_SECTION (literal16_section, SECTION_MERGE, \".literal16\", 0)\n DEF_SECTION (constructor_section, 0, \".constructor\", 0)\n DEF_SECTION (mod_init_section, 0, \".mod_init_func\", 0)\n DEF_SECTION (mod_term_section, 0, \".mod_term_func\", 0)"}, {"sha": "77e2f0e31c418940a3c1975e3546cb866bd84b20", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1136,6 +1136,11 @@ machopic_select_section (tree exp, int reloc,\n \t       TREE_INT_CST_LOW (size) == 8 &&\n \t       TREE_INT_CST_HIGH (size) == 0)\n \treturn darwin_sections[literal8_section];\n+      else if (TARGET_64BIT\n+\t       && TREE_CODE (size) == INTEGER_CST\n+\t       && TREE_INT_CST_LOW (size) == 16\n+\t       && TREE_INT_CST_HIGH (size) == 0)\n+\treturn darwin_sections[literal16_section];\n       else\n \treturn base_section;\n     }\n@@ -1234,6 +1239,10 @@ machopic_select_rtx_section (enum machine_mode mode, rtx x,\n \t   && (GET_CODE (x) == CONST_INT\n \t       || GET_CODE (x) == CONST_DOUBLE))\n     return darwin_sections[literal4_section];\n+  else if (GET_MODE_SIZE (mode) == 16\n+\t   && (GET_CODE (x) == CONST_INT\n+\t       || GET_CODE (x) == CONST_DOUBLE))\n+    return darwin_sections[literal16_section];\n   else if (MACHOPIC_INDIRECT\n \t   && (GET_CODE (x) == SYMBOL_REF\n \t       || GET_CODE (x) == CONST"}, {"sha": "74d0f8c92ac68b76f7256c590278322ae248b917", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 63, "deletions": 9, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -25,18 +25,41 @@ Boston, MA 02110-1301, USA.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (i686 Darwin)\");\n \n+#undef  TARGET_64BIT\n+#define TARGET_64BIT (target_flags & MASK_64BIT)\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __x86_64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n #undef TARGET_FPMATH_DEFAULT\n #define TARGET_FPMATH_DEFAULT (TARGET_SSE ? FPMATH_SSE : FPMATH_387)\n \n #define TARGET_OS_CPP_BUILTINS()                \\\n   do                                            \\\n     {                                           \\\n-      builtin_define (\"__i386__\");              \\\n       builtin_define (\"__LITTLE_ENDIAN__\");     \\\n       darwin_cpp_builtins (pfile);\t\t\\\n     }                                           \\\n   while (0)\n \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef MAX_BITS_PER_WORD\n+#define MAX_BITS_PER_WORD 64\n+\n #undef FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN\n #define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN (0)\n \n@@ -48,13 +71,16 @@ Boston, MA 02110-1301, USA.  */\n   %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }}\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"-arch i386 -force_cpusubtype_ALL\"\n+#define ASM_SPEC \"-arch %(darwin_arch) -force_cpusubtype_ALL\"\n+\n+#define DARWIN_ARCH_SPEC \"%{m64:x86_64;:i386}\"\n+#define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n \n #undef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n-  { \"darwin_arch\", \"i386\" },\t\t\t\t\t\\\n-  { \"darwin_crt2\", \"\" },\t\t\t\t\t\\\n-  { \"darwin_subarch\", \"i386\" },\n+#define SUBTARGET_EXTRA_SPECS                                   \\\n+  { \"darwin_arch\", DARWIN_ARCH_SPEC },                          \\\n+  { \"darwin_crt2\", \"\" },                                        \\\n+  { \"darwin_subarch\", DARWIN_SUBARCH_SPEC },\n \n /* Use the following macro for any Darwin/x86-specific command-line option\n    translation.  */\n@@ -85,7 +111,7 @@ extern void darwin_x86_file_end (void);\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387.  */\n \n-#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_128BIT_LONG_DOUBLE | MASK_ALIGN_DOUBLE)\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_128BIT_LONG_DOUBLE)\n \n /* For now, disable dynamic-no-pic.  We'll need to go through i386.c\n    with a fine-tooth comb looking for refs to flag_pic!  */\n@@ -109,7 +135,7 @@ extern void darwin_x86_file_end (void);\n #define ASM_BYTE_OP \"\\t.byte\\t\"\n #define ASM_SHORT \"\\t.word\\t\"\n #define ASM_LONG \"\\t.long\\t\"\n-/* Darwin as doesn't do \".quad\".  */\n+#define ASM_QUAD \"\\t.quad\\t\"\n \n #define SUBTARGET_ENCODE_SECTION_INFO  darwin_encode_section_info\n \n@@ -144,7 +170,7 @@ extern void darwin_x86_file_end (void);\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      if (MACHOPIC_INDIRECT)\t\t\t\t\t\t\\\n+      if (MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  const char *name = machopic_mcount_stub_name ();\t\t\\\n \t  fprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\\n@@ -153,6 +179,10 @@ extern void darwin_x86_file_end (void);\n       else fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n     } while (0)\n \n+/* Darwin on x86_64 uses dwarf-2 by default.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE (TARGET_64BIT ? DWARF2_DEBUG : DBX_DEBUG)\n+\n /* Darwin uses the standard DWARF register numbers but the default\n    register numbers for STABS.  Fortunately for 64-bit code the\n    default and the standard are the same.  */\n@@ -224,6 +254,30 @@ __enable_execute_stack (void *addr)                                     \\\n #undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES darwin_set_default_type_attributes\n \n+/* For 64-bit, we need to add 4 because @GOTPCREL is relative to the\n+   end of the instruction, but without the 4 we'd only have the right\n+   address for the start of the instruction.  */\n+#undef ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE)\t\\\n+  if (TARGET_64BIT)\t\t\t\t                                \\\n+    {                                                                           \\\n+      if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_pcrel)\t\t\t\\\n+        {                                                                       \\\n+\t   fputs (ASM_LONG, FILE);                                              \\\n+\t   assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\t   fputs (\"+4@GOTPCREL\", FILE);                                         \\\n+\t   goto DONE;                                                           \\\n+        }\t\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\t\\\n+  else                                                                          \\\n+    {\t\t\t\t\t\t\t\t\t\t\\\n+      if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1))                      \\\n+        {                                                                       \\\n+          darwin_non_lazy_pcrel (FILE, ADDR);                                   \\\n+          goto DONE;\t\t\t\t\t\t\t\t\\\n+        }                                                                       \\\n+    }\n+\n /* This needs to move since i386 uses the first flag and other flags are\n    used in Mach-O.  */\n #undef MACHO_SYMBOL_FLAG_VARIABLE"}, {"sha": "7f954e29babc728128bf29248fcb189f810bce28", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1538,12 +1538,17 @@ override_options (void)\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n+  /* -fPIC is the default for x86_64.  */\n+  if (TARGET_MACHO && TARGET_64BIT)\n+    flag_pic = 2;\n+\n   /* Set the default values for switches whose default depends on TARGET_64BIT\n      in case they weren't overwritten by command line options.  */\n   if (TARGET_64BIT)\n     {\n+      /* Mach-O doesn't support omitting the frame pointer for now.  */\n       if (flag_omit_frame_pointer == 2)\n-\tflag_omit_frame_pointer = 1;\n+\tflag_omit_frame_pointer = (TARGET_MACHO ? 0 : 1);\n       if (flag_asynchronous_unwind_tables == 2)\n \tflag_asynchronous_unwind_tables = 1;\n       if (flag_pcc_struct_return == 2)\n@@ -4788,6 +4793,8 @@ static int pic_labels_used;\n static void\n get_pc_thunk_name (char name[32], unsigned int regno)\n {\n+  gcc_assert (!TARGET_64BIT);\n+\n   if (USE_HIDDEN_LINKONCE)\n     sprintf (name, \"__i686.get_pc_thunk.%s\", reg_names[regno]);\n   else\n@@ -6174,7 +6181,7 @@ legitimate_pic_address_disp_p (rtx disp)\n \t  if (GET_CODE (op1) != CONST_INT\n \t      || INTVAL (op1) >= 16*1024*1024\n \t      || INTVAL (op1) < -16*1024*1024)\n-\t    break;\n+            break;\n \t  if (GET_CODE (op0) == LABEL_REF)\n \t    return true;\n \t  if (GET_CODE (op0) != SYMBOL_REF)\n@@ -6426,12 +6433,16 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n \t    goto report_error;\n \t  }\n \n-      else if (flag_pic && (SYMBOLIC_CONST (disp)\n+      else if (SYMBOLIC_CONST (disp)\n+\t       && (flag_pic\n+\t\t   || (TARGET_MACHO\n #if TARGET_MACHO\n-\t\t\t    && !machopic_operand_p (disp)\n+\t\t       && MACHOPIC_INDIRECT\n+\t\t       && !machopic_operand_p (disp)\n #endif\n-\t\t\t    ))\n+\t       )))\n \t{\n+\n \tis_legitimate_pic:\n \t  if (TARGET_64BIT && (index || base))\n \t    {\n@@ -6544,10 +6555,13 @@ legitimize_pic_address (rtx orig, rtx reg)\n   rtx base;\n \n #if TARGET_MACHO\n-  if (reg == 0)\n-    reg = gen_reg_rtx (Pmode);\n-  /* Use the generic Mach-O PIC machinery.  */\n-  return machopic_legitimize_pic_address (orig, GET_MODE (orig), reg);\n+  if (TARGET_MACHO && !TARGET_64BIT)\n+    {\n+      if (reg == 0)\n+\treg = gen_reg_rtx (Pmode);\n+      /* Use the generic Mach-O PIC machinery.  */\n+      return machopic_legitimize_pic_address (orig, GET_MODE (orig), reg);\n+    }\n #endif\n \n   if (TARGET_64BIT && legitimate_pic_address_disp_p (addr))\n@@ -8909,27 +8923,32 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \n   if (flag_pic && mode == Pmode && symbolic_operand (op1, Pmode))\n     {\n+      if (TARGET_MACHO && !TARGET_64BIT)\n+\t{\n #if TARGET_MACHO\n-      if (MACHOPIC_PURE)\n-\t{\n-\t  rtx temp = ((reload_in_progress\n-\t\t       || ((op0 && GET_CODE (op0) == REG)\n-\t\t\t   && mode == Pmode))\n-\t\t      ? op0 : gen_reg_rtx (Pmode));\n-\t  op1 = machopic_indirect_data_reference (op1, temp);\n-\t  op1 = machopic_legitimize_pic_address (op1, mode,\n-\t\t\t\t\t\t temp == op1 ? 0 : temp);\n-\t}\n-      else if (MACHOPIC_INDIRECT)\n-\top1 = machopic_indirect_data_reference (op1, 0);\n-      if (op0 == op1)\n-\treturn;\n-#else\n-      if (GET_CODE (op0) == MEM)\n-\top1 = force_reg (Pmode, op1);\n+\t  if (MACHOPIC_PURE)\n+\t    {\n+\t      rtx temp = ((reload_in_progress\n+\t\t\t   || ((op0 && GET_CODE (op0) == REG)\n+\t\t\t       && mode == Pmode))\n+\t\t\t  ? op0 : gen_reg_rtx (Pmode));\n+\t      op1 = machopic_indirect_data_reference (op1, temp);\n+\t      op1 = machopic_legitimize_pic_address (op1, mode,\n+\t\t\t\t\t\t     temp == op1 ? 0 : temp);\n+\t    }\n+\t  else if (MACHOPIC_INDIRECT)\n+\t    op1 = machopic_indirect_data_reference (op1, 0);\n+\t  if (op0 == op1)\n+\t    return;\n+#endif\n+\t}\n       else\n-\top1 = legitimize_address (op1, op1, Pmode);\n-#endif /* TARGET_MACHO */\n+\t{\n+\t  if (GET_CODE (op0) == MEM)\n+\t    op1 = force_reg (Pmode, op1);\n+\t  else\n+\t    op1 = legitimize_address (op1, op1, Pmode);\n+\t}\n     }\n   else\n     {\n@@ -13329,23 +13348,28 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n     pop = NULL;\n   gcc_assert (!TARGET_64BIT || !pop);\n \n+  if (TARGET_MACHO && !TARGET_64BIT)\n+    {\n #if TARGET_MACHO\n-  if (flag_pic && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n-    fnaddr = machopic_indirect_call_target (fnaddr);\n-#else\n-  /* Static functions and indirect calls don't need the pic register.  */\n-  if (! TARGET_64BIT && flag_pic\n-      && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n-      && ! SYMBOL_REF_LOCAL_P (XEXP (fnaddr, 0)))\n-    use_reg (&use, pic_offset_table_rtx);\n+      if (flag_pic && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n+\tfnaddr = machopic_indirect_call_target (fnaddr);\n+#endif\n+    }\n+  else\n+    {\n+      /* Static functions and indirect calls don't need the pic register.  */\n+      if (! TARGET_64BIT && flag_pic\n+\t  && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n+\t  && ! SYMBOL_REF_LOCAL_P (XEXP (fnaddr, 0)))\n+\tuse_reg (&use, pic_offset_table_rtx);\n+    }\n \n   if (TARGET_64BIT && INTVAL (callarg2) >= 0)\n     {\n       rtx al = gen_rtx_REG (QImode, 0);\n       emit_move_insn (al, callarg2);\n       use_reg (&use, al);\n     }\n-#endif /* TARGET_MACHO */\n \n   if (! call_insn_operand (XEXP (fnaddr, 0), Pmode))\n     {\n@@ -17249,6 +17273,9 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   char *binder_name, *symbol_name, lazy_ptr_name[32];\n   int label = ++current_machopic_label_num;\n \n+  /* For 64-bit we shouldn't get here.  */\n+  gcc_assert (!TARGET_64BIT);\n+\n   /* Lose our funky encoding stuff so it doesn't contaminate the stub.  */\n   symb = (*targetm.strip_name_encoding) (symb);\n "}, {"sha": "9474964255b62b1b3b31946d6b7c860de842cd0a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -2011,11 +2011,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n   ix86_output_addr_diff_elt ((FILE), (VALUE), (REL))\n \n-/* Under some conditions we need jump tables in the text section, because\n-   the assembler cannot handle label differences between sections.  */\n+/* Under some conditions we need jump tables in the text section,\n+   because the assembler cannot handle label differences between\n+   sections.  This is the case for x86_64 on Mach-O for example.  */\n \n #define JUMP_TABLES_IN_TEXT_SECTION \\\n-  (!TARGET_64BIT && flag_pic && !HAVE_AS_GOTOFF_IN_DATA)\n+  (flag_pic && ((TARGET_MACHO && TARGET_64BIT) \\\n+   || (!TARGET_64BIT && !HAVE_AS_GOTOFF_IN_DATA)))\n \n /* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n    and switch back.  For x86 we do this only to save a few bytes that"}, {"sha": "e79f3355aaa192fb9aa8ea6638e77252ba7785c0", "filename": "gcc/config/i386/t-darwin", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Fi386%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-darwin?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1 +1,5 @@\n SHLIB_VERPFX = $(srcdir)/config/i386/darwin-libgcc\n+MULTILIB_OPTIONS = m64\n+MULTILIB_DIRNAMES = x86_64\n+LIB2_SIDITI_CONV_FUNCS=yes\n+LIB2FUNCS_EXTRA = $(srcdir)/config/darwin-64.c"}, {"sha": "0c6eded3de4f9aa80294c914cd8683c4f7ded5c6", "filename": "gcc/config/t-slibgcc-darwin", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Ft-slibgcc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Fconfig%2Ft-slibgcc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-darwin?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -92,5 +92,10 @@ install-darwin-libgcc-stubs : $(INSTALL_FILES) installdirs\n \telse true; fi\n \t$(LN_S) libgcc_s.1.dylib \\\n \t\t$(DESTDIR)$(slibdir)/libgcc_s_ppc64.1.dylib\n+\tif [ -f $(DESTDIR)$(slibdir)/libgcc_s_x86_64.1.dylib ]; then \\\n+\t  rm -f $(DESTDIR)$(slibdir)/libgcc_s_x86_64.1.dylib; \\\n+\telse true; fi\n+\t$(LN_S) libgcc_s.1.dylib \\\n+\t\t$(DESTDIR)$(slibdir)/libgcc_s_x86_64.1.dylib\n \n INSTALL_LIBGCC = install-darwin-libgcc-stubs install-multilib"}, {"sha": "96eebdf76a1355415a9a2b67971282e2f8c24ce0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,3 +1,21 @@\n+2006-09-08  Eric Christopher  <echristo@apple.com>\n+\n+\t* gcc.target/i386/20060512-3.c: Run test on ilp32 only.\n+\t* gcc.target/i386/memcpy-1.c: Ditto.\n+\t* gcc.target/i386/asm-1.c: Ditto.\n+\t* gcc.target/i386/20060512-4.c: Ditto.\n+\t* gcc.target/i386/compress-float-387.c: Ditto.\n+\t* gcc.target/i386/20060512-1.c: Ditto.\n+\t* gcc.target/i386/compress-float-sse.c: Ditto.\n+\t* gcc.target/i386/20060512-2.c: Ditto.\n+\t* gcc.target/i386/compress-float-sse-pic.c: Ditto.\n+\t* gcc.target/i386/stack-prot-kernel.c: Ditto.\n+\t* gcc.target/i386/compress-float-387-pic.c: Ditto.\n+\t* gcc.dg/pr26449.c: Ditto.\n+\t* gcc.dg/attr-ms_struct-2.c: Ditto.\n+\t* gcc.dg/attr-ms_struct-1.c: Ditto.\n+\t* gcc.misc-tests/linkage.exp: Fix 64-bit darwin support.\n+\n 2006-09-08  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/28504\n@@ -127,7 +145,7 @@\n \n \t* g++.dg/template/typedef4.C: Adjust error markers.\n \t* g++.dg/template/typedef5.C: Likewise.\n-\t\n+\n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/28878\n@@ -244,8 +262,8 @@\n 2006-08-27  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/26573\n-\t* g++.dg/other/static2.C: New test. \n-\t\n+\t* g++.dg/other/static2.C: New test.\n+\n 2006-08-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/Wswitch-enum-2.c: New test case.\n@@ -270,7 +288,7 @@\n \t* g++.dg/template/void4.C: Likewise.\n \t* g++.dg/template/crash55.C: Likewise.\n \t* g++.dg/template/void7.C: Likewise\n-\t\n+\n 2006-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28588\n@@ -375,7 +393,7 @@\n \n 2006-08-23  Danny Smith  <dannysmith@users.sourceforge.net>\n \n-\tgcc.dg/attr-invalid.c:  Insert an \" |directive\" substitution into \n+\tgcc.dg/attr-invalid.c:  Insert an \" |directive\" substitution into\n \tdg-warning strings for dllimport.\n \n 2006-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -413,17 +431,17 @@\n \t* g++.dg/parse/ctor8.C: Likewise.\n \n \tPR c++/28741\n-\t* g++.dg/template/void7.C: New test. \n-\t\n+\t* g++.dg/template/void7.C: New test.\n+\n 2006-08-21  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/self_aggregate_with_zeros.adb: New test.\n \t* gnat.dg/self_aggregate_with_array.adb: New test.\n \n 2006-08-21  Mark Shinwell  <shinwell@codesourcery.com>\n- \n+\n  \t* g++.dg/eh/arm-vfp-unwind.C: New test.\n- \n+\n 2006-08-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28341\n@@ -462,7 +480,7 @@\n \t* gfortran.dg/array_initializer_2.f90: New test.\n \n \tPR fortran/18111\n-\t* gfortran.dg/unused_artificial_dummies_1.f90: New test. \n+\t* gfortran.dg/unused_artificial_dummies_1.f90: New test.\n \n \tPR fortran/28600\n \t* gfortran.dg/assumed_charlen_function_4.f90: New test.\n@@ -562,7 +580,7 @@\n \n \tPR c++/28594\n \t* g++.dg/template/void6.C: New test.\n-\t\n+\n 2006-08-15  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/28649\n@@ -658,7 +676,7 @@\n \n \tPR c++/28640\n \t* g++.dg/template/void5.C: New test.\n-\t\n+\n 2006-08-07  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* g++.dg/ext/visibility/class1.C (dg-require-visibility): Move\n@@ -725,7 +743,7 @@\n 2006-08-03  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/28347\n-\t* g++.dg/ext/typedef-init.C: Add new test for typedef \n+\t* g++.dg/ext/typedef-init.C: Add new test for typedef\n \tinitialization inside templates. Adjust existing error markers.\n \n 2006-08-03  Mark Mitchell  <mark@codesourcery.com>\n@@ -736,14 +754,14 @@\n 2006-08-03  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimization/27770\n-\t* lib/target-support.exp: New target keyword \"section_anchors\". \n+\t* lib/target-support.exp: New target keyword \"section_anchors\".\n \t* gcc.dg/vect/vect.exp: Add -fsection-anchors to compilation of some\n \ttests.\n \t* gcc.dg/vect/section-anchors-pr27770.c: New test.\n \t* gcc.dg/vect/vect-69.c: Removed. Replaced by:\n \t* gcc.dg/vect/section-anchors-vect-69.c: New test.\n \t* gcc.dg/vect/no-section-anchors-vect-69.c: New test.\n-\t\n+\n 2006-08-03  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/20060801-1.c: Add missing '}'.\n@@ -863,7 +881,7 @@\n \n \t* g++.dg/template/void2.C: Adjust error markers.\n \t* g++.dg/template/nontype5.C: Adjust error markers.\n-\t\n+\n 2006-07-27  Arjan van de Ven <arjan@linux.intel.com>\n \n \t* gcc.target/i386/stack-prot-kernel.c: New test.\n@@ -921,7 +939,7 @@\n \n \t* gcc.dg/visibility-11.c: Enlarge test array to 1024 bytes to\n \tavoid memcpy optimization.\n-\t\n+\n 2006-07-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25289\n@@ -1004,7 +1022,7 @@\n \n \tPR c++/28260\n \t* g++.dg/template/friend44.C: New test.\n-\t\n+\n 2006-07-18  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/27495\n@@ -1014,7 +1032,7 @@\n \n \t* gnat.dg/outer_agg_bitfield_constructor.adb: New test.\n \t* gnat.dg/nested_agg_bitfield_constructor.adb: New test.\n-\t\n+\n 2006-07-18  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/28286\n@@ -1087,7 +1105,7 @@\n \n \tPR c++/28269\n \t* g++.dg/template/crash54.C: New test.\n-\t\n+\n 2006-07-15  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28249\n@@ -1143,7 +1161,7 @@\n \n \tPR c++/27820\n \t* g++.dg/other/label1.C: New test.\n-\t\n+\n 2006-07-07   Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/28268\n@@ -1289,7 +1307,7 @@\n \n \tPR c++/28054\n \t* g++.dg/other/incomplete3.C: New test.\n-\t\n+\n 2006-06-24  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/28081\n@@ -1305,7 +1323,7 @@\n \n \t* gnat.dg/scalar_mode_agg_compare_loop.adb: New test.\n \t* gnat.dg/scalar_mode_agg_compare.adb: New test.\n-\t\n+\n 2006-06-23  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/dfp/usual-arith-conv-bad.c: New test.\n@@ -1318,7 +1336,7 @@\n 2006-06-23  Lee Millward  <lee.millward@gmail.com>\n \n \t* g++.dg/template/error22.C: Fix typo.\n-\t\n+\n 2006-06-23  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28112\n@@ -1327,7 +1345,7 @@\n 2006-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/varsize_temp.adb: New test.\n-\t\n+\n 2006-06-23  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/11468\n@@ -1361,7 +1379,7 @@\n \n \tPR c++/27821\n \t* g++.dg/template/error22.C: New test.\n-\t\n+\n 2006-06-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28111\n@@ -1475,7 +1493,7 @@\n \t* g++.dg/template/static26.C: New test.\n \n \tPR c++/27979\n-\t* g++.dg/expr/bitfield2.C: New test. \n+\t* g++.dg/expr/bitfield2.C: New test.\n \n \tPR c++/27884\n \t* g++.dg/parse/linkage2.C: New test.\n@@ -1531,7 +1549,7 @@\n \tPR c++/26559\n \t* g++.dg/template/builtin1.C: New test.\n \t* g++.dg/gomp/tpl-atomic-2.C: Remove XFAIL.\n-\t\n+\n \tPR c++/28018\n \t* g++.old-deja/g++.benjamin/14664-2.C: Expect error for array\n \tassignment.\n@@ -1560,7 +1578,7 @@\n 2006-06-13  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* gcc.c-torture/compile/20060609-1.c: New test.\n-\t\n+\n \tPR target/27863\n \t* gcc.c-torture/compile/pr27863.c: New test.\n "}, {"sha": "4cbff013f179e0d22d29477ff905078bd39ab0c0", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-1.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,5 +1,6 @@\n /* Test for MS structure sizes.  */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } }\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99\" } */\n \n extern void abort ();"}, {"sha": "58804525bf1268549103082e4bcbce4254b1f005", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,5 +1,6 @@\n /* Test for MS structure sizes.  */\n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } }\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99\" } */\n \n extern void abort ();"}, {"sha": "dc622fadce293d8b1bc78494e7c39e43ad755c05", "filename": "gcc/testsuite/gcc.dg/pr26449.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26449.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26449.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26449.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O1 -ftree-vectorize -march=pentium4 -std=c99\" } */\n \n void matmul_i4 (int bbase_yn, int xcount)\n@@ -9,7 +10,6 @@ void matmul_i4 (int bbase_yn, int xcount)\n \n   for (x = 0;  x < xcount;  x++)\n     {\n-      dest_y[x] += abase_n[x] * bbase_yn; \n+      dest_y[x] += abase_n[x] * bbase_yn;\n     }\n }\n-"}, {"sha": "a0805212d6b8445b4e249fcc516d356a5d7f4adc", "filename": "gcc/testsuite/gcc.misc-tests/linkage.exp", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -4,15 +4,15 @@\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n \n # This file used to be gcc.c-torture/special/special.exp, which\n # was written by Rob Savoye. (rob@cygnus.com)\n@@ -73,7 +73,14 @@ if [isnative] then {\n \t    } elseif [ string match \"*32-bit*\" $file_string ] {\n \t\tset native_cflags \"-m32\"\n \t    }\n-\t}\n+        } elseif [istarget \"*-*-darwin*\"] {\n+            set file_string [exec file \"linkage-x.o\"]\n+            if [ string match \"*64-bit*\" $file_string ] {\n+                set native_cflags \"-m64\"\n+            } elseif [ string match \"*32-bit*\" $file_string ] {\n+                set native_cflags \"-m32\"\n+            }\n+        }\n \n \tif [file exists \"linkage-y.o\"] then {\n \t    file delete \"linkage-y.o\""}, {"sha": "f0f0099ac6cfdfb95748056058f0c16e8e57c5d2", "filename": "gcc/testsuite/gcc.target/i386/20060512-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99 -msse2\" } */\n #include <emmintrin.h>\n __m128i __attribute__ ((__noinline__))"}, {"sha": "7e6f38e61971837de2b53de0e113582da52cef95", "filename": "gcc/testsuite/gcc.target/i386/20060512-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99\" } */\n int\n outer_function (int x, int y)"}, {"sha": "85472e63b630b84fcacece8f42bfee80b2b75db4", "filename": "gcc/testsuite/gcc.target/i386/20060512-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-std=gnu99 -msse2 -mstackrealign\" } */\n #include <emmintrin.h>\n __m128i __attribute__ ((__noinline__))"}, {"sha": "353b6ddfb404a63e78f7200b37b0fb7135b3c69e", "filename": "gcc/testsuite/gcc.target/i386/20060512-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-mstackrealign\" } */\n int\n outer_function (int x, int y)"}, {"sha": "348dc32dd326c3a553cecdad3e8e69eb3692ab20", "filename": "gcc/testsuite/gcc.target/i386/asm-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fasm-1.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-m32\" } */\n \n register unsigned int EAX asm (\"r14\"); /* { dg-error \"register name\" } */"}, {"sha": "0673f5d1c8ee134eb87715a6c4055a3ae5998b03", "filename": "gcc/testsuite/gcc.target/i386/compress-float-387-pic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387-pic.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86*-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O2 -march=pentium4 -mtune=prescott -mfpmath=387 -fpic\" } */\n double foo (double x) {\n   return x + 1.75;"}, {"sha": "912d942a0d7554195874a13823ac16adb05e4838", "filename": "gcc/testsuite/gcc.target/i386/compress-float-387.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-387.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86*-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O2 -march=pentium4 -mtune=prescott -mfpmath=387\" } */\n double foo (double x) {\n   return x + 1.75;"}, {"sha": "52cf463771691f9a52c9f82a5a3690253c5b04a4", "filename": "gcc/testsuite/gcc.target/i386/compress-float-sse-pic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse-pic.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86*-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O2 -march=pentium4 -mtune=prescott -mfpmath=sse -fpic\" } */\n double foo (double x) {\n   return x + 1.75;"}, {"sha": "59b5458d7587b322169356a098e9bacbf879c770", "filename": "gcc/testsuite/gcc.target/i386/compress-float-sse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcompress-float-sse.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86*-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O2 -march=pentium4 -mtune=prescott -mfpmath=sse\" } */\n double foo (double x) {\n   return x + 1.75;"}, {"sha": "ddb7c21f733ceb6a4355749e63b2fef4c5d15cb1", "filename": "gcc/testsuite/gcc.target/i386/memcpy-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmemcpy-1.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target i?86-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O2 -march=pentiumpro -minline-all-stringops\" } */\n /* { dg-final { scan-assembler \"rep\" } } */\n /* { dg-final { scan-assembler \"movs\" } } */"}, {"sha": "af16223a83beb66b464358e6749f106a156e7b07", "filename": "gcc/testsuite/gcc.target/i386/stack-prot-kernel.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-kernel.c?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target lp64 } } */\n+/* { dg-skip-if \"darwin x86_64 is pic\" { *-*-darwin* } { \"-m64\" } { \"\" } } */\n /* { dg-options \"-O2 -fstack-protector-all -mcmodel=kernel\" } */\n \n void test1 (int x)"}, {"sha": "b03241bff996c72bfc8178be6724c53584eec892", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -1,3 +1,7 @@\n+2006-09-08  Eric Christopher  <echristo@apple.com>\n+\n+\t* configure.ac: Add 64-bit HWI support for i?86-darwin.\n+\n 2006-08-14  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/28288\n@@ -120,7 +124,7 @@\n \n 2005-11-09  Per Bothner  <per@bothner.com>\n \t    Uros Bizjak  <uros@kss-loka.si>\n-\t\n+\n \tPR c/24101\n \t* init.c (read_original_filename): Temporarily set\n \tstate.in_directive before calling _cpp_lex_direct for\n@@ -162,7 +166,7 @@\n \tUse in print_dep assignment.\n \t* init.c (cpp_read_main_file): Pass additional arg to _cpp_find_file.\n \t* internal.h (_cpp_find_file): Add new parm to declaration.\n-\t\n+\n 2005-10-08  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* configure.ac: Require 64-bit int for arm*-*-*eabi*."}, {"sha": "71cd0e8978e6289539af202b0b60e5f2151f7ff1", "filename": "libcpp/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -7264,8 +7264,9 @@ INCINTL=\n XGETTEXT=\n GMSGFMT=\n POSUB=\n-if test -f ../intl/config.intl; then\n-  . ../intl/config.intl\n+\n+if test -f  ../intl/config.intl; then\n+  .  ../intl/config.intl\n fi\n echo \"$as_me:$LINENO: checking whether NLS is requested\" >&5\n echo $ECHO_N \"checking whether NLS is requested... $ECHO_C\" >&6\n@@ -8233,6 +8234,7 @@ case $target in\n \tx86_64-*-* | \\\n \tia64-*-* | \\\n \thppa*64*-*-* | parisc*64*-*-* | \\\n+\ti[34567]86-*-darwin[0-9]* | \\\n \ti[34567]86-*-solaris2.1[0-9]* | \\\n \tmips*-*-* | \\\n \tmmix-*-* | \\"}, {"sha": "71b6ff61f9baab6f26165368f596925dbd1d344d", "filename": "libcpp/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f728889939745d186bff8f04acc41a8814098044/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f728889939745d186bff8f04acc41a8814098044/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=f728889939745d186bff8f04acc41a8814098044", "patch": "@@ -118,6 +118,7 @@ case $target in\n \tx86_64-*-* | \\\n \tia64-*-* | \\\n \thppa*64*-*-* | parisc*64*-*-* | \\\n+\ti[34567]86-*-darwin[0-9]* | \\\n \ti[34567]86-*-solaris2.1[0-9]* | \\\n \tmips*-*-* | \\\n \tmmix-*-* | \\"}]}