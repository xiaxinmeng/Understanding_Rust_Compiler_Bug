{"sha": "aa4a0061bb12f205207feea29e61a4b03146a6fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0YTAwNjFiYjEyZjIwNTIwN2ZlZWEyOWU2MWE0YjAzMTQ2YTZmZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T18:05:57Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T18:05:57Z"}, "message": "config/mep: Use rtx_insn and rtx_code_label\n\ngcc/\n\t* config/mep/mep-protos.h (mep_mulr_source): Strengthen first\n\tparam from rtx to rtx_insn *.\n\t(mep_reuse_lo): Likewise for third param.\n\t(mep_use_post_modify_p): Likewise for first param.\n\t(mep_core_address_length): Likewise.\n\t(mep_cop_address_length): Likewise.\n\t(mep_final_prescan_insn): Likewise.\n\t(mep_store_data_bypass_p): Likewise for both params.\n\t(mep_mul_hilo_bypass_p): Likewise.\n\t(mep_ipipe_ldc_p): Likewise for param.\n\n\t* config/mep/mep.c (mep_mulr_source): Likewise for param \"insn\".\n\t(mep_rewrite_mult): Likewise.\n\t(mep_rewrite_mulsi3): Likewise.\n\t(mep_rewrite_maddsi3): Likewise.\n\t(mep_reuse_lo_p_1): Likewise.\n\t(mep_reuse_lo_p): Likewise.\n\t(mep_frame_expr): Likewise.\n\t(mep_make_parallel): Likewise for both params.\n\t(mep_use_post_modify_p_1): Likewise for param \"set_insn\" and\n\tlocal \"insn\".\n\t(mep_use_post_modify_p): Likewise for param \"insn\".\n\t(mep_core_address_length): Likewise.\n\t(mep_cop_address_length): Likewise.\n\t(mep_reg_set_in_function): Likewise for local \"insn\".\n\t(mep_asm_without_operands_p): Likewise.\n\t(F): Likewise for return type and param \"x\".\n\t(add_constant): Likewise for local \"insn\".\n\t(maybe_dead_move): Likewise for return type and local \"insn\".\n\t(mep_expand_prologue): Likewise for local \"insn\".\n\t(mep_final_prescan_insn): Likewise for param \"insn\".\n\t(mep_reorg_regmove): Likewise for param \"insns\" and locals \"insn\",\n\t\"next\", \"follow\", \"x\".\n\t(mep_insert_repeat_label_last): Likewise for return type, param\n\t\"last_insn\", and locals \"next\", \"prev\".  Strengthen param \"label\"\n\tfrom rtx to rtx_code_label *.\n\t(struct mep_doloop_begin): Strengthen field \"insn\" from rtx to\n\trtx_insn *.\n\t(struct mep_doloop_end): Likewise for fields \"insn\" and\n\t\"fallthrough\".\n\t(mep_reorg_repeat): Likewise for param \"insns\" and local \"insn\".\n\tStrengthen local \"repeat_label\" from rtx to rtx_code_label *.\n\t(mep_invertable_branch_p): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(mep_invert_branch): Likewise for params \"insn\" and \"after\".\n\t(mep_reorg_erepeat): Likewise for param \"insns\" and locals\n\t\"insn\", \"prev\", \"new_last\", \"barrier\", \"user\".  Strengthen local\n\t\"l\" from rtx to rtx_code_label *.\n\t(mep_jmp_return_reorg): Strengthen param \"insns\" and local \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(mep_reorg_addcombine): Likewise for param \"insns\" and locals\n\t\"i\", \"n\".\n\t(add_sp_insn_p): Likewise for param \"insn\".\n\t(mep_reorg_noframe): Likewise for param \"insns\" and locals\n\t\"start_frame_insn\", \"end_frame_insn\", \"next\".\n\t(mep_reorg): Likewise for local \"insns\".\n\t(mep_store_data_bypass_1): Likewise for param \"prev\".  Add checked\n\tcast.\n\t(mep_store_data_bypass_p): Likewise for params \"prev\", \"insn\".\n\t(mep_mul_hilo_bypass_p): Likewise.\n\t(mep_ipipe_ldc_p): Likewise for param \"insn\".\n\t(mep_make_bundle): Likewise for return type, param \"cop\" and local\n\t\"insn\", splitting out the latter into a new local \"seq\" for when it\n\tis a SEQUENCE rather than an insn.\n\t(core_insn_p): Likewise for param \"insn\".\n\t(mep_bundle_insns): Likewise for param \"insns\" and locals \"insn\",\n\t\"last\", \"first\", \"note\", \"prev\", \"core_insn\".\n\nFrom-SVN: r214448", "tree": {"sha": "e68791e27b94a3b1800dcbafdcc6d815d0e229b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68791e27b94a3b1800dcbafdcc6d815d0e229b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4a0061bb12f205207feea29e61a4b03146a6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4a0061bb12f205207feea29e61a4b03146a6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4a0061bb12f205207feea29e61a4b03146a6fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4a0061bb12f205207feea29e61a4b03146a6fe/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85e862afc5b19e0e3fc527cb61a7c9ea62c334a"}], "stats": {"total": 267, "additions": 173, "deletions": 94}, "files": [{"sha": "f6c727142abcd5af189dd7935ce87edf63c0b75d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa4a0061bb12f205207feea29e61a4b03146a6fe", "patch": "@@ -1,3 +1,73 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/mep/mep-protos.h (mep_mulr_source): Strengthen first\n+\tparam from rtx to rtx_insn *.\n+\t(mep_reuse_lo): Likewise for third param.\n+\t(mep_use_post_modify_p): Likewise for first param.\n+\t(mep_core_address_length): Likewise.\n+\t(mep_cop_address_length): Likewise.\n+\t(mep_final_prescan_insn): Likewise.\n+\t(mep_store_data_bypass_p): Likewise for both params.\n+\t(mep_mul_hilo_bypass_p): Likewise.\n+\t(mep_ipipe_ldc_p): Likewise for param.\n+\n+\t* config/mep/mep.c (mep_mulr_source): Likewise for param \"insn\".\n+\t(mep_rewrite_mult): Likewise.\n+\t(mep_rewrite_mulsi3): Likewise.\n+\t(mep_rewrite_maddsi3): Likewise.\n+\t(mep_reuse_lo_p_1): Likewise.\n+\t(mep_reuse_lo_p): Likewise.\n+\t(mep_frame_expr): Likewise.\n+\t(mep_make_parallel): Likewise for both params.\n+\t(mep_use_post_modify_p_1): Likewise for param \"set_insn\" and\n+\tlocal \"insn\".\n+\t(mep_use_post_modify_p): Likewise for param \"insn\".\n+\t(mep_core_address_length): Likewise.\n+\t(mep_cop_address_length): Likewise.\n+\t(mep_reg_set_in_function): Likewise for local \"insn\".\n+\t(mep_asm_without_operands_p): Likewise.\n+\t(F): Likewise for return type and param \"x\".\n+\t(add_constant): Likewise for local \"insn\".\n+\t(maybe_dead_move): Likewise for return type and local \"insn\".\n+\t(mep_expand_prologue): Likewise for local \"insn\".\n+\t(mep_final_prescan_insn): Likewise for param \"insn\".\n+\t(mep_reorg_regmove): Likewise for param \"insns\" and locals \"insn\",\n+\t\"next\", \"follow\", \"x\".\n+\t(mep_insert_repeat_label_last): Likewise for return type, param\n+\t\"last_insn\", and locals \"next\", \"prev\".  Strengthen param \"label\"\n+\tfrom rtx to rtx_code_label *.\n+\t(struct mep_doloop_begin): Strengthen field \"insn\" from rtx to\n+\trtx_insn *.\n+\t(struct mep_doloop_end): Likewise for fields \"insn\" and\n+\t\"fallthrough\".\n+\t(mep_reorg_repeat): Likewise for param \"insns\" and local \"insn\".\n+\tStrengthen local \"repeat_label\" from rtx to rtx_code_label *.\n+\t(mep_invertable_branch_p): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(mep_invert_branch): Likewise for params \"insn\" and \"after\".\n+\t(mep_reorg_erepeat): Likewise for param \"insns\" and locals\n+\t\"insn\", \"prev\", \"new_last\", \"barrier\", \"user\".  Strengthen local\n+\t\"l\" from rtx to rtx_code_label *.\n+\t(mep_jmp_return_reorg): Strengthen param \"insns\" and local \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(mep_reorg_addcombine): Likewise for param \"insns\" and locals\n+\t\"i\", \"n\".\n+\t(add_sp_insn_p): Likewise for param \"insn\".\n+\t(mep_reorg_noframe): Likewise for param \"insns\" and locals\n+\t\"start_frame_insn\", \"end_frame_insn\", \"next\".\n+\t(mep_reorg): Likewise for local \"insns\".\n+\t(mep_store_data_bypass_1): Likewise for param \"prev\".  Add checked\n+\tcast.\n+\t(mep_store_data_bypass_p): Likewise for params \"prev\", \"insn\".\n+\t(mep_mul_hilo_bypass_p): Likewise.\n+\t(mep_ipipe_ldc_p): Likewise for param \"insn\".\n+\t(mep_make_bundle): Likewise for return type, param \"cop\" and local\n+\t\"insn\", splitting out the latter into a new local \"seq\" for when it\n+\tis a SEQUENCE rather than an insn.\n+\t(core_insn_p): Likewise for param \"insn\".\n+\t(mep_bundle_insns): Likewise for param \"insns\" and locals \"insn\",\n+\t\"last\", \"first\", \"note\", \"prev\", \"core_insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/m68k/m68k-protos.h (output_btst): Strengthen param 4 from"}, {"sha": "e1903c782bfd871cf4b6323e65651897d2301eca", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=aa4a0061bb12f205207feea29e61a4b03146a6fe", "patch": "@@ -19,9 +19,9 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern int mep_regno_reg_class (int);\n-extern rtx mep_mulr_source (rtx, rtx, rtx, rtx);\n-extern bool mep_reuse_lo_p (rtx, rtx, rtx, bool);\n-extern bool mep_use_post_modify_p (rtx, rtx, rtx);\n+extern rtx mep_mulr_source (rtx_insn *, rtx, rtx, rtx);\n+extern bool mep_reuse_lo_p (rtx, rtx, rtx_insn *, bool);\n+extern bool mep_use_post_modify_p (rtx_insn *, rtx, rtx);\n extern bool mep_allow_clip (rtx, rtx, int);\n extern bool mep_bit_position_p (rtx, bool);\n extern bool mep_split_mov (rtx *, int);\n@@ -31,8 +31,8 @@ extern bool mep_multi_slot (rtx);\n extern bool mep_legitimate_address (enum machine_mode, rtx, int);\n extern int mep_legitimize_address (rtx *, rtx, enum machine_mode);\n extern int mep_legitimize_reload_address (rtx *, enum machine_mode, int, /*enum reload_type*/ int, int);\n-extern int mep_core_address_length (rtx, int);\n-extern int mep_cop_address_length (rtx, int);\n+extern int mep_core_address_length (rtx_insn *, int);\n+extern int mep_cop_address_length (rtx_insn *, int);\n extern bool mep_expand_mov (rtx *, enum machine_mode);\n extern bool mep_mov_ok (rtx *, enum machine_mode);\n extern void mep_split_wide_move (rtx *, enum machine_mode);\n@@ -65,7 +65,7 @@ extern void mep_function_profiler (FILE *);\n extern const char *mep_emit_bb_trace_ret (void);\n extern void mep_print_operand_address (FILE *, rtx);\n extern void mep_print_operand (FILE *, rtx, int);\n-extern void mep_final_prescan_insn (rtx, rtx *, int);\n+extern void mep_final_prescan_insn (rtx_insn *, rtx *, int);\n extern void mep_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern bool mep_return_in_memory (const_tree, const_tree);\n extern rtx mep_function_value (const_tree, const_tree);\n@@ -79,9 +79,9 @@ extern void mep_output_aligned_common (FILE *, tree, const char *,\n \t\t\t\t       int, int, int);\n extern void mep_emit_doloop (rtx *, int);\n extern bool mep_vliw_function_p (tree);\n-extern bool mep_store_data_bypass_p (rtx, rtx);\n-extern bool mep_mul_hilo_bypass_p (rtx, rtx);\n-extern bool mep_ipipe_ldc_p (rtx);\n+extern bool mep_store_data_bypass_p (rtx_insn *, rtx_insn *);\n+extern bool mep_mul_hilo_bypass_p (rtx_insn *, rtx_insn *);\n+extern bool mep_ipipe_ldc_p (rtx_insn *);\n extern bool mep_emit_intrinsic (int, const rtx *);\n extern bool mep_expand_unary_intrinsic (int, rtx *);\n extern bool mep_expand_binary_intrinsic (int, int, int, int, rtx *);"}, {"sha": "2927b378041118dc0fc122891a3566f90f672cd7", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 94, "deletions": 85, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4a0061bb12f205207feea29e61a4b03146a6fe/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=aa4a0061bb12f205207feea29e61a4b03146a6fe", "patch": "@@ -153,10 +153,10 @@ static bool symbolref_p (rtx);\n static void encode_pattern_1 (rtx);\n static void encode_pattern (rtx);\n static bool const_in_range (rtx, int, int);\n-static void mep_rewrite_mult (rtx, rtx);\n-static void mep_rewrite_mulsi3 (rtx, rtx, rtx, rtx);\n-static void mep_rewrite_maddsi3 (rtx, rtx, rtx, rtx, rtx);\n-static bool mep_reuse_lo_p_1 (rtx, rtx, rtx, bool);\n+static void mep_rewrite_mult (rtx_insn *, rtx);\n+static void mep_rewrite_mulsi3 (rtx_insn *, rtx, rtx, rtx);\n+static void mep_rewrite_maddsi3 (rtx_insn *, rtx, rtx, rtx, rtx);\n+static bool mep_reuse_lo_p_1 (rtx, rtx, rtx_insn *, bool);\n static bool move_needs_splitting (rtx, rtx, enum machine_mode);\n static bool mep_expand_setcc_1 (enum rtx_code, rtx, rtx, rtx);\n static bool mep_nongeneral_reg (rtx);\n@@ -171,9 +171,9 @@ static bool mep_reg_set_p (rtx, rtx);\n static bool mep_reg_set_in_function (int);\n static bool mep_interrupt_saved_reg (int);\n static bool mep_call_saves_register (int);\n-static rtx F (rtx);\n+static rtx_insn *F (rtx_insn *);\n static void add_constant (int, int, int, int);\n-static rtx maybe_dead_move (rtx, rtx, bool);\n+static rtx_insn *maybe_dead_move (rtx, rtx, bool);\n static void mep_reload_pointer (int, const char *);\n static void mep_start_function (FILE *, HOST_WIDE_INT);\n static bool mep_function_ok_for_sibcall (tree, tree);\n@@ -198,14 +198,15 @@ static void mep_unique_section (tree, int);\n static unsigned int mep_section_type_flags (tree, const char *, int);\n static void mep_asm_named_section (const char *, unsigned int, tree);\n static bool mep_mentioned_p (rtx, rtx, int);\n-static void mep_reorg_regmove (rtx);\n-static rtx mep_insert_repeat_label_last (rtx, rtx, bool, bool);\n-static void mep_reorg_repeat (rtx);\n-static bool mep_invertable_branch_p (rtx);\n-static void mep_invert_branch (rtx, rtx);\n-static void mep_reorg_erepeat (rtx);\n-static void mep_jmp_return_reorg (rtx);\n-static void mep_reorg_addcombine (rtx);\n+static void mep_reorg_regmove (rtx_insn *);\n+static rtx_insn *mep_insert_repeat_label_last (rtx_insn *, rtx_code_label *,\n+\t\t\t\t\t       bool, bool);\n+static void mep_reorg_repeat (rtx_insn *);\n+static bool mep_invertable_branch_p (rtx_insn *);\n+static void mep_invert_branch (rtx_insn *, rtx_insn *);\n+static void mep_reorg_erepeat (rtx_insn *);\n+static void mep_jmp_return_reorg (rtx_insn *);\n+static void mep_reorg_addcombine (rtx_insn *);\n static void mep_reorg (void);\n static void mep_init_intrinsics (void);\n static void mep_init_builtins (void);\n@@ -222,8 +223,8 @@ static int mep_issue_rate (void);\n static rtx mep_find_ready_insn (rtx *, int, enum attr_slot, int);\n static void mep_move_ready_insn (rtx *, int, rtx);\n static int mep_sched_reorder (FILE *, int, rtx *, int *, int);\n-static rtx mep_make_bundle (rtx, rtx);\n-static void mep_bundle_insns (rtx);\n+static rtx_insn *mep_make_bundle (rtx, rtx_insn *);\n+static void mep_bundle_insns (rtx_insn *);\n static bool mep_rtx_cost (rtx, int, int, int, int *, bool);\n static int mep_address_cost (rtx, enum machine_mode, addr_space_t, bool);\n static void mep_setup_incoming_varargs (cumulative_args_t, enum machine_mode,\n@@ -623,7 +624,7 @@ const_in_range (rtx x, int minv, int maxv)\n    at the end of the insn stream.  */\n \n rtx\n-mep_mulr_source (rtx insn, rtx dest, rtx src1, rtx src2)\n+mep_mulr_source (rtx_insn *insn, rtx dest, rtx src1, rtx src2)\n {\n   if (rtx_equal_p (dest, src1))\n     return src2;\n@@ -644,7 +645,7 @@ mep_mulr_source (rtx insn, rtx dest, rtx src1, rtx src2)\n    to (clobber (reg:SI HI_REGNO)).  */\n \n static void\n-mep_rewrite_mult (rtx insn, rtx pattern)\n+mep_rewrite_mult (rtx_insn *insn, rtx pattern)\n {\n   rtx hi_clobber;\n \n@@ -659,7 +660,7 @@ mep_rewrite_mult (rtx insn, rtx pattern)\n    store the result in DEST if nonnull.  */\n \n static void\n-mep_rewrite_mulsi3 (rtx insn, rtx dest, rtx src1, rtx src2)\n+mep_rewrite_mulsi3 (rtx_insn *insn, rtx dest, rtx src1, rtx src2)\n {\n   rtx lo, pattern;\n \n@@ -677,7 +678,7 @@ mep_rewrite_mulsi3 (rtx insn, rtx dest, rtx src1, rtx src2)\n    be deleted by a peephole2 if SRC3 is already in $lo.  */\n \n static void\n-mep_rewrite_maddsi3 (rtx insn, rtx dest, rtx src1, rtx src2, rtx src3)\n+mep_rewrite_maddsi3 (rtx_insn *insn, rtx dest, rtx src1, rtx src2, rtx src3)\n {\n   rtx lo, pattern;\n \n@@ -719,7 +720,7 @@ mep_rewrite_maddsi3 (rtx insn, rtx dest, rtx src1, rtx src2, rtx src3)\n    if GPR is no longer used.  */\n \n static bool\n-mep_reuse_lo_p_1 (rtx lo, rtx gpr, rtx insn, bool gpr_dead_p)\n+mep_reuse_lo_p_1 (rtx lo, rtx gpr, rtx_insn *insn, bool gpr_dead_p)\n {\n   do\n     {\n@@ -775,7 +776,7 @@ mep_reuse_lo_p_1 (rtx lo, rtx gpr, rtx insn, bool gpr_dead_p)\n /* A wrapper around mep_reuse_lo_p_1 that preserves recog_data.  */\n \n bool\n-mep_reuse_lo_p (rtx lo, rtx gpr, rtx insn, bool gpr_dead_p)\n+mep_reuse_lo_p (rtx lo, rtx gpr, rtx_insn *insn, bool gpr_dead_p)\n {\n   bool result = mep_reuse_lo_p_1 (lo, gpr, insn, gpr_dead_p);\n   extract_insn (insn);\n@@ -856,7 +857,7 @@ mep_use_post_modify_for_set_p (rtx set, rtx gpr, rtx offset)\n /* Return the effect of frame-related instruction INSN.  */\n \n static rtx\n-mep_frame_expr (rtx insn)\n+mep_frame_expr (rtx_insn *insn)\n {\n   rtx note, expr;\n \n@@ -870,7 +871,7 @@ mep_frame_expr (rtx insn)\n    new pattern in INSN1; INSN2 will be deleted by the caller.  */\n \n static void\n-mep_make_parallel (rtx insn1, rtx insn2)\n+mep_make_parallel (rtx_insn *insn1, rtx_insn *insn2)\n {\n   rtx expr;\n \n@@ -895,9 +896,9 @@ mep_make_parallel (rtx insn1, rtx insn2)\n    be persuaded to do SET_INSN as a side-effect.  Return true if so.  */\n \n static bool\n-mep_use_post_modify_p_1 (rtx set_insn, rtx reg, rtx offset)\n+mep_use_post_modify_p_1 (rtx_insn *set_insn, rtx reg, rtx offset)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   insn = set_insn;\n   do\n@@ -924,7 +925,7 @@ mep_use_post_modify_p_1 (rtx set_insn, rtx reg, rtx offset)\n /* A wrapper around mep_use_post_modify_p_1 that preserves recog_data.  */\n \n bool\n-mep_use_post_modify_p (rtx insn, rtx reg, rtx offset)\n+mep_use_post_modify_p (rtx_insn *insn, rtx reg, rtx offset)\n {\n   bool result = mep_use_post_modify_p_1 (insn, reg, offset);\n   extract_insn (insn);\n@@ -1235,7 +1236,7 @@ mep_legitimize_reload_address (rtx *x, enum machine_mode mode, int opnum,\n }\n \n int\n-mep_core_address_length (rtx insn, int opn)\n+mep_core_address_length (rtx_insn *insn, int opn)\n {\n   rtx set = single_set (insn);\n   rtx mem = XEXP (set, opn);\n@@ -1282,7 +1283,7 @@ mep_core_address_length (rtx insn, int opn)\n }\n \n int\n-mep_cop_address_length (rtx insn, int opn)\n+mep_cop_address_length (rtx_insn *insn, int opn)\n {\n   rtx set = single_set (insn);\n   rtx mem = XEXP (set, opn);\n@@ -2337,7 +2338,8 @@ mep_reg_set_p (rtx reg, rtx insn)\n static bool\n mep_reg_set_in_function (int regno)\n {\n-  rtx reg, insn;\n+  rtx reg;\n+  rtx_insn *insn;\n \n   if (mep_interrupt_p () && df_regs_ever_live_p(regno))\n     return true;\n@@ -2365,7 +2367,7 @@ mep_asm_without_operands_p (void)\n {\n   if (cfun->machine->asms_without_operands == 0)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       push_topmost_sequence ();\n       insn = get_insns ();\n@@ -2536,8 +2538,8 @@ mep_elimination_offset (int from, int to)\n   gcc_unreachable ();\n }\n \n-static rtx\n-F (rtx x)\n+static rtx_insn *\n+F (rtx_insn *x)\n {\n   RTX_FRAME_RELATED_P (x) = 1;\n   return x;\n@@ -2551,7 +2553,7 @@ F (rtx x)\n static void\n add_constant (int dest, int src, int value, int mark_frame)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   int hi, lo;\n \n   if (src == dest && value == 0)\n@@ -2611,10 +2613,10 @@ add_constant (int dest, int src, int value, int mark_frame)\n /* Move SRC to DEST.  Mark the move as being potentially dead if\n    MAYBE_DEAD_P.  */\n \n-static rtx\n+static rtx_insn *\n maybe_dead_move (rtx dest, rtx src, bool ATTRIBUTE_UNUSED maybe_dead_p)\n {\n-  rtx insn = emit_move_insn (dest, src);\n+  rtx_insn *insn = emit_move_insn (dest, src);\n #if 0\n   if (maybe_dead_p)\n     REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD, const0_rtx, NULL);\n@@ -2739,7 +2741,7 @@ mep_expand_prologue (void)\n \t  F(maybe_dead_move (mem, gen_rtx_REG (rmode, i), maybe_dead_p));\n \telse if (rmode == DImode)\n \t  {\n-\t    rtx insn;\n+\t    rtx_insn *insn;\n \t    int be = TARGET_BIG_ENDIAN ? 4 : 0;\n \n \t    mem = gen_rtx_MEM (SImode,\n@@ -2773,7 +2775,7 @@ mep_expand_prologue (void)\n \t  }\n \telse\n \t  {\n-\t    rtx insn;\n+\t    rtx_insn *insn;\n \t    maybe_dead_move (gen_rtx_REG (rmode, REGSAVE_CONTROL_TEMP),\n \t\t\t     gen_rtx_REG (rmode, i),\n \t\t\t     maybe_dead_p);\n@@ -3370,7 +3372,7 @@ mep_print_operand (FILE *file, rtx x, int code)\n }\n \n void\n-mep_final_prescan_insn (rtx insn, rtx *operands ATTRIBUTE_UNUSED,\n+mep_final_prescan_insn (rtx_insn *insn, rtx *operands ATTRIBUTE_UNUSED,\n \t\t\tint noperands ATTRIBUTE_UNUSED)\n {\n   /* Despite the fact that MeP is perfectly capable of branching and\n@@ -4890,9 +4892,10 @@ mep_compatible_reg_class (int r1, int r2)\n }\n \n static void\n-mep_reorg_regmove (rtx insns)\n+mep_reorg_regmove (rtx_insn *insns)\n {\n-  rtx insn, next, pat, follow, *where;\n+  rtx_insn *insn, *next, *follow;\n+  rtx pat, *where;\n   int count = 0, done = 0, replace, before = 0;\n \n   if (dump_file)\n@@ -4968,7 +4971,7 @@ mep_reorg_regmove (rtx insns)\n \t    {\n \t      if (dump_file)\n \t\t{\n-\t\t  rtx x;\n+\t\t  rtx_insn *x;\n \n \t\t  fprintf (dump_file, \"----- Candidate for superfluous move deletion:\\n\\n\");\n \t\t  for (x = insn; x ;x = NEXT_INSN (x))\n@@ -5012,11 +5015,11 @@ mep_reorg_regmove (rtx insns)\n \n    Return the last instruction in the adjusted loop.  */\n \n-static rtx\n-mep_insert_repeat_label_last (rtx last_insn, rtx label, bool including,\n-\t\t\t      bool shared)\n+static rtx_insn *\n+mep_insert_repeat_label_last (rtx_insn *last_insn, rtx_code_label *label,\n+\t\t\t      bool including, bool shared)\n {\n-  rtx next, prev;\n+  rtx_insn *next, *prev;\n   int count = 0, code, icode;\n \n   if (dump_file)\n@@ -5040,7 +5043,7 @@ mep_insert_repeat_label_last (rtx last_insn, rtx label, bool including,\n \tif (INSN_P (prev))\n \t  {\n \t    if (GET_CODE (PATTERN (prev)) == SEQUENCE)\n-\t      prev = XVECEXP (PATTERN (prev), 0, 1);\n+\t      prev = as_a <rtx_insn *> (XVECEXP (PATTERN (prev), 0, 1));\n \n \t    /* Other insns that should not be in the last two opcodes.  */\n \t    icode = recog_memoized (prev);\n@@ -5210,7 +5213,7 @@ struct mep_doloop_begin {\n   struct mep_doloop_begin *next;\n \n   /* The instruction itself.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* The initial counter value.  This is known to be a general register.  */\n   rtx counter;\n@@ -5222,10 +5225,10 @@ struct mep_doloop_end {\n   struct mep_doloop_end *next;\n \n   /* The instruction itself.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* The first instruction after INSN when the branch isn't taken.  */\n-  rtx fallthrough;\n+  rtx_insn *fallthrough;\n \n   /* The location of the counter value.  Since doloop_end_internal is a\n      jump instruction, it has to allow the counter to be stored anywhere\n@@ -5288,9 +5291,9 @@ mep_repeat_loop_p (struct mep_doloop *loop)\n /* The main repeat reorg function.  See comment above for details.  */\n \n static void\n-mep_reorg_repeat (rtx insns)\n+mep_reorg_repeat (rtx_insn *insns)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   struct mep_doloop *loops, *loop;\n   struct mep_doloop_begin *begin;\n   struct mep_doloop_end *end;\n@@ -5351,7 +5354,8 @@ mep_reorg_repeat (rtx insns)\n     if (mep_repeat_loop_p (loop))\n       {\n \t/* Case (1) or (2).  */\n-\trtx repeat_label, label_ref;\n+\trtx_code_label *repeat_label;\n+\trtx label_ref;\n \n \t/* Create a new label for the repeat insn.  */\n \trepeat_label = gen_label_rtx ();\n@@ -5435,7 +5439,7 @@ mep_reorg_repeat (rtx insns)\n \n \n static bool\n-mep_invertable_branch_p (rtx insn)\n+mep_invertable_branch_p (rtx_insn *insn)\n {\n   rtx cond, set;\n   enum rtx_code old_code;\n@@ -5473,7 +5477,7 @@ mep_invertable_branch_p (rtx insn)\n }\n \n static void\n-mep_invert_branch (rtx insn, rtx after)\n+mep_invert_branch (rtx_insn *insn, rtx_insn *after)\n {\n   rtx cond, set, label;\n   int i;\n@@ -5519,9 +5523,11 @@ mep_invert_branch (rtx insn, rtx after)\n }\n \n static void\n-mep_reorg_erepeat (rtx insns)\n+mep_reorg_erepeat (rtx_insn *insns)\n {\n-  rtx insn, prev, l, x;\n+  rtx_insn *insn, *prev;\n+  rtx_code_label *l;\n+  rtx x;\n   int count;\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n@@ -5542,7 +5548,7 @@ mep_reorg_erepeat (rtx insns)\n \n \t    if (prev == JUMP_LABEL (insn))\n \t      {\n-\t\trtx newlast;\n+\t\trtx_insn *newlast;\n \t\tif (dump_file)\n \t\t  fprintf (dump_file, \"found loop top, %d insns\\n\", count);\n \n@@ -5554,7 +5560,7 @@ mep_reorg_erepeat (rtx insns)\n \t\t       so, we know nobody inside the loop uses it.\n \t\t       But we must be careful to put the erepeat\n \t\t       *after* the label.  */\n-\t\t    rtx barrier;\n+\t\t    rtx_insn *barrier;\n \t\t    for (barrier = PREV_INSN (prev);\n \t\t\t barrier && NOTE_P (barrier);\n \t\t\t barrier = PREV_INSN (barrier))\n@@ -5598,7 +5604,7 @@ mep_reorg_erepeat (rtx insns)\n \t      {\n \t\t/* A label is OK if there is exactly one user, and we\n \t\t   can find that user before the next label.  */\n-\t\trtx user = 0;\n+\t\trtx_insn *user = 0;\n \t\tint safe = 0;\n \t\tif (LABEL_NUSES (prev) == 1)\n \t\t  {\n@@ -5632,9 +5638,10 @@ mep_reorg_erepeat (rtx insns)\n    always do this on its own.  */\n \n static void\n-mep_jmp_return_reorg (rtx insns)\n+mep_jmp_return_reorg (rtx_insn *insns)\n {\n-  rtx insn, label, ret;\n+  rtx_insn *insn;\n+  rtx label, ret;\n   int ret_code;\n \n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n@@ -5668,9 +5675,9 @@ mep_jmp_return_reorg (rtx insns)\n \n \n static void\n-mep_reorg_addcombine (rtx insns)\n+mep_reorg_addcombine (rtx_insn *insns)\n {\n-  rtx i, n;\n+  rtx_insn *i, *n;\n \n   for (i = insns; i; i = NEXT_INSN (i))\n     if (INSN_P (i)\n@@ -5706,7 +5713,7 @@ mep_reorg_addcombine (rtx insns)\n /* If this insn adjusts the stack, return the adjustment, else return\n    zero.  */\n static int\n-add_sp_insn_p (rtx insn)\n+add_sp_insn_p (rtx_insn *insn)\n {\n   rtx pat;\n \n@@ -5731,10 +5738,10 @@ add_sp_insn_p (rtx insn)\n /* Check for trivial functions that set up an unneeded stack\n    frame.  */\n static void\n-mep_reorg_noframe (rtx insns)\n+mep_reorg_noframe (rtx_insn *insns)\n {\n-  rtx start_frame_insn;\n-  rtx end_frame_insn = 0;\n+  rtx_insn *start_frame_insn;\n+  rtx_insn *end_frame_insn = 0;\n   int sp_adjust, sp2;\n   rtx sp;\n \n@@ -5755,7 +5762,7 @@ mep_reorg_noframe (rtx insns)\n \n   while (insns)\n     {\n-      rtx next = next_real_insn (insns);\n+      rtx_insn *next = next_real_insn (insns);\n       if (!next)\n \tbreak;\n \n@@ -5786,7 +5793,7 @@ mep_reorg_noframe (rtx insns)\n static void\n mep_reorg (void)\n {\n-  rtx insns = get_insns ();\n+  rtx_insn *insns = get_insns ();\n \n   /* We require accurate REG_DEAD notes.  */\n   compute_bb_for_insn ();\n@@ -6673,15 +6680,16 @@ mep_store_find_set (rtx *x, void *prev)\n    not the containing insn.  */\n \n static bool\n-mep_store_data_bypass_1 (rtx prev, rtx pat)\n+mep_store_data_bypass_1 (rtx_insn *prev, rtx pat)\n {\n   /* Cope with intrinsics like swcpa.  */\n   if (GET_CODE (pat) == PARALLEL)\n     {\n       int i;\n \n       for (i = 0; i < XVECLEN (pat, 0); i++)\n-\tif (mep_store_data_bypass_p (prev, XVECEXP (pat, 0, i)))\n+\tif (mep_store_data_bypass_p (prev,\n+\t\t\t\t     as_a <rtx_insn *> (XVECEXP (pat, 0, i))))\n \t  return true;\n \n       return false;\n@@ -6717,7 +6725,7 @@ mep_store_data_bypass_1 (rtx prev, rtx pat)\n    has no true dependence on PREV.  */\n \n bool\n-mep_store_data_bypass_p (rtx prev, rtx insn)\n+mep_store_data_bypass_p (rtx_insn *prev, rtx_insn *insn)\n {\n   return INSN_P (insn) ? mep_store_data_bypass_1 (prev, PATTERN (insn)) : false;\n }\n@@ -6738,7 +6746,7 @@ mep_mul_hilo_bypass_1 (rtx *x, void *prev)\n    between multiplication instructions PREV and INSN.  */\n \n bool\n-mep_mul_hilo_bypass_p (rtx prev, rtx insn)\n+mep_mul_hilo_bypass_p (rtx_insn *prev, rtx_insn *insn)\n {\n   rtx pat;\n \n@@ -6754,7 +6762,7 @@ mep_mul_hilo_bypass_p (rtx prev, rtx insn)\n    read from PSW, LP, SAR, HI and LO.  */\n \n bool\n-mep_ipipe_ldc_p (rtx insn)\n+mep_ipipe_ldc_p (rtx_insn *insn)\n {\n   rtx pat, src;\n \n@@ -6794,10 +6802,11 @@ mep_ipipe_ldc_p (rtx insn)\n \n    Emit the bundle in place of COP and return it.  */\n \n-static rtx\n-mep_make_bundle (rtx core, rtx cop)\n+static rtx_insn *\n+mep_make_bundle (rtx core, rtx_insn *cop)\n {\n-  rtx insn;\n+  rtx seq;\n+  rtx_insn *insn;\n \n   /* If CORE is an existing instruction, remove it, otherwise put\n      the new pattern in an INSN harness.  */\n@@ -6807,8 +6816,8 @@ mep_make_bundle (rtx core, rtx cop)\n     core = make_insn_raw (core);\n \n   /* Generate the bundle sequence and replace COP with it.  */\n-  insn = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec (2, core, cop));\n-  insn = emit_insn_after (insn, cop);\n+  seq = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec (2, core, cop));\n+  insn = emit_insn_after (seq, cop);\n   remove_insn (cop);\n \n   /* Set up the links of the insns inside the SEQUENCE.  */\n@@ -6867,7 +6876,7 @@ mep_insn_dependent_p (rtx x, rtx y)\n }\n \n static int\n-core_insn_p (rtx insn)\n+core_insn_p (rtx_insn *insn)\n {\n   if (GET_CODE (PATTERN (insn)) == USE)\n     return 0;\n@@ -6888,9 +6897,9 @@ core_insn_p (rtx insn)\n    Called from mep_insn_reorg.  */\n \n static void\n-mep_bundle_insns (rtx insns)\n+mep_bundle_insns (rtx_insn *insns)\n {\n-  rtx insn, last = NULL_RTX, first = NULL_RTX;\n+  rtx_insn *insn, *last = NULL, *first = NULL;\n   int saw_scheduling = 0;\n \n   /* Only do bundling if we're in vliw mode.  */\n@@ -6915,7 +6924,7 @@ mep_bundle_insns (rtx insns)\n \n       else if (NONJUMP_INSN_P (insn) && GET_MODE (insn) == VOIDmode && first)\n \t{\n-\t  rtx note, prev;\n+\t  rtx_insn *note, *prev;\n \n \t  /* INSN is part of a bundle; FIRST is the first insn in that\n \t     bundle.  Move all intervening notes out of the bundle.\n@@ -6971,7 +6980,7 @@ mep_bundle_insns (rtx insns)\n \n       if (TARGET_IVC2)\n \t{\n-\t  rtx core_insn = NULL_RTX;\n+\t  rtx_insn *core_insn = NULL;\n \n \t  /* IVC2 slots are scheduled by DFA, so we just accept\n \t     whatever the scheduler gives us.  However, we must make"}]}