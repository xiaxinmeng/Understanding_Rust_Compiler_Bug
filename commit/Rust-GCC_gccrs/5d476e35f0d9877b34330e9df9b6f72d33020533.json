{"sha": "5d476e35f0d9877b34330e9df9b6f72d33020533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0NzZlMzVmMGQ5ODc3YjM0MzMwZTlkZjliNmY3MmQzMzAyMDUzMw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-05-30T10:47:57Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-05-30T10:47:57Z"}, "message": "re PR middle-end/71269 (segfault while compiling sqlite)\n\ngcc/testsuite/ChangeLog:\n\n2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/71269\n\tPR middle-end/71292\n\t* gcc.dg/tree-ssa/pr71269.c: New test.\n\t* gcc.dg/tree-ssa/pr71292.c: New test.\n\ngcc/ChangeLog:\n\n2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/71269\n\tPR middle-end/71252\n\t* tree-ssa-reassoc.c (insert_stmt_before_use): Use find_insert_point so\n\tthat inserted stmt will not dominate stmts that defines its operand.\n\t(rewrite_expr_tree): Add stmt_to_insert before adding the use stmt.\n\t(rewrite_expr_tree_parallel): Likewise.\n\nFrom-SVN: r236876", "tree": {"sha": "4bd7ac6454dc0b3294ce67725411c6bfec7fb42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd7ac6454dc0b3294ce67725411c6bfec7fb42d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d476e35f0d9877b34330e9df9b6f72d33020533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d476e35f0d9877b34330e9df9b6f72d33020533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d476e35f0d9877b34330e9df9b6f72d33020533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d476e35f0d9877b34330e9df9b6f72d33020533/comments", "author": null, "committer": null, "parents": [{"sha": "db5447cad85ddee2973bc95cb5d4890b8c3d847b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5447cad85ddee2973bc95cb5d4890b8c3d847b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5447cad85ddee2973bc95cb5d4890b8c3d847b"}], "stats": {"total": 109, "additions": 75, "deletions": 34}, "files": [{"sha": "e328b4112f393db654542eb43426c980f0ad898e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d476e35f0d9877b34330e9df9b6f72d33020533", "patch": "@@ -1,3 +1,12 @@\n+2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/71269\n+\tPR middle-end/71252\n+\t* tree-ssa-reassoc.c (insert_stmt_before_use): Use find_insert_point so\n+\tthat inserted stmt will not dominate stmts that defines its operand.\n+\t(rewrite_expr_tree): Add stmt_to_insert before adding the use stmt.\n+\t(rewrite_expr_tree_parallel): Likewise.\n+\n 2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71252"}, {"sha": "9d233f1773ae7b9e526fd17c56f785ca7a454727", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d476e35f0d9877b34330e9df9b6f72d33020533", "patch": "@@ -1,3 +1,10 @@\n+2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/71269\n+\tPR middle-end/71292\n+\t* gcc.dg/tree-ssa/pr71269.c: New test.\n+\t* gcc.dg/tree-ssa/pr71292.c: New test.\n+\n 2016-05-30  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71252"}, {"sha": "4dceaaaa8fc92a87ccff67aec24cf0bb56627b88", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71269.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71269.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71269.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71269.c?ref=5d476e35f0d9877b34330e9df9b6f72d33020533", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/71269 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+int a, b, c;\n+void  fn2 (int);\n+void fn1 ()\n+{\n+  fn2 (sizeof 0 + c + a + b + b);\n+}"}, {"sha": "1a25d93843fdef46b2b93724b05845b3ff2c588a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71292.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71292.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71292.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71292.c?ref=5d476e35f0d9877b34330e9df9b6f72d33020533", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/71292 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long a;\n+long b, d;\n+int c;\n+void fn1 ()\n+{\n+  unsigned long e = a + c;\n+  b = d + e + a + 8;\n+}"}, {"sha": "9c06ca0374680bf9d118dd646ee44f31503d3650", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d476e35f0d9877b34330e9df9b6f72d33020533/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=5d476e35f0d9877b34330e9df9b6f72d33020533", "patch": "@@ -1777,16 +1777,6 @@ eliminate_redundant_comparison (enum tree_code opcode,\n   return false;\n }\n \n-/* If the stmt that defines operand has to be inserted, insert it\n-   before the use.  */\n-static void\n-insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n-{\n-  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  gimple_set_uid (stmt_to_insert, gimple_uid (stmt));\n-  gsi_insert_before (&gsi, stmt_to_insert, GSI_NEW_STMT);\n-}\n-\n \n /* Transform repeated addition of same values into multiply with\n    constant.  */\n@@ -3787,6 +3777,29 @@ find_insert_point (gimple *stmt, tree rhs1, tree rhs2)\n   return stmt;\n }\n \n+/* If the stmt that defines operand has to be inserted, insert it\n+   before the use.  */\n+static void\n+insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n+{\n+  gcc_assert (is_gimple_assign (stmt_to_insert));\n+  tree rhs1 = gimple_assign_rhs1 (stmt_to_insert);\n+  tree rhs2 = gimple_assign_rhs2 (stmt_to_insert);\n+  gimple *insert_point = find_insert_point (stmt, rhs1, rhs2);\n+  gimple_stmt_iterator gsi = gsi_for_stmt (insert_point);\n+  gimple_set_uid (stmt_to_insert, gimple_uid (insert_point));\n+\n+  /* If the insert point is not stmt, then insert_point would be\n+     the point where operand rhs1 or rhs2 is defined. In this case,\n+     stmt_to_insert has to be inserted afterwards. This would\n+     only happen when the stmt insertion point is flexible. */\n+  if (stmt == insert_point)\n+    gsi_insert_before (&gsi, stmt_to_insert, GSI_NEW_STMT);\n+  else\n+    insert_stmt_after (stmt_to_insert, insert_point);\n+}\n+\n+\n /* Recursively rewrite our linearized statements so that the operators\n    match those in OPS[OPINDEX], putting the computation in rank\n    order.  Return new lhs.  */\n@@ -3823,6 +3836,12 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t      print_gimple_stmt (dump_file, stmt, 0, 0);\n \t    }\n \n+\t  /* If the stmt that defines operand has to be inserted, insert it\n+\t     before the use.  */\n+\t  if (oe1->stmt_to_insert)\n+\t    insert_stmt_before_use (stmt, oe1->stmt_to_insert);\n+\t  if (oe2->stmt_to_insert)\n+\t    insert_stmt_before_use (stmt, oe2->stmt_to_insert);\n \t  /* Even when changed is false, reassociation could have e.g. removed\n \t     some redundant operations, so unless we are just swapping the\n \t     arguments or unless there is no change at all (then we just\n@@ -3831,12 +3850,6 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t    {\n \t      gimple *insert_point\n \t\t= find_insert_point (stmt, oe1->op, oe2->op);\n-\t      /* If the stmt that defines operand has to be inserted, insert it\n-\t\t before the use.  */\n-\t      if (oe1->stmt_to_insert)\n-\t\tinsert_stmt_before_use (stmt, oe1->stmt_to_insert);\n-\t      if (oe2->stmt_to_insert)\n-\t\tinsert_stmt_before_use (stmt, oe2->stmt_to_insert);\n \t      lhs = make_ssa_name (TREE_TYPE (lhs));\n \t      stmt\n \t\t= gimple_build_assign (lhs, gimple_assign_rhs_code (stmt),\n@@ -3852,12 +3865,6 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t    {\n \t      gcc_checking_assert (find_insert_point (stmt, oe1->op, oe2->op)\n \t\t\t\t   == stmt);\n-\t      /* If the stmt that defines operand has to be inserted, insert it\n-\t\t before the use.  */\n-\t      if (oe1->stmt_to_insert)\n-\t\tinsert_stmt_before_use (stmt, oe1->stmt_to_insert);\n-\t      if (oe2->stmt_to_insert)\n-\t\tinsert_stmt_before_use (stmt, oe2->stmt_to_insert);\n \t      gimple_assign_set_rhs1 (stmt, oe1->op);\n \t      gimple_assign_set_rhs2 (stmt, oe2->op);\n \t      update_stmt (stmt);\n@@ -4097,29 +4104,25 @@ rewrite_expr_tree_parallel (gassign *stmt, int width,\n \t  print_gimple_stmt (dump_file, stmts[i], 0, 0);\n \t}\n \n+      /* If the stmt that defines operand has to be inserted, insert it\n+\t before the use.  */\n+      if (stmt1)\n+\tinsert_stmt_before_use (stmts[i], stmt1);\n+      if (stmt2)\n+\tinsert_stmt_before_use (stmts[i], stmt2);\n+      stmt1 = stmt2 = NULL;\n+\n       /* We keep original statement only for the last one.  All\n \t others are recreated.  */\n       if (i == stmt_num - 1)\n \t{\n-\t  /* If the stmt that defines operand has to be inserted, insert it\n-\t     before the use.  */\n-\t  if (stmt1)\n-\t    insert_stmt_before_use (stmts[i], stmt1);\n-\t  if (stmt2)\n-\t    insert_stmt_before_use (stmts[i], stmt2);\n \t  gimple_assign_set_rhs1 (stmts[i], op1);\n \t  gimple_assign_set_rhs2 (stmts[i], op2);\n \t  update_stmt (stmts[i]);\n \t}\n       else\n \t{\n \t  stmts[i] = build_and_add_sum (TREE_TYPE (last_rhs1), op1, op2, opcode);\n-\t  /* If the stmt that defines operand has to be inserted, insert it\n-\t     before new build_and_add stmt after it is created.  */\n-\t  if (stmt1)\n-\t    insert_stmt_before_use (stmts[i], stmt1);\n-\t  if (stmt2)\n-\t    insert_stmt_before_use (stmts[i], stmt2);\n \t}\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{"}]}