{"sha": "9decd08b7b153a593a0b61e4f5373cb9574a1973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlY2QwOGI3YjE1M2E1OTNhMGI2MWU0ZjUzNzNjYjk1NzRhMTk3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-04T16:53:30Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-04T16:53:30Z"}, "message": "i386: Use SBB more [PR94650]\n\nWhen returning 0 or -1, \"SBB reg,reg\" instruction that borrows carry\nflag can be used.  Carry flag can be generated by converting compare\nwith zero to a LTU compare with one, so e.g.\n\n\treturn -(x == 0)\n\ngenerates:\n\n        cmpq    $1, %rdi\n        sbbq    %rax, %rax\n\ninstead of:\n\n        xorl    %eax, %eax\n        testq   %rdi, %rdi\n        sete    %al\n        negq    %rax\n\nA similar conversion can be used for\n\n\treturn -(x != 0)\n\nwhere NEG insn can be used instead of compare.  According to x86 ISA,\nNEG insn sets carry flag when the source operand is != 0, resulting in:\n\n        negq    %rdi\n        sbbq    %rax, %rax\n\nThe conversion avoids partial register stall with SETcc instructions.\n\n\tPR target/94795\n\t* config/i386/i386.md (*neg<mode>_ccc): New insn pattern.\n\t(EQ compare->LTU compare splitter): New splitter.\n\t(NE compare->NEG splitter): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/94795\n\t* gcc.target/i386/pr94795-1.c: New test.\n\t* gcc.target/i386/pr94795-2.c: New test.", "tree": {"sha": "c5af1ef9949c4a9658cb54802bf8c280a9bcecc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5af1ef9949c4a9658cb54802bf8c280a9bcecc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9decd08b7b153a593a0b61e4f5373cb9574a1973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9decd08b7b153a593a0b61e4f5373cb9574a1973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9decd08b7b153a593a0b61e4f5373cb9574a1973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9decd08b7b153a593a0b61e4f5373cb9574a1973/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97268c374a348a60c53366a4bee67626c840e4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97268c374a348a60c53366a4bee67626c840e4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97268c374a348a60c53366a4bee67626c840e4a1"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "76c0086723120dc3ccf79b294b4e25baa02dce6d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9decd08b7b153a593a0b61e4f5373cb9574a1973", "patch": "@@ -9900,6 +9900,17 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*neg<mode>_ccc\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(ne:CCC\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n+  \"\"\n+  \"neg{<imodesuffix>}\\t%0\"\n+  [(set_attr \"type\" \"negnot\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; Negate with jump on overflow.\n (define_expand \"negv<mode>3\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n@@ -18015,9 +18026,9 @@\n    (set_attr \"length_immediate\" \"0\")])\n \n (define_insn \"*x86_mov<mode>cc_0_m1_neg\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(neg:SWI48 (match_operator 1 \"ix86_carry_flag_operator\"\n-\t\t    [(reg FLAGS_REG) (const_int 0)])))\n+  [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n+\t(neg:SWI (match_operator 1 \"ix86_carry_flag_operator\"\n+\t\t  [(reg FLAGS_REG) (const_int 0)])))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"sbb{<imodesuffix>}\\t%0, %0\"\n@@ -18045,6 +18056,33 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\")\n \n+(define_split\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(neg:SWI\n+\t  (eq:SWI\n+\t    (match_operand 1 \"int_nonimmediate_operand\")\n+\t    (const_int 0))))]\n+  \"\"\n+  [(set (reg:CC FLAGS_REG) (compare:CC (match_dup 1) (const_int 1)))\n+   (parallel [(set (match_dup 0)\n+\t\t   (neg:SWI (ltu:SWI (reg:CC FLAGS_REG) (const_int 0))))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n+(define_split\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(neg:SWI\n+\t  (ne:SWI\n+\t    (match_operand 1 \"int_nonimmediate_operand\")\n+\t    (const_int 0))))]\n+  \"\"\n+  [(parallel [(set (reg:CCC FLAGS_REG)\n+\t\t   (ne:CCC (match_dup 1) (const_int 0)))\n+\t      (clobber (match_dup 2))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (neg:SWI (ltu:SWI (reg:CCC FLAGS_REG) (const_int 0))))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[2] = gen_rtx_SCRATCH (GET_MODE (operands[1]));\")\n+\n (define_insn \"*mov<mode>cc_noc\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:SWI248 (match_operator 1 \"ix86_comparison_operator\""}, {"sha": "c87a3dd403040c3b85f20562478958b7af480d50", "filename": "gcc/testsuite/gcc.target/i386/pr94795-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-1.c?ref=9decd08b7b153a593a0b61e4f5373cb9574a1973", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/94795 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char fooc (char x)\n+{\n+  return x ? -1 : 0;\n+}\n+\n+short foos (short x)\n+{\n+  return x ? -1 : 0;\n+}\n+\n+long fooi (long x)\n+{\n+  return x ? -1 : 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"test|cmp\" } } */\n+/* { dg-final { scan-assembler-times \"sbb\" 3 } } */"}, {"sha": "87d76299a8a8ea114a2219e63f670050ae9b16f5", "filename": "gcc/testsuite/gcc.target/i386/pr94795-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9decd08b7b153a593a0b61e4f5373cb9574a1973/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94795-2.c?ref=9decd08b7b153a593a0b61e4f5373cb9574a1973", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/94795 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char fooc (char x)\n+{\n+  return -(x == 0);\n+}\n+\n+short foos (short x)\n+{\n+  return -(x == 0);\n+}\n+\n+long fooi (long x)\n+{\n+  return -(x == 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sbb\" 3 } } */"}]}