{"sha": "d7afec4b079f40ba7857ae1c898ed537b5c14313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZmVjNGIwNzlmNDBiYTc4NTdhZTFjODk4ZWQ1MzdiNWMxNDMxMw==", "commit": {"author": {"name": "Niall Douglas", "email": "s_fsfeurope2@nedprod.com", "date": "2004-07-25T22:52:22Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-07-25T22:52:22Z"}, "message": "re PR c++/9283 (__attribute__((visibility (\"hidden\"))) not supported for class/struct)\n\n\tPR c++/9283\n\tPR c++/15000\n\t* c-common.c (c_common_attribute_table): Allow\n\thandle_visibility_attribute to be called for types.\n\t(handle_visibility_attribute) When given a type, set the visibility\n\tbits on the TYPE_NAME.  When given a decl, don't set no_add_attrs\n\tso that we can check later whether the attribute was present. Added\n\twarning if attribute applied to non class type.\n\t* c-decl.c (diagnose_mismatched_decls): Updated rules for merging\n\tdecls and checking that they are consistent.\n\t* common.opt: Added -fvisibility.\n\t* c.opt, c-opts.c: Added -fvisibility-inlines-hidden.\n\t* c-pragma.h, c-pragma.c: Added handle_pragma_visibility().\n\t* flags.h, tree.h: Added assorted support defines for overall patch\n\t* opts.c: Added parsing support for -fvisibility.\n\t* tree.c (build_decl): Set visibility for all decls to be whatever\n\tis in force at that time.\n\t* varasm.c (default_binds_local_p_1): Reworked logic determining\n\twhen to make a symbol locally bound.\n\t* doc/invoke.texi: Added documentation for -fvisibility and\n\t-fvisibility-inlines-hidden.\n\n\tPR c++/15000\n\tPR c++/9283\n\t* class.c (check_field_decls): Apply hidden visibility if\n\t-fvisibility-inlines-hidden and inlined unless otherwise specified\n\t(build_vtable): Set vtable visibility to class visibility.\n\t(check_field_decls): Default static member visibility to class\n\tvisibility.\n\t(check_methods): Default method visibility to class visibility.\n\t* cp-tree.h: Added CLASSTYPE_VISIBILITY and\n\tCLASSTYPE_VISIBILITY_SPECIFIED macro.\n\t* decl.c (duplicate_decls): New logic for merging definition decls\n\twith declaration decls. Added ignore & warning when non default\n\tapplied to global operator new or delete.\n\t* method.c, optimize.c, rtti.c: Added setting of VISIBILITY_SPECIFIED\n\twherever VISIBILITY was changed\n\t* rtti.c (get_tinfo_decl): Set typeinfo visibility to class\n\tvisibility.\n\t(tinfo_base_init): Set typeinfo name visibility to class visibility.\n\n\tPR c++/9283\n\tPR c++/15000\n\t* gcc.dg/visibility-9.c, gcc.dg/visibility-a.c: New tests.\n\t* g++.dg/ext/visibility/: New directory.\n\t* g++.dg/ext/visibility-1.C, g++.dg/ext/visibility-2.C\n\tg++.dg/ext/visibility-3.C, g++.dg/ext/visibility-4.C,\n\tg++.dg/ext/visibility-5.C, g++.dg/ext/visibility-6.C,\n\tg++.dg/ext/visibility-7.C: Move to g++.dg/ext/visibility/.\n\t* g++.dg/ext/visibility/fvisibility.C,\n\tg++.dg/ext/visibility/fvisibility-inlines-hidden.C,\n\tg++.dg/ext/visibility/fvisibility-override1.C\n\tg++.dg/ext/visibility/fvisibility-override2.C\n\tg++.dg/ext/visibility/memfuncts.C\n\tg++.dg/ext/visibility/noPLT.C\n\tg++.dg/ext/visibility/pragma.C\n\tg++.dg/ext/visibility/pragma-override1.C\n\tg++.dg/ext/visibility/pragma-override2.C\n\tg++.dg/ext/visibility/staticmemfuncts.C\n\tg++.dg/ext/visibility/virtual.C: New tests.\n\nCo-Authored-By: Brian Ryner <bryner@brianryner.com>\n\nFrom-SVN: r85167", "tree": {"sha": "f9985edc87f0241509ea6f38be708082bb83209a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9985edc87f0241509ea6f38be708082bb83209a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7afec4b079f40ba7857ae1c898ed537b5c14313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afec4b079f40ba7857ae1c898ed537b5c14313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7afec4b079f40ba7857ae1c898ed537b5c14313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7afec4b079f40ba7857ae1c898ed537b5c14313/comments", "author": null, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28dab13236a7f958a8dc533363dcbe8e18eeeae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dab13236a7f958a8dc533363dcbe8e18eeeae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dab13236a7f958a8dc533363dcbe8e18eeeae5"}], "stats": {"total": 609, "additions": 584, "deletions": 25}, "files": [{"sha": "6c69579d8cc897a6ecbac716affe3a3f2bef495f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -1,3 +1,28 @@\n+2004-07-26  Niall Douglas  <s_fsfeurope2@nedprod.com>\r\n+\t    Brian Ryner  <bryner@brianryner.com>\r\n+\r\n+\tPR c++/9283\r\n+\tPR c++/15000\r\n+\t* c-common.c (c_common_attribute_table): Allow\r\n+\thandle_visibility_attribute to be called for types.\r\n+\t(handle_visibility_attribute) When given a type, set the visibility\r\n+\tbits on the TYPE_NAME.  When given a decl, don't set no_add_attrs\r\n+\tso that we can check later whether the attribute was present. Added\r\n+\twarning if attribute applied to non class type.\r\n+\t* c-decl.c (diagnose_mismatched_decls): Updated rules for merging\r\n+\tdecls and checking that they are consistent.\r\n+\t* common.opt: Added -fvisibility.\r\n+\t* c.opt, c-opts.c: Added -fvisibility-inlines-hidden.\r\n+\t* c-pragma.h, c-pragma.c: Added handle_pragma_visibility().\r\n+\t* flags.h, tree.h: Added assorted support defines for overall patch\r\n+\t* opts.c: Added parsing support for -fvisibility.\r\n+\t* tree.c (build_decl): Set visibility for all decls to be whatever\r\n+\tis in force at that time.\r\n+\t* varasm.c (default_binds_local_p_1): Reworked logic determining\r\n+\twhen to make a symbol locally bound.\r\n+\t* doc/invoke.texi: Added documentation for -fvisibility and\r\n+\t-fvisibility-inlines-hidden.\r\n+\r\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* basic-block.h (reorder_block_def): Rename to reorder_block_def_p."}, {"sha": "2fe696d676cd8cb8b7f82e32aab18563d7e5f6d8", "filename": "gcc/c-common.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -616,7 +616,7 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_deprecated_attribute },\n   { \"vector_size\",\t      1, 1, false, true, false,\n \t\t\t      handle_vector_size_attribute },\n-  { \"visibility\",\t      1, 1, true,  false, false,\n+  { \"visibility\",\t      1, 1, false, false, false,\n \t\t\t      handle_visibility_attribute },\n   { \"tls_model\",\t      1, 1, true,  false, false,\n \t\t\t      handle_tls_model_attribute },\n@@ -4563,7 +4563,16 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n \n   *no_add_attrs = true;\n \n-  if (decl_function_context (decl) != 0 || ! TREE_PUBLIC (decl))\n+  if (TYPE_P (*node))\n+    {\n+      if (TREE_CODE (*node) != RECORD_TYPE && TREE_CODE (*node) != UNION_TYPE)\n+       {\n+         warning (\"`%s' attribute ignored on non-class types\",\n+                  IDENTIFIER_POINTER (name));\n+         return NULL_TREE;\n+       }\n+    }\n+  else if (decl_function_context (decl) != 0 || ! TREE_PUBLIC (decl))\n     {\n       warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n       return NULL_TREE;\n@@ -4574,6 +4583,14 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n       error (\"visibility arg not a string\");\n       return NULL_TREE;\n     }\n+  \n+  /*  If this is a type, set the visibility on the type decl.  */\n+  if (TYPE_P (decl))\n+    {\n+      decl = TYPE_NAME (decl);\n+      if (! decl)\n+        return NULL_TREE;\n+    }\n \n   if (strcmp (TREE_STRING_POINTER (id), \"default\") == 0)\n     DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n@@ -4585,6 +4602,14 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     DECL_VISIBILITY (decl) = VISIBILITY_PROTECTED;\n   else\n     error (\"visibility arg must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+\n+  /* For decls only, go ahead and attach the attribute to the node as well.\n+     This is needed so we can determine whether we have VISIBILITY_DEFAULT\n+     because the visibility was not specified, or because it was explicitly\n+     overridden from the class visibility.  */\n+  if (DECL_P (*node))\n+    *no_add_attrs = false;\n \n   return NULL_TREE;\n }"}, {"sha": "e4c022ff25e954b526fce32c44a6f6cf8b8324d6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -1367,9 +1367,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n     }\n \n   /* warnings */\n-  /* All decls must agree on a non-default visibility.  */\n-  if (DECL_VISIBILITY (newdecl) != VISIBILITY_DEFAULT\n-      && DECL_VISIBILITY (olddecl) != VISIBILITY_DEFAULT\n+  /* All decls must agree on a visibility.  */\n+  if (DECL_VISIBILITY_SPECIFIED (newdecl) && DECL_VISIBILITY_SPECIFIED (olddecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n       warning (\"%Jredeclaration of '%D' with different visibility \"\n@@ -1570,9 +1569,12 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n      Currently, it can only be defined in the prototype.  */\n   COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n \n-  /* If either declaration has a nondefault visibility, use it.  */\n-  if (DECL_VISIBILITY (olddecl) != VISIBILITY_DEFAULT)\n-    DECL_VISIBILITY (newdecl) = DECL_VISIBILITY (olddecl);\n+  /* Use visibility of whichever declaration had it specified */\n+  if (DECL_VISIBILITY_SPECIFIED (olddecl))\n+    {\n+      DECL_VISIBILITY (newdecl) = DECL_VISIBILITY (olddecl);\n+      DECL_VISIBILITY_SPECIFIED (newdecl) = 1;\n+    }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {"}, {"sha": "faa6023b1b9bf1b61c2190eb03404ab9ad76acbe", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -764,6 +764,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fuse_cxa_atexit:\n       flag_use_cxa_atexit = value;\n       break;\n+      \n+    case OPT_fvisibility_inlines_hidden:\n+      visibility_options.inlines_hidden = value;\n+      break;\n \n     case OPT_fweak:\n       flag_weak = value;"}, {"sha": "0bf2f1231bc22589fb629cd06f91674fa0cefa68", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -566,6 +566,86 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n   return 0;\n }\n \n+\n+#ifdef HANDLE_PRAGMA_VISIBILITY\n+static void handle_pragma_visibility (cpp_reader *);\n+\n+/* Sets the default visibility for symbols to something other than that\n+   specified on the command line.  */\n+static void\n+handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+{ /* Form is #pragma GCC visibility push(hidden)|pop */\n+  static int visstack [16], visidx;\n+  tree x;\n+  enum cpp_ttype token;\n+  enum { bad, push, pop } action = bad;\n+ \n+  token = c_lex (&x);\n+  if (token == CPP_NAME)\n+    {\n+      const char *op = IDENTIFIER_POINTER (x);\n+      if (!strcmp (op, \"push\"))\n+        action = push;\n+      else if (!strcmp (op, \"pop\"))\n+        action = pop;\n+    }\n+  if (bad == action)\n+    GCC_BAD (\"#pragma GCC visibility must be followed by push or pop\");\n+  else\n+    {\n+      if (pop == action)\n+        {\n+          if (!visidx)\n+            {\n+              GCC_BAD (\"No matching push for '#pragma GCC visibility pop'\");\n+            }\n+          else\n+            {\n+              default_visibility = visstack[--visidx];\n+              visibility_options.inpragma = (visidx>0);\n+            }\n+        }\n+      else\n+        {\n+          if (c_lex (&x) != CPP_OPEN_PAREN)\n+            GCC_BAD (\"missing '(' after '#pragma GCC visibility push' - ignored\");\n+          token = c_lex (&x);\n+          if (token != CPP_NAME)\n+            {\n+              GCC_BAD (\"malformed #pragma GCC visibility push\");\n+            }\n+          else if (visidx >= 16)\n+            {\n+              GCC_BAD (\"No more than sixteen #pragma GCC visibility pushes allowed at once\");\n+            }\n+          else\n+            {\n+              const char *str = IDENTIFIER_POINTER (x);\n+              visstack[visidx++] = default_visibility;\n+              if (!strcmp (str, \"default\"))\n+                default_visibility = VISIBILITY_DEFAULT;\n+              else if (!strcmp (str, \"internal\"))\n+                default_visibility = VISIBILITY_INTERNAL;\n+              else if (!strcmp (str, \"hidden\"))\n+                default_visibility = VISIBILITY_HIDDEN;  \n+              else if (!strcmp (str, \"protected\"))\n+                default_visibility = VISIBILITY_PROTECTED;\n+              else\n+                {\n+                  GCC_BAD (\"#pragma GCC visibility push() must specify default, internal, hidden or protected\");\n+                }\n+              visibility_options.inpragma = 1;\n+            }\n+          if (c_lex (&x) != CPP_CLOSE_PAREN)\n+            GCC_BAD (\"missing '(' after '#pragma GCC visibility push' - ignored\");\n+        }\n+    }\n+  if (c_lex (&x) != CPP_EOF)\n+    warning (\"junk at end of '#pragma GCC visibility'\");\n+}\n+\n+#endif\n+\n /* Front-end wrapper for pragma registration to avoid dragging\n    cpplib.h in almost everywhere.  */\n void\n@@ -585,6 +665,9 @@ init_pragma (void)\n #ifdef HANDLE_PRAGMA_WEAK\n   c_register_pragma (0, \"weak\", handle_pragma_weak);\n #endif\n+#ifdef HANDLE_PRAGMA_VISIBILITY\n+  c_register_pragma (\"GCC\", \"visibility\", handle_pragma_visibility);\n+#endif\n \n   c_register_pragma (0, \"redefine_extname\", handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);"}, {"sha": "64c83ff0c5a22d19050834fc1d56c31d487222e9", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -44,6 +44,11 @@ extern struct cpp_reader* parse_in;\n #define HANDLE_PRAGMA_PACK 1\n #endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \n+/* It's safe to always leave visibility pragma enabled as if\n+   visibility is not supported on the host OS platform the\n+   statements are ignored.  */\n+#define HANDLE_PRAGMA_VISIBILITY 1\n+\n extern void init_pragma (void);\n \n /* Front-end wrapper for pragma registration to avoid dragging"}, {"sha": "2f85c8cb35f03960cd5933c978c19d6976a2c536", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -683,6 +683,10 @@ fuse-cxa-atexit\n C++ ObjC++\n Use __cxa_atexit to register destructors\n \n+fvisibility-inlines-hidden\n+C++\n+Marks all inlined methods as having hidden visibility\n+\n fvtable-gc\n C++ ObjC++\n Discard unused virtual functions"}, {"sha": "24310f1932275d15141c575658795d3a64c5f020", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -913,6 +913,11 @@ fverbose-asm\n Common Report Var(flag_verbose_asm)\n Add extra commentary to assembler output\n \n+fvisibility=\n+Common Joined RejectNegative\n+-fvisibility=[default|internal|hidden|protected]\tSet the default symbol visibility\n+\n+\n fvpt\n Common Report Var(flag_value_profile_transformations)\n Use expression value profiles in optimizations"}, {"sha": "182f373a26af7ad920348edf25938642e614ac3b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -1,3 +1,25 @@\n+2004-07-26  Niall Douglas  <s_fsfeurope2@nedprod.com>\r\n+\t    Brian Ryner  <bryner@brianryner.com>\r\n+\r\n+\tPR c++/15000\r\n+\tPR c++/9283\r\n+\t* class.c (check_field_decls): Apply hidden visibility if\r\n+\t-fvisibility-inlines-hidden and inlined unless otherwise specified\r\n+\t(build_vtable): Set vtable visibility to class visibility.\r\n+\t(check_field_decls): Default static member visibility to class\r\n+\tvisibility.\r\n+\t(check_methods): Default method visibility to class visibility.\r\n+\t* cp-tree.h: Added CLASSTYPE_VISIBILITY and\r\n+\tCLASSTYPE_VISIBILITY_SPECIFIED macro.\r\n+\t* decl.c (duplicate_decls): New logic for merging definition decls\r\n+\twith declaration decls. Added ignore & warning when non default\r\n+\tapplied to global operator new or delete.\r\n+\t* method.c, optimize.c, rtti.c: Added setting of VISIBILITY_SPECIFIED\r\n+\twherever VISIBILITY was changed\r\n+\t* rtti.c (get_tinfo_decl): Set typeinfo visibility to class\r\n+\tvisibility.\r\n+\t(tinfo_base_init): Set typeinfo name visibility to class visibility.\r\n+\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* decl.c: Rename all identifiers named `class' to `cl'."}, {"sha": "f30d519fe8f8545a67a9c60a76916dcf5e411d0a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -607,6 +607,10 @@ build_vtable (tree class_type, tree name, tree vtable_type)\n   DECL_ALIGN (decl) = MAX (TYPE_ALIGN (double_type_node),\n \t\t\t   DECL_ALIGN (decl));\n \n+  /* The vtable's visibility is the class visibility.  There is no way\n+     to override the visibility for just the vtable. */\n+  DECL_VISIBILITY (decl) = CLASSTYPE_VISIBILITY (class_type);\n+  DECL_VISIBILITY_SPECIFIED (decl) = CLASSTYPE_VISIBILITY_SPECIFIED (class_type);\n   import_export_vtable (decl, class_type, 0);\n \n   return decl;\n@@ -2914,7 +2918,25 @@ check_field_decls (tree t, tree *access_decls,\n \tcontinue;\n \t  \n       if (TREE_CODE (x) == CONST_DECL || TREE_CODE (x) == VAR_DECL)\n-\tcontinue;\n+\t{\n+\t  /* Apply the class's visibility attribute to static members\n+\t     which do not have a visibility attribute. */\n+\t  if (! lookup_attribute (\"visibility\", DECL_ATTRIBUTES (x)))\n+            {\n+              if (visibility_options.inlines_hidden && DECL_INLINE (x))\n+                {\n+                  DECL_VISIBILITY (x) = VISIBILITY_HIDDEN;\n+                  DECL_VISIBILITY_SPECIFIED (x) = 1;\n+                }\n+              else\n+                {\n+                  DECL_VISIBILITY (x) = CLASSTYPE_VISIBILITY (current_class_type);\n+                  DECL_VISIBILITY_SPECIFIED (x) = CLASSTYPE_VISIBILITY_SPECIFIED (current_class_type);\n+                }\n+            }\n+\n+\t  continue;\n+\t}\n \n       /* Now it can only be a FIELD_DECL.  */\n \n@@ -3669,6 +3691,22 @@ check_methods (tree t)\n       check_for_override (x, t);\n       if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n \tcp_error_at (\"initializer specified for non-virtual method `%D'\", x);\n+ \n+      /* Apply the class's visibility attribute to methods which do\n+\t not have a visibility attribute. */\n+      if (! lookup_attribute (\"visibility\", DECL_ATTRIBUTES (x)))\n+        {\n+          if (visibility_options.inlines_hidden && DECL_INLINE (x))\n+            {\n+              DECL_VISIBILITY (x) = VISIBILITY_HIDDEN;\n+              DECL_VISIBILITY_SPECIFIED (x) = 1;\n+            }\n+          else\n+            {\n+              DECL_VISIBILITY (x) = CLASSTYPE_VISIBILITY (current_class_type);\n+              DECL_VISIBILITY_SPECIFIED (x) = CLASSTYPE_VISIBILITY_SPECIFIED (current_class_type);\n+            }\n+        }\n \n       /* The name of the field is the original field name\n \t Save this in auxiliary field for later overloading.  */\n@@ -7763,3 +7801,4 @@ cp_fold_obj_type_ref (tree ref, tree known_type)\n \n   return build_address (fndecl);\n }\n+"}, {"sha": "e7eed5e44377855d6d2959c0f050e3f999f9d83f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -931,7 +931,12 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define PUBLICLY_UNIQUELY_DERIVED_P(PARENT, TYPE) \\\n   (lookup_base ((TYPE), (PARENT),  ba_not_special | ba_quiet, NULL) \\\n    != NULL_TREE)\n-\f\n+\n+/* Gives the visibility specification for a class type.  */\n+#define CLASSTYPE_VISIBILITY(TYPE)\t\tDECL_VISIBILITY (TYPE_NAME (TYPE))\n+#define CLASSTYPE_VISIBILITY_SPECIFIED(TYPE)\tDECL_VISIBILITY_SPECIFIED (TYPE_NAME (TYPE))\n+\n+\n /* This is a few header flags for 'struct lang_type'.  Actually,\n    all but the first are used only for lang_type_class; they\n    are put in this structure to save space.  */"}, {"sha": "2a9e61fdd390877c341af47906697b9232c232e1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -1866,17 +1866,34 @@ duplicate_decls (tree newdecl, tree olddecl)\n   DECL_COMMON (newdecl) = DECL_COMMON (olddecl);\n   COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n \n-  /* If either declaration has a nondefault visibility, use it.  */\n-  if (DECL_VISIBILITY (olddecl) != VISIBILITY_DEFAULT)\n+  /* Warn about conflicting visibility specifications.  */\n+  if (DECL_VISIBILITY_SPECIFIED (olddecl) && DECL_VISIBILITY_SPECIFIED (newdecl)\n+      && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n+    {\n+      warning (\"%J'%D': visibility attribute ignored because it\",\n+        newdecl, newdecl);\n+      warning (\"%Jconflicts with previous declaration here\", olddecl);\n+    }\n+  /* Choose the declaration which specified visibility.  */\n+  if (DECL_VISIBILITY_SPECIFIED (olddecl))\n     {\n-      if (DECL_VISIBILITY (newdecl) != VISIBILITY_DEFAULT\n-\t  && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n-\t{\n-\t  warning (\"%J'%D': visibility attribute ignored because it\",\n-\t\t   newdecl, newdecl);\n-\t  warning (\"%Jconflicts with previous declaration here\", olddecl);\n-\t}\n       DECL_VISIBILITY (newdecl) = DECL_VISIBILITY (olddecl);\n+      DECL_VISIBILITY_SPECIFIED (newdecl) = 1;\n+    }\n+  /* If it's a definition of a global operator new or operator\n+     delete, it must be default visibility.  */\n+  if (NEW_DELETE_OPNAME_P (DECL_NAME (newdecl)) && DECL_INITIAL (newdecl) != NULL_TREE)\n+    {\n+      if (!DECL_FUNCTION_MEMBER_P (newdecl) && VISIBILITY_DEFAULT != DECL_VISIBILITY (newdecl))\n+        {\n+          warning (\"%J`%D': ignoring non-default symbol\",\n+            newdecl, newdecl);\n+          warning (\"%Jvisibility on global operator new or delete\", newdecl);\n+          DECL_VISIBILITY (olddecl) = VISIBILITY_DEFAULT;\n+          DECL_VISIBILITY_SPECIFIED (olddecl) = 1;\n+          DECL_VISIBILITY (newdecl) = VISIBILITY_DEFAULT;\n+          DECL_VISIBILITY_SPECIFIED (newdecl) = 1;\n+        }\n     }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)"}, {"sha": "07fbacf266a42d5f7594bab95c8aba213e029559", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -368,6 +368,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n      rewrite.  */\n   TREE_PUBLIC (thunk_fndecl) = TREE_PUBLIC (function);\n   DECL_VISIBILITY (thunk_fndecl) = DECL_VISIBILITY (function);\n+  DECL_VISIBILITY_SPECIFIED (thunk_fndecl) = DECL_VISIBILITY_SPECIFIED (function);\n   if (flag_weak && TREE_PUBLIC (thunk_fndecl))\n     comdat_linkage (thunk_fndecl);\n "}, {"sha": "000d6cc4c27981f63bd81830918171cd549781ed", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -112,6 +112,7 @@ maybe_clone_body (tree fn)\n       DECL_NOT_REALLY_EXTERN (clone) = DECL_NOT_REALLY_EXTERN (fn);\n       TREE_PUBLIC (clone) = TREE_PUBLIC (fn);\n       DECL_VISIBILITY (clone) = DECL_VISIBILITY (fn);\n+      DECL_VISIBILITY_SPECIFIED (clone) = DECL_VISIBILITY_SPECIFIED (fn);\n \n       /* Adjust the parameter names and locations.  */\n       parm = DECL_ARGUMENTS (fn);"}, {"sha": "7332a9a69140c92f28767d7f0940a00095e96446", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -360,7 +360,11 @@ get_tinfo_decl (tree type)\n       pushdecl_top_level_and_finish (d, NULL_TREE);\n \n       if (CLASS_TYPE_P (type))\n-\tCLASSTYPE_TYPEINFO_VAR (TYPE_MAIN_VARIANT (type)) = d;\n+\t{\n+\t  CLASSTYPE_TYPEINFO_VAR (TYPE_MAIN_VARIANT (type)) = d;\n+\t  DECL_VISIBILITY (d) = CLASSTYPE_VISIBILITY (type);\n+\t  DECL_VISIBILITY_SPECIFIED (d) = CLASSTYPE_VISIBILITY_SPECIFIED (type);\n+\t}\n \n       /* Remember the type it is for.  */\n       TREE_TYPE (name) = type;\n@@ -758,6 +762,11 @@ tinfo_base_init (tree desc, tree target)\n     TREE_STATIC (name_decl) = 1;\n     DECL_EXTERNAL (name_decl) = 0;\n     TREE_PUBLIC (name_decl) = 1;\n+    if (CLASS_TYPE_P (target))\n+      {\n+        DECL_VISIBILITY (name_decl) = CLASSTYPE_VISIBILITY (target);\n+        DECL_VISIBILITY_SPECIFIED (name_decl) = CLASSTYPE_VISIBILITY_SPECIFIED (target);\n+      }\n     import_export_tinfo (name_decl, target, typeinfo_in_lib_p (target));\n     /* External name of the string containing the type's name has a\n        special name.  */"}, {"sha": "2dc69698307a5657f4818a9d3f3408e7776bb538", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -182,7 +182,8 @@ in the following sections.\n -fno-optional-diags  -fpermissive @gol\n -frepo  -fno-rtti  -fstats  -ftemplate-depth-@var{n} @gol\n -fuse-cxa-atexit  -fno-weak  -nostdinc++ @gol\n--fno-default-inline  -Wabi  -Wctor-dtor-privacy @gol\n+-fno-default-inline  -fvisibility-inlines-hidden @gol\n+-Wabi  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wno-deprecated @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n@@ -696,7 +697,8 @@ See S/390 and zSeries Options.\n -fargument-alias  -fargument-noalias @gol\n -fargument-noalias-global  -fleading-underscore @gol\n -ftls-model=@var{model} @gol\n--ftrapv  -fwrapv  -fbounds-check}\n+-ftrapv  -fwrapv  -fbounds-check @gol\n+-fvisibility}\n @end table\n \n @menu\n@@ -1457,6 +1459,20 @@ This option is required for fully standards-compliant handling of static\n destructors, but will only work if your C library supports\n @code{__cxa_atexit}.\n \n+@item -fvisibility-inlines-hidden\n+@opindex fvisibility-inlines-hidden\n+Causes all inlined methods to be marked with\n+@code{__attribute__ ((visibility (\"hidden\")))} so that they do not\n+appear in the export table of a DSO and do not require a PLT indirection\n+when used within the DSO. Enabling this option can have a dramatic effect\n+on load and link times of a DSO as it massively reduces the size of the\n+dynamic export table when the library makes heavy use of templates. While\n+it can cause bloating through duplication of code within each DSO where\n+it is used, often the wastage is less than the considerable space occupied\n+by a long symbol name in the export table which is typical when using\n+templates and namespaces. For even more savings, combine with the\n+@code{-fvisibility=hidden} switch.\n+\n @item -fno-weak\n @opindex fno-weak\n Do not use weak symbol support, even if it is provided by the linker.\n@@ -11630,6 +11646,54 @@ The @var{model} argument should be one of @code{global-dynamic},\n \n The default without @option{-fpic} is @code{initial-exec}; with\n @option{-fpic} the default is @code{global-dynamic}.\n+\n+@item -fvisibility=@var{default|internal|hidden|protected}\n+@opindex fvisibility\n+Set the default ELF image symbol visibility to the specified option - all\n+symbols will be marked with this unless overrided within the code.\n+Using this feature can very substantially improve linking and\n+load times of shared object libraries, produce more optimised\n+code, provide near-perfect API export and prevent symbol clashes.\n+It is @strong{strongly} recommended that you use this in any shared objects\n+you distribute.\n+     \n+Despite the nomenclature, @code{default} always means public ie;\n+available to be linked against from outside the shared object.\n+@code{protected} and @code{internal} are pretty useless in real-world\n+usage so the only other commonly used option will be @code{hidden}.\n+The default if -fvisibility isn't specified is @code{default} ie; make every\n+symbol public - this causes the same behaviour as previous versions of\n+GCC.\n+     \n+A good explanation of the benefits offered by ensuring ELF\n+symbols have the correct visibility is given by ``How To Write\n+Shared Libraries'' by Ulrich Drepper (which can be found at\n+@w{@uref{http://people.redhat.com/~drepper/}}) - however a superior\n+solution made possible by this option to marking things hidden when\n+the default is public is to make the default hidden and mark things\n+public. This is the norm with DLL's on Windows and with @option{-fvisibility=hidden}\n+and @code{__attribute__ ((visibility(\"default\")))} instead of\n+@code{__declspec(dllexport)} you get almost identical semantics with\n+identical syntax. This is a great boon to those working with\n+cross-platform projects.\n+\n+For those adding visibility support to existing code, you may find\n+@samp{#pragma GCC visibility} of use. This works by you enclosing\n+the declarations you wish to set visibility for with (for example)\n+@samp{#pragma GCC visibility push(hidden)} and\n+@samp{#pragma GCC visibility pop}. These can be nested up to sixteen\n+times. Bear in mind that symbol visibility should be viewed @strong{as\n+part of the API interface contract} and thus all new code should\n+always specify visibility when it is not the default ie; declarations\n+only for use within the local DSO should @strong{always} be marked explicitly\n+as hidden as so to avoid PLT indirection overheads - making this\n+abundantly clear also aids readability and self-documentation of the code.\n+Note that due to ISO C++ specification requirements, operator new and\n+operator delete must always be of default visibility.\n+\n+An overview of these techniques, their benefits and how to use them\n+is at @w{@uref{http://www.nedprod.com/programs/gccvisibility.html}}.\n+\n @end table\n \n @c man end"}, {"sha": "542a53fea3897cd95b6fc198b6237c188489256c", "filename": "gcc/flags.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -59,6 +59,30 @@ extern enum debug_info_level debug_info_level;\n    debugging information.  */\n extern bool use_gnu_debug_info_extensions;\n \n+/* Enumerate visibility settings.  */\n+#ifndef SYMBOL_VISIBILITY_DEFINED\n+#define SYMBOL_VISIBILITY_DEFINED\n+enum symbol_visibility\n+{\n+  VISIBILITY_DEFAULT,\n+  VISIBILITY_INTERNAL,\n+  VISIBILITY_HIDDEN,\n+  VISIBILITY_PROTECTED\n+};\n+#endif\n+\n+/* The default visibility for all symbols (unless overridden).  */\n+extern enum symbol_visibility default_visibility;\n+\n+struct visibility_flags\n+{\n+  unsigned inpragma : 1;\t/* True when in #pragma GCC visibility.  */\n+  unsigned inlines_hidden : 1;\t/* True when -finlineshidden in effect.  */\n+};\n+\n+/* Global visibility options.  */\n+extern struct visibility_flags visibility_options;\n+\n /* Nonzero means do optimizations.  -opt.  */\n \n extern int optimize;"}, {"sha": "01297b0ee53bb2ad882402d1160215a84942c5ef", "filename": "gcc/opts.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -76,6 +76,12 @@ enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n    write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n bool use_gnu_debug_info_extensions;\n \n+/* The default visibility for all symbols (unless overridden) */\n+enum symbol_visibility default_visibility = VISIBILITY_DEFAULT;\n+\n+/* Global visibility options.  */\n+struct visibility_flags visibility_options;\n+\n /* Columns of --help display.  */\n static unsigned int columns = 80;\n \n@@ -826,6 +832,21 @@ common_handle_option (size_t scode, const char *arg, int value)\n       flag_profile_values_set = true;\n       break;\n \n+    case OPT_fvisibility_:\n+      {\n+        if (!strcmp(arg, \"default\"))\n+          default_visibility = VISIBILITY_DEFAULT;\n+        else if (!strcmp(arg, \"internal\"))\n+          default_visibility = VISIBILITY_INTERNAL;\n+        else if (!strcmp(arg, \"hidden\"))\n+          default_visibility = VISIBILITY_HIDDEN;\n+        else if (!strcmp(arg, \"protected\"))\n+          default_visibility = VISIBILITY_PROTECTED;\n+        else\n+          error (\"unrecognised visibility value \\\"%s\\\"\", arg);\n+      }\n+      break;\n+\n     case OPT_fvpt:\n       flag_value_profile_transformations_set = value;\n       break;"}, {"sha": "4be1b7e9d1d5f1553468616cb0018335e298c988", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -1,3 +1,26 @@\n+2004-07-26  Niall Douglas  <s_fsfeurope2@nedprod.com>\r\n+\t    Brian Ryner  <bryner@brianryner.com>\r\n+\r\n+\tPR c++/9283\r\n+\tPR c++/15000\r\n+\t* gcc.dg/visibility-9.c, gcc.dg/visibility-a.c: New tests.\n+\t* g++.dg/ext/visibility/: New directory.\n+\t* g++.dg/ext/visibility-1.C, g++.dg/ext/visibility-2.C\n+\tg++.dg/ext/visibility-3.C, g++.dg/ext/visibility-4.C,\n+\tg++.dg/ext/visibility-5.C, g++.dg/ext/visibility-6.C,\n+\tg++.dg/ext/visibility-7.C: Move to g++.dg/ext/visibility/.\n+\t* g++.dg/ext/visibility/fvisibility.C,\n+\tg++.dg/ext/visibility/fvisibility-inlines-hidden.C,\n+\tg++.dg/ext/visibility/fvisibility-override1.C\r\n+\tg++.dg/ext/visibility/fvisibility-override2.C\r\n+\tg++.dg/ext/visibility/memfuncts.C\r\n+\tg++.dg/ext/visibility/noPLT.C\r\n+\tg++.dg/ext/visibility/pragma.C\r\n+\tg++.dg/ext/visibility/pragma-override1.C\r\n+\tg++.dg/ext/visibility/pragma-override2.C\r\n+\tg++.dg/ext/visibility/staticmemfuncts.C\r\n+\tg++.dg/ext/visibility/virtual.C: New tests.\n+\n 2004-07-25  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/15360"}, {"sha": "4b610229b46c8e5469170f007d97cbd22109ecf1", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-inlines-hidden.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,18 @@\n+/* Test that -fvisibility-inlines-hidden affects class members. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility-inlines-hidden\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+\n+class Foo\n+{\n+public:\n+  void method() { }\n+};\n+\n+int main(void)\n+{\n+  Foo f;\n+  f.method();\n+  return 0;\n+}"}, {"sha": "67d5ef09f60e95f2bad7f5cfeb9c6f24fbdcbb7f", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-override1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override1.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,12 @@\n+/* Test that -fvisibility does not override class member specific settings. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility=hidden\" } */\n+/* { dg-final { scan-assembler \"\\\\.internal.*Foo.methodEv\" } } */\n+\n+class __attribute__ ((visibility (\"internal\"))) Foo\n+{\n+  void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "a0a2df5e81b055f83238a769e9a34f58c79d9c76", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-override2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-override2.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,12 @@\n+/* Test that -fvisibility does not override class member specific settings. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility=hidden\" } */\n+/* { dg-final { scan-assembler \"\\\\.internal.*Foo.methodEv\" } } */\n+\n+class Foo\n+{\n+  __attribute__ ((visibility (\"internal\"))) void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "fd2c7e2fc3ebe01b21607957370402fd6dd7da52", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,12 @@\n+/* Test that -fvisibility affects class members. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility=hidden\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+\n+class Foo\n+{\n+  void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "19a5c9d506b60c94ee8496e4b852f4b8f7818d12", "filename": "gcc/testsuite/g++.dg/ext/visibility/memfuncts.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,11 @@\n+/* Test that setting visibility for class member functions works. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+\n+class __attribute__ ((visibility (\"hidden\"))) Foo\n+{\n+  void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "0ad981f7e61fb973edc22d0c16672c8a00ded1b1", "filename": "gcc/testsuite/g++.dg/ext/visibility/noPLT.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2FnoPLT.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,20 @@\n+/* Test that -fvisibility=hidden prevents PLT. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fPIC -fvisibility=hidden\" } */\n+/* { dg-final { scan-assembler-not \"methodEv@PLT\" } } */\n+\n+class Foo\n+{\n+public:\n+  void method();\n+};\n+\n+void Foo::method() { }\n+\n+int main(void)\n+{\n+  Foo f;\n+  f.method();\n+  return 0;\n+}"}, {"sha": "a2c93ebb752fd0d7e25d76b6b5df676b51023d2a", "filename": "gcc/testsuite/g++.dg/ext/visibility/pragma-override1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override1.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,13 @@\n+/* Test that #pragma GCC visibility does not override class member specific settings. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.internal.*Foo.methodEv\" } } */\n+\n+#pragma GCC visibility push(hidden)\n+class __attribute__ ((visibility (\"internal\"))) Foo\n+{\n+  void method();\n+};\n+#pragma GCC visibility pop\n+\n+void Foo::method() { }"}, {"sha": "a4bb42c728a26b8c967b46b0973376274bbc7c89", "filename": "gcc/testsuite/g++.dg/ext/visibility/pragma-override2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma-override2.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,13 @@\n+/* Test that #pragma GCC visibility does not override class member specific settings. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.internal.*Foo.methodEv\" } } */\n+\n+#pragma GCC visibility push(hidden)\n+class Foo\n+{\n+  __attribute__ ((visibility (\"internal\"))) void method();\n+};\n+#pragma GCC visibility pop\n+\n+void Foo::method() { }"}, {"sha": "860b2284e1573f90ea96428aef553a0a628de1b9", "filename": "gcc/testsuite/g++.dg/ext/visibility/pragma.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,13 @@\n+/* Test that #pragma GCC visibility affects class members. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+\n+#pragma GCC visibility push(hidden)\n+class Foo\n+{\n+  void method();\n+};\n+#pragma GCC visibility pop\n+\n+void Foo::method() { }"}, {"sha": "b49cbd5bab96094ae8ed6e15dfd798e68efccc0c", "filename": "gcc/testsuite/g++.dg/ext/visibility/staticmemfuncts.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,11 @@\n+/* Test that setting visibility for static class member functions works. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+\n+class __attribute__ ((visibility (\"hidden\"))) Foo\n+{\n+  static void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "604c552bcb63282f0df5069e6a7590f9a1eb1d89", "filename": "gcc/testsuite/g++.dg/ext/visibility/virtual.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,11 @@\n+/* Test that setting visibility for class affects virtual table. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*ZTV3Foo\" } } */\n+\n+class __attribute__ ((visibility (\"hidden\"))) Foo\n+{\n+  virtual void method();\n+};\n+\n+void Foo::method() { }"}, {"sha": "d579eb27206df83f2c987c1e69aef8bcafef9f1d", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-1.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-1.C"}, {"sha": "89e853c4dc5ce7532a0335af6b2940648626a182", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-2.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-2.C"}, {"sha": "d0cc8912efb79eb3e3a291d4df7734afd0fc8a69", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-3.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-3.C"}, {"sha": "d217bc9ec5dab06c4b0e71bf0e4a63d903dd7dec", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-4.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-4.C"}, {"sha": "9cdc8021e470df69c678b997d586c74698c32297", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-5.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-5.C"}, {"sha": "6e8f0ce1135a84ac7faf230c376c636125bcadf4", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-6.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-6.C"}, {"sha": "40acb72463f35e60e2a4ae45f3baccbe220c928d", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-7.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "previous_filename": "gcc/testsuite/g++.dg/ext/visibility-7.C"}, {"sha": "ac6493ef323ed5cfe80d61795f957ac59195e804", "filename": "gcc/testsuite/gcc.dg/visibility-9.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-9.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,9 @@\n+/* Test that -fvisibility works. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-fvisibility=hidden\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*foo\" } } */\n+\n+void foo();\n+\n+void foo() { }"}, {"sha": "17492342f15ec1f7491f488b4edf426f557a0b06", "filename": "gcc/testsuite/gcc.dg/visibility-a.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-a.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -0,0 +1,10 @@\n+/* Test that #pragma GCC visibility works. */\n+/* { dg-do compile } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*foo\" } } */\n+\n+#pragma GCC visibility push(hidden)\n+void foo();\n+#pragma GCC visibility pop\n+\n+void foo() { }"}, {"sha": "46479be7d3951b4cc3f02d32f9fdfdec3a326aa9", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -2700,6 +2700,11 @@ build_decl_stat (enum tree_code code, tree name, tree type MEM_STAT_DECL)\n     layout_decl (t, 0);\n   else if (code == FUNCTION_DECL)\n     DECL_MODE (t) = FUNCTION_MODE;\n+    \n+  /* Set default visibility to whatever the user supplied with\n+     visibility_specified depending on #pragma GCC visibility.  */\n+  DECL_VISIBILITY (t) = default_visibility;\n+  DECL_VISIBILITY_SPECIFIED (t) = visibility_options.inpragma;\n \n   return t;\n }"}, {"sha": "692716e0cc20ab6021a36e406332a1460d97e9d7", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -2008,6 +2008,10 @@ struct tree_binfo GTY (())\n /* Value of the decls's visibility attribute */\n #define DECL_VISIBILITY(NODE) (DECL_CHECK (NODE)->decl.visibility)\n \n+/* Nonzero means that the decl had its visibility specified rather than\n+   being inferred.  */\n+#define DECL_VISIBILITY_SPECIFIED(NODE) (DECL_CHECK (NODE)->decl.visibility_specified)\n+\n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n #define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.uninlinable)\n \n@@ -2162,14 +2166,16 @@ struct tree_binfo GTY (())\n   FUNCTION_DECL_CHECK (DECL)->decl.possibly_inlined\n \n /* Enumerate visibility settings.  */\n-\n+#ifndef SYMBOL_VISIBILITY_DEFINED\n+#define SYMBOL_VISIBILITY_DEFINED\n enum symbol_visibility\n {\n   VISIBILITY_DEFAULT,\n   VISIBILITY_INTERNAL,\n   VISIBILITY_HIDDEN,\n   VISIBILITY_PROTECTED\n };\n+#endif\n \n struct function;\n union alias_var_def;\n@@ -2214,6 +2220,7 @@ struct tree_decl GTY(())\n   unsigned declared_inline_flag : 1;\n   unsigned seen_in_bind_expr : 1;\n   ENUM_BITFIELD(symbol_visibility) visibility : 2;\n+  unsigned visibility_specified : 1;\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "b73c6542231916b583d314ad66e5c9dc7c12b812", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7afec4b079f40ba7857ae1c898ed537b5c14313/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d7afec4b079f40ba7857ae1c898ed537b5c14313", "patch": "@@ -4956,15 +4956,18 @@ default_binds_local_p_1 (tree exp, int shlib)\n   /* Static variables are always local.  */\n   else if (! TREE_PUBLIC (exp))\n     local_p = true;\n-  /* A variable is local if the user tells us so.  */\n-  else if (DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n+  /* A variable is local if the user explicitly tells us so.  */\n+  else if (DECL_VISIBILITY_SPECIFIED (exp) && DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n     local_p = true;\n   /* Otherwise, variables defined outside this object may not be local.  */\n   else if (DECL_EXTERNAL (exp))\n     local_p = false;\n   /* Linkonce and weak data are never local.  */\n   else if (DECL_ONE_ONLY (exp) || DECL_WEAK (exp))\n     local_p = false;\n+  /* If none of the above and visibility is not default, make local.  */\n+  else if (DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n+    local_p = true;\n   /* If PIC, then assume that any global name can be overridden by\n      symbols resolved from other modules.  */\n   else if (shlib)"}]}