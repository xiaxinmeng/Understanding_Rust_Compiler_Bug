{"sha": "a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlZWNkYzE3MjgyNjAyMDRiZGNkYzNlZjA3YmExMzljYmRkNGZlMg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-02-23T15:27:48Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-02-23T15:27:48Z"}, "message": "altivec.md (altivec_lve<VI_char>x): Replace define_insn with define_expand and new define_insn...\n\ngcc:\n\n2014-02-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.md (altivec_lve<VI_char>x): Replace\n\tdefine_insn with define_expand and new define_insn\n\t*altivec_lve<VI_char>x_internal.\n\t(altivec_stve<VI_char>x): Replace define_insn with define_expand\n\tand new define_insn *altivec_stve<VI_char>x_internal.\n\t* config/rs6000/rs6000-protos.h (altivec_expand_stvex_be): New\n\tprototype.\n\t* config/rs6000/rs6000.c (altivec_expand_lvx_be): Document use by\n\tlve*x built-ins.\n\t(altivec_expand_stvex_be): New function.\n\ngcc/testsuite:\n\n2014-02-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/lde.c: New test.\n\t* gcc.dg/vmx/lde-be-order.c: New test.\n\t* gcc.dg/vmx/ste.c: New test.\n\t* gcc.dg/vmx/ste-be-order.c: New test.\n\nFrom-SVN: r208049", "tree": {"sha": "23e1763923dd2703ca40a5b2709804120d12e835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e1763923dd2703ca40a5b2709804120d12e835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5e216f98b1c2a0e638519b6907f03fe70157b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e216f98b1c2a0e638519b6907f03fe70157b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e216f98b1c2a0e638519b6907f03fe70157b75"}], "stats": {"total": 296, "additions": 293, "deletions": 3}, "files": [{"sha": "af67073ba12b77e8e77b90391c160d90d8e4cae1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -1,3 +1,16 @@\n+2014-02-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+        * config/rs6000/altivec.md (altivec_lve<VI_char>x): Replace\n+        define_insn with define_expand and new define_insn\n+        *altivec_lve<VI_char>x_internal.\n+        (altivec_stve<VI_char>x): Replace define_insn with define_expand\n+        and new define_insn *altivec_stve<VI_char>x_internal.\n+        * config/rs6000/rs6000-protos.h (altivec_expand_stvex_be): New\n+        prototype.\n+        * config/rs6000/rs6000.c (altivec_expand_lvx_be): Document use by\n+        lve*x built-ins.\n+        (altivec_expand_stvex_be): New function.\n+\n 2014-02-22  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/avr/avr.c (avr_can_eliminate): Allow elimination from"}, {"sha": "08357795ce93f291e2558d92591a2b843f364e8c", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -2325,7 +2325,21 @@\n ;; Parallel some of the LVE* and STV*'s with unspecs because some have\n ;; identical rtl but different instructions-- and gcc gets confused.\n \n-(define_insn \"altivec_lve<VI_char>x\"\n+(define_expand \"altivec_lve<VI_char>x\"\n+  [(parallel\n+    [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n+\t  (match_operand:VI 1 \"memory_operand\" \"Z\"))\n+     (unspec [(const_int 0)] UNSPEC_LVE)])]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_lvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_LVE);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_lve<VI_char>x_internal\"\n   [(parallel\n     [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n \t  (match_operand:VI 1 \"memory_operand\" \"Z\"))\n@@ -2435,7 +2449,19 @@\n   \"stvxl %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_insn \"altivec_stve<VI_char>x\"\n+(define_expand \"altivec_stve<VI_char>x\"\n+  [(set (match_operand:<VI_scalar> 0 \"memory_operand\" \"=Z\")\n+\t(unspec:<VI_scalar> [(match_operand:VI 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_stvex_be (operands[0], operands[1], <MODE>mode, UNSPEC_STVE);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_stve<VI_char>x_internal\"\n   [(set (match_operand:<VI_scalar> 0 \"memory_operand\" \"=Z\")\n \t(unspec:<VI_scalar> [(match_operand:VI 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n   \"TARGET_ALTIVEC\""}, {"sha": "3f971f0912fac56b04bc38bc4a0664cac5f00d97", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -60,6 +60,7 @@ extern void altivec_expand_vec_perm_le (rtx op[4]);\n extern bool rs6000_expand_vec_perm_const (rtx op[4]);\n extern void altivec_expand_lvx_be (rtx, rtx, enum machine_mode, unsigned);\n extern void altivec_expand_stvx_be (rtx, rtx, enum machine_mode, unsigned);\n+extern void altivec_expand_stvex_be (rtx, rtx, enum machine_mode, unsigned);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void build_mask64_2_operands (rtx, rtx *);"}, {"sha": "2dff39ef66536bcf9ddbc8dd522f69879db7e1a2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -11848,7 +11848,7 @@ swap_selector_for_mode (enum machine_mode mode)\n   return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm)));\n }\n \n-/* Generate code for an \"lvx\" or \"lvxl\" built-in for a little endian target\n+/* Generate code for an \"lvx\", \"lvxl\", or \"lve*x\" built-in for a little endian target\n    with -maltivec=be specified.  Issue the load followed by an element-reversing\n    permute.  */\n void\n@@ -11885,6 +11885,23 @@ altivec_expand_stvx_be (rtx op0, rtx op1, enum machine_mode mode, unsigned unspe\n   emit_insn (par);\n }\n \n+/* Generate code for a \"stve*x\" built-in for a little endian target with -maltivec=be\n+   specified.  Issue the store preceded by an element-reversing permute.  */\n+void\n+altivec_expand_stvex_be (rtx op0, rtx op1, enum machine_mode mode, unsigned unspec)\n+{\n+  enum machine_mode inner_mode = GET_MODE_INNER (mode);\n+  rtx tmp = gen_reg_rtx (mode);\n+  rtx stvx = gen_rtx_UNSPEC (inner_mode, gen_rtvec (1, tmp), unspec);\n+  rtx sel = swap_selector_for_mode (mode);\n+  rtx vperm;\n+\n+  gcc_assert (REG_P (op1));\n+  vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp, vperm));\n+  emit_insn (gen_rtx_SET (VOIDmode, op0, stvx));\n+}\n+\n static rtx\n altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n {"}, {"sha": "efd818b5ead776f6b4327fd127a94225c00a5450", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -1,3 +1,10 @@\n+2014-02-23  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+        * gcc.dg/vmx/lde.c: New test.\n+        * gcc.dg/vmx/lde-be-order.c: New test.\n+        * gcc.dg/vmx/ste.c: New test.\n+        * gcc.dg/vmx/ste-be-order.c: New test.\n+\n 2014-02-22  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR testsuite/60173"}, {"sha": "9a6d5bae52df148be9e2cb2ac52c5c34b41d29dd", "filename": "gcc/testsuite/gcc.dg/vmx/lde-be-order.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  int i;\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  for (i = 15; i >= 0; --i)\n+#else\n+  for (i = 0; i < 16; ++i)\n+#endif\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+    }\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  for (i = 7; i >= 0; --i)\n+#else\n+  for (i = 0; i < 8; ++i)\n+#endif\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+    }\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  for (i = 3; i >= 0; --i)\n+#else\n+  for (i = 0; i < 4; ++i)\n+#endif\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_lde (9*1, (unsigned char *)svuc);\n+  vsc = vec_lde (14*1, (signed char *)svsc);\n+  vus = vec_lde (7*2, (unsigned short *)svus);\n+  vss = vec_lde (1*2, (signed short *)svss);\n+  vui = vec_lde (3*4, (unsigned int *)svui);\n+  vsi = vec_lde (2*4, (signed int *)svsi);\n+  vf  = vec_lde (0*4, (float *)svf);\n+\n+  check (vec_extract (vuc, 9) == 9, \"vuc\");\n+  check (vec_extract (vsc, 14) == 6, \"vsc\");\n+  check (vec_extract (vus, 7) == 7, \"vus\");\n+  check (vec_extract (vss, 1) == -3, \"vss\");\n+  check (vec_extract (vui, 3) == 3, \"vui\");\n+  check (vec_extract (vsi, 2) == 0, \"vsi\");\n+  check (vec_extract (vf,  0) == 0.0, \"vf\");\n+}"}, {"sha": "5594963c7632cba00860412879a5f1a4ce4fc197", "filename": "gcc/testsuite/gcc.dg/vmx/lde.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde.c?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -0,0 +1,59 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void init ()\n+{\n+  unsigned int i;\n+  for (i = 0; i < 16; ++i)\n+    {\n+      svuc[i] = i;\n+      svsc[i] = i - 8;\n+    }\n+  for (i = 0; i < 8; ++i)\n+    {\n+      svus[i] = i;\n+      svss[i] = i - 4;\n+    }\n+  for (i = 0; i < 4; ++i)\n+    {\n+      svui[i] = i;\n+      svsi[i] = i - 2;\n+      svf[i] = i * 1.0f;\n+    }\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector float vf;\n+\n+  init ();\n+\n+  vuc = vec_lde (9*1, (unsigned char *)svuc);\n+  vsc = vec_lde (14*1, (signed char *)svsc);\n+  vus = vec_lde (7*2, (unsigned short *)svus);\n+  vss = vec_lde (1*2, (signed short *)svss);\n+  vui = vec_lde (3*4, (unsigned int *)svui);\n+  vsi = vec_lde (2*4, (signed int *)svsi);\n+  vf  = vec_lde (0*4, (float *)svf);\n+\n+  check (vec_extract (vuc, 9) == 9, \"vuc\");\n+  check (vec_extract (vsc, 14) == 6, \"vsc\");\n+  check (vec_extract (vus, 7) == 7, \"vus\");\n+  check (vec_extract (vss, 1) == -3, \"vss\");\n+  check (vec_extract (vui, 3) == 3, \"vui\");\n+  check (vec_extract (vsi, 2) == 0, \"vsi\");\n+  check (vec_extract (vf,  0) == 0.0, \"vf\");\n+}"}, {"sha": "75f2004f37217e89384314e71203b591958db442", "filename": "gcc/testsuite/gcc.dg/vmx/ste-be-order.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  check (svuc[9] == 9, \"svuc\");\n+  check (svsc[14] == 6, \"svsc\");\n+  check (svus[7] == 7, \"svus\");\n+  check (svss[1] == -3, \"svss\");\n+  check (svui[3] == 3, \"svui\");\n+  check (svsi[2] == 0, \"svsi\");\n+  check (svf[0] == 0.0, \"svf\");\n+}\n+\n+static void test ()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n+  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n+  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n+  vector unsigned int vui = {3,2,1,0};\n+  vector signed int vsi = {1,0,-1,-2};\n+  vector float vf = {3.0,2.0,1.0,0.0};\n+#else\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+#endif\n+\n+  vec_ste (vuc, 9*1, (unsigned char *)svuc);\n+  vec_ste (vsc, 14*1, (signed char *)svsc);\n+  vec_ste (vus, 7*2, (unsigned short *)svus);\n+  vec_ste (vss, 1*2, (signed short *)svss);\n+  vec_ste (vui, 3*4, (unsigned int *)svui);\n+  vec_ste (vsi, 2*4, (signed int *)svsi);\n+  vec_ste (vf,  0*4, (float *)svf);\n+\n+  check_arrays ();\n+}"}, {"sha": "9bbda3b320e359875f06e7c1679464fe237da65d", "filename": "gcc/testsuite/gcc.dg/vmx/ste.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste.c?ref=a6eecdc1728260204bdcdc3ef07ba139cbdd4fe2", "patch": "@@ -0,0 +1,41 @@\n+#include \"harness.h\"\n+\n+static unsigned char svuc[16] __attribute__ ((aligned (16)));\n+static signed char svsc[16] __attribute__ ((aligned (16)));\n+static unsigned short svus[8] __attribute__ ((aligned (16)));\n+static signed short svss[8] __attribute__ ((aligned (16)));\n+static unsigned int svui[4] __attribute__ ((aligned (16)));\n+static signed int svsi[4] __attribute__ ((aligned (16)));\n+static float svf[4] __attribute__ ((aligned (16)));\n+\n+static void check_arrays ()\n+{\n+  check (svuc[9] == 9, \"svuc\");\n+  check (svsc[14] == 6, \"svsc\");\n+  check (svus[7] == 7, \"svus\");\n+  check (svss[1] == -3, \"svss\");\n+  check (svui[3] == 3, \"svui\");\n+  check (svsi[2] == 0, \"svsi\");\n+  check (svf[0] == 0.0, \"svf\");\n+}\n+\n+static void test ()\n+{\n+  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector unsigned int vui = {0,1,2,3};\n+  vector signed int vsi = {-2,-1,0,1};\n+  vector float vf = {0.0,1.0,2.0,3.0};\n+\n+  vec_ste (vuc, 9*1, (unsigned char *)svuc);\n+  vec_ste (vsc, 14*1, (signed char *)svsc);\n+  vec_ste (vus, 7*2, (unsigned short *)svus);\n+  vec_ste (vss, 1*2, (signed short *)svss);\n+  vec_ste (vui, 3*4, (unsigned int *)svui);\n+  vec_ste (vsi, 2*4, (signed int *)svsi);\n+  vec_ste (vf,  0*4, (float *)svf);\n+\n+  check_arrays ();\n+}"}]}