{"sha": "3f60f6104a559fc14ccda51157f8db6e43df0d52", "node_id": "C_kwDOANBUbNoAKDNmNjBmNjEwNGE1NTlmYzE0Y2NkYTUxMTU3ZjhkYjZlNDNkZjBkNTI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-26T16:03:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-01T15:23:35Z"}, "message": "libproc_macro: Add Span definition\n\nAdd Span type definition in the rust interface.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/rust/bridge/group.rs: Add span member\n\tto the Group structure.\n\t* libgrust/libproc_macro/rust/bridge/ident.rs: Likewise with the\n\tIdent structure.\n\t* libgrust/libproc_macro/rust/bridge/literal.rs: Likewise with\n\tthe Literal structure.\n\t* libgrust/libproc_macro/rust/bridge/punct.rs: Likewise with the\n\tPunct structure.\n\t* libgrust/libproc_macro/rust/bridge/span.rs: Add span\n\tinternals.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "d50a2236b3b2e0c6c1db76992d89ac0084f9e76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50a2236b3b2e0c6c1db76992d89ac0084f9e76d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f60f6104a559fc14ccda51157f8db6e43df0d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f60f6104a559fc14ccda51157f8db6e43df0d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f60f6104a559fc14ccda51157f8db6e43df0d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f60f6104a559fc14ccda51157f8db6e43df0d52/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e9f47b084611a6a8c3a407770160874e1c431a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9f47b084611a6a8c3a407770160874e1c431a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e9f47b084611a6a8c3a407770160874e1c431a"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "254a3db746d2470fad0ed8ccefd7ab68a26bfaef", "filename": "libgrust/libproc_macro/rust/bridge/group.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fgroup.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fgroup.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fgroup.rs?ref=3f60f6104a559fc14ccda51157f8db6e43df0d52", "patch": "@@ -8,19 +8,24 @@ use Delimiter;\n pub struct Group {\n     delimiter: Delimiter,\n     stream: TokenStream,\n+    span: Span,\n }\n \n impl Group {\n     pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {\n-        Group { delimiter, stream }\n+        Group {\n+            delimiter,\n+            stream,\n+            span: Span::default(),\n+        }\n     }\n \n     pub fn delimiter(&self) -> Delimiter {\n         self.delimiter\n     }\n \n     pub fn span(&self) -> Span {\n-        Span {}\n+        self.span\n     }\n \n     pub fn set_span(&mut self, span: Span) {"}, {"sha": "4218921724ac3debbbb3fb7f87a47d815c9fdaa1", "filename": "libgrust/libproc_macro/rust/bridge/ident.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fident.rs?ref=3f60f6104a559fc14ccda51157f8db6e43df0d52", "patch": "@@ -4,8 +4,8 @@ use std::ffi::c_uchar;\n use std::fmt;\n \n extern \"C\" {\n-    fn Ident__new(string: *const c_uchar, len: u64) -> Ident;\n-    fn Ident__new_raw(string: *const c_uchar, len: u64) -> Ident;\n+    fn Ident__new(string: *const c_uchar, len: u64, span: Span) -> Ident;\n+    fn Ident__new_raw(string: *const c_uchar, len: u64, span: Span) -> Ident;\n     fn Ident__drop(ident: *mut Ident);\n     fn Ident__clone(ident: *const Ident) -> Ident;\n }\n@@ -16,23 +16,24 @@ pub struct Ident {\n     pub(crate) is_raw: bool,\n     pub(crate) val: *const c_uchar,\n     len: u64,\n+    span: Span,\n }\n \n impl Ident {\n-    pub fn new(string: &str, _span: Span) -> Self {\n-        unsafe { Ident__new(string.as_ptr(), string.len().try_into().unwrap()) }\n+    pub fn new(string: &str, span: Span) -> Self {\n+        unsafe { Ident__new(string.as_ptr(), string.len().try_into().unwrap(), span) }\n     }\n \n-    pub fn new_raw(string: &str, _span: Span) -> Self {\n-        unsafe { Ident__new_raw(string.as_ptr(), string.len().try_into().unwrap()) }\n+    pub fn new_raw(string: &str, span: Span) -> Self {\n+        unsafe { Ident__new_raw(string.as_ptr(), string.len().try_into().unwrap(), span) }\n     }\n \n     pub fn span(&self) -> Span {\n-        Span {}\n+        self.span\n     }\n \n     pub fn set_span(&mut self, span: Span) {\n-        let _ = span;\n+        self.span = span;\n     }\n }\n "}, {"sha": "b03e363db333e55e9d2fa16b98ba7b2fc1944609", "filename": "libgrust/libproc_macro/rust/bridge/literal.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=3f60f6104a559fc14ccda51157f8db6e43df0d52", "patch": "@@ -29,7 +29,7 @@ pub struct Literal {\n     kind: LitKind,\n     text: FFIString,\n     suffix: FFIString,\n-    // FIXME: Add span, cannot add whilst Span remain an empty type\n+    span: Span,\n }\n \n macro_rules! suffixed_int_literals {\n@@ -38,7 +38,8 @@ macro_rules! suffixed_int_literals {\n             Literal {\n                 kind : LitKind::Integer,\n                 text: FFIString::from(&n.to_string()),\n-                suffix: FFIString::from(stringify!($kind))\n+                suffix: FFIString::from(stringify!($kind)),\n+                span: Span::default(),\n             }\n         }\n     )*)\n@@ -50,7 +51,8 @@ macro_rules! unsuffixed_int_literals {\n             Literal {\n                 kind : LitKind::Integer,\n                 text: FFIString::from(&n.to_string()),\n-                suffix: FFIString::from(\"\")\n+                suffix: FFIString::from(\"\"),\n+                span: Span::default(),\n             }\n         }\n     )*)\n@@ -97,6 +99,7 @@ impl Literal {\n             kind: LitKind::Float,\n             text: FFIString::from(&repr),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -105,6 +108,7 @@ impl Literal {\n             kind: LitKind::Float,\n             text: FFIString::from(&n.to_string()),\n             suffix: FFIString::from(\"f32\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -118,6 +122,7 @@ impl Literal {\n             kind: LitKind::Float,\n             text: FFIString::from(&repr),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -126,6 +131,7 @@ impl Literal {\n             kind: LitKind::Float,\n             text: FFIString::from(&n.to_string()),\n             suffix: FFIString::from(\"f64\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -134,6 +140,7 @@ impl Literal {\n             kind: LitKind::Str,\n             text: FFIString::from(string),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -142,6 +149,7 @@ impl Literal {\n             kind: LitKind::Char,\n             text: FFIString::from(&c.to_string()),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         }\n     }\n \n@@ -150,15 +158,16 @@ impl Literal {\n             kind: LitKind::ByteStr,\n             text: FFIString::from(&bytes.escape_ascii().to_string()),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         }\n     }\n \n     pub fn span(&self) -> Span {\n-        Span {}\n+        self.span\n     }\n \n     pub fn set_span(&mut self, span: Span) {\n-        let _ = span;\n+        self.span = span;\n     }\n }\n \n@@ -221,6 +230,7 @@ impl FromStr for Literal {\n             kind: LitKind::Err,\n             text: FFIString::from(\"\"),\n             suffix: FFIString::from(\"\"),\n+            span: Span::default(),\n         };\n         // TODO: We might want to pass a LexError by reference to retrieve\n         // error information"}, {"sha": "e835472f233a3dfa03d55e9ef1cd5099273c350f", "filename": "libgrust/libproc_macro/rust/bridge/punct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fpunct.rs?ref=3f60f6104a559fc14ccda51157f8db6e43df0d52", "patch": "@@ -8,18 +8,20 @@ use Spacing;\n pub struct Punct {\n     pub(crate) ch: u32,\n     pub(crate) spacing: Spacing,\n+    span: Span,\n }\n \n impl Punct {\n     pub fn new(ch: char, spacing: Spacing) -> Self {\n         Punct {\n             ch: ch.into(),\n             spacing,\n+            span: Span::default(),\n         }\n     }\n \n     pub fn span(&self) -> Span {\n-        Span {}\n+        self.span\n     }\n \n     pub fn set_span(&mut self, span: Span) {"}, {"sha": "06537c93d69b43846a454d8a57b9e36443566d5a", "filename": "libgrust/libproc_macro/rust/bridge/span.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fspan.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f60f6104a559fc14ccda51157f8db6e43df0d52/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fspan.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fspan.rs?ref=3f60f6104a559fc14ccda51157f8db6e43df0d52", "patch": "@@ -5,28 +5,36 @@\n //! All methods accessing source location in rust are unstable, hence this\n //! implementation with an empty structure.\n \n-#[derive(Copy, Clone, Debug)]\n+/// # Note: Gcc does not have a span interner, a span will not contain an index\n+#[derive(Copy, Clone, Debug, Default)]\n #[repr(C)]\n-pub struct Span {}\n+pub struct Span {\n+    location: u32,\n+}\n \n impl Span {\n     pub fn call_site() -> Self {\n-        Span {}\n+        // FIXME: implement this function properly\n+        Span::default()\n     }\n \n     pub fn mixed_site() -> Self {\n-        Span {}\n+        // FIXME: implement this function properly\n+        Span::default()\n     }\n \n     pub fn resolved_at(&self, _other: Span) -> Self {\n-        Span {}\n+        // FIXME: implement this function properly\n+        Span::default()\n     }\n \n     pub fn located_at(&self, _other: Span) -> Self {\n-        Span {}\n+        // FIXME: implement this function properly\n+        Span::default()\n     }\n \n     pub fn source_text(&self) -> Option<String> {\n+        // FIXME: implement this function properly\n         None\n     }\n }"}]}