{"sha": "d482b20fd346482635a770281a164a09d608b058", "node_id": "C_kwDOANBUbNoAKGQ0ODJiMjBmZDM0NjQ4MjYzNWE3NzAyODFhMTY0YTA5ZDYwOGIwNTg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-14T22:05:44Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-15T13:53:44Z"}, "message": "warn-access: wrong -Wdangling-pointer with labels [PR106080]\n\n-Wdangling-pointer warns when the address of a label escapes.  This\ncauses grief in OCaml (<https://github.com/ocaml/ocaml/issues/11358>) as\nwell as in the kernel:\n<https://bugzilla.kernel.org/show_bug.cgi?id=215851> because it uses\n\n  #define _THIS_IP_  ({ __label__ __here; __here: (unsigned long)&&__here; })\n\nto get the PC.  -Wdangling-pointer is documented to warn about pointers\nto objects.  However, it uses is_auto_decl which checks DECL_P, but DECL_P\nis also true for a label/enumerator/function declaration, none of which is\nan object.  Rather, it should use auto_var_p which correctly checks VAR_P\nand PARM_DECL.\n\n\tPR middle-end/106080\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-access.cc (is_auto_decl): Remove.  Use auto_var_p\n\tinstead.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wdangling-pointer-10.c: New test.\n\t* c-c++-common/Wdangling-pointer-9.c: New test.", "tree": {"sha": "897a39f43f2463b16356c01d500345598e220b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/897a39f43f2463b16356c01d500345598e220b74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d482b20fd346482635a770281a164a09d608b058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d482b20fd346482635a770281a164a09d608b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d482b20fd346482635a770281a164a09d608b058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d482b20fd346482635a770281a164a09d608b058/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f0945cd97cf0645c56b14827abad63164bd80c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f0945cd97cf0645c56b14827abad63164bd80c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f0945cd97cf0645c56b14827abad63164bd80c"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "2eab1d59abd05042af0dd93362b9434c5170c0c7", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d482b20fd346482635a770281a164a09d608b058/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d482b20fd346482635a770281a164a09d608b058/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=d482b20fd346482635a770281a164a09d608b058", "patch": "@@ -4326,15 +4326,6 @@ pass_waccess::check_call (gcall *stmt)\n   check_nonstring_args (stmt);\n }\n \n-\n-/* Return true of X is a DECL with automatic storage duration.  */\n-\n-static inline bool\n-is_auto_decl (tree x)\n-{\n-  return DECL_P (x) && !DECL_EXTERNAL (x) && !TREE_STATIC (x);\n-}\n-\n /* Check non-call STMT for invalid accesses.  */\n \n void\n@@ -4363,7 +4354,7 @@ pass_waccess::check_stmt (gimple *stmt)\n       while (handled_component_p (lhs))\n \tlhs = TREE_OPERAND (lhs, 0);\n \n-      if (is_auto_decl (lhs))\n+      if (auto_var_p (lhs))\n \tm_clobbers.remove (lhs);\n       return;\n     }\n@@ -4383,7 +4374,7 @@ pass_waccess::check_stmt (gimple *stmt)\n       while (handled_component_p (arg))\n \targ = TREE_OPERAND (arg, 0);\n \n-      if (!is_auto_decl (arg))\n+      if (!auto_var_p (arg))\n \treturn;\n \n       gimple **pclobber = m_clobbers.get (arg);\n@@ -4467,7 +4458,7 @@ void\n pass_waccess::check_dangling_uses (tree var, tree decl, bool maybe /* = false */,\n \t\t\t\t   bool objref /* = false */)\n {\n-  if (!decl || !is_auto_decl (decl))\n+  if (!decl || !auto_var_p (decl))\n     return;\n \n   gimple **pclob = m_clobbers.get (decl);\n@@ -4528,7 +4519,7 @@ pass_waccess::check_dangling_stores (basic_block bb,\n       if (!m_ptr_qry.get_ref (lhs, stmt, &lhs_ref, 0))\n \tcontinue;\n \n-      if (is_auto_decl (lhs_ref.ref))\n+      if (auto_var_p (lhs_ref.ref))\n \tcontinue;\n \n       if (DECL_P (lhs_ref.ref))\n@@ -4573,7 +4564,7 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t  || rhs_ref.deref != -1)\n \tcontinue;\n \n-      if (!is_auto_decl (rhs_ref.ref))\n+      if (!auto_var_p (rhs_ref.ref))\n \tcontinue;\n \n       auto_diagnostic_group d;"}, {"sha": "ef553bdf2ce1a76a7a4c9e45f977e5d133297f60", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d482b20fd346482635a770281a164a09d608b058/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d482b20fd346482635a770281a164a09d608b058/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-10.c?ref=d482b20fd346482635a770281a164a09d608b058", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wdangling-pointer\" } */\n+\n+struct S {\n+  int x;\n+};\n+\n+void g (int **p)\n+{\n+  struct S s = {};\n+  *p = &s.x; /* { dg-warning \"address of local variable\" } */\n+}"}, {"sha": "f6c92855404d8dcbeb13cd0ccf0747ee6b77620b", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-9.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d482b20fd346482635a770281a164a09d608b058/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d482b20fd346482635a770281a164a09d608b058/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-9.c?ref=d482b20fd346482635a770281a164a09d608b058", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/106080 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wdangling-pointer\" } */\n+\n+void\n+foo (void **failaddr)\n+{\n+  *failaddr = ({ __label__ __here; __here: &&__here; }); /* { dg-bogus \"address of local variable\" } */\n+}"}]}