{"sha": "e29137fe36371903cee894f8706c2f906bc2754f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5MTM3ZmUzNjM3MTkwM2NlZTg5NGY4NzA2YzJmOTA2YmMyNzU0Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-01-26T21:50:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-01-26T21:50:52Z"}, "message": "libstdc++: Use __GCC_ATOMIC_TEST_AND_SET in atomic_flag.\n\n        * include/bits/atomic_base.h (__atomic_flag_base): Define _M_i\n        based on the value of __GCC_ATOMIC_TEST_AND_SET_TRUEVAL.\n        (ATOMIC_FLAG_INIT): Initialize with 0, not false.\n        (atomic_flag::atomic_flag): Use __GCC_ATOMIC_TEST_AND_SET_TRUEVAL.\n\nFrom-SVN: r183582", "tree": {"sha": "790f5a7979968aad47dc67d280f066322d6fa976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/790f5a7979968aad47dc67d280f066322d6fa976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29137fe36371903cee894f8706c2f906bc2754f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29137fe36371903cee894f8706c2f906bc2754f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29137fe36371903cee894f8706c2f906bc2754f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29137fe36371903cee894f8706c2f906bc2754f/comments", "author": null, "committer": null, "parents": [{"sha": "57c5ab1ba6798741ed42da56111dee7b741108fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c5ab1ba6798741ed42da56111dee7b741108fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c5ab1ba6798741ed42da56111dee7b741108fa"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "67e5b893f24d8486d87080438648f90881b9ddb7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29137fe36371903cee894f8706c2f906bc2754f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29137fe36371903cee894f8706c2f906bc2754f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e29137fe36371903cee894f8706c2f906bc2754f", "patch": "@@ -1,3 +1,10 @@\n+2012-01-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/bits/atomic_base.h (__atomic_flag_base): Define _M_i\n+\tbased on the value of __GCC_ATOMIC_TEST_AND_SET_TRUEVAL.\n+\t(ATOMIC_FLAG_INIT): Initialize with 0, not false.\n+\t(atomic_flag::atomic_flag): Use __GCC_ATOMIC_TEST_AND_SET_TRUEVAL.\n+\n 2012-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/51985"}, {"sha": "aa43bccd1bf7c7ddb8801753b361649dceba212d", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29137fe36371903cee894f8706c2f906bc2754f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29137fe36371903cee894f8706c2f906bc2754f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=e29137fe36371903cee894f8706c2f906bc2754f", "patch": "@@ -227,12 +227,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct __atomic_flag_base\n   {\n+    /* The target's \"set\" value for test-and-set may not be exactly 1.  */\n+#if __GCC_ATOMIC_TEST_AND_SET_TRUEVAL == 1\n     bool _M_i;\n+#else\n+    unsigned char _M_i;\n+#endif\n   };\n \n   _GLIBCXX_END_EXTERN_C\n \n-#define ATOMIC_FLAG_INIT { false }\n+#define ATOMIC_FLAG_INIT { 0 }\n \n   /// atomic_flag\n   struct atomic_flag : public __atomic_flag_base\n@@ -244,7 +249,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     atomic_flag& operator=(const atomic_flag&) volatile = delete;\n \n     // Conversion to ATOMIC_FLAG_INIT.\n-    atomic_flag(bool __i) noexcept : __atomic_flag_base({ __i }) { }\n+    constexpr atomic_flag(bool __i) noexcept\n+      : __atomic_flag_base({ __i ? __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : 0 })\n+    { }\n \n     bool\n     test_and_set(memory_order __m = memory_order_seq_cst) noexcept"}]}