{"sha": "ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4ZGQzYjZjZWEyYTRkNGRhYjdlMjk5N2I4OGExNzBmODA5M2NlNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-11-19T18:56:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-19T18:56:26Z"}, "message": "Avoid redundant computations in edge_badness.\n\n        * ipa-inline.c (inlining_speedup): New function.\n\t(edge_badness): Use it.\n\nFrom-SVN: r278459", "tree": {"sha": "5067144beb28608066ee17d63498e10647744fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5067144beb28608066ee17d63498e10647744fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6/comments", "author": null, "committer": null, "parents": [{"sha": "4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa5fd8aca1140adf0917dc53397efddc7fd4c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa5fd8aca1140adf0917dc53397efddc7fd4c11"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "710f8dab67460dd9e158c272b4f4c25a635d6186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "patch": "@@ -1,3 +1,8 @@\n+2019-11-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (inlining_speedup): New function.\n+\t(edge_badness): Use it.\n+\n 2019-11-19  Zoran Jovanovic <zoran.jovanovic@mips.com>\n \t\t\tDragan Mladjenovic  <dmladjenovic@wavecomp.com>\n "}, {"sha": "becea8a3e8ecf6995800ca330ffdd8ac0bb54f9b", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=ea8dd3b6cea2a4d4dab7e2997b88a170f8093ce6", "patch": "@@ -768,6 +768,33 @@ compute_inlined_call_time (struct cgraph_edge *edge,\n   return time;\n }\n \n+/* Determine time saved by inlininig EDGE of frequency FREQ\n+   where callee's runtime w/o inlineing is UNINLINED_TYPE\n+   and with inlined is INLINED_TYPE.  */\n+\n+inline sreal\n+inlining_speedup (struct cgraph_edge *edge,\n+    \t\t  sreal freq,\n+\t\t  sreal uninlined_time,\n+\t\t  sreal inlined_time)\n+{\n+  sreal speedup = uninlined_time - inlined_time;\n+  /* Handling of call_time should match one in ipa-inline-fnsummary.c\n+     (estimate_edge_size_and_time).  */\n+  sreal call_time = ipa_call_summaries->get (edge)->call_stmt_time;\n+\n+  if (freq > 0)\n+    {\n+      speedup = (speedup + call_time);\n+      if (freq != 1)\n+       speedup = speedup * freq;\n+    }\n+  else if (freq == 0)\n+    speedup = speedup >> 11;\n+  gcc_checking_assert (speedup >= 0);\n+  return speedup;\n+}\n+\n /* Return true if the speedup for inlining E is bigger than\n    PARAM_MAX_INLINE_MIN_SPEEDUP.  */\n \n@@ -1149,10 +1176,8 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n       sreal numerator, denominator;\n       int overall_growth;\n       sreal freq = edge->sreal_frequency ();\n-      sreal inlined_time = compute_inlined_call_time (edge, edge_time, freq);\n \n-      numerator = (compute_uninlined_call_time (edge, unspec_edge_time, freq)\n-\t\t   - inlined_time);\n+      numerator = inlining_speedup (edge, freq, unspec_edge_time, edge_time);\n       if (numerator <= 0)\n \tnumerator = ((sreal) 1 >> 8);\n       if (caller->count.ipa ().nonzero_p ())\n@@ -1235,16 +1260,14 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t  fprintf (dump_file,\n \t\t   \"      %f: guessed profile. frequency %f, count %\" PRId64\n \t\t   \" caller count %\" PRId64\n-\t\t   \" time w/o inlining %f, time with inlining %f\"\n+\t\t   \" time saved %f\"\n \t\t   \" overall growth %i (current) %i (original)\"\n \t\t   \" %i (compensated)\\n\",\n \t\t   badness.to_double (),\n \t\t   freq.to_double (),\n \t\t   edge->count.ipa ().initialized_p () ? edge->count.ipa ().to_gcov_type () : -1,\n \t\t   caller->count.ipa ().initialized_p () ? caller->count.ipa ().to_gcov_type () : -1,\n-\t\t   compute_uninlined_call_time (edge,\n-\t\t\t\t\t\tunspec_edge_time, freq).to_double (),\n-\t\t   inlined_time.to_double (),\n+\t\t   inlining_speedup (edge, freq, unspec_edge_time, edge_time).to_double (),\n \t\t   estimate_growth (callee),\n \t\t   callee_info->growth, overall_growth);\n \t}"}]}