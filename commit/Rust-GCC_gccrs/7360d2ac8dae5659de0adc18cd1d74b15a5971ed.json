{"sha": "7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2MGQyYWM4ZGFlNTY1OWRlMGFkYzE4Y2QxZDc0YjE1YTU5NzFlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-21T19:34:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-21T19:34:03Z"}, "message": "re PR rtl-optimization/47366 (ICE: verify_flow_info failed: missing REG_EH_REGION note in the end of bb 3 with -fnon-call-exceptions -fno-tree-ccp -fno-tree-forwprop)\n\n\tPR rtl-optimization/47366\n\t* fwprop.c (forward_propagate_into): Return bool.  If\n\tany changes are made, -fnon-call-exceptions is used and\n\tREG_EH_REGION note is present, call purge_dead_edges\n\tand return true if it purged anything.\n\t(fwprop_addr): Adjust callers, call cleanup_cfg (0) if\n\tany EH edges were purged.\n\n\t* g++.dg/opt/pr47366.C: New test.\n\nFrom-SVN: r169100", "tree": {"sha": "5cf2b8119d9820d652ae6742a5b8b2fc1fb0887a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cf2b8119d9820d652ae6742a5b8b2fc1fb0887a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0eb35d462fca8490994778c4224676388c69828e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb35d462fca8490994778c4224676388c69828e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb35d462fca8490994778c4224676388c69828e"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "ab3c70b57807bb4a398899de9eb5fe23b2e78aa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "patch": "@@ -1,3 +1,13 @@\n+2011-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/47366\n+\t* fwprop.c (forward_propagate_into): Return bool.  If\n+\tany changes are made, -fnon-call-exceptions is used and\n+\tREG_EH_REGION note is present, call purge_dead_edges\n+\tand return true if it purged anything.\n+\t(fwprop_addr): Adjust callers, call cleanup_cfg (0) if\n+\tany EH edges were purged.\n+\n 2011-01-21  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/41619"}, {"sha": "704e1431233f9fa592475f5749b8ad8d67c0b108", "filename": "gcc/fwprop.c", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "patch": "@@ -1,5 +1,5 @@\n /* RTL-based forward propagation pass for GNU compiler.\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Paolo Bonzini and Steven Bosscher.\n \n@@ -1315,32 +1315,33 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n \n \n /* Given a use USE of an insn, if it has a single reaching\n-   definition, try to forward propagate it into that insn.  */\n+   definition, try to forward propagate it into that insn.\n+   Return true if cfg cleanup will be needed.  */\n \n-static void\n+static bool\n forward_propagate_into (df_ref use)\n {\n   df_ref def;\n   rtx def_insn, def_set, use_insn;\n   rtx parent;\n \n   if (DF_REF_FLAGS (use) & DF_REF_READ_WRITE)\n-    return;\n+    return false;\n   if (DF_REF_IS_ARTIFICIAL (use))\n-    return;\n+    return false;\n \n   /* Only consider uses that have a single definition.  */\n   def = get_def_for_use (use);\n   if (!def)\n-    return;\n+    return false;\n   if (DF_REF_FLAGS (def) & DF_REF_READ_WRITE)\n-    return;\n+    return false;\n   if (DF_REF_IS_ARTIFICIAL (def))\n-    return;\n+    return false;\n \n   /* Do not propagate loop invariant definitions inside the loop.  */\n   if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)\n-    return;\n+    return false;\n \n   /* Check if the use is still present in the insn!  */\n   use_insn = DF_REF_INSN (use);\n@@ -1350,19 +1351,26 @@ forward_propagate_into (df_ref use)\n     parent = PATTERN (use_insn);\n \n   if (!reg_mentioned_p (DF_REF_REG (use), parent))\n-    return;\n+    return false;\n \n   def_insn = DF_REF_INSN (def);\n   if (multiple_sets (def_insn))\n-    return;\n+    return false;\n   def_set = single_set (def_insn);\n   if (!def_set)\n-    return;\n+    return false;\n \n   /* Only try one kind of propagation.  If two are possible, we'll\n      do it on the following iterations.  */\n-  if (!forward_propagate_and_simplify (use, def_insn, def_set))\n-    forward_propagate_subreg (use, def_insn, def_set);\n+  if (forward_propagate_and_simplify (use, def_insn, def_set)\n+      || forward_propagate_subreg (use, def_insn, def_set))\n+    {\n+      if (cfun->can_throw_non_call_exceptions\n+\t  && find_reg_note (use_insn, REG_EH_REGION, NULL_RTX)\n+\t  && purge_dead_edges (DF_REF_BB (use)))\n+\treturn true;\n+    }\n+  return false;\n }\n \n \f\n@@ -1421,6 +1429,7 @@ static unsigned int\n fwprop (void)\n {\n   unsigned i;\n+  bool need_cleanup = false;\n \n   fwprop_init ();\n \n@@ -1438,10 +1447,12 @@ fwprop (void)\n \t    || DF_REF_BB (use)->loop_father == NULL\n \t    /* The outer most loop is not really a loop.  */\n \t    || loop_outer (DF_REF_BB (use)->loop_father) == NULL)\n-\t  forward_propagate_into (use);\n+\t  need_cleanup |= forward_propagate_into (use);\n     }\n \n   fwprop_done ();\n+  if (need_cleanup)\n+    cleanup_cfg (0);\n   return 0;\n }\n \n@@ -1469,6 +1480,8 @@ static unsigned int\n fwprop_addr (void)\n {\n   unsigned i;\n+  bool need_cleanup = false;\n+\n   fwprop_init ();\n \n   /* Go through all the uses.  df_uses_create will create new ones at the\n@@ -1481,11 +1494,13 @@ fwprop_addr (void)\n \t    && DF_REF_BB (use)->loop_father != NULL\n \t    /* The outer most loop is not really a loop.  */\n \t    && loop_outer (DF_REF_BB (use)->loop_father) != NULL)\n-\t  forward_propagate_into (use);\n+\t  need_cleanup |= forward_propagate_into (use);\n     }\n \n   fwprop_done ();\n \n+  if (need_cleanup)\n+    cleanup_cfg (0);\n   return 0;\n }\n "}, {"sha": "2c1e8fb65cf8fc9ec99ac11cb419dc9a12a7ebb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "patch": "@@ -1,3 +1,8 @@\n+2011-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/47366\n+\t* g++.dg/opt/pr47366.C: New test.\n+\n 2011-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46552"}, {"sha": "e133edfbf1bae3c17dca04d0a0ac8f04f5c7edf6", "filename": "gcc/testsuite/g++.dg/opt/pr47366.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47366.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7360d2ac8dae5659de0adc18cd1d74b15a5971ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47366.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47366.C?ref=7360d2ac8dae5659de0adc18cd1d74b15a5971ed", "patch": "@@ -0,0 +1,22 @@\n+// PR rtl-optimization/47366\n+// { dg-do compile }\n+// { dg-options \"-O -fnon-call-exceptions -fno-tree-ccp -fno-tree-forwprop\" }\n+\n+struct A\n+{\n+  int i;\n+  virtual ~A ();\n+};\n+\n+struct B : virtual A\n+{};\n+\n+struct C : B\n+{\n+  void bar () {}\n+};\n+\n+void foo ()\n+{\n+  C ().bar ();\n+}"}]}