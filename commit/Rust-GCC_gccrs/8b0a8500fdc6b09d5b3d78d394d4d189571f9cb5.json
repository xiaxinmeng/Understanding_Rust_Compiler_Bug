{"sha": "8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwYTg1MDBmZGM2YjA5ZDViM2Q3OGQzOTRkNGQxODk1NzFmOWNiNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-09-05T16:12:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-05T16:12:15Z"}, "message": "re PR c++/23667 (tr1/6_containers/unordered/hashtable/23465.cc execution test times out)\n\n\tPR c++/23667\n\t* pt.c (tsubst_decl): Clear DECL_TEMPLATE_INSTANTIATED when\n\tcopying a VAR_DECL.\n\n\tPR c++/23667\n\t* g++.dg/template/static15.C: New test.\n\nFrom-SVN: r103914", "tree": {"sha": "0958fea22cc6869d7b95dd02fab077a770315675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0958fea22cc6869d7b95dd02fab077a770315675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/comments", "author": null, "committer": null, "parents": [{"sha": "85a56c9d3633b49b06e2b8b01a7dae59f3480a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a56c9d3633b49b06e2b8b01a7dae59f3480a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a56c9d3633b49b06e2b8b01a7dae59f3480a75"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "97ba8261459c33498a39d35c1ad56debc67aa91c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "patch": "@@ -1,3 +1,9 @@\n+2005-09-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23667\n+\t* pt.c (tsubst_decl): Clear DECL_TEMPLATE_INSTANTIATED when\n+\tcopying a VAR_DECL.\n+\n 2005-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21440"}, {"sha": "d6ab9dfbafc1085b887bd1a5458f5b1461783c77", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "patch": "@@ -6662,6 +6662,11 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tr = copy_decl (t);\n \tif (TREE_CODE (r) == VAR_DECL)\n \t  {\n+\t    /* Even if the original location is out of scope, the\n+\t       newly substituted one is not.  */\n+\t    DECL_DEAD_FOR_LOCAL (r) = 0;\n+\t    DECL_INITIALIZED_P (r) = 0;\n+\t    DECL_TEMPLATE_INSTANTIATED (r) = 0;\n \t    type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n \t    if (type == error_mark_node)\n \t      return error_mark_node;\n@@ -6679,22 +6684,13 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tSET_DECL_ASSEMBLER_NAME (r, NULL_TREE);\n \tif (CODE_CONTAINS_STRUCT (TREE_CODE (t), TS_DECL_WRTL))\n \t  SET_DECL_RTL (r, NULL_RTX);\n-\n-\t/* Don't try to expand the initializer until someone tries to use\n-\t   this variable; otherwise we run into circular dependencies.  */\n+\t/* The initializer must not be expanded until it is required;\n+\t   see [temp.inst].  */\n \tDECL_INITIAL (r) = NULL_TREE;\n \tif (CODE_CONTAINS_STRUCT (TREE_CODE (t), TS_DECL_WRTL))\n \t  SET_DECL_RTL (r, NULL_RTX);\n \tDECL_SIZE (r) = DECL_SIZE_UNIT (r) = 0;\n \n-\t/* Even if the original location is out of scope, the newly\n-\t   substituted one is not.  */\n-\tif (TREE_CODE (r) == VAR_DECL)\n-\t  {\n-\t    DECL_DEAD_FOR_LOCAL (r) = 0;\n-\t    DECL_INITIALIZED_P (r) = 0;\n-\t  }\n-\n \tif (!local_p)\n \t  {\n \t    /* A static data member declaration is always marked"}, {"sha": "5602451da9786e336f3a479da89741ded0f0769e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "patch": "@@ -1,5 +1,8 @@\n 2005-09-05  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/23667\n+\t* g++.dg/template/static15.C: New test.\n+\n \tPR c++/21440\n \t* g++.dg/ext/stmtexpr5.C: New test.\n \t* g++.dg/ext/stmtexpr6.C: Likewise."}, {"sha": "7302b7d808ba18a1b5e339fa15f7aa410522beea", "filename": "gcc/testsuite/g++.dg/template/static15.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic15.C?ref=8b0a8500fdc6b09d5b3d78d394d4d189571f9cb5", "patch": "@@ -0,0 +1,70 @@\n+// PR c++/23667\n+\n+template<int dummy>\n+  struct X\n+  {\n+    static const int n_primes = 256;\n+    static const unsigned long primes[n_primes + 1];\n+  };\n+\n+template<int dummy>\n+  const int X<dummy>::n_primes;\n+\n+template<int dummy>\n+  const unsigned long X<dummy>::primes[n_primes + 1] =\n+  {\n+    2ul, 3ul, 5ul, 7ul, 11ul, 13ul, 17ul, 19ul, 23ul, 29ul, 31ul,\n+    37ul, 41ul, 43ul, 47ul, 53ul, 59ul, 61ul, 67ul, 71ul, 73ul, 79ul,\n+    83ul, 89ul, 97ul, 103ul, 109ul, 113ul, 127ul, 137ul, 139ul, 149ul,\n+    157ul, 167ul, 179ul, 193ul, 199ul, 211ul, 227ul, 241ul, 257ul,\n+    277ul, 293ul, 313ul, 337ul, 359ul, 383ul, 409ul, 439ul, 467ul,\n+    503ul, 541ul, 577ul, 619ul, 661ul, 709ul, 761ul, 823ul, 887ul,\n+    953ul, 1031ul, 1109ul, 1193ul, 1289ul, 1381ul, 1493ul, 1613ul,\n+    1741ul, 1879ul, 2029ul, 2179ul, 2357ul, 2549ul, 2753ul, 2971ul,\n+    3209ul, 3469ul, 3739ul, 4027ul, 4349ul, 4703ul, 5087ul, 5503ul,\n+    5953ul, 6427ul, 6949ul, 7517ul, 8123ul, 8783ul, 9497ul, 10273ul,\n+    11113ul, 12011ul, 12983ul, 14033ul, 15173ul, 16411ul, 17749ul,\n+    19183ul, 20753ul, 22447ul, 24281ul, 26267ul, 28411ul, 30727ul,\n+    33223ul, 35933ul, 38873ul, 42043ul, 45481ul, 49201ul, 53201ul,\n+    57557ul, 62233ul, 67307ul, 72817ul, 78779ul, 85229ul, 92203ul,\n+    99733ul, 107897ul, 116731ul, 126271ul, 136607ul, 147793ul,\n+    159871ul, 172933ul, 187091ul, 202409ul, 218971ul, 236897ul,\n+    256279ul, 277261ul, 299951ul, 324503ul, 351061ul, 379787ul,\n+    410857ul, 444487ul, 480881ul, 520241ul, 562841ul, 608903ul,\n+    658753ul, 712697ul, 771049ul, 834181ul, 902483ul, 976369ul,\n+    1056323ul, 1142821ul, 1236397ul, 1337629ul, 1447153ul, 1565659ul,\n+    1693859ul, 1832561ul, 1982627ul, 2144977ul, 2320627ul, 2510653ul,\n+    2716249ul, 2938679ul, 3179303ul, 3439651ul, 3721303ul, 4026031ul,\n+    4355707ul, 4712381ul, 5098259ul, 5515729ul, 5967347ul, 6456007ul,\n+    6984629ul, 7556579ul, 8175383ul, 8844859ul, 9569143ul, 10352717ul,\n+    11200489ul, 12117689ul, 13109983ul, 14183539ul, 15345007ul,\n+    16601593ul, 17961079ul, 19431899ul, 21023161ul, 22744717ul,\n+    24607243ul, 26622317ul, 28802401ul, 31160981ul, 33712729ul,\n+    36473443ul, 39460231ul, 42691603ul, 46187573ul, 49969847ul,\n+    54061849ul, 58488943ul, 63278561ul, 68460391ul, 74066549ul,\n+    80131819ul, 86693767ul, 93793069ul, 101473717ul, 109783337ul,\n+    118773397ul, 128499677ul, 139022417ul, 150406843ul, 162723577ul,\n+    176048909ul, 190465427ul, 206062531ul, 222936881ul, 241193053ul,\n+    260944219ul, 282312799ul, 305431229ul, 330442829ul, 357502601ul,\n+    386778277ul, 418451333ul, 452718089ul, 489790921ul, 529899637ul,\n+    573292817ul, 620239453ul, 671030513ul, 725980837ul, 785430967ul,\n+    849749479ul, 919334987ul, 994618837ul, 1076067617ul, 1164186217ul,\n+    1259520799ul, 1362662261ul, 1474249943ul, 1594975441ul,\n+    1725587117ul, 1866894511ul, 2019773507ul, 2185171673ul,\n+    2364114217ul, 2557710269ul, 2767159799ul, 2993761039ul,\n+    3238918481ul, 3504151727ul, 3791104843ul, 4101556399ul,\n+    4294967291ul,\n+    4294967291ul // sentinel so we don't have to test result of\n+\t\t // lower_bound\n+  };\n+\n+template<bool b>\n+  struct static_assert;\n+\n+template<>\n+  struct static_assert<true> { };\n+\n+int main()\n+{\n+  static_assert< X<0>::n_primes == 256 >();\n+}"}]}