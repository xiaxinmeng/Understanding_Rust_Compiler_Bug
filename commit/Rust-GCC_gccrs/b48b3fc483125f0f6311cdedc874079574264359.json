{"sha": "b48b3fc483125f0f6311cdedc874079574264359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4YjNmYzQ4MzEyNWYwZjYzMTFjZGVkYzg3NDA3OTU3NDI2NDM1OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-02-28T12:43:33Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-02-28T12:43:33Z"}, "message": "re PR tree-optimization/56294 (BOOT_CFLAGS='-O2 -g -fno-ipa-sra' leads to bootstrap comparison failure)\n\n2013-02-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/56294\n\t* tree-sra.c (analyze_access_subtree): Create replacement declarations.\n\tAdjust dumping.\n\t(get_access_replacement): Do not call create_access_replacement.\n\tAssert a replacement exists.\n\t(get_repl_default_def_ssa_name): Create the replacement declaration\n\titself.\n\ntestsuite/\n\t* g++.dg/debug/pr56294.C: New test.\n\nFrom-SVN: r196340", "tree": {"sha": "13e0fcd3e049b6f0358c2afe7c33b7b41479c033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e0fcd3e049b6f0358c2afe7c33b7b41479c033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48b3fc483125f0f6311cdedc874079574264359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48b3fc483125f0f6311cdedc874079574264359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48b3fc483125f0f6311cdedc874079574264359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48b3fc483125f0f6311cdedc874079574264359/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f3ff9c1db786d8b1b64dc7c8168224412bd7df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3ff9c1db786d8b1b64dc7c8168224412bd7df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3ff9c1db786d8b1b64dc7c8168224412bd7df0"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "55ab6edde32ab4343c8ea9e4b1d4d3acd6e2e272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48b3fc483125f0f6311cdedc874079574264359/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48b3fc483125f0f6311cdedc874079574264359/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48b3fc483125f0f6311cdedc874079574264359", "patch": "@@ -1,3 +1,13 @@\n+2013-02-28  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/56294\n+\t* tree-sra.c (analyze_access_subtree): Create replacement declarations.\n+\tAdjust dumping.\n+\t(get_access_replacement): Do not call create_access_replacement.\n+\tAssert a replacement exists.\n+\t(get_repl_default_def_ssa_name): Create the replacement declaration\n+\titself.\n+\n 2013-02-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (arm_output_mi_thunk): Call final_start_function and"}, {"sha": "08399b9651cb178a2ebadcc08da53eff3ecde001", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b48b3fc483125f0f6311cdedc874079574264359", "patch": "@@ -1,3 +1,8 @@\n+2013-02-28  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/56294\n+\t* g++.dg/debug/pr56294.C: New test.\n+\n 2013-02-28  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* g++.old-deja/g++.pt/ptrmem6.C(main): Add xfail aarch64*-*-*."}, {"sha": "204c78eadc61d66623925bc6714164f4a1e460c8", "filename": "gcc/testsuite/g++.dg/debug/pr56294.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr56294.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr56294.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr56294.C?ref=b48b3fc483125f0f6311cdedc874079574264359", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-ipa-sra -fcompare-debug\" }\n+\n+struct comp_cost { int cost; unsigned complexity; };\n+struct cost_pair { struct iv_cand *cand; };\n+struct iv_use { unsigned n_map_members; cost_pair *cost_map; };\n+struct iv_cand { unsigned id; };\n+\n+unsigned gu;\n+\n+void\n+bar (comp_cost, comp_cost)\n+{\n+}\n+\n+void\n+foo (iv_use *use, iv_cand *cand)\n+{\n+  unsigned i, s = cand->id & (use->n_map_members - 1);\n+  for (i = 0; i < s; i++)\n+    if (use->cost_map[i].cand)\n+      goto found;\n+found:\n+  use->cost_map[i].cand = cand;\n+  comp_cost elim_cost, express_cost, bound_cost;\n+  bar (elim_cost, express_cost);\n+  gu = express_cost.complexity;\n+}\n+\n+"}, {"sha": "5d55d735402574f8f3e745b7be21cf7e7d8db1b1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48b3fc483125f0f6311cdedc874079574264359/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=b48b3fc483125f0f6311cdedc874079574264359", "patch": "@@ -2000,8 +2000,7 @@ create_access_replacement (struct access *access)\n static inline tree\n get_access_replacement (struct access *access)\n {\n-  if (!access->replacement_decl)\n-    access->replacement_decl = create_access_replacement (access);\n+  gcc_checking_assert (access->replacement_decl);\n   return access->replacement_decl;\n }\n \n@@ -2157,7 +2156,6 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  || ((root->grp_scalar_read || root->grp_assignment_read)\n \t      && (root->grp_scalar_write || root->grp_assignment_write))))\n     {\n-      bool new_integer_type;\n       /* Always create access replacements that cover the whole access.\n          For integral types this means the precision has to match.\n \t Avoid assumptions based on the integral type kind, too.  */\n@@ -2176,22 +2174,19 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  root->expr = build_ref_for_offset (UNKNOWN_LOCATION,\n \t\t\t\t\t     root->base, root->offset,\n \t\t\t\t\t     root->type, NULL, false);\n-\t  new_integer_type = true;\n-\t}\n-      else\n-\tnew_integer_type = false;\n \n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Marking \");\n-\t  print_generic_expr (dump_file, root->base, 0);\n-\t  fprintf (dump_file, \" offset: %u, size: %u \",\n-\t\t   (unsigned) root->offset, (unsigned) root->size);\n-\t  fprintf (dump_file, \" to be replaced%s.\\n\",\n-\t\t   new_integer_type ? \" with an integer\": \"\");\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Changing the type of a replacement for \");\n+\t      print_generic_expr (dump_file, root->base, 0);\n+\t      fprintf (dump_file, \" offset: %u, size: %u \",\n+\t\t       (unsigned) root->offset, (unsigned) root->size);\n+\t      fprintf (dump_file, \" to an integer.\\n\");\n+\t    }\n \t}\n \n       root->grp_to_be_replaced = 1;\n+      root->replacement_decl = create_access_replacement (root);\n       sth_created = true;\n       hole = false;\n     }\n@@ -2209,15 +2204,7 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  if (MAY_HAVE_DEBUG_STMTS)\n \t    {\n \t      root->grp_to_be_debug_replaced = 1;\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t{\n-\t\t  fprintf (dump_file, \"Marking \");\n-\t\t  print_generic_expr (dump_file, root->base, 0);\n-\t\t  fprintf (dump_file, \" offset: %u, size: %u \",\n-\t\t\t   (unsigned) root->offset, (unsigned) root->size);\n-\t\t  fprintf (dump_file, \" to be replaced with debug \"\n-\t\t\t   \"statements.\\n\");\n-\t\t}\n+\t      root->replacement_decl = create_access_replacement (root);\n \t    }\n \t}\n \n@@ -2973,7 +2960,11 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n static tree\n get_repl_default_def_ssa_name (struct access *racc)\n {\n-  return get_or_create_ssa_default_def (cfun, get_access_replacement (racc));\n+  gcc_checking_assert (!racc->grp_to_be_replaced &&\n+\t\t       !racc->grp_to_be_debug_replaced);\n+  if (!racc->replacement_decl)\n+    racc->replacement_decl = create_access_replacement (racc);\n+  return get_or_create_ssa_default_def (cfun, racc->replacement_decl);\n }\n \n /* Return true if REF has a COMPONENT_REF with a bit-field field declaration"}]}