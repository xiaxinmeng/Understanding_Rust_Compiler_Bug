{"sha": "a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwMDM2YjJmZDhmNTFkNDk4ZmE4NWY0YjBiYTk1NGFkNmEwZGJiOA==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2004-10-28T21:18:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-28T21:18:56Z"}, "message": "re PR libstdc++/18159 (tr1/tuple is broken on darwin)\n\n\n2004-10-28  Chris Jefferson  <chris@bubblescope.net>\n\n\tPR libstdc++/18159\n\t* include/tr1/tuple: Fix, change formatting.\n\nFrom-SVN: r89782", "tree": {"sha": "27490ab3566606ab86bedaf2fbf54b85c8c9f197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27490ab3566606ab86bedaf2fbf54b85c8c9f197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "859ee18fb4c2e7a26567f7ea00d02b717c807b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859ee18fb4c2e7a26567f7ea00d02b717c807b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859ee18fb4c2e7a26567f7ea00d02b717c807b5b"}], "stats": {"total": 2631, "additions": 1337, "deletions": 1294}, "files": [{"sha": "81f88ffda31fcae57102cbdbfa52bbaebc7a53ab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "patch": "@@ -1,3 +1,8 @@\n+2004-10-28  Chris Jefferson  <chris@bubblescope.net>\n+\n+\tPR libstdc++/18159\n+\t* include/tr1/tuple: Fix, change formatting.\n+\n 2004-10-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/mt_allocator.h (__common_pool_policy): Add template"}, {"sha": "272edc3cb9191f2d7ac0fd7144416e40cf3106ed", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 1332, "deletions": 1294, "changes": 2626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "patch": "@@ -36,1372 +36,1399 @@ namespace tr1\n   struct _NullClass { };\n \n   // Foward definition of the tuple class\n-  template<typename _T0 = _NullClass, typename _T1 = _NullClass, \n-\t   typename _T2 = _NullClass, typename _T3 = _NullClass, \n-\t   typename _T4 = _NullClass, typename _T5 = _NullClass, \n-\t   typename _T6 = _NullClass, typename _T7 = _NullClass, \n-\t   typename _T8 = _NullClass, typename _T9 = _NullClass>\n+  template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n+\t   typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n+\t   typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n+\t   typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n+\t   typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n     class tuple;\n \n   // Gives the type of the ith element of a given tuple type.\n-  template<int __i, typename _T>\n+  template<int __i, typename _Tp>\n     struct tuple_element;\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<0, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T0 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<1, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T1 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<2, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T2 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<3, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T3 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<4, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> > \n-    { typedef _T4 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<5, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T5 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<6, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T6 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<7, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T7 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<8, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-    { typedef _T8 type; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_element<9, tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-\t\t\t\t  _T7, _T8, _T9> >\n-   { typedef _T9 type; };\n-  \n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<0, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp0 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<1, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp1 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<2, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp2 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<3, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp3 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<4, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp4 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<5, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp5 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<6, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp6 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<7, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp7 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<8, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp8 type; };\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_element<9, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t  _Tp7, _Tp8, _Tp9> >\n+    { typedef _Tp9 type; };\n+\n   // Finds the size of a given tuple type.\n-  // NB: Can't this be done via value->type conversions in the generic\n-  // tuple class, say with an enum?\n-  template<typename _T>\n+  template<typename _Tp>\n     struct tuple_size;\n \n   template<>\n-    struct tuple_size<tuple<_NullClass, _NullClass, _NullClass, _NullClass, \n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass, \n+    struct tuple_size<tuple<_NullClass, _NullClass, _NullClass, _NullClass,\n+\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n \t\t\t    _NullClass, _NullClass> >\n     { static const int value = 0; };\n-  \n-  template<typename _T0>\n-    struct tuple_size<tuple<_T0, _NullClass, _NullClass, _NullClass, \n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass, \n+\n+  template< typename _Tp0>\n+    struct tuple_size<tuple< _Tp0, _NullClass, _NullClass, _NullClass,\n+\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n \t\t\t    _NullClass, _NullClass> >\n     { static const int value = 1; };\n-  \n-  template<typename _T0, typename _T1>\n-    struct tuple_size<tuple<_T0, _T1, _NullClass, _NullClass, _NullClass, \n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass, \n+\n+  template<typename _Tp0, typename _Tp1>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _NullClass, _NullClass, _NullClass,\n+\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n \t\t\t    _NullClass> >\n     { static const int value = 2; };\n-  \n-  template<typename _T0, typename _T1, typename _T2>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _NullClass, _NullClass, \n-\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _NullClass, _NullClass,\n+\t\t\t    _NullClass, _NullClass, _NullClass, _NullClass,\n \t\t\t    _NullClass> >\n     { static const int value = 3; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _NullClass, _NullClass, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _NullClass, _NullClass,\n \t\t\t    _NullClass, _NullClass, _NullClass, _NullClass> >\n     { static const int value = 4; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _NullClass, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _NullClass,\n \t\t\t    _NullClass, _NullClass, _NullClass, _NullClass> >\n     { static const int value = 5; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _T5, _NullClass, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _NullClass,\n \t\t\t    _NullClass, _NullClass, _NullClass> >\n     { static const int value = 6; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, \n \t\t\t    _NullClass, _NullClass, _NullClass> >\n     { static const int value = 7; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, \n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, \n \t\t\t    _NullClass, _NullClass> >\n     { static const int value = 8; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, \n-\t\t\t    _T8, _NullClass> >\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7,\n+\t\t\t    _Tp8,  _NullClass> >\n     { static const int value = 9; };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    struct tuple_size<tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, \n-\t\t\t    _T8, _T9> >\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    struct tuple_size<tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7,\n+\t\t\t    _Tp8, _Tp9> >\n     { static const int value = 10; };\n-  \n+\n   // Adds a const reference to a non-reference type.\n-  template<typename _T>\n-    struct __add_const_ref\n-    { typedef const _T& type; };\n-  \n-  template<typename _T>\n-    struct __add_const_ref<_T&>\n-    { typedef _T& type; };\n-  \n+  template<typename _Tp>\n+    struct __add_c_ref\n+    { typedef const _Tp& type; };\n+\n+  template<typename _Tp>\n+    struct __add_c_ref<_Tp&>\n+    { typedef _Tp& type; };\n+\n   // Adds a reference to a non-reference type.\n-  template<typename _T>\n+  template<typename _Tp>\n     struct __add_ref\n-    { typedef _T& type; };\n-  \n-  template<typename _T>\n-    struct __add_ref<_T&>\n-    { typedef _T& type; };\n-  \n+    { typedef _Tp& type; };\n+\n+  template<typename _Tp>\n+    struct __add_ref<_Tp&>\n+    { typedef _Tp& type; };\n+\n   // The empty tuple.\n   template<>\n-    class tuple<_NullClass, _NullClass, _NullClass, _NullClass, _NullClass, \n-\t\t_NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n+    class tuple<_NullClass, _NullClass, _NullClass, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n     {\n     public:\n       tuple()\n       { }\n-      \n+\n       tuple(const tuple& __in)\n       { }\n-      \n+\n       tuple& operator=(const tuple& __in)\n       { return *this; }\n     };\n-  \n-  template<typename _T0>\n-    class tuple<_T0, _NullClass, _NullClass, _NullClass, _NullClass, \n-\t\t_NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n+\n+  template< typename _Tp0>\n+    class tuple< _Tp0, _NullClass, _NullClass, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass, _NullClass, _NullClass>\n     {\n-      _T0 __t0;\n+      _Tp0 _M_t0;\n \n     public:\n       tuple()\n       { }\n-      \n-      explicit tuple(typename __add_const_ref<_T0>::type __in0):\n-      __t0(__in0)\n+\n+      explicit tuple( typename __add_c_ref<_Tp0>::type __in0):\n+         _M_t0(__in0)\n       { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0)\n-    { }\n-    template <typename _U0>\n-    tuple(const tuple<_U0>& __in):\n-      __t0(__in.__t0)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      return *this;\n-    }\n-      \n-    template <typename _U0>\n-    tuple&\n-    operator=(const tuple<_U0>& __in)\n-    {\n-      __t0=__in.__t0;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+\n+      tuple(const tuple& __in):\n+         _M_t0(__in._M_t0)\n+      { }\n+\n+      template< typename _Up0>\n+        tuple(const tuple< _Up0>& __in):\n+\t   _M_t0(__in._M_t0)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        return *this;\n+      }\n+\n+      template< typename _Up0>\n+        tuple&\n+        operator=(const tuple< _Up0>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1>\n-  class tuple<_T0, _T1, _NullClass, _NullClass, _NullClass, _NullClass, \n-\t      _NullClass, _NullClass, _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1):\n-      __t0(__in0), __t1(__in1)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1)\n-    { }\n-    template <typename _U0, typename _U1>\n-    tuple(const tuple<_U0, _U1>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1)\n-    { }\n-      \n-    template<class _U1, class _U2>\n-    tuple(const std::pair<_U1, _U2>& __u): __t0(__u.first), __t1(__u.second)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1>\n-    tuple&\n-    operator=(const tuple<_U0, _U1>& __in)\n+\n+  template<typename _Tp0, typename _Tp1>\n+    class tuple<_Tp0, _Tp1, _NullClass, _NullClass, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1):\n+        _M_t0(__in0), _M_t1(__in1)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1)\n+      { }\n+\n+      template<typename _Up0, typename _Up1>\n+        tuple(const tuple<_Up0, _Up1>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1)\n+        { }\n+\n+      template<class _Up1, class _Up2>\n+        tuple(const std::pair<_Up1, _Up2>& __u):\n+           _M_t0(__u.first), _M_t1(__u.second)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2>\n-  class tuple<_T0, _T1, _T2, _NullClass, _NullClass, _NullClass, \n-\t      _NullClass, _NullClass, _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2):\n-      __t0(__in0), __t1(__in1), __t2(__in2)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2>\n-    tuple(const tuple<_U0, _U1, _U2>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2>\n+    class tuple<_Tp0, _Tp1, _Tp2, _NullClass, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2>\n+        tuple(const tuple<_Up0, _Up1, _Up2>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3>\n-  class tuple<_T0, _T1, _T2, _T3, _NullClass, _NullClass, _NullClass, \n-\t      _NullClass, _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3>\n-    tuple(const tuple<_U0, _U1, _U2, _U3>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _NullClass, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4>\n-  class tuple<_T0, _T1, _T2, _T3, _T4, _NullClass, _NullClass, \n-\t      _NullClass, _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5>\n-  class tuple<_T0, _T1, _T2, _T3, _T4, _T5, _NullClass, _NullClass, \n-\t      _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-    _T5 __t5;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4, \n-\t\t   typename __add_const_ref<_T5>::type __in5):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4), __t5(__in5)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4, _U5>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4, _U5>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _NullClass, _NullClass,\n+\t        _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+      _Tp5 _M_t5;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4,\n+\t\t     typename __add_c_ref<_Tp5>::type __in5):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n+        _M_t5(__in5)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        _M_t5=__in._M_t5;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  _M_t5=__in._M_t5;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6>\n-  class tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _NullClass, \n-\t      _NullClass, _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-    _T5 __t5;\n-    _T6 __t6;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4, \n-\t\t   typename __add_const_ref<_T5>::type __in5, \n-\t\t   typename __add_const_ref<_T6>::type __in6):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4), __t5(__in5), __t6(__in6)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _NullClass,\n+\t        _NullClass, _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+      _Tp5 _M_t5;\n+      _Tp6 _M_t6;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4,\n+\t\t     typename __add_c_ref<_Tp5>::type __in5,\n+\t\t     typename __add_c_ref<_Tp6>::type __in6):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n+        _M_t5(__in5), _M_t6(__in6)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+        _M_t6(__in._M_t6)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+\t  _M_t6(__in._M_t6)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        _M_t5=__in._M_t5;\n+        _M_t6=__in._M_t6;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5,\n+\t\t\t      _Up6>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  _M_t5=__in._M_t5;\n+\t  _M_t6=__in._M_t6;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7>\n-  class tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _NullClass, \n-\t      _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-    _T5 __t5;\n-    _T6 __t6;\n-    _T7 __t7;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4, \n-\t\t   typename __add_const_ref<_T5>::type __in5, \n-\t\t   typename __add_const_ref<_T6>::type __in6, \n-\t\t   typename __add_const_ref<_T7>::type __in7):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4), __t5(__in5), __t6(__in6), __t7(__in7)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7\n-\t  >& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7\n-\t      >& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _NullClass,\n+\t        _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+      _Tp5 _M_t5;\n+      _Tp6 _M_t6;\n+      _Tp7 _M_t7;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4,\n+\t\t     typename __add_c_ref<_Tp5>::type __in5,\n+\t\t     typename __add_c_ref<_Tp6>::type __in6,\n+\t\t     typename __add_c_ref<_Tp7>::type __in7):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n+        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+        _M_t6(__in._M_t6), _M_t7(__in._M_t7)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6,\n+\t\t\t  _Up7>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        _M_t5=__in._M_t5;\n+        _M_t6=__in._M_t6;\n+        _M_t7=__in._M_t7;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6,\n+\t\t\t      _Up7>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  _M_t5=__in._M_t5;\n+\t  _M_t6=__in._M_t6;\n+\t  _M_t7=__in._M_t7;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8>\n-  class tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t      _NullClass>\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-    _T5 __t5;\n-    _T6 __t6;\n-    _T7 __t7;\n-    _T8 __t8;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4, \n-\t\t   typename __add_const_ref<_T5>::type __in5, \n-\t\t   typename __add_const_ref<_T6>::type __in6, \n-\t\t   typename __add_const_ref<_T7>::type __in7, \n-\t\t   typename __add_const_ref<_T8>::type __in8):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4), __t5(__in5), __t6(__in6), __t7(__in7), \n-      __t8(__in8)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7), __t8(__in.__t8)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7, \n-\t      typename _U8>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8\n-\t  >& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7), __t8(__in.__t8)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      __t8=__in.__t8;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7, \n-\t      typename _U8>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, \n-\t      _U8>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8>\n+    class tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, \n+\t        _NullClass>\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      __t8=__in.__t8;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+      _Tp5 _M_t5;\n+      _Tp6 _M_t6;\n+      _Tp7 _M_t7;\n+      _Tp8 _M_t8;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4,\n+\t\t     typename __add_c_ref<_Tp5>::type __in5,\n+\t\t     typename __add_c_ref<_Tp6>::type __in6,\n+\t\t     typename __add_c_ref<_Tp7>::type __in7,\n+\t\t     typename __add_c_ref<_Tp8>::type __in8):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n+        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7), _M_t8(__in8)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+        _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n+\t       typename _Up8>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n+\t\t\t  _Up8>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        _M_t5=__in._M_t5;\n+        _M_t6=__in._M_t6;\n+        _M_t7=__in._M_t7;\n+        _M_t8=__in._M_t8;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n+\t       typename _Up8>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n+\t\t\t      _Up8>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  _M_t5=__in._M_t5;\n+\t  _M_t6=__in._M_t6;\n+\t  _M_t7=__in._M_t7;\n+\t  _M_t8=__in._M_t8;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-  class tuple\n-  {\n-    _T0 __t0;\n-    _T1 __t1;\n-    _T2 __t2;\n-    _T3 __t3;\n-    _T4 __t4;\n-    _T5 __t5;\n-    _T6 __t6;\n-    _T7 __t7;\n-    _T8 __t8;\n-    _T9 __t9;\n-  public:\n-    tuple()\n-    { }\n-      \n-    explicit tuple(typename __add_const_ref<_T0>::type __in0, \n-\t\t   typename __add_const_ref<_T1>::type __in1, \n-\t\t   typename __add_const_ref<_T2>::type __in2, \n-\t\t   typename __add_const_ref<_T3>::type __in3, \n-\t\t   typename __add_const_ref<_T4>::type __in4, \n-\t\t   typename __add_const_ref<_T5>::type __in5, \n-\t\t   typename __add_const_ref<_T6>::type __in6, \n-\t\t   typename __add_const_ref<_T7>::type __in7, \n-\t\t   typename __add_const_ref<_T8>::type __in8, \n-\t\t   typename __add_const_ref<_T9>::type __in9):\n-      __t0(__in0), __t1(__in1), __t2(__in2), __t3(__in3), \n-      __t4(__in4), __t5(__in5), __t6(__in6), __t7(__in7), \n-      __t8(__in8), __t9(__in9)\n-    { }\n-      \n-    tuple(const tuple& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7), __t8(__in.__t8), \n-      __t9(__in.__t9)\n-    { }\n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7, \n-\t      typename _U8, typename _U9>\n-    tuple(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, \n-\t  _U9>& __in):\n-      __t0(__in.__t0), __t1(__in.__t1), __t2(__in.__t2), \n-      __t3(__in.__t3), __t4(__in.__t4), __t5(__in.__t5), \n-      __t6(__in.__t6), __t7(__in.__t7), __t8(__in.__t8), \n-      __t9(__in.__t9)\n-    { }\n-      \n-    tuple& operator=(const tuple& __in)\n-    {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      __t8=__in.__t8;\n-      __t9=__in.__t9;\n-      return *this;\n-    }\n-      \n-    template <typename _U0, typename _U1, typename _U2, typename _U3, \n-\t      typename _U4, typename _U5, typename _U6, typename _U7, \n-\t      typename _U8, typename _U9>\n-    tuple&\n-    operator=(const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, \n-\t      _U8, _U9>& __in)\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    class tuple\n     {\n-      __t0=__in.__t0;\n-      __t1=__in.__t1;\n-      __t2=__in.__t2;\n-      __t3=__in.__t3;\n-      __t4=__in.__t4;\n-      __t5=__in.__t5;\n-      __t6=__in.__t6;\n-      __t7=__in.__t7;\n-      __t8=__in.__t8;\n-      __t9=__in.__t9;\n-      return *this;\n-    }\n-    template<int __i, typename _U>\n-    friend class __get_helper;\n-    template<typename, typename, typename, typename, typename, typename, \n-\t     typename, typename, typename, typename>\n-    friend class tuple;\n+      _Tp0 _M_t0;\n+      _Tp1 _M_t1;\n+      _Tp2 _M_t2;\n+      _Tp3 _M_t3;\n+      _Tp4 _M_t4;\n+      _Tp5 _M_t5;\n+      _Tp6 _M_t6;\n+      _Tp7 _M_t7;\n+      _Tp8 _M_t8;\n+      _Tp9 _M_t9;\n+\n+    public:\n+      tuple()\n+      { }\n+\n+      explicit tuple(typename __add_c_ref<_Tp0>::type __in0,\n+\t\t     typename __add_c_ref<_Tp1>::type __in1,\n+\t\t     typename __add_c_ref<_Tp2>::type __in2,\n+\t\t     typename __add_c_ref<_Tp3>::type __in3,\n+\t\t     typename __add_c_ref<_Tp4>::type __in4,\n+\t\t     typename __add_c_ref<_Tp5>::type __in5,\n+\t\t     typename __add_c_ref<_Tp6>::type __in6,\n+\t\t     typename __add_c_ref<_Tp7>::type __in7,\n+\t\t     typename __add_c_ref<_Tp8>::type __in8,\n+\t\t     typename __add_c_ref<_Tp9>::type __in9):\n+        _M_t0(__in0), _M_t1(__in1), _M_t2(__in2), _M_t3(__in3), _M_t4(__in4),\n+        _M_t5(__in5), _M_t6(__in6), _M_t7(__in7), _M_t8(__in8), _M_t9(__in9)\n+      { }\n+\n+      tuple(const tuple& __in):\n+        _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+        _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+        _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8),\n+        _M_t9(__in._M_t9)\n+      { }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n+\t       typename _Up8, typename _Up9>\n+        tuple(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t\t  _Up9>& __in):\n+\t  _M_t0(__in._M_t0), _M_t1(__in._M_t1), _M_t2(__in._M_t2),\n+\t  _M_t3(__in._M_t3), _M_t4(__in._M_t4), _M_t5(__in._M_t5),\n+\t  _M_t6(__in._M_t6), _M_t7(__in._M_t7), _M_t8(__in._M_t8),\n+\t  _M_t9(__in._M_t9)\n+        { }\n+\n+      tuple&\n+      operator=(const tuple& __in)\n+      {\n+        _M_t0=__in._M_t0;\n+        _M_t1=__in._M_t1;\n+        _M_t2=__in._M_t2;\n+        _M_t3=__in._M_t3;\n+        _M_t4=__in._M_t4;\n+        _M_t5=__in._M_t5;\n+        _M_t6=__in._M_t6;\n+        _M_t7=__in._M_t7;\n+        _M_t8=__in._M_t8;\n+        _M_t9=__in._M_t9;\n+        return *this;\n+      }\n+\n+      template<typename _Up0, typename _Up1, typename _Up2, typename _Up3,\n+\t       typename _Up4, typename _Up5, typename _Up6, typename _Up7,\n+\t       typename _Up8, typename _Up9>\n+        tuple&\n+        operator=(const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7,\n+\t\t\t      _Up8, _Up9>& __in)\n+        {\n+\t  _M_t0=__in._M_t0;\n+\t  _M_t1=__in._M_t1;\n+\t  _M_t2=__in._M_t2;\n+\t  _M_t3=__in._M_t3;\n+\t  _M_t4=__in._M_t4;\n+\t  _M_t5=__in._M_t5;\n+\t  _M_t6=__in._M_t6;\n+\t  _M_t7=__in._M_t7;\n+\t  _M_t8=__in._M_t8;\n+\t  _M_t9=__in._M_t9;\n+\t  return *this;\n+        }\n+\n+      template<int __i, typename _Up>\n+        friend class __get_helper;\n+      template<typename, typename, typename, typename, typename, typename,\n+\t       typename, typename, typename, typename>\n+        friend class tuple;\n   };\n-  \n+\n   // Class used in the implementation of get\n-  template<int __i, typename _T>\n+  template<int __i, typename _Tp>\n     struct __get_helper;\n \n-  template<typename _T>\n-    struct __get_helper<0, _T>\n+  template<typename _Tp>\n+    struct __get_helper<0, _Tp>\n     {\n-      static typename __add_ref<typename tuple_element<0, _T>::type>::type\n-      get_value(_T& __in) \n-      { return __in.__t0; }\n+      static typename __add_ref<typename tuple_element<0, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t0; }\n \n-      static typename __add_const_ref<typename tuple_element<0, _T>::type>::type\n-      get_value(const _T& __in)\n-      { return __in.__t0; }\n+      static typename __add_c_ref<typename tuple_element<0, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t0; }\n     };\n-  \n-  template<typename _T>\n-  struct __get_helper<1, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<1, _T>::type>::type\n-    get_value(_T& __in)\n-    {\n-      return __in.__t1;\n-    }\n-    static typename __add_const_ref<typename tuple_element<1, _T>::type>::type\n-    get_value(const _T& __in)\n-    {\n-      return __in.__t1;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<2, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<2, _T>::type>::type\n-    get_value(_T& __in)\n-    {\n-      return __in.__t2;\n-    }\n-    static typename __add_const_ref<typename tuple_element<2, _T>::type>::type\n-    get_value(const _T& __in)\n-    {\n-      return __in.__t2;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<3, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<3, _T>::type>::type\n-    get_value(_T& __in)\n-    {\n-      return __in.__t3;\n-    }\n-    static typename __add_const_ref<typename tuple_element<3, _T>::type>::type\n-    get_value(const _T& __in)\n-    {\n-      return __in.__t3;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<4, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<4, _T>::type>::type\n-    get_value(_T& __in)\n-    {\n-      return __in.__t4;\n-    }\n-    static typename __add_const_ref<typename tuple_element<4, _T>::type>::type\n-    get_value(const _T& __in)\n-    {\n-      return __in.__t4;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<5, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<5, _T>::type>::type\n-    get_value(_T& __in)\n-    {\n-      return __in.__t5;\n-    }\n-    static typename __add_const_ref<typename tuple_element<5, _T>::type>::type\n-    get_value(const _T& __in)\n+\n+  template<typename _Tp>\n+    struct __get_helper<1, _Tp>\n     {\n-      return __in.__t5;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<6, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<6, _T>::type>::type\n-    get_value(_T& __in)\n+      static typename __add_ref<typename tuple_element<1, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t1; }\n+\n+      static typename __add_c_ref<typename tuple_element<1, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t1; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<2, _Tp>\n     {\n-      return __in.__t6;\n-    }\n-    static typename __add_const_ref<typename tuple_element<6, _T>::type>::type\n-    get_value(const _T& __in)\n+      static typename __add_ref<typename tuple_element<2, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t2; }\n+\n+      static typename __add_c_ref<typename tuple_element<2, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t2; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<3, _Tp>\n     {\n-      return __in.__t6;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<7, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<7, _T>::type>::type\n-    get_value(_T& __in)\n+      static typename __add_ref<typename tuple_element<3, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t3; }\n+\n+      static typename __add_c_ref<typename tuple_element<3, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t3; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<4, _Tp>\n     {\n-      return __in.__t7;\n-    }\n-    static typename __add_const_ref<typename tuple_element<7, _T>::type>::type\n-    get_value(const _T& __in)\n+      static typename __add_ref<typename tuple_element<4, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t4; }\n+\n+      static typename __add_c_ref<typename tuple_element<4, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t4; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<5, _Tp>\n     {\n-      return __in.__t7;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<8, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<8, _T>::type>::type\n-    get_value(_T& __in)\n+      static typename __add_ref<typename tuple_element<5, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t5; }\n+\n+      static typename __add_c_ref<typename tuple_element<5, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t5; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<6, _Tp>\n     {\n-      return __in.__t8;\n-    }\n-    static typename __add_const_ref<typename tuple_element<8, _T>::type>::type\n-    get_value(const _T& __in)\n+      static typename __add_ref<typename tuple_element<6, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t6; }\n+\n+      static typename __add_c_ref<typename tuple_element<6, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t6; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<7, _Tp>\n     {\n-      return __in.__t8;\n-    }\n-  };\n-  \n-  template<typename _T>\n-  struct __get_helper<9, _T>\n-  {\n-    static typename __add_ref<typename tuple_element<9, _T>::type>::type\n-    get_value(_T& __in)\n+      static typename __add_ref<typename tuple_element<7, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t7; }\n+\n+      static typename __add_c_ref<typename tuple_element<7, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t7; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<8, _Tp>\n     {\n-      return __in.__t9;\n-    }\n-    static typename __add_const_ref<typename tuple_element<9, _T>::type>::type\n-    get_value(const _T& __in)\n+      static typename __add_ref<typename tuple_element<8, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t8; }\n+\n+      static typename __add_c_ref<typename tuple_element<8, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t8; }\n+    };\n+\n+  template<typename _Tp>\n+    struct __get_helper<9, _Tp>\n     {\n-      return __in.__t9;\n-    }\n-  };\n-  \n+      static typename __add_ref<typename tuple_element<9, _Tp>::type>::type\n+      get_value(_Tp& __in)\n+      { return __in._M_t9; }\n+\n+      static typename __add_c_ref<typename tuple_element<9, _Tp>::type>::type\n+      get_value(const _Tp& __in)\n+      { return __in._M_t9; }\n+    };\n+\n   /* Returns a reference to the ith element of a tuple.\n    * Any const or non-const ref elements are returned with their original type\n    */\n-  template<int __i, typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-  typename __add_ref<typename tuple_element<__i,tuple<_T0, _T1, _T2, _T3, \n-\t\t\t\t\t\t      _T4, _T5, _T6, _T7, _T8, _T9> >::type>::type\n-  get(tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9>& __t)\n-  {\n-    return __get_helper<__i,tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-      _T7, _T8, _T9> >::get_value(__t);\n-  }\n+  template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t\t    typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t\t    typename _Tp8, typename _Tp9>\n+    typename __add_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n+\t\t\t\t\t\t\t _Tp3, _Tp4, _Tp5,\n+\t\t\t\t\t\t\t _Tp6, _Tp7, _Tp8,\n+\t\t\t\t\t\t\t _Tp9> >::type>::type\n+    get(tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t      _Tp9>& __t)\n+    {\n+      return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t     _Tp7, _Tp8, _Tp9> >::get_value(__t);\n+    }\n \n   /* Returns a const reference to the ith element of a tuple.\n    * Any const or non-const ref elements are returned with their original type\n    */\n-  template<int __i, typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-  typename __add_const_ref<typename tuple_element<__i,tuple<_T0, _T1, _T2, \n-\t\t\t\t\t\t\t    _T3, _T4, _T5, _T6, _T7, _T8, _T9> >::type>::type\n-  get(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      >& __t)\n-  {\n-    return __get_helper<__i,tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, \n-      _T7, _T8, _T9> >::get_value(__t);\n-  }\n+  template<int __i, typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t\t    typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t\t    typename _Tp8, typename _Tp9>\n+    typename __add_c_ref<typename tuple_element<__i, tuple<_Tp0, _Tp1, _Tp2,\n+\t\t\t\t\t\t\t   _Tp3, _Tp4, _Tp5,\n+\t\t\t\t\t\t\t   _Tp6, _Tp7, _Tp8,\n+\t\t\t\t\t\t\t   _Tp9> >::type>::type\n+    get(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t    _Tp9>& __t)\n+    {\n+      return __get_helper<__i, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t     _Tp7, _Tp8, _Tp9> >::get_value(__t);\n+    }\n \n   // This class helps construct the various comparison operations on tuples\n-  template<int __check_equal_size, int __i, int __j, typename _T, typename _U>\n-  struct __tuple_compare;\n+  template<int __check_equal_size, int __i, int __j, typename _Tp, typename _Up>\n+    struct __tuple_compare;\n \n-  template<int __i, int __j, typename _T, typename _U>\n-  struct __tuple_compare<0, __i, __j, _T, _U>\n-  {\n-    static bool __eq(const _T& __t, const _U& __u)\n-    {\n-      return get<__i>(__t) == get<__i>(__u) &&\n-\t__tuple_compare<0, __i+1, __j, _T, _U>::__eq(__t, __u) ;\n-    }\n-    static bool __neq(const _T& __t, const _U& __u)\n-    {\n-      return get<__i>(__t) != get<__i>(__u) ||\n-\t__tuple_compare<0, __i+1, __j, _T, _U>::__neq(__t, __u) ;\n-    }\n-    static bool __less(const _T& __t, const _U& __u)\n-    {\n-      return (get<__i>(__t) < get<__i>(__u)) || !(get<__i>(__u) < get<__i>(__t)) &&\n-\t__tuple_compare<0, __i+1, __j, _T, _U>::__less(__t, __u) ;\n-    }\n-    static bool __greater(const _T& __t, const _U& __u)\n-    {\n-      return (get<__i>(__t) > get<__i>(__u)) || !(get<__i>(__u) > get<__i>(__t)) &&\n-\t__tuple_compare<0, __i+1, __j, _T, _U>::__greater(__t, __u) ;\n-    }\n-    static bool __leq(const _T& __t, const _U& __u)\n-    {\n-      return (get<__i>(__t) <= get<__i>(__u)) && (!(get<__i>(__u)<=get<__i>(__t)) ||\n-\t\t\t\t\t\t  __tuple_compare<0, __i+1, __j, _T, _U>::__leq(__t, __u) );\n-    }\n-    static bool __geq(const _T& __t, const _U& __u)\n+  template<int __i, int __j, typename _Tp, typename _Up>\n+    struct __tuple_compare<0, __i, __j, _Tp, _Up>\n     {\n-      return (get<__i>(__t) >= get<__i>(__u)) && (!(get<__i>(__u)>=get<__i>(__t)) ||\n-\t\t\t\t\t\t  __tuple_compare<0, __i+1, __j, _T, _U>::__geq(__t, __u) );\n-    }\n-  };\n-  \n-  template<int __i, typename _T, typename _U>\n-  struct __tuple_compare<0, __i, __i, _T, _U>\n-  {\n-    static bool __eq(const _T&, const _U&)\n-    {\n-      return true;\n-    }\n-    static bool __neq(const _T&, const _U&)\n-    {\n-      return false;\n-    }\n-    static bool __leq(const _T&, const _U&)\n-    {\n-      return true;\n-    }\n-    static bool __geq(const _T&, const _U&)\n-    {\n-      return true;\n-    }\n-    static bool __less(const _T&, const _U&)\n-    {\n-      return false;\n-    }\n-    static bool __greater(const _T&, const _U&)\n+      static bool __eq(const _Tp& __t, const _Up& __u)\n+      {\n+        return get<__i>(__t) == get<__i>(__u) &&\n+           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__eq(__t, __u);\n+      }\n+      static bool __neq(const _Tp& __t, const _Up& __u)\n+      {\n+        return get<__i>(__t) != get<__i>(__u) ||\n+           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__neq(__t, __u);\n+      }\n+      static bool __less(const _Tp& __t, const _Up& __u)\n+      {\n+        return (get<__i>(__t) < get<__i>(__u)) || !(get<__i>(__u) < get<__i>(__t)) &&\n+           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__less(__t, __u);\n+      }\n+      static bool __greater(const _Tp& __t, const _Up& __u)\n+      {\n+        return (get<__i>(__t) > get<__i>(__u)) || !(get<__i>(__u) > get<__i>(__t)) &&\n+           __tuple_compare<0, __i+1, __j, _Tp, _Up>::__greater(__t, __u);\n+      }\n+      static bool __leq(const _Tp& __t, const _Up& __u)\n+      {\n+        return (get<__i>(__t) <= get<__i>(__u)) && (!(get<__i>(__u)<=get<__i>(__t)) ||\n+        \t\t\t\t\t   __tuple_compare<0, __i+1, __j, _Tp, _Up>::__leq(__t, __u));\n+      }\n+      static bool __geq(const _Tp& __t, const _Up& __u)\n+      {\n+        return (get<__i>(__t) >= get<__i>(__u)) && (!(get<__i>(__u)>=get<__i>(__t)) ||\n+        \t\t\t\t\t   __tuple_compare<0, __i+1, __j, _Tp, _Up>::__geq(__t, __u));\n+      }\n+    };\n+\n+  template<int __i, typename _Tp, typename _Up>\n+    struct __tuple_compare<0, __i, __i, _Tp, _Up>\n     {\n-      return false;\n-    }\n-  };\n+      static bool __eq(const _Tp&, const _Up&)\n+      { return true; }\n+      static bool __neq(const _Tp&, const _Up&)\n+      { return false; }\n+      static bool __leq(const _Tp&, const _Up&)\n+      { return true; }\n+      static bool __geq(const _Tp&, const _Up&)\n+      { return true; }\n+      static bool __less(const _Tp&, const _Up&)\n+      { return false; }\n+      static bool __greater(const _Tp&, const _Up&)\n+      { return false; }\n+    };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator==(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t     _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t     _U7, _U8, _U9>& __u)\n+  operator==(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__eq(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__eq(__t, __u);\n   }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator!=(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t     _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t     _U7, _U8, _U9>& __u)\n+  operator!=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__neq(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__neq(__t, __u);\n   }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator<(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t    _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t    _U7, _U8, _U9>& __u)\n+  operator<(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t    const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__less(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__less(__t, __u);\n   }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator>(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t    _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t    _U7, _U8, _U9>& __u)\n+  operator>(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t    const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__greater(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__greater(__t, __u);\n   }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator<=(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t     _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t     _U7, _U8, _U9>& __u)\n+  operator<=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__leq(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__leq(__t, __u);\n   }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9, typename _U0, typename _U1, \n-\t   typename _U2, typename _U3, typename _U4, typename _U5, \n-\t   typename _U6, typename _U7, typename _U8, typename _U9>\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9, typename _Up0, typename _Up1,\n+\t   typename _Up2, typename _Up3, typename _Up4, typename _Up5,\n+\t   typename _Up6, typename _Up7, typename _Up8, typename _Up9>\n   bool\n-  operator>=(const tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, \n-\t     _T9>& __t, const tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, \n-\t     _U7, _U8, _U9>& __u)\n+  operator>=(const tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>& __t,\n+\t     const tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8, _Up9>& __u)\n   {\n-    typedef tuple<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, _T8, _T9\n-      > __T_tuple;\n-    typedef tuple<_U0, _U1, _U2, _U3, _U4, _U5, _U6, _U7, _U8, _U9\n-      > __U_tuple;\n-    return __tuple_compare<tuple_size<__T_tuple>::value -\n-      tuple_size<__U_tuple>::value, 0,\n-      tuple_size<__T_tuple>::value, __T_tuple, __U_tuple>::__geq(__t, __u);\n+    typedef tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6, _Tp7, _Tp8,\n+\t\t  _Tp9> __t_tuple;\n+    typedef tuple<_Up0, _Up1, _Up2, _Up3, _Up4, _Up5, _Up6, _Up7, _Up8,\n+\t\t  _Up9> __u_tuple;\n+    return __tuple_compare<tuple_size<__t_tuple>::value -\n+     tuple_size<__u_tuple>::value, 0,\n+      tuple_size<__t_tuple>::value, __t_tuple, __u_tuple>::__geq(__t, __u);\n   }\n \n   // Provides a way to annotate that a reference to\n   // an object should be passed.\n-  template<typename _T>\n-  class reference_wrapper\n-  {\n-    _T& __data;\n-\n-  public:\n-    typedef _T type;\n-\n-    explicit reference_wrapper(_T& __indata): __data(__indata)\n-    { }\n-    \n-    operator _T&() const\n-    { return this->get(); }\n-    \n-    _T&\n-    get() const\n-    { return __data; }\n-  };\n+  template<typename _Tp>\n+    class reference_wrapper\n+    {\n+      _Tp& _M_data;\n+      public:\n+        typedef _Tp type;\n+        explicit reference_wrapper(_Tp& __indata): _M_data(__indata)\n+        { }\n+\n+        operator _Tp& () const\n+        {\n+\t  return this->get();\n+        }\n+\n+        _Tp&\n+        get() const\n+        {\n+\t  return _M_data;\n+        }\n+    };\n \n   // Denotes a reference should be taken to a variable.\n-  template<typename _T>\n-    reference_wrapper<_T>\n-    ref(_T& __t)\n-    { return reference_wrapper<_T>(__t); }\n+  template<typename _Tp>\n+    reference_wrapper<_Tp>\n+    ref(_Tp& __t)\n+    {\n+      return reference_wrapper<_Tp>(__t);\n+    }\n \n   // Denotes a const reference should be taken to a variable.\n-  template<typename _T>\n-    reference_wrapper<_T const>\n-    cref(const _T& __t)\n-    { return reference_wrapper<_T const>(__t); }\n+  template<typename _Tp>\n+    reference_wrapper<_Tp const>\n+    cref(const _Tp& __t)\n+    {\n+      return reference_wrapper<_Tp const>(__t);\n+    }\n \n   // Helper which adds a reference to a type when given a reference_wrapper\n-  template<typename _T>\n+  template<typename _Tp>\n     struct __strip_reference_wrapper\n-    { typedef _T __type; };\n+    {\n+        typedef _Tp __type;\n+    };\n \n-  template<typename _T>\n-    struct __strip_reference_wrapper<reference_wrapper<_T> >\n-    { typedef _T& __type; };\n+  template<typename _Tp>\n+    struct __strip_reference_wrapper<reference_wrapper<_Tp> >\n+    {\n+      typedef _Tp& __type;\n+    };\n \n-  template<typename _T>\n-    struct __strip_reference_wrapper<const reference_wrapper<_T> >\n-    { typedef _T& __type; };\n+  template<typename _Tp>\n+    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >\n+    {\n+        typedef _Tp& __type;\n+    };\n \n-  template<typename _T0 = _NullClass, typename _T1 = _NullClass, \n-\t   typename _T2 = _NullClass, typename _T3 = _NullClass, \n-\t   typename _T4 = _NullClass, typename _T5 = _NullClass, \n-\t   typename _T6 = _NullClass, typename _T7 = _NullClass, \n-\t   typename _T8 = _NullClass, typename _T9 = _NullClass>\n+  template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n+\t   typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n+\t   typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n+\t   typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n+\t   typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n     struct __stripped_tuple_type\n     {\n-      typedef tuple<typename __strip_reference_wrapper<_T0>::__type, \n-\t\t    typename __strip_reference_wrapper<_T1>::__type, \n-\t\t    typename __strip_reference_wrapper<_T2>::__type, \n-\t\t    typename __strip_reference_wrapper<_T3>::__type, \n-\t\t    typename __strip_reference_wrapper<_T4>::__type, \n-\t\t    typename __strip_reference_wrapper<_T5>::__type, \n-\t\t    typename __strip_reference_wrapper<_T6>::__type, \n-\t\t    typename __strip_reference_wrapper<_T7>::__type, \n-\t\t    typename __strip_reference_wrapper<_T8>::__type, \n-\t\t    typename __strip_reference_wrapper<_T9>::__type>  __type;\n+      typedef tuple<typename __strip_reference_wrapper<_Tp0>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp1>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp2>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp3>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp4>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp5>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp6>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp7>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp8>::__type,\n+\t\t    typename __strip_reference_wrapper<_Tp9>::__type>      __type;\n     };\n \n   tuple<>\n   make_tuple()\n-  {\n-    return tuple<>();\n-  };\n+  { return tuple<>(); }\n \n-  template<typename _T0>\n-  typename __stripped_tuple_type<_T0>::__type\n-  make_tuple(_T0 __t0)\n-  {\n-    return typename  __stripped_tuple_type<_T0>::__type(__t0);};\n+  template< typename _Tp0>\n+    typename __stripped_tuple_type< _Tp0>::__type\n+    make_tuple( _Tp0 __t0)\n+    {\n+      return typename  __stripped_tuple_type< _Tp0>::\n+        __type( __t0);\n+    }\n \n-  template<typename _T0, typename _T1>\n-  typename __stripped_tuple_type<_T0, _T1>::__type\n-  make_tuple(_T0 __t0, _T1 __t1)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1>::__type(__t0, __t1);};\n+  template<typename _Tp0, typename _Tp1>\n+    typename __stripped_tuple_type<_Tp0, _Tp1>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1>::\n+        __type(__t0, __t1);\n+    }\n \n-  template<typename _T0, typename _T1, typename _T2>\n-  typename __stripped_tuple_type<_T0, _T1, _T2>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2)\n-  {\n-    return typename __stripped_tuple_type<_T0, _T1, _T2>::__type(__t0, __t1, __t2);};\n+  template<typename _Tp0, typename _Tp1, typename _Tp2>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2>::\n+        __type(__t0, __t1, __t2);\n+    }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3>::__type(__t0, __t1, __t2, __t3);};\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3>::\n+        __type(__t0, __t1, __t2, __t3);\n+    }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4>::__type(__t0, __t1, __t2, __t3, __t4);};\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4>::\n+        __type(__t0, __t1, __t2, __t3, __t4);\n+    }\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4, \n-\t     _T5 __t5)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5\n-      >::__type(__t0, __t1, __t2, __t3, __t4, __t5);};\n-\n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, _T6\n-\t\t\t\t >::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4, \n-\t     _T5 __t5, _T6 __t6)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, \n-      _T6>::__type(__t0, __t1, __t2, __t3, __t4, __t5, __t6);};\n-\n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7\n-\t\t\t\t >::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4, \n-\t     _T5 __t5, _T6 __t6, _T7 __t7)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, \n-      _T6, _T7>::__type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7);};\n-\n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, \n-\t\t\t\t _T8>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4, \n-\t     _T5 __t5, _T6 __t6, _T7 __t7, _T8 __t8)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, \n-      _T6, _T7, _T8>::__type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8);};\n-\n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-  typename __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, _T6, _T7, \n-\t\t\t\t _T8, _T9>::__type\n-  make_tuple(_T0 __t0, _T1 __t1, _T2 __t2, _T3 __t3, _T4 __t4, \n-\t     _T5 __t5, _T6 __t6, _T7 __t7, _T8 __t8, _T9 __t9)\n-  {\n-    return typename  __stripped_tuple_type<_T0, _T1, _T2, _T3, _T4, _T5, \n-      _T6, _T7, _T8, _T9>::__type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8, __t9\n-\t\t\t\t    );};\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t   _Tp5>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n+\t       _Tp5 __t5)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t\t     _Tp5>::\n+        __type(__t0, __t1, __t2, __t3, __t4, __t5);\n+    }\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5,\n+\t\t\t\t   _Tp6>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n+\t       _Tp5 __t5, _Tp6 __t6)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t\t     _Tp5, _Tp6>::\n+        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6);\n+    }\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t   _Tp7>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n+\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t\t     _Tp5, _Tp6, _Tp7>::\n+        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7);\n+    }\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t   _Tp7, _Tp8>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n+\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7, _Tp8 __t8)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t\t     _Tp5, _Tp6, _Tp7, _Tp8>::\n+        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8);\n+    }\n+\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    typename __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n+\t\t\t\t   _Tp7, _Tp8, _Tp9>::__type\n+    make_tuple(_Tp0 __t0, _Tp1 __t1, _Tp2 __t2, _Tp3 __t3, _Tp4 __t4,\n+\t       _Tp5 __t5, _Tp6 __t6, _Tp7 __t7, _Tp8 __t8, _Tp9 __t9)\n+    {\n+      return typename  __stripped_tuple_type<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4,\n+\t\t\t\t\t     _Tp5, _Tp6, _Tp7, _Tp8, _Tp9>::\n+        __type(__t0, __t1, __t2, __t3, __t4, __t5, __t6, __t7, __t8, __t9);\n+    }\n+\n+  // A class (and instance) which can be used in 'tie' when an element\n+  // of a tuple is not required\n \n-  // A class (and instance) which can be used in 'tie' when a element\n-  // is not required.\n   struct swallow_assign\n   {\n     template<class T>\n-      swallow_assign&\n+    swallow_assign&\n       operator=(const T&)\n       { return *this; }\n   };\n@@ -1412,113 +1439,124 @@ namespace tr1\n     swallow_assign ignore;\n   };\n \n-  //  extern swallow_assign ignore;\n \n+  // Forms a tuple of references to a list of variables.\n+  template< typename _Tp0>\n+    tuple< _Tp0&>\n+    tie( _Tp0& __t0)\n+    {\n+      return make_tuple( ref(__t0));\n+    };\n \n-  // Allows forms a tuple of references to a list of variables.\n-  template<typename _T0>\n-    tuple<_T0&>\n-    tie(_T0& __t0)\n-    { return make_tuple(ref(__t0)); };\n-\n-  template<typename _T0, typename _T1>\n-    tuple<_T0&, _T1&>\n-    tie(_T0& __t0, _T1& __t1)\n-    { return make_tuple(ref(__t0), ref(__t1)); };\n+  template<typename _Tp0, typename _Tp1>\n+    tuple<_Tp0&, _Tp1&>\n+    tie(_Tp0& __t0, _Tp1& __t1)\n+    {\n+      return make_tuple(ref(__t0), ref(__t1));\n+    };\n \n-  template<typename _T0, typename _T1, typename _T2>\n-    tuple<_T0&, _T1&, _T2&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2)\n-    { return make_tuple(ref(__t0), ref(__t1), ref(__t2)); };\n+  template<typename _Tp0, typename _Tp1, typename _Tp2>\n+    tuple<_Tp0&, _Tp1&, _Tp2&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2)\n+    {\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2));\n+    };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3>\n-    tuple<_T0&, _T1&, _T2&, _T3&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3)\n-    { return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3)); };\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3)\n+    {\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3));\n+    };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4)\n-    { \n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4));\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4)\n+    {\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3),\n+\t\t        ref(__t4));\n     };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&, _T5&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4, _T5& __t5)\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4,\n+        _Tp5& __t5)\n     {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), \n-\t\t\tref(__t4), ref(__t5));\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n+\t\t        ref(__t5));\n     };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&, _T5&, _T6&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4, \n-\t_T5& __t5, _T6& __t6)\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n+        _Tp6& __t6)\n     {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), \n-\t\t\tref(__t4), ref(__t5), ref(__t6));\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n+\t\t        ref(__t5), ref(__t6));\n     };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4, \n-\t_T5& __t5, _T6& __t6, _T7& __t7)\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n+        _Tp6& __t6, _Tp7& __t7)\n     {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), \n-\t\t\tref(__t4), ref(__t5), ref(__t6), ref(__t7));\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n+\t\t        ref(__t5), ref(__t6), ref(__t7));\n     };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&, _T8&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4, \n-\t_T5& __t5, _T6& __t6, _T7& __t7, _T8& __t8)\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&, _Tp8&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n+        _Tp6& __t6, _Tp7& __t7, _Tp8& __t8)\n     {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), \n-\t\t\tref(__t4), ref(__t5), ref(__t6), ref(__t7), ref(__t8));\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n+\t\t        ref(__t5), ref(__t6), ref(__t7), ref(__t8));\n     };\n \n-  template<typename _T0, typename _T1, typename _T2, typename _T3, \n-\t   typename _T4, typename _T5, typename _T6, typename _T7, \n-\t   typename _T8, typename _T9>\n-    tuple<_T0&, _T1&, _T2&, _T3&, _T4&, _T5&, _T6&, _T7&, _T8&, _T9&>\n-    tie(_T0& __t0, _T1& __t1, _T2& __t2, _T3& __t3, _T4& __t4, \n-\t_T5& __t5, _T6& __t6, _T7& __t7, _T8& __t8, _T9& __t9)\n+  template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n+\t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n+\t   typename _Tp8, typename _Tp9>\n+    tuple<_Tp0&, _Tp1&, _Tp2&, _Tp3&, _Tp4&, _Tp5&, _Tp6&, _Tp7&, _Tp8&,\n+\t  _Tp9&>\n+    tie(_Tp0& __t0, _Tp1& __t1, _Tp2& __t2, _Tp3& __t3, _Tp4& __t4, _Tp5& __t5,\n+        _Tp6& __t6, _Tp7& __t7, _Tp8& __t8, _Tp9& __t9)\n     {\n-      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), \n-\t\t\tref(__t4), ref(__t5), ref(__t6), ref(__t7), ref(__t8), \n-\t\t\tref(__t9));\n+      return make_tuple(ref(__t0), ref(__t1), ref(__t2), ref(__t3), ref(__t4),\n+\t\t        ref(__t5), ref(__t6), ref(__t7), ref(__t8),\n+\t\t        ref(__t9));\n     };\n \n   // Various functions which give std::pair a tuple-like interface.\n-  template<class _T1, class _T2>\n-    struct tuple_size<std::pair<_T1, _T2> >\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_size<std::pair<_Tp1, _Tp2> >\n     { static const int value = 2; };\n \n-  template<class _T1, class _T2>\n-    struct tuple_element<0, std::pair<_T1, _T2> >\n-    { typedef _T1 type; };\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_element<0, std::pair<_Tp1, _Tp2> >\n+    { typedef _Tp1 type; };\n \n-  template<class _T1, class _T2>\n-    struct tuple_element<1, std::pair<_T1, _T2> >\n-    { typedef _T2 type; };\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_element<1, std::pair<_Tp1, _Tp2> >\n+    { typedef _Tp2 type; };\n \n-  template<int _I,class _T1,class _T2>\n-    typename tuple_element<_I, tuple<_T1, _T2> >::type\n-    get(pair<_T1, _T2>& __in)\n+  template<int _I, class _Tp1, class _Tp2>\n+    typename tuple_element<_I, tuple<_Tp1, _Tp2> >::type\n+    get(pair<_Tp1, _Tp2>& __in)\n     { return get<_I>(tie(__in.first, __in.second)); }\n \n-  template<int _I,class _T1,class _T2>\n-    typename tuple_element<_I, tuple<_T1, _T2> >::type\n-    get(const pair<_T1, _T2>& __in)\n+  template<int _I, class _Tp1, class _Tp2>\n+    typename tuple_element<_I, tuple<_Tp1, _Tp2> >::type\n+    get(const pair<_Tp1, _Tp2>& __in)\n     { return get<_I>(tie(__in.first, __in.second)); }\n+\n }\n }\n \n #endif\n+"}]}