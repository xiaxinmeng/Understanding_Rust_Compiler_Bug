{"sha": "c0c7206d89c1d73f5253415d7a8958f932f62e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjNzIwNmQ4OWMxZDczZjUyNTM0MTVkN2E4OTU4ZjkzMmY2MmUyYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-10-21T20:12:52Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-10-21T20:12:52Z"}, "message": "re PR libfortran/34670 (bounds checking for array intrinsics)\n\n2008-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/34670\n\t* intrinsics/transpose_generic.c:  Implement bounds checking.\n\t* m4/transpose.m4:  Likewise.\n\t* generated/transpose_c8.c: Regenerated.\n\t* generated/transpose_c16.c: Regenerated.\n\t* generated/transpose_r10.c: Regenerated.\n\t* generated/transpose_i8.c: Regenerated.\n\t* generated/transpose_c10.c: Regenerated.\n\t* generated/transpose_r4.c: Regenerated.\n\t* generated/transpose_c4.c: Regenerated.\n\t* generated/transpose_i16.c: Regenerated.\n\t* generated/transpose_i4.c: Regenerated.\n\t* generated/transpose_r8.c: Regenerated.\n\t* generated/transpose_r16.c: Regenerated.\n\n2008-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/34670\n\t* gfortran.dg/transpose_2.f90:  New test.\n\nFrom-SVN: r141276", "tree": {"sha": "4f368862290e2b5e79a8d920c685df20c5d2c9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f368862290e2b5e79a8d920c685df20c5d2c9de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c7206d89c1d73f5253415d7a8958f932f62e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c7206d89c1d73f5253415d7a8958f932f62e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c7206d89c1d73f5253415d7a8958f932f62e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c7206d89c1d73f5253415d7a8958f932f62e2b/comments", "author": null, "committer": null, "parents": [{"sha": "7d4074339038e21d9bfc7656b5ed8db4b5c57f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4074339038e21d9bfc7656b5ed8db4b5c57f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4074339038e21d9bfc7656b5ed8db4b5c57f01"}], "stats": {"total": 327, "additions": 327, "deletions": 0}, "files": [{"sha": "b00853789d9d9154826a21545129c341d86a2dd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -1,3 +1,8 @@\n+2008-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/34670\n+\t* gfortran.dg/transpose_2.f90:  New test.\n+\n 2008-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37669"}, {"sha": "d48651a92cc82d0f5386fa5db65cdec260a9f4d8", "filename": "gcc/testsuite/gfortran.dg/transpose_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_2.f90?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Incorrect extent in return value of TRANSPOSE intrinsic in dimension 1: is 2, should be 3\" }\n+program main\n+  implicit none\n+  character(len=10) :: in\n+  real, dimension(:,:), allocatable :: a,b\n+  integer :: ax, ay, bx, by\n+\n+  in = \"2 2 3 2\"\n+  read (unit=in,fmt='(4I2)') ax, ay, bx, by\n+  allocate (a(ax,ay))\n+  allocate (b(bx,by))\n+  a = 1.0\n+  b = 2.1\n+  b = transpose(a)\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return value of TRANSPOSE intrinsic in dimension 1: is 2, should be 3\" }"}, {"sha": "3802d69e96962650e8669cf8213e5de50de7376e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -1,3 +1,20 @@\n+2008-10-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/34670\n+\t* intrinsics/transpose_generic.c:  Implement bounds checking.\n+\t* m4/transpose.m4:  Likewise.\n+\t* generated/transpose_c8.c: Regenerated.\n+\t* generated/transpose_c16.c: Regenerated.\n+\t* generated/transpose_r10.c: Regenerated.\n+\t* generated/transpose_i8.c: Regenerated.\n+\t* generated/transpose_c10.c: Regenerated.\n+\t* generated/transpose_r4.c: Regenerated.\n+\t* generated/transpose_c4.c: Regenerated.\n+\t* generated/transpose_i16.c: Regenerated.\n+\t* generated/transpose_i4.c: Regenerated.\n+\t* generated/transpose_r8.c: Regenerated.\n+\t* generated/transpose_r16.c: Regenerated.\n+\n 2008-10-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org\n \n \tPR libfortran/37834"}, {"sha": "65760e28051cb2a5bb5ec91f43bcd8780b33c254", "filename": "libgfortran/generated/transpose_c10.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c10.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_c10 (gfc_array_c10 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "94b5b96e3f1d4f9e13687bbba46a5000cee8ba70", "filename": "libgfortran/generated/transpose_c16.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c16.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_c16 (gfc_array_c16 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "14cc7cadc628056bb597008a5697aa456680e954", "filename": "libgfortran/generated/transpose_c4.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c4.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_c4 (gfc_array_c4 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "219331ba5f7e4ef44d0288e4f1af86f5d13a4958", "filename": "libgfortran/generated/transpose_c8.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c8.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_c8 (gfc_array_c8 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "83d6257b3e26dff5a8fd00db8c34a4785819bdec", "filename": "libgfortran/generated/transpose_i16.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i16.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_i16 (gfc_array_i16 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_INTEGER_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "f2a79cd02daaf1ba34d2ec6074096508249a1818", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_i4 (gfc_array_i4 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "8c065de9029871de35482344204295adf29744ac", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_i8 (gfc_array_i8 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "189e0dd726de385b714f7b2fcb1489812a5db141", "filename": "libgfortran/generated/transpose_r10.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r10.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_r10 (gfc_array_r10 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_REAL_10) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "928b1835533331a70a774d98efe920f44d46c158", "filename": "libgfortran/generated/transpose_r16.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r16.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_r16 (gfc_array_r16 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_REAL_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "0cb2404b7bdee1929b2f3968d0e68550eac44e68", "filename": "libgfortran/generated/transpose_r4.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r4.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_r4 (gfc_array_r4 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_REAL_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "78ae4a1a95a3c3b753ca7046fe29de6ef2b01f36", "filename": "libgfortran/generated/transpose_r8.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fgenerated%2Ftranspose_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r8.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -69,6 +69,28 @@ transpose_r8 (gfc_array_r8 * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof (GFC_REAL_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}, {"sha": "d51fa310d5a0cd5faa2d1cd359767cf2cab04972", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -68,6 +68,29 @@ transpose_internal (gfc_array_char *ret, gfc_array_char *source,\n       ret->data = internal_malloc_size (size * size0 ((array_t*)ret));\n       ret->offset = 0;\n     }\n+  else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+    }\n \n   sxstride = source->dim[0].stride * size;\n   systride = source->dim[1].stride * size;"}, {"sha": "de543eefca7bbe83a7145835e1c706800c03c6d6", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c7206d89c1d73f5253415d7a8958f932f62e2b/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=c0c7206d89c1d73f5253415d7a8958f932f62e2b", "patch": "@@ -70,6 +70,28 @@ transpose_'rtype_code` ('rtype` * const restrict ret,\n \n       ret->data = internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) ret));\n       ret->offset = 0;\n+    } else if (unlikely (compile_options.bounds_check))\n+    {\n+      index_type ret_extent, src_extent;\n+\n+      ret_extent = ret->dim[0].ubound + 1 - ret->dim[0].lbound;\n+      src_extent = source->dim[1].ubound + 1 - source->dim[1].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 1: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n+      ret_extent = ret->dim[1].ubound + 1 - ret->dim[1].lbound;\n+      src_extent = source->dim[0].ubound + 1 - source->dim[0].lbound;\n+\n+      if (src_extent != ret_extent)\n+\truntime_error (\"Incorrect extent in return value of TRANSPOSE\"\n+\t\t       \" intrinsic in dimension 2: is %ld,\"\n+\t\t       \" should be %ld\", (long int) src_extent,\n+\t\t       (long int) ret_extent);\n+\n     }\n \n   sxstride = source->dim[0].stride;"}]}