{"sha": "6c167c45b1059150631362a647864ee0ca900a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxNjdjNDViMTA1OTE1MDYzMTM2MmE2NDc4NjRlZTBjYTkwMGE5MQ==", "commit": {"author": {"name": "Victor Leikehman", "email": "lei@il.ibm.com", "date": "2004-08-04T14:30:46Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-04T14:30:46Z"}, "message": "* libgfortran.h (array_t, size0) New declarations.\n\n\t* m4/ifunction.m4, m4/transpose.m4, intrinsics/cshift0.c: Allocate\n\tspace if return value descriptor has NULL in its data field,\n\tand initialize bounds and stride.\n\t* intrinsics/size.c (array_t, size0): Declarations moved to\n\tlibgfortran.h.\n\t* generated/*.c: Regenerate.\n\nFrom-SVN: r85558", "tree": {"sha": "4227da0c8f70c91f8b20b53d9be0ca661b7f838a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4227da0c8f70c91f8b20b53d9be0ca661b7f838a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c167c45b1059150631362a647864ee0ca900a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c167c45b1059150631362a647864ee0ca900a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c167c45b1059150631362a647864ee0ca900a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c167c45b1059150631362a647864ee0ca900a91/comments", "author": null, "committer": null, "parents": [{"sha": "2acc29bdd3bc49da5eca42a0f1c014f972e9ef20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2acc29bdd3bc49da5eca42a0f1c014f972e9ef20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2acc29bdd3bc49da5eca42a0f1c014f972e9ef20"}], "stats": {"total": 857, "additions": 851, "deletions": 6}, "files": [{"sha": "3aaf82fd6f69ec845b6648591ddbc81ddb562f43", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -1,3 +1,13 @@\n+2004-08-04  Victor Leikehman  <lei@il.ibm.com>\n+\n+\t* libgfortran.h (array_t, size0) New declarations.\n+\t* m4/ifunction.m4, m4/transpose.m4, intrinsics/cshift0.c: Allocate\n+\tspace if return value descriptor has NULL in its data field,\n+\tand initialize bounds and stride.\n+\t* intrinsics/size.c (array_t, size0): Declarations moved to\n+\tlibgfortran.h.\n+\t* generated/*.c: Regenerate.\n+\n 2004-08-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR libgfortran/16137"}, {"sha": "671684fa57f4c597f5bc752daa99c4a52175a11a", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __all_l4 (gfc_array_l4 * retarray, gfc_array_l4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "3f418ccc45f896f797262d8d96720ff972b183d2", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __all_l8 (gfc_array_l8 * retarray, gfc_array_l8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "64cd6757a48b89c9a9e0816bc338e4d70e6ccb28", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __any_l4 (gfc_array_l4 * retarray, gfc_array_l4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "c9f418dcd07a149333e80a618f4655ef7d21121f", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __any_l8 (gfc_array_l8 * retarray, gfc_array_l8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_LOGICAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "626ebf944e75dfe046b8847cd424e9e698b5a0d2", "filename": "libgfortran/generated/count_4_l4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_4_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_4_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __count_4_l4 (gfc_array_i4 * retarray, gfc_array_l4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "2db569aac500fccaadbfef3e97fce5c1e5f712de", "filename": "libgfortran/generated/count_4_l8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_4_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_4_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __count_4_l8 (gfc_array_i4 * retarray, gfc_array_l8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "dadbc96fb4ec962feac35318b74703358dbde887", "filename": "libgfortran/generated/count_8_l4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_8_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_8_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __count_8_l4 (gfc_array_i8 * retarray, gfc_array_l4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "d453e01e45b47e59b6e8f09a3b9f9face2abb3ee", "filename": "libgfortran/generated/count_8_l8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_8_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fcount_8_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __count_8_l8 (gfc_array_i8 * retarray, gfc_array_l8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "f2a3718482a23c320bc0097d593ea5517cf9b338", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "25a93bae5e57ecdf6f85db9c84439bd200b966a8", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "5dbf0e6442ee924a7fff639210a41abc1ca7cd4f", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "90b81865128f06e8c3e380a36b75c1fd5a29a572", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "a705e79d794e932cd6758488bc6141b712b82fc9", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "5edd7d480a593b41d7ccc4033d53d6bc04e1a581", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "5476736e20545eb804ee2b8c56e11ea7c7daa246", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "0fba535c9750c5486acd8e9351066714687eeea1", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __maxloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "90fc202331d3ae93f34c101ce7c76efd644ed293", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __maxval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "9746503707bd3e54a6cab0933856f77b6701c920", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __maxval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "de999ab390e45d17230da831ed0a506b3dcac399", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __maxval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "fa357b443fa2b29d81037fbe40a35b26f83adabb", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __maxval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "be9ae2e452d75b730a17c3c39e07f85e2c08645e", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_4_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "2f17baacbf05e0e1f56e10bed6a7862ba7012706", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_4_i8 (gfc_array_i4 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "7f3449f716b28aa2960210c87c091721251ef4f2", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_4_r4 (gfc_array_i4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "226d7271c06914e09f69d14969dec7208fdc1117", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_4_r8 (gfc_array_i4 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "1d1c3d406aabe4e0383c3a84bdf9441f45482ba5", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_8_i4 (gfc_array_i8 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "f7b46c17cf7c3812f3ebb18c5a8664711ab61442", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_8_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "d71d05621ea88ca9b8de876b69fe7c6797a5a139", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_8_r4 (gfc_array_i8 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "7de9a2e0377d50bacd35e985da12c1a1bd2c04fe", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -65,6 +65,23 @@ __minloc1_8_r8 (gfc_array_i8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "e2e68237601e62c9334f1d14ec77152d49682b40", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __minval_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "4b7bac6b532967e1113ddc48a203479854c609f6", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __minval_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "8d4e49055be988ff62b324d922bf15b0463826e9", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __minval_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "8300f7496813a99a95a4ecf02e6aacfca65cae47", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -64,6 +64,23 @@ __minval_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "c69295123ef2ff6ccee5b1e8e243425e1641ff80", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "68a678586bb379e0989a288eb982ccef89085f79", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "889d4c1bd67fc5b6042b6f1914c7d65873485f55", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "74e0459c6b9e79af393d307e0ec6f4c12f682a00", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "e18139d6b1b7f71e91c9e4d5c1f9db37ab47eed0", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "ce29c1a8ca29dea4221e05af3743dec7160a0b51", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __product_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "36e20e2e81c45f5a94558e5c4fae85669518c14a", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_c4 (gfc_array_c4 * retarray, gfc_array_c4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "971c597341ee914bded329639f50a3c1075265f4", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_c8 (gfc_array_c8 * retarray, gfc_array_c8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_COMPLEX_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "628a07756f4418959ef927752ff441dc6b6ea2f1", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_i4 (gfc_array_i4 * retarray, gfc_array_i4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "536719dd7e462900c3448d6bc6d22bca9151d326", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_i8 (gfc_array_i8 * retarray, gfc_array_i8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_INTEGER_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "611a1131739e9aed0807fa43b52430c806498493", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_r4 (gfc_array_r4 * retarray, gfc_array_r4 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_4) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "bdc93e0e47a1fdea4eb1fdb0035983724e2a8fa9", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -63,6 +63,23 @@ __sum_r8 (gfc_array_r8 * retarray, gfc_array_r8 *array, index_type *pdim)\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (GFC_REAL_8) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "930aad9f07d2f57a494942025e7ae723c0fb0d51", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -38,6 +38,21 @@ __transpose_4 (gfc_array_i4 * ret, gfc_array_i4 * source)\n \n   assert (GFC_DESCRIPTOR_RANK (source) == 2);\n \n+  if (ret->data == NULL)\n+    {\n+      ret->data = internal_malloc (sizeof (GFC_INTEGER_4) * size0 (source));\n+      ret->base = 0;\n+      ret->dtype = source->dtype;\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+    }\n+\n   if (ret->dim[0].stride == 0)\n     ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)"}, {"sha": "c4554e6c2109cd95b038c9ddb8381592a3a2b49e", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -38,6 +38,21 @@ __transpose_8 (gfc_array_i8 * ret, gfc_array_i8 * source)\n \n   assert (GFC_DESCRIPTOR_RANK (source) == 2);\n \n+  if (ret->data == NULL)\n+    {\n+      ret->data = internal_malloc (sizeof (GFC_INTEGER_8) * size0 (source));\n+      ret->base = 0;\n+      ret->dtype = source->dtype;\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+    }\n+\n   if (ret->dim[0].stride == 0)\n     ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)"}, {"sha": "dd96ddf173ca4fbba84d7ee9718c521708969dbe", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n    sizeof(int) < sizeof (index_type).  */\n \n static void\n-__cshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n+__cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n     int shift, int which)\n {\n   /* r.* indicates the return array.  */\n@@ -69,6 +69,25 @@ __cshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n   soffset = size;\n   len = 0;\n \n+  if (ret->data == NULL)\n+    {\n+      int i;\n+\n+      ret->data = internal_malloc (size * size0 ((array_t *)array));\n+      ret->base = 0;\n+      ret->dtype = array->dtype;\n+      for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n+        {\n+          ret->dim[i].lbound = 0;\n+          ret->dim[i].ubound = array->dim[i].ubound - array->dim[i].lbound;\n+\n+          if (i == 0)\n+            ret->dim[i].stride = 1;\n+          else\n+            ret->dim[i].stride = (ret->dim[i-1].ubound + 1) * ret->dim[i-1].stride;\n+        }\n+    }\n+\n   for (dim = 0; dim < GFC_DESCRIPTOR_RANK (array); dim++)\n     {\n       if (dim == which)\n@@ -153,15 +172,15 @@ __cshift0 (const gfc_array_char * ret, const gfc_array_char * array,\n \n \n void\n-__cshift0_4 (const gfc_array_char * ret, const gfc_array_char * array,\n+__cshift0_4 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_4 * pshift, const GFC_INTEGER_4 * pdim)\n {\n   __cshift0 (ret, array, *pshift, pdim ? *pdim : 1);\n }\n \n \n void\n-__cshift0_8 (const gfc_array_char * ret, const gfc_array_char * array,\n+__cshift0_8 (gfc_array_char * ret, const gfc_array_char * array,\n     const GFC_INTEGER_8 * pshift, const GFC_INTEGER_8 * pdim)\n {\n   __cshift0 (ret, array, *pshift, pdim ? *pdim : 1);"}, {"sha": "c4c792d6c75506026647b848a4b11d72b44ab542", "filename": "libgfortran/intrinsics/size.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fintrinsics%2Fsize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fintrinsics%2Fsize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsize.c?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -21,9 +21,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"libgfortran.h\"\n \n-typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, void) array_t;\n-\n-#define size0 prefix(size0)\n index_type size0 (const array_t * array)\n {\n   int n;"}, {"sha": "6cc26492898c9b8fa571ad2b857082a95b4886c9", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -417,5 +417,12 @@ GFC_REAL_4 normalize_r4_i4 (GFC_UINTEGER_4, GFC_UINTEGER_4);\n #define normalize_r8_i8 prefix(normalize_r8_i8)\n GFC_REAL_8 normalize_r8_i8 (GFC_UINTEGER_8, GFC_UINTEGER_8);\n \n+/* size.c */\n+\n+typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, void) array_t;\n+\n+#define size0 prefix(size0)\n+index_type size0 (const array_t * array); \n+\n #endif\n "}, {"sha": "14bd0a639974e9a4d43801a90c63a4e264afed9b", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -57,6 +57,23 @@ define(START_ARRAY_FUNCTION,\n         array->dim[n + 1].ubound + 1 - array->dim[n + 1].lbound;\n     }\n \n+  if (retarray->data == NULL)\n+    {\n+      for (n = 0; n < rank; n++)\n+        {\n+          retarray->dim[n].lbound = 0;\n+          retarray->dim[n].ubound = extent[n]-1;\n+          if (n == 0)\n+            retarray->dim[n].stride = 1;\n+          else\n+            retarray->dim[n].stride = retarray->dim[n-1].stride * extent[n-1];\n+        }\n+\n+      retarray->data = internal_malloc (sizeof (rtype_name) * \n+                                        (retarray->dim[rank-1].stride * extent[rank-1]));\n+      retarray->base = 0;\n+    }\n+          \n   for (n = 0; n < rank; n++)\n     {\n       count[n] = 0;"}, {"sha": "5fd6acfb228586eabd91b971efb9023745c71cb0", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c167c45b1059150631362a647864ee0ca900a91/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=6c167c45b1059150631362a647864ee0ca900a91", "patch": "@@ -39,6 +39,23 @@ void\n \n   assert (GFC_DESCRIPTOR_RANK (source) == 2);\n \n+  if (ret->data == NULL)\n+    {\n+      assert (GFC_DESCRIPTOR_RANK (ret) == 2);\n+      assert (ret->dtype == source->dtype);\n+\n+      ret->dim[0].lbound = 0;\n+      ret->dim[0].ubound = source->dim[1].ubound - source->dim[1].lbound;\n+      ret->dim[0].stride = 1;\n+\n+      ret->dim[1].lbound = 0;\n+      ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n+      ret->dim[1].stride = ret->dim[0].ubound+1;\n+\n+      ret->data = internal_malloc (sizeof (rtype_name) * size0 (ret));\n+      ret->base = 0;\n+    }\n+\n   if (ret->dim[0].stride == 0)\n     ret->dim[0].stride = 1;\n   if (source->dim[0].stride == 0)"}]}