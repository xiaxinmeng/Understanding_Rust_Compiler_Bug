{"sha": "d62887a42bc49963179b0429f6914b050dd2517c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyODg3YTQyYmM0OTk2MzE3OWIwNDI5ZjY5MTRiMDUwZGQyNTE3Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-06-04T08:09:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-06-04T08:09:16Z"}, "message": "re PR fortran/90738 (gfortran.dg/pointer_array_10.f90 etc. FAIL)\n\n2019-06-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90738\n\tRevert\n\t2019-06-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Get original\n\tfull reference tree and record in ref->ref.\n\t(vn_reference_lookup_3): Pass in original ref to\n\tao_ref_init_from_vn_reference.\n\t(vn_reference_lookup): Likewise.\n\t* tree-ssa-sccvn.h (ao_ref_init_from_vn_reference): Adjust prototype.\n\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n\tHandle non-decl bases in the original reference.\n\n\t* gcc.dg/tree-ssa/alias-access-path-1.c: Scan fre1.\n\n\t* gcc.dg/torture/pr90738.c: New testcase.\n\nFrom-SVN: r271902", "tree": {"sha": "2c3f3f6536f8853ae2e74c1391744c9067e29be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3f3f6536f8853ae2e74c1391744c9067e29be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62887a42bc49963179b0429f6914b050dd2517c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62887a42bc49963179b0429f6914b050dd2517c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62887a42bc49963179b0429f6914b050dd2517c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62887a42bc49963179b0429f6914b050dd2517c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3af5442898aadc277f95732fd40287a2d5cfc86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3af5442898aadc277f95732fd40287a2d5cfc86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3af5442898aadc277f95732fd40287a2d5cfc86"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "80d01ad526da51c5f42202242e51818144ebc514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -1,3 +1,18 @@\n+2019-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90738\n+\tRevert\n+\t2019-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Get original\n+\tfull reference tree and record in ref->ref.\n+\t(vn_reference_lookup_3): Pass in original ref to\n+\tao_ref_init_from_vn_reference.\n+\t(vn_reference_lookup): Likewise.\n+\t* tree-ssa-sccvn.h (ao_ref_init_from_vn_reference): Adjust prototype.\n+\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n+\tHandle non-decl bases in the original reference.\n+\n 2019-06-04  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::add_item_to_class): Count"}, {"sha": "554bd22a66ece7c4caa95812f9295efad2b52d24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -1,3 +1,13 @@\n+2019-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90738\n+\t* gcc.dg/torture/pr90738.c: New testcase.\n+\n+\tRevert\n+\t2019-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/alias-access-path-1.c: Scan fre1.\n+\n 2019-06-04  Martin Liska  <mliska@suse.cz>\n \n \t* c-c++-common/goacc/acc-icf.c: Change scanned pattern."}, {"sha": "b457dd51c688b7b97c0f4642906f380f2864fccd", "filename": "gcc/testsuite/gcc.dg/torture/pr90738.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90738.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90738.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90738.c?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+int __attribute__((noipa,noinline))\n+foo (int i)\n+{\n+  int a[2];\n+  a[1] = 1;\n+  int j = a[1];\n+  int *p = &a[0];\n+  p[i] = 0;\n+  return a[j];\n+}\n+\n+int\n+main()\n+{\n+  if (foo (1) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "264f72aff0a749768d26773de4f5448baae9b30d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-1.c?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-fre1 -fno-tree-sra\" } */\n-\n+/* { dg-options \"-O2 -fdump-tree-fre3 -fno-tree-sra\" } */\n struct foo\n {\n   int val;\n@@ -19,4 +18,4 @@ test ()\n   return barptr->val2;\n }\n \n-/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre1\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 123\" 1 \"fre3\"} } */"}, {"sha": "429288b6ca523a7ed09267e651e3a35d8d53479f", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -1013,8 +1013,7 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n     }\n   if (TREE_CODE (ref1) == MEM_REF)\n     {\n-      if (!integer_zerop (TREE_OPERAND (ref1, 1))\n-\t  || TREE_CODE (TREE_OPERAND (ref1, 0)) != ADDR_EXPR)\n+      if (!integer_zerop (TREE_OPERAND (ref1, 1)))\n \treturn false;\n       ref1 = TREE_OPERAND (TREE_OPERAND (ref1, 0), 0);\n     }\n@@ -1027,8 +1026,7 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n     }\n   if (TREE_CODE (ref2) == MEM_REF)\n     {\n-      if (!integer_zerop (TREE_OPERAND (ref2, 1))\n-\t  || TREE_CODE (TREE_OPERAND (ref2, 0)) != ADDR_EXPR)\n+      if (!integer_zerop (TREE_OPERAND (ref2, 1)))\n \treturn false;\n       ref2 = TREE_OPERAND (TREE_OPERAND (ref2, 0), 0);\n     }"}, {"sha": "b4f626000dd01c759c4f11180c4029cd2a6910ff", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -995,7 +995,7 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n bool\n ao_ref_init_from_vn_reference (ao_ref *ref,\n \t\t\t       alias_set_type set, tree type,\n-\t\t\t       vec<vn_reference_op_s> ops, tree orig_ref)\n+\t\t\t       vec<vn_reference_op_s> ops)\n {\n   vn_reference_op_t op;\n   unsigned i;\n@@ -1149,7 +1149,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n   if (base == NULL_TREE)\n     return false;\n \n-  ref->ref = orig_ref;\n+  ref->ref = NULL_TREE;\n   ref->base = base;\n   ref->ref_alias_set = set;\n   if (base_alias_set != -1)\n@@ -1976,8 +1976,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t{\n \t  lhs_ref_ok = ao_ref_init_from_vn_reference (&lhs_ref,\n \t\t\t\t\t\t      get_alias_set (lhs),\n-\t\t\t\t\t\t      TREE_TYPE (lhs), lhs_ops,\n-\t\t\t\t\t\t      lhs);\n+\t\t\t\t\t\t      TREE_TYPE (lhs), lhs_ops);\n \t  if (lhs_ref_ok\n \t      && !refs_may_alias_p_1 (ref, &lhs_ref, true))\n \t    {\n@@ -2719,7 +2718,7 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n          Otherwise preserve the full reference for advanced TBAA.  */\n       if (!valuezied_anything\n \t  || !ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type,\n-\t\t\t\t\t     vr1.operands, op))\n+\t\t\t\t\t     vr1.operands))\n \tao_ref_init (&r, op);\n       if (! tbaa_p)\n \tr.ref_alias_set = r.base_alias_set = 0;"}, {"sha": "bd661bc651c43ce75ed0ca2604f1026a04cf99a5", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62887a42bc49963179b0429f6914b050dd2517c/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=d62887a42bc49963179b0429f6914b050dd2517c", "patch": "@@ -229,7 +229,7 @@ vn_nary_op_t vn_nary_op_insert (tree, tree);\n vn_nary_op_t vn_nary_op_insert_pieces (unsigned int, enum tree_code,\n \t\t\t\t       tree, tree *, tree, unsigned int);\n bool ao_ref_init_from_vn_reference (ao_ref *, alias_set_type, tree,\n-\t\t\t\t    vec<vn_reference_op_s>, tree = NULL_TREE);\n+\t\t\t\t    vec<vn_reference_op_s> );\n vec<vn_reference_op_s> vn_reference_operands_for_lookup (tree);\n tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t vec<vn_reference_op_s> ,"}]}