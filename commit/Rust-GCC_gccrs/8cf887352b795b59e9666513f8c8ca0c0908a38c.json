{"sha": "8cf887352b795b59e9666513f8c8ca0c0908a38c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmODg3MzUyYjc5NWI1OWU5NjY2NTEzZjhjOGNhMGMwOTA4YTM4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-07-21T02:28:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-07-21T02:28:03Z"}, "message": "re PR preprocessor/57620 (Phantom terminator confuses raw string literal parsing.)\n\n\tPR preprocessor/57620\n\t* lex.c (lex_raw_string): Undo phase1 and phase2 transformations\n\tbetween R\" and final \" rather than only in between R\"del( and )del\".\n\n\t* c-c++-common/raw-string-2.c (s12, u12, U12, L12): Remove.\n\t(main): Don't test {s,u,U,L}12.\n\t* c-c++-common/raw-string-13.c: New test.\n\t* c-c++-common/raw-string-14.c: New test.\n\t* c-c++-common/raw-string-15.c: New test.\n\t* c-c++-common/raw-string-16.c: New test.\n\nFrom-SVN: r201091", "tree": {"sha": "6ed6396fa7b067df8a3ff310a4f33ede51228e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed6396fa7b067df8a3ff310a4f33ede51228e59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf887352b795b59e9666513f8c8ca0c0908a38c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf887352b795b59e9666513f8c8ca0c0908a38c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf887352b795b59e9666513f8c8ca0c0908a38c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf887352b795b59e9666513f8c8ca0c0908a38c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1d6f2a23f5d336b13d7d1a2a5306ec785cdbd74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d6f2a23f5d336b13d7d1a2a5306ec785cdbd74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d6f2a23f5d336b13d7d1a2a5306ec785cdbd74"}], "stats": {"total": 835, "additions": 750, "deletions": 85}, "files": [{"sha": "2787d67b17c48778748c8f4bb964471a180e3801", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -1,3 +1,13 @@\n+2013-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/57620\n+\t* c-c++-common/raw-string-2.c (s12, u12, U12, L12): Remove.\n+\t(main): Don't test {s,u,U,L}12.\n+\t* c-c++-common/raw-string-13.c: New test.\n+\t* c-c++-common/raw-string-14.c: New test.\n+\t* c-c++-common/raw-string-15.c: New test.\n+\t* c-c++-common/raw-string-16.c: New test.\n+\n 2013-07-20  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vabs_intrinsic_1.c: New file."}, {"sha": "1b37405cee9cfd7e7a6e3530d9667f7e8acb85a4", "filename": "gcc/testsuite/c-c++-common/raw-string-13.c", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-13.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -0,0 +1,272 @@\n+// PR preprocessor/57620\n+// { dg-do run }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat -trigraphs\" { target c } }\n+// { dg-options \"-std=c++11\" { target c++ } }\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+\n+typedef __CHAR16_TYPE__\tchar16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+#define R\n+#define u\n+#define uR\n+#define U\n+#define UR\n+#define u8\n+#define u8R\n+#define L\n+#define LR\n+\n+const char s00[] = R\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char s01[] = R\"a(\n+)\\\n+a\"\n+)a\";\n+const char s02[] = R\"a(\n+)a\\\n+\"\n+)a\";\n+const char s03[] = R\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char s04[] = R\"a??/(x)a??/\";\n+const char s05[] = R\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char s06[] = R\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char s07[] = R\"abc(??)\\\n+abc\";)abc\";\n+const char s08[] = R\"def(de)\\\n+def\";)def\";\n+const char s09[] = R\"a(??)\\\n+a\"\n+)a\";\n+const char s10[] = R\"a(??)a\\\n+\"\n+)a\";\n+const char s11[] = R\"ab(??)a\\\n+b\"\n+)ab\";\n+const char s12[] = R\"a#(a#)a??=)a#\";\n+const char s13[] = R\"a#(??)a??=??)a#\";\n+const char s14[] = R\"??/(x)??/\n+\";)??/\";\n+const char s15[] = R\"??/(??)??/\n+\";)??/\";\n+const char s16[] = R\"??(??)??\";\n+const char s17[] = R\"?(?)??)?\";\n+const char s18[] = R\"??(??)??)??)??\";\n+\n+const char16_t u00[] = uR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char16_t u01[] = uR\"a(\n+)\\\n+a\"\n+)a\";\n+const char16_t u02[] = uR\"a(\n+)a\\\n+\"\n+)a\";\n+const char16_t u03[] = uR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char16_t u04[] = uR\"a??/(x)a??/\";\n+const char16_t u05[] = uR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char16_t u06[] = uR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char16_t u07[] = uR\"abc(??)\\\n+abc\";)abc\";\n+const char16_t u08[] = uR\"def(de)\\\n+def\";)def\";\n+const char16_t u09[] = uR\"a(??)\\\n+a\"\n+)a\";\n+const char16_t u10[] = uR\"a(??)a\\\n+\"\n+)a\";\n+const char16_t u11[] = uR\"ab(??)a\\\n+b\"\n+)ab\";\n+const char16_t u12[] = uR\"a#(a#)a??=)a#\";\n+const char16_t u13[] = uR\"a#(??)a??=??)a#\";\n+const char16_t u14[] = uR\"??/(x)??/\n+\";)??/\";\n+const char16_t u15[] = uR\"??/(??)??/\n+\";)??/\";\n+const char16_t u16[] = uR\"??(??)??\";\n+const char16_t u17[] = uR\"?(?)??)?\";\n+const char16_t u18[] = uR\"??(??)??)??)??\";\n+\n+const char32_t U00[] = UR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char32_t U01[] = UR\"a(\n+)\\\n+a\"\n+)a\";\n+const char32_t U02[] = UR\"a(\n+)a\\\n+\"\n+)a\";\n+const char32_t U03[] = UR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char32_t U04[] = UR\"a??/(x)a??/\";\n+const char32_t U05[] = UR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char32_t U06[] = UR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char32_t U07[] = UR\"abc(??)\\\n+abc\";)abc\";\n+const char32_t U08[] = UR\"def(de)\\\n+def\";)def\";\n+const char32_t U09[] = UR\"a(??)\\\n+a\"\n+)a\";\n+const char32_t U10[] = UR\"a(??)a\\\n+\"\n+)a\";\n+const char32_t U11[] = UR\"ab(??)a\\\n+b\"\n+)ab\";\n+const char32_t U12[] = UR\"a#(a#)a??=)a#\";\n+const char32_t U13[] = UR\"a#(??)a??=??)a#\";\n+const char32_t U14[] = UR\"??/(x)??/\n+\";)??/\";\n+const char32_t U15[] = UR\"??/(??)??/\n+\";)??/\";\n+const char32_t U16[] = UR\"??(??)??\";\n+const char32_t U17[] = UR\"?(?)??)?\";\n+const char32_t U18[] = UR\"??(??)??)??)??\";\n+\n+const wchar_t L00[] = LR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const wchar_t L01[] = LR\"a(\n+)\\\n+a\"\n+)a\";\n+const wchar_t L02[] = LR\"a(\n+)a\\\n+\"\n+)a\";\n+const wchar_t L03[] = LR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const wchar_t L04[] = LR\"a??/(x)a??/\";\n+const wchar_t L05[] = LR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const wchar_t L06[] = LR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const wchar_t L07[] = LR\"abc(??)\\\n+abc\";)abc\";\n+const wchar_t L08[] = LR\"def(de)\\\n+def\";)def\";\n+const wchar_t L09[] = LR\"a(??)\\\n+a\"\n+)a\";\n+const wchar_t L10[] = LR\"a(??)a\\\n+\"\n+)a\";\n+const wchar_t L11[] = LR\"ab(??)a\\\n+b\"\n+)ab\";\n+const wchar_t L12[] = LR\"a#(a#)a??=)a#\";\n+const wchar_t L13[] = LR\"a#(??)a??=??)a#\";\n+const wchar_t L14[] = LR\"??/(x)??/\n+\";)??/\";\n+const wchar_t L15[] = LR\"??/(??)??/\n+\";)??/\";\n+const wchar_t L16[] = LR\"??(??)??\";\n+const wchar_t L17[] = LR\"?(?)??)?\";\n+const wchar_t L18[] = LR\"??(??)??)??)??\";\n+\n+int\n+main (void)\n+{\n+#define TEST(str, val) \\\n+  if (sizeof (str) != sizeof (val) \\\n+      || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n+    __builtin_abort ()\n+  TEST (s00, \"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (s01, \"\\n)\\\\\\na\\\"\\n\");\n+  TEST (s02, \"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (s03, \"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (s04, \"x\");\n+  TEST (s05, \"abc\");\n+  TEST (s06, \"abc\");\n+  TEST (s07, \"??\"\")\\\\\\nabc\\\";\");\n+  TEST (s08, \"de)\\\\\\ndef\\\";\");\n+  TEST (s09, \"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (s10, \"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (s11, \"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (s12, \"a#)a??\"\"=\");\n+  TEST (s13, \"??\"\")a??\"\"=??\");\n+  TEST (s14, \"x)??\"\"/\\n\\\";\");\n+  TEST (s15, \"??\"\")??\"\"/\\n\\\";\");\n+  TEST (s16, \"??\");\n+  TEST (s17, \"?)??\");\n+  TEST (s18, \"??\"\")??\"\")??\");\n+  TEST (u00, u\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (u01, u\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (u02, u\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (u03, u\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (u04, u\"x\");\n+  TEST (u05, u\"abc\");\n+  TEST (u06, u\"abc\");\n+  TEST (u07, u\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (u08, u\"de)\\\\\\ndef\\\";\");\n+  TEST (u09, u\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (u10, u\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (u11, u\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (u12, u\"a#)a??\"\"=\");\n+  TEST (u13, u\"??\"\")a??\"\"=??\");\n+  TEST (u14, u\"x)??\"\"/\\n\\\";\");\n+  TEST (u15, u\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (u16, u\"??\");\n+  TEST (u17, u\"?)??\");\n+  TEST (u18, u\"??\"\")??\"\")??\");\n+  TEST (U00, U\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (U01, U\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (U02, U\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (U03, U\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (U04, U\"x\");\n+  TEST (U05, U\"abc\");\n+  TEST (U06, U\"abc\");\n+  TEST (U07, U\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (U08, U\"de)\\\\\\ndef\\\";\");\n+  TEST (U09, U\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (U10, U\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (U11, U\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (U12, U\"a#)a??\"\"=\");\n+  TEST (U13, U\"??\"\")a??\"\"=??\");\n+  TEST (U14, U\"x)??\"\"/\\n\\\";\");\n+  TEST (U15, U\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (U16, U\"??\");\n+  TEST (U17, U\"?)??\");\n+  TEST (U18, U\"??\"\")??\"\")??\");\n+  TEST (L00, L\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (L01, L\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (L02, L\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (L03, L\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (L04, L\"x\");\n+  TEST (L05, L\"abc\");\n+  TEST (L06, L\"abc\");\n+  TEST (L07, L\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (L08, L\"de)\\\\\\ndef\\\";\");\n+  TEST (L09, L\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (L10, L\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (L11, L\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (L12, L\"a#)a??\"\"=\");\n+  TEST (L13, L\"??\"\")a??\"\"=??\");\n+  TEST (L14, L\"x)??\"\"/\\n\\\";\");\n+  TEST (L15, L\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (L16, L\"??\");\n+  TEST (L17, L\"?)??\");\n+  TEST (L18, L\"??\"\")??\"\")??\");\n+  return 0;\n+}"}, {"sha": "2eeb7258f49b23f184bcdfe02baa9f0ccdd8805a", "filename": "gcc/testsuite/c-c++-common/raw-string-14.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-14.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -0,0 +1,39 @@\n+// PR preprocessor/57620\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99 -trigraphs\" { target c } }\n+// { dg-options \"-std=c++11\" { target c++ } }\n+\n+const void *s0 = R\"abc\\\n+def()abcdef\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 6 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 6 }\n+const void *s1 = R\"??/\n+()??/\";\n+\t// { dg-error \"invalid new-line\" \"invalid\" { target *-*-* } 10 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 10 }\n+\t// { dg-warning \"missing terminating\" \"missing\" { target *-*-* } 10 }\n+\t// { dg-error \"missing terminating\" \"missing\" { target *-*-* } 10 }\n+const void *s2 = R\"abcdefghijklmn??/(a)abcdefghijklmn???\";\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 16 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 16 }\n+\t// { dg-error \"expected\" \"expected\" { target *-*-* } 16 }\n+const void *s3 = R\"abcdefghijklmno??/(a)abcdefghijklmno???\";\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 20 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 20 }\n+const void *s4 = R\"abcdefghijklmnop??=(a)abcdefghijklmnop??=\";\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 23 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 23 }\n+const void *s5 = R\"abc\\\n+()abcdef\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 26 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 26 }\n+const void *s6 = R\"\\\n+()\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 30 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 30 }\n+const void *s7 = R\"\\\n+a()a\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 34 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 34 }\n+\n+int main () {}"}, {"sha": "9dfdaabd87df9af037f76bcd1295d9d19e2badad", "filename": "gcc/testsuite/c-c++-common/raw-string-15.c", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-15.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -0,0 +1,272 @@\n+// PR preprocessor/57620\n+// { dg-do run }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat -Wtrigraphs\" { target c } }\n+// { dg-options \"-std=gnu++11 -Wtrigraphs\" { target c++ } }\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+\n+typedef __CHAR16_TYPE__\tchar16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n+\n+#define R\n+#define u\n+#define uR\n+#define U\n+#define UR\n+#define u8\n+#define u8R\n+#define L\n+#define LR\n+\n+const char s00[] = R\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char s01[] = R\"a(\n+)\\\n+a\"\n+)a\";\n+const char s02[] = R\"a(\n+)a\\\n+\"\n+)a\";\n+const char s03[] = R\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char s04[] = R\"a??/(x)a??/\";\n+const char s05[] = R\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char s06[] = R\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char s07[] = R\"abc(??)\\\n+abc\";)abc\";\n+const char s08[] = R\"def(de)\\\n+def\";)def\";\n+const char s09[] = R\"a(??)\\\n+a\"\n+)a\";\n+const char s10[] = R\"a(??)a\\\n+\"\n+)a\";\n+const char s11[] = R\"ab(??)a\\\n+b\"\n+)ab\";\n+const char s12[] = R\"a#(a#)a??=)a#\";\n+const char s13[] = R\"a#(??)a??=??)a#\";\n+const char s14[] = R\"??/(x)??/\n+\";)??/\";\n+const char s15[] = R\"??/(??)??/\n+\";)??/\";\n+const char s16[] = R\"??(??)??\";\n+const char s17[] = R\"?(?)??)?\";\n+const char s18[] = R\"??(??)??)??)??\";\n+\n+const char16_t u00[] = uR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char16_t u01[] = uR\"a(\n+)\\\n+a\"\n+)a\";\n+const char16_t u02[] = uR\"a(\n+)a\\\n+\"\n+)a\";\n+const char16_t u03[] = uR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char16_t u04[] = uR\"a??/(x)a??/\";\n+const char16_t u05[] = uR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char16_t u06[] = uR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char16_t u07[] = uR\"abc(??)\\\n+abc\";)abc\";\n+const char16_t u08[] = uR\"def(de)\\\n+def\";)def\";\n+const char16_t u09[] = uR\"a(??)\\\n+a\"\n+)a\";\n+const char16_t u10[] = uR\"a(??)a\\\n+\"\n+)a\";\n+const char16_t u11[] = uR\"ab(??)a\\\n+b\"\n+)ab\";\n+const char16_t u12[] = uR\"a#(a#)a??=)a#\";\n+const char16_t u13[] = uR\"a#(??)a??=??)a#\";\n+const char16_t u14[] = uR\"??/(x)??/\n+\";)??/\";\n+const char16_t u15[] = uR\"??/(??)??/\n+\";)??/\";\n+const char16_t u16[] = uR\"??(??)??\";\n+const char16_t u17[] = uR\"?(?)??)?\";\n+const char16_t u18[] = uR\"??(??)??)??)??\";\n+\n+const char32_t U00[] = UR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const char32_t U01[] = UR\"a(\n+)\\\n+a\"\n+)a\";\n+const char32_t U02[] = UR\"a(\n+)a\\\n+\"\n+)a\";\n+const char32_t U03[] = UR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const char32_t U04[] = UR\"a??/(x)a??/\";\n+const char32_t U05[] = UR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const char32_t U06[] = UR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const char32_t U07[] = UR\"abc(??)\\\n+abc\";)abc\";\n+const char32_t U08[] = UR\"def(de)\\\n+def\";)def\";\n+const char32_t U09[] = UR\"a(??)\\\n+a\"\n+)a\";\n+const char32_t U10[] = UR\"a(??)a\\\n+\"\n+)a\";\n+const char32_t U11[] = UR\"ab(??)a\\\n+b\"\n+)ab\";\n+const char32_t U12[] = UR\"a#(a#)a??=)a#\";\n+const char32_t U13[] = UR\"a#(??)a??=??)a#\";\n+const char32_t U14[] = UR\"??/(x)??/\n+\";)??/\";\n+const char32_t U15[] = UR\"??/(??)??/\n+\";)??/\";\n+const char32_t U16[] = UR\"??(??)??\";\n+const char32_t U17[] = UR\"?(?)??)?\";\n+const char32_t U18[] = UR\"??(??)??)??)??\";\n+\n+const wchar_t L00[] = LR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n+)??=??\";\n+const wchar_t L01[] = LR\"a(\n+)\\\n+a\"\n+)a\";\n+const wchar_t L02[] = LR\"a(\n+)a\\\n+\"\n+)a\";\n+const wchar_t L03[] = LR\"ab(\n+)a\\\n+b\"\n+)ab\";\n+const wchar_t L04[] = LR\"a??/(x)a??/\";\n+const wchar_t L05[] = LR\"abcdefghijklmn??(abc)abcdefghijklmn??\";\n+const wchar_t L06[] = LR\"abcdefghijklm??/(abc)abcdefghijklm??/\";\n+const wchar_t L07[] = LR\"abc(??)\\\n+abc\";)abc\";\n+const wchar_t L08[] = LR\"def(de)\\\n+def\";)def\";\n+const wchar_t L09[] = LR\"a(??)\\\n+a\"\n+)a\";\n+const wchar_t L10[] = LR\"a(??)a\\\n+\"\n+)a\";\n+const wchar_t L11[] = LR\"ab(??)a\\\n+b\"\n+)ab\";\n+const wchar_t L12[] = LR\"a#(a#)a??=)a#\";\n+const wchar_t L13[] = LR\"a#(??)a??=??)a#\";\n+const wchar_t L14[] = LR\"??/(x)??/\n+\";)??/\";\n+const wchar_t L15[] = LR\"??/(??)??/\n+\";)??/\";\n+const wchar_t L16[] = LR\"??(??)??\";\n+const wchar_t L17[] = LR\"?(?)??)?\";\n+const wchar_t L18[] = LR\"??(??)??)??)??\";\n+\n+int\n+main (void)\n+{\n+#define TEST(str, val) \\\n+  if (sizeof (str) != sizeof (val) \\\n+      || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n+    __builtin_abort ()\n+  TEST (s00, \"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (s01, \"\\n)\\\\\\na\\\"\\n\");\n+  TEST (s02, \"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (s03, \"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (s04, \"x\");\n+  TEST (s05, \"abc\");\n+  TEST (s06, \"abc\");\n+  TEST (s07, \"??\"\")\\\\\\nabc\\\";\");\n+  TEST (s08, \"de)\\\\\\ndef\\\";\");\n+  TEST (s09, \"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (s10, \"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (s11, \"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (s12, \"a#)a??\"\"=\");\n+  TEST (s13, \"??\"\")a??\"\"=??\");\n+  TEST (s14, \"x)??\"\"/\\n\\\";\");\n+  TEST (s15, \"??\"\")??\"\"/\\n\\\";\");\n+  TEST (s16, \"??\");\n+  TEST (s17, \"?)??\");\n+  TEST (s18, \"??\"\")??\"\")??\");\n+  TEST (u00, u\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (u01, u\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (u02, u\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (u03, u\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (u04, u\"x\");\n+  TEST (u05, u\"abc\");\n+  TEST (u06, u\"abc\");\n+  TEST (u07, u\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (u08, u\"de)\\\\\\ndef\\\";\");\n+  TEST (u09, u\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (u10, u\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (u11, u\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (u12, u\"a#)a??\"\"=\");\n+  TEST (u13, u\"??\"\")a??\"\"=??\");\n+  TEST (u14, u\"x)??\"\"/\\n\\\";\");\n+  TEST (u15, u\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (u16, u\"??\");\n+  TEST (u17, u\"?)??\");\n+  TEST (u18, u\"??\"\")??\"\")??\");\n+  TEST (U00, U\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (U01, U\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (U02, U\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (U03, U\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (U04, U\"x\");\n+  TEST (U05, U\"abc\");\n+  TEST (U06, U\"abc\");\n+  TEST (U07, U\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (U08, U\"de)\\\\\\ndef\\\";\");\n+  TEST (U09, U\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (U10, U\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (U11, U\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (U12, U\"a#)a??\"\"=\");\n+  TEST (U13, U\"??\"\")a??\"\"=??\");\n+  TEST (U14, U\"x)??\"\"/\\n\\\";\");\n+  TEST (U15, U\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (U16, U\"??\");\n+  TEST (U17, U\"?)??\");\n+  TEST (U18, U\"??\"\")??\"\")??\");\n+  TEST (L00, L\"??\"\"<??\"\">??\"\")??\"\"'??\"\"!??\"\"-\\\\\\n(a)#[{}]^|~\\\";\\n\");\n+  TEST (L01, L\"\\n)\\\\\\na\\\"\\n\");\n+  TEST (L02, L\"\\n)a\\\\\\n\\\"\\n\");\n+  TEST (L03, L\"\\n)a\\\\\\nb\\\"\\n\");\n+  TEST (L04, L\"x\");\n+  TEST (L05, L\"abc\");\n+  TEST (L06, L\"abc\");\n+  TEST (L07, L\"??\"\")\\\\\\nabc\\\";\");\n+  TEST (L08, L\"de)\\\\\\ndef\\\";\");\n+  TEST (L09, L\"??\"\")\\\\\\na\\\"\\n\");\n+  TEST (L10, L\"??\"\")a\\\\\\n\\\"\\n\");\n+  TEST (L11, L\"??\"\")a\\\\\\nb\\\"\\n\");\n+  TEST (L12, L\"a#)a??\"\"=\");\n+  TEST (L13, L\"??\"\")a??\"\"=??\");\n+  TEST (L14, L\"x)??\"\"/\\n\\\";\");\n+  TEST (L15, L\"??\"\")??\"\"/\\n\\\";\");\n+  TEST (L16, L\"??\");\n+  TEST (L17, L\"?)??\");\n+  TEST (L18, L\"??\"\")??\"\")??\");\n+  return 0;\n+}"}, {"sha": "c277fdaffc5de0e366ca86416c415fc86d9d47cf", "filename": "gcc/testsuite/c-c++-common/raw-string-16.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-16.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -0,0 +1,33 @@\n+// PR preprocessor/57620\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99 -Wtrigraphs\" { target c } }\n+// { dg-options \"-std=gnu++11 -Wtrigraphs\" { target c++ } }\n+\n+const void *s0 = R\"abc\\\n+def()abcdef\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 6 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 6 }\n+const void *s1 = R\"abcdefghijklmn??/(a)abcdefghijklmn???\";\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 10 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 10 }\n+\n+const void *s2 = R\"abcdefghijklmno??/(a)abcdefghijklmno???\";\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 14 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 14 }\n+const void *s3 = R\"abcdefghijklmnop??=(a)abcdefghijklmnop??=?\"; // { dg-warning \"trigraph ..= ignored\" }\n+\t// { dg-error \"raw string delimiter longer\" \"longer\" { target *-*-* } 17 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 17 }\n+const void *s4 = R\"abc\\\n+()abcdef\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 20 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 20 }\n+const void *s5 = R\"\\\n+()\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 24 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 24 }\n+const void *s6 = R\"\\\n+a()a\";\n+\t// { dg-error \"invalid character\" \"invalid\" { target *-*-* } 28 }\n+\t// { dg-error \"stray\" \"stray\" { target *-*-* } 28 }\n+\n+int main () {}"}, {"sha": "6f2e37d47cabbffc86d116a82465c989510daab6", "filename": "gcc/testsuite/c-c++-common/raw-string-2.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -32,8 +32,6 @@ const char s08[] = u8R\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char s09[] = u8R\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u8\"(b)\";\n const char s10[] = u8\"(a)\" u8R\"0123456789abcdef(b)0123456789abcdef\";\n const char s11[] = u8R\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" u8R\"w(b)w\";\n-const char s12[] = R\"??=??(??<??>??)??'??!??-\\\n-(a)#[{}]^|~\";\n \n const char16_t u03[] = R\"-(a)-\" u\"(b)\";\n const char16_t u04[] = \"(a)\" uR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -44,8 +42,6 @@ const char16_t u08[] = uR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char16_t u09[] = uR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u\"(b)\";\n const char16_t u10[] = u\"(a)\" uR\"0123456789abcdef(b)0123456789abcdef\";\n const char16_t u11[] = uR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" uR\"w(b)w\";\n-const char16_t u12[] = uR\"??=??(??<??>??)??'??!??-\\\n-(a)#[{}]^|~\";\n \n const char32_t U03[] = R\"-(a)-\" U\"(b)\";\n const char32_t U04[] = \"(a)\" UR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -56,8 +52,6 @@ const char32_t U08[] = UR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char32_t U09[] = UR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" U\"(b)\";\n const char32_t U10[] = U\"(a)\" UR\"0123456789abcdef(b)0123456789abcdef\";\n const char32_t U11[] = UR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" UR\"w(b)w\";\n-const char32_t U12[] = UR\"??=??(??<??>??)??'??!??-\\\n-(a)#[{}]^|~\";\n \n const wchar_t L03[] = R\"-(a)-\" L\"(b)\";\n const wchar_t L04[] = \"(a)\" LR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -68,8 +62,6 @@ const wchar_t L08[] = LR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const wchar_t L09[] = LR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" L\"(b)\";\n const wchar_t L10[] = L\"(a)\" LR\"0123456789abcdef(b)0123456789abcdef\";\n const wchar_t L11[] = LR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" LR\"w(b)w\";\n-const wchar_t L12[] = LR\"??=??(??<??>??)??'??!??-\\\n-(a)#[{}]^|~\";\n \n int\n main (void)\n@@ -90,7 +82,6 @@ main (void)\n   TEST (s09, \"a(b)\");\n   TEST (s10, \"(a)b\");\n   TEST (s11, \"ab\");\n-  TEST (s12, \"a\");\n   TEST (u03, u\"a(b)\");\n   TEST (u04, u\"(a)b\");\n   TEST (u05, u\"ab\");\n@@ -100,7 +91,6 @@ main (void)\n   TEST (u09, u\"a(b)\");\n   TEST (u10, u\"(a)b\");\n   TEST (u11, u\"ab\");\n-  TEST (u12, u\"a\");\n   TEST (U03, U\"a(b)\");\n   TEST (U04, U\"(a)b\");\n   TEST (U05, U\"ab\");\n@@ -110,7 +100,6 @@ main (void)\n   TEST (U09, U\"a(b)\");\n   TEST (U10, U\"(a)b\");\n   TEST (U11, U\"ab\");\n-  TEST (U12, U\"a\");\n   TEST (L03, L\"a(b)\");\n   TEST (L04, L\"(a)b\");\n   TEST (L05, L\"ab\");\n@@ -120,6 +109,5 @@ main (void)\n   TEST (L09, L\"a(b)\");\n   TEST (L10, L\"(a)b\");\n   TEST (L11, L\"ab\");\n-  TEST (L12, L\"a\");\n   return 0;\n }"}, {"sha": "dd107aec089079ee89ff4b1e541a6361c0a7191e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -1,3 +1,9 @@\n+2013-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/57620\n+\t* lex.c (lex_raw_string): Undo phase1 and phase2 transformations\n+\tbetween R\" and final \" rather than only in between R\"del( and )del\".\n+\n 2013-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/57824"}, {"sha": "ed794d5b0044bebe77b3bac0582bc16c5e3411ee", "filename": "libcpp/lex.c", "status": "modified", "additions": 118, "deletions": 73, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf887352b795b59e9666513f8c8ca0c0908a38c/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf887352b795b59e9666513f8c8ca0c0908a38c/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=8cf887352b795b59e9666513f8c8ca0c0908a38c", "patch": "@@ -1373,80 +1373,52 @@ static void\n lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t\tconst uchar *cur)\n {\n-  const uchar *raw_prefix;\n-  unsigned int raw_prefix_len = 0;\n+  uchar raw_prefix[17];\n+  uchar temp_buffer[18];\n+  const uchar *orig_base;\n+  unsigned int raw_prefix_len = 0, raw_suffix_len = 0;\n+  enum raw_str_phase { RAW_STR_PREFIX, RAW_STR, RAW_STR_SUFFIX };\n+  raw_str_phase phase = RAW_STR_PREFIX;\n   enum cpp_ttype type;\n   size_t total_len = 0;\n+  /* Index into temp_buffer during phases other than RAW_STR,\n+     during RAW_STR phase 17 to tell BUF_APPEND that nothing should\n+     be appended to temp_buffer.  */\n+  size_t temp_buffer_len = 0;\n   _cpp_buff *first_buff = NULL, *last_buff = NULL;\n+  size_t raw_prefix_start;\n   _cpp_line_note *note = &pfile->buffer->notes[pfile->buffer->cur_note];\n \n   type = (*base == 'L' ? CPP_WSTRING :\n \t  *base == 'U' ? CPP_STRING32 :\n \t  *base == 'u' ? (base[1] == '8' ? CPP_UTF8STRING : CPP_STRING16)\n \t  : CPP_STRING);\n \n-  raw_prefix = cur + 1;\n-  while (raw_prefix_len < 16)\n-    {\n-      switch (raw_prefix[raw_prefix_len])\n-\t{\n-\tcase ' ': case '(': case ')': case '\\\\': case '\\t':\n-\tcase '\\v': case '\\f': case '\\n': default:\n-\t  break;\n-\t/* Basic source charset except the above chars.  */\n-\tcase 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n-\tcase 'g': case 'h': case 'i': case 'j': case 'k': case 'l':\n-\tcase 'm': case 'n': case 'o': case 'p': case 'q': case 'r':\n-\tcase 's': case 't': case 'u': case 'v': case 'w': case 'x':\n-\tcase 'y': case 'z':\n-\tcase 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n-\tcase 'G': case 'H': case 'I': case 'J': case 'K': case 'L':\n-\tcase 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n-\tcase 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n-\tcase 'Y': case 'Z':\n-\tcase '0': case '1': case '2': case '3': case '4': case '5':\n-\tcase '6': case '7': case '8': case '9':\n-\tcase '_': case '{': case '}': case '#': case '[': case ']':\n-\tcase '<': case '>': case '%': case ':': case ';': case '.':\n-\tcase '?': case '*': case '+': case '-': case '/': case '^':\n-\tcase '&': case '|': case '~': case '!': case '=': case ',':\n-\tcase '\"': case '\\'':\n-\t  raw_prefix_len++;\n-\t  continue;\n-\t}\n-      break;\n-    }\n-\n-  if (raw_prefix[raw_prefix_len] != '(')\n-    {\n-      int col = CPP_BUF_COLUMN (pfile->buffer, raw_prefix + raw_prefix_len)\n-\t\t+ 1;\n-      if (raw_prefix_len == 16)\n-\tcpp_error_with_line (pfile, CPP_DL_ERROR, token->src_loc, col,\n-\t\t\t     \"raw string delimiter longer than 16 characters\");\n-      else\n-\tcpp_error_with_line (pfile, CPP_DL_ERROR, token->src_loc, col,\n-\t\t\t     \"invalid character '%c' in raw string delimiter\",\n-\t\t\t     (int) raw_prefix[raw_prefix_len]);\n-      pfile->buffer->cur = raw_prefix - 1;\n-      create_literal (pfile, token, base, raw_prefix - 1 - base, CPP_OTHER);\n-      return;\n-    }\n-\n-  cur = raw_prefix + raw_prefix_len + 1;\n-  for (;;)\n-    {\n #define BUF_APPEND(STR,LEN)\t\t\t\t\t\\\n       do {\t\t\t\t\t\t\t\\\n \tbufring_append (pfile, (const uchar *)(STR), (LEN),\t\\\n \t\t\t&first_buff, &last_buff);\t\t\\\n \ttotal_len += (LEN);\t\t\t\t\t\\\n+\tif (__builtin_expect (temp_buffer_len < 17, 0)\t\t\\\n+\t    && (const uchar *)(STR) != base\t\t\t\\\n+\t    && (LEN) <= 2)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    memcpy (temp_buffer + temp_buffer_len,\t\t\\\n+\t\t    (const uchar *)(STR), (LEN));\t\t\\\n+\t    temp_buffer_len += (LEN);\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n       } while (0);\n \n+  orig_base = base;\n+  ++cur;\n+  raw_prefix_start = cur - base;\n+  for (;;)\n+    {\n       cppchar_t c;\n \n       /* If we previously performed any trigraph or line splicing\n-\t transformations, undo them within the body of the raw string.  */\n+\t transformations, undo them in between the opening and closing\n+\t double quote.  */\n       while (note->pos < cur)\n \t++note;\n       for (; note->pos == cur; ++note)\n@@ -1506,23 +1478,13 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t\t      ++note;\n \t\t      goto after_backslash;\n \t\t    }\n-\t\t  /* The ) from ??) could be part of the suffix.  */\n-\t\t  else if (type == ')'\n-\t\t\t   && strncmp ((const char *) cur+1,\n-\t\t\t\t       (const char *) raw_prefix,\n-\t\t\t\t       raw_prefix_len) == 0\n-\t\t\t   && cur[raw_prefix_len+1] == '\"')\n-\t\t    {\n-\t\t      BUF_APPEND (\")\", 1);\n-\t\t      base++;\n-\t\t      cur += raw_prefix_len + 2;\n-\t\t      goto break_outer_loop;\n-\t\t    }\n \t\t  else\n \t\t    {\n \t\t      /* Skip the replacement character.  */\n \t\t      base = ++cur;\n \t\t      BUF_APPEND (&type, 1);\n+\t\t      c = type;\n+\t\t      goto check_c;\n \t\t    }\n \t\t}\n \t      else\n@@ -1531,14 +1493,98 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t    }\n \t}\n       c = *cur++;\n+      if (__builtin_expect (temp_buffer_len < 17, 0))\n+\ttemp_buffer[temp_buffer_len++] = c;\n \n-      if (c == ')'\n-\t  && strncmp ((const char *) cur, (const char *) raw_prefix,\n-\t\t      raw_prefix_len) == 0\n-\t  && cur[raw_prefix_len] == '\"')\n+     check_c:\n+      if (phase == RAW_STR_PREFIX)\n \t{\n-\t  cur += raw_prefix_len + 1;\n-\t  break;\n+\t  while (raw_prefix_len < temp_buffer_len)\n+\t    {\n+\t      raw_prefix[raw_prefix_len] = temp_buffer[raw_prefix_len];\n+\t      switch (raw_prefix[raw_prefix_len])\n+\t\t{\n+\t\tcase ' ': case '(': case ')': case '\\\\': case '\\t':\n+\t\tcase '\\v': case '\\f': case '\\n': default:\n+\t\t  break;\n+\t\t/* Basic source charset except the above chars.  */\n+\t\tcase 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n+\t\tcase 'g': case 'h': case 'i': case 'j': case 'k': case 'l':\n+\t\tcase 'm': case 'n': case 'o': case 'p': case 'q': case 'r':\n+\t\tcase 's': case 't': case 'u': case 'v': case 'w': case 'x':\n+\t\tcase 'y': case 'z':\n+\t\tcase 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n+\t\tcase 'G': case 'H': case 'I': case 'J': case 'K': case 'L':\n+\t\tcase 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n+\t\tcase 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n+\t\tcase 'Y': case 'Z':\n+\t\tcase '0': case '1': case '2': case '3': case '4': case '5':\n+\t\tcase '6': case '7': case '8': case '9':\n+\t\tcase '_': case '{': case '}': case '#': case '[': case ']':\n+\t\tcase '<': case '>': case '%': case ':': case ';': case '.':\n+\t\tcase '?': case '*': case '+': case '-': case '/': case '^':\n+\t\tcase '&': case '|': case '~': case '!': case '=': case ',':\n+\t\tcase '\"': case '\\'':\n+\t\t  if (raw_prefix_len < 16)\n+\t\t    {\n+\t\t      raw_prefix_len++;\n+\t\t      continue;\n+\t\t    }\n+\t\t  break;\n+\t\t}\n+\n+\t      if (raw_prefix[raw_prefix_len] != '(')\n+\t\t{\n+\t\t  int col = CPP_BUF_COLUMN (pfile->buffer, cur) + 1;\n+\t\t  if (raw_prefix_len == 16)\n+\t\t    cpp_error_with_line (pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t\t\t col, \"raw string delimiter longer \"\n+\t\t\t\t\t      \"than 16 characters\");\n+\t\t  else if (raw_prefix[raw_prefix_len] == '\\n')\n+\t\t    cpp_error_with_line (pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t\t\t col, \"invalid new-line in raw \"\n+\t\t\t\t\t      \"string delimiter\");\n+\t\t  else\n+\t\t    cpp_error_with_line (pfile, CPP_DL_ERROR, token->src_loc,\n+\t\t\t\t\t col, \"invalid character '%c' in \"\n+\t\t\t\t\t      \"raw string delimiter\",\n+\t\t\t\t\t (int) raw_prefix[raw_prefix_len]);\n+\t\t  pfile->buffer->cur = orig_base + raw_prefix_start - 1;\n+\t\t  create_literal (pfile, token, orig_base,\n+\t\t\t\t  raw_prefix_start - 1, CPP_OTHER);\n+\t\t  if (first_buff)\n+\t\t    _cpp_release_buff (pfile, first_buff);\n+\t\t  return;\n+\t\t}\n+\t      raw_prefix[raw_prefix_len] = '\"';\n+\t      phase = RAW_STR;\n+\t      /* Nothing should be appended to temp_buffer during\n+\t\t RAW_STR phase.  */\n+\t      temp_buffer_len = 17;\n+\t      break;\n+\t    }\n+\t  continue;\n+\t}\n+      else if (phase == RAW_STR_SUFFIX)\n+\t{\n+\t  while (raw_suffix_len <= raw_prefix_len\n+\t\t && raw_suffix_len < temp_buffer_len\n+\t\t && temp_buffer[raw_suffix_len] == raw_prefix[raw_suffix_len])\n+\t    raw_suffix_len++;\n+\t  if (raw_suffix_len > raw_prefix_len)\n+\t    break;\n+\t  if (raw_suffix_len == temp_buffer_len)\n+\t    continue;\n+\t  phase = RAW_STR;\n+\t  /* Nothing should be appended to temp_buffer during\n+\t     RAW_STR phase.  */\n+\t  temp_buffer_len = 17;\n+\t}\n+      if (c == ')')\n+\t{\n+\t  phase = RAW_STR_SUFFIX;\n+\t  raw_suffix_len = 0;\n+\t  temp_buffer_len = 0;\n \t}\n       else if (c == '\\n')\n \t{\n@@ -1579,7 +1625,6 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t  note = &pfile->buffer->notes[pfile->buffer->cur_note];\n \t}\n     }\n- break_outer_loop:\n \n   if (CPP_OPTION (pfile, user_literals))\n     {"}]}