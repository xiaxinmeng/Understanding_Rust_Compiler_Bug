{"sha": "0816ebdd9b37e9d5c079cab5d527551ea925bc94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxNmViZGQ5YjM3ZTlkNWMwNzljYWI1ZDUyNzU1MWVhOTI1YmM5NA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-12T17:54:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-12T17:54:46Z"}, "message": "Warning fixes:\n\n        * bad.c (ffebad_finish): Change type of variable `c' to unsigned\n        char, change type of variable `s' to unsigned char *.\n        * com.c (ffecom_symbol_null_): Add missing initializers.\n        * fini.c (MAXNAMELEN): Undef it before defining.\n        * implic.c (ffeimplic_lookup_): Change type of parameter `c' to\n        unsigned char.\n        * intrin.c (ffeintrin_init_0): Cast the argument of ctype macros\n        to (unsigned char).\n        * lex.c (ffelex_splice_tokens): Change type of variable `p' to\n        unsigned char *.\n        (ffelex_token_name_from_names): Cast the argument of\n        `ffelex_is_firstnamechar' to (unsigned char).\n        (ffelex_token_names_from_names): Likewise.\n        (ffelex_token_new_name): Likewise.\n        (ffelex_token_new_names): Likewise.\n        * malloc.c (malloc_root_): Add missing initializer.\n        * stb.c (ffestb_do): Change type of variable `p' to unsigned char *.\n        (ffestb_else) Likewise.\n        (ffestb_else3_) Likewise.\n        (ffestb_endxyz) Likewise.\n        (ffestb_goto) Likewise.\n        (ffestb_let) Likewise.\n        (ffestb_varlist) Likewise.\n        (ffestb_R522) Likewise.\n        (ffestb_R528) Likewise.\n        (ffestb_R834) Likewise.\n        (ffestb_R835) Likewise.\n        (ffestb_R838) Likewise.\n        (ffestb_R1102) Likewise.\n        (ffestb_blockdata) Likewise.\n        (ffestb_R1212) Likewise.\n        (ffestb_R810) Likewise.\n        (ffestb_R10014_): Cast the argument of `ffelex_is_firstnamechar'\n        to (unsigned char).\n        (ffestb_V014): Change type of variable `p' to unsigned char *.\n        (ffestb_dummy) Likewise.\n        (ffestb_R524) Likewise.\n        (ffestb_R547) Likewise.\n        (ffestb_decl_chartype) Likewise.\n        (ffestb_decl_dbltype) Likewise.\n        (ffestb_decl_gentype) Likewise.\n        (ffestb_decl_entsp_2_) Likewise.\n        (ffestb_V027) Likewise.\n        (ffestb_decl_R539) Likewise.\n        * top.c (ffe_decode_option): Mark parameter `argc' with\n        ATTRIBUTE_UNUSED.\n        * where.c (ffewhere_unknown_line_): Add missing initializers.\n\nFrom-SVN: r23030", "tree": {"sha": "140423aa4a8b4bfa9fb530284e7b241e8c752542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140423aa4a8b4bfa9fb530284e7b241e8c752542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0816ebdd9b37e9d5c079cab5d527551ea925bc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0816ebdd9b37e9d5c079cab5d527551ea925bc94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0816ebdd9b37e9d5c079cab5d527551ea925bc94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0816ebdd9b37e9d5c079cab5d527551ea925bc94/comments", "author": null, "committer": null, "parents": [{"sha": "f77d8413595228c00d29d96c1631e2f12ea6360b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77d8413595228c00d29d96c1631e2f12ea6360b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77d8413595228c00d29d96c1631e2f12ea6360b"}], "stats": {"total": 146, "additions": 106, "deletions": 40}, "files": [{"sha": "314439cd87f38785de2b85f71394daaa0a988a9f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -1,3 +1,62 @@\n+Mon Oct 12 20:41:59 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (ffebad_finish): Change type of variable `c' to unsigned\n+\tchar, change type of variable `s' to unsigned char *.\n+\n+\t* com.c (ffecom_symbol_null_): Add missing initializers.\n+\n+\t* fini.c (MAXNAMELEN): Undef it before defining.\n+\n+\t* implic.c (ffeimplic_lookup_): Change type of parameter `c' to\n+\tunsigned char.\n+\n+\t* intrin.c (ffeintrin_init_0): Cast the argument of ctype macros\n+\tto (unsigned char).\n+\n+\t* lex.c (ffelex_splice_tokens): Change type of variable `p' to\n+\tunsigned char *.\n+\t(ffelex_token_name_from_names): Cast the argument of\n+\t`ffelex_is_firstnamechar' to (unsigned char).\n+\t(ffelex_token_names_from_names): Likewise.\n+\t(ffelex_token_new_name): Likewise.\n+\t(ffelex_token_new_names): Likewise.\n+\n+\t* malloc.c (malloc_root_): Add missing initializer.\n+\n+\t* stb.c (ffestb_do): Change type of variable `p' to unsigned char *.\n+\t(ffestb_else) Likewise.\n+\t(ffestb_else3_) Likewise.\n+\t(ffestb_endxyz) Likewise.\n+\t(ffestb_goto) Likewise.\n+\t(ffestb_let) Likewise.\n+\t(ffestb_varlist) Likewise.\n+\t(ffestb_R522) Likewise.\n+\t(ffestb_R528) Likewise.\n+\t(ffestb_R834) Likewise.\n+\t(ffestb_R835) Likewise.\n+\t(ffestb_R838) Likewise.\n+\t(ffestb_R1102) Likewise.\n+\t(ffestb_blockdata) Likewise.\n+\t(ffestb_R1212) Likewise.\n+\t(ffestb_R810) Likewise.\n+\t(ffestb_R10014_): Cast the argument of `ffelex_is_firstnamechar'\n+\tto (unsigned char).\n+\t(ffestb_V014): Change type of variable `p' to unsigned char *.\n+\t(ffestb_dummy) Likewise.\n+\t(ffestb_R524) Likewise.\n+\t(ffestb_R547) Likewise.\n+\t(ffestb_decl_chartype) Likewise.\n+\t(ffestb_decl_dbltype) Likewise.\n+\t(ffestb_decl_gentype) Likewise.\n+\t(ffestb_decl_entsp_2_) Likewise.\n+\t(ffestb_V027) Likewise.\n+\t(ffestb_decl_R539) Likewise.\n+\n+\t* top.c (ffe_decode_option): Mark parameter `argc' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* where.c (ffewhere_unknown_line_): Add missing initializers.\n+\n 1998-10-02  Dave Love  <d.love@dl.ac.uk>\n \n \t* com.c (ffecom_expr_intrinsic_): Fix return type for RAND."}, {"sha": "8387c4a2533389dd3e26b70829b28636f37112f4", "filename": "gcc/f/bad.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -372,8 +372,8 @@ ffebad_finish ()\n   ffebadIndex bi;\n   unsigned short i;\n   char pointer;\n-  char c;\n-  char *s;\n+  unsigned char c;\n+  unsigned char *s;\n   char *fn;\n   static char buf[1024];\n   int bufi;"}, {"sha": "c45c6b83733e7d562e61d3222f98486b4e671f79", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -302,6 +302,8 @@ ffecomSymbol ffecom_symbol_null_\n   NULL_TREE,\n   NULL_TREE,\n   NULL_TREE,\n+  NULL_TREE,\n+  false\n };\n ffeinfoKindtype ffecom_pointer_kind_ = FFEINFO_basictypeNONE;\n ffeinfoKindtype ffecom_label_kind_ = FFEINFO_basictypeNONE;"}, {"sha": "dc7cb24db6f05d71cf4af49dd1fc7d2014a1da7b", "filename": "gcc/f/fini.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -24,6 +24,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"proj.h\"\n #include \"malloc.h\"\n \n+#undef MAXNAMELEN\n #define MAXNAMELEN 100\n \n typedef struct _name_ *name;"}, {"sha": "b0271e812bf86cb851cbbae98317a69775513cb1", "filename": "gcc/f/implic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fimplic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fimplic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fimplic.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -73,7 +73,7 @@ static struct _ffeimplic_ ffeimplic_table_['z' - 'A' + 1];\n \n /* Static functions (internal). */\n \n-static ffeimplic_ ffeimplic_lookup_ (char c);\n+static ffeimplic_ ffeimplic_lookup_ (unsigned char c);\n \n /* Internal macros. */\n \f\n@@ -89,7 +89,7 @@ static ffeimplic_ ffeimplic_lookup_ (char c);\n    data type.  */\n \n static ffeimplic_\n-ffeimplic_lookup_ (char c)\n+ffeimplic_lookup_ (unsigned char c)\n {\n   /* NOTE: This is definitely ASCII-specific!!  */\n   if (ISALPHA (c) || (c == '_'))"}, {"sha": "dbfbdafd99d76858d697524470cd3ea854831cbe", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -1558,8 +1558,9 @@ ffeintrin_init_0 ()\n \t    break;\n \t  if ((ISDIGIT (*p1) || (*p1 == '_')) && (*p1 == *p2) && (*p1 == *p3))\n \t    continue;\n-\t  if (! ISUPPER (*p1) || ! ISLOWER (*p2)\n-\t      || (*p1 != toupper (*p2)) || ((*p3 != *p1) && (*p3 != *p2)))\n+\t  if (! ISUPPER ((unsigned char)*p1) || ! ISLOWER ((unsigned char)*p2)\n+\t      || (*p1 != toupper ((unsigned char)*p2))\n+\t      || ((*p3 != *p1) && (*p3 != *p2)))\n \t    break;\n \t}\n       assert ((*p1 == *p2) && (*p1 == *p3) && (*p1 == '\\0'));"}, {"sha": "57b0e45f55f4b4f7832e47349503e7f6f22d1678", "filename": "gcc/f/lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -4347,7 +4347,7 @@ ffelexHandler\n ffelex_splice_tokens (ffelexHandler first, ffelexToken master,\n \t\t      ffeTokenLength start)\n {\n-  char *p;\n+  unsigned char *p;\n   ffeTokenLength i;\n   ffelexToken t;\n \n@@ -4490,7 +4490,7 @@ ffelex_token_name_from_names (ffelexToken t, ffeTokenLength start,\n       assert (len > 0);\n       assert ((start + len) <= t->length);\n     }\n-  assert (ffelex_is_firstnamechar (t->text[start]));\n+  assert (ffelex_is_firstnamechar ((unsigned char)(t->text[start])));\n \n   nt = ffelex_token_new_ ();\n   nt->type = FFELEX_typeNAME;\n@@ -4525,7 +4525,7 @@ ffelex_token_names_from_names (ffelexToken t, ffeTokenLength start,\n       assert (len > 0);\n       assert ((start + len) <= t->length);\n     }\n-  assert (ffelex_is_firstnamechar (t->text[start]));\n+  assert (ffelex_is_firstnamechar ((unsigned char)(t->text[start])));\n \n   nt = ffelex_token_new_ ();\n   nt->type = FFELEX_typeNAMES;\n@@ -4585,7 +4585,7 @@ ffelex_token_new_name (char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n \n-  assert (ffelex_is_firstnamechar (*s));\n+  assert (ffelex_is_firstnamechar ((unsigned char)*s));\n \n   t = ffelex_token_new_ ();\n   t->type = FFELEX_typeNAME;\n@@ -4606,7 +4606,7 @@ ffelex_token_new_names (char *s, ffewhereLine l, ffewhereColumn c)\n {\n   ffelexToken t;\n \n-  assert (ffelex_is_firstnamechar (*s));\n+  assert (ffelex_is_firstnamechar ((unsigned char)*s));\n \n   t = ffelex_token_new_ ();\n   t->type = FFELEX_typeNAMES;"}, {"sha": "905d49c4b3049aea44fc1cdb1d2a976481ad9858", "filename": "gcc/f/malloc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fmalloc.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -52,6 +52,8 @@ struct _malloc_root_ malloc_root_\n     0,\n #if MALLOC_DEBUG\n     0, 0, 0, 0, 0, 0, 0, { '/' }\n+#else\n+    { 0 }\n #endif\n   },\n };"}, {"sha": "c14ccf5a66159a561f646dd923997acd90d7230c", "filename": "gcc/f/stb.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fstb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fstb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstb.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -1859,7 +1859,7 @@ ffelexHandler\n ffestb_do (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexHandler next;\n   ffelexToken nt;\n   ffestrSecond kw;\n@@ -2507,7 +2507,7 @@ ffelexHandler\n ffestb_else (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -2787,7 +2787,7 @@ static ffelexHandler\n ffestb_else3_ (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   ffelex_set_names (FALSE);\n \n@@ -3013,7 +3013,7 @@ ffelexHandler\n ffestb_endxyz (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -3319,7 +3319,7 @@ ffelexHandler\n ffestb_goto (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexHandler next;\n   ffelexToken nt;\n \n@@ -4152,7 +4152,7 @@ ffestb_let (ffelexToken t)\n   ffelexHandler next;\n   bool vxtparam;\t\t/* TRUE if it might really be a VXT PARAMETER\n \t\t\t\t   stmt. */\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -4537,7 +4537,7 @@ ffelexHandler\n ffestb_varlist (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffelexHandler next;\n \n@@ -5284,7 +5284,7 @@ ffelexHandler\n ffestb_R522 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffelexHandler next;\n \n@@ -5528,7 +5528,7 @@ ffestb_R5224_ (ffelexToken t)\n ffelexHandler\n ffestb_R528 (ffelexToken t)\n {\n-  char *p;\n+  unsigned char *p;\n   ffeTokenLength i;\n   ffelexToken nt;\n   ffelexHandler next;\n@@ -6419,7 +6419,7 @@ ffelexHandler\n ffestb_R834 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -6534,7 +6534,7 @@ ffelexHandler\n ffestb_R835 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -6648,7 +6648,7 @@ ffestb_R8351_ (ffelexToken t)\n ffelexHandler\n ffestb_R838 (ffelexToken t)\n {\n-  char *p;\n+  unsigned char *p;\n   ffeTokenLength i;\n   ffelexHandler next;\n   ffelexToken et;\t\t/* First token in target. */\n@@ -7141,7 +7141,7 @@ ffelexHandler\n ffestb_R1102 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -7293,7 +7293,7 @@ ffelexHandler\n ffestb_blockdata (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -7436,7 +7436,7 @@ ffelexHandler\n ffestb_R1212 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexHandler next;\n   ffelexToken nt;\n \n@@ -8630,7 +8630,7 @@ ffelexHandler\n ffestb_R810 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -9709,7 +9709,8 @@ ffestb_R10014_ (ffelexToken t)\n       i += ffelex_token_length (ffestb_local_.format.post.t);\n       if (*p == '\\0')\n \treturn (ffelexHandler) ffestb_R10016_;\n-      if ((kw != FFESTR_formatP) || !ffelex_is_firstnamechar (*p))\n+      if ((kw != FFESTR_formatP) ||\n+\t  !ffelex_is_firstnamechar ((unsigned char)*p))\n \t{\n \t  if (ffestb_local_.format.current != FFESTP_formattypeH)\n \t    ffesta_ffebad_1p (FFEBAD_FORMAT_TEXT_IN_NUMBER, t, i, NULL);\n@@ -12165,7 +12166,7 @@ ffelexHandler\n ffestb_V014 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffelexHandler next;\n \n@@ -19399,7 +19400,7 @@ ffelexHandler\n ffestb_dummy (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n     {\n@@ -19618,7 +19619,7 @@ ffelexHandler\n ffestb_R524 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffelexHandler next;\n \n@@ -19847,7 +19848,7 @@ ffelexHandler\n ffestb_R547 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffelexHandler next;\n \n@@ -20485,7 +20486,7 @@ ffelexHandler\n ffestb_decl_chartype (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   ffestb_local_.decl.type = FFESTP_typeCHARACTER;\n   ffestb_local_.decl.recursive = NULL;\n@@ -20672,7 +20673,7 @@ ffelexHandler\n ffestb_decl_dbltype (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   ffestb_local_.decl.type = ffestb_args.decl.type;\n   ffestb_local_.decl.recursive = NULL;\n@@ -20863,7 +20864,7 @@ ffelexHandler\n ffestb_decl_gentype (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n \n   ffestb_local_.decl.type = ffestb_args.decl.type;\n   ffestb_local_.decl.recursive = NULL;\n@@ -22667,7 +22668,7 @@ ffestb_decl_entsp_2_ (ffelexToken t)\n {\n   ffelexToken nt;\n   bool asterisk_ok;\n-  char *p;\n+  unsigned char *p;\n   ffeTokenLength i;\n \n   switch (ffelex_token_type (t))\n@@ -24156,7 +24157,7 @@ ffestb_V0166_ (ffelexToken t)\n ffelexHandler\n ffestb_V027 (ffelexToken t)\n {\n-  char *p;\n+  unsigned char *p;\n   ffeTokenLength i;\n \n   switch (ffelex_token_type (ffesta_tokens[0]))\n@@ -24336,7 +24337,7 @@ ffelexHandler\n ffestb_decl_R539 (ffelexToken t)\n {\n   ffeTokenLength i;\n-  char *p;\n+  unsigned char *p;\n   ffelexToken nt;\n   ffestrSecond kw;\n "}, {"sha": "fe5bc40c286ace9bb48768c59243ccc2a219075c", "filename": "gcc/f/top.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -162,7 +162,7 @@ ffe_is_digit_string_ (char *s)\n \n int\n ffe_decode_option (argc, argv)\n-     int argc;\n+     int argc ATTRIBUTE_UNUSED;\n      char **argv;\n {\n   char *opt = argv[0];"}, {"sha": "b8b648c76f9125f9584f0f6c1f11632184c21cdd", "filename": "gcc/f/where.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fwhere.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0816ebdd9b37e9d5c079cab5d527551ea925bc94/gcc%2Ff%2Fwhere.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fwhere.c?ref=0816ebdd9b37e9d5c079cab5d527551ea925bc94", "patch": "@@ -38,7 +38,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct _ffewhere_line_ ffewhere_unknown_line_\n =\n-{NULL, NULL, 0, 0, 0};\n+{NULL, NULL, 0, 0, 0, {0}};\n \n /* Simple definitions and enumerations. */\n "}]}