{"sha": "50b1de860a58bf85b40a72219bc2fdfaf0dff355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMWRlODYwYTU4YmY4NWI0MGE3MjIxOWJjMmZkZmFmMGRmZjM1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-02T20:09:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-02T20:09:53Z"}, "message": "xtensa: Fix 2 warnings during xtensa build [PR100841]\n\nWhen building gcc targetting xtensa-linux, there are 2 warnings the PR\ncomplains about:\n../../gcc/dwarf2cfi.c: In function \u2018void init_one_dwarf_reg_size(int, machine_mode, rtx, machine_mode, init_one_dwarf_reg_state*)\u2019:\n../../gcc/dwarf2cfi.c:291:12: warning: comparison of integer expressions of different signedness: \u2018const unsigned int\u2019 and \u2018int\u2019 [-Wsign-compare]\n  291 |   if (rnum >= DWARF_FRAME_REGISTERS)\n../../gcc/function.c: In function \u2018void gen_call_used_regs_seq(rtx_insn*, unsigned int)\u2019:\n../../gcc/function.c:5897:63: warning: comparison of unsigned expression in \u2018< 0\u2019 is always false [-Wtype-limits]\n 5897 |       if (crtl->uses_only_leaf_regs && LEAF_REG_REMAP (regno) < 0)\nwhich might during bootstrap or when configured with --enable-werror-always\nbe turned into errors.\n\nThe first one is the -Wsign-compare warning, in c-family we do:\n2281          /* Do not warn if the signed quantity is an unsuffixed integer\n2282             literal (or some static constant expression involving such\n2283             literals or a conditional expression involving such literals)\n2284             and it is non-negative.  */\n2285          if (tree_expr_nonnegative_warnv_p (sop, &ovf))\n2286            /* OK */;\nand so don't warn if that function determines the expression is\nnon-negative.  But xtensa defines DWARF_FRAME_REGISTERS as\n(16 + (something ? 0 : 1)) and that isn't handled by\ntree_expr_nonnegative_warnv_p, VRP can handle it of course, but that is much\nlater.\nThe second chunk rewrites it into a form that tree_expr_nonnegative_warnv_p\ncan handle, in particular (something ? 16 : 16 + 1), where for COND_EXPRs\nthat function checks both the 2nd and 3rd operand of the ternary operator\nand if both are nonnegative, returns true.\n\nThe other warning has been introduced fairly recently; LEAF_REG_REMAP is\ncurrently used by 2 targets only, and is documented to yield -1 if a hard\nreg number can't be remapped and the remapped register number otherwise.\nThat means that the type of the expression should be signed (otherwise -1\ncould never appear), and on SPARC indeed it is defined as\n extern char leaf_reg_remap[];\n #define LEAF_REG_REMAP(REGNO) (leaf_reg_remap[REGNO])\nso unless the host is -funsigned-char by default it works fine.\nI guess sparc.[ch] should be fixed to use signed char of leaf_reg_remap,\nEric?\nThe argument to LEAF_REG_REMAP is often unsigned int though, hard\nregister numbers are usually not negative, and thus the warning.\nI think xtensa doesn't have 2G hard registers and so it is ok to just cast\nit to int.\n\n2021-06-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100841\n\t* config/xtensa/xtensa.h (LEAF_REG_REMAP): Cast REGNO to int to avoid\n\t-Wtype-limits warnings.\n\t(DWARF_FRAME_REGISTER): Rewrite into ternary operator with addition\n\tin operands to avoid -Wsign-compare warnings.", "tree": {"sha": "408f5f8004f4b4b936c3f52db74efe20938881a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408f5f8004f4b4b936c3f52db74efe20938881a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b1de860a58bf85b40a72219bc2fdfaf0dff355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b1de860a58bf85b40a72219bc2fdfaf0dff355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b1de860a58bf85b40a72219bc2fdfaf0dff355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b1de860a58bf85b40a72219bc2fdfaf0dff355/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d74c9fc0cf46f66cd02698a52f5e5db109271d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d74c9fc0cf46f66cd02698a52f5e5db109271d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d74c9fc0cf46f66cd02698a52f5e5db109271d"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "923ab5a6678c4c8c24cffa64362a9ae603447957", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b1de860a58bf85b40a72219bc2fdfaf0dff355/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b1de860a58bf85b40a72219bc2fdfaf0dff355/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=50b1de860a58bf85b40a72219bc2fdfaf0dff355", "patch": "@@ -279,7 +279,7 @@ extern const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER];\n \n /* For Xtensa, no remapping is necessary, but this macro must be\n    defined if LEAF_REGISTERS is defined.  */\n-#define LEAF_REG_REMAP(REGNO) (REGNO)\n+#define LEAF_REG_REMAP(REGNO) ((int) (REGNO))\n \n /* This must be declared if LEAF_REGISTERS is set.  */\n extern int leaf_function;\n@@ -775,8 +775,9 @@ typedef struct xtensa_args\n #define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, 0)\n #define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (0)\n #define DWARF_ALT_FRAME_RETURN_COLUMN 16\n-#define DWARF_FRAME_REGISTERS (DWARF_ALT_FRAME_RETURN_COLUMN\t\t\\\n-\t\t\t       + (TARGET_WINDOWED_ABI ? 0 : 1))\n+#define DWARF_FRAME_REGISTERS (TARGET_WINDOWED_ABI \\\n+\t\t\t       ? DWARF_ALT_FRAME_RETURN_COLUMN\t\t\\\n+\t\t\t       : DWARF_ALT_FRAME_RETURN_COLUMN + 1)\n #define EH_RETURN_DATA_REGNO(N) ((N) < 2 ? (N) + 2 : INVALID_REGNUM)\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\t\\\n   (flag_pic\t\t\t\t\t\t\t\t\\"}]}