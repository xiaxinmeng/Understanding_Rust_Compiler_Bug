{"sha": "459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5ZDIxYzZjZmZiMmM3NGQyNjQ0ZTIxZGIzNzJiYThhMGMyN2ViNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-07T19:10:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-07T19:10:21Z"}, "message": "re PR target/89602 (Missing AVX512 intrinsics)\n\n\tPR target/89602\n\t* config/i386/sse.md (avx512f_mov<ssescalarmodelower>_mask,\n\t*avx512f_load<mode>_mask, avx512f_store<mode>_mask): New define_insns.\n\t(avx512f_load<mode>_mask): New define_expand.\n\t* config/i386/i386-builtin.def (__builtin_ia32_loadsd_mask,\n\t__builtin_ia32_loadss_mask, __builtin_ia32_storesd_mask,\n\t__builtin_ia32_storess_mask, __builtin_ia32_movesd_mask,\n\t__builtin_ia32_movess_mask): New builtins.\n\t* config/i386/avx512fintrin.h (_mm_mask_load_ss, _mm_maskz_load_ss,\n\t_mm_mask_load_sd, _mm_maskz_load_sd, _mm_mask_move_ss,\n\t_mm_maskz_move_ss, _mm_mask_move_sd, _mm_maskz_move_sd,\n\t_mm_mask_store_ss, _mm_mask_store_sd): New intrinsics.\n\n\t* gcc.target/i386/avx512f-vmovss-1.c: New test.\n\t* gcc.target/i386/avx512f-vmovss-2.c: New test.\n\t* gcc.target/i386/avx512f-vmovss-3.c: New test.\n\t* gcc.target/i386/avx512f-vmovsd-1.c: New test.\n\t* gcc.target/i386/avx512f-vmovsd-2.c: New test.\n\t* gcc.target/i386/avx512f-vmovsd-3.c: New test.\n\nFrom-SVN: r269467", "tree": {"sha": "cf908f801639022dc63d87abf63371f6f03b936d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf908f801639022dc63d87abf63371f6f03b936d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f5439bea30bd2370638261ec7613628c8918d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f5439bea30bd2370638261ec7613628c8918d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f5439bea30bd2370638261ec7613628c8918d7d"}], "stats": {"total": 557, "additions": 557, "deletions": 0}, "files": [{"sha": "082e90b01264b5a772fe26297f8917c3af384b88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -1,3 +1,18 @@\n+2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89602\n+\t* config/i386/sse.md (avx512f_mov<ssescalarmodelower>_mask,\n+\t*avx512f_load<mode>_mask, avx512f_store<mode>_mask): New define_insns.\n+\t(avx512f_load<mode>_mask): New define_expand.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_loadsd_mask,\n+\t__builtin_ia32_loadss_mask, __builtin_ia32_storesd_mask,\n+\t__builtin_ia32_storess_mask, __builtin_ia32_movesd_mask,\n+\t__builtin_ia32_movess_mask): New builtins.\n+\t* config/i386/avx512fintrin.h (_mm_mask_load_ss, _mm_maskz_load_ss,\n+\t_mm_mask_load_sd, _mm_maskz_load_sd, _mm_mask_move_ss,\n+\t_mm_maskz_move_ss, _mm_mask_move_sd, _mm_maskz_move_sd,\n+\t_mm_mask_store_ss, _mm_mask_store_sd): New intrinsics.\n+\n 2019-03-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR lto/87525"}, {"sha": "3a4e0ad3c32d12821cd725e4c00645cd22c2f198", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -6273,6 +6273,83 @@ _mm512_mask_storeu_ps (void *__P, __mmask16 __U, __m512 __A)\n \t\t\t\t   (__mmask16) __U);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_load_ss (__m128 __W, __mmask8 __U, const float *__P)\n+{\n+  return (__m128) __builtin_ia32_loadss_mask (__P, (__v4sf) __W, __U);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_load_ss (__mmask8 __U, const float *__P)\n+{\n+  return (__m128) __builtin_ia32_loadss_mask (__P, (__v4sf) _mm_setzero_ps (),\n+\t\t\t\t\t      __U);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_load_sd (__m128d __W, __mmask8 __U, const double *__P)\n+{\n+  return (__m128d) __builtin_ia32_loadsd_mask (__P, (__v2df) __W, __U);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_load_sd (__mmask8 __U, const double *__P)\n+{\n+  return (__m128d) __builtin_ia32_loadsd_mask (__P, (__v2df) _mm_setzero_pd (),\n+\t\t\t\t\t       __U);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_move_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_movess_mask ((__v4sf) __A, (__v4sf) __B,\n+\t\t\t\t\t      (__v4sf) __W, __U);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_move_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_movess_mask ((__v4sf) __A, (__v4sf) __B,\n+\t\t\t\t\t      (__v4sf) _mm_setzero_ps (), __U);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_move_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_movesd_mask ((__v2df) __A, (__v2df) __B,\n+\t\t\t\t\t       (__v2df) __W, __U);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_move_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_movesd_mask ((__v2df) __A, (__v2df) __B,\n+\t\t\t\t\t       (__v2df) _mm_setzero_pd (),\n+\t\t\t\t\t       __U);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_store_ss (float *__P, __mmask8 __U, __m128 __A)\n+{\n+  __builtin_ia32_storess_mask (__P, (__v4sf) __A, (__mmask8) __U);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_store_sd (double *__P, __mmask8 __U, __m128d __A)\n+{\n+  __builtin_ia32_storesd_mask (__P, (__v2df) __A, (__mmask8) __U);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_loadu_epi64 (__m512i __W, __mmask8 __U, void const *__P)"}, {"sha": "eeef341726ac574dc418e3577f71ab92a73cb92e", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -255,6 +255,10 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storev16sf_mask, \"__builtin_\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storev16si_mask, \"__builtin_ia32_movdqa32store512_mask\", IX86_BUILTIN_MOVDQA32STORE512, UNKNOWN, (int) VOID_FTYPE_PV16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storev8df_mask, \"__builtin_ia32_storeapd512_mask\", IX86_BUILTIN_STOREAPD512, UNKNOWN, (int) VOID_FTYPE_PV8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storev8di_mask, \"__builtin_ia32_movdqa64store512_mask\", IX86_BUILTIN_MOVDQA64STORE512, UNKNOWN, (int) VOID_FTYPE_PV8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_loaddf_mask, \"__builtin_ia32_loadsd_mask\", IX86_BUILTIN_LOADSD_MASK, UNKNOWN, (int) V2DF_FTYPE_PCDOUBLE_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_loadsf_mask, \"__builtin_ia32_loadss_mask\", IX86_BUILTIN_LOADSS_MASK, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storedf_mask, \"__builtin_ia32_storesd_mask\", IX86_BUILTIN_STORESD_MASK, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_storesf_mask, \"__builtin_ia32_storess_mask\", IX86_BUILTIN_STORESS_MASK, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF_UQI)\n \n BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_llwpcb, \"__builtin_ia32_llwpcb\", IX86_BUILTIN_LLWPCB, UNKNOWN, (int) VOID_FTYPE_PVOID)\n BDESC (OPTION_MASK_ISA_LWP, 0, CODE_FOR_lwp_slwpcb, \"__builtin_ia32_slwpcb\", IX86_BUILTIN_SLWPCB, UNKNOWN, (int) PVOID_FTYPE_VOID)\n@@ -1470,6 +1474,8 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vternlogv16si_mask, \"__built\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vternlogv16si_maskz, \"__builtin_ia32_pternlogd512_maskz\", IX86_BUILTIN_VTERNLOGD512_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vternlogv8di_mask, \"__builtin_ia32_pternlogq512_mask\", IX86_BUILTIN_VTERNLOGQ512_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vternlogv8di_maskz, \"__builtin_ia32_pternlogq512_maskz\", IX86_BUILTIN_VTERNLOGQ512_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_movdf_mask, \"__builtin_ia32_movesd_mask\", IX86_BUILTIN_MOVSD_MASK, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_movsf_mask, \"__builtin_ia32_movess_mask\", IX86_BUILTIN_MOVSS_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI)\n \n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_copysignv16sf3,  \"__builtin_ia32_copysignps512\", IX86_BUILTIN_CPYSGNPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_copysignv8df3,  \"__builtin_ia32_copysignpd512\", IX86_BUILTIN_CPYSGNPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF)"}, {"sha": "259063f786213ad1bc059fdfc3a90c6f582e8278", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -1151,6 +1151,67 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_mov<ssescalarmodelower>_mask\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_merge:VF_128\n+\t    (match_operand:VF_128 2 \"register_operand\" \"v\")\n+\t    (match_operand:VF_128 3 \"nonimm_or_0_operand\" \"0C\")\n+\t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n+\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vmov<ssescalarmodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n+(define_expand \"avx512f_load<mode>_mask\"\n+  [(set (match_operand:<ssevecmode> 0 \"register_operand\")\n+\t(vec_merge:<ssevecmode>\n+\t  (vec_merge:<ssevecmode>\n+\t    (vec_duplicate:<ssevecmode>\n+\t      (match_operand:MODEF 1 \"memory_operand\"))\n+\t    (match_operand:<ssevecmode> 2 \"nonimm_or_0_operand\")\n+\t    (match_operand:QI 3 \"register_operand\"))\n+\t  (match_dup 4)\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"operands[4] = CONST0_RTX (<ssevecmode>mode);\")\n+\n+(define_insn \"*avx512f_load<mode>_mask\"\n+  [(set (match_operand:<ssevecmode> 0 \"register_operand\" \"=v\")\n+\t(vec_merge:<ssevecmode>\n+\t  (vec_merge:<ssevecmode>\n+\t    (vec_duplicate:<ssevecmode>\n+\t      (match_operand:MODEF 1 \"memory_operand\" \"m\"))\n+\t    (match_operand:<ssevecmode> 2 \"nonimm_or_0_operand\" \"0C\")\n+\t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t  (match_operand:<ssevecmode> 4 \"const0_operand\" \"C\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vmov<ssescalarmodesuffix>\\t{%1, %0%{%3%}%N2|%0%{3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"load\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"avx512f_store<mode>_mask\"\n+  [(set (match_operand:MODEF 0 \"memory_operand\" \"=m\")\n+\t(if_then_else:MODEF\n+\t  (and:QI (match_operand:QI 2 \"register_operand\" \"Yk\")\n+\t\t (const_int 1))\n+\t  (vec_select:MODEF\n+\t    (match_operand:<ssevecmode> 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0)]))\n+\t  (match_dup 0)))]\n+  \"TARGET_AVX512F\"\n+  \"vmov<ssescalarmodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"store\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"<avx512>_blendm<mode>\"\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:V48_AVX512VL"}, {"sha": "31b1f69b8144096c6ff1680162962f08ebcd35df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -1,3 +1,13 @@\n+2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89602\n+\t* gcc.target/i386/avx512f-vmovss-1.c: New test.\n+\t* gcc.target/i386/avx512f-vmovss-2.c: New test.\n+\t* gcc.target/i386/avx512f-vmovss-3.c: New test.\n+\t* gcc.target/i386/avx512f-vmovsd-1.c: New test.\n+\t* gcc.target/i386/avx512f-vmovsd-2.c: New test.\n+\t* gcc.target/i386/avx512f-vmovsd-3.c: New test.\n+\n 2019-03-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR lto/87525"}, {"sha": "a7e136b7a149f8bdf0fae086e6d88adb2ce36f29", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovsd-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-1.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vmovsd\\[ \\\\t\\]+\\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsd\\[ \\\\t\\]+\\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsd\\[ \\\\t\\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+, %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsd\\[ \\\\t\\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+, %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsd\\[ \\\\t\\]+%xmm\\[0-9\\]+, \\\\(%\\[a-z0-9,]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2, x3;\n+volatile __mmask8 m;\n+double *volatile p;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_mask_load_sd (x1, m, p);\n+  x1 = _mm_maskz_load_sd (m, p);\n+  x1 = _mm_mask_move_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_move_sd (m, x2, x3);\n+  _mm_mask_store_sd (p, m, x1);\n+}"}, {"sha": "fad298aaf4c9232a674434dc3a77ef3588fc968d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovsd-2.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-2.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2, src3;\n+  volatile __mmask8 mask = 5;\n+  double val[2] = { 35.5, 0.0 };\n+  double *volatile p = &val[0];\n+  double res_ref[SIZE];\n+  double zero[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + i;\n+      src2.a[i] = 7.5 + i;\n+      src3.a[i] = 4.5 + i;\n+      zero[i] = 0.0;\n+    }\n+\n+  res1.x = _mm_mask_load_sd (src1.x, mask, p);\n+  res2.x = _mm_maskz_load_sd (mask, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = val[0];\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_sd (src1.x, mask, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_sd (mask, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src3.a[0];\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  _mm_mask_store_sd (p + 1, mask, src1.x);\n+  if (val[1] != src1.a[0])\n+    abort ();\n+\n+  mask ^= 1;\n+\n+  res1.x = _mm_mask_load_sd (src1.x, mask, p);\n+  res2.x = _mm_maskz_load_sd (mask, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_sd (src1.x, mask, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_sd (mask, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  val[1] = 42.0;\n+  _mm_mask_store_sd (p + 1, mask, src1.x);\n+  if (val[1] != 42.0)\n+    abort ();\n+}"}, {"sha": "d84aefcb59ce61d1cd6c64dd3bd0ea6b28e4a010", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovsd-3.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovsd-3.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, res2, res3, res4, src1, src2, src3;\n+  double val[2] = { 35.5, 0.0 };\n+  double *volatile p = &val[0];\n+  double res_ref[SIZE];\n+  double zero[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5 + i;\n+      src2.a[i] = 7.5 + i;\n+      src3.a[i] = 4.5 + i;\n+      zero[i] = 0.0;\n+    }\n+\n+  res1.x = _mm_mask_load_sd (src1.x, 1, p);\n+  res2.x = _mm_maskz_load_sd (1, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = val[0];\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_sd (src1.x, 1, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_sd (1, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src3.a[0];\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  _mm_mask_store_sd (p + 1, 1, src1.x);\n+  if (val[1] != src1.a[0])\n+    abort ();\n+\n+  res1.x = _mm_mask_load_sd (src1.x, 0, p);\n+  res2.x = _mm_maskz_load_sd (0, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_sd (src1.x, 0, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_sd (0, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n+  val[1] = 42.0;\n+  _mm_mask_store_sd (p + 1, 0, src1.x);\n+  if (val[1] != 42.0)\n+    abort ();\n+}"}, {"sha": "85f40dcaa3eb4063eb4c5e7dc169cdb7061393fd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovss-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-1.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+\\\\(%\\[a-z0-9,]*\\\\), %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+, %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+%xmm\\[0-9\\]+, %xmm\\[0-9\\]+, %xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovss\\[ \\\\t\\]+%xmm\\[0-9\\]+, \\\\(%\\[a-z0-9,]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2, x3;\n+volatile __mmask8 m;\n+float *volatile p;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_mask_load_ss (x1, m, p);\n+  x1 = _mm_maskz_load_ss (m, p);\n+  x1 = _mm_mask_move_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_move_ss (m, x2, x3);\n+  _mm_mask_store_ss (p, m, x1);\n+}"}, {"sha": "91721cf851e5b26eeebe33447c6e62f2e2825429", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovss-2.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-2.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2, src3;\n+  volatile __mmask8 mask = 5;\n+  float val[2] = { 35.5f, 0.0f };\n+  float *volatile p = &val[0];\n+  float res_ref[SIZE];\n+  float zero[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5f + i;\n+      src2.a[i] = 7.5f + i;\n+      src3.a[i] = 4.5f + i;\n+      zero[i] = 0.0f;\n+    }\n+\n+  res1.x = _mm_mask_load_ss (src1.x, mask, p);\n+  res2.x = _mm_maskz_load_ss (mask, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = val[0];\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_ss (src1.x, mask, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_ss (mask, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src3.a[0];\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  _mm_mask_store_ss (p + 1, mask, src1.x);\n+  if (val[1] != src1.a[0])\n+    abort ();\n+\n+  mask ^= 1;\n+\n+  res1.x = _mm_mask_load_ss (src1.x, mask, p);\n+  res2.x = _mm_maskz_load_ss (mask, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_ss (src1.x, mask, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_ss (mask, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  val[1] = 42.0f;\n+  _mm_mask_store_ss (p + 1, mask, src1.x);\n+  if (val[1] != 42.0f)\n+    abort ();\n+}"}, {"sha": "bb05983b7a46d6b42801a4ae86126683cd14b383", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovss-3.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/459d21c6cffb2c74d2644e21db372ba8a0c27eb6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovss-3.c?ref=459d21c6cffb2c74d2644e21db372ba8a0c27eb6", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, res2, res3, res4, src1, src2, src3;\n+  float val[2] = { 35.5f, 0.0f };\n+  float *volatile p = &val[0];\n+  float res_ref[SIZE];\n+  float zero[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1.5f + i;\n+      src2.a[i] = 7.5f + i;\n+      src3.a[i] = 4.5f + i;\n+      zero[i] = 0.0f;\n+    }\n+\n+  res1.x = _mm_mask_load_ss (src1.x, 1, p);\n+  res2.x = _mm_maskz_load_ss (1, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = val[0];\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_ss (src1.x, 1, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_ss (1, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src3.a[0];\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  _mm_mask_store_ss (p + 1, 1, src1.x);\n+  if (val[1] != src1.a[0])\n+    abort ();\n+\n+  res1.x = _mm_mask_load_ss (src1.x, 0, p);\n+  res2.x = _mm_maskz_load_ss (0, p);\n+\n+  __builtin_memcpy (res_ref, zero, sizeof (zero));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  res3.x = _mm_mask_move_ss (src1.x, 0, src2.x, src3.x);\n+  res4.x = _mm_maskz_move_ss (0, src2.x, src3.x);\n+\n+  __builtin_memcpy (res_ref, src2.a, sizeof (src2.a));\n+  res_ref[0] = src1.a[0];\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+\n+  res_ref[0] = zero[0];\n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n+  val[1] = 42.0f;\n+  _mm_mask_store_ss (p + 1, 0, src1.x);\n+  if (val[1] != 42.0f)\n+    abort ();\n+}"}]}