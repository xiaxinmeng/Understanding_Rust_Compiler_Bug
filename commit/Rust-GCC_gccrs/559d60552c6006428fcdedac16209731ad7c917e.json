{"sha": "559d60552c6006428fcdedac16209731ad7c917e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU5ZDYwNTUyYzYwMDY0MjhmY2RlZGFjMTYyMDk3MzFhZDdjOTE3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-27T15:53:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-27T15:53:23Z"}, "message": "bootstrap-lto.mk (BOOT_ADAFLAGS): Delete.\n\nconfig/\n\t* bootstrap-lto.mk (BOOT_ADAFLAGS): Delete.\ngcc/\n\t* tree-nested.c (remap_vla_decls): Fully expand value expressions of\n\tVLA variables.\ngcc/ada/\n\t* gnatvsn.adb (Version_String): Change type to C-like array of chars.\n\t(Gnat_Version_String): Adjust to above change.\n\nFrom-SVN: r167201", "tree": {"sha": "5cb0698719ccee151d657bbd5d581dcc643423c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb0698719ccee151d657bbd5d581dcc643423c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/559d60552c6006428fcdedac16209731ad7c917e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559d60552c6006428fcdedac16209731ad7c917e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559d60552c6006428fcdedac16209731ad7c917e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559d60552c6006428fcdedac16209731ad7c917e/comments", "author": null, "committer": null, "parents": [{"sha": "3dbe9454540ab183476df93e6ef8eab50fbb13b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbe9454540ab183476df93e6ef8eab50fbb13b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbe9454540ab183476df93e6ef8eab50fbb13b5"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "8e98f6d1300c8561b09812c0062a58ea60b73d9c", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -1,3 +1,7 @@\n+2010-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* bootstrap-lto.mk (BOOT_ADAFLAGS): Delete.\n+\n 2010-11-19  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \t* cloog.m4: Use AS_HELP_STRING and fix help formatting."}, {"sha": "59e5c982fb2e1815a113136dd862a4179f187e7f", "filename": "config/bootstrap-lto.mk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/config%2Fbootstrap-lto.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/config%2Fbootstrap-lto.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-lto.mk?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -3,6 +3,3 @@\n \n STAGE2_CFLAGS += -flto=jobserver -fuse-linker-plugin -frandom-seed=1\n STAGE3_CFLAGS += -flto=jobserver -fuse-linker-plugin -frandom-seed=1\n-\n-# Ada fails to build with LTO, turn it off for now.\n-BOOT_ADAFLAGS += -fno-lto"}, {"sha": "faf40b1b48340d846ff4808336040a611620c7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -1,3 +1,8 @@\n+2010-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-nested.c (remap_vla_decls): Fully expand value expressions of\n+\tVLA variables.\n+\n 2010-11-27  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (gimple_assign_copy_p): Use gimple_assign_single_p."}, {"sha": "24e3615a8d8174ed0657827a6436d162cacb1fa5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -1,3 +1,8 @@\n+2010-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnatvsn.adb (Version_String): Change type to C-like array of chars.\n+\t(Gnat_Version_String): Adjust to above change.\n+\n 2010-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: Also"}, {"sha": "34f72e746fa347551b336236a39215f5e3000bb6", "filename": "gcc/ada/gnatvsn.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Fada%2Fgnatvsn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Fada%2Fgnatvsn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatvsn.adb?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -53,9 +53,10 @@ package body Gnatvsn is\n         \" FOR A PARTICULAR PURPOSE.\";\n    end Gnat_Free_Software;\n \n-   Version_String : String (1 .. Ver_Len_Max);\n+   type char_array is array (Natural range <>) of aliased Character;\n+   Version_String : char_array (0 .. Ver_Len_Max - 1);\n    --  Import the C string defined in the (language-independent) source file\n-   --  version.c.\n+   --  version.c using the zero-based convention of the C language.\n    --  The size is not the real one, which does not matter since we will\n    --  check for the nul character in Gnat_Version_String.\n    pragma Import (C, Version_String, \"version_string\");\n@@ -65,15 +66,17 @@ package body Gnatvsn is\n    -------------------------\n \n    function Gnat_Version_String return String is\n-      NUL_Pos : Positive := 1;\n+      S : String (1 .. Ver_Len_Max);\n+      Pos : Natural := 0;\n    begin\n       loop\n-         exit when Version_String (NUL_Pos) = ASCII.NUL;\n+         exit when Version_String (Pos) = ASCII.NUL;\n \n-         NUL_Pos := NUL_Pos + 1;\n+         S (Pos + 1) := Version_String (Pos);\n+         Pos := Pos + 1;\n       end loop;\n \n-      return Version_String (1 .. NUL_Pos - 1);\n+      return S (1 .. Pos);\n    end Gnat_Version_String;\n \n end Gnatvsn;"}, {"sha": "cebaf07f7847c86c8d2fe51bb0e11765fb19f95f", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/559d60552c6006428fcdedac16209731ad7c917e/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=559d60552c6006428fcdedac16209731ad7c917e", "patch": "@@ -2192,18 +2192,21 @@ remap_vla_decls (tree block, struct nesting_info *root)\n     remap_vla_decls (subblock, root);\n \n   for (var = BLOCK_VARS (block); var; var = DECL_CHAIN (var))\n-    {\n-      if (TREE_CODE (var) == VAR_DECL\n-\t  && variably_modified_type_p (TREE_TYPE (var), NULL)\n-\t  && DECL_HAS_VALUE_EXPR_P (var))\n-\t{\n-\t  type = TREE_TYPE (var);\n-\t  val = DECL_VALUE_EXPR (var);\n-\t  if (walk_tree (&type, contains_remapped_vars, root, NULL) != NULL\n-\t      ||  walk_tree (&val, contains_remapped_vars, root, NULL) != NULL)\n-\t    break;\n-\t}\n-    }\n+    if (TREE_CODE (var) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (var))\n+      {\n+\tval = DECL_VALUE_EXPR (var);\n+\ttype = TREE_TYPE (var);\n+\n+\tif (!(TREE_CODE (val) == INDIRECT_REF\n+\t      && TREE_CODE (TREE_OPERAND (val, 0)) == VAR_DECL\n+\t      && variably_modified_type_p (type, NULL)))\n+\t  continue;\n+\n+\tif (pointer_map_contains (root->var_map, TREE_OPERAND (val, 0))\n+\t    || walk_tree (&type, contains_remapped_vars, root, NULL))\n+\t  break;\n+      }\n+\n   if (var == NULL_TREE)\n     return;\n \n@@ -2213,17 +2216,22 @@ remap_vla_decls (tree block, struct nesting_info *root)\n   id.root = root;\n \n   for (; var; var = DECL_CHAIN (var))\n-    if (TREE_CODE (var) == VAR_DECL\n-\t&& variably_modified_type_p (TREE_TYPE (var), NULL)\n-\t&& DECL_HAS_VALUE_EXPR_P (var))\n+    if (TREE_CODE (var) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (var))\n       {\n \tstruct nesting_info *i;\n-\ttree newt, t, context;\n+\ttree newt, context;\n+\tvoid **slot;\n \n-\tt = type = TREE_TYPE (var);\n \tval = DECL_VALUE_EXPR (var);\n-\tif (walk_tree (&type, contains_remapped_vars, root, NULL) == NULL\n-\t    && walk_tree (&val, contains_remapped_vars, root, NULL) == NULL)\n+\ttype = TREE_TYPE (var);\n+\n+\tif (!(TREE_CODE (val) == INDIRECT_REF\n+\t      && TREE_CODE (TREE_OPERAND (val, 0)) == VAR_DECL\n+\t      && variably_modified_type_p (type, NULL)))\n+\t  continue;\n+\n+\tslot = pointer_map_contains (root->var_map, TREE_OPERAND (val, 0));\n+\tif (!slot && !walk_tree (&type, contains_remapped_vars, root, NULL))\n \t  continue;\n \n \tcontext = decl_function_context (var);\n@@ -2234,6 +2242,15 @@ remap_vla_decls (tree block, struct nesting_info *root)\n \tif (i == NULL)\n \t  continue;\n \n+\t/* Fully expand value expressions.  This avoids having debug variables\n+\t   only referenced from them and that can be swept during GC.  */\n+        if (slot)\n+\t  {\n+\t    tree t = (tree) *slot;\n+\t    gcc_assert (DECL_P (t) && DECL_HAS_VALUE_EXPR_P (t));\n+\t    val = build1 (INDIRECT_REF, TREE_TYPE (val), DECL_VALUE_EXPR (t));\n+\t  }\n+\n \tid.cb.src_fn = i->context;\n \tid.cb.dst_fn = i->context;\n \tid.cb.src_cfun = DECL_STRUCT_FUNCTION (root->context);\n@@ -2242,13 +2259,13 @@ remap_vla_decls (tree block, struct nesting_info *root)\n \twhile (POINTER_TYPE_P (newt) && !TYPE_NAME (newt))\n \t  {\n \t    newt = TREE_TYPE (newt);\n-\t    t = TREE_TYPE (t);\n+\t    type = TREE_TYPE (type);\n \t  }\n \tif (TYPE_NAME (newt)\n \t    && TREE_CODE (TYPE_NAME (newt)) == TYPE_DECL\n \t    && DECL_ORIGINAL_TYPE (TYPE_NAME (newt))\n-\t    && newt != t\n-\t    && TYPE_NAME (newt) == TYPE_NAME (t))\n+\t    && newt != type\n+\t    && TYPE_NAME (newt) == TYPE_NAME (type))\n \t  TYPE_NAME (newt) = remap_decl (TYPE_NAME (newt), &id.cb);\n \n \twalk_tree (&val, copy_tree_body_r, &id.cb, NULL);"}]}