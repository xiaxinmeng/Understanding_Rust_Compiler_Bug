{"sha": "3a37ecec8934dc378bfce06d9ea2325a98159f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzN2VjZWM4OTM0ZGMzNzhiZmNlMDZkOWVhMjMyNWE5ODE1OWY0Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T10:51:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T10:51:22Z"}, "message": "[multiple changes]\n\n2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: sem_ch13.adb (Add_Predicates): Undo analysis\n\tof original expression in ASIS mode: does not solve the ASIS\n\tproblem of a usable type information, and crashes the back-end\n\twhen performing type annotations.\n\n2015-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_disp.adb (Inherited_Subprograms): Add One_Only parameter.\n\t(Is_Overriding_Subprogram): Use One_Only_Parameter.\n\t* sem_disp.ads (Inherited_Subprograms): Add One_Only parameter.\n\nFrom-SVN: r223686", "tree": {"sha": "cfcfd46ae07ec430218af91fe7169c3475ba2e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfcfd46ae07ec430218af91fe7169c3475ba2e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a37ecec8934dc378bfce06d9ea2325a98159f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a37ecec8934dc378bfce06d9ea2325a98159f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a37ecec8934dc378bfce06d9ea2325a98159f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a37ecec8934dc378bfce06d9ea2325a98159f43/comments", "author": null, "committer": null, "parents": [{"sha": "ad4ba28bb0d6acbd78ca6f2da71d987f6bd17ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4ba28bb0d6acbd78ca6f2da71d987f6bd17ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4ba28bb0d6acbd78ca6f2da71d987f6bd17ea6"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "24fc930bbcdce17bcb987264ecf4a3dadc09ba4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a37ecec8934dc378bfce06d9ea2325a98159f43", "patch": "@@ -1,3 +1,16 @@\n+2015-05-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: sem_ch13.adb (Add_Predicates): Undo analysis\n+\tof original expression in ASIS mode: does not solve the ASIS\n+\tproblem of a usable type information, and crashes the back-end\n+\twhen performing type annotations.\n+\n+2015-05-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_disp.adb (Inherited_Subprograms): Add One_Only parameter.\n+\t(Is_Overriding_Subprogram): Use One_Only_Parameter.\n+\t* sem_disp.ads (Inherited_Subprograms): Add One_Only parameter.\n+\n 2015-05-26  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_prag.adb, sem_ch3.adb, sem_ch5.adb, exp_ch11.adb, ghost.adb,"}, {"sha": "771398daca4a0fca14ef8af562fb208ce3f09b9a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3a37ecec8934dc378bfce06d9ea2325a98159f43", "patch": "@@ -8494,13 +8494,6 @@ package body Sem_Ch13 is\n \n                if Present (Asp) then\n \n-                  --  For ASIS use, perform semantic analysis of the original\n-                  --  predicate expression, which is otherwise not utilized.\n-\n-                  if ASIS_Mode then\n-                     Preanalyze_And_Resolve (Expression (Asp));\n-                  end if;\n-\n                   Set_Entity (Identifier (Asp), New_Copy_Tree (Arg2));\n                end if;\n "}, {"sha": "d61976e7cbe458d17c6843b1abbeb4282ca2a788", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=3a37ecec8934dc378bfce06d9ea2325a98159f43", "patch": "@@ -2061,7 +2061,8 @@ package body Sem_Disp is\n    function Inherited_Subprograms\n      (S               : Entity_Id;\n       No_Interfaces   : Boolean := False;\n-      Interfaces_Only : Boolean := False) return Subprogram_List\n+      Interfaces_Only : Boolean := False;\n+      One_Only        : Boolean := False) return Subprogram_List\n    is\n       Result : Subprogram_List (1 .. 6000);\n       --  6000 here is intended to be infinity. We could use an expandable\n@@ -2114,6 +2115,10 @@ package body Sem_Disp is\n \n                if Is_Subprogram_Or_Generic_Subprogram (Parent_Op) then\n                   Store_IS (Parent_Op);\n+\n+                  if One_Only then\n+                     goto Done;\n+                  end if;\n                end if;\n             end loop;\n          end if;\n@@ -2164,6 +2169,10 @@ package body Sem_Disp is\n                         --  We have found a primitive covered by S\n \n                         Store_IS (Interface_Alias (Prim));\n+\n+                        if One_Only then\n+                           goto Done;\n+                        end if;\n                      end if;\n \n                      Next_Elmt (Elmt);\n@@ -2173,6 +2182,8 @@ package body Sem_Disp is\n          end if;\n       end if;\n \n+      <<Done>>\n+\n       return Result (1 .. N);\n    end Inherited_Subprograms;\n \n@@ -2243,11 +2254,9 @@ package body Sem_Disp is\n    -- Is_Overriding_Subprogram --\n    ------------------------------\n \n-   --  Seems inefficient, build a whole list of subprograms to see if it\n-   --  is non-empty???\n-\n    function Is_Overriding_Subprogram (E : Entity_Id) return Boolean is\n-      Inherited : constant Subprogram_List := Inherited_Subprograms (E);\n+      Inherited : constant Subprogram_List :=\n+                    Inherited_Subprograms (E, One_Only => True);\n    begin\n       return Inherited'Length > 0;\n    end Is_Overriding_Subprogram;"}, {"sha": "e8cc6b72186de86a04daa86f2cb95ba12595fd39", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a37ecec8934dc378bfce06d9ea2325a98159f43/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=3a37ecec8934dc378bfce06d9ea2325a98159f43", "patch": "@@ -104,10 +104,11 @@ package Sem_Disp is\n    function Inherited_Subprograms\n      (S               : Entity_Id;\n       No_Interfaces   : Boolean := False;\n-      Interfaces_Only : Boolean := False) return Subprogram_List;\n+      Interfaces_Only : Boolean := False;\n+      One_Only        : Boolean := False) return Subprogram_List;\n    --  Given the spec of a subprogram, this function gathers any inherited\n-   --  subprograms from direct inheritance or via interfaces. The list is a\n-   --  list of entity id's of the specs of inherited subprograms. Returns a\n+   --  subprograms from direct inheritance or via interfaces. The result is an\n+   --  array of Entity_Ids of the specs of inherited subprograms. Returns a\n    --  null array if passed an Empty spec id. Note that the returned array\n    --  only includes subprograms and generic subprograms (and excludes any\n    --  other inherited entities, in particular enumeration literals). If\n@@ -117,6 +118,10 @@ package Sem_Disp is\n    --  come first, starting with the closest ancestors, and are followed by\n    --  subprograms inherited from interfaces. At most one of No_Interfaces\n    --  and Interfaces_Only should be True.\n+   --\n+   --  If One_Only is set, the search is discontinued as soon as one entry\n+   --  is found. In this case the resulting array is either null or contains\n+   --  exactly one element.\n \n    function Is_Dynamically_Tagged (N : Node_Id) return Boolean;\n    --  Used to determine whether a call is dispatching, i.e. if it is"}]}