{"sha": "c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0YjJhNGZiMzUyMjI1MmY1YWEwNDRmYjRjMmVmNmM3ODA5YzkyYg==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2015-06-29T00:15:41Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2015-06-29T00:15:41Z"}, "message": "re PR tree-optimization/64130 (vrp: handle non zero constant divided by range cannot be zero.)\n\ngcc/ChangeLog:\n\n2015-06-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/64130\n\t* tree-vrp.c (extract_range_from_binary_expr_1): For unsigned\n\tdivision, compute max and min when value ranges for dividend and\n\tdivisor are available.\n\n\ngcc/testsuite/ChangeLog:\n\n2015-06-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/64130\n\t* gcc.dg/tree-ssa/pr64130.c: New test.\n\nFrom-SVN: r225108", "tree": {"sha": "6ddf08cb993b1fa6c3529b9a573caabf1b9ac656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ddf08cb993b1fa6c3529b9a573caabf1b9ac656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/comments", "author": null, "committer": null, "parents": [{"sha": "1d1fe91a75df474462fdb46b921e0d20ef655864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1fe91a75df474462fdb46b921e0d20ef655864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1fe91a75df474462fdb46b921e0d20ef655864"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "239ea9e66c723d782b384552c77c476a2eebd20f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "patch": "@@ -1,3 +1,10 @@\n+2015-06-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/64130\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): For unsigned\n+\tdivision, compute max and min when value ranges for dividend and\n+\tdivisor are available.\n+\n 2015-06-28  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Sandra Loosemore <sandra@codesourcery.com>\n "}, {"sha": "fda80ddedbc19c99f3412908cb963ec056d7e323", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "patch": "@@ -1,3 +1,8 @@\n+2015-06-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/64130\n+\t* gcc.dg/tree-ssa/pr64130.c: New test.\n+\n 2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/pic-small.c: New testcase."}, {"sha": "0b254660c99d6f878db6025238df92fc1a6c45aa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr64130.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64130.c?ref=c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "patch": "@@ -0,0 +1,18 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int funsigned (unsigned a)\n+{\n+  return 0x1ffffffffL / a == 0;\n+}\n+\n+int funsigned2 (unsigned a)\n+{\n+  if (a < 1) return 1;\n+  return (-1 * 0x1ffffffffL) / a == 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \": \\\\\\[2, 8589934591\\\\\\]\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \": \\\\\\[-8589934591, -2\\\\\\]\" \"vrp1\" } } */\n+"}, {"sha": "ec6d2c3e139ee9ddf2c0e3041a6be4a4fc4eb2d4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c44b2a4fb3522252f5aa044fb4c2ef6c7809c92b", "patch": "@@ -3133,14 +3133,33 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t\t and all numbers from min to 0 for negative min.  */\n \t      cmp = compare_values (vr0.max, zero);\n \t      if (cmp == -1)\n-\t\tmax = zero;\n+\t\t{\n+\t\t  /* When vr0.max < 0, vr1.min != 0 and value\n+\t\t     ranges for dividend and divisor are available.  */\n+\t\t  if (vr1.type == VR_RANGE\n+\t\t      && !symbolic_range_p (&vr0)\n+\t\t      && !symbolic_range_p (&vr1)\n+\t\t      && !compare_values (vr1.min, zero))\n+\t\t    max = int_const_binop (code, vr0.max, vr1.min);\n+\t\t  else\n+\t\t    max = zero;\n+\t\t}\n \t      else if (cmp == 0 || cmp == 1)\n \t\tmax = vr0.max;\n \t      else\n \t\ttype = VR_VARYING;\n \t      cmp = compare_values (vr0.min, zero);\n \t      if (cmp == 1)\n-\t\tmin = zero;\n+\t\t{\n+\t\t  /* For unsigned division when value ranges for dividend\n+\t\t     and divisor are available.  */\n+\t\t  if (vr1.type == VR_RANGE\n+\t\t      && !symbolic_range_p (&vr0)\n+\t\t      && !symbolic_range_p (&vr1))\n+\t\t    min = int_const_binop (code, vr0.min, vr1.max);\n+\t\t  else\n+\t\t    min = zero;\n+\t\t}\n \t      else if (cmp == 0 || cmp == -1)\n \t\tmin = vr0.min;\n \t      else"}]}