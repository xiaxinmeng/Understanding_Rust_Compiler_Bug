{"sha": "69b8f2f943c302fcf0623d6b78d367d95d5450fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliOGYyZjk0M2MzMDJmY2YwNjIzZDZiNzhkMzY3ZDk1ZDU0NTBmZA==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2013-10-15T17:17:43Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2013-10-15T17:17:43Z"}, "message": "tree-vect-loop.c (vect_is_simple_reduction_1): Relax the requirement of the reduction pattern so that one operand of the ...\n\n2013-10-15  Cong Hou  <congh@google.com>\n\n        * tree-vect-loop.c (vect_is_simple_reduction_1): Relax the \n        requirement of the reduction pattern so that one operand of the \n        reduction operation can come from outside of the loop.\n\n2013-10-15  Cong Hou  <congh@google.com>\n\n        * gcc.dg/vect/vect-reduc-pattern-3.c: New test.\n\nFrom-SVN: r203625", "tree": {"sha": "a07346fb868983cc9fc591849d368b7924535e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a07346fb868983cc9fc591849d368b7924535e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b8f2f943c302fcf0623d6b78d367d95d5450fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b8f2f943c302fcf0623d6b78d367d95d5450fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b8f2f943c302fcf0623d6b78d367d95d5450fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b8f2f943c302fcf0623d6b78d367d95d5450fd/comments", "author": null, "committer": null, "parents": [{"sha": "09560e7f4dadaa207f8bc94a848811ae0bbf948f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09560e7f4dadaa207f8bc94a848811ae0bbf948f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09560e7f4dadaa207f8bc94a848811ae0bbf948f"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "7a7033aa5425288bd8ddf4a4b2835e05f020539a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69b8f2f943c302fcf0623d6b78d367d95d5450fd", "patch": "@@ -1,3 +1,9 @@\n+2013-10-15  Cong Hou  <congh@google.com>\n+\n+\t* tree-vect-loop.c (vect_is_simple_reduction_1): Relax the \n+\trequirement of the reduction pattern so that one operand of the \n+\treduction operation can come from outside of the loop.\n+\n 2013-10-15  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/neon-schedgen.ml: Remove."}, {"sha": "eb5eea2c80d2b8cfb06e2d6c28898c37a489cb63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69b8f2f943c302fcf0623d6b78d367d95d5450fd", "patch": "@@ -1,3 +1,7 @@\n+2013-10-15  Cong Hou  <congh@google.com>\n+\n+\t* gcc.dg/vect/vect-reduc-pattern-3.c: New test.\n+\n 2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58707"}, {"sha": "06a94168cd0f6e386cb155a9270fee1d8a00379e", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-3.c?ref=69b8f2f943c302fcf0623d6b78d367d95d5450fd", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 10\n+#define RES 1024\n+\n+/* A reduction pattern in which there is no data ref in\n+   the loop and one operand is defined outside of the loop.  */\n+\n+__attribute__ ((noinline)) int\n+foo (int v)\n+{\n+  int i;\n+  int result = 1;\n+\n+  ++v;\n+  for (i = 0; i < N; i++)\n+    result *= v;\n+\n+  return result;\n+}\n+\n+int\n+main (void)\n+{\n+  int res;\n+\n+  check_vect ();\n+\n+  res = foo (1);\n+  if (res != RES)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "d9125f690d2437229ca79a912805ed9226490446", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b8f2f943c302fcf0623d6b78d367d95d5450fd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=69b8f2f943c302fcf0623d6b78d367d95d5450fd", "patch": "@@ -2091,6 +2091,13 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n      a3 = ...\n      a2 = operation (a3, a1)\n \n+   or\n+\n+   a3 = ...\n+   loop_header:\n+     a1 = phi < a0, a2 >\n+     a2 = operation (a3, a1)\n+\n    such that:\n    1. operation is commutative and associative and it is safe to\n       change the order of the computation (if CHECK_REDUCTION is true)\n@@ -2451,6 +2458,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n   if (def2 && def2 == phi\n       && (code == COND_EXPR\n \t  || !def1 || gimple_nop_p (def1)\n+\t  || !flow_bb_inside_loop_p (loop, gimple_bb (def1))\n           || (def1 && flow_bb_inside_loop_p (loop, gimple_bb (def1))\n               && (is_gimple_assign (def1)\n \t\t  || is_gimple_call (def1)\n@@ -2469,6 +2477,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n   if (def1 && def1 == phi\n       && (code == COND_EXPR\n \t  || !def2 || gimple_nop_p (def2)\n+\t  || !flow_bb_inside_loop_p (loop, gimple_bb (def2))\n           || (def2 && flow_bb_inside_loop_p (loop, gimple_bb (def2))\n  \t      && (is_gimple_assign (def2)\n \t\t  || is_gimple_call (def2)"}]}