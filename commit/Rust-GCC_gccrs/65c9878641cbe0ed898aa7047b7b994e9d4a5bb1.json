{"sha": "65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjOTg3ODY0MWNiZTBlZDg5OGFhNzA0N2I3Yjk5NGU5ZDRhNWJiMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-23T16:37:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-23T16:37:58Z"}, "message": "AArch64: Implement missing p128<->f64 reinterpret intrinsics\n\nThis patch implements the missing reinterprets to and from poly128_t and\nfloat64x2_t.\nI've plugged in the appropriate testing in the advsimd-intrinsics.exp\ntoo.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\nTested advsimd-intrinsics.exp on arm-none-eabi too to make sure arm\ntesting isn't affected.\n\ngcc/\n\tPR target/71233\n\t* config/aarch64/arm_neon.h (vreinterpretq_f64_p128,\n\tvreinterpretq_p128_f64): Define.\n\ngcc/testsuite/\n\tPR target/71233\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(clean_results): Add float64x2_t cleanup.\n\t(DECL_VARIABLE_128BITS_VARIANTS): Add float64x2_t variable.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Add\n\ttesting of vreinterpretq_f64_p128, vreinterpretq_p128_f64.", "tree": {"sha": "4a39af264845c68e6229c250326bb577fa010cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a39af264845c68e6229c250326bb577fa010cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80ee302a8cfff18c5a14f5ca21b9ae35c4cab2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80ee302a8cfff18c5a14f5ca21b9ae35c4cab2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80ee302a8cfff18c5a14f5ca21b9ae35c4cab2e"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "9a970e7ed1e3c394e30ae1e2aade734d3d6fa483", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "patch": "@@ -6088,6 +6088,20 @@ vreinterpretq_u32_p128 (poly128_t __a)\n   return (uint32x4_t)__a;\n }\n \n+__extension__ extern __inline float64x2_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_f64_p128 (poly128_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute__  ((__always_inline__, __gnu_inline__, __artificial__))\n+vreinterpretq_p128_f64 (float64x2_t __a)\n+{\n+  return (poly128_t) __a;\n+}\n+\n /* vset_lane  */\n \n __extension__ extern __inline float16x4_t"}, {"sha": "791972c737e7605ed13ac973da07616a91222a27", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "patch": "@@ -460,6 +460,8 @@ static void clean_results (void)\n #endif\n   CLEAN(result, float, 32, 4);\n \n+  AARCH64_ONLY(CLEAN(result, float, 64, 2));\n+\n #if defined(__aarch64__)\n   /* On AArch64, make sure to return DefaultNaN to have the same\n      results as on AArch32.  */\n@@ -544,15 +546,17 @@ static void clean_results (void)\n   DECL_VARIABLE(VAR, poly, 16, 8);\t\t\\\n   DECL_VARIABLE_CRYPTO(VAR, poly, 64, 2);\t\\\n   DECL_VARIABLE(VAR, float, 16, 8);\t\t\\\n-  DECL_VARIABLE(VAR, float, 32, 4)\n+  DECL_VARIABLE(VAR, float, 32, 4);\t\t\\\n+  AARCH64_ONLY(DECL_VARIABLE(VAR, float, 64, 2))\n #else\n #define DECL_VARIABLE_128BITS_VARIANTS(VAR)\t\\\n   DECL_VARIABLE_128BITS_SIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE_128BITS_UNSIGNED_VARIANTS(VAR);\t\\\n   DECL_VARIABLE(VAR, poly, 8, 16);\t\t\\\n   DECL_VARIABLE(VAR, poly, 16, 8);\t\t\\\n   DECL_VARIABLE_CRYPTO(VAR, poly, 64, 2);\t\\\n-  DECL_VARIABLE(VAR, float, 32, 4)\n+  DECL_VARIABLE(VAR, float, 32, 4);\t\t\\\n+  AARCH64_ONLY(DECL_VARIABLE(VAR, float, 64, 2))\n #endif\n /* Declare all variants.  */\n #define DECL_VARIABLE_ALL_VARIANTS(VAR)\t\t\\"}, {"sha": "67f809c706516ee2d2f5d97ef7b70e2dfdab7595", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c9878641cbe0ed898aa7047b7b994e9d4a5bb1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c?ref=65c9878641cbe0ed898aa7047b7b994e9d4a5bb1", "patch": "@@ -33,6 +33,10 @@ VECT_VAR_DECL(vreint_expected_q_p128_f32,poly,64,2) [] = { 0xc1700000c1800000,\n \t\t\t\t\t\t\t   0xc1500000c1600000 };\n VECT_VAR_DECL(vreint_expected_q_p128_f16,poly,64,2) [] = { 0xca80cb00cb80cc00,\n \t\t\t\t\t\t\t   0xc880c900c980ca00 };\n+#ifdef __aarch64__\n+VECT_VAR_DECL(vreint_expected_q_p128_f64,poly,64,2) [] = { 0xc030000000000000,\n+\t\t\t\t\t\t\t   0xc02e000000000000 };\n+#endif\n \n /* Expected results: vreinterpretq_*_p128.  */\n VECT_VAR_DECL(vreint_expected_q_s8_p128,int,8,16) [] = { 0xf0, 0xff, 0xff, 0xff,\n@@ -75,6 +79,10 @@ VECT_VAR_DECL(vreint_expected_q_f16_p128,hfloat,16,8) [] = { 0xfff0, 0xffff,\n \t\t\t\t\t\t\t     0xffff, 0xffff,\n \t\t\t\t\t\t\t     0xfff1, 0xffff,\n \t\t\t\t\t\t\t     0xffff, 0xffff };\n+#ifdef __aarch64__\n+VECT_VAR_DECL(vreint_expected_q_f64_p128,hfloat,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t\t\t     0xfffffffffffffff1 };\n+#endif\n \n int main (void)\n {\n@@ -90,6 +98,10 @@ int main (void)\n #endif\n   VLOAD(vreint_vector, buffer, q, float, f, 32, 4);\n \n+#ifdef __aarch64__\n+  VLOAD(vreint_vector, buffer, q, float, f, 64, 2);\n+#endif\n+\n   /* vreinterpretq_p128_* tests.  */\n #undef TEST_MSG\n #define TEST_MSG \"VREINTERPRETQ_P128_*\"\n@@ -121,6 +133,10 @@ int main (void)\n #endif\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, float, f, 32, 4, vreint_expected_q_p128_f32);\n \n+#ifdef __aarch64__\n+  TEST_VREINTERPRET128(q, poly, p, 128, 1, float, f, 64, 2, vreint_expected_q_p128_f64);\n+#endif\n+\n   /* vreinterpretq_*_p128 tests.  */\n #undef TEST_MSG\n #define TEST_MSG \"VREINTERPRETQ_*_P128\"\n@@ -161,5 +177,8 @@ int main (void)\n #endif\n   TEST_VREINTERPRET_FP_FROM_P128(q, float, f, 32, 4, poly, p, 128, 1, vreint_expected_q_f32_p128);\n \n+#ifdef __aarch64__\n+  TEST_VREINTERPRET_FP_FROM_P128(q, float, f, 64, 2, poly, p, 128, 1, vreint_expected_q_f64_p128);\n+#endif\n   return 0;\n }"}]}