{"sha": "44571d6e4642d00a7adeb9564c838ac500eeabbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1NzFkNmU0NjQyZDAwYTdhZGViOTU2NGM4MzhhYzUwMGVlYWJiYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-11-27T02:34:15Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-11-27T02:34:15Z"}, "message": "pa-protos.h (function_value): New prototype.\n\n\t* pa-protos.h (function_value): New prototype.\n\t* pa.c (function_value): Use a PARALLEL to return small aggregates on\n\tTARGET_64BIT.\n\t* pa.h (FUNCTION_VALUE): Use function_value.\n\t* pa.md (call_value_internal_symref, call_value_internal_reg_64bit,\n\tcall_value_internal_reg, sibcall_value_internal_symref,\n\tsibcall_value_internal_symref_64bit): Remove =rf constraint on return\n\tvalue.\n\nFrom-SVN: r59555", "tree": {"sha": "5482bdf093f1e92f2e84261741b3eab84f78c930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5482bdf093f1e92f2e84261741b3eab84f78c930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44571d6e4642d00a7adeb9564c838ac500eeabbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44571d6e4642d00a7adeb9564c838ac500eeabbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44571d6e4642d00a7adeb9564c838ac500eeabbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44571d6e4642d00a7adeb9564c838ac500eeabbc/comments", "author": null, "committer": null, "parents": [{"sha": "084a11066f6825b040acb692ad1f17981a17f1f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084a11066f6825b040acb692ad1f17981a17f1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084a11066f6825b040acb692ad1f17981a17f1f6"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "306722191114bca8f6246006369b211aad1485b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44571d6e4642d00a7adeb9564c838ac500eeabbc", "patch": "@@ -1,3 +1,14 @@\n+2002-11-26  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa-protos.h (function_value): New prototype.\n+\t* pa.c (function_value): Use a PARALLEL to return small aggregates on\n+\tTARGET_64BIT.\n+\t* pa.h (FUNCTION_VALUE): Use function_value.\n+\t* pa.md (call_value_internal_symref, call_value_internal_reg_64bit,\n+\tcall_value_internal_reg, sibcall_value_internal_symref,\n+\tsibcall_value_internal_symref_64bit): Remove =rf constraint on return\n+\tvalue.\n+\n 2002-11-26  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* expr.c (gen_group_rtx, emit_group_move): New functions."}, {"sha": "8ea36f3a44e8617c13d3cf6c9a2c863f6bcfc576", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=44571d6e4642d00a7adeb9564c838ac500eeabbc", "patch": "@@ -158,6 +158,7 @@ extern int reloc_needed PARAMS ((tree));\n #ifdef RTX_CODE\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t tree, int, int));\n+extern rtx function_value PARAMS ((tree, tree));\n #endif\n extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t       enum machine_mode,"}, {"sha": "0d5f111a41a4fd2ac192acb3fd14e75d65401863", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=44571d6e4642d00a7adeb9564c838ac500eeabbc", "patch": "@@ -7677,6 +7677,57 @@ insn_refs_are_delayed (insn)\n \t   && get_attr_type (insn) == TYPE_MILLI));\n }\n \n+/* On the HP-PA the value is found in register(s) 28(-29), unless\n+   the mode is SF or DF. Then the value is returned in fr4 (32).\n+\n+   This must perform the same promotions as PROMOTE_MODE, else\n+   PROMOTE_FUNCTION_RETURN will not work correctly.\n+\n+   Small structures must be returned in a PARALLEL on PA64 in order\n+   to match the HP Compiler ABI.  */\n+\n+rtx\n+function_value (valtype, func)\n+    tree valtype;\n+    tree func ATTRIBUTE_UNUSED;\n+{\n+  enum machine_mode valmode;\n+\n+  /* Aggregates with a size less than or equal to 128 bits are returned\n+     in GR 28(-29).  They are left justified.  The pad bits are undefined.\n+     Larger aggregates are returned in memory.  */\n+  if (TARGET_64BIT && AGGREGATE_TYPE_P (valtype))\n+    {\n+      rtx loc[2];\n+      int i, offset = 0;\n+      int ub = int_size_in_bytes (valtype) <= UNITS_PER_WORD ? 1 : 2;\n+\n+      for (i = 0; i < ub; i++)\n+\t{\n+\t  loc[i] = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t      gen_rtx_REG (DImode, 28 + i),\n+\t\t\t\t      GEN_INT (offset));\n+\t  offset += 8;\n+\t}\n+\n+      return gen_rtx_PARALLEL (BLKmode, gen_rtvec_v (ub, loc));\n+    }\n+\n+  if ((INTEGRAL_TYPE_P (valtype)\n+       && TYPE_PRECISION (valtype) < BITS_PER_WORD)\n+      || POINTER_TYPE_P (valtype))\n+    valmode = word_mode;\n+  else\n+    valmode = TYPE_MODE (valtype);\n+\n+  if (TREE_CODE (valtype) == REAL_TYPE\n+      && TYPE_MODE (valtype) != TFmode\n+      && !TARGET_SOFT_FLOAT)\n+    return gen_rtx_REG (valmode, 32);\n+\n+  return gen_rtx_REG (valmode, 28);\n+}\n+\n /* Return the location of a parameter that is passed in a register or NULL\n    if the parameter has any component that is passed in memory.\n \n@@ -7813,12 +7864,10 @@ function_arg (cum, mode, type, named, incoming)\n \t     or returning a DImode REG results in left justified data.  */\n \t  if (mode == BLKmode)\n \t    {\n-\t      rtx loc[1];\n-\n-\t      loc[0] = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t  gen_rtx_REG (DImode, gpr_reg_base),\n-\t\t\t\t\t  const0_rtx);\n-\t      return gen_rtx_PARALLEL (mode, gen_rtvec_v (1, loc));\n+\t      rtx loc = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t   gen_rtx_REG (DImode, gpr_reg_base),\n+\t\t\t\t\t   const0_rtx);\n+\t      return gen_rtx_PARALLEL (mode, gen_rtvec (1, loc));\n \t    }\n \t}\n       else"}, {"sha": "fbbf18dfd25016b2fe976706c35b72bee230c388", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=44571d6e4642d00a7adeb9564c838ac500eeabbc", "patch": "@@ -730,19 +730,7 @@ extern struct rtx_def *hppa_pic_save_rtx PARAMS ((void));\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0.  */\n \n-/* On the HP-PA the value is found in register(s) 28(-29), unless\n-   the mode is SF or DF. Then the value is returned in fr4 (32).  */\n-\n-/* This must perform the same promotions as PROMOTE_MODE, else\n-   PROMOTE_FUNCTION_RETURN will not work correctly.  */\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n-  gen_rtx_REG (((INTEGRAL_TYPE_P (VALTYPE)\t\t\t\t\\\n-\t\t && TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\t\\\n-\t\t|| POINTER_TYPE_P (VALTYPE))\t\t\t\t\\\n-\t        ? word_mode : TYPE_MODE (VALTYPE),\t\t\t\\\n-\t       (TREE_CODE (VALTYPE) == REAL_TYPE\t\t\t\\\n-\t\t&& TYPE_MODE (VALTYPE) != TFmode\t\t\t\\\n-\t\t&& !TARGET_SOFT_FLOAT) ? 32 : 28)\n+#define FUNCTION_VALUE(VALTYPE, FUNC) function_value (VALTYPE, FUNC)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */"}, {"sha": "cd28ce82d2826516a7cecd9491bff1d76739252a", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44571d6e4642d00a7adeb9564c838ac500eeabbc/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=44571d6e4642d00a7adeb9564c838ac500eeabbc", "patch": "@@ -6121,7 +6121,7 @@\n }\")\n \n (define_insn \"call_value_internal_symref\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:SI 1))\n@@ -6138,7 +6138,7 @@\n    (set (attr \"length\") (symbol_ref \"attr_length_call (insn, 0)\"))])\n \n (define_insn \"call_value_internal_reg_64bit\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n+  [(set (match_operand 0 \"\" \"\")\n          (call (mem:SI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t       (match_operand 2 \"\" \"i\")))\n    (clobber (reg:SI 2))\n@@ -6154,7 +6154,7 @@\n    (set (attr \"length\") (const_int 12))])\n \n (define_insn \"call_value_internal_reg\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (reg:SI 22))\n \t      (match_operand 1 \"\" \"i\")))\n    (clobber (reg:SI 1))\n@@ -6376,7 +6376,7 @@\n }\")\n \n (define_insn \"sibcall_value_internal_symref\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:SI 1))\n@@ -6392,7 +6392,7 @@\n    (set (attr \"length\") (symbol_ref \"attr_length_call (insn, 1)\"))])\n \n (define_insn \"sibcall_value_internal_symref_64bit\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_operand_address\" \"\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (reg:SI 1))"}]}