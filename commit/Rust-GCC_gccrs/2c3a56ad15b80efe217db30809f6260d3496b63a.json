{"sha": "2c3a56ad15b80efe217db30809f6260d3496b63a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzYTU2YWQxNWI4MGVmZTIxN2RiMzA4MDlmNjI2MGQzNDk2YjYzYQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-12-27T23:34:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-27T23:34:14Z"}, "message": "flow.c (find_basic_blocks): Don't create a new basic block for calls in a LIBCALL block.\n\n \n        * flow.c (find_basic_blocks): Don't create a new basic block\n        for calls in a LIBCALL block.\n\nFrom-SVN: r17247", "tree": {"sha": "3450b3238e348a9bf8665d61cfa21618cf96a733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3450b3238e348a9bf8665d61cfa21618cf96a733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c3a56ad15b80efe217db30809f6260d3496b63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3a56ad15b80efe217db30809f6260d3496b63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3a56ad15b80efe217db30809f6260d3496b63a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3a56ad15b80efe217db30809f6260d3496b63a/comments", "author": null, "committer": null, "parents": [{"sha": "fc97718fe2a117455e63435b0803ab0c2e344e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc97718fe2a117455e63435b0803ab0c2e344e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc97718fe2a117455e63435b0803ab0c2e344e7b"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "05ecb58e73fa55e8a2debceb9af409fddea5a587", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3a56ad15b80efe217db30809f6260d3496b63a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3a56ad15b80efe217db30809f6260d3496b63a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c3a56ad15b80efe217db30809f6260d3496b63a", "patch": "@@ -1,3 +1,8 @@\n+Sun Dec 28 00:32:16 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flow.c (find_basic_blocks): Don't create a new basic block\n+\tfor calls in a LIBCALL block.\n+\n Sun Dec 28 00:30:24 1997  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* config/fp-bit.c (L_df_to_sf): Fix typo in last change."}, {"sha": "55516b4bdf61da2303e19269cf20d23f3eeb2c47", "filename": "gcc/flow.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3a56ad15b80efe217db30809f6260d3496b63a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3a56ad15b80efe217db30809f6260d3496b63a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=2c3a56ad15b80efe217db30809f6260d3496b63a", "patch": "@@ -284,6 +284,7 @@ flow_analysis (f, nregs, file)\n   register rtx insn;\n   register int i;\n   rtx nonlocal_label_list = nonlocal_label_rtx_list ();\n+  int in_libcall_block = 0;\n \n #ifdef ELIMINABLE_REGS\n   static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;\n@@ -312,6 +313,12 @@ flow_analysis (f, nregs, file)\n \n     for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n       {\n+\n+\t/* Track when we are inside in LIBCALL block.  */\n+\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t    && find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\t  in_libcall_block = 1;\n+\n \tcode = GET_CODE (insn);\n \tif (INSN_UID (insn) > max_uid_for_flow)\n \t  max_uid_for_flow = INSN_UID (insn);\n@@ -320,7 +327,7 @@ flow_analysis (f, nregs, file)\n \t\t&& (prev_code == JUMP_INSN\n \t\t    || (prev_code == CALL_INSN\n \t\t\t&& (nonlocal_label_list != 0 || eh_region)\n-\t\t\t&& ! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t\t\t&& ! in_libcall_block)\n \t\t    || prev_code == BARRIER)))\n \t  i++;\n \n@@ -333,6 +340,10 @@ flow_analysis (f, nregs, file)\n \t  ++eh_region;\n \telse if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n \t  --eh_region;\n+\n+\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t    && find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t  in_libcall_block = 0;\n       }\n   }\n \n@@ -389,6 +400,7 @@ find_basic_blocks (f, nonlocal_label_list)\n   rtx x, note, eh_note;\n   enum rtx_code prev_code, code;\n   int depth, pass;\n+  int in_libcall_block = 0;\n \n   pass = 1;\n   active_eh_handler = (rtx *) alloca ((max_uid_for_flow + 1) * sizeof (rtx));\n@@ -412,6 +424,12 @@ find_basic_blocks (f, nonlocal_label_list)\n   for (eh_note = NULL_RTX, insn = f, i = -1, prev_code = JUMP_INSN, depth = 1;\n        insn; insn = NEXT_INSN (insn))\n     {\n+\n+      /* Track when we are inside in LIBCALL block.  */\n+      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t  && find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\tin_libcall_block = 1;\n+\n       code = GET_CODE (insn);\n       if (code == NOTE)\n \t{\n@@ -427,7 +445,7 @@ find_basic_blocks (f, nonlocal_label_list)\n \t\t   && (prev_code == JUMP_INSN\n \t\t       || (prev_code == CALL_INSN\n \t\t\t   && (nonlocal_label_list != 0 || eh_note)\n-\t\t\t   && ! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t\t\t   && ! in_libcall_block)\n \t\t       || prev_code == BARRIER)))\n \t{\n \t  basic_block_head[++i] = insn;\n@@ -485,13 +503,17 @@ find_basic_blocks (f, nonlocal_label_list)\n       else if (eh_note\n \t       && (asynchronous_exceptions\n \t\t   || (GET_CODE (insn) == CALL_INSN\n-\t\t       && ! find_reg_note (insn, REG_RETVAL, NULL_RTX))))\n+\t\t       && ! in_libcall_block)))\n \tactive_eh_handler[INSN_UID (insn)] = XEXP (eh_note, 0);\n \n       BLOCK_NUM (insn) = i;\n \n       if (code != NOTE)\n \tprev_code = code;\n+\n+      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t  && find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\tin_libcall_block = 0;\n     }\n \n   /* During the second pass, `n_basic_blocks' is only an upper bound."}]}