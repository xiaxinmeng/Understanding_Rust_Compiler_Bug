{"sha": "85e50b6ba8ca2221593838878ab8d804b37faf44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlNTBiNmJhOGNhMjIyMTU5MzgzODg3OGFiOGQ4MDRiMzdmYWY0NA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-04-22T15:01:18Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-04-22T15:01:18Z"}, "message": "fold-const.c (fold_range_test): Use RANGE_TEST_NON_SHORT_CIRCUIT macro defaulting to original BRANCH_COST heuristic.\n\n        * fold-const.c (fold_range_test): Use RANGE_TEST_NON_SHORT_CIRCUIT\n        macro defaulting to original BRANCH_COST heuristic.\n        * doc/tm.texi (RANGE_TEST_NON_SHORT_CIRCUIT): Document.\n\n        * config/rs6000/rs6000.h (RANGE_TEST_NON_SHORT_CIRCUIT): Define.\n\nFrom-SVN: r65942", "tree": {"sha": "ee72cba827c7a86639b3c34912d8d1ba9c6e5d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee72cba827c7a86639b3c34912d8d1ba9c6e5d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85e50b6ba8ca2221593838878ab8d804b37faf44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e50b6ba8ca2221593838878ab8d804b37faf44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85e50b6ba8ca2221593838878ab8d804b37faf44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e50b6ba8ca2221593838878ab8d804b37faf44/comments", "author": null, "committer": null, "parents": [{"sha": "256c249cf916c692809166f946d5fb7926c3fa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256c249cf916c692809166f946d5fb7926c3fa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/256c249cf916c692809166f946d5fb7926c3fa40"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "722ce66ba2cf05572b3fd66184301cf3bd6662ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85e50b6ba8ca2221593838878ab8d804b37faf44", "patch": "@@ -1,3 +1,11 @@\n+2003-04-22  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* fold-const.c (fold_range_test): Use RANGE_TEST_NON_SHORT_CIRCUIT\n+\tmacro defaulting to original BRANCH_COST heuristic.\n+\t* doc/tm.texi (RANGE_TEST_NON_SHORT_CIRCUIT): Document.\n+\n+\t* config/rs6000/rs6000.h (RANGE_TEST_NON_SHORT_CIRCUIT): Define.\n+\n 2003-04-22  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/t-spe: Merge in t-fprules into file."}, {"sha": "994f67af8bee356bf35ea9cdd34205bb0d8e3310", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=85e50b6ba8ca2221593838878ab8d804b37faf44", "patch": "@@ -992,6 +992,10 @@ extern int rs6000_default_long_calls;\n \n #define BRANCH_COST 3\n \n+/* Override BRANCH_COST heuristic which empirically produces worse\n+   performance for fold_range_test().  */\n+\n+#define RANGE_TEST_NON_SHORT_CIRCUIT 0\n \n /* A fixed register used at prologue and epilogue generation to fix\n    addressing modes.  The SPE needs heavy addressing fixes at the last"}, {"sha": "88ad237291a1ae5d73783c76f87cf4a16bd9dc17", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=85e50b6ba8ca2221593838878ab8d804b37faf44", "patch": "@@ -5529,6 +5529,12 @@ function address than to call an address kept in a register.\n Define this macro if it is as good or better for a function to call\n itself with an explicit address than to call an address kept in a\n register.\n+\n+@findex RANGE_TEST_NON_SHORT_CIRCUIT\n+@item RANGE_TEST_NON_SHORT_CIRCUIT\n+Define this macro if a non-short-circuit operation produced by\n+@samp{fold_range_test ()} is optimal.  This macro defaults to true if\n+@code{BRANCH_COST} is greater than or equal to the value 2.\n @end table\n \n @deftypefn {Target Hook} bool TARGET_RTX_COSTS (rtx @var{x}, int @var{code}, int @var{outer_code}, int *@var{total})"}, {"sha": "eb65795e913e9eb6c3a6360568c3f393dc8beacb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85e50b6ba8ca2221593838878ab8d804b37faf44/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=85e50b6ba8ca2221593838878ab8d804b37faf44", "patch": "@@ -3414,6 +3414,10 @@ merge_ranges (pin_p, plow, phigh, in0_p, low0, high0, in1_p, low1, high1)\n   return 1;\n }\n \f\n+#ifndef RANGE_TEST_NON_SHORT_CIRCUIT\n+#define RANGE_TEST_NON_SHORT_CIRCUIT (BRANCH_COST >= 2)\n+#endif\n+\n /* EXP is some logical combination of boolean tests.  See if we can\n    merge it into some range test.  Return the new tree if so.  */\n \n@@ -3450,7 +3454,7 @@ fold_range_test (exp)\n   /* On machines where the branch cost is expensive, if this is a\n      short-circuited branch and the underlying object on both sides\n      is the same, make a non-short-circuit operation.  */\n-  else if (BRANCH_COST >= 2\n+  else if (RANGE_TEST_NON_SHORT_CIRCUIT\n \t   && lhs != 0 && rhs != 0\n \t   && (TREE_CODE (exp) == TRUTH_ANDIF_EXPR\n \t       || TREE_CODE (exp) == TRUTH_ORIF_EXPR)"}]}