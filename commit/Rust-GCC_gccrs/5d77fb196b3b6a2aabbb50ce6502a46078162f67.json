{"sha": "5d77fb196b3b6a2aabbb50ce6502a46078162f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3N2ZiMTk2YjNiNmEyYWFiYmI1MGNlNjUwMmE0NjA3ODE2MmY2Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-02-03T19:07:55Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-02-03T19:07:55Z"}, "message": "re PR c++/53017 (Integer constant expression not constant enough for vector_size)\n\n2014-02-03  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/53017\n\tPR c++/59211\ngcc/c-family/\n\t* c-common.c (handle_aligned_attribute, handle_alloc_size_attribute,\n\thandle_vector_size_attribute, handle_nonnull_attribute): Call\n\tdefault_conversion on the attribute argument.\n\t(handle_nonnull_attribute): Increment the argument number.\ngcc/cp/\n\t* tree.c (handle_init_priority_attribute): Call default_conversion on\n\tthe attribute argument.\ngcc/\n\t* doc/extend.texi (Function Attributes): Typo.\ngcc/testsuite/\n\t* c-c++-common/attributes-1.c: New testcase.\n\t* g++.dg/cpp0x/constexpr-attribute2.C: Likewise.\n\nFrom-SVN: r207436", "tree": {"sha": "ab881259a5ba57d9b1f3a45c2e5aedcfb8af1dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab881259a5ba57d9b1f3a45c2e5aedcfb8af1dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d77fb196b3b6a2aabbb50ce6502a46078162f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d77fb196b3b6a2aabbb50ce6502a46078162f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d77fb196b3b6a2aabbb50ce6502a46078162f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d77fb196b3b6a2aabbb50ce6502a46078162f67/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f344f525193bd4e271ea50c5eb7a4e92c57dbc67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f344f525193bd4e271ea50c5eb7a4e92c57dbc67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f344f525193bd4e271ea50c5eb7a4e92c57dbc67"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "cc69822342f06a52d19812a30b601ce5d53b4a71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -1,3 +1,9 @@\n+2014-02-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53017\n+\tPR c++/59211\n+\t* doc/extend.texi (Function Attributes): Typo.\n+\n 2014-02-03  Cong Hou  <congh@google.com>\n \n \tPR tree-optimization/60000"}, {"sha": "58dc42ca223e22c4754223d2d69575c3f90141d0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -1,3 +1,12 @@\n+2014-02-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53017\n+\tPR c++/59211\n+\t* c-common.c (handle_aligned_attribute, handle_alloc_size_attribute,\n+\thandle_vector_size_attribute, handle_nonnull_attribute): Call\n+\tdefault_conversion on the attribute argument.\n+\t(handle_nonnull_attribute): Increment the argument number.\n+\n 2014-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/59963"}, {"sha": "fc12788171cf3b79bf8a64321497971b735a67a7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -7526,10 +7526,18 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   tree decl = NULL_TREE;\n   tree *type = NULL;\n   int is_type = 0;\n-  tree align_expr = (args ? TREE_VALUE (args)\n-\t\t     : size_int (ATTRIBUTE_ALIGNED_VALUE / BITS_PER_UNIT));\n+  tree align_expr;\n   int i;\n \n+  if (args)\n+    {\n+      align_expr = TREE_VALUE (args);\n+      if (align_expr && TREE_CODE (align_expr) != IDENTIFIER_NODE)\n+\talign_expr = default_conversion (align_expr);\n+    }\n+  else\n+    align_expr = size_int (ATTRIBUTE_ALIGNED_VALUE / BITS_PER_UNIT);\n+\n   if (DECL_P (*node))\n     {\n       decl = *node;\n@@ -8023,6 +8031,9 @@ handle_alloc_size_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   for (; args; args = TREE_CHAIN (args))\n     {\n       tree position = TREE_VALUE (args);\n+      if (position && TREE_CODE (position) != IDENTIFIER_NODE\n+\t  && TREE_CODE (position) != FUNCTION_DECL)\n+\tposition = default_conversion (position);\n \n       if (TREE_CODE (position) != INTEGER_CST\n \t  || TREE_INT_CST_HIGH (position)\n@@ -8467,6 +8478,8 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;\n \n   size = TREE_VALUE (args);\n+  if (size && TREE_CODE (size) != IDENTIFIER_NODE)\n+    size = default_conversion (size);\n \n   if (!tree_fits_uhwi_p (size))\n     {\n@@ -8560,11 +8573,16 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n   /* Argument list specified.  Verify that each argument number references\n      a pointer argument.  */\n-  for (attr_arg_num = 1; args; args = TREE_CHAIN (args))\n+  for (attr_arg_num = 1; args; attr_arg_num++, args = TREE_CHAIN (args))\n     {\n       unsigned HOST_WIDE_INT arg_num = 0, ck_num;\n \n-      if (!get_nonnull_operand (TREE_VALUE (args), &arg_num))\n+      tree arg = TREE_VALUE (args);\n+      if (arg && TREE_CODE (arg) != IDENTIFIER_NODE\n+\t  && TREE_CODE (arg) != FUNCTION_DECL)\n+\targ = default_conversion (arg);\n+\n+      if (!get_nonnull_operand (arg, &arg_num))\n \t{\n \t  error (\"nonnull argument has invalid operand number (argument %lu)\",\n \t\t (unsigned long) attr_arg_num);"}, {"sha": "5214d9a91ac479c9445ac85fe0f44e93a588c34e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -1,3 +1,10 @@\n+2014-02-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53017\n+\tPR c++/59211\n+\t* tree.c (handle_init_priority_attribute): Call default_conversion on\n+\tthe attribute argument.\n+\n 2014-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58871"}, {"sha": "5567253a61a462416e8fcab3cbdcb1c6d3adef79", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -3250,6 +3250,7 @@ handle_init_priority_attribute (tree* node,\n   int pri;\n \n   STRIP_NOPS (initp_expr);\n+  initp_expr = default_conversion (initp_expr);\n \n   if (!initp_expr || TREE_CODE (initp_expr) != INTEGER_CST)\n     {"}, {"sha": "a42e90490c0b06bbf258d2b856c10f8edde4c971", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -2241,7 +2241,7 @@ For instance,\n \n @smallexample\n void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))\n-void my_realloc(void*, size_t) __attribute__((alloc_size(2)))\n+void* my_realloc(void*, size_t) __attribute__((alloc_size(2)))\n @end smallexample\n \n @noindent"}, {"sha": "b7c6252962a8723c181779ecca3a3c30e95078e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -1,3 +1,10 @@\n+2014-02-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53017\n+\tPR c++/59211\n+\t* c-c++-common/attributes-1.c: New testcase.\n+\t* g++.dg/cpp0x/constexpr-attribute2.C: Likewise.\n+\n 2014-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58871"}, {"sha": "af4dd12275c6441f4cc4e72765f02f0dfc8a9911", "filename": "gcc/testsuite/c-c++-common/attributes-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-prune-output \"undeclared here \\\\(not in a function\\\\)|\\[^\\n\\r\\]* was not declared in this scope\" } */\n+\n+void* my_calloc(unsigned, unsigned) __attribute__((alloc_size(1,bar))); /* { dg-warning \"outside range\" } */\n+void* my_realloc(void*, unsigned) __attribute__((alloc_size(bar))); /* { dg-warning \"outside range\" } */\n+\n+typedef char vec __attribute__((vector_size(bar))); /* { dg-warning \"ignored\" } */\n+\n+void f1(char*) __attribute__((nonnull(bar))); /* { dg-error \"invalid operand\" } */\n+void f2(char*) __attribute__((nonnull(1,bar))); /* { dg-error \"invalid operand\" } */\n+\n+void g() __attribute__((aligned(bar))); /* { dg-error \"invalid value|not an integer\" } */\n+\n+void foo(void);\n+void* my_calloc(unsigned, unsigned) __attribute__((alloc_size(1,foo))); /* { dg-warning \"outside range\" } */\n+void* my_realloc(void*, unsigned) __attribute__((alloc_size(foo))); /* { dg-warning \"outside range\" } */\n+\n+typedef char vec __attribute__((vector_size(foo))); /* { dg-warning \"ignored\" } */\n+\n+void f1(char*) __attribute__((nonnull(foo))); /* { dg-error \"invalid operand\" } */\n+void f2(char*) __attribute__((nonnull(1,foo))); /* { dg-error \"invalid operand\" } */\n+\n+void g() __attribute__((aligned(foo))); /* { dg-error \"invalid value|not an integer\" } */"}, {"sha": "755188ee0fb9af670baa483a97b52c6f63989011", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-attribute2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-attribute2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d77fb196b3b6a2aabbb50ce6502a46078162f67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-attribute2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-attribute2.C?ref=5d77fb196b3b6a2aabbb50ce6502a46078162f67", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options -std=gnu++11 }\n+\n+struct t { t(); };\n+\n+constexpr int prio = 123;\n+constexpr int size = 8;\n+constexpr int pos = 1;\n+enum A { zero = 0, one, two };\n+__attribute__((init_priority(prio))) t a;\n+\n+enum class E1 : int {\n+    first = 101,\n+    second,\n+    third,\n+};\n+__attribute__((init_priority(E1::second))) t b; // Should not compile?\n+\n+enum E2 {\n+    E2_first = 141,\n+    E2_second,\n+    E2_third,\n+};\n+__attribute__((init_priority(E2_second))) t c;\n+\n+void* my_calloc(unsigned, unsigned) __attribute__((alloc_size(pos,two)));\n+void* my_realloc(void*, unsigned) __attribute__((alloc_size(two)));\n+\n+typedef char vec __attribute__((vector_size(size)));\n+\n+void f(char*) __attribute__((nonnull(pos)));\n+\n+void g() __attribute__((aligned(size)));"}]}