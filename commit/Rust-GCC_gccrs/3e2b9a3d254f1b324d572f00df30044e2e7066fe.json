{"sha": "3e2b9a3d254f1b324d572f00df30044e2e7066fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyYjlhM2QyNTRmMWIzMjRkNTcyZjAwZGYzMDA0NGUyZTcwNjZmZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-06-10T14:55:48Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-06-10T14:55:48Z"}, "message": "Fix build failure when pointers smaller than integers.\n\n\t* expr.c (expand_builtin_setjmp): Store const1_rtx in target.\n\t(expand_builtin_longjmp): Abort if value isn't const1_rtx.\n\tDelete code storing value in static_chain_rtx.\n\t(expand_builtin, case BUILT_IN_LONGJMP): Pass NULL_RTX for target\n\tto second expand_expr call.\n\nFrom-SVN: r20418", "tree": {"sha": "5e912bfce9f9e65466ab5043ccc2d4eeeccdd870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e912bfce9f9e65466ab5043ccc2d4eeeccdd870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2b9a3d254f1b324d572f00df30044e2e7066fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2b9a3d254f1b324d572f00df30044e2e7066fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2b9a3d254f1b324d572f00df30044e2e7066fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2b9a3d254f1b324d572f00df30044e2e7066fe/comments", "author": null, "committer": null, "parents": [{"sha": "748b909e126096319530e14c3dd33546bfdc7391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748b909e126096319530e14c3dd33546bfdc7391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748b909e126096319530e14c3dd33546bfdc7391"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "ce4b84a3537c3f48b03dab9e24c12e4be9a7e405", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2b9a3d254f1b324d572f00df30044e2e7066fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2b9a3d254f1b324d572f00df30044e2e7066fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e2b9a3d254f1b324d572f00df30044e2e7066fe", "patch": "@@ -1,3 +1,11 @@\n+Wed Jun 10 14:52:27 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* expr.c (expand_builtin_setjmp): Store const1_rtx in target.\n+\t(expand_builtin_longjmp): Abort if value isn't const1_rtx.\n+\tDelete code storing value in static_chain_rtx.\n+\t(expand_builtin, case BUILT_IN_LONGJMP): Pass NULL_RTX for target\n+\tto second expand_expr call.\n+\n Wed Jun 10 13:08:41 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* mips/mips.c: Remove -mabi=o32 and -mabi=n64."}, {"sha": "06d9a4c818d64cb22cb4e6e4952d7cd114717be3", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2b9a3d254f1b324d572f00df30044e2e7066fe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2b9a3d254f1b324d572f00df30044e2e7066fe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3e2b9a3d254f1b324d572f00df30044e2e7066fe", "patch": "@@ -7897,7 +7897,7 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n       }\n \n   /* Set TARGET, and branch to the next-time-through label.  */\n-  emit_move_insn (target, gen_lowpart (GET_MODE (target), static_chain_rtx));\n+  emit_move_insn (target, const1_rtx);\n   emit_jump_insn (gen_jump (next_label));\n   emit_barrier ();\n \n@@ -7916,35 +7916,17 @@ expand_builtin_longjmp (buf_addr, value)\n #endif\n   buf_addr = force_reg (Pmode, buf_addr);\n \n-  /* The value sent by longjmp is not allowed to be zero.  Force it\n-     to one if so.  */\n-  if (GET_CODE (value) == CONST_INT)\n-    {\n-      if (INTVAL (value) == 0)\n-\tvalue = const1_rtx;\n-    }\n-  else\n-    {\n-      lab = gen_label_rtx ();\n-\n-      emit_cmp_insn (value, const0_rtx, NE, NULL_RTX, GET_MODE (value), 0, 0);\n-      emit_jump_insn (gen_bne (lab));\n-      emit_move_insn (value, const1_rtx);\n-      emit_label (lab);\n-    }\n-\n-  /* Make sure the value is in the right mode to be copied to the chain.  */\n-  if (GET_MODE (value) != VOIDmode)\n-    value = gen_lowpart (GET_MODE (static_chain_rtx), value);\n+  /* We used to store value in static_chain_rtx, but that fails if pointers\n+     are smaller than integers.  We instead require that the user must pass\n+     a second argument of 1, because that is what builtin_setjmp will\n+     return.  This also makes EH slightly more efficient, since we are no\n+     longer copying around a value that we don't care about.  */\n+  if (value != const1_rtx)\n+    abort ();\n \n #ifdef HAVE_builtin_longjmp\n   if (HAVE_builtin_longjmp)\n-    {\n-      /* Copy the \"return value\" to the static chain reg.  */\n-      emit_move_insn (static_chain_rtx, value);\n-      emit_insn (gen_rtx_USE (VOIDmode, static_chain_rtx));\n-      emit_insn (gen_builtin_longjmp (buf_addr));\n-    }\n+    emit_insn (gen_builtin_longjmp (buf_addr));\n   else\n #endif\n     {\n@@ -7959,21 +7941,20 @@ expand_builtin_longjmp (buf_addr, value)\n \t from expand_goto in stmt.c; see there for detailed comments.  */\n #if HAVE_nonlocal_goto\n       if (HAVE_nonlocal_goto)\n+\t/* We have to pass a value to the nonlocal_goto pattern that will\n+\t   get copied into the static_chain pointer, but it does not matter\n+\t   what that value is, because builtin_setjmp does not use it.  */\n \temit_insn (gen_nonlocal_goto (value, fp, stack, lab));\n       else\n #endif\n \t{\n \t  lab = copy_to_reg (lab);\n \n-\t  /* Copy the \"return value\" to the static chain reg.  */\n-\t  emit_move_insn (static_chain_rtx, value);\n-\n \t  emit_move_insn (hard_frame_pointer_rtx, fp);\n \t  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n \n \t  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n \t  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-\t  emit_insn (gen_rtx_USE (VOIDmode, static_chain_rtx));\n \t  emit_indirect_jump (lab);\n \t}\n     }\n@@ -8928,7 +8909,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  rtx buf_addr = expand_expr (TREE_VALUE (arglist), subtarget,\n \t\t\t\t      VOIDmode, 0);\n \t  rtx value = expand_expr (TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t\t   const0_rtx, VOIDmode, 0);\n+\t\t\t\t   NULL_RTX, VOIDmode, 0);\n \t  expand_builtin_longjmp (buf_addr, value);\n \t  return const0_rtx;\n \t}"}]}