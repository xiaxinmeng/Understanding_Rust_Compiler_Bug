{"sha": "a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjMTE5MzViMDEwZWU1NWY3Y2NkMTRkMjdmNjJjNmZiZWQzNzQ1ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-06T10:13:47Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-11-06T10:13:47Z"}, "message": "OpenACC (C/C++): Fix 'acc atomic' parsing\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_omp_atomic): Add openacc parameter and update\n\tOpenACC matching.\n\t(c_parser_omp_construct): Update call.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_omp_atomic): Add openacc parameter and update\n\tOpenACC matching.\n\t(cp_parser_omp_construct): Update call.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/goacc-gomp/atomic.c: New test.\n\t* c-c++-common/goacc/atomic.c: New test.", "tree": {"sha": "f1183d41725d18ca1ee0e5994fa96c5adce21d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1183d41725d18ca1ee0e5994fa96c5adce21d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebedfcd86aa5e3fc902fb442ce12c9d440c23c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebedfcd86aa5e3fc902fb442ce12c9d440c23c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebedfcd86aa5e3fc902fb442ce12c9d440c23c8"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "dedfb8472d0ebbf83f9121d1074d3d66033d56e9", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "patch": "@@ -17304,7 +17304,7 @@ c_parser_oacc_wait (location_t loc, c_parser *parser, char *p_name)\n   LOC is the location of the #pragma token.  */\n \n static void\n-c_parser_omp_atomic (location_t loc, c_parser *parser)\n+c_parser_omp_atomic (location_t loc, c_parser *parser, bool openacc)\n {\n   tree lhs = NULL_TREE, rhs = NULL_TREE, v = NULL_TREE;\n   tree lhs1 = NULL_TREE, rhs1 = NULL_TREE;\n@@ -17343,6 +17343,12 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t    new_code = OMP_ATOMIC;\n \t  else if (!strcmp (p, \"capture\"))\n \t    new_code = OMP_ATOMIC_CAPTURE_NEW;\n+\t  else if (openacc)\n+\t    {\n+\t      p = NULL;\n+\t      error_at (cloc, \"expected %<read%>, %<write%>, %<update%>, \"\n+\t\t\t      \"or %<capture%> clause\");\n+\t    }\n \t  else if (!strcmp (p, \"seq_cst\"))\n \t    new_memory_order = OMP_MEMORY_ORDER_SEQ_CST;\n \t  else if (!strcmp (p, \"acq_rel\"))\n@@ -17370,7 +17376,12 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t    {\n \t      if (new_code != ERROR_MARK)\n \t\t{\n-\t\t  if (code != ERROR_MARK)\n+\t\t  /* OpenACC permits 'update capture'.  */\n+\t\t  if (openacc\n+\t\t      && code == OMP_ATOMIC\n+\t\t      && new_code == OMP_ATOMIC_CAPTURE_NEW)\n+\t\t    code = new_code;\n+\t\t  else if (code != ERROR_MARK)\n \t\t    error_at (cloc, \"too many atomic clauses\");\n \t\t  else\n \t\t    code = new_code;\n@@ -17392,7 +17403,9 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \n   if (code == ERROR_MARK)\n     code = OMP_ATOMIC;\n-  if (memory_order == OMP_MEMORY_ORDER_UNSPECIFIED)\n+  if (openacc)\n+    memory_order = OMP_MEMORY_ORDER_RELAXED;\n+  else if (memory_order == OMP_MEMORY_ORDER_UNSPECIFIED)\n     {\n       omp_requires_mask\n \t= (enum omp_requires) (omp_requires_mask\n@@ -17448,6 +17461,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t  }\n \tbreak;\n       case OMP_ATOMIC:\n+     /* case OMP_ATOMIC_CAPTURE_NEW: - or update to OpenMP 5.1 */\n \tif (memory_order == OMP_MEMORY_ORDER_ACQ_REL\n \t    || memory_order == OMP_MEMORY_ORDER_ACQUIRE)\n \t  {\n@@ -21489,7 +21503,7 @@ c_parser_omp_construct (c_parser *parser, bool *if_p)\n   switch (p_kind)\n     {\n     case PRAGMA_OACC_ATOMIC:\n-      c_parser_omp_atomic (loc, parser);\n+      c_parser_omp_atomic (loc, parser, true);\n       return;\n     case PRAGMA_OACC_CACHE:\n       strcpy (p_name, \"#pragma acc\");\n@@ -21516,7 +21530,7 @@ c_parser_omp_construct (c_parser *parser, bool *if_p)\n       stmt = c_parser_oacc_wait (loc, parser, p_name);\n       break;\n     case PRAGMA_OMP_ATOMIC:\n-      c_parser_omp_atomic (loc, parser);\n+      c_parser_omp_atomic (loc, parser, false);\n       return;\n     case PRAGMA_OMP_CRITICAL:\n       stmt = c_parser_omp_critical (loc, parser, if_p);"}, {"sha": "f030cad18b2b429c7ffc4d2665d1052448fd01c4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "patch": "@@ -37994,7 +37994,7 @@ cp_parser_omp_structured_block (cp_parser *parser, bool *if_p)\n   where x and v are lvalue expressions with scalar type.  */\n \n static void\n-cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n+cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok, bool openacc)\n {\n   tree lhs = NULL_TREE, rhs = NULL_TREE, v = NULL_TREE, lhs1 = NULL_TREE;\n   tree rhs1 = NULL_TREE, orig_lhs;\n@@ -38029,6 +38029,12 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n \t    new_code = OMP_ATOMIC;\n \t  else if (!strcmp (p, \"capture\"))\n \t    new_code = OMP_ATOMIC_CAPTURE_NEW;\n+\t  else if (openacc)\n+\t    {\n+\t      p = NULL;\n+\t      error_at (cloc, \"expected %<read%>, %<write%>, %<update%>, \"\n+\t\t\t      \"or %<capture%> clause\");\n+\t    }\n \t  else if (!strcmp (p, \"seq_cst\"))\n \t    new_memory_order = OMP_MEMORY_ORDER_SEQ_CST;\n \t  else if (!strcmp (p, \"acq_rel\"))\n@@ -38056,7 +38062,12 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n \t    {\n \t      if (new_code != ERROR_MARK)\n \t\t{\n-\t\t  if (code != ERROR_MARK)\n+\t\t  /* OpenACC permits 'update capture'.  */\n+\t\t  if (openacc\n+\t\t      && code == OMP_ATOMIC\n+\t\t      && new_code == OMP_ATOMIC_CAPTURE_NEW)\n+\t\t    code = new_code;\n+\t\t  else if (code != ERROR_MARK)\n \t\t    error_at (cloc, \"too many atomic clauses\");\n \t\t  else\n \t\t    code = new_code;\n@@ -38078,7 +38089,9 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n \n   if (code == ERROR_MARK)\n     code = OMP_ATOMIC;\n-  if (memory_order == OMP_MEMORY_ORDER_UNSPECIFIED)\n+  if (openacc)\n+    memory_order = OMP_MEMORY_ORDER_RELAXED;\n+  else if (memory_order == OMP_MEMORY_ORDER_UNSPECIFIED)\n     {\n       omp_requires_mask\n \t= (enum omp_requires) (omp_requires_mask\n@@ -43517,7 +43530,7 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n   switch (cp_parser_pragma_kind (pragma_tok))\n     {\n     case PRAGMA_OACC_ATOMIC:\n-      cp_parser_omp_atomic (parser, pragma_tok);\n+      cp_parser_omp_atomic (parser, pragma_tok, true);\n       return;\n     case PRAGMA_OACC_CACHE:\n       stmt = cp_parser_oacc_cache (parser, pragma_tok);\n@@ -43552,7 +43565,7 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n       stmt = cp_parser_oacc_wait (parser, pragma_tok);\n       break;\n     case PRAGMA_OMP_ATOMIC:\n-      cp_parser_omp_atomic (parser, pragma_tok);\n+      cp_parser_omp_atomic (parser, pragma_tok, false);\n       return;\n     case PRAGMA_OMP_CRITICAL:\n       stmt = cp_parser_omp_critical (parser, pragma_tok, if_p);"}, {"sha": "4d18f238f3b9b5565a61c82879c4dd72d6ec1229", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/atomic.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fatomic.c?ref=a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fdump-tree-original\" } */\n+\n+#pragma omp requires atomic_default_mem_order(acq_rel)\n+\n+void\n+foo ()\n+{\n+  int i, v;\n+\n+#pragma omp atomic read\n+  i = v;\n+\n+#pragma acc atomic read\n+  i = v;\n+\n+#pragma omp atomic write\n+  i = v;\n+\n+#pragma acc atomic write\n+  i = v;\n+\n+#pragma omp atomic update\n+  i += 1;\n+\n+#pragma acc atomic update\n+  i += 1;\n+\n+#pragma omp atomic capture\n+  v = i += 1;\n+\n+#pragma acc atomic capture\n+  v = i += 1;\n+#pragma acc atomic update capture\n+  v = i += 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"i = #pragma omp atomic read acquire\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"i = #pragma omp atomic read relaxed\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp atomic release\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp atomic relaxed\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"v = #pragma omp atomic capture acq_rel\" 1  \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"v = #pragma omp atomic capture relaxed\" 2 \"original\" } } */"}, {"sha": "ff3b25e4b379771aa0a73c5db0a4be674356f5d1", "filename": "gcc/testsuite/c-c++-common/goacc/atomic.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c11935b010ee55f7ccd14d27f62c6fbed3745e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fatomic.c?ref=a2c11935b010ee55f7ccd14d27f62c6fbed3745e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+void\n+foo ()\n+{\n+  int i, v;\n+#pragma acc atomic read bar  /* { dg-error \"expected 'read', 'write', 'update', or 'capture' clause\" } */\n+  i = v;  /* { dg-error \"expected end of line before 'bar'\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc atomic read write  /* { dg-error \"too many atomic clauses\" } */\n+  i = v;\n+\n+#pragma acc atomic read seq_cst  /* { dg-error \"expected 'read', 'write', 'update', or 'capture' clause\" } */\n+  i = v;  /* { dg-error \"expected end of line before 'seq_cst'\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc atomic read relaxed  /* { dg-error \"expected 'read', 'write', 'update', or 'capture' clause\" } */\n+  i = v;  /* { dg-error \"expected end of line before 'relaxed'\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc atomic update hint(1)  /* { dg-error \"expected 'read', 'write', 'update', or 'capture' clause\" } */\n+  i += 1;  /* { dg-error \"expected end of line before 'hint'\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc atomic update update capture  /* { dg-error \"too many atomic clauses\" } */\n+  v = i += 1;\n+\n+#pragma acc atomic update capture capture  /* { dg-error \"too many atomic clauses\" } */\n+  v = i += 1;\n+\n+#pragma acc atomic write capture  /* { dg-error \"too many atomic clauses\" } */\n+  i = 1;\n+}"}]}