{"sha": "584ef5fea573e2e0966c068ec8c5dd6dce493663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg0ZWY1ZmVhNTczZTJlMDk2NmMwNjhlYzhjNWRkNmRjZTQ5MzY2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-04T01:14:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-04T01:14:16Z"}, "message": "c-decl.c (grokdeclarator): Give zero-length arrays size zero.\n\n        * c-decl.c (grokdeclarator): Give zero-length arrays size zero.\n        Remove dead code.\n        * c-typeck.c (push_init_level): Move checks for flexible array\n        members and zero length arrays ...\n        (pop_init_level): ... here.  Silently discard empty initializations.\n        Remove dead code.\n        * varasm.c (output_constructor): Update for sizeof change to\n        zero-length arrays.\n\n        * extend.texi (Zero Length): Clarify semantics.\n\n        * gcc.dg/940510-1.c: Update expected error wording.\n        * gcc.dg/array-2.c, gcc.dg/array-3.c, gcc.dg/array-4.c: New.\n\nFrom-SVN: r38678", "tree": {"sha": "cc93c1e7ae55e7da5ca7945790d3617cca46adb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc93c1e7ae55e7da5ca7945790d3617cca46adb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/584ef5fea573e2e0966c068ec8c5dd6dce493663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584ef5fea573e2e0966c068ec8c5dd6dce493663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584ef5fea573e2e0966c068ec8c5dd6dce493663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584ef5fea573e2e0966c068ec8c5dd6dce493663/comments", "author": null, "committer": null, "parents": [{"sha": "04d430b8d08ca8f243fa999257086178c88047b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d430b8d08ca8f243fa999257086178c88047b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d430b8d08ca8f243fa999257086178c88047b6"}], "stats": {"total": 185, "additions": 134, "deletions": 51}, "files": [{"sha": "ec1565dcd7511fc2cfa6468108c5b4c5c1e1201f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -1,3 +1,16 @@\n+2000-01-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Give zero-length arrays size zero.\n+\tRemove dead code.\n+\t* c-typeck.c (push_init_level): Move checks for flexible array\n+\tmembers and zero length arrays ...\n+\t(pop_init_level): ... here.  Silently discard empty initializations.\n+\tRemove dead code.\n+\t* varasm.c (output_constructor): Update for sizeof change to\n+\tzero-length arrays.\n+\n+\t* extend.texi (Zero Length): Clarify semantics.\n+\n 2001-01-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (tm.h): Include isns-codes.h last."}, {"sha": "826608ba4c19b7561550eb2e20f6623e947b5c00", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -4518,14 +4518,17 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  if (type_quals)\n \t    type = c_build_qualified_type (type, type_quals);\n \n-#if 0\n-\t  /* Don't clear these; leave them set so that the array type\n-\t     or the variable is itself const or volatile.  */\n-\t  type_quals = TYPE_UNQUALIFIED;\n-#endif\n-\n \t  if (size_varies)\n \t    C_TYPE_VARIABLE_SIZE (type) = 1;\n+\n+\t  /* The GCC extension for zero-length arrays differs from\n+\t     ISO flexible array members in that sizeof yields zero.  */\n+\t  if (size && integer_zerop (size))\n+\t    {\n+\t      layout_type (type);\n+\t      TYPE_SIZE (type) = bitsize_zero_node;\n+\t      TYPE_SIZE_UNIT (type) = size_zero_node;\n+\t    }\n \t}\n       else if (TREE_CODE (declarator) == CALL_EXPR)\n \t{"}, {"sha": "6a57eed24bdb1aac23f23a94d366b45595a18e59", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -1,6 +1,6 @@\n /* Build expressions with type checking for C compiler.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -5289,20 +5289,9 @@ push_init_level (implicit)\n \t{\n \t  constructor_max_index\n \t    = TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type));\n-\n-\t  if (constructor_max_index == NULL_TREE)\n-\t    {\n-\t      /* This is a zero-length array or flexible array member.  */\n-\t      if (pedantic)\n-\t\tpedwarn_init (\"ISO C does not support initialization of flexible array members\");\n-\t      if (constructor_depth != 2)\n-\t\terror_init (\"initialization of zero-length array inside a nested structure\");\n-\t    }\n-\n \t  constructor_index\n \t    = convert (bitsizetype, \n-\t\t\t\t  TYPE_MIN_VALUE\n-\t\t\t\t  (TYPE_DOMAIN (constructor_type)));\n+\t\t       TYPE_MIN_VALUE (TYPE_DOMAIN (constructor_type)));\n \t}\n       else\n \tconstructor_index = bitsize_zero_node;\n@@ -5346,6 +5335,24 @@ pop_init_level (implicit)\n   if (constructor_type != 0)\n     size = int_size_in_bytes (constructor_type);\n \n+  /* Error for initializing a flexible array member, or a zero-length\n+     array member in an inappropriate context.  */\n+  if (constructor_type\n+      && TREE_CODE (constructor_type) == ARRAY_TYPE\n+      && TYPE_DOMAIN (constructor_type)\n+      && ! TYPE_MAX_VALUE (TYPE_DOMAIN (constructor_type)))\n+    {\n+      if (! TYPE_SIZE (constructor_type))\n+\terror_init (\"initialization of a flexible array member\");\n+      /* Silently discard empty initializations of zero-length arrays.  */\n+      else if (integer_zerop (constructor_unfilled_index))\n+\tconstructor_type = 0;\n+      /* Otherwise we must be initializing a member of a top-level\n+\t structure.  */\n+      else if (constructor_depth != 2)\n+\terror_init (\"initialization of zero-length array inside a nested structure\");\n+    }\n+\n   /* Warn when some struct elements are implicitly initialized to zero.  */\n   if (extra_warnings\n       && constructor_type\n@@ -5360,17 +5367,7 @@ pop_init_level (implicit)\n   /* Now output all pending elements.  */\n   output_pending_init_elements (1);\n \n-#if 0 /* c-parse.in warns about {}.  */\n-  /* In ANSI, each brace level must have at least one element.  */\n-  if (! implicit && pedantic\n-      && (TREE_CODE (constructor_type) == ARRAY_TYPE\n-\t  ? integer_zerop (constructor_unfilled_index)\n-\t  : constructor_unfilled_fields == TYPE_FIELDS (constructor_type)))\n-    pedwarn_init (\"empty braces in initializer\");\n-#endif\n-\n   /* Pad out the end of the structure.  */\n-  \n   if (p->replacement_value)\n     /* If this closes a superfluous brace pair,\n        just pass out the element between them.  */"}, {"sha": "1a0b0e14c733abcdbbf5f0d008d770c6b4967dff", "filename": "gcc/extend.texi", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -869,8 +869,8 @@ extension for floating-point constants of type @code{float}.\n @cindex zero-length arrays\n @cindex length-zero arrays\n \n-Zero-length arrays are allowed in GNU C.  They are very useful as the last\n-element of a structure which is really a header for a variable-length\n+Zero-length arrays are allowed in GNU C.  They are very useful as the\n+last element of a structure which is really a header for a variable-length\n object:\n \n @example\n@@ -879,32 +879,54 @@ struct line @{\n   char contents[0];\n @};\n \n-@{\n-  struct line *thisline = (struct line *)\n-    malloc (sizeof (struct line) + this_length);\n-  thisline->length = this_length;\n-@}\n+struct line *thisline = (struct line *)\n+  malloc (sizeof (struct line) + this_length);\n+thisline->length = this_length;\n @end example\n \n In ISO C89, you would have to give @code{contents} a length of 1, which\n means either you waste space or complicate the argument to @code{malloc}.\n \n-In ISO C99, you would use a @dfn{flexible array member}, which uses a\n-slightly different syntax: leave out the @code{0} and write\n-@code{contents[]}.\n+In ISO C99, you would use a @dfn{flexible array member}, which is \n+slightly different in syntax and semantics:\n+\n+@itemize @bullet\n+@item\n+Flexible array members are written as @code{contents[]} without\n+the @code{0}.\n+\n+@item\n+Flexible array members have incomplete type, and so the @code{sizeof}\n+operator may not be applied.  As a quirk of the original implementation\n+of zero-length arrays, @code{sizeof} evaluates to zero.\n+\n+@item\n+Flexible array members may only appear as the last member of a\n+@code{struct} that is otherwise non-empty.  GCC currently allows \n+zero-length arrays anywhere.  You may encounter problems, however,\n+defining structures containing only a zero-length array.  Such usage\n+is deprecated, and we recommend using zero-length arrays only in\n+places in which flexible array members would be allowed.\n \n-GCC allows static initialization of the zero-length array if\n-the structure is not nested inside another structure.  I.e.\n+@item\n+GCC allows static initialization of the zero-length array if the structure\n+is not nested inside another structure.  In addition, for backward\n+compatibility with an earlier versions of gcc, we allow a degenerate empty\n+initialization when nested inside another structure.  I.e.\n \n @example\n+struct bar @{ struct line a; @};\n+\n /* Legal.  */\n struct line x = @{ 4, @{ 'g', 'o', 'o', 'd' @} @};\n \n /* Illegal.  */\n-struct bar @{\n-  struct line a;\n-@} y = @{ @{ 3, @{ 'b', 'a', 'd' @} @} @};\n+struct bar y = @{ @{ 3, @{ 'b', 'a', 'd' @} @} @};\n+\n+/* Legal.  */\n+struct bar z = @{ @{ 0, @{ @} @} @};\n @end example\n+@end itemize\n \n @node Variable Length\n @section Arrays of Variable Length"}, {"sha": "204efd1cc3f3e58551a4198120d9bbb66d8006d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -1,3 +1,8 @@\n+2001-01-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/940510-1.c: Update expected error wording.\n+\t* gcc.dg/array-2.c, gcc.dg/array-3.c, gcc.dg/array-4.c: New.\n+\n 2001-01-03  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* lib/target-supports.exp (check_alias_available): Modified to"}, {"sha": "a734c8f80d7679affba14422f0a69123db2bc943", "filename": "gcc/testsuite/gcc.dg/940510-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F940510-1.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=c89 -pedantic\" } */\n-struct { int a[]; } x = { 0 };\t/* { dg-error \"(does not support)|(near initialization)\" } */\n+struct { int a[]; } x = { 0 };\t/* { dg-error \"(flexible array member)|(near initialization)\" } */"}, {"sha": "aa6f0c67397e440a0c4978c4d4bbf95e7b3a5575", "filename": "gcc/testsuite/gcc.dg/array-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-2.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Verify that we can't do things to get ourselves in trouble\n+   with GCC's zero-length array extension.  */\n+\n+struct f { int w; int x[0]; };\n+struct g { struct f f; };\n+struct g g1 = { { 0, { } } };\n+struct g g2 = { { 0, { 1 } } }; /* { dg-error \"(nested structure)|(near initialization)\" \"nested\" } */"}, {"sha": "f0709d22064b8143f3e12bc67e46eab140e65fce", "filename": "gcc/testsuite/gcc.dg/array-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-3.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* ISO C99 flexible array members don't have a size.  GCC's zero-length\n+   array extension does.  */\n+\n+struct f { int w; int x[0]; } f;\n+struct g { int w; int x[]; } g;\n+\n+char test_gcc[sizeof (f.x) ? -1 : 1];\n+char test_iso[sizeof (g.x) ? -1 : 1]; /* { dg-error \"incomplete type\" \"iso\" } */"}, {"sha": "9396dec3aa7041c3bad6dd47a6b7c3e7f8487b36", "filename": "gcc/testsuite/gcc.dg/array-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-4.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+/* Verify that GCC's extension to initialize a zero-length array\n+   member works properly.  */\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+struct f { int w; int x[0]; } f = { 4, { 0, 1, 2, 3 } };\n+\n+int main()\n+{\n+  int i;\n+  for (i = 0; i < f.w; ++i)\n+    if (f.x[i] != i)\n+      abort ();\n+  exit(0);\n+}"}, {"sha": "b87d9beeaca443200fac8085616df95f6f1af388", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584ef5fea573e2e0966c068ec8c5dd6dce493663/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=584ef5fea573e2e0966c068ec8c5dd6dce493663", "patch": "@@ -1,6 +1,6 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4607,16 +4607,19 @@ output_constructor (exp, size)\n \t  /* Determine size this element should occupy.  */\n \t  if (field)\n \t    {\n-\t      if (DECL_SIZE_UNIT (field))\n+\t      if (DECL_SIZE_UNIT (field)\n+\t\t  && ! integer_zerop (DECL_SIZE_UNIT (field)))\n \t\tfieldsize = tree_low_cst (DECL_SIZE_UNIT (field), 1);\n-\t      else\n+\t      else if (TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE)\n \t\t{\n-\t\t  /* If DECL_SIZE is not set, then this must be an array\n-\t\t     of unspecified length.  The initialized value must\n-\t\t     be a CONSTRUCTOR, and we take the length from the\n+\t\t  /* If DECL_SIZE is not set or is zero, then this must be\n+\t\t     an array of unspecified length.  The initialized value\n+\t\t     must be a CONSTRUCTOR, and we take the length from the\n \t\t     last initialized element.  */\n \t\t  fieldsize = array_size_for_constructor (val);\n \t\t}\n+\t      else\n+\t\tfieldsize = 0;\n \t    }\n \t  else\n \t    fieldsize = int_size_in_bytes (TREE_TYPE (type));"}]}