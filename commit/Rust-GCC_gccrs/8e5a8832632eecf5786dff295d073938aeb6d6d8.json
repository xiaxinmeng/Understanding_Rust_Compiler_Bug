{"sha": "8e5a8832632eecf5786dff295d073938aeb6d6d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1YTg4MzI2MzJlZWNmNTc4NmRmZjI5NWQwNzM5MzhhZWI2ZDZkOA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-06-27T15:03:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-20T12:31:35Z"}, "message": "[Ada] Clean up Uint fields, remove unused routines\n\ngcc/ada/\n\n\t* einfo-utils.ads, einfo-utils.adb, fe.h, einfo.ads,\n\tgen_il-fields.ads: Remove unused and no-longer-used routines.\n\tMove related routines together.  Rewrite incorrect\n\tdocumentation, and documentation that will be incorrect when\n\te.g. Esize-related routines are fixed.  Remove unused field\n\tNormalized_Position_Max.\n\t* cstand.adb, exp_pakd.adb, freeze.adb,\n\tgen_il-gen-gen_entities.adb, itypes.adb, layout.adb,\n\tsem_ch10.adb, sem_ch12.adb, sem_ch13.adb, sem_ch3.adb,\n\tsem_ch7.adb, sem_ch8.adb, sem_ch9.adb, sem_prag.adb,\n\tsem_util.adb, ttypes.ads: Update calls to routines removed from\n\tor renamed in Einfo.Utils.\n\t* uintp.ads (Upos): Fix this subtype, which was unintentionally\n\tdeclared to include Uint_0.", "tree": {"sha": "151ee136e01c3cd355f2094f034674a75fabf25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151ee136e01c3cd355f2094f034674a75fabf25b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e5a8832632eecf5786dff295d073938aeb6d6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5a8832632eecf5786dff295d073938aeb6d6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5a8832632eecf5786dff295d073938aeb6d6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5a8832632eecf5786dff295d073938aeb6d6d8/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97dd2ae763d8c1e78c3b82fc2add4c078fb2357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97dd2ae763d8c1e78c3b82fc2add4c078fb2357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97dd2ae763d8c1e78c3b82fc2add4c078fb2357"}], "stats": {"total": 810, "additions": 325, "deletions": 485}, "files": [{"sha": "e65751acce89c9b40bbb88e6caaba8bac92f430d", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -205,7 +205,7 @@ package body CStand is\n \n       Mutate_Ekind                   (E, E_Floating_Point_Type);\n       Set_Etype                      (E, E);\n-      Init_Digits_Value              (E, Digs);\n+      Set_Digits_Value               (E, UI_From_Int (Digs));\n       Set_Float_Rep                  (E, Rep);\n       Init_Size                      (E, Siz);\n       Set_Elem_Alignment             (E, Align);\n@@ -578,6 +578,8 @@ package body CStand is\n          Set_Has_Pragma_Pack (String_Type, True);\n       end Pack_String_Type;\n \n+      Char_Size : constant Unat := UI_From_Int (Standard_Character_Size);\n+\n    --  Start of processing for Create_Standard\n \n    begin\n@@ -652,8 +654,8 @@ package body CStand is\n       Mutate_Ekind       (Standard_Boolean, E_Enumeration_Type);\n       Set_First_Literal  (Standard_Boolean, Standard_False);\n       Set_Etype          (Standard_Boolean, Standard_Boolean);\n-      Init_Esize         (Standard_Boolean, Standard_Character_Size);\n-      Init_RM_Size       (Standard_Boolean, 1);\n+      Set_Esize          (Standard_Boolean, Char_Size);\n+      Set_RM_Size        (Standard_Boolean, Uint_1);\n       Set_Elem_Alignment (Standard_Boolean);\n \n       Set_Is_Unsigned_Type           (Standard_Boolean);\n@@ -757,8 +759,8 @@ package body CStand is\n \n       Mutate_Ekind       (Standard_Character, E_Enumeration_Type);\n       Set_Etype          (Standard_Character, Standard_Character);\n-      Init_Esize         (Standard_Character, Standard_Character_Size);\n-      Init_RM_Size       (Standard_Character, 8);\n+      Set_Esize          (Standard_Character, Char_Size);\n+      Set_RM_Size        (Standard_Character, Uint_8);\n       Set_Elem_Alignment (Standard_Character);\n \n       Set_Has_Pragma_Ordered         (Standard_Character);\n@@ -912,7 +914,7 @@ package body CStand is\n       Set_Etype           (Standard_String, Standard_String);\n       Set_Component_Type  (Standard_String, Standard_Character);\n       Set_Component_Size  (Standard_String, Uint_8);\n-      Init_Size_Align     (Standard_String);\n+      Reinit_Size_Align   (Standard_String);\n       Set_Alignment       (Standard_String, Uint_1);\n       Pack_String_Type    (Standard_String);\n \n@@ -956,7 +958,7 @@ package body CStand is\n       Set_Etype           (Standard_Wide_String, Standard_Wide_String);\n       Set_Component_Type  (Standard_Wide_String, Standard_Wide_Character);\n       Set_Component_Size  (Standard_Wide_String, Uint_16);\n-      Init_Size_Align     (Standard_Wide_String);\n+      Reinit_Size_Align   (Standard_Wide_String);\n       Pack_String_Type    (Standard_Wide_String);\n \n       --  Set index type of Wide_String\n@@ -993,7 +995,7 @@ package body CStand is\n       Set_Component_Type   (Standard_Wide_Wide_String,\n                             Standard_Wide_Wide_Character);\n       Set_Component_Size   (Standard_Wide_Wide_String, Uint_32);\n-      Init_Size_Align      (Standard_Wide_Wide_String);\n+      Reinit_Size_Align    (Standard_Wide_Wide_String);\n       Set_Is_Ada_2005_Only (Standard_Wide_Wide_String);\n       Pack_String_Type     (Standard_Wide_Wide_String);\n \n@@ -1009,10 +1011,10 @@ package body CStand is\n \n       --  Setup entity for Natural\n \n-      Mutate_Ekind       (Standard_Natural, E_Signed_Integer_Subtype);\n-      Set_Etype          (Standard_Natural, Base_Type (Standard_Integer));\n-      Init_Esize         (Standard_Natural, Standard_Integer_Size);\n-      Init_RM_Size       (Standard_Natural, Standard_Integer_Size - 1);\n+      Mutate_Ekind (Standard_Natural, E_Signed_Integer_Subtype);\n+      Set_Etype (Standard_Natural, Base_Type (Standard_Integer));\n+      Set_Esize (Standard_Natural, UI_From_Int (Standard_Integer_Size));\n+      Set_RM_Size  (Standard_Natural, UI_From_Int (Standard_Integer_Size - 1));\n       Set_Elem_Alignment (Standard_Natural);\n       Set_Size_Known_At_Compile_Time\n                          (Standard_Natural);\n@@ -1024,10 +1026,11 @@ package body CStand is\n \n       --  Setup entity for Positive\n \n-      Mutate_Ekind       (Standard_Positive, E_Signed_Integer_Subtype);\n-      Set_Etype          (Standard_Positive, Base_Type (Standard_Integer));\n-      Init_Esize         (Standard_Positive, Standard_Integer_Size);\n-      Init_RM_Size       (Standard_Positive, Standard_Integer_Size - 1);\n+      Mutate_Ekind (Standard_Positive, E_Signed_Integer_Subtype);\n+      Set_Etype (Standard_Positive, Base_Type (Standard_Integer));\n+      Set_Esize  (Standard_Positive, UI_From_Int (Standard_Integer_Size));\n+      Set_RM_Size\n+        (Standard_Positive, UI_From_Int (Standard_Integer_Size - 1));\n       Set_Elem_Alignment (Standard_Positive);\n \n       Set_Size_Known_At_Compile_Time (Standard_Positive);\n@@ -1132,7 +1135,7 @@ package body CStand is\n          Init_Size   (Standard_A_String, System_Address_Size * 2);\n       end if;\n \n-      Init_Alignment (Standard_A_String);\n+      pragma Assert (not Known_Alignment (Standard_A_String));\n \n       Set_Directly_Designated_Type\n                      (Standard_A_String, Standard_String);\n@@ -1156,14 +1159,16 @@ package body CStand is\n       Mutate_Ekind (Standard_Debug_Renaming_Type, E_Signed_Integer_Subtype);\n       Set_Scope (Standard_Debug_Renaming_Type, Standard_Standard);\n       Set_Etype (Standard_Debug_Renaming_Type, Base_Type (Standard_Integer));\n-      Init_Esize          (Standard_Debug_Renaming_Type, 0);\n-      Init_RM_Size        (Standard_Debug_Renaming_Type, 0);\n+      pragma Assert\n+        (Field_Is_Initial_Zero (Standard_Debug_Renaming_Type, F_Esize));\n+      pragma Assert\n+        (Field_Is_Initial_Zero (Standard_Debug_Renaming_Type, F_RM_Size));\n       Set_Size_Known_At_Compile_Time (Standard_Debug_Renaming_Type);\n-      Set_Integer_Bounds  (Standard_Debug_Renaming_Type,\n-        Typ => Base_Type  (Standard_Debug_Renaming_Type),\n+      Set_Integer_Bounds (Standard_Debug_Renaming_Type,\n+        Typ => Base_Type (Standard_Debug_Renaming_Type),\n         Lb  => Uint_1,\n         Hb  => Uint_0);\n-      Set_Is_Constrained  (Standard_Debug_Renaming_Type);\n+      Set_Is_Constrained (Standard_Debug_Renaming_Type);\n       Set_Has_Size_Clause (Standard_Debug_Renaming_Type);\n \n       --  Note on type names. The type names for the following special types\n@@ -1186,8 +1191,8 @@ package body CStand is\n       Mutate_Ekind          (Any_Id, E_Variable);\n       Set_Scope             (Any_Id, Standard_Standard);\n       Set_Etype             (Any_Id, Any_Type);\n-      Init_Esize            (Any_Id);\n-      Init_Alignment        (Any_Id);\n+      pragma Assert (not Known_Esize (Any_Id));\n+      pragma Assert (not Known_Alignment (Any_Id));\n \n       Any_Access := New_Standard_Entity (\"an access type\");\n       Mutate_Ekind          (Any_Access, E_Access_Type);\n@@ -1204,8 +1209,8 @@ package body CStand is\n       Set_Etype             (Any_Character, Any_Character);\n       Set_Is_Unsigned_Type  (Any_Character);\n       Set_Is_Character_Type (Any_Character);\n-      Init_Esize            (Any_Character, Standard_Character_Size);\n-      Init_RM_Size          (Any_Character, 8);\n+      Set_Esize             (Any_Character, Char_Size);\n+      Set_RM_Size           (Any_Character, Uint_8);\n       Set_Elem_Alignment    (Any_Character);\n       Set_Scalar_Range      (Any_Character, Scalar_Range (Standard_Character));\n \n@@ -1214,15 +1219,15 @@ package body CStand is\n       Set_Scope             (Any_Array, Standard_Standard);\n       Set_Etype             (Any_Array, Any_Array);\n       Set_Component_Type    (Any_Array, Any_Character);\n-      Init_Size_Align       (Any_Array);\n+      Reinit_Size_Align     (Any_Array);\n       Make_Dummy_Index      (Any_Array);\n \n       Any_Boolean := New_Standard_Entity (\"a boolean type\");\n       Mutate_Ekind          (Any_Boolean, E_Enumeration_Type);\n       Set_Scope             (Any_Boolean, Standard_Standard);\n       Set_Etype             (Any_Boolean, Standard_Boolean);\n-      Init_Esize            (Any_Boolean, Standard_Character_Size);\n-      Init_RM_Size          (Any_Boolean, 1);\n+      Set_Esize             (Any_Boolean, Char_Size);\n+      Set_RM_Size           (Any_Boolean, Uint_1);\n       Set_Elem_Alignment    (Any_Boolean);\n       Set_Is_Unsigned_Type  (Any_Boolean);\n       Set_Scalar_Range      (Any_Boolean, Scalar_Range (Standard_Boolean));\n@@ -1233,7 +1238,7 @@ package body CStand is\n       Set_Etype             (Any_Composite, Any_Composite);\n       Set_Component_Size    (Any_Composite, Uint_0);\n       Set_Component_Type    (Any_Composite, Standard_Integer);\n-      Init_Size_Align       (Any_Composite);\n+      Reinit_Size_Align     (Any_Composite);\n \n       Any_Discrete := New_Standard_Entity (\"a discrete type\");\n       Mutate_Ekind          (Any_Discrete, E_Signed_Integer_Type);\n@@ -1297,7 +1302,7 @@ package body CStand is\n       Set_Scope             (Any_String, Standard_Standard);\n       Set_Etype             (Any_String, Any_String);\n       Set_Component_Type    (Any_String, Any_Character);\n-      Init_Size_Align       (Any_String);\n+      Reinit_Size_Align     (Any_String);\n       Make_Dummy_Index      (Any_String);\n \n       Raise_Type := New_Standard_Entity (\"raise type\");\n@@ -1506,7 +1511,7 @@ package body CStand is\n          Set_Scope       (Standard_Exception_Type, Standard_Standard);\n          Set_Stored_Constraint\n                          (Standard_Exception_Type, No_Elist);\n-         Init_Size_Align (Standard_Exception_Type);\n+         Reinit_Size_Align (Standard_Exception_Type);\n          Set_Size_Known_At_Compile_Time\n                          (Standard_Exception_Type, True);\n \n@@ -1726,7 +1731,7 @@ package body CStand is\n       Mutate_Ekind                  (Id, E_Component);\n       Set_Etype                     (Id, Typ);\n       Set_Scope                     (Id, Rec);\n-      Init_Component_Location       (Id);\n+      Reinit_Component_Location     (Id);\n       Set_Original_Record_Component (Id, Id);\n       Set_Is_Aliased                (Id);\n       Set_Is_Independent            (Id);"}, {"sha": "5782bd602c9da11a46e8f6d9d68e31b62b99fc53", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 98, "deletions": 179, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -358,131 +358,143 @@ package body Einfo.Utils is\n       return Ekind (Id) in Type_Kind;\n    end Is_Type;\n \n-   -----------------------------------\n-   -- Field Initialization Routines --\n-   -----------------------------------\n+   ------------------------------------------\n+   -- Type Representation Attribute Fields --\n+   ------------------------------------------\n \n-   procedure Init_Alignment (Id : E) is\n+   function Known_Alignment                       (E : Entity_Id) return B is\n+      Result : constant B := not Field_Is_Initial_Zero (E, F_Alignment);\n+   begin\n+      return Result;\n+   end Known_Alignment;\n+\n+   procedure Reinit_Alignment (Id : E) is\n    begin\n       Reinit_Field_To_Zero (Id, F_Alignment);\n-   end Init_Alignment;\n+   end Reinit_Alignment;\n \n-   procedure Init_Alignment (Id : E; V : Int) is\n+   procedure Copy_Alignment (To, From : E) is\n    begin\n-      Set_Alignment (Id, UI_From_Int (V));\n-   end Init_Alignment;\n+      if Known_Alignment (From) then\n+         Set_Alignment (To, Alignment (From));\n+      else\n+         Reinit_Alignment (To);\n+      end if;\n+   end Copy_Alignment;\n \n-   procedure Init_Component_Bit_Offset (Id : E) is\n+   function Known_Component_Bit_Offset            (E : Entity_Id) return B is\n    begin\n-      Set_Component_Bit_Offset (Id, No_Uint);\n-   end Init_Component_Bit_Offset;\n+      return Component_Bit_Offset (E) /= No_Uint;\n+   end Known_Component_Bit_Offset;\n \n-   procedure Init_Component_Bit_Offset (Id : E; V : Int) is\n+   function Known_Static_Component_Bit_Offset     (E : Entity_Id) return B is\n    begin\n-      Set_Component_Bit_Offset (Id, UI_From_Int (V));\n-   end Init_Component_Bit_Offset;\n+      return Component_Bit_Offset (E) /= No_Uint\n+        and then Component_Bit_Offset (E) >= Uint_0;\n+   end Known_Static_Component_Bit_Offset;\n \n-   procedure Init_Component_Size (Id : E) is\n+   function Known_Component_Size                  (E : Entity_Id) return B is\n    begin\n-      Set_Component_Size (Id, Uint_0);\n-   end Init_Component_Size;\n+      return Component_Size (E) /= Uint_0\n+        and then Component_Size (E) /= No_Uint;\n+   end Known_Component_Size;\n \n-   procedure Init_Component_Size (Id : E; V : Int) is\n+   function Known_Static_Component_Size           (E : Entity_Id) return B is\n    begin\n-      Set_Component_Size (Id, UI_From_Int (V));\n-   end Init_Component_Size;\n+      return Component_Size (E) > Uint_0;\n+   end Known_Static_Component_Size;\n \n-   procedure Init_Digits_Value (Id : E) is\n+   function Known_Esize                           (E : Entity_Id) return B is\n    begin\n-      Set_Digits_Value (Id, Uint_0);\n-   end Init_Digits_Value;\n+      return Esize (E) /= Uint_0\n+        and then Esize (E) /= No_Uint;\n+   end Known_Esize;\n \n-   procedure Init_Digits_Value (Id : E; V : Int) is\n+   function Known_Static_Esize                    (E : Entity_Id) return B is\n    begin\n-      Set_Digits_Value (Id, UI_From_Int (V));\n-   end Init_Digits_Value;\n+      return Esize (E) > Uint_0\n+        and then not Is_Generic_Type (E);\n+   end Known_Static_Esize;\n \n-   procedure Init_Esize (Id : E) is\n+   procedure Reinit_Esize (Id : E) is\n    begin\n       Set_Esize (Id, Uint_0);\n-   end Init_Esize;\n+   end Reinit_Esize;\n \n-   procedure Init_Esize (Id : E; V : Int) is\n+   procedure Copy_Esize (To, From : E) is\n    begin\n-      Set_Esize (Id, UI_From_Int (V));\n-   end Init_Esize;\n+      raise Program_Error with \"Copy_Esize not yet implemented\";\n+   end Copy_Esize;\n \n-   procedure Init_Normalized_First_Bit (Id : E) is\n+   function Known_Normalized_First_Bit            (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_First_Bit (Id, No_Uint);\n-   end Init_Normalized_First_Bit;\n+      return Normalized_First_Bit (E) /= No_Uint;\n+   end Known_Normalized_First_Bit;\n \n-   procedure Init_Normalized_First_Bit (Id : E; V : Int) is\n+   function Known_Static_Normalized_First_Bit     (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_First_Bit (Id, UI_From_Int (V));\n-   end Init_Normalized_First_Bit;\n+      return Normalized_First_Bit (E) /= No_Uint\n+        and then Normalized_First_Bit (E) >= Uint_0;\n+   end Known_Static_Normalized_First_Bit;\n \n-   procedure Init_Normalized_Position (Id : E) is\n+   function Known_Normalized_Position             (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_Position (Id, No_Uint);\n-   end Init_Normalized_Position;\n+      return Normalized_Position (E) /= No_Uint;\n+   end Known_Normalized_Position;\n \n-   procedure Init_Normalized_Position (Id : E; V : Int) is\n+   function Known_Static_Normalized_Position      (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_Position (Id, UI_From_Int (V));\n-   end Init_Normalized_Position;\n+      return Normalized_Position (E) /= No_Uint\n+        and then Normalized_Position (E) >= Uint_0;\n+   end Known_Static_Normalized_Position;\n \n-   procedure Init_Normalized_Position_Max (Id : E) is\n+   function Known_RM_Size                         (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_Position_Max (Id, No_Uint);\n-   end Init_Normalized_Position_Max;\n+      return RM_Size (E) /= No_Uint\n+        and then (RM_Size (E) /= Uint_0\n+                    or else Is_Discrete_Type (E)\n+                    or else Is_Fixed_Point_Type (E));\n+   end Known_RM_Size;\n \n-   procedure Init_Normalized_Position_Max (Id : E; V : Int) is\n+   function Known_Static_RM_Size                  (E : Entity_Id) return B is\n    begin\n-      Set_Normalized_Position_Max (Id, UI_From_Int (V));\n-   end Init_Normalized_Position_Max;\n+      return (RM_Size (E) > Uint_0\n+                or else Is_Discrete_Type (E)\n+                or else Is_Fixed_Point_Type (E))\n+        and then not Is_Generic_Type (E);\n+   end Known_Static_RM_Size;\n \n-   procedure Init_RM_Size (Id : E) is\n+   procedure Reinit_RM_Size (Id : E) is\n    begin\n       Set_RM_Size (Id, Uint_0);\n-   end Init_RM_Size;\n+   end Reinit_RM_Size;\n \n-   procedure Init_RM_Size (Id : E; V : Int) is\n+   procedure Copy_RM_Size (To, From : E) is\n    begin\n-      Set_RM_Size (Id, UI_From_Int (V));\n-   end Init_RM_Size;\n+      raise Program_Error with \"Copy_RM_Size not yet implemented\";\n+   end Copy_RM_Size;\n \n-   procedure Copy_Alignment (To, From : E) is\n-   begin\n-      if Known_Alignment (From) then\n-         Set_Alignment (To, Alignment (From));\n-      else\n-         Init_Alignment (To);\n-      end if;\n-   end Copy_Alignment;\n-\n-   -----------------------------\n-   -- Init_Component_Location --\n-   -----------------------------\n+   -------------------------------\n+   -- Reinit_Component_Location --\n+   -------------------------------\n \n-   procedure Init_Component_Location (Id : E) is\n+   procedure Reinit_Component_Location (Id : E) is\n    begin\n-      Set_Normalized_First_Bit  (Id, No_Uint);\n-      Set_Normalized_Position_Max (Id, No_Uint);\n+      Set_Normalized_First_Bit (Id, No_Uint);\n       Set_Component_Bit_Offset (Id, No_Uint);\n-      Set_Esize (Id, Uint_0);\n+      Reinit_Esize (Id);\n       Set_Normalized_Position (Id, No_Uint);\n-   end Init_Component_Location;\n+   end Reinit_Component_Location;\n \n-   ----------------------------\n-   -- Init_Object_Size_Align --\n-   ----------------------------\n+   ------------------------------\n+   -- Reinit_Object_Size_Align --\n+   ------------------------------\n \n-   procedure Init_Object_Size_Align (Id : E) is\n+   procedure Reinit_Object_Size_Align (Id : E) is\n    begin\n-      Init_Esize (Id);\n-      Init_Alignment (Id);\n-   end Init_Object_Size_Align;\n+      Reinit_Esize (Id);\n+      Reinit_Alignment (Id);\n+   end Reinit_Object_Size_Align;\n \n    ---------------\n    -- Init_Size --\n@@ -501,110 +513,17 @@ package body Einfo.Utils is\n       Set_RM_Size (Id, UI_From_Int (V));\n    end Init_Size;\n \n-   ---------------------\n-   -- Init_Size_Align --\n-   ---------------------\n+   -----------------------\n+   -- Reinit_Size_Align --\n+   -----------------------\n \n-   procedure Init_Size_Align (Id : E) is\n+   procedure Reinit_Size_Align (Id : E) is\n    begin\n       pragma Assert (Ekind (Id) in Type_Kind | E_Void);\n-      Init_Esize (Id);\n-      Init_RM_Size (Id);\n-      Init_Alignment (Id);\n-   end Init_Size_Align;\n-\n-   ----------------------------------------------\n-   -- Type Representation Attribute Predicates --\n-   ----------------------------------------------\n-\n-   function Known_Alignment                       (E : Entity_Id) return B is\n-      Result : constant B := not Field_Is_Initial_Zero (E, F_Alignment);\n-   begin\n-      return Result;\n-   end Known_Alignment;\n-\n-   function Known_Component_Bit_Offset            (E : Entity_Id) return B is\n-   begin\n-      return Component_Bit_Offset (E) /= No_Uint;\n-   end Known_Component_Bit_Offset;\n-\n-   function Known_Component_Size                  (E : Entity_Id) return B is\n-   begin\n-      return Component_Size (E) /= Uint_0\n-        and then Component_Size (E) /= No_Uint;\n-   end Known_Component_Size;\n-\n-   function Known_Esize                           (E : Entity_Id) return B is\n-   begin\n-      return Esize (E) /= Uint_0\n-        and then Esize (E) /= No_Uint;\n-   end Known_Esize;\n-\n-   function Known_Normalized_First_Bit            (E : Entity_Id) return B is\n-   begin\n-      return Normalized_First_Bit (E) /= No_Uint;\n-   end Known_Normalized_First_Bit;\n-\n-   function Known_Normalized_Position             (E : Entity_Id) return B is\n-   begin\n-      return Normalized_Position (E) /= No_Uint;\n-   end Known_Normalized_Position;\n-\n-   function Known_Normalized_Position_Max         (E : Entity_Id) return B is\n-   begin\n-      return Normalized_Position_Max (E) /= No_Uint;\n-   end Known_Normalized_Position_Max;\n-\n-   function Known_RM_Size                         (E : Entity_Id) return B is\n-   begin\n-      return RM_Size (E) /= No_Uint\n-        and then (RM_Size (E) /= Uint_0\n-                    or else Is_Discrete_Type (E)\n-                    or else Is_Fixed_Point_Type (E));\n-   end Known_RM_Size;\n-\n-   function Known_Static_Component_Bit_Offset     (E : Entity_Id) return B is\n-   begin\n-      return Component_Bit_Offset (E) /= No_Uint\n-        and then Component_Bit_Offset (E) >= Uint_0;\n-   end Known_Static_Component_Bit_Offset;\n-\n-   function Known_Static_Component_Size           (E : Entity_Id) return B is\n-   begin\n-      return Component_Size (E) > Uint_0;\n-   end Known_Static_Component_Size;\n-\n-   function Known_Static_Esize                    (E : Entity_Id) return B is\n-   begin\n-      return Esize (E) > Uint_0\n-        and then not Is_Generic_Type (E);\n-   end Known_Static_Esize;\n-\n-   function Known_Static_Normalized_First_Bit     (E : Entity_Id) return B is\n-   begin\n-      return Normalized_First_Bit (E) /= No_Uint\n-        and then Normalized_First_Bit (E) >= Uint_0;\n-   end Known_Static_Normalized_First_Bit;\n-\n-   function Known_Static_Normalized_Position      (E : Entity_Id) return B is\n-   begin\n-      return Normalized_Position (E) /= No_Uint\n-        and then Normalized_Position (E) >= Uint_0;\n-   end Known_Static_Normalized_Position;\n-\n-   function Known_Static_Normalized_Position_Max  (E : Entity_Id) return B is\n-   begin\n-      return Normalized_Position_Max (E) /= No_Uint\n-        and then Normalized_Position_Max (E) >= Uint_0;\n-   end Known_Static_Normalized_Position_Max;\n-\n-   function Known_Static_RM_Size                  (E : Entity_Id) return B is\n-   begin\n-      return (RM_Size (E) > Uint_0\n-                or else Is_Discrete_Type (E)\n-                or else Is_Fixed_Point_Type (E))\n-        and then not Is_Generic_Type (E);\n-   end Known_Static_RM_Size;\n+      Reinit_Esize (Id);\n+      Reinit_RM_Size (Id);\n+      Reinit_Alignment (Id);\n+   end Reinit_Size_Align;\n \n    --------------------\n    -- Address_Clause --"}, {"sha": "4eca35e1e5fe49514b34843a16aad9996dedae50", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 107, "deletions": 150, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -310,75 +310,115 @@ package Einfo.Utils is\n    pragma Inline (Type_High_Bound);\n    pragma Inline (Type_Low_Bound);\n \n-   ----------------------------------------------\n-   -- Type Representation Attribute Predicates --\n-   ----------------------------------------------\n-\n-   --  These predicates test the setting of the indicated attribute. The\n-   --  Known predicate is True if and only if the value has been set. The\n-   --  Known_Static predicate is True only if the value is set (Known) and is\n-   --  set to a compile time known value. Note that in the case of Alignment\n-   --  and Normalized_First_Bit, dynamic values are not possible, so we do not\n-   --  need a separate Known_Static calls in these cases. The not set (unknown)\n-   --  values are as follows:\n-\n-   --    Alignment               Uint_0 or No_Uint\n-   --    Component_Size          Uint_0 or No_Uint\n-   --    Component_Bit_Offset    No_Uint\n-   --    Digits_Value            Uint_0 or No_Uint\n-   --    Esize                   Uint_0 or No_Uint\n-   --    Normalized_First_Bit    No_Uint\n-   --    Normalized_Position     No_Uint\n-   --    Normalized_Position_Max No_Uint\n-   --    RM_Size                 Uint_0 or No_Uint\n-\n-   --  It would be cleaner to use No_Uint in all these cases, but historically\n-   --  we chose to use Uint_0 at first, and the change over will take time ???\n-   --  This is particularly true for the RM_Size field, where a value of zero\n-   --  is legitimate. We deal with this by a considering that the value is\n-   --  always known static for discrete types (and no other types can have\n-   --  an RM_Size value of zero).\n-\n+   ------------------------------------------\n+   -- Type Representation Attribute Fields --\n+   ------------------------------------------\n+\n+   --  Each of the following fields can be in a \"known\" or \"unknown\" state:\n+\n+   --    Alignment\n+   --    Component_Size\n+   --    Component_Bit_Offset\n+   --    Digits_Value\n+   --    Esize\n+   --    Normalized_First_Bit\n+   --    Normalized_Position\n+   --    RM_Size\n+   --\n+   --  NOTE: \"known\" here does not mean \"known at compile time\". It means that\n+   --  the compiler has computed the value of the field (either by default, or\n+   --  by noting some representation clauses), and the field has not been\n+   --  reinitialized.\n+   --\n+   --  We document the Esize functions here; the others are analogous:\n+   --\n+   --     Known_Esize: True if Set_Esize has been called without a subsequent\n+   --     Reinit_Esize.\n+   --\n+   --     Known_Static_Esize: True if Known_Esize and the Esize is known at\n+   --     compile time. (We're not using \"static\" in the Ada RM sense here. We\n+   --     are using it to mean \"known at compile time.)\n+   --\n+   --     Reinit_Esize: Set the Esize field to its initial unknown state.\n+   --\n+   --     Copy_Esize: Copies the Esize from From to To; Known_Esize (From) may\n+   --     be False, in which case Known_Esize (To) becomes False.\n+   --\n+   --     Esize: This is the normal automatially-generated getter for Esize,\n+   --     declared elsewhere. It is an error to call this if Set_Esize has not\n+   --     yet been called, or if Reinit_Esize has been called subsequently.\n+   --\n+   --     Set_Esize: This is the normal automatially-generated setter for\n+   --     Esize. After a call to this, Known_Esize is True. It is an error\n+   --     to call this with a No_Uint value.\n+   --\n+   --  Normally, we call Set_Esize first, and then query Esize (and similarly\n+   --  for other fields). However in some cases, we need to check Known_Esize\n+   --  before calling Esize, because the code is written in such a way that we\n+   --  don't know whether Set_Esize has already been called.\n+   --\n+   --  We intend to use the initial zero value to represent \"unknown\". Note\n+   --  that this value is different from No_Uint, and different from Uint_0.\n+   --  However, this is work in progress; we are still using No_Uint or Uint_0\n+   --  to represent \"unknown\" in some cases. Using Uint_0 leads to several\n+   --  bugs, because zero is a legitimate value (T'Size can be zero bits) --\n+   --  Uint_0 shouldn't mean two different things.\n+   --\n    --  In two cases, Known_Static_Esize and Known_Static_RM_Size, there is one\n    --  more consideration, which is that we always return False for generic\n-   --  types. Within a template, the size can look known, because of the fake\n-   --  size values we put in template types, but they are not really known and\n-   --  anyone testing if they are known within the template should get False as\n-   --  a result to prevent incorrect assumptions.\n-\n-   function Known_Alignment                       (E : Entity_Id) return B;\n-   function Known_Component_Bit_Offset            (E : Entity_Id) return B;\n-   function Known_Component_Size                  (E : Entity_Id) return B;\n-   function Known_Esize                           (E : Entity_Id) return B;\n-   function Known_Normalized_First_Bit            (E : Entity_Id) return B;\n-   function Known_Normalized_Position             (E : Entity_Id) return B;\n-   function Known_Normalized_Position_Max         (E : Entity_Id) return B;\n-   function Known_RM_Size                         (E : Entity_Id) return B;\n-\n-   function Known_Static_Component_Bit_Offset     (E : Entity_Id) return B;\n-   function Known_Static_Component_Size           (E : Entity_Id) return B;\n-   function Known_Static_Esize                    (E : Entity_Id) return B;\n-   function Known_Static_Normalized_First_Bit     (E : Entity_Id) return B;\n-   function Known_Static_Normalized_Position      (E : Entity_Id) return B;\n-   function Known_Static_Normalized_Position_Max  (E : Entity_Id) return B;\n-   function Known_Static_RM_Size                  (E : Entity_Id) return B;\n-\n-   pragma Inline (Known_Alignment);\n-   pragma Inline (Known_Component_Bit_Offset);\n-   pragma Inline (Known_Component_Size);\n-   pragma Inline (Known_Esize);\n-   pragma Inline (Known_Normalized_First_Bit);\n-   pragma Inline (Known_Normalized_Position);\n-   pragma Inline (Known_Normalized_Position_Max);\n-   pragma Inline (Known_RM_Size);\n-\n-   pragma Inline (Known_Static_Component_Bit_Offset);\n-   pragma Inline (Known_Static_Component_Size);\n-   pragma Inline (Known_Static_Esize);\n-   pragma Inline (Known_Static_Normalized_First_Bit);\n-   pragma Inline (Known_Static_Normalized_Position);\n-   pragma Inline (Known_Static_Normalized_Position_Max);\n-   pragma Inline (Known_Static_RM_Size);\n+   --  types. Within a template, the size can look Known_Static, because of the\n+   --  fake size values we put in template types, but they are not really\n+   --  Known_Static and anyone testing if they are Known_Static within the\n+   --  template should get False as a result to prevent incorrect assumptions.\n+\n+   function Known_Alignment (E : Entity_Id) return B with Inline;\n+   procedure Reinit_Alignment (Id : E) with Inline;\n+   procedure Copy_Alignment (To, From : E);\n+\n+   function Known_Component_Bit_Offset (E : Entity_Id) return B with Inline;\n+   function Known_Static_Component_Bit_Offset (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_Component_Size (E : Entity_Id) return B with Inline;\n+   function Known_Static_Component_Size (E : Entity_Id) return B with Inline;\n+\n+   function Known_Esize (E : Entity_Id) return B with Inline;\n+   function Known_Static_Esize (E : Entity_Id) return B with Inline;\n+   procedure Reinit_Esize (Id : E) with Inline;\n+   procedure Copy_Esize (To, From : E);\n+\n+   function Known_Normalized_First_Bit (E : Entity_Id) return B with Inline;\n+   function Known_Static_Normalized_First_Bit (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_Normalized_Position (E : Entity_Id) return B with Inline;\n+   function Known_Static_Normalized_Position (E : Entity_Id) return B\n+     with Inline;\n+\n+   function Known_RM_Size (E : Entity_Id) return B with Inline;\n+   function Known_Static_RM_Size (E : Entity_Id) return B with Inline;\n+   procedure Reinit_RM_Size (Id : E) with Inline;\n+   procedure Copy_RM_Size (To, From : E);\n+\n+   ---------------------------------------------------------\n+   -- Procedures for setting multiple of the above fields --\n+   ---------------------------------------------------------\n+\n+   procedure Reinit_Component_Location (Id : E);\n+   --  Initializes all fields describing the location of a component\n+   --  (Normalized_Position, Component_Bit_Offset, Normalized_First_Bit,\n+   --  Esize) to all be Unknown.\n+\n+   procedure Init_Size (Id : E; V : Int);\n+   --  Initialize both the Esize and RM_Size fields of E to V\n+\n+   procedure Reinit_Size_Align (Id : E);\n+   --  This procedure initializes both size fields and the alignment\n+   --  field to all be Unknown.\n+\n+   procedure Reinit_Object_Size_Align (Id : E);\n+   --  Same as Reinit_Size_Align except RM_Size field (which is only for types)\n+   --  is unaffected.\n \n    ---------------------------------------------------\n    -- Access to Subprograms in Subprograms_For_Type --\n@@ -404,89 +444,6 @@ package Einfo.Utils is\n    procedure Set_Predicate_Function              (Id : E; V : E);\n    procedure Set_Predicate_Function_M            (Id : E; V : E);\n \n-   -----------------------------------\n-   -- Field Initialization Routines --\n-   -----------------------------------\n-\n-   --  These routines are overloadings of some of the above Set procedures\n-   --  where the argument is normally a Uint. The overloadings take an Int\n-   --  parameter instead, and appropriately convert it. There are also\n-   --  versions that implicitly initialize to the appropriate \"not set\"\n-   --  value. The not set (unknown) values are as follows:\n-\n-   --    Alignment                 Uint_0\n-   --    Component_Size            Uint_0\n-   --    Component_Bit_Offset      No_Uint\n-   --    Digits_Value              Uint_0\n-   --    Esize                     Uint_0\n-   --    Normalized_First_Bit      No_Uint\n-   --    Normalized_Position       No_Uint\n-   --    Normalized_Position_Max   No_Uint\n-   --    RM_Size                   Uint_0\n-\n-   --  It would be cleaner to use No_Uint in all these cases, but historically\n-   --  we chose to use Uint_0 at first, and the change over will take time ???\n-   --  This is particularly true for the RM_Size field, where a value of zero\n-   --  is legitimate and causes some special tests around the code.\n-\n-   --  Contrary to the corresponding Set procedures above, these routines\n-   --  do NOT check the entity kind of their argument, instead they set the\n-   --  underlying Uint fields directly (this allows them to be used for\n-   --  entities whose Ekind has not been set yet).\n-\n-   procedure Init_Alignment                (Id : E; V : Int);\n-   procedure Init_Component_Bit_Offset     (Id : E; V : Int);\n-   procedure Init_Component_Size           (Id : E; V : Int);\n-   procedure Init_Digits_Value             (Id : E; V : Int);\n-   procedure Init_Esize                    (Id : E; V : Int);\n-   procedure Init_Normalized_First_Bit     (Id : E; V : Int);\n-   procedure Init_Normalized_Position      (Id : E; V : Int);\n-   procedure Init_Normalized_Position_Max  (Id : E; V : Int);\n-   procedure Init_RM_Size                  (Id : E; V : Int);\n-\n-   procedure Init_Alignment                (Id : E);\n-   procedure Init_Component_Bit_Offset     (Id : E);\n-   procedure Init_Component_Size           (Id : E);\n-   procedure Init_Digits_Value             (Id : E);\n-   procedure Init_Esize                    (Id : E);\n-   procedure Init_Normalized_First_Bit     (Id : E);\n-   procedure Init_Normalized_Position      (Id : E);\n-   procedure Init_Normalized_Position_Max  (Id : E);\n-   procedure Init_RM_Size                  (Id : E);\n-\n-   --  The following Copy_xxx procedures copy the value of xxx from From to\n-   --  To. If xxx is set to its initial invalid (zero-bits) value, then it is\n-   --  reset to invalid in To. We only have Copy_Alignment so far, but more are\n-   --  planned.\n-\n-   procedure Copy_Alignment (To, From : E);\n-\n-   pragma Inline (Init_Alignment);\n-   pragma Inline (Init_Component_Bit_Offset);\n-   pragma Inline (Init_Component_Size);\n-   pragma Inline (Init_Digits_Value);\n-   pragma Inline (Init_Esize);\n-   pragma Inline (Init_Normalized_First_Bit);\n-   pragma Inline (Init_Normalized_Position);\n-   pragma Inline (Init_Normalized_Position_Max);\n-   pragma Inline (Init_RM_Size);\n-\n-   procedure Init_Component_Location (Id : E);\n-   --  Initializes all fields describing the location of a component\n-   --  (Normalized_Position, Component_Bit_Offset, Normalized_First_Bit,\n-   --  Normalized_Position_Max, Esize) to all be Unknown.\n-\n-   procedure Init_Size (Id : E; V : Int);\n-   --  Initialize both the Esize and RM_Size fields of E to V\n-\n-   procedure Init_Size_Align (Id : E);\n-   --  This procedure initializes both size fields and the alignment\n-   --  field to all be Unknown.\n-\n-   procedure Init_Object_Size_Align (Id : E);\n-   --  Same as Init_Size_Align except RM_Size field (which is only for types)\n-   --  is unaffected.\n-\n    ---------------\n    -- Iterators --\n    ---------------"}, {"sha": "39ddd6686a4ee8fb5d7431203a4af6e74496be67", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -3762,17 +3762,6 @@ package Einfo is\n --       units from the start of the record to the lowest addressed storage\n --       unit containing part or all of the field.\n \n---    Normalized_Position_Max\n---       Defined in components and discriminants. For almost all cases, this\n---       is the same as Normalized_Position. The one exception is for the case\n---       of a discriminated record containing one or more arrays whose length\n---       depends on discriminants. In this case, the Normalized_Position_Max\n---       field represents the maximum possible value of Normalized_Position\n---       assuming min/max values for discriminant subscripts in all fields.\n---       This is used by Layout in front end layout mode to properly compute\n---       the maximum size of such records (needed for allocation purposes when\n---       there are default discriminants, and also for the 'Size value).\n-\n --    Number_Dimensions (synthesized)\n --       Applies to array types and subtypes. Returns the number of dimensions\n --       of the array type or subtype as a value of type Pos.\n@@ -5228,7 +5217,6 @@ package Einfo is\n    --    Linker_Section_Pragma $$$\n    --    Normalized_First_Bit\n    --    Current_Value                         (always Empty)\n-   --    Normalized_Position_Max\n    --    Component_Bit_Offset\n    --    Esize\n    --    Component_Clause\n@@ -5328,7 +5316,6 @@ package Einfo is\n    --  E_Discriminant\n    --    Normalized_First_Bit\n    --    Current_Value                         (always Empty)\n-   --    Normalized_Position_Max\n    --    Component_Bit_Offset\n    --    Esize\n    --    Component_Clause"}, {"sha": "e27d00b05235a99695162a9732b85e72b737279f", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -575,7 +575,7 @@ package body Exp_Pakd is\n \n          --  Set remaining fields of packed array type\n \n-         Init_Alignment                (PAT);\n+         Reinit_Alignment              (PAT);\n          Set_Parent                    (PAT, Empty);\n          Set_Associated_Node_For_Itype (PAT, Typ);\n          Set_Original_Array_Type       (PAT, Typ);"}, {"sha": "d956327ce9646244a9596e3ae230d50c38127374", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -615,27 +615,6 @@ B Known_Normalized_Position_Max         (Entity_Id E);\n #define Known_RM_Size einfo__utils__known_rm_size\n B Known_RM_Size                         (Entity_Id E);\n \n-#define Known_Static_Component_Bit_Offset einfo__utils__known_static_component_bit_offset\n-B Known_Static_Component_Bit_Offset     (Entity_Id E);\n-\n-#define Known_Static_Component_Size einfo__utils__known_static_component_size\n-B Known_Static_Component_Size           (Entity_Id E);\n-\n-#define Known_Static_Esize einfo__utils__known_static_esize\n-B Known_Static_Esize                    (Entity_Id E);\n-\n-#define Known_Static_Normalized_First_Bit einfo__utils__known_static_normalized_first_bit\n-B Known_Static_Normalized_First_Bit     (Entity_Id E);\n-\n-#define Known_Static_Normalized_Position einfo__utils__known_static_normalized_position\n-B Known_Static_Normalized_Position      (Entity_Id E);\n-\n-#define Known_Static_Normalized_Position_Max einfo__utils__known_static_normalized_position_max\n-B Known_Static_Normalized_Position_Max  (Entity_Id E);\n-\n-#define Known_Static_RM_Size einfo__utils__known_static_rm_size\n-B Known_Static_RM_Size                  (Entity_Id E);\n-\n #define Copy_Alignment einfo__utils__copy_alignment\n B Copy_Alignment(Entity_Id To, Entity_Id From);\n "}, {"sha": "170f667ba40dfbee50f4762947329de7f2f06397", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -7467,7 +7467,7 @@ package body Freeze is\n \n         and then not Target_Short_Enums\n       then\n-         Init_Esize (Typ, Standard_Integer_Size);\n+         Set_Esize (Typ, UI_From_Int (Standard_Integer_Size));\n          Set_Alignment (Typ, Alignment (Standard_Integer));\n \n       --  Normal Ada case or size clause present or not Long_C_Enums on target\n@@ -9076,7 +9076,7 @@ package body Freeze is\n             Actual_Size := 128;\n          end if;\n \n-         Init_Esize (Typ, Actual_Size);\n+         Set_Esize (Typ, UI_From_Int (Actual_Size));\n          Adjust_Esize_For_Alignment (Typ);\n       end if;\n \n@@ -9132,7 +9132,7 @@ package body Freeze is\n       --  Set Esize to calculated size if not set already\n \n       if not Known_Esize (Typ) then\n-         Init_Esize (Typ, Actual_Size);\n+         Set_Esize (Typ, UI_From_Int (Actual_Size));\n       end if;\n \n       --  Set RM_Size if not already set. If already set, check value"}, {"sha": "360e2e1e0eb1fde7d01cd3681bbf0f3e5a5c6fad", "filename": "gcc/ada/gen_il-fields.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fgen_il-fields.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fgen_il-fields.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-fields.ads?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -828,7 +828,6 @@ package Gen_IL.Fields is\n       Nonzero_Is_True,\n       Normalized_First_Bit,\n       Normalized_Position,\n-      Normalized_Position_Max,\n       OK_To_Rename,\n       Optimize_Alignment_Space,\n       Optimize_Alignment_Time,"}, {"sha": "bca0549cc9797c16b2c5a42671468fa84f098e75", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -316,7 +316,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Interface_Name, Node_Id),\n         Sm (Normalized_First_Bit, Uint),\n         Sm (Normalized_Position, Uint),\n-        Sm (Normalized_Position_Max, Uint),\n         Sm (Original_Record_Component, Node_Id)));\n \n    Cc (E_Component, Record_Field_Kind,"}, {"sha": "8cbc8d61a13908498a3f4a7073149cc336b862fa", "filename": "gcc/ada/itypes.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fitypes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fitypes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fitypes.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -62,7 +62,7 @@ package body Itypes is\n       end if;\n \n       --  Make sure Esize (Typ) was properly initialized, it should be since\n-      --  New_Internal_Entity/New_External_Entity call Init_Size_Align.\n+      --  New_Internal_Entity/New_External_Entity call Reinit_Size_Align.\n \n       pragma Assert (Esize (Typ) = Uint_0);\n "}, {"sha": "700ae799335ffeb391a7b26894b34e8c3784eeef", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -155,7 +155,7 @@ package body Layout is\n             exit when Esize (E) mod Abits = 0;\n          end loop;\n \n-         Init_Alignment (E, Abits / SSU);\n+         Set_Alignment (E, UI_From_Int (Abits / SSU));\n          return;\n       end if;\n \n@@ -243,8 +243,8 @@ package body Layout is\n       --  like or need the size to be set.\n \n       if Ekind (E) = E_String_Literal_Subtype then\n-         Set_Esize (E, Uint_0);\n-         Set_RM_Size (E, Uint_0);\n+         Reinit_Esize (E);\n+         Reinit_RM_Size (E);\n          return;\n       end if;\n \n@@ -379,7 +379,7 @@ package body Layout is\n                      --  If size is big enough, set it and exit\n \n                      if S >= RM_Size (E) then\n-                        Init_Esize (E, S);\n+                        Set_Esize (E, UI_From_Int (S));\n                         exit;\n \n                      --  If the RM_Size is greater than System_Max_Integer_Size\n@@ -624,13 +624,13 @@ package body Layout is\n \n                if Is_Scalar_Type (E) then\n                   if Size <= SSU then\n-                     Init_Esize (E, SSU);\n+                     Set_Esize (E, UI_From_Int (SSU));\n                   elsif Size <= 16 then\n-                     Init_Esize (E, 16);\n+                     Set_Esize (E, Uint_16);\n                   elsif Size <= 32 then\n-                     Init_Esize (E, 32);\n+                     Set_Esize (E, Uint_32);\n                   else\n-                     Set_Esize  (E, (Size + 63) / 64 * 64);\n+                     Set_Esize (E, (Size + 63) / 64 * 64);\n                   end if;\n \n                   --  Finally, make sure that alignment is consistent with\n@@ -899,7 +899,7 @@ package body Layout is\n       --  nothing to do with code.\n \n       if Is_Generic_Type (Root_Type (FST)) then\n-         Set_RM_Size (Def_Id, Uint_0);\n+         Reinit_RM_Size (Def_Id);\n \n       --  If the subtype statically matches the first subtype, then it is\n       --  required to have exactly the same layout. This is required by\n@@ -1021,7 +1021,7 @@ package body Layout is\n          --  this new calculated value.\n \n          if not Known_Alignment (E) then\n-            Init_Alignment (E, A);\n+            Set_Alignment (E, UI_From_Int (A));\n \n          --  Cases where we have inherited an alignment\n \n@@ -1030,7 +1030,7 @@ package body Layout is\n          --  sure that no constructed types have weird alignments.\n \n          elsif not Comes_From_Source (E) then\n-            Init_Alignment (E, A);\n+            Set_Alignment (E, UI_From_Int (A));\n \n          --  If this inherited alignment is the same as the one we computed,\n          --  then obviously everything is fine, and we do not need to reset it.\n@@ -1136,7 +1136,7 @@ package body Layout is\n                   --  ACATS problem which seems to have disappeared anyway, and\n                   --  in any case, this peculiarity was never documented.\n \n-                  Init_Alignment (E, A);\n+                  Set_Alignment (E, UI_From_Int (A));\n \n                --  If no Size (or Object_Size) was specified, then we have\n                --  inherited the object size, so we should also inherit the"}, {"sha": "dd78501025a0579d31a5d9af092b8b4d0f190b1e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -5825,7 +5825,7 @@ package body Sem_Ch10 is\n          Set_Is_First_Subtype   (Ent);\n          Set_Scope              (Ent, Scop);\n          Set_Stored_Constraint  (Ent, No_Elist);\n-         Init_Size_Align        (Ent);\n+         Reinit_Size_Align      (Ent);\n \n          if From_Limited_With (Ent) then\n             Set_Private_Dependents (Ent, New_Elmt_List);\n@@ -5865,7 +5865,7 @@ package body Sem_Ch10 is\n             Set_Is_Tagged_Type            (CW_Typ);\n             Set_Materialize_Entity        (CW_Typ, Materialize);\n             Set_Scope                     (CW_Typ, Scop);\n-            Init_Size_Align               (CW_Typ);\n+            Reinit_Size_Align             (CW_Typ);\n          end if;\n       end Decorate_Type;\n "}, {"sha": "d816c070f990191187a83a8a2f6f686350f99817", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -2495,7 +2495,7 @@ package body Sem_Ch12 is\n       Mutate_Ekind        (T, E_Enumeration_Subtype);\n       Set_Etype           (T, Base);\n       Init_Size           (T, 8);\n-      Init_Alignment      (T);\n+      Reinit_Alignment    (T);\n       Set_Is_Generic_Type (T);\n       Set_Is_Constrained  (T);\n \n@@ -2524,7 +2524,7 @@ package body Sem_Ch12 is\n       Mutate_Ekind        (Base, E_Enumeration_Type);\n       Set_Etype           (Base, Base);\n       Init_Size           (Base, 8);\n-      Init_Alignment      (Base);\n+      Reinit_Alignment    (Base);\n       Set_Is_Generic_Type (Base);\n       Set_Scalar_Range    (Base, Scalar_Range (T));\n       Set_Parent          (Base, Parent (Def));"}, {"sha": "0fe6c52da28f337396280abdcacd7d2a0e3d3408", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -862,7 +862,7 @@ package body Sem_Ch13 is\n         and then not Has_Alignment_Clause (Typ)\n         and then Size mod (Alignment (Typ) * SSU) /= 0\n       then\n-         Init_Alignment (Typ);\n+         Reinit_Alignment (Typ);\n       end if;\n    end Alignment_Check_For_Size_Change;\n \n@@ -6746,9 +6746,9 @@ package body Sem_Ch13 is\n                   Analyze (Decl, Suppress => All_Checks);\n \n                   Set_Has_Delayed_Freeze        (New_Ctyp, False);\n-                  Init_Esize                    (New_Ctyp);\n+                  Reinit_Esize                  (New_Ctyp);\n                   Set_RM_Size                   (New_Ctyp, Csize);\n-                  Init_Alignment                (New_Ctyp);\n+                  Reinit_Alignment              (New_Ctyp);\n                   Set_Is_Itype                  (New_Ctyp, True);\n                   Set_Associated_Node_For_Itype (New_Ctyp, U_Ent);\n \n@@ -7322,13 +7322,14 @@ package body Sem_Ch13 is\n                      if Is_First_Subtype (U_Ent) then\n                         if Is_Elementary_Type (U_Ent) then\n                            if Size <= System_Storage_Unit then\n-                              Init_Esize (U_Ent, System_Storage_Unit);\n+                              Set_Esize\n+                                (U_Ent, UI_From_Int (System_Storage_Unit));\n                            elsif Size <= 16 then\n-                              Init_Esize (U_Ent, 16);\n+                              Set_Esize (U_Ent, Uint_16);\n                            elsif Size <= 32 then\n-                              Init_Esize (U_Ent, 32);\n+                              Set_Esize (U_Ent, Uint_32);\n                            else\n-                              Set_Esize  (U_Ent, (Size + 63) / 64 * 64);\n+                              Set_Esize (U_Ent, (Size + 63) / 64 * 64);\n                            end if;\n \n                            Alignment_Check_For_Size_Change\n@@ -8652,9 +8653,6 @@ package body Sem_Ch13 is\n                         Set_Normalized_First_Bit (Comp, Fbit mod SSU);\n                         Set_Normalized_Position  (Comp, Fbit / SSU);\n \n-                        Set_Normalized_Position_Max\n-                          (Comp, Normalized_Position (Comp));\n-\n                         if Warn_On_Overridden_Size\n                           and then Has_Size_Clause (Etype (Comp))\n                           and then RM_Size (Etype (Comp)) /= Esize (Comp)\n@@ -8686,9 +8684,6 @@ package body Sem_Ch13 is\n                            Set_Normalized_First_Bit (Ocomp, Fbit mod SSU);\n                            Set_Normalized_Position  (Ocomp, Fbit / SSU);\n \n-                           Set_Normalized_Position_Max\n-                             (Ocomp, Normalized_Position (Ocomp));\n-\n                            --  Note: we don't use Set_Biased here, because we\n                            --  already gave a warning above if needed, and we\n                            --  would get a duplicate for the same name here.\n@@ -12104,8 +12099,7 @@ package body Sem_Ch13 is\n          Set_Component_Bit_Offset    (Fent, Uint_0);\n          Set_Normalized_Position     (Fent, Uint_0);\n          Set_Normalized_First_Bit    (Fent, Uint_0);\n-         Set_Normalized_Position_Max (Fent, Uint_0);\n-         Init_Esize                  (Fent, System_Address_Size);\n+         Set_Esize                   (Fent, UI_From_Int (System_Address_Size));\n \n          Set_Component_Clause (Fent,\n            Make_Component_Clause (Loc,\n@@ -16133,48 +16127,49 @@ package body Sem_Ch13 is\n    procedure Set_Enum_Esize (T : Entity_Id) is\n       Lo : Uint;\n       Hi : Uint;\n-      Sz : Nat;\n+      Sz : Unat;\n \n    begin\n-      Init_Alignment (T);\n+      Reinit_Alignment (T);\n \n       --  Find the minimum standard size (8,16,32,64,128) that fits\n \n       Lo := Enumeration_Rep (Entity (Type_Low_Bound (T)));\n       Hi := Enumeration_Rep (Entity (Type_High_Bound (T)));\n \n       if Lo < 0 then\n-         if Lo >= -Uint_2**07 and then Hi < Uint_2**07 then\n-            Sz := Standard_Character_Size;  -- May be > 8 on some targets\n+         if Lo >= -Uint_2**7 and then Hi < Uint_2**7 then\n+            Sz := UI_From_Int (Standard_Character_Size);\n+            --  Might be > 8 on some targets\n \n          elsif Lo >= -Uint_2**15 and then Hi < Uint_2**15 then\n-            Sz := 16;\n+            Sz := Uint_16;\n \n          elsif Lo >= -Uint_2**31 and then Hi < Uint_2**31 then\n-            Sz := 32;\n+            Sz := Uint_32;\n \n          elsif Lo >= -Uint_2**63 and then Hi < Uint_2**63 then\n-            Sz := 64;\n+            Sz := Uint_64;\n \n          else pragma Assert (Lo >= -Uint_2**127 and then Hi < Uint_2**127);\n-            Sz := 128;\n+            Sz := Uint_128;\n          end if;\n \n       else\n-         if Hi < Uint_2**08 then\n-            Sz := Standard_Character_Size;  -- May be > 8 on some targets\n+         if Hi < Uint_2**8 then\n+            Sz := UI_From_Int (Standard_Character_Size);\n \n          elsif Hi < Uint_2**16 then\n-            Sz := 16;\n+            Sz := Uint_16;\n \n          elsif Hi < Uint_2**32 then\n-            Sz := 32;\n+            Sz := Uint_32;\n \n          elsif Hi < Uint_2**64 then\n-            Sz := 64;\n+            Sz := Uint_64;\n \n          else pragma Assert (Hi < Uint_2**128);\n-            Sz := 128;\n+            Sz := Uint_128;\n          end if;\n       end if;\n \n@@ -16190,9 +16185,9 @@ package body Sem_Ch13 is\n \n         and then not Target_Short_Enums\n       then\n-         Init_Esize (T, Standard_Integer_Size);\n+         Set_Esize (T, UI_From_Int (Standard_Integer_Size));\n       else\n-         Init_Esize (T, Sz);\n+         Set_Esize (T, Sz);\n       end if;\n    end Set_Enum_Esize;\n "}, {"sha": "6a938706968ad4041b6ceb4d973081198f274ab6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -1299,7 +1299,7 @@ package body Sem_Ch3 is\n       Set_Can_Use_Internal_Rep     (T_Name,\n                                       not Always_Compatible_Rep_On_Target);\n       Set_Etype                    (T_Name, T_Name);\n-      Init_Size_Align              (T_Name);\n+      Reinit_Size_Align            (T_Name);\n       Set_Directly_Designated_Type (T_Name, Desig_Type);\n \n       --  If the access_to_subprogram is not declared at the library level,\n@@ -1465,7 +1465,7 @@ package body Sem_Ch3 is\n       --  and the pointer size is already set. Else, initialize.\n \n       if not From_Limited_With (T) then\n-         Init_Size_Align (T);\n+         Reinit_Size_Align (T);\n       end if;\n \n       --  Note that Has_Task is always false, since the access type itself\n@@ -1551,7 +1551,7 @@ package body Sem_Ch3 is\n          Set_Is_Aliased          (Tag);\n          Set_Is_Independent      (Tag);\n          Set_Related_Type        (Tag, Iface);\n-         Init_Component_Location (Tag);\n+         Reinit_Component_Location (Tag);\n \n          pragma Assert (Is_Frozen (Iface));\n \n@@ -1591,7 +1591,7 @@ package body Sem_Ch3 is\n             Set_Is_Aliased          (Offset);\n             Set_Is_Independent      (Offset);\n             Set_Related_Type        (Offset, Iface);\n-            Init_Component_Location (Offset);\n+            Reinit_Component_Location (Offset);\n             Insert_After (Last_Tag, Decl);\n             Last_Tag := Decl;\n          end if;\n@@ -3492,7 +3492,7 @@ package body Sem_Ch3 is\n       Mutate_Ekind         (T, E_Incomplete_Type);\n       Set_Etype            (T, T);\n       Set_Is_First_Subtype (T);\n-      Init_Size_Align      (T);\n+      Reinit_Size_Align    (T);\n \n       --  Set the SPARK mode from the current context\n \n@@ -4891,8 +4891,8 @@ package body Sem_Ch3 is\n \n       --  Initialize alignment and size and capture alignment setting\n \n-      Init_Alignment               (Id);\n-      Init_Esize                   (Id);\n+      Reinit_Alignment             (Id);\n+      Reinit_Esize                 (Id);\n       Set_Optimize_Alignment_Flags (Id);\n \n       --  Deal with aliased case\n@@ -5225,7 +5225,7 @@ package body Sem_Ch3 is\n       Set_Is_Pure          (T, Is_Pure (Current_Scope));\n       Set_Scope            (T, Current_Scope);\n       Mutate_Ekind         (T, E_Record_Type_With_Private);\n-      Init_Size_Align      (T);\n+      Reinit_Size_Align    (T);\n       Set_Default_SSO      (T);\n       Set_No_Reordering    (T, No_Component_Reordering);\n \n@@ -5390,7 +5390,7 @@ package body Sem_Ch3 is\n    begin\n       Generate_Definition (Id);\n       Set_Is_Pure (Id, Is_Pure (Current_Scope));\n-      Init_Size_Align (Id);\n+      Reinit_Size_Align (Id);\n \n       --  The following guard condition on Enter_Name is to handle cases where\n       --  the defining identifier has already been entered into the scope but\n@@ -6332,7 +6332,7 @@ package body Sem_Ch3 is\n          --  The constrained array type is a subtype of the unconstrained one\n \n          Mutate_Ekind           (T, E_Array_Subtype);\n-         Init_Size_Align        (T);\n+         Reinit_Size_Align      (T);\n          Set_Etype              (T, Implicit_Base);\n          Set_Scope              (T, Current_Scope);\n          Set_Is_Constrained     (T);\n@@ -6368,7 +6368,7 @@ package body Sem_Ch3 is\n          end if;\n \n          Mutate_Ekind                 (T, E_Array_Type);\n-         Init_Size_Align              (T);\n+         Reinit_Size_Align            (T);\n          Set_Etype                    (T, T);\n          Set_Scope                    (T, Current_Scope);\n          Set_Component_Size           (T, Uint_0);\n@@ -8987,7 +8987,7 @@ package body Sem_Ch3 is\n \n       if Is_Tagged then\n          Set_Is_Tagged_Type (Derived_Type);\n-         Init_Size_Align    (Derived_Type);\n+         Reinit_Size_Align  (Derived_Type);\n       end if;\n \n       --  STEP 0a: figure out what kind of derived type declaration we have\n@@ -10616,7 +10616,7 @@ package body Sem_Ch3 is\n       end if;\n \n       Set_Etype             (Def_Id, T);\n-      Init_Size_Align       (Def_Id);\n+      Reinit_Size_Align     (Def_Id);\n       Set_Has_Discriminants (Def_Id, Has_Discrs);\n       Set_Is_Constrained    (Def_Id, Constrained);\n \n@@ -15738,7 +15738,7 @@ package body Sem_Ch3 is\n \n                   --  Set remaining characterstics of anonymous access type\n \n-                  Init_Alignment (Acc_Type);\n+                  Reinit_Alignment (Acc_Type);\n                   Set_Directly_Designated_Type (Acc_Type, Derived_Type);\n \n                   Set_Etype (New_Id, Acc_Type);\n@@ -19812,10 +19812,10 @@ package body Sem_Ch3 is\n                Siz := Siz * 2;\n             end loop;\n \n-            Init_Esize (T, Siz);\n+            Set_Esize (T, UI_From_Int (Siz));\n \n          else\n-            Init_Esize (T, System_Max_Binary_Modulus_Power);\n+            Set_Esize (T, UI_From_Int (System_Max_Binary_Modulus_Power));\n          end if;\n \n          if not Non_Binary_Modulus (T) and then Esize (T) = RM_Size (T) then\n@@ -19850,7 +19850,7 @@ package body Sem_Ch3 is\n \n       Set_Etype (T, T);\n       Mutate_Ekind (T, E_Modular_Integer_Type);\n-      Init_Alignment (T);\n+      Reinit_Alignment (T);\n       Set_Is_Constrained (T);\n \n       if not Is_OK_Static_Expression (Mod_Expr) then\n@@ -19929,7 +19929,7 @@ package body Sem_Ch3 is\n       Error_Msg_F (\"modulus exceeds limit (2 '*'*^)\", Mod_Expr);\n \n       Set_Modular_Size (System_Max_Binary_Modulus_Power);\n-      Init_Alignment (T);\n+      Reinit_Alignment (T);\n \n    end Modular_Type_Declaration;\n \n@@ -20251,7 +20251,7 @@ package body Sem_Ch3 is\n \n       Mutate_Ekind           (T, E_Ordinary_Fixed_Point_Subtype);\n       Set_Etype              (T, Implicit_Base);\n-      Init_Size_Align        (T);\n+      Reinit_Size_Align      (T);\n       Inherit_Rep_Item_Chain (T, Implicit_Base);\n       Set_Small_Value        (T, Small_Val);\n       Set_Delta_Value        (T, Delta_Val);\n@@ -20653,8 +20653,8 @@ package body Sem_Ch3 is\n          end if;\n \n          Mutate_Ekind (Id, E_Discriminant);\n-         Init_Component_Location (Id);\n-         Init_Esize (Id);\n+         Reinit_Component_Location (Id);\n+         Reinit_Esize (Id);\n          Set_Discriminant_Number (Id, Discr_Number);\n \n          --  Make sure this is always set, even in illegal programs\n@@ -22322,7 +22322,7 @@ package body Sem_Ch3 is\n \n       Mutate_Ekind          (T, E_Record_Type);\n       Set_Etype             (T, T);\n-      Init_Size_Align       (T);\n+      Reinit_Size_Align     (T);\n       Set_Interfaces        (T, No_Elist);\n       Set_Stored_Constraint (T, No_Elist);\n       Set_Default_SSO       (T);\n@@ -22431,7 +22431,7 @@ package body Sem_Ch3 is\n             Set_Etype                     (Tag_Comp, RTE (RE_Tag));\n             Set_DT_Entry_Count            (Tag_Comp, No_Uint);\n             Set_Original_Record_Component (Tag_Comp, Tag_Comp);\n-            Init_Component_Location       (Tag_Comp);\n+            Reinit_Component_Location     (Tag_Comp);\n \n             --  Ada 2005 (AI-251): Addition of the Tag corresponding to all the\n             --  implemented interfaces.\n@@ -22535,7 +22535,7 @@ package body Sem_Ch3 is\n            and then not Is_Itype (Component)\n          then\n             Mutate_Ekind (Component, E_Component);\n-            Init_Component_Location (Component);\n+            Reinit_Component_Location (Component);\n          end if;\n \n          Propagate_Concurrent_Flags (T, Etype (Component));"}, {"sha": "5b38c7da4d76f932325ce15c17108b7eaf9bf611", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -1896,7 +1896,7 @@ package body Sem_Ch7 is\n    begin\n       Generate_Definition (Id);\n       Set_Is_Pure         (Id, PF);\n-      Init_Size_Align     (Id);\n+      Reinit_Size_Align   (Id);\n \n       if not Is_Package_Or_Generic_Package (Current_Scope)\n         or else In_Private_Part (Current_Scope)\n@@ -2573,7 +2573,7 @@ package body Sem_Ch7 is\n       Set_Etype              (Id, Id);\n       Set_Has_Delayed_Freeze (Id);\n       Set_Is_First_Subtype   (Id);\n-      Init_Size_Align        (Id);\n+      Reinit_Size_Align      (Id);\n \n       Set_Is_Constrained (Id,\n         No (Discriminant_Specifications (N))"}, {"sha": "a9f0f13e1e2a7ac40c4599ef76297ea845c9c217", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -1461,7 +1461,7 @@ package body Sem_Ch8 is\n          Mutate_Ekind (Id, E_Variable);\n       end if;\n \n-      Init_Object_Size_Align (Id);\n+      Reinit_Object_Size_Align (Id);\n \n       --  If N comes from source then check that the original node is an\n       --  object reference since there may have been several rewritting and"}, {"sha": "5293efb8beb8725d5a7fcc69f4c793dd6127c7e7", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -2024,7 +2024,7 @@ package body Sem_Ch9 is\n \n       Mutate_Ekind           (T, E_Protected_Type);\n       Set_Is_First_Subtype   (T);\n-      Init_Size_Align        (T);\n+      Reinit_Size_Align      (T);\n       Set_Etype              (T, T);\n       Set_Has_Delayed_Freeze (T);\n       Set_Stored_Constraint  (T, No_Elist);\n@@ -2143,7 +2143,7 @@ package body Sem_Ch9 is\n       while Present (E) loop\n          if Ekind (E) = E_Void then\n             Mutate_Ekind (E, E_Component);\n-            Init_Component_Location (E);\n+            Reinit_Component_Location (E);\n          end if;\n \n          Next_Entity (E);\n@@ -3151,7 +3151,7 @@ package body Sem_Ch9 is\n       Mutate_Ekind           (T, E_Task_Type);\n       Set_Is_First_Subtype   (T, True);\n       Set_Has_Task           (T, True);\n-      Init_Size_Align        (T);\n+      Reinit_Size_Align      (T);\n       Set_Etype              (T, T);\n       Set_Has_Delayed_Freeze (T, True);\n       Set_Stored_Constraint  (T, No_Elist);"}, {"sha": "9cad55d9cc23233fa218540e34f5dfbe72826dc2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -7562,7 +7562,7 @@ package body Sem_Prag is\n             end if;\n \n             if not Has_Alignment_Clause (Ent) then\n-               Init_Alignment (Ent);\n+               Reinit_Alignment (Ent);\n             end if;\n          end Set_Atomic_VFA;\n "}, {"sha": "a3d6ff81439bfe916640ebff62236f125503964c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -24986,7 +24986,7 @@ package body Sem_Util is\n       Set_Public_Status (N);\n \n       if Kind in Type_Kind then\n-         Init_Size_Align (N);\n+         Reinit_Size_Align (N);\n       end if;\n \n       return N;\n@@ -25010,7 +25010,7 @@ package body Sem_Util is\n       Append_Entity   (N, Scope_Id);\n \n       if Kind in Type_Kind then\n-         Init_Size_Align (N);\n+         Reinit_Size_Align (N);\n       end if;\n \n       return N;"}, {"sha": "62a1c4f59608be6c7d3c9a6b13f325726a688832", "filename": "gcc/ada/ttypes.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fttypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fttypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypes.ads?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -25,7 +25,7 @@\n \n --  This package contains constants describing target properties\n \n-with Types;    use Types;\n+with Types; use Types;\n with Set_Targ;\n \n package Ttypes is"}, {"sha": "70caf490f75019345b451b78099d897960280397", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5a8832632eecf5786dff295d073938aeb6d6d8/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=8e5a8832632eecf5786dff295d073938aeb6d6d8", "patch": "@@ -92,7 +92,7 @@ package Uintp is\n \n    subtype Valid_Uint is Uint with Predicate => Valid_Uint /= No_Uint;\n    subtype Unat is Valid_Uint with Predicate => Unat >= Uint_0;\n-   subtype Upos is Valid_Uint with Predicate => Upos >= Uint_0;\n+   subtype Upos is Valid_Uint with Predicate => Upos >= Uint_1;\n    subtype Nonzero_Uint is Valid_Uint with Predicate => Nonzero_Uint /= Uint_0;\n \n    type UI_Vector is array (Pos range <>) of Int;"}]}