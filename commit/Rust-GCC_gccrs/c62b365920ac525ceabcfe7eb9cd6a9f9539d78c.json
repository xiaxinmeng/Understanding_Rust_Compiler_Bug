{"sha": "c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyYjM2NTkyMGFjNTI1Y2VhYmNmZTdlYjljZDZhOWY5NTM5ZDc4Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-16T18:34:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-16T18:34:04Z"}, "message": "re PR target/36246 (Reload chooses too wide mode for reg->mem->xmmreg reload)\n\n\tPR target/36246\n\t* config/i386/i386.h (SECONDARY_MEMORY_NEEDED_MODE): New define.\n\ntestsuite/ChangeLog:\n\n\tPR target/36246\n\t* gcc.target/i386/pr36246.c: New test.\n\nFrom-SVN: r135437", "tree": {"sha": "5db208525cb9929f9182d4e4ecdadbb901d9c7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db208525cb9929f9182d4e4ecdadbb901d9c7e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/comments", "author": null, "committer": null, "parents": [{"sha": "44e356670402d3a9875f6cbf2657ef9c92a66bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e356670402d3a9875f6cbf2657ef9c92a66bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e356670402d3a9875f6cbf2657ef9c92a66bda"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "59c00bbc322aefa71df5311ef07a28014e31ae2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "patch": "@@ -1,3 +1,8 @@\n+2008-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36246\n+\t* config/i386/i386.h (SECONDARY_MEMORY_NEEDED_MODE): New define.\n+\n 2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* ifcvt.c (dead_or_predicable): Rename\n@@ -58,8 +63,8 @@\n \n 2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\t* cfg.c (init_flow): Add argument THE_FUN.  Use it\n-\tinstead of cfun.  Update all users.\n+\t* cfg.c (init_flow): Add argument THE_FUN.  Use it instead of cfun.\n+\tUpdate all users.\n \n 2008-05-16  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n@@ -68,10 +73,9 @@\n \t* tree-pretty-print.c (dump_phi_nodes, dump_generic_bb_buff):\n \tAdd verbose dump.\n \t* tree-pass.h (TDF_VERBOSE): New dump flag.\n-\t* print-tree.c (print_node): Added code to be able to print\n-\tPHI_NODES.\n+\t* print-tree.c (print_node): Added code to be able to print PHI_NODES.\n \t(tree-flow.h): Added include.\n-\tMakefile.in (print-tree.o):  Added TREE_FLOW_H.\n+\t* Makefile.in (print-tree.o):  Added TREE_FLOW_H.\n \n 2008-05-16  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n@@ -87,8 +91,7 @@\n \tMULTILIB_MATCHES, MULTILIB_EXCEPTIONS): Likewise.\n \t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Add\n \tBFIN_CPU_UNKNOWN.\n-\t* config/bfin/elf.h (STARTFILE_SPEC): Use specific CRT for\n-\tBF561.\n+\t* config/bfin/elf.h (STARTFILE_SPEC): Use specific CRT for BF561.\n \t(LIB_SPEC): Use proper linker script for bf561.  Error if no mcpu\n \toption.\n \t* config/bfin/bfin.c (bfin_cpu_type): Set to BFIN_CPU_UNKNOWN.\n@@ -123,8 +126,7 @@\n \t* ipa-inline.c (compute_inline_parameters): Made public and added\n \tnode parameter.\n \t(compute_inline_parameters_for_current): New function.\n-\t(pass_inline_param): Now calls\n-\tcompute_inline_parameters_for_current.\n+\t(pass_inline_param): Now calls compute_inline_parameters_for_current.\n \t(inline_generate_summary): Removed parameter and made to loop over\n \tall cgraph nodes.\n \t(pass_ipa_inline): Updated for new IPA_PASS structure.\n@@ -147,20 +149,18 @@\n \n 2008-05-15  Diego Novillo  <dnovillo@google.com>\n \n-\t* config/arm/arm.c (arm_return_in_memory): Fix return\n-\ttype.\n+\t* config/arm/arm.c (arm_return_in_memory): Fix return type.\n \t* config/arm/arm-protos.h (arm_return_in_memory): Likewise.\n \n 2008-05-15  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR middle-end/36194\n-\t* combine.c (check_conversion): Rename back to check_promoted_subreg. \n-\tDon't call record_truncated_value from here. \n-\t(record_truncated_value): Turn it into a for_each_rtx callback. \n-\t(record_truncated_values): New function. \n-\t(combine_instructions): Call note_uses with \n-\trecord_truncated_values.  Change name of check_conversion to \n-\tcheck_promoted_subreg. \n+\t* combine.c (check_conversion): Rename back to check_promoted_subreg.\n+\tDon't call record_truncated_value from here.\n+\t(record_truncated_value): Turn it into a for_each_rtx callback.\n+\t(record_truncated_values): New function.\n+\t(combine_instructions): Call note_uses with record_truncated_values.\n+\tChange name of check_conversion to check_promoted_subreg. \n \n 2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n "}, {"sha": "8516e53b41db5b692a8cfa92d380c730f9c641f0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "patch": "@@ -1516,6 +1516,14 @@ enum reg_class\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\\n   ix86_secondary_memory_needed ((CLASS1), (CLASS2), (MODE), 1)\n \n+/* Get_secondary_mem widens integral modes to BITS_PER_WORD.\n+   There is no need to emit full 64 bit move on 64 bit targets\n+   for integral modes that can be moved using 32 bit move.  */\n+#define SECONDARY_MEMORY_NEEDED_MODE(MODE)\t\t\t\\\n+  (GET_MODE_BITSIZE (MODE) < 32 && INTEGRAL_MODE_P (MODE)\t\\\n+   ? mode_for_size (32, GET_MODE_CLASS (MODE), 0)\t\t\\\n+   : MODE)\n+\n /* QImode spills from non-QI registers need a scratch.  This does not\n    happen often -- the only example so far requires an uninitialized\n    pseudo.  */"}, {"sha": "88c26192c04821207e28f823dc09b04c4d2b20ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "patch": "@@ -1,3 +1,8 @@\n+2008-05-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36246\n+\t* gcc.target/i386/pr36246.c: New test.\n+\n 2008-05-16  Sebastian Pop  <sebastian.pop@amd.com>\n \t    Jan Sjodin  <jan.sjodin@amd.com>\n \n@@ -58,16 +63,14 @@\n 2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n \n \t* lib/torture-options.exp: New support for torture options.\n-\t* lib/gfortran-dg.exp (gfortran-dg-runtest): Use new torture\n-\tprocs.\n+\t* lib/gfortran-dg.exp (gfortran-dg-runtest): Use new torture procs.\n \t* lib/c-torture.exp: Define C_TORTURE_OPTIONS instead of\n \tTORTURE_OPTIONS; don't define torture_with_loops and\n \ttorture_without_loops.\n \t* lib/gcc-dg.exp: Define DG_TORTURE_OPTIONS instead of\n \tTORTURE_OPTIONS; don't define torture_with_loops and\n \ttorture_without_loops.\n-\t(gcc-dg-runtest): Use new torture procs if no torture options\n-\tdefined.\n+\t(gcc-dg-runtest): Use new torture procs if no torture options defined.\n \t* lib/fortran-torture.exp: Define FORTRAN_TORTURE_OPTIONS instead of\n \tTORTURE_OPTIONS.\n \t(fortran-torture-execute): Use torture_with_loops instead of"}, {"sha": "5ef573213abdef699124359df828c8dad589688b", "filename": "gcc/testsuite/gcc.target/i386/pr36246.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62b365920ac525ceabcfe7eb9cd6a9f9539d78c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36246.c?ref=c62b365920ac525ceabcfe7eb9cd6a9f9539d78c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+__m128i\n+_mm_set_epi32 (int __q3, int __q2, int __q1, int __q0)\n+{\n+  return (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movq\" } } */"}]}