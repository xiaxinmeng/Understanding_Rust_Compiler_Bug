{"sha": "66371f94f55df849da15ffa9334868de99ac1f8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzNzFmOTRmNTVkZjg0OWRhMTVmZmE5MzM0ODY4ZGU5OWFjMWY4Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-27T13:21:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-27T13:21:36Z"}, "message": "[multiple changes]\n\n2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Process_Formals): A non-private formal type that\n\tis a limited view does not have a list of private dependents.\n\n2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Case_Statement): If the expression in\n\tthe case statement is a compile-time known value, we look for a\n\tcorresponding alternative to optimize the case statement into a\n\tsingle case. If the type has a static predicate and the expression\n\tdoes not satisfy the predicate, there is no legal alternative and\n\tthis optimization is not applicable.  Excecution is erroneous,\n\tor else if assertions are enabled, an exception will be raised\n\tearlier, at the point the expression is elaborated.\n\n2015-05-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Check_Internal_Call_Continue): Suppress\n\twarning on Finalize, Adjust, or Initialize if type involved has\n\tWarnings_Off set.\n\n2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aux.adb, sem_aux.ads (First_Discriminant): Return empty when\n\tapplied to a type with no known discriminants.\n\nFrom-SVN: r223752", "tree": {"sha": "dbabfad685e11db4ddd93bf224893bbc8f7f4d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbabfad685e11db4ddd93bf224893bbc8f7f4d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66371f94f55df849da15ffa9334868de99ac1f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66371f94f55df849da15ffa9334868de99ac1f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66371f94f55df849da15ffa9334868de99ac1f8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66371f94f55df849da15ffa9334868de99ac1f8c/comments", "author": null, "committer": null, "parents": [{"sha": "0c6826a52305c4dadad3da2882f708e80638f100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6826a52305c4dadad3da2882f708e80638f100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6826a52305c4dadad3da2882f708e80638f100"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "9d5222b95ce50779e1ea0a67e23b39b070e1ffd7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -1,3 +1,30 @@\n+2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Process_Formals): A non-private formal type that\n+\tis a limited view does not have a list of private dependents.\n+\n+2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Case_Statement): If the expression in\n+\tthe case statement is a compile-time known value, we look for a\n+\tcorresponding alternative to optimize the case statement into a\n+\tsingle case. If the type has a static predicate and the expression\n+\tdoes not satisfy the predicate, there is no legal alternative and\n+\tthis optimization is not applicable.  Excecution is erroneous,\n+\tor else if assertions are enabled, an exception will be raised\n+\tearlier, at the point the expression is elaborated.\n+\n+2015-05-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb (Check_Internal_Call_Continue): Suppress\n+\twarning on Finalize, Adjust, or Initialize if type involved has\n+\tWarnings_Off set.\n+\n+2015-05-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aux.adb, sem_aux.ads (First_Discriminant): Return empty when\n+\tapplied to a type with no known discriminants.\n+\n 2015-05-26  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.ads, sem_ch4.adb, sem_ch6.adb: Minor reformatting."}, {"sha": "7156c76a8ef2eea63d8917d0aa1050f853abc019", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -2586,9 +2586,16 @@ package body Exp_Ch5 is\n \n    begin\n       --  Check for the situation where we know at compile time which branch\n-      --  will be taken\n+      --  will be taken.\n \n-      if Compile_Time_Known_Value (Expr) then\n+      --  If the value is static but its subtype is predicated and the value\n+      --  does not obey the predicate, the value is marked non-static, and\n+      --  there can be no corresponding static alternative.\n+\n+      if Compile_Time_Known_Value (Expr)\n+        and then (not Has_Predicates (Etype (Expr))\n+                   or else Is_Static_Expression (Expr))\n+      then\n          Alt := Find_Static_Alternative (N);\n \n          --  Do not consider controlled objects found in a case statement which"}, {"sha": "32d5b1f299cdca58999d12a66870fe97799910ac", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -246,7 +246,12 @@ package body Sem_Aux is\n          Ent := Next_Entity (Ent);\n       end loop;\n \n-      pragma Assert (Ekind (Ent) = E_Discriminant);\n+      --  Call may be on a private type with unknown discriminants, in which\n+      --  case Ent is Empty, and as per the spec, we return Empty in this case.\n+\n+      --  Historical note: The revious assertion that Ent is a discriminant\n+      --  was overly cautious and prevented application of this function in\n+      --  SPARK applications.\n \n       return Ent;\n    end First_Discriminant;"}, {"sha": "db0931e0713588486fb553225facce5da1c379bd", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -119,9 +119,9 @@ package Sem_Aux is\n    --  First_Entity. The exception arises for tagged types, where the tag\n    --  itself is prepended to the front of the entity chain, so the\n    --  First_Discriminant function steps past the tag if it is present.\n-   --  The caller is responsible for checking that the type has discriminants,\n-   --  so for example it is improper to call this function on a private\n-   --  type with unknown discriminants.\n+   --  The caller is responsible for checking that the type has discriminants.\n+   --  When called on a private type with unknown discriminants, the function\n+   --  always returns Empty.\n \n    function First_Stored_Discriminant (Typ : Entity_Id) return Entity_Id;\n    --  Typ is a type with discriminants. Gives the first discriminant stored"}, {"sha": "18a9b0299ee80be15cc7a18f0e3b5ebd76326dac", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -10117,9 +10117,13 @@ package body Sem_Ch6 is\n                        (Parent (T), N_Access_Function_Definition,\n                                     N_Access_Procedure_Definition)\n                      then\n-                        if not Is_Class_Wide_Type (Formal_Type) then\n+                        --  A limited view has no private dependents\n+\n+                        if not Is_Class_Wide_Type (Formal_Type)\n+                          and then not From_Limited_With (Formal_Type)\n+                        then\n                            Append_Elmt (Current_Scope,\n-                               Private_Dependents (Base_Type (Formal_Type)));\n+                             Private_Dependents (Base_Type (Formal_Type)));\n                         end if;\n \n                         --  Freezing is delayed to ensure that Register_Prim"}, {"sha": "01fd0cd969e0fe1d4d3cbf1e875267db54ceb5cc", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66371f94f55df849da15ffa9334868de99ac1f8c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=66371f94f55df849da15ffa9334868de99ac1f8c", "patch": "@@ -2447,6 +2447,30 @@ package body Sem_Elab is\n                  (\"instantiation of& may occur before body is seen<l<\",\n                   N, Orig_Ent);\n             else\n+               --  A rather specific check. For Finalize/Adjust/Initialize,\n+               --  if the type has Warnings_Off set, suppress the warning.\n+\n+               if Nam_In (Chars (E), Name_Adjust,\n+                                     Name_Finalize,\n+                                     Name_Initialize)\n+                 and then Present (First_Formal (E))\n+               then\n+                  declare\n+                     T : constant Entity_Id := Etype (First_Formal (E));\n+                  begin\n+                     if Is_Controlled (T) then\n+                        if Warnings_Off (T)\n+                          or else (Ekind (T) = E_Private_Type\n+                                    and then Warnings_Off (Full_View (T)))\n+                        then\n+                           goto Output;\n+                        end if;\n+                     end if;\n+                  end;\n+               end if;\n+\n+               --  Go ahead and give warning if not this special case\n+\n                Error_Msg_NE\n                  (\"call to& may occur before body is seen<l<\", N, Orig_Ent);\n             end if;\n@@ -2458,6 +2482,8 @@ package body Sem_Elab is\n             --  all the clarification messages produces by Output_Calls must be\n             --  emitted unconditionally.\n \n+            <<Output>>\n+\n             Output_Calls (N, Check_Elab_Flag => False);\n          end if;\n       end if;"}]}