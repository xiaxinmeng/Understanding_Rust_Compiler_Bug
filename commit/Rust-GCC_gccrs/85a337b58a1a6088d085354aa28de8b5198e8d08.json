{"sha": "85a337b58a1a6088d085354aa28de8b5198e8d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhMzM3YjU4YTFhNjA4OGQwODUzNTRhYTI4ZGU4YjUxOThlOGQwOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-11T18:28:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-11T18:28:59Z"}, "message": "mn10300: Define the A and D constraints.\n\nThis will allow combining am33 and mn103 alternatives\nwithout having to resort to the enabled attribute.\n\nThe existing 'A' constraint renamed to 'c'.  Thankfully\nthis existing accumulator constraint doesn't appear in\neither newlib or eglibc sources.\n\nFrom-SVN: r168675", "tree": {"sha": "7deed119e939b6f57b15932b9e0d854c7e425658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7deed119e939b6f57b15932b9e0d854c7e425658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a337b58a1a6088d085354aa28de8b5198e8d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a337b58a1a6088d085354aa28de8b5198e8d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a337b58a1a6088d085354aa28de8b5198e8d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a337b58a1a6088d085354aa28de8b5198e8d08/comments", "author": null, "committer": null, "parents": [{"sha": "a5c727e3babe7dfdb78652074dcefbedb10ab1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c727e3babe7dfdb78652074dcefbedb10ab1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c727e3babe7dfdb78652074dcefbedb10ab1a0"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "5b290b788cfc658e7bf0e776270d78fa5a6c426c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85a337b58a1a6088d085354aa28de8b5198e8d08", "patch": "@@ -1,5 +1,10 @@\n 2011-01-11  Richard Henderson  <rth@redhat.com>\n \n+\t* config/mn10300/constraints.md (\"c\"): Rename from \"A\".\n+\t(\"A\", \"D\"): New constraint letters.\n+\t* config/mn10300/mn10300.md (fmasf4): Use the \"c\" constraint.\n+\t(fmssf4, fnmasf4, fnmssf4): Likewise.\n+\n \t* config/mn10300/mn10300.md (isa): New attribute.\n \t(enabled): New attribute.\n "}, {"sha": "c9863fc508c40ec0c903e5f2e18b4f2370df12b3", "filename": "gcc/config/mn10300/constraints.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2Fconfig%2Fmn10300%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2Fconfig%2Fmn10300%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fconstraints.md?ref=85a337b58a1a6088d085354aa28de8b5198e8d08", "patch": "@@ -23,6 +23,15 @@\n (define_register_constraint \"a\" \"ADDRESS_REGS\"\n   \"An address register.\")\n \n+;; This can be used for QI/HImode memory operations, and most arithmetic.\n+;; AM33 supports these on all registers, where MN103 needs DATA_REGS.\n+(define_register_constraint \"D\" \"TARGET_AM33 ? GENERAL_REGS : DATA_REGS\"\n+  \"A general register for AM33, and a data register otherwise.\")\n+\n+;; Similarly for ADDRESS_REGS vs GENERAL_REGS.\n+(define_register_constraint \"A\" \"TARGET_AM33 ? GENERAL_REGS : ADDRESS_REGS\"\n+  \"A general register for AM33, and an address register otherwise.\")\n+\n (define_register_constraint \"y\" \"SP_REGS\"\n   \"An SP register (if available).\")\n \n@@ -32,7 +41,7 @@\n (define_register_constraint \"f\" \"TARGET_AM33_2 ? FP_REGS : NO_REGS\"\n   \"A floating point register.\")\n \n-(define_register_constraint \"A\" \"TARGET_AM33_2 ? FP_ACC_REGS : NO_REGS\"\n+(define_register_constraint \"c\" \"TARGET_AM33_2 ? FP_ACC_REGS : NO_REGS\"\n   \"A floating point accumulator register.\")\n \n (define_memory_constraint \"Q\""}, {"sha": "1773a03624baecaf230b6c8fee920a385f083deb", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a337b58a1a6088d085354aa28de8b5198e8d08/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=85a337b58a1a6088d085354aa28de8b5198e8d08", "patch": "@@ -2717,7 +2717,7 @@\n )\n \n (define_insn \"fmasf4\"\n-  [(set (match_operand:SF         0 \"register_operand\" \"=A\")\n+  [(set (match_operand:SF         0 \"register_operand\" \"=c\")\n \t(fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t(match_operand:SF 2 \"register_operand\" \"f\")\n \t\t(match_operand:SF 3 \"register_operand\" \"f\")))\n@@ -2730,7 +2730,7 @@\n )\n \n (define_insn \"fmssf4\"\n-  [(set (match_operand:SF                 0 \"register_operand\" \"=A\")\n+  [(set (match_operand:SF                 0 \"register_operand\" \"=c\")\n \t(fma:SF (match_operand:SF         1 \"register_operand\" \"f\")\n \t\t(match_operand:SF         2 \"register_operand\" \"f\")\n \t\t(neg:SF (match_operand:SF 3 \"register_operand\" \"f\"))))\n@@ -2743,7 +2743,7 @@\n )\n \n (define_insn \"fnmasf4\"\n-  [(set (match_operand:SF                 0 \"register_operand\" \"=A\")\n+  [(set (match_operand:SF                 0 \"register_operand\" \"=c\")\n \t(fma:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n \t\t(match_operand:SF         2 \"register_operand\" \"f\")\n \t\t(match_operand:SF         3 \"register_operand\" \"f\")))\n@@ -2756,7 +2756,7 @@\n )\n \n (define_insn \"fnmssf4\"\n-  [(set (match_operand:SF                 0 \"register_operand\" \"=A\")\n+  [(set (match_operand:SF                 0 \"register_operand\" \"=c\")\n \t(fma:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n \t\t(match_operand:SF         2 \"register_operand\" \"f\")\n \t\t(neg:SF (match_operand:SF 3 \"register_operand\" \"f\"))))"}]}