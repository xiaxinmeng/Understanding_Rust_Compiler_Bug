{"sha": "4c3d876014207c013566132a93cb9d29f0c96a7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzZDg3NjAxNDIwN2MwMTM1NjYxMzJhOTNjYjlkMjlmMGM5NmE3Yg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-06-25T11:05:19Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-06-25T11:05:19Z"}, "message": "[PR 90939] Remove outdated assert in ipcp_bits_lattice::meet_with\n\n2019-06-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/90939\n\t* ipa-cp.c (ipcp_bits_lattice::meet_with): Remove assert.\n\n\ttestsuite/\n\t* g++.dg/lto/pr90939_[01].C: New test.\n\nFrom-SVN: r272646", "tree": {"sha": "af305bd0e842e15cbf4c0a463fe00bfc06609585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af305bd0e842e15cbf4c0a463fe00bfc06609585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c3d876014207c013566132a93cb9d29f0c96a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3d876014207c013566132a93cb9d29f0c96a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3d876014207c013566132a93cb9d29f0c96a7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3d876014207c013566132a93cb9d29f0c96a7b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "332d6c4189218b06a22260beae02fa40d1ec3286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332d6c4189218b06a22260beae02fa40d1ec3286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332d6c4189218b06a22260beae02fa40d1ec3286"}], "stats": {"total": 120, "additions": 119, "deletions": 1}, "files": [{"sha": "fee1f55c7ae82f38cde292363937c4b7c39ce9f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c3d876014207c013566132a93cb9d29f0c96a7b", "patch": "@@ -1,3 +1,8 @@\n+2019-06-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/90939\n+\t* ipa-cp.c (ipcp_bits_lattice::meet_with): Remove assert.\n+\n 2019-06-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90930"}, {"sha": "69c00a9c5a58e59f1d6534603d1c0f8f7e70ec9e", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=4c3d876014207c013566132a93cb9d29f0c96a7b", "patch": "@@ -1085,7 +1085,6 @@ ipcp_bits_lattice::meet_with (ipcp_bits_lattice& other, unsigned precision,\n   if (TREE_CODE_CLASS (code) == tcc_binary)\n     {\n       tree type = TREE_TYPE (operand);\n-      gcc_assert (INTEGRAL_TYPE_P (type));\n       widest_int o_value, o_mask;\n       get_value_and_mask (operand, &o_value, &o_mask);\n "}, {"sha": "ca27bc3bffd2cc5f0ba1d3c99a8f4855a3f494a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c3d876014207c013566132a93cb9d29f0c96a7b", "patch": "@@ -1,3 +1,8 @@\n+2019-06-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/90939\n+\t* g++.dg/lto/pr90939_[01].C: New test.\n+\n 2019-06-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90930"}, {"sha": "8987c34801534a3b037b76dbba5e4cd3e3817cf7", "filename": "gcc/testsuite/g++.dg/lto/pr90939_0.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_0.C?ref=4c3d876014207c013566132a93cb9d29f0c96a7b", "patch": "@@ -0,0 +1,64 @@\n+// PR ipa/90939\n+// { dg-lto-do link }\n+// { dg-lto-options { { -flto -O3 } } }\n+\n+\n+typedef char uint8_t;\n+template <class T> class A {\n+public:\n+  A(T *);\n+};\n+template <typename Derived, typename Base> const Derived &To(Base &p1) {\n+  return static_cast<const Derived &>(p1);\n+}\n+class H;\n+template <typename, typename Base> const H *To(Base *p1) {\n+  return p1 ? &To<H>(*p1) : nullptr;\n+}\n+enum TextDirection : uint8_t;\n+enum WritingMode : unsigned;\n+class B {\n+public:\n+  WritingMode m_fn1();\n+};\n+class C {\n+public:\n+  int &m_fn2();\n+};\n+class D { double d;};\n+class H : public D {};\n+class F {\n+public:\n+  F(C, A<const int>, B *, WritingMode, TextDirection);\n+};\n+\n+class G {\n+public:\n+  C NGLayoutAlgorithm_node;\n+  B NGLayoutAlgorithm_space;\n+  TextDirection NGLayoutAlgorithm_direction;\n+  H NGLayoutAlgorithm_break_token;\n+  G(A<const int> p1) __attribute__((noinline))\n+    : break_token_(&NGLayoutAlgorithm_break_token),\n+        container_builder_(NGLayoutAlgorithm_node, p1, &NGLayoutAlgorithm_space,\n+                           NGLayoutAlgorithm_space.m_fn1(),\n+                           NGLayoutAlgorithm_direction) {}\n+  G(C p1, const H *) : G(&p1.m_fn2()) {}\n+  A<H> break_token_;\n+  F container_builder_;\n+};\n+\n+class I : G {\n+public:\n+  I(const D *) __attribute__((noinline));\n+};\n+C a;\n+I::I(const D *p1) : G(a, To<H>(p1)) {}\n+\n+D gd[10];\n+\n+int main (int argc, char *argv[])\n+{\n+  I i(&(gd[argc%2]));\n+  return 0;\n+}"}, {"sha": "9add89494d76cf62e6ebf23ec5a5a937e094908f", "filename": "gcc/testsuite/g++.dg/lto/pr90939_1.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3d876014207c013566132a93cb9d29f0c96a7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr90939_1.C?ref=4c3d876014207c013566132a93cb9d29f0c96a7b", "patch": "@@ -0,0 +1,45 @@\n+typedef char uint8_t;\n+template <class T> class A {\n+public:\n+  A(T *);\n+};\n+\n+enum TextDirection : uint8_t;\n+enum WritingMode : unsigned;\n+class B {\n+public:\n+  WritingMode m_fn1();\n+};\n+class C {\n+public:\n+  int &m_fn2();\n+};\n+\n+class F {\n+public:\n+  F(C, A<const int>, B *, WritingMode, TextDirection);\n+};\n+class D { double d;};\n+class H : public D {};\n+\n+\n+\n+template <class T> A<T>::A(T*) {}\n+\n+template class A<H>;\n+template class A<int const>;\n+\n+WritingMode __attribute__((noipa))\n+B::m_fn1()\n+{\n+  return (WritingMode) 0;\n+}\n+\n+int gi;\n+int & __attribute__((noipa))\n+C::m_fn2 ()\n+{\n+  return gi;\n+}\n+\n+__attribute__((noipa)) F::F(C, A<const int>, B *, WritingMode, TextDirection) {}"}]}