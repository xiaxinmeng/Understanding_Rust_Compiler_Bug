{"sha": "4793ad6b2d52778521b8bc22fd3247f641deb468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5M2FkNmIyZDUyNzc4NTIxYjhiYzIyZmQzMjQ3ZjY0MWRlYjQ2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-10-19T19:54:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-10-19T19:54:11Z"}, "message": "unwind-dw2.c (execute_stack_op): Fix operand order for DW_OP_le, DW_OP_ge, DW_OP_lt and DW_OP_gt.\n\n\t* unwind-dw2.c (execute_stack_op): Fix operand order for\n\tDW_OP_le, DW_OP_ge, DW_OP_lt and DW_OP_gt.\n\n\t* gcc.dg/cleanup-13.c: New test.\n\nFrom-SVN: r152989", "tree": {"sha": "7a9333167ca5303bf02997104457f27c119642fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9333167ca5303bf02997104457f27c119642fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4793ad6b2d52778521b8bc22fd3247f641deb468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4793ad6b2d52778521b8bc22fd3247f641deb468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4793ad6b2d52778521b8bc22fd3247f641deb468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4793ad6b2d52778521b8bc22fd3247f641deb468/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1517fd57b68072b7bc7335cd410da066f82dc26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1517fd57b68072b7bc7335cd410da066f82dc26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1517fd57b68072b7bc7335cd410da066f82dc26d"}], "stats": {"total": 340, "additions": 334, "deletions": 6}, "files": [{"sha": "c9ec51257f05f4cb672bbc44d5ef9a68b666b83c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4793ad6b2d52778521b8bc22fd3247f641deb468", "patch": "@@ -1,3 +1,8 @@\n+2009-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* unwind-dw2.c (execute_stack_op): Fix operand order for\n+\tDW_OP_le, DW_OP_ge, DW_OP_lt and DW_OP_gt.\n+\n 2009-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-low.c (struct lower_data): Add cannot_fallthru field."}, {"sha": "750e1a4dd1decb50421b895221a06f081cbaff74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4793ad6b2d52778521b8bc22fd3247f641deb468", "patch": "@@ -1,3 +1,7 @@\n+2009-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/cleanup-13.c: New test.\n+\n 2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41586"}, {"sha": "0a5a9e9153e020a472801c4b68fb740a96196c0e", "filename": "gcc/testsuite/gcc.dg/cleanup-13.c", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-13.c?ref=4793ad6b2d52778521b8bc22fd3247f641deb468", "patch": "@@ -0,0 +1,319 @@\n+/* HP-UX libunwind.so doesn't provide _UA_END_OF_STACK */\n+/* { dg-do run } */\n+/* { dg-options \"-fexceptions\" } */\n+/* { dg-skip-if \"\" { \"ia64-*-hpux11.*\" }  { \"*\" } { \"\" } } */\n+/* Verify DW_OP_* handling in the unwinder.  */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* #define OP_addr(x) 0x06, ... */\n+#define OP_deref 0x06,\n+#define SLEB128(x) (x)&0x7f\t/* Assume here the value is -0x40 ... 0x3f.  */\n+#define ULEB128(x) (x)&0x7f\t/* Assume here the value is 0 ... 0x7f.  */\n+#define VAL1(x) (x)&0xff\n+#if defined (__BIG_ENDIAN__)\n+#define VAL2(x) ((x)>>8)&0xff,(x)&0xff\n+#define VAL4(x) ((x)>>24)&0xff,((x)>>16)&0xff,((x)>>8)&0xff,(x)&0xff\n+#define VAL8(x) ((x)>>56)&0xff,((x)>>48)&0xff,((x)>>40)&0xff,((x)>>32)&0xff,((x)>>24)&0xff,((x)>>16)&0xff,((x)>>8)&0xff,(x)&0xff\n+#elif defined(__LITTLE_ENDIAN__) || defined(__x86_64__) || defined(__i386__)\n+#define VAL2(x) (x)&0xff,((x)>>8)&0xff\n+#define VAL4(x) (x)&0xff,((x)>>8)&0xff,((x)>>16)&0xff,((x)>>24)&0xff\n+#define VAL8(x) (x)&0xff,((x)>>8)&0xff,((x)>>16)&0xff,((x)>>24)&0xff,((x)>>32)&0xff,((x)>>40)&0xff,((x)>>48)&0xff,((x)>>56)&0xff\n+#endif\n+#define OP_const1u(x) 0x08,VAL1(x),\n+#define OP_const1s(x) 0x09,VAL1(x),\n+#define OP_const2u(x) 0x0a,VAL2(x),\n+#define OP_const2s(x) 0x0b,VAL2(x),\n+#define OP_const4u(x) 0x0c,VAL4(x),\n+#define OP_const4s(x) 0x0d,VAL4(x),\n+#define OP_const8u(x) 0x0e,VAL8(x),\n+#define OP_const8s(x) 0x0f,VAL8(x),\n+#define OP_constu(x) 0x10,ULEB128(x),\n+#define OP_consts(x) 0x11,SLEB128(x),\n+#define OP_dup 0x12,\n+#define OP_drop 0x13,\n+#define OP_over 0x14,\n+#define OP_pick(x) 0x15,VAL1(x),\n+#define OP_swap 0x16,\n+#define OP_rot 0x17,\n+#define OP_xderef 0x18,\n+#define OP_abs 0x19,\n+#define OP_and 0x1a,\n+#define OP_div 0x1b,\n+#define OP_minus 0x1c,\n+#define OP_mod 0x1d,\n+#define OP_mul 0x1e,\n+#define OP_neg 0x1f,\n+#define OP_not 0x20,\n+#define OP_or 0x21,\n+#define OP_plus 0x22,\n+#define OP_plus_uconst(x) 0x23,ULEB128(x),\n+#define OP_shl 0x24,\n+#define OP_shr 0x25,\n+#define OP_shra 0x26,\n+#define OP_xor 0x27,\n+#define OP_bra(x) 0x28,VAL2(x),\n+#define OP_eq 0x29,\n+#define OP_ge 0x2a,\n+#define OP_gt 0x2b,\n+#define OP_le 0x2c,\n+#define OP_lt 0x2d,\n+#define OP_ne 0x2e,\n+#define OP_skip(x) 0x2f,VAL2(x),\n+#define OP_lit0 0x30,\n+#define OP_lit1 0x31,\n+#define OP_lit2 0x32,\n+#define OP_lit3 0x33,\n+#define OP_lit4 0x34,\n+#define OP_lit5 0x35,\n+#define OP_lit6 0x36,\n+#define OP_lit7 0x37,\n+#define OP_lit8 0x38,\n+#define OP_lit9 0x39,\n+#define OP_lit10 0x3a,\n+#define OP_lit11 0x3b,\n+#define OP_lit12 0x3c,\n+#define OP_lit13 0x3d,\n+#define OP_lit14 0x3e,\n+#define OP_lit15 0x3f,\n+#define OP_lit16 0x40,\n+#define OP_lit17 0x41,\n+#define OP_lit18 0x42,\n+#define OP_lit19 0x43,\n+#define OP_lit20 0x44,\n+#define OP_lit21 0x45,\n+#define OP_lit22 0x46,\n+#define OP_lit23 0x47,\n+#define OP_lit24 0x48,\n+#define OP_lit25 0x49,\n+#define OP_lit26 0x4a,\n+#define OP_lit27 0x4b,\n+#define OP_lit28 0x4c,\n+#define OP_lit29 0x4d,\n+#define OP_lit30 0x4e,\n+#define OP_lit31 0x4f,\n+#define OP_reg0 0x50,\n+#define OP_reg1 0x51,\n+#define OP_reg2 0x52,\n+#define OP_reg3 0x53,\n+#define OP_reg4 0x54,\n+#define OP_reg5 0x55,\n+#define OP_reg6 0x56,\n+#define OP_reg7 0x57,\n+#define OP_reg8 0x58,\n+#define OP_reg9 0x59,\n+#define OP_reg10 0x5a,\n+#define OP_reg11 0x5b,\n+#define OP_reg12 0x5c,\n+#define OP_reg13 0x5d,\n+#define OP_reg14 0x5e,\n+#define OP_reg15 0x5f,\n+#define OP_reg16 0x60,\n+#define OP_reg17 0x61,\n+#define OP_reg18 0x62,\n+#define OP_reg19 0x63,\n+#define OP_reg20 0x64,\n+#define OP_reg21 0x65,\n+#define OP_reg22 0x66,\n+#define OP_reg23 0x67,\n+#define OP_reg24 0x68,\n+#define OP_reg25 0x69,\n+#define OP_reg26 0x6a,\n+#define OP_reg27 0x6b,\n+#define OP_reg28 0x6c,\n+#define OP_reg29 0x6d,\n+#define OP_reg30 0x6e,\n+#define OP_reg31 0x6f,\n+#define OP_breg0(x) 0x70,SLEB128(x),\n+#define OP_breg1(x) 0x71,SLEB128(x),\n+#define OP_breg2(x) 0x72,SLEB128(x),\n+#define OP_breg3(x) 0x73,SLEB128(x),\n+#define OP_breg4(x) 0x74,SLEB128(x),\n+#define OP_breg5(x) 0x75,SLEB128(x),\n+#define OP_breg6(x) 0x76,SLEB128(x),\n+#define OP_breg7(x) 0x77,SLEB128(x),\n+#define OP_breg8(x) 0x78,SLEB128(x),\n+#define OP_breg9(x) 0x79,SLEB128(x),\n+#define OP_breg10(x) 0x7a,SLEB128(x),\n+#define OP_breg11(x) 0x7b,SLEB128(x),\n+#define OP_breg12(x) 0x7c,SLEB128(x),\n+#define OP_breg13(x) 0x7d,SLEB128(x),\n+#define OP_breg14(x) 0x7e,SLEB128(x),\n+#define OP_breg15(x) 0x7f,SLEB128(x),\n+#define OP_breg16(x) 0x80,SLEB128(x),\n+#define OP_breg17(x) 0x81,SLEB128(x),\n+#define OP_breg18(x) 0x82,SLEB128(x),\n+#define OP_breg19(x) 0x83,SLEB128(x),\n+#define OP_breg20(x) 0x84,SLEB128(x),\n+#define OP_breg21(x) 0x85,SLEB128(x),\n+#define OP_breg22(x) 0x86,SLEB128(x),\n+#define OP_breg23(x) 0x87,SLEB128(x),\n+#define OP_breg24(x) 0x88,SLEB128(x),\n+#define OP_breg25(x) 0x89,SLEB128(x),\n+#define OP_breg26(x) 0x8a,SLEB128(x),\n+#define OP_breg27(x) 0x8b,SLEB128(x),\n+#define OP_breg28(x) 0x8c,SLEB128(x),\n+#define OP_breg29(x) 0x8d,SLEB128(x),\n+#define OP_breg30(x) 0x8e,SLEB128(x),\n+#define OP_breg31(x) 0x8f,SLEB128(x),\n+#define OP_regx(x) 0x90,SLEB128(x),\n+#define OP_fbreg(x) 0x91,SLEB128(x),\n+#define OP_bregx(x,y) 0x92,ULEB128(x),SLEB128(y),\n+#define OP_piece(x) 0x93,ULEB128(x),\n+#define OP_deref_size(x) 0x94,VAL1(x),\n+#define OP_xderef_size(x) 0x95,VAL1(x),\n+#define OP_nop 0x96,\n+#define OP_nop_termination 0x96\n+#define OP_push_object_address 0x97,\n+#define OP_call2(x) 0x98,VAL2(x),\n+#define OP_call4(x) 0x99,VAL4(x),\n+/* #define OP_call_ref(x) 0x9a,... */\n+#define OP_form_tls_address(x) 0x9b,\n+#define OP_call_frame_cfa 0x9c,\n+#define OP_bit_piece(x) 0x9d,ULEB128(x),\n+/* #define OP_implicit_value(x...) 0x9e,... */\n+#define OP_stack_value 0x9f,\n+#define OP_GNU_push_tls_address 0xe0,\n+/* #define OP_GNU_encoded_addr(x...) 0xf1, */\n+\n+#define ASSERT_TOS_NON0 OP_bra(3) OP_skip(-3)\n+#define ASSERT_TOS_0 OP_lit0 OP_eq ASSERT_TOS_NON0\n+\n+/* Initially there is CFA value on the stack, we want to\n+   keep it there at the end.  */\n+#define CFI_PROGRAM \\\n+OP_lit0 OP_nop ASSERT_TOS_0\t\t\t\t\t\t\\\n+OP_lit1 ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n+OP_lit1 OP_const1u(1) OP_eq ASSERT_TOS_NON0\t\t\t\t\\\n+OP_lit16 OP_const2u(16) OP_eq ASSERT_TOS_NON0\t\t\t\t\\\n+OP_lit31 OP_const4u(31) OP_ne ASSERT_TOS_0\t\t\t\t\\\n+OP_lit1 OP_neg OP_const1s(-1) OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_lit16 OP_neg OP_const2s(-16) OP_ne ASSERT_TOS_0\t\t\t\\\n+OP_lit31 OP_const4s(-31) OP_neg OP_ne ASSERT_TOS_0\t\t\t\\\n+OP_lit7 OP_dup OP_plus_uconst(2) OP_lit9 OP_eq ASSERT_TOS_NON0\t\t\\\n+  OP_lit7 OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\\\n+OP_lit20 OP_lit1 OP_drop OP_lit20 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_lit17 OP_lit19 OP_over OP_lit17 OP_eq ASSERT_TOS_NON0\t\t\\\n+  OP_lit19 OP_eq ASSERT_TOS_NON0 OP_lit17 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit1 OP_lit2 OP_lit3 OP_lit4 OP_pick(2) OP_lit2 OP_eq ASSERT_TOS_NON0\\\n+  OP_lit4 OP_eq ASSERT_TOS_NON0 OP_lit3 OP_eq ASSERT_TOS_NON0\t\t\\\n+  OP_pick(0) OP_lit2 OP_eq ASSERT_TOS_NON0\t\t\t\t\\\n+  OP_lit2 OP_eq ASSERT_TOS_NON0 OP_lit1 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit6 OP_lit12 OP_swap OP_lit6 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+  OP_lit12 OP_eq ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit7 OP_lit8 OP_lit9 OP_rot OP_lit8 OP_eq ASSERT_TOS_NON0\t\t\\\n+  OP_lit7 OP_eq ASSERT_TOS_NON0 OP_lit9 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit7 OP_abs OP_lit7 OP_eq ASSERT_TOS_NON0\t\t\t\t\\\n+OP_const1s(-123) OP_abs OP_const1u(123) OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit3 OP_lit6 OP_and OP_lit2 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_lit3 OP_lit6 OP_or OP_lit7 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_lit17 OP_lit2 OP_minus OP_lit15 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_const1s(-6) OP_const1s(-2) OP_div OP_lit3 OP_eq ASSERT_TOS_NON0\t\\\n+OP_const1s(-6) OP_const1s(-4) OP_mod OP_const1s(-2)\t\t\t\\\n+  OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n+OP_lit16 OP_lit31 OP_plus_uconst(1) OP_mul OP_const2u(512)\t\t\\\n+  OP_eq ASSERT_TOS_NON0\t\t\t\t\t\t\t\\\n+OP_lit5 OP_not OP_lit31 OP_and OP_lit26 OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit12 OP_lit31 OP_plus OP_const1u(43) OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_const1s(-6) OP_lit2 OP_plus OP_const1s(-4) OP_eq ASSERT_TOS_NON0\t\\\n+OP_const1s(-6) OP_plus_uconst(3) OP_const1s(-3) OP_eq ASSERT_TOS_NON0\t\\\n+OP_lit16 OP_lit4 OP_shl OP_const2u(256) OP_eq ASSERT_TOS_NON0\t\t\\\n+OP_lit16 OP_lit3 OP_shr OP_lit2 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_const1s(-16) OP_lit3 OP_shra OP_const1s(-2) OP_eq ASSERT_TOS_NON0\t\\\n+OP_lit3 OP_lit6 OP_xor OP_lit5 OP_eq ASSERT_TOS_NON0\t\t\t\\\n+OP_lit3 OP_lit6 OP_le ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit3 OP_lit3 OP_le ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit6 OP_lit3 OP_le ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit3 OP_lit6 OP_lt ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit3 OP_lit3 OP_lt ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit6 OP_lit3 OP_lt ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit3 OP_lit6 OP_ge ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit3 OP_lit3 OP_ge ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit6 OP_lit3 OP_ge ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_lit3 OP_lit6 OP_gt ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit3 OP_lit3 OP_gt ASSERT_TOS_0\t\t\t\t\t\\\n+OP_lit6 OP_lit3 OP_gt ASSERT_TOS_NON0\t\t\t\t\t\\\n+OP_const1s(-6) OP_lit1 OP_shr OP_lit0 OP_gt ASSERT_TOS_NON0\t\t\\\n+OP_const1s(-6) OP_lit1 OP_shra OP_lit0 OP_lt ASSERT_TOS_NON0\n+\n+#define CFI_ESCAPE_VAL_2(VALUES...) #VALUES\n+#define CFI_ESCAPE_VAL_1(VALUES...) CFI_ESCAPE_VAL_2(VALUES)\n+#define CFI_ESCAPE_VAL(VALUES...) CFI_ESCAPE_VAL_1(VALUES)\n+#define CFI_ESCAPE do { } while (0)\n+#define CFI_ARCH_PROGRAM OP_nop_termination\n+#ifdef __GCC_HAVE_DWARF2_CFI_ASM\n+#if defined (__x86_64__)\n+#undef CFI_ESCAPE\n+#undef CFI_ARCH_PROGRAM\n+#define CFI_ARCH_PROGRAM CFI_PROGRAM OP_lit8 OP_minus OP_nop_termination\n+unsigned char cfi_arch_program[] = { CFI_ARCH_PROGRAM };\n+extern char verify_it[sizeof (cfi_arch_program) - 0x80 < 0x3f80 ? 1 : -1];\n+/* DW_CFA_expression %rip, uleb128(l2-l1), l1: program DW_OP_lit8 DW_OP_minus DW_OP_nop l2: */\n+#define CFI_ESCAPE \\\n+  asm volatile (\".cfi_escape 0x10, 0x10, (%P0&0x7f)+0x80, %P0>>7, \" \\\n+\t\tCFI_ESCAPE_VAL (CFI_ARCH_PROGRAM) \\\n+\t\t: : \"i\" (sizeof (cfi_arch_program)))\n+#elif defined (__i386__)\n+#undef CFI_ESCAPE\n+#undef CFI_ARCH_PROGRAM\n+#define CFI_ARCH_PROGRAM CFI_PROGRAM OP_lit4 OP_minus OP_nop_termination\n+unsigned char cfi_arch_program[] = { CFI_ARCH_PROGRAM };\n+extern char verify_it[sizeof (cfi_arch_program) - 0x80 < 0x3f80 ? 1 : -1];\n+/* DW_CFA_expression %eip, uleb128(l2-l1), l1: program DW_OP_lit4 DW_OP_minus DW_OP_nop l2: */\n+#define CFI_ESCAPE \\\n+  asm volatile (\".cfi_escape 0x10, 8, (%P0&0x7f)+0x80, %P0>>7, \" \\\n+\t\tCFI_ESCAPE_VAL (CFI_ARCH_PROGRAM) \\\n+\t\t: : \"i\" (sizeof (cfi_arch_program)))\n+#endif\n+#endif\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+\t\t   _Unwind_Exception_Class exc_class,\n+\t\t   struct _Unwind_Exception *exc_obj,\n+\t\t   struct _Unwind_Context *context,\n+\t\t   void *stop_parameter)\n+{\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  return _URC_NO_REASON;\n+}\n+\n+static void force_unwind ()\n+{\n+  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n+  exc->exception_cleanup = 0;\n+\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n+#endif\n+\n+  abort ();\n+}\n+\n+static void handler (void *p __attribute__((unused)))\n+{\n+  exit (0);\n+}\n+\n+__attribute__((noinline)) static void callme ()\n+{\n+  CFI_ESCAPE;\n+  force_unwind ();\n+}\n+\n+__attribute__((noinline)) static void doit ()\n+{\n+  char dummy __attribute__((cleanup (handler)));\n+  callme ();\n+}\n+\n+int main()\n+{ \n+  doit ();\n+  abort ();\n+}"}, {"sha": "82958b0086ac40bc35cbb2d259cf62a68050394c", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4793ad6b2d52778521b8bc22fd3247f641deb468/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=4793ad6b2d52778521b8bc22fd3247f641deb468", "patch": "@@ -789,22 +789,22 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n \t\tresult = second ^ first;\n \t\tbreak;\n \t      case DW_OP_le:\n-\t\tresult = (_Unwind_Sword) first <= (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second <= (_Unwind_Sword) first;\n \t\tbreak;\n \t      case DW_OP_ge:\n-\t\tresult = (_Unwind_Sword) first >= (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second >= (_Unwind_Sword) first;\n \t\tbreak;\n \t      case DW_OP_eq:\n-\t\tresult = (_Unwind_Sword) first == (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second == (_Unwind_Sword) first;\n \t\tbreak;\n \t      case DW_OP_lt:\n-\t\tresult = (_Unwind_Sword) first < (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second < (_Unwind_Sword) first;\n \t\tbreak;\n \t      case DW_OP_gt:\n-\t\tresult = (_Unwind_Sword) first > (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second > (_Unwind_Sword) first;\n \t\tbreak;\n \t      case DW_OP_ne:\n-\t\tresult = (_Unwind_Sword) first != (_Unwind_Sword) second;\n+\t\tresult = (_Unwind_Sword) second != (_Unwind_Sword) first;\n \t\tbreak;\n \n \t      default:"}]}