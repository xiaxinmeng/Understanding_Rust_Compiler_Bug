{"sha": "f0051264182ba3d09445f169bfb10b660127f4da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwNTEyNjQxODJiYTNkMDk0NDVmMTY5YmZiMTBiNjYwMTI3ZjRkYQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-07-25T21:41:22Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-07-25T21:41:22Z"}, "message": "re PR fortran/57966 ([OOP] Using a TBP to specify the shape of a dummy argument)\n\n2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57966\n\t* resolve.c (resolve_typebound_function): Make sure the declared type,\n\tincluding its type-bound procedures, is resolved before resolving the\n\tactual type-bound call.\n\n2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57966\n\t* gfortran.dg/typebound_call_25.f90: New.\n\nFrom-SVN: r201254", "tree": {"sha": "658b63517477f349fe9f047f0f816370b3e23685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/658b63517477f349fe9f047f0f816370b3e23685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0051264182ba3d09445f169bfb10b660127f4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0051264182ba3d09445f169bfb10b660127f4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0051264182ba3d09445f169bfb10b660127f4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0051264182ba3d09445f169bfb10b660127f4da/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e30cb71f94c2874b93f2c27a839d816e11f81e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e30cb71f94c2874b93f2c27a839d816e11f81e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e30cb71f94c2874b93f2c27a839d816e11f81e5"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "0723c6d80a012b6d95d0433a837f8cd5478c9c6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f0051264182ba3d09445f169bfb10b660127f4da", "patch": "@@ -1,3 +1,10 @@\n+2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57966\n+\t* resolve.c (resolve_typebound_function): Make sure the declared type,\n+\tincluding its type-bound procedures, is resolved before resolving the\n+\tactual type-bound call.\n+\n 2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/57639"}, {"sha": "c34878816319e3b811920c4bedfc4eac5754e620", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f0051264182ba3d09445f169bfb10b660127f4da", "patch": "@@ -5686,6 +5686,8 @@ resolve_compcall (gfc_expr* e, const char **name)\n }\n \n \n+static bool resolve_fl_derived (gfc_symbol *sym);\n+\n \n /* Resolve a typebound function, or 'method'. First separate all\n    the non-CLASS references by calling resolve_compcall directly.  */\n@@ -5772,6 +5774,9 @@ resolve_typebound_function (gfc_expr* e)\n \n   /* Get the CLASS declared type.  */\n   declared = get_declared_from_expr (&class_ref, &new_ref, e, true);\n+  \n+  if (!resolve_fl_derived (declared))\n+    return false;\n \n   /* Weed out cases of the ultimate component being a derived type.  */\n   if ((class_ref && class_ref->u.c.component->ts.type == BT_DERIVED)"}, {"sha": "202cdaa89201fc126a39cf44f87baf4d4091aee5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0051264182ba3d09445f169bfb10b660127f4da", "patch": "@@ -1,3 +1,8 @@\n+2013-07-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57966\n+\t* gfortran.dg/typebound_call_25.f90: New.\n+\n 2013-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57981"}, {"sha": "df81c79e627e9576d08ca5d8c9009d86c69e0c2b", "filename": "gcc/testsuite/gfortran.dg/typebound_call_25.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0051264182ba3d09445f169bfb10b660127f4da/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_25.f90?ref=f0051264182ba3d09445f169bfb10b660127f4da", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+!\n+! PR 57966: [OOP] Using a TBP to specify the shape of a dummy argument\n+!\n+! Contributed by Stefan Mauerberger <stefan.mauerberger@gmail.com>\n+\n+MODULE my_mod\n+  IMPLICIT NONE\n+\n+  TYPE config_cls\n+  CONTAINS\n+    PROCEDURE, NOPASS :: my_size\n+    PROCEDURE, NOPASS :: my_sub\n+    GENERIC :: sz => my_size\n+    GENERIC :: sub => my_sub\n+  END TYPE\n+\n+  TYPE(config_cls) :: config\n+\n+CONTAINS\n+\n+  PURE INTEGER FUNCTION my_size()\n+    my_size = 10\n+  END FUNCTION\n+  \n+  SUBROUTINE my_sub\n+  END SUBROUTINE\n+  \n+  SUBROUTINE test (field1, field2, field3, field4)\n+    REAL :: field1 (config%my_size())\n+    REAL :: field2 (config%sz())\n+    REAL :: field3 (config%my_sub())  ! { dg-error \"should be a FUNCTION\" }\n+    REAL :: field4 (config%sub())     ! { dg-error \"should be a FUNCTION\" }\n+  END SUBROUTINE\n+\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"my_mod\" } }"}]}