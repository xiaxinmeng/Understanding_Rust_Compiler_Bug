{"sha": "d0e9f47b084611a6a8c3a407770160874e1c431a", "node_id": "C_kwDOANBUbNoAKGQwZTlmNDdiMDg0NjExYTZhOGMzYTQwNzc3MDE2MDg3NGUxYzQzMWE", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-05-30T20:24:08Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-01T15:21:53Z"}, "message": "Properly match delimiters\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-expand.cc\n\t(MacroExpander::try_match_rule): Don't match delimiters for root matcher.\n\t(MacroExpander::match_matcher): Add option to match delimiters.\n\t* expand/rust-macro-expand.h\n\t(MacroExpander::match_matcher): Likewise.\n\t* parse/rust-parse-impl.h\n\t(Parser::skip_token): Add zero argument method.\n\t* parse/rust-parse.h:\n\t(Parser::skip_token): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/macro-delim.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "bc8b71a11216aa07a224eabe36b6e7f37bb0ad29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8b71a11216aa07a224eabe36b6e7f37bb0ad29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e9f47b084611a6a8c3a407770160874e1c431a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9f47b084611a6a8c3a407770160874e1c431a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e9f47b084611a6a8c3a407770160874e1c431a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9f47b084611a6a8c3a407770160874e1c431a/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c00a4c0c12e721755adf4a4869b6fa7ef1784d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c00a4c0c12e721755adf4a4869b6fa7ef1784d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c00a4c0c12e721755adf4a4869b6fa7ef1784d"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "c29b9c6497dec84d17073c87267a1d5d12e5b39f", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=d0e9f47b084611a6a8c3a407770160874e1c431a", "patch": "@@ -352,7 +352,7 @@ MacroExpander::try_match_rule (AST::MacroRule &match_rule,\n   AST::MacroMatcher &matcher = match_rule.get_matcher ();\n \n   expansion_depth++;\n-  if (!match_matcher (parser, matcher))\n+  if (!match_matcher (parser, matcher, false, false))\n     {\n       expansion_depth--;\n       return false;\n@@ -437,7 +437,8 @@ MacroExpander::match_fragment (Parser<MacroInvocLexer> &parser,\n \n bool\n MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n-\t\t\t      AST::MacroMatcher &matcher, bool in_repetition)\n+\t\t\t      AST::MacroMatcher &matcher, bool in_repetition,\n+\t\t\t      bool match_delim)\n {\n   if (depth_exceeds_recursion_limit ())\n     {\n@@ -447,29 +448,34 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n \n   auto delimiter = parser.peek_current_token ();\n \n+  auto check_delim = [&matcher, match_delim] (AST::DelimType delim) {\n+    return !match_delim || matcher.get_delim_type () == delim;\n+  };\n+\n   // this is used so we can check that we delimit the stream correctly.\n   switch (delimiter->get_id ())\n     {\n       case LEFT_PAREN: {\n-\tif (!parser.skip_token (LEFT_PAREN))\n+\tif (!check_delim (AST::DelimType::PARENS))\n \t  return false;\n       }\n       break;\n \n       case LEFT_SQUARE: {\n-\tif (!parser.skip_token (LEFT_SQUARE))\n+\tif (!check_delim (AST::DelimType::SQUARE))\n \t  return false;\n       }\n       break;\n \n       case LEFT_CURLY: {\n-\tif (!parser.skip_token (LEFT_CURLY))\n+\tif (!check_delim (AST::DelimType::CURLY))\n \t  return false;\n       }\n       break;\n     default:\n-      gcc_unreachable ();\n+      return false;\n     }\n+  parser.skip_token ();\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n "}, {"sha": "50277fc8f658628e5082ef79cd04c871e5afdc2d", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=d0e9f47b084611a6a8c3a407770160874e1c431a", "patch": "@@ -275,7 +275,8 @@ struct MacroExpander\n \t\t\t AST::MacroMatchRepetition &rep);\n \n   bool match_matcher (Parser<MacroInvocLexer> &parser,\n-\t\t      AST::MacroMatcher &matcher, bool in_repetition = false);\n+\t\t      AST::MacroMatcher &matcher, bool in_repetition = false,\n+\t\t      bool match_delim = true);\n \n   /**\n    * Match any amount of matches"}, {"sha": "30f226ee492815adcb589ccd1179cc6b8fdcbdda", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=d0e9f47b084611a6a8c3a407770160874e1c431a", "patch": "@@ -12159,6 +12159,14 @@ Parser<ManagedTokenSource>::skip_after_semicolon ()\n     lexer.skip_token ();\n }\n \n+/* Skips the current token */\n+template <typename ManagedTokenSource>\n+void\n+Parser<ManagedTokenSource>::skip_token ()\n+{\n+  lexer.skip_token ();\n+}\n+\n /* Checks if current token has inputted id - skips it and returns true if so,\n  * diagnoses an error and returns false otherwise. */\n template <typename ManagedTokenSource>"}, {"sha": "315d3fcdec6cdde8aa464b8f8dc41e0ed1dc88e9", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=d0e9f47b084611a6a8c3a407770160874e1c431a", "patch": "@@ -94,6 +94,11 @@ struct ParseRestrictions\n template <typename ManagedTokenSource> class Parser\n {\n public:\n+  /**\n+   * Consume a token\n+   */\n+  void skip_token ();\n+\n   /**\n    * Consume a token, reporting an error if it isn't the next token\n    *"}, {"sha": "de4cd5607d94824ede5751ed0d4d7b15ce44b1af", "filename": "gcc/testsuite/rust/compile/macro-delim.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-delim.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9f47b084611a6a8c3a407770160874e1c431a/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-delim.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-delim.rs?ref=d0e9f47b084611a6a8c3a407770160874e1c431a", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! foo {\n+    ([]) => {struct Foo;};\n+    (()) => {struct _A;};\n+    (bool) => {struct _B;};\n+}\n+\n+foo! (());\n+foo! (bool);"}]}