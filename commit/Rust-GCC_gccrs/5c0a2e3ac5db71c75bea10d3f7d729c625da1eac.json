{"sha": "5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwYTJlM2FjNWRiNzFjNzViZWExMGQzZjdkNzI5YzYyNWRhMWVhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-10-14T18:39:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-14T18:39:03Z"}, "message": "mips.h (reg_class): Remove HI_AND_GR_REGS...\n\ngcc/\n\t* config/mips/mips.h (reg_class): Remove HI_AND_GR_REGS,\n\tLO_AND_GR_REGS, HI_AND_FP_REGS, COP0_AND_GR_REGS, COP2_AND_GR_REGS,\n\tCOP3_AND_GR_REGS, ALL_COP_REGS and ALL_COP_AND_GR_REGS.\n\tAdd GR_AND_MD0_REGS, GR_AND_MD1_REGS, GR_AND_MD_REGS and\n\tGR_AND_ACC_REGS.\n\t(REG_CLASS_NAMES): Update accordingly.\n\t(REG_CLASS_CONTENTS): Likewise.  Use the class name in the comments,\n\trather than an unpredictable descriptive string.\n\t* config/mips/mips.c (mips_register_move_cost): Remove comment.\n\t(mips_register_move_cost): Check for specific COP*_REGS classes,\n\tinstead of ALL_COP_AND_GR_REGS.\n\t(mips_ira_cover_classes): New function.\n\t(mips_secondary_reload_class): Remove MTLO and MTHI workarounds.\n\t(TARGET_IRA_COVER_CLASSES): Define.\n\nFrom-SVN: r141117", "tree": {"sha": "507ea8a4e58236a217d807fa3024c96153bc36a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/507ea8a4e58236a217d807fa3024c96153bc36a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b17c40be653fc91102da14682785dfa97ec0f9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17c40be653fc91102da14682785dfa97ec0f9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17c40be653fc91102da14682785dfa97ec0f9c0"}], "stats": {"total": 131, "additions": 77, "deletions": 54}, "files": [{"sha": "84625a1f2b1a37036631b7d9ecc6c98f5dab1e79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "patch": "@@ -1,3 +1,20 @@\n+2008-10-14  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.h (reg_class): Remove HI_AND_GR_REGS,\n+\tLO_AND_GR_REGS, HI_AND_FP_REGS, COP0_AND_GR_REGS, COP2_AND_GR_REGS,\n+\tCOP3_AND_GR_REGS, ALL_COP_REGS and ALL_COP_AND_GR_REGS.\n+\tAdd GR_AND_MD0_REGS, GR_AND_MD1_REGS, GR_AND_MD_REGS and\n+\tGR_AND_ACC_REGS.\n+\t(REG_CLASS_NAMES): Update accordingly.\n+\t(REG_CLASS_CONTENTS): Likewise.  Use the class name in the comments,\n+\trather than an unpredictable descriptive string.\n+\t* config/mips/mips.c (mips_register_move_cost): Remove comment.\n+\t(mips_register_move_cost): Check for specific COP*_REGS classes,\n+\tinstead of ALL_COP_AND_GR_REGS.\n+\t(mips_ira_cover_classes): New function.\n+\t(mips_secondary_reload_class): Remove MTLO and MTHI workarounds.\n+\t(TARGET_IRA_COVER_CLASSES): Define.\n+\n 2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n \n        PR c++/37553"}, {"sha": "eb76ff4791eef5d9fb3054418766f559e0486923", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "patch": "@@ -9697,10 +9697,6 @@ mips_register_move_cost (enum machine_mode mode,\n {\n   if (TARGET_MIPS16)\n     {\n-      /* ??? We cannot move general registers into HI and LO because\n-\t MIPS16 has no MTHI and MTLO instructions.  Make the cost of\n-\t moves in the opposite direction just as high, which stops the\n-\t register allocators from using HI and LO for pseudos.  */\n       if (reg_class_subset_p (from, GENERAL_REGS)\n \t  && reg_class_subset_p (to, GENERAL_REGS))\n \t{\n@@ -9717,7 +9713,9 @@ mips_register_move_cost (enum machine_mode mode,\n \treturn 2;\n       if (reg_class_subset_p (to, FP_REGS))\n \treturn 4;\n-      if (reg_class_subset_p (to, ALL_COP_AND_GR_REGS))\n+      if (reg_class_subset_p (to, COP0_REGS)\n+\t  || reg_class_subset_p (to, COP2_REGS)\n+\t  || reg_class_subset_p (to, COP3_REGS))\n \treturn 5;\n       if (reg_class_subset_p (to, ACC_REGS))\n \treturn 6;\n@@ -9729,7 +9727,9 @@ mips_register_move_cost (enum machine_mode mode,\n       if (reg_class_subset_p (from, ST_REGS))\n \t/* LUI followed by MOVF.  */\n \treturn 4;\n-      if (reg_class_subset_p (from, ALL_COP_AND_GR_REGS))\n+      if (reg_class_subset_p (from, COP0_REGS)\n+\t  || reg_class_subset_p (from, COP2_REGS)\n+\t  || reg_class_subset_p (from, COP3_REGS))\n \treturn 5;\n       if (reg_class_subset_p (from, ACC_REGS))\n \treturn 6;\n@@ -9747,6 +9747,25 @@ mips_register_move_cost (enum machine_mode mode,\n   return 12;\n }\n \n+/* Implement TARGET_IRA_COVER_CLASSES.  */\n+\n+static const enum reg_class *\n+mips_ira_cover_classes (void)\n+{\n+  static const enum reg_class acc_classes[] = {\n+    GR_AND_ACC_REGS, FP_REGS, COP0_REGS, COP2_REGS, COP3_REGS,\n+    ST_REGS, LIM_REG_CLASSES\n+  };\n+  static const enum reg_class no_acc_classes[] = {\n+    GR_REGS, FP_REGS, COP0_REGS, COP2_REGS, COP3_REGS,\n+    ST_REGS, LIM_REG_CLASSES\n+  };\n+\n+  /* Don't allow the register allocators to use LO and HI in MIPS16 mode,\n+     which has no MTLO or MTHI instructions.  */\n+  return TARGET_MIPS16 ? no_acc_classes : acc_classes;\n+}\n+\n /* Return the register class required for a secondary register when\n    copying between one of the registers in RCLASS and value X, which\n    has mode MODE.  X is the source of the move if IN_P, otherwise it\n@@ -9771,10 +9790,6 @@ mips_secondary_reload_class (enum reg_class rclass,\n       if (!reg_class_subset_p (rclass, M16_REGS) && !M16_REG_P (regno))\n \treturn M16_REGS;\n \n-      /* We can't really copy to HI or LO at all in MIPS16 mode.  */\n-      if (in_p ? reg_classes_intersect_p (rclass, ACC_REGS) : ACC_REG_P (regno))\n-\treturn M16_REGS;\n-\n       return NO_REGS;\n     }\n \n@@ -14203,6 +14218,9 @@ mips_order_regs_for_local_alloc (void)\n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN mips_dwarf_register_span\n \n+#undef TARGET_IRA_COVER_CLASSES\n+#define TARGET_IRA_COVER_CLASSES mips_ira_cover_classes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "acfcc00f8e2fe99838907732b2019b26d1284bab", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 32, "deletions": 44, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0a2e3ac5db71c75bea10d3f7d729c625da1eac/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5c0a2e3ac5db71c75bea10d3f7d729c625da1eac", "patch": "@@ -1796,18 +1796,14 @@ enum reg_class\n   COP0_REGS,\t\t\t/* generic coprocessor classes */\n   COP2_REGS,\n   COP3_REGS,\n-  HI_AND_GR_REGS,\t\t/* union classes */\n-  LO_AND_GR_REGS,\n-  HI_AND_FP_REGS,\n-  COP0_AND_GR_REGS,\n-  COP2_AND_GR_REGS,\n-  COP3_AND_GR_REGS,\n-  ALL_COP_REGS,\n-  ALL_COP_AND_GR_REGS,\n   ST_REGS,\t\t\t/* status registers (fp status) */\n   DSP_ACC_REGS,\t\t\t/* DSP accumulator registers */\n   ACC_REGS,\t\t\t/* Hi/Lo and DSP accumulator registers */\n   FRAME_REGS,\t\t\t/* $arg and $frame */\n+  GR_AND_MD0_REGS,\t\t/* union classes */\n+  GR_AND_MD1_REGS,\n+  GR_AND_MD_REGS,\n+  GR_AND_ACC_REGS,\n   ALL_REGS,\t\t\t/* all registers */\n   LIM_REG_CLASSES\t\t/* max value + 1 */\n };\n@@ -1838,18 +1834,14 @@ enum reg_class\n   \"COP0_REGS\",\t\t\t\t\t\t\t\t\\\n   \"COP2_REGS\",\t\t\t\t\t\t\t\t\\\n   \"COP3_REGS\",\t\t\t\t\t\t\t\t\\\n-  \"HI_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n-  \"LO_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n-  \"HI_AND_FP_REGS\",\t\t\t\t\t\t\t\\\n-  \"COP0_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n-  \"COP2_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n-  \"COP3_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n-  \"ALL_COP_REGS\",\t\t\t\t\t\t\t\\\n-  \"ALL_COP_AND_GR_REGS\",\t\t\t\t\t\t\\\n   \"ST_REGS\",\t\t\t\t\t\t\t\t\\\n   \"DSP_ACC_REGS\",\t\t\t\t\t\t\t\\\n   \"ACC_REGS\",\t\t\t\t\t\t\t\t\\\n   \"FRAME_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"GR_AND_MD0_REGS\",\t\t\t\t\t\t\t\\\n+  \"GR_AND_MD1_REGS\",\t\t\t\t\t\t\t\\\n+  \"GR_AND_MD_REGS\",\t\t\t\t\t\t\t\\\n+  \"GR_AND_ACC_REGS\",\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n }\n \n@@ -1866,34 +1858,30 @@ enum reg_class\n \n #define REG_CLASS_CONTENTS\t\t\t\t\t\t                                \\\n {\t\t\t\t\t\t\t\t\t                                \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* no registers */\t\\\n-  { 0x000300fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* mips16 registers */\t\\\n-  { 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* mips16 T register */\t\\\n-  { 0x010300fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* mips16 and T regs */ \\\n-  { 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* SVR4 PIC function address register */ \\\n-  { 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* only $v1 */ \\\n-  { 0xfdffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* Every other GPR except $25 */   \\\n-  { 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* integer registers */\t\\\n-  { 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* floating registers*/\t\\\n-  { 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000 },\t/* hi register */\t\\\n-  { 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000 },\t/* lo register */\t\\\n-  { 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x00000000 },\t/* mul/div registers */\t\\\n-  { 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000, 0x00000000 },   /* cop0 registers */    \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000 },   /* cop2 registers */    \\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff },   /* cop3 registers */    \\\n-  { 0xffffffff, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000 },\t/* union classes */     \\\n-  { 0xffffffff, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000 },\t\t\t\t\\\n-  { 0x00000000, 0xffffffff, 0x00000001, 0x00000000, 0x00000000, 0x00000000 },\t\t\t\t\\\n-  { 0xffffffff, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000, 0x00000000 },\t\t\t        \\\n-  { 0xffffffff, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000 },\t                        \\\n-  { 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff },                           \\\n-  { 0x00000000, 0x00000000, 0xffff0000, 0xffffffff, 0xffffffff, 0x0000ffff },                           \\\n-  { 0xffffffff, 0x00000000, 0xffff0000, 0xffffffff, 0xffffffff, 0x0000ffff },                           \\\n-  { 0x00000000, 0x00000000, 0x000007f8, 0x00000000, 0x00000000, 0x00000000 },\t/* status registers */\t\\\n-  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003f0000 },\t/* dsp accumulator registers */\t\\\n-  { 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x003f0000 },\t/* hi/lo and dsp accumulator registers */\t\\\n-  { 0x00000000, 0x00000000, 0x00006000, 0x00000000, 0x00000000, 0x00000000 },\t/* frame registers */\t\\\n-  { 0xffffffff, 0xffffffff, 0xffff67ff, 0xffffffff, 0xffffffff, 0x0fffffff }\t/* all registers */\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n+  { 0x000300fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* M16_REGS */\t\t\\\n+  { 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* T_REG */\t\t\\\n+  { 0x010300fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* M16_T_REGS */\t\\\n+  { 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* PIC_FN_ADDR_REG */\t\\\n+  { 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* V1_REG */\t\t\\\n+  { 0xfdffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* LEA_REGS */\t\t\\\n+  { 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* GR_REGS */\t\t\\\n+  { 0x00000000, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t/* FP_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000 },\t/* MD0_REG */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000 },\t/* MD1_REG */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x00000000 },\t/* MD_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000, 0x00000000 },   /* COP0_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff, 0x00000000 },   /* COP2_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x0000ffff },   /* COP3_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x000007f8, 0x00000000, 0x00000000, 0x00000000 },\t/* ST_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x003f0000 },\t/* DSP_ACC_REGS */\t\\\n+  { 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x003f0000 },\t/* ACC_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00006000, 0x00000000, 0x00000000, 0x00000000 },\t/* FRAME_REGS */\t\\\n+  { 0xffffffff, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000 },\t/* GR_AND_MD0_REGS */\t\\\n+  { 0xffffffff, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000 },\t/* GR_AND_MD1_REGS */\t\\\n+  { 0xffffffff, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x00000000 },\t/* GR_AND_MD_REGS */\t\\\n+  { 0xffffffff, 0x00000000, 0x00000003, 0x00000000, 0x00000000, 0x003f0000 },\t/* GR_AND_ACC_REGS */\t\\\n+  { 0xffffffff, 0xffffffff, 0xffff67ff, 0xffffffff, 0xffffffff, 0x0fffffff }\t/* ALL_REGS */\t\t\\\n }\n \n "}]}