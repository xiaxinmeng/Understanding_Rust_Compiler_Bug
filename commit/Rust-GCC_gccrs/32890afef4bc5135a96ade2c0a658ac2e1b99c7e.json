{"sha": "32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4OTBhZmVmNGJjNTEzNWE5NmFkZTJjMGE2NThhYzJlMWI5OWM3ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-07T12:35:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-07T12:35:48Z"}, "message": "ifstream_getline-2.cc: New.\n\n2004-11-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/performance/27_io/ifstream_getline-2.cc: New.\n\nFrom-SVN: r90229", "tree": {"sha": "8dce96e1d8b68f3bc68466cefbc983d0d57335f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dce96e1d8b68f3bc68466cefbc983d0d57335f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32890afef4bc5135a96ade2c0a658ac2e1b99c7e/comments", "author": null, "committer": null, "parents": [{"sha": "43962ff925c94f949faff364c7d4ac9c223012db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43962ff925c94f949faff364c7d4ac9c223012db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43962ff925c94f949faff364c7d4ac9c223012db"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "6ad6a596f800be1202e7085d519c3e3bad74934c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32890afef4bc5135a96ade2c0a658ac2e1b99c7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32890afef4bc5135a96ade2c0a658ac2e1b99c7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "patch": "@@ -1,3 +1,7 @@\n+2004-11-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/performance/27_io/ifstream_getline-2.cc: New.\n+\n 2004-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/17218"}, {"sha": "42e1cc89a47cfb256756bb74401ecd0c5d014a7c", "filename": "libstdc++-v3/testsuite/performance/27_io/ifstream_getline-2.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32890afef4bc5135a96ade2c0a658ac2e1b99c7e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_getline-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32890afef4bc5135a96ade2c0a658ac2e1b99c7e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_getline-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fifstream_getline-2.cc?ref=32890afef4bc5135a96ade2c0a658ac2e1b99c7e", "patch": "@@ -0,0 +1,102 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdio>\n+#include <fstream>\n+#include <string>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/15002\n+int main() \n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const char filename[] = \"tmp_getline.txt\";\n+  const unsigned lines = 1000000;\n+  const unsigned line_length = 200;\n+\n+  char* line = new char[line_length + 2];\n+  \n+  // Construct data.\n+  {\n+    memset(line, 'x', line_length);\n+    line[line_length] = '\\n';\n+    line[line_length + 1] = '\\0';\n+    \n+    ofstream out(filename);\n+    for (unsigned i = 0; i < lines; ++i)\n+      out << line;\n+  }\n+\n+  // C\n+  {\n+    // Fill the cache.\n+    FILE *file = fopen(filename, \"r\");\n+    while (fgets(line, line_length + 2, file));\n+    fclose(file);\n+\n+    file = fopen(filename, \"r\");\n+    start_counters(time, resource);\n+    while (fgets(line, line_length + 2, file));\n+    stop_counters(time, resource);\n+    fclose(file);\n+    report_performance(__FILE__, \"C (fgets)\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  // getline(basic_istream<_CharT, _Traits>& __in,\n+  //         basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\n+  {\n+    ifstream file(filename);\n+    string string_line;\n+\n+    start_counters(time, resource);\n+    while (getline(file, string_line));\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"C++ (string)\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  // getline(char_type* __s, streamsize __n, char_type __delim)\n+  {\n+    ifstream file(filename);\n+    \n+    start_counters(time, resource);\n+    while (file.getline(line, line_length + 2));\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, \"C++ (char array)\", time, resource);\n+    clear_counters(time, resource);\n+  }\n+\n+  delete[] line;\n+  unlink(filename);\n+  return 0;\n+}"}]}