{"sha": "914d25dcfb3a995fa6ab16014e143301196f760d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0ZDI1ZGNmYjNhOTk1ZmE2YWIxNjAxNGUxNDMzMDExOTZmNzYwZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-01-17T08:04:52Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-01-17T08:04:52Z"}, "message": "tm.texi (TARGET_INIT_LIBFUNCS): Put @findex entries in order of appearance.\n\n\t* doc/tm.texi (TARGET_INIT_LIBFUNCS): Put @findex entries in order of\n\tappearance.\n\n\t(TARGET_LEGITIMATE_ADDRESS_P): Add return type.\n\tFix markup for strict argument.\n\n\t(TARGET_SCHED_REORDER2): Fix argument types.\n\n\t(TARGET_SCHED_DFA_PRE_CYCLE_INSN): Fix return type.\n\t(TARGET_SCHED_DFA_POST_CYCLE_INSN): Likewise.\n\n\t(TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE): Fix name.\n\t(TARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Likewise.\n\n\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD):\n\tAdd argument name.\n\n\t(TARGET_SCHED_ALLOC_SCHED_CONTEXT): Remove duplicate documentation.\n\t(TARGET_SCHED_INIT_SCHED_CONTEXT): Likewise.\n\t(TARGET_SCHED_SET_SCHED_CONTEXT): Likewise.\n\t(TARGET_SCHED_CLEAR_SCHED_CONTEXT): Likewise.\n\t(TARGET_SCHED_FREE_SCHED_CONTEXT): Likewise.\n\n\t(TARGET_SCHED_SET_SCHED_CONTEXT): Fix typo.\n\n\t(TARGET_SCHED_GEN_SPEC_CHECK): Fix name.\n\n\t(TARGET_ASM_RELOC_RW_MASK): Add return type.\n\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Fix return type.\n\n\t(TARGET_STRIP_NAME_ENCODING): Fix markup of return type and parameter.\n\n\t(TARGET_ASM_FILE_START): Put @findex before paragraph start.\n\tUse prototype.\n\n\t(TARGET_ASM_NAMED_SECTION): Fix argument list.\n\n\t(TARGET_HAVE_NAMED_SECTIONS): Use @deftypevr.\n\t(TARGET_HAVE_SWITCHABLE_BSS_SECTIONS): Likewise.\n\n\t(TARGET_ASM_RECORD_GCC_SWITCHES_SECTION): Use @deftypevr.\n\n\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Fix argument types.\n\n\t(TARGET_ASM_MARK_DECL_PRESERVED): Fix argument and markup\n\treferring to it.  Fix language.\n\n\t(TARGET_HAVE_CTORS_DTORS): Use @deftypevr.\n\n\t(TARGET_ASM_FINAL_POSTSCAN_INSN): Adjust name of first argument.\n\n\t(TARGET_ASM_EMIT_UNWIND_LABEL): Add argument types.\n\n\t(TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL): Add type to argument.\n\n\t(TARGET_UNWIND_EMIT): Remove space between 'FILE *' and\n\t'@var{stream}.  Remove stray 'and'.\n\n\t(TARGET_ARM_EABI_UNWINDER): Use @deftypevr.\n\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Adjust name of first argument.\n\n\t(TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Add missing article.\n\n\t(TARGET_OPTION_VALID_ATTRIBUTE_P): Fix name, it was \n\tmisspelled as TARGET_VALID_OPTION_ATTRIBUTE_P.\n\n\t(TARGET_GET_PCH_VALIDITY): Put 'void *' in braces.\n\tFix description of return value.\n\tRename argument \"sz\" to \"len.\"\n\n\t(TARGET_CXX_GUARD_MASK_BIT): Add missing article.\n\tClarify meaning of 'true' return value.\n\n\t(TARGET_SHIFT_TRUNCATION_MASK): Fix return type.\n\n\t(TARGET_MODE_REP_EXTENDED): Fix two inconsisent uses of\n\trep_mode versus mode_rep.\n\n\t(TARGET_HANDLE_PRAGMA_EXTERN_PREFIX): Document.\n\n\t(TARGET_BUILTIN_DECL): Fix name.\n\n\t(TARGET_COMMUTATIVE_P): Fix type of first argument.\n\n\t(TARGET_SET_CURRENT_FUNCTION): Mention possibility of cfun being NULL.\n\n\t(TARGET_BRANCH_TARGET_REGISTER_CLASS): Fix return type.\n\n\t(TARGET_USE_LOCAL_THUNK_ALIAS_P): Document as macro instead of hook.\n\n\t(TARGET_RELAXED_ORDERING): Use @deftypevr.\n\n\t(TARGET_GET_DRAP_RTX): Note that this is a hook.\n\tClarify language.\n\nFrom-SVN: r155972", "tree": {"sha": "32954a4d29a1c5c22b36419b23df32f017f38c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32954a4d29a1c5c22b36419b23df32f017f38c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/914d25dcfb3a995fa6ab16014e143301196f760d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914d25dcfb3a995fa6ab16014e143301196f760d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914d25dcfb3a995fa6ab16014e143301196f760d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914d25dcfb3a995fa6ab16014e143301196f760d/comments", "author": null, "committer": null, "parents": [{"sha": "095ae514b6601c1f7693af8f2f7d2a2c8f7d9d35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095ae514b6601c1f7693af8f2f7d2a2c8f7d9d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095ae514b6601c1f7693af8f2f7d2a2c8f7d9d35"}], "stats": {"total": 253, "additions": 167, "deletions": 86}, "files": [{"sha": "eecd62ed611c6e3f32734f0687e75f95a8fc23e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914d25dcfb3a995fa6ab16014e143301196f760d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914d25dcfb3a995fa6ab16014e143301196f760d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=914d25dcfb3a995fa6ab16014e143301196f760d", "patch": "@@ -1,3 +1,101 @@\n+2010-01-17  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\t* doc/tm.texi (TARGET_INIT_LIBFUNCS): Put @findex entries in order of\n+\tappearance.\n+\n+\t(TARGET_LEGITIMATE_ADDRESS_P): Add return type.\n+\tFix markup for strict argument.\n+\n+\t(TARGET_SCHED_REORDER2): Fix argument types.\n+\n+\t(TARGET_SCHED_DFA_PRE_CYCLE_INSN): Fix return type.\n+\t(TARGET_SCHED_DFA_POST_CYCLE_INSN): Likewise.\n+\n+\t(TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE): Fix name.\n+\t(TARGET_SCHED_DFA_POST_ADVANCE_CYCLE): Likewise.\n+\n+\t(TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD):\n+\tAdd argument name.\n+\n+\t(TARGET_SCHED_ALLOC_SCHED_CONTEXT): Remove duplicate documentation.\n+\t(TARGET_SCHED_INIT_SCHED_CONTEXT): Likewise.\n+\t(TARGET_SCHED_SET_SCHED_CONTEXT): Likewise.\n+\t(TARGET_SCHED_CLEAR_SCHED_CONTEXT): Likewise.\n+\t(TARGET_SCHED_FREE_SCHED_CONTEXT): Likewise.\n+\n+\t(TARGET_SCHED_SET_SCHED_CONTEXT): Fix typo.\n+\n+\t(TARGET_SCHED_GEN_SPEC_CHECK): Fix name.\n+\n+\t(TARGET_ASM_RELOC_RW_MASK): Add return type.\n+\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Fix return type.\n+\n+\t(TARGET_STRIP_NAME_ENCODING): Fix markup of return type and parameter.\n+\n+\t(TARGET_ASM_FILE_START): Put @findex before paragraph start.\n+\tUse prototype.\n+\n+\t(TARGET_ASM_NAMED_SECTION): Fix argument list.\n+\n+\t(TARGET_HAVE_NAMED_SECTIONS): Use @deftypevr.\n+\t(TARGET_HAVE_SWITCHABLE_BSS_SECTIONS): Likewise.\n+\n+\t(TARGET_ASM_RECORD_GCC_SWITCHES_SECTION): Use @deftypevr.\n+\n+\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Fix argument types.\n+\n+\t(TARGET_ASM_MARK_DECL_PRESERVED): Fix argument and markup\n+\treferring to it.  Fix language.\n+\n+\t(TARGET_HAVE_CTORS_DTORS): Use @deftypevr.\n+\n+\t(TARGET_ASM_FINAL_POSTSCAN_INSN): Adjust name of first argument.\n+\n+\t(TARGET_ASM_EMIT_UNWIND_LABEL): Add argument types.\n+\n+\t(TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL): Add type to argument.\n+\n+\t(TARGET_UNWIND_EMIT): Remove space between 'FILE *' and\n+\t'@var{stream}.  Remove stray 'and'.\n+\n+\t(TARGET_ARM_EABI_UNWINDER): Use @deftypevr.\n+\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Adjust name of first argument.\n+\n+\t(TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Add missing article.\n+\n+\t(TARGET_OPTION_VALID_ATTRIBUTE_P): Fix name, it was \n+\tmisspelled as TARGET_VALID_OPTION_ATTRIBUTE_P.\n+\n+\t(TARGET_GET_PCH_VALIDITY): Put 'void *' in braces.\n+\tFix description of return value.\n+\tRename argument \"sz\" to \"len.\"\n+\n+\t(TARGET_CXX_GUARD_MASK_BIT): Add missing article.\n+\tClarify meaning of 'true' return value.\n+\n+\t(TARGET_SHIFT_TRUNCATION_MASK): Fix return type.\n+\n+\t(TARGET_MODE_REP_EXTENDED): Fix two inconsisent uses of\n+\trep_mode versus mode_rep.\n+\n+\t(TARGET_HANDLE_PRAGMA_EXTERN_PREFIX): Document.\n+\n+\t(TARGET_BUILTIN_DECL): Fix name.\n+\n+\t(TARGET_COMMUTATIVE_P): Fix type of first argument.\n+\n+\t(TARGET_SET_CURRENT_FUNCTION): Mention possibility of cfun being NULL.\n+\n+\t(TARGET_BRANCH_TARGET_REGISTER_CLASS): Fix return type.\n+\n+\t(TARGET_USE_LOCAL_THUNK_ALIAS_P): Document as macro instead of hook.\n+\n+\t(TARGET_RELAXED_ORDERING): Use @deftypevr.\n+\n+\t(TARGET_GET_DRAP_RTX): Note that this is a hook.\n+\tClarify language.\n+\n 2010-01-16  Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \tPR target/42664"}, {"sha": "871ab0caa2691696ca47bd3a8317b1b4652a3757", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 69, "deletions": 86, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914d25dcfb3a995fa6ab16014e143301196f760d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914d25dcfb3a995fa6ab16014e143301196f760d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=914d25dcfb3a995fa6ab16014e143301196f760d", "patch": "@@ -5253,8 +5253,8 @@ provide alternate names for GCC's internal library functions if there\n are ABI-mandated names that the compiler should provide.\n @end defmac\n \n-@findex init_one_libfunc\n @findex set_optab_libfunc\n+@findex init_one_libfunc\n @deftypefn {Target Hook} void TARGET_INIT_LIBFUNCS (void)\n This hook should declare additional library routines or rename\n existing ones, using the functions @code{set_optab_libfunc} and\n@@ -5412,12 +5412,12 @@ the maximum number that @code{TARGET_LEGITIMATE_ADDRESS_P} would ever\n accept.\n @end defmac\n \n-@deftypefn {Target Hook} TARGET_LEGITIMATE_ADDRESS_P (enum machine_mode @var{mode}, rtx @var{x}, bool @var{strict})\n+@deftypefn {Target Hook} bool TARGET_LEGITIMATE_ADDRESS_P (enum machine_mode @var{mode}, rtx @var{x}, bool @var{strict})\n A function that returns whether @var{x} (an RTX) is a legitimate memory\n address on the target machine for a memory operand of mode @var{mode}.\n \n Legitimate addresses are defined in two variants: a strict variant and a\n-non-strict one.  The @code{strict} parameter chooses which variant is\n+non-strict one.  The @var{strict} parameter chooses which variant is\n desired by the caller.\n \n The strict variant is used in the reload pass.  It must be defined so\n@@ -6422,7 +6422,7 @@ can issue this cycle; normally this is just @code{issue_rate}.  See also\n @samp{TARGET_SCHED_REORDER2}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_REORDER2 (FILE *@var{file}, int @var{verbose}, rtx *@var{ready}, int *@var{n_ready}, @var{clock})\n+@deftypefn {Target Hook} int TARGET_SCHED_REORDER2 (FILE *@var{file}, int @var{verbose}, rtx *@var{ready}, int *@var{n_readyp}, int @var{clock})\n Like @samp{TARGET_SCHED_REORDER}, but called at a different time.  That\n function is called whenever the scheduler starts a new cycle.  This one\n is called once per iteration over a cycle, immediately after\n@@ -6475,7 +6475,7 @@ This is the cleanup hook corresponding to @code{TARGET_SCHED_INIT_GLOBAL}.\n @var{verbose} is the verbose level provided by @option{-fsched-verbose-@var{n}}.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_DFA_PRE_CYCLE_INSN (void)\n+@deftypefn {Target Hook} rtx TARGET_SCHED_DFA_PRE_CYCLE_INSN (void)\n The hook returns an RTL insn.  The automaton state used in the\n pipeline hazard recognizer is changed as if the insn were scheduled\n when the new simulated processor cycle starts.  Usage of the hook may\n@@ -6489,7 +6489,7 @@ when the new simulated processor cycle starts.\n The hook can be used to initialize data used by the previous hook.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_DFA_POST_CYCLE_INSN (void)\n+@deftypefn {Target Hook} rtx TARGET_SCHED_DFA_POST_CYCLE_INSN (void)\n The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\n to changed the state as if the insn were scheduled when the new\n simulated processor cycle finishes.\n@@ -6500,14 +6500,14 @@ The hook is analogous to @samp{TARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN} but\n used to initialize data used by the previous hook.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_SCHED_DFA_PRE_CYCLE_ADVANCE (void)\n+@deftypefn {Target Hook} void TARGET_SCHED_DFA_PRE_ADVANCE_CYCLE (void)\n The hook to notify target that the current simulated cycle is about to finish.\n The hook is analogous to @samp{TARGET_SCHED_DFA_PRE_CYCLE_INSN} but used\n to change the state in more complicated situations - e.g., when advancing\n state on a single insn is not enough.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_SCHED_DFA_POST_CYCLE_ADVANCE (void)\n+@deftypefn {Target Hook} void TARGET_SCHED_DFA_POST_ADVANCE_CYCLE (void)\n The hook to notify target that new simulated cycle has just started.\n The hook is analogous to @samp{TARGET_SCHED_DFA_POST_CYCLE_INSN} but used\n to change the state in more complicated situations - e.g., when advancing\n@@ -6543,11 +6543,11 @@ schedules to choose the best one.\n The default is no multipass scheduling.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD (rtx)\n+@deftypefn {Target Hook} int TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD (rtx @var{insn})\n \n This hook controls what insns from the ready insn queue will be\n considered for the multipass insn scheduling.  If the hook returns\n-zero for insn passed as the parameter, the insn will be not chosen to\n+zero for @var{insn}, the insn will be not chosen to\n be issued.\n \n The default is that any ready insns can be chosen to be issued.\n@@ -6606,30 +6606,7 @@ beginning of the block.  Otherwise, make a copy of the current context in\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_SET_SCHED_CONTEXT (void *@var{tc})\n-Copy target scheduling context pointer to by @var{tc} to the current context.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_SCHED_CLEAR_SCHED_CONTEXT (void *@var{tc})\n-Deallocate internal data in target scheduling context pointed to by @var{tc}.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_SCHED_FREE_SCHED_CONTEXT (void *@var{tc})\n-Deallocate a store for target scheduling context pointed to by @var{tc}.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} {void *} TARGET_SCHED_ALLOC_SCHED_CONTEXT (void)\n-Return a pointer to a store large enough to hold target scheduling context.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_SCHED_INIT_SCHED_CONTEXT (void *@var{tc}, bool @var{clean_p})\n-Initialize store pointed to by @var{tc} to hold target scheduling context.\n-It @var{clean_p} is true then initialize @var{tc} as if scheduler is at the\n-beginning of the block.  Otherwise, make a copy of the current context in\n-@var{tc}.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_SCHED_SET_SCHED_CONTEXT (void *@var{tc})\n-Copy target scheduling context pointer to by @var{tc} to the current context.\n+Copy target scheduling context pointed to by @var{tc} to the current context.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SCHED_CLEAR_SCHED_CONTEXT (void *@var{tc})\n@@ -6657,7 +6634,7 @@ for @var{insn}.  It should return nonzero, if the corresponding check\n instruction should branch to recovery code, or zero otherwise.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_SCHED_GEN_CHECK (rtx @var{insn}, rtx @var{label}, int @var{mutate_p})\n+@deftypefn {Target Hook} rtx TARGET_SCHED_GEN_SPEC_CHECK (rtx @var{insn}, rtx @var{label}, int @var{mutate_p})\n This hook is called by the insn scheduler to generate a pattern for recovery\n check instruction.  If @var{mutate_p} is zero, then @var{insn} is a\n speculative instruction for which the check should be generated.\n@@ -6872,7 +6849,7 @@ any assembly code, and before calling any of the section-returning hooks\n described below.\n @end deftypefn\n \n-@deftypefn {Target Hook} TARGET_ASM_RELOC_RW_MASK (void)\n+@deftypefn {Target Hook} int TARGET_ASM_RELOC_RW_MASK (void)\n Return a mask describing how relocations should be treated when\n selecting sections.  Bit 1 should be set if global relocations\n should be placed in a read-write section; bit 0 should be set if\n@@ -6940,7 +6917,7 @@ constants in @code{flag_pic} mode in @code{data_section} and everything\n else in @code{readonly_data_section}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_MANGLE_DECL_ASSEMBLER_NAME (tree @var{decl}, tree @var{id})\n+@deftypefn {Target Hook} tree TARGET_MANGLE_DECL_ASSEMBLER_NAME (tree @var{decl}, tree @var{id})\n Define this hook if you need to postprocess the assembler name generated\n by target-independent code.  The @var{id} provided to this hook will be\n the computed name (e.g., the macro @code{DECL_NAME} of the @var{decl} in C,\n@@ -6988,7 +6965,7 @@ in @file{varasm.c}, sets a number of commonly-useful bits in\n before overriding it.\n @end deftypefn\n \n-@deftypefn {Target Hook} const char *TARGET_STRIP_NAME_ENCODING (const char *name)\n+@deftypefn {Target Hook} {const char *} TARGET_STRIP_NAME_ENCODING (const char *@var{name})\n Decode @var{name} and return the real name part, sans\n the characters that @code{TARGET_ENCODE_SECTION_INFO}\n may have added.\n@@ -7095,8 +7072,8 @@ instructions do.\n @c prevent bad page break with this line\n This describes the overall framework of an assembly file.\n \n-@deftypefn {Target Hook} void TARGET_ASM_FILE_START ()\n @findex default_file_start\n+@deftypefn {Target Hook} void TARGET_ASM_FILE_START (void)\n Output to @code{asm_out_file} any text which the assembler expects to\n find at the beginning of a file.  The default behavior is controlled\n by two flags, documented below.  Unless your target's assembler is\n@@ -7184,26 +7161,24 @@ A C statement to output something to the assembler file to handle a\n macro is not defined, nothing is output for a @samp{#ident} directive.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_NAMED_SECTION (const char *@var{name}, unsigned int @var{flags}, unsigned int @var{align})\n+@deftypefn {Target Hook} void TARGET_ASM_NAMED_SECTION (const char *@var{name}, unsigned int @var{flags}, tree @var{decl})\n Output assembly directives to switch to section @var{name}.  The section\n should have attributes as specified by @var{flags}, which is a bit mask\n-of the @code{SECTION_*} flags defined in @file{output.h}.  If @var{align}\n-is nonzero, it contains an alignment in bytes to be used for the section,\n-otherwise some target default should be used.  Only targets that must\n-specify an alignment within the section directive need pay attention to\n-@var{align} -- we will still use @code{ASM_OUTPUT_ALIGN}.\n+of the @code{SECTION_*} flags defined in @file{output.h}.  If @var{decl}\n+is non-NULL, it is the @code{VAR_DECL} or @code{FUNCTION_DECL} with which\n+this section is associated.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n+@deftypevr {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n-@end deftypefn\n+@end deftypevr\n \n @anchor{TARGET_HAVE_SWITCHABLE_BSS_SECTIONS}\n-@deftypefn {Target Hook} bool TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n+@deftypevr {Target Hook} bool TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n This flag is true if we can create zeroed data by switching to a BSS\n section and then using @code{ASM_OUTPUT_SKIP} to allocate the space.\n This is true on most ELF targets.\n-@end deftypefn\n+@end deftypevr\n \n @deftypefn {Target Hook} {unsigned int} TARGET_SECTION_TYPE_FLAGS (tree @var{decl}, const char *@var{name}, int @var{reloc})\n Choose a set of section attributes for use by @code{TARGET_ASM_NAMED_SECTION}\n@@ -7263,11 +7238,11 @@ provided by the @code{TARGET_ASM_RECORD_GCC_SWITCHES_SECTION} target\n hook.\n @end deftypefn\n \n-@deftypefn {Target Hook} {const char *} TARGET_ASM_RECORD_GCC_SWITCHES_SECTION\n+@deftypevr {Target Hook} {const char *} TARGET_ASM_RECORD_GCC_SWITCHES_SECTION\n This is the name of the section that will be created by the example\n ELF implementation of the @code{TARGET_ASM_RECORD_GCC_SWITCHES} target\n hook.\n-@end deftypefn\n+@end deftypevr\n \n @need 2000\n @node Data Output\n@@ -7802,7 +7777,7 @@ setting the @code{DECL_ONE_ONLY} flag is enough to mark a declaration to\n be emitted as one-only.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_ASSEMBLE_VISIBILITY (tree @var{decl}, const char *@var{visibility})\n+@deftypefn {Target Hook} void TARGET_ASM_ASSEMBLE_VISIBILITY (tree @var{decl}, int @var{visibility})\n This target hook is a function to output to @var{asm_out_file} some\n commands that will make the symbol(s) associated with @var{decl} have\n hidden, protected or internal visibility as specified by @var{visibility}.\n@@ -7844,10 +7819,10 @@ pseudo-op to declare a library function name external.  The name of the\n library function is given by @var{symref}, which is a @code{symbol_ref}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_MARK_DECL_PRESERVED (tree @var{decl})\n+@deftypefn {Target Hook} void TARGET_ASM_MARK_DECL_PRESERVED (const char *@var{symbol})\n This target hook is a function to output to @var{asm_out_file} an assembler\n-directive to annotate used symbol.  Darwin target use .no_dead_code_strip\n-directive.\n+directive to annotate @var{symbol} as used.  The Darwin target uses the\n+.no_dead_code_strip directive.\n @end deftypefn\n \n @defmac ASM_OUTPUT_LABELREF (@var{stream}, @var{name})\n@@ -8215,11 +8190,11 @@ of objects.  If zero, the compiler will issue an error message upon\n encountering an @code{init_priority} attribute.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_HAVE_CTORS_DTORS\n+@deftypevr {Target Hook} bool TARGET_HAVE_CTORS_DTORS\n This value is true if the target supports some ``native'' method of\n collecting constructors and destructors to be run at startup and exit.\n It is false if we must use @command{collect2}.\n-@end deftypefn\n+@end deftypevr\n \n @deftypefn {Target Hook} void TARGET_ASM_CONSTRUCTOR (rtx @var{symbol}, int @var{priority})\n If defined, a function that outputs assembler code to arrange to call\n@@ -8361,7 +8336,7 @@ writing conditional output routines in those patterns.\n If this macro is not defined, it is equivalent to a null statement.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_FINAL_POSTSCAN_INSN (FILE *@var{FILE}, rtx @var{insn}, rtx *@var{opvec}, int @var{noperands})\n+@deftypefn {Target Hook} void TARGET_ASM_FINAL_POSTSCAN_INSN (FILE *@var{file}, rtx @var{insn}, rtx *@var{opvec}, int @var{noperands})\n If defined, this target hook is a function which is executed just after the\n output of assembler code for @var{insn}, to change the mode of the assembler\n if necessary.\n@@ -8579,7 +8554,7 @@ If this macro is not defined, nothing special is output at the end of\n the jump-table.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_EMIT_UNWIND_LABEL (@var{stream}, @var{decl}, @var{for_eh}, @var{empty})\n+@deftypefn {Target Hook} void TARGET_ASM_EMIT_UNWIND_LABEL (FILE *@var{stream}, tree @var{decl}, int @var{for_eh}, int @var{empty})\n This target hook emits a label at the beginning of each FDE@.  It\n should be defined on targets where FDEs need special labels, and it\n should write the appropriate label, for the FDE associated with the\n@@ -8591,16 +8566,16 @@ true if this is a placeholder label for an omitted FDE@.\n The default is that FDEs are not given nonlocal labels.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL (@var{stream})\n+@deftypefn {Target Hook} void TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL (FILE *@var{stream})\n This target hook emits a label at the beginning of the exception table.\n It should be defined on targets where it is desirable for the table\n to be broken up according to function.\n \n The default is that no label is emitted.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_UNWIND_EMIT (FILE * @var{stream}, rtx @var{insn})\n-This target hook emits and assembly directives required to unwind the\n+@deftypefn {Target Hook} void TARGET_UNWIND_EMIT (FILE *@var{stream}, rtx @var{insn})\n+This target hook emits assembly directives required to unwind the\n given instruction.  This is only used when TARGET_UNWIND_INFO is set.\n @end deftypefn\n \n@@ -8725,12 +8700,12 @@ if the reference was output.  Returning @code{false} will cause the\n reference to be output using the normal Dwarf2 routines.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_ARM_EABI_UNWINDER\n-This hook should be set to @code{true} on targets that use an ARM EABI\n+@deftypevr {Target Hook} bool TARGET_ARM_EABI_UNWINDER\n+This flag should be set to @code{true} on targets that use an ARM EABI\n based unwinding library, and @code{false} on other targets.  This effects\n the format of unwinding tables, and how the unwinder in entered after\n running a cleanup.  The default is @code{false}.\n-@end deftypefn\n+@end deftypevr\n \n @node Alignment Output\n @subsection Assembler Commands for Alignment\n@@ -9207,7 +9182,7 @@ is used on some systems to avoid garbage collecting a DWARF table which\n is referenced by a function.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_DWARF_DTPREL (FILE *@var{FILE}, int @var{size}, rtx @var{x})\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_DWARF_DTPREL (FILE *@var{file}, int @var{size}, rtx @var{x})\n If defined, this target hook is a function which outputs a DTP-relative\n reference to the given TLS symbol of the specified size.\n @end deftypefn\n@@ -9485,7 +9460,7 @@ supposed always to be compatible.\n \n @deftypefn {Target Hook} void TARGET_SET_DEFAULT_TYPE_ATTRIBUTES (tree @var{type})\n If defined, this target hook is a function which assigns default attributes to\n-newly defined @var{type}.\n+the newly defined @var{type}.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_MERGE_TYPE_ATTRIBUTES (tree @var{type1}, tree @var{type2})\n@@ -9555,7 +9530,7 @@ attributes, @code{false} otherwise.  By default, if a function has a\n target specific attribute attached to it, it will not be inlined.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_VALID_OPTION_ATTRIBUTE_P (tree @var{fndecl}, tree @var{name}, tree @var{args}, int @var{flags})\n+@deftypefn {Target Hook} bool TARGET_OPTION_VALID_ATTRIBUTE_P (tree @var{fndecl}, tree @var{name}, tree @var{args}, int @var{flags})\n This hook is called to parse the @code{attribute(option(\"...\"))}, and\n it allows the function to set different target machine compile time\n options for the current function that might be different than the\n@@ -9722,9 +9697,10 @@ Default: empty.\n @section Parameters for Precompiled Header Validity Checking\n @cindex parameters, precompiled headers\n \n-@deftypefn {Target Hook} void *TARGET_GET_PCH_VALIDITY (size_t *@var{sz})\n-This hook returns the data needed by @code{TARGET_PCH_VALID_P} and sets\n-@samp{*@var{sz}} to the size of the data in bytes.\n+@deftypefn {Target Hook} {void *} TARGET_GET_PCH_VALIDITY (size_t *@var{len})\n+This hook returns a pointer to the data needed by\n+@code{TARGET_PCH_VALID_P} and sets\n+@samp{*@var{len}} to the size of the data in bytes.\n @end deftypefn\n \n @deftypefn {Target Hook} {const char *} TARGET_PCH_VALID_P (const void *@var{data}, size_t @var{sz})\n@@ -9762,8 +9738,8 @@ default is long_long_integer_type_node.\n \n @deftypefn {Target Hook} bool TARGET_CXX_GUARD_MASK_BIT (void)\n This hook determines how guard variables are used.  It should return\n-@code{false} (the default) if first byte should be used.  A return value of\n-@code{true} indicates the least significant bit should be used.\n+@code{false} (the default) if the first byte should be used.  A return value of\n+@code{true} indicates that only the least significant bit should be used.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_CXX_GET_COOKIE_SIZE (tree @var{type})\n@@ -10103,7 +10079,7 @@ You need not define this macro if it would always have the value of zero.\n @end defmac\n \n @anchor{TARGET_SHIFT_TRUNCATION_MASK}\n-@deftypefn {Target Hook} int TARGET_SHIFT_TRUNCATION_MASK (enum machine_mode @var{mode})\n+@deftypefn {Target Hook} {unsigned HOST_WIDE_INT} TARGET_SHIFT_TRUNCATION_MASK (enum machine_mode @var{mode})\n This function describes how the standard shift patterns for @var{mode}\n deal with shifts by negative amounts or by more than the width of the mode.\n @xref{shift patterns}.\n@@ -10152,7 +10128,7 @@ otherwise.  (Currently, none of the targets use zero-extended\n representation this way so unlike @code{LOAD_EXTEND_OP},\n @code{TARGET_MODE_REP_EXTENDED} is expected to return either\n @code{SIGN_EXTEND} or @code{UNKNOWN}.  Also no target extends\n-@var{mode} to @var{mode_rep} so that @var{mode_rep} is not the next\n+@var{mode} to @var{rep_mode} so that @var{rep_mode} is not the next\n widest integral mode and currently we take advantage of this fact.)\n \n Similarly to @code{LOAD_EXTEND_OP} you may return a non-@code{UNKNOWN}\n@@ -10466,6 +10442,10 @@ Define this macro, as well as\n arguments of @samp{#pragma pack}.\n @end defmac\n \n+@deftypevr {Target Hook} bool TARGET_HANDLE_PRAGMA_EXTERN_PREFIX\n+True if @code{#pragma extern_prefix} is to be supported.\n+@end deftypevr\n+\n @defmac TARGET_DEFAULT_PACK_STRUCT\n If your target requires a structure packing default other than 0 (meaning\n the machine default), define this macro to the necessary value (in bytes).\n@@ -10655,7 +10635,7 @@ only language front ends that use those two functions will call\n @samp{TARGET_INIT_BUILTINS}.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_BUILTIN_FUNCTION (unsigned @var{code}, bool @var{initialize_p})\n+@deftypefn {Target Hook} tree TARGET_BUILTIN_DECL (unsigned @var{code}, bool @var{initialize_p})\n Define this hook if you have any machine-specific built-in functions\n that need to be defined.  It should be a function that returns the\n builtin function declaration for the builtin function code @var{code}.\n@@ -10722,7 +10702,7 @@ filling of delay slots can result in branches being redirected, and this\n may in turn cause a branch offset to overflow.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_COMMUTATIVE_P (rtx @var{x}, @var{outer_code})\n+@deftypefn {Target Hook} bool TARGET_COMMUTATIVE_P (const_rtx @var{x}, int @var{outer_code})\n This target hook returns @code{true} if @var{x} is considered to be commutative.\n Usually, this is just COMMUTATIVE_P (@var{x}), but the HP PA doesn't consider\n PLUS to be commutative inside a MEM@.  @var{outer_code} is the rtx code\n@@ -10775,6 +10755,8 @@ GCC sets @code{cfun} to a dummy function context during initialization of\n some parts of the back end.  The hook function is not invoked in this\n situation; you need not worry about the hook being invoked recursively,\n or when the back end is in a partially-initialized state.\n+@code{cfun} might be @code{NULL} to indicate processing at top level,\n+outside of any function scope.\n @end deftypefn\n \n @defmac TARGET_OBJECT_SUFFIX\n@@ -10829,7 +10811,7 @@ cannot_modify_jumps_past_reload_p ()\n @end smallexample\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_BRANCH_TARGET_REGISTER_CLASS (void)\n+@deftypefn {Target Hook} {enum reg_class} TARGET_BRANCH_TARGET_REGISTER_CLASS (void)\n This target hook returns a register class for which branch target register\n optimizations should be applied.  All registers in this class should be\n usable interchangeably.  After reload, registers in this class will be\n@@ -10889,13 +10871,13 @@ systems, this is used for Framework includes, which have semantics\n that are different from @option{-I}.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_USE_LOCAL_THUNK_ALIAS_P (tree @var{fndecl})\n-This target hook returns @code{true} if it is safe to use a local alias\n+@defmac bool TARGET_USE_LOCAL_THUNK_ALIAS_P (tree @var{fndecl})\n+This target macro returns @code{true} if it is safe to use a local alias\n for a virtual function @var{fndecl} when constructing thunks,\n-@code{false} otherwise.  By default, the hook returns @code{true} for all\n+@code{false} otherwise.  By default, the macro returns @code{true} for all\n functions, if a target supports aliases (i.e.@: defines\n @code{ASM_OUTPUT_DEF}), @code{false} otherwise,\n-@end deftypefn\n+@end defmac\n \n @defmac TARGET_FORMAT_TYPES\n If defined, this macro is the name of a global variable containing\n@@ -10926,15 +10908,15 @@ routine for target specific customizations of the system printf\n and scanf formatter settings.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_RELAXED_ORDERING\n+@deftypevr {Target Hook} bool TARGET_RELAXED_ORDERING\n If set to @code{true}, means that the target's memory model does not\n guarantee that loads which do not depend on one another will access\n main memory in the order of the instruction stream; if ordering is\n important, an explicit memory barrier must be used.  This is true of\n many recent processors which implement a policy of ``relaxed,''\n ``weak,'' or ``release'' memory consistency, such as Alpha, PowerPC,\n and ia64.  The default is @code{false}.\n-@end deftypefn\n+@end deftypevr\n \n @deftypefn {Target Hook} {const char *} TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN (const_tree @var{typelist}, const_tree @var{funcdecl}, const_tree @var{val})\n If defined, this macro returns the diagnostic message when it is\n@@ -11018,9 +11000,10 @@ necessary.\n @end deftypefn\n \n @deftypefn {Target Hook} rtx TARGET_GET_DRAP_RTX (void)\n-Define this macro to an rtx for Dynamic Realign Argument Pointer if a\n+This hook should return an rtx for Dynamic Realign Argument Pointer (DRAP) if a\n different argument pointer register is needed to access the function's\n-argument list when stack is aligned.\n+argument list due to stack realignment.  Return @code{NULL} if no DRAP\n+is needed.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS (void)"}]}