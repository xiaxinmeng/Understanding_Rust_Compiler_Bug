{"sha": "e1caed898803653c0c8183eaab732e52b32dd501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjYWVkODk4ODAzNjUzYzBjODE4M2VhYWI3MzJlNTJiMzJkZDUwMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-10-21T04:53:50Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-10-21T04:53:50Z"}, "message": "2002-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URL.java\n\t(URL): Activate SecurityManager checks.\n\t(equals): Use URLStreamHandler implementation instead of doing it\n\talone. This allows special protocol stream handlers to change default\n\tbehaviour.\n\t(hashCode): Use URLStreamHandler implementation instead of doing it\n\talone. This allows special protocol stream handlers to change default\n\tbehaviour.\n\t* java/net/URLStreamHandler.java\n\t(equals): Implemented default URL equality check.\n\t(hostsEqual): Implemented default URL equality check.\n\t(hashCode): Implemented default URL hashCode algorithm.\n\t* java/net/natPlainDatagramSocketImpl.cc:\n\tNo lines longer then 80 characters.\n\nFrom-SVN: r58345", "tree": {"sha": "b447e5f79ee0539fc3758ba8fc6ed0a6b4745cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b447e5f79ee0539fc3758ba8fc6ed0a6b4745cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1caed898803653c0c8183eaab732e52b32dd501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1caed898803653c0c8183eaab732e52b32dd501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1caed898803653c0c8183eaab732e52b32dd501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1caed898803653c0c8183eaab732e52b32dd501/comments", "author": null, "committer": null, "parents": [{"sha": "e2a450f6e8c771989af3968aa22ece380599fc0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a450f6e8c771989af3968aa22ece380599fc0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a450f6e8c771989af3968aa22ece380599fc0f"}], "stats": {"total": 113, "additions": 65, "deletions": 48}, "files": [{"sha": "ade553b4640fb9f5ebb3a1009c709b474cbe0ee4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e1caed898803653c0c8183eaab732e52b32dd501", "patch": "@@ -1,3 +1,21 @@\n+2002-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URL.java\n+\t(URL): Activate SecurityManager checks.\n+\t(equals): Use URLStreamHandler implementation instead of doing it\n+\talone. This allows special protocol stream handlers to change default\n+\tbehaviour.\n+\t(hashCode): Use URLStreamHandler implementation instead of doing it\n+\talone. This allows special protocol stream handlers to change default\n+\tbehaviour.\n+\t* java/net/URLStreamHandler.java\n+\t(equals): Implemented default URL equality check.\n+\t(hostsEqual): Implemented default URL equality check.\n+\t(hashCode): Implemented default URL hashCode algorithm.\n+\t* java/net/natPlainDatagramSocketImpl.cc:\n+\tNo lines longer then 80 characters.\n+\t\n+\n 2002-10-20  Adam Megacz <adam@xwt.org>\n \n \t* aclocal.m4 (CHECK_FOR_BROKEN_MINGW_LD): added"}, {"sha": "b485c51231d8ad2fb9e4a3fa07b2f65763bfbe48", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=e1caed898803653c0c8183eaab732e52b32dd501", "patch": "@@ -98,14 +98,9 @@ public URL(String protocol, String host, int port, String file,\n \n     if (handler != null)\n       {\n-\t// TODO12: Need SecurityManager.checkPermission and\n-\t// TODO12: java.net.NetPermission from JDK 1.2 to be implemented.\n-\t// Throw an exception if an extant security mgr precludes\n-\t// specifying a StreamHandler.\n-\t//\n-\t// SecurityManager s = System.getSecurityManager();\n-\t// if (s != null)\n-\t//   s.checkPermission(NetPermission(\"specifyStreamHandler\"));\n+\tSecurityManager s = System.getSecurityManager ();\n+\tif (s != null)\n+\t  s.checkPermission (new NetPermission (\"specifyStreamHandler\"));\n \n         this.handler = handler;\n       }\n@@ -234,14 +229,9 @@ else if (context != null)\n \n     if (handler != null)\n       {\n-\t// TODO12: Need SecurityManager.checkPermission and\n-\t// TODO12: java.net.NetPermission from JDK 1.2 to be implemented.\n-\t// Throw an exception if an extant security mgr precludes\n-\t// specifying a StreamHandler.\n-\t//\n-\t// SecurityManager s = System.getSecurityManager();\n-\t// if (s != null)\n-\t//   s.checkPermission(NetPermission(\"specifyStreamHandler\"));\n+\tSecurityManager s = System.getSecurityManager ();\n+\tif (s != null)\n+\t  s.checkPermission (new NetPermission (\"specifyStreamHandler\"));\n \n         this.handler = handler;\n       }\n@@ -270,24 +260,8 @@ public boolean equals(Object obj)\n       return false;\n \n     URL uObj = (URL) obj;\n-    \n-    // This comparison is very conservative.  It assumes that any\n-    // field can be null.\n-    return (port == uObj.port\n-\t    && ((protocol == null && uObj.protocol == null)\n-\t\t|| (protocol != null && protocol.equals(uObj.protocol)))\n-\t    && ((userInfo == null && uObj.userInfo == null)\n-                || (userInfo != null && userInfo.equals(uObj.userInfo)))\n-\t    && ((authority == null && uObj.authority == null)\n-                || (authority != null && authority.equals(uObj.authority)))\n-\t    && ((host == null && uObj.host == null)\n-\t\t|| (host != null && host.equals(uObj.host)))\n-\t    && ((file == null && uObj.file == null)\n-\t\t|| (file != null && file.equals(uObj.file)))\n-\t    && ((query == null && uObj.query == null)\n-                || (query != null && query.equals(uObj.query)))\n-\t    && ((ref == null && uObj.ref == null)\n-\t\t|| (ref != null && ref.equals(uObj.ref))));\n+\n+    return handler.equals (this, uObj);\n   }\n \n   /**\n@@ -412,8 +386,7 @@ public int hashCode()\n     if (hashCode != 0)\n       return hashCode;\t\t// Use cached value if available.\n     else\n-      return (protocol.hashCode() + ((host == null) ? 0 : host.hashCode()) +\n-\tport + file.hashCode());\n+      return handler.hashCode (this);\n   }\n \n   /**"}, {"sha": "a30f1570f89e053eb36a9f9216dee7f489be63af", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=e1caed898803653c0c8183eaab732e52b32dd501", "patch": "@@ -234,8 +234,30 @@ protected void setURL(URL u, String protocol, String host, int port,\n    */\n   protected boolean equals (URL url1, URL url2)\n   {\n-    // FIXME: implement this\n-    return false;\n+    // This comparison is very conservative.  It assumes that any\n+    // field can be null.\n+    return (url1.getPort () == url2.getPort ()\n+\t    && ((url1.getProtocol () == null && url2.getProtocol () == null)\n+\t\t|| (url1.getProtocol () != null\n+\t\t\t&& url1.getProtocol ().equals (url2.getProtocol ())))\n+\t    && ((url1.getUserInfo () == null && url2.getUserInfo () == null)\n+                || (url1.getUserInfo () != null\n+\t\t\t&& url1.getUserInfo ().equals(url2.getUserInfo ())))\n+\t    && ((url1.getAuthority () == null && url2.getAuthority () == null)\n+                || (url1.getAuthority () != null\n+\t\t\t&& url1.getAuthority ().equals(url2.getAuthority ())))\n+\t    && ((url1.getHost () == null && url2.getHost () == null)\n+\t\t|| (url1.getHost () != null\n+\t\t\t&& url1.getHost ().equals(url2.getHost ())))\n+\t    && ((url1.getPath () == null && url2.getPath () == null)\n+\t\t|| (url1.getPath () != null\n+\t\t\t&& url1.getPath ().equals (url2.getPath ())))\n+\t    && ((url1.getQuery () == null && url2.getQuery () == null)\n+                || (url1.getQuery () != null\n+\t\t\t&& url1.getQuery ().equals(url2.getQuery ())))\n+\t    && ((url1.getRef () == null && url2.getRef () == null)\n+\t\t|| (url1.getRef () != null\n+\t\t\t&& url1.getRef ().equals(url2.getRef ()))));\n   }\n \n   /**\n@@ -244,9 +266,12 @@ protected boolean equals (URL url1, URL url2)\n    * @exception UnknownHostException If an unknown host is found\n    */\n   protected boolean hostsEqual (URL url1, URL url2)\n+    throws UnknownHostException\n   {\n-    // FIXME: implement this\n-    return false;\n+    InetAddress addr1 = InetAddress.getByName (url1.getHost ());\n+    InetAddress addr2 = InetAddress.getByName (url2.getHost ());\n+\n+    return addr1.equals (addr2);\n   }\n \n   /**\n@@ -285,8 +310,10 @@ protected int getDefaultPort ()\n    */\n   protected int hashCode (URL url)\n   {\n-    // FIXME: implement this\n-    return 0;\n+    return url.getProtocol ().hashCode () +\n+           ((url.getHost () == null) ? 0 : url.getHost ().hashCode ()) +\n+\t   url.getFile ().hashCode() +\n+\t   url.getPort ();\n   }\n \n   /**"}, {"sha": "84de798d944361fb38c6ec7266a886f3aa4ad636", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1caed898803653c0c8183eaab732e52b32dd501/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=e1caed898803653c0c8183eaab732e52b32dd501", "patch": "@@ -280,18 +280,17 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n }\n \n void\n-java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *addr,\n-\t\t                             jint  port)\n+java::net::PlainDatagramSocketImpl::connect (java::net::InetAddress *, jint)\n { \n-  throw new ::java::lang::InternalError (\n-    JvNewStringLatin1 (\"PlainDatagramSocketImpl::connect: not implemented yet\"));\n+  throw new ::java::lang::InternalError (JvNewStringLatin1 (\n+\t    \"PlainDatagramSocketImpl::connect: not implemented yet\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::disconnect ()\n {\n-  throw new ::java::lang::InternalError (\n-    JvNewStringLatin1 (\"PlainDatagramSocketImpl::disconnect: not implemented yet\"));\n+  throw new ::java::lang::InternalError (JvNewStringLatin1 (\n+\t    \"PlainDatagramSocketImpl::disconnect: not implemented yet\"));\n }\n \n jint"}]}