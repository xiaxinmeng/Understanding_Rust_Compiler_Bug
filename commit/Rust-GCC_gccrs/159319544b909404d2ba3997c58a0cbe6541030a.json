{"sha": "159319544b909404d2ba3997c58a0cbe6541030a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5MzE5NTQ0YjkwOTQwNGQyYmEzOTk3YzU4YTBjYmU2NTQxMDMwYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-12T04:01:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-12T04:01:04Z"}, "message": "stor-layout.c (round_up, round_down): Move ...\n\n        * stor-layout.c (round_up, round_down): Move ...\n        * fold-const.c (round_up, round_down): ... here.  Use\n        multiple_of_p to avoid any arithmetic at all.\n\nFrom-SVN: r85848", "tree": {"sha": "fc30e6d27de3e811bf01d5d624f1b7c9f3a541d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc30e6d27de3e811bf01d5d624f1b7c9f3a541d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/159319544b909404d2ba3997c58a0cbe6541030a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159319544b909404d2ba3997c58a0cbe6541030a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159319544b909404d2ba3997c58a0cbe6541030a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159319544b909404d2ba3997c58a0cbe6541030a/comments", "author": null, "committer": null, "parents": [{"sha": "57d1dd8704212031da1e646aa672720262aa4352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d1dd8704212031da1e646aa672720262aa4352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d1dd8704212031da1e646aa672720262aa4352"}], "stats": {"total": 134, "additions": 76, "deletions": 58}, "files": [{"sha": "e3cd92d37258400ef2ac3e0d66a7b11e8c5cee23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=159319544b909404d2ba3997c58a0cbe6541030a", "patch": "@@ -1,3 +1,9 @@\n+2004-08-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* stor-layout.c (round_up, round_down): Move ...\n+\t* fold-const.c (round_up, round_down): ... here.  Use \n+\tmultiple_of_p to avoid any arithmetic at all.\n+\n 2004-08-12  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (struct gimplify_init_ctor_preeval_data): New."}, {"sha": "f7e90be6eaac9b4d3499bfd49c639fef544f5a22", "filename": "gcc/fold-const.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=159319544b909404d2ba3997c58a0cbe6541030a", "patch": "@@ -10678,4 +10678,74 @@ fold_ignored_result (tree t)\n       }\n }\n \n+/* Return the value of VALUE, rounded up to a multiple of DIVISOR.\n+   This can only be applied to objects of a sizetype.  */\n+\n+tree\n+round_up (tree value, int divisor)\n+{\n+  tree div, t;\n+\n+  if (divisor == 0)\n+    abort ();\n+  if (divisor == 1)\n+    return value;\n+\n+  div = size_int_type (divisor, TREE_TYPE (value));\n+\n+  /* See if VALUE is already a multiple of DIVISOR.  If so, we don't\n+     have to do anything.  */\n+  if (multiple_of_p (TREE_TYPE (value), value, div))\n+    return value;\n+\n+  /* If divisor is a power of two, simplify this to bit manipulation.  */\n+  if (divisor == (divisor & -divisor))\n+    {\n+      t = size_int_type (divisor - 1, TREE_TYPE (value));\n+      value = size_binop (PLUS_EXPR, value, t);\n+      t = size_int_type (-divisor, TREE_TYPE (value));\n+      value = size_binop (BIT_AND_EXPR, value, t);\n+    }\n+  else\n+    {\n+      value = size_binop (CEIL_DIV_EXPR, value, div);\n+      value = size_binop (MULT_EXPR, value, div);\n+    }\n+\n+  return value;\n+}\n+\n+/* Likewise, but round down.  */\n+\n+tree\n+round_down (tree value, int divisor)\n+{\n+  tree div, t;\n+\n+  if (divisor == 0)\n+    abort ();\n+  if (divisor == 1)\n+    return value;\n+\n+  div = size_int_type (divisor, TREE_TYPE (value));\n+\n+  /* See if VALUE is already a multiple of DIVISOR.  If so, we don't\n+     have to do anything.  */\n+  if (multiple_of_p (TREE_TYPE (value), value, div))\n+    return value;\n+\n+  /* If divisor is a power of two, simplify this to bit manipulation.  */\n+  if (divisor == (divisor & -divisor))\n+    {\n+      t = size_int_type (-divisor, TREE_TYPE (value));\n+      value = size_binop (BIT_AND_EXPR, value, t);\n+    }\n+  else\n+    {\n+      value = size_binop (FLOOR_DIV_EXPR, value, div);\n+      value = size_binop (MULT_EXPR, value, div);\n+    }\n+\n+  return value;\n+}\n #include \"gt-fold-const.h\""}, {"sha": "661cb8b31738e815a35a06f778f302fb4f9d3895", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159319544b909404d2ba3997c58a0cbe6541030a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=159319544b909404d2ba3997c58a0cbe6541030a", "patch": "@@ -269,64 +269,6 @@ get_mode_alignment (enum machine_mode mode)\n   return MIN (BIGGEST_ALIGNMENT, MAX (1, mode_base_align[mode]*BITS_PER_UNIT));\n }\n \n-/* Return the value of VALUE, rounded up to a multiple of DIVISOR.\n-   This can only be applied to objects of a sizetype.  */\n-\n-tree\n-round_up (tree value, int divisor)\n-{\n-  tree t;\n-\n-  if (divisor == 0)\n-    abort ();\n-  if (divisor == 1)\n-    return value;\n-\n-  /* If divisor is a power of two, simplify this to bit manipulation.  */\n-  if (divisor == (divisor & -divisor))\n-    {\n-      t = size_int_type (divisor - 1, TREE_TYPE (value));\n-      value = size_binop (PLUS_EXPR, value, t);\n-      t = size_int_type (-divisor, TREE_TYPE (value));\n-      value = size_binop (BIT_AND_EXPR, value, t);\n-    }\n-  else\n-    {\n-      t = size_int_type (divisor, TREE_TYPE (value));\n-      value = size_binop (CEIL_DIV_EXPR, value, t);\n-      value = size_binop (MULT_EXPR, value, t);\n-    }\n-\n-  return value;\n-}\n-\n-/* Likewise, but round down.  */\n-\n-tree\n-round_down (tree value, int divisor)\n-{\n-  tree t;\n-\n-  if (divisor == 0)\n-    abort ();\n-  if (divisor == 1)\n-    return value;\n-\n-  /* If divisor is a power of two, simplify this to bit manipulation.  */\n-  if (divisor == (divisor & -divisor))\n-    {\n-      t = size_int_type (-divisor, TREE_TYPE (value));\n-      value = size_binop (BIT_AND_EXPR, value, t);\n-    }\n-  else\n-    {\n-      t = size_int_type (divisor, TREE_TYPE (value));\n-      value = size_binop (FLOOR_DIV_EXPR, value, t);\n-      value = size_binop (MULT_EXPR, value, t);\n-    }\n-\n-  return value;\n-}\n \f\n /* Subroutine of layout_decl: Force alignment required for the data type.\n    But if the decl itself wants greater alignment, don't override that.  */"}]}