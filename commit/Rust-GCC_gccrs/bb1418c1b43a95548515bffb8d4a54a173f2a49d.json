{"sha": "bb1418c1b43a95548515bffb8d4a54a173f2a49d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxNDE4YzFiNDNhOTU1NDg1MTViZmZiOGQ0YTU0YTE3M2YyYTQ5ZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-02T19:20:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-02T19:20:43Z"}, "message": "i386.c (ix86_special_builtin_type): New.\n\n2008-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_special_builtin_type): New.\n\t(bdesc_special_args): Likewise.\n\t(ix86_expand_special_args_builtin): Likewise.\n\t(ix86_init_mmx_sse_builtins): Updated.\n\t(ix86_expand_builtin): Updated.\n\t(ix86_expand_store_builtin): Removed.\n\t(ix86_expand_unop_builtin): Likewise.\n\n\t* config/i386/mm3dnow.h (__v2sf): Moved to ...\n\t* config/i386/mmintrin.h (__v2sf): Here.\n\n\t* config/i386/xmmintrin.h (_mm_loadh_pi): Replace __v2si with\n\tconst __v2sf.\n\t(_mm_loadl_pi): Likewise.\n\t(_mm_storeh_pi): Replace __v2si with __v2sf.\n\t(_mm_storel_pi): Likewise.\n\n\t* doc/extend.texi: Correct __builtin_ia32_loadhps,\n\t__builtin_ia32_loadlps, __builtin_ia32_storehps,\n\t__builtin_ia32_storelps, __builtin_ia32_loadhpd and\n\t__builtin_ia32_loadlpd.\n\n2008-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_builtin_type): Add FLOAT_FTYPE_FLOAT,\n\tV4SF_FTYPE_V4SF_VEC_MERGE and V2DF_FTYPE_V2DF_VEC_MERGE.\n\t(bdesc_args): Updated.  Add scalar SSE builtins with vec_merge.\n\t(ix86_init_mmx_sse_builtins): Updated.\n\t(ix86_expand_args_builtin): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\t(ix86_expand_unop1_builtin): Renamed to ...\n\t(ix86_expand_unop_vec_merge_builtin): This.\n\nFrom-SVN: r134886", "tree": {"sha": "b2be3d60f7c3dd6b0d3583b7d3d356ec6e047075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2be3d60f7c3dd6b0d3583b7d3d356ec6e047075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1418c1b43a95548515bffb8d4a54a173f2a49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1418c1b43a95548515bffb8d4a54a173f2a49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1418c1b43a95548515bffb8d4a54a173f2a49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1418c1b43a95548515bffb8d4a54a173f2a49d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a12f79f5a86fd9eba90acc3d596e42caff53dc4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12f79f5a86fd9eba90acc3d596e42caff53dc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12f79f5a86fd9eba90acc3d596e42caff53dc4c"}], "stats": {"total": 630, "additions": 368, "deletions": 262}, "files": [{"sha": "221a8fa87dea917103f18b20ba5c40940fc05946", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -1,3 +1,38 @@\n+2008-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_special_builtin_type): New.\n+\t(bdesc_special_args): Likewise.\n+\t(ix86_expand_special_args_builtin): Likewise.\n+\t(ix86_init_mmx_sse_builtins): Updated.\n+\t(ix86_expand_builtin): Updated.\n+\t(ix86_expand_store_builtin): Removed.\n+\t(ix86_expand_unop_builtin): Likewise.\n+\n+\t* config/i386/mm3dnow.h (__v2sf): Moved to ...\n+\t* config/i386/mmintrin.h (__v2sf): Here.\n+\n+\t* config/i386/xmmintrin.h (_mm_loadh_pi): Replace __v2si with\n+\tconst __v2sf.\n+\t(_mm_loadl_pi): Likewise.\n+\t(_mm_storeh_pi): Replace __v2si with __v2sf.\n+\t(_mm_storel_pi): Likewise.\n+\n+\t* doc/extend.texi: Correct __builtin_ia32_loadhps,\n+\t__builtin_ia32_loadlps, __builtin_ia32_storehps,\n+\t__builtin_ia32_storelps, __builtin_ia32_loadhpd and\n+\t__builtin_ia32_loadlpd.\n+\n+2008-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_builtin_type): Add FLOAT_FTYPE_FLOAT,\n+\tV4SF_FTYPE_V4SF_VEC_MERGE and V2DF_FTYPE_V2DF_VEC_MERGE.\n+\t(bdesc_args): Updated.  Add scalar SSE builtins with vec_merge.\n+\t(ix86_init_mmx_sse_builtins): Updated.\n+\t(ix86_expand_args_builtin): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\t(ix86_expand_unop1_builtin): Renamed to ...\n+\t(ix86_expand_unop_vec_merge_builtin): This.\n+\n 2008-05-01  Jan Hubicka  <jh@suse.cz>\n \n \tPR bootstrap/36100"}, {"sha": "d9fc4bd694bdef7300966686c4cc2aaf5ae50da1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 322, "deletions": 249, "changes": 571, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -17984,11 +17984,32 @@ static const struct builtin_description bdesc_pcmpistr[] =\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, UNKNOWN, (int) CCZmode },\n };\n \n+/* Special builtin types */\n+enum ix86_special_builtin_type\n+{\n+  SPECIAL_FTYPE_UNKNOWN,\n+  VOID_FTYPE_VOID,\n+  V16QI_FTYPE_PCCHAR,\n+  V4SF_FTYPE_PCFLOAT,\n+  V2DF_FTYPE_PCDOUBLE,\n+  V4SF_FTYPE_V4SF_PCV2SF,\n+  V2DF_FTYPE_V2DF_PCDOUBLE,\n+  V2DI_FTYPE_PV2DI,\n+  VOID_FTYPE_PV2SF_V4SF,\n+  VOID_FTYPE_PV2DI_V2DI,\n+  VOID_FTYPE_PCHAR_V16QI,\n+  VOID_FTYPE_PFLOAT_V4SF,\n+  VOID_FTYPE_PDOUBLE_V2DF,\n+  VOID_FTYPE_PDI_DI,\n+  VOID_FTYPE_PINT_INT\n+};\n+\n /* Builtin types */\n enum ix86_builtin_type\n {\n   FTYPE_UNKNOWN,\n   FLOAT128_FTYPE_FLOAT128,\n+  FLOAT_FTYPE_FLOAT,\n   FLOAT128_FTYPE_FLOAT128_FLOAT128,\n   INT64_FTYPE_V4SF,\n   INT64_FTYPE_V2DF,\n@@ -18007,13 +18028,15 @@ enum ix86_builtin_type\n   V4SI_FTYPE_V2DF,\n   V4HI_FTYPE_V4HI,\n   V4SF_FTYPE_V4SF,\n+  V4SF_FTYPE_V4SF_VEC_MERGE,\n   V4SF_FTYPE_V4SI,\n   V4SF_FTYPE_V2DF,\n   V2DI_FTYPE_V2DI,\n   V2DI_FTYPE_V16QI,\n   V2DI_FTYPE_V8HI,\n   V2DI_FTYPE_V4SI,\n   V2DF_FTYPE_V2DF,\n+  V2DF_FTYPE_V2DF_VEC_MERGE,\n   V2DF_FTYPE_V4SI,\n   V2DF_FTYPE_V4SF,\n   V2DF_FTYPE_V2SI,\n@@ -18098,6 +18121,54 @@ enum ix86_builtin_type\n   V2DI_FTYPE_V2DI_V2DI_UINT_UINT\n };\n \n+/* Special builtins with variable number of arguments.  */\n+static const struct builtin_description bdesc_special_args[] =\n+{\n+  /* MMX */\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_emms, \"__builtin_ia32_emms\", IX86_BUILTIN_EMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n+\n+  /* 3DNow! */\n+  { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_femms, \"__builtin_ia32_femms\", IX86_BUILTIN_FEMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n+\n+  /* SSE */\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movups, \"__builtin_ia32_storeups\", IX86_BUILTIN_STOREUPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movntv4sf, \"__builtin_ia32_movntps\", IX86_BUILTIN_MOVNTPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movups, \"__builtin_ia32_loadups\", IX86_BUILTIN_LOADUPS, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT },\n+\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_loadhps, \"__builtin_ia32_loadhps\", IX86_BUILTIN_LOADHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_PCV2SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_loadlps, \"__builtin_ia32_loadlps\", IX86_BUILTIN_LOADLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_PCV2SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_storehps, \"__builtin_ia32_storehps\", IX86_BUILTIN_STOREHPS, UNKNOWN, (int) VOID_FTYPE_PV2SF_V4SF },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_storelps, \"__builtin_ia32_storelps\", IX86_BUILTIN_STORELPS, UNKNOWN, (int) VOID_FTYPE_PV2SF_V4SF },\n+\n+  /* SSE or 3DNow!A  */\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_sse_sfence, \"__builtin_ia32_sfence\", IX86_BUILTIN_SFENCE, UNKNOWN, (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_sse_movntdi, \"__builtin_ia32_movntq\", IX86_BUILTIN_MOVNTQ, UNKNOWN, (int) VOID_FTYPE_PDI_DI },\n+\n+  /* SSE2 */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lfence, \"__builtin_ia32_lfence\", IX86_BUILTIN_LFENCE, UNKNOWN, (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_mfence, 0, IX86_BUILTIN_MFENCE, UNKNOWN, (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movupd, \"__builtin_ia32_storeupd\", IX86_BUILTIN_STOREUPD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movdqu, \"__builtin_ia32_storedqu\", IX86_BUILTIN_STOREDQU, UNKNOWN, (int) VOID_FTYPE_PCHAR_V16QI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntv2df, \"__builtin_ia32_movntpd\", IX86_BUILTIN_MOVNTPD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntv2di, \"__builtin_ia32_movntdq\", IX86_BUILTIN_MOVNTDQ, UNKNOWN, (int) VOID_FTYPE_PV2DI_V2DI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movntsi, \"__builtin_ia32_movnti\", IX86_BUILTIN_MOVNTI, UNKNOWN, (int) VOID_FTYPE_PINT_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movupd, \"__builtin_ia32_loadupd\", IX86_BUILTIN_LOADUPD, UNKNOWN, (int) V2DF_FTYPE_PCDOUBLE },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movdqu, \"__builtin_ia32_loaddqu\", IX86_BUILTIN_LOADDQU, UNKNOWN, (int) V16QI_FTYPE_PCCHAR },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loadhpd, \"__builtin_ia32_loadhpd\", IX86_BUILTIN_LOADHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_PCDOUBLE },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_loadlpd, \"__builtin_ia32_loadlpd\", IX86_BUILTIN_LOADLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_PCDOUBLE },\n+\n+  /* SSE3 */\n+  { OPTION_MASK_ISA_SSE3, CODE_FOR_sse3_lddqu, \"__builtin_ia32_lddqu\", IX86_BUILTIN_LDDQU, UNKNOWN, (int) V16QI_FTYPE_PCCHAR },\n+\n+  /* SSE4.1 */\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_movntdqa, \"__builtin_ia32_movntdqa\", IX86_BUILTIN_MOVNTDQA, UNKNOWN, (int) V2DI_FTYPE_PV2DI },\n+\n+  /* SSE4A */\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_vmmovntv2df, \"__builtin_ia32_movntsd\", IX86_BUILTIN_MOVNTSD, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V2DF },\n+  { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_vmmovntv4sf, \"__builtin_ia32_movntss\", IX86_BUILTIN_MOVNTSS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n+};\n+\n /* Builtins with variable number of arguments.  */\n static const struct builtin_description bdesc_args[] =\n {\n@@ -18263,9 +18334,11 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, \"__builtin_ia32_cvtsi2ss\", IX86_BUILTIN_CVTSI2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_SI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq, \"__builtin_ia32_cvtsi642ss\", IX86_BUILTIN_CVTSI642SS, UNKNOWN, V4SF_FTYPE_V4SF_DI },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufd, \"__builtin_ia32_pshufd\", IX86_BUILTIN_PSHUFD, UNKNOWN, (int) V4SI_FTYPE_V4SI_INT },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshuflw, \"__builtin_ia32_pshuflw\", IX86_BUILTIN_PSHUFLW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufhw, \"__builtin_ia32_pshufhw\", IX86_BUILTIN_PSHUFHW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_rsqrtsf2, \"__builtin_ia32_rsqrtf\", IX86_BUILTIN_RSQRTF, UNKNOWN, (int) FLOAT_FTYPE_FLOAT },\n+\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmsqrtv4sf2, \"__builtin_ia32_sqrtss\", IX86_BUILTIN_SQRTSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_VEC_MERGE },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmrsqrtv4sf2, \"__builtin_ia32_rsqrtss\", IX86_BUILTIN_RSQRTSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_VEC_MERGE },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmrcpv4sf2, \"__builtin_ia32_rcpss\", IX86_BUILTIN_RCPSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_VEC_MERGE },\n \n   /* SSE MMX or 3Dnow!A */\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI },\n@@ -18442,6 +18515,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, \"__builtin_ia32_psraw128\", IX86_BUILTIN_PSRAW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, \"__builtin_ia32_psrad128\", IX86_BUILTIN_PSRAD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n \n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufd, \"__builtin_ia32_pshufd\", IX86_BUILTIN_PSHUFD, UNKNOWN, (int) V4SI_FTYPE_V4SI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshuflw, \"__builtin_ia32_pshuflw\", IX86_BUILTIN_PSHUFLW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufhw, \"__builtin_ia32_pshufhw\", IX86_BUILTIN_PSHUFHW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsqrtv2df2, \"__builtin_ia32_sqrtsd\", IX86_BUILTIN_SQRTSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_VEC_MERGE },\n+\n   /* SSE2 MMX */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_addv1di3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subv1di3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI },\n@@ -18882,12 +18961,14 @@ ix86_init_mmx_sse_builtins (void)\n   tree V8HI_type_node = build_vector_type_for_mode (intHI_type_node, V8HImode);\n \n   tree pchar_type_node = build_pointer_type (char_type_node);\n-  tree pcchar_type_node = build_pointer_type (\n-\t\t\t     build_type_variant (char_type_node, 1, 0));\n+  tree pcchar_type_node\n+    = build_pointer_type (build_type_variant (char_type_node, 1, 0));\n   tree pfloat_type_node = build_pointer_type (float_type_node);\n-  tree pcfloat_type_node = build_pointer_type (\n-\t\t\t     build_type_variant (float_type_node, 1, 0));\n-  tree pv2si_type_node = build_pointer_type (V2SI_type_node);\n+  tree pcfloat_type_node\n+    = build_pointer_type (build_type_variant (float_type_node, 1, 0));\n+  tree pv2sf_type_node = build_pointer_type (V2SF_type_node);\n+  tree pcv2sf_type_node\n+    = build_pointer_type (build_type_variant (V2SF_type_node, 1, 0));\n   tree pv2di_type_node = build_pointer_type (V2DI_type_node);\n   tree pdi_type_node = build_pointer_type (long_long_unsigned_type_node);\n \n@@ -18964,13 +19045,12 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tpchar_type_node, NULL_TREE);\n   tree v4sf_ftype_pcfloat\n     = build_function_type_list (V4SF_type_node, pcfloat_type_node, NULL_TREE);\n-  /* @@@ the type is bogus */\n-  tree v4sf_ftype_v4sf_pv2si\n+  tree v4sf_ftype_v4sf_pcv2sf\n     = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4SF_type_node, pv2si_type_node, NULL_TREE);\n-  tree void_ftype_pv2si_v4sf\n+\t\t\t\tV4SF_type_node, pcv2sf_type_node, NULL_TREE);\n+  tree void_ftype_pv2sf_v4sf\n     = build_function_type_list (void_type_node,\n-\t\t\t\tpv2si_type_node, V4SF_type_node, NULL_TREE);\n+\t\t\t\tpv2sf_type_node, V4SF_type_node, NULL_TREE);\n   tree void_ftype_pfloat_v4sf\n     = build_function_type_list (void_type_node,\n \t\t\t\tpfloat_type_node, V4SF_type_node, NULL_TREE);\n@@ -19356,6 +19436,10 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\tNULL_TREE);\n+  tree float_ftype_float\n+    = build_function_type_list (float_type_node,\n+\t\t\t\tfloat_type_node,\n+\t\t\t\tNULL_TREE);\n \n   tree ftype;\n \n@@ -19400,6 +19484,67 @@ ix86_init_mmx_sse_builtins (void)\n       def_builtin_const (OPTION_MASK_ISA_64BIT, \"__builtin_copysignq\", ftype, IX86_BUILTIN_COPYSIGNQ);\n     }\n \n+  /* Add all special builtins with variable number of operands.  */\n+  for (i = 0, d = bdesc_special_args;\n+       i < ARRAY_SIZE (bdesc_special_args);\n+       i++, d++)\n+    {\n+      tree type;\n+\n+      if (d->name == 0)\n+\tcontinue;\n+\n+      switch ((enum ix86_special_builtin_type) d->flag)\n+\t{\n+\tcase VOID_FTYPE_VOID:\n+\t  type = void_ftype_void;\n+\t  break;\n+\tcase V16QI_FTYPE_PCCHAR:\n+\t  type = v16qi_ftype_pcchar;\n+\t  break;\n+\tcase V4SF_FTYPE_PCFLOAT:\n+\t  type = v4sf_ftype_pcfloat;\n+\t  break;\n+\tcase V2DI_FTYPE_PV2DI:\n+\t  type = v2di_ftype_pv2di;\n+\t  break;\n+\tcase V2DF_FTYPE_PCDOUBLE:\n+\t  type = v2df_ftype_pcdouble;\n+\t  break;\n+\tcase V4SF_FTYPE_V4SF_PCV2SF:\n+\t  type = v4sf_ftype_v4sf_pcv2sf;\n+\t  break;\n+\tcase V2DF_FTYPE_V2DF_PCDOUBLE:\n+\t  type = v2df_ftype_v2df_pcdouble;\n+\t  break;\n+\tcase VOID_FTYPE_PV2SF_V4SF:\n+\t  type = void_ftype_pv2sf_v4sf;\n+\t  break;\n+\tcase VOID_FTYPE_PV2DI_V2DI:\n+\t  type = void_ftype_pv2di_v2di;\n+\t  break;\n+\tcase VOID_FTYPE_PCHAR_V16QI:\n+\t  type = void_ftype_pchar_v16qi;\n+\t  break;\n+\tcase VOID_FTYPE_PFLOAT_V4SF:\n+\t  type = void_ftype_pfloat_v4sf;\n+\t  break;\n+\tcase VOID_FTYPE_PDOUBLE_V2DF:\n+\t  type = void_ftype_pdouble_v2df;\n+\t  break;\n+\tcase VOID_FTYPE_PDI_DI:\n+\t  type = void_ftype_pdi_di;\n+\t  break;\n+\tcase VOID_FTYPE_PINT_INT:\n+\t  type = void_ftype_pint_int;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+\n   /* Add all builtins with variable number of operands.  */\n   for (i = 0, d = bdesc_args;\n        i < ARRAY_SIZE (bdesc_args);\n@@ -19412,6 +19557,9 @@ ix86_init_mmx_sse_builtins (void)\n \n       switch ((enum ix86_builtin_type) d->flag)\n \t{\n+\tcase FLOAT_FTYPE_FLOAT:\n+\t  type = float_ftype_float;\n+\t  break;\n \tcase INT64_FTYPE_V4SF:\n \t  type = int64_ftype_v4sf;\n \t  break;\n@@ -19461,6 +19609,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v4si_ftype_v2df;\n \t  break;\n \tcase V4SF_FTYPE_V4SF:\n+\tcase V4SF_FTYPE_V4SF_VEC_MERGE:\n \t  type = v4sf_ftype_v4sf;\n \t  break;\n \tcase V4SF_FTYPE_V4SI:\n@@ -19497,6 +19646,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v2df_ftype_v4sf;\n \t  break;\n \tcase V2DF_FTYPE_V2DF:\n+\tcase V2DF_FTYPE_V2DF_VEC_MERGE:\n \t  type = v2df_ftype_v2df;\n \t  break;\n \tcase V2DF_FTYPE_V2SI:\n@@ -19741,9 +19891,6 @@ ix86_init_mmx_sse_builtins (void)\n       def_builtin_const (d->mask, d->name, ftype, d->code);\n     }\n \n-  /* Add the remaining MMX insns with somewhat more complicated types.  */\n-  def_builtin (OPTION_MASK_ISA_MMX, \"__builtin_ia32_emms\", void_ftype_void, IX86_BUILTIN_EMMS);\n-\n   /* comi/ucomi insns.  */\n   for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     if (d->mask == OPTION_MASK_ISA_SSE2)\n@@ -19755,64 +19902,22 @@ ix86_init_mmx_sse_builtins (void)\n   for (i = 0, d = bdesc_ptest; i < ARRAY_SIZE (bdesc_ptest); i++, d++)\n     def_builtin_const (d->mask, d->name, int_ftype_v2di_v2di, d->code);\n \n+  /* SSE */\n   def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_ldmxcsr\", void_ftype_unsigned, IX86_BUILTIN_LDMXCSR);\n   def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_stmxcsr\", unsigned_ftype_void, IX86_BUILTIN_STMXCSR);\n \n+  /* SSE or 3DNow!A */\n   def_builtin (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, \"__builtin_ia32_maskmovq\", void_ftype_v8qi_v8qi_pchar, IX86_BUILTIN_MASKMOVQ);\n \n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_loadups\", v4sf_ftype_pcfloat, IX86_BUILTIN_LOADUPS);\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_storeups\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STOREUPS);\n-\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_loadhps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADHPS);\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_loadlps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADLPS);\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_storehps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STOREHPS);\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_storelps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STORELPS);\n-\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_movntps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTPS);\n-  def_builtin (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, \"__builtin_ia32_movntq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTQ);\n-  def_builtin (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, \"__builtin_ia32_sfence\", void_ftype_void, IX86_BUILTIN_SFENCE);\n-\n-  def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_sqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTSS);\n-  def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rsqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTSS);\n-  def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rcpss\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPSS);\n-\n-  ftype = build_function_type_list (float_type_node,\n-\t\t\t\t    float_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE, \"__builtin_ia32_rsqrtf\", ftype, IX86_BUILTIN_RSQRTF);\n-\n-  /* Original 3DNow!  */\n-  def_builtin (OPTION_MASK_ISA_3DNOW, \"__builtin_ia32_femms\", void_ftype_void, IX86_BUILTIN_FEMMS);\n-\n   /* SSE2 */\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_maskmovdqu\", void_ftype_v16qi_v16qi_pchar, IX86_BUILTIN_MASKMOVDQU);\n \n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_loadupd\", v2df_ftype_pcdouble, IX86_BUILTIN_LOADUPD);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_storeupd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREUPD);\n-\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_loadhpd\", v2df_ftype_v2df_pcdouble, IX86_BUILTIN_LOADHPD);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_loadlpd\", v2df_ftype_v2df_pcdouble, IX86_BUILTIN_LOADLPD);\n-\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_movnti\", void_ftype_pint_int, IX86_BUILTIN_MOVNTI);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_movntpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTPD);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_movntdq\", void_ftype_pv2di_v2di, IX86_BUILTIN_MOVNTDQ);\n-\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_sqrtsd\", v2df_ftype_v2df, IX86_BUILTIN_SQRTSD);\n-\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_clflush\", void_ftype_pcvoid, IX86_BUILTIN_CLFLUSH);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_lfence\", void_ftype_void, IX86_BUILTIN_LFENCE);\n   x86_mfence = def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_mfence\", void_ftype_void, IX86_BUILTIN_MFENCE);\n \n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_loaddqu\", v16qi_ftype_pcchar, IX86_BUILTIN_LOADDQU);\n-  def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_storedqu\", void_ftype_pchar_v16qi, IX86_BUILTIN_STOREDQU);\n-\n   /* SSE3.  */\n   def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_monitor\", void_ftype_pcvoid_unsigned_unsigned, IX86_BUILTIN_MONITOR);\n   def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_mwait\", void_ftype_unsigned_unsigned, IX86_BUILTIN_MWAIT);\n-  def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_lddqu\", v16qi_ftype_pcchar, IX86_BUILTIN_LDDQU);\n-\n-  /* SSE4.1. */\n-  def_builtin (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_movntdqa\", v2di_ftype_pv2di, IX86_BUILTIN_MOVNTDQA);\n \n   /* AES */\n   if (TARGET_AES)\n@@ -19833,10 +19938,6 @@ ix86_init_mmx_sse_builtins (void)\n       def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pclmulqdq128\", v2di_ftype_v2di_v2di_int, IX86_BUILTIN_PCLMULQDQ128);\n     }\n \n-  /* AMDFAM10 SSE4A New built-ins  */\n-  def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntsd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTSD);\n-  def_builtin (OPTION_MASK_ISA_SSE4A, \"__builtin_ia32_movntss\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTSS);\n-\n   /* Access to the vec_init patterns.  */\n   ftype = build_function_type_list (V2SI_type_node, integer_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n@@ -20243,71 +20344,12 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n-/* Subroutine of ix86_expand_builtin to take care of stores.  */\n+/* Subroutine of ix86_expand_args_builtin to take care of scalar unop\n+   insns with vec_merge.  */\n \n static rtx\n-ix86_expand_store_builtin (enum insn_code icode, tree exp)\n-{\n-  rtx pat;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n-\n-  if (VECTOR_MODE_P (mode1))\n-    op1 = safe_vector_operand (op1, mode1);\n-\n-  op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-  op1 = copy_to_mode_reg (mode1, op1);\n-\n-  pat = GEN_FCN (icode) (op0, op1);\n-  if (pat)\n-    emit_insn (pat);\n-  return 0;\n-}\n-\n-/* Subroutine of ix86_expand_builtin to take care of unop insns.  */\n-\n-static rtx\n-ix86_expand_unop_builtin (enum insn_code icode, tree exp,\n-\t\t\t  rtx target, int do_load)\n-{\n-  rtx pat;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  rtx op0 = expand_normal (arg0);\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n-\n-  if (optimize || !target\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-  if (do_load)\n-    op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-  else\n-    {\n-      if (VECTOR_MODE_P (mode0))\n-\top0 = safe_vector_operand (op0, mode0);\n-\n-      if ((optimize && !register_operand (op0, mode0))\n-\t  || ! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-\top0 = copy_to_mode_reg (mode0, op0);\n-    }\n-\n-  pat = GEN_FCN (icode) (target, op0);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  return target;\n-}\n-\n-/* Subroutine of ix86_expand_builtin to take care of three special unop insns:\n-   sqrtss, sqrtsd, rsqrtss, rsqrtsf, rcpss.  */\n-\n-static rtx\n-ix86_expand_unop1_builtin (enum insn_code icode, tree exp, rtx target)\n+ix86_expand_unop_vec_merge_builtin (enum insn_code icode, tree exp,\n+\t\t\t\t    rtx target)\n {\n   rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n@@ -20417,6 +20459,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n   switch ((enum ix86_builtin_type) d->flag)\n     {\n     case FLOAT128_FTYPE_FLOAT128:\n+    case FLOAT_FTYPE_FLOAT:\n     case INT64_FTYPE_V4SF:\n     case INT64_FTYPE_V2DF:\n     case INT_FTYPE_V16QI:\n@@ -20452,6 +20495,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2SF_FTYPE_V2SI:\n       nargs = 1;\n       break;\n+    case V4SF_FTYPE_V4SF_VEC_MERGE:\n+    case V2DF_FTYPE_V2DF_VEC_MERGE:\n+      return ix86_expand_unop_vec_merge_builtin (icode, exp, target);\n     case FLOAT128_FTYPE_FLOAT128_FLOAT128:\n     case V16QI_FTYPE_V16QI_V16QI:\n     case V16QI_FTYPE_V8HI_V8HI:\n@@ -20699,6 +20745,148 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n   return target;\n }\n \n+/* Subroutine of ix86_expand_builtin to take care of special insns\n+   with variable number of operands.  */\n+\n+static rtx\n+ix86_expand_special_args_builtin (const struct builtin_description *d,\n+\t\t\t\t    tree exp, rtx target)\n+{\n+  tree arg;\n+  rtx pat, op;\n+  unsigned int i, nargs, arg_adjust, memory;\n+  struct\n+    {\n+      rtx op;\n+      enum machine_mode mode;\n+    } args[2];\n+  enum insn_code icode = d->icode;\n+  bool last_arg_constant = false;\n+  const struct insn_data *insn_p = &insn_data[icode];\n+  enum machine_mode tmode = insn_p->operand[0].mode;\n+  enum { load, store } class;\n+\n+  switch ((enum ix86_special_builtin_type) d->flag)\n+    {\n+    case VOID_FTYPE_VOID:\n+      emit_insn (GEN_FCN (icode) (target));\n+      return 0;\n+    case V2DI_FTYPE_PV2DI:\n+    case V16QI_FTYPE_PCCHAR:\n+    case V4SF_FTYPE_PCFLOAT:\n+    case V2DF_FTYPE_PCDOUBLE:\n+      nargs = 1;\n+      class = load;\n+      memory = 0;\n+      break;\n+    case VOID_FTYPE_PV2SF_V4SF:\n+    case VOID_FTYPE_PV2DI_V2DI:\n+    case VOID_FTYPE_PCHAR_V16QI:\n+    case VOID_FTYPE_PFLOAT_V4SF:\n+    case VOID_FTYPE_PDOUBLE_V2DF:\n+    case VOID_FTYPE_PDI_DI:\n+    case VOID_FTYPE_PINT_INT:\n+      nargs = 1;\n+      class = store;\n+      /* Reserve memory operand for target.  */\n+      memory = ARRAY_SIZE (args);\n+      break;\n+    case V4SF_FTYPE_V4SF_PCV2SF:\n+    case V2DF_FTYPE_V2DF_PCDOUBLE:\n+      nargs = 2;\n+      class = load;\n+      memory = 1;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  gcc_assert (nargs <= ARRAY_SIZE (args));\n+\n+  if (class == store)\n+    {\n+      arg = CALL_EXPR_ARG (exp, 0);\n+      op = expand_normal (arg);\n+      gcc_assert (target == 0);\n+      target = gen_rtx_MEM (tmode, copy_to_mode_reg (Pmode, op));\n+      arg_adjust = 1;\n+    }\n+  else\n+    {\n+      arg_adjust = 0;\n+      if (optimize\n+\t  || target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || ! (*insn_p->operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+    }\n+\n+  for (i = 0; i < nargs; i++)\n+    {\n+      enum machine_mode mode = insn_p->operand[i + 1].mode;\n+      bool match;\n+\n+      arg = CALL_EXPR_ARG (exp, i + arg_adjust);\n+      op = expand_normal (arg);\n+      match = (*insn_p->operand[i + 1].predicate) (op, mode);\n+\n+      if (last_arg_constant && (i + 1) == nargs)\n+\t{\n+\t  if (!match)\n+\t    switch (icode)\n+\t      {\n+\t     default:\n+\t\terror (\"the last argument must be an 8-bit immediate\");\n+\t\treturn const0_rtx;\n+\t      }\n+\t}\n+      else\n+\t{\n+\t  if (i == memory)\n+\t    {\n+\t      /* This must be the memory operand.  */\n+\t      op = gen_rtx_MEM (mode, copy_to_mode_reg (Pmode, op));\n+\t      gcc_assert (GET_MODE (op) == mode\n+\t\t\t  || GET_MODE (op) == VOIDmode);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* This must be register.  */\n+\t      if (VECTOR_MODE_P (mode))\n+\t\top = safe_vector_operand (op, mode);\n+\n+\t      gcc_assert (GET_MODE (op) == mode\n+\t\t\t  || GET_MODE (op) == VOIDmode);\n+\t      op = copy_to_mode_reg (mode, op);\n+\t    }\n+\t}\n+\n+      args[i].op = op;\n+      args[i].mode = mode;\n+    }\n+\n+  switch (nargs)\n+    {\n+    case 1:\n+      pat = GEN_FCN (icode) (target, args[0].op);\n+      break;\n+    case 2:\n+      pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+      break;\n+    case 3:\n+      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n+\t\t\t     args[2].op);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+  return class == store ? 0 : target;\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of comi insns.  */\n \n static rtx\n@@ -21134,19 +21322,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   tree arg0, arg1, arg2;\n   rtx op0, op1, op2, pat;\n-  enum machine_mode tmode, mode0, mode1, mode2;\n+  enum machine_mode mode0, mode1, mode2;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {\n-    case IX86_BUILTIN_EMMS:\n-      emit_insn (gen_mmx_emms ());\n-      return 0;\n-\n-    case IX86_BUILTIN_SFENCE:\n-      emit_insn (gen_sse_sfence ());\n-      return 0;\n-\n     case IX86_BUILTIN_MASKMOVQ:\n     case IX86_BUILTIN_MASKMOVDQU:\n       icode = (fcode == IX86_BUILTIN_MASKMOVQ\n@@ -21178,75 +21358,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return 0;\n \n-    case IX86_BUILTIN_RSQRTF:\n-      return ix86_expand_unop1_builtin (CODE_FOR_rsqrtsf2, exp, target);\n-\n-    case IX86_BUILTIN_SQRTSS:\n-      return ix86_expand_unop1_builtin (CODE_FOR_sse_vmsqrtv4sf2, exp, target);\n-    case IX86_BUILTIN_RSQRTSS:\n-      return ix86_expand_unop1_builtin (CODE_FOR_sse_vmrsqrtv4sf2, exp, target);\n-    case IX86_BUILTIN_RCPSS:\n-      return ix86_expand_unop1_builtin (CODE_FOR_sse_vmrcpv4sf2, exp, target);\n-\n-    case IX86_BUILTIN_LOADUPS:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse_movups, exp, target, 1);\n-\n-    case IX86_BUILTIN_STOREUPS:\n-      return ix86_expand_store_builtin (CODE_FOR_sse_movups, exp);\n-\n-    case IX86_BUILTIN_LOADHPS:\n-    case IX86_BUILTIN_LOADLPS:\n-    case IX86_BUILTIN_LOADHPD:\n-    case IX86_BUILTIN_LOADLPD:\n-      icode = (fcode == IX86_BUILTIN_LOADHPS ? CODE_FOR_sse_loadhps\n-\t       : fcode == IX86_BUILTIN_LOADLPS ? CODE_FOR_sse_loadlps\n-\t       : fcode == IX86_BUILTIN_LOADHPD ? CODE_FOR_sse2_loadhpd\n-\t       : CODE_FOR_sse2_loadlpd);\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode0 = insn_data[icode].operand[1].mode;\n-      mode1 = insn_data[icode].operand[2].mode;\n-\n-      op0 = force_reg (mode0, op0);\n-      op1 = gen_rtx_MEM (mode1, copy_to_mode_reg (Pmode, op1));\n-      if (optimize || target == 0\n-\t  || GET_MODE (target) != tmode\n-\t  || !register_operand (target, tmode))\n-\ttarget = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-\n-    case IX86_BUILTIN_STOREHPS:\n-    case IX86_BUILTIN_STORELPS:\n-      icode = (fcode == IX86_BUILTIN_STOREHPS ? CODE_FOR_sse_storehps\n-\t       : CODE_FOR_sse_storelps);\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      mode0 = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-\n-      op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-      op1 = force_reg (mode1, op1);\n-\n-      pat = GEN_FCN (icode) (op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return const0_rtx;\n-\n-    case IX86_BUILTIN_MOVNTPS:\n-      return ix86_expand_store_builtin (CODE_FOR_sse_movntv4sf, exp);\n-    case IX86_BUILTIN_MOVNTQ:\n-      return ix86_expand_store_builtin (CODE_FOR_sse_movntdi, exp);\n-\n     case IX86_BUILTIN_LDMXCSR:\n       op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n       target = assign_386_stack_local (SImode, SLOT_VIRTUAL);\n@@ -21259,24 +21370,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (gen_sse_stmxcsr (target));\n       return copy_to_mode_reg (SImode, target);\n \n-    case IX86_BUILTIN_FEMMS:\n-      emit_insn (gen_mmx_femms ());\n-      return NULL_RTX;\n-\n-    case IX86_BUILTIN_SQRTSD:\n-      return ix86_expand_unop1_builtin (CODE_FOR_sse2_vmsqrtv2df2, exp, target);\n-    case IX86_BUILTIN_LOADUPD:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse2_movupd, exp, target, 1);\n-    case IX86_BUILTIN_STOREUPD:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_movupd, exp);\n-\n-    case IX86_BUILTIN_MFENCE:\n-\temit_insn (gen_sse2_mfence ());\n-\treturn 0;\n-    case IX86_BUILTIN_LFENCE:\n-\temit_insn (gen_sse2_lfence ());\n-\treturn 0;\n-\n     case IX86_BUILTIN_CLFLUSH:\n \targ0 = CALL_EXPR_ARG (exp, 0);\n \top0 = expand_normal (arg0);\n@@ -21287,18 +21380,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n \n-    case IX86_BUILTIN_MOVNTPD:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_movntv2df, exp);\n-    case IX86_BUILTIN_MOVNTDQ:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_movntv2di, exp);\n-    case IX86_BUILTIN_MOVNTI:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_movntsi, exp);\n-\n-    case IX86_BUILTIN_LOADDQU:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse2_movdqu, exp, target, 1);\n-    case IX86_BUILTIN_STOREDQU:\n-      return ix86_expand_store_builtin (CODE_FOR_sse2_movdqu, exp);\n-\n     case IX86_BUILTIN_MONITOR:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -21330,20 +21411,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (gen_sse3_mwait (op0, op1));\n       return 0;\n \n-    case IX86_BUILTIN_LDDQU:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse3_lddqu, exp,\n-\t\t\t\t       target, 1);\n-\n-    case IX86_BUILTIN_MOVNTDQA:\n-      return ix86_expand_unop_builtin (CODE_FOR_sse4_1_movntdqa, exp,\n-\t\t\t\t       target, 1);\n-\n-    case IX86_BUILTIN_MOVNTSD:\n-      return ix86_expand_store_builtin (CODE_FOR_sse4a_vmmovntv2df, exp);\n-\n-    case IX86_BUILTIN_MOVNTSS:\n-      return ix86_expand_store_builtin (CODE_FOR_sse4a_vmmovntv4sf, exp);\n-\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:\n@@ -21388,6 +21455,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       break;\n     }\n \n+  for (i = 0, d = bdesc_special_args;\n+       i < ARRAY_SIZE (bdesc_special_args);\n+       i++, d++)\n+    if (d->code == fcode)\n+      return ix86_expand_special_args_builtin (d, exp, target);\n+\n   for (i = 0, d = bdesc_args;\n        i < ARRAY_SIZE (bdesc_args);\n        i++, d++)"}, {"sha": "96056e28e3190c94f472d3b17d250a82a58ce9ef", "filename": "gcc/config/i386/mm3dnow.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fmm3dnow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmm3dnow.h?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -34,9 +34,6 @@\n \n #include <mmintrin.h>\n \n-/* Internal data types for implementing the intrinsics.  */\n-typedef float __v2sf __attribute__ ((__vector_size__ (8)));\n-\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_femms (void)\n {"}, {"sha": "3c135e61766d1fdfe01b57e943e3bb12782ec733", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -43,6 +43,7 @@ typedef int __v2si __attribute__ ((__vector_size__ (8)));\n typedef short __v4hi __attribute__ ((__vector_size__ (8)));\n typedef char __v8qi __attribute__ ((__vector_size__ (8)));\n typedef long long __v1di __attribute__ ((__vector_size__ (8)));\n+typedef float __v2sf __attribute__ ((__vector_size__ (8)));\n \n /* Empty the multimedia state.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "8d9b761bcaf5334b9f511eb2288a49a0c67bb71f", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -745,14 +745,14 @@ _mm_unpacklo_ps (__m128 __A, __m128 __B)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadh_pi (__m128 __A, __m64 const *__P)\n {\n-  return (__m128) __builtin_ia32_loadhps ((__v4sf)__A, (__v2si *)__P);\n+  return (__m128) __builtin_ia32_loadhps ((__v4sf)__A, (const __v2sf *)__P);\n }\n \n /* Stores the upper two SPFP values of A into P.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeh_pi (__m64 *__P, __m128 __A)\n {\n-  __builtin_ia32_storehps ((__v2si *)__P, (__v4sf)__A);\n+  __builtin_ia32_storehps ((__v2sf *)__P, (__v4sf)__A);\n }\n \n /* Moves the upper two values of B into the lower two values of A.  */\n@@ -774,14 +774,14 @@ _mm_movelh_ps (__m128 __A, __m128 __B)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadl_pi (__m128 __A, __m64 const *__P)\n {\n-  return (__m128) __builtin_ia32_loadlps ((__v4sf)__A, (__v2si *)__P);\n+  return (__m128) __builtin_ia32_loadlps ((__v4sf)__A, (const __v2sf *)__P);\n }\n \n /* Stores the lower two SPFP values of A into P.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storel_pi (__m64 *__P, __m128 __A)\n {\n-  __builtin_ia32_storelps ((__v2si *)__P, (__v4sf)__A);\n+  __builtin_ia32_storelps ((__v2sf *)__P, (__v4sf)__A);\n }\n \n /* Creates a 4-bit mask from the most significant bits of the SPFP values.  */"}, {"sha": "f3c6c574a42a3e8b6fdb5177f3b2472592c97dbd", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -7647,13 +7647,13 @@ Generates the @code{movups} machine instruction as a store to memory.\n Generates the @code{movss} machine instruction as a load from memory.\n @item void __builtin_ia32_storess (float *, v4sf)\n Generates the @code{movss} machine instruction as a store to memory.\n-@item v4sf __builtin_ia32_loadhps (v4sf, v2si *)\n+@item v4sf __builtin_ia32_loadhps (v4sf, const v2sf *)\n Generates the @code{movhps} machine instruction as a load from memory.\n-@item v4sf __builtin_ia32_loadlps (v4sf, v2si *)\n+@item v4sf __builtin_ia32_loadlps (v4sf, const v2sf *)\n Generates the @code{movlps} machine instruction as a load from memory\n-@item void __builtin_ia32_storehps (v4sf, v2si *)\n+@item void __builtin_ia32_storehps (v2sf *, v4sf)\n Generates the @code{movhps} machine instruction as a store to memory.\n-@item void __builtin_ia32_storelps (v4sf, v2si *)\n+@item void __builtin_ia32_storelps (v2sf *, v4sf)\n Generates the @code{movlps} machine instruction as a store to memory.\n @end table\n \n@@ -7755,8 +7755,8 @@ v8hi __builtin_ia32_pmulhuw128 (v8hi, v8hi)\n void __builtin_ia32_maskmovdqu (v16qi, v16qi)\n v2df __builtin_ia32_loadupd (double *)\n void __builtin_ia32_storeupd (double *, v2df)\n-v2df __builtin_ia32_loadhpd (v2df, double *)\n-v2df __builtin_ia32_loadlpd (v2df, double *)\n+v2df __builtin_ia32_loadhpd (v2df, double const *)\n+v2df __builtin_ia32_loadlpd (v2df, double const *)\n int __builtin_ia32_movmskpd (v2df)\n int __builtin_ia32_pmovmskb128 (v16qi)\n void __builtin_ia32_movnti (int *, int)"}]}