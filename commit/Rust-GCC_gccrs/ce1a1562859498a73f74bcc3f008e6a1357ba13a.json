{"sha": "ce1a1562859498a73f74bcc3f008e6a1357ba13a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxYTE1NjI4NTk0OThhNzNmNzRiY2MzZjAwOGU2YTEzNTdiYTEzYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-16T16:30:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-16T16:30:35Z"}, "message": "compiler: don't remove floating point conversion of typed constant\n\nFrom-SVN: r193565", "tree": {"sha": "192a7c4a81fe514460415c427977d664b165da0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192a7c4a81fe514460415c427977d664b165da0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce1a1562859498a73f74bcc3f008e6a1357ba13a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1a1562859498a73f74bcc3f008e6a1357ba13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1a1562859498a73f74bcc3f008e6a1357ba13a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1a1562859498a73f74bcc3f008e6a1357ba13a/comments", "author": null, "committer": null, "parents": [{"sha": "d761f9e62fb5d44123878f66e61ee2e9e4b6ae88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d761f9e62fb5d44123878f66e61ee2e9e4b6ae88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d761f9e62fb5d44123878f66e61ee2e9e4b6ae88"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "9d3b8f56655f722869dae1017b35dd04ef5fbf9d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1a1562859498a73f74bcc3f008e6a1357ba13a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1a1562859498a73f74bcc3f008e6a1357ba13a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=ce1a1562859498a73f74bcc3f008e6a1357ba13a", "patch": "@@ -2962,6 +2962,46 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n \t{\n \t  if (!nc.set_type(type, true, location))\n \t    return Expression::make_error(location);\n+\n+\t  // Don't simply convert to or from a float or complex type\n+\t  // with a different size.  That may change the value.\n+\t  Type* vtype = val->type();\n+\t  if (vtype->is_abstract())\n+\t    ;\n+\t  else if (type->float_type() != NULL)\n+\t    {\n+\t      if (vtype->float_type() != NULL)\n+\t\t{\n+\t\t  if (type->float_type()->bits() != vtype->float_type()->bits())\n+\t\t    return this;\n+\t\t}\n+\t      else if (vtype->complex_type() != NULL)\n+\t\t{\n+\t\t  if (type->float_type()->bits() * 2\n+\t\t      != vtype->complex_type()->bits())\n+\t\t    return this;\n+\t\t}\n+\t    }\n+\t  else if (type->complex_type() != NULL)\n+\t    {\n+\t      if (vtype->complex_type() != NULL)\n+\t\t{\n+\t\t  if (type->complex_type()->bits()\n+\t\t      != vtype->complex_type()->bits())\n+\t\t    return this;\n+\t\t}\n+\t      else if (vtype->float_type() != NULL)\n+\t\t{\n+\t\t  if (type->complex_type()->bits()\n+\t\t      != vtype->float_type()->bits() * 2)\n+\t\t    return this;\n+\t\t}\n+\t    }\n+\t  else if (vtype->float_type() != NULL)\n+\t    return this;\n+\t  else if (vtype->complex_type() != NULL)\n+\t    return this;\n+\n \t  return nc.expression(location);\n \t}\n     }"}]}