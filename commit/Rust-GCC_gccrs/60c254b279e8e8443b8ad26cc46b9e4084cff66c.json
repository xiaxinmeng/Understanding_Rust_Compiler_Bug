{"sha": "60c254b279e8e8443b8ad26cc46b9e4084cff66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjMjU0YjI3OWU4ZTg0NDNiOGFkMjZjYzQ2YjllNDA4NGNmZjY2Yw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-29T18:43:01Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-29T19:43:50Z"}, "message": "testsuite: Handle more kinds of gdc.test test flags and directives.\n\nThis patch adds cases for JSON and D header file generation flags in the\ntestsuite, and sets up the test accordingly to only compile, then check\nthat the expected output file exists.\n\nSupport has also been added for the DFLAGS test directive, which\ndisables testing with all default flag permutations.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/gdc-utils.exp: (gdc-convert-args): Handle compilation test\n\targuments -D, -H, -X, and set compilable_output_file_ext.\n\t(gdc-convert-test): Document and add cases DFLAGS and\n\tEXTRA_CPP_SOURCES.  Add dg-final entry for output generation tests,\n\tand set compilable_do_what to compile.\n\t(gdc-do-test): Define compilable_do_what, default to assemble.", "tree": {"sha": "5df8f7071ff19e4b8318e4332967ef539ce5e258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5df8f7071ff19e4b8318e4332967ef539ce5e258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c254b279e8e8443b8ad26cc46b9e4084cff66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c254b279e8e8443b8ad26cc46b9e4084cff66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c254b279e8e8443b8ad26cc46b9e4084cff66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c254b279e8e8443b8ad26cc46b9e4084cff66c/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd9da8b8ad01268478fca6db3f63ca4c51b1900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd9da8b8ad01268478fca6db3f63ca4c51b1900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd9da8b8ad01268478fca6db3f63ca4c51b1900"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "2384d0beb694fd9338255d3920f5f9725fdfd039", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c254b279e8e8443b8ad26cc46b9e4084cff66c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c254b279e8e8443b8ad26cc46b9e4084cff66c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60c254b279e8e8443b8ad26cc46b9e4084cff66c", "patch": "@@ -1,3 +1,12 @@\n+2020-03-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* lib/gdc-utils.exp: (gdc-convert-args): Handle compilation test\n+\targuments -D, -H, -X, and set compilable_output_file_ext.\n+\t(gdc-convert-test): Document and add cases DFLAGS and\n+\tEXTRA_CPP_SOURCES.  Add dg-final entry for output generation tests,\n+\tand set compilable_do_what to compile.\n+\t(gdc-do-test): Define compilable_do_what, default to assemble.\n+\n 2020-03-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.test/runnable_cxx/runnable_cxx.exp: New file."}, {"sha": "31a4cf0b5e2494c982f5c1e141df9e9bd493bc61", "filename": "gcc/testsuite/lib/gdc-utils.exp", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c254b279e8e8443b8ad26cc46b9e4084cff66c/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c254b279e8e8443b8ad26cc46b9e4084cff66c/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp?ref=60c254b279e8e8443b8ad26cc46b9e4084cff66c", "patch": "@@ -26,14 +26,26 @@ proc gdc-convert-args { args } {\n     foreach arg [split [lindex $args 0] \" \"] {\n \t# List of switches kept in ASCII collated order.\n \tif [string match \"-D\" $arg] {\n+\t    upvar 1 compilable_output_file_ext compilable_output_file_ext\n+\t    set compilable_output_file_ext \"html\"\n \t    lappend out \"-fdoc\"\n \n+\t} elseif [string match \"-H\" $arg] {\n+\t    upvar 1 compilable_output_file_ext compilable_output_file_ext\n+\t    set compilable_output_file_ext \"di\"\n+\t    lappend out \"-H\"\n+\n \t} elseif { [regexp -- {^-I([\\w+/-]+)} $arg pattern path] } {\n \t    lappend out \"-I$path\"\n \n \t} elseif { [regexp -- {^-J([\\w+/-]+)} $arg pattern path] } {\n \t    lappend out \"-J$path\"\n \n+\t} elseif [string match \"-X\" $arg] {\n+\t    upvar 1 compilable_output_file_ext compilable_output_file_ext\n+\t    set compilable_output_file_ext \"json\"\n+\t    lappend out \"-X\"\n+\n \t} elseif [string match \"-allinst\" $arg] {\n \t    lappend out \"-fall-instantiations\"\n \n@@ -169,8 +181,13 @@ proc gdc-copy-extra { base extra } {\n #   COMPILED_IMPORTS:\tList of modules files that are imported by the main\n #\t\t\tsource file that should be included in compilation.\n #\t\t\tCurrently handled the same as EXTRA_SOURCES.\n+#   DFLAGS:\t\tOverrides the DFLAGS environment variable if specified\n+#\t\t\tin the test.  No values are permitted; an error will be\n+#\t\t\temitted if the value is not empty.\n #   EXTRA_SOURCES:\tList of extra sources to build and link along with\n #\t\t\tthe test.\n+#   EXTRA_CPP_SOURCES:\tList of extra C++ files to build and link along with\n+#\t\t\tthe test.\n #   EXTRA_FILES:\tList of extra files to copy for the test runs.\n #   PERMUTE_ARGS:\tThe set of arguments to permute in multiple compiler\n #\t\t\tinvocations.  An empty set means only one permutation\n@@ -192,6 +209,9 @@ proc gdc-convert-test { base test } {\n     set extra_sources \"\"\n     set extra_files \"\"\n \n+    upvar 1 compilable_do_what compilable_do_what\n+    set compilable_output_file_ext \"\"\n+\n     # Split base, folder/file.\n     set type [file dirname $test]\n     set name [file tail $test]\n@@ -220,6 +240,16 @@ proc gdc-convert-test { base test } {\n \t    # POST_SCRIPT is not handled\n \t    regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n \n+\t} elseif [regexp -- {DFLAGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # DFLAGS overrides the default value of PERMUTE_ARGS.\n+\t    if { $args != \"\" } {\n+\t\terror \"gdc-convert-test: DFLAGS is not empty as expected\"\n+\t    }\n+\t    if { $PERMUTE_ARGS == $DEFAULT_DFLAGS } {\n+\t\tset PERMUTE_ARGS \"\"\n+\t    }\n+\t    regsub -- {DFLAGS.*$} $copy_line \"\" out_line\n+\n \t} elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # PERMUTE_ARGS is handled by gdc-do-test.\n \t    set PERMUTE_ARGS [gdc-convert-args $args]\n@@ -277,54 +307,52 @@ proc gdc-convert-test { base test } {\n \tforeach srcfile $extra_sources {\n \t    gdc-copy-extra $base \"$type/$srcfile\"\n \t}\n-\tset out_line \"// { dg-additional-sources \\\"$extra_sources\\\" }\"\n-\tputs $fdout $out_line\n+\tputs $fdout \"// { dg-additional-sources \\\"$extra_sources\\\" }\"\n     }\n \n     if { [llength $extra_files] > 0 } {\n \tforeach file $extra_files {\n \t    gdc-copy-extra $base \"$type/$file\"\n \t}\n-\tset out_line \"// { dg-additional-files \\\"$extra_files\\\" }\"\n-\tputs $fdout $out_line\n+\tputs $fdout \"// { dg-additional-files \\\"$extra_files\\\" }\"\n     }\n \n     # Add specific options for test type\n \n     # DMD's testsuite is extremely verbose, compiler messages from constructs\n     # such as pragma(msg, ...) would otherwise cause tests to fail.\n-    set out_line \"// { dg-prune-output .* }\"\n-    puts $fdout $out_line\n+    puts $fdout \"// { dg-prune-output .* }\"\n \n     # Compilable files are successful if an output is generated.\n     # Fail compilable are successful if an output is not generated.\n     # Runnable must compile, link, and return 0 to be successful by default.\n     switch $type {\n \trunnable {\n \t    if ![isnative] {\n-\t\tset out_line \"// { dg-final { output-exists } }\"\n-\t\tputs $fdout $out_line\n+\t\tputs $fdout \"// { dg-final { output-exists } }\"\n \t    }\n \t}\n \n \tcompilable {\n-\t    set out_line \"// { dg-final { output-exists } }\"\n-\t    puts $fdout $out_line\n-\n-\t    # Check that Ddoc tests also generate a html file.\n-\t    if [regexp -- \"ddoc.*\" $name] {\n-\t\tset ddocfile \"[file rootname $name].html\"\n-\t\tset out_line \"// { dg-final { scan-file $ddocfile \\\"Generated by Ddoc from $test\\\" } }\"\n-\t\tputs $fdout $out_line\n+\t    puts $fdout \"// { dg-final { output-exists } }\"\n+\n+\t    # Compilable test may require checking another kind of output file.\n+\t    if { $compilable_output_file_ext != \"\" } {\n+\t\tset compilable_do_what \"compile\"\n+\t\t# Check that file generation tests output the expected file.\n+\t\tset genfile \"[file rootname $name].$compilable_output_file_ext\"\n+\t\tputs $fdout \"// { dg-final { if \\[file exists $genfile\\] \\\\{           } }\"\n+\t\tputs $fdout \"// { dg-final {     pass \\\"$test (file exists $genfile)\\\" } }\"\n+\t\tputs $fdout \"// { dg-final { \\\\} else \\\\{                              } }\"\n+\t\tputs $fdout \"// { dg-final {     fail \\\"$test (file exists $genfile)\\\" } }\"\n+\t\tputs $fdout \"// { dg-final { \\\\}                                       } }\"\n \t\t# Cleanup extra generated files.\n-\t\tset out_line \"// { dg-final { file delete $ddocfile } }\"\n-\t\tputs $fdout $out_line\n+\t\tputs $fdout \"// { dg-final { file delete $genfile } }\"\n \t    }\n \t}\n \n \tfail_compilation {\n-\t    set out_line \"// { dg-final { output-exists-not } }\"\n-\t    puts $fdout $out_line\n+\t    puts $fdout \"// { dg-final { output-exists-not } }\"\n \t}\n     }\n \n@@ -395,6 +423,7 @@ proc gdc-do-test { testcases } {\n \t# Convert to DG test.\n \tset imports [format \"-I%s/%s\" $base $dir]\n \tset cleanup_extra_files \"\"\n+ \tset compilable_do_what \"assemble\"\n \tset filename \"[gdc-convert-test $base $dir/$name.$ext]\"\n \n \tif { $dir == \"runnable\" } {\n@@ -420,12 +449,7 @@ proc gdc-do-test { testcases } {\n \t    compilable {\n \t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n \t\t    set flags [lindex $options $i]\n-\t\t    # Compilable test may require checking another kind of output file.\n-\t\t    if [regexp -- \"ddoc.*\" $name] {\n-\t\t\tset dg-do-what-default \"compile\"\n-\t\t    } else {\n-\t\t\tset dg-do-what-default \"assemble\"\n-\t\t    }\n+\t\t    set dg-do-what-default $compilable_do_what\n \t\t    gdc-dg-runtest $filename $flags $imports\n \t\t}\n \t    }"}]}