{"sha": "3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxNTUxOGJjNGM3MGI1NDFiNjY3ZTlmNmJmM2RmYjgwMDUzYjVhZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-16T12:54:54Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-06-16T12:54:54Z"}, "message": "re PR fortran/44549 ([OOP][F2008] Type-bound procedure: bogus error from list after PROCEDURE)\n\n2010-06-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44549\n\t* gfortran.h (gfc_get_typebound_proc): Modified Prototype.\n\t* decl.c (match_procedure_in_type): Give a unique gfc_typebound_proc\n\tstructure to each procedure in a procedure list.\n\t* module.c (mio_typebound_proc): Add NULL argument to\n\t'gfc_get_typebound_proc'.\n\t* symbol.c (gfc_get_typebound_proc): Add a new argument, which is used\n\tto initialize the new structure.\n\n\n2010-06-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44549\n\t* gfortran.dg/typebound_proc_16.f03: New.\n\nFrom-SVN: r160834", "tree": {"sha": "e59b7cfa05176efde69a8f830c9e84a169966a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59b7cfa05176efde69a8f830c9e84a169966a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe27aa8bc46f9ce5324d19e1102901639274c578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe27aa8bc46f9ce5324d19e1102901639274c578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe27aa8bc46f9ce5324d19e1102901639274c578"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "a3b35270ba495d62369e06032a32d90f952dab0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -1,3 +1,14 @@\n+2010-06-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44549\n+\t* gfortran.h (gfc_get_typebound_proc): Modified Prototype.\n+\t* decl.c (match_procedure_in_type): Give a unique gfc_typebound_proc\n+\tstructure to each procedure in a procedure list.\n+\t* module.c (mio_typebound_proc): Add NULL argument to\n+\t'gfc_get_typebound_proc'.\n+\t* symbol.c (gfc_get_typebound_proc): Add a new argument, which is used\n+\tto initialize the new structure.\n+\n 2010-06-15  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/43388"}, {"sha": "c9b46a2c0d3b9dff32697415d7ffecda5af7d1fc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -7543,7 +7543,7 @@ match_procedure_in_type (void)\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   char target_buf[GFC_MAX_SYMBOL_LEN + 1];\n   char* target = NULL, *ifc = NULL;\n-  gfc_typebound_proc* tb;\n+  gfc_typebound_proc tb;\n   bool seen_colons;\n   bool seen_attrs;\n   match m;\n@@ -7579,23 +7579,22 @@ match_procedure_in_type (void)\n     }\n \n   /* Construct the data structure.  */\n-  tb = gfc_get_typebound_proc ();\n-  tb->where = gfc_current_locus;\n-  tb->is_generic = 0;\n+  tb.where = gfc_current_locus;\n+  tb.is_generic = 0;\n \n   /* Match binding attributes.  */\n-  m = match_binding_attributes (tb, false, false);\n+  m = match_binding_attributes (&tb, false, false);\n   if (m == MATCH_ERROR)\n     return m;\n   seen_attrs = (m == MATCH_YES);\n \n   /* Check that attribute DEFERRED is given if an interface is specified.  */\n-  if (tb->deferred && !ifc)\n+  if (tb.deferred && !ifc)\n     {\n       gfc_error (\"Interface must be specified for DEFERRED binding at %C\");\n       return MATCH_ERROR;\n     }\n-  if (ifc && !tb->deferred)\n+  if (ifc && !tb.deferred)\n     {\n       gfc_error (\"PROCEDURE(interface) at %C should be declared DEFERRED\");\n       return MATCH_ERROR;\n@@ -7635,7 +7634,7 @@ match_procedure_in_type (void)\n \treturn m;\n       if (m == MATCH_YES)\n \t{\n-\t  if (tb->deferred)\n+\t  if (tb.deferred)\n \t    {\n \t      gfc_error (\"'=> target' is invalid for DEFERRED binding at %C\");\n \t      return MATCH_ERROR;\n@@ -7668,7 +7667,7 @@ match_procedure_in_type (void)\n       gcc_assert (ns);\n \n       /* If the binding is DEFERRED, check that the containing type is ABSTRACT.  */\n-      if (tb->deferred && !block->attr.abstract)\n+      if (tb.deferred && !block->attr.abstract)\n \t{\n \t  gfc_error (\"Type '%s' containing DEFERRED binding at %C \"\n \t\t     \"is not ABSTRACT\", block->name);\n@@ -7693,11 +7692,12 @@ match_procedure_in_type (void)\n \t  stree = gfc_new_symtree (&ns->tb_sym_root, name);\n \t  gcc_assert (stree);\n \t}\n-      stree->n.tb = tb;\n+      stree->n.tb = gfc_get_typebound_proc (&tb);\n \n-      if (gfc_get_sym_tree (target, gfc_current_ns, &tb->u.specific, false))\n+      if (gfc_get_sym_tree (target, gfc_current_ns, &stree->n.tb->u.specific,\n+\t\t\t    false))\n \treturn MATCH_ERROR;\n-      gfc_set_sym_referenced (tb->u.specific->n.sym);\n+      gfc_set_sym_referenced (stree->n.tb->u.specific->n.sym);\n   \n       if (gfc_match_eos () == MATCH_YES)\n \treturn MATCH_YES;\n@@ -7841,7 +7841,7 @@ gfc_match_generic (void)\n     }\n   else\n     {\n-      tb = gfc_get_typebound_proc ();\n+      tb = gfc_get_typebound_proc (NULL);\n       tb->where = gfc_current_locus;\n       tb->access = tbattr.access;\n       tb->is_generic = 1;"}, {"sha": "d77a6c5fdb97550536296422434362270c1ec924", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -2545,7 +2545,7 @@ void gfc_free_dt_list (void);\n gfc_gsymbol *gfc_get_gsymbol (const char *);\n gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n \n-gfc_typebound_proc* gfc_get_typebound_proc (void);\n+gfc_typebound_proc* gfc_get_typebound_proc (gfc_typebound_proc*);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n gfc_symbol* gfc_get_ultimate_derived_super_type (gfc_symbol*);\n bool gfc_type_is_extension_of (gfc_symbol *, gfc_symbol *);"}, {"sha": "335fd275301992c9baadfa2337addc26416ce55a", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -3324,7 +3324,7 @@ mio_typebound_proc (gfc_typebound_proc** proc)\n \n   if (iomode == IO_INPUT)\n     {\n-      *proc = gfc_get_typebound_proc ();\n+      *proc = gfc_get_typebound_proc (NULL);\n       (*proc)->where = gfc_current_locus;\n     }\n   gcc_assert (*proc);"}, {"sha": "11a039576a1a858dcaee8e523182cb9e10977ea9", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -4591,12 +4591,14 @@ gfc_check_symbol_typed (gfc_symbol* sym, gfc_namespace* ns,\n    list and marked `error' until symbols are committed.  */\n \n gfc_typebound_proc*\n-gfc_get_typebound_proc (void)\n+gfc_get_typebound_proc (gfc_typebound_proc *tb0)\n {\n   gfc_typebound_proc *result;\n   tentative_tbp *list_node;\n \n   result = XCNEW (gfc_typebound_proc);\n+  if (tb0)\n+    *result = *tb0;\n   result->error = 1;\n \n   list_node = XCNEW (tentative_tbp);"}, {"sha": "931f91d594cb954f8cd2846c3b7763b2020a4c2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -1,3 +1,8 @@\n+2010-06-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44549\n+\t* gfortran.dg/typebound_proc_16.f03: New.\n+\n 2010-06-16  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/torture/pr43905.C: New test."}, {"sha": "828f51022040d4385da59e181285f4b116506566", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_16.f03", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e15518bc4c70b541b667e9f6bf3dfb80053b5ae/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_16.f03?ref=3e15518bc4c70b541b667e9f6bf3dfb80053b5ae", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do compile }\n+!\n+! PR 44549: [OOP][F2008] Type-bound procedure: bogus error from list after PROCEDURE\n+!\n+! Contributed by Dominique d'Humieres <dominiq@lps.ens.fr>\n+\n+MODULE rational_numbers\n+  IMPLICIT NONE\n+  PRIVATE\n+  TYPE,PUBLIC :: rational\n+    PRIVATE\n+    INTEGER n,d\n+\n+    CONTAINS\n+    ! ordinary type-bound procedure\n+    PROCEDURE :: real => rat_to_real\n+    ! specific type-bound procedures for generic support\n+    PROCEDURE,PRIVATE :: rat_asgn_i, rat_plus_rat, rat_plus_i\n+    PROCEDURE,PRIVATE,PASS(b) :: i_plus_rat\n+    ! generic type-bound procedures\n+    GENERIC :: ASSIGNMENT(=) => rat_asgn_i\n+    GENERIC :: OPERATOR(+) => rat_plus_rat, rat_plus_i, i_plus_rat\n+  END TYPE\n+  CONTAINS\n+    ELEMENTAL REAL FUNCTION rat_to_real(this) RESULT(r)\n+      CLASS(rational),INTENT(IN) :: this\n+      r = REAL(this%n)/this%d\n+    END FUNCTION\n+\n+    ELEMENTAL SUBROUTINE rat_asgn_i(a,b)\n+      CLASS(rational),INTENT(OUT) :: a\n+      INTEGER,INTENT(IN) :: b\n+      a%n = b\n+      a%d = 1\n+    END SUBROUTINE\n+\n+    ELEMENTAL TYPE(rational) FUNCTION rat_plus_i(a,b) RESULT(r)\n+      CLASS(rational),INTENT(IN) :: a\n+      INTEGER,INTENT(IN) :: b\n+      r%n = a%n + b*a%d\n+      r%d = a%d\n+    END FUNCTION\n+\n+    ELEMENTAL TYPE(rational) FUNCTION i_plus_rat(a,b) RESULT(r)\n+      INTEGER,INTENT(IN) :: a\n+      CLASS(rational),INTENT(IN) :: b\n+      r%n = b%n + a*b%d\n+      r%d = b%d\n+    END FUNCTION\n+\n+    ELEMENTAL TYPE(rational) FUNCTION rat_plus_rat(a,b) RESULT(r)\n+      CLASS(rational),INTENT(IN) :: a,b\n+      r%n = a%n*b%d + b%n*a%d\n+      r%d = a%d*b%d\n+    END FUNCTION\n+END\n+\n+! { dg-final { cleanup-modules \"rational_numbers\" } } "}]}