{"sha": "590d172b1cf7d3359ec161bc441601bd93170398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwZDE3MmIxY2Y3ZDMzNTllYzE2MWJjNDQxNjAxYmQ5MzE3MDM5OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T14:07:10Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T14:07:10Z"}, "message": "vtst.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vtst.c: New file.\n\nFrom-SVN: r224669", "tree": {"sha": "1fe42df7c5aea66190eeb7c7f02715f80f8f7ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe42df7c5aea66190eeb7c7f02715f80f8f7ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/590d172b1cf7d3359ec161bc441601bd93170398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590d172b1cf7d3359ec161bc441601bd93170398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590d172b1cf7d3359ec161bc441601bd93170398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590d172b1cf7d3359ec161bc441601bd93170398/comments", "author": null, "committer": null, "parents": [{"sha": "5d2719ab5d3a36430dda3d7b29d36860d69c4d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2719ab5d3a36430dda3d7b29d36860d69c4d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2719ab5d3a36430dda3d7b29d36860d69c4d1d"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "7d77478c05140cea970133ede6c6f3176239e169", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590d172b1cf7d3359ec161bc441601bd93170398/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590d172b1cf7d3359ec161bc441601bd93170398/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=590d172b1cf7d3359ec161bc441601bd93170398", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vtst.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vtbX.c: New file."}, {"sha": "7f965407d670208631571d4c5c60a6ce43f8ccb9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vtst.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590d172b1cf7d3359ec161bc441601bd93170398/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590d172b1cf7d3359ec161bc441601bd93170398/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c?ref=590d172b1cf7d3359ec161bc441601bd93170398", "patch": "@@ -0,0 +1,120 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with signed input.  */\n+VECT_VAR_DECL(expected_signed,uint,8,8) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t       0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_signed,uint,16,4) [] = { 0x0, 0xffff, 0x0, 0xffff };\n+VECT_VAR_DECL(expected_signed,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_signed,uint,8,16) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_signed,uint,16,8) [] = { 0x0, 0xffff, 0x0, 0xffff,\n+\t\t\t\t\t\t0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_signed,uint,32,4) [] = { 0x0, 0xffffffff,\n+\t\t\t\t\t\t0x0, 0xffffffff };\n+\n+/* Expected results with unsigned input.  */\n+VECT_VAR_DECL(expected_unsigned,uint,8,8) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_unsigned,uint,16,4) [] = { 0x0, 0xffff, 0x0, 0xffff };\n+VECT_VAR_DECL(expected_unsigned,uint,32,2) [] = { 0x0, 0xffffffff };\n+VECT_VAR_DECL(expected_unsigned,uint,8,16) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_unsigned,uint,16,8) [] = { 0x0, 0xffff,\n+\t\t\t\t\t\t  0x0, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(expected_unsigned,uint,32,4) [] = { 0x0, 0xffffffff,\n+\t\t\t\t\t\t  0x0, 0xffffffff };\n+\n+#ifndef INSN_NAME\n+#define INSN_NAME vtst\n+#define TEST_MSG \"VTST/VTSTQ\"\n+#endif\n+\n+/* We can't use the standard ref_v_binary_op.c template because vtst\n+   has no 64 bits variant, and outputs are always of uint type.  */\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=OP(x,x), then store the result.  */\n+#define TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\t\\\n+  VECT_VAR(vector_res, uint, W, N) =\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\\\n+  vst1##Q##_u##W(VECT_VAR(result, uint, W, N),\t\t\\\n+\t\t VECT_VAR(vector_res, uint, W, N))\n+\n+#define TEST_BINARY_OP(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\\\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_UNSIGNED_VARIANTS(vector_res);\n+\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose init value arbitrarily, will be used as comparison\n+     value.  */\n+  VDUP(vector2, , int, s, 8, 8, 15);\n+  VDUP(vector2, , int, s, 16, 4, 5);\n+  VDUP(vector2, , int, s, 32, 2, 1);\n+  VDUP(vector2, , uint, u, 8, 8, 15);\n+  VDUP(vector2, , uint, u, 16, 4, 5);\n+  VDUP(vector2, , uint, u, 32, 2, 1);\n+  VDUP(vector2, q, int, s, 8, 16, 15);\n+  VDUP(vector2, q, int, s, 16, 8, 5);\n+  VDUP(vector2, q, int, s, 32, 4, 1);\n+  VDUP(vector2, q, uint, u, 8, 16, 15);\n+  VDUP(vector2, q, uint, u, 16, 8, 5);\n+  VDUP(vector2, q, uint, u, 32, 4, 1);\n+\n+#define TEST_MACRO_NO64BIT_VARIANT_1_5(MACRO, VAR, T1, T2)\t\\\n+  MACRO(VAR, , T1, T2, 8, 8);\t\t\t\t\t\\\n+  MACRO(VAR, , T1, T2, 16, 4);\t\t\t\t\t\\\n+  MACRO(VAR, , T1, T2, 32, 2);\t\t\t\t\t\\\n+  MACRO(VAR, q, T1, T2, 8, 16);\t\t\t\t\t\\\n+  MACRO(VAR, q, T1, T2, 16, 8);\t\t\t\t\t\\\n+  MACRO(VAR, q, T1, T2, 32, 4)\n+\n+  /* Split the test, as both signed and unsigned variants output their\n+     result in an unsigned form (thus the same output variable is used\n+     in these tests).  */\n+  TEST_MACRO_NO64BIT_VARIANT_1_5(TEST_BINARY_OP, INSN_NAME, int, s);\n+\n+#define CMT \" (signed input)\"\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_signed, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_signed, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_signed, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_signed, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_signed, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_signed, CMT);\n+\n+  TEST_MACRO_NO64BIT_VARIANT_1_5(TEST_BINARY_OP, INSN_NAME, uint, u);\n+\n+#undef CMT\n+#define CMT \" (unsigned input)\"\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_unsigned, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_unsigned, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_unsigned, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_unsigned, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_unsigned, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_unsigned, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vtst ();\n+  return 0;\n+}"}]}