{"sha": "1a7a35c70b5375e5067194d7430e49007f04e243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3YTM1YzcwYjUzNzVlNTA2NzE5NGQ3NDMwZTQ5MDA3ZjA0ZTI0Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-11-14T13:44:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-11-14T13:44:34Z"}, "message": "arm, aarch64: Add support for __GCC_ASM_FLAG_OUTPUTS__\n\nSince all but a couple of lines is shared between the two targets,\nenable them both at once.\n\n\t* config/arm/aarch-common-protos.h (arm_md_asm_adjust): Declare.\n\t* config/arm/aarch-common.c (arm_md_asm_adjust): New.\n\t* config/arm/arm-c.c (arm_cpu_builtins): Define\n\t__GCC_ASM_FLAG_OUTPUTS__.\n\t* config/arm/arm.c (TARGET_MD_ASM_ADJUST): New.\n\t* config/aarch64/aarch64-c.c (aarch64_define_unconditional_macros):\n\tDefine __GCC_ASM_FLAG_OUTPUTS__.\n\t* config/aarch64/aarch64.c (TARGET_MD_ASM_ADJUST): New.\n\t* doc/extend.texi (FlagOutputOperands): Add documentation\n\tfor ARM and AArch64.\n\nFrom-SVN: r278226", "tree": {"sha": "334934499375400e71c8d32fb105b5d874874c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334934499375400e71c8d32fb105b5d874874c6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7a35c70b5375e5067194d7430e49007f04e243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7a35c70b5375e5067194d7430e49007f04e243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7a35c70b5375e5067194d7430e49007f04e243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7a35c70b5375e5067194d7430e49007f04e243/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54138d95c6b234ec5857782deca4a0a24ea3dcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54138d95c6b234ec5857782deca4a0a24ea3dcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54138d95c6b234ec5857782deca4a0a24ea3dcfc"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "b4427fa5cd2ecbaf6bded0be17d2ed78b7c51529", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -1,5 +1,16 @@\n 2019-11-14  Richard Henderson  <richard.henderson@linaro.org>\n \n+\t* config/arm/aarch-common-protos.h (arm_md_asm_adjust): Declare.\n+\t* config/arm/aarch-common.c (arm_md_asm_adjust): New.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Define\n+\t__GCC_ASM_FLAG_OUTPUTS__.\n+\t* config/arm/arm.c (TARGET_MD_ASM_ADJUST): New.\n+\t* config/aarch64/aarch64-c.c (aarch64_define_unconditional_macros):\n+\tDefine __GCC_ASM_FLAG_OUTPUTS__.\n+\t* config/aarch64/aarch64.c (TARGET_MD_ASM_ADJUST): New.\n+\t* doc/extend.texi (FlagOutputOperands): Add documentation\n+\tfor ARM and AArch64.\n+\n \t* config/arm/arm-modes.def (CC_NZ): Rename from CC_NOOV.\n \t* config/arm/predicates.md (nz_comparison_operator): Rename\n \tfrom noov_comparison_operator."}, {"sha": "0af859f1c144d8925f188657941f751228398de2", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -69,6 +69,8 @@ aarch64_define_unconditional_macros (cpp_reader *pfile)\n   builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n   builtin_define (\"__ARM_PCS_AAPCS64\");\n   builtin_define_with_int_value (\"__ARM_SIZEOF_WCHAR_T\", WCHAR_TYPE_SIZE / 8);\n+\n+  builtin_define (\"__GCC_ASM_FLAG_OUTPUTS__\");\n }\n \n /* Undefine/redefine macros that depend on the current backend state and may"}, {"sha": "9a5f27fea3a0b2f255c4e2549757be9b271da826", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -21933,6 +21933,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING hook_bool_CUMULATIVE_ARGS_true\n \n+#undef TARGET_MD_ASM_ADJUST\n+#define TARGET_MD_ASM_ADJUST arm_md_asm_adjust\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "f15cf336e9dfbd2fdd742a32e83dfa9c8751f2a0", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -23,6 +23,8 @@\n #ifndef GCC_AARCH_COMMON_PROTOS_H\n #define GCC_AARCH_COMMON_PROTOS_H\n \n+#include \"hard-reg-set.h\"\n+\n extern int aarch_accumulator_forwarding (rtx_insn *, rtx_insn *);\n extern bool aarch_rev16_p (rtx);\n extern bool aarch_rev16_shleft_mask_imm_p (rtx, machine_mode);\n@@ -141,5 +143,9 @@ struct cpu_cost_table\n   const struct vector_cost_table vect;\n };\n \n+rtx_insn *\n+arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n+\t\t    vec<const char *> &constraints,\n+\t\t    vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs);\n \n #endif /* GCC_AARCH_COMMON_PROTOS_H */"}, {"sha": "760ef6c9c0a2f8477dc95e05c7f831f02277bd3c", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -26,10 +26,16 @@\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"insn-modes.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"rtl-iter.h\"\n #include \"memmodel.h\"\n+#include \"diagnostic.h\"\n+#include \"tree.h\"\n+#include \"expr.h\"\n+#include \"function.h\"\n+#include \"emit-rtl.h\"\n \n /* Return TRUE if X is either an arithmetic shift left, or\n    is a multiplication by a power of two.  */\n@@ -520,3 +526,133 @@ arm_mac_accumulator_is_mul_result (rtx producer, rtx consumer)\n           && !reg_overlap_mentioned_p (mul_result, mac_op0)\n           && !reg_overlap_mentioned_p (mul_result, mac_op1));\n }\n+\n+/* Worker function for TARGET_MD_ASM_ADJUST.\n+   We implement asm flag outputs.  */\n+\n+rtx_insn *\n+arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n+\t\t    vec<const char *> &constraints,\n+\t\t    vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n+{\n+  bool saw_asm_flag = false;\n+\n+  start_sequence ();\n+  for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n+    {\n+      const char *con = constraints[i];\n+      if (strncmp (con, \"=@cc\", 4) != 0)\n+\tcontinue;\n+      con += 4;\n+      if (strchr (con, ',') != NULL)\n+\t{\n+\t  error (\"alternatives not allowed in %<asm%> flag output\");\n+\t  continue;\n+\t}\n+\n+      machine_mode mode;\n+      rtx_code code;\n+      int con01 = 0;\n+\n+#define C(X, Y)  (unsigned char)(X) * 256 + (unsigned char)(Y)\n+\n+      /* All of the condition codes are two characters.  */\n+      if (con[0] != 0 && con[1] != 0 && con[2] == 0)\n+\tcon01 = C(con[0], con[1]);\n+\n+      switch (con01)\n+\t{\n+\tcase C('c', 'c'):\n+\tcase C('l', 'o'):\n+\t  mode = CC_Cmode, code = GEU;\n+\t  break;\n+\tcase C('c', 's'):\n+\tcase C('h', 's'):\n+\t  mode = CC_Cmode, code = LTU;\n+\t  break;\n+\tcase C('e', 'q'):\n+\t  mode = CC_NZmode, code = EQ;\n+\t  break;\n+\tcase C('g', 'e'):\n+\t  mode = CCmode, code = GE;\n+\t  break;\n+\tcase C('g', 't'):\n+\t  mode = CCmode, code = GT;\n+\t  break;\n+\tcase C('h', 'i'):\n+\t  mode = CCmode, code = GTU;\n+\t  break;\n+\tcase C('l', 'e'):\n+\t  mode = CCmode, code = LE;\n+\t  break;\n+\tcase C('l', 's'):\n+\t  mode = CCmode, code = LEU;\n+\t  break;\n+\tcase C('l', 't'):\n+\t  mode = CCmode, code = LT;\n+\t  break;\n+\tcase C('m', 'i'):\n+\t  mode = CC_NZmode, code = LT;\n+\t  break;\n+\tcase C('n', 'e'):\n+\t  mode = CC_NZmode, code = NE;\n+\t  break;\n+\tcase C('p', 'l'):\n+\t  mode = CC_NZmode, code = GE;\n+\t  break;\n+\tcase C('v', 'c'):\n+\t  mode = CC_Vmode, code = EQ;\n+\t  break;\n+\tcase C('v', 's'):\n+\t  mode = CC_Vmode, code = NE;\n+\t  break;\n+\tdefault:\n+\t  error (\"unknown %<asm%> flag output %qs\", constraints[i]);\n+\t  continue;\n+\t}\n+\n+#undef C\n+\n+      rtx dest = outputs[i];\n+      machine_mode dest_mode = GET_MODE (dest);\n+      if (!SCALAR_INT_MODE_P (dest_mode))\n+\t{\n+\t  error (\"invalid type for %<asm%> flag output\");\n+\t  continue;\n+\t}\n+\n+      if (!saw_asm_flag)\n+\t{\n+\t  /* This is the first asm flag output.  Here we put the flags\n+\t     register in as the real output and adjust the condition to\n+\t     allow it.  */\n+\t  constraints[i] = \"=c\";\n+\t  outputs[i] = gen_rtx_REG (CCmode, CC_REGNUM);\n+\t  saw_asm_flag = true;\n+\t}\n+      else\n+\t{\n+\t  /* We don't need the flags register as output twice.  */\n+\t  constraints[i] = \"=X\";\n+\t  outputs[i] = gen_rtx_SCRATCH (word_mode);\n+\t}\n+\n+      rtx x = gen_rtx_REG (mode, CC_REGNUM);\n+      x = gen_rtx_fmt_ee (code, word_mode, x, const0_rtx);\n+\n+      if (dest_mode == word_mode)\n+\temit_insn (gen_rtx_SET (dest, x));\n+      else\n+\t{\n+\t  rtx tmp = gen_reg_rtx (word_mode);\n+\t  emit_insn (gen_rtx_SET (tmp, x));\n+\n+\t  tmp = convert_modes (dest_mode, word_mode, tmp, true);\n+\t  emit_move_insn (dest, tmp);\n+\t}\n+    }\n+  rtx_insn *seq = get_insns ();\n+  end_sequence ();\n+\n+  return saw_asm_flag ? seq : NULL;\n+}"}, {"sha": "c4485ce7af15f1fa135a3658677642ed18663968", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -122,6 +122,7 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n   if (arm_arch_notm)\n     builtin_define (\"__ARM_ARCH_ISA_ARM\");\n   builtin_define (\"__APCS_32__\");\n+  builtin_define (\"__GCC_ASM_FLAG_OUTPUTS__\");\n \n   def_or_undef_macro (pfile, \"__thumb__\", TARGET_THUMB);\n   def_or_undef_macro (pfile, \"__thumb2__\", TARGET_THUMB2);"}, {"sha": "fea3882a2a625bfc11a0175ee9bae0437aa70ace", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -816,6 +816,9 @@ static const struct attribute_spec arm_attribute_table[] =\n \n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT arm_constant_alignment\n+\n+#undef TARGET_MD_ASM_ADJUST\n+#define TARGET_MD_ASM_ADJUST arm_md_asm_adjust\n \f\n /* Obstack for minipool constant handling.  */\n static struct obstack minipool_obstack;"}, {"sha": "1c8ae0d5cd316f2af8b3f6458f0703c840efb545", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7a35c70b5375e5067194d7430e49007f04e243/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1a7a35c70b5375e5067194d7430e49007f04e243", "patch": "@@ -9771,6 +9771,45 @@ referenced within the assembler template via @code{%0} etc, as there's\n no corresponding text in the assembly language.\n \n @table @asis\n+@item ARM\n+@itemx AArch64\n+The flag output constraints for the ARM family are of the form\n+@samp{=@@cc@var{cond}} where @var{cond} is one of the standard\n+conditions defined in the ARM ARM for @code{ConditionHolds}.\n+\n+@table @code\n+@item eq\n+Z flag set, or equal\n+@item ne\n+Z flag clear or not equal\n+@item cs\n+@itemx hs\n+C flag set or unsigned greater than equal\n+@item cc\n+@itemx lo\n+C flag clear or unsigned less than\n+@item mi\n+N flag set or ``minus''\n+@item pl\n+N flag clear or ``plus''\n+@item vs\n+V flag set or signed overflow\n+@item vc\n+V flag clear\n+@item hi\n+unsigned greater than\n+@item ls\n+unsigned less than equal\n+@item ge\n+signed greater than equal\n+@item lt\n+signed less than\n+@item gt\n+signed greater than\n+@item le\n+signed less than equal\n+@end table\n+\n @item x86 family\n The flag output constraints for the x86 family are of the form\n @samp{=@@cc@var{cond}} where @var{cond} is one of the standard"}]}