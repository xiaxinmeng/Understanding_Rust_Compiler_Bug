{"sha": "609d9bedc8330c0a167e6def421825d61838041a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5ZDliZWRjODMzMGMwYTE2N2U2ZGVmNDIxODI1ZDYxODM4MDQxYQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-11-22T03:45:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-11-22T03:45:15Z"}, "message": "tree-ssa.c (verify_use): Fix comment.\n\n\n\t* tree-ssa.c (verify_use): Fix comment.\n\t(verify_phi_args): Check that the number of incoming edges matches\n\tthe number of PHI arguments.  Check that each PHI argument is\n\teither an SSA_NAME or an invariant.  Coalesce tests for PHIs for\n\tdead or duplicated edges.  Clear e->aux earlier and avoid separate\n\tloop to clear e->aux and test for missed edges.\n\t(verify_ssa): Remove first walk over statements.  Move checking\n\tof PHI args into verify_phi_args.  Move checking of statements\n\twith aliased stores and V_MAY_DEFS into the remaining loop over\n\tthe statements.  Register defs by walking through the formal\n\tSSA_NAME table.\n\nFrom-SVN: r91000", "tree": {"sha": "6e71185714ba701c1d93582f3849f7a4616cfe24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e71185714ba701c1d93582f3849f7a4616cfe24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/609d9bedc8330c0a167e6def421825d61838041a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609d9bedc8330c0a167e6def421825d61838041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/609d9bedc8330c0a167e6def421825d61838041a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/609d9bedc8330c0a167e6def421825d61838041a/comments", "author": null, "committer": null, "parents": [{"sha": "e8578da6ca34b452b9b2052bb93ed49dcc4388b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8578da6ca34b452b9b2052bb93ed49dcc4388b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8578da6ca34b452b9b2052bb93ed49dcc4388b5"}], "stats": {"total": 132, "additions": 50, "deletions": 82}, "files": [{"sha": "50c11f89e71c821b928a1212de6292815852afde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609d9bedc8330c0a167e6def421825d61838041a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609d9bedc8330c0a167e6def421825d61838041a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=609d9bedc8330c0a167e6def421825d61838041a", "patch": "@@ -1,3 +1,17 @@\n+2004-11-21  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa.c (verify_use): Fix comment.\n+\t(verify_phi_args): Check that the number of incoming edges matches\n+\tthe number of PHI arguments.  Check that each PHI argument is\n+\teither an SSA_NAME or an invariant.  Coalesce tests for PHIs for\n+\tdead or duplicated edges.  Clear e->aux earlier and avoid separate\n+\tloop to clear e->aux and test for missed edges.\n+\t(verify_ssa): Remove first walk over statements.  Move checking\n+\tof PHI args into verify_phi_args.  Move checking of statements\n+\twith aliased stores and V_MAY_DEFS into the remaining loop over\n+\tthe statements.  Register defs by walking through the formal\n+\tSSA_NAME table.\n+\n 2004-11-21  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/18520"}, {"sha": "056775d2e561a8be8af0298f49fc3d9c66ffd552", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 36, "deletions": 82, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/609d9bedc8330c0a167e6def421825d61838041a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/609d9bedc8330c0a167e6def421825d61838041a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=609d9bedc8330c0a167e6def421825d61838041a", "patch": "@@ -288,8 +288,6 @@ verify_use (basic_block bb, basic_block def_bb, tree ssa_name,\n /* Return true if any of the arguments for PHI node PHI at block BB is\n    malformed.\n \n-   IDOM contains immediate dominator information for the flowgraph.\n-\n    DEFINITION_BLOCK is an array of basic blocks indexed by SSA_NAME version\n       numbers.  If DEFINITION_BLOCK[SSA_NAME_VERSION] is set, it means that the\n       block in that array slot contains the definition of SSA_NAME.  */\n@@ -299,9 +297,16 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n {\n   edge e;\n   bool err = false;\n-  int i, phi_num_args = PHI_NUM_ARGS (phi);\n+  unsigned i, phi_num_args = PHI_NUM_ARGS (phi);\n   edge_iterator ei;\n \n+  if (EDGE_COUNT (bb->preds) != phi_num_args)\n+    {\n+      error (\"Incoming edge count does not match number of PHI arguments\\n\");\n+      err = true;\n+      goto error;\n+    }\n+\n   /* Mark all the incoming edges.  */\n   FOR_EACH_EDGE (e, ei, bb->preds)\n     e->aux = (void *) 1;\n@@ -310,6 +315,12 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n     {\n       tree op = PHI_ARG_DEF (phi, i);\n \n+      if (TREE_CODE (op) != SSA_NAME && !is_gimple_min_invariant (op))\n+\t{\n+\t  error (\"PHI argument is not SSA_NAME, or invariant\");\n+\t  err = true;\n+\t}\n+\n       e = PHI_ARG_EDGE (phi, i);\n \n       if (TREE_CODE (op) == SSA_NAME)\n@@ -327,37 +338,18 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n \n       if (e->aux == (void *) 0)\n \t{\n-\t  error (\"PHI argument flowing through dead edge %d->%d\\n\",\n+\t  error (\"PHI argument flowing through dead or duplicated edge %d->%d\\n\",\n \t         e->src->index, e->dest->index);\n \t  err = true;\n \t}\n \n-      if (e->aux == (void *) 2)\n-\t{\n-\t  error (\"PHI argument duplicated for edge %d->%d\\n\", e->src->index,\n-\t         e->dest->index);\n-\t  err = true;\n-\t}\n-\n       if (err)\n \t{\n \t  fprintf (stderr, \"PHI argument\\n\");\n \t  print_generic_stmt (stderr, op, TDF_VOPS);\n \t  goto error;\n \t}\n \n-      e->aux = (void *) 2;\n-    }\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    {\n-      if (e->aux != (void *) 2)\n-\t{\n-\t  error (\"No argument flowing through edge %d->%d\\n\", e->src->index,\n-\t\t e->dest->index);\n-\t  err = true;\n-\t  goto error;\n-\t}\n       e->aux = (void *) 0;\n     }\n \n@@ -599,65 +591,25 @@ verify_ssa (void)\n \n   /* Keep track of SSA names present in the IL.  */\n   for (i = 1; i < num_ssa_names; i++)\n-    if (ssa_name (i))\n-      TREE_VISITED (ssa_name (i)) = 0;\n-\n-  calculate_dominance_info (CDI_DOMINATORS);\n-\n-  /* Verify and register all the SSA_NAME definitions found in the\n-     function.  */\n-  FOR_EACH_BB (bb)\n     {\n-      tree phi;\n-      block_stmt_iterator bsi;\n-\n-      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\t{\n-\t  int i;\n-\t  if (verify_def (bb, definition_block, PHI_RESULT (phi), phi,\n-\t\t\t!is_gimple_reg (PHI_RESULT (phi))))\n-\t  goto err;\n-\t  for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n-\t    {\n-\t      tree def = PHI_ARG_DEF (phi, i);\n-\t      if (TREE_CODE (def) != SSA_NAME && !is_gimple_min_invariant (def))\n-\t\t{\n-\t\t  error (\"PHI argument is not SSA_NAME, or invariant\");\n-\t\t  print_generic_stmt (stderr, phi, TDF_VOPS);\n-\t\t  goto err;\n-\t\t}\n-\t    }\n-\t}\n-\n-      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+      tree name = ssa_name (i);\n+      if (name)\n \t{\n \t  tree stmt;\n+\t  TREE_VISITED (name) = 0;\n \n-\t  stmt = bsi_stmt (bsi);\n-\t  get_stmt_operands (stmt);\n-\n-\t  if (stmt_ann (stmt)->makes_aliased_stores \n-\t      && NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt)) == 0)\n+\t  stmt = SSA_NAME_DEF_STMT (name);\n+\t  if (!IS_EMPTY_STMT (stmt))\n \t    {\n-\t      error (\"Statement makes aliased stores, but has no V_MAY_DEFS\");\n-\t      print_generic_stmt (stderr, stmt, TDF_VOPS);\n-\t      goto err;\n-\t    }\n-\t    \n-\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_VIRTUAL_DEFS)\n-\t    {\n-\t      if (verify_def (bb, definition_block, op, stmt, true))\n-\t\tgoto err;\n-\t    }\n-          \n-\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_DEF)\n-\t    {\n-\t      if (verify_def (bb, definition_block, op, stmt, false))\n-\t\tgoto err;\n+\t      basic_block bb = bb_for_stmt (stmt);\n+\t      verify_def (bb, definition_block,\n+\t\t\t  name, stmt, !is_gimple_reg (name));\n+\n \t    }\n \t}\n     }\n \n+  calculate_dominance_info (CDI_DOMINATORS);\n \n   /* Now verify all the uses and make sure they agree with the definitions\n      found in the previous pass.  */\n@@ -693,18 +645,20 @@ verify_ssa (void)\n \t{\n \t  tree stmt = bsi_stmt (bsi);\n \n-\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_VIRTUAL_USES | SSA_OP_VIRTUAL_KILLS)\n-\t    {\n-\t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],\n-\t\t\t      op, stmt, false, true,\n-\t\t\t      names_defined_in_bb))\n-\t\tgoto err;\n-\t    }\n+\t      get_stmt_operands (stmt);\n+\n+\t      if (stmt_ann (stmt)->makes_aliased_stores \n+\t\t  && NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt)) == 0)\n+\t\t{\n+\t\t  error (\"Statement makes aliased stores, but has no V_MAY_DEFS\");\n+\t\t  print_generic_stmt (stderr, stmt, TDF_VOPS);\n+\t\t  goto err;\n+\t\t}\n \n-\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n+\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_ALL_USES)\n \t    {\n \t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],\n-\t\t\t      op, stmt, false, false,\n+\t\t\t      op, stmt, false, !is_gimple_reg (op),\n \t\t\t      names_defined_in_bb))\n \t\tgoto err;\n \t    }"}]}