{"sha": "e11d05c1ed26257493130762a8ae240f1bc06e87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExZDA1YzFlZDI2MjU3NDkzMTMwNzYyYThhZTI0MGYxYmMwNmU4Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-10T22:55:42Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-11T03:12:41Z"}, "message": "c++: Fix wrong conversion error with non-viable overload [PR94124]\n\nThis is a bad interaction between sharing a constructor for an array\nand stripping its trailing zero-initializers.  Here we reuse a ctor\nand then strip its 0s.  This breaks overload resolution in this test:\nD can be initialized from {} but not from {0}, so if we truncate the\nconstructor not to include the zero, the F(D) overload becomes valid\nand then we get the ambiguous conversion error.\n\n\tPR c++/94124 - wrong conversion error with non-viable overload.\n\t* decl.c (reshape_init_array_1): Unshare a constructor if we\n\tstripped trailing zero-initializers.\n\n\t* g++.dg/cpp0x/initlist-overload1.C: New test.", "tree": {"sha": "637dab153ef59698c03e1513b71568a444ca724a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/637dab153ef59698c03e1513b71568a444ca724a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11d05c1ed26257493130762a8ae240f1bc06e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11d05c1ed26257493130762a8ae240f1bc06e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11d05c1ed26257493130762a8ae240f1bc06e87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11d05c1ed26257493130762a8ae240f1bc06e87/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481fcfe6fec156ca2a6baea4b623076e2eefa6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481fcfe6fec156ca2a6baea4b623076e2eefa6a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481fcfe6fec156ca2a6baea4b623076e2eefa6a6"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "ebccb511ee097e45831c09a6c37b85b1f820b2e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e11d05c1ed26257493130762a8ae240f1bc06e87", "patch": "@@ -1,3 +1,9 @@\n+2020-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94124 - wrong conversion error with non-viable overload.\n+\t* decl.c (reshape_init_array_1): Unshare a constructor if we\n+\tstripped trailing zero-initializers.\n+\n 2020-03-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93901"}, {"sha": "aa58e5f88aea4270c6a9284551789eef5a4884d1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e11d05c1ed26257493130762a8ae240f1bc06e87", "patch": "@@ -6062,6 +6062,13 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n       else if (last_nonzero < nelts - 1)\n \tnelts = last_nonzero + 1;\n \n+      /* Sharing a stripped constructor can get in the way of\n+\t overload resolution.  E.g., initializing a class from\n+\t {{0}} might be invalid while initializing the same class\n+\t from {{}} might be valid.  */\n+      if (reuse)\n+\tnew_init = unshare_constructor (new_init);\n+\n       vec_safe_truncate (CONSTRUCTOR_ELTS (new_init), nelts);\n     }\n "}, {"sha": "d243255b07c2202aec7162d0d3f0b5a7f0f1cb06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e11d05c1ed26257493130762a8ae240f1bc06e87", "patch": "@@ -1,3 +1,8 @@\n+2020-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94124 - wrong conversion error with non-viable overload.\n+\t* g++.dg/cpp0x/initlist-overload1.C: New test.\n+\n 2020-03-10  Jiufu Guo  <guojiufu@linux.ibm.com>\n \n \tPR target/93709"}, {"sha": "12bb606ce67c16e515d6e475cd8b680e5005ca08", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-overload1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-overload1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d05c1ed26257493130762a8ae240f1bc06e87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-overload1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-overload1.C?ref=e11d05c1ed26257493130762a8ae240f1bc06e87", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/94124 - wrong conversion error with non-viable overload.\n+// { dg-do compile { target c++11 } }\n+\n+template <int N> struct A { typedef int _Type[N]; };\n+template <int N> struct B { typename A<N>::_Type _M_elems; };\n+class C { };\n+struct D {\n+  D(C);\n+};\n+\n+struct F {\n+  F(B<2>);\n+  F(D); // This overload should not be viable.\n+};\n+F fn1() { return {{{0}}}; }"}]}