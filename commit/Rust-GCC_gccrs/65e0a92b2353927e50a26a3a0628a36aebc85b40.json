{"sha": "65e0a92b2353927e50a26a3a0628a36aebc85b40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlMGE5MmIyMzUzOTI3ZTUwYTI2YTNhMDYyOGEzNmFlYmM4NWI0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-14T11:08:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-12-14T11:08:15Z"}, "message": "decl.c (rm_size): Take into account the padding in the case of a record type containing a template.\n\n\t* gcc-interface/decl.c (rm_size): Take into account the padding in\n\tthe case of a record type containing a template.\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Size>: Likewise.\n\tDo not subtract the padded size for Max_Size_In_Storage_Elements.\n\t<Attr_Descriptor_Size>: Tweak comment.\n\nFrom-SVN: r267131", "tree": {"sha": "597d42039a50841cd13bb9ee091a9ea3f7ad56fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/597d42039a50841cd13bb9ee091a9ea3f7ad56fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e0a92b2353927e50a26a3a0628a36aebc85b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e0a92b2353927e50a26a3a0628a36aebc85b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e0a92b2353927e50a26a3a0628a36aebc85b40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e0a92b2353927e50a26a3a0628a36aebc85b40/comments", "author": null, "committer": null, "parents": [{"sha": "fcdc7fd55df451a405f040733c29b8fe3d20cff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcdc7fd55df451a405f040733c29b8fe3d20cff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcdc7fd55df451a405f040733c29b8fe3d20cff1"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "ba974cdcb03f92a285cffc6ebb2d2df675a96b37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -1,3 +1,11 @@\n+2018-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (rm_size): Take into account the padding in\n+\tthe case of a record type containing a template.\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Size>: Likewise.\n+\tDo not subtract the padded size for Max_Size_In_Storage_Elements.\n+\t<Attr_Descriptor_Size>: Tweak comment.\n+\n 2018-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (choices_to_gnu): Directly use a naked boolean"}, {"sha": "df55f4893b7bfa302328acf2168a411a308489c8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -10049,13 +10049,14 @@ rm_size (tree gnu_type)\n   if (INTEGRAL_TYPE_P (gnu_type) && TYPE_RM_SIZE (gnu_type))\n     return TYPE_RM_SIZE (gnu_type);\n \n-  /* Return the RM size of the actual data plus the size of the template.  */\n+  /* If the type contains a template, return the padded size of the template\n+     plus the RM size of the actual data.  */\n   if (TREE_CODE (gnu_type) == RECORD_TYPE\n       && TYPE_CONTAINS_TEMPLATE_P (gnu_type))\n     return\n       size_binop (PLUS_EXPR,\n-\t\t  rm_size (TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (gnu_type)))),\n-\t\t  DECL_SIZE (TYPE_FIELDS (gnu_type)));\n+\t\t  bit_position (DECL_CHAIN (TYPE_FIELDS (gnu_type))),\n+\t\t  rm_size (TREE_TYPE (DECL_CHAIN (TYPE_FIELDS (gnu_type)))));\n \n   /* For record or union types, we store the size explicitly.  */\n   if (RECORD_OR_UNION_TYPE_P (gnu_type)"}, {"sha": "620dbd3d36d097dc7a0069dad9486d5a29c690ce", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -2308,10 +2308,8 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       gnu_type = TREE_TYPE (gnu_prefix);\n \n       /* Replace an unconstrained array type with the type of the underlying\n-\t array.  We can't do this with a call to maybe_unconstrained_array\n-\t since we may have a TYPE_DECL.  For 'Max_Size_In_Storage_Elements,\n-\t use the record type that will be used to allocate the object and its\n-\t template.  */\n+\t array, except for 'Max_Size_In_Storage_Elements because we need to\n+\t return the (maximum) size requested for an allocator.  */\n       if (TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t{\n \t  gnu_type = TYPE_OBJECT_RECORD_TYPE (gnu_type);\n@@ -2375,11 +2373,15 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t    gnu_result = substitute_placeholder_in_expr (gnu_result, gnu_expr);\n \t}\n \n-      /* If the type contains a template, subtract its size.  */\n+      /* If the type contains a template, subtract the padded size of the\n+\t template, except for 'Max_Size_In_Storage_Elements because we need\n+\t to return the (maximum) size requested for an allocator.  */\n       if (TREE_CODE (gnu_type) == RECORD_TYPE\n-\t  && TYPE_CONTAINS_TEMPLATE_P (gnu_type))\n-\tgnu_result = size_binop (MINUS_EXPR, gnu_result,\n-\t\t\t\t DECL_SIZE (TYPE_FIELDS (gnu_type)));\n+\t  && TYPE_CONTAINS_TEMPLATE_P (gnu_type)\n+\t  && attribute != Attr_Max_Size_In_Storage_Elements)\n+\tgnu_result\n+\t  = size_binop (MINUS_EXPR, gnu_result,\n+\t\t\tbit_position (DECL_CHAIN (TYPE_FIELDS (gnu_type))));\n \n       /* For 'Max_Size_In_Storage_Elements, adjust the unit.  */\n       if (attribute == Attr_Max_Size_In_Storage_Elements)\n@@ -2856,8 +2858,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       gnu_type = TREE_TYPE (gnu_prefix);\n       gcc_assert (TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE);\n \n-      /* What we want is the offset of the ARRAY field in the record\n-\t that the thin pointer designates.  */\n+      /* Return the padded size of the template in the object record type.  */\n       gnu_type = TYPE_OBJECT_RECORD_TYPE (gnu_type);\n       gnu_result = bit_position (DECL_CHAIN (TYPE_FIELDS (gnu_type)));\n       gnu_result_type = get_unpadded_type (Etype (gnat_node));"}, {"sha": "4e0e910ebf1bb902c8938285757fe6fccbbdc9a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/max_size.adb: New test.\n+\t* gnat.dg/max_size_pkg.ads: Likewise.\n+\n 2018-12-14  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/milli-1.c: New test."}, {"sha": "28562c16c0179df2ea36f7d05efb7c47ea68cbe8", "filename": "gcc/testsuite/gnat.dg/max_size.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size.adb?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do run }\n+\n+with Max_Size_Pkg; use Max_Size_Pkg;\n+\n+procedure Max_Size is\n+begin\n+  if Arr1'Max_Size_In_Storage_Elements /= 7 then\n+    raise Program_Error;\n+  end if;\n+  if Arr2'Max_Size_In_Storage_Elements /= 24 then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "d4850c1bb498f841fbff588d340dc514bd814d06", "filename": "gcc/testsuite/gnat.dg/max_size_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e0a92b2353927e50a26a3a0628a36aebc85b40/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmax_size_pkg.ads?ref=65e0a92b2353927e50a26a3a0628a36aebc85b40", "patch": "@@ -0,0 +1,9 @@\n+package Max_Size_Pkg is\n+\n+  type Index is range 1 .. 5;\n+\n+  type Arr1 is array (Index range <>) of Short_Short_Integer;\n+\n+  type Arr2 is array (Index range <>) of Integer;\n+\n+end Max_Size_Pkg;"}]}