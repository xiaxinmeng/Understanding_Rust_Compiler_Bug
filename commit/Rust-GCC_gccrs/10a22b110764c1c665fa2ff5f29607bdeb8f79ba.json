{"sha": "10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMjJiMTEwNzY0YzFjNjY1ZmEyZmY1ZjI5NjA3YmRlYjhmNzliYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-06-26T21:54:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-06-26T21:54:24Z"}, "message": "re PR c/21911 (named parameter mistakenly identified as sentinel)\n\n\tPR c/21911\n\t* c-common.c (check_function_sentinel): Pass in named argument\n\tlist, skip over named arguments before looking for a sentinel.\n\t(check_function_arguments): Pass in named argument list.\n\t* c-common.h (check_function_arguments): Likewise.\n\t* c-typeck.c (build_function_call): Likewise.\n\ncp:\n\t* call.c (build_over_call): Pass in named argument list to\n\t`check_function_arguments'.\n\t* typeck.c (build_function_call): Likewise.\n\ntestsuite:\n\tPR c/21911\n\t* gcc.dg/format/sentinel-1.c: Update.  Fix execl* calls.\n\nFrom-SVN: r101341", "tree": {"sha": "41908d1e14fb3ba4c882eacbba3fca4d4f164007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41908d1e14fb3ba4c882eacbba3fca4d4f164007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/comments", "author": null, "committer": null, "parents": [{"sha": "82e5a12a581ea11e83cbd94d368e3297abda8fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e5a12a581ea11e83cbd94d368e3297abda8fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e5a12a581ea11e83cbd94d368e3297abda8fe2"}], "stats": {"total": 88, "additions": 62, "deletions": 26}, "files": [{"sha": "1ed245ebf92e9c37b13f71bf7e00cbba94816d9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -1,3 +1,12 @@\n+2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR c/21911\n+\t* c-common.c (check_function_sentinel): Pass in named argument\n+\tlist, skip over named arguments before looking for a sentinel.\n+\t(check_function_arguments): Pass in named argument list.\n+\t* c-common.h (check_function_arguments): Likewise.\n+\t* c-typeck.c (build_function_call): Likewise.\n+\n 2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* genautomata.c (decl_mode_check_failed,"}, {"sha": "24280aef282fe551c41cca14434ac7b72eb6d711", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -5143,14 +5143,21 @@ check_function_nonnull (tree attrs, tree params)\n    from the end) is a (pointer)0.  */\n \n static void\n-check_function_sentinel (tree attrs, tree params)\n+check_function_sentinel (tree attrs, tree params, tree typelist)\n {\n   tree attr = lookup_attribute (\"sentinel\", attrs);\n \n   if (attr)\n     {\n-      if (!params)\n-\twarning (0, \"missing sentinel in function call\");\n+      /* Skip over the named arguments.  */\n+      while (typelist && params)\n+      {\n+\ttypelist = TREE_CHAIN (typelist);\n+\tparams = TREE_CHAIN (params);\n+      }\n+      \n+      if (typelist || !params)\n+\twarning (0, \"not enough variable arguments to fit a sentinel\");\n       else\n         {\n \t  tree sentinel, end;\n@@ -5172,7 +5179,7 @@ check_function_sentinel (tree attrs, tree params)\n \t    }\n \t  if (pos > 0)\n \t    {\n-\t      warning (0, \"not enough arguments to fit a sentinel\");\n+\t      warning (0, \"not enough variable arguments to fit a sentinel\");\n \t      return;\n \t    }\n \n@@ -5386,7 +5393,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \f\n /* Check for valid arguments being passed to a function.  */\n void\n-check_function_arguments (tree attrs, tree params)\n+check_function_arguments (tree attrs, tree params, tree typelist)\n {\n   /* Check for null being passed in a pointer argument that must be\n      non-null.  We also need to do this if format checking is enabled.  */\n@@ -5399,7 +5406,7 @@ check_function_arguments (tree attrs, tree params)\n   if (warn_format)\n     {\n       check_function_format (attrs, params);\n-      check_function_sentinel (attrs, params);\n+      check_function_sentinel (attrs, params, typelist);\n     }\n }\n "}, {"sha": "d3839b73d88b4262f27072e46a396ce7e27d2200", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -626,7 +626,7 @@ extern void finish_fname_decls (void);\n extern const char *fname_as_string (int);\n extern tree fname_decl (unsigned, tree);\n \n-extern void check_function_arguments (tree, tree);\n+extern void check_function_arguments (tree, tree, tree);\n extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,\n \t\t\t\t\t       unsigned HOST_WIDE_INT),"}, {"sha": "7f32b655041cca9a5ed5575860359c05d6799691", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -2067,7 +2067,8 @@ build_function_call (tree function, tree params)\n \n   /* Check that the arguments to the function are valid.  */\n \n-  check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params);\n+  check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params,\n+\t\t\t    TYPE_ARG_TYPES (fntype));\n \n   result = build3 (CALL_EXPR, TREE_TYPE (fntype),\n \t\t   function, coerced_params, NULL_TREE);"}, {"sha": "217a244481df3fbcf0ef2225447b76788c7540b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -1,3 +1,9 @@\n+2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (build_over_call): Pass in named argument list to\n+\t`check_function_arguments'.\n+\t* typeck.c (build_function_call): Likewise.\n+\n 2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h (lang_check_failed): Add noreturn attribute."}, {"sha": "d3cd467cbb817b7f1d771ae1e7ecc431e56c295b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -4790,7 +4790,7 @@ build_over_call (struct z_candidate *cand, int flags)\n   converted_args = nreverse (converted_args);\n \n   check_function_arguments (TYPE_ATTRIBUTES (TREE_TYPE (fn)),\n-\t\t\t    converted_args);\n+\t\t\t    converted_args, TYPE_ARG_TYPES (TREE_TYPE (fn)));\n \n   /* Avoid actually calling copy constructors and copy assignment operators,\n      if possible.  */"}, {"sha": "edf1519f9651603fa9e45037aa02ad8d2d0486e1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -2498,7 +2498,8 @@ build_function_call (tree function, tree params)\n   /* Check for errors in format strings and inappropriately\n      null parameters.  */\n \n-  check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params);\n+  check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params,\n+\t\t\t    TYPE_ARG_TYPES (fntype));\n \n   return build_cxx_call (function, coerced_params);\n }"}, {"sha": "fa0a562b06a1fc777f6bfd7cb02abf0271abdb69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -1,3 +1,8 @@\n+2005-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR c/21911\n+\t* gcc.dg/format/sentinel-1.c: Update.  Fix execl* calls.\n+\n 2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/17965"}, {"sha": "1dc090870e42eaa5a0b31614a042020ce80b0bfb", "filename": "gcc/testsuite/gcc.dg/format/sentinel-1.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22b110764c1c665fa2ff5f29607bdeb8f79ba/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c?ref=10a22b110764c1c665fa2ff5f29607bdeb8f79ba", "patch": "@@ -27,40 +27,47 @@ extern void foo10 (const char *, ...) __attribute__ ((__sentinel__(1,3))); /* {\n \n extern void bar(void)\n {\n-  foo1 (); /* { dg-error \"missing sentinel|too few arguments\" \"sentinel\" } */\n-  foo1 (\"a\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo1 (); /* { dg-error \"not enough|too few arguments\" \"sentinel\" } */\n+  foo1 (NULL); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo1 (\"a\"); /* { dg-warning \"not enough\" \"sentinel\" } */\n   foo1 (\"a\", 1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo1 (\"a\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo1 (\"a\", (void*)1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo1 (\"a\", NULL, 1); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo1 (\"a\", NULL);\n \n+  foo5 (NULL); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo5 (NULL, 1); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo5 (\"a\", NULL); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo5 (\"a\", NULL, 1);\n   foo5 (\"a\", 1, 2, 3, NULL); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo5 (\"a\", 1, 2, NULL, 3);\n   foo5 (\"a\", 1, NULL, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo5 (\"a\", NULL, 1, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo5 (\"a\", 0, 1, 2, 3); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n \n-  foo6 (\"a\", 1, NULL); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n-  foo6 (\"a\", 1, NULL, 2); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n-  foo6 (\"a\", 1, NULL, 2, 3); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n-  foo6 (\"a\", NULL, 1, 2, 3); /* { dg-warning \"not enough arguments\" \"sentinel\" } */\n-  foo6 (\"a\", NULL, 1, 2, 3, 4); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  foo6 (\"a\", 1, NULL); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo6 (\"a\", 1, NULL, 2); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo6 (\"a\", 1, NULL, 2, 3); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo6 (\"a\", NULL, 1, 2, 3, 4); /* { dg-warning \"not enough\" \"sentinel\" } */\n+  foo6 (NULL, 1, 2, 3, 4, 5); /* { dg-warning \"not enough\" \"sentinel\" } */\n   foo6 (\"a\", NULL, 1, 2, 3, 4, 5);\n+  foo6 (\"a\", 0, NULL, 1, 2, 3, 4, 5);\n   foo6 (\"a\", 0, 1, 2, 3, 4, 5); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n   foo6 (\"a\", NULL, 1, 2, 3, 4, 5, 6); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n \n   foo7 (\"a\", 1, 2, 3, NULL);\n \n-  execl (\"/bin/ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execl (\"/bin/ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execl (\"/bin/ls\", \"-aFC\", NULL);\n+  execl (\"/bin/ls\", \"/bin/ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execl (\"/bin/ls\", \"/bin/ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execl (\"/bin/ls\", \"/bin/ls\", \"-aFC\", NULL);\n \n-  execlp (\"ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execlp (\"ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execlp (\"ls\", \"-aFC\", NULL);\n+  execlp (\"ls\", \"ls\", \"-aFC\"); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execlp (\"ls\", \"ls\", \"-aFC\", 0); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execlp (\"ls\", \"ls\", \"-aFC\", NULL);\n \n-  execle (\"ls\", \"-aFC\", \".\", envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execle (\"ls\", \"-aFC\", \".\", 0, envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n-  execle (\"ls\", \"-aFC\", \".\", NULL, envp);\n+  execle (\"ls\", \"ls\", \"-aFC\", \".\", envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execle (\"ls\", \"ls\", \"-aFC\", \".\", 0, envp); /* { dg-warning \"missing sentinel\" \"sentinel\" } */\n+  execle (\"ls\", \"ls\", \"-aFC\", \".\", NULL, envp);\n }"}]}