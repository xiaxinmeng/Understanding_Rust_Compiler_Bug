{"sha": "50a36a9541526708881f2ac0c4f180506bcf80bb", "node_id": "C_kwDOANBUbNoAKDUwYTM2YTk1NDE1MjY3MDg4ODFmMmFjMGM0ZjE4MDUwNmJjZjgwYmI", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-21T22:15:33Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2023-03-27T02:01:14Z"}, "message": "Docs, OpenMP: Correct internal documentation of OMP_FOR.\n\ngcc/ChangeLog:\n\n\t* doc/generic.texi (OpenMP): Document OMP_SIMD, OMP_DISTRIBUTE,\n\tOMP_TASKLOOP, and OMP_LOOP with OMP_FOR.  Document how collapsed\n\tloops are represented and which fields are vectors.  Add\n\tdocumentation for OMP_FOR_PRE_BODY field.  Document internal\n\tform of non-rectangular loops and OMP_FOR_NON_RECTANGULAR.\n\n\t* tree.def (OMP_FOR): Make documentation consistent with the\n\tTexinfo manual, to fill some gaps and correct errors.", "tree": {"sha": "cad4ef0c542d49c0592bcda66c55a0b99c1b330a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cad4ef0c542d49c0592bcda66c55a0b99c1b330a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a36a9541526708881f2ac0c4f180506bcf80bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a36a9541526708881f2ac0c4f180506bcf80bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a36a9541526708881f2ac0c4f180506bcf80bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a36a9541526708881f2ac0c4f180506bcf80bb/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "934113189648dc299400bf50fc4b3c786c692443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934113189648dc299400bf50fc4b3c786c692443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934113189648dc299400bf50fc4b3c786c692443"}], "stats": {"total": 152, "additions": 113, "deletions": 39}, "files": [{"sha": "2c14b7abce2db0a3da0a21e916907947cb56a265", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a36a9541526708881f2ac0c4f180506bcf80bb/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a36a9541526708881f2ac0c4f180506bcf80bb/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=50a36a9541526708881f2ac0c4f180506bcf80bb", "patch": "@@ -2253,6 +2253,10 @@ edge.  Rethrowing the exception is represented using @code{RESX_EXPR}.\n @subsection OpenMP\n @tindex OMP_PARALLEL\n @tindex OMP_FOR\n+@tindex OMP_SIMD\n+@tindex OMP_DISTRIBUTE\n+@tindex OMP_TASKLOOP\n+@tindex OMP_LOOP\n @tindex OMP_SECTIONS\n @tindex OMP_SINGLE\n @tindex OMP_SECTION\n@@ -2294,37 +2298,71 @@ the @code{VAR_DECL} that contains all the shared values and\n variables.\n \n @item OMP_FOR\n+@itemx OMP_SIMD\n+@itemx OMP_DISTRIBUTE\n+@itemx OMP_TASKLOOP\n+@itemx OMP_LOOP\n \n-Represents @code{#pragma omp for [clause1 @dots{} clauseN]}.  It has\n-six operands:\n+Represents @code{#pragma omp for [clause1 @dots{} clauseN]} and\n+related loop constructs (respectively).\n+\n+A single @code{OMP_FOR} node represents an entire nest of collapsed\n+loops; as noted below, some of its arguments are vectors of length\n+equal to the collapse depth, and the corresponding elements holding\n+data specific to a particular loop in the nest.  These vectors are\n+numbered from the outside in so that the outermost loop is element 0.\n+\n+These constructs have seven operands:\n \n Operand @code{OMP_FOR_BODY} contains the loop body.\n \n Operand @code{OMP_FOR_CLAUSES} is the list of clauses\n associated with the directive.\n \n-Operand @code{OMP_FOR_INIT} is the loop initialization code of\n-the form @code{VAR = N1}.\n+Operand @code{OMP_FOR_INIT} is a vector containing iteration\n+variable initializations of the form @code{VAR = N1}.\n \n-Operand @code{OMP_FOR_COND} is the loop conditional expression\n-of the form @code{VAR @{<,>,<=,>=@} N2}.\n+Operand @code{OMP_FOR_COND} is vector containing loop\n+conditional expressions of the form @code{VAR @{<,>,<=,>=@} N2}.\n \n-Operand @code{OMP_FOR_INCR} is the loop index increment of the\n-form @code{VAR @{+=,-=@} INCR}.\n+Operand @code{OMP_FOR_INCR} is a vector containing loop index\n+increment expressions of the form @code{VAR @{+=,-=@} INCR}.\n \n Operand @code{OMP_FOR_PRE_BODY} contains side effect code from\n operands @code{OMP_FOR_INIT}, @code{OMP_FOR_COND} and\n-@code{OMP_FOR_INC}.  These side effects are part of the\n+@code{OMP_FOR_INCR}.  These side effects are part of the\n @code{OMP_FOR} block but must be evaluated before the start of\n-loop body.\n+loop body.  @code{OMP_FOR_PRE_BODY} specifically\n+includes @code{DECL_EXPR}s for iteration variables that are\n+declared in the nested @code{for} loops.\n+Note this field is not a vector; it may be null, but otherwise is\n+usually a statement list collecting the side effect code from all\n+the collapsed loops.\n+\n+Operand @code{OMP_FOR_ORIG_DECLS} holds @code{VAR_DECLS} for the\n+original user-specified iterator variables in the source code.\n+In some cases, like C++ class iterators or range @code{for} with\n+decomposition, the @code{for} loop is rewritten by the front end to\n+use a temporary iteration variable.  The purpose of this field is to\n+make the original variables available to the gimplifier so it can\n+adjust their data-sharing attributes and diagnose errors.\n+@code{OMP_FOR_ORIG_DECLS} is a vector field, with each element holding\n+a list of @code{VAR_DECLS} for the corresponding collapse level.\n \n The loop index variable @code{VAR} must be a signed integer variable,\n-which is implicitly private to each thread.  Bounds\n-@code{N1} and @code{N2} and the increment expression\n-@code{INCR} are required to be loop invariant integer\n-expressions that are evaluated without any synchronization. The\n-evaluation order, frequency of evaluation and side effects are\n-unspecified by the standard.\n+which is implicitly private to each thread.  For rectangular loops,\n+the bounds @code{N1} and @code{N2} and the increment expression\n+@code{INCR} are required to be loop-invariant integer expressions\n+that are evaluated without any synchronization.  The evaluation order,\n+frequency of evaluation and side effects are otherwise unspecified\n+by the standard.\n+\n+For non-rectangular loops, in which the bounds of an inner loop depend\n+on the index of an outer loop, the bit @code{OMP_FOR_NON_RECTANGULAR}\n+must be set.  In this case @code{N1} and @code{N2} are not ordinary\n+expressions, but instead a @code{TREE_VEC} with three elements:\n+the @code{DECL} for the outer loop variable, a multiplication\n+factor, and an offset.\n \n @item OMP_SECTIONS\n "}, {"sha": "ee02754354f015a16737c7e879d89c3e3be0d5aa", "filename": "gcc/tree.def", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a36a9541526708881f2ac0c4f180506bcf80bb/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a36a9541526708881f2ac0c4f180506bcf80bb/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=50a36a9541526708881f2ac0c4f180506bcf80bb", "patch": "@@ -1141,29 +1141,65 @@ DEFTREECODE (OMP_PARALLEL, \"omp_parallel\", tcc_statement, 2)\n DEFTREECODE (OMP_TASK, \"omp_task\", tcc_statement, 2)\n \n /* OpenMP - #pragma omp for [clause1 ... clauseN]\n-   Operand 0: OMP_FOR_BODY: Loop body.\n-   Operand 1: OMP_FOR_CLAUSES: List of clauses.\n-   Operand 2: OMP_FOR_INIT: Initialization code of the form\n-                             \tVAR = N1.\n-   Operand 3: OMP_FOR_COND: Loop conditional expression of the form\n-                             \tVAR { <, >, <=, >= } N2.\n-   Operand 4: OMP_FOR_INCR: Loop index increment of the form\n-\t\t\t     \tVAR { +=, -= } INCR.\n-   Operand 5: OMP_FOR_PRE_BODY: Filled by the gimplifier with things\n-\tfrom INIT, COND, and INCR that are technically part of the\n-\tOMP_FOR structured block, but are evaluated before the loop\n-\tbody begins.\n-   Operand 6: OMP_FOR_ORIG_DECLS: If non-NULL, list of DECLs initialized\n-\tin OMP_FOR_INIT.  In some cases, like C++ iterators, the original\n-\tDECL init has been lost in gimplification and now contains a\n-\ttemporary (D.nnnn).  This list contains the original DECLs in\n-\tthe source.\n-\n-   VAR must be an integer or pointer variable, which is implicitly thread\n-   private.  N1, N2 and INCR are required to be loop invariant integer\n-   expressions that are evaluated without any synchronization.\n-   The evaluation order, frequency of evaluation and side-effects are\n-   unspecified by the standards.  */\n+\n+   A single OMP_FOR node represents an entire nest of collapsed\n+   loops; as noted below, some of its arguments are vectors of length\n+   equal to the collapse depth, and the corresponding elements holding\n+   data specific to a particular loop in the nest.  These vectors are\n+   numbered from the outside in so that the outermost loop is element 0.\n+\n+   These constructs have seven operands:\n+\n+   Operand 0: OMP_FOR_BODY contains the loop body.\n+\n+   Operand 1: OMP_FOR_CLAUSES is the list of clauses\n+   associated with the directive.\n+\n+   Operand 2: OMP_FOR_INIT is a vector containing iteration\n+   variable initializations of the form VAR = N1.\n+\n+   Operand 3: OMP_FOR_COND is vector containing loop\n+   conditional expressions of the form VAR {<,>,<=,>=} N2.\n+\n+   Operand 4: OMP_FOR_INCR is a vector containing loop index\n+   increment expressions of the form VAR {+=,-=} INCR.\n+\n+   Operand 5: OMP_FOR_PRE_BODY contains side effect code from\n+   operands OMP_FOR_INIT, OMP_FOR_COND and\n+   OMP_FOR_INCR.  These side effects are part of the\n+   OMP_FOR block but must be evaluated before the start of\n+   loop body.  OMP_FOR_PRE_BODY specifically\n+   includes DECL_EXPRs for iteration variables that are\n+   declared in the nested for loops.\n+   Note this field is not a vector; it may be null, but otherwise is\n+   usually a statement list collecting the side effect code from all\n+   the collapsed loops.\n+\n+   Operand 6: OMP_FOR_ORIG_DECLS holds VAR_DECLS for the\n+   original user-specified iterator variables in the source code.\n+   In some cases, like C++ class iterators or range for with\n+   decomposition, the for loop is rewritten by the front end to\n+   use a temporary iteration variable.  The purpose of this field is to\n+   make the original variables available to the gimplifier so it can\n+   adjust their data-sharing attributes and diagnose errors.\n+   OMP_FOR_ORIG_DECLS is a vector field, with each element holding\n+   a list of VAR_DECLS for the corresponding collapse level.\n+\n+   The loop index variable VAR must be a signed integer variable,\n+   which is implicitly private to each thread.  For rectangular loops,\n+   the bounds N1 and N2 and the increment expression\n+   INCR are required to be loop-invariant integer expressions\n+   that are evaluated without any synchronization.  The evaluation order,\n+   frequency of evaluation and side effects are otherwise unspecified\n+   by the standard.\n+\n+   For non-rectangular loops, in which the bounds of an inner loop depend\n+   on the index of an outer loop, the bit OMP_FOR_NON_RECTANGULAR\n+   must be set.  In this case N1 and N2 are not ordinary\n+   expressions, but instead a TREE_VEC with three elements:\n+   the DECL for the outer loop variable, a multiplication\n+   factor, and an offset. */\n+\n DEFTREECODE (OMP_FOR, \"omp_for\", tcc_statement, 7)\n \n /* OpenMP - #pragma omp simd [clause1 ... clauseN]"}]}