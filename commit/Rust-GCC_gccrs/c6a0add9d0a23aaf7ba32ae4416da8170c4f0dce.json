{"sha": "c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhMGFkZDlkMGEyM2FhZjdiYTMyYWU0NDE2ZGE4MTcwYzRmMGRjZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-01-07T12:15:59Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-01-07T12:15:59Z"}, "message": "Fix a minor issue found by a static analyzer (PR66206).\n\n\tPR rtl-optimization/66206\n\t* bt-load.c (find_btr_use): Change first arg to be a pointer to an rtx.\n\tAll callers changed.\n\nFrom-SVN: r232124", "tree": {"sha": "3740a6b368f1e5adadfb39ebd2609b3dafbe3e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3740a6b368f1e5adadfb39ebd2609b3dafbe3e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce/comments", "author": null, "committer": null, "parents": [{"sha": "fec64afc1aa77fe557679041a396f2c03fd8d4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec64afc1aa77fe557679041a396f2c03fd8d4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec64afc1aa77fe557679041a396f2c03fd8d4be"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "62ad1590969c3d7e67d6e75ec97e6356ebfe9405", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "patch": "@@ -1,3 +1,9 @@\n+2015-12-15  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/66206\n+\t* bt-load.c (find_btr_use): Change first arg to be a pointer to an rtx.\n+\tAll callers changed.\n+\n 2016-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69141"}, {"sha": "aa02f6436e4ef22e49c1e5fba792d4151b10653a", "filename": "gcc/bt-load.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=c6a0add9d0a23aaf7ba32ae4416da8170c4f0dce", "patch": "@@ -1,4 +1,3 @@\n-\n /* Perform branch target register load optimizations.\n    Copyright (C) 2001-2016 Free Software Foundation, Inc.\n \n@@ -188,14 +187,14 @@ basic_block_freq (const_basic_block bb)\n   return bb->frequency;\n }\n \n-/* If X references (sets or reads) any branch target register, return one\n-   such register.  If EXCLUDEP is set, disregard any references within\n-   that location.  */\n+/* If the rtx at *XP references (sets or reads) any branch target\n+   register, return one such register.  If EXCLUDEP is set, disregard\n+   any references within that location.  */\n static rtx *\n-find_btr_use (rtx x, rtx *excludep = 0)\n+find_btr_use (rtx *xp, rtx *excludep = 0)\n {\n   subrtx_ptr_iterator::array_type array;\n-  FOR_EACH_SUBRTX_PTR (iter, array, &x, NONCONST)\n+  FOR_EACH_SUBRTX_PTR (iter, array, xp, NONCONST)\n     {\n       rtx *loc = *iter;\n       if (loc == excludep)\n@@ -232,7 +231,7 @@ insn_sets_btr_p (const rtx_insn *insn, int check_const, int *regno)\n       if (REG_P (dest)\n \t  && TEST_HARD_REG_BIT (all_btrs, REGNO (dest)))\n \t{\n-\t  gcc_assert (!find_btr_use (src));\n+\t  gcc_assert (!find_btr_use (&src));\n \n \t  if (!check_const || CONSTANT_P (src))\n \t    {\n@@ -324,7 +323,7 @@ new_btr_user (basic_block bb, int insn_luid, rtx_insn *insn)\n      to decide whether we can replace all target register\n      uses easily.\n    */\n-  rtx *usep = find_btr_use (PATTERN (insn));\n+  rtx *usep = find_btr_use (&PATTERN (insn));\n   rtx use;\n   btr_user *user = NULL;\n \n@@ -335,7 +334,7 @@ new_btr_user (basic_block bb, int insn_luid, rtx_insn *insn)\n       /* We want to ensure that USE is the only use of a target\n \t register in INSN, so that we know that to rewrite INSN to use\n \t a different target register, all we have to do is replace USE.  */\n-      unambiguous_single_use = !find_btr_use (PATTERN (insn), usep);\n+      unambiguous_single_use = !find_btr_use (&PATTERN (insn), usep);\n       if (!unambiguous_single_use)\n \tusep = NULL;\n     }\n@@ -511,7 +510,7 @@ compute_defs_uses_and_gen (btr_heap_t *all_btr_defs, btr_def **def_array,\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (find_btr_use (PATTERN (insn)))\n+\t\t  if (find_btr_use (&PATTERN (insn)))\n \t\t    {\n \t\t      btr_user *user = new_btr_user (bb, insn_luid, insn);\n "}]}