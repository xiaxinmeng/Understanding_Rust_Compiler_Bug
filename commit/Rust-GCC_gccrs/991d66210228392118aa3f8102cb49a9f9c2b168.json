{"sha": "991d66210228392118aa3f8102cb49a9f9c2b168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxZDY2MjEwMjI4MzkyMTE4YWEzZjgxMDJjYjQ5YTlmOWMyYjE2OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-26T13:40:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-26T13:40:19Z"}, "message": "re PR c/39556 (statics in C99 inline functions later declared extern)\n\n\tPR c/39556\n\t* c-tree.h (enum c_inline_static_type): New.\n\t(record_inline_static): Declare.\n\t* c-decl.c (struct c_inline_static, c_inline_statics,\n\trecord_inline_static, check_inline_statics): New.\n\t(pop_file_scope): Call check_inline_statics.\n\t(start_decl): Call record_inline_static instead of pedwarning\n\tdirectly for static in inline function.\n\t* c-typeck.c (build_external_ref): Call record_inline_static\n\tinstead of pedwarning directly for static referenced in inline\n\tfunction.\n\ntestsuite:\n\t* gcc.dg/inline-34.c: New test.\n\nFrom-SVN: r146800", "tree": {"sha": "ec728d126f99eee23b10a037545ce496f4aeb946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec728d126f99eee23b10a037545ce496f4aeb946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991d66210228392118aa3f8102cb49a9f9c2b168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991d66210228392118aa3f8102cb49a9f9c2b168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991d66210228392118aa3f8102cb49a9f9c2b168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991d66210228392118aa3f8102cb49a9f9c2b168/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a81774c7b071cccb707cd31a7906b01c876944e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a81774c7b071cccb707cd31a7906b01c876944e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a81774c7b071cccb707cd31a7906b01c876944e"}], "stats": {"total": 136, "additions": 131, "deletions": 5}, "files": [{"sha": "26e6d31fb99034f2a0c6fa802c7ab7576828e9d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -1,3 +1,17 @@\n+2009-04-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39556\n+\t* c-tree.h (enum c_inline_static_type): New.\n+\t(record_inline_static): Declare.\n+\t* c-decl.c (struct c_inline_static, c_inline_statics,\n+\trecord_inline_static, check_inline_statics): New.\n+\t(pop_file_scope): Call check_inline_statics.\n+\t(start_decl): Call record_inline_static instead of pedwarning\n+\tdirectly for static in inline function.\n+\t* c-typeck.c (build_external_ref): Call record_inline_static\n+\tinstead of pedwarning directly for static referenced in inline\n+\tfunction.\n+\n 2009-04-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* df-scan.c (df_insn_rescan): Salvage insn's LUID if the insn is"}, {"sha": "b87fee543425494b55d85e34692ba7bd29ea21e2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -393,6 +393,32 @@ static GTY((deletable)) struct c_binding *binding_freelist;\n   t_->to##_last = f_->from##_last;\t\t\t\t\\\n } while (0)\n \n+/* A c_inline_static structure stores details of a static identifier\n+   referenced in a definition of a function that may be an inline\n+   definition if no subsequent declaration of that function uses\n+   \"extern\" or does not use \"inline\".  */\n+\n+struct GTY((chain_next (\"%h.next\"))) c_inline_static {\n+  /* The location for a diagnostic.  */\n+  location_t location;\n+\n+  /* The function that may be an inline definition.  */\n+  tree function;\n+\n+  /* The object or function referenced.  */\n+  tree static_decl;\n+\n+  /* What sort of reference this is.  */\n+  enum c_inline_static_type type;\n+\n+  /* The next such structure or NULL.  */\n+  struct c_inline_static *next;\n+};\n+\n+/* List of static identifiers used or referenced in functions that may\n+   be inline definitions.  */\n+static GTY(()) struct c_inline_static *c_inline_statics;\n+\n /* True means unconditionally make a BLOCK for the next scope pushed.  */\n \n static bool keep_next_level_flag;\n@@ -555,6 +581,53 @@ c_finish_incomplete_decl (tree decl)\n     }\n }\n \f\n+/* Record that inline function FUNC contains a reference (location\n+   LOC) to static DECL (file-scope or function-local according to\n+   TYPE).  */\n+\n+void\n+record_inline_static (location_t loc, tree func, tree decl,\n+\t\t      enum c_inline_static_type type)\n+{\n+  struct c_inline_static *csi = GGC_NEW (struct c_inline_static);\n+  csi->location = loc;\n+  csi->function = func;\n+  csi->static_decl = decl;\n+  csi->type = type;\n+  csi->next = c_inline_statics;\n+  c_inline_statics = csi;\n+}\n+\n+/* Check for references to static declarations in inline functions at\n+   the end of the translation unit and diagnose them if the functions\n+   are still inline definitions.  */\n+\n+static void\n+check_inline_statics (void)\n+{\n+  struct c_inline_static *csi;\n+  for (csi = c_inline_statics; csi; csi = csi->next)\n+    {\n+      if (DECL_EXTERNAL (csi->function))\n+\tswitch (csi->type)\n+\t  {\n+\t  case csi_internal:\n+\t    pedwarn (csi->location, 0,\n+\t\t     \"%qD is static but used in inline function %qD \"\n+\t\t     \"which is not static\", csi->static_decl, csi->function);\n+\t    break;\n+\t  case csi_modifiable:\n+\t    pedwarn (csi->location, 0,\n+\t\t     \"%q+D is static but declared in inline function %qD \"\n+\t\t     \"which is not static\", csi->static_decl, csi->function);\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+    }\n+  c_inline_statics = NULL;\n+}\n+\f\n /* The Objective-C front-end often needs to determine the current scope.  */\n \n void *\n@@ -944,6 +1017,8 @@ pop_file_scope (void)\n      still works without it.  */\n   finish_fname_decls ();\n \n+  check_inline_statics ();\n+\n   /* This is the point to write out a PCH if we're doing that.\n      In that case we do not want to do anything else.  */\n   if (pch_file)\n@@ -3324,9 +3399,8 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       && !TREE_READONLY (decl)\n       && DECL_DECLARED_INLINE_P (current_function_decl)\n       && DECL_EXTERNAL (current_function_decl))\n-    pedwarn (input_location, 0,\n-\t     \"%q+D is static but declared in inline function %qD \"\n-\t     \"which is not static\", decl, current_function_decl);\n+    record_inline_static (input_location, current_function_decl,\n+\t\t\t  decl, csi_modifiable);\n \n   /* Add this decl to the current scope.\n      TEM may equal DECL or it may be a previous decl of the same name.  */"}, {"sha": "0bfcdfe387ae85dae7f1b1850fb350d3f8c457ea", "filename": "gcc/c-tree.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -467,6 +467,18 @@ struct c_enum_contents\n   int enum_overflow;\n };\n \n+/* A type of reference to a static identifier in an inline\n+   function.  */\n+enum c_inline_static_type {\n+  /* Identifier with internal linkage used in function that may be an\n+     inline definition (i.e., file-scope static).  */\n+  csi_internal,\n+  /* Modifiable object with static storage duration defined in\n+     function that may be an inline definition (i.e., local\n+     static).  */\n+  csi_modifiable\n+};\n+\n \f\n /* in c-parser.c */\n extern void c_parse_init (void);\n@@ -483,6 +495,8 @@ extern int global_bindings_p (void);\n extern void push_scope (void);\n extern tree pop_scope (void);\n \n+extern void record_inline_static (location_t, tree, tree,\n+\t\t\t\t  enum c_inline_static_type);\n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);\n extern void c_print_identifier (FILE *, tree, int);"}, {"sha": "b2d210954070e081124c7779a67d87e630433527", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -2285,8 +2285,8 @@ build_external_ref (tree id, int fun, location_t loc, tree *type)\n \t   && (TREE_CODE (ref) != VAR_DECL || TREE_STATIC (ref))\n \t   && ! TREE_PUBLIC (ref)\n \t   && DECL_CONTEXT (ref) != current_function_decl)\n-    pedwarn (loc, 0, \"%qD is static but used in inline function %qD \"\n-\t     \"which is not static\", ref, current_function_decl);\n+    record_inline_static (loc, current_function_decl, ref,\n+\t\t\t  csi_internal);\n \n   return ref;\n }"}, {"sha": "79f0ff7d212a2b950181552d5b68996def8cdb27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -1,3 +1,8 @@\n+2009-04-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39556\n+\t* gcc.dg/inline-34.c: New test.\n+\n 2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/enum-const-1.c, gcc.dg/enum-const-2.c,"}, {"sha": "f257792c73cc51c4aabaa98a97257f7cdc8078dd", "filename": "gcc/testsuite/gcc.dg/inline-34.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Ftestsuite%2Fgcc.dg%2Finline-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991d66210228392118aa3f8102cb49a9f9c2b168/gcc%2Ftestsuite%2Fgcc.dg%2Finline-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-34.c?ref=991d66210228392118aa3f8102cb49a9f9c2b168", "patch": "@@ -0,0 +1,19 @@\n+/* Diagnostics for bad references to static objects and functions from\n+   inline definitions must take account of declarations after the\n+   definition which make it not an inline definition.  PR 39556.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+static int a1;\n+inline int f1 (void) { return a1; }\n+int f1 (void);\n+\n+static int a2;\n+inline int f2 (void) { return a2; }\n+extern inline int f2 (void);\n+\n+inline void f3 (void) { static int a3; }\n+void f3 (void);\n+\n+inline void f4 (void) { static int a4; }\n+extern inline void f4 (void);"}]}