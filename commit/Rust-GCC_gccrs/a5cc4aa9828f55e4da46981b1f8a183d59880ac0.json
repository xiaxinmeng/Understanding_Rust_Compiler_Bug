{"sha": "a5cc4aa9828f55e4da46981b1f8a183d59880ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjYzRhYTk4MjhmNTVlNGRhNDY5ODFiMWY4YTE4M2Q1OTg4MGFjMA==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-09-18T10:46:32Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-09-18T10:46:32Z"}, "message": "(load store patterns): Prepend loads and stores with %V and %v to track the type and address of the access.\n\n(load store patterns): Prepend loads and stores with %V\n\tand %v to track the type and address of the access.\n(call_movstrsi_loop): Renamed from call_block_move_loop.\n\tUse call-value for the block move patterns.\n\nFrom-SVN: r2153", "tree": {"sha": "dc9164b72ec82de164103691df6b7a147efa64c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc9164b72ec82de164103691df6b7a147efa64c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5cc4aa9828f55e4da46981b1f8a183d59880ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cc4aa9828f55e4da46981b1f8a183d59880ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cc4aa9828f55e4da46981b1f8a183d59880ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cc4aa9828f55e4da46981b1f8a183d59880ac0/comments", "author": null, "committer": null, "parents": [{"sha": "1039fa464636197a6b467887d6640c34dbb837d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1039fa464636197a6b467887d6640c34dbb837d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1039fa464636197a6b467887d6640c34dbb837d9"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "639d5642d7a1a673b0003ba9e782d5227e87caef", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cc4aa9828f55e4da46981b1f8a183d59880ac0/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cc4aa9828f55e4da46981b1f8a183d59880ac0/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=a5cc4aa9828f55e4da46981b1f8a183d59880ac0", "patch": "@@ -28,7 +28,7 @@\n (define_expand \"m88k_sccs_id\"\n   [(match_operand:SI 0 \"\" \"\")]\n   \"\"\n-  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.2.7.8 08/26/92 13:41:44\\\";\n+  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.2.12.1 09/12/92 07:08:29\\\";\n      FAIL; }\")\n \f\n ;; Attribute specifications\n@@ -1455,15 +1455,15 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%1\n-   ld %0,%1\n-   st %r1,%0\n+   %V1ld %0,%1\n+   %v0st %r1,%0\n    subu %0,%#r0,%n1\n    set %0,%#r0,%s1\n    mov.s %0,%1\n    mov.s %0,%1\n    mov %0,%1\n-   ld %0,%1\n-   st %1,%0\"\n+   %V1ld %0,%1\n+   %v0st %1,%0\"\n   [(set_attr \"type\" \"arith,load,store,arith,bit,mov,mov,mov,load,store\")])\n \n (define_insn \"\"\n@@ -1512,8 +1512,8 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%h1\n-   ld.hu %0,%1\n-   st.h %r1,%0\n+   %V1ld.hu %0,%1\n+   %v0st.h %r1,%0\n    subu %0,%#r0,%H1\"\n   [(set_attr \"type\" \"arith,load,store,arith\")])\n \n@@ -1544,8 +1544,8 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%q1\n-   ld.bu %0,%1\n-   st.b %r1,%0\n+   %V1ld.bu %0,%1\n+   %v0st.b %r1,%0\n    subu %r0,%#r0,%Q1\"\n   [(set_attr \"type\" \"arith,load,store,arith\")])\n \n@@ -1583,13 +1583,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\\;or %d0,%#r0,%d1\n-   ld.d %0,%1\n-   st.d %1,%0\n+   %V1ld.d %0,%1\n+   %v0st.d %1,%0\n    mov.d %0,%1\n    mov.d %0,%1\n    mov %0,%1\n-   ld.d %0,%1\n-   st.d %1,%0\"\n+   %V1ld.d %0,%1\n+   %v0st.d %1,%0\"\n   [(set_attr \"type\" \"marith,loadd,store,mov,mov,mov,loadd,store\")])\n \n (define_insn \"\"\n@@ -1637,7 +1637,7 @@\n ;      return \\\"or %0,%#r0,0\\;or %d0,%#r0,0\\\";\n ;    case 1:\n ;      operands[1] = adj_offsettable_operand (operands[0], 4);\n-;      return \\\"st %#r0,%0\\;st %#r0,%1\\\";\n+;      return \\\"%v0st %#r0,%0\\;st %#r0,%1\\\";\n ;    }\n ;}\")\n \n@@ -1656,13 +1656,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\\;or %d0,%#r0,%d1\n-   ld.d %0,%1\n-   st.d %1,%0\n+   %V1ld.d %0,%1\n+   %v0st.d %1,%0\n    mov.d %0,%1\n    mov.d %0,%1\n    mov %0,%1\n-   ld.d %0,%1\n-   st.d %1,%0\"\n+   %V1ld.d %0,%1\n+   %v0st.d %1,%0\"\n   [(set_attr \"type\" \"marith,loadd,store,mov,mov,mov,loadd,store\")])\n \n (define_insn \"\"\n@@ -1708,13 +1708,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\n-   ld %0,%1\n-   st %r1,%0\n+   %V1ld %0,%1\n+   %v0st %r1,%0\n    mov.s %0,%1\n    mov.s %0,%1\n    mov %0,%1\n-   ld %0,%1\n-   st %r1,%0\"\n+   %V1ld %0,%1\n+   %v0st %r1,%0\"\n   [(set_attr \"type\" \"arith,load,store,mov,mov,mov,load,store\")])\n \n (define_insn \"\"\n@@ -1767,17 +1767,18 @@\n    (use (reg:SI 2))\n    (use (reg:SI 3))\n    (use (match_dup 5))\n-   (parallel [(call (mem:SI (match_operand 0 \"\" \"\"))\n-\t\t    (const_int 0))\n+   (parallel [(set (reg:DI 2)\n+\t\t   (call (mem:SI (match_operand 0 \"\" \"\"))\n+\t\t\t (const_int 0)))\n \t      (clobber (reg:SI 1))])]\n   \"\"\n   \"\")\n \n-;; Call a looping block move library function (e.g. __movstrSI64n68).\n+;; Call an SImode looping block move library function (e.g. __movstrSI64n68).\n ;; operands 0-5 as in the non-looping interface\n ;; operand 6 is the loop count\n \n-(define_expand \"call_block_move_loop\"\n+(define_expand \"call_movstrsi_loop\"\n   [(set (reg:SI 3) (minus:SI (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"\")))\n    (set (match_operand:SI 5 \"register_operand\" \"\")\n@@ -1789,8 +1790,9 @@\n    (use (reg:SI 3))\n    (use (match_dup 5))\n    (use (reg:SI 6))\n-   (parallel [(call (mem:SI (match_operand 0 \"\" \"\"))\n-\t\t    (const_int 0))\n+   (parallel [(set (reg:DI 2)\n+\t\t   (call (mem:SI (match_operand 0 \"\" \"\"))\n+\t\t\t (const_int 0)))\n \t      (clobber (reg:SI 1))])]\n   \"\"\n   \"\")\n@@ -1816,7 +1818,7 @@\n   \"@\n    mask %0,%1,0xffff\n    or %0,%#r0,%h1\n-   ld.hu %0,%1\"\n+   %V1ld.hu %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \n (define_expand \"zero_extendqihi2\"\n@@ -1838,7 +1840,7 @@\n   \"@\n    mask %0,%1,0xff\n    or %0,%#r0,%q1\n-   ld.bu %0,%1\"\n+   %V1ld.bu %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \n (define_expand \"zero_extendqisi2\"\n@@ -1865,7 +1867,7 @@\n   \"@\n    mask %0,%1,0xff\n    or %0,%#r0,%q1\n-   ld.bu %0,%1\"\n+   %V1ld.bu %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \f\n ;;- sign extension instructions\n@@ -1899,7 +1901,7 @@\n    ext %0,%1,16<0>\n    or %0,%#r0,%h1\n    subu %0,%#r0,%H1\n-   ld.h %0,%1\"\n+   %V1ld.h %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \n (define_expand \"extendqihi2\"\n@@ -1922,7 +1924,7 @@\n    ext %0,%1,8<0>\n    or %0,%#r0,%q1\n    subu %0,%#r0,%Q1\n-   ld.b %0,%1\"\n+   %V1ld.b %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \n (define_expand \"extendqisi2\"\n@@ -1945,7 +1947,7 @@\n    ext %0,%1,8<0>\n    or %0,%#r0,%q1\n    subu %0,%#r0,%Q1\n-   ld.b %0,%1\"\n+   %V1ld.b %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \f\n ;; Conversions between float and double.\n@@ -3016,31 +3018,31 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 24)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"ld.b %0,%1\"\n+  \"%V1ld.b %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 24)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"ld.bu %0,%1\"\n+  \"%V1ld.bu %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 16)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"ld.h %0,%1\"\n+  \"%V1ld.h %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 16)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"ld.hu %0,%1\"\n+  \"%V1ld.hu %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \f\n ;;- arithmetic shift instructions."}]}