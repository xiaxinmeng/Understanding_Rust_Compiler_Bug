{"sha": "6b20f353f6c35385c5e473672ed373e4470df908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyMGYzNTNmNmMzNTM4NWM1ZTQ3MzY3MmVkMzczZTQ0NzBkZjkwOA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2008-11-12T21:57:44Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2008-11-12T21:57:44Z"}, "message": "re PR debug/27574 (MIssing debug info at -O0 for a local variable in a C++ constructor)\n\ngcc/ChangeLog:\n2008-11-12  Dodji Seketeli  <dodji@redhat.com>\n\n\tPR debug/27574\n\t* cgraph.h: New abstract_and_needed member to struct cgraph_node.\n\t* cgraphunit.c (cgraph_analyze_functions): Flag abstract functions\n\t- which clones are reachable - as \"abstract and needed\".\n\t* cgraph.c (cgraph_release_function_body):  If a node is \"abstract and needed\",\n\tdo not release its DECL_INITIAL() content because that will be needed to emit\n\tdebug info.\n\ngcc/testsuite/ChangeLog:\n2008-11-12  Dodji Seketeli  <dodji@redhat.com>\n\n\tPR debug/27574\n\t* g++.dg/debug/dwarf2/local-var-in-contructor.C: New test.\n\nFrom-SVN: r141807", "tree": {"sha": "4bc0a17b6a59171e39ad721b6863cf81bef60b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bc0a17b6a59171e39ad721b6863cf81bef60b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b20f353f6c35385c5e473672ed373e4470df908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20f353f6c35385c5e473672ed373e4470df908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b20f353f6c35385c5e473672ed373e4470df908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20f353f6c35385c5e473672ed373e4470df908/comments", "author": null, "committer": null, "parents": [{"sha": "ac12508218a55bb3a9973b2f57ecea0003e995e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac12508218a55bb3a9973b2f57ecea0003e995e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac12508218a55bb3a9973b2f57ecea0003e995e3"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "2cd719a87ae5ecb3a4c91fb08b108a0333f4b5ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -1,3 +1,13 @@\n+2008-11-12  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/27574\n+\t* cgraph.h: New abstract_and_needed member to struct cgraph_node.\n+\t* cgraphunit.c (cgraph_analyze_functions): Flag abstract functions\n+\t- which clones are reachable - as \"abstract and needed\".\n+\t* cgraph.c (cgraph_release_function_body):  If a node is \"abstract and needed\",\n+\tdo not release its DECL_INITIAL() content because that will be needed to emit\n+\tdebug info.\n+\n 2008-11-12  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/27880"}, {"sha": "43659cbdc6f1c1ec6b418bc9481dd7f899025beb", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -936,7 +936,11 @@ cgraph_release_function_body (struct cgraph_node *node)\n       DECL_STRUCT_FUNCTION (node->decl) = NULL;\n     }\n   DECL_SAVED_TREE (node->decl) = NULL;\n-  DECL_INITIAL (node->decl) = error_mark_node;\n+  /* If the node is abstract and needed, then do not clear DECL_INITIAL\n+     of its associated function function declaration because it's\n+     needed to emit debug info later.  */\n+  if (!node->abstract_and_needed)\n+    DECL_INITIAL (node->decl) = error_mark_node;\n }\n \n /* Remove the node from cgraph.  */"}, {"sha": "782580466dd5e2851a3f96b9a9cef30e5d4e1172", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -166,6 +166,9 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   /* Set when function must be output - it is externally visible\n      or its address is taken.  */\n   unsigned needed : 1;\n+  /* Set when decl is an abstract function pointed to by the\n+     ABSTRACT_DECL_ORIGIN of a reachable function.  */\n+  unsigned abstract_and_needed : 1;\n   /* Set when function is reachable by call from other function\n      that is either reachable or needed.  */\n   unsigned reachable : 1;"}, {"sha": "cd58c2aae0b3d1e071e8be48dcaf291b951ddc18", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -896,6 +896,15 @@ cgraph_analyze_functions (void)\n \tif (!edge->callee->reachable)\n \t  cgraph_mark_reachable_node (edge->callee);\n \n+      /* If decl is a clone of an abstract function, mark that abstract\n+\t function so that we don't release its body. The DECL_INITIAL() of that\n+         abstract function declaration will be later needed to output debug info.  */\n+      if (DECL_ABSTRACT_ORIGIN (decl))\n+\t{\n+\t  struct cgraph_node *origin_node = cgraph_node (DECL_ABSTRACT_ORIGIN (decl));\n+\t  origin_node->abstract_and_needed = true;\n+\t}\n+\n       /* We finalize local static variables during constructing callgraph\n          edges.  Process their attributes too.  */\n       process_function_and_variable_attributes (first_processed,"}, {"sha": "d00790797dd34405db94020bbd36597b75a9c454", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -4187,6 +4187,10 @@ rest_of_handle_final (void)\n   timevar_push (TV_SYMOUT);\n   (*debug_hooks->function_decl) (current_function_decl);\n   timevar_pop (TV_SYMOUT);\n+\n+  /* Release the blocks that are linked to DECL_INITIAL() to free the memory.  */\n+  DECL_INITIAL (current_function_decl) = error_mark_node;\n+\n   if (DECL_STATIC_CONSTRUCTOR (current_function_decl)\n       && targetm.have_ctors_dtors)\n     targetm.asm_out.constructor (XEXP (DECL_RTL (current_function_decl), 0),"}, {"sha": "7a07fbda3442848c1e6842e293ba02852a65b235", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -1,3 +1,8 @@\n+2008-11-12  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/27574\n+\t* g++.dg/debug/dwarf2/local-var-in-contructor.C: New test.\n+\n 2008-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20081112-1.c: New test."}, {"sha": "d61d27fe7e4aaaaa10a1f6102c5c24736894f1c4", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/local-var-in-contructor.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocal-var-in-contructor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f353f6c35385c5e473672ed373e4470df908/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocal-var-in-contructor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocal-var-in-contructor.C?ref=6b20f353f6c35385c5e473672ed373e4470df908", "patch": "@@ -0,0 +1,30 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR27574\n+// { dg-do compile }\n+// { dg-options \"-O0 -g\" }\n+// { dg-final { scan-assembler \"problem\" } }\n+\n+void f (int *)\n+{\n+}\n+\n+class A\n+{\n+public:\n+ A(int i);\n+};\n+\n+A::A(int i)\n+{\n+ int *problem = new int(i);\n+ f (problem);\n+}\n+\n+int\n+main (void)\n+{\n+  A a (0);\n+\n+  return 0;\n+}\n+"}]}