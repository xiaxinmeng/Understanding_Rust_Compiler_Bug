{"sha": "7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkNDUyN2UzOGNkMWY1YTZiNGJjNjNhYTlhZjAzNmZhN2UzNzkwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2004-04-01T17:25:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-04-01T17:25:04Z"}, "message": "re PR ada/14150 (Ada documentation out of date)\n\n\tPR ada/14150\n\t* Make-lang.in: Clean up generation of documentation\n\n\t* gnat-style.texi, gnat_rm.texi, ug_words: Resync with AdaCore version\n\n\t* xgnatug.adb: Removed, replaced by xgnatugn.adb\n\n\t* xgnatugn.adb: Replaces xgnatug.adb\n\n\t* gnat_ug.texi: Removed, replaced by gnat_ugn.texi\n\n\t* gnat_ugn.texi: Replaces gnat_ug.texi. Resync with AdaCore version\n\n\t* gnat_ug_unx.texi, gnat_ug_vms.texi, gnat_ug_vxw.texi,\n\tgnat_ug_wnt.texi: Removed.\n\nFrom-SVN: r80308", "tree": {"sha": "28cb21189be3b24ac0499fbc9965d591c3f388c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28cb21189be3b24ac0499fbc9965d591c3f388c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/comments", "author": null, "committer": null, "parents": [{"sha": "1c19eaccf2f1a4f1471561aed1d333f058908bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c19eaccf2f1a4f1471561aed1d333f058908bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c19eaccf2f1a4f1471561aed1d333f058908bd3"}], "stats": {"total": 113553, "additions": 19985, "deletions": 93568}, "files": [{"sha": "13025add268ae0ce7c8ffc224d31c155157099f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "patch": "@@ -1,3 +1,21 @@\n+2004-04-01  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\tPR ada/14150\n+\t* Make-lang.in: Clean up generation of documentation\n+\n+\t* gnat-style.texi, gnat_rm.texi, ug_words: Resync with AdaCore version\n+\n+\t* xgnatug.adb: Removed, replaced by xgnatugn.adb\n+\n+\t* xgnatugn.adb: Replaces xgnatug.adb\n+\n+\t* gnat_ug.texi: Removed, replaced by gnat_ugn.texi\n+\n+\t* gnat_ugn.texi: Replaces gnat_ug.texi. Resync with AdaCore version\n+\n+\t* gnat_ug_unx.texi, gnat_ug_vms.texi, gnat_ug_vxw.texi,\n+\tgnat_ug_wnt.texi: Removed.\n+\n 2004-04-01  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* utils2.c: Update copyright notice."}, {"sha": "ba8a7a5242f23e69d1fc71df9639d09c79a95dee", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 13, "deletions": 83, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "patch": "@@ -451,78 +451,24 @@ ada.tags: force\n \n \n # Generate documentation.\n-#\n-# The generated Texinfo files for the User Guide are stored in $(srcdir).\n-#\n-# ??? There is some ugliness here in that the aforementioned generated\n-# documentation files depend on executables in the build tree.  Since the\n-# source directory is supposed to be read only it is difficult to ship a source\n-# tree with the documentation already generated such that \"make\" will not\n-# attempt to rebuild them.\n-# \n-# As a compromise this only will execute with --enable-maintainer mode.\n-#\n-# If gnu make 3.80 is ever made a requirement to build, then this could be\n-# avoided using an order-only dependency:\n-#\n-# $(srcdir)/ada/gnat_ug_unx.texi: \\\n-#     ada/gnat_ug.texi ada/ug_words | ada/doctools/xgnatug$(build_exeext)\n \n-ifndef MAINT\n-ada/doctools/xgnatug$(build_exeext): ada/xgnatug.adb\n+ada/doctools/xgnatugn$(build_exeext): ada/xgnatugn.adb\n \t-$(MKDIR) ada/doctools\n-\tcp $^ ada/doctools\n-\tcd ada/doctools && gnatmake -q xgnatug\n-\n-$(srcdir)/ada/gnat_ug_unx.texi : ada/doctools/xgnatug$(build_exeext) \\\n-\t$(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words\n-\tada/doctools/xgnatug unx $(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words $(srcdir)/ada/gnat_ug_unx.texi\n+\t$(CP) $^ ada/doctools\n+\tcd ada/doctools && gnatmake -q xgnatugn\n \n-$(srcdir)/ada/gnat_ug_vms.texi : ada/doctools/xgnatug$(build_exeext) \\\n-\t$(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words\n-\tada/doctools/xgnatug vms $(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words $(srcdir)/ada/gnat_ug_vms.texi\n+doc/gnat_ugn_unw.texi : ada/doctools/xgnatugn$(build_exeext) \\\n+\t$(srcdir)/ada/gnat_ugn.texi $(srcdir)/ada/ug_words\n+\tada/doctools/xgnatugn unw $(srcdir)/ada/gnat_ugn.texi $(srcdir)/ada/ug_words doc/gnat_ugn_unw.texi\n \n-$(srcdir)/ada/gnat_ug_vxw.texi : ada/doctools/xgnatug$(build_exeext) \\\n-\t$(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words\n-\tada/doctools/xgnatug vxworks $(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words $(srcdir)/ada/gnat_ug_vxw.texi\n-\n-$(srcdir)/ada/gnat_ug_wnt.texi : ada/doctools/xgnatug$(build_exeext) \\\n-\t$(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words\n-\tada/doctools/xgnatug wnt $(srcdir)/ada/gnat_ug.texi $(srcdir)/ada/ug_words $(srcdir)/ada/gnat_ug_wnt.texi\n-endif\n-\n-doc/gnat_ug_unx.info: $(srcdir)/ada/gnat_ug_unx.texi \\\n+doc/gnat_ugn_unw.info: doc/gnat_ugn_unw.texi \\\n    $(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n \tif [ x$(BUILD_INFO) = xinfo ]; then \\\n \t  rm -f $(@)*; \\\n \t  $(MAKEINFO) $(MAKEINFOFLAGS) -I$(docdir)/include \\\n             -I$(srcdir)/ada -o $@ $<; \\\n \telse true; fi\n \t\n-doc/gnat_ug_vms.info: $(srcdir)/ada/gnat_ug_vms.texi \\\n-   $(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\tif [ x$(BUILD_INFO) = xinfo ]; then \\\n-\t  rm -f $(@)*; \\\n-\t  $(MAKEINFO) $(MAKEINFOFLAGS) -I$(docdir)/include \\\n-            -I$(srcdir)/ada -o $@ $<; \\\n-\telse true; fi\n-\n-doc/gnat_ug_vxw.info: $(srcdir)/ada/gnat_ug_vxw.texi \\\n-   $(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\tif [ x$(BUILD_INFO) = xinfo ]; then \\\n-\t  rm -f $(@)*; \\\n-\t  $(MAKEINFO) $(MAKEINFOFLAGS) -I$(docdir)/include \\\n-            -I$(srcdir)/ada -o $@ $<; \\\n-\telse true; fi\n-\n-doc/gnat_ug_wnt.info: $(srcdir)/ada/gnat_ug_wnt.texi \\\n-   $(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\tif [ x$(BUILD_INFO) = xinfo ]; then \\\n-\t  rm -f $(@)*; \\\n-\t  $(MAKEINFO) $(MAKEINFOFLAGS) -I$(docdir)/include \\\n-            -I$(srcdir)/ada -o$@ $<; \\\n-\telse true; fi\n-\n doc/gnat_rm.info: ada/gnat_rm.texi $(docdir)/include/fdl.texi \\\n    $(docdir)/include/gcc-common.texi\n \tif [ x$(BUILD_INFO) = xinfo ]; then \\\n@@ -538,38 +484,22 @@ doc/gnat-style.info: ada/gnat-style.texi $(docdir)/include/fdl.texi\n             -I$(srcdir)/ada -o $@ $<; \\\n \telse true; fi\n \n-ADA_INFOFILES = doc/gnat_ug_vms.info doc/gnat_ug_wnt.info \\\n-                doc/gnat_ug_unx.info doc/gnat_ug_vxw.info \\\n+ADA_INFOFILES = doc/gnat_ugn_unw.info \\\n                 doc/gnat_rm.info doc/gnat-style.info\n \n ada.info: $(ADA_INFOFILES)\n \n ada.srcinfo: $(ADA_INFOFILES)\n-\t-cp -p $^ $(srcdir)/doc\n+\t-$(CP) $^ $(srcdir)/doc\n \n-install-info:: $(DESTDIR)$(infodir)/gnat_ug_vms.info \\\n-\t$(DESTDIR)$(infodir)/gnat_ug_wnt.info \\\n-\t$(DESTDIR)$(infodir)/gnat_ug_unx.info \\\n-\t$(DESTDIR)$(infodir)/gnat_ug_vxw.info \\\n+install-info:: $(DESTDIR)$(infodir)/gnat_ugn_unw.info \\\n \t$(DESTDIR)$(infodir)/gnat_rm.info \\\n \t$(DESTDIR)$(infodir)/gnat-style.info\n \n-dvi:: doc/gnat_ug_vms.dvi doc/gnat_ug_wnt.dvi doc/gnat_ug_unx.dvi \\\n-      doc/gnat_ug_vxw.dvi doc/gnat_rm.dvi doc/gnat-style.dvi\n-\n-doc/gnat_ug_unx.dvi: $(srcdir)/ada/gnat_ug_unx.texi \\\n-\t$(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\t$(TEXI2DVI) -c -I $(abs_docdir)/include -o $@ $<\n-\n-doc/gnat_ug_vms.dvi: $(srcdir)/ada/gnat_ug_vms.texi \\\n-\t$(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\t$(TEXI2DVI) -c -I $(abs_docdir)/include -o $@ $<\n-\n-doc/gnat_ug_vxw.dvi: $(srcdir)/ada/gnat_ug_vxw.texi \\\n-\t$(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n-\t$(TEXI2DVI) -c -I $(abs_docdir)/include -o $@ $<\n+dvi:: doc/gnat_ugn_unw.dvi \\\n+      doc/gnat_rm.dvi doc/gnat-style.dvi\n \n-doc/gnat_ug_wnt.dvi: $(srcdir)/ada/gnat_ug_wnt.texi \\\n+doc/gnat_ugn_unw.dvi: doc/gnat_ugn_unw.texi \\\n \t$(docdir)/include/fdl.texi $(docdir)/include/gcc-common.texi\n \t$(TEXI2DVI) -c -I $(abs_docdir)/include -o $@ $<\n "}, {"sha": "4266f127a6561d92953f53d455925d07c7998aa9", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 322, "deletions": 120, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "patch": "@@ -7,8 +7,7 @@\n @c                                                                            o\n @c                      G N A T   C O D I N G   S T Y L E                     o\n @c                                                                            o\n-@c                                                                            o\n-@c          Copyright (C) 1992-2001 Ada Core Technologies, Inc.               o\n+@c          Copyright (C) 1992-2003 Ada Core Technologies, Inc.               o\n @c                                                                            o\n @c  GNAT is free software;  you can  redistribute it  and/or modify it under  o\n @c  terms of the  GNU General Public License as published  by the Free Soft-  o\n@@ -24,7 +23,11 @@\n @c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n \n @setfilename gnat-style.info\n+\n @settitle GNAT Coding Style\n+@setchapternewpage odd\n+\n+\n @dircategory Programming\n @direntry\n * gnat-style: (gnat-style).      GNAT Coding Style\n@@ -35,24 +38,63 @@\n @end macro\n @c %**end of header\n \n-@ifinfo\n-     @center GNAT Coding Style\n-\n-     @center A guide for GNAT developers\n-     Copyright (C) 1992-2001 Ada Core Technologies, Inc.\n-@end ifinfo\n-\n @titlepage\n @sp 10\n @title GNAT Coding Style\n-@subtitle A guide for GNAT developers\n+@flushright\n+@titlefont{A Guide for GNAT Developers}\n+@end flushright\n+@sp 2\n+@subtitle GNAT, The GNU Ada 95 Compiler\n+@subtitle Document revision level $Revision: 1.8 $\n+@subtitle Date:  $Date: 2003/05/24 21:29:30 $\n+\n @author Ada Core Technologies, Inc.\n+\n+@page\n+@vskip 0pt plus 1filll\n+\n+Copyright @copyright{} 1995-2003, Free Software Foundation\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1\n+or any later version published by the Free Software Foundation;\n+with the Invariant Sections being ``GNU Free Documentation License'', with the\n+Front-Cover Texts being\n+``GNAT Coding Style'' and ``A Guide for GNAT Developers'',\n+and with no Back-Cover Texts.\n+A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n @end titlepage\n+\n @raisesections\n \n @node    Top,       General,         , (dir)\n @comment node-name, next,    previous, up\n \n+@ifinfo\n+@noindent\n+GNAT Coding Style@*\n+A Guide for GNAT Developers\n+@sp 2\n+@noindent\n+GNAT, The GNU Ada 95 Compiler@*\n+Document revision level $Revision: 1.8 $@*\n+Date:  $Date: 2003/05/24 21:29:30 $\n+\n+@noindent\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.1\n+or any later version published by the Free Software Foundation;\n+with the Invariant Sections being ``GNU Free Documentation License'', with the\n+Front-Cover Texts being\n+``GNAT Coding Style'' and ``A Guide for GNAT Developers''\n+and with no Back-Cover Texts.\n+A copy of the license is included in the section entitled\n+``GNU Free Documentation License''.\n+@end ifinfo\n+\n+\n @menu\n * General::\n * Lexical Elements::\n@@ -62,6 +104,8 @@\n * Subprograms::\n * Packages::\n * Program Structure::\n+* GNU Free Documentation License::\n+* Index::\n @end menu\n \n @c  -------------------------------------------------------------------------\n@@ -75,31 +119,40 @@ readability of the code.  This document has been written to help\n maintain this consistent style, while having a large group of developers\n work on the compiler.\n \n-@noindent\n For the coding style in the C parts of the compiler and run time,\n see the GNU Coding Guidelines.\n \n-@noindent\n-This document is structured after the Ada Reference manual.\n+This document is structured after the @cite{Ada Reference Manual}.\n Those familiar with that document should be able to quickly\n lookup style rules for particular constructs.\n \n+\n @c  -------------------------------------------------------------------------\n @node    Lexical Elements, Declarations and Types, General, Top\n @section Lexical Elements\n @c  -------------------------------------------------------------------------\n+@cindex Lexical elements\n \n @subsection Character Set and Separators\n @c  -------------------------------------------------------------------------\n+@cindex Character set\n+@cindex ASCII\n+@cindex Separators\n+@cindex End-of-line\n+@cindex Line length\n+@cindex Indentation\n \n @itemize @bullet\n @item\n The character set used should be plain 7-bit ASCII@.\n The only separators allowed are space and the end-of-line sequence.\n-No other control character or format effector (such as HT, VT, FF)\n+No other control character or format effector (such as @code{HT},\n+@code{VT}, @code{FF})\n should be used.\n-The normal end-of-line sequence is used, which may be LF, CR/LF or CR,\n-depending on the host system.  An optional SUB (16#1A#) may be present as the\n+The normal end-of-line sequence is used, which may be\n+@code{LF}, @code{CR/LF} or @code{CR},\n+depending on the host system.  An optional @code{SUB}\n+(@code{16#1A#}) may be present as the\n last character in the file on hosts using that character as file terminator.\n \n @item\n@@ -113,24 +166,31 @@ separator.\n Lines must not have trailing blanks.\n \n @item\n-Indentation is 3 characters per level for if statements, loops, case\n-statements.  For exact information on required spacing between lexical\n+Indentation is 3 characters per level for @code{if} statements, loops, and\n+@code{case} statements.\n+For exact information on required spacing between lexical\n elements, see file @file{style.adb}.\n-\n+@cindex @file{style.adb} file\n @end itemize\n \n+\n @subsection Identifiers\n @c  -------------------------------------------------------------------------\n @itemize @bullet\n+@cindex Identifiers\n+\n @item\n Identifiers will start with an upper case letter, and each letter following\n-an underscore will be upper case.  Short acronyms may be all upper case.\n+an underscore will be upper case.\n+@cindex Casing (for identifiers)\n+Short acronyms may be all upper case.\n All other letters are lower case.\n An exception is for identifiers matching a foreign language.  In particular,\n we use all lower case where appropriate for C@.\n \n @item\n Use underscores to separate words in an identifier.\n+@cindex Underscores\n \n @item Try to limit your use of abbreviations in identifiers.\n It is ok to make a few abbreviations, explain what they mean, and then\n@@ -139,22 +199,25 @@ example is the @code{ALI} word which stands for Ada Library\n Information and is by convention always written in upper-case when\n used in entity names.\n \n-@smallexample\n+@smallexample @c adanocomment\n        procedure Find_ALI_Files;\n @end smallexample\n \n @item\n-Don't use the variable @samp{I}, use @samp{J} instead, @samp{I} is too\n-easily mixed up with @samp{1} in some fonts.  Similarly don't use the\n-variable @samp{O}, which is too easily mixed up with the number @samp{0}.\n+Don't use the variable name @code{I}, use @code{J} instead; @code{I} is too\n+easily confused with @code{1} in some fonts.  Similarly don't use the\n+variable @code{O}, which is too easily mistaken for the number @code{0}.\n @end itemize\n \n @subsection Numeric Literals\n @c  -------------------------------------------------------------------------\n+@cindex Numeric literals\n+\n @itemize @bullet\n @item\n Numeric literals should include underscores where helpful for\n readability.\n+@cindex Underscores\n \n @smallexample\n       1_000_000\n@@ -165,77 +228,89 @@ readability.\n \n @subsection Reserved Words\n @c  -------------------------------------------------------------------------\n+@cindex Reserved words\n+\n @itemize @bullet\n @item\n Reserved words use all lower case.\n+@cindex Casing (for reserved words)\n \n-@smallexample\n+@smallexample @c adanocomment\n        return else\n @end smallexample\n \n @item\n-The words @samp{Access}, @samp{Delta} and @samp{Digits} are\n+The words @code{Access}, @code{Delta} and @code{Digits} are\n capitalized when used as @syntax{attribute_designator}.\n @end itemize\n \n @subsection Comments\n @c  -------------------------------------------------------------------------\n+@cindex Comments\n \n @itemize @bullet\n @item\n-Comment start with @samp{--  } (i.e.@: @samp{--} followed by two spaces).\n+A comment starts with @code{--} followed by two spaces).\n The only exception to this rule (i.e.@: one space is tolerated) is when the\n-comment ends with @samp{ --}.\n-It also accepted to have only one space between @samp{--} and the start\n+comment ends with a single space followed by @code{--}.\n+It is also acceptable to have only one space between @code{--} and the start\n of the comment when the comment is at the end of a line,\n after some Ada code.\n \n @item\n Every sentence in a comment should start with an upper-case letter (including\n the first letter of the comment).\n+@cindex Casing (in comments)\n \n @item\n When declarations are commented with ``hanging'' comments, i.e.@:\n comments after the declaration, there is no blank line before the\n comment, and if it is absolutely necessary to have blank lines within\n-the comments these blank lines @emph{do} have a @samp{--} (unlike the\n+the comments these blank lines @emph{do} have a @code{--} (unlike the\n normal rule, which is to use entirely blank lines for separating\n-comment paragraphs).  The comment start at same level of indentation\n-as code they are commenting.\n+comment paragraphs).  The comment starts at same level of indentation\n+as code it is commenting.\n+@cindex Blank lines (in comments)\n+@cindex Indentation\n \n-@smallexample\n+@smallexample @c adanocomment\n        z : Integer;\n-       --  @r{Integer value for storing value of} z\n+       --  Integer value for storing value of z\n        --\n-       --  @r{The previous line was a blank line.}\n+       --  The previous line was a blank line.\n @end smallexample\n \n @item\n-Comments that are dubious or incomplete or comment on possibly\n-wrong or incomplete code should be preceded or followed by @samp{???}@.\n+Comments that are dubious or incomplete, or that comment on possibly\n+wrong or incomplete code, should be preceded or followed by @code{???}@.\n \n @item\n-Comments in a subprogram body must generally be surrounded by blank lines,\n-except after a @samp{begin}:\n+Comments in a subprogram body must generally be surrounded by blank lines.\n+An exception is a comment that follows a line containing a single keyword\n+(@code{begin}, @code{else}, @code{loop}):\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n        begin\n-          --  @r{Comment for the next statement}\n+          --  Comment for the next statement\n \n           A := 5;\n \n-          --  @r{Comment for the B statement}\n+          --  Comment for the B statement\n \n           B := 6;\n+       end;\n+@end group\n @end smallexample\n \n @item\n In sequences of statements, comments at the end of the lines should be\n aligned.\n+@cindex Alignment (in comments)\n \n-@smallexample\n-        My_Identifier := 5;      --  @r{First comment}\n-        Other_Id := 6;           --  @r{Second comment}\n+@smallexample @c adanocomment\n+        My_Identifier := 5;      --  First comment\n+        Other_Id := 6;           --  Second comment\n @end smallexample\n \n @item\n@@ -244,7 +319,7 @@ period.  Comments taking more than a line are punctuated in the normal\n manner.\n \n @item\n-Comments should focus on why instead of what.\n+Comments should focus on @emph{why} instead of @emph{what}.\n Descriptions of what subprograms do go with the specification.\n \n @item\n@@ -254,20 +329,22 @@ depend on the names of things.  The names are supplementary, not\n sufficient, as comments.\n \n @item\n-Do NOT put two spaces after periods in comments.\n+@emph{Do not} put two spaces after periods in comments.\n @end itemize\n \n @c  -------------------------------------------------------------------------\n @node    Declarations and Types, Expressions and Names, Lexical Elements,Top\n @section Declarations and Types\n @c  -------------------------------------------------------------------------\n+@cindex Declarationa and Types\n \n @itemize @bullet\n @item\n In entity declarations, colons must be surrounded by spaces.  Colons\n should be aligned.\n+@cindex Alignment (in declarations)\n \n-@smallexample\n+@smallexample @c adanocomment\n         Entity1   : Integer;\n         My_Entity : Integer;\n @end smallexample\n@@ -281,10 +358,11 @@ All local subprograms in a subprogram or package body should be declared\n before the first local subprogram body.\n \n @item\n-Don't declare local entities that hide global entities.\n+Do not declare local entities that hide global entities.\n+@cindex Hiding of outer entities\n \n @item\n-Don't declare multiple variables in one declaration that spans lines.\n+Do not declare multiple variables in one declaration that spans lines.\n Start a new declaration on each line, instead.\n \n @item\n@@ -303,14 +381,16 @@ one context, where comments explain their purpose.\n @node    Expressions and Names, Statements, Declarations and Types, Top\n @section Expressions and Names\n @c  -------------------------------------------------------------------------\n+@cindex Expressions and names\n \n @itemize @bullet\n \n @item\n Every operator must be surrounded by spaces, except for the\n exponentiation operator.\n+@cindex Operators\n \n-@smallexample\n+@smallexample @c adanocomment\n        E := A * B**2 + 3 * (C - D);\n @end smallexample\n \n@@ -320,7 +400,8 @@ When folding a long line, fold before an operator, not after.\n @item\n Use parentheses where they clarify the intended association of operands\n with operators:\n-@smallexample\n+@cindex Parenthesization of expressions\n+@smallexample @c adanocomment\n        (A / B) * C\n @end smallexample\n @end itemize\n@@ -329,9 +410,12 @@ with operators:\n @node    Statements, Subprograms, Expressions and Names, Top\n @section Statements\n @c  -------------------------------------------------------------------------\n+@cindex Statements\n \n @subsection Simple and Compound Statements\n @c  -------------------------------------------------------------------------\n+@cindex Simple and compound statements\n+\n @itemize @bullet\n @item\n Use only one statement or label per line.\n@@ -342,155 +426,193 @@ groups or separated from surrounding code using a blank line.\n \n @subsection If Statements\n @c  -------------------------------------------------------------------------\n+@cindex @code{if} statement\n+\n @itemize @bullet\n @item\n-When the @samp{if}, @samp{elsif} or @samp{else} keywords fit on the\n-same line with the condition and the @samp{then} keyword, then the\n+When the @code{if}, @code{elsif} or @code{else} keywords fit on the\n+same line with the condition and the @code{then} keyword, then the\n statement is formatted as follows:\n+@cindex Alignment (in an @code{if} statement)\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n         if @var{condition} then\n            ...\n         elsif @var{condition} then\n            ...\n         else\n            ...\n         end if;\n+@end group\n @end smallexample\n \n @noindent\n-When the above layout is not possible, @samp{then} should be aligned\n-with @samp{if}, and conditions should preferably be split before an\n-@samp{and} or @samp{or} keyword a follows:\n+When the above layout is not possible, @code{then} should be aligned\n+with @code{if}, and conditions should preferably be split before an\n+@code{and} or @code{or} keyword a follows:\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n         if @var{long_condition_that_has_to_be_split}\n           and then @var{continued_on_the_next_line}\n         then\n            ...\n         end if;\n+@end group\n @end smallexample\n \n @noindent\n-The @samp{elsif}, @samp{else} and @samp{end if} always line up with\n-the @samp{if} keyword.  The preferred location for splitting the line\n-is before @samp{and} or @samp{or}.  The continuation of a condition is\n+The @code{elsif}, @code{else} and @code{end if} always line up with\n+the @code{if} keyword.  The preferred location for splitting the line\n+is before @code{and} or @code{or}.  The continuation of a condition is\n indented with two spaces or as many as needed to make nesting clear.\n-As exception, if conditions are closely related either of the\n+As an exception, if conditions are closely related either of the\n following is allowed:\n \n @smallexample\n+@group\n      if x = lakdsjfhlkashfdlkflkdsalkhfsalkdhflkjdsahf\n           or else\n         x = asldkjhalkdsjfhhfd\n           or else\n         x = asdfadsfadsf\n      then\n+       ...\n+     end if;\n+@end group\n \n+@group\n      if x = lakdsjfhlkashfdlkflkdsalkhfsalkdhflkjdsahf or else\n         x = asldkjhalkdsjfhhfd                         or else\n         x = asdfadsfadsf\n      then\n+       ...\n+     end if;\n+@end group\n @end smallexample\n \n @item\n-Conditions should use short-circuit forms (@samp{and then},\n-@samp{or else}).\n+Conditions should use short-circuit forms (@code{and then},\n+@code{or else}).\n+@cindex Short-circuit forms\n \n @item\n-Complex conditions in if statements are indented two characters:\n+Complex conditions in @code{if} statements are indented two characters:\n+@cindex Indentation (in @code{if} statements)\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       if @var{this_complex_condition}\n         and then @var{that_other_one}\n         and then @var{one_last_one}\n       then\n          ...\n+      end if;\n+@end group\n @end smallexample\n \n @item\n-Every @samp{if} block is preceded and followed by a blank line, except\n+Every @code{if} block is preceded and followed by a blank line, except\n where it begins or ends a @syntax{sequence_of_statements}.\n+@cindex Blank lines (in an @code{if} statement)\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n         A := 5;\n \n         if A = 5 then\n            null;\n         end if;\n \n         A := 6;\n+@end group\n @end smallexample\n @end itemize\n \n @subsection Case Statements\n-@itemize @bullet\n+@cindex @code{case} statements\n \n+@itemize @bullet\n @item\n-Layout is as below.  For long case statements, the extra indentation\n-can be saved by aligning the when clauses with the opening case.\n+Layout is as below.  For long @code{case} statements, the extra indentation\n+can be saved by aligning the @code{when} clauses with the opening @code{case}.\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n        case @var{expression} is\n           when @var{condition} =>\n              ...\n           when @var{condition} =>\n              ...\n        end case;\n+@end group\n @end smallexample\n @end itemize\n \n @subsection Loop Statements\n-@itemize @bullet\n+@cindex Loop statements\n \n+@itemize @bullet\n @noindent\n-When possible, have @samp{for} or @samp{while} on one line with the\n-condition and the @samp{loop} keyword.\n+When possible, have @code{for} or @code{while} on one line with the\n+condition and the @code{loop} keyword.\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n        for J in S'Range loop\n           ...\n        end loop;\n+@end group\n @end smallexample\n \n @noindent\n If the condition is too long, split the condition (see ``If\n-statements'' above) and align @samp{loop} with the @samp{for} or\n-@samp{while} keyword.\n+statements'' above) and align @code{loop} with the @code{for} or\n+@code{while} keyword.\n+@cindex Alignment (in a loop statement)\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       while @var{long_condition_that_has_to_be_split}\n         and then @var{continued_on_the_next_line}\n       loop\n          ...\n       end loop;\n+@end group\n @end smallexample\n \n @noindent\n If the @syntax{loop_statement} has an identifier, it is laid out as follows:\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       Outer : while not @var{condition} loop\n          ...\n       end Outer;\n+@end group\n @end smallexample\n @end itemize\n \n @subsection Block Statements\n-@itemize @bullet\n+@cindex Block statement\n \n+@itemize @bullet\n @item\n-The @samp{declare} (optional), @samp{begin} and @samp{end} statements\n+The @code{declare} (optional), @code{begin} and @code{end} words\n are aligned, except when the @syntax{block_statement} is named.  There\n-is a blank line before the @samp{begin} keyword:\n+is a blank line before the @code{begin} keyword:\n+@cindex Alignment (in a block statement)\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       Some_Block : declare\n          ...\n \n       begin\n          ...\n       end Some_Block;\n+@end group\n @end smallexample\n \n @end itemize\n@@ -499,80 +621,131 @@ is a blank line before the @samp{begin} keyword:\n @node    Subprograms, Packages, Statements, Top\n @section Subprograms\n @c  -------------------------------------------------------------------------\n-\n+@cindex Subprograms\n \n @subsection Subprogram Declarations\n @c  -------------------------------------------------------------------------\n @itemize @bullet\n \n @item\n-Do not write the @samp{in} for parameters, especially in functions:\n+Do not write the @code{in} for parameters, especially in functions:\n \n-@smallexample\n+@smallexample @c adanocomment\n       function Length (S : String) return Integer;\n @end smallexample\n \n @item\n-When the declaration line for a procedure or a function is too long, fold it.\n-In this case, align the colons, and, for functions, the result type.\n+When the declaration line for a procedure or a function is too long to fit\n+the entire declaration (including the keyword procedure or function) on a\n+single line, then fold it, putting a single parameter on a line, aligning\n+the colons, as in:\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n+     procedure Set_Heading\n+        (Source : String;\n+         Count  : Natural;\n+         Pad    : Character := Space;\n+         Fill   : Boolean   := True);\n+@end group\n+@end smallexample\n+\n+@noindent\n+In the case of a function, if the entire spec does not fit on one line, then\n+the return may appear after the last parameter, as in:\n+\n+@smallexample @c adanocomment\n+@group\n       function Head\n         (Source : String;\n          Count  : Natural;\n-         Pad    : Character := Space)\n-         return   String;\n+         Pad    : Character := Space) return String;\n+@end group\n @end smallexample\n \n-@item\n-The parameter list for a subprogram is preceded by a space:\n+@noindent\n+Or it may appear on its own as a separate line. This form is preferred when\n+putting the return on the same line as the last parameter would result in\n+an overlong line. The return type may optionally be aligned with the types\n+of the parameters (usually we do this aligning if it results only in a small\n+number of extra spaces, and otherwise we don't attempt to align). So two\n+alternative forms for the above spec are:\n+\n+@smallexample @c adanocomment\n+@group\n+      function Head\n+        (Source : String;\n+         Count  : Natural;\n+         Pad    : Character := Space)\n+         return   String;\n \n-@smallexample\n-        procedure Func (A : Integer);\n+      function Head\n+        (Source : String;\n+         Count  : Natural;\n+         Pad    : Character := Space)\n+         return String;\n+@end group\n @end smallexample\n \n @end itemize\n \n @subsection Subprogram Bodies\n @c  -------------------------------------------------------------------------\n-@itemize @bullet\n+@cindex Subprogram bodies\n \n+@itemize @bullet\n @item\n-The functions and procedures should always be sorted alphabetically in\n-a compilation unit.\n+Function and procedure bodies should usually be sorted alphabetically. Do\n+not attempt to sort them in some logical order by functionality. For a\n+sequence of subrpgroams specs, a general alphabetical sorting is also\n+usually appropriate, but occasionally it makes sense to group by major\n+function, with appropriate headers.\n \n @item\n All subprograms have a header giving the function name, with the following\n format:\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       -----------------\n       -- My_Function --\n       -----------------\n \n       procedure My_Function is\n       begin\n+        ...\n+      end My_Function;\n+@end group\n @end smallexample\n \n+@noindent\n Note that the name in the header is preceded by a single space,\n not two spaces as for other comments.\n \n @item\n Every subprogram body must have a preceding @syntax{subprogram_declaration}.\n \n @item\n-If there any declarations in a subprogram, the @samp{begin} keyword is\n-preceded by a blank line.\n+@cindex Blank lines (in subprogram bodies)\n+A sequence of declarations may optionally be separated from the following\n+begin by a blank line.  Just as we optionally allow blank lines in general\n+between declarations, this blank line should be present only if it improves\n+readability. Generally we avoid this blank line if the declarative part is\n+small (one or two lines) and we include it if the declarative part is long.\n \n @item\n If the declarations in a subprogram contain at least one nested\n-subprogram body, then just before the @samp{begin} of the enclosing\n-subprogram, there is a line:\n+subprogram body, then just before the @code{begin} of the enclosing\n+subprogram, there is a comment line and a blank line:\n \n-@smallexample\n-        --  @r{Start of processing for @var{Enclosing_Subprogram}}\n+@smallexample @c adanocomment\n+@group\n+    --  Start of processing for @var{Enclosing_Subprogram}\n \n-\tbegin\n+    begin\n+      ...\n+    end @var{Enclosing_Subprogram};\n+@end group\n @end smallexample\n \n @end itemize\n@@ -581,36 +754,44 @@ subprogram, there is a line:\n @node    Packages, Program Structure, Subprograms, Top\n @section Packages and Visibility Rules\n @c  -------------------------------------------------------------------------\n+@cindex Packages\n \n @itemize @bullet\n-\n @item\n All program units and subprograms have their name at the end:\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       package P is\n          ...\n       end P;\n+@end group\n @end smallexample\n \n @item\n-We will use the style of @samp{use}-ing @samp{with}-ed packages, with\n+We will use the style of @code{use}-ing @code{with}-ed packages, with\n the context clauses looking like:\n+@cindex @code{use} clauses\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       with A; use A;\n       with B; use B;\n+@end group\n @end smallexample\n \n @item\n Names declared in the visible part of packages should be\n-unique, to prevent name clashes when the packages are @samp{use}d.\n+unique, to prevent name clashes when the packages are @code{use}d.\n+@cindex Name clash avoidance\n \n-@smallexample\n+@smallexample @c adanocomment\n+@group\n       package Entity is\n          type Entity_Kind is ...;\n-\t ...\n+         ...\n       end Entity;\n+@end group\n @end smallexample\n \n @item\n@@ -619,28 +800,49 @@ should be the first thing in a @syntax{program_unit}.\n @end itemize\n \n @c  -------------------------------------------------------------------------\n-@node    Program Structure,, Packages, Top\n+@node    Program Structure, GNU Free Documentation License, Packages, Top\n @section Program Structure and Compilation Issues\n @c  -------------------------------------------------------------------------\n+@cindex Program structure\n \n @itemize @bullet\n @item\n Every GNAT source file must be compiled with the @option{-gnatg}\n-switch to check the coding style (Note that you should look at\n+switch to check the coding style.\n+(Note that you should look at\n @file{style.adb} to see the lexical rules enforced by\n @option{-gnatg}).\n+@cindex @option{-gnatg} option (to gcc)\n+@cindex @file{style.adb} file\n \n @item\n Each source file should contain only one compilation unit.\n \n @item\n-Filenames should be 8 characters or less followed by the @samp{.adb}\n-extension for a body or @samp{.ads} for a spec.\n+Filenames should be 8 or fewer characters, followed by the @code{.adb}\n+extension for a body or @code{.ads} for a spec.\n+@cindex File name length\n \n @item\n-Unit names should be distinct when krunched to 8 characters\n+Unit names should be distinct when ``krunch''ed to 8 characters\n (see @file{krunch.ads}) and the filenames should match the unit name,\n except that they are all lower case.\n+@cindex @file{krunch.ads} file\n @end itemize\n \n+\n+@c **********************************\n+@c * GNU Free Documentation License *\n+@c **********************************\n+@include fdl.texi\n+@c GNU Free Documentation License\n+@cindex GNU Free Documentation License\n+\n+@node Index,,GNU Free Documentation License, Top\n+@unnumberedsec Index\n+\n+@printindex cp\n+\n+@contents\n+\n @bye"}, {"sha": "6c92458fda48cf666392929a7cff6e06c7b20a19", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3595, "deletions": 1473, "changes": 5068, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906"}, {"sha": "8904646fc09d7435503a7257c054c90985dceed0", "filename": "gcc/ada/gnat_ug_unx.texi", "status": "removed", "additions": 0, "deletions": 18802, "changes": 18802, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_unx.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_unx.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug_unx.texi?ref=1c19eaccf2f1a4f1471561aed1d333f058908bd3"}, {"sha": "a9b5b971ee0d331de9985a4a457312b996afd119", "filename": "gcc/ada/gnat_ug_vms.texi", "status": "removed", "additions": 0, "deletions": 19073, "changes": 19073, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_vms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_vms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug_vms.texi?ref=1c19eaccf2f1a4f1471561aed1d333f058908bd3"}, {"sha": "e486234fc7b45c6de0c024b7895ce8a158d730d7", "filename": "gcc/ada/gnat_ug_vxw.texi", "status": "removed", "additions": 0, "deletions": 20089, "changes": 20089, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_vxw.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_vxw.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug_vxw.texi?ref=1c19eaccf2f1a4f1471561aed1d333f058908bd3"}, {"sha": "d6a10750e9c30dc7764db160aa25d52f32c3ce66", "filename": "gcc/ada/gnat_ug_wnt.texi", "status": "removed", "additions": 0, "deletions": 20665, "changes": 20665, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_wnt.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c19eaccf2f1a4f1471561aed1d333f058908bd3/gcc%2Fada%2Fgnat_ug_wnt.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug_wnt.texi?ref=1c19eaccf2f1a4f1471561aed1d333f058908bd3"}, {"sha": "a4b7a917ce8ef41f94854a4d034e0cadf5ecd319", "filename": "gcc/ada/gnat_ugn.texi", "status": "renamed", "additions": 15570, "deletions": 12967, "changes": 28537, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "previous_filename": "gcc/ada/gnat_ug.texi"}, {"sha": "e83e2e9919cae19502d442964c18193b42a60596", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 172, "deletions": 134, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "patch": "@@ -1,134 +1,172 @@\n-Ada_Switches            ^ Ada_Qualifiers\n-b_                      ^ B_\n-b~                      ^ B$\n-cc1                     ^ CC1\n-Cc1                     ^ CC1\n-Default_Switches        ^ Default_Qualifiers\n-emacs                   ^ EMACS\n-Emacs                   ^ EMACS\n-gdb                     ^ GDB\n-Gdb                     ^ GDB\n-gnat1                   ^ GNAT1\n-Gnat1                   ^ GNAT1\n-gnatbind                ^ GNAT BIND\n-Gnatbind                ^ GNAT BIND\n-gnatchop                ^ GNAT CHOP\n-Gnatchop                ^ GNAT CHOP\n-gnatelim                ^ GNAT ELIM\n-Gnatelim                ^ GNAT ELIM\n-gnatf                   ^ GNAT XREF\n-Gnatf                   ^ GNAT XREF\n-gnatfind                ^ GNAT FIND\n-Gnatfind                ^ GNAT FIND\n-gnatkr                  ^ GNAT KRUNCH\n-Gnatkr                  ^ GNAT KRUNCH\n-gnatlbr                 ^ GNAT LIBRARY\n-Gnatlbr                 ^ GNAT LIBRARY\n-gnatlink                ^ GNAT LINK\n-Gnatlink                ^ GNAT LINK\n-gnatls                  ^ GNAT LIST\n-Gnatls                  ^ GNAT LIST\n-gnatmake                ^ GNAT MAKE\n-Gnatmake                ^ GNAT MAKE\n-gnatprep                ^ GNAT PREPROCESS\n-Gnatprep                ^ GNAT PREPROCESS\n-gnatpsta                ^ GNAT STANDARD\n-Gnatpsta                ^ GNAT STANDARD\n-gnatstub                ^ GNAT STUB\n-Gnatstub                ^ GNAT STUB\n-gnatxref                ^ GNAT XREF\n-Gnatxref                ^ GNAT XREF\n-gcc                     ^ GNAT COMPILE\n-gcc -c                  ^ GNAT COMPILE\n--gnata                  ^ /CHECKS=ASSERTIONS\n--gnatb                  ^ /WARNINGS=BRIEF\n--gnatc                  ^ /NOLOAD\n--gnatdc                 ^ /TRACE_UNITS\n--gnatdO                 ^ /REPORT_ERRORS=IMMEDIATE\n--gnatC                  ^ /COMPRESS_NAMES\n--gnatD                  ^ /XDEBUG\n--gnatE                  ^ /CHECKS=ELABORATION\n--gnatf                  ^ /REPORT_ERRORS=FULL\n--gnatF                  ^ /UPPERCASE_EXTERNALS\n--gnatg                  ^ /STYLE=GNAT\n--gnatG                  ^ /EXPAND_SOURCE\n--gnatk                  ^ /FILE_NAME_MAX_LENGTH\n--gnatl                  ^ /LIST\n--gnatm                  ^ /ERROR_LIMIT\n--gnatm2                 ^ /ERROR_LIMIT=2\n--gnatn                  ^ /INLINE=PRAGMA\n--gnato                  ^ /CHECKS=OVERFLOW\n--gnatp                  ^ /CHECKS=SUPPRESS_ALL\n--gnatP                  ^ /POLLING_ENABLE\n--gnatr                  ^ /STYLE=REFERENCE_MANUAL\n--gnatR                  ^ /REPRESENTATION_INFO\n--gnatR0                 ^ /REPRESENTATION_INFO=NONE\n--gnatR1                 ^ /REPRESENTATION_INFO=ARRAYS\n--gnatR2                 ^ /REPRESENTATION_INFO=OBJECTS\n--gnatR3                 ^ /REPRESENTATION_INFO=SYMBOLIC\n--gnatq                  ^ /TRY_SEMANTICS\n--gnatQ                  ^ /FORCE_ALI\n--gnats                  ^ /SYNTAX_ONLY\n--gnatt                  ^ /TREE_OUTPUT\n--gnatu                  ^ /UNITS_LIST\n--gnatU                  ^ /UNIQUE_ERROR_TAG\n--gnatv                  ^ /REPORT_ERRORS=VERBOSE\n--gnatV                  ^ /VALIDITY_CHECKING\n--gnatV0                 ^ /VALIDITY_CHECKING=NONE\n--gnatVd                 ^ /VALIDITY_CHECKING=RM\n--gnatVf                 ^ /VALIDITY_CHECKING=FULL\n--gnatwa                 ^ /WARNINGS=OPTIONAL\n--gnatwA                 ^ /WARNINGS=NOOPTIONAL\n--gnatwb                 ^ /WARNINGS=BIASED_ROUNDING\n--gnatwB                 ^ /WARNINGS=NOBIASED_ROUNDING\n--gnatwc                 ^ /WARNINGS=CONDITIONALS\n--gnatwC                 ^ /WARNINGS=NOCONDITIONALS\n--gnatwd                 ^ /WARNINGS=IMPLICIT_DEREFERENCE\n--gnatwD                 ^ /WARNINGS=NOIMPLICIT_DEREFERENCE\n--gnatwe                 ^ /WARNINGS=ERROR\n--gnatwf                 ^ /WARNINGS=UNREFERENCED_FORMALS\n--gnatwF                 ^ /WARNINGS=NOUNREFERENCED_FORMALS\n--gnatwh                 ^ /WARNINGS=HIDING\n--gnatwH                 ^ /WARNINGS=NOHIDING\n--gnatwi                 ^ /WARNINGS=IMPLEMENTATION\n--gnatwI                 ^ /WARNINGS=NOIMPLEMENTATION\n--gnatwl                 ^ /WARNINGS=ELABORATION\n--gnatwL                 ^ /WARNINGS=NOELABORATION\n--gnatwo                 ^ /WARNINGS=OVERLAYS\n--gnatwO                 ^ /WARNINGS=NOOVERLAYS\n--gnatwr                 ^ /WARNINGS=REDUNDANT\n--gnatwR                 ^ /WARNINGS=NOREDUNDANT\n--gnatws                 ^ /WARNINGS=SUPPRESS\n--gnatwu                 ^ /WARNINGS=UNUSED\n--gnatwU                 ^ /WARNINGS=NOUNUSED\n--gnatW8                 ^ /WIDE_CHARACTER_ENCODING=UTF8\n--gnatW?                 ^ /WIDE_CHARACTER_ENCODING=?\n--gnaty                  ^ /STYLE=\n--gnatzr                 ^ /DISTRIBUTION_STUBS=RECEIVER\n--gnatzs                 ^ /DISTRIBUTION_STUBS=SENDER\n--gnat83                 ^ /83\n--gnat95                 ^ /95\n--gnatx                  ^ /XREF=SUPPRESS\n--gnatX                  ^ /EXTENSIONS_ALLOWED\n---RTS                   ^ /RUNTIME_SYSTEM\n-mode_switches           ^ mode_qualifiers\n-switch                  ^ qualifier\n-switches                ^ qualifiers\n-Switch                  ^ Qualifier\n-Switches                ^ Qualifiers\n-switch-related          ^ qualifier-related\n-stdout                  ^ SYS$OUTPUT\n-stderr                  ^ SYS$ERROR\n--bargs                  ^ /BINDER_QUALIFIERS\n--cargs                  ^ /COMPILER_QUALIFIERS\n--largs                  ^ /LINKER_QUALIFIERS\n--aIDIR                  ^ /SOURCE_SEARCH=direc\n--aODIR                  ^ /OBJECT_SEARCH=direc\n--IDIR                   ^ /SEARCH=direc\n--nostdinc               ^ /NOSTD_INCLUDES\n--nostdlib               ^ /NOSTD_LIBRARIES\n--pFILE                  ^ /PROJECT=file\n--O0                     ^ /OPTIMIZE=NONE\n--O1                     ^ /OPTIMIZE=SOME\n--O2                     ^ /OPTIMIZE=ALL\n--O3                     ^ /OPTIMIZE=INLINING\n+b_              ^ B_\n+b~              ^ B$\n+cc1             ^ CC1\n+Cc1             ^ CC1\n+emacs           ^ EMACS\n+Emacs           ^ EMACS\n+gdb             ^ GDB\n+Gdb             ^ GDB\n+gnat1           ^ GNAT1\n+Gnat1           ^ GNAT1\n+gnatbind        ^ GNAT BIND\n+Gnatbind        ^ GNAT BIND\n+gnatchop        ^ GNAT CHOP\n+Gnatchop        ^ GNAT CHOP\n+gnatclean       ^ GNAT CLEAN\n+Gnatclean       ^ GNAT CLEAN\n+gnatelim        ^ GNAT ELIM\n+Gnatelim        ^ GNAT ELIM\n+gnatf           ^ GNAT XREF\n+Gnatf           ^ GNAT XREF\n+gnatfind        ^ GNAT FIND\n+Gnatfind        ^ GNAT FIND\n+gnatkr          ^ GNAT KRUNCH\n+Gnatkr          ^ GNAT KRUNCH\n+gnatlbr         ^ GNAT LIBRARY\n+Gnatlbr         ^ GNAT LIBRARY\n+gnatlink        ^ GNAT LINK\n+Gnatlink        ^ GNAT LINK\n+gnatls          ^ GNAT LIST\n+Gnatls          ^ GNAT LIST\n+gnatmake        ^ GNAT MAKE\n+Gnatmake        ^ GNAT MAKE\n+gnatname        ^ GNAT NAME\n+Gnatname        ^ GNAT NAME\n+gnatpp          ^ GNAT PRETTY\n+Gnatpp          ^ GNAT PRETTY\n+gnatprep        ^ GNAT PREPROCESS\n+Gnatprep        ^ GNAT PREPROCESS\n+gnatstub        ^ GNAT STUB\n+Gnatstub        ^ GNAT STUB\n+gnatxref        ^ GNAT XREF\n+Gnatxref        ^ GNAT XREF\n+gcc             ^ GNAT COMPILE\n+gcc -c          ^ GNAT COMPILE\n+-fno-inline     ^ /INLINE=SUPPRESS\n+-fstack-check   ^ /CHECKS=STACK\n+-fno-strict-aliasing ^ /OPTIMIZE=NO_STRICT_ALIASING\n+-gnata          ^ /CHECKS=ASSERTIONS\n+-gnatA          ^ /NO_GNAT_ADC\n+-gnatb          ^ /REPORT_ERRORS=BRIEF\n+-gnatc          ^ /NOLOAD\n+-gnatdc         ^ /TRACE_UNITS\n+-gnatdO         ^ /REPORT_ERRORS=IMMEDIATE\n+-gnatC          ^ /COMPRESS_NAMES\n+-gnatD          ^ /XDEBUG\n+-gnatec         ^ /CONFIGURATION_PRAGMAS_FILE\n+-gnateD         ^ /SYMBOL_PREPROCESSING\n+-gnatef         ^ /FULL_PATH_IN_BRIEF_MESSAGES\n+-gnatem         ^ /MAPPING_FILE\n+-gnatep         ^ /DATA_PREPROCESSING\n+-gnatE          ^ /CHECKS=ELABORATION\n+-gnatf          ^ /REPORT_ERRORS=FULL\n+-gnatF          ^ /UPPERCASE_EXTERNALS\n+-gnatg          ^ /STYLE_CHECKS=GNAT\n+-gnatG          ^ /EXPAND_SOURCE\n+-gnatk          ^ /FILE_NAME_MAX_LENGTH\n+-gnatl          ^ /LIST\n+-gnatL          ^ /LONGJMP_SETJMP\n+-gnatm          ^ /ERROR_LIMIT\n+-gnatm2         ^ /ERROR_LIMIT=2\n+-gnatn          ^ /INLINE=PRAGMA\n+-gnatN          ^ /INLINE=FULL\n+-gnato          ^ /CHECKS=OVERFLOW\n+-gnatp          ^ /CHECKS=SUPPRESS_ALL\n+-gnatP          ^ /POLLING\n+-gnatR          ^ /REPRESENTATION_INFO\n+-gnatR0         ^ /REPRESENTATION_INFO=NONE\n+-gnatR1         ^ /REPRESENTATION_INFO=ARRAYS\n+-gnatR2         ^ /REPRESENTATION_INFO=OBJECTS\n+-gnatR3         ^ /REPRESENTATION_INFO=SYMBOLIC\n+-gnatq          ^ /TRY_SEMANTICS\n+-gnatQ          ^ /FORCE_ALI\n+-gnats          ^ /SYNTAX_ONLY\n+-gnatS          ^ /PRINT_STANDARD\n+-gnatt          ^ /TREE_OUTPUT\n+-gnatu          ^ /UNITS_LIST\n+-gnatU          ^ /UNIQUE_ERROR_TAG\n+-gnatv          ^ /REPORT_ERRORS=VERBOSE\n+-gnatV          ^ /VALIDITY_CHECKING\n+-gnatVa         ^ /VALIDITY_CHECKING=ALL\n+-gnatVc         ^ /VALIDITY_CHECKING=COPIES\n+-gnatVd         ^ /VALIDITY_CHECKING=DEFAULT\n+-gnatVD         ^ /VALIDITY_CHECKING=NODEFAULT\n+-gnatVf         ^ /VALIDITY_CHECKING=FLOATS\n+-gnatVi         ^ /VALIDITY_CHECKING=IN_PARAMS\n+-gnatVm         ^ /VALIDITY_CHECKING=MOD_PARAMS\n+-gnatVn         ^ /VALIDITY_CHECKING=NONE\n+-gnatVo         ^ /VALIDITY_CHECKING=OPERANDS\n+-gnatVp         ^ /VALIDITY_CHECKING=PARAMETERS\n+-gnatVr         ^ /VALIDITY_CHECKING=RETURNS\n+-gnatVs         ^ /VALIDITY_CHECKING=SUBSCRIPTS\n+-gnatVt         ^ /VALIDITY_CHECKING=TESTS\n+-gnatw          ^ /WARNINGS\n+-gnatwa         ^ /WARNINGS=OPTIONAL\n+-gnatwA         ^ /WARNINGS=NOOPTIONAL\n+-gnatwc         ^ /WARNINGS=CONDITIONALS\n+-gnatwC         ^ /WARNINGS=NOCONDITIONALS\n+-gnatwd         ^ /WARNINGS=IMPLICIT_DEREFERENCE\n+-gnatwD         ^ /WARNINGS=NOIMPLICIT_DEREFERENCE\n+-gnatwe         ^ /WARNINGS=ERRORS\n+-gnatwf         ^ /WARNINGS=UNREFERENCED_FORMALS\n+-gnatwF         ^ /WARNINGS=NOUNREFERENCED_FORMALS\n+-gnatwg         ^ /WARNINGS=UNRECOGNIZED_PRAGMAS\n+-gnatwG         ^ /WARNINGS=NOUNRECOGNIZED_PRAGMAS\n+-gnatwh         ^ /WARNINGS=HIDING\n+-gnatwH         ^ /WARNINGS=NOHIDING\n+-gnatwi         ^ /WARNINGS=IMPLEMENTATION\n+-gnatwI         ^ /WARNINGS=NOIMPLEMENTATION\n+-gnatwj         ^ /WARNINGS=OBSOLESCENT\n+-gnatwJ         ^ /WARNINGS=NOOBSOLESCENT\n+-gnatwk         ^ /WARNINGS=CONSTANT_VARIABLES\n+-gnatwK         ^ /WARNINGS=NOCONSTANT_VARIABLES\n+-gnatwl         ^ /WARNINGS=ELABORATION\n+-gnatwL         ^ /WARNINGS=NOELABORATION\n+-gnatwm         ^ /WARNINGS=MODIFIED_UNREF\n+-gnatwM         ^ /WARNINGS=NOMODIFIED_UNREF\n+-gnatwn         ^ /WARNINGS=NORMAL\n+-gnatwo         ^ /WARNINGS=OVERLAYS\n+-gnatwO         ^ /WARNINGS=NOOVERLAYS\n+-gnatwp         ^ /WARNINGS=INEFFECTIVE_INLINE\n+-gnatwP         ^ /WARNINGS=NOINEFFECTIVE_INLINE\n+-gnatwr         ^ /WARNINGS=REDUNDANT\n+-gnatwR         ^ /WARNINGS=NOREDUNDANT\n+-gnatws         ^ /WARNINGS=SUPPRESS\n+-gnatwu         ^ /WARNINGS=UNUSED\n+-gnatwU         ^ /WARNINGS=NOUNUSED\n+-gnatwv         ^ /WARNINGS=VARIABLES_UNINITIALIZED\n+-gnatwV         ^ /WARNINGS=NOVARIABLES_UNINITIALIZED\n+-gnatwx         ^ /WARNINGS=IMPORT_EXPORT_PRAGMAS\n+-gnatwX         ^ /WARNINGS=NOIMPORT_EXPORT_PRAGMAS\n+-gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS\n+-gnatwZ         ^ /WARNINGS=NOUNCHECKED_CONVERSIONS\n+-gnatW8         ^ /WIDE_CHARACTER_ENCODING=UTF8\n+-gnatW?         ^ /WIDE_CHARACTER_ENCODING=?\n+-gnaty          ^ /STYLE_CHECKS\n+-gnatZ          ^ /ZERO_COST_EXCEPTIONS\n+-gnatzc         ^ /DISTRIBUTION_STUBS=CALLER\n+-gnatzr         ^ /DISTRIBUTION_STUBS=RECEIVER\n+-gnat83         ^ /83\n+-gnatx          ^ /XREF=SUPPRESS\n+-gnatX          ^ /EXTENSIONS_ALLOWED\n+--RTS           ^ /RUNTIME_SYSTEM\n+switch          ^ qualifier\n+switches        ^ qualifiers\n+Switch          ^ Qualifier\n+Switches        ^ Qualifiers\n+stdout          ^ SYS$OUTPUT\n+stderr          ^ SYS$ERROR\n+-bargs          ^ /BINDER_QUALIFIERS\n+-cargs          ^ /COMPILER_QUALIFIERS\n+-largs          ^ /LINKER_QUALIFIERS\n+-margs          ^ /MAKE_QUALIFIERS\n+-aIDIR          ^ /SOURCE_SEARCH=direc\n+-aODIR          ^ /OBJECT_SEARCH=direc\n+-IDIR           ^ /SEARCH=direc\n+-nostdinc       ^ /NOSTD_INCLUDES\n+-nostdlib       ^ /NOSTD_LIBRARIES\n+-pFILE          ^ /PROJECT=file\n+-O0             ^ /OPTIMIZE=NONE\n+-O1             ^ /OPTIMIZE=SOME\n+-O2             ^ /OPTIMIZE=ALL\n+-O3             ^ /OPTIMIZE=INLINING"}, {"sha": "5a992f4e8ed728954d1e943f39109c1f8db6a82d", "filename": "gcc/ada/xgnatugn.adb", "status": "renamed", "additions": 295, "deletions": 162, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fxgnatugn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906/gcc%2Fada%2Fxgnatugn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxgnatugn.adb?ref=7cd4527e38cd1f5a6b4bc63aa9af036fa7e37906", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                          GNAT SYSTEM UTILITIES                           --\n --                                                                          --\n---                              X G N A T U G                               --\n+--                             X G N A T U G N                              --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2002 Free Software Foundation, Inc.             --\n+--          Copyright (C) 2003-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -21,110 +21,118 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This utility is used to process the source of gnat_ug.texi to make a\n---  version suitable for running through standard Texinfo processor. It takes\n---  three arguments. The first one is the target type of the manual, which\n---  can be one of:\n---\n---     unx       GNU\n+--  This utility is used to process the source of gnat_ugn.texi to make a\n+--  version suitable for running through standard Texinfo processor. It is\n+--  invoked as follows:\n+\n+--  xgnatugn <target> <in-file> <word-list> [ <out-file> [ <warnings> ] ]\n+\n+--  1. <target> is the target type of the manual, which is one of:\n+\n+--     unw       Unix and Windows platforms\n --     vms       OpenVMS\n---     wnt       Mirosoft Windows\n---     vxworks   Embedded Platforms\n---\n---  The second parameter is the file name of the Texinfo file to be\n+\n+--  2. <in-file> is the file name of the Texinfo file to be\n --  preprocessed.\n---\n---  The third parameter is the name of the word list.  This file is used for\n---  rewriting the VMS edition.  Each line contains a word mapping: The source\n---  word in the first column, the target words in the second column.  The\n---  columns are separated by a '^' character.  When preprocessing for VMS, the\n---  first word is replaced with the second.  (Words consist of letters,\n+\n+--  3. <word-list> is the name of the word list file. This file is used for\n+--  rewriting the VMS edition. Each line contains a word mapping: The source\n+--  word in the first column, the target word in the second column. The\n+--  columns are separated by a '^' character. When preprocessing for VMS, the\n+--  first word is replaced with the second. (Words consist of letters,\n --  digits, and the four characters \"?-_~\". A sequence of multiple words can\n---  be replaced if they listed in the first column, separated by a single\n---  space character.  If multiple words are to be replaced, there has to be\n+--  be replaced if they are listed in the first column, separated by a single\n+--  space character. If multiple words are to be replaced, there must be a\n --  replacement for each prefix.)\n---\n---  The fourth parameter is the name of the output file.  It defaults to\n---  gnat_ug_unx.texi, gnat_ug_vms.texi, gnat_ug_wnt.texi or gnat_ug_vxw.texi,\n---  depending on the target.\n---\n+\n+--  4. <out-file> (optional) is the name of the output file. It defaults to\n+--  gnat_ugn_unw.texi or gnat_ugn_vms.texi, depending on the target.\n+\n+--  5. <warnings> (optional, and allowed only if <out-file> is explicit)\n+--  can be any string. If present, it indicates that warning messages are\n+--  to be output to Standard_Error. If absent, no warning messages are\n+--  generated.\n+\n --  The following steps are performed:\n---\n+\n --     In VMS mode\n---\n+\n --       Any occurrences of ^alpha^beta^ are replaced by beta. The sequence\n --       must fit on a single line, and there can only be one occurrence on a\n --       line.\n---\n+\n --       Any occurrences of a word in the Ug_Words list are replaced by the\n --       appropriate vms equivalents. Note that replacements do not occur\n --       within ^alpha^beta^ sequences.\n---\n+\n --       Any occurence of [filename].extension, where extension one of the\n --       following:\n---\n+\n --           \"o\", \"ads\", \"adb\", \"ali\", \"ada\", \"atb\", \"ats\", \"adc\", \"c\"\n---\n---\n+\n --       replaced by the appropriate VMS names (all upper case with .o\n --       replaced .OBJ). Note that replacements do not occur within\n --       ^alpha^beta^ sequences.\n---\n---     In UNX, VXWORKS or WNT mode\n---\n+\n+--     In UNW mode\n+\n --       Any occurrences of ^alpha^beta^ are replaced by alpha. The sequence\n --       must fit on a single line.\n---\n---     In all modes\n---\n+\n+--     In both modes\n+\n --       The sequence ^^^ is replaced by a single ^. This escape sequence\n --       must be used if the literal character ^ is to appear in the\n --       output. A line containing this escape sequence may not also contain\n --       a ^alpha^beta^ sequence.\n---\n+\n --       Recognize @ifset and @ifclear (this is because we have menu problems\n --       if we let makeinfo handle the ifset/ifclear pairs\n \n-with Ada.Command_Line; use Ada.Command_Line;\n-with Ada.Strings; use Ada.Strings;\n-with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n-with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n-with Ada.Strings.Maps; use Ada.Strings.Maps;\n+with Ada.Command_Line;           use Ada.Command_Line;\n+with Ada.Strings;                use Ada.Strings;\n+with Ada.Strings.Fixed;          use Ada.Strings.Fixed;\n+with Ada.Strings.Unbounded;      use Ada.Strings.Unbounded;\n+with Ada.Strings.Maps;           use Ada.Strings.Maps;\n with Ada.Strings.Maps.Constants; use Ada.Strings.Maps.Constants;\n-with Ada.Text_IO; use Ada.Text_IO;\n-with GNAT.Spitbol; use GNAT.Spitbol;\n+with Ada.Text_IO;                use Ada.Text_IO;\n+\n+with GNAT.Spitbol;               use GNAT.Spitbol;\n with GNAT.Spitbol.Table_VString; use GNAT.Spitbol.Table_VString;\n \n-procedure Xgnatug is\n+procedure Xgnatugn is\n \n    procedure Usage;\n-   --  Print usage information.  Invoked if an invalid command line is\n+   --  Print usage information. Invoked if an invalid command line is\n    --  encountered.\n \n    Output_File : File_Type;\n-   --  The preprocessed output is written to this file.\n+   --  The preprocessed output is written to this file\n \n    type Input_File is record\n       Name : VString;\n       Data : File_Type;\n       Line : Natural := 0;\n    end record;\n-   --  Records information on an input file.  Name and Line are used\n+   --  Records information on an input file. Name and Line are used\n    --  in error messages, Line is updated automatically by Get_Line.\n \n    function Get_Line (Input : access Input_File) return String;\n    --  Returns a line from Input and performs the necessary\n    --  line-oriented checks (length, character set, trailing spaces).\n \n-   Have_Errors : Boolean := False;\n+   Number_Of_Warnings : Natural := 0;\n+   Number_Of_Errors   : Natural := 0;\n+   Warnings_Enabled   : Boolean;\n+\n    procedure Error\n      (Input        : Input_File;\n       At_Character : Natural;\n       Message      : String);\n    procedure Error\n      (Input        : Input_File;\n       Message      : String);\n-   --  Prints a message reporting an error on line Input.Line.  If\n+   --  Prints a message reporting an error on line Input.Line. If\n    --  At_Character is not 0, indicate the exact character at which\n    --  the error occurs.\n \n@@ -140,45 +148,46 @@ procedure Xgnatug is\n    Dictionary_File : aliased Input_File;\n    procedure Read_Dictionary_File;\n    --  Dictionary_File is opened using the name given on the command\n-   --  line.  It contains the replacements for the Ug_Words list.\n+   --  line. It contains the replacements for the Ug_Words list.\n    --  Read_Dictionary_File reads Dictionary_File and fills the\n    --  Ug_Words table.\n \n    Source_File : aliased Input_File;\n    procedure Process_Source_File;\n    --  Source_File is opened using the name given on the command line.\n-   --  It contains the Texinfo source code.  Process_Source_File\n+   --  It contains the Texinfo source code. Process_Source_File\n    --  performs the necessary replacements.\n \n-   type Target_Type is (VMS, WNT, UNX, VXWORKS);\n+   type Target_Type is (UNW, VMS);\n    Target : Target_Type;\n-   --  The target for which preprocessing is performed: VMS, Windows,\n-   --  GNU, and embedded platforms (\"UNX\" and \"VXWORKS\" are misnomers).\n-   --  The Target avariable is initialized using the command line.\n+   --  The target for which preprocessing is performed:\n+   --  UNW (Unix and Windows) or VMS\n+   --  The Target variable is initialized using the command line.\n \n    Valid_Characters : constant Character_Set\n      := To_Set (Span => (' ',  '~'));\n    --  This array controls which characters are permitted in the input\n-   --  file (after line breaks have been removed).  Valid characters\n+   --  file (after line breaks have been removed). Valid characters\n    --  are all printable ASCII characters and the space character.\n \n-   Word_Characters : constant Character_Set\n-     := (To_Set (Ranges => (('0', '9'), ('a', 'z'), ('A', 'Z')))\n-         or To_Set (\"?-_~\"));\n-   --  The characters which are permitted in words.  Other (valid)\n-   --  characters are assumed to be delimiters between words.  Note that\n+   Word_Characters : constant Character_Set :=\n+                       (To_Set (Ranges =>\n+                                  (('0', '9'), ('a', 'z'), ('A', 'Z')))\n+                        or To_Set (\"?-_~\"));\n+   --  The characters which are permitted in words. Other (valid)\n+   --  characters are assumed to be delimiters between words. Note that\n    --  this set has to include all characters of the source words of the\n    --  Ug_Words dictionary.\n \n    Reject_Trailing_Spaces : constant Boolean := True;\n    --  Controls whether Xgnatug rejects superfluous space characters\n    --  at the end of lines.\n \n-   Maximum_Line_Length : constant Positive := 2000;\n+   Maximum_Line_Length     : constant Positive := 79;\n    Fatal_Line_Length_Limit : constant Positive := 5000;\n-   Fatal_Line_Length : exception;\n+   Fatal_Line_Length       : exception;\n    --  If Maximum_Line_Length is exceeded in an input file, an error\n-   --  message is printed.  If Fatal_Line_Length is exceeded,\n+   --  message is printed. If Fatal_Line_Length is exceeded,\n    --  execution terminates with a Fatal_Line_Length exception.\n \n    VMS_Escape_Character : constant Character := '^';\n@@ -191,24 +200,24 @@ procedure Xgnatug is\n \n    function Is_Extension (Extension : String) return Boolean;\n    function Get_Replacement_Extension (Extension : String) return String;\n-   --  These functions query the replacement table.  Is_Extension\n+   --  These functions query the replacement table. Is_Extension\n    --  checks if the given string is a known extension.\n    --  Get_Replacement returns the replacement extension.\n \n    Ug_Words : GNAT.Spitbol.Table_VString.Table (200);\n    function Is_Known_Word (Word : String) return Boolean;\n    function Get_Replacement_Word (Word : String) return String;\n    --  The Ug_Words table lists replacement words for the VMS version\n-   --  of the manual.  Is_Known_Word and Get_Replacement_Word query\n-   --  this table.  The table is filled using Read_Dictionary_File.\n+   --  of the manual. Is_Known_Word and Get_Replacement_Word query\n+   --  this table. The table is filled using Read_Dictionary_File.\n \n    function Rewrite_Source_Line (Line : String) return String;\n    --  This subprogram takes a line and rewrites it according to Target.\n    --  It relies on information in Source_File to generate error messages.\n \n    type Conditional is (Set, Clear);\n    procedure Push_Conditional (Cond : Conditional; Flag : Target_Type);\n-   procedure Pop_Conditional (Cond : Conditional);\n+   procedure Pop_Conditional  (Cond : Conditional);\n    --  These subprograms deal with conditional processing (@ifset/@ifclear).\n    --  They rely on information in Source_File to generate error messages.\n \n@@ -221,9 +230,12 @@ procedure Xgnatug is\n    --  always have a VMS or a non-VMS version, regardless of the value of\n    --  Target.\n \n+   function In_VMS_Section return Boolean;\n+   --  Returns True if in an \"@ifset vms\" section.\n+\n    procedure Check_No_Pending_Conditional;\n    --  Checks that all preprocessing directives have been properly matched by\n-   --  their @end counterpart.  If this is not the case, print an error\n+   --  their @end counterpart. If this is not the case, print an error\n    --  message.\n \n    --  The following definitions implement a stack to track the conditional\n@@ -237,28 +249,28 @@ procedure Xgnatug is\n    end record;\n \n    Conditional_Stack_Depth : constant := 3;\n-   Conditional_Stack : array (1 .. Conditional_Stack_Depth)\n-     of Conditional_Context;\n+\n+   Conditional_Stack :\n+     array (1 .. Conditional_Stack_Depth) of Conditional_Context;\n+\n    Conditional_TOS : Natural := 0;\n    --  Pointer to the Top Of Stack for Conditional_Stack.\n \n-   -----------------------------------\n-   -- Implementation of Subprograms --\n-   -----------------------------------\n-\n    -----------\n    -- Usage --\n    -----------\n \n    procedure Usage is\n    begin\n       Put_Line (Standard_Error,\n-                \"usage: xgnatug TARGET SOURCE DICTIONARY [OUTFILE]\");\n+              \"usage: xgnatug TARGET SOURCE DICTIONARY [OUTFILE [WARNINGS]]\");\n       New_Line;\n       Put_Line (Standard_Error, \"TARGET is one of:\");\n+\n       for T in Target_Type'Range loop\n          Put_Line (Standard_Error, \"  \" & Target_Type'Image (T));\n       end loop;\n+\n       New_Line;\n       Put_Line (Standard_Error, \"SOURCE is the source file to process.\");\n       New_Line;\n@@ -269,11 +281,17 @@ procedure Xgnatug is\n       Put_Line (Standard_Error,\n                 \"OUT-FILE, if present, is the output file to be created;\");\n       Put_Line (Standard_Error,\n-                \"If OUT-FILE is absent, the output file is one of \" &\n-                \"gnat_ug_unx.texi, \");\n+                \"If OUT-FILE is absent, the output file is either \" &\n+                \"gnat_ugn_unw.texi, \");\n+      Put_Line (Standard_Error,\n+                \"or gnat_ugn_vms.texi, depending on TARGET.\");\n+      New_Line;\n       Put_Line (Standard_Error,\n-                \"gnat_ug_vms.texi, gnat_ug_wnt.texi or gnat_ug_vxw.texi, \" &\n-                \"depending on TARGET.\");\n+                \"WARNINGS, if present, is any string;\");\n+      Put_Line (Standard_Error,\n+                \"it will result in warning messages (e.g., line too long))\");\n+      Put_Line (Standard_Error,\n+                \"being output to Standard_Error.\");\n    end Usage;\n \n    --------------\n@@ -287,6 +305,7 @@ procedure Xgnatug is\n    begin\n       Input.Line := Input.Line + 1;\n       Get_Line (Input.Data, Line_Buffer, Last);\n+\n       if Last = Line_Buffer'Last then\n          Error (Input.all, \"line exceeds fatal line length limit\");\n          raise Fatal_Line_Length;\n@@ -335,13 +354,14 @@ procedure Xgnatug is\n       At_Character : Natural;\n       Message      : String)\n    is\n-      Line_Image : constant String := Integer'Image (Input.Line);\n+      Line_Image         : constant String := Integer'Image (Input.Line);\n       At_Character_Image : constant String := Integer'Image (At_Character);\n       --  These variables are required because we have to drop the leading\n       --  space character.\n \n    begin\n-      Have_Errors := True;\n+      Number_Of_Errors := Number_Of_Errors + 1;\n+\n       if At_Character > 0 then\n          Put_Line (Standard_Error,\n                    S (Input.Name) & ':'\n@@ -364,24 +384,32 @@ procedure Xgnatug is\n    -------------\n \n    procedure Warning\n-     (Input        : Input_File;\n-      Message      : String)\n+     (Input   : Input_File;\n+      Message : String)\n    is\n    begin\n-      Warning (Input, 0, Message);\n+      if Warnings_Enabled then\n+         Warning (Input, 0, Message);\n+      end if;\n    end Warning;\n \n    procedure Warning\n      (Input        : Input_File;\n       At_Character : Natural;\n       Message      : String)\n    is\n-      Line_Image : constant String := Integer'Image (Input.Line);\n+      Line_Image         : constant String := Integer'Image (Input.Line);\n       At_Character_Image : constant String := Integer'Image (At_Character);\n       --  These variables are required because we have to drop the leading\n       --  space character.\n \n    begin\n+      if not Warnings_Enabled then\n+         return;\n+      end if;\n+\n+      Number_Of_Warnings := Number_Of_Warnings + 1;\n+\n       if At_Character > 0 then\n          Put_Line (Standard_Error,\n                    S (Input.Name) & ':'\n@@ -407,28 +435,34 @@ procedure Xgnatug is\n    begin\n       while not End_Of_File (Dictionary_File.Data) loop\n          declare\n-            Line  : String := Get_Line (Dictionary_File'Access);\n-            Split : Natural := Index (Line, (1 => VMS_Escape_Character));\n+            Line  : constant String :=\n+                      Get_Line (Dictionary_File'Access);\n+            Split : constant Natural :=\n+                      Index (Line, (1 => VMS_Escape_Character));\n \n          begin\n             if Line'Length = 0 then\n                Error (Dictionary_File, \"empty line in dictionary file\");\n+\n             elsif Line (Line'First) = ' ' then\n                Error (Dictionary_File, 1, \"line starts with space character\");\n+\n             elsif Split = 0 then\n                Error (Dictionary_File, \"line does not contain \"\n                       & VMS_Escape_Character & \" character\");\n             else\n                declare\n-                  Source : constant String\n-                    := Trim (Line (1 .. Split - 1), Both);\n-                  Target : constant String\n-                    := Trim (Line (Split + 1 .. Line'Last), Both);\n-                  Two_Spaces : constant Natural\n-                    := Index (Source, \"  \");\n-                  Non_Word_Character : constant Natural\n-                    := Index (Source, Word_Characters or To_Set (\" \"),\n-                              Outside);\n+                  Source : constant String :=\n+                             Trim (Line (1 .. Split - 1), Both);\n+                  Target : constant String :=\n+                             Trim (Line (Split + 1 .. Line'Last), Both);\n+                  Two_Spaces : constant Natural :=\n+                                 Index (Source, \"  \");\n+                  Non_Word_Character : constant Natural :=\n+                                         Index (Source,\n+                                                Word_Characters or\n+                                                  To_Set (\" \"),\n+                                                Outside);\n \n                begin\n                   if Two_Spaces /= 0 then\n@@ -443,8 +477,10 @@ procedure Xgnatug is\n \n                   if Source'Length = 0 then\n                      Error (Dictionary_File, \"source is empty\");\n+\n                   elsif Target'Length = 0 then\n                      Error (Dictionary_File, \"target is empty\");\n+\n                   else\n                      Set (Ug_Words, Source, V (Target));\n \n@@ -455,8 +491,8 @@ procedure Xgnatug is\n                      for J in Source'Range loop\n                         if Source (J) = ' ' then\n                            declare\n-                              Prefix : String renames Source (Source'First\n-                                                              .. J - 1);\n+                              Prefix : String renames\n+                                         Source (Source'First .. J - 1);\n \n                            begin\n                               if not Is_Known_Word (Prefix) then\n@@ -475,27 +511,27 @@ procedure Xgnatug is\n    end Read_Dictionary_File;\n \n    -------------------------\n-   -- Process_Source_Line --\n+   -- Rewrite_Source_Line --\n    -------------------------\n \n    function Rewrite_Source_Line (Line : String) return String is\n \n       --  We use a simple lexer to split the line into tokens:\n-      --\n+\n       --    Word             consisting entirely of Word_Characters\n       --    VMS_Alternative  ^alpha^beta^ replacement (but not ^^^)\n       --    Space            a space character\n       --    Other            everything else (sequence of non-word characters)\n       --    VMS_Error        incomplete VMS alternative\n       --    End_Of_Line      no more characters on this line\n-      --\n+\n       --   A sequence of three VMS_Escape_Characters is automatically\n       --   collapsed to an Other token.\n \n       type Token_Span is record\n          First, Last : Positive;\n       end record;\n-      --  The character range covered by a token in Line.\n+      --  The character range covered by a token in Line\n \n       type Token_Kind is (End_Of_Line, Word, Other,\n                           VMS_Alternative, VMS_Error);\n@@ -513,21 +549,21 @@ procedure Xgnatug is\n \n       Input_Position : Positive := Line'First;\n       Token : Token_Record;\n-      --  The position of the next character to be processed by Next_Token.\n+      --  The position of the next character to be processed by Next_Token\n \n       procedure Next_Token;\n-      --  Returns the next token in Line, starting at Input_Position.\n+      --  Returns the next token in Line, starting at Input_Position\n \n       Rewritten_Line : VString;\n-      --  Collects the line as it is rewritten.\n+      --  Collects the line as it is rewritten\n \n       procedure Rewrite_Word;\n-      --  The current token is assumed to be a Word.  When processing the VMS\n+      --  The current token is assumed to be a Word. When processing the VMS\n       --  version of the manual, additional tokens are gathered to check if\n       --  we have a file name or a sequence of known words.\n \n       procedure Maybe_Rewrite_Extension;\n-      --  The current token is assumed to be Other.  When processing the VMS\n+      --  The current token is assumed to be Other. When processing the VMS\n       --  version of the manual and the token represents a single dot \".\",\n       --  the following word is rewritten according to the rules for\n       --  extensions.\n@@ -536,6 +572,10 @@ procedure Xgnatug is\n       --  This is set to true if a VMS_Alternative has been encountered, or a\n       --  ^^^ token.\n \n+      ----------------\n+      -- Next_Token --\n+      ----------------\n+\n       procedure Next_Token is\n          Remaining_Line : String renames Line (Input_Position .. Line'Last);\n          Last_Character : Natural;\n@@ -561,23 +601,25 @@ procedure Xgnatug is\n                   VMS_Token_Seen := True;\n                end if;\n \n-               --  Find the second and third escape character.  If one of\n+               --  Find the second and third escape character. If one of\n                --  them is not present, generate an error token.\n \n-               VMS_Second_Character\n-                 := Index (Remaining_Line (Remaining_Line'First + 1\n+               VMS_Second_Character :=\n+                 Index (Remaining_Line (Remaining_Line'First + 1\n                                            .. Remaining_Line'Last),\n-                           (1 => VMS_Escape_Character));\n+                        (1 => VMS_Escape_Character));\n+\n                if VMS_Second_Character = 0 then\n                   Input_Position := Remaining_Line'Last + 1;\n                   Token := (VMS_Error, Remaining_Line'First);\n                   return;\n                end if;\n \n-               VMS_Third_Character\n-                 := Index (Remaining_Line (VMS_Second_Character + 1\n+               VMS_Third_Character :=\n+                 Index (Remaining_Line (VMS_Second_Character + 1\n                                            .. Remaining_Line'Last),\n-                           (1 => VMS_Escape_Character));\n+                        (1 => VMS_Escape_Character));\n+\n                if VMS_Third_Character = 0 then\n                   Input_Position := Remaining_Line'Last + 1;\n                   Token := (VMS_Error, Remaining_Line'First);\n@@ -607,15 +649,14 @@ procedure Xgnatug is\n             end;\n          end if;                        --  VMS_Alternative\n \n-         --  The Word case.  Search for characters not in Word_Characters.\n+         --  The Word case. Search for characters not in Word_Characters.\n          --  We have found a word if the first non-word character is not\n          --  the first character in Remaining_Line, i.e. if Remaining_Line\n          --  starts with a word character.\n \n          Last_Character := Index (Remaining_Line, Word_Characters, Outside);\n          if Last_Character /= Remaining_Line'First then\n \n-\n             --  If we haven't found a character which is not in\n             --  Word_Characters, all remaining characters are part of the\n             --  current Word token.\n@@ -630,15 +671,20 @@ procedure Xgnatug is\n             return;\n          end if;\n \n-         --  Remaining characters are in the Other category.  To speed\n+         --  Remaining characters are in the Other category. To speed\n          --  up processing, we collect them together if there are several\n          --  of them.\n \n          Input_Position := Last_Character + 1;\n-         Token :=  (Other, Remaining_Line'First,\n-                    (Remaining_Line'First, Last_Character));\n+         Token := (Other,\n+                   Remaining_Line'First,\n+                   (Remaining_Line'First, Last_Character));\n       end Next_Token;\n \n+      ------------------\n+      -- Rewrite_Word --\n+      ------------------\n+\n       procedure Rewrite_Word is\n          First_Word : String\n            renames Line (Token.Span.First .. Token.Span.Last);\n@@ -704,7 +750,7 @@ procedure Xgnatug is\n                   end if;\n                end loop;\n \n-               --  Rewrite Seq, and add the lost space if necessary.\n+               --  Rewrite Seq, and add the lost space if necessary\n \n                Append (Rewritten_Line,\n                        Get_Replacement_Word (Line (Seq.First .. Seq.Last)));\n@@ -719,18 +765,18 @@ procedure Xgnatug is\n          end if;\n \n          Next_Token;\n+\n          if Token.Kind = Other\n            and then Line (Token.Span.First .. Token.Span.Last) = \".\"\n          then\n-\n-            --  Deal with extensions.\n+            --  Deal with extensions\n \n             Next_Token;\n             if Token.Kind = Word\n               and then Is_Extension (Line (Token.Span.First\n                                            .. Token.Span.Last))\n             then\n-               --  We have discovered a file extension.  Convert the file\n+               --  We have discovered a file extension. Convert the file\n                --  name to upper case.\n \n                Append (Rewritten_Line,\n@@ -749,7 +795,6 @@ procedure Xgnatug is\n                --  iteration of the main loop.\n             end if;\n \n-\n          else\n             --  We have an unknown Word, followed by an unknown token.\n             --  The unknown token will be processed by the outer loop.\n@@ -758,9 +803,13 @@ procedure Xgnatug is\n          end if;\n       end Rewrite_Word;\n \n+      -----------------------------\n+      -- Maybe_Rewrite_Extension --\n+      -----------------------------\n+\n       procedure Maybe_Rewrite_Extension is\n       begin\n-         --  Again, we need no special processing in the non-VMS case.\n+         --  Again, we need no special processing in the non-VMS case\n \n          if Target = VMS\n            and then Line (Token.Span.First .. Token.Span.Last) = \".\"\n@@ -786,12 +835,12 @@ procedure Xgnatug is\n          end if;\n       end Maybe_Rewrite_Extension;\n \n-      --  Start of processing for Process_Source_Line\n+   --  Start of processing for Process_Source_Line\n \n    begin\n       --  The following parser recognizes the following special token\n       --  sequences:\n-      --\n+\n       --     Word \".\" Word    rewrite as file name if second word is extension\n       --     Word \" \" Word    rewrite as a single word using Ug_Words table\n \n@@ -809,9 +858,15 @@ procedure Xgnatug is\n \n             when VMS_Alternative =>\n                if VMS_Context_Determined then\n-                  Warning (Source_File, Token.First,\n-                           \"VMS alternative already determined \"\n-                           & \"by conditionals\");\n+                  if (not In_VMS_Section)\n+                    or else\n+                    Line (Token.VMS.First .. Token.VMS.Last) /=\n+                    Line (Token.Non_VMS.First .. Token.Non_VMS.Last)\n+                  then\n+                     Warning (Source_File, Token.First,\n+                              \"VMS alternative already determined \"\n+                                & \"by conditionals\");\n+                  end if;\n                end if;\n                if Target = VMS then\n                   Append (Rewritten_Line, Line (Token.VMS.First\n@@ -827,6 +882,7 @@ procedure Xgnatug is\n                Next_Token;\n          end case;\n       end loop;\n+\n       return S (Rewritten_Line);\n    end Rewrite_Source_Line;\n \n@@ -835,15 +891,15 @@ procedure Xgnatug is\n    -------------------------\n \n    procedure Process_Source_File is\n-      Ifset : constant String := \"@ifset \";\n-      Ifclear : constant String := \"@ifclear \";\n+      Ifset       : constant String := \"@ifset \";\n+      Ifclear     : constant String := \"@ifclear \";\n       Endsetclear : constant String := \"@end \";\n       --  Strings to be recognized for conditional processing.\n \n    begin\n       while not End_Of_File (Source_File.Data) loop\n          declare\n-            Line : constant String := Get_Line (Source_File'Access);\n+            Line      : constant String := Get_Line (Source_File'Access);\n             Rewritten : constant String := Rewrite_Source_Line (Line);\n             --  We unconditionally rewrite the line so that we can check the\n             --  syntax of all lines, and not only those which are actually\n@@ -852,32 +908,38 @@ procedure Xgnatug is\n             Have_Conditional : Boolean := False;\n             --  True if we have encountered a conditional preprocessing\n             --  directive.\n+\n             Cond : Conditional;\n             --  The kind of the directive.\n+\n             Flag : Target_Type;\n             --  Its flag.\n \n          begin\n             --  If the line starts with @ifset or @ifclear, we try to convert\n-            --  the following flag to one of our target types.  If we fail,\n+            --  the following flag to one of our target types. If we fail,\n             --  Have_Conditional remains False.\n \n             if Line'Length >= Ifset'Length\n               and then Line (1 .. Ifset'Length) = Ifset\n             then\n                Cond := Set;\n+\n                declare\n-                  Arg : constant String\n-                    := Trim (Line (Ifset'Length + 1 .. Line'Last), Both);\n+                  Arg : constant String :=\n+                          Trim (Line (Ifset'Length + 1 .. Line'Last), Both);\n \n                begin\n                   Flag := Target_Type'Value (Arg);\n+\n                   if Translate (Target_Type'Image (Flag), Lower_Case_Map)\n-                    /= Arg\n+                                                                    /= Arg\n                   then\n                      Error (Source_File, \"flag has to be lowercase\");\n                   end if;\n+\n                   Have_Conditional := True;\n+\n                exception\n                   when Constraint_Error =>\n                      Error (Source_File, \"unknown flag for '@ifset'\");\n@@ -887,25 +949,29 @@ procedure Xgnatug is\n               and then Line (1 .. Ifclear'Length) = Ifclear\n             then\n                Cond := Clear;\n+\n                declare\n-                  Arg : constant String\n-                    := Trim (Line (Ifclear'Length + 1 .. Line'Last), Both);\n+                  Arg : constant String :=\n+                          Trim (Line (Ifclear'Length + 1 .. Line'Last), Both);\n \n                begin\n                   Flag := Target_Type'Value (Arg);\n                   if Translate (Target_Type'Image (Flag), Lower_Case_Map)\n-                    /= Arg\n+                                                                     /= Arg\n                   then\n                      Error (Source_File, \"flag has to be lowercase\");\n                   end if;\n+\n                   Have_Conditional := True;\n+\n                exception\n                   when Constraint_Error =>\n                      Error (Source_File, \"unknown flag for '@ifclear'\");\n                end;\n             end if;\n \n             if Have_Conditional then\n+\n                --  We create a new conditional context and suppress the\n                --  directive in the output.\n \n@@ -914,18 +980,20 @@ procedure Xgnatug is\n             elsif Line'Length >= Endsetclear'Length\n               and then Line (1 .. Endsetclear'Length) = Endsetclear\n             then\n-               --  The '@end ifset'/'@end ifclear' case is handled here.  We\n+               --  The '@end ifset'/'@end ifclear' case is handled here. We\n                --  have to pop the conditional context.\n \n                declare\n                   First, Last : Natural;\n+\n                begin\n                   Find_Token (Source => Line (Endsetclear'Length + 1\n                                               .. Line'Length),\n                               Set    => Letter_Set,\n                               Test   => Inside,\n                               First  => First,\n                               Last   => Last);\n+\n                   if Last = 0 then\n                      Error (Source_File, \"'@end' without argument\");\n                   else\n@@ -943,18 +1011,22 @@ procedure Xgnatug is\n \n                      --  We fall through to the ordinary case for other @end\n                      --  directives.\n+\n                   end if;               --  @end without argument\n                end;\n             end if;                     --  Have_Conditional\n \n             if not Have_Conditional then\n+\n                --  The ordinary case.\n+\n                if not Currently_Excluding then\n                   Put_Line (Output_File, Rewritten);\n                end if;\n             end if;\n          end;\n       end loop;\n+\n       Check_No_Pending_Conditional;\n    end Process_Source_File;\n \n@@ -971,6 +1043,10 @@ procedure Xgnatug is\n       procedure Add (Extension, Replacement : String);\n       --  Adds an extension with a custom replacement.\n \n+      ---------\n+      -- Add --\n+      ---------\n+\n       procedure Add (Extension : String) is\n       begin\n          Add (Extension, Translate (Extension, Upper_Case_Map));\n@@ -981,7 +1057,7 @@ procedure Xgnatug is\n          Set (Extensions, Extension, V (Replacement));\n       end Add;\n \n-      --  Start of processing for Initialize_Extensions\n+   --  Start of processing for Initialize_Extensions\n \n    begin\n       --  To avoid performance degradation, increase the constant in the\n@@ -1040,6 +1116,7 @@ procedure Xgnatug is\n \n    procedure Push_Conditional (Cond : Conditional; Flag : Target_Type) is\n       Will_Exclude : Boolean;\n+\n    begin\n       --  If we are already in an excluding context, inherit this property,\n       --  otherwise calculate it from scratch.\n@@ -1066,12 +1143,13 @@ procedure Xgnatug is\n                      & Integer'Image (Conditional_Stack (J).Starting_Line));\n          end if;\n       end loop;\n+\n       Conditional_TOS := Conditional_TOS + 1;\n-      Conditional_Stack (Conditional_TOS)\n-        := (Starting_Line => Source_File.Line,\n-            Cond          => Cond,\n-            Flag          => Flag,\n-            Excluding     => Will_Exclude);\n+      Conditional_Stack (Conditional_TOS) :=\n+        (Starting_Line => Source_File.Line,\n+         Cond          => Cond,\n+         Flag          => Flag,\n+         Excluding     => Will_Exclude);\n    end Push_Conditional;\n \n    ---------------------\n@@ -1089,6 +1167,7 @@ procedure Xgnatug is\n                          & Integer'Image (Conditional_Stack\n                                           (Conditional_TOS).Starting_Line));\n                end if;\n+\n             when Clear =>\n                if Conditional_Stack (Conditional_TOS).Cond /= Clear then\n                   Error (Source_File,\n@@ -1097,12 +1176,15 @@ procedure Xgnatug is\n                                           (Conditional_TOS).Starting_Line));\n                end if;\n          end case;\n+\n          Conditional_TOS := Conditional_TOS - 1;\n+\n       else\n          case Cond is\n             when Set =>\n                Error (Source_File,\n                       \"'@end ifset' without corresponding '@ifset'\");\n+\n             when Clear =>\n                Error (Source_File,\n                       \"'@end ifclear' without corresponding '@ifclear'\");\n@@ -1131,9 +1213,25 @@ procedure Xgnatug is\n             return True;\n          end if;\n       end loop;\n+\n       return False;\n    end VMS_Context_Determined;\n \n+   --------------------\n+   -- In_VMS_Section --\n+   --------------------\n+\n+   function In_VMS_Section return Boolean is\n+   begin\n+      for J in 1 .. Conditional_TOS loop\n+         if Conditional_Stack (J).Flag = VMS then\n+            return Conditional_Stack (J).Cond = Set;\n+         end if;\n+      end loop;\n+\n+      return False;\n+   end In_VMS_Section;\n+\n    ----------------------------------\n    -- Check_No_Pending_Conditional --\n    ----------------------------------\n@@ -1145,6 +1243,7 @@ procedure Xgnatug is\n             when Set =>\n                Error (Source_File, \"Missing '@end ifset' for '@ifset' at line\"\n                       & Integer'Image (Conditional_Stack (J).Starting_Line));\n+\n             when Clear =>\n                Error (Source_File,\n                       \"Missing '@end ifclear' for '@ifclear' at line\"\n@@ -1163,13 +1262,14 @@ procedure Xgnatug is\n begin\n    Initialize_Extensions;\n \n-   Valid_Command_Line := Argument_Count in 3 .. 4;\n+   Valid_Command_Line := Argument_Count in 3 .. 5;\n \n    --  First argument: Target.\n \n    if Valid_Command_Line then\n       begin\n          Target := Target_Type'Value (Argument (1));\n+\n       exception\n          when Constraint_Error =>\n             Valid_Command_Line := False;\n@@ -1182,6 +1282,7 @@ begin\n       begin\n          Source_File.Name := V (Argument (2));\n          Open (Source_File.Data, In_File, Argument (2));\n+\n       exception\n          when Name_Error =>\n             Valid_Command_Line := False;\n@@ -1194,6 +1295,7 @@ begin\n       begin\n          Dictionary_File.Name := V (Argument (3));\n          Open (Dictionary_File.Data, In_File, Argument (3));\n+\n       exception\n          when Name_Error =>\n             Valid_Command_Line := False;\n@@ -1203,23 +1305,22 @@ begin\n    --  Fourth argument: Output_File.\n \n    if Valid_Command_Line then\n-      if Argument_Count = 4 then\n+      if Argument_Count in 4 .. 5 then\n          Output_File_Name := V (Argument (4));\n       else\n          case Target is\n+            when UNW =>\n+               Output_File_Name := V (\"gnat_ugn_unw.texi\");\n             when VMS =>\n-               Output_File_Name := V (\"gnat_ug_vms.texi\");\n-            when WNT =>\n-               Output_File_Name := V (\"gnat_ug_wnt.texi\");\n-            when UNX =>\n-               Output_File_Name := V (\"gnat_ug_unx.texi\");\n-            when VXWORKS =>\n-               Output_File_Name := V (\"gnat_ug_vxw.texi\");\n+               Output_File_Name := V (\"gnat_ugn_vms.texi\");\n          end case;\n       end if;\n \n+      Warnings_Enabled := Argument_Count = 5;\n+\n       begin\n          Create (Output_File, Out_File, S (Output_File_Name));\n+\n       exception\n          when Name_Error | Use_Error =>\n             Valid_Command_Line := False;\n@@ -1229,6 +1330,7 @@ begin\n    if not Valid_Command_Line then\n       Usage;\n       Set_Exit_Status (Failure);\n+\n    else\n       Read_Dictionary_File;\n       Close (Dictionary_File.Data);\n@@ -1238,10 +1340,41 @@ begin\n       Process_Source_File;\n       Close (Output_File);\n       Close (Source_File.Data);\n-      if Have_Errors then\n+\n+      New_Line (Standard_Error);\n+\n+      if Number_Of_Warnings = 0 then\n+         Put_Line (Standard_Error, \" NO Warnings\");\n+\n+      else\n+         Put (Standard_Error, Integer'Image (Number_Of_Warnings));\n+         Put (Standard_Error, \" Warning\");\n+\n+         if Number_Of_Warnings > 1 then\n+            Put (Standard_Error, \"s\");\n+         end if;\n+\n+         New_Line (Standard_Error);\n+      end if;\n+\n+      if Number_Of_Errors = 0 then\n+         Put_Line (Standard_Error, \" NO Errors\");\n+\n+      else\n+         Put (Standard_Error, Integer'Image (Number_Of_Errors));\n+         Put (Standard_Error, \" Error\");\n+\n+         if Number_Of_Errors > 1 then\n+            Put (Standard_Error, \"s\");\n+         end if;\n+\n+         New_Line (Standard_Error);\n+      end if;\n+\n+      if Number_Of_Errors /= 0  then\n          Set_Exit_Status (Failure);\n       else\n          Set_Exit_Status (Success);\n       end if;\n    end if;\n-end Xgnatug;\n+end Xgnatugn;", "previous_filename": "gcc/ada/xgnatug.adb"}]}