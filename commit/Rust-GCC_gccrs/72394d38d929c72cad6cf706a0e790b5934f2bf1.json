{"sha": "72394d38d929c72cad6cf706a0e790b5934f2bf1", "node_id": "C_kwDOANBUbNoAKDcyMzk0ZDM4ZDkyOWM3MmNhZDZjZjcwNmEwZTc5MGI1OTM0ZjJiZjE", "commit": {"author": {"name": "Barrett Adair", "email": "barrettellisadair@gmail.com", "date": "2021-09-15T20:26:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-09-22T04:03:12Z"}, "message": "c++: fix template instantiation comparison in redeclarations\n\nThis change fixes a primordial c++11 frontend defect where function template\nredeclarations with trailing return types that used dependent\nsizeof/alignof/noexcept expressions in template value arguments failed to\ncompare as equivalent to the identical primary template declaration. By\nforcing structural AST comparison of the template arguments, we no longer\nrequire TYPE_CANONICAL to match in this case. The new canon-type-{15..18}.C\ntests failed with all prior GCC versions, where the redeclarations were\nincorrectly reported as ambiguous overloads. The new dependent-name{15,16}.C\ntests are regression tests for sneaky problems encountered during\ndevelopment of this fix. Note that this fix does not address the use of parm\nobjects' constexpr members as template arguments within a declaration (a\nsuperficially similar longstanding defect).\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (find_parm_usage_r): New walk_tree callback to find func\n\tparms.\n\t(any_template_arguments_need_structural_equality_p): New special\n\tcase.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-52830.C: Remove unwanted dg-ice.\n\t* g++.dg/template/canon-type-15.C: New test.\n\t* g++.dg/template/canon-type-16.C: New test.\n\t* g++.dg/template/canon-type-17.C: New test.\n\t* g++.dg/template/canon-type-18.C: New test.\n\t* g++.dg/template/dependent-name15.C: New regression test.\n\t* g++.dg/template/dependent-name16.C: New regression test.", "tree": {"sha": "05207034314d23f2bb5d0d57e28bd9f611574ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05207034314d23f2bb5d0d57e28bd9f611574ac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72394d38d929c72cad6cf706a0e790b5934f2bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72394d38d929c72cad6cf706a0e790b5934f2bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72394d38d929c72cad6cf706a0e790b5934f2bf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72394d38d929c72cad6cf706a0e790b5934f2bf1/comments", "author": {"login": "badair", "id": 2570307, "node_id": "MDQ6VXNlcjI1NzAzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2570307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badair", "html_url": "https://github.com/badair", "followers_url": "https://api.github.com/users/badair/followers", "following_url": "https://api.github.com/users/badair/following{/other_user}", "gists_url": "https://api.github.com/users/badair/gists{/gist_id}", "starred_url": "https://api.github.com/users/badair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badair/subscriptions", "organizations_url": "https://api.github.com/users/badair/orgs", "repos_url": "https://api.github.com/users/badair/repos", "events_url": "https://api.github.com/users/badair/events{/privacy}", "received_events_url": "https://api.github.com/users/badair/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c41dd82e23c296681aa466693bfc726e2d919ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c41dd82e23c296681aa466693bfc726e2d919ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c41dd82e23c296681aa466693bfc726e2d919ce"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "048bbc4622de84caa5b64e5c85ee8f497db70913", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -27813,6 +27813,20 @@ dependent_template_arg_p (tree arg)\n     return value_dependent_expression_p (arg);\n }\n \n+/* Identify any expressions that use function parms.  */\n+\n+static tree\n+find_parm_usage_r (tree *tp, int *walk_subtrees, void*)\n+{\n+  tree t = *tp;\n+  if (TREE_CODE (t) == PARM_DECL)\n+    {\n+      *walk_subtrees = 0;\n+      return t;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Returns true if ARGS (a collection of template arguments) contains\n    any types that require structural equality testing.  */\n \n@@ -27857,6 +27871,13 @@ any_template_arguments_need_structural_equality_p (tree args)\n \t      else if (!TYPE_P (arg) && TREE_TYPE (arg)\n \t\t       && TYPE_STRUCTURAL_EQUALITY_P (TREE_TYPE (arg)))\n \t\treturn true;\n+\t      /* Checking current_function_decl because this structural\n+\t\t comparison is only necessary for redeclaration.  */\n+\t      else if (!current_function_decl\n+\t\t       && dependent_template_arg_p (arg)\n+\t\t       && (cp_walk_tree_without_duplicates\n+\t\t\t   (&arg, find_parm_usage_r, NULL)))\n+\t\treturn true;\n \t    }\n \t}\n     }"}, {"sha": "d6057f13497fe2f9c99f5b3e10df5e319bf6697d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52830.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -1,7 +1,6 @@\n // PR c++/52830\n // { dg-do compile { target c++11 } }\n // { dg-additional-options \"-fchecking\" }\n-// { dg-ice \"comptypes\" }\n \n template<bool b> struct eif { typedef void type; };\n template<>       struct eif<false> {};"}, {"sha": "b001b5c841d966bd40a79bc412df6a4abe32dbd2", "filename": "gcc/testsuite/g++.dg/template/canon-type-15.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-15.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+template<unsigned u> struct size_c{ static constexpr unsigned value = u; };\n+namespace g {\n+template<class T> auto return_size(T t) -> size_c<sizeof(t)>;\n+template<class T> auto return_size(T t) -> size_c<sizeof(t)>;\n+}\n+static_assert(decltype(g::return_size('a'))::value == 1u, \"\");"}, {"sha": "99361cbac305ad352e81458e602ece4f2dd13421", "filename": "gcc/testsuite/g++.dg/template/canon-type-16.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-16.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++11 } }\n+template<bool u> struct bool_c{ static constexpr bool value = u; };\n+template<class T> auto noexcepty(T t) -> bool_c<noexcept(t())>;\n+template<class T> auto noexcepty(T t) -> bool_c<noexcept(t())>;\n+struct foo { void operator()() noexcept; };\n+static_assert(decltype(noexcepty(foo{}))::value, \"\");"}, {"sha": "0555c8d0a427fff597e14a709d99ae12d18879d6", "filename": "gcc/testsuite/g++.dg/template/canon-type-17.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-17.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target c++11 } }\n+template<unsigned u> struct size_c{ static constexpr unsigned value = u; };\n+template<class... T> auto return_size(T... t) -> size_c<sizeof...(t)>;\n+template<class... T> auto return_size(T... t) -> size_c<sizeof...(t)>;\n+static_assert(decltype(return_size('a'))::value == 1u, \"\");"}, {"sha": "2510181725c6e9279a704ff7cc9ac54ef2b451a5", "filename": "gcc/testsuite/g++.dg/template/canon-type-18.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-18.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-pedantic\" }\n+template<unsigned u> struct size_c{ static constexpr unsigned value = u; };\n+template<class T> auto get_align(T t) -> size_c<alignof(t)>;\n+template<class T> auto get_align(T t) -> size_c<alignof(t)>;\n+static_assert(decltype(get_align('a'))::value == 1u, \"\");"}, {"sha": "1c34bc704f962c71e2b4be73bb9196bb44a99215", "filename": "gcc/testsuite/g++.dg/template/dependent-name15.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name15.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++11 } }\n+template <int N> struct A { static void foo(){} };\n+template <> struct A<sizeof(char)> { using foo = int; };\n+\n+template <class T> void f(T t1) { \n+    A<sizeof(t1)>::foo();\n+}\n+\n+template <class T> void g(T t2) { \n+    /* if the comparing_specializations check breaks in cp_tree_equal\n+    case PARM_DECL, the error will incorrectly report A<sizeof (t1)> */\n+    A<sizeof(t2)>::foo(); // { dg-error \"dependent-name .A<sizeof .t2.>::foo\" }\n+}\n+\n+void h() {\n+    f(0);\n+    g('0');\n+}"}, {"sha": "ef8c4f2307778b83a25c1826b63e9209e146e5c5", "filename": "gcc/testsuite/g++.dg/template/dependent-name16.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72394d38d929c72cad6cf706a0e790b5934f2bf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name16.C?ref=72394d38d929c72cad6cf706a0e790b5934f2bf1", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+template <int N> struct A { static void foo(){} };\n+template <> struct A<sizeof(char)> { using foo = int; };\n+\n+template<class T1> auto f(T1 t1) -> decltype(A<sizeof(t1)>::foo());\n+\n+/* if the comparing_specializations check breaks in cp_tree_equal\n+case PARM_DECL, the error will incorrectly report A<sizeof (t1)> */\n+template<class T2> auto g(T2 t2) -> decltype(A<sizeof(t2)>::foo()); // { dg-error \"dependent-name .A<sizeof .t2.>::foo\" }\n+\n+void h() {\n+    f(0);\n+    g('0'); // { dg-error \"no matching function\" }\n+}"}]}