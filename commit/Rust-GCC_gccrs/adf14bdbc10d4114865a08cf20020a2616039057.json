{"sha": "adf14bdbc10d4114865a08cf20020a2616039057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRmMTRiZGJjMTBkNDExNDg2NWEwOGNmMjAwMjBhMjYxNjAzOTA1Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-11T14:48:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-17T14:06:10Z"}, "message": "x86: Update 'P' operand modifier for -fno-plt\n\nUpdate 'P' operand modifier for -fno-plt to support inline assembly\nstatements.  In 64-bit, we can always load function address with\n@GOTPCREL.  In 32-bit, we load function address with @GOT only for\nnon-PIC since PIC register may not be available at call site.\n\ngcc/\n\n\tPR target/99504\n\t* config/i386/i386.c (ix86_force_load_from_GOT_p): Support\n\tinline assembly statements.\n\t(ix86_print_operand): Update 'P' handling for -fno-plt.\n\ngcc/testsuite/\n\n\tPR target/99504\n\t* gcc.target/i386/pr99530-1.c: New test.\n\t* gcc.target/i386/pr99530-2.c: Likewise.\n\t* gcc.target/i386/pr99530-3.c: Likewise.\n\t* gcc.target/i386/pr99530-4.c: Likewise.\n\t* gcc.target/i386/pr99530-5.c: Likewise.\n\t* gcc.target/i386/pr99530-6.c: Likewise.", "tree": {"sha": "6d0ba9dcaffd6600c4e1068ebd04eca5562d4015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0ba9dcaffd6600c4e1068ebd04eca5562d4015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adf14bdbc10d4114865a08cf20020a2616039057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf14bdbc10d4114865a08cf20020a2616039057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adf14bdbc10d4114865a08cf20020a2616039057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adf14bdbc10d4114865a08cf20020a2616039057/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39916ceab4940315e84bcd966da2c1d4a8e1734b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39916ceab4940315e84bcd966da2c1d4a8e1734b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39916ceab4940315e84bcd966da2c1d4a8e1734b"}], "stats": {"total": 98, "additions": 93, "deletions": 5}, "files": [{"sha": "540d4f445177eddca05919806792bdf31313e1a1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -10265,15 +10265,20 @@ darwin_local_data_pic (rtx disp)\n \t  && XINT (disp, 1) == UNSPEC_MACHOPIC_OFFSET);\n }\n \n-/* True if operand X should be loaded from GOT.  */\n+/* True if the function symbol operand X should be loaded from GOT.\n+\n+   NB: In 32-bit mode, only non-PIC is allowed in inline assembly\n+   statements, since a PIC register could not be available at the\n+   call site.  */\n \n bool\n ix86_force_load_from_GOT_p (rtx x)\n {\n-  return ((TARGET_64BIT || HAVE_AS_IX86_GOT32X)\n+  return ((TARGET_64BIT || (!flag_pic && HAVE_AS_IX86_GOT32X))\n \t  && !TARGET_PECOFF && !TARGET_MACHO\n-\t  && !flag_pic\n+\t  && (!flag_pic || this_is_asm_operands)\n \t  && ix86_cmodel != CM_LARGE\n+\t  && ix86_cmodel != CM_LARGE_PIC\n \t  && GET_CODE (x) == SYMBOL_REF\n \t  && SYMBOL_REF_FUNCTION_P (x)\n \t  && (!flag_plt\n@@ -12701,7 +12706,8 @@ print_reg (rtx x, int code, FILE *file)\n    y -- print \"st(0)\" instead of \"st\" as a register.\n    d -- print duplicated register operand for AVX instruction.\n    D -- print condition for SSE cmp instruction.\n-   P -- if PIC, print an @PLT suffix.\n+   P -- if PIC, print an @PLT suffix.  For -fno-plt, load function\n+\taddress from GOT.\n    p -- print raw symbol name.\n    X -- don't print any sort of PIC '@' suffix for a symbol.\n    & -- print some in-use local-dynamic symbol name.\n@@ -13445,7 +13451,23 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  x = const0_rtx;\n \t}\n \n-      if (code != 'P' && code != 'p')\n+      if (code == 'P')\n+\t{\n+\t  if (ix86_force_load_from_GOT_p (x))\n+\t    {\n+\t      /* For inline assembly statement, load function address\n+\t\t from GOT with 'P' operand modifier to avoid PLT.  */\n+\t      x = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, x),\n+\t\t\t\t  (TARGET_64BIT\n+\t\t\t\t   ? UNSPEC_GOTPCREL\n+\t\t\t\t   : UNSPEC_GOT));\n+\t      x = gen_rtx_CONST (Pmode, x);\n+\t      x = gen_const_mem (Pmode, x);\n+\t      ix86_print_operand (file, x, 'A');\n+\t      return;\n+\t    }\n+\t}\n+      else if (code != 'p')\n \t{\n \t  if (CONST_INT_P (x))\n \t    {"}, {"sha": "080d7cc939982c559ac69f6ae11ccfaa80b2b2ca", "filename": "gcc/testsuite/gcc.target/i386/pr99530-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-1.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fpic -mcmodel=large -fno-plt\" } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" } } */\n+\n+extern void foo (void); \n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}, {"sha": "9808957d62449ff511b988bb312d4272f6047305", "filename": "gcc/testsuite/gcc.target/i386/pr99530-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-2.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -fno-pic -mcmodel=large -fno-plt\" } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" } } */\n+\n+extern void foo (void); \n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}, {"sha": "22fe81b25f260c3abe4b6de399f3eebc93d7faf2", "filename": "gcc/testsuite/gcc.target/i386/pr99530-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-3.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOT\" { target { ia32 && got32x_reloc } } } } */\n+\n+extern void foo (void); \n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}, {"sha": "aba0b5d7892d38b63005e59ba39d7d1af9a4f689", "filename": "gcc/testsuite/gcc.target/i386/pr99530-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-4.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target { ia32 } } } } */\n+\n+extern void foo (void);\n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}, {"sha": "02c5799d273fdb91e79f2c3b13ebdbf6f909d5e5", "filename": "gcc/testsuite/gcc.target/i386/pr99530-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-5.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOT\" { target { ia32 && got32x_reloc } } } } */\n+\n+extern void foo (void) __attribute__ ((noplt)); \n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}, {"sha": "0dfdd3752f79b9cbd7c6520837428cfe60d2f7bd", "filename": "gcc/testsuite/gcc.target/i386/pr99530-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adf14bdbc10d4114865a08cf20020a2616039057/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99530-6.c?ref=adf14bdbc10d4114865a08cf20020a2616039057", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]+\\[*\\]foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target { ia32 } } } } */\n+\n+extern void foo (void) __attribute__ ((noplt)); \n+void\n+bar (void)\n+{\n+  asm (\"call %P0\" : : \"X\" (foo));\n+} "}]}