{"sha": "ccaed3ba91952bdc19aecce21d49714c5599ad2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhZWQzYmE5MTk1MmJkYzE5YWVjY2UyMWQ0OTcxNGM1NTk5YWQyZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-01-22T21:38:39Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-01-22T21:38:39Z"}, "message": "s390.h (REGISTER_MOVE_COST, [...]): Remove.\n\n\t* config/s390/s390.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n\t* config/s390/s390.c (s390_register_move_cost,\n\ts390_memory_move_cost): New.\n\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n\nFrom-SVN: r169135", "tree": {"sha": "8ebd82278ec3c8096f03eb5571e4d018863a0cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebd82278ec3c8096f03eb5571e4d018863a0cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccaed3ba91952bdc19aecce21d49714c5599ad2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccaed3ba91952bdc19aecce21d49714c5599ad2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccaed3ba91952bdc19aecce21d49714c5599ad2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccaed3ba91952bdc19aecce21d49714c5599ad2d/comments", "author": null, "committer": null, "parents": [{"sha": "0cecee061e9f6a049703683969b9933f0c8fb07c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cecee061e9f6a049703683969b9933f0c8fb07c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cecee061e9f6a049703683969b9933f0c8fb07c"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "8e152821f8f6deb73d21437a2b07fb54a60b8c92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccaed3ba91952bdc19aecce21d49714c5599ad2d", "patch": "@@ -1,3 +1,10 @@\n+2011-01-22  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/s390/s390.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+\t* config/s390/s390.c (s390_register_move_cost,\n+\ts390_memory_move_cost): New.\n+\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n+\n 2011-01-22  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR middle-end/47401"}, {"sha": "4bc73625b6e533bfefd91f744d6ba26ab14d2273", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ccaed3ba91952bdc19aecce21d49714c5599ad2d", "patch": "@@ -2426,6 +2426,31 @@ s390_float_const_zero_p (rtx value)\n \t  && value == CONST0_RTX (GET_MODE (value)));\n }\n \n+/* Implement TARGET_REGISTER_MOVE_COST.  */\n+\n+static int\n+s390_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                         reg_class_t from, reg_class_t to)\n+{\n+/* On s390, copy between fprs and gprs is expensive.  */\n+  if ((reg_classes_intersect_p (from, GENERAL_REGS)\n+       && reg_classes_intersect_p (to, FP_REGS))\n+      || (reg_classes_intersect_p (from, FP_REGS)\n+\t  && reg_classes_intersect_p (to, GENERAL_REGS)))\n+    return 10;\n+\n+  return 1;\n+}\n+\n+/* Implement TARGET_MEMORY_MOVE_COST.  */\n+\n+static int\n+s390_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t       reg_class_t rclass ATTRIBUTE_UNUSED,\n+\t\t       bool in ATTRIBUTE_UNUSED)\n+{\n+  return 1;\n+}\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be\n@@ -10640,6 +10665,10 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #define TARGET_RTX_COSTS s390_rtx_costs\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST s390_address_cost\n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST s390_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST s390_memory_move_cost\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG s390_reorg"}, {"sha": "824864fec974f0a2439e85deaa8406bcfc276920", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccaed3ba91952bdc19aecce21d49714c5599ad2d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=ccaed3ba91952bdc19aecce21d49714c5599ad2d", "patch": "@@ -780,18 +780,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Relative costs of operations.  */\n \n-/* On s390, copy between fprs and gprs is expensive.  */\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)                        \\\n-  ((   (   reg_classes_intersect_p ((CLASS1), GENERAL_REGS)\t\t\\\n-        && reg_classes_intersect_p ((CLASS2), FP_REGS))\t\t\t\\\n-    || (   reg_classes_intersect_p ((CLASS1), FP_REGS)\t\t\t\\\n-        && reg_classes_intersect_p ((CLASS2), GENERAL_REGS))) ? 10 : 1)\n-\n-/* A C expression for the cost of moving data of mode M between a\n-   register and memory.  A value of 2 is the default; this cost is\n-   relative to those in `REGISTER_MOVE_COST'.  */\n-#define MEMORY_MOVE_COST(M, C, I) 1\n-\n /* A C expression for the cost of a branch instruction.  A value of 1\n    is the default; other values are interpreted relative to that.  */\n #define BRANCH_COST(speed_p, predictable_p) 1"}]}