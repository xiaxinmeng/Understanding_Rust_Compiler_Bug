{"sha": "60c9835ecc279cb9511b2ed79a3770e3be542d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjOTgzNWVjYzI3OWNiOTUxMWIyZWQ3OWEzNzcwZTNiZTU0MmQxZQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-08T09:52:03Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-08T09:52:03Z"}, "message": "(perform_*): Move to i386/perform.h.\n\nInclude i386/perform.h.\n\nFrom-SVN: r3155", "tree": {"sha": "0ac48e52370afef05d1811656c186cf69a76b818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac48e52370afef05d1811656c186cf69a76b818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c9835ecc279cb9511b2ed79a3770e3be542d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c9835ecc279cb9511b2ed79a3770e3be542d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c9835ecc279cb9511b2ed79a3770e3be542d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c9835ecc279cb9511b2ed79a3770e3be542d1e/comments", "author": null, "committer": null, "parents": [{"sha": "37d7333eae1b52c1b24ef34fe2d74093cadfe1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d7333eae1b52c1b24ef34fe2d74093cadfe1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d7333eae1b52c1b24ef34fe2d74093cadfe1d6"}], "stats": {"total": 229, "additions": 9, "deletions": 220}, "files": [{"sha": "7fd674d37650771b31c12f55db1237900d61969b", "filename": "gcc/config/i386/386bsd.h", "status": "modified", "additions": 3, "deletions": 76, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2F386bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2F386bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2F386bsd.h?ref=60c9835ecc279cb9511b2ed79a3770e3be542d1e", "patch": "@@ -5,6 +5,9 @@\n \n #include \"i386/gstabs.h\"\n \n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\"\n+\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dunix -Di386 -D____386BSD____ -D__386BSD__ -DBSD_NET2\"\n \n@@ -57,82 +60,6 @@\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \f\n-/* Defines to be able to build libgcc.a with GCC.\n-   These are the same as in i386mach.h.  */\n-\n-/* It might seem that these are not important, since gcc 2 will never\n-   call libgcc for these functions.  But programs might be linked with\n-   code compiled by gcc 1, and then these will be used.  */\n-\n-/* The arg names used to be a and b, but `a' appears inside strings\n-   and that confuses non-ANSI cpp.  */\n-\n-#define perform_udivsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_divsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1)); \\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_umodsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1), \"d\" (dx)); \\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_modsi3(arg0,arg1)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = arg0;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (arg1)); \\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-\n-#define perform_fixdfsi(arg0)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  auto unsigned short ostatus;\t\t\t\t\t\t\\\n-  auto unsigned short nstatus;\t\t\t\t\t\t\\\n-  auto int ret;\t\t\t\t\t\t\t\t\\\n-  auto double tmp;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n-  &nstatus;\t\t\t\t\t\t\t\t\\\n-  &ret;\t\t\t\t\t\t\t\t\t\\\n-  &tmp;\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n-  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n-  tmp = arg0;\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n-  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  return ret;\t\t\t\t\t\t\t\t\\\n-}\n-\n /* The following macros are stolen from i386v4.h */\n /* These have to be defined to get PIC code correct */\n "}, {"sha": "964f4518e1b2673b013b0df71a6bdba4da089f88", "filename": "gcc/config/i386/mach.h", "status": "modified", "additions": 3, "deletions": 71, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2Fmach.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2Fmach.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmach.h?ref=60c9835ecc279cb9511b2ed79a3770e3be542d1e", "patch": "@@ -6,6 +6,9 @@\n \n #include \"i386/gstabs.h\"\n \n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\"\n+\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dunix -Di386 -DMACH\"\n \n@@ -14,74 +17,3 @@\n \n /* Make stddef.h agree with types.h.  */\n #define SIZE_TYPE \"long int\"\n-\f\n-/* Defines to be able to build libgcc.a with GCC.  */\n-\n-/* It might seem that these are not important, since gcc 2 will never\n-   call libgcc for these functions.  But programs might be linked with\n-   code compiled by gcc 1, and then these will be used.  */\n-\n-#define perform_udivsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_divsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_umodsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_modsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_fixdfsi(a)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  auto unsigned short ostatus;\t\t\t\t\t\t\\\n-  auto unsigned short nstatus;\t\t\t\t\t\t\\\n-  auto int ret;\t\t\t\t\t\t\t\t\\\n-  auto double tmp;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n-  &nstatus;\t\t\t\t\t\t\t\t\\\n-  &ret;\t\t\t\t\t\t\t\t\t\\\n-  &tmp;\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n-  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n-  tmp = a;\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n-  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  return ret;\t\t\t\t\t\t\t\t\\\n-}"}, {"sha": "abd7d4057a82b436724b6e3a6e25beded6861798", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c9835ecc279cb9511b2ed79a3770e3be542d1e/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=60c9835ecc279cb9511b2ed79a3770e3be542d1e", "patch": "@@ -24,6 +24,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"halfpic.h\"\n #include \"i386/gstabs.h\"\n \n+/* Get perform_* macros to build libgcc.a.  */\n+#include \"i386/perform.h\"\n+\n #define OSF_OS\n \n #undef  WORD_SWITCH_TAKES_ARG\n@@ -372,76 +375,3 @@ while (0)\n \n /* Generate calls to memcpy, etc., not bcopy, etc. */\n #define TARGET_MEM_FUNCTIONS\n-\n-\n-\f\n-/* Defines to be able to build libgcc.a with GCC.  */\n-\n-/* It might seem that these are not important, since gcc 2 will never\n-   call libgcc for these functions.  But programs might be linked with\n-   code compiled by gcc 1, and then these will be used.  */\n-\n-#define perform_udivsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_divsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n-  return ax;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_umodsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  dx = 0;\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_modsi3(a,b)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n-  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  ax = a;\t\t\t\t\t\t\t\t\\\n-  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n-  return dx;\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define perform_fixdfsi(a)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  auto unsigned short ostatus;\t\t\t\t\t\t\\\n-  auto unsigned short nstatus;\t\t\t\t\t\t\\\n-  auto int ret;\t\t\t\t\t\t\t\t\\\n-  auto double tmp;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n-  &nstatus;\t\t\t\t\t\t\t\t\\\n-  &ret;\t\t\t\t\t\t\t\t\t\\\n-  &tmp;\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n-  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n-  tmp = a;\t\t\t\t\t\t\t\t\\\n-  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n-  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n-  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  return ret;\t\t\t\t\t\t\t\t\\\n-}"}]}